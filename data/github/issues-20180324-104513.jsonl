{"reactions": {}, "text": "Finally implemented @jeremy's suggestion here https://github.com/rails/rails/pull/5950#issuecomment-5591330\n\nThis patch adds a chainable mode to `AR::Relation` for new AR `not`, `like`, and `not_like` query methods. \n\nexamples:\n\n``` ruby\nModel.where.not field: nil\n#=> \"SELECT * FROM models WHERE field IS NOT NULL\n\nModel.where.like name: 'Jeremy%'\n#=> \"SELECT * FROM models WHERE name LIKE 'Jeremy%'\n```\n", "labels": ["activerecord"], "number": 8332, "updated_at": "2014-06-13 06:37:41", "user": 11493, "closed_at": "2012-12-07 03:10:59", "id": 8709208, "title": "Relation.where with no args can be chained with not, like, and not_like", "url": "https://api.github.com/repos/rails/rails/issues/8332", "created_at": "2012-11-27 07:22:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10753909", "text": "Looks awesome :+1::heart:, thanks @amatsuda.\n\nWe'll probably need a changelog entry and some guides updates for that, let me know if you need help with anything.\n", "created_at": "2012-11-27 11:06:44", "user": 26328, "id": 10753909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10754953", "text": "Oh, this feature is amazing. Thanks!\n\nOne question, couldn't we implement it not using mixins? Something like:\n\n```\nclass WhereChain\n  def initialize(scope)\n    @scope = scope\n  end\n\n  def not_like(conditions)\n    @scope.where(handle(conditions))\n  end\nend\n\ndef where(opts)\n  if opts.nil?\n    WhereChain.new(spawn)\n  elsif opts.blank?\n    self\n  else\n    spawn.where!(opts, *rest)\n  end\nend\n```\n\nThe downside of using mixins is that `not` will not be available in the relation until the end of times. So one can effectively do: `where.not().order.not()`. Using a class clears this up, but requires using `where` before each `not` and so forth.\n", "created_at": "2012-11-27 11:48:00", "user": 9582, "id": 10754953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10756248", "text": "@carlosantoniodasilva Alright. I will work on more documentations :)\n\n@josevalim I just wanted to always keep the returned Relation as an absolute Relation, for example responds to `all` and `to_sql` and everything, because I thought that's the beauty of `ActiveRecord::Relation`.\nBut it's OK to change the behaviour if you core team guys prefer simpler implementation.\n", "created_at": "2012-11-27 12:39:55", "user": 11493, "id": 10756248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10756302", "text": "@amatsuda ah, I see what you mean. Yes, you are correct, my proposal is not going to work as expected. :shipit:\n", "created_at": "2012-11-27 12:42:09", "user": 9582, "id": 10756302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10756431", "text": "Wait, actually, my proposal is still going to return a relation, except when you call `.where` without any argument and do not follow it by predicate like `.not`. Which seems acceptable in my opinion. :)\n\nIn this case, I would indeed prefer to go with the simpler implementation since it also won't permanently pollute the relation.\n\n/cc @jonleighton @jeremy what do you think?\n", "created_at": "2012-11-27 12:46:58", "user": 9582, "id": 10756431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10761897", "text": "Lovely :heart: Agree with treating `WhereChain` as a builder object. Its responsibility is to construct a where clause and return a new relation, not to act as a relation itself. Limiting its API to `not`, `like`, etc is a positive thing.\n", "created_at": "2012-11-27 15:28:06", "user": 199, "id": 10761897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10782355", "text": "This looks good to me. Agree about using a builder object.\n", "created_at": "2012-11-27 23:20:28", "user": 1979, "id": 10782355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10837909", "text": "@amatsuda I have edited your code following the suggestion by @josevalim so WhereChain is now a class with a builder, rather than a mixin. I have also added documentation and edited the CHANGELOG. It's all in this new pull request: https://github.com/rails/rails/pull/8365\n\n@josevalim I think that, after my commit, it becomes clearer how to chain those three new methods. If you agree, I would like to make it even clearer by explicitly raising an `ActiveRecord::StatementInvalid` if one of those methods is used without being preceded by `where`, e.g.:\n\n```\nPost.not(name: 'Jose')\n```\n\nRight now, the previous line would just raise a generic error saying that the method `not` is not defined on Post. The same for `Post.like(conditions)` and `Post.not_like(conditions)`.\n\nFinally, I'd like to draw your attention to this required change in the test: https://github.com/claudiob/rails/commit/be71e1a7a1048f1dfa68bf73a487228f251b7be5#L2L302. \nIn other words, calling `Post.where(nil)` now is equivalent to `Post.where`, which is not a no-op anymore, but instead creates an instance of `WhereChain` to be chained with `not`, `like`, or `not_like`. \nIs this the behavior you were looking for? Or would you rather still have `Post.where(nil)` equivalent to `Post.where(\"\")`?\n", "created_at": "2012-11-29 07:37:02", "user": 10076, "id": 10837909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10850945", "text": "Seems good to me.\n\n@amatsuda we will need changelog entry and updates on the guides.\n\n@josevalim @jonleighton anything else?\n", "created_at": "2012-11-29 15:20:10", "user": 47848, "id": 10850945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10854786", "text": "Just `push -f`ed some fixes suggested by @josevalim and @carlosantoniodasilva, and a bit of documentations.\n\n@claudiob Your version would not work with varargs, e.g.:\n`User.where.not('name = ?', 'Tenderlove')`\nBut thank you for your help anyway :) I actually took your test fix.\n", "created_at": "2012-11-29 16:24:16", "user": 11493, "id": 10854786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10854996", "text": "Thanks @amatsuda :+1:\n", "created_at": "2012-11-29 16:28:36", "user": 26328, "id": 10854996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10858096", "text": "@amatsuda I thought about that, but then again, why would `not` support varargs, and `like`, `not_like` not?\nIf you can write:\n\n```\nUser.where.not('name = ?', 'Tenderlove')  # instead of User.where.not(name: 'tenderlove')\n```\n\nthen shouldn't you also be able to write the following?\n\n```\nUser.where.like('name = ?', 'tender%')  # instead of User.where.like(name: 'tender%')\n```\n\nIn other words, should `not`, `like`, and `not_like` parse the arguments in the same way as `where` does or not?\nIf this is the case, I suggest we add more tests to indicate all these variations.\n\nI also think it wouldn't hurt to restore this test: https://github.com/claudiob/rails/commit/be71e1a7a1048f1dfa68bf73a487228f251b7be5#L4R89 or at least something that makes clear what happens if you call `where` with blank conditions.\n\n@carlosantoniodasilva I understand your suggestion, but before delving into coding that I would like to know what is the most desired behavior. What makes most sense to you? That `where(nil)` should be treated as `where` or as `where(\"\")`? Personally, I vote for the latter, and _force_ coders not to pass any argument at all if they want to chain `where` with `not`, `like`, or `not_like`. I don't see the case where someone would need to write:\n\n```\nUser.where(nil).not(name: 'John')\n```\n\nso personally I would keep the old behavior in this case (having `User.where(nil) == User.all`) and only create a `WhereChain` if `where` is called with no arguments at all. What's the opinion of Rails core members?\n", "created_at": "2012-11-29 17:39:20", "user": 10076, "id": 10858096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10962354", "text": "@josevalim @rafaelfranca any opinion on the comment above?\n", "created_at": "2012-12-03 17:22:47", "user": 10076, "id": 10962354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11115475", "text": "@claudiob answering your question, to me, `where(nil)` shouldn't change its behavior with the introduction of this feature.\n\nAbout raising another/specific error, I think a `NoMethodError` should be clear enough, since the docs should explain that those methods should be only available chaining where with no args.\n", "created_at": "2012-12-07 02:11:54", "user": 26328, "id": 11115475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11117633", "text": "@amatsuda thank you :green_heart::yellow_heart::heart::purple_heart::blue_heart:\n\n@claudiob please feel free to improve the test coverage with other scenarios as you suggest, would be more than welcome. \n\nI've reverted back the `where(nil)` change in 6ba0f97 to avoid regressions. Let me know about any feedback, thanks!\n\n_(apparently github decided to point the linked commits only to my fork since I pushed there first, dunno why ;)_\n", "created_at": "2012-12-07 03:15:22", "user": 26328, "id": 11117633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11124020", "text": "@carlosantoniodasilva Using the :chain symbol as a default looks great! I just added a new pull request to have the RDOC match your change: https://github.com/rails/rails/pull/8445\n", "created_at": "2012-12-07 09:34:41", "user": 10076, "id": 11124020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11124635", "text": "@carlosantoniodasilva I have one more doubt on this commit. Because of the code at https://github.com/carlosantoniodasilva/rails/commit/23b9cc84230042aaf7f824d70e010d7678350ec3#L1R32 , `not` accepts conditions **in three formats**: Hash, String and Array, so these lines are equivalent:\n\n```\nPost.where.not(title: 'hello')\nPost.where.not(\"title = 'hello'\")\nPost.where.not(['title = ?', 'hello'])\n```\n\nMy _doubt_ (also for @amatsuda) is the following: **why** do we allow `not` to accept conditions in three formats, whereas we only allow the Hash format for `like` and `not_like`?\n\nI think that we should **keep coherence among** the WhereChain methods: they should all accept the same types of parameters. Therefore, I see two options:\n\n1) removing support for String and Array conditions from `not`\n\n2) adding support for String and Array conditions to `like` and `not_like`.\n\n@carlosantoniodasilva and @amatsuda what is your opinion on this?\n\n---\n\nPersonally, I'd vote for option 1) since I don't see a big advantage in writing code like:\n\n```\nPost.where.like('name' = 'jon%')\n```\n\nor:\n\n```\nPost.where.like(['name = ?', 'jon%'])\n```\n\nrather than:\n\n```\nPost.where('name like \"jon%\"')\n```\n\nImplementing this support would also be cumbersome, since we would have to transform the equal sign in `'name' = 'jon%'` into a `LIKE` SQL statement.\n", "created_at": "2012-12-07 09:58:26", "user": 10076, "id": 11124635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11126645", "text": "I'm not sure about removing the other types from `where.not`, since they're already supported without any more work, whereas adding similar support to the other methods could be harder, even though I see your point about making the methods coherent. I don't have a strong opinion on this, I think I'd rather leave them as is, but lets get more feedback on your questions.\n\n/cc @amatsuda @rafaelfranca @josevalim @jeremy @jonleighton \n", "created_at": "2012-12-07 11:21:37", "user": 26328, "id": 11126645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11127957", "text": "I think it is fine as it is.\n", "created_at": "2012-12-07 12:18:04", "user": 47848, "id": 11127957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11134478", "text": "guys, taking the opportunity, i guess it's time to add support to Arel::Nodes::GreaterThan, Arel::Nodes::GreaterThanOrEqual, Arel::Nodes::LessThan and Arel::Nodes::LessThanOrEqual using the amazing WhereChain class.\n", "created_at": "2012-12-07 15:43:44", "user": 13856, "id": 11134478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11137755", "text": "@rafaelfranca and @carlosantoniodasilva If you think that it's fine leaving things as they are, I suggest we document this discrepancy in the formats of conditions accepted by `not`, `like` and `not_like`.\n\nI have created a pull request with this goal: https://github.com/rails/rails/pull/8452\n", "created_at": "2012-12-07 17:07:50", "user": 10076, "id": 11137755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11138467", "text": "@claudiob \n\n```\nPost.where.like('title = ?', 'hello%')\n```\n\ndoesn't really make sense.\n`LIKE` and `=` would never go together in one SQL query.\n\nOTOH `NOT` + `=` is possible to be combined, and together it should be meaning something different from `<>`.\nI mean,\n\n```\nSELECT * FROM posts WHERE title <> 'hello'\n```\n\nand\n\n```\nSELECT * FROM posts WHERE NOT (title = 'hello')\n```\n\nare not the same.\n\nFor more example, think about the difference between these two queries:\n\n``` ruby\nPost.where.not(title: 'hello', name: 'jon')\n```\n\n``` ruby\nPost.where.not(\"title = 'hello' and name = 'jon'\")\n```\n\nSo,\n\n> these lines are equivalent\n\nthis is false. These are different, and we need both.\n", "created_at": "2012-12-07 17:26:15", "user": 11493, "id": 11138467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11138557", "text": "Following comments by @jweslley and @pwightman I have added inequalities to WhereChain in this pull request: https://github.com/rails/rails/pull/8453\n\nRegarding this commit, I have a couple of questions for @rafaelfranca and @carlosantoniodasilva : \n- are you okay with aliasing each method to exist both in the short and long form, e.g.: `greater_than` and `gt`? I feel that users will expect both formats\n- most of the methods inside `WhereChain` look similar: do you like them as they are (separate method that repeat some code), or would your rather have them refactored with some metaprogramming?\n", "created_at": "2012-12-07 17:28:32", "user": 10076, "id": 11138557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11138789", "text": "@claudiob I don't know yet if it's going to be accepted, but if it is, I think it's fine for the methods to be aliased. I also don't think there's need for refactoring through metaprogramming yet, even though there seems to be a bit of repetition, it's very clear what each piece of code does, they're very small, and we can add as much docs as we want this way :). Thanks!\n", "created_at": "2012-12-07 17:34:04", "user": 26328, "id": 11138789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11138829", "text": "@amatsuda Oh, you are right! I didn't see that, because all the examples that pass conditions as a hash only have **one** key/value pair! Maybe we can add some documentation or test where a WhereChain methods is called with more than one key/value pair, like in your example?\n\n```\nPost.where.not(title: 'hello', name: 'jon')\n```\n", "created_at": "2012-12-07 17:35:07", "user": 10076, "id": 11138829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11305753", "text": "Just for reference in this pull request, support for .like and .not_like was later removed in https://github.com/rails/rails/commit/8d02afeaee8993bd0fde69687fdd9bf30921e805\n", "created_at": "2012-12-12 19:36:13", "user": 10076, "id": 11305753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18808987", "text": "Wouldn’t it be cleaner API-wise to just have:\n\n``` ruby\nPost.where(title: 'Foo').first\nPost.not(title: 'Foo').first\n```\n\nSince `like` and `not_like` have been discarded, I don’t see the value in having `where` with no argument returning a `WhereChain`.\n", "created_at": "2013-06-02 16:31:11", "user": 166943, "id": 18808987}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In a form, attributes might have validations, like :presence => true.\n\nValidation Hints would tell you 'this field can not be blank' or similar text that is derived from the Validator or from text you provide. \n\nIt can be used to display tooltips on forms so the user know what or what not to fill in before he or she submits.\n\nThe messages are configurable, and translatable.\n\n```\nclass Person\n    include ActiveModel::Validations\n\n    attr_accessor :first_name, :last_name\n\n    validates :name, :presence => true\n    validates :last_name, :length => { :within => 1...5 }\nend\n\nPerson.new.hints[:first_name] => [\"can't be blank\"]\nPerson.new.hints[:last_name] => [\"must not be shorter than 1 characters\", \"must not be longer than 4 characters\"]\nPerson.new.hints.messages => {:id=>[], [\"must not be shorter than 1 characters\", \"must not be longer than 4 characters\"], :password=>[\"must not.....\"], :name => [\"can't be blank\"] }\n```\n", "labels": ["activemodel"], "number": 8602, "updated_at": "2014-06-19 14:14:13", "user": 2784, "closed_at": "2013-01-02 17:13:28", "id": 9504757, "title": "Validation hints give hints about what to submit", "url": "https://api.github.com/repos/rails/rails/issues/8602", "created_at": "2012-12-24 19:40:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11665360", "text": "I don't think this belongs to Rails. There are gems that do this. And you can do the same using the reflection API\n", "created_at": "2012-12-24 20:03:35", "user": 47848, "id": 11665360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11665412", "text": "BTW, thank you for the pull request.\n", "created_at": "2012-12-24 20:10:49", "user": 47848, "id": 11665412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11665569", "text": "Well, no thanks. This is like a day work and then snipped out by 1 person 20 minutes later. There's really no fun in that at all. Well, it won't happen again, you can be sure of that.\n", "created_at": "2012-12-24 20:31:53", "user": 2784, "id": 11665569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11665576", "text": "@acesuares if you like more feedback I can reopen, we are not finish yet :wink: \n", "created_at": "2012-12-24 20:33:23", "user": 47848, "id": 11665576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666005", "text": "Lets to my points about this patch:\n1. Not every applications would be beneficed by this feature.\n2. Reading the code it is clearly a copy of the errors feature (what could mean you can use it instead of adding a new structure to Rails)\n3. You can archive the same thing using the reflection API to get what validations the field has and building the hints without need to create a new structure to it on the framework\n4. There are gems doing this without use the validations API that, IMO, is not the right way to do it https://github.com/plataformatec/simple_form/blob/master/lib/simple_form/components/hints.rb https://github.com/justinfrench/formtastic\n", "created_at": "2012-12-24 21:12:05", "user": 47848, "id": 11666005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666018", "text": "And sorry about the premature closing.\n", "created_at": "2012-12-24 21:13:52", "user": 47848, "id": 11666018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666221", "text": "I just saw you already made a gem for this feature.\n\nhttps://github.com/acesuares/validation_hints\n\nI still think it a good feature for a gem, but not for the framework.\n\ncc @jeremy @carlosantoniodasilva @spastorino \n", "created_at": "2012-12-24 21:31:53", "user": 47848, "id": 11666221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666248", "text": "@rafaelfranca just curious, can you provide an small example of how to achieve this using  reflection API instead of copying Errors module?\n", "created_at": "2012-12-24 21:33:59", "user": 160941, "id": 11666248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666315", "text": "Sure.\n\nSomething like this:\n\n``` ruby\ndef hints_for(object, attribute)\n  object.class.validators_on(attribute).map do |validator|\n    generate_message_for(validator)\n  end\nend\n\nuser = User.new\nhints_for(user, :name)\n```\n", "created_at": "2012-12-24 21:40:21", "user": 47848, "id": 11666315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11666327", "text": "btw, I agree with @rafaelfranca I don't think this belongs to core for same reasons\n", "created_at": "2012-12-24 21:41:59", "user": 160941, "id": 11666327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11667681", "text": "as for reflection: it's really not the same.\n\nthe patch is using that technique, for simple cases.\n\nbut with hints, you can add messages that are hints and not errors.\n\nI hope I can explain this.\n\nAdding to hints, would give you a big area to talk to users, and those would be different things then reporting the error.\n\nalso, there is things like (in en.yml)\n    inclusion:\n        in: \"must be one of %{count}\"\n     associated: \"is invalid\"\n      uniqueness: \"must be unique\"\n      confirmation: \"doesn't match confirmation\"\n      acceptance: \"must be accepted\"\n\ncompared with\n\n```\n  inclusion: \"is not included in the list\"\n  exclusion: \"is reserved\"\n  invalid: \"is invalid\"\n  confirmation: \"doesn't match %{attribute}\"\n  accepted: \"must be accepted\"\n```\n\nFor example 'inclusion'.\nFor an error, you want 'Name is not included in the list'\nbut for a hint you want ' Select a Name from the list'\n\nI hope that is clear enough, it is the same for many other Validators.\n\nYou would need separate messages for hints and errors in many occasions.\n\nI agree, by far not all apps would benefit. But it wouldn't hurt either.\n\nI really don't care if you dont' want this in rails. I can live without it, and use the gem validation_hints. (but the other named gems could benefit from that directly!)\n\nI understand that there are much more pressing issues.\n\nBut I want to contribute to rails. Please do give me the benefit of the doubt, and needless to say I am very happy with Rafael's reactions after the close.\n\nI just want to be part of this. It took me 5 years to learn RoR and maybe I can do only one pull request per year. Dont dismiss it so easily ( but dismiss it by all means if it is not suitable).\n\nThx guys (and girls).\n\nOh and the not so DRY repeating of errors.rb. If I knew how to do that better, I'd do it; I think 80% of that file (errors.rb) could be factored out and just include it in errors.rb and hints.rb (add, delete, all that stuff).\n\n'night.\n\nAce\n", "created_at": "2012-12-25 01:11:16", "user": 2784, "id": 11667681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11675686", "text": "@acesuares thanks for your work! I can see applications making use of this feature but like @rafaelfranca and @guilleiguaran I don't think it should be a part of rails. This is something that can be easily added with a gem and should be available on demand and not by default.\n\nWe appreciate the time and work you put into making rails better. You can always use the [Rails Core Google Group](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core) to get feedback from the core team before implementing a PR. This can help you to get a feel if a particular feature should be in rails core or provided as a gem.\n", "created_at": "2012-12-25 19:52:42", "user": 5402, "id": 11675686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11814363", "text": "Thanks for all the feedback. I think someone can close the pull request now. \n", "created_at": "2013-01-02 16:40:09", "user": 2784, "id": 11814363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11830770", "text": "Agreed on not adding it to Rails itself. \n\nAs a side note, one could easily get a `Hints` class based off `Errors` if we extracted out a `i18n_scope` or similar method in `Errors`, that'd default to `:errors`, and used that in `generate_message`. With this one could do:\n\n``` ruby\nmodule ActiveModel\n  class Hints < Errors\n    def i18n_scope\n      :hints\n    end\n  end\nend\n\nclass Person\n  def hints\n    @hints ||= ActiveModel::Hints.new(self)\n  end\nend\n\n# locale example:\n    # * <tt>activemodel.hints.models.admin.attributes.title.blank</tt>\n    # * <tt>activemodel.hints.models.admin.blank</tt>\n    # * <tt>activemodel.hints.models.user.attributes.title.blank</tt>\n    # * <tt>activemodel.hints.models.user.blank</tt>\n    # * <tt>activemodel.hints.messages.blank</tt>\n    # * <tt>hints.attributes.title.blank</tt>\n    # * <tt>hints.messages.blank</tt>\n```\n\nAnd that's it. Unfortunately `Errors` has a bit more functionality than it should, so `Hints` would get that. Anyway, thanks @acesuares \n", "created_at": "2013-01-03 00:30:37", "user": 26328, "id": 11830770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11831206", "text": "That seems a good way to do that, really. It would enable communicating with the user in a very simple way, and not add too much 'structures' to rails itself.\n", "created_at": "2013-01-03 00:50:24", "user": 2784, "id": 11831206}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When investigating #9491, I found another problem.\n\nIf we execute added testcase without this fix, you can see\n\n```\nundefined method `result' for #<NoMethodError:0x0000000377d8e8>\n```\n\nThis message is wrong, because we expect TypeError (original exception).\n\nI think this issue was introduced since my PR 2fe281323c8ccebc592d423b69b5b03ac9254b29 .\n", "labels": [], "number": 9493, "updated_at": "2014-06-26 19:50:12", "user": 13426, "closed_at": "2013-02-28 21:32:37", "id": 11509124, "title": "Wrong exception is occured when raising no translatable exception", "url": "https://api.github.com/repos/rails/rails/issues/9493", "created_at": "2013-02-28 16:59:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14246142", "text": "Seems good. Could you add a changelog entry?\n", "created_at": "2013-02-28 17:42:41", "user": 47848, "id": 14246142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14246523", "text": "I'm adding a changelog entry... done.\n", "created_at": "2013-02-28 17:49:11", "user": 13426, "id": 14246523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14259054", "text": "Thank you\n", "created_at": "2013-02-28 21:35:26", "user": 47848, "id": 14259054}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've been working on a much higher performance replacement for `ActiveSupport::Cache::Store`, and noticed some issues with the code that converts `ActiveSupport::Cache::Entry`s from the rails3 format to the rails4 format.\n\nSome things I've noticed:\n1. Changing the format at all is a huge problem for those of us who aren't comfortable transitioning to rails4 wholesale. With the way things are setup, if you want to run a rails3 instance next to a rails4 instance, they have to be connected to separate caches or otherwise namespaced.\n2. Rails3's `AS::Cache::Entry` objects `Marshal.dump` the value in their constructor, whereas rails4's code seems to just expect the whole object to get serialized except in the case that it's compressed (which makes sense), but that's not accounted for in the conversion, so converted objects' values get returned as binary strings.\n\nAt the very least, we need to fix 2 (patch here: https://github.com/bitlove/rails/commit/26d6ae9533238683323a90675a53141c380c3d5c), and maybe it's too late for rails4, but removing `ActiveSupport::Cache::Entry` altogether would be a substantial performance boost and make new rails versions a lot less painful.\n", "labels": ["activesupport"], "number": 9494, "updated_at": "2013-04-16 22:14:30", "user": 37, "closed_at": "2013-04-16 22:14:30", "id": 11515861, "title": "ActiveSupport::Cache::Entry Conversion Problems", "url": "https://api.github.com/repos/rails/rails/issues/9494", "created_at": "2013-02-28 19:41:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14253549", "text": "Thank you for the report @jamesgolick.\n\nI added this issue to the 4.0.0 milestone and I calling @fxn since he has more knowledge about this feature.\n", "created_at": "2013-02-28 19:51:52", "user": 47848, "id": 14253549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14262742", "text": "```\nChanging the format at all is a huge problem for those of us who aren't comfortable\ntransitioning to rails4 wholesale. With the way things are setup, if you want to run a\nrails3 instance next to a rails4 instance, they have to be connected to separate caches\nor otherwise namespaced.\n```\n\nWe ran into this too. Gotta be careful to namespace the caches. As long as we're breaking the cache, I wish we'd go all the way and drop the cache entry wrapper.\n", "created_at": "2013-02-28 22:50:03", "user": 199, "id": 14262742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14262957", "text": "I would like to get rid of it too. I proposed that a while back in the -core mailing list and the current implementation is the outcome of that discussion: https://groups.google.com/d/topic/rubyonrails-core/_CLvFa57IZc/discussion.\n", "created_at": "2013-02-28 22:54:22", "user": 3387, "id": 14262957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14265143", "text": "FWIW, the discussion about overhead in that thread completely disregards the allocation/gc cost of having a wrapper class, not to mention the unnecessary calls to `Marshal.dump` in there (like to check the byte size of the serialized data).\n\nBesides, it's not clear to me that `Marshal.dump` is even a good idea in this context since `ActiveRecord`-related objects don't tend to handle getting `dump`/`load`ed very well.\n", "created_at": "2013-02-28 23:45:53", "user": 37, "id": 14265143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14265188", "text": "@jeremy +1. We could just stick a small binary header on the data for whatever metadata is necessary.\n", "created_at": "2013-02-28 23:47:07", "user": 37, "id": 14265188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14269876", "text": "Any metadata is a red flag. We use it for per-entry expiry and compression. The first is superfluous with an expiring store and the second should be cache-wide not per-entry.\n", "created_at": "2013-03-01 02:14:43", "user": 199, "id": 14269876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272506", "text": "I don't agree. People shouldn't have to completely clear their cache space to enable or disable compression. A 1 byte header is a completely reasonable way to indicate that a record is or isn't compressed.\n", "created_at": "2013-03-01 04:16:38", "user": 37, "id": 14272506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272536", "text": "example: what if you want to compress your cache_store backed sessions? Everybody has to get logged out?\n", "created_at": "2013-03-01 04:18:30", "user": 37, "id": 14272536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272883", "text": "Not memcache-wide. Cache object-wide. Look at how cookie jars are composed as an example of doing this well.\n", "created_at": "2013-03-01 04:39:30", "user": 199, "id": 14272883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14277038", "text": "If you have a bunch of existing uncompressed sessions in a memcached cluster, and you want to switch to using compression, and there's no metadata in the cache value, you have to wipe all the sessions, AND you have to flip the switch globally at the same moment.\n", "created_at": "2013-03-01 08:00:29", "user": 37, "id": 14277038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14278861", "text": "Yep, not saying that discussion is the final word, just giving context to show the pros and cons that were considered. Of course if the solution can be improved it should and we are open to revisit. I personally need to load all the context to reply properly, will followup as soon as possible.\n", "created_at": "2013-03-01 09:07:49", "user": 3387, "id": 14278861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14301242", "text": "@jamesgolick We're in agreement. Taking a tangent to look at \"if we designed this today...\" :grin:\n", "created_at": "2013-03-01 17:36:03", "user": 199, "id": 14301242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14301414", "text": "As far as what action we can take now, I'd prefer to keep the old Rails 3 entry. I don't feel the space savings justifies  having to split-brain the cache during a gradual upgrade.\n\n(Generally, it'd be helpful to have a transitional cache that reads/writes to a new cache but falls back to reading from the old cache and lazy-migrating to the new.)\n", "created_at": "2013-03-01 17:40:12", "user": 199, "id": 14301414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14303646", "text": "+1 on keeping the old `Entry`\n", "created_at": "2013-03-01 18:27:38", "user": 37, "id": 14303646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16124035", "text": "@jamesgolick ping. Can we move this forward?\n", "created_at": "2013-04-09 16:31:49", "user": 47848, "id": 16124035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16124953", "text": "The summary of the rationale behind the current patch is:\n- We want to support storing `nil` values.\n- As per metadata, `race_condition_ttl` is important for heavy loaded sites.\n\nSo, given that we cannot get rid of the proxy object, do an incremental improvement in RAM which is going to be a drop-in replacement for most websites.\n\nSavings may be noticeable depending on the kind of data being cached, because names are shorter, and ivars are created only if used, so not unnecessarily serialized.\n\nWhat about transition code for Rails 3?\n", "created_at": "2013-04-09 16:46:19", "user": 3387, "id": 16124953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16145124", "text": "@fxn All good (and welcome) improvements!\n\nThe sticky bit is how to handle an unforeseen bug after deploying a Rails 4 upgrade. If you roll back, your previous safe Rails 3 deploy turns out to be not-so-safe—it chokes on the new Rails 4 cache entries.\n\nThe safe path is to change the cache namespace and roll out with a cold cache. That's daunting: users hit a sluggish app, and it's very hard to gauge before/after app performance to check for regressions.\n\nAll told, the scales tip toward keeping a cache entry that Rails 3 can read. I _think_ that's limited to just preserving the longer ivar names.\n", "created_at": "2013-04-09 22:44:40", "user": 199, "id": 16145124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16145716", "text": "But if we apply that reasoning, then getting rid of `Entry` is neither an option, we are stuck with this `Entry` class as is forever!\n", "created_at": "2013-04-09 22:56:57", "user": 3387, "id": 16145716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16146066", "text": "Maybe we could write a new memcached store that does not use `Entry`? Then we could be more disruptive, do not support `nil` (in line with the cache store itself), and do not support `race_condition_ttl`... I don't know, we can choose the constraints.\n", "created_at": "2013-04-09 23:06:27", "user": 3387, "id": 16146066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16148859", "text": "Right - we're stuck with a backward and forward compatible `Entry` until we have a cache store that handles graceful migration from an old store to a new one. Sketching:\n\n``` ruby\nclass MigratingStore\n  def initialize(old_store, new_store)\n    @old, @new = old_store, new_store\n  end\n\n  def get(key)\n    @new.fetch key, @old.fetch(key)\n  end\n\n  def set(key, value)\n    @new.set key, value\n  end\nend\n```\n", "created_at": "2013-04-10 00:30:11", "user": 199, "id": 16148859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16149637", "text": "Alright!\n", "created_at": "2013-04-10 00:56:39", "user": 3387, "id": 16149637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16452542", "text": "So, this boils down to:\n- switch cache entry ivars back to long names\n- lazy-convert short ivar names (from betas) back to long names\n\nAnyone up for tackling that?\n", "created_at": "2013-04-16 15:46:38", "user": 199, "id": 16452542}], "assignees": [199, 199], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Summarize the gotchas encountered when upgrading Basecamp to rails4 + ruby2. \n", "labels": [], "number": 9495, "updated_at": "2014-06-26 19:50:15", "user": 402, "closed_at": "2013-02-28 22:01:32", "id": 11521457, "title": "Add some more documentation to the upgrade guide", "url": "https://api.github.com/repos/rails/rails/issues/9495", "created_at": "2013-02-28 21:57:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14260271", "text": "OMG!! Thank you @trevorturk :heart:\n\n@fxn do you want to do the sanity check? It seems good to me.\n", "created_at": "2013-02-28 21:59:41", "user": 47848, "id": 14260271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14260601", "text": ":heart: \n", "created_at": "2013-02-28 22:06:02", "user": 3387, "id": 14260601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14261011", "text": ":heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-02-28 22:14:14", "user": 26328, "id": 14261011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14325997", "text": ":heart:\n", "created_at": "2013-03-02 10:13:42", "user": 27786, "id": 14325997}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Relating to Rails 3-2-stable \n\nI believe the `config.reload_classes_only_on_change` option does not act as expected.\n\nCode starting here:\nhttps://github.com/rails/rails/blob/3-2-stable/railties/lib/rails/application/finisher.rb#L79\n\n``` ruby\nif config.reload_classes_only_on_change\n  reloader = config.file_watcher.new(*watchable_args, &callback)\n  self.reloaders << reloader\n  # We need to set a to_prepare callback regardless of the reloader result, i.e.\n  # models should be reloaded if any of the reloaders (i18n, routes) were updated.\n  ActionDispatch::Reloader.to_prepare(:prepend => true){ reloader.execute }\nelse\n  ActionDispatch::Reloader.to_cleanup(&callback)\nend\n```\n\nIs supposed to only reload dependencies if the mtimes of files have changed. That is what the class ActiveSupport::FileUpdateChecker provides as on of the default reloaders. \n\nBut `ActionDispatch::Reloader.to_prepare(:prepend => true){ reloader.execute }` that line will reload all the dependencies regardless if mtimes. \n\ndef execute \nhttps://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/file_update_checker.rb#L76\n\nI believe that line should be \n\n``` ruby\nActionDispatch::Reloader.to_prepare(:prepend => true){ reloader.execute_if_updated }\n```\n\ndef execute_if_updated\nhttps://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/file_update_checker.rb#L84\n\nThis way your application code is only reloaded if it has been updated. \n", "labels": [], "number": 9496, "updated_at": "2014-06-26 12:21:47", "user": 33638, "closed_at": "2013-03-27 05:11:42", "id": 11522210, "title": "config.reload_classes_only_on_change doesn't honor model mtimes", "url": "https://api.github.com/repos/rails/rails/issues/9496", "created_at": "2013-02-28 22:15:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345175", "text": "@tonyla is it possible to test this functionality, maybe creating two files, touching one and making sure only the one touched is updated in the reloader? I agree with your logic, but want this functionality tested. \n\nDoes the reloader behave the same in master? \n", "created_at": "2013-03-03 10:59:41", "user": 59744, "id": 14345175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14486182", "text": "@schneems \n\nThe reloader functionality is tested in this file https://github.com/rails/rails/blob/3-2-stable/activesupport/test/file_update_checker_test.rb \n\nDoes that cover what you were thinking? Or are you meaning a test that tests the reloader in context? Meaning testing of actual file reloading inside a rails environment.\n\nMaster does behave the exact same way:\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/application/finisher.rb#L87\n\nAs an anecdote this reduces my dev page loads from ~4s to < 1s. The first page load still takes 4s but each subsequent page load is < 1s. Has made a huge different in development speed in the fairly large rails app I work with. \n", "created_at": "2013-03-06 07:26:01", "user": 33638, "id": 14486182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15481514", "text": "This seems like a pretty important thing to fix for Rails 4 given other improvements in getting the dev environment to load quickly. What else is necessary for this to get fixed? Tests? A patch?\n", "created_at": "2013-03-26 19:11:14", "user": 4338, "id": 15481514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15482271", "text": "I can create what ever is needed, I'm just unsure of how to get this actually \"approved\". \n\nI've been using this on a forked version of rails and it speeds up development significantly. \n\nhttps://github.com/pingg-corp/rails/tree/v3.2.12-patched\n", "created_at": "2013-03-26 19:19:18", "user": 33638, "id": 15482271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15482460", "text": "> @tonyla is it possible to test this functionality, maybe creating two files, touching one and making sure only the one touched is updated in the reloader? I agree with your logic, but want this functionality tested.\n\nYou've obviously got a patch. I'd make a pull request referencing this issue with the relevant changes, plus tests. \n", "created_at": "2013-03-26 19:21:54", "user": 4338, "id": 15482460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15504731", "text": "I did some more digging and found out that the reloading behaviour was being caused by https://github.com/wavii/rails-dev-tweaks/pull/9 (A gem that I use). I'll detail the explanation below just in case it helps someone in the future.\n\nThe code does behave as expected but it is very deceiving when reading it. That is because the line \n\n``` ruby\nActionDispatch::Reloader.to_prepare(:prepend => true){ reloader.execute }\n```\n\nLooks like it will reload on every request. But reloaders are not actually run unless #reload_dependencies? is true.\n\n``` ruby\n    def reload_dependencies? #:nodoc:\n      config.reload_classes_only_on_change != true || reloaders.map(&:updated?).any?\n    end\n```\n\nAs you can see it checks to see if any reloader #updated?. It will not reload the code on ever request.\n", "created_at": "2013-03-27 05:11:42", "user": 33638, "id": 15504731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15535752", "text": "@josevalim could you take a look?\n", "created_at": "2013-03-27 16:52:55", "user": 47848, "id": 15535752}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It cannot find subclass because all classes are loaded automatically\nwhen it needs. So this way for development mode if we have:\n\n`models/person.rb`\n\n```\nclass Person < AR\nend\n```\n\n`models/user.rb`\n\n```\nclass User < Person\nend\n\nPerson.subclasses #=> will be []\nUser # => Try to load this model manually\nPerson.subclasses #=> will be [User]\n```\n\nAnd `Person.new(type: 'User')` will raise error `ActiveRecord::SubclassNotFound`\n", "labels": ["activerecord"], "number": 9497, "updated_at": "2014-06-26 15:54:14", "user": 414803, "closed_at": "2013-03-08 15:01:01", "id": 11522969, "title": "Fix ActiveRecord `subclass_from_attrs` when eager_load is false.", "url": "https://api.github.com/repos/rails/rails/issues/9497", "created_at": "2013-02-28 22:36:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345094", "text": "Needs tests and a rebase.\n", "created_at": "2013-03-03 10:51:50", "user": 59744, "id": 14345094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14351035", "text": "Rebased and test added. About `return`.. it's ok for me, but if you insist I'll remove, no problem :)\n", "created_at": "2013-03-03 17:48:05", "user": 414803, "id": 14351035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14486735", "text": "Rebased again, could anyone review this?\n", "created_at": "2013-03-06 07:47:05", "user": 414803, "id": 14486735}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI am trying to get 3.2.13rc1 working with my application. I am now getting the following exception when performing a rake assets:precompile.\n\n```\nrake aborted!\ninvalid byte sequence in US-ASCII\n  (in /Users/nick/rxg2/console/vendor/cache/active_scaffold-05a44c203be0/app/assets/javascripts/jquery/date_picker_bridge.js.erb)\n```\n\nI realize this may just be a problem with the particular ERB file, perhaps it needs a utf-8 tag, but I am concerned that this is now happening after trying 3.2.13rc1. This does not happen under 3.2.12, so I wonder if this is a regression of some kind or a \"feature\"?\n\nI also opened an issue with the author of the gem that is causing the problem, which is here: https://github.com/activescaffold/active_scaffold/issues/249\n\nDoes anyone have an idea what commit in 3.2.13 could be triggering this issue? Thanks.\n", "labels": ["activesupport", "regression"], "number": 9498, "updated_at": "2013-08-25 23:02:12", "user": 12778, "closed_at": "2013-05-09 00:06:01", "id": 11525734, "title": "3.2.13rc1 regression? invalid byte sequence in US-ASCII during sprockets compile", "url": "https://api.github.com/repos/rails/rails/issues/9498", "created_at": "2013-02-28 23:55:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14265697", "text": "Adding the following at the top of the JS/ERB file seems to fix the problem.\n\n```\n<%# encoding: utf-8 %>\n```\n\nLeaving this issue open because I would like to know what change triggered this issue and if it is perhaps some kind of regression.\n", "created_at": "2013-03-01 00:00:40", "user": 12778, "id": 14265697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14265773", "text": "FWIW, here is the content of the file.\n\n``` ruby\n<%# encoding: utf-8 %>\n<%= ActiveScaffold::Bridges[:date_picker].localization %>\njQuery(document).on(\"focus\", \"input.date_picker\", function(){\n  var date_picker = jQuery(this);\n  if (typeof(date_picker.datepicker) == 'function') {\n    if (!date_picker.hasClass('hasDatepicker')) {\n      date_picker.datepicker();\n      date_picker.trigger('focus');\n    }\n  }\n  return true;\n});\n\njQuery(document).on(\"focus\", \"input.datetime_picker\", function(){\n  var date_picker = jQuery(this);\n  if (typeof(date_picker.datetimepicker) == 'function') {\n    if (!date_picker.hasClass('hasDatepicker')) {\n      date_picker.datetimepicker();\n      date_picker.trigger('focus');\n    }\n  }\n  return true;\n});\n```\n", "created_at": "2013-03-01 00:02:18", "user": 12778, "id": 14265773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14325911", "text": "I don't believe this is a Rails issue. Still, though, in theory it could be. Which Ruby are you using? It's the same before and after?\n", "created_at": "2013-03-02 10:04:07", "user": 27786, "id": 14325911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14331316", "text": "Yes, ruby is the same as before.\n\nruby 1.9.3p327 (2012-11-10 revision 37606) [x86_64-darwin12.2.1]\n\nThe problem for me has been adequately corrected by having the gem author add the utf8 encoding tag to the top of the file. Its just peculiar that this started happening after the switch to .13rc1. Feel free to close it if you don't think its a rails problem.\n", "created_at": "2013-03-02 17:07:06", "user": 12778, "id": 14331316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14331358", "text": "Ah. Yes, that's an issue with the gem, then. Thanks for reporting anyway!\n", "created_at": "2013-03-02 17:09:23", "user": 27786, "id": 14331358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15136427", "text": "FYI, [this](https://github.com/rails/rails/commit/815a9431ab61376a7e8e1bdff21f87bc557992f8) is likely the commit that caused this, based on tracking down the source of a [similar issue](https://github.com/fnando/i18n-js/issues/137).\n\nChanging the encoding of a string returned by core APIs such as `to_json` can have wide-ranging effects and is probably best avoided in patch releases.\n", "created_at": "2013-03-19 19:08:57", "user": 98601, "id": 15136427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15136645", "text": "Agree. I'll reopen and mark as regression\n", "created_at": "2013-03-19 19:12:43", "user": 47848, "id": 15136645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15137025", "text": "Simplified reduction: https://gist.github.com/jfirebaugh/5199261\n", "created_at": "2013-03-19 19:19:38", "user": 98601, "id": 15137025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15137309", "text": "So in fact `String#to_json` has always returned a UTF-8 string -- the behavioral change is due to how the encoding of the string interpolation done in [`Hash#encode_json`](https://github.com/rails/rails/blob/a6c5ee3032c50720760f7a4c895206b4205836c0/activesupport/lib/active_support/json/encoding.rb#L306) is determined. In 3.2.12, the interpolated strings were always US-ASCII safe because any 8-bit characters had been JSON-escaped, and thus the resulting string was US-ASCII. In 3.2.13, the lack of JSON escaping forces the result to be UTF-8.\n", "created_at": "2013-03-19 19:24:17", "user": 98601, "id": 15137309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139808", "text": "Hm. JSON is always supposed to be UTF-8, so that's really our bad... :/\n", "created_at": "2013-03-19 20:09:22", "user": 27786, "id": 15139808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15141549", "text": "If anyone needs needs a quick temporary fix until this is sorted out this should help: https://gist.github.com/sandstrom/5199891\n", "created_at": "2013-03-19 20:38:55", "user": 122287, "id": 15141549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15142224", "text": "Thanks for the help everyone. We simply used the fix from @courtland as a temporary solution.\n", "created_at": "2013-03-19 20:49:58", "user": 634902, "id": 15142224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15206604", "text": "Why are things like this a problem over and over again in patch/security releases?\nCan we please make releases with only security things addressed?\n", "created_at": "2013-03-20 22:02:42", "user": 5873, "id": 15206604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15208861", "text": "@jweiss Yes. Previous security releases have been security-only. We'll stick with that for future releases.\n", "created_at": "2013-03-20 22:49:54", "user": 199, "id": 15208861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15209140", "text": "@jeremy thank you - much appreciated!\n", "created_at": "2013-03-20 22:55:29", "user": 5873, "id": 15209140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23237331", "text": "Can anyone suggest how we are supposed to interact with emoji characters now? Here is what it looks like in 3.2.13:\n![working - 3 2 13](https://f.cloud.github.com/assets/58332/1023249/17c7f70c-0dda-11e3-96ae-df9dc0e88d09.png)\n\nHere is what it looks like in 3.2.14 as a result of this change:\n![broken - 3 2 14](https://f.cloud.github.com/assets/58332/1023255/3d8a282a-0dda-11e3-8baf-536542d9f476.png)\n\nWhat is the best practice for returning JSON strings with emoji characters in 3.1.14 now?\n\nThanks!\n", "created_at": "2013-08-25 23:02:12", "user": 58332, "id": 23237331}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Check at association reader that record is inverted and should not be reloaded because of stale was changed at target record\n", "labels": ["activerecord"], "number": 9499, "updated_at": "2014-06-17 22:08:03", "user": 5091, "closed_at": "2013-10-14 15:18:05", "id": 11527725, "title": "Inversed instance should not be reloaded after stale state was changed", "url": "https://api.github.com/repos/rails/rails/issues/9499", "created_at": "2013-03-01 01:11:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14326061", "text": "/cc @steveklabnik\n", "created_at": "2013-03-02 10:19:27", "user": 5091, "id": 14326061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328704", "text": "Honestly, I'm really bad with ActiveRecord; I generally leave these ones to @rafaelfranca or @johnleighton\n", "created_at": "2013-03-02 14:13:13", "user": 27786, "id": 14328704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14772404", "text": "Anyone can check that pull request and merge or reject it?\n\nThank you!\n", "created_at": "2013-03-12 12:31:25", "user": 5091, "id": 14772404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17606352", "text": "/cc @jonleighton @rafaelfranca \n\nAfter #9522 was merged to 4.0 I think this should be definitely be merged too.\n", "created_at": "2013-05-08 13:45:43", "user": 5091, "id": 17606352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17770900", "text": "Could you explain better what is the problem?\n", "created_at": "2013-05-12 01:47:07", "user": 47848, "id": 17770900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17776356", "text": "Inversed association is being reloaded on model save.\n\nFor example, in this case, it won't update translation's name, because for some reason (really don't remember why) place already staled and reloaded (and just updated attributes in the place object model isn't available for PlaceTranslation model), but it should not:\n\n``` ruby\nclass Place\n  has_many :translations, class_name: 'PlaceTranslation', inverse_of: :place, autosave: true\n\n  before_save do\n    translations.each(&:regenerate_name)\n  end\n\n\nend\n\nclass PlaceTranslation\n  belongs_to :place  \n\n  def regenerate_name\n    if name.blank?\n      self.name = place.generate_name # some place generator\n    end\n  end\nend\n```\n\nI don't remember all the details, it was few months ago, but adding a new instance variable to the model was only one possibility to fix that problem.\n", "created_at": "2013-05-12 11:18:09", "user": 5091, "id": 17776356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17782738", "text": "Ok. Thank you for the explanation.\n", "created_at": "2013-05-12 18:34:39", "user": 47848, "id": 17782738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19099990", "text": "Can it be merged?\n", "created_at": "2013-06-07 10:39:51", "user": 5091, "id": 19099990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20182980", "text": "Any one can check this pull request?\n", "created_at": "2013-06-28 11:22:23", "user": 5091, "id": 20182980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26211665", "text": "@arthurnn could you check this one to see if you already fixed it?\n", "created_at": "2013-10-13 04:57:01", "user": 47848, "id": 26211665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26211683", "text": "@rafaelfranca I sure can... :heart: AR bugs.\n", "created_at": "2013-10-13 04:58:54", "user": 833383, "id": 26211683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26211711", "text": " :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-10-13 05:00:45", "user": 47848, "id": 26211711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26222525", "text": "This looks good to me. I was just wondering, that when `inversed` is true, `stale_target?` will always be false, so the reload wont happen anymore. I guess this is the desired behaviour as the object being in memory we dont need to reload it. \nAnyhow, :+1: from me. I will also keep a close eye on this.\n", "created_at": "2013-10-13 17:40:51", "user": 833383, "id": 26222525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26222693", "text": "@dmitry could you add a CHANGELOG entry?\n", "created_at": "2013-10-13 17:47:34", "user": 47848, "id": 26222693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26226923", "text": "@rafaelfranca Rebased commits to a master and added a changelog entry. Hope everything is fine.\n", "created_at": "2013-10-13 20:56:53", "user": 5091, "id": 26226923}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When you attempt to \":include\" multiple associated records in a call to to_json, only the first association is included if you specify further inclusions for that association.\n\nFor example:\n\n``` ruby\nrender :json => video.to_json(\n      :include => {:fight_sets => {\n          :include => [:fight_matches => {:include => [:player_one_team, :player_two_team]}, :player_one => {}, :player_two => {}]}});\n```\n\nthe json will include all of the fight_matches, but will not include either player_one or player_two.\n\nIf instead, you swap `:fight_matches` with `:player_one`, giving you\n\n``` ruby\nrender :json => video.to_json(\n      :include => {:fight_sets => {\n          :include => [:player_one => {}, :fight_matches => {:include => [:player_one_team, :player_two_team]}, :player_two => {}]}});\n```\n\nthe json will include player_one but not fight_matches or player_two.\n", "labels": [], "number": 9500, "updated_at": "2013-03-01 07:39:53", "user": 182187, "closed_at": "2013-03-01 07:39:53", "id": 11530749, "title": "to_json includes do not output multiple associations, only the first if any have additional parameters", "url": "https://api.github.com/repos/rails/rails/issues/9500", "created_at": "2013-03-01 03:37:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272177", "text": "It looks like this might be my own ineptitude.\nIf use braces instead of brackets for the nested associations (and add a => {} to each association) then everything goes as planned. Sorry. :/\n", "created_at": "2013-03-01 03:57:12", "user": 182187, "id": 14272177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14273229", "text": "@antoinne85 don't be sorry! If you've solved the issue yourself, consider closing it? Thanks!\n", "created_at": "2013-03-01 05:01:13", "user": 922353, "id": 14273229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14276548", "text": "Thanks for reporting anyways. For the next time, please use ``` to format your code (I edited your message).\n\nSince you solved the issue already I'm closing this.\n", "created_at": "2013-03-01 07:39:53", "user": 5402, "id": 14276548}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I set up a Rails engine under ruby-2.0.0-p0 and rvm 1.18.14, but I got the following: \n\n```\n$ rails plugin new blorg --mountable\n      create  \n      create  README.rdoc\n      create  Rakefile\nMethod Rails::Generators::PluginNewGenerator#name should be public, not private\n```\n\nAnyone can reproduce this problem too?\n", "labels": [], "number": 9501, "updated_at": "2014-02-25 05:30:59", "user": 1289661, "closed_at": "2013-03-01 04:28:50", "id": 11530853, "title": "Engines creation might be failing using Ruby 2.0", "url": "https://api.github.com/repos/rails/rails/issues/9501", "created_at": "2013-03-01 03:44:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14271996", "text": "which Rails version?\n", "created_at": "2013-03-01 03:48:25", "user": 47848, "id": 14271996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272171", "text": "I tested it using 3.2.10, 3.2.11 and 3.2.12, same problem.\n\nChanged to Ruby 1.9.3 and started to work.\n", "created_at": "2013-03-01 03:56:45", "user": 1289661, "id": 14272171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272179", "text": "Could you try 3.2.13.rc1?\n", "created_at": "2013-03-01 03:57:25", "user": 47848, "id": 14272179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14272345", "text": "It works! Thanks a lot!\n", "created_at": "2013-03-01 04:07:12", "user": 1289661, "id": 14272345}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Am building a nested form and my code works fine with sqlite3 but throws errors when using Oracle during update action. Am getting the following error:\n\nActiveRecord::RecordNotFound in AWRequestsController#update Couldn't find WADetail with ID=5000000015 for AWRequest with ID=5000000022.0\n\nThe record exists in db.The query generated by rails server throws 404 RecordNotFound error but same query works fine in ORacle query interface.\n\nRequest Parameters:\n\n```\n{\"utf8\"=>\"✓\",\n\"_method\"=>\"put\",\n\"authenticity_token\"=>\"F8KcH1MeagUtyPw7N5IH4cmrY1duE5zXQ/cZJDRqkQc=\",\n\"a_w_request\"=>{\"requester_contact\"=>\"chitra\",\n\"needed_by(1i)\"=>\"2013\",\n\"needed_by(2i)\"=>\"2\",\n\"needed_by(3i)\"=>\"12\",\n\"w_a_details_attributes\"=>{\"0\"=>{\n\"description\"=>\"d\",\n\"_destroy\"=>\"false\",\n\"id\"=>\"5000000015\"}}},\n\"commit\"=>\"Update A w request\",\n\"id\"=>\"5000000022\"}\n```\n\n**This is my update function:**\n\n``` ruby\ndef update\n  @a_w_request = AWRequest.find(params[:id])\n  @a_w_request.status = \"Active\"\n  @a_w_request.updated_by=@remote_user\n  respond_to do |format|\n    if @a_w_request.update_attributes(params[:a_w_request])\n       format.html { redirect_to @a_w_request, notice: 'Request was successfully updated.' }\n       format.json { head :no_content }\n    else\n       format.html { render action: \"edit\" }\n       format.json { render json: @a_w_request.errors, status::unprocessable_entity }\n    end\n   end\nend\n```\n\n**Models:**\n_a_w_request.rb_\n\n``` ruby\nclass AWRequest < ActiveRecord::Base\n set_primary_key :request_id\n set_sequence_name \"w_request_details_seq\"\n set_table_name \"w_request_details\"\n attr_accessible  :requester_contact, :needed_by, :w_a_details_attributes\n has_many :w_a_details, :dependent => :destroy\n accepts_nested_attributes_for :w_a_details, :allow_destroy => :true,:reject_if =>proc{ |attrs| attrs.all? {|k,v| v.blank? } }\n\n def to_param\n  request_id.to_i.to_s\n end\nend\n```\n\n_w_a_detail.rb_\n\n``` ruby\n class WADetail < ActiveRecord::Base\n    set_primary_key :w_a_detail_id\n    set_table_name \"w_a_details\"\n    set_sequence_name \"w_a_details_seq\"\n    attr_accessible :description, :a_w_request_id, :w_a_detail_id\n    belongs_to :a_w_request\n\nend\n```\n\n**Forms:**\n_/a_w_requests/_form.html.erb:_\n\n``` erb\n<%= nested_form_for(@a_w_request) do |f| %>\n\n <label><b>*Requester Contact</b></label>\n <%= f.text_field :requester_contact %>\n </div>\n <div class=\"field\">\n <label><b>*Needed By</b></label>\n <%= f.date_select :needed_by, :default => 2.days.from_now %>\n </div>\n\n <%= render :partial => 'w_a_details/form',:locals => {:form => f} %>\n\n <p><%= f.link_to_add \"Add Request\", :w_a_details %></p>\n\n <div class=\"actions\">\n <%= f.submit %>\n </div>\n<% end %>\n```\n\n_/w_a_details/_form.html.erb:_\n\n``` erb\n<%= form.fields_for :w_a_details do |a_form| %>\n\n <%=a_form.text_field :description %>\n\n <%=a_form.link_to_remove \"Remove\" %>\n\n<% end %>\n```\n\n**Stacktrace:**\n\n```\nactiverecord (3.1.3) lib/active_record/nested_attributes.rb:461:in `raise_nested_attributes_record_not_found'\nactiverecord (3.1.3) lib/active_record/nested_attributes.rb:426:in `block in assign_nested_attributes_for_collection_association'\nactiverecord (3.1.3) lib/active_record/nested_attributes.rb:399:in `each'\nactiverecord (3.1.3) lib/active_record/nested_attributes.rb:399:in `assign_nested_attributes_for_collection_association'\nactiverecord (3.1.3) lib/active_record/nested_attributes.rb:287:in `whitelist_asin_details_attributes='\nactiverecord (3.1.3) lib/active_record/base.rb:1751:in `block in assign_attributes'\nactiverecord (3.1.3) lib/active_record/base.rb:1747:in `each'\nactiverecord (3.1.3) lib/active_record/base.rb:1747:in `assign_attributes'\nactiverecord (3.1.3) lib/active_record/persistence.rb:162:in `block in update_attributes'\nactiverecord (3.1.3) lib/active_record/transactions.rb:295:in `block in with_transaction_returning_status'\nactiverecord (3.1.3) lib/active_record/connection_adapters/abstract/database_statements.rb:192:in `transaction'\nactiverecord (3.1.3) lib/active_record/transactions.rb:208:in `transaction'\nactiverecord (3.1.3) lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\nactiverecord (3.1.3) lib/active_record/persistence.rb:161:in `update_attributes'\napp/controllers/asin_whitelist_requests_controller.rb:113:in `block in update'\nactionpack (3.1.3) lib/action_controller/metal/mime_responds.rb:269:in `call'\nactionpack (3.1.3) lib/action_controller/metal/mime_responds.rb:269:in `retrieve_response_from_mimes'\nactionpack (3.1.3) lib/action_controller/metal/mime_responds.rb:194:in `respond_to'\napp/controllers/asin_whitelist_requests_controller.rb:112:in `update'\nactionpack (3.1.3) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.1.3) lib/abstract_controller/base.rb:167:in `process_action'\nactionpack (3.1.3) lib/action_controller/metal/rendering.rb:10:in `process_action'\nactionpack (3.1.3) lib/abstract_controller/callbacks.rb:18:in `block in process_action'\nactivesupport (3.1.3) lib/active_support/callbacks.rb:425:in `_run__2284321020473608430__process_action__2204747276175176446__callbacks'\nactivesupport (3.1.3) lib/active_support/callbacks.rb:386:in `_run_process_action_callbacks'\nactivesupport (3.1.3) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.3) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.1.3) lib/action_controller/metal/rescue.rb:17:in `process_action'\nactionpack (3.1.3) lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\nactivesupport (3.1.3) lib/active_support/notifications.rb:53:in `block in instrument'\nactivesupport (3.1.3) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.1.3) lib/active_support/notifications.rb:53:in `instrument'\nactionpack (3.1.3) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.1.3) lib/action_controller/metal/params_wrapper.rb:201:in `process_action'\nactiverecord (3.1.3) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\nactionpack (3.1.3) lib/abstract_controller/base.rb:121:in `process'\nactionpack (3.1.3) lib/abstract_controller/rendering.rb:45:in `process'\nactionpack (3.1.3) lib/action_controller/metal.rb:193:in `dispatch'\nactionpack (3.1.3) lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\nactionpack (3.1.3) lib/action_controller/metal.rb:236:in `block in action'\nactionpack (3.1.3) lib/action_dispatch/routing/route_set.rb:65:in `call'\nactionpack (3.1.3) lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\nactionpack (3.1.3) lib/action_dispatch/routing/route_set.rb:29:in `call'\nrack-mount (0.8.2) lib/rack/mount/route_set.rb:152:in `block in call'\nrack-mount (0.8.2) lib/rack/mount/code_generation.rb:96:in `block in recognize'\nrack-mount (0.8.2) lib/rack/mount/code_generation.rb:103:in `optimized_each'\nrack-mount (0.8.2) lib/rack/mount/code_generation.rb:95:in `recognize'\nrack-mount (0.8.2) lib/rack/mount/route_set.rb:141:in `call'\nactionpack (3.1.3) lib/action_dispatch/routing/route_set.rb:532:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.5) lib/rack/etag.rb:23:in `call'\nrack (1.3.5) lib/rack/conditionalget.rb:35:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/head.rb:14:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/flash.rb:247:in `call'\nrack (1.3.5) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.5) lib/rack/session/abstract/id.rb:190:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/cookies.rb:331:in `call'\nactiverecord (3.1.3) lib/active_record/query_cache.rb:64:in `call'\nactiverecord (3.1.3) lib/active_record/connection_adapters/abstract/connection_pool.rb:477:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nactivesupport (3.1.3) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nactivesupport (3.1.3) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.3) lib/action_dispatch/middleware/callbacks.rb:28:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.5) lib/rack/sendfile.rb:101:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.1.3) lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nrailties (3.1.3) lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.5) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.5) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.1.3) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.5) lib/rack/lock.rb:15:in `call'\nrailties (3.1.3) lib/rails/engine.rb:456:in `call'\nrailties (3.1.3) lib/rails/railtie/configurable.rb:30:in `method_missing'\n```\n", "labels": ["activerecord"], "number": 9502, "updated_at": "2013-05-04 11:41:53", "user": 3097033, "closed_at": "2013-05-04 11:41:53", "id": 11532523, "title": "nested attributes doesnt update in oracle: recordnotfound exception altohugh record exists in db", "url": "https://api.github.com/repos/rails/rails/issues/9502", "created_at": "2013-03-01 05:31:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14276494", "text": "Please use ``` to format your code. Otherwise the ticket is really hard on the eyes (I edited your message). Also you did post a erb template under the heading: w_a_detail.rb shouldn't this be a model?\n", "created_at": "2013-03-01 07:37:35", "user": 5402, "id": 14276494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14277793", "text": "Sorry i have edited and resubmitted the code. w_a_detail.rb is a model and /w_a_details/_form.html.erb is an erb. I have made the changes.\n", "created_at": "2013-03-01 08:31:08", "user": 3097033, "id": 14277793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497390", "text": "Any update on this issue?Am not able to proceed with my project  because of this error.\n", "created_at": "2013-03-06 12:43:29", "user": 3097033, "id": 14497390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497524", "text": "I have no Oracle license and from the information above it's hard to to tell the problem. Could you post the relevant Queries that are executed and the records from the database that exist but are not found?\n", "created_at": "2013-03-06 12:47:06", "user": 5402, "id": 14497524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14570281", "text": "Got this from the logs:\n\n```\n  \u001b[1m\u001b[36mAWRequest Load (0.0ms)\u001b[0m  \u001b[1mSELECT \"a_w_requests\".* FROM \"a_w_requests\" WHERE \"a_w_requests\".\"id\" = ? LIMIT 1\u001b[0m  [[\"id\", \"5000000022\"]]\n  \u001b[1m\u001b[35m (0.0ms)\u001b[0m  begin transaction\n  \u001b[1m\u001b[36mWADetail Load (1.0ms)\u001b[0m  \u001b[1mSELECT \"w_a_details\".* FROM \"w_a_details\" WHERE \"w_a_details\".\"a_w_request_id\" = 5000000022.0 AND \"w_a_details\".\"id\" IN (\"5000000015\")\u001b[0m\n  \u001b[1m\u001b[35m (0.0ms)\u001b[0m  UPDATE \"a_w_requests\" SET \"Requester_Contact\" = 'chitra', \"updated_at\" = '2013-02-27 11:46:16.337820' WHERE \"a_w_requests\".\"id\" = 5000000022\n  \u001b[1m\u001b[36m (0.0ms)\u001b[0m  \u001b[1mUPDATE \"w_a_details\" SET \"Description\" = 'd', \"updated_at\" = '2013-02-27 11:46:16.340820' WHERE \"w_a_details\".\"id\" = 5000000015\u001b[0m\n  \u001b[1m\u001b[35m (9.0ms)\u001b[0m  commit transaction\n```\n\nThe problem is not for a single record,it throws exception for all the records in DB although it works with sqlite3. I believe the problem is with ID being a number and not an integer in both the tables.\n", "created_at": "2013-03-07 16:24:19", "user": 3097033, "id": 14570281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17397946", "text": "hey @srchitra did you got anything here? Can this issue be closed?\n", "created_at": "2013-05-03 14:45:29", "user": 3948, "id": 17397946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17427935", "text": "Yes, I included  gem 'activerecord-oracle_enhanced-adapter' and also the\nfollowing code in oracle.rb file config/initializers folder\n\n  ActiveSupport.on_load(:active_record) do\n  ActiveRecord::ConnectionAdapters::OracleEnhancedAdapter.class_eval do\n     self.emulate_integers_by_column_name = true\n     self.emulate_booleans_from_strings = true\n  end\n  end\n\nProblem was the primary key was taking a float value by default, which I\nchanged to Integer and the problem was resolved.\n\nOn Fri, May 3, 2013 at 8:16 PM, Arun Agrawal notifications@github.comwrote:\n\n> hey @srchitra https://github.com/srchitra did you got anything here?\n> Can this issue be closed?\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9502#issuecomment-17397946\n> .\n\n## \n\nCheers & Regards\nChitra\n", "created_at": "2013-05-04 05:09:36", "user": 3097033, "id": 17427935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17431873", "text": "Great, closing this one then.\n", "created_at": "2013-05-04 11:41:53", "user": 5402, "id": 17431873}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This fixes issue https://github.com/rails/rails/issues/9470. The `find()` method on an association will now first check to see if any records exist in the association with the given ids before visiting the database. This prevents an unneeded database call if the records already exist in memory.\n\nThe new function scans the target of the association for the ids sent as inputs to `find()`. The ids of the records that are found are removed from the ids which will be sent to the database.\n", "labels": ["activerecord"], "number": 9503, "updated_at": "2014-07-04 15:48:47", "user": 1075780, "closed_at": "2013-03-03 17:52:02", "id": 11533456, "title": "Find() in associations now checks in-memory records before going to the database", "url": "https://api.github.com/repos/rails/rails/issues/9503", "created_at": "2013-03-01 06:30:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345076", "text": "Is there anywhere else in the code base we do this type of traversal and in memory loading? Seems like lot of moving parts that could break, also adds overhead to find calls of objects that aren't already in memory.\n\nIs it possible to update the database and not the in-memory object, leaving the userspace with an invalid cache? \n", "created_at": "2013-03-03 10:49:47", "user": 59744, "id": 14345076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14349394", "text": "@schneems You raise some valid points. The scan over the in memory objects is pretty expensive. Also, I believe it is indeed possible to update the database and not the in-memory object which would lead to some invalid caches.\n\nTo address the first point, maybe we could implement that target instance variable as a hash instead of an array. The hash would be keyed on the object id, and hold the object. This would make finding an id a lot faster without significantly changing the time to iterate over it or add to the target. \n\nThe second point of invalid caches seems a lot harder (maybe this is why it wasn't implemented before?). The one solution I can think of (though it probably will take a lot of work), is to enforce a policy of having only one ActiveRecord object per id. If this were implemented correctly, then the only way of changing the database and not the in-memory object would be to use pure SQL for updating, but this case is already unsupported. \n", "created_at": "2013-03-03 16:26:40", "user": 1075780, "id": 14349394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14349438", "text": "> is to enforce a policy of having only one ActiveRecord object per id. \n\nThe identity map was in and out and in and now out, basically for good.\n", "created_at": "2013-03-03 16:28:29", "user": 27786, "id": 14349438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14349817", "text": "@steveklabnik Then it seems like this PR doesn't really hold a lot of ground. The other possibility is to hold an in-memory table of the last time the database was updated for a particular AR object. Each AR object would hold a reference to it (so they could still be garbage collected).\n\nWhenever a user calls a method on an AR object, it first checks the table to see if the database has been updated without it knowing. If so, it will make a DB call, otherwise, it will go along normally.\n\nThis will probably take a lot of implementation though.\n", "created_at": "2013-03-03 16:40:58", "user": 1075780, "id": 14349817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14349860", "text": ":-1: on this. The problem described in #9470 is all about setting `inverse_of` when using `find` in an association, to work the same way as `first` / `last`.\n\nThat seems fair, I don't see any problem in doing that. But I don't think Rails should try to find any record in the collection just by doing a `find` on it, moreover the user may want a fresh record and would now need to `reload` it. If you want to find a record in the association collection, you can use `find/detect/select/find_all` with a block. Also, at a glance it seems the code is calling `load_target` every time, which might load the full association for a simple `find` call, when no associated records are necessary.\n\nSo I think we'd be good if only setting the inverse association on `find` was improved, but I would rather not change `find` in Rails with this logic.\n\nThanks for your contribution :)\n", "created_at": "2013-03-03 16:43:31", "user": 26328, "id": 14349860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14351120", "text": "@carlosantoniodasilva Ok, ya that makes sense. I'm going to close this PR and send another one that only changes `find` for `inverse_of` and not in general.\n", "created_at": "2013-03-03 17:52:02", "user": 1075780, "id": 14351120}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you create routing which should match root url and has at least two default params it is not matched.\n\n```\nmatch '(:year(/:month))' => \"application#index\"\n```\n\n/ - not working\n/xx - works\n/xx/xx - works\n\nbut if you define it as\n\n```\nmatch 'something(/:year(/:month))' => \"application#index\"\n```\n\neverything works correctly.\n\nIf you specify only one optional param it also works correctly\n\n```\nmatch '(:year)' => \"application#index\"\n```\n\n/ - works\n/xx - works\n", "labels": ["actionpack", "needs feedback"], "number": 9504, "updated_at": "2013-07-21 06:43:04", "user": 4486, "closed_at": "2013-04-02 22:46:16", "id": 11535067, "title": "Optional parameters in routing not work correctly", "url": "https://api.github.com/repos/rails/rails/issues/9504", "created_at": "2013-03-01 08:02:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14277402", "text": "/cc @pixeltrix \n", "created_at": "2013-03-01 08:15:08", "user": 5402, "id": 14277402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14282274", "text": "This is a duplicate of #7047 - I'll be fixing it this weekend.\n", "created_at": "2013-03-01 10:42:06", "user": 6321, "id": 14282274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14652107", "text": "@pixeltrix any progress?\n", "created_at": "2013-03-08 23:26:17", "user": 4486, "id": 14652107}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14658415", "text": "@madmax I'm not sure this can be fixed - here's what the problem is:\n\n``` ruby\nget '/(:locale)(/page/:page)', to: 'pages#index', as: 'root'\n```\n\nGiven this route, where do you put the leading slash? Inside or outside the parenthesis? Here's what happens in each scenario:\n1. **Normalize the route with the leading slash inside the parenthesis**\n   This means that `root_path` helper will generate a empty string when given no arguments and the default '/' request won't match.\n2. **Normalize the route with the leading slash outside the parenthesis**\n   This will now generate and match '/' correctly but leaving out the `:locale` parameter causes a double leading slash to generate with `root_path page: 2` and '/page/2' fails to match.\n\nI did consider normalizing the path so the slashes were at the end of the segments, e.g:\n\n``` ruby\nget '/(:locale/)(page/:page)', to: 'pages#index', as: 'root'\n```\n\nHowever this fails to match '/en', so it doesn't improve matters plus there's a huge risk of breaking people's routes.\n\nThe cleanest way to do this as far as I can see is by using two routes:\n\n``` ruby\nget '/', to: 'pages#index', as: 'root'\nget '(/:locale)(/page/:page)', to: 'pages#index', as: 'paged_root'\n```\n\nThis works without any changes to the router.\n\nI'd like to make it work with a single route but I can't see how we can express the path requirements without adding something to the path specification grammar, e.g adding a `|` operator:\n\n``` ruby\nget '/|(/:locale)(/page/:page)', to: 'pages#index', as: 'root'\n```\n\nThe other option is to somehow special case routes that generate a blank string by default to match '/' though I don't like doing things like this.\n\n@tenderlove do you have any suggestions?\n", "created_at": "2013-03-09 05:30:04", "user": 6321, "id": 14658415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14662231", "text": "@pixeltrix  I don't think this is exactly the same case like: \n\nget '/(:year(/:month))' => 'premieres#index', as: :premieres, constraints: RouteConstraint::Subdomain.match(\"premiery\")\n\nHere you can't specify :month without year but this is OK, slash always can be outside.\n", "created_at": "2013-03-09 12:26:15", "user": 4486, "id": 14662231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14663148", "text": "@madmax that's true but unfortunately we have to support routes like `(/:locale)/path` so we can't assume that the leading slash is always outside and at this point the only thing we can use is a regexp to transform the path and I can't come up with one that will generically match your case and not match the other case.\n\nI really hate all these calls to `normalize_path` littered throughout `Mapper` - I'd rather people wrote their routes correctly but that ship has probably sailed and changing it now would cause too much confusion.\n", "created_at": "2013-03-09 13:41:19", "user": 6321, "id": 14663148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14664562", "text": "@pixeltrix Can you explain then why \n\n```\nget '(:year)' => 'premieres#index', as: :premieres, constraints: RouteConstraint::Subdomain.match(\"premiery\")\n```\n\nor \n\n```\nget '(/:year)' => 'premieres#index', as: :premieres, constraints: RouteConstraint::Subdomain.match(\"premiery\")\n```\n\nWorks without problem but (:year(/:month)) not ?\n", "created_at": "2013-03-09 15:11:50", "user": 4486, "id": 14664562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14665206", "text": "Because the `Mapper.normalize_path` regexp can detect whether the slash is at the start and whether the are no slashes in the path but as soon as there is a slash as some point along the path then some context is required as to whether the slash is inside an optional or required segment - which is the job of a parser and can't be done using a regexp.\n\nYou can use the two route method I outlined above to achieve your desired routes though:\n\n``` ruby\nget '/', to: 'premieres#index', as: 'root'\nget '/:year(/:month)', to 'premieres#index', as: 'archive'\n```\n\nThen you can write a custom helper to simplify matters:\n\n``` ruby\ndef premieres_path(*args, options = {})\n  premieres_url(*args, options.merge(:only_path => true))\nend\n\ndef premieres_url(*args, options = {})\n  if args.any? || options.key?(:year)\n    archive_url(*args, options)\n  else\n    root_url(options)\n  end\nend\n```\n", "created_at": "2013-03-09 15:52:21", "user": 6321, "id": 14665206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671293", "text": "@pixeltrix Thanks :) currently I was using '(*date)' and spliting in controller but your solution looks cleaner :)\n", "created_at": "2013-03-09 21:41:17", "user": 4486, "id": 14671293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15020635", "text": "@madmax Is there still something that can/needs to be fixed or can we close this ticket?\n", "created_at": "2013-03-17 10:47:17", "user": 5402, "id": 15020635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15807554", "text": "@senny I think it can be closed. Thanks!\n", "created_at": "2013-04-02 22:44:19", "user": 4486, "id": 15807554}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Preview\nWith new Rails 4 must be a new Service pages\n![new404](https://f.cloud.github.com/assets/485466/208788/16ef281c-824a-11e2-925e-ad08899176cf.PNG)\n", "labels": ["railties"], "number": 9505, "updated_at": "2014-06-15 12:46:57", "user": 485466, "closed_at": "2013-03-01 18:11:34", "id": 11535581, "title": "New 404, 422, 500 pages, they are more stylish and bring ruby essence…", "url": "https://api.github.com/repos/rails/rails/issues/9505", "created_at": "2013-03-01 08:29:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14277882", "text": "This is so cool that I will apply these to my app immediately! Many thanks\n", "created_at": "2013-03-01 08:34:45", "user": 137464, "id": 14277882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14278926", "text": "So funny yeah...\nI think using same page for almost 9 years not cool\n", "created_at": "2013-03-01 09:09:58", "user": 485466, "id": 14278926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14279066", "text": "we will need a CHANGELOG entry.\n\n/cc @guilleiguaran @rafaelfranca \n", "created_at": "2013-03-01 09:14:20", "user": 5402, "id": 14279066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14285370", "text": "Looks nice, please do add a changelog entry, fix indenting and add a little bit of spacing so that it can get more readable. Thanks!\n", "created_at": "2013-03-01 11:44:05", "user": 26328, "id": 14285370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14291481", "text": "![422](https://f.cloud.github.com/assets/253398/209799/e0640880-827b-11e2-8d9e-0a365b0c4220.png)\n\n422 page looks incomplete IMO.\n", "created_at": "2013-03-01 14:26:44", "user": 253398, "id": 14291481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14295760", "text": "@lucasmazza could you review this one?\n", "created_at": "2013-03-01 15:52:57", "user": 47848, "id": 14295760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14296217", "text": "Prefix, changelog fixed.\n@NARKOZ Yeah, it incomplete, because there are have not a message for admin, like in other pages. But it can be added.\n", "created_at": "2013-03-01 16:01:09", "user": 485466, "id": 14296217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14296218", "text": "@Jacke the page looks nice! I left some inline comments about the code, and besides that there's a few bits that might need some work:\n- The shadows are good, but the top red bar doesn't go along too much with then. Maybe reducing the `border-width` or trying a different shade of red could look better.\n- As @NARKOZ pointed, the 422 page looks broken/incomplete. Maybe just that one should have a `border-radius` on all corners.\n", "created_at": "2013-03-01 16:01:12", "user": 80978, "id": 14296218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14298245", "text": "@Jacke great work, please review all the changes mentioned and we will merge this!!\n\nThanks\n", "created_at": "2013-03-01 16:37:05", "user": 160941, "id": 14298245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14298300", "text": "Please also squash your commits in a single one, thanks!!!\n", "created_at": "2013-03-01 16:38:00", "user": 160941, "id": 14298300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14932576", "text": "good idea for redesign server error pages :+1: \n", "created_at": "2013-03-14 22:10:50", "user": 424326, "id": 14932576}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Getting the following error when attempting to install on Windows with Ruby 2.0.0 x64:\n\n```\nTemporarily enhancing PATH to include DevKit...\nBuilding native extensions.  This could take a while...\nERROR:  Error installing rails:\n        ERROR: Failed to build gem native extension.\n\n    C:/Ruby200-x64/bin/ruby.exe extconf.rb\ncreating Makefile\n\nmake\ngenerating atomic_reference-x64-mingw32.def\ncompiling atomic_reference.c\natomic_reference.c:1:0: error: CPU you selected does not support x86-64 instruction set\nmake: *** [atomic_reference.o] Error 1\n\n\nGem files will remain installed in C:/Ruby200-x64/lib/ruby/gems/2.0.0/gems/atomic-1.0.1 for inspection.\nResults logged to C:/Ruby200-x64/lib/ruby/gems/2.0.0/gems/atomic-1.0.1/ext/gem_make.out\n```\n\nIs related to this issue on the ruby forums: http://www.ruby-forum.com/topic/4411357\n", "labels": ["third party issue"], "number": 9506, "updated_at": "2014-04-10 17:09:02", "user": 103927, "closed_at": "2014-04-10 17:09:02", "id": 11536573, "title": "Installing on x64 Windows (rubyinstaller/mingw)", "url": "https://api.github.com/repos/rails/rails/issues/9506", "created_at": "2013-03-01 09:11:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14304179", "text": "Is this a bug in Rails or in the railsinstaller? I don't think that Rails is doing anything wrong in this case. We would need to reproduce the error without railsinstaller before we could start to work on this issue. \n", "created_at": "2013-03-01 18:38:35", "user": 59744, "id": 14304179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14307325", "text": "Yes, this is not a Rails bug.\n", "created_at": "2013-03-01 19:40:57", "user": 47848, "id": 14307325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14446504", "text": "I (politely) beg to differ.  This is a bug in the atomic gem.  The exact bug is in ruby-atomic/ext/extconf.rb:\n\n``` ruby\nwhen /mswin32|mingw/\n    $CFLAGS += \" -march=i686\"\nend\n```\n\nit's not checking for x64-mingw32, and is using the wrong architecture as a result.  I would report this to the atomic gem author, but it looks like the gem hasn't been updated in a long time.\n", "created_at": "2013-03-05 15:45:15", "user": 1686368, "id": 14446504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14462017", "text": "I'm not sure if we can do something in our side to have this issue open.\n", "created_at": "2013-03-05 20:05:30", "user": 47848, "id": 14462017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14462653", "text": "Hi rafaelfranca, while i'd be inclined to agree with you, Rails appears to have a dependency on this gem.  If the author of the gem is unresponsive to the issue (not saying he will be...but the last code update was 10 months ago.), the code will likely have to be forked and fixed, whether the rails team does it or a 3rd party does it.  I'll take a look at fixing this issue when i get home and see if there are any other issues with rails compiling on Windows x64.  While i know most of you guys are mac/linux folks, many of us Rails developers are stuck in corporate Windows environments. It's thanks to Rails/Ruby being compatible with Windows that we've been able to roll out both internal and external sites built using Ruby on Rails.\n", "created_at": "2013-03-05 20:17:56", "user": 1686368, "id": 14462653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14462775", "text": "How does Rails rely on this gem? I don't have a Windows machine handy at the moment.\n", "created_at": "2013-03-05 20:20:21", "user": 27786, "id": 14462775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14462959", "text": "We are using thread-safe gem that depends of this one\n", "created_at": "2013-03-05 20:23:39", "user": 47848, "id": 14462959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14463787", "text": "@betam4x Thanks for telling us the cause of the issue, no need to differ at all...we closed it because we didn't know the root cause. You provided that information, thank you.\n\nWe aren't in the buisness of forking and fixing the gems. Just because there are no updates on something for awhile doesn't mean it is dead. I would like to open up issues on the other gems, and keep this issue open for a little while to track progress. \n\n@rafaelfranca and @steveklabnik are correct: the error is not in our codebase, and generally we do not maintain parallel open issues when issues are filed in our dependencies. I reopened this issue for my own tracking, it may be closed in the future. \n\nThanks again for pointing out the underlying issue. If you have a windows machine (which it appears you do) please follow along and make appropriate comments in the related issues. Thanks. \n", "created_at": "2013-03-05 20:38:40", "user": 59744, "id": 14463787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15656717", "text": "/cc @headius\n", "created_at": "2013-03-29 19:29:06", "user": 160941, "id": 15656717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/40110953", "text": "Wasn't this fixed by https://github.com/headius/thread_safe/commit/612c86de614450359669e5411738434457c7e44d and https://github.com/headius/ruby-atomic/pull/20?\n", "created_at": "2014-04-10 17:04:45", "user": 611891, "id": 40110953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/40111393", "text": "I think so. Closing.\n", "created_at": "2014-04-10 17:09:02", "user": 47848, "id": 40111393}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #9483.\n\nThere are SQL Queries that can't run inside a transaction. Since\nthe Migrator used to wrap all Migrations inside a transaction there\nwas no way to run these queries within a migration.\n\nThis patch adds `self.with_transaction = false` to the migration to\nturn transactions off when necessary.\n", "labels": ["activerecord"], "number": 9507, "updated_at": "2015-08-03 08:09:27", "user": 5402, "closed_at": "2013-03-06 14:05:47", "id": 11542854, "title": "Transactions can be turned off per Migration", "url": "https://api.github.com/repos/rails/rails/issues/9507", "created_at": "2013-03-01 12:33:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14287300", "text": "@rafaelfranca @carlosantoniodasilva what do you think?\n", "created_at": "2013-03-01 12:37:05", "user": 5402, "id": 14287300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14287956", "text": "I'm not sure if I like `with_transaction`... How about: `use_transaction = false`, or `skip_transaction = true`, or even `skip_ddl_transaction`.\n", "created_at": "2013-03-01 12:56:18", "user": 26328, "id": 14287956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14288580", "text": "From the wording I would go with `skip_transaction` but I don't like the fact that it's a negative option I would like something that has the meaning of:\n- true => with transaction.\n- false => without transactions.\n", "created_at": "2013-03-01 13:13:28", "user": 5402, "id": 14288580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14288635", "text": "Does it need to be an option?\n", "created_at": "2013-03-01 13:14:49", "user": 26328, "id": 14288635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14288769", "text": "My first implementation did not use an option but a method call like `without_transaction` but in the end I liked the option better because in my opinion it's easier to understand what happens.\n\nIf you don't like `with_transaction` I would rename it to `use_transaction=false` but I don't have a very strong opinion about it. If you'd like to change it let me know.\n", "created_at": "2013-03-01 13:18:41", "user": 5402, "id": 14288769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14439023", "text": "Seems good @senny, I'm just not sure about the naming yet. `with_transaction` seems the best option so far, I though about `wrap_in_transaction` but that doesn't look that good. Wdyt, are we good with `with_transaction`?\n", "created_at": "2013-03-05 13:09:42", "user": 26328, "id": 14439023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14444715", "text": "@rafaelfranca @carlosantoniodasilva I pushed an updated and rebased version:\n- We now use a macro called `disable_ddl_transaction!`\n- I added documentation to the migrations guide\n- I edited the copy according to the feedback comments\n", "created_at": "2013-03-05 15:14:14", "user": 5402, "id": 14444715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14507519", "text": ":+1:\n", "created_at": "2013-03-06 16:09:20", "user": 26328, "id": 14507519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16399625", "text": ":+1:  Thanks Senny\n", "created_at": "2013-04-15 17:34:53", "user": 413237, "id": 16399625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/122346133", "text": "@senny Our team came across this when trying to reduce memory consumption on a data migration for a larger table. It helped us out a lot, thank you for adding this!\n\nWe were curious why the name `disable_ddl_transaction!` was used, since this disables **all** transactions inside a migration, not just for DDL SQL statements. Perhaps you, or someone else could provide some insight on why you didn't use a more generic name like `disable_transaction!`.\n", "created_at": "2015-07-17 17:15:04", "user": 2223408, "id": 122346133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/127158425", "text": "@PhilCoggins this name was chosen after some brainstorming. It expressed best what most people relate with the wrapping transaction. While it does not disable \"all transactions\", the wrapping transaction can contain non-ddl statements. You can still have transactions inside your migration when you use `disable_ddl_transaction!`. `disable_transaction!` might be to general, one name that came up during the initial discussion was `self.transactional = false`. We opted for `disable_ddl_transaction!` to communicate the meaning that that wrapping transaction is only in place for adapters that support ddl-transactions. For example it's not there with MySQL. Hope that makes sense.\n", "created_at": "2015-08-03 08:09:27", "user": 5402, "id": 127158425}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have two models:\n`item has_many tags`\n\nThe error is when I try to add 1 `tag` inside the `item` form, I got 2 `tags` inserted in the DB, and the extra one doesn't have a tag name.  Please see codes below:\n\nwhite lists in `items_controller` :\n\n``` ruby\nprivate\n    # Use callbacks to share common setup or constraints between actions.\n    def set_item\n      @item = Item.find(params[:id])     \n      @item.tags.build\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def item_params\n      params.require(:item).permit(:name, :description, :price, :shopping_list_id, tags_attributes: [:name, :item_id])\n    end\n```\n\nfileds_for tags in `_form.html.erb` :\n\n``` erb\n    <%= f.fields_for :tags do |tag_form| %>\n      <div class=\"field\">\n        <%= tag_form.label :name, 'Tag:' %>\n        <%= tag_form.text_field :name %>\n      </div>\n      <% unless tag_form.object.nil? || tag_form.object.new_record? %>\n        <div class=\"field\">\n          <%= tag_form.label :_destroy, 'Remove:' %>\n          <%= tag_form.check_box :_destroy %>\n        </div>\n      <% end %>\n    <% end %>\n```\n\nand here are the outputs in console: \n\n```\nStarted PATCH \"/items/1\" for 127.0.0.1 at 2013-03-01 17:01:09 +0800\nProcessing by ItemsController#update as HTML\n  Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"v+V8G8Cu6uUUWIH8PTYO89fOcQDiIA7gSYLkbjygunY=\", \"item\"=>{\"name\"=>\"mac book pro\", \"description\"=>\"rMBP\", \"price\"=>\"9999.99\", \"shopping_list_id\"=>\"1\", \"tags_attributes\"=>{\"0\"=>{\"name\"=>\"22\"}}}, \"commit\"=>\"Update Item\", \"id\"=>\"1\"}\n  Item Load (0.3ms)  SELECT `items`.* FROM `items` WHERE `items`.`id` = 1 LIMIT 1\n   (0.1ms)  BEGIN\n  SQL (0.3ms)  INSERT INTO `tags` (`created_at`, `item_id`, `updated_at`) VALUES ('2013-03-01 09:01:09', 1, '2013-03-01 09:01:09')\n  SQL (0.2ms)  INSERT INTO `tags` (`created_at`, `item_id`, `name`, `updated_at`) VALUES ('2013-03-01 09:01:09', 1, '22', '2013-03-01 09:01:09')\n   (10.5ms)  COMMIT\nRedirected to http://localhost:3000/items/1\n```\n\nAny idea please? I am tracing through pry, will update here soon.\n", "labels": ["needs feedback"], "number": 9508, "updated_at": "2013-03-02 08:44:38", "user": 1071138, "closed_at": "2013-03-02 08:44:38", "id": 11544204, "title": "nested attributes created error in rails4 beta1", "url": "https://api.github.com/repos/rails/rails/issues/9508", "created_at": "2013-03-01 13:21:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14294087", "text": "could you post the comlpete controller code? If the call to `build` also happens in the `update` action It's reasonable why you get two items. 1 from the form and the one you build yourself...\n", "created_at": "2013-03-01 15:20:50", "user": 5402, "id": 14294087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14320589", "text": "@senny Thanks, here's the controller code, I didn't add anything in the `update` action except `pry`\n\n``` ruby\nclass ItemsController < ApplicationController\n  before_action :set_item, only: [:show, :edit, :update, :destroy]\n\n  # GET /items\n  # GET /items.json\n  def index\n    @items = Item.page(@page)\n  end\n\n  # GET /items/1\n  # GET /items/1.json\n  def show\n  end\n\n  # GET /items/new\n  def new\n    @item = Item.new\n    @item.tags.build\n  end\n\n  # GET /items/1/edit\n  def edit\n  end\n\n  # POST /items\n  # POST /items.json\n  def create\n    @item = Item.new(item_params)\n\n    respond_to do |format|\n      if @item.save\n        format.html { redirect_to @item, notice: 'Item was successfully created.' }\n        format.json { render action: 'show', status: :created, location: @item }\n      else\n        format.html { render action: 'new' }\n        format.json { render json: @item.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # PATCH/PUT /items/1\n  # PATCH/PUT /items/1.json\n  def update\n    respond_to do |format|      \n      binding.pry\n      if @item.update(item_params)\n\n        format.html { redirect_to @item, notice: 'Item was successfully updated.' }\n        format.json { head :no_content }\n      else\n        format.html { render action: 'edit' }\n        format.json { render json: @item.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # DELETE /items/1\n  # DELETE /items/1.json\n  def destroy\n    @item.destroy\n    respond_to do |format|\n      format.html { redirect_to items_url }\n      format.json { head :no_content }\n    end\n  end\n\n  private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_item\n      @item = Item.find(params[:id])     \n      @item.tags.build\n    end\n\n    # Never trust parameters from the scary internet, only allow the white list through.\n    def item_params\n      params.require(:item).permit(:name, :description, :price, :shopping_list_id, tags_attributes: [:name])\n    end\nend\n```\n", "created_at": "2013-03-02 01:35:44", "user": 1071138, "id": 14320589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14325191", "text": "@i3zhe but you do add the before_filter `set_item`, which triggers `#build` on the association:\n\n``` ruby\n  before_action :set_item, only: [:show, :edit, :update, :destroy]\n```\n\nIf you call `#build` a new record without a title will be created and later in the update action you create the real record from the form data. You need to either modify your before_filter to not call `build` or don't add the before_filter to `update`.\n\nI'm closing the issue for now. From the code I see this seems like expected behaviour. If you make the changes and no longer call `build` and you still get the error, feel free to reopen with more information.\n", "created_at": "2013-03-02 08:44:38", "user": 5402, "id": 14325191}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "## Steps to produce\n1. `git clone git://github.com/iamvery/rails-3.2.13.rc1-pluck-regression.git`\n2. `cd rails-3.2.12.rc1-pluck-regression`\n3. `bundle install`\n4. `bundle exec rake db:create:all db:schema:load db:seed`\n5. `bundle exec rails c`\n### 6. From the console\n\n**Note output from rails 3.2.13.rc1**\n\n``` bash\n> Widget.select('DISTINCT name').pluck(:name)\n   (0.1ms)  SELECT \"widgets\".\"name\" FROM \"widgets\"\n => [\"thing\", \"thing\", \"thing\"]\n```\n\n**Recall output from rails 3.2.12**\n\n``` bash\n> Widget.select('DISTINCT name').pluck(:name)\n   (0.2ms)  SELECT DISTINCT \"widgets\".\"name\" FROM \"widgets\"\n => [\"thing\"]\n```\n\nIt seems logical that this regression may have been introduced in #7551, but I have not taken the time to confirm that in code.\n\n**Note**: It's also worth mentioning that according to [the docs](http://api.rubyonrails.org/classes/ActiveRecord/Calculations.html#method-i-pluck), the \"right\" way to do this is using `Widget.uniq.pluck(:name)`. I believe this would be recommended moving forward, but I still feel it's worth filing a regression because our tests failed post update.\n", "labels": ["activerecord", "regression"], "number": 9509, "updated_at": "2013-10-05 06:47:49", "user": 79619, "closed_at": "2013-03-06 13:32:28", "id": 11546600, "title": "Rails 3.2.13.rc1 regression: distinct select + pluck", "url": "https://api.github.com/repos/rails/rails/issues/9509", "created_at": "2013-03-01 14:32:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14292478", "text": "I'll take a look and report back when I know more.\n", "created_at": "2013-03-01 14:47:56", "user": 5402, "id": 14292478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14306208", "text": "FYI: I tried this on the versions mentioned above and can confirm the behavior as stated.\n", "created_at": "2013-03-01 19:18:50", "user": 180798, "id": 14306208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14312047", "text": "Note that Widget.pluck('DISTINCT name') still works as expected.\n", "created_at": "2013-03-01 21:20:23", "user": 180798, "id": 14312047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14314708", "text": "I looked at this pluck code - I'm definitely no expert with the rails source, but it seems like pull #8176 did indeed cause this behavior to change, as pluck is now ignoring the select clause and re-building the select_values on the relation based on the parameter(s) to pluck.\n\nHowever, I don't personally see this as a regression because the previous behavior wasn't actually working in all cases.  As you can see in #7551, if the select had multiple columns, pluck wasn't returning the correct values anyway.  I don't think there's a reliable way for pluck to respect the select clause while also using the parameters passed to pluck.\n\nSo yes, there is a behavior change since 3.2.12, but I think that pluck ignoring and rebuilding the select clause is the only way to go.  (Sure we could parse all select_values to see if they have the 'DISTINCT' keyword, but that would be gross and error-prone)\n", "created_at": "2013-03-01 22:17:30", "user": 180798, "id": 14314708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14317100", "text": "@iancanderson I really like the way you stated your response. Is there any further action that should be taken? Could documentation be improved in any way? Perhaps mentioning in the documentation for `pluck` that \"pluck ignores and rebuilds the select clause\"?\n\nIf the team likes that idea, I can update the docs myself and link back to this issue. Thanks for your input on this!\n", "created_at": "2013-03-01 23:18:38", "user": 79619, "id": 14317100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14325148", "text": "As previously mentioned using `select` in combination with `pluck` is confusing at best. There are different ways, which are more expressive to reach the same result. None the less it is a change in behaviour, which could break some apps while upgrading. There is no good way to fix this problem other than reverting and on master we keep the patch.\n\n@rafaelfranca @steveklabnik let me know if you want me to revert my changes.\n", "created_at": "2013-03-02 08:39:58", "user": 5402, "id": 14325148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14325928", "text": "I'll defer to whoever actually knows what the expected behavior should be.\n", "created_at": "2013-03-02 10:05:54", "user": 27786, "id": 14325928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14327688", "text": "I think the most reasonable solution would be to ignore the `select_values` and replace them with the column passed to pluck. (this is the current implementation on master and 3-2-stable). This behavior is different than 3.2.12 so It could break applications. I think master is fine and on 3-2-stable we could consider a revert. I'm fine either way.\n\nLet's wait for @rafaelfranca \n", "created_at": "2013-03-02 12:47:43", "user": 5402, "id": 14327688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328689", "text": "Yeah, I think that's where I'm at, too.\n", "created_at": "2013-03-02 14:12:26", "user": 27786, "id": 14328689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14399441", "text": "@senny :+1: for keeping this behaviour on master and reverting on 3-2-stable. I'll revert\n", "created_at": "2013-03-04 19:23:05", "user": 47848, "id": 14399441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14399507", "text": "I'll pull #8176 from the next release candidate, but leave it in 3-2-stable.  Let's see what we can do to be backwards compatible (but maybe issue a warning or something).\n", "created_at": "2013-03-04 19:24:03", "user": 3124, "id": 14399507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14399608", "text": "ok\n", "created_at": "2013-03-04 19:25:46", "user": 47848, "id": 14399608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14499235", "text": "Closed by 1b699fc8ad0eaf3503ec095413866ec5e4794162\n", "created_at": "2013-03-06 13:32:28", "user": 47848, "id": 14499235}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #7364.\n\nCollection associations behave similar to Arrays. However there is no way to prepend records. And to append one should use `<<`. Before this patch `#append` and `#prepend` did not add the record to the loaded association.\n\n`#append` now behaves like `<<` and `#prepend` is not defined.\n", "labels": ["activerecord"], "number": 9510, "updated_at": "2014-06-26 19:50:32", "user": 5402, "closed_at": "2013-03-01 20:31:44", "id": 11546717, "title": "deal with `#append` and `#prepend` on association collections", "url": "https://api.github.com/repos/rails/rails/issues/9510", "created_at": "2013-03-01 14:35:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14291900", "text": "/cc @tenderlove @jonleighton \n\n@rafaelfranca @carlosantoniodasilva could you review this patch?\n", "created_at": "2013-03-01 14:36:19", "user": 5402, "id": 14291900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14301846", "text": "These were never supported, so deprecating feels inappropriate. We support `#append` as an alias for `#<<` so we should add it to the proxy. Since `#prepend` doesn't make sense on an unordered collection, think it'd be clearer to undef the method: `NoMethodError` is what I'd expect.\n", "created_at": "2013-03-01 17:49:07", "user": 199, "id": 14301846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14307055", "text": "@jeremy `#append` was also not supported and did not work. Don't you think people will expect a `#prepend` if `#append` works? I'm fine either way but I would undef both methods.\n", "created_at": "2013-03-01 19:35:22", "user": 5402, "id": 14307055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14307199", "text": ":+1: for what @jeremy said. I think is good to support `#append` and not `#prepend` we don't need to be symmetrical. \n", "created_at": "2013-03-01 19:38:23", "user": 47848, "id": 14307199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14307597", "text": "good, I'll update.\n", "created_at": "2013-03-01 19:46:11", "user": 5402, "id": 14307597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14309501", "text": "@rafaelfranca I updated the PR, can you take another look?\n", "created_at": "2013-03-01 20:25:12", "user": 5402, "id": 14309501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14309727", "text": "the latest version uses alias_method.\n", "created_at": "2013-03-01 20:30:30", "user": 5402, "id": 14309727}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In PredicateBuilder (3.2.12) the build_from_hash method has the following lines:\n\n``` ruby\nmodule ActiveRecord\n  class PredicateBuilder # :nodoc:\n    def self.build_from_hash(engine, attributes, default_table, allow_table_name = true)\n      predicates = attributes.map do |column, value|\n        table = default_table\n\n        if allow_table_name && value.is_a?(Hash)\n          table = Arel::Table.new(column, engine)\n\n          if value.empty?\n            '1 = 2'\n          else\n            build_from_hash(engine, value, table, false)\n          end\n        else\n          column = column.to_s\n          ...\n```\n\nIf I pass\n\n``` ruby\n{:tasks=>{:jobs=>{:franchises=>{:id=>1}}}}\n```\n\n as the attribute parameter then the code doesn't recurse all the way down.  The line\n\n``` ruby\nbuild_from_hash(engine, value, table, false)\n```\n\nstops the recursion at depth 2 in the hash.  I noticed this problem because I updated my Rails app from 3.2.2 to 3.2.12.  Removing the false parameter seems to fix my problem but I don't fully understand the impact of that change.\n", "labels": ["activerecord", "regression"], "number": 9511, "updated_at": "2013-04-05 14:27:30", "user": 17036, "closed_at": "2013-04-05 14:27:30", "id": 11551710, "title": "PredicateBuilder does not properly parse attribute hash with depth more than 2", "url": "https://api.github.com/repos/rails/rails/issues/9511", "created_at": "2013-03-01 16:36:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14303964", "text": "That true/false option isn't on head, so you're saying this worked correctly in 3.2.2 and quit working in 3.2.12. Are you still seeing this error on head/master/rails4-beta ? \n", "created_at": "2013-03-01 18:34:22", "user": 59744, "id": 14303964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14309382", "text": "Yes, in Rails 3.2.2 the recursion stops when it reaches the innermost hash and produces the correct output for that function.\n\nI don't think my Rails app is ready to update to Rails 4.  I'd have to create a new Rails 4 project and setup some CanCan rules to recreate the scenario and test.  It'll be a little bit of effort so I'm not sure I'll be able to do this soon.  In the meantime I've forked Rails and I'm going to apply my own fix. \n", "created_at": "2013-03-01 20:22:35", "user": 17036, "id": 14309382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14316130", "text": "If there was a regression on 3.2 and you have a fix, I would appreciate a pull request to rails/rails\n", "created_at": "2013-03-01 22:51:39", "user": 59744, "id": 14316130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14334056", "text": "After digging around I found some more information about the bug.  It turns out that in Rails < 3.2.6 PredicateBuilder#bulid_from_hash could accept hashes like {:tasks=>{:jobs=>{:franchises=>{:id=>1}}}}.  Turns out this was an unintended side affect and was fixed in Rails >= 3.2.6.\n\nI inherited some code that was using CanCan rules with hashes that shouldn't be accepted by PredicateBuilder.  I've since modified my domain code to not use invalid hashes.\n\nFor more info see: https://github.com/ryanb/cancan/issues/646\n", "created_at": "2013-03-02 19:31:28", "user": 17036, "id": 14334056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15337450", "text": "I have an open pull request that addresses this issue.\nhttps://github.com/rails/rails/pull/9859\n\nThe problem still exists in master, although predicate_builder is quite different. I intend to investigate that implementation as well. \n", "created_at": "2013-03-23 13:55:21", "user": 815279, "id": 15337450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15366358", "text": "As mentioned, the problem still exists on master. I've submitted https://github.com/rails/rails/pull/9906 as a potential solution\n", "created_at": "2013-03-24 19:14:27", "user": 815279, "id": 15366358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15958632", "text": "As @jonleighton said in #9906, the current behaviour exists for security reasons, to prevent unsafe query generation.\n\nI'm closing this one\n", "created_at": "2013-04-05 14:27:30", "user": 47848, "id": 15958632}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Preview\nWith new Rails 4 must be a new Service pages\n![new404](https://f.cloud.github.com/assets/485466/208788/16ef281c-824a-11e2-925e-ad08899176cf.PNG)\n", "labels": [], "number": 9512, "updated_at": "2014-06-15 12:46:57", "user": 485466, "closed_at": "2013-03-02 22:06:38", "id": 11555396, "title": "New 404, 422, 500 pages, they are more stylish and bring ruby essence…", "url": "https://api.github.com/repos/rails/rails/issues/9512", "created_at": "2013-03-01 18:11:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14303191", "text": "Linking to the closed issue #9505, for people to have a better understanding about the discussion/feedback.\n\nAs a side note, there's no need to send a new pull request when rebasing/squashing, you can just change locally and push force to your branch, that github will update the pull request properly.\n\nThanks!\n", "created_at": "2013-03-01 18:17:34", "user": 26328, "id": 14303191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14303631", "text": "Oh, i have a little problem with my git, but for now it's ok. Changes that you highlighted complete.\n", "created_at": "2013-03-01 18:27:22", "user": 485466, "id": 14303631}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since updating to Rails 4.0.0.beta1 my `rails console --sandbox` mode has stopped reverting changes made to the database upon exit.\n\nBelow is an example of how I can replicate this issue:\n\n```\nrails c --sandbox\n\nPage.count #=> 0\nPage.create title: \"Test\" #=> true\nPage.count #=> 1\n\nexit\nrails c\n\nPage.count #=> 1\n```\n\nI'm using Ruby 2.0.0p0 and PostgreSQL 9.2.2.\n", "labels": ["activerecord"], "number": 9513, "updated_at": "2013-04-29 12:24:25", "user": 301630, "closed_at": "2013-03-08 13:59:22", "id": 11570372, "title": "rails console --sandbox does not revert changes anymore", "url": "https://api.github.com/repos/rails/rails/issues/9513", "created_at": "2013-03-02 02:22:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328300", "text": "I confirmed this issue with ruby 1.9.3 and PG. I'll take a look and report back when I know what's causing the problem.\n", "created_at": "2013-03-02 13:38:00", "user": 5402, "id": 14328300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328452", "text": "the problem is [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railtie.rb#L46)\n\n``` ruby\napp.sandbox? #=> nil\n```\n\nnot sure what's causing it, looks like something wrong with loading order...\n", "created_at": "2013-03-02 13:50:44", "user": 200500, "id": 14328452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328604", "text": "@nashby yes the load order is messed up. The active_record railtie only requires the sandbox file if `app.sandbox` is true. `app.sandbox` is assigned inside `Console#start` but then the raltie initializer is already executed. I created a patch so fix the load order and now when I close the console a ROLLBACK is issued but the data are still in the database. So there is still something fishy going on even when the load-order problem is resolved.\n", "created_at": "2013-03-02 14:04:18", "user": 5402, "id": 14328604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328818", "text": "I submitted a PR for the load order bug but the sandboxing does still not work on my machine.\n", "created_at": "2013-03-02 14:23:01", "user": 5402, "id": 14328818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14599956", "text": "I looked into it and here is my findings.\n\nFirst thing is that the PR that @senny mentioned above should be applied.\n\nWith that PR in if you execute master then this is the error you will get\n\n```\nSQLite3::SQLException: cannot start a transaction within a transaction: begin transaction\nActiveRecord::StatementInvalid: SQLite3::SQLException: cannot start a transaction within a transaction: begin transaction\n```\n\nHere is what I will get in Rails 3.2.12 .\n\n```\n$ bundle exec rails console --sandbox\nLoading development environment in sandbox (Rails 3.2.12)\nAny modifications you make will be rolled back on exit\nirb(main):001:0> Post.create\n   (0.2ms)  SAVEPOINT active_record_1\n  SQL (7.1ms)  INSERT INTO \"posts\" (\"created_at\", \"name\", \"string\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"created_at\", Fri, 08 Mar 2013 02:41:25 UTC +00:00], [\"name\", nil], [\"string\", nil], [\"updated_at\", Fri, 08 Mar 2013 02:41:25 UTC +00:00]]\n   (0.1ms)  RELEASE SAVEPOINT active_record_1\n=> #<Post id: 1, name: nil, string: nil, created_at: \"2013-03-08 02:41:25\", updated_at: \"2013-03-08 02:41:25\">\nirb(main):002:0> exit\n   (1.3ms)  rollback transaction\n```\n\nNotice that in Rails 3.2.12 savepoint is being issued which is missing in master code and hence the code blows up because nested transaction is not supported in sqlite3.\n\nsavepoint is defined here https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb#L181 but as per current code it should be used only if there is a rollback or a commit.\n\nRails 3 code relies on number on open transactions count to issue savepoint in case a transaction is already open and another transaction is issued. However Rails4 has deprecated usage of open transaction count.\n\ncc @jonleighton @tenderlove \n", "created_at": "2013-03-08 02:46:17", "user": 6399, "id": 14599956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14616097", "text": "I'll take a look at this as it seems to be due to my transactions changes.\n", "created_at": "2013-03-08 12:00:00", "user": 1979, "id": 14616097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17146884", "text": "Still happens to me on OSX\n\n```\n~/development/ruby/rails/rails_projects/sample_app(branch:master) » rails c --sandbox\nLoading development environment in sandbox (Rails 4.0.0.beta1)\nAny modifications you make will be rolled back on exit\n2.0.0p0 :001 > User.count\n   (0.4ms)  SELECT COUNT(*) FROM \"users\"\n => 0\n2.0.0p0 :002 > User.create(name: \"Foobar\", email: \"Foobar@gmail.com\", password: \"foobar\", password_confirmation: \"foobar\")\n   (0.6ms)  BEGIN\n  User Exists (1.6ms)  SELECT 1 AS one FROM \"users\" WHERE LOWER(\"users\".\"email\") = LOWER('Foobar@gmail.com') LIMIT 1\n  SQL (6.7ms)  INSERT INTO \"users\" (\"created_at\", \"email\", \"name\", \"password_digest\", \"updated_at\") VALUES ($1, $2, $3, $4, $5) RETURNING \"id\"  [[\"created_at\", Mon, 29 Apr 2013 01:22:44 UTC +00:00], [\"email\", \"foobar@gmail.com\"], [\"name\", \"Foobar\"], [\"password_digest\", \"$2a$10$WDSEC3Dl.hVB.RBBamMCxeajkyq6r3IGvMUERgRGnh.I9gOLusuF6\"], [\"updated_at\", Mon, 29 Apr 2013 01:22:44 UTC +00:00]]\n   (0.9ms)  COMMIT\n => #<User id: 7, name: \"Foobar\", email: \"foobar@gmail.com\", created_at: \"2013-04-29 01:22:44\", updated_at: \"2013-04-29 01:22:44\", password_digest: \"$2a$10$WDSEC3Dl.hVB.RBBamMCxeajkyq6r3IGvMUERgRGnh.I...\">\n2.0.0p0 :003 > User.count                                                                    (0.9ms)  SELECT COUNT(*) FROM \"users\"\n => 1\n2.0.0p0 :004 > exit------------------------------------------------------------\n~/development/ruby/rails/rails_projects/sample_app(branch:master) » rails c --sandbox\nLoading development environment in sandbox (Rails 4.0.0.beta1)\nAny modifications you make will be rolled back on exit\n2.0.0p0 :001 > User.count\n   (0.5ms)  SELECT COUNT(*) FROM \"users\"\n => 1\n```\n", "created_at": "2013-04-29 01:26:50", "user": 2400358, "id": 17146884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17152322", "text": "@lenzirodrigo  looking at your output you are running `4.0.0.beta1` the patch from @jonleighton is currently only available in `master` and not yet released as a gem.\n", "created_at": "2013-04-29 06:55:47", "user": 5402, "id": 17152322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17163614", "text": "Ups! Thank you!\n", "created_at": "2013-04-29 12:24:25", "user": 2400358, "id": 17163614}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey,\n\nI've been trying to modify the I18n.locale setting so that it sends an email with the correct locale in the template (such as implicit_with_locale.pl.text.erb in the fixtures).\n\nHowever, this doesn't work correctly if I modify it in an ActiveMailer interceptor because the call stack is not in the right order. \n\nThe pull request here is only a failing spec to demonstrate this behavior; I can work on a fix but I first wanted to confirm if that is intentional behavior, or perhaps something that was just overlooked?\n\nIt would be very useful if the interceptor was fired before the rendering of the template itself (in order to set I18n.locale, for example). \n\nThoughts? Ideas? \n\nThank you!\n", "labels": [], "number": 9514, "updated_at": "2014-07-04 15:48:41", "user": 3294, "closed_at": "2013-03-03 17:07:18", "id": 11570442, "title": "Interceptor for activemailer does not work well with rendering I18n", "url": "https://api.github.com/repos/rails/rails/issues/9514", "created_at": "2013-03-02 02:27:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14344803", "text": "This underlying behavior is incorrect since the interceptors are designed to interact with an email after it has been generated, but before it has ben sent. While it could be useful to interact with the email before it is generated, an interceptor would not be the desired place to do this, there is a `before_action` that already exists to do this.\n\nWhat are you trying to do exactly? You could modify the locale using a `before_action` in the mailer itself:\n\n```\n  #   class Notifier < ActionMailer::Base\n  #     before_action :add_inline_attachment!\n  #\n  #     def welcome\n  #       mail\n  #     end\n  #\n  #     private\n  #\n  #       def add_inline_attachment!\n  #         attachments.inline[\"footer.jpg\"] = File.read('/path/to/filename.jpg')\n  #       end\n  #   end\n```\n", "created_at": "2013-03-03 10:26:45", "user": 59744, "id": 14344803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14349964", "text": "I have to agree with @schneems, the interceptor needs to receive the email ready to be sent, which means everything should have already been generated at that point. What if you want to somehow process the email output like you can change headers? You'd now not be able to do that because the order is changed.\n\nAnyway, As @schneems pointed, a good place for doing that would be a before/around action/filter, seems like the best solution :+1:\n", "created_at": "2013-03-03 16:50:01", "user": 26328, "id": 14349964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14350286", "text": "Going to close this for now. Feel free to ping with questions.\n", "created_at": "2013-03-03 17:07:18", "user": 59744, "id": 14350286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14412058", "text": "Looks like https://github.com/rails/rails/pull/8465 and https://github.com/rails/rails/pull/5372 are related to this. I tried doing this in a rails 3.2.11 app, but I got undefined method for both `before_filter` and `before_action`. \n\nWhat version is this behavior supported in?\n", "created_at": "2013-03-04 22:54:00", "user": 3294, "id": 14412058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14469336", "text": "Actually I might just have an app specific problem with this. I haven't had time to dig into it quite yet, but looks like rails does supply this functionality. Will report back if I have any follow-up questions. Thanks for the help!\n", "created_at": "2013-03-05 22:21:45", "user": 3294, "id": 14469336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14538311", "text": "So, it looks like rails does have the before_filter in the code, but it's never been released. I'm still getting \"undefined method before_action / before_filter\". I was bundling rails 3.2.13.rc2 and also 3.2.12 and in the same exists in both cases. It indeed looks like this has not been released, confirming by the following in a debugging session with those versions of rails:\n\n<pre>\n[4] pry(TrialMailer)> ActionMailer::Base.included_modules.include?(AbstractController::AssetPaths)\n=> true\n[5] pry(TrialMailer)> ActionMailer::Base.included_modules.include?(AbstractController::Callbacks)\n=> false\n</pre>\n\nCan you confirm and/or comment on when this functionality should be available, or help me understand where I've gone wrong.\n\nThanks.\n", "created_at": "2013-03-07 01:43:59", "user": 3294, "id": 14538311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14538455", "text": "This PR is against master, you'll need to look at Rails 4 master. You can try it out with the beta if it's more convenient. \n\nhttps://github.com/rails/rails/blob/master/actionmailer/test/base_test.rb#L588\n", "created_at": "2013-03-07 01:49:01", "user": 59744, "id": 14538455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14545109", "text": "Ah, overlooked v4. Thanks!\n", "created_at": "2013-03-07 06:33:22", "user": 3294, "id": 14545109}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes the load order problem described in #9513. It is not a complete fix for #9513 though. As pointed out by @nashby the load order was messed up so that `app.sandbox` was nil when the AR console initializer ran. This is now fixed.\n\nEven after the fix the data created will not rollback. There is still something fishy going on with the sandboxing of the console. That's why I did not add a CHANGELOG entry but I think we should merge this to help other people, who are looking at the sandboxing problem.\n", "labels": [], "number": 9515, "updated_at": "2014-06-26 15:54:29", "user": 5402, "closed_at": "2013-03-08 14:00:47", "id": 11576665, "title": "fix load order of console sandbox", "url": "https://api.github.com/repos/rails/rails/issues/9515", "created_at": "2013-03-02 14:22:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14328813", "text": "@carlosantoniodasilva @rafaelfranca @steveklabnik could you take a look?\n", "created_at": "2013-03-02 14:22:32", "user": 5402, "id": 14328813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14336343", "text": "Weird, it's been like that since 3-2, `sandbox` is being set in `start` method. I don't mind merging, but it seems that's not the problem yet so perhaps finding the real problem might solve everything without that change?\n", "created_at": "2013-03-02 21:29:26", "user": 26328, "id": 14336343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14337320", "text": "I don't think so because without that change the sandbox file is not even required. so there is no transaction started and no rollback. so essentially the console is identical to a normal console.\n\nAm 02.03.2013 um 22:30 schrieb Carlos Antonio da Silva notifications@github.com:\n\n> Weird, it's been like that since 3-2, sandbox is being set in start method. I don't mind merging, but it seems that's not the problem yet so perhaps finding the real problem might solve everything without that change?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-02 22:28:32", "user": 5402, "id": 14337320}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14620860", "text": "Closing per the above commit\n", "created_at": "2013-03-08 14:00:47", "user": 1979, "id": 14620860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14621152", "text": ":heart:\n", "created_at": "2013-03-08 14:04:53", "user": 26328, "id": 14621152}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a many to many relation using a through table:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_many :badges, :through => :users_badges \nend\n\nclass UsersBadges < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :badge\n  belongs_to :badgesource, :polymorphic => true\nend\n\nclass Badge < ActiveRecord::Base\n  attr_accessible :points, :description\n  has_many :users, :through => :users_badges\nend\n```\n\nAnd a fixtures file named `users_badges.yaml` inside of test/fixtures.\n\nThe first issue was really that it was recognizing the class name for my UsersBadges model as UsersBadge ( which I'm not sure is correct - I couldn't find documentation on this).\n\nSo - the workaround was to add `set_fixture_class` before the fixtures are loaded inside of test_helper.rb\n\nUnfortunately, this only works in the test context. It's nice to interact with the fixtures in the console but running rake:db:fixtures:load does the same naming conversion translation. \n\nWhen it gets the class name wrong, it doesn't correctly grok the fixture file. My fixtures are related using labels. The SQL insert statement isn't adjusted to use ids and I get:\n\ntable `users_badges` has no column named user: \n\n``` sql\nINSERT INTO \"users_badges\" (\"user\", \"badge\", \"badgesource\") VALUES ('user1', 'mood_badge', 'rocking_out (Generic)').\n```\n\nThe relevant code is around `lib/active_record/fixtures.rb:492`\n", "labels": ["activerecord", "pinned"], "number": 9516, "updated_at": "2015-09-30 09:09:53", "user": 70507, "closed_at": "2015-09-30 09:07:58", "id": 11577108, "title": "Rake db:fixtures:load - can't set fixture_class_name.", "url": "https://api.github.com/repos/rails/rails/issues/9516", "created_at": "2013-03-02 15:02:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14344657", "text": "The convention is to use singular model names, other wise when you're dealing with multiple `UsersBadges`, you would call them `UsersBadges-s` which wouldn't make much sense. Rails expects it to be `UserBadge` or `UsersBadge` (though the first makes more sense). \n\nIf you're not following this convention, you'll need to manually specify your table name in your `has_many` lines. Try that and see if it fixes your issue.\n\nYou will also need to check that this behavior is the same in 4.0.0. The line you referenced is an `end` in master.\n", "created_at": "2013-03-03 10:11:15", "user": 59744, "id": 14344657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15020580", "text": "The model name should always be singular. Rails will pluralize it in many places and expects the class name to be singular.\n", "created_at": "2013-03-17 10:42:12", "user": 5402, "id": 15020580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16113642", "text": "I'm closing this issue as it has been over a month since we heard from you. Please feel free to report back if this issue still persists and the advice from @schneems did not fix the problem.\n\nThanks for reporting :yellow_heart: \n", "created_at": "2013-04-09 13:54:22", "user": 5402, "id": 16113642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54727124", "text": "@senny, I've run into a similar issue. Maybe it's time to reopen this:\n- I'm using acts_as_taggable_on which has ActsAsTaggableOn::Tag and ActsAsTaggableOn::Tagging classes.\n- their fixtures live in tag.yml and tagging.yml.\n- in my tests i use set_fixture_class and everything is fine.\n\nI run into errors when trying to load the fixtures into the database with rake db:fixtures:load though.\nThis is due to the fact that the rake task sends [no third param to create_fixtures](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railties/databases.rake#L202) \nwhile load_fixtures [hands over the class lookup hash](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/fixtures.rb#L997).\n\nI was thinking about providing a patch. But I could not figure out any good place to store the class names. Including ActiveRecord::TestFixtures felt like a bit too much and it would also still require additional calls to set_fixture_class. Loading the test_helper and using the TestCase class feels wrong. So maybe these settings should go somewhere more generic and be set in an initializer or config?\n", "created_at": "2014-09-06 20:22:22", "user": 102902, "id": 54727124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54830337", "text": "@jacobstr thanks for reporting back. I'll reopen.\n", "created_at": "2014-09-08 14:46:35", "user": 5402, "id": 54830337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68540693", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-01-02 16:43:21", "user": 7468109, "id": 68540693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/111340234", "text": "Why trying to duplicate the issue using `master`, I didn't have any SQL problem. However, the fixture were not properly loaded into the database.\n\nMy [sample app](https://github.com/repinel/my_app/tree/set-fixture) has the following models:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  self.table_name = 'records'\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n```\n\nAnd `schema.rb`:\n\n``` ruby\n  create_table \"comments\", force: :cascade do |t|\n    t.string   \"content\"\n    t.integer  \"post_id\"\n  end\n\n  create_table \"records\", force: :cascade do |t|\n    t.string \"title\"\n  end\n```\n\n`records.yml`:\n\n``` yaml\none:\n  title: foo\n```\n\n`comments.yml`\n\n``` yaml\ngreat:\n  content: 'great'\n  post: one\n```\n\nYou may check by the app tests that the fixtures load fine for the tests having `set_fixture_class records: Post` in the `test_helper.rb`.\n\n@senny What's your opinion on having something like a `mapping.rb` file on `fixtures` directory that would holder the `set_fixture_class` statements make it easier to share that with the `db:fixtures:load`? One other option could be having the class name defined in the fixture itself with something like `CLASS_NAME` and being ignored just like is done for `DEFAULTS`.\n", "created_at": "2015-06-12 03:13:02", "user": 1685896, "id": 111340234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/112001344", "text": "Backtracking in the git history, it looks like ada11d6313bd1f74c6a229caca36ca063b38da4e was the origin of `set_fixture_class`. I still feel like this configuration is directly related to the fixture and not the TestCase (the way it's currently implemented).\n\nIf that's the case (maybe @jeremy can elaborate more about the origin) I think we could make the configuration accessible directly in the fixture file itself. Something along the lines of:\n\n``` yaml\n<% set_fixture_class \"Book\" %>\n\none:\n  title: \"Odyssey\"\n\ntwo:\n  title: \"Ulysses\"\n```\n", "created_at": "2015-06-15 09:54:43", "user": 5402, "id": 112001344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/133427564", "text": "I'm getting bit by this now as well.\n\nI agree with @senny sentiment, \"feel like this configuration is directly related to the fixture and not the TestCase\" and also his suggestion for the declaration in the fixture file.\n", "created_at": "2015-08-21 13:41:28", "user": 2057, "id": 133427564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/144334034", "text": "with #20574 merged Rails 5 will allow you to configure the fixture class directly in the YAML file:\n\n_test/fixtures/accounts.yml_\n\n``` yaml\n_fixture:\n  model_class: User\ndavid:\n  name: David\n```\n", "created_at": "2015-09-30 09:09:53", "user": 5402, "id": 144334034}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This could be done by design now, with the implementation of `includes()` changing on a `has_many` relationship. In Rails 3.2.12, adding the `:include` option to a `has_many` relationship included whatever relationship you defined from the association's model. In 4.0.0.beta1, it looks like it's trying to find the relationship on the model the relationship is defined on. I have illustrated what I mean below.\n\nWhile this worked on Rails 3.2.12:\n\n``` ruby\nclass Professor < ActiveRecord::Base\n  has_many :sections, include: :course\nend\n\nclass Section < ActiveRecord::Base\n  belongs_to :course\nend\n```\n\nThis doesn't work on 4.0.0.beta1:\n\n``` ruby\nclass Professor < ActiveRecord::Base\n  has_many :sections, -> { includes :course }\nend\n\nclass Section < ActiveRecord::Base\n  belongs_to :course\nend\n```\n", "labels": ["activerecord"], "number": 9517, "updated_at": "2014-02-27 16:34:52", "user": 46724, "closed_at": "2013-10-27 20:06:00", "id": 11578771, "title": "has_many with includes() as a scope cannot find association", "url": "https://api.github.com/repos/rails/rails/issues/9517", "created_at": "2013-03-02 17:20:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14331848", "text": "Ah, correction, this works the way I posted it, but when I have a subsequent relationship defined:\n\n``` ruby\nclass Professor < ActiveRecord::Base\n  has_many :sections, -> { includes :course }\n  has_many :courses, -> { uniq }, through: :sections\nend\n```\n\n`Professor.find(1).courses` raises this error:\n\n```\n2.0.0p0 :002 > Professor.find(10).courses\n  Professor Load (0.6ms)  SELECT `professors`.* FROM `professors` WHERE `professors`.`id` = 10 LIMIT 1\n  Course Load (3.9ms)  SELECT DISTINCT `courses`.* FROM `courses` INNER JOIN `sections` ON `courses`.`id` = `sections`.`course_id` WHERE `sections`.`professor_id` = 10\nActiveRecord::ConfigurationError: Association named 'course' was not found; perhaps you misspelled it?\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:147:in `block in records_by_reflection'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:143:in `each'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:143:in `group_by'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:143:in `records_by_reflection'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:136:in `grouped_records'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:127:in `preload_one'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:104:in `preload'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:93:in `block in run'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:93:in `each'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/preloader.rb:93:in `run'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:560:in `block in exec_queries'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:559:in `each'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:559:in `exec_queries'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:447:in `load'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:197:in `to_a'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/has_many_through_association.rb:188:in `find_target'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/collection_association.rb:335:in `load_target'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/collection_proxy.rb:45:in `load_target'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/associations/collection_proxy.rb:922:in `to_ary'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/activerecord/lib/active_record/relation.rb:543:in `inspect'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/railties/lib/rails/commands/console.rb:88:in `start'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/railties/lib/rails/commands/console.rb:9:in `start'\n    from /Users/alex/.rvm/gems/ruby-2.0.0-p0@uclass/bundler/gems/rails-2d4068dbeff7/railties/lib/rails/commands.rb:64:in `<top (required)>'\n    from bin/rails:4:in `require'\n\n```\n", "created_at": "2013-03-02 17:35:13", "user": 46724, "id": 14331848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14332069", "text": "Now that I think about it, this is probably done by design, with the `includes(:course)` being called on the courses relationship and not the sections relationship. \n", "created_at": "2013-03-02 17:49:09", "user": 46724, "id": 14332069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16386855", "text": "@agrobbin Can you describe the situation with an executable test-case in a gist? \n\nPlease look at section 1.2 of Rails guide on how to create the gist. http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-a-self-contained-gist-for-active-record-issues\n", "created_at": "2013-04-15 14:09:44", "user": 6399, "id": 16386855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19873297", "text": "@agrobbin , it's been a while since we've heard from you, and as you mention, this may be by design. If you change your mind and think that it's a bug, please provide an executable reproduction, as @neerajdotname mentions. Thanks.\n", "created_at": "2013-06-23 12:37:17", "user": 27786, "id": 19873297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25249216", "text": "Seeing this same problem. Gist is [here](https://gist.github.com/shekibobo/6729255).\n", "created_at": "2013-09-27 14:32:31", "user": 293858, "id": 25249216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25258499", "text": "I can confirm this. It passes without the `uniq` scoping. Thanks for the gist @shekibobo. Reopening.\n", "created_at": "2013-09-27 16:33:20", "user": 354185, "id": 25258499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27177909", "text": "Closed by #12664\n", "created_at": "2013-10-27 20:06:09", "user": 47848, "id": 27177909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27287488", "text": "Will this fix be included in 4.0.x?\n", "created_at": "2013-10-29 09:13:36", "user": 20515, "id": 27287488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27291911", "text": "@scambra : As far as I can see, this will be in 4.0.2 at least (but not 4.0.1 I think).\n", "created_at": "2013-10-29 10:32:33", "user": 354185, "id": 27291911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35038325", "text": "It did NOT get included in 4.0.2 :(\n", "created_at": "2014-02-13 23:15:58", "user": 489001, "id": 35038325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36260645", "text": "Still not fixed on 4.0.3\n", "created_at": "2014-02-27 16:30:22", "user": 37088, "id": 36260645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36261204", "text": "4.0.3 was a security release. No commits but the ones fixing the security flaw were included there.\nIt will be included in the next non-security release of 4.0.\n", "created_at": "2014-02-27 16:34:52", "user": 9347, "id": 36261204}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've created an edge Rails application and set `config.active_record.schema_format = :sql`, but the database structure isn't being dumped to the structure.sql file. All I'm getting are `INSERT into schema_migrations` lines, but nothing about the tables themselves. I'm using MySQL 5.5.28 and Ruby 2.0.0-p0. Running `ActiveRecord::Base.connection.structure_dump` does work, as well as dumping the schema in `:ruby` format.\n", "labels": ["activerecord"], "number": 9518, "updated_at": "2013-03-06 15:03:06", "user": 55320, "closed_at": "2013-03-06 15:03:06", "id": 11580578, "title": "No structure in structure.sql in edge Rails app", "url": "https://api.github.com/repos/rails/rails/issues/9518", "created_at": "2013-03-02 19:36:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14344534", "text": "Can you push your code to a github repo and paste a link to it? \n", "created_at": "2013-03-03 09:58:49", "user": 59744, "id": 14344534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347096", "text": "Here is a Rails project with a bad structure.sql file: https://github.com/CarolFS/rails-issue-9518\n", "created_at": "2013-03-03 13:44:48", "user": 55320, "id": 14347096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347807", "text": "I get a valid structure.sql with the following steps:\n1. clone the project\n2. create the database\n3. call rake db:migrate\n\nThis results in the following structure.sql: https://gist.github.com/senny/5076351\n\nI could also apply it using `rake db:schema:load`\n\nI tried with ruby 1.9.3 does it only happen with 2.0? What exact steps are you performing?\n", "created_at": "2013-03-03 14:42:14", "user": 5402, "id": 14347807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14348074", "text": "Here is what I did, using Ruby 2.0:\n\n```\n$ git clone git://github.com/CarolFS/rails-issue-9518.git\nCloning into 'rails-issue-9518'...\nremote: Counting objects: 77, done.\nremote: Compressing objects: 100% (55/55), done.\nremote: Total 77 (delta 10), reused 76 (delta 9)\nReceiving objects: 100% (77/77), 22.58 KiB, done.\nResolving deltas: 100% (10/10), done.\n$ cd rails-issue-9518/\n$ bundle install\n...\n$ bundle exec rake db:setup\nYou have 1 pending migrations:\n  20130303134001 CreateTests\nRun `rake db:migrate` to update your database then try again.\n$ bundle exec rake db:migrate\n==  CreateTests: migrating ====================================================\n-- create_table(:tests)\n   -> 0.0745s\n==  CreateTests: migrated (0.0746s) ===========================================\n\n$ cat db/structure.sql \nINSERT INTO schema_migrations (version) VALUES ('20130303134001');\nINSERT INTO schema_migrations (version) VALUES ('20130303134001');\n```\n\nNow using Ruby 1.9.3-p392 (same results):\n\n```\n$ git clone git://github.com/CarolFS/rails-issue-9518.git\nCloning into 'rails-issue-9518'...\nremote: Counting objects: 77, done.\nremote: Compressing objects: 100% (55/55), done.\nremote: Total 77 (delta 10), reused 76 (delta 9)\nReceiving objects: 100% (77/77), 22.58 KiB, done.\nResolving deltas: 100% (10/10), done.\n$ cd rails-issue-9518/\n$ bundle install\n...\n$ ruby -v\nruby 1.9.3p392 (2013-02-22 revision 39386) [x86_64-darwin12.2.0]\n$ bundle exec rake db:setup\nYou have 1 pending migrations:\n  20130303134001 CreateTests\nRun `rake db:migrate` to update your database then try again.\n$ bundle exec rake db:migrate\n==  CreateTests: migrating ====================================================\n-- create_table(:tests)\n   -> 0.0806s\n==  CreateTests: migrated (0.0808s) ===========================================\n\n$ cat db/structure.sql \nINSERT INTO schema_migrations (version) VALUES ('20130303134001');\nINSERT INTO schema_migrations (version) VALUES ('20130303134001');\n```\n", "created_at": "2013-03-03 15:00:00", "user": 55320, "id": 14348074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14371988", "text": "`connection#structure_dump` is no longer used. As of this commit: ccc6910 we use `mysqldump` to dump the structure of your database. Please try the following things:\n- Call `rake structure:dump` and see if `structure.sql` is still empty\n- Check if `mysqldump` is found on your system\n- If it's installed, try to execute the command generated from this code: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/tasks/mysql_database_tasks.rb#L55-L61\n\nIt's confusing that the old `#structure_dump` code is still in rails and no longer used. I will submit a PR to remove it.\n", "created_at": "2013-03-04 09:41:27", "user": 5402, "id": 14371988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14375985", "text": "I called `rake db:structure:dump`, but `structure.sql` was still empty. Then I checked if `mysqldump` was found on my system, it was, but it wasn't in my path. I executed the command from the code you linked to and it worked. I added `mysqldump` to my path as an experiment and now `rake db:structure:dump` works too, `structure.sql` is as it should be. So I conclude that for `rake db:structure:dump` to work, `mysqldump` should be in the path. Thanks for your help!\n", "created_at": "2013-03-04 11:21:39", "user": 55320, "id": 14375985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14376080", "text": "@CarolFS thanks for your feedback. I think we need to adjust the code to throw an error when `mysqldump` is not found. The current situation is confusing to the user. I'll adjust the code accordingly.\n", "created_at": "2013-03-04 11:24:19", "user": 5402, "id": 14376080}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Imagine a rails app that has two versions that developers need to support: 1.0 and 2.0. There are 2 database schemas: app-1, app-2.\n\nAfter fixing a bunch of very important bugs in production (1.0), some junior developer named Bob switches the branch to 2.0 to implement a few features but somehow gets his app connected to the schema app-1 and does rake db:migrate\n\nAs I understand, in that case the app-1 schema will be migrated to 2.0. Considering a fact that migrations are not always reversible, Bob is in trouble and instead doing useful work, has to restore the db schema.\n", "labels": [], "number": 9519, "updated_at": "2013-03-02 21:22:46", "user": 60022, "closed_at": "2013-03-02 21:22:46", "id": 11580648, "title": "Is there a way to prevent an accidental migration from newer version of app to older one?", "url": "https://api.github.com/repos/rails/rails/issues/9519", "created_at": "2013-03-02 19:41:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14336221", "text": "Please use the Rails Talk or other mailing lists, StackOverflow, or any irc channel to ask for help, lets keep the issues tracker for issues ;). Thanks.\n", "created_at": "2013-03-02 21:22:46", "user": 26328, "id": 14336221}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It is possible under some environments to receive an Exception that is not extended with Blamable (e.g. JRuby). ActiveSupport::Dependencies::Loadable#load_dependency blindly call blame_file! on the exception which throws it's own NoMethodError exception and hides the original Exception.\n", "labels": [], "number": 9520, "updated_at": "2013-03-02 21:38:45", "user": 6369, "closed_at": "2013-03-02 21:38:45", "id": 11582317, "title": "ActiveSupport::Dependencies::Loadable#load_dependency blindly calls blame_file! on Exceptions", "url": "https://api.github.com/repos/rails/rails/issues/9520", "created_at": "2013-03-02 21:26:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It is possible under some environments to receive an Exception that is not extended with Blamable (e.g. JRuby). ActiveSupport::Dependencies::Loadable#load_dependency blindly call blame_file! on the exception which throws it's own NoMethodError exception and hides the original Exception.\n", "labels": ["activesupport"], "number": 9521, "updated_at": "2014-12-01 16:13:55", "user": 6369, "closed_at": "2013-05-31 19:18:47", "id": 11582434, "title": "ActiveSupport::Dependencies::Loadable#load_dependency blindly calls blame_file! on Exceptions", "url": "https://api.github.com/repos/rails/rails/issues/9521", "created_at": "2013-03-02 21:35:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14336506", "text": "gack, my github-fu failed. accidently made 2 tickets.\n", "created_at": "2013-03-02 21:38:32", "user": 6369, "id": 14336506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16604556", "text": "I just hit this issue on jruby as well. Seems to happen whenever it tries to call blame_file! on java exceptions.\n\nMaybe the correct solution to this is to make java exceptions inherit from Exception so that the line where it says:\n\n``` ruby\nException.class_eval { include Blamable }\n```\n\nactually affects java exceptions?\n", "created_at": "2013-04-18 20:12:24", "user": 102009, "id": 16604556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17151318", "text": ":+1: \n", "created_at": "2013-04-29 06:08:18", "user": 12844, "id": 17151318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18465702", "text": "I've looked into my proposal above and it doesn't seem feasible. So this PR is probably as good as it's going to get for solving this problem.\n", "created_at": "2013-05-26 16:38:37", "user": 102009, "id": 18465702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18465752", "text": "@akreiling, you'll need to make your change against master and not the 3-2-stable branch. Then if they accept it into master you can ask them to backport it to 3-2-stable.\n", "created_at": "2013-05-26 16:42:12", "user": 102009, "id": 18465752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18766111", "text": "closing this as #10795 is open for master.\n\nthanks guys!\n", "created_at": "2013-05-31 19:18:47", "user": 3948, "id": 18766111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/65087646", "text": "Is this scheduled to be backported to 3-2-stable cause I'm still having this issue in JRuby?\n", "created_at": "2014-12-01 16:10:34", "user": 322354, "id": 65087646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/65088180", "text": "Rails 3 is not supported anymore\n", "created_at": "2014-12-01 16:13:55", "user": 47848, "id": 65088180}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you don't define `inverse_of` in an association, then you don't get the performance benefits of the inverse associations. However, these inverses can often times be guessed automatically. I'm adding functionality that will do some simple guesses if the `inverse_of` has not been set in an association.\n\nFor example, let's say we have two models Post and Comment:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_one :comment\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n```\n\nThe code I'm adding will automatically find that the post and comments are inverses of each other, so that the result is that the above code is equivalent to this:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  has_one :comment, :inverse_of => :post\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post, :inverse_of => :comment\nend\n```\n\nNote that I've removed some tests which no longer make any sense (they were asserting that inverses were nil, but the new functionality means that they actually do find an inverse automatically).\n", "labels": ["activerecord"], "number": 9522, "updated_at": "2014-07-21 07:50:41", "user": 1075780, "closed_at": "2013-05-08 03:52:39", "id": 11582804, "title": "Finding inverse associations automatically", "url": "https://api.github.com/repos/rails/rails/issues/9522", "created_at": "2013-03-02 22:01:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14336929", "text": "/cc @tenderlove \n", "created_at": "2013-03-02 22:04:23", "user": 160941, "id": 14336929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14363870", "text": "I support the idea as I would really like to see such behaviour be automatic (I never understood why parent.children.build, a very commo pattern, doesn't set parent on children without :inverse_of which is a somewhat less known option). That being said, I have some questions about implementation. \n\nWould this work with `:class_name` option? I'm also concerned that there seems to be no caching, which can cause performance issues with those to_sym and rescue on every association call.\n\nAlso, if parent has_many children and child belongs_to parent, then when using syntax `parent.children.build`, parent.children is an association object and should know the parent's ruby class and association type. Would it be possible to use this information to deterministically find the parent rather than heuristically? (e.g. try to symbolize keys and rescue if not found)\n", "created_at": "2013-03-04 04:48:11", "user": 242532, "id": 14363870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14364361", "text": "@egilburg Your right, it seems like I should be excluding a bunch of cases when the association, as @jeremy said, has particular options on it. I'll also go ahead and implement some caching because it seems to have a small memory penalty in comparison with running this method multiple times.\n\nI'm going to make sure that this method isn't called when there are conditions on the association.\n", "created_at": "2013-03-04 05:17:47", "user": 1075780, "id": 14364361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14387580", "text": "I've been poking at a similar patch, but have never gotten it working quite right. Some thoughts:\n- it may be better to check `:foreign_key`, `:primary_key` and `:class_name` instead of relying on the name of the inverse association.\n- there needs to be some way to explicitly opt-out of the guessing. A fairly common Rails idiom is to make passing `false` explicitly turn off default behavior.\n- definitely want to avoid picking an association with `:conditions` or a lambda attached.\n", "created_at": "2013-03-04 15:55:50", "user": 1191, "id": 14387580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14481624", "text": "I've done a bunch of things to improve this PR. First, I've added caching as @egilburg suggested. The results for each reflection are computed once and stored in the `@automatic_inverse_of` (the user can also clear this cache using `remove_automatic_inverse_of!`). \n\nSecond, I've added the ability for a user to opt out of having the reflection automatically find an inverse, as @al2o3cr  suggested. You can now use the following syntax to opt out of the automatic inverse finding:\n\n``` ruby\nhas_many :posts, :automatic_inverse_of => false\n```\n\nThe option only works when you are given an explicit `false` value. \n\nThird, I've limited the method so that that when particular options are specified on an association, the automatic inverse finding will fail. The association options that cause a failure in the automatic inverse finder are specified in:\n\n``` ruby\nINVALID_AUTOMATIC_INVERSE_OPTIONS = [:class_name, :conditions, :through, :polymorphic, :foreign_key]\n```\n\nThese options are checked for both the current reflection and the potential inverse. \n\nAs a side note: a couple of the models in the ActiveRecord tests had to be changed to `:automatic_inverse_of => false` because they relied on the models not have inverses.\n", "created_at": "2013-03-06 04:11:15", "user": 1075780, "id": 14481624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14544051", "text": "Looking good :+1:\n\n/cc @jonleighton @tenderlove \n", "created_at": "2013-03-07 05:46:19", "user": 199, "id": 14544051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14570447", "text": "Wouldn't `:inverse_of => false` be equally descriptive to turn off guessing? Also avoids adding another config option...\n", "created_at": "2013-03-07 16:26:48", "user": 1191, "id": 14570447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14570774", "text": "@al2o3cr That's a good point. I don't really see any downside with that approach. I'll go ahead and change it.\n", "created_at": "2013-03-07 16:31:55", "user": 1075780, "id": 14570774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14603887", "text": "Does this work on both sides of a has_many relationship? Refer to issue: https://github.com/rails/rails/issues/8125\n", "created_at": "2013-03-08 05:53:15", "user": 926982, "id": 14603887}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14604251", "text": "@Retistic No it doesn't, and in fact, it shouldn't because the belongs_to association isn't supposed to be invertible into a has_many. For example, see here in the documentation: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations.rb#L933. \n\nEven more clear is inside the belongs_to_association file where `invertible_for?` is defined: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/belongs_to_association.rb#L72-77. The code clearly only works for has_one associations, not has_many.\n\nI'm not adding any extra functionality to inverse_of, I'm simply making sure that if an inverse can be found easily, then Rails will automatically call that inverse instead of waiting for the user to add it.\n", "created_at": "2013-03-08 06:04:47", "user": 1075780, "id": 14604251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14610493", "text": "That makes sense and this is a great idea.\n\n+1 for this pull request\n", "created_at": "2013-03-08 09:16:01", "user": 926982, "id": 14610493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14615665", "text": "- I'm in favour of this feature in general, but I think it's too late to go in 4.0\n- For me `inverse_of: nil` reads a bit better than `inverse_of: false`. We're trying to express \"this association is not the inverse of anything\", i.e. \"the association is the inverse of nothing (`nil`)\".\n- I think we'll probably need a global config to turn this off, as people upgrading existing apps are likely to encounter problems and will need an easy escape route.\n\nI'm up for working on getting this merged, but let's wait til 4-0-stable has been branched.\n", "created_at": "2013-03-08 11:46:43", "user": 1979, "id": 14615665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14627735", "text": "@jonleighton - the biggest reason I can see to prefer `inverse_of: false` is that it's trickier to distinguish an option explicitly set to `nil` from an option that wasn't passed at all. Using `false` also follows the pattern established by `autosave`, where omitting the option / setting it to `nil` gives the default behavior (for `autosave`, only autosaving on new records) while `false` completely disables the behavior.\n", "created_at": "2013-03-08 16:08:40", "user": 1191, "id": 14627735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667458", "text": "@al2o3cr probably we should just check for falsey values, which both `nil` and `false` are, so this probably doesn't need to affect the code. but perhaps the documentation. I still think `inverse_of: nil` makes more sense, and I don't think it needs to mirror `autosave: false` (which makes sense in the context of autosave).\n", "created_at": "2013-03-09 18:01:06", "user": 1979, "id": 14667458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15621391", "text": "Letting people know this is the current state of this PR (had to hunt for it in comments) \n\n> wait til 4-0-stable has been branched.\n\nAfter 4.0 has been branched we will re-visit this feature. \n", "created_at": "2013-03-28 23:24:19", "user": 59744, "id": 15621391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17275434", "text": "This is really exciting, my original intention for `:inverse_of` was that it be automatic.  Indeed in the [parental_control plugin](https://github.com/h-lame/parental_control/) the feature was extracted from, it always was automatic.  \n\nThere's some work in there that might be useful to look at, particularly https://github.com/h-lame/parental_control/blob/master/lib/parental_control.rb#L17 onwards.  It looks like you've got everything covered, but I notice that you explicitly discard associations with the `class_name` option set.  It's been a while since I used `parental_control` (it's a _plugin_ after all) but I'm not sure that it has that constraint, so if you can stomach comparing rails 2.3 plugin code to rails 4.0-ish internals it might be worth comparing the approaches.\n", "created_at": "2013-05-01 10:07:01", "user": 608, "id": 17275434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17285685", "text": "@h-lame Thanks for the tip! I looked at the `parental_control` code and I think it can indeed be useful. I'm now checking the primary key, and making sure that `klass.primary_key` matches the reflection's primary key.\n\nI think this makes it possible to keep associations with the `class_name` option set. \n", "created_at": "2013-05-01 15:01:48", "user": 1075780, "id": 17285685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17585209", "text": "/cc @jonleighton 4-0-stable is live now, this can be reviewed now :smile:\n", "created_at": "2013-05-08 03:52:11", "user": 160941, "id": 17585209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19097375", "text": "I don't think this was ready to be merged. It still has the `:automatic_inverse_of` option, which is unnecessary as discussed above. @wangjohn would you be up for removing that option please?\n\nAlso it really needs some documentation (changelog entry, edits to docs in `associations.rb`, edits to the associations guide).\n", "created_at": "2013-06-07 09:31:17", "user": 1979, "id": 19097375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19112207", "text": "@jonleighton Yep, I'll put this on my bucket list.\n", "created_at": "2013-06-07 15:00:33", "user": 1075780, "id": 19112207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/49579201", "text": "@jonleighton  Is this done?\n", "created_at": "2014-07-21 07:50:41", "user": 3043621, "id": 49579201}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveSupport::Notifications::Instrumenter#instrument should yield its payload the same way that ActiveSupport::Notifications does.\n\nThis allows you to cache the instrumenter (like in ActiveRecord's AbstractAdapter) but still yield the payload to the block.\n\nThis works:\n\n``` ruby\nActiveSupport::Notifications.instrument(\"pull\") do |payload|\n  payload[:result] = \"success\"\nend\n```\n\nBut this doesn't:\n\n``` ruby\nActiveSupport::Notifications.instrumenter.instrument(\"pull\") do |payload|\n  payload[:result] = \"success\"\nend\n```\n", "labels": ["activesupport"], "number": 9523, "updated_at": "2014-06-14 21:54:15", "user": 6681, "closed_at": "2013-03-27 20:44:17", "id": 11584322, "title": "ActiveSupport::Notifications::Instrumenter#instrument should yield", "url": "https://api.github.com/repos/rails/rails/issues/9523", "created_at": "2013-03-03 00:21:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14344514", "text": "Pretend i've never used this feature before ( i haven't), why would I ever use `ActiveSupport::Notifications.instrumenter.instrument(\"pull\")` over `ActiveSupport::Notifications.instrument(\"pull\")` ? Do you have any clues why the payload wasn't passed in from the original version?\n", "created_at": "2013-03-03 09:57:04", "user": 59744, "id": 14344514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14353947", "text": "The main reason is so that you can cache the instrumenter, [ActiveRecord does it](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb#L93).\n\nMy best guess as to why it didn't already yield is that ActiveRecord didn't need to add anything to the payload, and it is the primary place in Rails that caches the instrumenter.\n", "created_at": "2013-03-03 20:04:32", "user": 6681, "id": 14353947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14474071", "text": "Looks good :+1: from me and @jeremy\n", "created_at": "2013-03-06 00:04:26", "user": 59744, "id": 14474071}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In rails 4 when route has multiple optional parameters url helper add closing bracket to path/url\n\nExample:\n\n```\nget 'post(/:action(/:id))' => 'posts#index', as: :posts\n```\n\nand run in console: \n\n```\n>> app.posts_path\n=> \"/post)\"\n```\n\nTested on Rails 4.0.0.beta1 && master branch\n", "labels": ["actionpack"], "number": 9524, "updated_at": "2013-03-03 19:37:39", "user": 4486, "closed_at": "2013-03-03 19:18:53", "id": 11589959, "title": "Rails 4 leave brackets in urls", "url": "https://api.github.com/repos/rails/rails/issues/9524", "created_at": "2013-03-03 11:23:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345543", "text": "/cc @pixeltrix \n", "created_at": "2013-03-03 11:30:19", "user": 27786, "id": 14345543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347249", "text": "I'll take a look at this one and report back.\n", "created_at": "2013-03-03 13:59:12", "user": 5402, "id": 14347249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347253", "text": "Could be related to #9504\n", "created_at": "2013-03-03 13:59:35", "user": 5402, "id": 14347253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347653", "text": "I think it's best to wait for @pixeltrix before I invest too much time. He seems to be working on the optional params code in the router.\n", "created_at": "2013-03-03 14:31:12", "user": 5402, "id": 14347653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14348368", "text": "@senny #9504 is broken in rails 3.2 (and probably in 4.0) but this is only in rails >= 4\n", "created_at": "2013-03-03 15:22:01", "user": 4486, "id": 14348368}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14351322", "text": "Pretty sure this is related to the changes to optimised route generation that @tenderlove made since bypassing the url helper generates cleanly and specifying an action works as well, e.g.:\n\n``` irb\n>> app.url_for :controller => 'posts', :action => 'index', :only_path => true\n=> \"/post\"\n>> app.posts_path :action => 'index'\n=> \"/post\"\n```\n\nI'll investigate further.\n", "created_at": "2013-03-03 18:02:44", "user": 6321, "id": 14351322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14351904", "text": "Apologies to @tenderlove - the problem is in the original optimised path helper code committed by @josevalim in d7014bc7eaa62c36f045a503cdad64e4ebbc2687. The regexp `/\\([^\\)]*\\)/` is used to strip out optional segments in the path but obviously won't handle nested optional segments.\n\nA quick and dirty fix is to use the regexp `/\\([^\\)]*\\)+/` which will gather up the trailing parentheses but I'm looking for something better.\n", "created_at": "2013-03-03 18:31:20", "user": 6321, "id": 14351904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14352904", "text": "That should fix it and be a little bit quicker also since we're not having to gsub the path :smile:\n", "created_at": "2013-03-03 19:20:33", "user": 6321, "id": 14352904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14353009", "text": "yay! Thanks @pixeltrix :yellow_heart: \n", "created_at": "2013-03-03 19:25:43", "user": 5402, "id": 14353009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14353260", "text": "Thanks @pixeltrix !\n", "created_at": "2013-03-03 19:37:39", "user": 4486, "id": 14353260}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "```\nbundle exec rails g scaffold quote id:integer asset_id:string value:decimal --migration=false --assets=false\n```\n\nwill output\n\n```\n...\n       error  false [not found]\n...\n```\n\nfor assets generator\n", "labels": ["railties"], "number": 9525, "updated_at": "2013-05-04 13:59:57", "user": 3668, "closed_at": "2013-05-04 13:52:38", "id": 11590067, "title": "Scaffold generator with --assets=false option outputs an error", "url": "https://api.github.com/repos/rails/rails/issues/9525", "created_at": "2013-03-03 11:36:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179074", "text": "To reproduce error run\n\n```\nbundle exec rails g scaffold Foo -p --resource-route=false --assets=false\n```\n", "created_at": "2013-03-20 14:35:23", "user": 3668, "id": 15179074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179662", "text": "Which Rails version?\n", "created_at": "2013-03-20 14:44:19", "user": 47848, "id": 15179662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179854", "text": "4 and 3.2 - guaranteed\n", "created_at": "2013-03-20 14:47:33", "user": 3668, "id": 15179854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16091957", "text": "I can confirm this. Here's the output of that.\n\n```\n$ bundle exec rails g scaffold Bar -f --resource-route=false --assets=false\n      invoke  active_record\n      create    db/migrate/20130409031553_create_bars.rb\n      create    app/models/bar.rb\n      invoke    test_unit\n      create      test/unit/bar_test.rb\n      create      test/fixtures/bars.yml\n       error  false [not found]\n      invoke  scaffold_controller\n      create    app/controllers/bars_controller.rb\n      invoke    erb\n      create      app/views/bars\n      create      app/views/bars/index.html.erb\n      create      app/views/bars/edit.html.erb\n      create      app/views/bars/show.html.erb\n      create      app/views/bars/new.html.erb\n      create      app/views/bars/_form.html.erb\n      invoke    test_unit\n      create      test/functional/bars_controller_test.rb\n      invoke    helper\n      create      app/helpers/bars_helper.rb\n      invoke      test_unit\n      create        test/unit/helpers/bars_helper_test.rb\n       error  false [not found]\n      invoke  scss\n   identical    app/assets/stylesheets/scaffolds.css.scss\n```\n\nRails 3.2.12\nRuby 1.9.3p392\n", "created_at": "2013-04-09 03:16:41", "user": 702327, "id": 16091957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17433510", "text": "Fixed here #10448 commit here f1805a697831b356a2a6877291628fea8e2216e6\n\n@andriytyurnikov Please check and see if fixed for you. \n\nClosing now.\n", "created_at": "2013-05-04 13:52:38", "user": 3948, "id": 17433510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17433620", "text": "plz see https://github.com/andriytyurnikov/rails/commit/b82ce37eec001fbd1fae1c864be4b77d9ab53a05\n", "created_at": "2013-05-04 13:59:57", "user": 3668, "id": 17433620}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "#9525 - simple generator fix\n", "labels": ["railties"], "number": 9526, "updated_at": "2014-06-26 05:07:52", "user": 3668, "closed_at": "2013-03-20 14:36:32", "id": 11590128, "title": "fix scaffold generator error message for option --assets=false", "url": "https://api.github.com/repos/rails/rails/issues/9526", "created_at": "2013-03-03 11:42:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345866", "text": "Seems good. We'll need a CHANGELOG entry. Also, a test would be nice.\n", "created_at": "2013-03-03 11:59:14", "user": 27786, "id": 14345866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345869", "text": "Actually, @guilleiguaran , is the 'asset' part something sass-rails should be taking care of?\n", "created_at": "2013-03-03 11:59:35", "user": 27786, "id": 14345869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14345954", "text": "Well, not sure how to test generator's console output. In terms of functionality generator was ok.\n", "created_at": "2013-03-03 12:07:31", "user": 3668, "id": 14345954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347255", "text": "We have generator tests here: https://github.com/rails/rails/tree/master/railties/test/generators\n", "created_at": "2013-03-03 13:59:38", "user": 27786, "id": 14347255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347460", "text": "Thanks, but file assertions were fine, error messages were caused by messy inheritance of Thor tasks.\nNone of those usual assertions used there will reveal the issue.\nGenerators work just fine, except for the message in the console output.\n\nJust checked - bug is there in 3.2.11 too\n", "created_at": "2013-03-03 14:16:21", "user": 3668, "id": 14347460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14347859", "text": "@andriytyurnikov what was the exact problem, and why can't you add assertions to detect it and make sure we don't get regressions?\n", "created_at": "2013-03-03 14:45:17", "user": 5402, "id": 14347859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14348582", "text": "generators are written in DSL, and some DSL method invocation had incomplete set of parameters, \nthose methods are all over the place, and their parameters are not tested for other cases, and I think same issues are present in other generators.\nSo it sounds a little bigger then one-liner. \n\nSo while DSL itself is tested, I am not sure if one should go with DSLish helper like:\nassert_generator_option_defined :assets, :boolean\nor just stick with one line fix\n\nBut perhaps this piece could benefit from better coverage and bit of refactoring. \nStill in terms of having correct files generated - everything looks ok so far.\n", "created_at": "2013-03-03 15:36:58", "user": 3668, "id": 14348582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179151", "text": "incomplete - see better solution in #9832 \n", "created_at": "2013-03-20 14:36:32", "user": 3668, "id": 15179151}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9527, "updated_at": "2015-01-22 01:02:05", "user": 1037292, "closed_at": "2013-03-03 18:20:28", "id": 11594955, "title": "Fix unused variable warning in mapper.rb", "url": "https://api.github.com/repos/rails/rails/issues/9527", "created_at": "2013-03-03 18:15:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14351697", "text": "wrong target branch :(\n", "created_at": "2013-03-03 18:20:26", "user": 1037292, "id": 14351697}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I currently get this warning when loading Rails:\n\n```\n~/.rvm/gems/ruby-head/gems/actionpack-3.2.13.rc1/lib/action_dispatch/routing/mapper.rb:70: warning: assigned but unused variable - path_without_format\n```\n\nThis patch fixes the warning.\n", "labels": [], "number": 9528, "updated_at": "2015-01-22 01:02:05", "user": 1037292, "closed_at": "2013-03-03 19:34:24", "id": 11595047, "title": "Fix unused variable warning in mapper.rb", "url": "https://api.github.com/repos/rails/rails/issues/9528", "created_at": "2013-03-03 18:21:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14353202", "text": "Merged 98739cf45fbcf2bbaa53bdf23bf4aa0250eca1c7 - thanks @korny!\n", "created_at": "2013-03-03 19:35:30", "user": 6321, "id": 14353202}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The problem in https://github.com/rails/rails/issues/9470 is that when a user defines `:inverse_of` in an association, the `find()` method does not check the records that are already loaded in the association, but will instead go to the database directly.\n\nI've changed this so that when a user calls `find()` on an association which has an `:inverse_of` flag, then the `find_by_scan()` method is called, which basically does a scan over the loaded_target (which includes all current children, including new and existing records).\n", "labels": ["activerecord"], "number": 9529, "updated_at": "2014-06-26 19:51:08", "user": 1075780, "closed_at": "2013-03-19 21:00:05", "id": 11595070, "title": "Find() on an association with an inverse will now scan existing in-memory records", "url": "https://api.github.com/repos/rails/rails/issues/9529", "created_at": "2013-03-03 18:23:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "loookup -> lookup\n", "labels": [], "number": 9530, "updated_at": "2014-08-17 20:36:51", "user": 298020, "closed_at": "2013-03-03 19:32:34", "id": 11596214, "title": "Fix typo in ActionPack's ChangeLog.", "url": "https://api.github.com/repos/rails/rails/issues/9530", "created_at": "2013-03-03 19:31:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "loookup -> lookup\n", "labels": [], "number": 9531, "updated_at": "2014-06-12 16:11:14", "user": 298020, "closed_at": "2013-03-03 19:35:34", "id": 11596263, "title": "Fix typo on ActionPack's ChangeLog", "url": "https://api.github.com/repos/rails/rails/issues/9531", "created_at": "2013-03-03 19:34:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9532, "updated_at": "2014-06-26 15:15:44", "user": 6399, "closed_at": "2013-03-04 01:47:58", "id": 11596368, "title": "In example fix sql that is generated from scoping ", "url": "https://api.github.com/repos/rails/rails/issues/9532", "created_at": "2013-03-03 19:41:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello, Looking at wrap_parameters.rb I see:\n\n``` ruby\n# To enable root element in JSON for ActiveRecord objects.\n# ActiveSupport.on_load(:active_record) do\n#  self.include_root_in_json = true\n# end\n```\n\nWhat I understand there is that root element is disabled by default and uncommenting that I get the root on my json.\n\nBut no, I get my json with root (I get the same result if I uncomment the snippet), I have to manually set that by default to get no root.\n\nIn short, Or the comment is wrong or the default behaviour (no root) is not working.\n", "labels": [], "number": 9533, "updated_at": "2013-03-03 20:52:10", "user": 1087957, "closed_at": "2013-03-03 20:52:10", "id": 11597486, "title": "root in json by default in Rails 4.0.0-beta1", "url": "https://api.github.com/repos/rails/rails/issues/9533", "created_at": "2013-03-03 20:42:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14354902", "text": "Hi, this is duplicate of #9459\n", "created_at": "2013-03-03 20:47:48", "user": 137464, "id": 14354902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14355025", "text": "Closing, follow discussion in #9459 \n", "created_at": "2013-03-03 20:52:08", "user": 160941, "id": 14355025}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I can't come up with a good way to use `StrongParameters` for optional parameters for a `:new` action.\n\nIn Rails 3, I wrote something like\n\n``` ruby\nclass FooController < ApplicationController\n\n  def new\n    @foo = Foo.new(foo_params)\n  end\n\n  private\n\n  def foo_params\n    params[:foo] || {}\n  end\n\nend\n```\n\nIn Rails 4, I first tried\n\n``` ruby\ndef foo_params\n  params.require(:foo).permit(:bar, :baz)\nend\n```\n\nThat causes an `ActionController::ParameterMissing: param not found: feature` if people go to `/foos/new` without providing any arguments (like `?foo[bar]=varValue`).\n\nThe next thing I tried was\n\n``` ruby\ndef foo_params\n  params[:foo] ||= {} if params[:action] == 'new'\n  params.require(:foo).permit(:bar, :baz)\nend\n```\n\nThis has the same problem (likely because `:foo` is neither `require`d nor `permit`ted by the time `||=` is evaluated).\n\nLastly, I tried\n\n``` ruby\ndef foo_params\n  params.permit(:foo).permit(:bar, :baz)\nend\n```\n\nThat, however, always returns an empty Hash.\n", "labels": ["actionpack"], "number": 9534, "updated_at": "2014-08-11 21:46:12", "user": 2406, "closed_at": "2013-03-05 08:30:07", "id": 11598280, "title": "Cannot use optional StrongParameters with :new", "url": "https://api.github.com/repos/rails/rails/issues/9534", "created_at": "2013-03-03 21:24:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14355916", "text": "The solution is the rather obtuse\n\n``` ruby\nparams.permit(:foo => [ :bar, :baz ])[:foo] ||= ActionController::Params.new({})\n```\n", "created_at": "2013-03-03 21:31:48", "user": 2406, "id": 14355916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14367190", "text": "What happens when you simply do:\n\n``` ruby\nparams.permit(foo: [:bar, :baz])\n```\n", "created_at": "2013-03-04 07:31:41", "user": 5402, "id": 14367190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14404984", "text": "If I do that, I get back `{ foo: { bar: \"bar value\", baz: \"baz value\" } }`. The issue is that if I use `require(:foo).permit(:bar, :baz)`, I get back `{ bar: \"bar value\", baz: \"baz value\" }` -- no nesting.\n", "created_at": "2013-03-04 20:57:04", "user": 2406, "id": 14404984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14405049", "text": "It may be that there is no good code solution to this in Rails and it has to be treated as a documentation issue. In that case, I recommend expressing that the following are _similar_\n\n``` ruby\nparams.require(:foo).permit(:bar, :baz)\nparams.permit(foo: [ :bar, :baz ])[:foo]\n```\n", "created_at": "2013-03-04 20:58:18", "user": 2406, "id": 14405049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14426247", "text": "@fxn should I update the documentation in the guide?\n", "created_at": "2013-03-05 06:57:45", "user": 5402, "id": 14426247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14426560", "text": "Another thing you could try is:\n\n``` ruby\nparams.fetch(foo:, {}).permit(:bar, :baz)\n```\n", "created_at": "2013-03-05 07:12:16", "user": 5402, "id": 14426560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14427215", "text": "It's also important to remember that Strong Parameters are not intended to cover every case, just make simple patterns easy.\n", "created_at": "2013-03-05 07:38:22", "user": 27786, "id": 14427215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14428404", "text": "The solution with `fetch` is the one I like the most, it captures the fact that `:foo` is optional (that is the point of `fetch` isn't it), and returns an empty strong hash otherwise.\n\nMaybe we could have a little section with a cookbook to solve problems like this and others that have been reported in the guide, this is new and it would be useful to explain with examples how to use the API to solve use cases that deviate from the normal one.\n", "created_at": "2013-03-05 08:21:10", "user": 3387, "id": 14428404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14428648", "text": "@fxn I'm on it. Will open a PR to discuss the examples.\n", "created_at": "2013-03-05 08:29:36", "user": 5402, "id": 14428648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14428670", "text": "I'm closing this for now as there is no bug or unexpected behaviour.\n", "created_at": "2013-03-05 08:30:07", "user": 5402, "id": 14428670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14469019", "text": "Thanks, folks :)\n", "created_at": "2013-03-05 22:15:29", "user": 2406, "id": 14469019}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The secure_password module adds the following validations:\n\n```\n  validates_confirmation_of :password\n  validates_presence_of     :password, on: :create\n```\n\nThe confirmation validation will not run when password_confirmation is nil, but it will run whenever it is blank, or present, i.e. when a form is submitted.\n\nIf the user leaves their password field blank on update, they will see an error telling them that password_confirmation does not match their password. Which is confusing.\n\nI get round this by doing the following:\n\n```\n  before_validation(on: :update) do\n    # only want confirmation validation to run if user enters password\n    self.password_confirmation = nil unless self.password.present?\n  end\n```\n\nI'm wondering if this is a bug. Pardon me if I'm overlooking something obvious.\n\nPS - I'm on rails 4.0.0.beta1\n", "labels": ["activemodel"], "number": 9535, "updated_at": "2013-05-30 18:34:19", "user": 56636, "closed_at": "2013-03-07 16:05:11", "id": 11600409, "title": "Secure Password module validates password_confirmation, when password is blank.", "url": "https://api.github.com/repos/rails/rails/issues/9535", "created_at": "2013-03-03 23:40:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14369855", "text": "@murdoch was this behaviour introduced with rails4.0.0.beta1 or was it also present on `3.2.x`?\n", "created_at": "2013-03-04 08:40:43", "user": 5402, "id": 14369855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14390649", "text": "Hi @senny I've done a quick test, and it looks like it came in rails4.0.0.beta1.\n\n[Rails 3.2.12 code on github](https://github.com/murdoch/secure_password_test_3)\n[Rails 4.0.0.beta1 code on github](https://github.com/murdoch/secure_password_test_4)\n\n**Steps to reproduce: (rails 4 version):**\n1. Go to /users/new and hit create button without entering any data \n2. Notice two errors:\n   - Password confirmation doesn't match Password\n   - Password can't be blank\n3. Create a valid user (with email, password and password_confirmation)\n4. Get the newly created users edit page (users/1/edit) and hit update button without altering any info \n5. Notice one error\n   - Password confirmation doesn't match Password\n\nWith the rails 3 version, step 2 only displays one error (password digest can't be blank) and step 5 passes off without any errors. Hope this helps\n", "created_at": "2013-03-04 16:46:54", "user": 56636, "id": 14390649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14391852", "text": "@murdoch thanks for your detailed explanation and the sample code. I'll take a look.\n", "created_at": "2013-03-04 17:07:16", "user": 5402, "id": 14391852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14400576", "text": "I found the problem and submitted a PR.\n", "created_at": "2013-03-04 19:40:34", "user": 5402, "id": 14400576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17636908", "text": "This change to match the Rails 3.x behaviour doesn't make a lot of sense to me. I agree with the first case presented, when creating a new user there's no need to see the password_confirmation validation error if the password is blank. \n\nI have a really big problem with the notion that blank fields for password and password_confirmation should be valid as the default case. In the case presented, where the users#edit form shows the errors, it should be a special case requiring explicit opt-in where you suppress the validations if the fields are blank (this also seems to be a very naïve case).\n\nFor instance, consider a password reset form (a case as common as users#edit in any non-trivial application). This form will usually only have password and password_confirmation fields. With this change, hitting submit on that form results in a valid object. Now, for this very common and security-sensitive case, I have to create a workaround to ensure that the fields are not blank, like the following (added to the User model):\n\n``` ruby\n  def change_password( params )\n    if params[:password].present? && params[:password_confirmation].present?\n      update_attributes( params )\n    else\n      errors.add(:password, \"and confirmation must both be provided to reset your password\")\n      false\n    end\n  end\n```\n\nIt's quite rare that an app will allow a user to have a blank password. Given that the method is called `has_secure_password`, I would expect all the ancillary behaviours to favour security over anything else. I ran into the above problem in a real application being built on Rails 4.\n\nI know that in previous Rails versions this was the expected behaviour but given that we're moving to a new major version, this would be a great time to change it. Have I missed something obvious here?\n", "created_at": "2013-05-08 22:01:15", "user": 144897, "id": 17636908}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I lost some time testing time related code that could have been\nsaved if inspect showed all the fields that will be used in an\nequals comparison. I figure this will save future developers some\no_O moments\n", "labels": ["activesupport"], "number": 9536, "updated_at": "2014-06-15 02:48:24", "user": 10173, "closed_at": "2014-01-05 16:26:00", "id": 11600750, "title": "show usec in TimeWithZone#inspect", "url": "https://api.github.com/repos/rails/rails/issues/9536", "created_at": "2013-03-04 00:06:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14373499", "text": "I'm not keen on showing the `usec` value by default. How did you lose the time - what was it that obscured the difference in `usec`?\n", "created_at": "2013-03-04 10:18:11", "user": 6321, "id": 14373499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14384514", "text": "In a controller test, I basically did a Time.zone.now, passed that into params, then compared with a read from the db. Yeah, it ends up the db doesn't have microsecond resolution so it truncates. That was the root of my problem, but it was obscured because an #inspect on both instances looked exactly the same. I shouldn't have assumed #inspect would show me all the fields used in equality, but seems reasonable?\n\nCan you say more about your reasons to be hesitant?\n", "created_at": "2013-03-04 14:59:02", "user": 10173, "id": 14384514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14404919", "text": "I've also run into this problem many times, but often it has to do with the fact that on Linux, Ruby's time objects have nanosecond precision, but PostgreSQL only goes up to microseconds, and hilarity often ensues. So this patch would have to show `nsec` to account for that as well.\nThis is a great writeup of the common problem: http://blog.tddium.com/2011/08/07/rails-time-comparisons-devil-details-etc/\n", "created_at": "2013-03-04 20:55:52", "user": 451345, "id": 14404919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14413004", "text": "Ah. I had not run across nsec problems, but yeah, #inspect should account for that too. If there's any chance this'll get approved for merge, I'm willing to make it work for nsec precision too.\n", "created_at": "2013-03-04 23:14:27", "user": 10173, "id": 14413004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14424130", "text": "@gvaughn making it work with nanosecond precision will just increase the visual noise of the output so I'm even more against that and the standard Ruby inspect for `Time` doesn't include it. Were you using `assert_equal` to test the two values or was it just a visual inspection in the console?\n", "created_at": "2013-03-05 05:24:10", "user": 6321, "id": 14424130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14443880", "text": "@pixeltrix I was using assert_equal. When it failed and I didn't understand why, then I started printing out the inspect call. That provided no clue to help me understand why assert_equal was failing.\n\nI get the aesthetic concern about the extra digits. I don't really _like_ them. I don't think this advances the beauty of the code. I just think of #inspect as a debugging tool, and in this case it is withholding information and obstructing justice (or something like that :-)  I'd rather have ugly code I can trust than a beautiful pathologic liar.\n\nMaybe I should try to make the case in the core Time class.\n", "created_at": "2013-03-05 14:58:28", "user": 10173, "id": 14443880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22336489", "text": "I've also lost a lot of time to these sorts of problems:\n\n```\n     Failure/Error: receipt.message.created_at.should == message_time\n       expected: Sat, 03 Aug 2013 16:20:04 UTC +00:00\n            got: Sat, 03 Aug 2013 16:20:04 UTC +00:00 (using ==)\n```\n\nShowing usec would be a great help.\n", "created_at": "2013-08-08 16:35:17", "user": 92044, "id": 22336489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31608088", "text": "Closing as this isn't the correct way to address the problem - either we need to add custom assertions that show the extra information in the message or we address it upstream in Minitest/RSpec.\n", "created_at": "2014-01-05 16:26:00", "user": 6321, "id": 31608088}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without it the 422 page looks broken/incomplete.\n\nhttps://github.com/rails/rails/pull/9505#issuecomment-14291481\n", "labels": [], "number": 9537, "updated_at": "2014-06-26 19:51:16", "user": 253398, "closed_at": "2013-03-04 11:22:54", "id": 11610546, "title": "add prompt to 422 page to check logs", "url": "https://api.github.com/repos/rails/rails/issues/9537", "created_at": "2013-03-04 09:07:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14376037", "text": "Thanks! I like how this brings it to be just like the 500 page. :+1: Thanks for getting the sample Guide application too.\n", "created_at": "2013-03-04 11:23:11", "user": 27786, "id": 14376037}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Origin: #9518\n\nAs of ccc6910c we use `mysqldump` to create the `structure.sql`.\nThe old `#structure_dump` code is still in AR but never used.\n\nI removed all relevant parts from the code-base.\n\nEven though this is just a cleanup I added a CHANGELOG entry. There could be gem authors or app owners that used `#structure_dump`, which will no longer be available.\n\nI've also added a commit to issue a warning when `mysqldump` is not in the PATH. The rake task used to fail silently and left an empty `structure.sql`, which is not very helpful.\n", "labels": ["activerecord"], "number": 9538, "updated_at": "2014-06-26 19:51:19", "user": 5402, "closed_at": "2013-03-06 15:03:05", "id": 11611751, "title": "`Connection#structure_dump` is no longer used", "url": "https://api.github.com/repos/rails/rails/issues/9538", "created_at": "2013-03-04 09:48:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14372284", "text": "@rafaelfranca @carlosantoniodasilva can you take a look?\n", "created_at": "2013-03-04 09:48:44", "user": 5402, "id": 14372284}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Windows7 , fresh ruby & RoR install.\n\nJust wanted to report the following (annoying - low priority) warning msg. during doc install of activesupport 3.2.12:\n\n``` sh\nParsing documentation for activesupport-3.2.12\nunable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping\n```\n\nSame warning btw when rails installs mail 2.5.3:\n\n``` sh\nParsing documentation for mail-2.5.3\nunable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/mail/values/unicode_tables.dat, skipping\n```\n\n(issue `#523`)\n", "labels": [], "number": 9539, "updated_at": "2013-03-04 19:18:11", "user": 346803, "closed_at": "2013-03-04 19:18:11", "id": 11615606, "title": "ruby 2.0.0p0 (2013-02-24) [i386-mingw32] gem install", "url": "https://api.github.com/repos/rails/rails/issues/9539", "created_at": "2013-03-04 11:51:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14377940", "text": "Can you please try withg 3.2.13.rc1? Support for 2.0 was improved in this release candidate version. Thanks!\n", "created_at": "2013-03-04 12:17:11", "user": 26328, "id": 14377940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14379785", "text": "Yup, that did it.  Thx Carlos !  \n\n``` ruby\ngem 'rails', '3.2.13.rc1'\nbundle update\n```\n\n``` sh\n$ gem install activerecord -v 3.2.13.rc1\nSuccessfully installed activerecord-3.2.13.rc1\nParsing documentation for activerecord-3.2.13.rc1\nInstalling ri documentation for activerecord-3.2.13.rc1\nDone installing documentation for activerecord (11 sec).\n1 gem installed\n```\n\nAlso re-install of 3.2.12 working now.\n\n``` sh\n$ gem install activerecord\nSuccessfully installed activerecord-3.2.12\nParsing documentation for activerecord-3.2.12\nDone installing documentation for activerecord (10 sec).\n1 gem installed\n```\n\nmail 2.5.3 still the same though.\n", "created_at": "2013-03-04 13:05:53", "user": 346803, "id": 14379785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14399179", "text": "I think you have to report this on the mail issue tracker.\n", "created_at": "2013-03-04 19:18:11", "user": 47848, "id": 14399179}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Typo from https://github.com/rails/rails/commit/293875457bc5b0fccbf3e64bcd275cdac252f98c\n", "labels": [], "number": 9540, "updated_at": "2014-06-26 19:51:24", "user": 241633, "closed_at": "2013-03-04 15:00:12", "id": 11620356, "title": "Fixed typo in active record's changelog", "url": "https://api.github.com/repos/rails/rails/issues/9540", "created_at": "2013-03-04 14:20:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14384271", "text": "There are two strange details (at least) there. First, the class name should be singular. Second, searching for posts whose name is \"John\" does not have a lot of sense to me.\n\nWould you like to revise that in this PR?\n", "created_at": "2013-03-04 14:54:40", "user": 3387, "id": 14384271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14384595", "text": "Thanks!\n", "created_at": "2013-03-04 15:00:35", "user": 241633, "id": 14384595}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix ActionDispatch::Request#formats on xhr requests when HTTP_ACCEPT\nheader is empty string. About issue #7774, same fix as in commit bebb02f\nbut for xhr requests.\n", "labels": [], "number": 9541, "updated_at": "2014-06-17 04:09:56", "user": 58582, "closed_at": "2013-03-04 15:26:18", "id": 11621348, "title": "Fix formats on xhr requests when HTTP_ACCEPT is empty string", "url": "https://api.github.com/repos/rails/rails/issues/9541", "created_at": "2013-03-04 14:47:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've been working to upgrade our app to Rails 4 beta, and I'd also like to transition to JRuby. In 3.2 I've been using the gem equivalents to add Postgres array/dictionary support, but obviously I'm switching to using the native support in Rails 4. While this works under MRI, I can't get it to work under JRuby--regardless of the many combinations of gems I've tried.\n\nIs this something that needs to have support added in one of the JRuby specific gems, or is it a problem in Rails?\n", "labels": [], "number": 9542, "updated_at": "2013-03-04 20:28:18", "user": 125331, "closed_at": "2013-03-04 20:28:18", "id": 11621606, "title": "PG Array/Dictionary Support in JRuby", "url": "https://api.github.com/repos/rails/rails/issues/9542", "created_at": "2013-03-04 14:53:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14390351", "text": "You'll need to add support to the activerecord-jdbc-adapter gem: https://github.com/jruby/activerecord-jdbc-adapter\n", "created_at": "2013-03-04 16:41:26", "user": 102009, "id": 14390351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14403344", "text": "Right. Please open an issue there\n", "created_at": "2013-03-04 20:28:18", "user": 47848, "id": 14403344}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix ActionDispatch::Request#formats when HTTP_ACCEPT header is an empty\nstring.\n", "labels": [], "number": 9543, "updated_at": "2014-07-02 06:06:16", "user": 58582, "closed_at": "2013-03-05 12:18:03", "id": 11624104, "title": "Backported #7774 to 3-2-stable", "url": "https://api.github.com/repos/rails/rails/issues/9543", "created_at": "2013-03-04 15:46:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14398825", "text": "We will need a CHANGELOG entry\n", "created_at": "2013-03-04 19:12:34", "user": 47848, "id": 14398825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14430733", "text": "@rafaelfranca I updated this PR to add a CHANGELOG entry. Thanks.\n", "created_at": "2013-03-05 09:26:40", "user": 58582, "id": 14430733}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437169", "text": "Thanks!\n", "created_at": "2013-03-05 12:21:10", "user": 26328, "id": 14437169}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've a problem with updating object via another object by nested_attributes.\nI've a two scenarios\n\n``` ruby\ns = Supplier.new\ns.company_name = \"Rails\"\ns.save!\n# === scenario 1\ns = Supplier.first\ns.create_info\nparams = {\"info_attributes\"=>{\"data\"=>\"some_data\"}}\ns.update_attributes params # raise ActiveRecord::StatementInvalid:\nparams = {\"info_attributes\"=>{\"supplier_id\"=>\"1\", \"data\"=>\"some_data\"}}\ns.update_attributes params # looks okay\n# === scenario 2\ns = Supplier.first\ns.create_info\nparams = {\"info_attributes\"=>{\"supplier_id\"=>\"1\", \"data\"=>\"some_data\"}}\ns.update_attributes params # raise ActiveRecord::StatementInvalid:\nparams = {\"info_attributes\"=>{\"data\"=>\"some_data\"}}\ns.update_attributes params # looks okay\n```\n\nAs you can see, it's impossible to update `data` field for `Supplier::Info` model through `Supplier` for the first time.\nI've also created repository for this issue, you can find it [here](https://github.com/bartekd/has_one_error).\nTested with Rails 3.2.8 and 3.2.12 and Ruby 1.9.3(p392).\n", "labels": ["activerecord", "needs feedback"], "number": 9544, "updated_at": "2013-03-04 20:42:52", "user": 324215, "closed_at": "2013-03-04 20:42:52", "id": 11624887, "title": "Strange behavior when I update an object by 'accepts_nested_attributes_for'", "url": "https://api.github.com/repos/rails/rails/issues/9544", "created_at": "2013-03-04 16:01:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14391783", "text": "When you want to update a one-to-one association through `accepts_nested_attributes_for` you need to pass the id. The [documentation](http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for) states:\n\n``` ruby\n# It also allows you to update the avatar through the member:\n\nparams = { :member => { :avatar_attributes => { :id => '2', :icon => 'sad' } } }\nmember.update_attributes params[:member]\nmember.avatar.icon # => 'sad'\n```\n", "created_at": "2013-03-04 17:06:00", "user": 5402, "id": 14391783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14404175", "text": "@senny thanks for the fast answer!\n", "created_at": "2013-03-04 20:42:51", "user": 324215, "id": 14404175}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #9535.\n\nWith 692b3b6 the `password=` setter does no longer set blank passwords.\nThis triggered validation errors when assigning empty Strings to `password`\nand `password_confirmation`.\n\nThis patch only sets the confirmation if it is not `blank?`.\n", "labels": [], "number": 9545, "updated_at": "2014-06-12 17:41:25", "user": 5402, "closed_at": "2013-03-07 16:05:06", "id": 11630283, "title": "`has_secure_password` is not invalid when assigning empty Strings", "url": "https://api.github.com/repos/rails/rails/issues/9545", "created_at": "2013-03-04 17:59:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14394662", "text": "/cc @josevalim (I saw that you merged 692b3b6)\n\n@rafaelfranca @carlosantoniodasilva could you take a look?\n", "created_at": "2013-03-04 18:00:46", "user": 5402, "id": 14394662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14394984", "text": "The change to `validates_confirmation` first commit is a bit controversial. One could argue that when you have a writer, you are also responsible for the getter and therefore it wouldn't override. Let me know If you like that approach better and I revert the change (I think we should keep the tests to document the behaviour though).\n", "created_at": "2013-03-04 18:06:24", "user": 5402, "id": 14394984}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Consider the following example:\n\n``` ruby\nclass Person < ActiveRecord::Base\n  attr_accessible :name\n  has_many :cars\nend\nclass Car < ActiveRecord::Base\n  validates_presence_of :model\n  belongs_to :person\nend\nperson = Person.create! name: \"Rob\"\nperson.cars = [Car.new] # we raise here\n```\n\nAny instance of 'Person' that has been persisted cannot have its 'cars' association updated without AR raising an exception. This behavior is fine I guess(I've never depended on it) but I would like the validation process to go through the regular flow, and display validation errors to the end user instead of blowing up.\n", "labels": ["activerecord"], "number": 9546, "updated_at": "2013-03-05 14:13:51", "user": 10137, "closed_at": "2013-03-05 14:00:41", "id": 11632614, "title": "Reassignment of  a one-to-many relationship raises if the associated records are invalid.", "url": "https://api.github.com/repos/rails/rails/issues/9546", "created_at": "2013-03-04 18:53:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14436747", "text": "As I see it, this is the expected behavior, it was introduced with 6055bbe\n\n/cc @carlosantoniodasilva \n", "created_at": "2013-03-05 12:09:22", "user": 5402, "id": 14436747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14440477", "text": "@senny understood that it is intentional but it would be nice if there was an API that could avoid this behavior since it is not always desired(I've never desired this behavior).\n", "created_at": "2013-03-05 13:45:52", "user": 10137, "id": 14440477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14441068", "text": "The distinction is relevant because we don't handle feature requests through github. We only track bugs and implemented features (PR). However you can use the [rails core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core) to discuss your ideas about new features or API changes with the team.\n\nI'm closing this for now but please post the idea on the mailing list.\n", "created_at": "2013-03-05 14:00:41", "user": 5402, "id": 14441068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14441571", "text": "@senny no worries, I'll try to write something up for the mailing list before today is over.\n", "created_at": "2013-03-05 14:12:02", "user": 10137, "id": 14441571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14441666", "text": "great! thanks for reporting anyway.\n", "created_at": "2013-03-05 14:13:51", "user": 5402, "id": 14441666}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Given this POST action (a test from the Pivotal Tracker API):\n\n```\ncurl -i -X POST -d '<?xml version=\"1.0\" encoding=\"UTF-8\"?> <activity> <id type=\"integer\">xxxxxx</id> <version type=\"integer\">2</version> <event_type>story_update</event_type> <occurred_at type=\"datetime\">2013/03/01 23:19:51 UTC</occurred_at> <author>Jean Mertz</author> <project_id type=\"integer\">xxxxxx</project_id> <description>Jean Mertz started &quot;Shopper should be able to recommend a product to a friend&quot;</description> <stories type=\"array\"> <story> <id type=\"integer\">xxxxxx</id> <url>http://www.pivotaltracker.com/services/v3/projects/xxxxxx/stories/xxxxxx</url> <current_state>started</current_state> </story> </stories> </activity>' http://localhost:7000/connectors/tracker/activity\n```\n\nThis is the result:\n\n```\nStarted POST \"/connectors/tracker/activity\" for 127.0.0.1 at 2013-03-04 20:38:16 +0100\nProcessing by Connectors::TrackerController::Activity#activity as XML\n  Parameters: {\"<?xml version\"=>\"\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <activity> <id type=\\\"integer\\\">xxxxxx</id> <version type=\\\"integer\\\">2</version> <event_type>story_update</event_type> <occurred_at type=\\\"datetime\\\">2013/03/01 23:19:51 UTC</occurred_at> <author>Jean Mertz</author> <project_id type=\\\"integer\\\">xxxxxx</project_id> <description>Jean Mertz started \", \"quot\"=>nil, \"Shopper should be able to recommend a product to a friend\"=>nil, \"</description> <stories type\"=>\"\\\"array\\\"> <story> <id type=\\\"integer\\\">xxxxxx</id> <url>http://www.pivotaltracker.com/services/v3/projects/xxxxxx/stories/xxxxxx</url> <current_state>started</current_state> </story> </stories> </activity>\"}\n```\n\nThe most important part is this: `<description>Jean Mertz started \", \"quot\"=>nil, \"Shopper should`. You can see the original `&quot;` has been taken literally, where the `&` started a new param, and the `;` again did the same.\n", "labels": ["actionpack"], "number": 9547, "updated_at": "2013-03-05 19:36:07", "user": 383250, "closed_at": "2013-03-05 19:36:07", "id": 11635452, "title": "Rails/rack params parsing breaks on & ; characters", "url": "https://api.github.com/repos/rails/rails/issues/9547", "created_at": "2013-03-04 19:57:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14460333", "text": "This was due to two reasons:\n1. I didn't specify a `-H` (header) option in the cURL command.\n2. I didn't have the `actionpack-xml_parser` gem installed, since Rails 4 now ships without XML parser support.\n", "created_at": "2013-03-05 19:36:07", "user": 383250, "id": 14460333}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Consider a basic hm:t association\n\n```\nclass Host < ActiveRecord::Base\n  has_many :links\n  has_many :pages, through: :links\nend\n```\n\n(`Link` and `Page` are trivial).\n\nIf you add and remove an item from `links`, it still thinks the item is magically present... in the empty collection:\n\n```\nhost = Host.new\npage = Page.new\nhost.pages.include? page\n => false\nhost.pages << page\nhost.pages.delete page\nhost.pages.include? page\n => true \nhost.pages\n => #<ActiveRecord::Associations::CollectionProxy []>\n```\n\nTried this on both 3.2.12 and 4.0.0.beta1.\n\nPS. If you save the records, it works as expected.\n", "labels": ["activerecord", "pinned"], "number": 9548, "updated_at": "2018-01-20 05:15:25", "user": 205906, "closed_at": "2018-01-20 05:15:25", "id": 11637064, "title": "Unexpected behaviour of non-persisted has_many through associations", "url": "https://api.github.com/repos/rails/rails/issues/9548", "created_at": "2013-03-04 20:19:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14436797", "text": "this looks strange indeed. I'll take a look and report back.\n", "created_at": "2013-03-05 12:10:26", "user": 5402, "id": 14436797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437944", "text": "I can confirm the problem. It's related to the join model that's built when you call `<<` on a hmt association. I0ve written up a test-case and noticed that there could be more hidden errors:\n\n``` ruby\n  def test_include?\n    ActiveRecord::Base.logger = Logger.new(STDOUT)\n    person = Person.new(first_name: \"Peter\")\n    post = Post.new(title: \"Cats & Dogs\", body: \"are pets\")\n\n    person.posts << post\n    # assert person.posts.include?(post)\n\n    person.posts.delete(post)\n    # assert_not person.posts.include?(post), \"should not contain the post after deletion but did.\"\n\n    person.save!\n    # assert_not person.posts.include?(post)\n  end\n```\n\nThis leads to the following SQL statements:\n\n```\nD, [2013-03-05T13:39:19.470303 #5926] DEBUG -- :   SQL (0.2ms)  INSERT INTO \"people\" (\"created_at\", \"first_name\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", 2013-03-05 12:39:19 UTC], [\"first_name\", \"Peter\"], [\"updated_at\", 2013-03-05 12:39:19 UTC]]\nD, [2013-03-05T13:39:19.473836 #5926] DEBUG -- :   SQL (0.1ms)  INSERT INTO \"posts\" (\"body\", \"title\") VALUES (?, ?)  [[\"body\", \"are pets\"], [\"title\", \"Cats & Dogs\"]]\nD, [2013-03-05T13:39:19.474598 #5926] DEBUG -- :   SQL (0.1ms)  INSERT INTO \"readers\" (\"person_id\", \"post_id\") VALUES (?, ?)  [[\"person_id\", 5], [\"post_id\", 12]]\n```\n\nThe post was not inserted but the `Reader` that was built is. Is this the expected behavior?\n\n@carlosantoniodasilva @rafaelfranca what do you think?\n", "created_at": "2013-03-05 12:41:49", "user": 5402, "id": 14437944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41925511", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2014-05-01 16:16:38", "user": 47848, "id": 41925511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/85708924", "text": "I tried to reproduce this on `master`. It still seems to be a problem:\nhttps://gist.github.com/nerdinand/7665496e2b6d26619781\n", "created_at": "2015-03-24 21:52:48", "user": 113440, "id": 85708924}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/86217671", "text": "Proposed patch still works. Should I send a new PR?\n", "created_at": "2015-03-25 21:05:51", "user": 113440, "id": 86217671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/359146547", "text": "Fixed by #29593.", "created_at": "2018-01-20 05:15:25", "user": 12642, "id": 359146547}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- Fix issue #7526. The target's state is stale, but is not reloaded.\n- This has been fixed at master via [365b8b6](https://github.com/rails/rails/commit/365b8b6db750151b786b0a7ef9e65a6824576f1b), but not at 3-2-stable branch.\n- `@stale_state` should be nil when a model isn't saved. via [0f3901e](https://github.com/rails/rails/commit/0f3901e9101837eaab2daba5b01f67ed7e2c75d5).\n- set `@stale_state` to nil when reset the target.\n", "labels": ["activerecord"], "number": 9549, "updated_at": "2014-11-11 03:38:39", "user": 531650, "closed_at": "2013-03-07 16:23:24", "id": 11638037, "title": "Fix issue #7526. Reload the association target if it's stale.", "url": "https://api.github.com/repos/rails/rails/issues/9549", "created_at": "2013-03-04 20:43:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14480443", "text": "This is backported from master([365b8b6](https://github.com/rails/rails/commit/365b8b6db750151b786b0a7ef9e65a6824576f1b), [0f3901e](https://github.com/rails/rails/commit/0f3901e9101837eaab2daba5b01f67ed7e2c75d5))\n\n @jonleighton merged them to master. [8b941e9](https://github.com/rails/rails/commit/8b941e977c094bb2121f9eaef73f20392d20f581)\n\n @rafaelfranca @carlosantoniodasilva Could you take a look?\n", "created_at": "2013-03-06 03:20:26", "user": 531650, "id": 14480443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14574932", "text": "The build is broken. Could you take a look? https://travis-ci.org/rails/rails/builds/5317634\n", "created_at": "2013-03-07 17:40:04", "user": 47848, "id": 14574932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14575240", "text": "@rafaelfranca Ok, I will see what's going wrong.\n", "created_at": "2013-03-07 17:45:36", "user": 531650, "id": 14575240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14581779", "text": "@rafaelfranca I've found the reason why this build is broken.  [@target](https://github.com/rails/rails/blob/3-2-stable/activerecord/lib/active_record/associations/association.rb#L141) may be nil when `Identity Map` is enabled. And also, we should reload the target only when it's stale state. I have sent another PR #9600 to fix this, sorry about that.\n", "created_at": "2013-03-07 19:44:58", "user": 531650, "id": 14581779}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is very strange behavior, but (at least for me) it is very reproducible.\n\nIt seems to affect Rails 1.9.3 and 2.0.0 + rails 3.2.11 and only happens when I am performing the \"rails generate scaffold\" on a mounted disk. If I run the same code on the local disk, it works. If I perform the first 2 steps locally, then migrate and start server (by copying files to mounted disk) it works fine. So, it must be related to \"rails generate\"\n\nrails generate scaffolding users name email && rake db:migrate && rails s\n\nIf I attemp to browse localhost:3000:/users\n\nI get the following error:\n\nErrno::EPERM in Users#index\n\n```\nShowing /Volumes/Ivy/Work/rails/testapp/app/views/layouts/application.html.erb where line #5 raised:\n\nOperation not permitted - /Volumes/Ivy/Work/rails/testapp/tmp/cache/assets/E19/2A0/sprockets%2F10fcfbe6ebae11a40c8eac41939a1b9a\nExtracted source (around line #5):\n\n2: \n3: \n4:   Testapp\n5:    \"all\" %>\n6:   \n7:   \n8: \nRails.root: /Volumes/Ivy/Work/rails/testapp\n\nApplication Trace | Framework Trace | Full Trace\napp/views/layouts/application.html.erb:5:in `_app_views_layouts_application_html_erb__1001468861519732890_70207518583060'\napp/controllers/users_controller.rb:7:in `index'\nRequest\n```\n", "labels": ["needs feedback"], "number": 9550, "updated_at": "2013-03-07 14:48:41", "user": 854979, "closed_at": "2013-03-07 14:48:41", "id": 11641123, "title": "Operation not permitted when viewing index page generated by fresh scaffold code on mounted disk", "url": "https://api.github.com/repos/rails/rails/issues/9550", "created_at": "2013-03-04 21:59:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14435932", "text": "I believe there's a great chance this is related to permissions and VMs, I've seem similar issues with the tmp dir when creating files in one user and trying to run the same application from other user, just removing the tmp dir used to work for me.\n", "created_at": "2013-03-05 11:44:31", "user": 26328, "id": 14435932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14443235", "text": "I should have added that it happened the same even if I added the following two lines to the command:\n\nrails new TestApp && cd TestApp && rails generate etc\n\nThis isn't a VM. It's a mac pro that is connected to my home network that I have mounted as /Volumns/Ivy\n\nSince rails created the directory application directory and and all of the contents within it, I don't really see permissions being an issue either. It might be related to a bit of lag, though, since the process is running on one machine, but the files reside on a machine on the local network. I thought it might be related to paths, but moving the directory around once they are created doesn't really change anything (i.e. if it fails and I copy the directory up to my local disk, it's still hosed. But, if I create it locally and move it to the remote disk, it still works fine)\n\nOn Mar 5, 2013, at 5:45 AM, Carlos Antonio da Silva wrote:\n\n> I believe there's a great chance this is related to permissions and VMs, I've seem similar issues with the tmp dir when creating files in one user and trying to run the same application from other user, just removing the tmp dir used to work for me.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-05 14:46:34", "user": 854979, "id": 14443235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14489101", "text": "@torstees If I understand you correctly you say that if you create it on the share and move it back to the local disk it still fails? If that's the case, could you upload such a failing app to github?\n", "created_at": "2013-03-06 09:05:46", "user": 5402, "id": 14489101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14523299", "text": "Well, unfortunately, it's not behaving that way this morning (so maybe I was getting confused what started where yesterday when I was trying things out)\n\nWhen I perform the following 'rails new app1 && cd app1 && rails generate scaffold User name description && rake db:migrate && rails s' on a remote disk that is mounted to my machine, it won't run. If I copy the resulting app up to local disk and run it, it runs fine. If I run the same thing to generate a new app (using a different app name) on my local disk and then copy it to the mounted remote disk, it runs fine. Oddly enough, at that point, so does the original that wouldn't run….\n\nIf you can't reproduce it, it might be some weirdness on my end. \n\nOn Mar 6, 2013, at 3:07 AM, Yves Senn notifications@github.com wrote:\n\n> @torstees If I understand you correctly you say that if you create it on the share and move it back to the local disk it still fails? If that's the case, could you upload such a failing app to github?\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-06 20:14:41", "user": 854979, "id": 14523299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14564288", "text": "From your descriptions I don't really think this problem is Rails related. It could be something with your Setup, OS or Ruby. I'm closing this issue for now. If you find additional information that help us track down the bug or that would indicate something in rails is going wrong, please reopen and post the details.\n\nThanks for reporting.\n", "created_at": "2013-03-07 14:48:41", "user": 5402, "id": 14564288}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "While the WhereChain implementation made some sense when we were\nsupporting where.not, where.like, and where.not_like, it doesn't\nreally make sense when supporting only the where.not case.\n\nThis commit removes WhereChain and implements where_not, instead. While\nthe method-chaining version might seem a bit prettier (I do tend to\nthink a dot is more attractive than an underscore) it also incurs extra\nmethod call overhead and makes the implementation more complex to read,\nas well.\n", "labels": [], "number": 9551, "updated_at": "2014-06-13 08:06:42", "user": 14947, "closed_at": "2013-03-05 03:01:34", "id": 11646753, "title": "Remove WhereChain, and implement where_not.", "url": "https://api.github.com/repos/rails/rails/issues/9551", "created_at": "2013-03-05 00:24:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14416393", "text": "It seems reasonable to me as well since we only have `where.not` now, but we need to hear more thoughts here. Also, I think a changelog entry would have to be added talking about the modification from beta1? Thanks @ernie.\n", "created_at": "2013-03-05 00:30:55", "user": 26328, "id": 14416393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14416543", "text": "@carlosantoniodasilva One of these days I will remember we're maintaining the CHANGELOG more religiously now. That day was not today. Fixed.\n\nYeah, I hate the idea of modifying something like this late in the game, but it is a pretty simple change from a user standpoint, and cleans up the implementation quite a bit. Wish I'd had time to write this up earlier, before the beta went out.\n", "created_at": "2013-03-05 00:35:47", "user": 14947, "id": 14416543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14417864", "text": "@jeremy since you proposed the API I think you should give your thoughts here.\n\ncc @dhh \n", "created_at": "2013-03-05 01:14:29", "user": 47848, "id": 14417864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14420881", "text": "Good instinct, @ernie. Only `not` made the initial cut, but the essential pattern for building up a where clause is good. We'll leave that ground for third-party libs to cover with `like`, `or`, `regexp`, etc, and see what crops up. Other operations may make the cut for core in future releases.\n", "created_at": "2013-03-05 03:01:34", "user": 199, "id": 14420881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14441295", "text": "@jeremy thanks for taking a look. Are you sure there isn't room for a bit more discussion on this one before closing it?\n\nLeaving aside the discussion of whether `where.<predicate>` is a good idea for the API for a moment, I'm concerned that we're locking ourselves in to a specific implementation before it's needed. It would be easy to at some point alter a `where_not` implementation to use a WhereChain and transition people to `where.not` should that API design prove useful for other predicates in the long run. As it sits, we're adding complexity to the `where` method, adding another class, and sending to private methods on the parent in order to make it all work, for something that people might extend in the future.\n\nBack in the AR 3.x days, we supported only equality (and, for certain value types, IN/BETWEEN). There was a good deal of discussion around what a more full-featured API for creating other ARel predicates might look like, among them @lifo's SuperCondition implementation, which formed the basis for MetaWhere at the time. The suggestion at the time was that we would take a look at what plugins were developed and seemed to be most useful and at some point in the future consider selecting one for integration into core.\n\nHere we are, 3 years later, and as best I can tell that isn't what is happening here. I haven't seen the implementation we've gone ahead with extensively tested in plugin form, but we're integrating it all the same. As such, I'm disappointed to see additional complexity in an implementation with the promise of some potential future ecosystem developing around it driving additions to core, when that has historically not been the case for the AR query API.\n\nGiven that I have skin in the game, here, I should clarify that I'm not necessarily saying that we _need_ to implement Squeel's version of predicate building. I know it may not be for everyone. But I am saying that I built both MetaWhere and Squeel as proofs-of-concept based on the expectation that they would be included in the running for an eventual enhanced query builder API, and they have received far more real-world usage than the API we've landed on.\n\nMy last attempt at driving some discussion around this was at https://groups.google.com/d/msg/rubyonrails-core/evUmld2Mal4/PGFLjX9ZeNkJ and met with a lackluster response.\n\nTo summarize, these are the drawbacks I see with this approach at first glance:\n- Alteration of types (both duck- and actual) throughout a method chain, making order of messages being sent important where it previously was not\n- Existing methods for relation composition map closely to the query domain, mapping to specific clauses of the query for this most part. `where.not` (or, for that matter, `where_not`) breaks this trend\n- Should the pattern be extended to other predicates, we find ourselves chunking our where clauses by type of predicate instead of by related concept or attribute, or reverting back to string queries. The likelihood that scopes will hide this fact from typical application use cases does not prevent it from having a certain smell.\n- The implementation as it sits today is awkward (injecting the previous scope, sending to its private `build_where` method, and branching based on a number of possible return types then mutating and returning the injected scope), and we should stop to consider whether the feature envy is telling us something.\n", "created_at": "2013-03-05 14:05:34", "user": 14947, "id": 14441295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14533510", "text": "No? Anyone?\n", "created_at": "2013-03-06 23:36:06", "user": 14947, "id": 14533510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20129549", "text": "bump\n", "created_at": "2013-06-27 15:32:50", "user": 142914, "id": 20129549}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Time` and `Date` were scoring pretty low on CodeClimate. I did some refactoring, mostly removing duplication and extracting functionality into a couple of new classes.\n\n![Screen Shot 2013-03-04 at 9 45 55 PM](https://f.cloud.github.com/assets/27847/219710/e6443192-853e-11e2-8d97-b4516f1a2b6d.png)\n", "labels": ["activesupport"], "number": 9552, "updated_at": "2014-06-12 12:25:21", "user": 27847, "closed_at": "2014-06-07 17:34:26", "id": 11650355, "title": "Refactor Time and Date classes", "url": "https://api.github.com/repos/rails/rails/issues/9552", "created_at": "2013-03-05 02:47:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14423366", "text": "Love the feedback, super grateful. Thanks a ton!\n\nOne last thing I ran into - I combined documentation in a few places when I was DRYing things up. Is there any way to preserve the separated documentation?\n\nI can rebase as soon as everything looks good, just let me know.\n", "created_at": "2013-03-05 04:48:49", "user": 27847, "id": 14423366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14540944", "text": "Alright, I think I've wrapped up everything we discussed and rebased into a single commit.\n\nWhat do you think?\n", "created_at": "2013-03-07 03:21:38", "user": 27847, "id": 14540944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17070306", "text": "@jeremy ping\n", "created_at": "2013-04-26 11:59:37", "user": 3948, "id": 17070306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17105067", "text": "I'm getting the feeling that extracting the time changer and advancer are a good improvement, but that extracting formatting & timezone modules isn't paying off. It's reducing complexity in CodeClimate's eyes at the expense of complexity in human eyes.\n", "created_at": "2013-04-26 23:13:38", "user": 199, "id": 17105067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19877589", "text": "@jroes did you get a chance to look into this? Rebase is required with master as well.\n\nthanks.\n", "created_at": "2013-06-23 17:29:40", "user": 3948, "id": 19877589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19947374", "text": "I'll take a look as soon as I can!\n\nOn Sun, Jun 23, 2013 at 1:30 PM, Arun Agrawal notifications@github.com\nwrote:\n\n> @jroes did you get a chance to look into this? Rebase is required with master as well.\n> \n> ## thanks.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/9552#issuecomment-19877589\n", "created_at": "2013-06-25 01:20:25", "user": 27847, "id": 19947374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45035391", "text": "Hi @jroes, any updates?\n", "created_at": "2014-06-03 23:41:05", "user": 1928523, "id": 45035391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45415928", "text": "Hey, sorry! I don't have the time to commit to rebasing and fixing up this\npatch. If anyone else is interested, please be my guest!\n\nOn Tue, Jun 3, 2014 at 7:41 PM, Akshay Vishnoi notifications@github.com\nwrote:\n\n> Hi @jroes https://github.com/jroes, any updates?\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/rails/rails/pull/9552#issuecomment-45035391.\n", "created_at": "2014-06-07 17:25:54", "user": 27847, "id": 45415928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45416133", "text": "Right so I'm giving this a close. Thank you for the contribution.\n", "created_at": "2014-06-07 17:34:26", "user": 47848, "id": 45416133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45416361", "text": "@rafaelfranca - I would like to give it a shot. Can I?\n", "created_at": "2014-06-07 17:44:25", "user": 1928523, "id": 45416361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45416389", "text": "Sure\n", "created_at": "2014-06-07 17:45:36", "user": 47848, "id": 45416389}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": ["activerecord"], "number": 9553, "updated_at": "2014-06-14 12:27:06", "user": 6399, "closed_at": "2013-03-08 10:35:07", "id": 11651751, "title": "7365 merging scopes for where clauses ", "url": "https://api.github.com/repos/rails/rails/issues/9553", "created_at": "2013-03-05 03:51:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14428006", "text": "also can you squash the commits together into a single one?\n", "created_at": "2013-03-05 08:08:05", "user": 5402, "id": 14428006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14435849", "text": "Thanks @neerajdotname \n", "created_at": "2013-03-05 11:42:15", "user": 26328, "id": 14435849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14442491", "text": "@senny @carlosantoniodasilva your feedback has been incorporated.\n\n@carlosantoniodasilva `relation` is a private method hence I'm using `send` .\n", "created_at": "2013-03-05 14:31:17", "user": 6399, "id": 14442491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14594818", "text": "@jonleighton Please take a look. Changes you suggested are in .\n", "created_at": "2013-03-08 00:02:17", "user": 6399, "id": 14594818}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9554, "updated_at": "2014-06-26 19:51:33", "user": 2567, "closed_at": "2013-03-05 04:17:18", "id": 11652064, "title": "Use 1.9 String#gsub syntax", "url": "https://api.github.com/repos/rails/rails/issues/9554", "created_at": "2013-03-05 04:10:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14423816", "text": "Nice catch @tmm1. Profile much? :grin:\n", "created_at": "2013-03-05 05:09:16", "user": 199, "id": 14423816}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "before:\n\n```\n        ');@output_buffer.append= ( content_icon row[:content] );@output_buffer.safe_concat('\n');@output_buffer.safe_concat('        ');@output_buffer.append= ( spinner_img );@output_buffer.safe_concat('\n');@output_buffer.safe_concat('      </td>\n      <td class=\"content\">\n        ');@output_buffer.append= ( content_link row[:content] );@output_buffer.safe_concat('\n');@output_buffer.safe_concat('      </td>\n      <td class=\"message\">\n');\n```\n\nafter:\n\n```\n        ';@output_buffer.append=( content_icon row[:content] );@output_buffer.safe_append='\n        ';@output_buffer.append=( spinner_img );@output_buffer.safe_append='\n      </td>\n      <td class=\"content\">\n        ';@output_buffer.append=( content_link row[:content] );@output_buffer.safe_append='\n      </td>\n      <td class=\"message\">\n';\n```\n", "labels": ["actionview"], "number": 9555, "updated_at": "2014-06-26 16:16:06", "user": 2567, "closed_at": "2013-04-05 20:56:30", "id": 11652695, "title": "Optimize generated ERB to reduce method calls", "url": "https://api.github.com/repos/rails/rails/issues/9555", "created_at": "2013-03-05 04:43:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14423424", "text": ":+1:\n\n@josevalim thoughts?\n", "created_at": "2013-03-05 04:51:50", "user": 160941, "id": 14423424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14423962", "text": "This is so weird. Apparently Erubis is passing just the new line as text even if the next chunk is more text?\n\nThanks @tmm1!\n", "created_at": "2013-03-05 05:15:59", "user": 9582, "id": 14423962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14424295", "text": "The extra newline call only happens in certain cases. We're using this patch in production, but maybe it's simpler to fix this upstream in Erubis.\n", "created_at": "2013-03-05 05:31:17", "user": 2567, "id": 14424295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14425447", "text": "@tmm1 Let me know what you decide. It seems like it may be easier to fix it in Erubis indeed, but if they are not interested in a change, I will be glad to merge this.\n", "created_at": "2013-03-05 06:19:53", "user": 9582, "id": 14425447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867539", "text": "@tmm1  :heart: :+1: for fewer method calls. @josevalim what is the status with Erubis?\n", "created_at": "2013-03-13 20:48:46", "user": 59744, "id": 14867539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15980397", "text": "Thanks @tmm1. I'll wrap up a pull request to erubis later, since I don't know how much time this will take I'm merging this one to Rails\n", "created_at": "2013-04-05 20:57:21", "user": 47848, "id": 15980397}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Origin: #9534.\n", "labels": [], "number": 9556, "updated_at": "2014-06-26 19:51:39", "user": 5402, "closed_at": "2013-03-05 10:04:32", "id": 11658044, "title": "strong parameters example for default values using `fetch`.", "url": "https://api.github.com/repos/rails/rails/issues/9556", "created_at": "2013-03-05 08:44:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14429252", "text": "@fxn what do you think?\n", "created_at": "2013-03-05 08:45:56", "user": 5402, "id": 14429252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14431930", "text": "Instead of \"real world examples\" I would use \"other examples\", \"more examples\", ... something weaker like that, since the examples in the rest of the docs also depict real use cases.\n", "created_at": "2013-03-05 09:57:08", "user": 3387, "id": 14431930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14432019", "text": "@fxn I updated the heading and added a second example for nested attributes\n", "created_at": "2013-03-05 09:59:34", "user": 5402, "id": 14432019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14432204", "text": ":metal: \n", "created_at": "2013-03-05 10:04:29", "user": 3387, "id": 14432204}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Consistent with past commits such as 2d8396fc9fbea9189e9e945e41e643925da5b2cb\n", "labels": [], "number": 9557, "updated_at": "2014-06-26 19:51:40", "user": 227274, "closed_at": "2013-03-05 11:38:47", "id": 11658050, "title": "change useless gsub to delete", "url": "https://api.github.com/repos/rails/rails/issues/9557", "created_at": "2013-03-05 08:44:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14435744", "text": "Thanks.\n", "created_at": "2013-03-05 11:38:48", "user": 26328, "id": 14435744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think the documentation of Strong Parameters needs some description about `id` and `_destroy` params of nested attributes. If not, after Rails 4 is released, it probably causes users confusion when they want to destroy nested objects.\n\nThe documentation of nested attributes says below:\n\n> Now, when you add the <tt>_destroy</tt> key to the attributes hash, with a\n> value that evaluates to +true+, you will destroy the associated model:\n> \n>   member.avatar_attributes = { id: '2', _destroy: '1' }\n> ... snip ...\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/nested_attributes.rb#L74\n\nWith Strong Parameters, if you want to destroy nested objects, you have to add `id` and `_destroy` into the permit filter like below. Otherwise, the nested objects are left without being destroyed because the values related to `id` and `_destroy` are not returned.\n\n``` ruby\ndef author_params\n  params.require(:author).permit(:name, ..., {\n    books_attributes: [\n        :title\n\n        # ... snip ...\n\n        :id,       # XXX\n        :_destroy  # XXX\n      ]\n    }\n  )\n}\n```\n\nThis behavior is so difficult to notice that many users will get stuck into mistakes.\n\nI'm afraid I can't write decent documentation about it.\n", "labels": ["docs"], "number": 9558, "updated_at": "2013-03-13 20:03:28", "user": 3458, "closed_at": "2013-03-05 10:04:34", "id": 11658562, "title": "Documentation of Strong Parameters needs some description about id and _destroy params of nested attributes", "url": "https://api.github.com/repos/rails/rails/issues/9558", "created_at": "2013-03-05 09:03:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14431721", "text": "I am integrating the strong parameter documentation into the action controller guide. We've decided to do a section about real world examples to explain the API and I think this is a good fit. I will take care of it.\n\n/cc @fxn \n", "created_at": "2013-03-05 09:51:40", "user": 5402, "id": 14431721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14431762", "text": "Excellent Yves.\n", "created_at": "2013-03-05 09:52:44", "user": 3387, "id": 14431762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14435815", "text": "Great! I'm relieved to see it ;)\n", "created_at": "2013-03-05 11:41:01", "user": 3458, "id": 14435815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14865177", "text": "great commit. was looking for information about this myself. good job.\n", "created_at": "2013-03-13 20:03:28", "user": 92, "id": 14865177}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "<code>gem 'activesupport', '3.2.13.rc1'  # 3.2.12 works the same\nrequire 'active_support/core_ext/string/inflections'\n'address'.singularize # => 'addres'</code>\n\n<code>gem 'activesupport', '4.0.0.beta1'\nrequire 'active_support/core_ext/string/inflections'\n'address'.singularize # => 'address'\n</code>\n\nI think, it should be either backported to 3.2 or at least mentioned as change in 4.0.0 (unfortnately I don't know which commit caused such behavior change)\n", "labels": ["activesupport"], "number": 9559, "updated_at": "2013-03-06 08:33:05", "user": 814984, "closed_at": "2013-03-06 08:33:05", "id": 11661981, "title": "Inflection error in active_support-3.2.12 which don't exist in 4.0.0.beta1", "url": "https://api.github.com/repos/rails/rails/issues/9559", "created_at": "2013-03-05 10:49:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14435877", "text": "@fxn perhaps you know off the top of your head?\n", "created_at": "2013-03-05 11:42:51", "user": 26328, "id": 14435877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14436122", "text": "Could be related to https://github.com/rails/rails/commit/ef4ac7a48979f6232591db88599d5ff8ae95b20b?\n", "created_at": "2013-03-05 11:50:18", "user": 3387, "id": 14436122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437062", "text": "No, looks that https://github.com/rails/rails/commit/532cd49530bd1acca96c1c615b6b328bce42103a is responsible for these changes.\nCan it be backported or Inflector for 3.2 is frozen?\n", "created_at": "2013-03-05 12:18:10", "user": 814984, "id": 14437062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14451311", "text": "I don't think this change should be backported, but it should be documented in the CHANGELOG\n", "created_at": "2013-03-05 16:59:59", "user": 47848, "id": 14451311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14486344", "text": "I agree with @rafaelfranca that we should not backport. That the fix will only affect Rails 4 is already documented in the original PR disucssion #4719. I submitted a PR with the CHANGELOG to make sure it is documented.\n", "created_at": "2013-03-06 07:32:31", "user": 5402, "id": 14486344}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Sometimes within specs it might be useful to substitute particular controller class. However Rails caches its instance if it was already queried before.  So the trick won't work. Currently it's only possible to clear up all the cache at once. Let's add tiny method that allows deletion of particular key. It might be useful for other `ClassCache` users too as well.\n", "labels": ["activesupport"], "number": 9560, "updated_at": "2014-07-03 04:35:55", "user": 930257, "closed_at": "2014-01-19 23:50:43", "id": 11663887, "title": "Ability to manually remove single class cache entry", "url": "https://api.github.com/repos/rails/rails/issues/9560", "created_at": "2013-03-05 11:54:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14487047", "text": "Can you post a the use-case, which uses the new method?\n", "created_at": "2013-03-06 07:59:00", "user": 5402, "id": 14487047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14487161", "text": "At [WashOut](https://github.com/inossidabile/wash_out/) specs I need to substitute WSDL serving controller. I do that using `remove_const` method. However Rails cache it's instance inside `Reference`. I don't want to clear it completely cause I know exact class that did change but I don't have straight API to do that.\n\nHere's what I do atm:\n\nhttps://github.com/inossidabile/wash_out/blob/master/spec/spec_helper.rb#L43\n\nSince we already have a way to purge the cache completely why not give ability to purge it partially?\n", "created_at": "2013-03-06 08:03:41", "user": 930257, "id": 14487161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14487359", "text": "I was curious to see how it's being used. As you can see the class `ClassCache` has no documentation. I think it is an internal class, which should not be accessed directly. To put it differently. This code can could change because we decide to refactor stuff. That's why I'm hesitant to add methods not used by the framework itself but targeting the user.\n\nThis is just my opinion though, let's wait what @carlosantoniodasilva @rafaelfranca have to say.\n", "created_at": "2013-03-06 08:10:50", "user": 5402, "id": 14487359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14487536", "text": "@senny I understand that for sure. However the absence of documentation and code privacy status doesn't make my task disappear :dancer:. If I get it right – there are no public ways to affect internal constantization cache. But it is required from time to time.\n", "created_at": "2013-03-06 08:17:02", "user": 930257, "id": 14487536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14488061", "text": "I just wanted to express that if adding this new method is as brittle as the solution you already have (because it might break on refactorings). I'm in favor of your current solution even if it is a hack (you could also monkey-patch the delete method in).\n", "created_at": "2013-03-06 08:33:47", "user": 5402, "id": 14488061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32724300", "text": "Was wether this should be merged ever resolved @senny?\n", "created_at": "2014-01-19 22:27:50", "user": 162976, "id": 32724300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32726557", "text": "@JonRowe no, this is definitely not something that should be merged - `ClassCache` is an internal implementation detail and there are much better ways to do what the original reporter needs.\n", "created_at": "2014-01-19 23:50:43", "user": 6321, "id": 32726557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32758258", "text": "@pixeltrix like what for instance?\n", "created_at": "2014-01-20 13:16:04", "user": 930257, "id": 32758258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32762273", "text": "Create a mock API controller and use that, e.g. `washout :mock_api`\n", "created_at": "2014-01-20 14:15:18", "user": 6321, "id": 32762273}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Current exception message makes it feel like `match` was removed completely. I believe it should be more explicit about `via` option (at least since it is a root reason of the exception itself). Clarified it a bit.\n", "labels": [], "number": 9561, "updated_at": "2014-06-26 15:15:44", "user": 930257, "closed_at": "2013-03-05 12:38:59", "id": 11664482, "title": "Routing match `via` option requirement exception message made more explicit", "url": "https://api.github.com/repos/rails/rails/issues/9561", "created_at": "2013-03-05 12:14:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437438", "text": "@carlosantoniodasilva force-pushing removed the commit you commented at :boom:. But I did what you suggested.\n", "created_at": "2013-03-05 12:29:00", "user": 930257, "id": 14437438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437831", "text": "Thanks.\n", "created_at": "2013-03-05 12:39:02", "user": 26328, "id": 14437831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14460781", "text": "> orce-pushing removed the commit you commented at :boom:\n\nIt's supposed to, but github gives you an 'outdated diff discussion' link, so you can still read it. :)\n", "created_at": "2013-03-05 19:42:46", "user": 27786, "id": 14460781}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I fix this by not generating microseconds when time is a DateTime object, as DateTime does not support a .usec method.\n", "labels": ["activesupport"], "number": 9562, "updated_at": "2014-06-26 15:08:29", "user": 121910, "closed_at": "2013-07-10 14:51:22", "id": 11664608, "title": "Calling .to_json on TimeWithZone objects causes an error when TimeWithZone's \"time\" method returns a DateTime object rather than a Time object", "url": "https://api.github.com/repos/rails/rails/issues/9562", "created_at": "2013-03-05 12:19:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19600476", "text": "Hey, is this still an issue? Could you provide a test proving the failure? Also can I suggest that you check wether time responds to `usec` rather than comparing the class.\n", "created_at": "2013-06-18 09:32:35", "user": 162976, "id": 19600476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20242526", "text": "This is still an issue. Here is the simple test case. \n\nThe following will throw an error:\n\nDateTime.now.in_time_zone(\"Beijing\").to_json\n\nThe following will succeed:\n\nTime.now.in_time_zone(\"Beijing\").to_json\n\nI've updated the code to test for the method :usec instead of checking time's class. As for a unit test, it looks like one should go in activesupport/test/time_zone_test.rb, but I'm not exactly certain as to how to structure the test. Is it ok for my test to just throw an error if it fails?\n", "created_at": "2013-06-30 05:29:52", "user": 121910, "id": 20242526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20747500", "text": "Closing since this is fixed by the backport 5b790ca7b8b52868ae2a37546f205db38ac14a46\n", "created_at": "2013-07-10 14:51:22", "user": 6321, "id": 20747500}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I am installing Rails 4 Beta 1 on Ruby 2.0.0-p0 it isn't installing while it's installing on Ruby 1.9.3 perfectly. This is the error I am getting:\n\n``` ruby\nUnable to resolve dependencies: rails requires activesupport (= 4.0.0.beta1), actionpack (= 4.0.0.beta1), activerecord (= 4.0.0.beta1), actionmailer (= 4.0.0.beta1), railties (= 4.0.0.beta1), sprockets-rails (~> 2.0.0.rc3)\n```\n\nmore info:\nGem Version 2.0.0\nBundler 1.3.1\nruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.0]\n", "labels": [], "number": 9563, "updated_at": "2013-06-11 18:25:00", "user": 964925, "closed_at": "2013-03-05 12:31:53", "id": 11664711, "title": "Rails 4 Beta 1 isnt installing on Ruby 2.0.0-p0", "url": "https://api.github.com/repos/rails/rails/issues/9563", "created_at": "2013-03-05 12:23:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437342", "text": "Which command are you using to install? [The blog post](http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/) says this:\n\n> As always, install betas with gem install rails --version 4.0.0.beta1 --no-ri --no-rdoc (--pre and ri generation is busted on RubyGems 2.0 at the moment)\n", "created_at": "2013-03-05 12:26:01", "user": 26328, "id": 14437342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437518", "text": "I was using gem install rails --pre\nIt now worked with gem install rails --version 4.0.0.beta1 --no-ri --no-rdoc. Thanks a lot.\n", "created_at": "2013-03-05 12:31:12", "user": 964925, "id": 14437518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14437766", "text": "Great, thanks for reporting back.\n", "created_at": "2013-03-05 12:37:26", "user": 26328, "id": 14437766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19282399", "text": "For anyone else running into this:\nSame issue on Ruby 2.0.0p0 on Debian 7 64bit, Ruby 2.0.0p195 32bit & 64-bit  on Window 8 . Suggested solution worked for Debian, but not for Ruby2.0.0p0 either 32bit or 64bit - still trying to figure out a way for Windows. ( By the way DO NOT use 32bit Ruby 2 on your 64-bit system - just don't waste time. Either use 64bit or switch your OS to 32bit. Older rubies like 1.9.3 work fine)\n\nSuggested solution ALMOST worked for me on Ruby 2.0.0p195--64bit ( with 64-bit dekvit)  but there is a but in Atomic gem  see # https://github.com/rails/rails/issues/9506\n\nSo as of right now I can't get Rails 4.rc1 on Windows :-(\n", "created_at": "2013-06-11 18:24:59", "user": 72493, "id": 19282399}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Consistent with past commits such as 2d8396f & c6147113f\n", "labels": [], "number": 9564, "updated_at": "2014-06-26 19:51:54", "user": 505427, "closed_at": "2013-03-05 14:45:10", "id": 11668766, "title": "change useless gsub to tr", "url": "https://api.github.com/repos/rails/rails/issues/9564", "created_at": "2013-03-05 14:28:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14442759", "text": "done :+1: \n", "created_at": "2013-03-05 14:36:48", "user": 505427, "id": 14442759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14464827", "text": "This will not work. `tr` does not work like `gsub` when the to_str is longer than the from_str. See\n\nFor example:\n\n```\n> \"yo  dawg\".tr(\"  \", \"&nbsp; \")\n => \"yonndawg\"\n\n> \"yo  dawg\".gsub(\"  \", \"&nbsp; \")\n => \"yo&nbsp; dawg\"\n```\n", "created_at": "2013-03-05 20:59:02", "user": 54017, "id": 14464827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14465382", "text": "@teeparham reverted on #9573 \n", "created_at": "2013-03-05 21:10:15", "user": 505427, "id": 14465382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14517316", "text": "@robertomiranda Thanks. I think the same problem exists on 2 of the other `tr` calls. See this comment: https://github.com/rails/rails/commit/588f267e71083928ee8b6375a444fb674dad8fcf#commitcomment-2746016\n", "created_at": "2013-03-06 18:31:15", "user": 54017, "id": 14517316}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ActiveRecord::Explain.collecting_queries_for_explain` isn't public API, and this method is used only once.\nIn master, the first of this method's return value is not used.\n\n```\n_, queries = collecting_queries_for_explain { exec_queries }\n```\n\nI think we should remove this return value.\n", "labels": [], "number": 9565, "updated_at": "2014-06-26 15:54:40", "user": 13426, "closed_at": "2013-03-05 21:55:37", "id": 11671919, "title": "Remove unused return value, because collecting_queries_for_explain isn't public API.", "url": "https://api.github.com/repos/rails/rails/issues/9565", "created_at": "2013-03-05 15:43:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14450659", "text": "Seems good.\n\ncc @fxn \n", "created_at": "2013-03-05 16:49:38", "user": 47848, "id": 14450659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14460496", "text": ":+1:\n", "created_at": "2013-03-05 19:38:34", "user": 27786, "id": 14460496}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When attempting to install Rails 4.0.0beta1 the atomic gem fails to build.\n\n``` ruby\nwhen /mswin32|mingw/\n    $CFLAGS += \" -march=i686\"\nend\n```\n\nIt's not checking for x64-mingw32, and is using the wrong cpu architecture as a result.  I would report this to the atomic gem author, but it looks like the gem hasn't been updated in a long time.  athlon64 or a similar architecture should be used.\n", "labels": [], "number": 9566, "updated_at": "2013-03-05 16:52:21", "user": 1686368, "closed_at": "2013-03-05 16:52:21", "id": 11673008, "title": "Atomic Gem fails to install on x64 Windows Systems.", "url": "https://api.github.com/repos/rails/rails/issues/9566", "created_at": "2013-03-05 16:04:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14450814", "text": "This is not a Rails issue. We can't do anything to fix it (besides removing atomic as dependency). Please report this to atomic author\n", "created_at": "2013-03-05 16:52:21", "user": 47848, "id": 14450814}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This issue is continuation of discussion started on https://github.com/rails/rails/issues/7832 .\n\n```\nclass Post < ActiveRecord::Base\n  has_many :comments, dependent: :destroy\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  before_destroy :before_destroy_callback\n\n  def before_destroy_callback\n    raise \"before_destroy_callback\"\n  end\nend\n\n1.9.3-p125 :033 > Post.first.comments.delete_all\nPost Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" ORDER BY \"posts\".\"id\" ASC LIMIT 1\nComment Load (0.2ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"post_id\" = ?  [[\"post_id\", 1]]\n(0.1ms)  begin transaction\n(0.0ms)  rollback transaction\nRuntimeError: before_destroy_callback\n```\n", "labels": ["activerecord"], "number": 9567, "updated_at": "2013-03-12 14:58:54", "user": 6399, "closed_at": "2013-03-12 14:58:54", "id": 11674639, "title": "delete_all gives special treatment to dependent option :destroy for associations", "url": "https://api.github.com/repos/rails/rails/issues/9567", "created_at": "2013-03-05 16:39:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14450442", "text": "If the `dependent` option is `:destroy` then `delete_all` on associations works exactly like `destroy_all` .  \n\ncc @rafaelfranca @carlosantoniodasilva @fxn \n", "created_at": "2013-03-05 16:46:15", "user": 6399, "id": 14450442}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "```\n1.9.2-p290 :040 > Date.parse(\"2013/03/01\").next_week(:sunday)\n => Sun, 10 Mar 2013 \n```\n\nCode half-assumes we mean monday:\nhttps://github.com/rails/rails/blob/a8f2860d0e7db86c61bb70935006100b04667ab1/activesupport/lib/active_support/core_ext/date/calculations.rb#L225 \n\nBefore going forward with this, I want to make sure this isn't by design, hence the bug report first.\n", "labels": ["activesupport"], "number": 9568, "updated_at": "2013-04-26 08:49:10", "user": 23230, "closed_at": "2013-04-26 08:49:10", "id": 11675669, "title": "Date#next_week skips a week", "url": "https://api.github.com/repos/rails/rails/issues/9568", "created_at": "2013-03-05 17:00:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14454918", "text": "Hm not sure I follow. If you are on `Mar 1`:\n\n``` ruby\n>> Date.parse(\"2013/03/01\")\n=> Fri, 01 Mar 2013\n```\n\nAnd you ask for it's next week's sunday, you should get `Mar 10` I guess:\n\n``` ruby\n>> Date.parse(\"2013/03/01\").next_week :sunday\n=> Sun, 10 Mar 2013\n```\n\nAnd the next week's monday (the default) would be `Mar 4`:\n\n``` ruby\n>> Date.parse(\"2013/03/01\").next_week\n=> Mon, 04 Mar 201\n```\n\nAnd if you want this week's sunday, you could use `end_of_week`:\n\n``` ruby\n>> Date.parse(\"2013/03/01\").end_of_week\n=> Sun, 03 Mar 2013\n```\n\nCan you elaborate a little bit more please? Thanks.\n", "created_at": "2013-03-05 18:01:33", "user": 26328, "id": 14454918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14455598", "text": "Well, maybe I misunderstood: \n\n # Returns a new Date/DateTime representing the start of the given day in next week (default is :monday).\n\nSo how I read this is that Date.parse(\"2013/03/01\").next_week(:sunday) should return the first date next week with the params being when the week start.\n\n```\n>> Date.parse(\"2013/03/01\").next_week :sunday\n=> Sun, 10 Mar 2013\n```\n\nFirst date of next week, if the week start with sundays, should be Sunday the 3rd, the 10th would actually skip a whole week.\n\nMaybe this is confusing since `beginning_of_week` use the passed parameters to set the beginning of the week and the 2 methods are kinda similar  \n", "created_at": "2013-03-05 18:13:38", "user": 23230, "id": 14455598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14468806", "text": "Yes, I think you are misunderstanding. \"The start of the given day\" refers to midnight, nothing to do with the start of the week. The method just returns the day of the (next) week you're asking for.\n\nFor example, 2013/03/01 belongs to the week that starts on 02/25 and finishes on 03/03. The next week goes from 03/04 to 03/10. Since you asked for sunday, you get 03/10.\n\nThe code assumes weeks start on monday (see the DAYS_INTO_WEEK hash).\n", "created_at": "2013-03-05 22:11:40", "user": 251425, "id": 14468806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14468988", "text": "@carlosantoniodasilva I think @pothibo may have a point. This method is the equivalent of saying 'next Tuesday', e.g:\n\n``` irb\n>> Date.today\n=> Tue, 05 Mar 2013\n>> Date.today.next_week :tuesday\n=> Tue, 12 Mar 2013\n>> Date.tomorrow\n=> Wed, 06 Mar 2013\n>> Date.tomorrow.next_week :tuesday\n=> Tue, 12 Mar 2013\n```\n\nhowever this isn't true when using `:sunday`:\n\n``` irb\n>> Date.today.beginning_of_week(:sunday)\n=> Sun, 03 Mar 2013\n>> Date.today.beginning_of_week(:sunday).next_week(:sunday)\n=> Sun, 10 Mar 2013\n>> Date.today.beginning_of_week(:monday)\n=> Mon, 04 Mar 2013\n>> Date.today.beginning_of_week(:monday).next_week(:sunday)\n=> Sun, 17 Mar 2013\n```\n\nLooks like a bug to me. :smile:\n", "created_at": "2013-03-05 22:14:55", "user": 6321, "id": 14468988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14471092", "text": "It's not the equivalent of saying \"next Tuesday\". If it's Monday, \"next Tuesday\" is a day of the same week. `next_week` returns a day of the _next_ week.\n", "created_at": "2013-03-05 22:53:33", "user": 251425, "id": 14471092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14471339", "text": "@gcapizzi So if your week starts on sunday, like what I'm doing, the results become wrong, since the calculation are made against mondays.\n", "created_at": "2013-03-05 22:58:25", "user": 23230, "id": 14471339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14482898", "text": "@gcapizzi if it's Monday and I say \"next Tuesday\" then in England most people would assume I was saying the following Tuesday. If I wanted to refer to this week's Tuesday on Monday I'd say \"this Tuesday\".\n\nLeaving that aside for the moment this is what the output is like when you run it over a week:\n\n``` ruby\ndays = [:sunday, :monday, :tuesday, :wednesday, :thursday, :friday, :saturday]\n\n(Date.today.beginning_of_week..Date.today.end_of_week).each do |date|\n  puts \"Date    : \" + date.inspect\n  puts \"Next    : \" + date.next_week(days[date.wday]).inspect\n  puts \"Date + 1: \" + date.tomorrow.inspect\n  puts \"Next + 1: \" + date.tomorrow.next_week(days[date.wday]).inspect\n  puts \"--------------------------\"\nend\n```\n\n```\nDate    : Mon, 04 Mar 2013\nNext    : Mon, 11 Mar 2013\nDate + 1: Tue, 05 Mar 2013\nNext + 1: Mon, 11 Mar 2013\n--------------------------\nDate    : Tue, 05 Mar 2013\nNext    : Tue, 12 Mar 2013\nDate + 1: Wed, 06 Mar 2013\nNext + 1: Tue, 12 Mar 2013\n--------------------------\nDate    : Wed, 06 Mar 2013\nNext    : Wed, 13 Mar 2013\nDate + 1: Thu, 07 Mar 2013\nNext + 1: Wed, 13 Mar 2013\n--------------------------\nDate    : Thu, 07 Mar 2013\nNext    : Thu, 14 Mar 2013\nDate + 1: Fri, 08 Mar 2013\nNext + 1: Thu, 14 Mar 2013\n--------------------------\nDate    : Fri, 08 Mar 2013\nNext    : Fri, 15 Mar 2013\nDate + 1: Sat, 09 Mar 2013\nNext + 1: Fri, 15 Mar 2013\n--------------------------\nDate    : Sat, 09 Mar 2013\nNext    : Sat, 16 Mar 2013\nDate + 1: Sun, 10 Mar 2013\nNext + 1: Sat, 16 Mar 2013\n--------------------------\nDate    : Sun, 10 Mar 2013\nNext    : Sun, 17 Mar 2013\nDate + 1: Mon, 11 Mar 2013\nNext + 1: Sun, 24 Mar 2013\n--------------------------\n```\n\nThe Sunday result doesn't match the pattern - still smells like a bug to me :smile:\n", "created_at": "2013-03-06 05:06:15", "user": 6321, "id": 14482898}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14488584", "text": "@pixeltrix Sorry, didn't know that, I'm Italian :)\n\nAs far as I can understand reading the documentation, the pattern is broken by design, and weeks _always_ start on Monday. To match the pattern, `next_week(:sunday)` applied on `Mon, 11 Mar 2013` should return `Sun, 17 Mar 2013` which is is the same week.\n", "created_at": "2013-03-06 08:50:08", "user": 251425, "id": 14488584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14495187", "text": ":smile:\n", "created_at": "2013-03-06 11:44:20", "user": 26328, "id": 14495187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497036", "text": "The question remains: Since this might be a faulty design, is it something that needs to be fixed? I could prepare a pull request.\n", "created_at": "2013-03-06 12:34:35", "user": 23230, "id": 14497036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15003679", "text": "@pixeltrix I don't think so there will be any issue, since after sunday, week is changing. So as per output of 'Sunday'\n(Sun, 10 Mar 2013)tomorrow is changing a week, but for other it don't.\n\n@pothibo as you said in bug description, Date.parse(\"2013/03/01\").next_week will directly more to next week Monday( as monday is start of week by default) and then you asking :sunday means you are going end of week i.e Sun, 10 Mar 2013.\nSo I think output is correct .\n", "created_at": "2013-03-16 12:03:15", "user": 208253, "id": 15003679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15004222", "text": "@rahul100885 maybe it should be able to take the start of the week as an optional second parameter ?\n", "created_at": "2013-03-16 12:42:54", "user": 6321, "id": 15004222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15004864", "text": "@pixeltrix could be but it will be mess specially in method chaining.\n\nFor now behaviour is correct and we can close this ticket. cc/ @carlosantoniodasilva \n", "created_at": "2013-03-16 13:32:27", "user": 208253, "id": 15004864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15110357", "text": "@rahul100885 Yes but what I'm saying is that monday should be a default value that can be overridden. @pixeltrix suggestion of a second parameter would make sense. In the given example, is the method chaining correct?\n\n```\n Date.parse(\"2013/03/01\").beginning_of_week(:sunday).next_week(:sunday)\n => Sun, 03 Mar 2013 \n\nDate.parse(\"2013/03/01\").next_week(:sunday).beginning_of_week(:sunday)\n => Sun, 10 Mar 2013 \n```\n", "created_at": "2013-03-19 12:00:48", "user": 23230, "id": 15110357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112073", "text": "@pothibo yes rails 4 is allowing us, using active_support.initialize_beginning_of_week. Apart from this I don't think so it will be good option to accept beginning of week as second option.\neg, \nDate.parse(\"2013/03/01\").prev_week(:sunday, beginning_of_week).next_week(:sunday, beginning_of_week)\nso,\nDate.parse(\"2013/03/01\").prev_week(:sunday, :monday).next_week(:sunday, :sunday)\n\nWhich may leads to lots of confusion.\n", "created_at": "2013-03-19 12:46:33", "user": 208253, "id": 15112073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112204", "text": "Well beginning_of_week behaves already that way. 2nd parameter would only be applied to next_week. \nActually, it's beginning_of_week(start_of_week=:monday) that led me to believe next_week(:start) was the same.\n", "created_at": "2013-03-19 12:49:59", "user": 23230, "id": 15112204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17002438", "text": "It seems to me this behaviour is correct, so can this issue be closed? Or maybe the documentation should be updated to reflect that the behaviour is `next_week(:day_in_that_week)` and the default start of week is monday?\n", "created_at": "2013-04-25 11:57:33", "user": 162976, "id": 17002438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17007148", "text": "@JonRowe I still unsure what the intent of this method because two bits of information in the documentation conflict. The argument `start_day` suggests the method returns the beginning of the week. However the description talks about a 'given day in the next week', suggesting it's to return a specific day in the next week.\n\nLooking at the change between 3-2-stable and master in da26dfb it looks as though the author thought it was the latter. However I believe it was the former, it was just that the default day :monday. I think we need to clean up the documentation and variable name so that its intent is clear.\n", "created_at": "2013-04-25 13:38:42", "user": 6321, "id": 17007148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17007191", "text": "@JonRowe do you want to create a PR or should I handle it?\n", "created_at": "2013-04-25 13:39:36", "user": 6321, "id": 17007191}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The [CVE-2013-0155 security vulnerability](https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/t1WFuuQyavI) outlines how array parameters\ncontaining `nil` values can be dangerous when accepted directly into\nActive Record finder methods. The previous fix has been to detect array\nparameters with `nil` values and to clobber the entire array into `nil`.\n\nInstead, compacting the array solves the security issue and causes less\nsurprise in the case where array parameters are expected, as is often\nthe case when accepting nested attributes for collections.\n", "labels": ["actionpack"], "number": 9569, "updated_at": "2014-06-12 15:39:53", "user": 34264, "closed_at": "2013-12-20 10:48:44", "id": 11676333, "title": "Always compact array parameters rather than setting them to nil", "url": "https://api.github.com/repos/rails/rails/issues/9569", "created_at": "2013-03-05 17:13:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14452970", "text": "The behavior of Rails keeps changing. In 3-0-stable passing empty array param results in an empty array but passing an array of just `nil` or multiple `nil` values results in `nil` where I believe most people would still expect it to return `[]`\n\nhttps://github.com/rails/rails/commit/10513d2eb9892c9e2bfe0ae04c9c16165c5c1544\n\nHowever in 3-1-stable, 3-2-stable, and master both empty array params and passing an array of just `nil` or multiple `nil` values both result in `nil`. Again this seems contrary to what one would expect.\n", "created_at": "2013-03-05 17:28:15", "user": 89319, "id": 14452970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14454428", "text": "For clarity, can someone give a simple before/after example that illustrates how this affects the day-to-day code a typical Rails developer might write?\n", "created_at": "2013-03-05 17:52:56", "user": 25421, "id": 14454428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14457256", "text": "It takes `{\"person\":[null]}` and turns it into `{\"person\":[]}` instead of `{\"person\":nil}`. In both this and the previous patch, https://github.com/rails/rails/pull/9111 it fixes the problem of preserving empty arrays, but this goes father, making sure that you always get an array when given one. To be clear, it ignores past (seldom-expected) behaviour of returning nil when given an array with nil in it, preferring a simpler approach of simply compacting the array, returning an empty array more often.\n", "created_at": "2013-03-05 18:42:18", "user": 53444, "id": 14457256}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14459130", "text": "@benhamill One example would be a JSON API that accepts `POST /users` to create a user. If the `User` model serializes an array of nicknames, the request body might look like:\n\n``` json\n{\n  \"name\": \"Steve Richert\",\n  \"nicknames\": [\"laserlemon\"]\n}\n```\n\n…but for a user with no nicknames, we might send:\n\n``` json\n{\n  \"name\": \"Frank Stallone\",\n  \"nicknames\": []\n}\n```\n\nCurrently Rails will try to set the user's serialized array of nicknames to `nil`. That's one of many possible points of confusion that the current Rails behavior can cause.\n\n![tumblr_m0hisv9cPt1qd0uqe](https://f.cloud.github.com/assets/34264/223998/ee271ec6-85c8-11e2-810f-fbbe11392496.jpg)\n", "created_at": "2013-03-05 19:15:08", "user": 34264, "id": 14459130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14459784", "text": "it also rears its ugly head if you have a Parent class that `accepts_nested_attributes_for :children` and pass `{\"children_attributes\": []}` as `assign_nested_attributes_for_collection_association` will raise an `ArgumentError` because it sends `nil` instead of an empty array.\n\nhttps://github.com/rails/rails/blob/v3.2.12/activerecord/lib/active_record/nested_attributes.rb#L375\n", "created_at": "2013-03-05 19:26:58", "user": 89319, "id": 14459784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15075675", "text": "@tenderlove @jeremy could you guys review this one?\n", "created_at": "2013-03-18 19:17:55", "user": 47848, "id": 15075675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17369751", "text": "@jeremy Thanks for taking the time to chat a bit at the RailsConf help desk. Would love to get your opinion on these changes.\n", "created_at": "2013-05-02 22:50:35", "user": 34264, "id": 17369751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18913068", "text": "Could somebody please provide me with an example of where compacting array parameters is not sufficient to close the security hole?\n", "created_at": "2013-06-04 14:36:35", "user": 34264, "id": 18913068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20198626", "text": "What's the status on this? Any reviewing going on? It seems like a small thing, but it really makes a huge difference when posting nested models.\n", "created_at": "2013-06-28 16:23:14", "user": 337779, "id": 20198626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20198900", "text": "+1\n", "created_at": "2013-06-28 16:28:12", "user": 1406220, "id": 20198900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24554831", "text": "I've rebased against master so that this change can get more attention with as little friction in the codebase as possible.\n", "created_at": "2013-09-17 00:02:30", "user": 1406220, "id": 24554831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24995866", "text": "Just ran into this when accepting nested array values (which could be empty) via a JSON API\n+1\n", "created_at": "2013-09-24 11:49:06", "user": 94241, "id": 24995866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31001992", "text": "Hey guys, thank you for submitting this and expressing your concerns about this issue! Speaking for myself, I understand where you are coming from, and I agree we could do better. Unfortunately, this PR does not meet our requirements for an acceptable solution to the problem.\n\nPlease head over to #13420 for the background and contribute your ideas. Thanks again!  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-12-20 10:48:44", "user": 55829, "id": 31001992}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In 3.1.11:\n\n```\nclass Foo < ActiveRecord::Base\n  belongs_to :bar\nend\n\nclass Bar < ActiveRecord::Base\n  belongs_to :hoboy\n  has_one :foo\nend\n\n\nclass Hoboy < ActiveRecord::Base\n  has_one :bar\n  has_one :foo, through: :bar\nend\n\n\n1.9.3p327 :004 > h = Hoboy.last\n  Hoboy Load (0.2ms)  SELECT `hoboys`.* FROM `hoboys` ORDER BY `hoboys`.`id` DESC LIMIT 1\n => #<Hoboy id: 2, name: \"sam\", created_at: \"2013-03-05 17:29:01\", updated_at: \"2013-03-05 17:41:19\"> \n1.9.3p327 :005 > h.foo\n  Foo Load (0.3ms)  SELECT `foos`.* FROM `foos` INNER JOIN `bars` ON `foos`.`bar_id` = `bars`.`id` WHERE `bars`.`hoboy_id` = 2 LIMIT 1\n => #<Foo id: 1, bar_id: 1, created_at: \"2013-03-05 17:40:20\", updated_at: \"2013-03-05 18:05:46\"> \n1.9.3p327 :006 > h.name = 'fred'\n => \"fred\" \n1.9.3p327 :007 > h.save\n   (0.1ms)  BEGIN\n   (0.3ms)  UPDATE `hoboys` SET `name` = 'fred', `updated_at` = '2013-03-05 18:06:24' WHERE `hoboys`.`id` = 2\n   (0.1ms)  UPDATE `foos` SET `bar_id` = 2, `updated_at` = '2013-03-05 18:06:24' WHERE `foos`.`id` = 1\n   (2.1ms)  COMMIT\n => true \n```\n\nI have not been able to recreate this in 3.2.12.\n", "labels": ["activerecord", "needs feedback"], "number": 9570, "updated_at": "2013-10-13 02:48:37", "user": 7445, "closed_at": "2013-10-13 02:48:37", "id": 11678711, "title": "When saving a grandparent record with a through association,  incorrectly setting parent id on the grandchild to the id of the grandparent.", "url": "https://api.github.com/repos/rails/rails/issues/9570", "created_at": "2013-03-05 18:08:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14460378", "text": "Please use triple backticks (`) when posting code. I've edited your issue to use them. Much easier to read! :)\n\n`has_one :foo, through: :bar` should mean that `Bar` has two `belongs_to`'s in it: http://guides.rubyonrails.org/association_basics.html#the-has_many-through-association\n\nYours has a `belongs_to` and a `has_one`, I bet this is where the incorrectness lies.\n", "created_at": "2013-03-05 19:36:50", "user": 27786, "id": 14460378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14461778", "text": "So has_\\* through cannot support a true grandparent - grandchild relationship?  That's fine, I suppose, but allowing it without warning, then updating the grandchild's parent_id incorrectly seems like a poor choice.\n", "created_at": "2013-03-05 20:01:20", "user": 7445, "id": 14461778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18549817", "text": "@jeem Can you publish an executable test-case to reproduce the problem? You can use https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb as a foundation and put it up in a gist.\n", "created_at": "2013-05-28 13:23:39", "user": 5402, "id": 18549817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26210423", "text": "Seems this issue is 3.1 specific and since 3.1 is not under maintenance anymore I'm closing this. Thanks\n", "created_at": "2013-10-13 02:48:37", "user": 47848, "id": 26210423}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There are some security issues in the mail gem that were fixed in 2.4.4 (directory traversal and execution of arbitrary shell commands when using sendmail/exim).\n\nThis was fixed in rails master (24d244c1bc1a744de599df18d74c9b343fd4c9fe), 3-1-stable (d3dc2a7a7d5c54547c481d726ca61d7a0e06c3c4), and in 3-2-stable (74b782999f7f2c8913e79e2c65366429b9a3e65e).\n\nI suggest to include this in 3-0-stable as well as the mail gem can't be updated due to the \"restrictive\" version constraint in actionmailer.\n\nFor reference:\nhttp://www.osvdb.org/show/osvdb/81631 (CVE 2012-2139)\nhttp://www.osvdb.org/show/osvdb/81632 (CVE 2012-2140)\n\nBest regards\nJoerg\n", "labels": ["actionmailer"], "number": 9571, "updated_at": "2014-06-26 20:39:03", "user": 628391, "closed_at": "2013-04-29 20:31:34", "id": 11683610, "title": "Update gemspec to require mail 2.4.4 that fixes security issues", "url": "https://api.github.com/repos/rails/rails/issues/9571", "created_at": "2013-03-05 20:02:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14468336", "text": "The bump is a little bit bigger in 3-0, so it's a little bit more likely to have backward compat issues. Just as a note.\n", "created_at": "2013-03-05 22:03:34", "user": 26328, "id": 14468336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14493818", "text": "@jeremy what do you think?\n", "created_at": "2013-03-06 11:06:32", "user": 5402, "id": 14493818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17183330", "text": "This seems important? Users of 3-0-stable won't be able to upgrade given Rails' dependency specification.\n", "created_at": "2013-04-29 18:03:57", "user": 10128, "id": 17183330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17185185", "text": "Not sure about this, is a big jump and we aren't accepting security patches for 3.0.x anymore :grin: \n", "created_at": "2013-04-29 18:34:03", "user": 160941, "id": 17185185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17192054", "text": "Yup, that's why I haven't merged.\n", "created_at": "2013-04-29 20:28:20", "user": 27786, "id": 17192054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17192240", "text": "OK; we should just close this then?\n", "created_at": "2013-04-29 20:30:49", "user": 10128, "id": 17192240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17192275", "text": "ok!!!\n", "created_at": "2013-04-29 20:31:34", "user": 160941, "id": 17192275}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On Rails 3 I got into the habit of keeping a separate admin stylesheet (app/assets/stylesheets/admin.css), incorporating bootstrap/foundation and then in production.rb I'd have something like:\n\n```\n# in config/production.erb\nconfig.assets.precompile += ( admin.css )\n```\n\nI could then run:\n\n```\nRAILS_ENV=production bundle exec rake assets:precompile\n```\n\nAnd this would generate _admin.css_ and _admin.css.gz_. \n\nBut this seems to be broken in Rails 4.0.0.beta1. It might be a sprockets issue, so pardon me if that's the case.\n\nNow, no matter what I put in my admin.css file, and no matter what I add to production.rb\nthe admin stylesheet is never precompiled.\n\n[Rails 4 example app](https://github.com/murdoch/secure_password_test_4)\n[Rails 3 example app](https://github.com/murdoch/secure_password_test_3)\n\n**Steps to reproduce:**\n1. Clone sample apps `bundle install`\n   _NB: sample apps were used to report another issue, so there is a bit of left-over detritus in there, just ignore it_\n2. Starting with the Rails 4 example app, run: \n   RAILS_ENV=production bundle exec rake assets:precompile\n3. Inspect public/assets\n4. Observe that the admin stylesheet has not been precompiled\n5. Repeat steps 2 and 3 using Rails 3 sample app\n6. Observe that admin stylesheet has been precompiled\n\nFor now I'm getting round this by lobbing everything into my application.css\n\nThis happens with js assets too.\n", "labels": ["asset pipeline"], "number": 9572, "updated_at": "2013-03-29 20:13:31", "user": 56636, "closed_at": "2013-03-29 20:13:31", "id": 11684466, "title": "Assets added to config.assets.precompile are being ignored in Rails 4.0.0.beta1", "url": "https://api.github.com/repos/rails/rails/issues/9572", "created_at": "2013-03-05 20:23:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14463356", "text": "cc @guilleiguaran \n", "created_at": "2013-03-05 20:31:03", "user": 47848, "id": 14463356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14463455", "text": "we have a open issue for this in sprockets-rails: https://github.com/rails/sprockets-rails/pull/36\n", "created_at": "2013-03-05 20:32:52", "user": 160941, "id": 14463455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15658525", "text": "Closing this as a duplicate of the sprockets ticket that has even more context.\n", "created_at": "2013-03-29 20:13:31", "user": 2741, "id": 15658525}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "ref https://github.com/rails/rails/pull/9564#issuecomment-14464827\n", "labels": [], "number": 9573, "updated_at": "2014-06-26 19:52:03", "user": 505427, "closed_at": "2013-03-05 21:15:42", "id": 11686228, "title": "Use gsub intead of tr when the to_str is longer than the from_str", "url": "https://api.github.com/repos/rails/rails/issues/9573", "created_at": "2013-03-05 21:08:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14465725", "text": "We will need tests to ensure this will not occur anymore\n", "created_at": "2013-03-05 21:16:46", "user": 47848, "id": 14465725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14465793", "text": "@rafaelfranca :+1: sure, I merged the first one after of verify that all AP tests were passing\n", "created_at": "2013-03-05 21:18:19", "user": 160941, "id": 14465793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14466041", "text": "@rafaelfranca I'll add test for that \n", "created_at": "2013-03-05 21:23:37", "user": 505427, "id": 14466041}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ref https://github.com/rails/rails/pull/9573#issuecomment-14465725\n", "labels": [], "number": 9574, "updated_at": "2014-06-26 19:52:05", "user": 505427, "closed_at": "2013-03-05 22:36:00", "id": 11689203, "title": "Add DebugHelperTest", "url": "https://api.github.com/repos/rails/rails/issues/9574", "created_at": "2013-03-05 22:21:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14469884", "text": "cc @rafaelfranca \n", "created_at": "2013-03-05 22:31:16", "user": 505427, "id": 14469884}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commits adds a `disable_builtin_routes` configuration option to the Rails Application class, allowing the builtin routes (most importantly the default `/` route) to be disabled even in development mode.\n#### Why is this needed?\n\nMy CMS uses a dispatcher implemented as a middleware which dynamically routes CMS pages from the database. To ensure that content-managed pages cannot shadow routes defined by the developer, the dispatcher runs after the Rails application routes (checking for the `X-Cascade=pass` header).\n\nWith the Rails welcome page now implemented as a controller action, the route for `/` is always accessible in development mode, so the dispatcher cannot dispatch requests for `/`, meaning a CMS-managed home page cannot be viewed.\n", "labels": ["railties"], "number": 9575, "updated_at": "2014-07-04 15:48:11", "user": 7600, "closed_at": "2013-04-03 14:48:22", "id": 11690623, "title": "Allow builtin routes to be disabled even in development mode", "url": "https://api.github.com/repos/rails/rails/issues/9575", "created_at": "2013-03-05 23:00:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14472555", "text": "Seems okay. This wasn't an issue before we got rid of the static pages, I guess.\n", "created_at": "2013-03-05 23:25:17", "user": 27786, "id": 14472555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14472564", "text": "Oh, this needs a CHANGELOG entry.\n", "created_at": "2013-03-05 23:25:29", "user": 27786, "id": 14472564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14473589", "text": "Thanks @steveklabnik. CHANGELOG entry added (might need a new section, not sure of the policy here) and cleaned up the commit message.\n", "created_at": "2013-03-05 23:50:25", "user": 7600, "id": 14473589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14474484", "text": "Hopefully all good to go now.\n", "created_at": "2013-03-06 00:16:01", "user": 7600, "id": 14474484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14474718", "text": "I'm :-1: on this change for this purpose. For your CMS to now work with a Rails app the developer must add this line of code to their app, and they also lose some non trivial pages such as `/rails/info/routes` which is unexpected. Instead it would be the same amount of work to add a route helper method for users of your CMS to the config/routes.rb file. Something like:\n\n`mount_cms`\n\nThat would only over-write that one route for the root.\n", "created_at": "2013-03-06 00:22:11", "user": 59744, "id": 14474718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14475183", "text": "> For your CMS to now work with a Rails app the developer must add this line of code to their app\n\nThis option would be set by the CMS engine.\n\n> they also lose some non trivial pages such as /rails/info/routes which is unexpected.\n\nThese other pages are just used by the welcome page aren't they? Either way, I'd be happy as long as I can remove the welcome page route.\n\n> Instead it would be the same amount of work to add a route helper method for users of your CMS to the config/routes.rb file. Something like:\n>     mount_cms\n> That would only over-write that one route for the root.\n\nIs there a supported way to selectively remove an existing route? I can't override the route with another one since the home page needs to be rendered by the middleware which is run after the Rails routes.\n", "created_at": "2013-03-06 00:34:12", "user": 7600, "id": 14475183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15815006", "text": "Any further thoughts on this? I've so far been unable to come up with any alternative workarounds, since there's no way to remove existing routes.\n\nAs you can imagine, this is a majorly critical issue for me, and probably other CMS apps also.\n", "created_at": "2013-04-03 02:55:14", "user": 7600, "id": 15815006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15816339", "text": "Would defining a root route with an X-Cascade work in this scenario? Just wondering.\n", "created_at": "2013-04-03 03:49:37", "user": 26328, "id": 15816339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15816465", "text": "@carlosantoniodasilva I did try that. The router appears to continue processing the remaining routes if an early one returns X-Cascade=pass.\n", "created_at": "2013-04-03 03:55:01", "user": 7600, "id": 15816465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15839058", "text": "@spohlenz like @schneems I am :-1: on this\n\nRunning your dispatcher middleware after routes.rb is always likely to be a problem - for example adding a glob route will prevent all CMS pages from working. I would suggest either providing an explicit mechanism for adding it to routes.rb like Devise does or implement it as a Rack application and then mount it in routes.rb using [`mount`](http://api.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount).\n", "created_at": "2013-04-03 14:15:27", "user": 6321, "id": 15839058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15839262", "text": "I agree with @pixeltrix.\n", "created_at": "2013-04-03 14:19:04", "user": 47848, "id": 15839262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15840980", "text": "Let's close this one for now.\n", "created_at": "2013-04-03 14:48:22", "user": 59744, "id": 15840980}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is backported from master (cdfcbc4).\n\nSee pull request https://github.com/rails/rails/pull/5327\n\ncc @tenderlove @jonleighton\n", "labels": ["activerecord"], "number": 9576, "updated_at": "2014-07-03 07:01:55", "user": 31945, "closed_at": "2013-03-26 22:22:06", "id": 11692201, "title": "[Backport to 3-2-stable] Don't reset inheritance_column when setting explicitly.", "url": "https://api.github.com/repos/rails/rails/issues/9576", "created_at": "2013-03-05 23:47:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15465525", "text": "This fixes a bug in my migrations. I use this in production already.\nI would be happy if this would be merged. \n", "created_at": "2013-03-26 15:34:32", "user": 448763, "id": 15465525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15481093", "text": "Could you add a CHANGELOG entry?\n", "created_at": "2013-03-26 19:06:39", "user": 47848, "id": 15481093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15492586", "text": "Changelog added! cc @rafaelfranca \n", "created_at": "2013-03-26 22:21:18", "user": 31945, "id": 15492586}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "block content is ignored by link_to_unless in the case the expression evaluates to false\n", "labels": [], "number": 9577, "updated_at": "2014-06-28 01:40:25", "user": 63477, "closed_at": "2013-03-06 03:08:05", "id": 11696423, "title": "allow link content to be specified in a block to link_to_unless", "url": "https://api.github.com/repos/rails/rails/issues/9577", "created_at": "2013-03-06 02:10:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14480124", "text": "Using a block in `link_to_if/unless` has a very special meaning when the condition evaluates correctly, and it's done like that by design, which means using a block does not match `link_to`. Please read the comments in #9066 for more background. Thanks for your contribution :).\n", "created_at": "2013-03-06 03:08:04", "user": 26328, "id": 14480124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I received this error in my nginx log:\n\nException ActionController::UnknownHttpMethod in application (DEBUG, accepted HTTP methods are OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, VERSION-CONTROL, REPORT, CHECKOUT, CHECKIN, UNCHECKOUT, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE-CONTROL, MKACTIVITY, ORDERPATCH, ACL, SEARCH, and PATCH) (process 29804, thread #Thread:0x0000000165dfc8)\n\nI am using Rails 3.2.11\nFull stacktrace here: https://gist.github.com/hardipe/5096619\n\nBasically doing\n$ netcat example.com 80\nDEBUG / HTTP/1.1<enter>\nHost: example.com<enter>\n<enter>\nwill result in the Rails instance crashing. if done frequently enough, the Rails instances won't  respawn in a timely manner and the website becomes unresponsive to the end user.\n\nCould not find an Issue for this problem and the relevant file seems to be updated 2 months ago, so most likely the issue is present in the latest Rails stables as well:\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/request.rb#L311\n", "labels": [], "number": 9578, "updated_at": "2013-03-06 14:30:43", "user": 784538, "closed_at": "2013-03-06 04:26:54", "id": 11698759, "title": "Bug with DEBUG HTTP method", "url": "https://api.github.com/repos/rails/rails/issues/9578", "created_at": "2013-03-06 04:07:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14482015", "text": "Two things:\n\n1) I tried with Rails 3.2.12 and WEBrick. There was an exception raised, but the server _did not crash_\n\n### \\* netcat log\n\n```\n[~] netcat localhost 3000     \nDEBUG / HTTP/1.1\nHOST: localhost\n\nHTTP/1.1 500 Internal Server Error \nContent-Type: text/html; charset=ISO-8859-1\nServer: WEBrick/1.3.1 (Ruby/1.9.3/2012-11-10)\nDate: Wed, 06 Mar 2013 04:18:32 GMT\nContent-Length: 575\nConnection: close\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n<HTML>\n  <HEAD><TITLE>Internal Server Error</TITLE></HEAD>\n  <BODY>\n    <H1>Internal Server Error</H1>\n    DEBUG, accepted HTTP methods are OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, VERSION-CONTROL, REPORT, CHECKOUT, CHECKIN, UNCHECKOUT, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE-CONTROL, MKACTIVITY, ORDERPATCH, ACL, SEARCH, and PATCH\n    <HR>\n    <ADDRESS>\n     WEBrick/1.3.1 (Ruby/1.9.3/2012-11-10) at\n     localhost:80\n    </ADDRESS>\n  </BODY>\n</HTML>\n[~] netcat localhost 3000\nDEBUG / HTTP/1.1\nHOST: localhost\n\nHTTP/1.1 500 Internal Server Error \nContent-Type: text/html; charset=ISO-8859-1\nServer: WEBrick/1.3.1 (Ruby/1.9.3/2012-11-10)\nDate: Wed, 06 Mar 2013 04:19:11 GMT\nContent-Length: 575\nConnection: close\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n<HTML>\n  <HEAD><TITLE>Internal Server Error</TITLE></HEAD>\n  <BODY>\n    <H1>Internal Server Error</H1>\n    DEBUG, accepted HTTP methods are OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, VERSION-CONTROL, REPORT, CHECKOUT, CHECKIN, UNCHECKOUT, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE-CONTROL, MKACTIVITY, ORDERPATCH, ACL, SEARCH, and PATCH\n    <HR>\n    <ADDRESS>\n     WEBrick/1.3.1 (Ruby/1.9.3/2012-11-10) at\n     localhost:80\n    </ADDRESS>\n  </BODY>\n</HTML>\n[~] \n```\n\n### \\* Rails log\n\n```\n[~/Projects/foo32] rails s\n=> Booting WEBrick\n=> Rails 3.2.12 application starting in development on http://0.0.0.0:3000\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\n[2013-03-05 23:16:41] INFO  WEBrick 1.3.1\n[2013-03-05 23:16:41] INFO  ruby 1.9.3 (2012-11-10) [x86_64-darwin12.2.1]\n[2013-03-05 23:16:41] INFO  WEBrick::HTTPServer#start: pid=9047 port=3000\n[2013-03-05 23:18:32] ERROR ActionController::UnknownHttpMethod: DEBUG, accepted HTTP methods are OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, VERSION-CONTROL, REPORT, CHECKOUT, CHECKIN, UNCHECKOUT, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE-CONTROL, MKACTIVITY, ORDERPATCH, ACL, SEARCH, and PATCH\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/http/request.rb:275:in `check_method'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/http/request.rb:68:in `request_method'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:40:in `started_request_message'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:31:in `call_app'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:16:in `block in call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/activesupport-3.2.12/lib/active_support/tagged_logging.rb:22:in `tagged'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:16:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/middleware/request_id.rb:22:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/methodoverride.rb:21:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/runtime.rb:17:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/activesupport-3.2.12/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/lock.rb:15:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/middleware/static.rb:62:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/engine.rb:479:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/application.rb:223:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/content_length.rb:14:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/log_tailer.rb:17:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/handler/webrick.rb:59:in `service'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/httpserver.rb:138:in `service'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/server.rb:191:in `block in start_thread'\n[2013-03-05 23:19:11] ERROR ActionController::UnknownHttpMethod: DEBUG, accepted HTTP methods are OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, VERSION-CONTROL, REPORT, CHECKOUT, CHECKIN, UNCHECKOUT, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE-CONTROL, MKACTIVITY, ORDERPATCH, ACL, SEARCH, and PATCH\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/http/request.rb:275:in `check_method'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/http/request.rb:68:in `request_method'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:40:in `started_request_message'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:31:in `call_app'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:16:in `block in call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/activesupport-3.2.12/lib/active_support/tagged_logging.rb:22:in `tagged'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/logger.rb:16:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/middleware/request_id.rb:22:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/methodoverride.rb:21:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/runtime.rb:17:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/activesupport-3.2.12/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/lock.rb:15:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/actionpack-3.2.12/lib/action_dispatch/middleware/static.rb:62:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/engine.rb:479:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/application.rb:223:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/content_length.rb:14:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/railties-3.2.12/lib/rails/rack/log_tailer.rb:17:in `call'\n    /Users/sikachu/.rvm/gems/ruby-1.9.3-p327-pref/gems/rack-1.4.5/lib/rack/handler/webrick.rb:59:in `service'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/httpserver.rb:138:in `service'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'\n    /Users/sikachu/.rvm/rubies/ruby-1.9.3-p327-pref/lib/ruby/1.9.1/webrick/server.rb:191:in `block in start_thread'\n```\n\n(Note that I didn't get my prompt in between the log, since the server **did not** crash.)\n\n2) If you have a security concern about Ruby on Rails, this should be **sent to the security email address**. You should not create an issue on the issue tracker. [Please see here for more information about reporting security issue](http://rubyonrails.org/security)\n\n---\n\nPlease apologize if I sound dismissal, but I freaked out because of my 2nd point there. This issue shouldn't be reported here. :smile: \n", "created_at": "2013-03-06 04:26:54", "user": 4912, "id": 14482015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14501430", "text": "@FooBarWidget want to check this?\n\nLooks like this can be affecting to Passenger\n", "created_at": "2013-03-06 14:24:06", "user": 160941, "id": 14501430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14501767", "text": "@guilleiguaran fixed in https://github.com/FooBarWidget/passenger/commit/3b73da35f52045abcb05a3bcfbe2212b9cc0fcde\n", "created_at": "2013-03-06 14:30:43", "user": 784538, "id": 14501767}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi guys,\n\nSorry if I do it wrong, I'm new to rails I wanted to report this, don't really know how :)\nWhen loading action_mailer configuration from a YML file, the sending always fail. \n\nExample of a failing implementation in my development.rb file:\n\n``` Ruby\nconfig.action_mailer.smtp_settings = YAML.load_file(\"#{::Rails.root}/config/mailer.yml\")[::Rails.env]\n```\n\nI found out that if we symbolize the keys after loading the YML file, the configuration hash is accepted by action_mailer (and the mail sending works) like this:\n\n``` Ruby\nconfig.action_mailer.smtp_settings = YAML.load_file(\"#{::Rails.root}/config/mailer.yml\")[::Rails.env]\nconfig.action_mailer.smtp_settings.symbolize_keys!\n```\n\nSo it would be nice to have action_mailer to call symbolize_keys! by itself on the settings hash. I was trying to understand how to do it and to post a pull request, but my nose started to bleed :)\n\nCheers, and thanks so much for the hard work\n", "labels": ["actionmailer"], "number": 9579, "updated_at": "2013-03-06 14:02:04", "user": 3615944, "closed_at": "2013-03-06 14:02:04", "id": 11699970, "title": "Cannot configure action_mailer from YML file", "url": "https://api.github.com/repos/rails/rails/issues/9579", "created_at": "2013-03-06 05:13:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14488595", "text": "Somebody correct me if I am wrong but ActionMailer is normally configured via an initializer or the matching environment. But if you want to use a yml file you could just call symbolize_keys! while setting the settings. \n\n``` ruby\nconfig.action_mailer.smtp_settings = YAML.load_file(\"#{::Rails.root}/config/mailer.yml\")[::Rails.env].symbolize_keys!\n```\n", "created_at": "2013-03-06 08:50:22", "user": 108488, "id": 14488595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14488957", "text": "@sideshowcoder this should work. I created a simple patch to allow string keys but I'm not sure we actually want to support that.\n\n@jeremy should we support options with String keys or is it clearer to always rely on symbols?\n", "created_at": "2013-03-06 09:01:56", "user": 5402, "id": 14488957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14495133", "text": "My 2 cents: I think it's ok to rely only on symbols for this configuration part.\n", "created_at": "2013-03-06 11:42:53", "user": 26328, "id": 14495133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14498522", "text": "I also think support isn't really that useful, given that simply passing symbolize_keys! after the yml load is fine as well. I tried it out to see how much it cleans stuff up and it really isn't worth it in my opinion.\n", "created_at": "2013-03-06 13:15:21", "user": 108488, "id": 14498522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14500468", "text": "So I think we can close it\n", "created_at": "2013-03-06 14:01:57", "user": 47848, "id": 14500468}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails 3.2.12\n\nInput:\n\n``` ruby\ncart.updated_at = Time.now\ncart.save\np cart.updated_at.to_f\np Time.now.to_f\ncart.updated_at = Time.now\np cart.updated_at.to_f\ncart.save\n```\n\nOutput:\n\n``` ruby\n1362548118.6518762\n1362548118.652941\n1362548118.6518762 # same as first line - why?\n```\n\n`cart.updated_at` is not set the second time, so cart does not update the second time.\n", "labels": ["activerecord", "needs feedback"], "number": 9580, "updated_at": "2013-03-06 10:47:30", "user": 220358, "closed_at": "2013-03-06 10:47:30", "id": 11700507, "title": "ActiveRecord fails to update timestamp", "url": "https://api.github.com/repos/rails/rails/issues/9580", "created_at": "2013-03-06 05:44:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14484704", "text": "Can you try with Rails 3.2.13.rc1 - this appears to be the same as #8640 which has been fixed.\n", "created_at": "2013-03-06 06:23:42", "user": 6321, "id": 14484704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14485854", "text": "@pixeltrix are you sure you linked the right issue?\n", "created_at": "2013-03-06 07:11:49", "user": 5402, "id": 14485854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14492198", "text": "Sorry it was #8460\n", "created_at": "2013-03-06 10:22:28", "user": 6321, "id": 14492198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14493124", "text": "Same issue, thanks!\n", "created_at": "2013-03-06 10:47:29", "user": 220358, "id": 14493124}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #9559.\n\nThe actual patch was added with #4719\n", "labels": ["docs"], "number": 9581, "updated_at": "2014-06-26 19:52:07", "user": 5402, "closed_at": "2013-03-06 08:33:03", "id": 11702514, "title": "CHANGELOG entry for improved singularizing of singulars.", "url": "https://api.github.com/repos/rails/rails/issues/9581", "created_at": "2013-03-06 07:30:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14486311", "text": "@rafaelfranca @carlosantoniodasilva can you take a look?\n", "created_at": "2013-03-06 07:31:09", "user": 5402, "id": 14486311}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I created a Rails 4 beta.1 App with JRuby. When i run any rails command, i get a uninitialized constant Error. \n\n``` console\n~/dev/tik/appname » rake db:create --trace                                                                                                             \nrake aborted!\nuninitialized constant AppName::Application::Railties\norg/jruby/RubyModule.java:2677:in `const_missing'\n/Users/matt/.rvm/gems/jruby-1.7.3@appname/gems/railties-4.0.0.beta1/lib/rails/engine.rb:470:in `railties'\n/Users/matt/.rvm/gems/jruby-1.7.3@appname/gems/railties-4.0.0.beta1/lib/rails/application.rb:241:in `run_tasks_blocks'\n/Users/matt/.rvm/gems/jruby-1.7.3@appname/gems/railties-4.0.0.beta1/lib/rails/engine.rb:445:in `load_tasks'\norg/jruby/RubyBasicObject.java:1677:in `__send__'\norg/jruby/RubyKernel.java:2103:in `send'\n/Users/matt/.rvm/gems/jruby-1.7.3@appname/gems/railties-4.0.0.beta1/lib/rails/railtie/configurable.rb:30:in `method_missing'\n/Users/matt/dev/tik/appname/Rakefile:6:in `(root)'\norg/jruby/RubyKernel.java:1046:in `load'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/rake_module.rb:1:in `(root)'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/rake_module.rb:25:in `load_rakefile'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:583:in `raw_load_rakefile'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:89:in `load_rakefile'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:160:in `standard_exception_handling'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:88:in `load_rakefile'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:72:in `run'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:160:in `standard_exception_handling'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/lib/rake/application.rb:70:in `run'\norg/jruby/RubyKernel.java:1046:in `load'\n/Users/matt/.rvm/gems/jruby-1.7.3@global/gems/rake-10.0.3/bin/rake:33:i§n `(root)'\norg/jruby/RubyKernel.java:1066:in `eval'\n/Users/matt/.rvm/gems/jruby-1.7.3@appname/bin/ruby_noexec_wrapper:14:in `(root)'\n```\n\n``` console\nruby -v                                                                                                                                                                   matt@mattnb\njruby 1.7.3 (1.9.3p385) 2013-02-21 dac429b on Java HotSpot(TM) 64-Bit Server VM 1.6.0_43-b01-447-11M4203 [darwin-x86_64]\n```\n\nI have found that workaround: http://stackoverflow.com/questions/14527816/myappapplicationrailties-constant-missing-with-rails-4-beta-and-jruby-jruby\n", "labels": [], "number": 9582, "updated_at": "2013-03-06 11:40:50", "user": 182969, "closed_at": "2013-03-06 11:40:50", "id": 11707803, "title": "uninitialized constant AppName::Application::Railties with JRuby 1.7.3 in Rails 4.0.0.beta1", "url": "https://api.github.com/repos/rails/rails/issues/9582", "created_at": "2013-03-06 10:46:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14495072", "text": "This should be fixed by 45aabe61520cbb4bd74f6de7dc1023d2ca071e40, please try with Rails master and report back if it still happens. Thanks!\n", "created_at": "2013-03-06 11:40:50", "user": 26328, "id": 14495072}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Added a setup block to initialize an object to use in the test case. This setup eliminates repetition.   \n", "labels": [], "number": 9583, "updated_at": "2014-07-04 15:48:05", "user": 3786236, "closed_at": "2013-03-06 14:20:26", "id": 11708635, "title": "Used setup to avoid repetition", "url": "https://api.github.com/repos/rails/rails/issues/9583", "created_at": "2013-03-06 11:13:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14496744", "text": "I don't think this change is necessary. The tests just happen to have the same setup but the actual code they are testing does not rely on that setup. Hence I don't think we should generalize and make the tests harder to read and reason about. In my opinion this refactoring does not help the expressiveness of the tests and does not make them less brittle or easier maintainable.\n", "created_at": "2013-03-06 12:26:26", "user": 5402, "id": 14496744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14500923", "text": "From my point of view, the setup is necessary to stop declaring the same instances multiple times in the test case and that is the whole reason to add a setup here. It's true that the setup doesn't necessarily add expressiveness or maintainability, but surely it stops repetitive use of same code.\n", "created_at": "2013-03-06 14:13:02", "user": 3786236, "id": 14500923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14501092", "text": "I don't think the repetition in the test is a problem. Because it's not relevant for the use-case under test. It would be even better if the queries in each example would be different. There is no duplication of concept only a duplication of characters, which can't be resolved anyway ;)\n", "created_at": "2013-03-06 14:16:44", "user": 5402, "id": 14501092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14501246", "text": "Yeah. I'm with @senny here. Also only two of the five tests are taking advantage of this setup method.\n", "created_at": "2013-03-06 14:20:26", "user": 47848, "id": 14501246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14501259", "text": "Thank you for your contribution\n", "created_at": "2013-03-06 14:20:44", "user": 47848, "id": 14501259}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When running rails s I get this error, being battling it for upwards of 7 hours now \n<code>C:/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib/active_suppo\nrt/dependencies.rb:251:in `require': cannot load such file -- nokogiri/2.0/nokogiri (LoadErr\nor)<code>\n\nThought it was nokogiri, but that seems to be fine\n", "labels": ["activesupport"], "number": 9584, "updated_at": "2013-05-02 18:44:54", "user": 1047316, "closed_at": "2013-05-02 18:44:54", "id": 11709947, "title": "Activesupport dependencies:251", "url": "https://api.github.com/repos/rails/rails/issues/9584", "created_at": "2013-03-06 11:59:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14496482", "text": "There seems to be something wrong with your dependencies. Please post the complete stack trace and your Gemfile.\n\nWhat platform are you using?\n", "created_at": "2013-03-06 12:19:02", "user": 5402, "id": 14496482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14496568", "text": "Plus make sure you try out 3.2.13.rc1 as well, since it got some updates\nregarding Ruby 2.0 (which seems to be the Ruby version you're using).\n\nOn Wed, Mar 6, 2013 at 9:19 AM, Yves Senn notifications@github.com wrote:\n\n> There seems to be something wrong with your dependencies. Please post the\n> complete stack trace and your Gemfile.\n> \n> What platform are you using?\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9584#issuecomment-14496482\n> .\n\n## \n\nAt.\nCarlos Antonio\n", "created_at": "2013-03-06 12:21:25", "user": 26328, "id": 14496568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497305", "text": "The stack trace\n\n```\nc:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib/active_suppo\nrt/dependencies.rb:251:in `require': cannot load such file -- nokogiri/2.0/nokogiri (LoadErr\nor)\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/nokogiri-1.5.6-x86-mingw\n32/lib/nokogiri/nokogiri.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/nokogiri-1.5.6-x86-mingw\n32/lib/nokogiri.rb:27:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rack-pjax-0.7.0/lib/rack\n/pjax.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rack-pjax-0.7.0/lib/rack\n-pjax.rb:2:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rails_admin-0.4.5/lib/ra\nils_admin/engine.rb:7:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.12/lib\n/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rails_admin-0.4.5/lib/ra\nils_admin.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:72:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:72:in `block (2 levels) in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:70:in `each'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:70:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:59:in `each'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:59:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr.rb:132:in `require'\n        from c:/Data/Sites/bhoc/config/application.rb:7:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.12/lib/rail\ns/commands.rb:53:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.12/lib/rail\ns/commands.rb:53:in `block in <top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.12/lib/rail\ns/commands.rb:50:in `tap'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.12/lib/rail\ns/commands.rb:50:in `<top (required)>'\n        from script/rails:6:in `require'\n        from script/rails:6:in `<main>'\n```\n\nmy gem file\n\n``` ruby\nsource 'http://rubygems.org'\n\ngem 'rails', '3.2.12'\n\ngem 'sqlite3'\ngem 'mysql2'\ngem 'mysql'\n\ngem 'haml'\ngem 'haml-rails'\n\ngem 'jquery-rails'\n\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n\n  gem 'compass-rails'\n  gem 'zurb-foundation'\n  gem 'font-awesome-sass-rails'\n\n  gem 'uglifier', '>= 1.0.3'\nend\n\ngroup :test, :development do\n  gem 'rspec-rails'\n  gem 'factory_girl_rails'\n  gem 'guard-rails'\nend\n\ngroup :development do\n  gem 'annotate'\n  gem 'foreman'\nend\n\ngroup :test do\n  gem 'faker'\n  gem 'capybara'\n  gem 'database_cleaner'\n  gem 'shoulda-matchers'\n  gem 'launchy'\nend\n\ngem \"strong_parameters\"\n\ngem 'rails_admin'\ngem \"devise\"\ngem 'ckeditor'\ngem 'rich'\n\ngem 'carrierwave'\ngem 'mini_magick'\ngem 'flash_cookie_session'\n\ngem 'formtastic'\n\ngem 'thin'\n```\n", "created_at": "2013-03-06 12:41:16", "user": 1047316, "id": 14497305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497392", "text": "Please use ``` to format your code. The `<code>` tags you used do not work (I edited your message).\n", "created_at": "2013-03-06 12:43:30", "user": 5402, "id": 14497392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497588", "text": "thanks\n", "created_at": "2013-03-06 12:48:45", "user": 1047316, "id": 14497588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497665", "text": "@casoetan can you try out 3.2.13.rc1?\n", "created_at": "2013-03-06 12:50:55", "user": 5402, "id": 14497665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14497822", "text": "will try that now\n", "created_at": "2013-03-06 12:55:24", "user": 1047316, "id": 14497822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14498740", "text": "```\nc:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1/lib/active_s\nupport/dependencies.rb:251:in `require': cannot load such file -- nokogiri/2.0/nokogiri (Loa\ndError)\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/nokogiri-1.5.6-x86-mingw\n32/lib/nokogiri/nokogiri.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/nokogiri-1.5.6-x86-mingw\n32/lib/nokogiri.rb:27:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rack-pjax-0.7.0/lib/rack\n/pjax.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rack-pjax-0.7.0/lib/rack\n-pjax.rb:2:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rails_admin-0.4.5/lib/ra\nils_admin/engine.rb:7:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/activesupport-3.2.13.rc1\n/lib/active_support/dependencies.rb:251:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/rails_admin-0.4.5/lib/ra\nils_admin.rb:1:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:72:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:72:in `block (2 levels) in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:70:in `each'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:70:in `block in require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:59:in `each'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr/runtime.rb:59:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/bundler-1.3.1/lib/bundle\nr.rb:132:in `require'\n        from c:/Data/Sites/bhoc/config/application.rb:7:in `<top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.13.rc1/lib/\nrails/commands.rb:53:in `require'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.13.rc1/lib/\nrails/commands.rb:53:in `block in <top (required)>'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.13.rc1/lib/\nrails/commands.rb:50:in `tap'\n        from c:/Data/devtools/Ruby/Ruby200/lib/ruby/gems/2.0.0/gems/railties-3.2.13.rc1/lib/\nrails/commands.rb:50:in `<top (required)>'\n        from script/rails:6:in `require'\n        from script/rails:6:in `<main>'\n```\n\nsame issue, with rails updated\n\n``` ruby\nsource 'http://rubygems.org'\n\ngem 'rails', '3.2.13.rc1'\n\n# Bundle edge Rails instead:\n# gem 'rails', :git => 'git://github.com/rails/rails.git'\n\ngem 'sqlite3'\ngem 'mysql2'\ngem 'mysql'\n\ngem 'haml'\ngem 'haml-rails'\n\ngem 'jquery-rails'\n\n# Gems used only for assets and not required\n# in production environments by default.\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n\n  gem 'compass-rails'\n  gem 'zurb-foundation'\n  gem 'font-awesome-sass-rails'\n\n  gem 'uglifier', '>= 1.0.3'\nend\n\ngroup :test, :development do\n  gem 'rspec-rails'\n  gem 'factory_girl_rails'\n  gem 'guard-rails'\nend\n\ngroup :development do\n  gem 'annotate'\n  gem 'foreman'\nend\n\ngroup :test do\n  gem 'faker'\n  gem 'capybara'\n  gem 'database_cleaner'\n  gem 'shoulda-matchers'\n  gem 'launchy'\nend\n\ngem \"strong_parameters\"\n\n# admin page\ngem 'rails_admin'\ngem \"devise\"\ngem 'ckeditor'\n# gem 'bootstrap-wysihtml5-rails'\ngem 'rich'\n\n# file uploads\ngem 'carrierwave'\ngem 'mini_magick'\ngem 'flash_cookie_session'\n\n# for forms\ngem 'formtastic'\n\n# To use ActiveModel has_secure_password\n# gem 'bcrypt-ruby', '~> 3.0.1'\n\n# To use Jbuilder templates for JSON\n# gem 'jbuilder'\n\ngem 'thin'\n\n# Deploy with Capistrano\n# gem 'capistrano'\n\n# To use debugger\n# gem 'debugger'\n```\n", "created_at": "2013-03-06 13:20:31", "user": 1047316, "id": 14498740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14500631", "text": "Does it work with ruby 1.9.3?\n", "created_at": "2013-03-06 14:05:47", "user": 5402, "id": 14500631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14500797", "text": "yes it does\n", "created_at": "2013-03-06 14:10:27", "user": 1047316, "id": 14500797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14574831", "text": "can you \"require 'nokogiri'\" in an irb session? If not, what stack trace do you get?\n", "created_at": "2013-03-07 17:38:06", "user": 5402, "id": 14574831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14832059", "text": "Hey, sorry it took a while, had to reinstall windows.\nHow should I do the above suggestion?\n", "created_at": "2013-03-13 09:39:17", "user": 1047316, "id": 14832059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14832867", "text": "@casoetan I think @tenderlove found the problem and we need to release a new version of nokogiri. Looking at http://rubygems.org/gems/nokogiri there is version \"1.5.7.rc2\" released on March 11th. You could try to lock nokogiri to that version in your Gemfile.\n", "created_at": "2013-03-13 09:59:51", "user": 5402, "id": 14832867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14835797", "text": "I'll try that version then. Thanks\n", "created_at": "2013-03-13 11:16:03", "user": 1047316, "id": 14835797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14844116", "text": "Still didn't work. had a similar issue with sqlite3 and mysql2, here is the what fixed it\nhttps://github.com/luislavena/sqlite3-ruby/issues/84\ncould it be the same issue?\n", "created_at": "2013-03-13 14:28:25", "user": 1047316, "id": 14844116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17354202", "text": "Could this be closed?\n", "created_at": "2013-05-02 18:08:07", "user": 10128, "id": 17354202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17356555", "text": "yes pls. thanks\n", "created_at": "2013-05-02 18:44:54", "user": 1047316, "id": 17356555}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9585, "updated_at": "2014-06-26 19:52:09", "user": 205906, "closed_at": "2013-03-06 13:28:20", "id": 11712270, "title": "Typo in comment to ActionView::Resolver#find_all", "url": "https://api.github.com/repos/rails/rails/issues/9585", "created_at": "2013-03-06 13:20:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14499097", "text": "Thanks. Just as a side note, you can push doc fixes freely to https://github.com/lifo/docrails, it's an open branch of Rails for documentation purposes, that's cross-merged with Rails master from time to time. All commits there are reviewed the same way and copy edited if necessary before being merged.\n", "created_at": "2013-03-06 13:29:20", "user": 26328, "id": 14499097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14499340", "text": "Thanks, I didn't know. It's just easier to use the github's quick fork feature to edit and send small pull requests right from the site. Is it the preferable way to use lifo/docrails? \n", "created_at": "2013-03-06 13:34:53", "user": 205906, "id": 14499340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14507697", "text": "@RKushnir for docs it's usually preferable to go with lifo/docrails, but there's no problem in sending them as pull requests here, as long as you are contributing fixes, we are all happy :).\n\nAnother thing just came to my mind: when contributing doc patches, it's usually good to add `[ci skip]` to the commit message, so we skip running tests in travis ci. Thanks!\n", "created_at": "2013-03-06 16:12:02", "user": 26328, "id": 14507697}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ref https://github.com/rails/rails/commit/588f267e71083928ee8b6375a444fb674dad8fcf#commitcomment-2746016\n", "labels": [], "number": 9586, "updated_at": "2014-06-26 16:16:11", "user": 505427, "closed_at": "2013-03-06 20:02:59", "id": 11729603, "title": "Change useless tr to gsub", "url": "https://api.github.com/repos/rails/rails/issues/9586", "created_at": "2013-03-06 19:53:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The select_all method in ActiveRecord::ConnectionAdapters returns a hash with strings for keys. It would be nice (and seemingly more consistent with Rails overall) if it returned a hash with indifferent access.\n\nExample:\n\n```\n[19] pry(main)> User.connection.select_all('SELECT * FROM users WHERE id=8')\n   (0.5ms)  SELECT * FROM users WHERE id=8\n=> [{\"id\"=>8,\n  \"email\"=>\"mr.independent_no_diagnosis_patient@navigatingcancer.com\",\n  ...\n  }]\n```\n\n```\n[22] pry(main)> user = User.connection.select_all('SELECT * FROM users WHERE id=8')\n=> ...\n[23] pry(main)> user[0]['email']\n=> \"mr.independent_no_diagnosis_patient@navigatingcancer.com\"\n[24] pry(main)> user[0][:email]\n=> nil\n```\n\nI don't love that the hash returned has strings for keys.\n\nI'm using the `mysql2` gem, but that doesn't seem to have anything to do with it.\n", "labels": [], "number": 9587, "updated_at": "2015-12-16 08:12:15", "user": 702327, "closed_at": "2013-03-06 20:53:47", "id": 11730937, "title": "ActiveRecord::ConnectionAdapters select_all should return hash with indifferent access", "url": "https://api.github.com/repos/rails/rails/issues/9587", "created_at": "2013-03-06 20:23:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14525448", "text": "We don't take feature request in the issues tracker. Use the rails core mailing list.\n\nAlso I don't think is worth to do it.\n", "created_at": "2013-03-06 20:53:47", "user": 47848, "id": 14525448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44895773", "text": "i think its worth it\n", "created_at": "2014-06-02 21:46:45", "user": 7291610, "id": 44895773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/163054749", "text": "I am using the method, with thousand's of returning, I think it would save more memory and could be quicker!\n", "created_at": "2015-12-08 23:24:41", "user": 8908273, "id": 163054749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/165028142", "text": "@xjlin0 :+1: \n", "created_at": "2015-12-16 08:12:15", "user": 1208372, "id": 165028142}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "We check for a state in the current ActiveRecord\ntransaction that causes the wrong callbacks to be\nexecuted, and when it occurs, call the correct\ncallbacks.\n\nTests lifted from\nhttps://github.com/rails/rails/commit/b42ea033115c1a06160e4092039d6a0fe0bda6f8\n", "labels": ["activerecord"], "number": 9588, "updated_at": "2015-01-02 23:40:39", "user": 671862, "closed_at": "2015-01-02 23:40:39", "id": 11733056, "title": "Fix issue #8937 after_commit(on: :update) executed erroneously", "url": "https://api.github.com/repos/rails/rails/issues/9588", "created_at": "2013-03-06 21:15:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14528197", "text": "Short of changing where `@_start_transaction_state` gets cleared I think this is the best way to do this.\n", "created_at": "2013-03-06 21:46:43", "user": 57716, "id": 14528197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68573550", "text": "Closing since this doesn't apply anymore. Thank you for the pull request.\n", "created_at": "2015-01-02 23:40:39", "user": 47848, "id": 68573550}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I create an engine with `rails plugin new blorgh --mountable`, I get\n\n```\nUsing blorgh (0.0.1) from source at /Users/steve/tmp/blorgh \nblorgh at /Users/steve/tmp/blorgh did not have a valid gemspec.\nThis prevents bundler from installing bins or native extensions, but that may not affect its functionality.\nThe validation message from Rubygems was:\n  \"FIXME\" or \"TODO\" is not an author\n```\n", "labels": ["attached PR", "engines"], "number": 9589, "updated_at": "2014-05-02 15:12:42", "user": 27786, "closed_at": "2014-05-02 15:12:42", "id": 11734231, "title": "Engines don't have a valid gemspec", "url": "https://api.github.com/repos/rails/rails/issues/9589", "created_at": "2013-03-06 21:44:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14528206", "text": "I'm not sure what the right way is to fix this: we _want_ to have a not-real gem, but then we get that error.\n\n@drbrain what do you think?\n", "created_at": "2013-03-06 21:46:53", "user": 27786, "id": 14528206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14638687", "text": "Crazy idea: what if the generator prompts you for the fields it needs? \n\n```\n$ rails plugin new blorgh --mountable\n\nRails plugins are now used as gems, to create a valid gemspec enter in a valid \nemail address, you can change it later by mofifying `foo.gemspec`\n\nEnter your email > \n\n#...\n```\n", "created_at": "2013-03-08 19:15:19", "user": 59744, "id": 14638687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14638910", "text": "I like that idea. The only other real option we have is to build the gem with `--force` the first time.\n", "created_at": "2013-03-08 19:19:28", "user": 27786, "id": 14638910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14651719", "text": "The required fields are authors, email, homepage, summary and description.\n\nI have the feeling that, with so many fields, a programmer would just write random, meaningless text (especially for homepage, summary and description), and then forget to replace with meaningful entries.\n\nI'd rather the programmer can start writing some code, and it's only asked for those values once the gem gets explicitly built. How do you feel about that?\n", "created_at": "2013-03-08 23:15:29", "user": 10076, "id": 14651719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667172", "text": "The issue is that in order to build all the dependencies bundler needs to build the gem.\n", "created_at": "2013-03-09 17:45:15", "user": 27786, "id": 14667172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14668666", "text": "It's probably best to use valid, dummy entries on the first build then replace them with FIXME after the first install. \n", "created_at": "2013-03-09 19:12:12", "user": 9831, "id": 14668666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15304727", "text": "RubyGems developers should provide a convenient way to build non-final gems : we are developers too !\n\n``` shell\nsudo ruby -e \"print gets(nil).gsub(/(# reject lazy developers.*)(# Warnings)/m, '\\2')\" -i /path_to/rubygems/specification.rb\n```\n\nIt's a bad workarround I know...\nBut now I can use templating to test /build my rails plugins :-P\n", "created_at": "2013-03-22 15:55:50", "user": 897, "id": 15304727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41925345", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2014-05-01 16:15:38", "user": 47848, "id": 41925345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42024308", "text": "@rafaelfranca a PR is here for this one https://github.com/rails/rails/pull/14941\n", "created_at": "2014-05-02 12:16:51", "user": 3948, "id": 42024308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42042207", "text": "Closed by #14941\n", "created_at": "2014-05-02 15:12:42", "user": 47848, "id": 42042207}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "On OS X with Ruby 2.0 and RubyGems 2.02, I see four complaints when I install Rails 3.2.13.rc1.  A newbie to Ruby like me wouldn't know if any are significant, causing lurking issues while learning.  So, I list them here:\n- Parsing documentation for activesupport-3.2.13.rc1\n  unable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping\n- Parsing documentation for builder-3.0.4\n  ruby-2.0.0-p0/lib/ruby/2.0.0/rdoc/parser.rb:87: warning: Unsupported encoding : ignored\n  ruby-2.0.0-p0/lib/ruby/2.0.0/rdoc/parser.rb:87: warning: Unsupported encoding  ignored\n- Parsing documentation for mail-2.5.3\n  unable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/mail/values/unicode_tables.dat, skipping\n", "labels": ["docs"], "number": 9590, "updated_at": "2014-04-02 08:33:53", "user": 1659167, "closed_at": "2013-07-22 20:23:33", "id": 11740291, "title": "3.2.13.rc1 documentation parse nits", "url": "https://api.github.com/repos/rails/rails/issues/9590", "created_at": "2013-03-07 00:27:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14549211", "text": "mail and builder are dependencies of rails that we don't control ourselves. This leaves us with only the first warning. I think the file that warns should not be parsed by rdoc.\n\n@fxn thoughts?\n", "created_at": "2013-03-07 09:01:25", "user": 5402, "id": 14549211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14555242", "text": "The unicode table may need to be updated to fix this, In master it has already been updated in 65bf0945ee84c9e16865f1d49fa678e930fc33f6.\n\nI think it should be safe to update it in 3-2 as well, what do you think @norman?\n", "created_at": "2013-03-07 11:37:58", "user": 26328, "id": 14555242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14556378", "text": "Sorry fellas, I've reported the mail and builder issues on their respective hubs.\n", "created_at": "2013-03-07 12:10:10", "user": 1659167, "id": 14556378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14558902", "text": "@carlosantoniodasilva I don't think it would do any harm at all to update the Unicode tables in Rails 3-2, but I'm not sure this is the root of the issue. I'll look into it a bit right now.\n", "created_at": "2013-03-07 12:51:46", "user": 5042, "id": 14558902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14559885", "text": "Additionally, thinking that gem might update me from rc1 to rc2, I said:\n\n```\ngem update\n```\n\nand got back Rails 4 beta 1 gems, with maybe a hundred \"Unable to convert...\" complaints while \"Parsing documentation for ...\" (these all refer to png or jpg images in guides/assets/images).  At the end in the terminal I'm left with:\n\n```\nInstalling ri documentation for rails-4.0.0.beta1\nInstalling darkfish documentation for rails-4.0.0.beta1\nERROR:  While executing gem ... (RDoc::Error)\nerror generating : Error while evaluating ~/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/rdoc/generator/template/darkfish/page.rhtml: undefined method `chomp' for nil:NilClass (RDoc::Error)\n```\n\nI'd guess none of this has to do with Rails per se, but I'm too newbie to do more than share the news.\n", "created_at": "2013-03-07 13:18:22", "user": 1659167, "id": 14559885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14561135", "text": "Looks like the same issue reported with RDoc here: rdoc/rdoc#190.\n\nIt seems RDoc opens unicode_tables.dat to check if it's documentable. Under Ruby 2.0.0 it would be opened as UTF-8 by default, hence the warning when it first hits 0x80, which in UTF-8 must always be preceded by 0xc2 but in unicode_tables.dat is used by itself as a key in the codepoints hash.\n\nSimply excluding .dat files from the RDoc build eliminates the warning - you can reproduce this by checking out the Rails source and running \n\n`rdoc activesupport/lib`\n\nversus\n\n`rdoc --exclude='.dat' activesupport/lib`\n\nI'm not sure whether the attempt to process the .dat file and subsequent encoding warning is expected behavior from RDoc, but I don't think it would hurt to add the `--exclude` option to the various Rails gemspecs.\n", "created_at": "2013-03-07 13:47:27", "user": 5042, "id": 14561135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14562580", "text": "Great, thanks for the clarification @norman, we'll be looking into it.\n", "created_at": "2013-03-07 14:17:46", "user": 26328, "id": 14562580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19948506", "text": "I get the same issue when I install coffee-rails gem. \n\nunable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat\n", "created_at": "2013-06-25 01:55:54", "user": 345397, "id": 19948506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19948596", "text": "@norman Fixed this issue by your command. Thanks!\n", "created_at": "2013-06-25 01:59:03", "user": 345397, "id": 19948596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21372579", "text": "This can be closed, to remove these warnings simply upgrade your rdoc.\n\nInstalling gem documentation has nothing to do with rails, and everything to do with rubygems and rdoc. You are free to use a newer version of rdoc and rubygems to install gems and no longer see these errors without rails being effected in any way.\n\n/cc @fxn\n", "created_at": "2013-07-22 20:21:55", "user": 277819, "id": 21372579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21372682", "text": "I agree. Thanks!\n", "created_at": "2013-07-22 20:23:33", "user": 27786, "id": 21372682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21372707", "text": ":+1: \n", "created_at": "2013-07-22 20:23:54", "user": 3387, "id": 21372707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39301768", "text": "I have executed following command Mac OS X Mountain Lion, according to @norman \n`rdoc --exclude='.dat' activesupport/lib`\n\nAfter long hours, my start up disk has been reduced its size.\nI'm a beginner in `gem` related stuff, and I just wanted to make it up to date by using\n`sudo gem update`\n\nFaced with issue mentioned in this ticket, I simply tried @norman 's command.\nNot knowing what's is the reason for suddenly increased disk space consumption, I need some help to restore my machine to normal state.\n\nWill `rdoc clean` may solve my problem?\n", "created_at": "2014-04-02 08:32:18", "user": 129412, "id": 39301768}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Following should pass, but does not:\n\n``` ruby\ntime_now = Time.now\nassert_equal(time_now, time_now.change({}))\n```\n\nIt seems change method drops the nanosecond precision.\nReproduced with Rails 3.2.12 + Ruby 1.9.3 on Linux. Did not reproduce on Mac.\n", "labels": ["activesupport"], "number": 9591, "updated_at": "2014-08-04 16:14:49", "user": 1222990, "closed_at": "2013-03-07 17:58:41", "id": 11743342, "title": "ActiveSupport Time.change should support nsec", "url": "https://api.github.com/repos/rails/rails/issues/9591", "created_at": "2013-03-07 02:19:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14539412", "text": "Some demonstration of the problem:\n\n``` ruby\nirb(main):001:0> time_now = Time.now\n=> 2013-03-07 10:57:41 +0900\nirb(main):002:0> time_now.nsec\n=> 419829122\nirb(main):003:0> three_months_later = time_now.advance(:months => 3)\n=> 2013-06-07 10:57:41 +0900\nirb(main):004:0> three_months_later.nsec\n=> 419829000\nirb(main):005:0> (three_months_later - time_now)\n=> 7948799.999999878\nirb(main):006:0> 7948799.999999878 / 1.day\n=> 91.9999999999986\nirb(main):007:0>  (three_months_later.to_i - time_now.to_i)\n=> 7948800\nirb(main):008:0> 7948800.0 / 1.day\n=> 92.0\nirb(main):009:0>  (three_months_later - time_now) + (time_now.nsec - three_months_later.nsec) / 1000_000_000.0\n=> 7948800.0\n```\n", "created_at": "2013-03-07 02:25:10", "user": 1222990, "id": 14539412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14576006", "text": "This is fixed in Rails 4.0 by c766f3e4b013cf4bcc4ad9ba64636bbf944b320c:\n\n``` irb\n>> time_now = Time.now\n=> 2013-03-07 17:51:17 +0000\n>> time_now.nsec\n=> 619503031\n>> three_months_later = time_now.advance(:months => 3)\n=> 2013-06-07 17:51:17 +0000\n>> three_months_later.nsec\n=> 619503031\n```\n", "created_at": "2013-03-07 17:58:41", "user": 6321, "id": 14576006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14599537", "text": "It'd be great to see this get backported for 3.2.13 since it's a bug. :)\n", "created_at": "2013-03-08 02:29:53", "user": 209729, "id": 14599537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14601801", "text": "@kevingriffin sorry, too late for 3.2.13 :).\n\n@pixeltrix it seems fine to backport this one, wdyt?\n", "created_at": "2013-03-08 04:07:37", "user": 26328, "id": 14601801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14609965", "text": "It's not as straightforward backport since we have to support 1.8.7:\n\n``` irb\n>> RUBY_VERSION\n=> \"1.8.7\"\n>> Time.now.nsec\nNoMethodError: undefined method `nsec' for Fri Mar 08 08:47:58 +0000 2013:Time\n    from (irb):6\n    from /Users/andyw/.rvm/rubies/ree-1.8.7-2012.02/lib/ruby/1.8/date.rb:1061\n```\n\nWhilst adding `nsec` to 1.8.7 is easy enough, I'm not sure about whether everywhere in the 1.8.7 api can take a Rational for usec but `Time.utc` seems to work:\n\n``` irb\n>> time = Time.utc(2000, 1, 1, 0, 0, 0, Rational(2000,1000))\n=> Sat Jan 01 00:00:00 UTC 2000\n>> time.usec\n=> 2\n```\n\nJust feels a bit risky for a patch release.\n", "created_at": "2013-03-08 08:58:53", "user": 6321, "id": 14609965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14614006", "text": "How about\n\n``` ruby\n(respond_to?(:nsec) ? Rational(nsec, 1000) : usec)\n```\n\n?\n", "created_at": "2013-03-08 10:57:50", "user": 1222990, "id": 14614006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14618197", "text": "It may be better just to wrap the method definition in a conditional:\n\n``` rb\nif RUBY_VERSION < '1.9'\n  def change(options)\n    # usec version\n  end\nelse\n  def change(options)\n    # nsec version\n  end\nend\n```\n", "created_at": "2013-03-08 13:07:39", "user": 6321, "id": 14618197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14622207", "text": "nice!\n", "created_at": "2013-03-08 14:16:30", "user": 1222990, "id": 14622207}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "@NZKoz @lest,\n\nI'm working on a patch for https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/K2HXD7c8fMU.\n\nI based it off of the 3.0 patch, however, I'm not quite sure how to deal with the `keys` as an Array. So I've aired on the safer side and chosen to make all options html-safe.\n\nWhat do you think?\n", "labels": ["actionview"], "number": 9592, "updated_at": "2014-06-14 11:08:39", "user": 62437, "closed_at": "2013-03-13 08:15:29", "id": 11747375, "title": "Fixes XSS vulnerability in the translate helper method", "url": "https://api.github.com/repos/rails/rails/issues/9592", "created_at": "2013-03-07 06:12:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14545726", "text": ":+1:  users of _html methods are responsible for sanitize imo\n", "created_at": "2013-03-07 07:00:38", "user": 174693, "id": 14545726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14552471", "text": "We also need an entry in the CHANGELOG.\n", "created_at": "2013-03-07 10:27:57", "user": 5402, "id": 14552471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14552510", "text": "Ahh didn't see your merge target was 2.3! ignore my ruby 1.9 hash comments ;)\n", "created_at": "2013-03-07 10:28:50", "user": 5402, "id": 14552510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14573778", "text": "@senny sorry about that, I will add a CHANGELOG entry. However, one thing I noticed is that `2-3-stable` is way behind `v2.3.17`. If I want this patch to make it out as `v2.3.18`, should I keep it targeted as-is and hope someone cherry-picks this onto `v2.3.17`?\n\nPerhaps?\n\n``` diff\ndiff --git actionpack/CHANGELOG actionpack/CHANGELOG\nindex 3270c72..5ae4e5d 100644\n--- actionpack/CHANGELOG\n+++ actionpack/CHANGELOG\n@@ -1,3 +1,7 @@\n+*2.3.18 (unreleased)*\n+\n+* HTML safety: fix XSS vulnerability in the translate helper method for keys ending in 'html' not escaping variable interpolations. [Henry Hsu]\n+\n *2.3.11 (February 9, 2011)*\n\n * Two security fixes. CVE-2011-0446, CVE-2011-0447\n```\n", "created_at": "2013-03-07 17:21:34", "user": 62437, "id": 14573778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14574097", "text": "@hsume2 I'm guessing the `3-2-stable` branch is behind because of the security patches (but I don't know for sure). I would keep the merge target as is. You can add the CHANGELOG entry by simply `git commit --amend` it into your previous commit and then do a `git push -f` to force push the new version onto github. The Pull Request will then update itself. You can also put your name within `*` in place of `[`\n", "created_at": "2013-03-07 17:26:50", "user": 5402, "id": 14574097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14582965", "text": "Just remember guys, we won't release 2.3.x for this vulnerability.  Our maintenance policy is to do 2.3 releases only for severe vulnerabilities only and this doesn't cut it.\n", "created_at": "2013-03-07 20:05:48", "user": 197, "id": 14582965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14583482", "text": "@NZKoz Ahhh okay, then when do you think 2-3-stable will be fast-forwarded to v2.3.17?\n", "created_at": "2013-03-07 20:15:00", "user": 62437, "id": 14583482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14583519", "text": "It won't, unless there's some sort of quite serious vulnerability found.\n", "created_at": "2013-03-07 20:15:56", "user": 27786, "id": 14583519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14586250", "text": "Yeah, 2-3-stable should be considered frozen unless another major vulnerability is found, if that happens we can tidy it all up\n", "created_at": "2013-03-07 21:09:23", "user": 197, "id": 14586250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14589981", "text": "@senny I've added the Changelog update, I've marked it as unreleased.\n\n@NZKoz Okay, does it make sense to keep this against 2-3-stable then?\n", "created_at": "2013-03-07 22:18:26", "user": 62437, "id": 14589981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14597689", "text": "To be honest I don't think sending the pull request makes much sense at all, we're not going to ship a fix for it and it was disclosed years ago.\n", "created_at": "2013-03-08 01:29:57", "user": 197, "id": 14597689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14598032", "text": "@NZKoz understandable. I was just hoping for a better fix than the workaround suggested:\n\n``` ruby\ntranslate('some_html', :some => h('<input>'))\n```\n\nEspecially since the workaround is quite prone to human error.\n", "created_at": "2013-03-08 01:38:14", "user": 62437, "id": 14598032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14661634", "text": "@NZKoz If it does not make sense, should we consider closing the PR?\n", "created_at": "2013-03-09 11:29:09", "user": 5402, "id": 14661634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14829168", "text": "I am closing this for now. Thanks all!\n", "created_at": "2013-03-13 08:16:01", "user": 62437, "id": 14829168}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed unnecessary/irrelevant lines from the test case. \n", "labels": [], "number": 9593, "updated_at": "2014-06-26 15:08:36", "user": 3786236, "closed_at": "2013-03-07 15:51:34", "id": 11755368, "title": "Removed unnecessary test lines", "url": "https://api.github.com/repos/rails/rails/issues/9593", "created_at": "2013-03-07 11:23:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14555100", "text": "The first change seems a valid one, but the setup change has already been commented and rejected in #9583, so please remove it. Also make sure to squash your commits into one, thanks!\n", "created_at": "2013-03-07 11:33:27", "user": 26328, "id": 14555100}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request address a error at `3-2-stable` branch with Oracle database.\nbecause Oracle database identifier cannot be larger than 30 characters.\n\nThis pull request is just for `3-2-stable` no cherry-pick for the master branch needed\nas its original fix made in #7689, which is created as a backport for `3-2-branch` only.\nIn master branch, it must be tested in different way.\n\n``` ruby\n$ ARCONN=oracle ruby -Itest test/cases/ar_schema_test.rb -n test_schema_define_with_table_prefix_and_suffix\nUsing oracle with Identity Map off\nRun options: -n test_schema_define_with_table_prefix_and_suffix\n\n# Running tests:\n\n[1/1] ActiveRecordSchemaTest#test_schema_define_with_table_prefix_and_suffix-- create_table(:fruits)\n   -> 0.0146s\n-- initialize_schema_migrations_table()\n = 0.05 s\n  1) Error:\ntest_schema_define_with_table_prefix_and_suffix(ActiveRecordSchemaTest):\nArgumentError: Index name '_pre_unique_schema_migrations_suf_' on table '_pre_schema_migrations_suf_' is too long; the limit is 30 characters\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_schema_statements.rb:151:in `add_index'\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:429:in `initialize_schema_migrations_table'\n    /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:466:in `block in method_missing'\n    /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:438:in `block in say_with_time'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/benchmark.rb:281:in `measure'\n    /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:438:in `say_with_time'\n    /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:458:in `method_missing'\n    /home/yahonda/git/rails/activerecord/lib/active_record/migration.rb:334:in `method_missing'\n    /home/yahonda/git/rails/activerecord/lib/active_record/schema.rb:53:in `define'\n    test/cases/ar_schema_test.rb:52:in `perform_schema_define!'\n    test/cases/ar_schema_test.rb:30:in `test_schema_define_with_table_prefix_and_suffix'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1301:in `run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit/testcase.rb:17:in `run'\n    /home/yahonda/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:36:in `block in run'\n    /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:425:in `_run__1571136118336013312__setup__1288503554465957031__callbacks'\n    /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:405:in `__run_callback'\n    /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:385:in `_run_setup_callbacks'\n    /home/yahonda/git/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /home/yahonda/git/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:919:in `block in _run_suite'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:912:in `map'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:912:in `_run_suite'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:657:in `block in _run_suites'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:655:in `each'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:655:in `_run_suites'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:867:in `_run_anything'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1060:in `run_tests'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1047:in `block in _run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1046:in `each'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1046:in `_run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/minitest/unit.rb:1035:in `run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:21:in `run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:774:in `run'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:366:in `block (2 levels) in autorun'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:27:in `run_once'\n    /home/yahonda/.rvm/rubies/ruby-2.0.0-p0/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\n\nFinished tests in 0.087222s, 11.4650 tests/s, 0.0000 assertions/s.\n1 tests, 0 assertions, 0 failures, 1 errors, 0 skips\n\nruby -v: ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-linux]\n$\n```\n", "labels": ["activerecord"], "number": 9594, "updated_at": "2014-07-03 07:01:59", "user": 73684, "closed_at": "2013-03-07 14:07:25", "id": 11760248, "title": "Use shorter prefix and suffix to support Oracle adapter", "url": "https://api.github.com/repos/rails/rails/issues/9594", "created_at": "2013-03-07 13:58:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14561905", "text": "looks good, /cc @carlosantoniodasilva \n", "created_at": "2013-03-07 14:03:06", "user": 5402, "id": 14561905}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This should be a quick one. I just replaced non-breaking spaces with normal spaces. There was also trailing whitespace that i trimmed.\n", "labels": [], "number": 9595, "updated_at": "2014-06-26 19:52:15", "user": 5402, "closed_at": "2013-03-07 15:47:25", "id": 11763024, "title": "replace non-breaking spaces with normal spaces [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9595", "created_at": "2013-03-07 15:06:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14565292", "text": "/cc @carlosantoniodasilva @rafaelfranca \n", "created_at": "2013-03-07 15:06:54", "user": 5402, "id": 14565292}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactored the code to remove unnecessary/irrelevant lines.\n", "labels": [], "number": 9596, "updated_at": "2014-06-26 19:52:18", "user": 3786236, "closed_at": "2013-03-07 15:44:03", "id": 11763639, "title": "Refactored the code to remove irrelevant lines", "url": "https://api.github.com/repos/rails/rails/issues/9596", "created_at": "2013-03-07 15:20:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "test case to prevent regressions described in #9110\n", "labels": [], "number": 9597, "updated_at": "2014-06-26 15:54:46", "user": 5402, "closed_at": "2013-03-07 16:31:15", "id": 11767222, "title": "test case for `serialize` default values.", "url": "https://api.github.com/repos/rails/rails/issues/9597", "created_at": "2013-03-07 16:30:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that sometimes has_many associations wasn't refreshed properly.\nWhen you add model to collection twice using 'create' method, it will not update association.\nWith sqlite it works correct, but with postgresql no.\n\nSteps to reproduce:\n1) rails new blog --database=postgresql\n2) edit gemfile:\n\n```\ngem 'rails', '3.2.12'\ngem 'pg', '0.14.1'\n```\n\n3) add two models `Comment` and `Post` with `has_many :comments`\n4) start console\n5) run code below:\n\n```\np = Post.create\np.comments.create\np.comments.create\n```\n\n6) if you run `p.comments.count` you will see 2\n\n```\np.comments.first\np.comments.last\n```\n\n7) 'first' and 'last' should return different values, but actually they will return the same value\n8) if you run p.comments, this will update association and when you run 'first' and 'last' next time it will work properly.\n", "labels": ["activerecord"], "number": 9598, "updated_at": "2013-03-07 23:47:31", "user": 1006331, "closed_at": "2013-03-07 23:47:31", "id": 11771384, "title": "Has_many association bug with PostgreSQL adapter", "url": "https://api.github.com/repos/rails/rails/issues/9598", "created_at": "2013-03-07 17:58:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14576556", "text": "I'll take a look.\n", "created_at": "2013-03-07 18:08:33", "user": 5402, "id": 14576556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14576923", "text": "What version of rails are you using? I think the problem is that `#last` did not use ordering on 3.2.x. I tried to reproduce the issue against master and the following test case passes:\n\n``` ruby\n  def test_first_last_on_created_records\n    topic = Topic.create\n\n    first_reply = topic.replies.create\n    second_reply = topic.replies.create\n\n    assert_equal first_reply, topic.replies.first\n    assert_equal second_reply, topic.replies.last\n    assert_equal [first_reply, second_reply], topic.replies\n  end\n```\n", "created_at": "2013-03-07 18:15:30", "user": 5402, "id": 14576923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14594243", "text": "@senny is correct, you need to add an order for it to work correctly in 3.2.X like this:\n\n```\np.comments.order(:created_at).first\np.comments.order(:created_at).last\n```\n\nAlthough the database will often supply some logical order such as primary key, you shouldn't rely on it in your production queries. If your order matters, add an explicit order.\n\nClosing this issue, if the above code does not produce different comments, i'll re-open. \n", "created_at": "2013-03-07 23:47:31", "user": 59744, "id": 14594243}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Allows you to code like this:\n\n```\n= link_to 'Edit', [:edit, @post, { author_id: current_user.id }]\n```\n", "labels": ["actionview"], "number": 9599, "updated_at": "2014-06-12 16:18:49", "user": 175508, "closed_at": "2013-11-15 12:00:19", "id": 11773043, "title": "Take Hash with options inside Array in #url_for", "url": "https://api.github.com/repos/rails/rails/issues/9599", "created_at": "2013-03-07 18:40:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14592391", "text": "cc @drogus \n", "created_at": "2013-03-07 23:05:15", "user": 175508, "id": 14592391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14592817", "text": "Needs tests and a changelog entry.\n", "created_at": "2013-03-07 23:14:03", "user": 26328, "id": 14592817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14606668", "text": "great patch :+1: looking forward to it!\n", "created_at": "2013-03-08 07:07:54", "user": 5402, "id": 14606668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14606681", "text": "/cc @bjoernbur\n", "created_at": "2013-03-08 07:08:31", "user": 5402, "id": 14606681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14606837", "text": "thanks for this patch...\n", "created_at": "2013-03-08 07:13:08", "user": 837047, "id": 14606837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14611923", "text": "I'm done with tests and a changelog entry.\n\ncc @carlosantoniodasilva @senny \n", "created_at": "2013-03-08 09:59:38", "user": 175508, "id": 14611923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14632431", "text": "Done.\n\ncc @carlosantoniodasilva \n", "created_at": "2013-03-08 17:32:32", "user": 175508, "id": 14632431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14639689", "text": "+1 for the behaviour, but why `extract_options!` is needed for the `Array` case but not for the basic `else` case? Could perhaps the fix better live inside the `polymorphic_path`/`polymorphic_url` methods themselves?\n", "created_at": "2013-03-08 19:34:20", "user": 242532, "id": 14639689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14640221", "text": "@egilburg there are a lot of `else` cases, not only arrays. So, it would break a lot of tests and code (actually, I tried it in my first attempt). \n\nLook, polymorphic helpers already have this functionality, you can path url options as the second param (as I do with `extract_options!`). \n\nYou can use it like `polymorphic_path [:some, :path, :here], param: 'value'`, the problem is that you can't set this `param` without `polymorphic_path` invocation, so you can't actually write `link_to post.title, [:edit, :admin, @post], param: 'value'`.\n\nI hope I've cleared this.\n", "created_at": "2013-03-08 19:43:31", "user": 175508, "id": 14640221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14643691", "text": "@egilburg doing it in `polymorphic_path` was tried in #7259 and rejected because of clashes with `form_for` behaviour.\n\n@josevalim are you still :-1: on this behavior ?\n", "created_at": "2013-03-08 20:27:17", "user": 6321, "id": 14643691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19495671", "text": "@josevalim ping\n", "created_at": "2013-06-15 12:23:16", "user": 5402, "id": 19495671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26399533", "text": "@senny ping\n", "created_at": "2013-10-16 08:07:02", "user": 175508, "id": 26399533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26400112", "text": "@ognevsky we need to wait for @josevalim to jump in.\n", "created_at": "2013-10-16 08:18:37", "user": 5402, "id": 26400112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26400184", "text": "@senny ok, let's wait.\n", "created_at": "2013-10-16 08:19:53", "user": 175508, "id": 26400184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26401276", "text": "The issue here is what is going to be considered the form object in form_for if the last element is a hash. Can a hash be a form object today? If so, how this patch affect `form_for`? If we have those semantics clear, I don't see any problem with this patch.\n", "created_at": "2013-10-16 08:40:45", "user": 9582, "id": 26401276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26402498", "text": "@ognevsky if you can add tests for `form_for` with this behaviour and rebase so it'll merge cleanly then I think we have a :+1:\n", "created_at": "2013-10-16 09:02:52", "user": 6321, "id": 26402498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28327984", "text": "@josevalim @pixeltrix sorry for the long wait.\n\nJose, this patch doesn't affect to `form_for`, because it uses `polymorphic_path` here: https://github.com/rails/rails/blob/master/actionview/lib/action_view/helpers/form_helper.rb#L453, not the `url_for`.\n\nSo, I don't change `form_for` behavior.\n", "created_at": "2013-11-12 20:04:55", "user": 175508, "id": 28327984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28329454", "text": "@josevalim @pixeltrix I've rebased and updated this request. \nI'll add a record to changelog before the merge, it changes very often.\n", "created_at": "2013-11-12 20:21:33", "user": 175508, "id": 28329454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28336510", "text": "@ognevsky Looks like there's failure https://travis-ci.org/rails/rails/jobs/13876911#L3127\n", "created_at": "2013-11-12 21:44:14", "user": 55829, "id": 28336510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28337558", "text": "@chancancode oops, I'll fix it in the morning\n", "created_at": "2013-11-12 21:56:07", "user": 175508, "id": 28337558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28337863", "text": "Fixed. I've added this failing spec to the commit accidentally, it should never pass (because `form_for` doesn't have this features)\n", "created_at": "2013-11-12 21:59:36", "user": 175508, "id": 28337863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28561182", "text": "@ognevsky can you add a CHANGELOG entry and squash your commits - then I'll merge it.\n", "created_at": "2013-11-15 10:53:33", "user": 6321, "id": 28561182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28563885", "text": "@pixeltrix I'm ready\n", "created_at": "2013-11-15 11:50:52", "user": 175508, "id": 28563885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28564340", "text": "@ognevsky thanks!\n", "created_at": "2013-11-15 12:00:31", "user": 6321, "id": 28564340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35776687", "text": "You da man!\n", "created_at": "2014-02-21 21:41:37", "user": 21455, "id": 35776687}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- With Identity Map enabled, NameError might be raised and @target is\n  nil. So we should always ensure `@target ||= find_target`.\n- Only force reload target when it is stale.\n\n/cc @rafaelfranca This will fix the broke build caused by my PR #9549.\n", "labels": [], "number": 9600, "updated_at": "2014-11-11 03:38:17", "user": 531650, "closed_at": "2013-03-07 19:49:57", "id": 11775567, "title": "@target might be nil when Identity Map is enabled.", "url": "https://api.github.com/repos/rails/rails/issues/9600", "created_at": "2013-03-07 19:44:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14582081", "text": "Thank you\n", "created_at": "2013-03-07 19:50:02", "user": 47848, "id": 14582081}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "activerecord/lib/active_record/associations.rb states:\n\n```\n# [association=(associate)]\n#   Assigns the associate object, extracts the primary key, sets it as the foreign key,\n#   and saves the associate object.\n```\n\nSince commit 42dd5d9f2976677a4bf22347f2dde1a8135dfbb4 to fix #7191, this\nis no longer the case if the associate has changed, but is the same\nobject. For example:\n\n```\n# Pirate has_one :ship\npirate = Pirate.create!(catchphrase: \"A Pirate\")\nship = pirate.build_ship(name: 'old name')\nship.save!\n\nship.name = 'new name'\npirate.ship = ship\n```\n\nThat last line should trigger a save. Although we are not changing the\nassociation, the associate (ship) has changed.\n", "labels": ["activerecord"], "number": 9601, "updated_at": "2014-06-14 23:00:20", "user": 472580, "closed_at": "2014-05-09 22:12:45", "id": 11780828, "title": "Fix #8856 Ensure has_one association=(associate) triggers save.", "url": "https://api.github.com/repos/rails/rails/issues/9601", "created_at": "2013-03-07 21:48:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14593927", "text": "Closing in favor of #9602\n", "created_at": "2013-03-07 23:39:39", "user": 59744, "id": 14593927}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14628683", "text": "Reopen this, since this ticket targets `master` while #9602 targets `3-2-stable`\n", "created_at": "2013-03-08 16:26:17", "user": 4912, "id": 14628683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14628810", "text": "@schneems this PR can't be merged anymore. can you rebase it against `master` and force-push to your branch before the review?\n", "created_at": "2013-03-08 16:28:16", "user": 4912, "id": 14628810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14631614", "text": "@sikachu, @schneems, it's just failing on the activerecord/CHANGELOG.md file. Nevertheless, I rebased and force-pushed.\n", "created_at": "2013-03-08 17:17:31", "user": 472580, "id": 14631614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14631867", "text": "@sikachu & @cliochris, sorry about that...i completely missed that one was 3.2 and the other was master. I'll make sure to check the target before closing any duplicates in the future. \n", "created_at": "2013-03-08 17:22:20", "user": 59744, "id": 14631867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14934275", "text": "@schneems, @neerajdotname : I have modified this pull request to take into account your suggestions. This is for master.\n", "created_at": "2013-03-14 22:49:37", "user": 472580, "id": 14934275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14976436", "text": "I'm :+1: on this.\n", "created_at": "2013-03-15 18:12:03", "user": 59744, "id": 14976436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20269785", "text": "@cliochris The test mentioned in PR is not failing in master. Can you look into it?\n", "created_at": "2013-07-01 08:49:58", "user": 6399, "id": 20269785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20289023", "text": "@neerajdotname , this fix has been applied to Rails master, which is why the test in the PR does not fail.\n", "created_at": "2013-07-01 15:25:42", "user": 472580, "id": 20289023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20290091", "text": "@cliochris :-)\n", "created_at": "2013-07-01 15:41:21", "user": 6399, "id": 20290091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42719391", "text": "Closing since it was already applied at https://github.com/rails/rails/commit/ebd7cc6f459e43aa03a6b8095266888909e0ee4d.\n", "created_at": "2014-05-09 22:12:45", "user": 611891, "id": 42719391}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`activerecord/lib/active_record/associations.rb` states:\n\n```\n# [association=(associate)]\n#   Assigns the associate object, extracts the primary key, sets it as the foreign key,\n#   and saves the associate object.\n```\n\nSince commit 42dd5d9f2976677a4bf22347f2dde1a8135dfbb4 to fix #7191, this\nis no longer the case if the associate has changed, but is the same\nobject. For example:\n\n```\n# Pirate has_one :ship\npirate = Pirate.create!(catchphrase: \"A Pirate\")\nship = pirate.build_ship(name: 'old name')\nship.save!\n\nship.name = 'new name'\npirate.ship = ship\n```\n\nThat last line should trigger a save. Although we are not changing the\nassociation, the associate (ship) has changed.\n\nConflicts:\n    activerecord/CHANGELOG.md\n", "labels": ["activerecord"], "number": 9602, "updated_at": "2014-07-02 21:51:06", "user": 472580, "closed_at": "2014-01-18 21:48:39", "id": 11780861, "title": "Fix #8856 Ensure has_one association=(associate) triggers save.", "url": "https://api.github.com/repos/rails/rails/issues/9602", "created_at": "2013-03-07 21:49:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14934264", "text": "@schneems, @neerajdotname : I have modified this pull request to take into account your suggestions. This is for 3-2-stable.\n", "created_at": "2013-03-14 22:49:26", "user": 472580, "id": 14934264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14942098", "text": ":+1: \n\n@jonleighton @tenderlove Can you take a look ?\n", "created_at": "2013-03-15 03:23:24", "user": 6399, "id": 14942098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959742", "text": "- Is this a problem in master? If so it needs to be fixed in master and then backported to 3-2-stable.\n- I think we should just revert the commit that introduced this problem (and add a test to prevent future regressions).\n", "created_at": "2013-03-15 13:16:17", "user": 1979, "id": 14959742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959843", "text": "@jonleighton Yes I verified that it is a problem in master. \n\nI'm not sure if this is an issue in 3-2-stable or not.\n", "created_at": "2013-03-15 13:18:52", "user": 6399, "id": 14959843}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14960434", "text": "@jonleighton (cc @neerajdotname ) It definitely is a problem in 3-2-stable, and has been broken since 3.2.9 (worked in 3.2.8).\n\nNote that this pull request is for 3-2-stable but pull request 9601 is against master. You guys are welcome to whichever one you prefer and could certainly backport if you wish, just thought you might appreciate a pull request for each place.\n", "created_at": "2013-03-15 13:31:28", "user": 472580, "id": 14960434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034390", "text": "@jonleighton suggested to fix https://github.com/rails/rails/issues/7191 in such a way that \n\n```\nUser.transaction {}\nor\nUser.transaction do\nend\n```\n\ndoes not produce any `begin statements`. In this way we do not have to worry about when the transaction starts. \n\nI took a stab at it but I'm not able to find a way to detect if a given block is empty. Here is what I tried.\n\n```\ndef lab &block\n  raise 'boom' if block == proc { }\n  raise 'boom' if block == Proc.new { }\n  raise 'boom' if block == -> { }\nend\n\nlab {}\nlab do\nend\n```\n\nI am not able to get any \"boom\" so far.  @jonleighton do you have any suggestion regarding how to detect if a given block is empty or not .\n", "created_at": "2013-03-18 00:19:10", "user": 6399, "id": 15034390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32694158", "text": "I'm closing this PR since Rails `3.2` is not under maintenance anymore.\nYou can can open a new PR targeting master if it's still a problem.\n\nThanks!\n", "created_at": "2014-01-18 21:48:39", "user": 611891, "id": 32694158}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32767314", "text": "Very disappointing that you would allow Rails 3.2 to remain broken when there's a pull request to fix the issue, submitted 11 months ago, complete with unit tests demonstrating the problem. But it is within your rights to allow Rails 3.2 to remain broken, I suppose. PR 9601 was thankfully applied against master approximately 7 months ago, so this won't be an issue with people who have upgraded to the Rails 4.x branch.\n", "created_at": "2014-01-20 15:15:05", "user": 472580, "id": 32767314}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It made sense to use verb \"initialize\" over noun \"new\" in \"find_or_initialize\"\ndespite it calling \"new\" under the hood because \"find\" is a verb.\n\nBut \"initialize\" does no longer make sense for the current method as \"first\" is a noun.\n\nDoes this sound OK?\n", "labels": ["activerecord"], "number": 9603, "updated_at": "2014-07-04 15:47:54", "user": 347921, "closed_at": "2013-04-09 12:32:39", "id": 11780870, "title": "Rename first_or_initialize to first_or_new", "url": "https://api.github.com/repos/rails/rails/issues/9603", "created_at": "2013-03-07 21:49:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14588551", "text": "cc @dhh \n", "created_at": "2013-03-07 21:51:10", "user": 47848, "id": 14588551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14592232", "text": ":heart:\n", "created_at": "2013-03-07 23:02:23", "user": 175508, "id": 14592232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14644413", "text": ":+1:\n", "created_at": "2013-03-08 20:43:12", "user": 2741, "id": 14644413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14644654", "text": "@semaperepelitsa could you add a CHANGELOG entry?\n", "created_at": "2013-03-08 20:48:29", "user": 47848, "id": 14644654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14644677", "text": "Also if we are going to prefer `first_and_new` we have to update the test usage\n", "created_at": "2013-03-08 20:48:51", "user": 47848, "id": 14644677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14644859", "text": "1. `first_and_initialize` has to have a deprecation warning as well, if that will be removed in Rails 4.1.\n2. Please update tests.\n3. docs\n4. guides\n", "created_at": "2013-03-08 20:53:24", "user": 4912, "id": 14644859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14681570", "text": "And how about `find_or_initialize_by`?\n", "created_at": "2013-03-10 13:43:11", "user": 26328, "id": 14681570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697145", "text": "I thought `find_or_*_by` methods were removed in favor of `where(...).first_or_*` but I see that they still do exist. As I said, it makes sense to use verb there, find_or_new_by doesn't sound right. I would leave it as is unless you have other ideas.\n\nDo we want to deprecate and remove first_and_initialize or have it as an alias? I'm fine with both options.\n", "created_at": "2013-03-11 04:20:56", "user": 347921, "id": 14697145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14719229", "text": "I'm fine with the alias\n", "created_at": "2013-03-11 15:22:24", "user": 47848, "id": 14719229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14719891", "text": "`find_or_new_by_name` sounds weird though. But yeah, for consistency sake, we might need to make an alias.\n", "created_at": "2013-03-11 15:32:16", "user": 4912, "id": 14719891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14721813", "text": "Relationships have used the term `build`.  If sticking with verbs for the case of `*_by` methods, what about `find_or_build` and `find_or_build_by`?\n", "created_at": "2013-03-11 16:01:53", "user": 169093, "id": 14721813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14723371", "text": "I particularly don't have any problem with `initialize` in the way it's used with `first` or `find by`, changing seems to add more confusion than solving anything.\n", "created_at": "2013-03-11 16:26:21", "user": 26328, "id": 14723371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16011930", "text": "The `first_or_initialize` API is \"soft-deprecated\" in 4.0 in favour of the new `Relation#find_or_*_by` methods, so whilst I don't necessarily disagree with the rationale for changing these method names, I'm not sure there's any point (they are nodoc'ed in 4.0)\n", "created_at": "2013-04-07 09:12:10", "user": 1979, "id": 16011930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16109671", "text": "Since it is deprecated I don't think we need to rename it.\n\nThank you for the pull request.\n", "created_at": "2013-04-09 12:32:39", "user": 47848, "id": 16109671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16112041", "text": "@jonleighton, thanks for the clarification. Release notes do recommend first_or_\\* though: http://edgeguides.rubyonrails.org/4_0_release_notes.html#active-record-deprecations. Are they outdated?\n", "created_at": "2013-04-09 13:23:44", "user": 347921, "id": 16112041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16115819", "text": "@semaperepelitsa yes\n", "created_at": "2013-04-09 14:31:52", "user": 47848, "id": 16115819}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Any exceptions that occur in a controller using ActionController::Live would cause the server to either hang with an open socket indefinitely, or immediately crash (depending on whether the server was launched with rails s or directly).\n\nEasiest way to duplicate the issue is to include ActionController::Live, and visit a route that has no associated view, or to call an undefined method. Issue was reproduced with Ruby 1.9.3 as well as 2.0.\n\nAdded a catch block in Live to make exception handling work similarly to streaming templates. A redirect to 500.html is issued using a script tag, the stream is closed, and the exception is logged to the terminal.\n", "labels": ["actionpack"], "number": 9604, "updated_at": "2014-06-18 13:18:46", "user": 1529387, "closed_at": "2013-04-08 16:53:20", "id": 11781803, "title": "Exceptions raised when using ActionController::Live cause server crash", "url": "https://api.github.com/repos/rails/rails/issues/9604", "created_at": "2013-03-07 22:11:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14589839", "text": "cc @tenderlove \n", "created_at": "2013-03-07 22:15:11", "user": 47848, "id": 14589839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14601848", "text": "@josevalim Changed to only return the html redirect for html requests. Am I correct in assuming we want a plaintext error output otherwise?\n", "created_at": "2013-03-08 04:10:02", "user": 1529387, "id": 14601848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14669931", "text": "@sgrif I don't think we should output anything at all. For server sent events, there is nothing we could output that would make sense. Even more, the failure could even be due to errors in the socket, so pushing anything could just make things worse. Maybe we would provide a on_error callback in the response stream that users could customize, but i don't think we should do anything out the box.\n", "created_at": "2013-03-09 20:26:22", "user": 9582, "id": 14669931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671115", "text": "@josevalim Both of those make sense, I'll just need to make sure that an error in the on_error block doesn't cause additional problems. It seems like it might not be immediately apparent that all requests to a controller using Live are streamed, even if you're just `render`ing a view as normal. Do you think it would make sense to only stream when stream.write is called directly from the controller, or if stream: true is passed to render? If not, we should probable change the wording in the documentation from \"all actions in that controller will be able to stream\" to \"all actions will stream\"\n", "created_at": "2013-03-09 21:30:57", "user": 1529387, "id": 14671115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15022337", "text": "@josevalim I've made the changes requested.\n", "created_at": "2013-03-17 13:03:59", "user": 1529387, "id": 15022337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063793", "text": "@sgrif would you mind rebasing this against master and force push to your branch again? It's not mergeable right now. Thanks!\n", "created_at": "2013-03-18 16:08:53", "user": 4912, "id": 15063793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15065859", "text": "@sikachu Sure. I squashed down to a single commit as well.\n", "created_at": "2013-03-18 16:42:28", "user": 1529387, "id": 15065859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15619200", "text": "Just checking in on this PR. I'm curious to know what are necessary next steps before this can be merged.\n", "created_at": "2013-03-28 22:27:32", "user": 632827, "id": 15619200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15619725", "text": "/cc @josevalim\n", "created_at": "2013-03-28 22:40:24", "user": 160941, "id": 15619725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15981198", "text": "This seems good to me.  @josevalim?\n", "created_at": "2013-04-05 21:14:52", "user": 3124, "id": 15981198}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://www.sqlite.org/lang_savepoint.html\n\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L130-L132\n", "labels": [], "number": 9605, "updated_at": "2014-06-26 19:52:29", "user": 6399, "closed_at": "2013-03-08 00:23:15", "id": 11781985, "title": "SQLite3 3.6.8+ supports savepoints", "url": "https://api.github.com/repos/rails/rails/issues/9605", "created_at": "2013-03-07 22:16:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14591949", "text": "@jeremy `Savepoints` is `savepoints` now. Thanks. \n", "created_at": "2013-03-07 22:56:41", "user": 6399, "id": 14591949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14594912", "text": "@carlosantoniodasilva the extra space has been removed . Thanks. \n", "created_at": "2013-03-08 00:04:39", "user": 6399, "id": 14594912}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14595523", "text": "Thanks.\n", "created_at": "2013-03-08 00:23:17", "user": 26328, "id": 14595523}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix #7441 offset + last\n", "labels": ["activerecord"], "number": 9606, "updated_at": "2014-07-04 15:47:52", "user": 95060, "closed_at": "2013-12-03 17:23:27", "id": 11785575, "title": "fix #7441 offset + last", "url": "https://api.github.com/repos/rails/rails/issues/9606", "created_at": "2013-03-07 23:58:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14606150", "text": "We also need an entry in the CHANGELOG.\n", "created_at": "2013-03-08 06:54:05", "user": 5402, "id": 14606150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29687992", "text": "ping @kostya @senny Is this still valid?\n", "created_at": "2013-12-03 07:12:11", "user": 412083, "id": 29687992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29730666", "text": "@karayusuf I ran a reformatted version of the test against `master` and it is still an issue.\n", "created_at": "2013-12-03 17:20:28", "user": 5402, "id": 29730666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29730959", "text": "@kostya we don't merge patches directly into a `-stable` branch. Please open a PR against master. If you don't have the time to make the proposed updates, let me know so I can push the patch.\n", "created_at": "2013-12-03 17:23:27", "user": 5402, "id": 29730959}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have this version of Ruby:\n\n``` terminal\nruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin11.4.2]\n```\n\nAnd I have this in my Gemfile:\n\n``` ruby\nsource 'https://rubygems.org'\n\n# Bundle edge Rails instead: gem 'rails', github: 'rails/rails'\ngem 'rails', '4.0.0.beta1'\n\ngem 'pg'\n\n# Gems used only for assets and not required\n# in production environments by default.\ngroup :assets do\n  gem 'sass-rails',   '~> 4.0.0.beta1'\n  gem 'coffee-rails', '~> 4.0.0.beta1'\n\n  # See https://github.com/sstephenson/execjs#readme for more supported runtimes\n  # gem 'therubyracer', platforms: :ruby\n\n  gem 'uglifier', '>= 1.0.3'\nend\n\ngem 'jquery-rails'\n\n# Turbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\ngem 'turbolinks'\n\n# Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder\ngem 'jbuilder', '~> 1.0.1'\n\n# To use ActiveModel has_secure_password\n# gem 'bcrypt-ruby', '~> 3.0.0'\n\n# Use unicorn as the app server\n# gem 'unicorn'\n\n# Deploy with Capistrano\n# gem 'capistrano', group: :development\n\n# To use debugger\n# gem 'debugger'\n```\n\nAnd this in my Gemfile.lock:\n\n``` ruby\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionmailer (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      mail (~> 2.5.3)\n    actionpack (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n      erubis (~> 2.7.0)\n      rack (~> 1.5.2)\n      rack-test (~> 0.6.2)\n    activemodel (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n    activerecord (4.0.0.beta1)\n      activemodel (= 4.0.0.beta1)\n      activerecord-deprecated_finders (~> 0.0.3)\n      activesupport (= 4.0.0.beta1)\n      arel (~> 4.0.0.beta1)\n    activerecord-deprecated_finders (0.0.3)\n    activesupport (4.0.0.beta1)\n      i18n (~> 0.6.2)\n      minitest (~> 4.2)\n      multi_json (~> 1.3)\n      thread_safe (~> 0.1)\n      tzinfo (~> 0.3.33)\n    arel (4.0.0.beta1)\n    atomic (1.0.1)\n    builder (3.1.4)\n    coffee-rails (4.0.0.beta1)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0.beta, < 5.0)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.6.1)\n    erubis (2.7.0)\n    execjs (1.4.0)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.4)\n    jbuilder (1.0.2)\n      activesupport (>= 3.0.0)\n    jquery-rails (2.2.1)\n      railties (>= 3.0, < 5.0)\n      thor (>= 0.14, < 2.0)\n    json (1.7.7)\n    mail (2.5.3)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.21)\n    minitest (4.6.2)\n    multi_json (1.6.1)\n    pg (0.14.1)\n    polyglot (0.3.3)\n    rack (1.5.2)\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    rails (4.0.0.beta1)\n      actionmailer (= 4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activerecord (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.0.0.beta1)\n      sprockets-rails (~> 2.0.0.rc3)\n    railties (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.17.0, < 2.0)\n    rake (10.0.3)\n    rdoc (3.12.2)\n      json (~> 1.4)\n    sass (3.2.6)\n    sass-rails (4.0.0.beta1)\n      railties (>= 4.0.0.beta, < 5.0)\n      sass (>= 3.1.10)\n      sprockets-rails (~> 2.0.0.rc0)\n      tilt (~> 1.3)\n    sprockets (2.9.0)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.0.0.rc3)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (~> 2.8)\n    thor (0.17.0)\n    thread_safe (0.1.0)\n      atomic\n    tilt (1.3.4)\n    treetop (1.4.12)\n      polyglot\n      polyglot (>= 0.3.1)\n    turbolinks (1.0.0)\n      coffee-rails\n    tzinfo (0.3.36)\n    uglifier (1.3.0)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  coffee-rails (~> 4.0.0.beta1)\n  jbuilder (~> 1.0.1)\n  jquery-rails\n  pg\n  rails (= 4.0.0.beta1)\n  sass-rails (~> 4.0.0.beta1)\n  turbolinks\n  uglifier (>= 1.0.3)\n```\n\nI ran bundle install with the following command:\n\n``` terminal\n$: bundle install --path vendor/bundle --binstubs\n```\n\nWhen I run `bin/rails s` the help menu is displayed.\nSame goes for `bin/rails c`.\n\nMy OS is OS X Lion.\n", "labels": [], "number": 9607, "updated_at": "2013-03-08 17:45:58", "user": 80530, "closed_at": "2013-03-08 13:22:13", "id": 11786828, "title": "Using rbenv, ruby2 and Rails 4 beta - rails server displays the help menu", "url": "https://api.github.com/repos/rails/rails/issues/9607", "created_at": "2013-03-08 00:42:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14596587", "text": "You vendored it in `vendor/bundle`, so wouldn't it be `vendor/bundle/bin/rails s`?\n", "created_at": "2013-03-08 00:55:32", "user": 27786, "id": 14596587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14596934", "text": "I am using `--binstubs` that copies the executables into `project_root/bin`.\n\nI don't have a `vendor/bundle/bin` dir.\n\nThis is what I have in the `project_root/bin` dir:\n\n``` terminal\ndrwxr-xr-x  17 adomokos  staff  578 Mar  7 19:57 .\ndrwxr-xr-x  19 adomokos  staff  646 Mar  7 20:01 ..\n-rwxr-xr-x   1 adomokos  staff  129 Mar  7 19:54 bundle\n-rwxr-xr-x   1 adomokos  staff  370 Mar  7 19:59 erubis\n-rwxr-xr-x   1 adomokos  staff  368 Mar  7 19:59 rackup\n-rwxr-xr-x   1 adomokos  staff  370 Mar  7 20:00 rails\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 19:59 rake\n-rwxr-xr-x   1 adomokos  staff  374 Mar  7 20:00 rake2thor\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 20:00 rdoc\n-rwxr-xr-x   1 adomokos  staff  360 Mar  7 20:00 ri\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 20:01 sass\n-rwxr-xr-x   1 adomokos  staff  380 Mar  7 20:01 sass-convert\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 20:01 scss\n-rwxr-xr-x   1 adomokos  staff  379 Mar  7 20:00 sprockets\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 20:00 thor\n-rwxr-xr-x   1 adomokos  staff  364 Mar  7 20:00 tilt\n-rwxr-xr-x   1 adomokos  staff  363 Mar  7 19:59 tt\n```\n", "created_at": "2013-03-08 01:05:19", "user": 80530, "id": 14596934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14597606", "text": "I have the same problem for this version of Ruby as well:\n`ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.4.0]`.\n", "created_at": "2013-03-08 01:26:31", "user": 80530, "id": 14597606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14606090", "text": "Rails 4 ships already with a bin/rails. Did you overwrite it a a binstub generated by bundler? As far as I know you should use the bin/rails that's generated when you do `rails new`\n", "created_at": "2013-03-08 06:52:31", "user": 5402, "id": 14606090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14618732", "text": "The problem is because you are using `--binstubs` option and this is overriding the `bin/rails` command that we ship.\n\nYou should use the `bundle binstubs` command instead.\n", "created_at": "2013-03-08 13:22:12", "user": 47848, "id": 14618732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14622749", "text": "Ok, this worked, but I believe other people might bump into the same issue.\nIt feels bundler and rails are stepping on each other's toes.\n", "created_at": "2013-03-08 14:27:29", "user": 80530, "id": 14622749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633199", "text": ">  It feels bundler and rails are stepping on each other's toes.\n\nIt's more that the old bundler behavior and the new bundler behavior are different: Bundler 1.3.x has the `bundle binstubs` command that replaces `--binstubs`.\n", "created_at": "2013-03-08 17:45:58", "user": 27786, "id": 14633199}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm getting random segmentation faults when precompiling assets on Ruby 2.0.0 and Rails 2.3.13.rc2. This started appearing after switch to Ruby 2.0.0.\n\nI cannot reproduce it on my local machine, but it often happens when deploying to Heroku (maybe @hone observed something similar).\n\nNot sure which project bug tracker should it be reported, but I'm posting it here as rails community should have biggest knowledge in this topic. Switch to `sprockets` 2.2.2.backport1 version didn't help as @josh suggested in #9492 \n\nHere is a stacktrace: https://gist.github.com/morgoth/a63eb1feebf5139e9537\n", "labels": ["asset pipeline", "third party issue"], "number": 9608, "updated_at": "2013-06-23 12:10:06", "user": 10766, "closed_at": "2013-06-23 12:10:06", "id": 11797522, "title": "Random segmentation faults when precompiling assets on Ruby 2.0.0", "url": "https://api.github.com/repos/rails/rails/issues/9608", "created_at": "2013-03-08 09:28:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14628267", "text": "Have you reported this bug to [Redmine](http://bugs.ruby-lang.org/)? I think there might be some bug in Ruby itself regarding Tempfile handling.\n", "created_at": "2013-03-08 16:18:49", "user": 4912, "id": 14628267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14660550", "text": "@sikachu just did: https://bugs.ruby-lang.org/issues/8056\n", "created_at": "2013-03-09 09:39:18", "user": 10766, "id": 14660550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16876229", "text": "Have the same error. It randomly occurs both locally and on our build server. On the build server it is always in the assets precompilation steps it segfaults.\n\nsnippet from trace: https://gist.github.com/MadsBuus/5446038\n", "created_at": "2013-04-23 18:14:30", "user": 62377, "id": 16876229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17234234", "text": "I can also report the same issue: https://gist.github.com/cloud8421/5489442\n", "created_at": "2013-04-30 15:25:34", "user": 537608, "id": 17234234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17803359", "text": "This is probably a dup of https://bugs.ruby-lang.org/issues/8100\n", "created_at": "2013-05-13 10:17:22", "user": 499, "id": 17803359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19872978", "text": "Yup. Until we can prove that this is a Rails issue, I'm closing.\n", "created_at": "2013-06-23 12:10:05", "user": 27786, "id": 19872978}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "1.2.5 and 1.2.6 are bad ones\n", "labels": [], "number": 9609, "updated_at": "2014-06-23 21:35:22", "user": 3948, "closed_at": "2013-03-08 12:41:22", "id": 11799096, "title": "Using latest AR-JDBC for JRuby", "url": "https://api.github.com/repos/rails/rails/issues/9609", "created_at": "2013-03-08 10:24:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Note that the following was working correctly in Rails 3.2.6. I skipped the versions between, but can confirm at least that it **fails 3.2.11 & 3.2.12**.\n\nGiven an **Event** class with:\n\n```\nt.datetime \"beginx\"\nt.datetime \"endx\"\nt.string   \"time_zone\"\n```\n\nAnd an **edit action** like so:\n\n```\n@event = Event.find(id)\nTime.zone = @event.time_zone\n@event.beginx = @event.beginx.in_time_zone\n@event.endx = @event.endx.in_time_zone\n```\n\nIn the **datetime_select**, **beginx** and **endx** should shown in regards to the time zone of the **event**.\n\n**Instead, they are shown in the time zone as defined in the `before_filter` of the application controller (`Time.zone = whatever`).**\n\nIf the code of the **edit action** is changed to the following, suddenly the time **is** shown within the time zone of the event:\n\n```\n@event = Event.find(id)\nTime.zone = @event.time_zone\n@event.beginx = @event.beginx.in_time_zone + 1.second\n@event.endx = @event.endx.in_time_zone - 1.second\n```\n\nNote the +/- second.\n_(It's irrelevant which calculation is done - as long as one is done.)_\n\nThe problem is also described in this SO-question: http://stackoverflow.com/questions/15209130/how-can-i-prefill-datetime-select-with-times-in-custom-time-zone\n", "labels": [], "number": 9610, "updated_at": "2013-09-17 11:07:07", "user": 1078037, "closed_at": "2013-03-09 05:41:01", "id": 11806448, "title": "datetime_select preselects wrong times upon edit", "url": "https://api.github.com/repos/rails/rails/issues/9610", "created_at": "2013-03-08 14:19:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14628279", "text": "This is because the conversion is cached and when you try to assign the new value it sees it as the same value because it's converted to UTC first so it's never cleared. Rather than changing the global `Time.zone` setting you'd be better off overriding the readers for those attributes, e.g:\n\n``` ruby\nclass Event < ActiveRecord::Base\n  def beginx\n    super.in_time_zone(time_zone)\n  end\n\n  def endx\n    super.in_time_zone(time_zone)\n  end\nend\n```\n\nThis will ensure that the values are always in the correct time zone.\n", "created_at": "2013-03-08 16:19:00", "user": 6321, "id": 14628279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14655881", "text": "Excellent hint. Thanks. To avoid errors I added **if super**:\n\n```\nsuper.in_time_zone(time_zone) if super\n```\n", "created_at": "2013-03-09 01:55:57", "user": 1078037, "id": 14655881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14658517", "text": "@GSI yes, if you can have nil values in the column then you need to detect that. Other ways of doing it are:\n\n``` ruby\nsuper && super.in_time_zone(time_zone)\n```\n\nor\n\n``` ruby\nsuper.try(:in_time_zone, time_zone)\n```\n\nWhich you prefer is down to you - I know some people have an ideological objection to the last one :smile:\n\nClosing the ticket because it's working as it should be - thanks for your report though.\n", "created_at": "2013-03-09 05:41:01", "user": 6321, "id": 14658517}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Refactored the test with standard, consistent and meaningful variable names.\n", "labels": [], "number": 9611, "updated_at": "2014-06-26 19:52:33", "user": 3786236, "closed_at": "2013-03-08 14:22:42", "id": 11806471, "title": "Refactored test case with standard variable names", "url": "https://api.github.com/repos/rails/rails/issues/9611", "created_at": "2013-03-08 14:20:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14622524", "text": "Thank you\n", "created_at": "2013-03-08 14:22:45", "user": 47848, "id": 14622524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14622956", "text": "My pleasure :)\n", "created_at": "2013-03-08 14:31:19", "user": 3786236, "id": 14622956}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed the unnecessary lines.\n", "labels": [], "number": 9612, "updated_at": "2014-06-30 02:26:11", "user": 3786236, "closed_at": "2013-03-08 16:30:50", "id": 11807437, "title": "Removed unnecessary lines from test case", "url": "https://api.github.com/repos/rails/rails/issues/9612", "created_at": "2013-03-08 14:48:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14623934", "text": "I'm not sure these lines are unnecessary so I think is better to leave it as it is\n", "created_at": "2013-03-08 14:50:37", "user": 47848, "id": 14623934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14624124", "text": "The removed lines are tailored into an one-liner, so no harm done. The re-written one line will serve the purpose of the removed lines, so no worries. \n", "created_at": "2013-03-08 14:54:47", "user": 3786236, "id": 14624124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14624304", "text": "I don't think so, the test description is explicitly saying that the test is for when you the set foreign key after the object load and the one line is not doing this.\n", "created_at": "2013-03-08 14:58:48", "user": 47848, "id": 14624304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14624765", "text": "Right...the removed lines kill the purpose of the test case. \n", "created_at": "2013-03-08 15:08:12", "user": 3786236, "id": 14624765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14628999", "text": "Thank you for the contribution\n", "created_at": "2013-03-08 16:31:05", "user": 47848, "id": 14628999}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As we did in master.\n", "labels": [], "number": 9613, "updated_at": "2014-06-23 00:51:21", "user": 3948, "closed_at": "2013-03-08 15:43:25", "id": 11808695, "title": "Removing FIXME", "url": "https://api.github.com/repos/rails/rails/issues/9613", "created_at": "2013-03-08 15:23:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've moved some methods around in nested associations because the code is currently pretty hard to follow. \n\nThere have lately been a couple bugs related to nested associations, so hopefully some refactoring will help out whoever stumbles upon the code. Additionally, I've added a some comments that hopefully make it more clear about what's going on.\n", "labels": [], "number": 9614, "updated_at": "2014-06-26 19:52:36", "user": 1075780, "closed_at": "2013-03-08 16:55:17", "id": 11811361, "title": "Refactored nested associations so they are more readable.", "url": "https://api.github.com/repos/rails/rails/issues/9614", "created_at": "2013-03-08 16:26:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14630014", "text": "@rafaelfranca Thanks for the comments! I've updated the commit so that the helper method is below the main method. Just out of curiosity, is this the Rails convention? \n", "created_at": "2013-03-08 16:49:04", "user": 1075780, "id": 14630014}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14630367", "text": "Actually this a software engineering good practice. You define the methods in an order that the reader can read the file from top to botton.\n", "created_at": "2013-03-08 16:55:13", "user": 47848, "id": 14630367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14630380", "text": "Thank you for the pull request\n", "created_at": "2013-03-08 16:55:24", "user": 47848, "id": 14630380}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To make quote escape binary data correctly it needs the column passed in.\n", "labels": ["activerecord"], "number": 9615, "updated_at": "2014-06-26 15:15:53", "user": 24275, "closed_at": "2013-03-12 11:30:38", "id": 11811540, "title": "Pass column to quote when copying a sqlite table.", "url": "https://api.github.com/repos/rails/rails/issues/9615", "created_at": "2013-03-08 16:31:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14629240", "text": "Would be good a CHANGELOG entry explaining the problem\n", "created_at": "2013-03-08 16:35:35", "user": 47848, "id": 14629240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14657853", "text": "Tried to make code clearer and added changelog.\n", "created_at": "2013-03-09 04:30:53", "user": 24275, "id": 14657853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14760278", "text": "Changed variable name as @neerajdotname suggested.\n", "created_at": "2013-03-12 06:18:15", "user": 24275, "id": 14760278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14770188", "text": "Thanks.\n", "created_at": "2013-03-12 11:30:42", "user": 26328, "id": 14770188}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix incorrectly appended square brackets to a multiple select box, if an explicit name has been given and it already ends with \"[]\". Actually, I found this bug when upgrading from 3.2.12 to 3.2.13.rc2, so I'd like to backport this to 3-2-13.\n\nFormtastic is always providing an explicit name, and it already ends with \"[]\" for one-to-many associations (see [here](https://github.com/justinfrench/formtastic/blob/master/lib/formtastic/inputs/select_input.rb#L201)).\n\nBefore:\n\n``` ruby\nselect(:category, [], {}, {:multiple => true, :name => \"post[category][]\"})\n# => <select name=\"post[category][][]\" ...>\n```\n\nAfter:\n\n``` ruby\nselect(:category, [], {}, {:multiple => true, :name => \"post[category][]\"})\n# => <select name=\"post[category][]\" ...>\n```\n\nProbable culprits are 175ba04c on master and 2a6f208e on 3-2-13.\n\n/cc @tenderlove would you like me to open a separate PR with a backport?\n", "labels": [], "number": 9616, "updated_at": "2014-06-12 18:05:32", "user": 80070, "closed_at": "2013-03-09 14:48:05", "id": 11813443, "title": "Fix incorrectly appended square brackets to a multiple select box", "url": "https://api.github.com/repos/rails/rails/issues/9616", "created_at": "2013-03-08 17:16:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14632846", "text": "@carlosantoniodasilva I wanted to minimize the pain when backporting, but if you think it should be different on master and 3-2-13, then I'll change that.\n", "created_at": "2013-03-08 17:39:48", "user": 80070, "id": 14632846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633048", "text": "@carlosantoniodasilva done\n", "created_at": "2013-03-08 17:43:22", "user": 80070, "id": 14633048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633105", "text": "Hm no, that's fine, we can keep the hash in the tests if we're going to backport, but the changelog can be changed I think. Also make sure to add spaces inside `{}`. Thanks!\n\nBtw, even backporting it's too late for 3.2.13, but it can wait in 3-2-stable for the next one :).\n", "created_at": "2013-03-08 17:44:17", "user": 26328, "id": 14633105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633445", "text": "> Btw, even backporting it's too late for 3.2.13, but it can wait in 3-2-stable for the next one :).\n\nAccording to the [changelog](https://github.com/rails/rails/blob/3-2-13/actionpack/CHANGELOG.md) (right above the header \"3.2.12\"), this is a regression since 3.2.12, so I thought it'd make sense to release in 3.2.13.\n", "created_at": "2013-03-08 17:50:27", "user": 80070, "id": 14633445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633679", "text": "Ah perfect, sorry I missed this comment in your description:\n\n> I found this bug when upgrading from 3.2.12 to 3.2.13.rc2, so I'd like this to backport this to 3-2-13.\n\nSo I think it'll have to be part of 3.2.13, but we may need another rc for that. /cc @tenderlove.\n\nThanks @exviva.\n", "created_at": "2013-03-08 17:55:19", "user": 26328, "id": 14633679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14633943", "text": "@carlosantoniodasilva no problem, I wouldn't mind another RC :).\n", "created_at": "2013-03-08 18:00:55", "user": 80070, "id": 14633943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14664468", "text": "@exviva merged and backported. Lets wait for @tenderlove to check about 3.2.13 now. Thanks!\n", "created_at": "2013-03-09 15:07:03", "user": 26328, "id": 14664468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14664892", "text": "@carlosantoniodasilva thanks! So you backported to 3-2-stable? Let's see if @tenderlove would care to backport to 3-2-13.\n", "created_at": "2013-03-09 15:32:50", "user": 80070, "id": 14664892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14666028", "text": "@exviva yup, I did in a0c3c1e1f796c215685e4e4bcd3e8c9178936492 :)\n", "created_at": "2013-03-09 16:39:30", "user": 26328, "id": 14666028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14811553", "text": "@exviva the fix will be included in 3.2.13 as it's a regression, on top of current rc2. It's already in 3-2-13 branch. Thanks.\n", "created_at": "2013-03-12 23:00:43", "user": 26328, "id": 14811553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14826759", "text": "@carlosantoniodasilva thank you!\n", "created_at": "2013-03-13 06:33:50", "user": 80070, "id": 14826759}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We're doing some testing on our side, and noticed there are a number of commits in the 3-2-stable branch that are not in 3.2.13. Should those also be brought over?\n\nhttps://github.com/rails/rails/compare/v3.2.13.rc2...3-2-stable\n", "labels": [], "number": 9617, "updated_at": "2013-03-08 20:05:02", "user": 314, "closed_at": "2013-03-08 19:28:17", "id": 11818762, "title": "Should 3.2.13rc3 include the 3-2-stable commits?", "url": "https://api.github.com/repos/rails/rails/issues/9617", "created_at": "2013-03-08 19:21:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14639361", "text": "No, other than fixes for regressions.\n", "created_at": "2013-03-08 19:28:17", "user": 27786, "id": 14639361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14639537", "text": "@steveklabnik I'm confused. Isn't the point of 3.2.13.rcX to find regressions? Are those 3.2 stable commits not to be released with 3.2.13?\n", "created_at": "2013-03-08 19:31:24", "user": 314, "id": 14639537}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14642022", "text": "At the point 3.2.13.rc1 gets tagged, that is the release point for 3.2.13. \n\n3.2.13 will have bugs, just like any other release. We have never had a Rails release with zero issues. However, the point of a _release candidate_ is to say \"if there are no regressions in this release, we will release this code.\" Hence the 3-2-13 branch.\n\nNow: not all bugs are _regressions_. 3.2.12 has bugs, if 3.2.13 has that same bug, then it is not a regression: they both just have the same bugs. If 3.2.12 has some code that works properly, and it breaks under 3.2.13, then that's a regression, which is different.\n\nWhile the testing is going on for 3.2.13.rc1, other bugs get fixed. These get merged into 3-2-stable. But, unless they're fixing regressions in 3.2.13.rc1, they don't go in that release: they're slated for 3.2.14.\n\nDoes that clarify things?\n", "created_at": "2013-03-08 20:01:17", "user": 27786, "id": 14642022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14642308", "text": "Ahh. Thanks. That does make sense now.\n", "created_at": "2013-03-08 20:03:34", "user": 314, "id": 14642308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14642500", "text": ":)\n\nYou can see more explicitly an example of a fix that _is_ a regression with https://github.com/rails/rails/compare/v3.2.13.rc1...v3.2.13.rc2 , the one commit between rc1 and rc2.  \n", "created_at": "2013-03-08 20:05:02", "user": 27786, "id": 14642500}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The use of quotations is required to install extensions with certain\nnonstandard characters in them (e.g. uuid-ossp). \n", "labels": ["activerecord"], "number": 9618, "updated_at": "2014-06-17 11:09:35", "user": 301424, "closed_at": "2013-03-09 21:42:08", "id": 11824465, "title": "Bugfix for enable_extension in postgresql_adapter", "url": "https://api.github.com/repos/rails/rails/issues/9618", "created_at": "2013-03-08 20:50:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14645447", "text": "This change doesn't need a CHANGELOG entry, could you remove?\n\nAlso would be good to have a test case\n", "created_at": "2013-03-08 21:05:12", "user": 47848, "id": 14645447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14646299", "text": "Would I put that in /test/cases/adapter_test.rb? Seems like the right place, but I wasn't sure if there's already a test for enable_extension somewhere else. Sorry, I'm new to this.\n", "created_at": "2013-03-08 21:24:42", "user": 301424, "id": 14646299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14646953", "text": "We don't have any test of this. I'm thinking since this will change the global state of the database is better to not add a test.\n\nJust need to remove the CHANGELOG entry\n", "created_at": "2013-03-08 21:39:11", "user": 47848, "id": 14646953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14653867", "text": "Done.\n", "created_at": "2013-03-09 00:24:19", "user": 301424, "id": 14653867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14654359", "text": "Please squash your commits \n", "created_at": "2013-03-09 00:43:26", "user": 47848, "id": 14654359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14666102", "text": "Squashed.\n", "created_at": "2013-03-09 16:43:15", "user": 301424, "id": 14666102}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you generate a dirt-simple rails 3.0.20 app with a scaffolded model under ruby-2.0.0, you get \"no implicit conversion of nil into String\" errors when including **stylesheet_link_tag** and **javascript_include_tag** in a view.\n\nI've created a repo that demonstrates the error [here](https://github.com/djcp/rails3.0-ruby2.0.0). To reproduce, clone this repo, bundle, and run the tests - they will fail against master.\n\nThen switch to the \"djcp-working-but-not-really\" branch (which just removes the aforementioned tags from the layout) and run tests - they will work.\n\nYou can replicate this without this repo by installing ruby-2.0.0, rails 3.0.20 and generating an app with a scaffolded model, thusly: \n\n``` bash\nrails new foobar \ncd foobar\nrails generate scaffold Ant mandibles:boolean queen:boolean name:string\nrake db:migrate\nrake\n```\n", "labels": [], "number": 9619, "updated_at": "2015-06-17 02:20:19", "user": 3966, "closed_at": "2013-03-08 21:25:14", "id": 11825428, "title": "\"no implicit conversion of nil into String\" errors in rails 3.0.20 under ruby 2.0.0", "url": "https://api.github.com/repos/rails/rails/issues/9619", "created_at": "2013-03-08 21:15:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14646322", "text": "Sorry but 3.0.x is not supported anymore. See http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/\n", "created_at": "2013-03-08 21:25:14", "user": 47848, "id": 14646322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667781", "text": "Thanks. I help manage [paperclip](http://github.com/thoughtbot/paperclip) so I guess we'll have to discuss how to proceed, as our cucumber specs are busted under 3.0 because of this bug.\n", "created_at": "2013-03-09 18:18:13", "user": 3966, "id": 14667781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16163521", "text": "I can confirm this bug is real. The issue is in actionpack, asset_tag_helper.rb#749 where #start_with? chokes on `controller.config.relative_url_root` being `nil`. One quick workaround that might work for your cucumber tests @djcp is to simply set the relative_url_root to \"\", like so:\n\n```\nclass HomeController < ApplicationController\n  config.relative_url_root = \"\"\nend\n```\n\nThat \"fixes\" it for me.\n", "created_at": "2013-04-10 09:19:50", "user": 18515, "id": 16163521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17205962", "text": "Here carrierwave is also depending on this bug: https://github.com/rails/rails/issues/9619\n\nIn my case i'm getting it with rails 3.2.13.\n\nThanks!\n", "created_at": "2013-04-30 02:03:25", "user": 88265, "id": 17205962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24067227", "text": "Thanks @dvdplm. That was useful. I can also see that your workaround was useful for paperclip cucumber tests:\nhttps://github.com/thoughtbot/paperclip/commit/58e3a979c5863125260ba5ea5a6c57b77c9201f7\n", "created_at": "2013-09-09 11:58:03", "user": 191521, "id": 24067227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/46593184", "text": "Worked for me too - thanks @dvdplm \n", "created_at": "2014-06-19 17:46:32", "user": 220358, "id": 46593184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/53191049", "text": "Thanks @dvdplm this was really helpful! Doing some legacy maintenance and stumbled on this issue.\n", "created_at": "2014-08-24 12:32:19", "user": 63895, "id": 53191049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/110092512", "text": "Thanks this helped me with some old code too.\n", "created_at": "2015-06-08 17:58:49", "user": 25774, "id": 110092512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/112624766", "text": ":+1: :+1: :+1: to @dvdplm\n", "created_at": "2015-06-17 02:20:19", "user": 30214, "id": 112624766}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "We have several select boxes with relatively long lists and want a small set of options to be placed at the top as they are used most often. And/or where we want to emphasise a certain option by always placing it at the top. Think of lists showing time zones, countries, languages, etc.\n\nCurrently `time_zone_select` does something similar. This patch generalizes that case.\n\nIt accepts a `priority` option for `form.select`, `options_for_select` and `options_from_collection_for_select`. When specified the given values will be placed at the top of select options, followed by all the options separated by a line.\n\nFor example, the country_select plugin/gem then becomes a simple one-liner:\n\n```\n  f.select :country, COUNTRIES, :priority => [\"United States\", \"Canada\"]\n```\n\nThe method `time_zone_options_for_select` delegates to `options_from_collection_for_select`. The time zone method would not show the priority zones below the fold. This patch will show the priorities at top, but also in their usual place below the fold. Especially in long lists users get confused when they are for example looking for the country \"United States\" at the bottom of the list, but then can't find it because it's shown as a priority country at the top. If a priority option is selected the option below the fold is not selected.\n", "labels": ["actionview"], "number": 9620, "updated_at": "2014-08-18 02:05:16", "user": 115, "closed_at": "None", "id": 11834479, "title": "Priority options for form.select, options_for_select and options_from_collection_for_select", "url": "https://api.github.com/repos/rails/rails/issues/9620", "created_at": "2013-03-09 04:16:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14663399", "text": "As @pixeltrix, I like the overall idea of having the `priority` option in other select helpers. Made some comments to the code, thanks @lawrencepit.\n", "created_at": "2013-03-09 14:00:09", "user": 26328, "id": 14663399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14675719", "text": "Processed most of the feedback, it now accepts a `priority_separator` option, and added yet another option called `priority_unique`, which is used by `time_zone_options_for_select`. \n\nConverted all hashes in the test file to use 1.9 hash style (where possible) to keep them all consistent.\n\nA separate issue will be opened to suggest `time_zone_options_for_select` should use `priority_unique: false`.\n", "created_at": "2013-03-10 03:44:20", "user": 115, "id": 14675719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684953", "text": "@lawrencepit i'm still seeing all of the comments and the old code that was previously mentioned (1.9 hash syntax, etc.), and I don't see where you pushed new code to this PR. To update this pull request you need to `git push` to your branch on github which will update this PR. \n\nI see that your other PR #9640 also has many of these features. Did you intend for this PR to be closed in favor of #9640? I recommend not moving over to another PR since there are already comments and a history on this one. @pixeltrix @carlosantoniodasilva #9640 adds a few different options including `priority_unique` and `priority_seperator` would you like to evaluate those options and code seperatly in another PR, or in this same PR.\n", "created_at": "2013-03-10 17:22:21", "user": 59744, "id": 14684953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14689804", "text": "@schneems I've just committed the changes to this branch, see commit [75d3bc7](https://github.com/lawrencepit/rails/commit/75d3bc79506695623e66220f5402f2c96aa8fcad)\n\n> Did you intend for this PR to be closed in favor of #9640? \n\nNo. The implementation of #9640 depends on the acceptance of this PR though.\n", "created_at": "2013-03-10 21:32:20", "user": 115, "id": 14689804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15099258", "text": "+1\n", "created_at": "2013-03-19 06:21:09", "user": 126882, "id": 15099258}], "assignees": [6321, 6321], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "During insertion of \"# This migration comes from ... \" comment at the beginning of\na migration, presence of magic comment was not considered.\n", "labels": ["activerecord"], "number": 9621, "updated_at": "2014-06-26 19:52:48", "user": 10973, "closed_at": "2013-03-09 16:23:23", "id": 11835513, "title": "Preserve magic comments and content encoding of copied migrations.", "url": "https://api.github.com/repos/rails/rails/issues/9621", "created_at": "2013-03-09 06:44:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14665763", "text": "Thank you!\n", "created_at": "2013-03-09 16:23:27", "user": 199, "id": 14665763}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add helper methods to convert flat or nested hashes into a sequence of hidden input fields to be submitted with the form.  Example:\n\n``` ruby\nhidden_field_tags_from_nested_hash({ :a => { :b => ['c', 'd']}, 'e' => 5 }, :id => nil)\n```\n\nOutput:\n\n``` html\n<input name=\"a[b][]\" type=\"hidden\" value=\"c\" />\n<input name=\"a[b][]\" type=\"hidden\" value=\"d\" />\n<input name=\"e\" type=\"hidden\" value=\"5\" />\n```\n\nOriginally based on http://marklunds.com/articles/one/314.\n\nI think this also can be used to fix #2158.\n", "labels": ["actionview"], "number": 9622, "updated_at": "2014-06-13 06:50:24", "user": 712698, "closed_at": "2013-03-24 15:15:32", "id": 11837463, "title": "New Action View helpers: hidden field tags from a flat or nested hash", "url": "https://api.github.com/repos/rails/rails/issues/9622", "created_at": "2013-03-09 11:21:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14661606", "text": "This also needs a CHANGELOG entry and I think you could add an example how to use the method to the RDoc.\n\nThis looks like a very specific use-case to me. @rafaelfranca @carlosantoniodasilva what do you think?\n", "created_at": "2013-03-09 11:26:33", "user": 5402, "id": 14661606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14662510", "text": "Added a CHANGELOG entry and examples for RDoc.\n", "created_at": "2013-03-09 12:48:18", "user": 712698, "id": 14662510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15288426", "text": "By the way, maybe this helper can be used to add a new option `:hidden_data` to `form_for` and `form_tag` helpers.\n", "created_at": "2013-03-22 09:48:53", "user": 712698, "id": 15288426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15352768", "text": "Ok, maybe i should just make a gem for now.  This can be closed if there is no enough interest.\n", "created_at": "2013-03-24 07:38:18", "user": 712698, "id": 15352768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15360520", "text": "I think providing this as a gem is a good idea. It wil help you to develop the use-cases where it is helpful.\n\nThanks for your work. I'm closing this one for now but if you have frequent users of the gem please post to the [rails core mailing list](http://groups.google.com/group/rubyonrails-core) to suggest it's inclusion.\n", "created_at": "2013-03-24 15:15:32", "user": 5402, "id": 15360520}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9623, "updated_at": "2014-06-26 19:52:51", "user": 827224, "closed_at": "2013-03-09 13:45:07", "id": 11838650, "title": "Remove extra whitespace and fix a comment", "url": "https://api.github.com/repos/rails/rails/issues/9623", "created_at": "2013-03-09 13:33:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14663199", "text": "Thanks.\n", "created_at": "2013-03-09 13:45:10", "user": 26328, "id": 14663199}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've added open an app in a default web browser option after runned server.\nWhat do you think?\n", "labels": [], "number": 9624, "updated_at": "2014-07-04 15:47:43", "user": 3434496, "closed_at": "2013-03-09 17:41:23", "id": 11840273, "title": "Advanced cli server command option", "url": "https://api.github.com/repos/rails/rails/issues/9624", "created_at": "2013-03-09 16:12:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14666019", "text": "I'd rather not have Rails depend on another gem - `launchy`, for that.\n", "created_at": "2013-03-09 16:38:54", "user": 26328, "id": 14666019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667108", "text": "We discussed this feature in #9396, and came to the conclusion that it's just not useful enough. Thanks!\n", "created_at": "2013-03-09 17:41:23", "user": 27786, "id": 14667108}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I want to define my application routes under `assets.prefix`.\n- `config/application.rb`\n\n``` ruby\nmodule Demo\n  class Application < Rails::Application\n    config.assets.prefix = '/demo'\n  end\nend\n```\n- `config/routes.rb`\n\n``` ruby\nDemo::Application.routes.draw do\n  scope '/demo' do\n    resource :users\n  end\nend \n```\n\nIn this case, `$ rake routes` couldn't show routes I defined.\nSo I modified condition for internal routes.\n\nIf this PR is acceptable, I'll add test case.\n", "labels": ["actionpack"], "number": 9625, "updated_at": "2014-06-26 16:16:17", "user": 290782, "closed_at": "2013-12-19 11:52:22", "id": 11840295, "title": "Show routes defined under assets prefix", "url": "https://api.github.com/repos/rails/rails/issues/9625", "created_at": "2013-03-09 16:14:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674769", "text": "I've added test case and force pushed.\n", "created_at": "2013-03-10 02:08:14", "user": 290782, "id": 14674769}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29753306", "text": "@tricknotes would you mind rebasing that one? Thanks.\n", "created_at": "2013-12-03 21:28:52", "user": 26328, "id": 29753306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29808542", "text": "@carlosantoniodasilva \nI've just rebased.\nCould you review my new commit?\n", "created_at": "2013-12-04 14:28:34", "user": 290782, "id": 29808542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30923413", "text": "Merged and backported, thank you.\n", "created_at": "2013-12-19 11:56:45", "user": 26328, "id": 30923413}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request decouples Parameters from the actual logging, instead using a LogSubscriber for that. Since ActiveSupport::Notifications is used, it is trivial to add other subscribers if needed. I'd like to add a Statsd subscriber in one of my own apps in order to monitor the frequency of unpermitted param injection attempts, but many other uses seem possible.\n\nIt would be nice to include the controller and action in the event payload, but that would require a larger change. If you guys deem it desirable I would be happy to do it.\n", "labels": [], "number": 9626, "updated_at": "2014-06-26 16:16:19", "user": 6351, "closed_at": "2013-03-09 20:35:24", "id": 11840744, "title": "Use AS::Notifications to instrument Strong Params", "url": "https://api.github.com/repos/rails/rails/issues/9626", "created_at": "2013-03-09 16:45:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14666863", "text": "I like this change. Could you include a CHANGELOG entry and a test-case?\n", "created_at": "2013-03-09 17:26:59", "user": 5402, "id": 14666863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670110", "text": "Merged. I don't think we need a CHANGELOG entry here, it is a small change. We should keep the most important changes in the CHANGELOG, people can always check the commits for more info. :)\n", "created_at": "2013-03-09 20:36:22", "user": 9582, "id": 14670110}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "encourage better practices on http://edgeapi.rubyonrails.org/classes/ActionController/Live.html\n", "labels": [], "number": 9627, "updated_at": "2014-06-26 19:52:56", "user": 4815, "closed_at": "2013-03-09 17:22:46", "id": 11841096, "title": "ensure response.stream is closed", "url": "https://api.github.com/repos/rails/rails/issues/9627", "created_at": "2013-03-09 17:11:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14666803", "text": "Thanks @rubys :smile:\n", "created_at": "2013-03-09 17:22:58", "user": 26328, "id": 14666803}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It surprises me, but it seems UYT, and it's DST variant (UYST) are missing.\n\nUYT is GMT-3. There are other time zones with GMT-3, but they differ according to their DST's:\n- **Brasilia (BRT)** is outside DST from 17th Feb 2013 - 20th Oct 2013\n- **Buenos Aires (ART)** has no DST (respect! :))\n- **Greenland (WGT)** is outside DST from 26. Oct 2013 - 30th Mar 2013\n- **Uruguay (UYU)** is outside DST: 10th Mar 2013 - 6th Oct 2013\n\nIn order to allow for correct time zone handling, Uruguay should be included in the list of zones.\n\nDetails regarding the time zone:\nhttp://www.timeanddate.com/worldclock/city.html?n=163\n", "labels": ["activesupport"], "number": 9628, "updated_at": "2013-03-10 04:44:07", "user": 1078037, "closed_at": "2013-03-09 22:15:31", "id": 11841291, "title": "Uruguayan/Montevideo time zone (UYT/UYST) is missing in Rails", "url": "https://api.github.com/repos/rails/rails/issues/9628", "created_at": "2013-03-09 17:26:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667195", "text": "It is there under 'America/Montevideo', which is the preferred method of specifying timezones as required by [ISO8601](http://en.wikipedia.org/wiki/Time_zone#Abbreviations), e.g:\n\n``` irb\n>> Time.zone = 'America/Montevideo'\n=> \"America/Montevideo\"\n>> Time.current\n=> Sat, 09 Mar 2013 15:34:01 UYST -02:00\n```\n\n`ActiveSupport::TimeZone` has [a list of aliases](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/values/time_zone.rb#L36-L179) that is used to populate the timezone select helper amongst other things and I think we should probably add an alias there for `'Montevideo' => 'America/Montevideo'` since Rails is so popular in Uruguay. :smile:\n\nDo you want to make a PR or should I go ahead and make the change?\n", "created_at": "2013-03-09 17:46:26", "user": 6321, "id": 14667195}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671827", "text": "It sure is :)\n\nWhen I looked for the supported zones I queried the class with the aliases (via `ActiveSupport::TimeZone.all`).\n\nHow would I have gotten to an actually complete list?\n", "created_at": "2013-03-09 22:14:41", "user": 1078037, "id": 14671827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674476", "text": "@GSI in the console you could do this:\n\n``` irb\n>> TZInfo::Timezone.all.each{ |tz| puts tz.name }; nil\n```\n\nwhich prints out approximately 580 names\n", "created_at": "2013-03-10 01:39:27", "user": 6321, "id": 14674476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674598", "text": "ZOMG :heart: :heart: :heart:\n\n![Uruguay](http://urusport.com/images/uruguay%20futbol%20festejando.jpg)\n", "created_at": "2013-03-10 01:49:28", "user": 52642, "id": 14674598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14676306", "text": "Thanks for the hint (@pixeltrix) and the picture (@spastorino) :laughing: \n", "created_at": "2013-03-10 04:44:07", "user": 1078037, "id": 14676306}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The comments before skipped the number 8. Fixing that so the boot process is numbered correctly in the comments.\n", "labels": [], "number": 9629, "updated_at": "2014-06-13 09:59:08", "user": 1075780, "closed_at": "2013-03-09 17:43:43", "id": 11841499, "title": "Renumbering the comments in the application boot process.", "url": "https://api.github.com/repos/rails/rails/issues/9629", "created_at": "2013-03-09 17:43:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667157", "text": "Thanks! In the future, you can use docrails for these kinds of changes, don't forget!\n", "created_at": "2013-03-09 17:43:55", "user": 27786, "id": 14667157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667216", "text": "Ah, wasn't aware of docrails. Thanks for the heads up, I'll use that in the future.\n", "created_at": "2013-03-09 17:47:47", "user": 1075780, "id": 14667216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667240", "text": "Any time! It's not required, you just don't have to wait for me to merge. :)\n", "created_at": "2013-03-09 17:49:15", "user": 27786, "id": 14667240}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "collection<< does not automatically fire update sql unless the parent object\nis not a new record (and thus has a primary key).\n\neg:\n\n``` ruby\np = Post.new\np.comments << Comment.new\n```\n\ndoes not call update sql until:\n\n``` ruby\np.save\n```\n\nat which point it saves the parent object and then the collection object.\n", "labels": [], "number": 9630, "updated_at": "2014-06-26 15:54:50", "user": 25222, "closed_at": "2013-03-09 18:46:13", "id": 11841526, "title": "Update documentation for collection<< to reflect behavior for new parent objects.", "url": "https://api.github.com/repos/rails/rails/issues/9630", "created_at": "2013-03-09 17:45:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667218", "text": "If you do the change, make sure to squash your commits. Thanks.\n", "created_at": "2013-03-09 17:47:53", "user": 26328, "id": 14667218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667251", "text": "@carlosantoniodasilva  Sorry, I guess I'm confused what you mean by squash then.\n", "created_at": "2013-03-09 17:49:46", "user": 25222, "id": 14667251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667264", "text": "Make them all one commit: http://blog.steveklabnik.com/posts/2012-11-08-how-to-squash-commits-in-a-github-pull-request\n", "created_at": "2013-03-09 17:50:33", "user": 27786, "id": 14667264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667276", "text": "It means that if you add a second commit changing anything, you should squash them to be only one. Or just amend the current commit with the change. We usually ask people to squash the commits so that it's only 1 full change, easier to track later.\n", "created_at": "2013-03-09 17:51:27", "user": 26328, "id": 14667276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667291", "text": "@steveklabnik @carlosantoniodasilva  oh, that's what I already thought it meant. It is one commit, so I was confused why you mentioned it but I see. Thanks for the heads up.\n", "created_at": "2013-03-09 17:52:12", "user": 25222, "id": 14667291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667798", "text": "@carlosantoniodasilva updated!\n\n@steveklabnik, thanks I'd never actually done that and your post was useful. It took me a minute to figure out that I needed to also specify the number of commits from HEAD I was squashing with HEAD~2, which I picked up from @qrush here http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n", "created_at": "2013-03-09 18:19:20", "user": 25222, "id": 14667798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14668278", "text": "Great, thanks!\n", "created_at": "2013-03-09 18:46:19", "user": 26328, "id": 14668278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14668578", "text": "@carlosantoniodasilva nice thanks! Shout @aviflombaum - we stumbled on this during a skillshare lecture at @flatironschool today. :heart: \n", "created_at": "2013-03-09 19:05:41", "user": 25222, "id": 14668578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14668705", "text": "Nice!\n\nIt's also worth to know that documentation patches can be sent straight to [lifo/docrails](https://github.com/lifo/docrails), it's an open branch of Rails specific for documentation purposes, so anyone can commit doc updates at anytime. From time to time it gets cross-merged with the main Rails repo, after some review/copy-edit.\n\nSo if you guys find anything else, please feel free to send a commit there fixing it (of course there's no problem sending in here too if you want it to get reviewed sooner ;).\n", "created_at": "2013-03-09 19:14:15", "user": 26328, "id": 14668705}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9631, "updated_at": "2014-07-04 15:47:39", "user": 827224, "closed_at": "2013-03-09 18:04:48", "id": 11841644, "title": "Directly pass the confirm hash", "url": "https://api.github.com/repos/rails/rails/issues/9631", "created_at": "2013-03-09 17:55:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667473", "text": "In fb8a830a329b78a5 we did the exact opposite.\n", "created_at": "2013-03-09 18:01:54", "user": 27786, "id": 14667473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667532", "text": "hm missed that\n", "created_at": "2013-03-09 18:04:48", "user": 827224, "id": 14667532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667533", "text": "Thanks, but this form is deprecated in favor of the `data` hash.\n", "created_at": "2013-03-09 18:04:48", "user": 26328, "id": 14667533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14667537", "text": "@steveklabnik :smile:\n", "created_at": "2013-03-09 18:04:57", "user": 26328, "id": 14667537}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I used to write \"Fix XXX\" in Changelog entries but I think we settled on \"Fixes XXX.\". I updated the changelogs to have consistent format.\n", "labels": [], "number": 9632, "updated_at": "2014-06-26 19:53:04", "user": 5402, "closed_at": "2013-03-09 19:58:30", "id": 11843062, "title": "use Fixes in place of Fix", "url": "https://api.github.com/repos/rails/rails/issues/9632", "created_at": "2013-03-09 19:44:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14669416", "text": "Can you change the commit message to something like:\n\n```\nUse \"Fixes\" in place of \"Fix\" in changelogs for consistency [ci skip].\n```\n", "created_at": "2013-03-09 19:56:10", "user": 26328, "id": 14669416}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a follow up to #5321 and follows the general direction in AR to make things lazy evaluated.\n\nOpen points:\n- Do we need a deprecation for the old syntax?\n- Do we need to support the old syntax?\n", "labels": ["activerecord"], "number": 9633, "updated_at": "2014-06-19 00:33:36", "user": 5402, "closed_at": "2013-03-09 22:11:22", "id": 11843972, "title": "Uniqueness validation uses a proc to specify the `:conditions` option.", "url": "https://api.github.com/repos/rails/rails/issues/9633", "created_at": "2013-03-09 20:52:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670432", "text": "@carlosantoniodasilva as discussed.\n", "created_at": "2013-03-09 20:52:16", "user": 5402, "id": 14670432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670578", "text": ":+1:\n\nA deprecation would be nice, since it seems easy to support both formats.\n", "created_at": "2013-03-09 21:00:42", "user": 9582, "id": 14670578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670600", "text": "thanks @josevalim, I'll update to support both formats and issue a deprecation on the old style.\n", "created_at": "2013-03-09 21:02:17", "user": 5402, "id": 14670600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671000", "text": "I added a deprecation warning for the old syntax but it is still supported.\n\n/cc @josevalim @carlosantoniodasilva \n", "created_at": "2013-03-09 21:24:09", "user": 5402, "id": 14671000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671076", "text": "@josevalim This feature was added to rails master only, so I think there's no need to deprecate. Sorry to make you undo the work @senny :)\n", "created_at": "2013-03-09 21:28:55", "user": 26328, "id": 14671076}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is there any reason, why RDoc 4.x should not be used? Can the dependency in Railties be relaxed? Thank you.\n", "labels": [], "number": 9634, "updated_at": "2014-01-24 17:00:11", "user": 14406, "closed_at": "2013-03-09 21:13:27", "id": 11844208, "title": "Is RDoc 4.x supported in Rails 3.2?", "url": "https://api.github.com/repos/rails/rails/issues/9634", "created_at": "2013-03-09 21:08:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670782", "text": "Rails 3 only gets bug and security fixes, RDoc 3 is fine for Rails 3 thanks.\n", "created_at": "2013-03-09 21:13:23", "user": 3387, "id": 14670782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14670855", "text": "That is sad :/ You give me no other chance then patch this dependency in Fedora. This doesn't help Fedora, nor Rails nor anybody else :(\n", "created_at": "2013-03-09 21:17:34", "user": 14406, "id": 14670855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671087", "text": "A tiny release 3.2.x is not going to gratuitously upgrade RDoc in the machines of all users.\n", "created_at": "2013-03-09 21:29:44", "user": 3387, "id": 14671087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671225", "text": "I am not asking you to force RDoc 4.x, I am asking you to relax the dependency, if possible, i.e. instead of ~> 3.4 use >= 3.4. Ruby 2.0 comes with RDoc 4.x, why do you want to force everybody to install older RDoc? On Fedora, we even cannot install older version using YUM/RPM and I believe that Fedora is not exception in this.\n", "created_at": "2013-03-09 21:37:04", "user": 14406, "id": 14671225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671268", "text": "This is the patch I am going to use in Fedora 19, which goes with Ruby 2.0.0:\n\nhttp://pkgs.fedoraproject.org/cgit/rubygem-railties.git/tree/rubygem-railties-3.2.12-relax-rdoc-dependency.patch\n", "created_at": "2013-03-09 21:39:51", "user": 14406, "id": 14671268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14710960", "text": "BTW if you consider support of Ruby 2.0 and you are doing bugfixes due to it, I see no difference to support RDoc 4.x\n", "created_at": "2013-03-11 12:37:59", "user": 14406, "id": 14710960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14711829", "text": "Yeah, if we need to relax the constraint due to support for Ruby 2.0 then we would do it.\n", "created_at": "2013-03-11 13:00:29", "user": 3387, "id": 14711829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14741297", "text": "But why are you going to support Ruby 2.0 without supporting RDoc 4.x? If you can support Ruby 2.0, you can support RDoc 4.x, can't you? What can I do to convince you? Would PR make some difference?\n", "created_at": "2013-03-11 20:41:19", "user": 14406, "id": 14741297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14746977", "text": "By now not even Rails 4 is going to depend on RDoc 4, we depend on RDoc 3 via SDoc as of this writing.\n", "created_at": "2013-03-11 22:26:03", "user": 3387, "id": 14746977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14749207", "text": "It is interesting. You made me search for 'rdoc' in Rails and I really can't see any place why it should be runtime dependecy of railties. There is no single file what so ever which could be essential to run Rails but you still enforce the dependency and you are even picky about its version.\n", "created_at": "2013-03-11 23:16:11", "user": 14406, "id": 14749207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15108561", "text": "Interestingly enough, mail dependency can be bumped in 3.2.13. I see not other reason to update then that new mail version is available a497f84bb283b66b83c21780db8734dbe6a8f1a4. Moreover, mail 2.4.x is apparently still maintained. Please update the RDoc. Thank you.\n", "created_at": "2013-03-19 11:09:57", "user": 14406, "id": 15108561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15109244", "text": "As already said, we'll do it if the project needs it.\n\nIn Ruby different gem versions coexist just fine thanks to RubyGems, and each lib requires whatever. If you are dealing with a more restrictive environment than Ruby itself, then go patch whatever you need to patch.\n", "created_at": "2013-03-19 11:29:00", "user": 3387, "id": 15109244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15110020", "text": "So I am not part of the project? Neither Fedora, Red Hat, CentOS users are part of the project? Interesting. Thank you.\n", "created_at": "2013-03-19 11:51:00", "user": 14406, "id": 15110020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15119909", "text": "You are part of the project, and I'd like to do my best to make your life easy. But SDoc as of this writing does not support RDoc 4.\n", "created_at": "2013-03-19 15:07:22", "user": 3387, "id": 15119909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15338113", "text": "There is some work going on to support RDoc 4 in SDoc (see: voloko/sdoc#43).\n\n@fxn could an sdoc release with rdoc 4 support make it into rails 4?\n", "created_at": "2013-03-23 14:42:10", "user": 277819, "id": 15338113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15339626", "text": "@zzak that would be great.\n", "created_at": "2013-03-23 16:16:59", "user": 3387, "id": 15339626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26282169", "text": "Hi folks, we're running into a problem with railties' RDoc version requirement.\n\nNMatrix issue 149: https://github.com/SciRuby/nmatrix/issues/149\n\nNMatrix needs RDoc >= 4.0.1, because NMatrix is a mixture of C and C++, and earlier RDoc versions choke on the C++ version of its `init_nmatrix` entry point.\n\nAny thoughts on how we can make the two gems work together? Let me know if I should open a new issue.\n\nCheers,\nJohn Woods\nSciRuby Project\n", "created_at": "2013-10-14 19:32:43", "user": 165284, "id": 26282169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33177001", "text": "@mohawkjohn @voxik Just a heads up, this will be fixed with the release of Rails 4.1!\n", "created_at": "2014-01-23 22:34:30", "user": 277819, "id": 33177001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33178840", "text": "Hi there! Let me also add that in Rails 4.0 the gem dependency was removed and SDoc became a dependency in the generated Gemfile for new apps.\n", "created_at": "2014-01-23 22:55:36", "user": 3387, "id": 33178840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33207171", "text": "@zzak @fxn Thank you. That is good news!\n", "created_at": "2014-01-24 09:06:17", "user": 14406, "id": 33207171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33240502", "text": "Wonderful, @zzak! Thank you so much.\n", "created_at": "2014-01-24 17:00:11", "user": 165284, "id": 33240502}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "![One does not simple \\ User.each](http://cdn.memegenerator.net/instances/400x/35938608.jpg)\n\nSo, the main idea is: do we really need to write `User.all.each` instead of `User.each`? It would be very helpful for me, but what about the others?\n", "labels": ["activerecord"], "number": 9635, "updated_at": "2014-07-02 18:16:22", "user": 175508, "closed_at": "2013-05-03 16:42:22", "id": 11844390, "title": "Delegate each to all", "url": "https://api.github.com/repos/rails/rails/issues/9635", "created_at": "2013-03-09 21:22:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671004", "text": "I think it may bring some sort of confusion with `User.find_each`, which loads records in batches. `User.all.each` is very clear on that it loads everything. Just my 2 cents, lets gather some more feedback here.\n", "created_at": "2013-03-09 21:24:32", "user": 26328, "id": 14671004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671720", "text": "@carlosantoniodasilva `find_each` and `find_in_batches` both are separate family of scopes, this `each` has nothing relative with them. \n\nI tried to make something like `where` or `limit`: we don't actually need to use it like `Model.all.where().each`, we just use `Model.where().each`, `Model.limit().each`, and `Model.any_scope.each`. But when we remove those `.where()`, `.limit()` or `any_scope` invocations, we do need add `all` scope. I think it's weird a bit.\n\nSo, like this:\n\n```\nModel.published.limit(5).each {}\nModel.each {}\n```\n\nAnd surely I'd like to hear more feedback, maybe this change is useful only for me. This reminds me this commit by @dhh https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389\n", "created_at": "2013-03-09 22:07:14", "user": 175508, "id": 14671720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671818", "text": "> this each has nothing relative with them.\n\nI get that ;), I'm just saying it _may_ bring some confusion, and that's a point we need to consider. But I'm not completely against adding it.\n", "created_at": "2013-03-09 22:14:00", "user": 26328, "id": 14671818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14686800", "text": "Just to weight in my 2cent, I think this is a good idea.\n", "created_at": "2013-03-10 18:57:20", "user": 135605, "id": 14686800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14689528", "text": "In case it goes in, it'll need a changelog entry and tests :).\n", "created_at": "2013-03-10 21:19:04", "user": 26328, "id": 14689528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14690804", "text": "@carlosantoniodasilva sure, it was just like a demo, if people like it. If so, I'll add both tests and changelog.\n", "created_at": "2013-03-10 22:25:53", "user": 175508, "id": 14690804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14753173", "text": "@carlosantoniodasilva added the changelog entry and tests. \n", "created_at": "2013-03-12 01:10:07", "user": 175508, "id": 14753173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14756701", "text": "I think `User.all.each` is better than `User.each`\n\n`User` is not an enumerable object\n", "created_at": "2013-03-12 03:28:55", "user": 108843, "id": 14756701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17384055", "text": "Ping. Rebase required. \n", "created_at": "2013-05-03 08:44:54", "user": 3948, "id": 17384055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17390263", "text": "I'm :-1: on this one. As @zires said `User` is not enumerable and this PR adds confusion at the cost of what I see very minimal benefit .\n", "created_at": "2013-05-03 11:44:37", "user": 6399, "id": 17390263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17390573", "text": ":-1: as well. We have find_each for such loops.\n\nOn May 3, 2013, at 13:45, Neeraj Singh notifications@github.com wrote:\n\n> I'm  on this one. As @zires said User is not enumerable and this PR adds confusion at the cost of what I see very minimal benefit .\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-05-03 11:54:24", "user": 2741, "id": 17390573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17404873", "text": "Yup.\n", "created_at": "2013-05-03 16:42:22", "user": 27786, "id": 17404873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17423591", "text": "Totally agree with you, I've revised my views on it.\n\n@steveklabnik @dhh what do you think about https://github.com/rails/rails/pull/9599, it's more useful feature I think\n", "created_at": "2013-05-03 23:29:45", "user": 175508, "id": 17423591}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reproduction instructions: http://intertwingly.net/tmp/liveStale.html\n\nRemove either `ActionController::Live` or the `stale?` check, and the test will work.\n", "labels": ["actionpack"], "number": 9636, "updated_at": "2013-03-14 22:51:21", "user": 4815, "closed_at": "2013-03-14 21:03:59", "id": 11844417, "title": "Live streams and stale checks don't mix", "url": "https://api.github.com/repos/rails/rails/issues/9636", "created_at": "2013-03-09 21:24:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14929085", "text": "Fixed by #9713\n", "created_at": "2013-03-14 21:03:59", "user": 47848, "id": 14929085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14934351", "text": "Verified :+1:\n", "created_at": "2013-03-14 22:51:21", "user": 4815, "id": 14934351}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "for Uruguay (UYT/UYST)\n", "labels": [], "number": 9637, "updated_at": "2014-06-26 19:53:15", "user": 1078037, "closed_at": "2013-03-09 22:15:30", "id": 11844922, "title": "Include Montevideo time zone in list of aliases (closes Issue #9628)", "url": "https://api.github.com/repos/rails/rails/issues/9637", "created_at": "2013-03-09 22:12:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14671839", "text": "Thank you.\n", "created_at": "2013-03-09 22:15:33", "user": 26328, "id": 14671839}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Copy this pattern from the capistrano gem.\n", "labels": [], "number": 9638, "updated_at": "2014-06-26 15:16:23", "user": 5866, "closed_at": "2013-03-10 02:19:26", "id": 11846898, "title": "Make sure that debugger isn't included in production environment.", "url": "https://api.github.com/repos/rails/rails/issues/9638", "created_at": "2013-03-10 01:37:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674817", "text": "Makes sense, but I think it'd be better to use `group: [:development, :test]`, since it might be useful to have it there as well.\n", "created_at": "2013-03-10 02:12:25", "user": 26328, "id": 14674817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674890", "text": "Fixed.\n", "created_at": "2013-03-10 02:18:09", "user": 5866, "id": 14674890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674930", "text": ":+1:\n", "created_at": "2013-03-10 02:21:29", "user": 27786, "id": 14674930}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Also update the documentation on the number of supported time zones.\n", "labels": ["activesupport"], "number": 9639, "updated_at": "2014-06-26 19:53:19", "user": 25666, "closed_at": "2013-04-12 15:49:49", "id": 11847272, "title": "Add Chatham Islands Time (UTC+1245) support.", "url": "https://api.github.com/repos/rails/rails/issues/9639", "created_at": "2013-03-10 02:11:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674838", "text": "http://en.wikipedia.org/wiki/Chatham_Islands#Chathams_Time\n", "created_at": "2013-03-10 02:14:06", "user": 25666, "id": 14674838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14674993", "text": "Chatham Islands should be behind Samoa, but on my local machine it's not showing that correctly.\n\n```\n$ TZ=Pacific/Apia date   \nSun Mar 10 15:25:32 WST 2013\n$ TZ=Pacific/Chatham date\nSun Mar 10 16:10:35 CHADT 2013\n```\n\nInvestigating (so that the list order can be maintained).\n", "created_at": "2013-03-10 02:26:08", "user": 25666, "id": 14674993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14675071", "text": "Looks like the tzinfo gem has it right:\n\n``` irb\n>> Time.zone = 'Pacific/Apia'\n>> Time.current\n=> Sun, 10 Mar 2013 16:30:55 WSDT +14:00\n>> Time.zone = 'Pacific/Chatham'\n>> Time.current\n=> Sun, 10 Mar 2013 16:16:48 CHADT +13:45\n```\n", "created_at": "2013-03-10 02:33:34", "user": 6321, "id": 14675071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14675131", "text": "@pixeltrix I think OS X has outdated tzinfo.\n\neggert/tz@22406c0da51fe64e84575047facddb0b833e390d\n", "created_at": "2013-03-10 02:39:20", "user": 25666, "id": 14675131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14675165", "text": "@BanzaiMan yes - using `zdump` gives you:\n\n```\n$ zdump -v Pacific/Apia\nPacific/Apia  Fri Dec 13 20:45:52 1901 UTC = Fri Dec 13 09:18:56 1901 LMT isdst=0\nPacific/Apia  Sat Dec 14 20:45:52 1901 UTC = Sat Dec 14 09:18:56 1901 LMT isdst=0\nPacific/Apia  Sun Jan  1 11:26:55 1911 UTC = Sat Dec 31 23:59:59 1910 LMT isdst=0\nPacific/Apia  Sun Jan  1 11:26:56 1911 UTC = Sat Dec 31 23:56:56 1910 SAMT isdst=0\nPacific/Apia  Sun Jan  1 11:29:59 1950 UTC = Sat Dec 31 23:59:59 1949 SAMT isdst=0\nPacific/Apia  Sun Jan  1 11:30:00 1950 UTC = Sun Jan  1 00:30:00 1950 WST isdst=0\nPacific/Apia  Sun Sep 26 10:59:59 2010 UTC = Sat Sep 25 23:59:59 2010 WST isdst=0\nPacific/Apia  Sun Sep 26 11:00:00 2010 UTC = Sun Sep 26 01:00:00 2010 WSDT isdst=1\nPacific/Apia  Sat Apr  2 13:59:59 2011 UTC = Sat Apr  2 03:59:59 2011 WSDT isdst=1\nPacific/Apia  Sat Apr  2 14:00:00 2011 UTC = Sat Apr  2 03:00:00 2011 WST isdst=0\nPacific/Apia  Sat Sep 24 13:59:59 2011 UTC = Sat Sep 24 02:59:59 2011 WST isdst=0\nPacific/Apia  Sat Sep 24 14:00:00 2011 UTC = Sat Sep 24 04:00:00 2011 WSDT isdst=1\nPacific/Apia  Fri Dec 30 09:59:59 2011 UTC = Thu Dec 29 23:59:59 2011 WSDT isdst=1\nPacific/Apia  Fri Dec 30 10:00:00 2011 UTC = Sat Dec 31 00:00:00 2011 WSDT isdst=1\nPacific/Apia  Sat Mar 31 13:59:59 2012 UTC = Sun Apr  1 03:59:59 2012 WSDT isdst=1\nPacific/Apia  Sat Mar 31 14:00:00 2012 UTC = Sun Apr  1 03:00:00 2012 WST isdst=0\nPacific/Apia  Mon Jan 18 03:14:07 2038 UTC = Mon Jan 18 16:14:07 2038 WST isdst=0\nPacific/Apia  Tue Jan 19 03:14:07 2038 UTC = Tue Jan 19 16:14:07 2038 WST isdst=0\n```\n\nDoesn't have the September 2012 transition to WSDT :cry:\n", "created_at": "2013-03-10 02:42:59", "user": 6321, "id": 14675165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684643", "text": "If desired, you can update tz database with `zic`: https://gist.github.com/BanzaiMan/5129358\n", "created_at": "2013-03-10 17:04:03", "user": 25666, "id": 14684643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14940145", "text": "@pixeltrix @BanzaiMan is this ready to merge?\n", "created_at": "2013-03-15 02:01:26", "user": 52642, "id": 14940145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16272965", "text": "@pixeltrix Is there anything else I can do?\n", "created_at": "2013-04-12 02:28:51", "user": 25666, "id": 16272965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16273592", "text": "@BanzaiMan can you squash the commits into one and I'll merge it - thanks!\n", "created_at": "2013-04-12 02:55:54", "user": 6321, "id": 16273592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16299467", "text": "@pixeltrix Squashed. Thanks!\n", "created_at": "2013-04-12 15:29:49", "user": 25666, "id": 16299467}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Continuation of Pull Request #9620\n\nThe following:\n\n```\n   f.time_zone_select :time_zone, [ ActiveSupport::TimeZone['Pacific Time (US & Canada)'] ]\n```\n\nwill not show time zone \"(GMT-08:00) Pacific Time (US & Canada)\" below the separator, it will only show at the top of the options list.\n\nWe regularly get tickets from our users who say they get confused when they can't find the time zone (or country or language or etc.) in the (long) list below the options separator where they would expect to find the value. \n\nThis usually happens when a user goes into edit mode and a non-priority option is selected (e.g. \"(GMT-07:00) Arizona\"), and they want to change it to a different selection. It's not obvious they then have to look at the top (as the top is often also out of sight). \n\nThis patch always shows all time zone options below the separator, even when they are listed as a priority time zone.\n\nSee also [discussion](https://github.com/rails/rails/pull/9620#discussion-diff-3307962)\n", "labels": ["actionview"], "number": 9640, "updated_at": "2015-04-09 20:06:44", "user": 115, "closed_at": "None", "id": 11848172, "title": "`time_zone_options_for_select` should show all time zones below the separator when priority time zones are specified.", "url": "https://api.github.com/repos/rails/rails/issues/9640", "created_at": "2013-03-10 04:13:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/91343135", "text": "Is this still on track for 5.0?\n", "created_at": "2015-04-09 20:06:44", "user": 115515, "id": 91343135}], "assignees": [6321, 6321], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "I've removed excess method call :) \n", "labels": [], "number": 9641, "updated_at": "2014-07-04 15:47:34", "user": 3434496, "closed_at": "2013-03-10 13:46:59", "id": 11848613, "title": "Small improvement code", "url": "https://api.github.com/repos/rails/rails/issues/9641", "created_at": "2013-03-10 05:17:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14681618", "text": "Thanks. I think other methods like `update`, `delete_all`, `destroy_all` all work the same way, re-calling itself depending on specific conditions, so it seems ok to leave it like this to keep the consistency.\n", "created_at": "2013-03-10 13:46:59", "user": 26328, "id": 14681618}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi folks,\n\nWhen I tried run `rails server` on dummy app from my engine, I received the message _couldn't find file 'jquery'_, and after I added _jquery-rails_ to Gemfile, I received _couldn't find file 'turbolinks'_, then I added _turbolinks_ too.\n\nNow it's OK.\n\nThis should be default, doesn't it?\n\nSorry for my bad writing.\n", "labels": [], "number": 9642, "updated_at": "2014-07-04 15:47:32", "user": 1478616, "closed_at": "2013-03-10 08:05:13", "id": 11849206, "title": "Missing gems on plugin Gemfile template", "url": "https://api.github.com/repos/rails/rails/issues/9642", "created_at": "2013-03-10 06:50:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14677502", "text": "This has been fixed in master already. Those are no longer dependencies of\na newly generated plugin. Thanks for the patch regardless!\n\n>    -\n\n## \n\n_José Valim_\nwww.plataformatec.com.br\nSkype: jv.ptec\nFounder and Lead Developer\n", "created_at": "2013-03-10 07:04:57", "user": 9582, "id": 14677502}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\nclass CreateAccess < ActiveRecord::Migration\n  def change\n    create_table :access_roles do |t|\n      t.string :name\n    end\n\n    create_table :access_rights do |t|\n      t.string :name\n    end\n\n    create_table :access_rights_access_roles do |t|\n      t.belongs_to :access_right\n      t.belongs_to :access_role\n    end\n  end\nend\n\n\nclass AccessRole < ActiveRecord::Base\nhas_and_belongs_to_many :access_rights\nend\n\nclass AccessRight < ActiveRecord::Base\nhas_and_belongs_to_many :access_roles\nend\n```\n\n```\n> rails console\nLoading development environment (Rails 4.0.0.beta1)\n2.0.0-p0 :001 > f = AccessRole.create(name: 'Fred')\n   (0.1ms)  begin transaction\n  SQL (0.3ms)  INSERT INTO \"access_roles\" (\"name\") VALUES (?)  [[\"name\", \"Fred\"]]\n   (2.8ms)  commit transaction\n => #<AccessRole id: 1, name: \"Fred\"> \n2.0.0-p0 :002 > w = AccessRight.create(name: 'Wilma')\n   (0.1ms)  begin transaction\n  SQL (0.3ms)  INSERT INTO \"access_rights\" (\"name\") VALUES (?)  [[\"name\", \"Wilma\"]]\n   (2.8ms)  commit transaction\n => #<AccessRight id: 1, name: \"Wilma\"> \n2.0.0-p0 :003 > f.access_rights < w\nActiveRecord::StatementInvalid: Could not find table 'access_rights_roles'    <== Should be 'access_rights_access_roles'\n```\n", "labels": ["activerecord"], "number": 9643, "updated_at": "2014-02-03 07:57:12", "user": 871535, "closed_at": "2013-03-10 16:30:16", "id": 11849273, "title": "Wrong table name generated for HABTM association", "url": "https://api.github.com/repos/rails/rails/issues/9643", "created_at": "2013-03-10 07:02:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14678413", "text": "you should use `\\``\\ to format your code (I edited your message). I'll take a look at the problem and report back,\n", "created_at": "2013-03-10 08:59:41", "user": 5402, "id": 14678413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14679406", "text": "It seems like this is the expected name to be generated. So I think it is a feature and not a bug ;)\n\nI saw the following test-case:\n\n``` ruby\n  def test_join_table_with_common_prefix\n    category = Struct.new(:table_name, :pluralize_table_names).new('catalog_categories', true)\n    product = Struct.new(:table_name, :pluralize_table_names).new('catalog_products', true)\n\n    reflection = AssociationReflection.new(:has_and_belongs_to_many, :categories, nil, {}, product)\n    reflection.stubs(:klass).returns(category)\n    assert_equal 'catalog_categories_products', reflection.join_table\n\n    reflection = AssociationReflection.new(:has_and_belongs_to_many, :products, nil, {}, category)\n    reflection.stubs(:klass).returns(product)\n    assert_equal 'catalog_categories_products', reflection.join_table\n  end\n```\n\nThe relevant commit is 4649294 which also shows a good overview how the table names are generated. Since your case was not present in the docs I added an example to make it clear: #9645\n", "created_at": "2013-03-10 10:53:47", "user": 5402, "id": 14679406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14682804", "text": "It's supposed to concatenate the two table names in alphabetical order, not modify one of them. \n\nIs this a change from 3.2.12? I distilled this example from production code that broke under Rails 4. \n\nJim\n\nOn Mar 10, 2013, at 3:54, Yves Senn notifications@github.com wrote:\n\n> It seems like this is the expected name to be generated. So I think it is a feature and not a bug ;)\n> \n> I saw the following test-case:\n> \n>   def test_join_table_with_common_prefix\n>     category = Struct.new(:table_name, :pluralize_table_names).new('catalog_categories', true)\n>     product = Struct.new(:table_name, :pluralize_table_names).new('catalog_products', true)\n> \n> ```\n> reflection = AssociationReflection.new(:has_and_belongs_to_many, :categories, nil, {}, product)\n> reflection.stubs(:klass).returns(category)\n> assert_equal 'catalog_categories_products', reflection.join_table\n> \n> reflection = AssociationReflection.new(:has_and_belongs_to_many, :products, nil, {}, category)\n> reflection.stubs(:klass).returns(product)\n> assert_equal 'catalog_categories_products', reflection.join_table\n> ```\n> \n>   end\n> The relevant commit is 4649294 which also shows a good overview how the table names are generated. Since your case was not present in the docs I added an example to make it clear: #9645\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-10 15:13:07", "user": 871535, "id": 14682804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14682844", "text": "@jim-12gigs I linked you the commit that describes very precisely what it is \"supposed\" to do:\n\n> Improve the derivation of HABTM join table name to take account of nesting.\n> It now takes the table names of the two models, sorts them lexically and\n> then joins them, stripping any common prefix from the second table name.\n\nYou can always use the `:join_table` option to set a custom name.\n", "created_at": "2013-03-10 15:16:15", "user": 5402, "id": 14682844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14682974", "text": "Sorry, was reading the emails in chron order. \n\nThis seems like a poor choice of a  default, as it breaks a lot of existing code.\n\nJim\n\nOn Mar 10, 2013, at 8:16, Yves Senn notifications@github.com wrote:\n\n> @jim-12gigs I linked you the commit that describes very precisely what it is \"supposed\" to do:\n> \n> Improve the derivation of HABTM join table name to take account of nesting.\n> It now takes the table names of the two models, sorts them lexically and\n> then joins them, stripping any common prefix from the second table name.\n> \n> You can always use the :join_table option to set a custom name.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-10 15:25:14", "user": 871535, "id": 14682974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33926215", "text": "+1\nI want this fix merged into rails version 4.0.\\* too. because this is kind of bugfix.\n", "created_at": "2014-02-03 05:49:04", "user": 98103, "id": 33926215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33929888", "text": "@matsubo there is no fix. We changed the documentation to include that special case. That change is reflected on `4-0-stable`. See [this code](https://github.com/rails/rails/blob/4-0-stable/activerecord/lib/active_record/associations.rb#L1415-L1416) which is reflected in the [current docs](http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many).\n", "created_at": "2014-02-03 07:43:39", "user": 5402, "id": 33929888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33930173", "text": "`create_join_table` helper in `ActiveRecord::Migration` just returns simply concat the table names.\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/migration/join_table.rb#L11\n\nThere is no fix for this code right now?\n", "created_at": "2014-02-03 07:50:23", "user": 98103, "id": 33930173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33930444", "text": "@matsubo this issue was not about `create_join_table` but about the table name used for `habtm` associations. There should be another one about `create_join_table`.\n", "created_at": "2014-02-03 07:57:12", "user": 5402, "id": 33930444}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've added validation common formats, e.g. email, uri,... How?\n", "labels": [], "number": 9644, "updated_at": "2014-07-04 15:47:30", "user": 3434496, "closed_at": "2013-03-10 08:06:59", "id": 11849316, "title": "Validation common formats", "url": "https://api.github.com/repos/rails/rails/issues/9644", "created_at": "2013-03-10 07:11:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14677973", "text": "Hi there,\n\nThis patch doesn't make a whole lot of sense. I _think_ you're trying to ask a question. We don't provide help on GitHub Issues, please send an email to rubyonrails-talk or ask on StackOverflow. Thanks!\n", "created_at": "2013-03-10 08:06:59", "user": 27786, "id": 14677973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14678746", "text": "@hbakhtiyor You may be looking for a gem like `validates_formatting_of` which provides similar functionality.\n", "created_at": "2013-03-10 09:36:48", "user": 442443, "id": 14678746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14679673", "text": "@steveklabnik It's proposal. Thanks!\n@mattdbridges  thanks for inform me\n", "created_at": "2013-03-10 11:16:15", "user": 3434496, "id": 14679673}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9643.\n\nThe logic was introduced with 46492949\n", "labels": ["activerecord", "docs"], "number": 9645, "updated_at": "2014-06-26 19:53:23", "user": 5402, "closed_at": "2013-03-10 16:30:15", "id": 11850808, "title": "document habtm join-table name with custom prefix", "url": "https://api.github.com/repos/rails/rails/issues/9645", "created_at": "2013-03-10 10:52:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14679390", "text": "/cc @pixeltrix \n\n@carlosantoniodasilva could you take a look?\n", "created_at": "2013-03-10 10:52:25", "user": 5402, "id": 14679390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14681535", "text": "Seems good, can you add `[ci skip]` to the commit message please? Thanks.\n", "created_at": "2013-03-10 13:40:38", "user": 26328, "id": 14681535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14682406", "text": "@carlosantoniodasilva commit message is updated.\n", "created_at": "2013-03-10 14:45:38", "user": 5402, "id": 14682406}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #2992 \n\nThe code on `3-2-stable` is very different but It should be an easy fix too.\n", "labels": ["actionview"], "number": 9646, "updated_at": "2014-06-12 15:51:09", "user": 5402, "closed_at": "2013-03-15 12:26:10", "id": 11851309, "title": "`asset_path` respects SCRIPT_NAME.", "url": "https://api.github.com/repos/rails/rails/issues/9646", "created_at": "2013-03-10 11:48:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14680071", "text": "@steveklabnik @guilleiguaran can you take a look?\n", "created_at": "2013-03-10 11:50:26", "user": 5402, "id": 14680071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14683760", "text": "I am afraid this will cause unintended side effects. If you have a mountable engine, the script_name will also be set but in this case, asset_path still should not consider script path because the entity responsible for delivering assets is in the main application (sprockets in this case).\n\nSo I think we should create a mountable engine and ensure we can still access its assets after this patch. Things can get even trickier, because you have can have a mountable engine with Passenger's script_name and in this case we should use only the one coming from passenger. Here are a couple places to look at:\n- `config.relative_url_root` - if this option still exist in action controller, it will give you only the passenger stuff therefore you can rely on it instead\n- If not, the code in this module is a good starting point: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/url_for.rb\n", "created_at": "2013-03-10 16:12:28", "user": 9582, "id": 14683760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684609", "text": "As far as I can tell AC still has a `relative_url_root` option but I think this won't fix the problem. If I interpret this test correctly: https://github.com/rails/rails/blob/master/actionpack/test/template/asset_tag_helper_test.rb#L558-L573\nThat option is already considered when computing the asset path and it won't be set when you change the rack mount point.\n", "created_at": "2013-03-10 17:02:25", "user": 5402, "id": 14684609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14687971", "text": "@senny you're meant to set `config.relative_url_root` to the same as the mount point for the application. IIRC, the original intention for Rails 3.0 was to deprecate it and the environment variable `RAILS_RELATIVE_URL_ROOT` and use `SCRIPT_NAME` exclusively. However it was undeprecated because of the need to be able get the relative url root outside of a request context like precompiling assets.\n\nI think we need to have a CF chat about the various options and come up with a plan for sorting this out.\n", "created_at": "2013-03-10 19:55:38", "user": 6321, "id": 14687971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14688058", "text": "@pixeltrix thanks for clarifying. I put my work on hold and catch you on CF.\n", "created_at": "2013-03-10 20:00:22", "user": 5402, "id": 14688058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14957727", "text": "I'm closing this one as this is not a viable solution. I'm working on a different approach.\n", "created_at": "2013-03-15 12:26:10", "user": 5402, "id": 14957727}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm trying to fix this bug: https://github.com/rails/jbuilder/pull/100\n\nThe only way I see I can fix that is to redefine the ScaffoldControllerGenerator template and add hooks to it. And to do that I need to require  a lot of code including `rails/generators`.\n\nThe problem is that if I do that in jbuilder gem, it'll create `Rails::Configuration::Generators` instance and skip all custom generator settings specified in other gems.\n\nFor example, if I have `jbuilder` and `haml-rails` gems enabled, `jbuilder` requires `rails/generators` just for template/hook, and then, later `haml-rails` is doing `config.generators.template_engine :haml` which never get into `Rails::Generators.options` because it was already initialized earlier.\n\nThe other problem is that it loads a lot of generators code even if generators are not needed.\n\nI'm not sure how to proceed here, but one solution would be to add load hook for generator. It'll allow me to augment the generator only when it actually loads, which kinda solves both problems stated above.\n", "labels": ["railties"], "number": 9647, "updated_at": "2014-06-13 22:37:47", "user": 129043, "closed_at": "2013-05-04 06:41:08", "id": 11851630, "title": "Load hooks for generators", "url": "https://api.github.com/repos/rails/rails/issues/9647", "created_at": "2013-03-10 12:25:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14683491", "text": "I am slightly confused by the need of this patch.\n\nYou don't need to require rails generators by hand. If you generator follows the proper naming convention, it will be loaded just when required. What am I missing?\n", "created_at": "2013-03-10 15:57:22", "user": 9582, "id": 14683491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697105", "text": "Agreed, I read through the linked issue and through this description, i'm not sure I fully understand the problem or this solution, could you give me some more information?\n", "created_at": "2013-03-11 04:18:33", "user": 59744, "id": 14697105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697185", "text": "Here's the situation. We need to redefine the default `scaffold_controller_generator`. One way to do that is something like this:\n\n``` ruby\nclass MyEngine < ::Rails::Engine\n  config.generators.scaffold_controller = :my_scaffold_controller\nend\n```\n\nSo, now when you invoke `scaffold`, which hooks for `scaffold_controller`, `my_scaffold_controller` gets invoked instead — just what we need. BUT, when you try to invoke `scaffold_controller` directly, the override doesn't work, and rails run original `scaffold_controller`\n\nSo, the other solution would be to augment the original `scaffold_controller` to do what we need. I've found the only way  to do that, which is something like that:\n\n``` ruby\nrequire 'rails/generators'\nrequire 'rails/generators/rails/scaffold_controller/scaffold_controller_generator'\n\nmodule Rails\n  module Generators\n    class ScaffoldControllerGenerator\n\n      # redefining methods and adding hooks\n\n    end\n  end\nend\n```\n\nAnd that approach breaks a lot of things. First, it requires generators all the time, even when we don't need them .Second, it preemptively triggers generators configuration to be build, so other gems trying to change generators config later fail, because the configuration does not pick changes from engines after being loaded.\n", "created_at": "2013-03-11 04:23:20", "user": 129043, "id": 14697185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697236", "text": "So, I think we might need a load hook for generators. I understand that it might be silly to add a load hook for each particular generator, but what about load hook for all generators? For example for `rails/generators`. That would solve the problem I've stated above.\n", "created_at": "2013-03-11 04:25:58", "user": 129043, "id": 14697236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14741304", "text": "I've never been involved in any of the decision making regarding any of the AS hooks, so i'm not sure if this is the best place to address this issue, or somewhere else. Seems like adding one hook after all generators are loaded would be more useful. @josevalim, what do you think?\n", "created_at": "2013-03-11 20:41:30", "user": 59744, "id": 14741304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14788150", "text": "Changed the pull request to actually run hook on `rails/generators` load.\n", "created_at": "2013-03-12 17:02:07", "user": 129043, "id": 14788150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15004532", "text": "Ok, I've figured out how to trick the configuration without load hook. Seen how it's implemented in [active_model_serializers](https://github.com/rails-api/active_model_serializers) gem. This code does the trick:\n\n``` ruby\nclass MyRailtie < ::Rails::Railtie\n  generators do |app|\n    Rails::Generators.configure! app.config.generators\n    Rails::Generators.hidden_namespaces.uniq!\n    require 'file_with_generator_overrides'\n  end\nend\n```\n\n...but it is quite untrivial code that relies on undocumented (AFAIK) private APIs. I'd rather have a load hook for `rails/generators` instead of doing this.\n", "created_at": "2013-03-16 13:07:16", "user": 129043, "id": 15004532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16339564", "text": "Do we want to add this hook?\n", "created_at": "2013-04-13 19:52:04", "user": 10128, "id": 16339564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16349550", "text": "Well I've solved my problem without this hook. Yet I think it might be helpful in the future.\n—\nPavel Pravosud\n\nOn Sun, Apr 14, 2013 at 2:52 AM, Philip Arndt notifications@github.com\nwrote:\n\n> ## Do we want to add this hook?\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/9647#issuecomment-16339564\n", "created_at": "2013-04-14 11:17:27", "user": 129043, "id": 16349550}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Today when I generate a model received a message from \"Deprecation WARNING\" at the end of the message has a link to the http://guides.rubyonrails.org/4_0_release_notes.html, however this link is not this published.\n\nHow can it be published?\n", "labels": [], "number": 9648, "updated_at": "2013-03-10 16:32:01", "user": 455676, "closed_at": "2013-03-10 16:32:01", "id": 11854149, "title": "\"Deprecation WARNING\" with rails g model + Rails 4", "url": "https://api.github.com/repos/rails/rails/issues/9648", "created_at": "2013-03-10 16:24:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684112", "text": "Right now, since Rails 4 is in beta, you can access `edgeguides` instead of `guides`: http://edgeguides.rubyonrails.org/4_0_release_notes.html.\n\nThe message points to guides cause it's where the final release notes will be. Thanks!\n", "created_at": "2013-03-10 16:32:01", "user": 26328, "id": 14684112}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've added is_number?, to_number,.. methods in string class with test cases\n", "labels": [], "number": 9649, "updated_at": "2014-06-12 21:58:43", "user": 3434496, "closed_at": "2013-03-11 04:41:54", "id": 11854552, "title": "Extended String Core", "url": "https://api.github.com/repos/rails/rails/issues/9649", "created_at": "2013-03-10 16:57:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684644", "text": "Can you demonstrate some real-world code that this makes better? Extending `String` is something that should be done only when it's really important.\n", "created_at": "2013-03-10 17:04:07", "user": 27786, "id": 14684644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684836", "text": "I agree with @steveklabnik. We need to be cautious when adding such extensions. I think they should live in your personal application or a gem but please post the examples so we can see why you like to extend `String`.\n", "created_at": "2013-03-10 17:16:06", "user": 5402, "id": 14684836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14684946", "text": "Contains only numeric values\n\n``` ruby\nsome_arrays.select do |item|\n    item.name.include?(entered_keyword) ||\n    (entered_keyword.is_numeric? && item.price == entered_keyword.to_numeric)\nend\n```\n\n``` ruby\nclass Validator\n    def self.valid?(field, value)\n        case field\n        when :name\n            !value.nil? && !value.empty?\n        when :price\n            !value.nil? && value.is_numeric?\n        else\n            return false\n    end     \nend\n```\n", "created_at": "2013-03-10 17:21:52", "user": 3434496, "id": 14684946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14688803", "text": "We already have http://guides.rubyonrails.org/active_record_validations_callbacks.html#numericality\n", "created_at": "2013-03-10 20:41:05", "user": 27786, "id": 14688803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697505", "text": "@hbakhtiyor this would be better off in a Gem for now. It's interesting functionality and i'm sure some will want it, but I don't think we can fully justify having this in Rails. Active Support is extremely conservative when it comes to extending core classes, since it's so invasive. Because of this, we're very reluctant to accept pull requests that modify core classes unless there is an overwhelming need for the functionality. @steveklabnik and @senny seem to agree. I'm closing this issue for now. Let me know if you cut a gem.\n", "created_at": "2013-03-11 04:41:54", "user": 59744, "id": 14697505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14768340", "text": "@schneems Added the gem https://github.com/hbakhtiyor/rcore-ext\n", "created_at": "2013-03-12 10:38:55", "user": 3434496, "id": 14768340}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request addresses a error since commit 1dc98c143c4bf84ccfb55b30c7d41b29b62d50cf merged, which adds two attributes `:created_on` and `:updated_on` to the `:developers`.\nBecause of Oracle database implementation, without any aggregate functions\nsuch as count(*), all columns must be listed in select statement.\n\n``` ruby\n$ ARCONN=oracle ruby -Itest test/cases/base_test.rb  -n test_find_keeps_multiple_group_values\nUsing oracle\nRun options: -n test_find_keeps_multiple_group_values --seed 12885\n\n# Running tests:\n\nE\n\nFinished tests in 0.623040s, 1.6050 tests/s, 0.0000 assertions/s.\n\n  1) Error:\nBasicsTest#test_find_keeps_multiple_group_values:\nActiveRecord::StatementInvalid: OCIError: ORA-00979: not a GROUP BY expression: SELECT \"DEVELOPERS\".* FROM \"DEVELOPERS\"  GROUP BY developers.name, developers.salary, developers.id, developers.created_at, developers.updated_at\n    stmt.c:230:in oci8lib_200.so\n    /home/yahonda/.rvm/gems/ruby-2.0.0-p0@railsmaster/gems/ruby-oci8-2.1.4/lib/oci8/cursor.rb:126:in `exec'\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_oci_connection.rb:143:in `exec'\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:749:in `block in exec_query'\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:334:in `block in log'\n    /home/yahonda/git/rails/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:329:in `log'\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1491:in `log'\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:729:in `exec_query'\n    /home/yahonda/git/oracle-enhanced/lib/active_record/connection_adapters/oracle_enhanced_adapter.rb:1445:in `select'\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:24:in `select_all'\n    /home/yahonda/git/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:63:in `select_all'\n    /home/yahonda/git/rails/activerecord/lib/active_record/querying.rb:36:in `find_by_sql'\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:555:in `exec_queries'\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:447:in `load'\n    /home/yahonda/git/rails/activerecord/lib/active_record/relation.rb:197:in `to_a'\n    test/cases/base_test.rb:1145:in `test_find_keeps_multiple_group_values'\n\n1 tests, 0 assertions, 0 failures, 1 errors, 0 skips\n$\n```\n\nI think this commit should satisfy the `test_find_keeps_multiple_group_values` test purpose.\n", "labels": [], "number": 9650, "updated_at": "2014-06-26 15:54:58", "user": 73684, "closed_at": "2013-03-10 21:12:19", "id": 11855997, "title": "Address ActiveRecord::StatementInvalid: OCIError: ORA-00979", "url": "https://api.github.com/repos/rails/rails/issues/9650", "created_at": "2013-03-10 18:56:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change from each to each_value on hash to avoid unused variable warning, since we are not using k in test\n", "labels": [], "number": 9651, "updated_at": "2016-02-22 14:25:44", "user": 567626, "closed_at": "2013-03-10 21:14:23", "id": 11856010, "title": "Change from each to each_value on hash to avoid unused variable warning", "url": "https://api.github.com/repos/rails/rails/issues/9651", "created_at": "2013-03-10 18:58:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14688526", "text": "looks good to me. /cc @carlosantoniodasilva \n", "created_at": "2013-03-10 20:27:05", "user": 5402, "id": 14688526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14689425", "text": ":+1: thanks.\n", "created_at": "2013-03-10 21:14:28", "user": 26328, "id": 14689425}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": ["activesupport"], "number": 9652, "updated_at": "2014-07-04 15:47:23", "user": 57987, "closed_at": "2013-06-15 20:04:11", "id": 11856582, "title": "Adds Duration.parse method to parse strings.", "url": "https://api.github.com/repos/rails/rails/issues/9652", "created_at": "2013-03-10 19:42:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14689481", "text": "Do you have any specific use case for having such a method? It's good to know where and when things can be used so that we can have more context to decide whether it's useful or not to add things to the framework, otherwise it already starts with negative impact. Thanks.\n", "created_at": "2013-03-10 21:16:37", "user": 26328, "id": 14689481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14689595", "text": "I'm storing a Duration in a model by serializing the parts hash. I wanted to allow natural language entries without doing something insecure, like calling eval() to get a Duration from a string.\n\nOn Mar 10, 2013, at 5:17 PM, Carlos Antonio da Silva notifications@github.com wrote:\n\n> Do you have any specific use case for having such a method? It's good to know where and when things can be used so that we can have more context to decide whether it's useful or not to add things to the framework, otherwise it already starts with negative impact. Thanks.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-10 21:22:24", "user": 57987, "id": 14689595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19502169", "text": "This doesn't seem like something ActiveSupport needs to do. It could be its own separate gem.\n\nAlso it doesn't support different date locales.\n\nI'd say this shouldn't be pulled.\n", "created_at": "2013-06-15 19:36:16", "user": 2488, "id": 19502169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19502567", "text": "Agree. Thank so much for the contribution.\n", "created_at": "2013-06-15 20:04:10", "user": 47848, "id": 19502567}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tests for `to_time` returning an instance of `Time` in the local system timezone did not take in account DST when they used mixed timezone declarations like 'US/Eastern' and '-0500'.\n\nReplaced timezone with DST by timezone without DST.\n", "labels": [], "number": 9653, "updated_at": "2014-06-26 19:53:28", "user": 125715, "closed_at": "2013-03-10 22:11:05", "id": 11858453, "title": "Fixed tests `to_time` returning an instance of `Time` in the local system timezone", "url": "https://api.github.com/repos/rails/rails/issues/9653", "created_at": "2013-03-10 22:05:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16849284", "text": "Turns out that this was actually a bug (#10306). Moscow didn't stop using DST until March 27, 2011 when the clocks went forward an hour and didn't go back in the autumn so the times in the tests are +0300 and not +0400.\n", "created_at": "2013-04-23 09:58:52", "user": 6321, "id": 16849284}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a route like the following:\n\n```\n  get '*path' => 'application#catchall'\n```\n\nThe action for this route performs a default render of an `catchall.html.erb` template.\n\nIn a Rails 3.2, this action successfully responds to a URL with a path such as `/foo.bar`. With Rails 4, the same URL produces an error:\n\n```\nMissing template application/catchall with {:locale=>[:en], :formats=>[nil], :handlers=>[:erb, :builder, :raw, :ruby]}. Searched in: * \"/Users/john/Development/scratch/app/views\"\n```\n\nA sample app which exhibits this problem is available [here](https://github.com/jfirebaugh/rails-4-catchall). If you switch the Gemfile to Rails 3.2 you will see that it works.\n", "labels": ["actionpack"], "number": 9654, "updated_at": "2014-02-25 09:25:57", "user": 98601, "closed_at": "2013-04-10 07:20:00", "id": 11863369, "title": "Missing template error responding to a path with a period via a catchall route", "url": "https://api.github.com/repos/rails/rails/issues/9654", "created_at": "2013-03-11 04:11:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697170", "text": "What version of Rails 3.2 ? I'm running codetriage on 3.2.12 and it doesn't work unless you've got a `format: false` on the route https://github.com/codetriage/codetriage/blob/master/config/routes.rb#L37.\n\nEither way add `format: false` and it should work fine.\n", "created_at": "2013-03-11 04:22:14", "user": 59744, "id": 14697170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14697412", "text": "Yes, 3.2.12. See the sample app -- comment the edge gem line and uncomment the 3.2.12 gem line to try it.\n\nYours is a `put` action -- perhaps it redirects rather than renders an html template?\n", "created_at": "2013-03-11 04:35:39", "user": 98601, "id": 14697412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14717979", "text": "I downloaded your app and started it:\n\n```\n$ bundle exec rails -v\nRails 4.0.0.beta1\nruby-1.9.3-p194  ~/documents/projects/rails-4-catchall (master)   \n$ bundle exec rails s\n=> Booting WEBrick\n=> Rails 4.0.0.beta1 application starting in development on http://0.0.0.0:3000\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\nDEPRECATION WARNING: config.whiny_nils option is deprecated and no longer works. (called from block in <top (required)> at /Users/schneems/Documents/projects/rails-4-catchall/config/environments/development.rb:10)\nconfig.eager_load is set to nil. Please update your config/environments/*.rb files accordingly:\n\n  * development - set it to false\n  * test - set it to false (unless you use a tool that preloads your test environment)\n  * production - set it to true\n\n\n[2013-03-11 10:00:08] INFO  WEBrick 1.3.1\n[2013-03-11 10:00:08] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.4.0]\n[2013-03-11 10:00:08] INFO  WEBrick::HTTPServer#start: pid=5579 port=3000\n```\n\nThen visited `localhost:3000/alkjsdflkajsdlfkj` and it worked fine in both Rails 3.2.12 and Rails 4 (master)\n\n![](http://cl.ly/image/2M3a3x3N0v0S/content.png)\n\nWhat did I miss? \n", "created_at": "2013-03-11 15:02:50", "user": 59744, "id": 14717979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14718205", "text": "Try `localhost:3000/foo.bar`.\n", "created_at": "2013-03-11 15:05:57", "user": 98601, "id": 14718205}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14718822", "text": "Sorry, it's early :) I can reproduce this, and confirm the behavior in 3.2.12. To let you know, you can set a default route on the application level using a `before_filter` like this: http://stackoverflow.com/questions/4643738/rails-3-respond-to-default-format\n\nI'm not sure if the change you're seeing is intentional, or a regression. I'm going to check into it. \n", "created_at": "2013-03-11 15:16:00", "user": 59744, "id": 14718822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14719067", "text": "cc @pixeltrix \n", "created_at": "2013-03-11 15:19:37", "user": 47848, "id": 14719067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14721620", "text": "@jfirebaugh without a `format: false` the `.bar` gets treated as the request format and something has changed in 4.0 that appears to be preventing it from falling back to the HTML default. If you want `.bar` to be part of the `path` parameter then add `format: false` - I'm still trying to track down the responsible commit for the format fallback.\n", "created_at": "2013-03-11 15:58:43", "user": 6321, "id": 14721620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15675212", "text": "The responsible commit is: c2267db383fb42e2e3c2abdbd58be6638908fb0f.\n", "created_at": "2013-03-30 14:18:39", "user": 35899, "id": 15675212}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16159077", "text": "Fixed by d50df2f116bfb1f3e897746fb345a5e945650e31\n", "created_at": "2013-04-10 07:19:59", "user": 6321, "id": 16159077}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There doesn't seem to be a good reason that `Rails::Application` has to be a singleton, other than the fact that the app needs to get initialized somewhere and its convenient to make it a singleton.\n# Overview of Changes\n\nIn this PR, I've made it so that Rails is no longer a singleton, and multiple applications can be initialized in a single ruby process. The caveat is that these applications will share a single global configuration which is stored in `Rails.config`, which is created as soon as the first rails application is initialized. \n\nThis also means that `Rails.config` is available before the environment initialization occurs. \n## New Initialization Procedure\n\nYou can now initialize multiple rails applications. To do this, I've changed the initialization of an application to the following structure (you can see this inside of `/config/application.rb`). \n\n``` ruby\nclass Application < Rails::Application\nend\n\nApplication.new do\n  config.time_zone = 'Eastern'\n  config.blah = 'blah'\nend\n```\n\nThis means that you can call `Application.new` as many times as you would like. You don't have to actually create a subclass, and you can just call `Rails::Application.new`, but creating a subclass is backwards compatible with the way applications have been initialized in the past.\n## Configuring Applications\n\nWhen you configure an application now, you will be changing a global configuration object stored in `Rails.config`. You can also configure this directly by doing something like this:\n\n``` ruby\nRails.configure do |config|\n  config.time_zone = 'Eastern'\nend\n```\n## Global Configuration\n\nThis PR still uses a global configuration for all rails app. Whenever a new application is created, it's configuration will be the same as the configuration of all the other rails applications. (This global config will be relaxed as I continue to work on this PR. The end goal is to make it so that each application has its own, separate configuration).\n\nIn addition, the `Rails` module stores the global rake tasks. These rake tasks are shared across all applications. \n## Backwards Compatibility\n\nI've made sure that this PR preserves a lot of old functionality. Initializing and configuring an application in the old way is still possible. For example: inside `/config/application.rb` you can still define an application as follows:\n\n``` ruby\nclass Application < Rails::Application\n  config.time_zone = 'Eastern'\nend\n\nApplication.initialize!\n```\n\nThe call to `Application.initialize!` sets `Rails.application` to a new instance of `Application`, but cannot be called twice. \n## Other Changes\n\nI've also gotten rid of the `Railtie::Configurable` module. This is because it currently forces all children of `Rails::Railtie` to include this module, no matter what. This force feeding doesn't seem like good practice, and prevents you from having any say in whether you want the module or not. Moving the guts of the Configurable module inside Railtie itself helps alleviate this issue. \n", "labels": ["railties"], "number": 9655, "updated_at": "2015-10-20 21:07:14", "user": 1075780, "closed_at": "None", "id": 11864312, "title": "Removing the requirement that Rails::Application be a singleton.", "url": "https://api.github.com/repos/rails/rails/issues/9655", "created_at": "2013-03-11 05:22:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14698894", "text": "There are actually many reasons for application to be a singleton. If you have more than one application defined, which one do you serve via Rack? Which one Rails.application should point to?\n\nEven more, most frameworks like Action Controller have global configurations, making it impossible to have two distinct applications running side by side.\n\nSo it makes complete sense for a Rails developer to perceive those as singleton. It may be worthy removing the limitations from the code though, in order for people to create more than one application for testing, but the amount of side effects that would leak from having more than one application in the same process is very likely to not make it worthy.\n", "created_at": "2013-03-11 06:08:29", "user": 9582, "id": 14698894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14698942", "text": "Also, regarding `Railtie::Configuration`, I think it was first added because the methods `instance`, `config` and so forth don't make sense to be called on `Rails::Railtie`. In fact, `Rails::Railtie` should not even have an instance. That's why the mixin, to enhance just child classes with this functionality.\n\nOn the other hand, that's how inheritance works. It makes sense to call `AR::Base.establish_connection` but it doesn't make any sense to call `AR::Base.find(1)` so I am ok with this change. It may be worthy considering that to mark `Rails::Railtie` as abstract to ensure it can't be initialized or something (similar to AR).\n", "created_at": "2013-03-11 06:10:49", "user": 9582, "id": 14698942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14721348", "text": "@josevalim Ah I see. I've reverted my changes for making Rails::Application a singleton and have moved the `add_lib_to_load_path!` call back to inheritance. However, it still doesn't seem right that this method is called upon inheritance, since it doesn't seem like the natural place to add to the load path. I'll look at the code a bit more and see if I can find a good place.\n\nI've also made it impossible to instantiate a Railtie by raising an error on initialization if the class is an abstract railtie (Rails::Railtie, Rails::Engine, or Rails::Application) and have added a test to make sure it works.\n", "created_at": "2013-03-11 15:54:31", "user": 1075780, "id": 14721348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14731563", "text": "I'm all about not making things a singleton, but you're right that people might shoot themselves in the foot with it. I wonder if there's a good way to achieve it...\n", "created_at": "2013-03-11 18:32:42", "user": 27786, "id": 14731563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14740223", "text": "@steveklabnik we continue to support `Rails.application`.  People can treat it as a singleton, but there's no reason we should limit to once instance.\n\n> There are actually many reasons for application to be a singleton. If you have more than one application defined, which one do you serve via Rack? Which one Rails.application should point to?\n\nThe one that is instantiated in `config.ru`.\n\nThere are many reasons _not_ to be a singleton, for example, creating multiple apps with different configuration values, mounting the same app in multiple places, being able to test the app under different configs without abandoning the process.\n\nForcing the app to be a singleton is harmful for testing an reusability.  But we don't need to make singleton a requirement in order to give the app developer \"one instance\".\n", "created_at": "2013-03-11 20:22:49", "user": 3124, "id": 14740223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14740829", "text": "That's exactly my point, you **cant** create applications with different\nconfigurations and mount them in the same process. All the configurations\nare global, when you set action mailer to use smtp in the config\napplication, it is going to affect **everything**.\n\n> I am not saying this change is bad, I am just saying the motivation for the\n> change is not true. We currently don't have the structure to support\n> multiple applications in the same process.\n\nHistorically, we have been adding slowly features to engines that are able\nto work coherently in the same process, there is still a good way to go\nthough.\n\n## \n\n*\nJosé Valim\nwww.plataformatec.com.br\nFounder and Lead Developer\n*\n", "created_at": "2013-03-11 20:32:42", "user": 9582, "id": 14740829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14741004", "text": "Btw bro, you can't answer one of the three questions and get away with it.\n;)\n\nJohn, the reason lib is added in the inherited hook and the before\nconfiguration hook is invoked as well is because, from the user\nperspective, as soon as he inherits from Rails::Application in\nconfig/application.rb, he is ready to configure it. I am aware though it\nsucks in case you want to create an abstract class from Rails::Application.\n\nInheritance considered harmful. :(\n\n## \n\n*\nJosé Valim\nwww.plataformatec.com.br\nFounder and Lead Developer\n*\n", "created_at": "2013-03-11 20:36:00", "user": 9582, "id": 14741004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14742754", "text": "> That's exactly my point, you **cant** create applications with different configurations and mount them in the same process.\n\nYa, we hung _ourselves_.  You can't use the argument of \"you can't create multiple apps\" as an argument against allowing us to create multiple apps.  You _can_ create multiple apps, we just don't let you.\n\n> All the configurations are global, when you set action mailer to use smtp in the config application, it is going to affect **everything**.\n\nYes.  We create a top level configuration object when the app boots that is shared among other aspects of the application.  Calling `new` on the app should not configure the app, but the config should be passed to the constructor.  Then we can share it among components.\n\n> I am not saying this change is bad, I am just saying the motivation for the change is not true. We currently don't have the structure to support multiple applications in the same process.\n\nWe don't currently have it, and @wangjohn is going to make it happen.  That is the motivation.\n\n> Historically, we have been adding slowly features to engines that are able to work coherently in the same process, there is still a good way to go though.\n\nHow is an Engine different than an application?  It just seems like more hacks around the fact that you can't instantiate an application multiple times.  If apps weren't required to be singletons, they would essentially be the same as engines.\n\nI'm incredibly surprised that I have to argue about the benefits of not using singletons. :-P\n", "created_at": "2013-03-11 21:07:20", "user": 3124, "id": 14742754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14985986", "text": "I talked to @tenderlove in private and we are agreeing on this.\n\nNone of us like that application is a singleton and we want to get rid of it. This is mostly a chicken-egg issue: 1) do we remove the restriction that our application is a singleton and then fix global state or 2) do we fix the global state and just then make the application not a singleton?\n\nThis is a good starting point. We should continue working on it as we go!\n", "created_at": "2013-03-15 21:30:50", "user": 9582, "id": 14985986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15014899", "text": ":thumbsup: Thanks for this!\n", "created_at": "2013-03-17 00:32:39", "user": 730, "id": 15014899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025097", "text": "Maybe you could also smash changes that deal with same things into one commit, so there is a prettier history :)\n", "created_at": "2013-03-17 16:00:58", "user": 795488, "id": 15025097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034832", "text": "@janko-m Yes, I'm in the process of rebasing everything and adding documentation and tests. I've added a bunch of changes to the original PR, so this isn't ready to merge yet. However, it should be ready very soon. I'll be back with an update on all the changes I've made.\n", "created_at": "2013-03-18 00:50:01", "user": 1075780, "id": 15034832}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15070033", "text": "I've updated the description of this PR to reflect its current state. I've allowed multiple `Rails::Application` to be created by changing the way one instantiates a rails application. The new method allows you to create as many applications as you want, but all of these applications will have the same global config.\n\nTests have also been added to make sure that the PR creates the functionality that is actually expected.\n", "created_at": "2013-03-18 17:48:38", "user": 1075780, "id": 15070033}], "assignees": [47848, 47848], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Now, connection handles the check for valid types so that each database can handle the changes individually.\n", "labels": ["activerecord"], "number": 9656, "updated_at": "2014-07-04 15:47:21", "user": 1275334, "closed_at": "2013-03-25 16:39:13", "id": 11864505, "title": "Created a layer of abstraction for the valid type checking in schema dumper", "url": "https://api.github.com/repos/rails/rails/issues/9656", "created_at": "2013-03-11 05:35:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14790465", "text": "should valid_type? be made into an API method on abstract adapter?\n", "created_at": "2013-03-12 17:36:45", "user": 242532, "id": 14790465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15404620", "text": "Merged at c2e203173221991e104a9eb872025788b9fc4763\n", "created_at": "2013-03-25 16:39:13", "user": 47848, "id": 15404620}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Dependency Test: We dont use \"i\"\n2. Inflector Test: Merge two logical blocks to bypass unused variable warning\n3. Engine Test: Output var isn't required\n", "labels": [], "number": 9657, "updated_at": "2016-02-22 14:25:42", "user": 567626, "closed_at": "2013-03-11 13:17:37", "id": 11871322, "title": "Cleanup tests for unused variables", "url": "https://api.github.com/repos/rails/rails/issues/9657", "created_at": "2013-03-11 10:36:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14706247", "text": "looks good to me. /cc @carlosantoniodasilva \n", "created_at": "2013-03-11 10:37:36", "user": 5402, "id": 14706247}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "assertion for\nhttps://github.com/rails/rails/blob/ad624345e54bd20802de67b2b5c9ef29ecf5d5f4/activerecord/lib/active_record/inheritance.rb#L32\n", "labels": [], "number": 9658, "updated_at": "2014-06-26 19:53:35", "user": 1095842, "closed_at": "2013-03-11 13:16:17", "id": 11872873, "title": "add an missing assertion to inheritance_test.rb", "url": "https://api.github.com/repos/rails/rails/issues/9658", "created_at": "2013-03-11 11:28:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Why doesn't allow set multiple validation context?\ne.g. \n\n``` ruby\nvalidates_uniqueness_of :name, on: [:create, :save]\n```\n", "labels": [], "number": 9659, "updated_at": "2014-01-18 18:19:55", "user": 3434496, "closed_at": "2013-03-11 13:21:37", "id": 11875464, "title": "on: option in validation methods", "url": "https://api.github.com/repos/rails/rails/issues/9659", "created_at": "2013-03-11 12:56:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14712700", "text": "It does, in Rails master. Please try with 4.0.0.beta1. Thanks.\n", "created_at": "2013-03-11 13:21:37", "user": 26328, "id": 14712700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14714652", "text": "Thanks\n", "created_at": "2013-03-11 14:04:18", "user": 3434496, "id": 14714652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32688420", "text": "I don't think it's supported. I think we need something more like this: https://github.com/rails/rails/pull/13754\n", "created_at": "2014-01-18 18:10:25", "user": 24885, "id": 32688420}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When the value for the required key is empty an ActionController::ParameterMissing is raised which gets caught by ActionController::Base and turned into a 400 Bad Request reply with a message in the body saying the key is missing, which is misleading.\n\nWith these changes, ActionController::EmptyParameter will be raised which ActionController::Base will catch and turn into a 400 Bad Request reply with a message in the body saying the key value is empty.\n", "labels": ["actionpack"], "number": 9660, "updated_at": "2014-06-12 16:25:17", "user": 720224, "closed_at": "2013-11-02 00:28:06", "id": 11875957, "title": "Change ActionController::Parameters#require behavior when value is empty", "url": "https://api.github.com/repos/rails/rails/issues/9660", "created_at": "2013-03-11 13:12:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15148187", "text": ":+1:\n\n/cc @spastorino @fxn\n", "created_at": "2013-03-19 22:40:56", "user": 160941, "id": 15148187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27606085", "text": "Same problem here\n", "created_at": "2013-11-01 22:29:24", "user": 303803, "id": 27606085}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27606149", "text": "OMG! 8 months without review :cry:\n\nI'll try to get this into 4.0.2\n", "created_at": "2013-11-01 22:30:21", "user": 47848, "id": 27606149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27618389", "text": "@guilleiguaran : this should be backported to `4-0-stable` no ?\n", "created_at": "2013-11-02 09:10:59", "user": 354185, "id": 27618389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27625408", "text": "Wouldn't this need a changelog entry?\n", "created_at": "2013-11-02 16:27:04", "user": 26328, "id": 27625408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27627493", "text": "I don't like this. We don't need two different exceptions, with two different things to catch if you're doing your own exception handling, to signify such a small change. Just expand the default message to be \"Either key is missing or the value is empty\".\n", "created_at": "2013-11-02 18:05:47", "user": 2741, "id": 27627493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27627566", "text": "@dhh agree, I'll work now changing this.\n", "created_at": "2013-11-02 18:09:25", "user": 160941, "id": 27627566}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test application I am referring below is here: https://github.com/lcancescu/blog_app\n\nOn a new rails application (Rails v.3.2.12) with a scaffold, say Post:\n\n```\nrails g scaffold post title message:text\n```\n\nThis generates the following routes:\n\n```\n$ rake routes\n    posts GET    /posts(.:format)          posts#index\n          POST   /posts(.:format)          posts#create\n new_post GET    /posts/new(.:format)      posts#new\nedit_post GET    /posts/:id/edit(.:format) posts#edit\n     post GET    /posts/:id(.:format)      posts#show\n          PUT    /posts/:id(.:format)      posts#update\n          DELETE /posts/:id(.:format)      posts#destroy\n```\n\nRun the tests:\n\n```\n$ rake test\n\n# Running tests:\n\n.......\n\nFinished tests in 0.145524s, 48.1020 tests/s, 68.7172 assertions/s.\n\n7 tests, 10 assertions, 0 failures, 0 errors, 0 skips\n```\n\nIn the controller test that is generated, we choose any of the tests and change the request method:\nSay we choose: **post: create**\n\n``` ruby\n  test \"should create post\" do\n    assert_difference('Post.count') do\n      post :create, post: { message: @post.message, title: @post.title }\n    end\n\n    assert_redirected_to post_path(assigns(:post))\n  end\n```\n\nand change the request method to something else, like **delete: create**\n\n``` ruby\n  test \"should create post\" do\n    assert_difference('Post.count') do\n      delete :create, post: { message: @post.message, title: @post.title }\n    end\n\n    assert_redirected_to post_path(assigns(:post))\n  end\n```\n\nNow run the tests:\n\n```\n# Running tests:\n\n.......\n\nFinished tests in 0.124485s, 56.2317 tests/s, 80.3310 assertions/s.\n\n7 tests, 10 assertions, 0 failures, 0 errors, 0 skips\n```\n\nMoreover, I noticed that after changing all request methods for every controller action the tests still pass.\n\n```\nget :index to post :index\nget :new to put :new\nget: show to post :show\ndelete :destroy to post :destroy\netc\n```\n\nSee here the test file: https://github.com/lcancescu/blog_app/blob/master/test/functional/posts_controller_test.rb\nAnd again, all tests pass.\n\n**Q:** Is this the expected behaviour? Am I missing something?\nThe routing table and the controller tests say different things and the tests are still green.\n\n**Note** it's only the tests that have unexpected behaviour. When I tried curl with different request methods it failed.\n", "labels": [], "number": 9661, "updated_at": "2013-03-11 15:05:42", "user": 857596, "closed_at": "2013-03-11 15:05:42", "id": 11877843, "title": "Unexpected test behavior", "url": "https://api.github.com/repos/rails/rails/issues/9661", "created_at": "2013-03-11 14:01:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14715366", "text": "The controller/functional tests call the controller action directly and the `get`, `post`, etc. helpers are there to help create a mock request for the test. Since the requests don't go through the full stack the HTTP verb restrictions aren't applied, so unless you perform some validation within the action then the tests will pass.\n\nObviously using `curl` will go through the full request stack so everything behaves as expected.\n", "created_at": "2013-03-11 14:18:45", "user": 6321, "id": 14715366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14716258", "text": "That's what we guessed as well, but it wasn't what we expected because the implementation of the helper methods explicitly pass the HTTP verb.\n\n``` ruby\ndef get(action, parameters = nil, session = nil, flash = nil)\n  process(action, parameters, session, flash, \"GET\")\nend\n```\n\nIf the restriction is not tested, explicitly using the correct verb in the testcase doesn't add extra value unless the action behaves differently like in the following example:\n\n``` ruby\ndef index\n  if request.get?\n    Post.all\n  else\n    Post.search(params[:query])\n  end\nend\n```\n\nOne might argue that this example violates the SRP.\n", "created_at": "2013-03-11 14:34:37", "user": 7202, "id": 14716258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14716481", "text": "As I said, the helpers are to setup the mock request environment, not to test the request stack. If you want the latter  you can use an integration test.\n", "created_at": "2013-03-11 14:38:37", "user": 6321, "id": 14716481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14716651", "text": "I understand and we test the routes in an integration test, however it's still kinda strange that when the route doesn't exist the test fails. When the route does exist but a different verb is used, the test passes.\n", "created_at": "2013-03-11 14:41:22", "user": 7202, "id": 14716651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14717074", "text": "Functional tests are really just fancy unit tests for controllers and you're not the first person to be caught out by the lack of a full request stack. In the long term we'd like to eliminate the need for functional tests by improving the performance of integration tests, but that's too much to do for the 4.0 release.\n", "created_at": "2013-03-11 14:48:08", "user": 6321, "id": 14717074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14717851", "text": "Faster integration tests are always beter :-)\n\nI read the guides again and I see that this behavior is documented, so I guess this issue can be seen as a RFC and based on your last comment I think this issue can be closed :-). Thanks for your help.\n", "created_at": "2013-03-11 15:00:49", "user": 7202, "id": 14717851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14718182", "text": "@benoist thanks for your input\n", "created_at": "2013-03-11 15:05:42", "user": 6321, "id": 14718182}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Refactored to remove repetitive lines from the test cases.\n", "labels": [], "number": 9662, "updated_at": "2014-07-04 15:47:17", "user": 3786236, "closed_at": "2013-03-11 16:05:44", "id": 11881224, "title": "Refactored to remove repetitive lines", "url": "https://api.github.com/repos/rails/rails/issues/9662", "created_at": "2013-03-11 15:17:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14722057", "text": "Sorry, I'm :-1: on this. It pollutes the git history and makes it harder to track why the tests were added. It's nothing to do with the code - if the change was the opposite way round I'd still be :-1: on it.\n\nThanks for your contribution though.\n", "created_at": "2013-03-11 16:05:44", "user": 6321, "id": 14722057}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Bundler:: Install Error\nNeed to allow write permission to the file at path:/ code/omrails/Gemfile.lock.\nIn my omrails folder i have all the file needed except the Gemfile.lock file?\nIt is the reason why in didn't work and how can resolve this problem?\n", "labels": [], "number": 9663, "updated_at": "2013-03-11 16:27:26", "user": 3534949, "closed_at": "2013-03-11 16:27:26", "id": 11882682, "title": "While installing ruby on rails on my webserver the is an error message", "url": "https://api.github.com/repos/rails/rails/issues/9663", "created_at": "2013-03-11 15:47:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14721561", "text": "This issue is not related to Rails. It clearly says you do not have write permissions to the folder. You need either to give write permissions, or deploy your app with Gemfile.lock already present (this is considered [best practice](http://yehudakatz.com/2010/12/16/clarifying-the-roles-of-the-gemspec-and-gemfile/))\n", "created_at": "2013-03-11 15:57:49", "user": 137464, "id": 14721561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14723446", "text": "Agreed, make sure you add the Gemfile.lock to your repo. Thanks.\n", "created_at": "2013-03-11 16:27:26", "user": 26328, "id": 14723446}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I forgot to run the test suit after changing the task name. :bomb:\n", "labels": [], "number": 9664, "updated_at": "2014-06-26 19:53:40", "user": 4912, "closed_at": "2013-03-11 16:06:42", "id": 11883508, "title": "Fix test failure introduced in 3ed41e57", "url": "https://api.github.com/repos/rails/rails/issues/9664", "created_at": "2013-03-11 16:02:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tested on Phusion Passenger Standalone 4.0 RC 4, default settings.\n\nGiven the following live stream example program:\n\n```\nclass MyController < ActionController::Base\n  include ActionController::Live\n\n  def stream\n    response.headers['Content-Type'] = 'text/event-stream'\n    20.times { |i|\n      puts \"hello world #{i}\"\n      response.stream.write \"hello world #{i}\\n\"\n      sleep 0.25\n    }\n  ensure\n    response.stream.close\n  end\nend\n```\n\nIf the client aborts the connection then this causes the thread in live.rb to crash. This is because as soon as the Phusion Passenger request handler detects an EPIPE error, it jumps out of the Rack body object's #each method and closes the socket. In the mean while, the thread in live.rb happily continues, and eventually writes to the closed socket, causing an IOError. This causes the entire process to crash because exceptions raised from that thread cannot be caught.\n\n```\n/Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_dispatch/http/response.rb:75:in `write':\nclosed stream (IOError)\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/live.rb:45:in `write'\n   from /Users/hongli/Sites/streamtest/app/controllers/my_controller.rb:8:in `block in stream'\n   from /Users/hongli/Sites/streamtest/app/controllers/my_controller.rb:6:in `times'\n   from /Users/hongli/Sites/streamtest/app/controllers/my_controller.rb:6:in `stream'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/implicit_render.rb:4:in `send_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/abstract_controller/base.rb:189:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/rendering.rb:10:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/abstract_controller/callbacks.rb:18:in `block in process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:393:in `_run__4588340517768974206__process_action__callbacks'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/abstract_controller/callbacks.rb:17:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/rescue.rb:29:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/instrumentation.rb:31:in `block in process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.0.0.beta1/lib/active_support/notifications.rb:158:in `block in instrument'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.0.0.beta1/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activesupport-4.0.0.beta1/lib/active_support/notifications.rb:158:in `instrument'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/instrumentation.rb:30:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/params_wrapper.rb:245:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/activerecord-4.0.0.beta1/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/abstract_controller/base.rb:136:in `process'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/abstract_controller/rendering.rb:44:in `process'\n   from /Users/hongli/.rvm/gems/ruby-1.9.3-p392/gems/actionpack-4.0.0.beta1/lib/action_controller/metal/live.rb:118:in `block in process'\n```\n", "labels": ["actionpack"], "number": 9665, "updated_at": "2013-03-18 16:07:35", "user": 819, "closed_at": "2013-03-18 16:07:35", "id": 11888904, "title": "Aborting a live stream connection causes the stream thread to crash", "url": "https://api.github.com/repos/rails/rails/issues/9665", "created_at": "2013-03-11 17:53:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14729859", "text": "/cc @tenderlove. \n\n_Notice the ensure clause was added in afd3ade43d4f37d4251fd249abf9f826f3e23600_\n", "created_at": "2013-03-11 18:06:43", "user": 26328, "id": 14729859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14902518", "text": "This issue might be fixed by #9604 \n", "created_at": "2013-03-14 13:42:14", "user": 36869, "id": 14902518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15022735", "text": "Yes, this issue is fixed in pull request #9604.\n", "created_at": "2013-03-17 13:33:07", "user": 35899, "id": 15022735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063714", "text": "Closing this. Let's track the progress in #9604.\n", "created_at": "2013-03-18 16:07:35", "user": 4912, "id": 15063714}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- Unset $RAILS_ENV that got set by abstract_unit to trigger the default.\n- split out environment setting since Ruby 1.9.3 doesn't support inline\n  ENV setting.\n", "labels": [], "number": 9666, "updated_at": "2014-06-26 17:12:54", "user": 4912, "closed_at": "2013-03-11 18:35:01", "id": 11890779, "title": "Make sure that the test case is run under test env", "url": "https://api.github.com/repos/rails/rails/issues/9666", "created_at": "2013-03-11 18:32:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9667, "updated_at": "2014-06-25 00:14:23", "user": 110196, "closed_at": "2013-03-11 20:12:40", "id": 11892299, "title": "Add support of String#to_boolean", "url": "https://api.github.com/repos/rails/rails/issues/9667", "created_at": "2013-03-11 19:03:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14734589", "text": "Can you demonstrate a real-world use case of this making code cleaner? We don't add extensions to String unless it's really important.\n", "created_at": "2013-03-11 19:05:31", "user": 27786, "id": 14734589}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14736192", "text": ":-1: \n", "created_at": "2013-03-11 19:21:06", "user": 146214, "id": 14736192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14736932", "text": "`if string.to_boolean` instead of `if string == \"true\" || string == \"t\" || string == \"1\"`\nFor instance, when you have to check the value of `_destroy` in `accepts_nested_attributes`\n", "created_at": "2013-03-11 19:33:45", "user": 110196, "id": 14736932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14739592", "text": "That's an issue of accept nested attributes for. Maybe it should yield this\nparameter by default?\n\nIn any case, -1 for this PR, even more because its implementation is very\ncouple to what Active Record consider to be Boolean conversions.\n\n## \n\n_José Valim_\nwww.plataformatec.com.br\nSkype: jv.ptec\nFounder and Lead Developer\n", "created_at": "2013-03-11 20:11:20", "user": 9582, "id": 14739592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14739605", "text": "It would seem to be overkill to extend a Ruby core class to make the code in this one very particular use case a little terser. How about a helper function in `ApplicationController`?\n", "created_at": "2013-03-11 20:11:31", "user": 98363, "id": 14739605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14739660", "text": "I agree with @josevalim. Closing.\n\nThank you for the pull request.\n", "created_at": "2013-03-11 20:12:40", "user": 47848, "id": 14739660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14763417", "text": "Thanks for reviewing and your fast feedbacks :-)\nI won't touch `core_ext` anymore :-)\n", "created_at": "2013-03-12 08:22:57", "user": 110196, "id": 14763417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26216228", "text": "This is a nice utility function to have when importing other people's data. Was expecting ActiveSupport would have something like it.\n", "created_at": "2013-10-13 11:43:57", "user": 27655, "id": 26216228}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`post.comments.delete_all` will fire callbacks if :dependent option is\n:destroy . It will be fixed in Rails 4.1 . In the meantime display\na warning . Look at #9567 for details .\n", "labels": [], "number": 9668, "updated_at": "2014-06-26 05:42:14", "user": 6399, "closed_at": "2013-03-11 20:33:23", "id": 11894780, "title": "Show warning message if delete_all is firing callbacks", "url": "https://api.github.com/repos/rails/rails/issues/9668", "created_at": "2013-03-11 19:56:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14752935", "text": "@yahonda sent a PR with the fix https://github.com/rails/rails/pull/9676\n", "created_at": "2013-03-12 01:01:52", "user": 6399, "id": 14752935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14753000", "text": "@neerajdotname Thanks for the info. Will verity it it reproduces after #9676 merged to master.\n", "created_at": "2013-03-12 01:04:31", "user": 73684, "id": 14753000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14775469", "text": "@neerajdotname Verified that no message appears since #9676 merged. Thanks! \n", "created_at": "2013-03-12 13:42:33", "user": 73684, "id": 14775469}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We used to pass the Rails::Application subclass to #run.\nThe Rails server then called #to_app to convert that class to the\nactual Rack application.\n\nif you surround `#run` with a call to `#map` the server no longer\nconvertes the class to the instance and we end up with unnecessary\ndelegation calls on every request.\n", "labels": [], "number": 9669, "updated_at": "2014-06-26 06:51:05", "user": 5402, "closed_at": "2013-03-18 17:02:09", "id": 11895916, "title": "config.ru uses the effective Rack app", "url": "https://api.github.com/repos/rails/rails/issues/9669", "created_at": "2013-03-11 20:20:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14740130", "text": "/cc @tenderlove @jeremy @rafaelfranca @josevalim \n", "created_at": "2013-03-11 20:20:59", "user": 5402, "id": 14740130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14740263", "text": "[Per this](https://github.com/rails/rails/pull/9655#issuecomment-14698894) we should probably instantiate the app in config.ru, rather than reference `Rails.application`.\n", "created_at": "2013-03-11 20:23:28", "user": 3124, "id": 14740263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14775804", "text": "@tenderlove I think we can make this change before moving away from the singleton. Instantiating in `config.ru` will have further consequences. I'd like to get this applied first. It behaves exactly the same as it did but does not take different paths wether you wrap it with `map` or not.\n", "created_at": "2013-03-12 13:49:39", "user": 5402, "id": 14775804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14969046", "text": ":+1: as a stopgap. Worried that removing `#app` will break existing apps that don't have the updated config.ru.\n", "created_at": "2013-03-15 16:01:27", "user": 199, "id": 14969046}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changed return values  for `request.xhr?` to  `true` or `false` instead of `nil` and `0`.\n", "labels": [], "number": 9670, "updated_at": "2014-06-24 16:00:26", "user": 21104, "closed_at": "2013-03-11 22:16:00", "id": 11899701, "title": "Changed request.xhr? to return boolean instead of 0 or nil", "url": "https://api.github.com/repos/rails/rails/issues/9670", "created_at": "2013-03-11 21:49:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14746484", "text": "not a bug, this PR has been made before (#5329) and has been rejected\n", "created_at": "2013-03-11 22:15:29", "user": 500554, "id": 14746484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14746504", "text": "@miry we've been here before - I suggest that you read the discussion on 3756a3fdfe8d339a53bf347487342f93fd9e1edb for the back story.\n", "created_at": "2013-03-11 22:15:56", "user": 6321, "id": 14746504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14746997", "text": "It is really confuse that a method with suffix `?` does not return `true` or `false`. IMHO\n\nBtw: https://github.com/rack/rack/blob/master/lib/rack/request.rb#L308\n", "created_at": "2013-03-11 22:26:31", "user": 21104, "id": 14746997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14747245", "text": "@miry whether a predicate should return `true` or `false` was debated to death in #5329 and 3756a3fdfe8d339a53bf347487342f93fd9e1edb - going over it again serves no purpose.\n", "created_at": "2013-03-11 22:31:27", "user": 6321, "id": 14747245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14747837", "text": "@pixeltrix What do you think to replace word in the comment from the `true`(or even all phrase) to something more close to solution?\n\nhttp://apidock.com/rails/ActionDispatch/Request/xml_http_request%3F\n", "created_at": "2013-03-11 22:42:53", "user": 21104, "id": 14747837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14747996", "text": "That's how predicates are documented: \"returns true if...\", \"says whether...\". In the very exceptional cases when you  really want to commit or refer to the `true` singleton, the documentation guidelines of Rails say you need to use fixed-width font. True and false in regular font are used all over the place.\n", "created_at": "2013-03-11 22:46:17", "user": 3387, "id": 14747996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14829444", "text": "@fxn What were the conditions to use the Regexp? \n\nIf only for case issue, so to use `downcase` is faster.\n\nhttps://gist.github.com/miry/5150174\n", "created_at": "2013-03-13 08:25:51", "user": 21104, "id": 14829444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14832469", "text": "The method checks for case-insensitive _inclusion_, not sure if that is needed though. I didn't write the original method and don't see any test checking inclusion.\n\nBear in mind that no matter how you rewrite it, _the method does not document singletons_. So even in the case of a refactor that returned singletons _you still could not rely on them_, the same way people cannot rely on `nil`/0 today.\n", "created_at": "2013-03-13 09:49:15", "user": 3387, "id": 14832469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14837517", "text": "@fxn I don't care about return value now, just performance issue.\n", "created_at": "2013-03-13 12:06:38", "user": 21104, "id": 14837517}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After upgrading to Rails 4 beta1, everything initially seemed to work fine.  However, when adding a new table to the database, I get the following error when I try to migrate the db: PG::Error: ERROR:  null value in column \"migrated_at\" violates not-null constraint\n\nThis is a fairly simple migration:\n\n```\nclass CreateCampaigns < ActiveRecord::Migration\n  def change\n    create_table :campaigns do |t|\n      t.string :language\n      t.string :card_type\n      t.integer :season_id\n\n      t.timestamps\n    end\n  end\nend\n```\n\nAnyone have thoughts on what might cause this?\n", "labels": ["activerecord", "needs feedback"], "number": 9671, "updated_at": "2013-03-12 14:53:06", "user": 186442, "closed_at": "2013-03-12 14:44:19", "id": 11901269, "title": "PG::Error: ERROR:  null value in column \"migrated_at\" ", "url": "https://api.github.com/repos/rails/rails/issues/9671", "created_at": "2013-03-11 22:29:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14748454", "text": "Here is the output when running rake db:migrate\n\n```\nPG::Error: ERROR:  null value in column \"migrated_at\" violates not-null constraint\nDETAIL:  Failing row contains (20130311225327, null, null, null).\n: INSERT INTO \"schema_migrations\" (\"version\") VALUES ($1)\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/postgresql_adapter.rb:726:in `get_last_result'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/postgresql_adapter.rb:726:in `exec_cache'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/postgresql/database_statements.rb:139:in `block in exec_query'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract_adapter.rb:334:in `block in log'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activesupport-4.0.0.beta1/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract_adapter.rb:329:in `log'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/postgresql/database_statements.rb:137:in `exec_query'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/postgresql/database_statements.rb:183:in `exec_insert'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:96:in `insert'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/query_cache.rb:14:in `insert'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/relation.rb:76:in `insert'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/persistence.rb:456:in `create_record'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/attribute_methods/dirty.rb:78:in `create_record'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/callbacks.rb:303:in `block in create_record'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:373:in `_run__4522551208920107271__create__callbacks'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/callbacks.rb:303:in `create_record'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/timestamp.rb:57:in `create_record'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/persistence.rb:424:in `create_or_update'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/callbacks.rb:299:in `block in create_or_update'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:373:in `_run__4522551208920107271__save__callbacks'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/callbacks.rb:299:in `create_or_update'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/persistence.rb:122:in `save!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:57:in `save!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/attribute_methods/dirty.rb:41:in `save!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:275:in `block in save!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:326:in `block in with_transaction_returning_status'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:199:in `transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:209:in `transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:323:in `with_transaction_returning_status'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:275:in `save!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:41:in `create!'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:925:in `record_version_state_after_migrating'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:861:in `block (2 levels) in migrate'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:940:in `block in ddl_transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:201:in `block in transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:209:in `within_new_transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:201:in `transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:209:in `transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:940:in `ddl_transaction'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:859:in `block in migrate'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:855:in `each'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:855:in `migrate'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:711:in `up'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/migration.rb:689:in `migrate'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/gems/activerecord-4.0.0.beta1/lib/active_record/railties/databases.rake:48:in `block (2 levels) in <top (required)>'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/bin/ruby_noexec_wrapper:14:in `eval'\n/Users/liammcardle/.rvm/gems/ruby-2.0.0-p0@rails-4.0/bin/ruby_noexec_wrapper:14:in `<main>'\nTasks: TOP => db:migrate\n```\n", "created_at": "2013-03-11 22:56:20", "user": 186442, "id": 14748454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14752859", "text": "Thankfully this is a new app and resetting the database (rake db:reset) fixed this issue.  But I'd still be interested to know if anyone has any thoughts on why this error would happen to begin with.  If this app was in production, obviously resetting the database would not have been an option. \n", "created_at": "2013-03-12 00:59:12", "user": 186442, "id": 14752859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14778430", "text": "can you reproduce the error?\n", "created_at": "2013-03-12 14:35:44", "user": 5402, "id": 14778430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14778630", "text": "Did you create the application using edge rails (rails checkout from github)?\n", "created_at": "2013-03-12 14:39:13", "user": 5402, "id": 14778630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14778949", "text": "The metadata in the migrations table was reverted with cff747d304f008c103a7ba92440400a9a0848bee . I assume you created your database when this patch was still in master and then after it was removed it no longer worked. This shouldn't be a problem since rails 4 will not have this patch applied.\n\nI'm closing this issue for now. Please report back if my answer does not seem logical for your situation and I'll reopen.\n", "created_at": "2013-03-12 14:44:19", "user": 5402, "id": 14778949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14779527", "text": "Yes, the app was initially created with Edge Rails. Thanks.\n—\nSent from Mailbox for iPhone\n\nOn Tue, Mar 12, 2013 at 7:45 AM, Yves Senn notifications@github.com\nwrote:\n\n> The metadata in the migrations table was reverted with cff747d304f008c103a7ba92440400a9a0848bee . I assume you created your database when this patch was still in master and then after it was removed it no longer worked. This shouldn't be a problem since rails 4 will not have this patch applied.\n> \n> ## I'm closing this issue for now. Please report back if my answer does not seem logical for your situation and I'll reopen.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/9671#issuecomment-14778949\n", "created_at": "2013-03-12 14:53:06", "user": 186442, "id": 14779527}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a fix for issue #9567\nI think that the dependent options should be taken into account only when destroy is called on the \"parent\" of the has_many association. In the issue's example it is the post. When delete_all is called directly on the association it should ignore the dependent option completely but should call the before_add/before_remove callbacks since all existing records will be removed from the collection.\n\nThis is not the current behaviour and this change could break some existing apps. This PR might needs some additional tests but I wanted to see if you would agree on this first.\n", "labels": ["activerecord"], "number": 9672, "updated_at": "2014-07-04 15:47:10", "user": 301259, "closed_at": "2013-03-12 06:16:36", "id": 11901517, "title": "collection_association#delete_all should ignore dependent option (Fixes #9567)", "url": "https://api.github.com/repos/rails/rails/issues/9672", "created_at": "2013-03-11 22:37:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14748312", "text": "Problem is `delete_all` does not ignore `:dependent` unfortunately, we cannot just change this behavior overnight because it would break upgrades in a subtle way. We need to redefine `delete_all` in a progressive way, hence the warning.\n", "created_at": "2013-03-11 22:53:21", "user": 3387, "id": 14748312}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The syntax according to http://api.rubyonrails.org/classes/ActionMailer/Base.html is :from, as opposed to from:. Since this is a code change in the documentation, I assume I need to create a pull request but let me know if that's wrong!\n", "labels": [], "number": 9673, "updated_at": "2014-07-02 19:52:13", "user": 318137, "closed_at": "2013-03-12 02:12:43", "id": 11901799, "title": "fix :from in mailer", "url": "https://api.github.com/repos/rails/rails/issues/9673", "created_at": "2013-03-11 22:45:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14753874", "text": "/cc @fxn \n\nWe usually don't make cosmetic changes like this, but since it's in docs and not code...\n", "created_at": "2013-03-12 01:33:59", "user": 27786, "id": 14753874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14754935", "text": "The API link you're checking is related to the current stable version, 3.2.x, which has support for both Ruby 1.8 and 1.9, so the docs use the `=>` hash style. If you check the [edge guides for that](http://edgeapi.rubyonrails.org/classes/ActionMailer/Base.html), you'll see they use the new style hash, 1.9+.\n\nAnyway, both are just hash definitions, there's no real difference in the final result of the `default` call. Thanks!\n", "created_at": "2013-03-12 02:12:43", "user": 26328, "id": 14754935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755061", "text": "Ah, got it -- apologies for the noise!\n", "created_at": "2013-03-12 02:18:47", "user": 318137, "id": 14755061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755097", "text": "No problem, thanks for the contribution.\n\nOn Mon, Mar 11, 2013 at 11:18 PM, Waynn Lue notifications@github.comwrote:\n\n> Ah, got it -- apologies for the noise!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9673#issuecomment-14755061\n> .\n\n## \n\nAt.\nCarlos Antonio\n", "created_at": "2013-03-12 02:20:23", "user": 26328, "id": 14755097}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb\n\n```\n  def quote_column_name(name) #:nodoc:\n    @quoted_column_names[name] ||= \"`#{name.to_s.gsub('`', '``')}`\"\n  end\n\n  def quote_table_name(name) #:nodoc:\n    @quoted_table_names[name] ||= quote_column_name(name).gsub('.', '`.`')\n  end\n```\n\nIt's not thread-safe to modify a Hash instance variable belonging to a globally visible object.  My Jruby on Rails app had all 4 threads hung during hash access in quote_column_name.\n", "labels": ["activerecord"], "number": 9674, "updated_at": "2013-03-26 02:07:48", "user": 1903806, "closed_at": "2013-03-26 02:07:48", "id": 11902480, "title": "not thread-safe: ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter#quote_column_name and #quote_table_name", "url": "https://api.github.com/repos/rails/rails/issues/9674", "created_at": "2013-03-11 23:07:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14767639", "text": "I think `ConnAdapter` instances are not thread safe and should not be used concurrently.\n", "created_at": "2013-03-12 10:18:39", "user": 15688, "id": 14767639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15437032", "text": "@thedarkone is correct.  Do not share the database connections among threads.\n", "created_at": "2013-03-26 02:07:48", "user": 3124, "id": 15437032}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Please consider to change the RDoc dependency from runtime to development or ideally remove it entirely. It was introduced due to some incompatibility of ruby-debug and RDoc in Ruby 1.8.7 (#1598). Ruby 1.8.7 is no longer supported, so this is irrelevant. Please do not carry this baggage along. Less dependencies, less maintenance, better security, less of used diskspace.\n", "labels": [], "number": 9675, "updated_at": "2013-03-12 06:59:27", "user": 14406, "closed_at": "2013-03-12 01:32:47", "id": 11902853, "title": "Change the RDoc dependency from runtime to development.", "url": "https://api.github.com/repos/rails/rails/issues/9675", "created_at": "2013-03-11 23:20:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14753836", "text": "You're already discussing this over at https://github.com/rails/rails/issues/9634#issuecomment-14749207\n", "created_at": "2013-03-12 01:32:47", "user": 27786, "id": 14753836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14761231", "text": "That is similar discussion but not the same. This is one step further. Of course it is based on #9634 \n", "created_at": "2013-03-12 06:57:22", "user": 14406, "id": 14761231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14761297", "text": "And targeted for Rails 4, since RoR 3.2 ain't gonna to drop Ruby 1.8.7 support I believe.\n", "created_at": "2013-03-12 06:59:27", "user": 14406, "id": 14761297}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Commit https://github.com/rails/rails/pull/9668 shows warning\nwhen `delete_all` is invoked with `:dependent` option\n`:destroy`.\n\nUnfortunately invoking `Post.destroy_all` invokes\n`post.comments.delete_all` as part of `has_many` callbacks.\n\nThis commit ensures that instead `post.comments.destroy_all` is\ninvoked and in the process no warning is generated.\n\nSee issue #9567 for details .\n", "labels": ["activerecord"], "number": 9676, "updated_at": "2014-06-26 15:55:03", "user": 6399, "closed_at": "2013-03-12 13:01:09", "id": 11905457, "title": "dependent: :destroy should call destroy_all", "url": "https://api.github.com/repos/rails/rails/issues/9676", "created_at": "2013-03-12 00:58:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14752875", "text": "/cc @fxn @jonleighton \n", "created_at": "2013-03-12 00:59:49", "user": 6399, "id": 14752875}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://www.sqlite.org/lang_savepoint.html\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L130-L132\n", "labels": ["activerecord"], "number": 9677, "updated_at": "2014-06-26 15:16:31", "user": 6399, "closed_at": "2013-03-18 15:38:59", "id": 11905693, "title": "SQLite3 3.6.8+ supports nested transactions", "url": "https://api.github.com/repos/rails/rails/issues/9677", "created_at": "2013-03-12 01:08:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755010", "text": "Please use `[ci skip]` in the commit message, so we don't run tests on travis. Thanks.\n", "created_at": "2013-03-12 02:16:21", "user": 26328, "id": 14755010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755053", "text": "@carlosantoniodasilva will try to remember. Thanks .\n", "created_at": "2013-03-12 02:18:26", "user": 6399, "id": 14755053}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails 3.2.12\n\nI'm not sure that I'm not just doing the wrong thing, but I can't get the data out of the database without records with timestamps set to 2 AM this last sunday having their times set to to 3 AM.\n\nI have a record with a reading_start_date column whose type is datetime (SQL Server).\n\nIn another environment, the same column is also a datetime, but in mySQL.\n\nIn both cases, I have entries where the reading_start_date is set to 2 AM on Sunday, March 10th.\n\nSQL Server has the data stored as \"2013-03-10 02:00:00.0\"\nmySQL has it stored as \"2013-03-10 02:00:00\"\n\nThe model that is used to access these records has absolutely no additional processing/manipulation of the date.  It's just a pass-through to whatever rails is doing.\n\nIn both cases, when I load up one of these records and then dump the reading_start_date, it is set to 3 am instead of 2 am.\n\nI have nothing configured for the time zone, so -- as I understand it -- rails should be using UTC.  My computer's local time is set to US Eastern, and 2 am is the jump hour here, but since rails is configured to use UTC, I don't see why that would affect this.\n\nMy expectation is that the date should come back as 2 am.  What am I doing wrong?\n", "labels": [], "number": 9678, "updated_at": "2013-07-29 00:31:05", "user": 1864022, "closed_at": "2013-03-15 12:19:59", "id": 11906491, "title": "DST Issue?", "url": "https://api.github.com/repos/rails/rails/issues/9678", "created_at": "2013-03-12 01:44:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755740", "text": "What are the results if you enter this in the Rails console?\n\n``` irb\n>> ActiveRecord::Base.default_timezone\n```\n\nand\n\n``` irb\n>> Time.zone\n```\n\nWhat doesn't make sense is if the stored time is `2013-03-10 02:00:00` then the default is for Active Record to treat it as a UTC value and then convert it to whatever `Time.zone` is configured to which you're saying is UTC. The equivalent to this is the following:\n\n``` irb\n>> Time.utc(2013, 3, 10, 2, 0, 0).in_time_zone('UTC')\n=> Sun, 10 Mar 2013 02:00:00 UTC +00:00\n```\n\nThe only way I can think you'd get 3am is if the database timestamp is considered to be local time, your system is set to EST and `Time.zone` is set to EST, e.g:\n\n``` ruby\nENV['TZ'] = 'America/New_York'\nconfig.time_zone = 'America/New_York'\nconfig.active_record.default_timezone = :local\n```\n\nwith these settings you'd get the equivalent of this:\n\n``` irb\n>> ENV['TZ'] = 'America/New_York'\n>> Time.local(2013, 3, 10, 2, 0, 0).in_time_zone('America/New_York')\n=> Sun, 10 Mar 2013 03:00:00 EDT -04:00\n```\n\nwhich is what you're seeing - if `Time.zone` was UTC then the returned time would be `Sun, 10 Mar 2013 07:00:00 UTC +00:00`\n", "created_at": "2013-03-12 02:45:38", "user": 6321, "id": 14755740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14783462", "text": "I'll skip ahead to the good bit...\n\nIn my case, the TZ environment variable is not set.  Thus, ENV['TZ'] is nil.  If I launch the rails console with TZ=UTC it seems to work correctly.\n\nTo answer your specific questions:\n\n```\nirb(main):002:0> ActiveRecord::Base.default_timezone\n=> :utc\nirb(main):003:0> Time.zone\n=> #<ActiveSupport::TimeZone:0x5d83ccdb @current_period=nil, @name=\"UTC\", @utc_offset=nil, @tzinfo=#<TZInfo::TimezoneProxy: Etc/UTC>>\n```\n\nIs it required that I set the TZ environment variable?\n", "created_at": "2013-03-12 15:51:24", "user": 1864022, "id": 14783462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14785239", "text": "> Is it required that I set the TZ environment variable?\n\nNo - it's just a way of overriding the system setting. If `ActiveRecord::Base.default_timezone` is `:utc` then I'm not sure what's happening - `Time.utc(2013, 3, 10, 2, 0, 0)` is no where near the correct time for DST to come into effect so something somewhere is treating it as local.\n\nIf you enter the following in the console what do you get?\n\n``` irb\nTime.utc(2013, 3, 10, 2, 0, 0).in_time_zone\n```\n\nAlso can you post a simple app that reproduces the problem?\n", "created_at": "2013-03-12 16:17:22", "user": 6321, "id": 14785239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14786165", "text": "```\nirb(main):001:0> Time.utc(2013, 3, 10, 2, 0, 0).in_time_zone\n=> Sun, 10 Mar 2013 02:00:00 UTC +00:00\n```\n\nThat appears to be working correctly.  However:\n\n```\nirb(main):001:0> Time.zone.parse('2013-03-10 02:00:00')\n=> Sun, 10 Mar 2013 03:00:00 UTC +00:00\n```\n\nInterestingly:\n\n```\nirb(main):004:0> ENV['TZ'] = 'UTC'\n=> \"UTC\"\nirb(main):005:0> Time.zone.parse('2013-03-10 02:00:00')\n=> Sun, 10 Mar 2013 02:00:00 UTC +00:00\nirb(main):006:0> ENV['TZ'] = nil\n=> nil\nirb(main):007:0> Time.zone.parse('2013-03-10 02:00:00')\n=> Sun, 10 Mar 2013 03:00:00 UTC +00:00\n```\n\nSo, setting it to UTC explicitly in the console makes the parsing change.  I suppose that makes sense (?) but I can't make that work correctly in the actual code.  I originally found this issue because of a spec that creates 4 days of readings and then tries to get them back via a controller.  I was getting one less reading back than I expected.  So, I've tried setting this variable in the environment.rb, in the application.rb, and neither will allow the spec to pass.  But if I set it on the command line as part of the rspec command it works fine.\n\nI'll come up with a dummy project.  Should I link to a repo for this?\n", "created_at": "2013-03-12 16:31:24", "user": 1864022, "id": 14786165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14801084", "text": ">  Should I link to a repo for this?\n\nThat's the nicest way, yes.\n", "created_at": "2013-03-12 20:31:14", "user": 27786, "id": 14801084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14810009", "text": "Ugh.  In a simple rails app using ruby 1.9.3 and mysql2 this isn't happening.  We're using jruby 1.7.1 and the jdbc adapters for the project where this is happening and I wonder if one of them (or one of the other numerous gems NOT in my simple app) is the culprit.\n\nWe have a workaround of setting TZ=UTC at startup, so that should see us through but I'd love to hear if you have any suggestions as to what might be the cause, or what to try next.  However, feel free to close this since I can't reproduce in a simple app.\n\nThanks for your help.\n", "created_at": "2013-03-12 22:28:47", "user": 1864022, "id": 14810009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14823398", "text": "It's a bug in 3.2.x that's been fixed in 4.0:\n\n``` irb\nLoading development environment (Rails 3.2.12)\n>> ENV['TZ'] = 'America/New_York'\n>> Time.zone = 'UTC'\n>> Time.zone.parse('2013-03-10 02:00:00')\n=> Sun, 10 Mar 2013 03:00:00 UTC +00:00\n```\n\n``` irb\nLoading development environment (Rails 4.0.0.beta1)\n>> ENV['TZ'] = 'America/New_York'\n>> Time.zone = 'UTC'\n>> Time.zone.parse('2013-03-10 02:00:00')\n=> Sun, 10 Mar 2013 02:00:00 UTC +00:00\n```\n\nBasically the implementation of `ActiveSupport::TimeZone.parse` relies on `Time.parse` in 3.2.x and it does it in the context of the local time zone. I think I can clean it up and still maintain backwards compatibility with 1.8.7 and I'll add a regression test on master. Sorry, it's too late to make 3.2.13 but it'll be in 3.2.14.\n", "created_at": "2013-03-13 04:06:13", "user": 6321, "id": 14823398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21694451", "text": "Minor gripe: I think this provides poorer error messages in at least one case\n\n``` ruby\n# rails 3.2.13\nTime.zone.parse('2013-01-01 7:77') # => ArgumentError, \"invalid date\"\n# rails 3.2.14\nTime.zone.parse('2013-01-01 7:77') # => ArgumentError, \"argument out of range\"\n```\n\nNot a big deal, just thought I'd mention it.  Thanks for wrestling with time zones so I don't have to.\n", "created_at": "2013-07-29 00:29:47", "user": 380809, "id": 21694451}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This was tested on a new Rails 4 beta-1 install using Postgres.\n\nWhen there isn't an existing Product that matches, I'd normally expect first_or_initialize to set the field specified in the 'where' clause. In this case, the match takes place on an hstore column.\n\nSo I would expect for:\n\n``` ruby\n@product = Product.where( \"properties -> 'rating' = 'PG-13'\" ).first_or_initialize\n@product.rating == 'PG-13'  # this doesn't work; rating is nil\n```\n\nSample code, test and output here:\nhttps://gist.github.com/rynmng/5139435\n", "labels": ["PostgreSQL", "With reproduction steps", "activerecord"], "number": 9679, "updated_at": "2016-01-20 15:32:30", "user": 144899, "closed_at": "None", "id": 11907017, "title": ".first_or_initialize doesn't set key/value on hstore column", "url": "https://api.github.com/repos/rails/rails/issues/9679", "created_at": "2013-03-12 02:12:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14754992", "text": "For this syntax to work, the where values must be given as a hash:\n\n``` ruby\n>> Post.where(title: \"omglol\").first_or_initialize\n  Post Load (0.6ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"title\" = 'omglol' ORDER BY \"posts\".\"id\" ASC LIMIT 1\n=> #<Post id: nil, title: \"omglol\", body: nil, created_at: nil, updated_at: nil>\n>> Post.where('title = \"omglol\"').first_or_initialize\n  Post Load (0.3ms)  SELECT \"posts\".* FROM \"posts\" WHERE (title = \"omglol\") ORDER BY \"posts\".\"id\" ASC LIMIT 1\n=> #<Post id: nil, title: nil, body: nil, created_at: nil, updated_at: nil>\n```\n\nOtherwise there's no way to know which attributes should be initialized. Can you try that way to see if it works properly with hstore?\n", "created_at": "2013-03-12 02:15:38", "user": 26328, "id": 14754992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755272", "text": "I'm fairly new to this hstore querying style so please bear with me. Is there a hash-style syntax that should now be used instead? I don't see how I can use the style that you suggested.\n\nI'm using this:\n\n``` ruby\nproduct = Product.where( \"properties -> 'rating' = 'PG-13'\" )\n  Product Load (1.1ms)  SELECT \"products\".* FROM \"products\" WHERE (properties -> 'rating' = 'PG-13')\n```\n\nHow would I indicate that 'ratings' is on Product.properties instead of Product directly using the hash-style?\n", "created_at": "2013-03-12 02:26:58", "user": 144899, "id": 14755272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755846", "text": "As far as I know, when querying an hstore column the where clause must be specified as a string because of the querying syntax (http://www.postgresql.org/docs/9.1/static/hstore.html#HSTORE-OP-TABLE). It would be amazing if you could provide a hash representing the keys and values and they could be translated into hstore syntax, but I don't think that functionality exists yet. \n\n``` ruby\nproduct = Product.where({properties: {rating: \"PG-13\"}})\n```\n\nIf it did exist, I assume that it would go a long way to solving this issue. I assume it would require a MongoDB-type syntax for comparisons beyond equals.\n\n``` ruby\nproduct = Product.where({properties: {rating: {$ne: \"PG-13\"}}})\n```\n\nI'm not super familiar with the implementation details of hstore support in Rails 4 so I could be way off base.\n\nAll of this being said, I believe there's a pretty simple workaround in the short term:\n\n``` ruby\nproduct = Product.where(\"properties -> 'rating' = 'PG-13'\").first\n\nif product.nil?\n  product = Product.new\n  product.rating = \"PG-13\"\n  product.save!\nend\n```\n", "created_at": "2013-03-12 02:50:03", "user": 144897, "id": 14755846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14755933", "text": "@carlosantoniodasilva I tried your suggested syntax in console:\n\n``` ruby\n>> p = Product.where( rating: 'PG-13')\n  Product Load (0.4ms)  SELECT \"products\".* FROM \"products\" WHERE \"products\".\"rating\" = 'PG-13'\nPG::Error: ERROR:  column products.rating does not exist\n```\n", "created_at": "2013-03-12 02:53:25", "user": 144899, "id": 14755933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14769935", "text": "@fightingtheboss thanks, that probably means there's no way to set a default for that hstore column that way.\n\n@rynmng this apparently means that there's no `rating` column in your `products` table.\n\n@rafaelfranca @tenderlove do you have anything in mind that could allow us to initialize hstore values like this?\n", "created_at": "2013-03-12 11:23:56", "user": 26328, "id": 14769935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16113781", "text": "Does it work with [find_or_initialize_by](http://edgeapi.rubyonrails.org/classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by)? The usage of `first_or_initialize` is silently deprecated because it has some bad side effects.\n", "created_at": "2013-04-09 13:56:57", "user": 5402, "id": 16113781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18549707", "text": "What is the state of this issue?\n", "created_at": "2013-05-28 13:21:44", "user": 5402, "id": 18549707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19873329", "text": "It's been a few months since anyone but @senny has said anything here, and it seems like this is all expected.\n\nIf anyone knows how to enhance Rails in this way, please send a pull request. Thanks.\n", "created_at": "2013-06-23 12:40:36", "user": 27786, "id": 19873329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/110962767", "text": "This should be reopened. Failing test is at https://github.com/joevandyk/rails/commit/44772b721a1285f77f786ae1d849be2d899c8121\n\nOutput:\n\n```\n  1) Error:\nPostgresqlHstoreTest#test_find_or_initialize_by:\nActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing\nFROM-clause entry for table \"settings\"\nLINE 1: SELECT  \"hstores\".* FROM \"hstores\" WHERE \"settings\".\"one\" = ...\n                                                 ^\n: SELECT  \"hstores\".* FROM \"hstores\" WHERE \"settings\".\"one\" = $1 LIMIT $2\n    activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:628:in `prepare'\n    activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:628:in `prepare_statement'\n    activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:589:in `exec_cache'\n    activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb:576:in `execute_and_clear'\n    activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:160:in `exec_query'\n    activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:369:in `select_prepared'\n    activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:39:in `select_all'\n    activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:70:in `select_all'\n    activerecord/lib/active_record/querying.rb:39:in `find_by_sql'\n    activerecord/lib/active_record/relation.rb:691:in `exec_queries'\n    activerecord/lib/active_record/relation.rb:572:in `load'\n    activerecord/lib/active_record/relation.rb:252:in `to_a'\n    activerecord/lib/active_record/relation/finder_methods.rb:487:in `find_take'\n    activerecord/lib/active_record/relation/finder_methods.rb:100:in `take'\n    activerecord/lib/active_record/relation/finder_methods.rb:78:in `find_by'\n    activerecord/lib/active_record/relation.rb:233:in `find_or_initialize_by'\n```\n", "created_at": "2015-06-11 01:31:13", "user": 1179, "id": 110962767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/111035550", "text": "@joevandyk thanks for confirming.\n", "created_at": "2015-06-11 08:01:30", "user": 5402, "id": 111035550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/166952160", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-12-23 17:37:19", "user": 7468109, "id": 166952160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/166954479", "text": "it's still a problem in 4-2-stable.\n\nOn Wed, Dec 23, 2015 at 9:38 AM, Ruby on Rails Bot <notifications@github.com\n\n> wrote:\n> \n> This issue has been automatically marked as stale because it has not been\n> commented on for at least\n> three months.\n> \n> The resources of the Rails team are limited, and so we are asking for your\n> help.\n> \n> If you can still reproduce this error on the 4-2-stable, 4-1-stable\n> branches or on master,\n> please reply with all of the information you have about it in order to\n> keep the issue open.\n> \n> Thank you for all your contributions.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/rails/rails/issues/9679#issuecomment-166952160.\n", "created_at": "2015-12-23 17:45:38", "user": 1179, "id": 166954479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/166958663", "text": "And in master?\n", "created_at": "2015-12-23 17:57:22", "user": 47848, "id": 166958663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/167482010", "text": "Still happens on master.\n", "created_at": "2015-12-28 04:35:11", "user": 1179, "id": 167482010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/168241418", "text": "Bump. Similar issue, using first_or_create in Rails 5betaTrying to create new record from hash of attributes which includes an `hstore` column. \n\n_My code:_\nAttribute hashes:\n\n``` Ruby\nmarvel = {\n  name: 'Marvel',\n  description: 'This is the standard shadow template of the marvel kit',\n  shadow_params: {\n    led: '0',\n    pb: '0',\n    pb_lambda: '0' }\n}\narduino_lock = {\n  name: 'arduino_lock',\n  description: 'This is the standard shadow template of an Arduino lock',\n  shadow_params: {\n    door: 'closed',\n    master_code: '424242',\n    valid_codes: %w(254545 123456 654321)\n  }\n}\niphone = {\n  name: 'iPhone',\n  description: 'This is the standard shadow template of an iPhone for tracking',\n  shadow_params: {\n    location: {\n      lat: '',\n      lon: '',\n      timestamp: ''\n    }\n  }\n}\n```\n\n_Then doing a batch first or create on those hashes:_\n\n``` Ruby\n[marvel, arduino_lock, iphone].each do |type|\n  ThingType.where(type).first_or_create\nend\n```\n\n**The SQL that is generated has the `hstore` attribute listed as a separate table instead of a column.**\n\n``` SQL\n SELECT \"things\".* FROM \"things\" WHERE \"things\".\"name\" = $1 AND \"things\".\"description\" = $2 AND \"shadow_params\".\"led\" = $3 AND \"shadow_params\".\"pb\" = $4 AND \"shadow_params\".\"pb_lambda\" = $5\n```\n\n**Resulting in the following `ActiveRecord`Error:**\n\n``` console\nActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"shadow_params\"\nLINE 1: ...me\" = $1 AND \"thing_types\".\"description\" = $2 AND \"shadow_pa...\n```\n", "created_at": "2015-12-31 20:12:13", "user": 1916691, "id": 168241418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/172482714", "text": "@cdurante We can't query HStore columns using hash like syntax as of now. Please check this commit - https://github.com/prathamesh-sonpatki/rails/commit/ad08072249f85732abe4de408a0316c6b7bfaa99.\n\nBecause the hash like syntax does not work and we have to pass string query to `where` for querying HStore columns, `first_or_create` does not work with HStore columns. Because it expects the arguments to be a hash, not a string.\n\n``` ruby\n>> p = Profile.find_or_create_by(\"settings->'color' = 'Black'\")\n  Profile Load (1.3ms)  SELECT  \"profiles\".* FROM \"profiles\" WHERE (settings->'color' = 'Black') LIMIT $1  [[\"LIMIT\", 1]]\nArgumentError: When assigning attributes, you must pass a hash as an argument.\n```\n\nIt would be cool to allow hash like syntax for hstore columns though, but I think we will need to make changes in Arel first to build proper AST for HSTore columns. Currently it treats the hstore column name as second table name if passed in hash like syntax.\n\nHere is sample AST for above query\n\n```\n#<Arel::SelectManager:0x007fedd233bdd8 @ctx=#<Arel::Nodes::SelectCore:0x007fedd233bd38 @source=#<Arel::Nodes::JoinSource:0x007fedd233bce8 @left=#<Arel::Table:0x007fedd23e0450 @name=\"profiles\", @columns=nil, @aliases=[], @type_caster=#<ActiveRecord::TypeCaster::Map:0x007fedd23e04a0 @types=Profile (call 'Profile.connection' to establish a connection)>, @table_alias=nil>, @right=[]>, @top=#<Arel::Nodes::Top:0x007fedd233b568 @expr=#<Arel::Nodes::BindParam:0x007fedd233b5b8>>, @set_quantifier=nil, @projections=[#<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x007fedd23e0450 @name=\"profiles\", @columns=nil, @aliases=[], @type_caster=#<ActiveRecord::TypeCaster::Map:0x007fedd23e04a0 @types=Profile (call 'Profile.connection' to establish a connection)>, @table_alias=nil>, name=\"*\">], @wheres=[#<Arel::Nodes::And:0x007fedd233b6f8 @children=[#<Arel::Nodes::Grouping:0x007fedd233b720 @expr=\"settings->'color' = 'Black'\">]>], @groups=[], @havings=[], @windows=[]>, @bind_values=[], @ast=#<Arel::Nodes::SelectStatement:0x007fedd233bd88 @cores=[#<Arel::Nodes::SelectCore:0x007fedd233bd38 @source=#<Arel::Nodes::JoinSource:0x007fedd233bce8 @left=#<Arel::Table:0x007fedd23e0450 @name=\"profiles\", @columns=nil, @aliases=[], @type_caster=#<ActiveRecord::TypeCaster::Map:0x007fedd23e04a0 @types=Profile (call 'Profile.connection' to establish a connection)>, @table_alias=nil>, @right=[]>, @top=#<Arel::Nodes::Top:0x007fedd233b568 @expr=#<Arel::Nodes::BindParam:0x007fedd233b5b8>>, @set_quantifier=nil, @projections=[#<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x007fedd23e0450 @name=\"profiles\", @columns=nil, @aliases=[], @type_caster=#<ActiveRecord::TypeCaster::Map:0x007fedd23e04a0 @types=Profile (call 'Profile.connection' to establish a connection)>, @table_alias=nil>, name=\"*\">], @wheres=[#<Arel::Nodes::And:0x007fedd233b6f8 @children=[#<Arel::Nodes::Grouping:0x007fedd233b720 @expr=\"settings->'color' = 'Black'\">]>], @groups=[], @havings=[], @windows=[]>], @orders=[], @limit=#<Arel::Nodes::Limit:0x007fedd233b590 @expr=#<Arel::Nodes::BindParam:0x007fedd233b5b8>>, @lock=nil, @offset=nil, @with=nil>>\n```\n\nIt has `@left=#<struct Arel::Attributes::Attribute relation=#<Arel::Table:0x007fcc66366868 @name=\"settings\"` for representing `settings` which is a hstore column on profiles table.\n", "created_at": "2016-01-18 09:57:04", "user": 621238, "id": 172482714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/173239334", "text": "`find_or_initialize` will always fail if we pass hash as argument for hstore because we will first try to find the record and _then_ initialize new record as per current limitations of querying hstore columns.\n\n``` ruby\n> p = Profile.find_or_initialize_by(settings: { color: 'red' })\nActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"settings\"\nLINE 1: SELECT  \"profiles\".* FROM \"profiles\" WHERE \"settings\".\"color...\n                                                   ^\n: SELECT  \"profiles\".* FROM \"profiles\" WHERE \"settings\".\"color\" = $1 LIMIT $2\n```\n\nAnd if we pass string query required for querying hstore columns then `assign_attributes` will complain because we passed string instead of hash.\n\n``` ruby\n>> p = Profile.find_or_initialize_by(\"settings->'color' = 'blue'\")\n  Profile Load (0.4ms)  SELECT  \"profiles\".* FROM \"profiles\" WHERE (settings->'color' = 'blue') LIMIT $1  [[\"LIMIT\", 1]]\nArgumentError: When assigning attributes, you must pass a hash as an argument.\n```\n\ncc @sgrif Should the second query work?\n", "created_at": "2016-01-20 15:32:30", "user": 621238, "id": 173239334}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "A previous commit swapped out a call to select for a call to grep in\ntime_zone_options_for_select. This behavior actually causes the\nregexp priority option to stop working.\n\nActiveSupport::TimeZone overrides the =~ operator which is what the\nselect block was using previously. Enumerable#grep\nchecks pattern === element and in this case that would be /US/ ===\nActiveSupport::TimeZone which does not work because\nActiveSupport::TimeZone does not supply an implicit converting to_str\nmethod, only an explicit to_s method.\n\nIt would be impossible to provide a to_str method that behaves\nidentically to the =~ method provided on ActiveSupport::TimeZone\nso the only option is to revert back to using select with =~.\n", "labels": ["activesupport"], "number": 9680, "updated_at": "2014-06-17 15:28:48", "user": 47326, "closed_at": "2013-03-31 22:46:48", "id": 11911554, "title": "Revert grep to select since they are not the same", "url": "https://api.github.com/repos/rails/rails/issues/9680", "created_at": "2013-03-12 05:57:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14759867", "text": "Here is the commit that this reverts along with some internal monologue from when I was looking into the problem: https://github.com/rails/rails/commit/b4051edf841c8a6780df9af7afa9892bfd811c79\n", "created_at": "2013-03-12 05:58:34", "user": 47326, "id": 14759867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14759926", "text": "Regression test would be good too. (presuming there wasn't a test failure accompanying b4051ed)\n", "created_at": "2013-03-12 06:01:26", "user": 5470, "id": 14759926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14760003", "text": "There wasn't a test failure but that's because the test was modified and === was stubbed out on the regexp to return something it shouldn't.  Will try to come up with a suitable regression test.\n", "created_at": "2013-03-12 06:04:39", "user": 47326, "id": 14760003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14760677", "text": "I amended my commit to take a stab at a regression test.  The test cases are so mocked up though that it's somewhat contrived.  It should at least make it clear to the next person that tries to replace the #select call with a #grep call that it won't work in the real world.\n", "created_at": "2013-03-12 06:35:01", "user": 47326, "id": 14760677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14771083", "text": "@bdmac please issue a revert commit of the original one, then add yours on top of it with a regression test, it's better if they are different commits.\n\nI still wonder whether we should fix AS::TZ instead =(\n", "created_at": "2013-03-12 11:56:00", "user": 26328, "id": 14771083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14780787", "text": "The problem is that the current implementation of =~ checks two values against the regex. It would appear the fix to get pattern === TZ (for grep to work) would require the addition of a #to_str method on TZ but not sure how we can handle the two values from =~ to maintain parity between the two versions. If we just add to_str that returns @name then we would still be breaking anyone using priority_zones regexes that are matching on the other =~ value. Maybe that's ok?\n—\nSent from Mailbox for iPhone\n\nOn Tue, Mar 12, 2013 at 4:56 AM, Carlos Antonio da Silva\nnotifications@github.com wrote:\n\n> @bdmac please issue a revert commit of the original one, then add yours on top of it with a regression test, it's better if they are different commits.\n> \n> ## I still wonder whether we should fix AS::TZ instead =(\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/9680#issuecomment-14771083\n", "created_at": "2013-03-12 15:12:25", "user": 47326, "id": 14780787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14781816", "text": "I added a #to_str on AS::TZ and ran the tests and they still passed including the modified version from https://github.com/rails/rails/commit/b4051ed.  I'm still not entirely comfortable whether that's a good indication that we're not \"really\" breaking any backwards compatibility since there were no tests to catch this problem in the first place.  The amount of stubbing happening makes it hard to really see in testing.\n", "created_at": "2013-03-12 15:28:08", "user": 47326, "id": 14781816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15064933", "text": "Any further word on this PR?\n", "created_at": "2013-03-18 16:28:02", "user": 47326, "id": 15064933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15065226", "text": "@bdmac It's on my hands now to take a look, thanks.\n", "created_at": "2013-03-18 16:32:32", "user": 26328, "id": 15065226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15492077", "text": "@carlosantoniodasilva anything I can do to help here? My app makes use of this feature so I'd love to at least see this fix merged as a stop-gap so I can bundle update rails to get my TZ selects working again. :)\n", "created_at": "2013-03-26 22:11:05", "user": 47326, "id": 15492077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15520348", "text": "@bdmac I'm having some rush days traveling/working here, sorry. Can you separate the changes in two different commits? One is reverting the original so that it's more trackable, other adding your test on top of the revert commit.\n\nAlso, not sure if we can use something like real TZ instead of stubbing, or at least make the stub raise an error instead of returning `[]` because it should never receive `===`, wdyt?\n", "created_at": "2013-03-27 12:27:41", "user": 26328, "id": 15520348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15520358", "text": "Btw, thanks for keeping this up! :smile:\n", "created_at": "2013-03-27 12:27:52", "user": 26328, "id": 15520358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15553528", "text": "@carlosantoniodasilva split the commit in two and swapped in an exception instead of returning `[]` as requested.\n", "created_at": "2013-03-27 21:13:47", "user": 47326, "id": 15553528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15699309", "text": "@bcmac Thanks!\n", "created_at": "2013-03-31 22:46:53", "user": 26328, "id": 15699309}], "assignees": [26328, 26328], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix typo in DependenciesTestHelpers module name, and relevant requires\n", "labels": [], "number": 9681, "updated_at": "2016-02-22 14:25:41", "user": 567626, "closed_at": "2013-03-12 10:55:31", "id": 11911746, "title": "Fix typo in DependenciesTestHelpers module name", "url": "https://api.github.com/repos/rails/rails/issues/9681", "created_at": "2013-03-12 06:05:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14766649", "text": "looks good to me. /cc @carlosantoniodasilva \n", "created_at": "2013-03-12 09:51:26", "user": 5402, "id": 14766649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14768969", "text": "Thank you.\n", "created_at": "2013-03-12 10:55:39", "user": 26328, "id": 14768969}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added braces to follow consistent syntax in the test case.\n", "labels": [], "number": 9682, "updated_at": "2014-07-04 15:47:04", "user": 3786236, "closed_at": "2013-03-12 12:56:49", "id": 11914268, "title": "Added braces to follow consistent syntax", "url": "https://api.github.com/repos/rails/rails/issues/9682", "created_at": "2013-03-12 08:12:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14773424", "text": "Sorry but we don't accept cosmetic changes. Thank you\n", "created_at": "2013-03-12 12:56:49", "user": 47848, "id": 14773424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14774523", "text": "@rafaelfranca: Could you please explain how the commit #e1f81dd is a cosmetic change, so that I can avoid making such commits in the future.\n", "created_at": "2013-03-12 13:22:19", "user": 3786236, "id": 14774523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14774658", "text": "It is not adding any feature, it is not fixing any behaviour, it doesn't improve the readability of the code (after it you will have to go up and down in the file in order to understand a test case).\n\nFor sure it is a good refactoring but it will messy up the git history and will make harder to track down real changes. This is why we avoid to accept this kind of change.\n", "created_at": "2013-03-12 13:25:28", "user": 47848, "id": 14774658}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## 1.\n\nThe similarity of `Relation#uniq` to `Array#uniq` is confusing. Since our\nRelation API is close to SQL terms I renamed `#uniq` to `#distinct`.\n\nThere is no deprecation. `#uniq` and `#uniq!` are aliases and will continue\nto work. I also updated the documentation to promote the use of `#distinct`.\nc7f94f0\n## 2.\n\nDeprecate the `:distinct` option for `Relation#count`.\nWe moved more and more away from passing options to finder / calculation\nmethods. The `:distinct` option in `#count` was one of the remaining places.\nSince we can now combine `Relation#distinct` with `Relation#count` the option\nis no longer necessary and can be deprecated.\n", "labels": ["activerecord"], "number": 9683, "updated_at": "2014-06-17 19:02:23", "user": 5402, "closed_at": "2013-03-15 13:21:54", "id": 11917004, "title": "rename `Relation#uniq` to `Relation#distinct`", "url": "https://api.github.com/repos/rails/rails/issues/9683", "created_at": "2013-03-12 09:57:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14766946", "text": "@jonleighton @carlosantoniodasilva what do you think?\n", "created_at": "2013-03-12 09:58:44", "user": 5402, "id": 14766946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14772567", "text": "Overall it looks good, just afraid that people could be using `uniq_value` directly, and that could break?\n", "created_at": "2013-03-12 12:35:19", "user": 26328, "id": 14772567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14772643", "text": "@carlosantoniodasilva we could alias it too...\n", "created_at": "2013-03-12 12:37:00", "user": 5402, "id": 14772643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14958153", "text": "Seems good to me. I agree about aliasing `uniq_values`. We should probably explicitly mention that `uniq` is \"soft deprecated\" and may be switched back to doing `to_a.uniq` in the future, so new code should definitely be written using `distinct`.\n", "created_at": "2013-03-15 12:38:26", "user": 1979, "id": 14958153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959202", "text": "@jonleighton I alias `#uniq_value` and described the silent deprecation.\n", "created_at": "2013-03-15 13:04:24", "user": 5402, "id": 14959202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14960141", "text": ":+1: :heart:\n", "created_at": "2013-03-15 13:25:30", "user": 26328, "id": 14960141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22827535", "text": "this seems wrong, distinct is a parameter specifically to the count expression `COUNT(DISTINCT date(attr))`,  so it's completely logical for it to be a parameter to the AR analogue of COUNT, the count method.  Separating distinct from count does not make sense.  \n\n```\n.count('date(attr)', distinct: true)\n```\n\nis this supposed to be a replacement for the above?\n\n```\n.distinct. ...possible intervening chain... .count('date(attr)')\n```\n\nthis both reads wrong, and produces unintended (albeit innocuous in this case) sql:\n\n```\nSELECT DISTINCT COUNT(DISTINCT date(created_at))\n```\n", "created_at": "2013-08-18 09:35:58", "user": 895588, "id": 22827535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22876409", "text": "`.count('DISTINCT date(attr)')` should work fine.\n", "created_at": "2013-08-19 14:37:15", "user": 47848, "id": 22876409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22883786", "text": "so would `.count_by_sql`, but why is it deemed necessary to break `count('expression', distinct: true)`\n", "created_at": "2013-08-19 16:15:24", "user": 895588, "id": 22883786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22888048", "text": "The reason is to make the API consistent with our view of not passing options to finders/calculations methods. It is a matter of reducing the API possibilities to focus on what is important.\n\nThis feature in my opinion doesn't add anything over `.count('DISTINCT date(attr)')`, so we don't need to keep it.\n", "created_at": "2013-08-19 17:14:08", "user": 47848, "id": 22888048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22892280", "text": "> This feature in my opinion doesn't add anything ...\n\nThat may be an argument for rejecting a feature request, but not for introducing a breaking change.\nWe are talking about one line of code: `distinct = options[:distinct]`\nIt and the code that relies on it `.count('expression', distinct: true)` are not so offensive that a breaking change is needed.\n", "created_at": "2013-08-19 18:12:38", "user": 895588, "id": 22892280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22893614", "text": "In my opinion keeping the API consistent is worth a breaking change. There were also special cases where `distinct: true` did not work. For example PostgreSQL allows you to do a distinct on multiple columns:\n\n``` sql\nSELECT COUNT(DISTINCT(name, email)) FROM members;\n```\n\nIt's better to let the user know that he can specify the exact count clause than abstracting that away with the `distunct: true` option.\n\n``` ruby\nMember.count(\"DISTINCT(name, email)\")\n```\n\nAlso the `Relation#distinct` method is there to be combined with `select´:\n\n```\nPerson.select(\"name\").distinct.count\n```\n\nThose two avenues provide a more complete API and there is no more need to keep the third option (passing `distinct: true`) around.\n", "created_at": "2013-08-19 18:31:16", "user": 5402, "id": 22893614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22895299", "text": "> That may be an argument for rejecting a feature request, but not for introducing a breaking change.\n\nYes, it is an argument to introducing a breaking change too for two reasons:\n1. Rails Core don't want to maintain this feature in the future. The behavior introduced by this feature is not worth the maintenance cost or the doubts that it can introduce for the users like the examples @senny added in the last comment. \n2. Rails 4 was a major release so breaking changes are expected and it was the best moment to remove code that doesn't fit the direction the framework is taking or doesn't seems a good API.\n", "created_at": "2013-08-19 18:51:36", "user": 47848, "id": 22895299}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After adding `has_secure_password` to my model, this happens in the console:\n\n```\n$ rails c\n~/tmp/sample_app_2nd_ed $ rails c\nLoading development environment (Rails 3.2.12)\nWelcome to RAILS. You are using ruby 1.9.3p374 (2013-01-15 revision 38858) [x86_64-darwin12.2.1]. Have fun ;)\n>> User\nArgumentError: wrong number of arguments (2 for 1)\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:249:in `require'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activemodel-3.2.12/lib/active_model/secure_password.rb:37:in `has_secure_password'\n    from /Users/florian/tmp/sample_app_2nd_ed/app/models/user.rb:3:in `<class:User>'\n    from /Users/florian/tmp/sample_app_2nd_ed/app/models/user.rb:1:in `<top (required)>'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:469:in `load'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:469:in `block in load_file'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:639:in `new_constants_in'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:468:in `load_file'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:353:in `require_or_load'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:502:in `load_missing_constant'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:192:in `block in const_missing'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:190:in `each'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/activesupport-3.2.12/lib/active_support/dependencies.rb:190:in `const_missing'\n    from (irb):1\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/railties-3.2.12/lib/rails/commands/console.rb:47:in `start'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/railties-3.2.12/lib/rails/commands/console.rb:8:in `start'\n    from /Users/florian/.rvm/gems/ruby-1.9.3-p374/gems/railties-3.2.12/lib/rails/commands.rb:41:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n\nWhat I'm doing on my machine to reproduce this, starting with no gems installed (except rake, bundler and rvm):\n\n``` sh\n$ git clone https://github.com/railstutorial/sample_app_2nd_ed.git\n$ cd sample_app_2nd_ed\n$ bundle\n$ rails c\n```\n\nRunning the specs (`$ rspec`) doesn't throw this error, all tests pass seamlessly. `require 'bcrypt'` in a plain `$ irb` session doesn't throw anything either. \n\nThere's no error thrown either, if I remove `has_secure_password` from the model.\n\nMy setup:\n- OS X Mountain Lion\n- Ruby 1.9.3\n- RVM 1.8.0\n- Rails 3.2.12\n\nI asked some people if they could reproduce this, but no luck. So I guess it has something to do with my setup?\n", "labels": ["activemodel"], "number": 9684, "updated_at": "2013-11-06 14:25:01", "user": 1564556, "closed_at": "2013-03-12 20:30:50", "id": 11924100, "title": "has_secure_password: ArgumentError: wrong number of arguments (2 for 1)", "url": "https://api.github.com/repos/rails/rails/issues/9684", "created_at": "2013-03-12 13:33:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14775643", "text": "does it happen if you `require 'rubygems'` first?\n", "created_at": "2013-03-12 13:46:03", "user": 5402, "id": 14775643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14775969", "text": "In the Rails console, like this?\n\n``` sh\n>> require 'rubygems' #=> false\n>> User\n[error]\n```\n\nIsn't rubygems loaded in by default since Ruby 1.9?\n", "created_at": "2013-03-12 13:52:38", "user": 1564556, "id": 14775969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14776116", "text": "@js-coder yea I think so, just wanted to make sure as the line in the backtrace references `gem`: https://github.com/rails/rails/blob/3-2-stable/activemodel/lib/active_model/secure_password.rb#L37\n\nWhat version of rubygems are you using?\n", "created_at": "2013-03-12 13:55:05", "user": 5402, "id": 14776116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14776858", "text": "1.8.25. Should I upgrade to the new 2.0 release?\n", "created_at": "2013-03-12 14:07:25", "user": 1564556, "id": 14776858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14777175", "text": "I couldn't reproduce this either :C Maybe rvm is biting you? Try emptying your gemsets and then bundling again.\n", "created_at": "2013-03-12 14:12:39", "user": 98363, "id": 14777175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14778044", "text": "How would I do this? :) `sudo rvm gemset empty global` just throws a bunch of errors.\n", "created_at": "2013-03-12 14:29:20", "user": 1564556, "id": 14778044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14784213", "text": "I did this:\n\n``` bash\nrvm gemset empty\ngem install bundler\nbundle install\n```\n\nbtw, I'm running rubygems version 1.8.23 (and couldn't reproduce this).\n", "created_at": "2013-03-12 16:01:39", "user": 98363, "id": 14784213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14787585", "text": "Emptying the gemset always threw some error, so I reinstalled RVM. Emptied the gemset, etc., same error.\nHowever I noticed that it doesn't happen when using Ruby 2.0.\n", "created_at": "2013-03-12 16:53:24", "user": 1564556, "id": 14787585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14801046", "text": "> sudo rvm \n\nnever do this. use `rvmsudo` instead. If you `sudo`, you switch users, and then your rvm isn't gonna work.\n\nAnyway, until we can prove this is issue with Rails, I'm giving it a close. Seems like a wonky environment.\n", "created_at": "2013-03-12 20:30:50", "user": 27786, "id": 14801046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14802224", "text": "Alright. But closing, seriously? :/ What am I supposed to do now? I can hardly develop a Rails application like that.\n", "created_at": "2013-03-12 20:48:14", "user": 1564556, "id": 14802224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14803975", "text": "You can keep discussing it here, but we only keep issues open for bugs that are in Rails. You can also get help on StackOverflow, IRC, or on rubyonrails-talk.\n", "created_at": "2013-03-12 21:16:58", "user": 27786, "id": 14803975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14812404", "text": "@js-coder I've just downloaded your sample app following your steps, bundled it, and:\n\n``` ruby\n$ rails c\nLoading development environment (Rails 3.2.12)\n>> User\n=> User(Table doesn't exist)\n```\n\nNo error. Not sure what might be going on there. I'm also on OSX and tested under Ruby 1.9.3-p392.\n", "created_at": "2013-03-12 23:21:00", "user": 26328, "id": 14812404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14812741", "text": "I got the same message as @carlosantoniodasilva, even after running the migrations.\n\n@js-coder Did you try upgrading rubygems? It shouldn't be required, but to be honest, I don't know what else to suggest...\n", "created_at": "2013-03-12 23:28:47", "user": 98363, "id": 14812741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14830915", "text": "Wow, guys, I think it's working now!\n\nI upgraded to Rubygems 2.0.3. I'm using irbtools, and had the second snippet in my ~/.irbrc to load irbtools when using the Rails console: https://github.com/janlelis/irbtools#rails-notes However that threw an error on Rubygems 2.0.3, so I removed it. And now everything works as expected. :)\n\n```\n1.9.3p392 :002 > User\n => User(id: integer, name: string, email: string, created_at: datetime, updated_at: datetime, password_digest: string, remember_token: string, admin: boolean)\n```\n\nThanks for your help!\n", "created_at": "2013-03-13 09:09:13", "user": 1564556, "id": 14830915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14836170", "text": "Yeah, it sounded like there was something else around Rails that was doing\nweird things. Glad it worked :)\nOn Mar 13, 2013 4:09 AM, \"Florian H.\" notifications@github.com wrote:\n\n> Wow, guys, I think it's working now!\n> \n> I upgraded to Rubygems 2.0.3. I'm using irbtools, and had the second\n> snippet in my ~/.irbrc to load irbtools when using the Rails console:\n> https://github.com/janlelis/irbtools#rails-notes However that threw an\n> error on Rubygems 2.0.3, so I removed it. And now everything works as\n> expected. :)\n> \n> 1.9.3p392 :002 > User\n>  => User(id: integer, name: string, email: string, created_at: datetime, updated_at: datetime, password_digest: string, remember_token: string, admin: boolean)\n> \n> Thanks for your help!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9684#issuecomment-14830915\n> .\n", "created_at": "2013-03-13 11:28:03", "user": 98363, "id": 14836170}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Similar to `Time#all_*` methods, but with dates.\n", "labels": ["activesupport"], "number": 9685, "updated_at": "2014-06-14 15:56:22", "user": 241633, "closed_at": "2013-12-03 16:35:27", "id": 11926043, "title": "Added Date#all_week/month/quarter/year for generating date ranges", "url": "https://api.github.com/repos/rails/rails/issues/9685", "created_at": "2013-03-12 14:19:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14779173", "text": "I think it makes sense, but it needs a changelog entry. Thanks.\n", "created_at": "2013-03-12 14:47:41", "user": 26328, "id": 14779173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14780465", "text": "Added missing changelog entry.\n", "created_at": "2013-03-12 15:07:31", "user": 241633, "id": 14780465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959351", "text": "Sorry, closed accidentally.\n@carlosantoniodasilva can you review this again, please?\n", "created_at": "2013-03-15 13:08:18", "user": 241633, "id": 14959351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17260178", "text": "Hey @carlosantoniodasilva did you ever get a chance to re-review this?\n", "created_at": "2013-04-30 23:13:27", "user": 162976, "id": 17260178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29724748", "text": "I'll get back to it soon, sorry.\n", "created_at": "2013-12-03 16:26:35", "user": 26328, "id": 29724748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29724928", "text": "@dimko can you rebase it? Might have a changelog conflict. Thanks.\n", "created_at": "2013-12-03 16:28:16", "user": 26328, "id": 29724928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29725488", "text": "@carlosantoniodasilva done!\n", "created_at": "2013-12-03 16:33:44", "user": 241633, "id": 29725488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29725658", "text": "There we go, thanks!\n", "created_at": "2013-12-03 16:35:32", "user": 26328, "id": 29725658}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes issue #9170\n\nIt's connected with Arel issue: https://github.com/rails/arel/pull/172\n", "labels": ["activerecord"], "number": 9686, "updated_at": "2014-06-14 21:32:26", "user": 11562, "closed_at": "2013-03-15 12:50:18", "id": 11928747, "title": "Cast number to string in Postgres", "url": "https://api.github.com/repos/rails/rails/issues/9686", "created_at": "2013-03-12 15:15:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A patch was committed recently which quoted the extension name in the SQL for `enable_extension`. But the same wasn't done for `disable_extension`.\n", "labels": [], "number": 9687, "updated_at": "2014-06-26 15:16:40", "user": 4338, "closed_at": "2013-03-12 16:30:43", "id": 11932532, "title": "Also quote extension name in disable_extension", "url": "https://api.github.com/repos/rails/rails/issues/9687", "created_at": "2013-03-12 16:29:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14786304", "text": "Hooray!\n", "created_at": "2013-03-12 16:33:19", "user": 4338, "id": 14786304}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Document the possibility to use a hash of hashes for nested attributes for a one-to-many association (in addition to the documented possibility to use an array of hashes).\n\nAlign indentation in comments.\n\nThis is for 3-2-stable.  I have already pushed it to docrails master branch, but i do not know if i can update documentation in 3-2-stable myself i haven't found how.\n\nThis only updates comments.\n\nI have just spent some time figuring out that nested attributes work with a hash of hashes too.\n", "labels": ["docs"], "number": 9688, "updated_at": "2014-06-23 01:52:53", "user": 712698, "closed_at": "2013-04-13 22:11:27", "id": 11933112, "title": "3-2-stable documentation: the possibility to use a hash of hashes for nested attributes", "url": "https://api.github.com/repos/rails/rails/issues/9688", "created_at": "2013-03-12 16:41:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14841627", "text": "can you squash your commits together?\n", "created_at": "2013-03-13 13:44:19", "user": 5402, "id": 14841627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14842199", "text": "Yes, here.\n\nBy the way, i do not really know how _docrails_ project works.  If needed, i can submit a PR to _rails_ `master` directly.\n", "created_at": "2013-03-13 13:54:43", "user": 712698, "id": 14842199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14842299", "text": "Maybe i should use in 3-2 the usual hash notation in comments?\n", "created_at": "2013-03-13 13:56:18", "user": 712698, "id": 14842299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14842495", "text": "I think docrails only covers master. We don't do documentation backports for 3.2 (I may be wrong though).\n\nYou should definitely use 1.8 hash syntax on 3.2 :+1: \n", "created_at": "2013-03-13 14:00:12", "user": 5402, "id": 14842495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14842515", "text": "Changed to the usual hash syntax.\n", "created_at": "2013-03-13 14:00:39", "user": 712698, "id": 14842515}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14871765", "text": "Docrails only covers master, yes.\n", "created_at": "2013-03-13 22:07:51", "user": 27786, "id": 14871765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14889622", "text": "If in the future i want to suggest a change in `master` documentation, is it better to use docrails or rails directly?\n", "created_at": "2013-03-14 07:19:52", "user": 712698, "id": 14889622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14915315", "text": "Docrails is a fast-track. If you commit there it doesn't go through the normal review process, because doc-only commits generally need less review. If you're unsure about something, open a pull request, but then it needs to be reviewed and merged by someone, which can take a while.\n", "created_at": "2013-03-14 17:08:26", "user": 27786, "id": 14915315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14915563", "text": "Ok, thanks for there explanation. As this PR is also doc-only, i think it needs less review ;).\n", "created_at": "2013-03-14 17:12:38", "user": 712698, "id": 14915563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14916686", "text": "Right, but it gets lost in the 200 open pull requests, rather than just merged.\n", "created_at": "2013-03-14 17:31:18", "user": 27786, "id": 14916686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16337919", "text": "This is already in master: 99c741e35ba4cefc8883681f2363092cb8f0723e\n", "created_at": "2013-04-13 18:11:00", "user": 712698, "id": 16337919}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As in the topic. Instead of this:\n\n```\nassert_difference 'Article.count' do\n  assert_difference 'Post.count', 2 do\n    ...\n  end\nend\n```\n\nwe can use:\n\n```\nassert_difference 'Article.count' => 1, 'Post.count' => 2 do\n  ...\nend\n```\n", "labels": [], "number": 9689, "updated_at": "2014-07-04 15:47:00", "user": 1277281, "closed_at": "2013-03-15 14:19:29", "id": 11944837, "title": "Added possibility to pass a hash to assert_difference.", "url": "https://api.github.com/repos/rails/rails/issues/9689", "created_at": "2013-03-12 20:28:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14963035", "text": "Hey @michald thanks for your help to make Rails better!\n\nThis feature was already suggested some time ago. The PR was closed though and you can read up on the reasons here  #3989.\n\nAs it is a resubmission I'm closing the issue but feel free to ping me if you have questions.\nIf you want to propose new features for Rails you can also use the [Rails core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core) to get feedback from core members before you have to write the actual code.\n\nCheers,\nYves\n", "created_at": "2013-03-15 14:19:28", "user": 5402, "id": 14963035}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Document change to clashing named route selection. Rails 4 correctly prefers the first named route. (Likely from https://github.com/rails/journey/commit/98a9802a5c1f2d3a900461d10f5665a0d887dee7)\n", "labels": ["docs"], "number": 9690, "updated_at": "2014-06-26 19:54:18", "user": 402, "closed_at": "2013-03-13 20:44:14", "id": 11945949, "title": "Rails 4 upgrade notes about clashing named route selection changes", "url": "https://api.github.com/repos/rails/rails/issues/9690", "created_at": "2013-03-12 20:50:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14804005", "text": "/cc @fxn\n", "created_at": "2013-03-12 21:17:20", "user": 27786, "id": 14804005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14807968", "text": ":+1:\n", "created_at": "2013-03-12 22:07:40", "user": 26328, "id": 14807968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14846003", "text": "I'd like to log a warning when a route is skipped here:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/journey/routes.rb#L61\n\nI'm not sure how best to do that, though -- @steveklabnik or @carlosantoniodasilva have any ideas?\n", "created_at": "2013-03-13 14:59:12", "user": 402, "id": 14846003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14850116", "text": "@trevorturk this is what comes up to my mind right now:\n\n``` ruby\nif name\n  if named_routes[name]\n    ActiveSupport::Deprecation.warn(\"BOOM\")\n  else\n    named_routes[name] = route\n  end\nend\n```\n\nIt could be moved to a private method like `add_named_route` or something like that if necessary, to be called in that place, wdyt?\n", "created_at": "2013-03-13 16:00:02", "user": 26328, "id": 14850116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14850286", "text": "Yeah, I was thinking using `ActiveSupport::Deprecation` would be frowned upon, but it'd work!\n\nWant to work something up, or shall I?\n", "created_at": "2013-03-13 16:02:42", "user": 402, "id": 14850286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14852539", "text": "Hm right, I guess we should not use AS::Deprecation, it's probably better to use `ActionController::Base.logger.warn` right?\n", "created_at": "2013-03-13 16:36:26", "user": 26328, "id": 14852539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14856614", "text": "@carlosantoniodasilva took a stab at it in #9704 -- worked nicely in my local testing. If we go ahead with that, I'd like to update this PR to mention the logging -- much easier than trying to read through the `rake routes` output. \n", "created_at": "2013-03-13 17:36:41", "user": 402, "id": 14856614}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867083", "text": ":+1: on this, any other concerns we need to address before merging in this doc addition?\n", "created_at": "2013-03-13 20:40:22", "user": 59744, "id": 14867083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867249", "text": "IMO it's good to go -- I made a separate PR #9704 where we can discuss logging or any other helpful stuff we might consider doing. If we go ahead with that, I'll update this section as well. \n", "created_at": "2013-03-13 20:43:07", "user": 402, "id": 14867249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867321", "text": "Thank you\n", "created_at": "2013-03-13 20:44:38", "user": 47848, "id": 14867321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15678275", "text": ":heart:\n", "created_at": "2013-03-30 17:27:48", "user": 26328, "id": 15678275}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change the default logger for new Rails 4 apps to log to STDOUT. This way when starting an app, you can see the output on the console without tailing the logs file out of the box. Anyone who's serious about logging can replace this. I talked this over with @jeremy and @tenderlove. \n", "labels": [], "number": 9691, "updated_at": "2014-06-13 01:56:57", "user": 16457, "closed_at": "2013-03-15 17:09:10", "id": 11953198, "title": "Rails default logging to STDOUT", "url": "https://api.github.com/repos/rails/rails/issues/9691", "created_at": "2013-03-12 23:36:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14813225", "text": ":+1: \n", "created_at": "2013-03-12 23:42:23", "user": 4912, "id": 14813225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14813338", "text": "I'd like to refactor this so we aren't duping this code: https://github.com/rails/rails/blob/master/railties/lib/rails/application/bootstrap.rb#L42-L45\n\nSome suggestions of where to put that would be cool. Maybe we can add it to `ActionSupport::TaggedLogger`?\n", "created_at": "2013-03-12 23:45:42", "user": 16457, "id": 14813338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14814886", "text": "Yay pairing! I helped out with this, but it obviously needs a lot of work.\n", "created_at": "2013-03-13 00:32:16", "user": 27786, "id": 14814886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14853396", "text": "What if we do some refactoring like this: https://github.com/schneems/rails/compare/schneems;logger-config to make the log_target (i'm open to renaming this config) exposed without having to go through the `new/formatter/level` dance? \n", "created_at": "2013-03-13 16:49:17", "user": 59744, "id": 14853396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14942720", "text": "@steveklabnik @tenderlove @schneems thoughts?\n", "created_at": "2013-03-15 03:53:33", "user": 16457, "id": 14942720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14942751", "text": "Seems good. They'll need squashed, and we'll need a CHANGELOG entry.\n", "created_at": "2013-03-15 03:55:04", "user": 27786, "id": 14942751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14955522", "text": "rebased and squashed /cc @steveklabnik \n", "created_at": "2013-03-15 11:22:59", "user": 16457, "id": 14955522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14972990", "text": "Awesome! :heart:\n", "created_at": "2013-03-15 17:09:16", "user": 27786, "id": 14972990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14975643", "text": ":bomb: :heart: :heart_eyes: :smile:\n", "created_at": "2013-03-15 17:57:58", "user": 59744, "id": 14975643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14978781", "text": "This has now been reverted: https://github.com/rails/rails/commit/1a9055073dcc189b289a1e3f47cbc72ff7380f0a\n", "created_at": "2013-03-15 18:57:36", "user": 27786, "id": 14978781}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It doesn't make sense that if we don't confirm, we allow things\nto be saved.\n\nI'm submitting this as a PR because there is one test that implies this behavior was expected, so I'm curious if this was an oversight or if this is expected behavior.\n", "labels": [], "number": 9692, "updated_at": "2014-06-15 12:35:17", "user": 27786, "closed_at": "2013-03-13 03:55:16", "id": 11953634, "title": "Dis-allow nil confirmations.", "url": "https://api.github.com/repos/rails/rails/issues/9692", "created_at": "2013-03-12 23:52:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14813655", "text": "Apparently @josevalim has something to say about this.\n", "created_at": "2013-03-12 23:55:09", "user": 27786, "id": 14813655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14815894", "text": "This behavior is intentional. The goal of validations is too confirm user\ninput. A form will always send a blank value if the field is there, so the\nvalidation is triggered.\n\nNow, on console and apis, you don't need to set the field, exactly because\nit accepts nil.\n\nTherefore this is a feature, there is a post on plataformatec blog, but I'm\non my phone, so you will have to google it. :)\n\nThis topic comes once in a while, it would be worthy to add it to the\ndocumentation. If you want to really not accept nil, add a presence check.\n\n>    -\n\n## \n\n_José Valim_\nwww.plataformatec.com.br\nSkype: jv.ptec\nFounder and Lead Developer\n", "created_at": "2013-03-13 01:01:37", "user": 9582, "id": 14815894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14823164", "text": "I will add some documentation, I think this behavior is pretty terrible, but if that's the way it is, that's the way it is.\n", "created_at": "2013-03-13 03:55:16", "user": 27786, "id": 14823164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14825164", "text": "Agreed. This is a botched way to handle nils from a form submission. Maybe there's a better solution to pop those nils out of the form's resource params instead?\n", "created_at": "2013-03-13 05:26:04", "user": 19303, "id": 14825164}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In rails 2.3.x touch is having a weird behavior where its not only writing the expected attribute but it is calling save! wich is running callbacks and validations unnecessarily. It also leads to nasty race conditions. This is mostly to make this to look more like things happen in Rails 3.\n", "labels": [], "number": 9693, "updated_at": "2014-06-27 01:49:22", "user": 8182, "closed_at": "2013-03-13 01:15:24", "id": 11955263, "title": "Only update the necesary columns on touch", "url": "https://api.github.com/repos/rails/rails/issues/9693", "created_at": "2013-03-13 01:00:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14816255", "text": "Thanks, but 2-3 does not receive any more updates. Check the [maintenance policy](http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/) for more info.\n", "created_at": "2013-03-13 01:15:24", "user": 26328, "id": 14816255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14816362", "text": "Boo ok I guess I'll have to maintain this branch for a while :P \n", "created_at": "2013-03-13 01:19:20", "user": 8182, "id": 14816362}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change from each to each_value in http/parameters since we don't use key anyway\n", "labels": [], "number": 9694, "updated_at": "2014-06-26 19:54:24", "user": 567626, "closed_at": "2013-03-13 11:33:05", "id": 11958953, "title": "Change from each to each_value in http/parameters since we don't use key", "url": "https://api.github.com/repos/rails/rails/issues/9694", "created_at": "2013-03-13 03:42:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "hi everyone,\n\nMessageBus is a mechanism to push messages from rails server to browser under **development mode**.\n\nBy default, MessageBus will detect your rails application's file system changes(thanks to    @wangjohn ) and notify your browser the changes(using SSE). This will make you a happier develpment life since you do not need to refresh browser manually ^_^/.\n\nMessageBus is a generic solution for message pushing from rails server(and rails console) to browser, you can push any data to the browser. Since your data will be passed through a DRb server, your arbitrary data must follow the requirements of the DRb server.\n## usage\n\nrequire [this Gem](https://github.com/dahakawang/messagebus) to enable the MessageBus in your rails project and you will instantly get file system change notification ability. and you can also send message from you code.\n\nat present the sse feature is in progress(nearly completed), so the message will be print the message in console (if you specify a debug flag)\n## preview\n\n![preview](https://f.cloud.github.com/assets/2820550/252254/efb9c758-8b8f-11e2-860c-58b15454b7c2.jpg)\n\nthe right up is rails app, it received the notification of the file system changes and a message from rails console.\n", "labels": ["activesupport", "needs feedback"], "number": 9695, "updated_at": "2015-10-30 21:36:57", "user": 2820550, "closed_at": "2015-10-30 16:23:40", "id": 11958973, "title": "Add the MessageBus feature", "url": "https://api.github.com/repos/rails/rails/issues/9695", "created_at": "2013-03-13 03:43:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14824431", "text": "I would personally like to see this flourish as a plugin and then merge it\nto rails (or be a default dependency in the Gemfile).\n\nUnfortunately there are a couple issues to make streaming and therefore SSE\nfirst class in Rails.\n\nFor example, we can't use webrick. We also need to use a threaded web\nserver or a pool of forks (doesn't work on windows though). But rails is\nnot thread safe on development, so you have to manually remove the lock\nmiddleware in dev too.\n\nLive is a push in the right direction, but we need it to get out and mature\nfirst, then we can enjoy it fully. Rack hijack support is going to make it\neven better.\n\n>    -\n\n## \n\n_José Valim_\nwww.plataformatec.com.br\nSkype: jv.ptec\nFounder and Lead Developer\n", "created_at": "2013-03-13 04:53:12", "user": 9582, "id": 14824431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14871987", "text": "Yeah, this also seems perfect for a gem to me as well.\n", "created_at": "2013-03-13 22:12:40", "user": 27786, "id": 14871987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15029045", "text": "Thanks @dahakawang for your contribution.\n\nI'm with @josevalim and @steveklabnik on this one. Let's see how this works as a gem first.\n\n/cc @tenderlove \n", "created_at": "2013-03-17 19:32:48", "user": 5402, "id": 15029045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15040669", "text": "I'd like to split this up a bit.  It's not just message bus, but also improvements to the filesystem watcher.  We should see what parts can / should be pulled in to Rails.\n", "created_at": "2013-03-18 06:11:57", "user": 3124, "id": 15040669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17537875", "text": "Having built my own redis backed message bus that supports both client and server subscriptions I have to agree I do not think this belongs in rails at the moment\n\nhttps://github.com/discourse/discourse/blob/master/vendor/gems/message_bus/spec/lib/middleware_spec.rb\n\nhttps://github.com/discourse/discourse/blob/master/vendor/gems/message_bus/spec/lib/multi_process_spec.rb\n\nBuilding a robust message bus that is resilient to server restarts, multiple front end on various machines, network partitions etc is a huge undertaking, taking in a dependency on something like redis in rails is clearly out of the question. \n\nAdditionally Rails is the \"wrong\" layer for this stuff, rack middleware is the more sane place to have the front end, this is the kind of functionality Sinatra and other frameworks may want. \n\nIts really appealing to have a message bus in an app, it allows you to do all sorts of very nifty things, but for now I think this should be external as gems mature and adoption grows. \n", "created_at": "2013-05-07 12:01:27", "user": 5213, "id": 17537875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/152575735", "text": "Closing in favor of Action Cable\n", "created_at": "2015-10-30 16:23:40", "user": 1529387, "id": 152575735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/152656964", "text": "Keep in mind though message bus and Action Cable are 2 completely different beasts. \n\nMessage bus offers reliable ordered messaging with Server-Server and Server-Client comms over HTTP (long polling + polling)\n\nAction Cable offers unreliable ordered messaging with Server-Client support with comms exclusively over web sockets. \n\nVery different beasts and HTTP/2 is really going to be a huge Achilles heal for AC. \n", "created_at": "2015-10-30 21:36:57", "user": 5213, "id": 152656964}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Thanks @rochefort for pointing it out!\n\nhttps://github.com/rails/rails/pull/9538/files#r3343427\n", "labels": [], "number": 9696, "updated_at": "2014-06-26 19:54:26", "user": 5402, "closed_at": "2013-03-13 08:21:55", "id": 11963450, "title": "fix typo in Active Record CHANGELOG [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9696", "created_at": "2013-03-13 08:12:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14829078", "text": "@carlosantoniodasilva  @steveklabnik This should be a quick one.\n", "created_at": "2013-03-13 08:12:46", "user": 5402, "id": 14829078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14884862", "text": ":thumbsup: \n", "created_at": "2013-03-14 03:29:02", "user": 121045, "id": 14884862}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "routes.rb\n\n```\nnamespace :api do\n   namespace :articles do\n      get :show\n   end\n\n   namespace :admin do\n      namespace :articles do\n         get :show\n      end\n   end\nend\n```\n# log\n\nStarted GET \"**_/api/admin/articles/show?**_id=51403b983e2adbdf14000002&access_token=PhZ0ue89nkk5K5vGewBexw\" for 127.0.0.1 at 2013-03-13 17:00:46 +0800\nProcessing by Api::ArticlesController#show as _/_\n# Api::ArticlesContoller#show\n\n```\nparams  =>{\"id\"=>\"51403b983e2adbdf14000002\",\n\"access_token\"=>\"PhZ0ue89nkk5K5vGewBexw\",\n\"action\"=>\"show\",\n\"controller\"=>\"api/admin/articles\",\n\"format\"=>\"json\"}\n```\n\nThe log shows that request want to access /api/admin/articles/show and It was  processed by Api::ArticlesController.\nMaybe I made a mistake, someone please could point it out? \n", "labels": ["actionpack", "needs feedback"], "number": 9697, "updated_at": "2013-06-23 12:41:40", "user": 118465, "closed_at": "2013-06-23 12:41:40", "id": 11965286, "title": "router becomes mad when using  two depth nested namspace or I do it wrong way?", "url": "https://api.github.com/repos/rails/rails/issues/9697", "created_at": "2013-03-13 09:23:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14833005", "text": "the \"match shorthand\" feature has some issues. We can't always guess the right controller name. You can pass `controller: \"\"` to `get` to specify what controller should process the request.\n\nThis could be related to a change I made #9374. I'll take a look at your situation and report back.\n", "created_at": "2013-03-13 10:03:28", "user": 5402, "id": 14833005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14833935", "text": "@googya does the `Api::Admin::ArticlesController` actually exist? If it doesn't then the Ruby constant lookup mechanism will find `Api::ArticlesController` the first time it tries, but then fail on the second attempt, e.g:\n\n``` irb\n>> Api::Admin::ArticlesController\n=> Api::ArticlesController\n>> Api::Admin::ArticlesController\nNameError: uninitialized constant Api::Admin::ArticlesController\n```\n\nThe router code keeps hold of a reference so the first constant lookup will persist for subsequent requests.\n\nBTW, is this Rails 4.0.0.beta1 or 3.2.12 ?\n", "created_at": "2013-03-13 10:26:09", "user": 6321, "id": 14833935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14901692", "text": "I can confirm that this issue exists. I had same problem the other day and it was on 3.2.x app.\n\nI can try reproduce it again on my app and provide more details if needed.\n", "created_at": "2013-03-14 13:24:34", "user": 11562, "id": 14901692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14954308", "text": "@strzalek what do you confirm? The behaviour that @pixeltrix described? As far as I know this is just how the lookup is performed and it is expected behaviour not a bug.\n", "created_at": "2013-03-15 10:46:17", "user": 5402, "id": 14954308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14955956", "text": "Sorry, I wasn't clear. Let me rephrase. I've faced quite similar issue where I had controllers in same namespace and named route with the same name as those controller. I will try to reproduce that in a minute and provide you more details. In the end it will be a bit different case that described in this ticket, which I wrongly assumed was the same.\n\nSorry once again for confusion.\n", "created_at": "2013-03-15 11:34:50", "user": 11562, "id": 14955956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15006932", "text": "Ok, I couldn't reproduce \"mine\" error. There's a big chance that it was my fault.\n", "created_at": "2013-03-16 15:49:52", "user": 11562, "id": 15006932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15006981", "text": "@strzalek thanks for the update.\n\n@googya does the description of @pixeltrix match your situation?\n", "created_at": "2013-03-16 15:53:01", "user": 5402, "id": 15006981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15021118", "text": "@senny Maybe, but I am not sure. I will give a try tomorrow! \nthanks \n", "created_at": "2013-03-17 11:26:49", "user": 118465, "id": 15021118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18202755", "text": "@googya it's been two months, did you have time to verify this issue?\n", "created_at": "2013-05-21 11:24:23", "user": 5402, "id": 18202755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19873344", "text": "@googya I'm going to give this a close until you have time to reproduce, since @strzalek can't reproduce his similar-sounding issue. Thanks!\n", "created_at": "2013-06-23 12:41:40", "user": 27786, "id": 19873344}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've added some documentation to the following:\n- `ActionDispatch::Request#fullpath`\n- `ActionDispatch::Request#original_url`\n- `ActionDispatch::Request#media_type`\n\nCould someone check that I've explained them correctly?\n\nI also have a question about `Request#media_type` referring to it's documentation.\n\nI created a simple blog and used `respond_with` so that the articles index responds to XML and JSON.\n\nHere's what I get in the console:\n\n``` ruby\napp.get '/articles.xml'\napp.request.media_type\n => \"application/x-www-form-urlencoded\" \n\napp.get '/articles.json'\napp.request.media_type\n => \"application/x-www-form-urlencoded\"\n```\n\nShould I be seeing `application/xml` and `application/json` respectively?\n", "labels": ["actionpack", "docs"], "number": 9698, "updated_at": "2014-06-26 16:16:31", "user": 282788, "closed_at": "2013-03-13 22:16:27", "id": 11967448, "title": "Add documentation to ActionDispatch::Request", "url": "https://api.github.com/repos/rails/rails/issues/9698", "created_at": "2013-03-13 10:31:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872183", "text": "The docs look good, thank you.\n", "created_at": "2013-03-13 22:16:37", "user": 27786, "id": 14872183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872207", "text": "> Should I be seeing application/xml and application/json respectively?\n\nHmm, I am not sure, but yes, that looks funny to me. \n", "created_at": "2013-03-13 22:16:56", "user": 27786, "id": 14872207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872344", "text": "I'm afraid people will look at the docs and ask themselves: \"wtf is app?\". I don't think the app should be mentioned in the docs.\n", "created_at": "2013-03-13 22:19:37", "user": 26328, "id": 14872344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872508", "text": "@carlosantoniodasilva What instead? `Rails.application`? I've seen `app` elsewhere, so it made sense to me, though I am admittedly outside of the norm. ;)\n", "created_at": "2013-03-13 22:22:54", "user": 27786, "id": 14872508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872764", "text": "@steveklabnik I believe @garethrees has tested this in the console, where `app` is an instance of Rails' integration test class. I think it's not related with the request docs, so we should probably not mention it.\n\nHow about:\n\n``` ruby\n#    # assume a GET to \"/articles\"\n#    request.fullpath # => \"/articles\"\n```\n\nOr just removing it seems ok:\n\n``` ruby\n#    get \"/articles\"\n#    request.fullpath # => \"/articles\"\n```\n\nWdyt?\n", "created_at": "2013-03-13 22:28:25", "user": 26328, "id": 14872764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872837", "text": "I'm happy if you're happy. You can go ahead and make that change, I'm done screwing up this simple commit. :)\n", "created_at": "2013-03-13 22:29:55", "user": 27786, "id": 14872837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873011", "text": ">  @garethrees has tested this in the console\n\nYup. Thought that was a common trick, but I agree it makes less sense when accessing `request` from a controller.\n\nThe main reason I was documenting it is because I kept having to check which would give me `base_url` / params etc.\n\nWhile we're at it, what does `original_fullpath` do? Could also be worth clarifying `original_url`?\n", "created_at": "2013-03-13 22:33:47", "user": 282788, "id": 14873011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873278", "text": "@steveklabnik hehe alright :)\n\n@garethrees I think it is a common trick, it's just that might not be worth mentioning it in the docs regarding the request methods.\n\n`original_fullpath` was added by @drogus to fix an engine issue iirc, but I don't remember the details, maybe @drogus does. This is the commit that added it: 482ec2ac3f518c91544a3b3e92765eef41b91419.\n", "created_at": "2013-03-13 22:39:51", "user": 26328, "id": 14873278}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "has_secure_password is a useful feature that presents \"virtual\" password and password_confirmation attributes on creation and update backed by a password_digest attribute in the database.  Getting the migration, model, views, tests, and fixtures correct is needlessly complicated.  This change enables application developers to specify password:digest on a generate scaffold command.  Doing so:\n- adds password_digest attribute to the migration\n- adds has_secure_password to the model\n- adds password and password_confirmation password_fields to _form.html\n- <del>adds password_digest to index.html and show.html</del>\n- adds password and password_confirmation to the controller\n- adds unencrypted password and password_confirmation to the controller test\n- adds encrypted password_digest to the fixture\n\nThe following tests have been run and pass successfully:\n\n```\nTEST_DIR=generators bundle exec rake test\n```\n\nAdditionally, the **unmodified** Agile Web Development with Rails tests have been run (i.e., they haven't been updated to use this new option), and I've verified that absolutely no change to any of the generated artefacts results by this change.\n\nNot done yet: <del>changelog, new tests</del>, jbuilder, and updating the edge guides and the AWDwR tests.\n\n@steveklabnik, @jeremy, @carlosantoniodasilva\n", "labels": [], "number": 9699, "updated_at": "2014-06-15 05:35:44", "user": 4815, "closed_at": "2013-03-13 20:12:23", "id": 11970994, "title": "Add support for generate scaffold password:digest", "url": "https://api.github.com/repos/rails/rails/issues/9699", "created_at": "2013-03-13 12:26:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14839079", "text": "I like it.\n\nI have a question, do we need the password digest on the index and show?\n", "created_at": "2013-03-13 12:47:39", "user": 47848, "id": 14839079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14842775", "text": "My initial thinking was that it was easier for an application developer to remove password digest lines from a template than it is to add them, but if most will remove them, and if adding these lines is both obvious and easy, then I can buy the argument that these lines shouldn't be added in the first place.  Removed.  I've also refactored the password digest attribute check based on Carlos' suggestion.\n", "created_at": "2013-03-13 14:05:25", "user": 4815, "id": 14842775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14843077", "text": ":+1: we can proceed in my opinion.\n", "created_at": "2013-03-13 14:10:45", "user": 47848, "id": 14843077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14846188", "text": "With the addition of a test case and a changelog entry, my recommendation is that this be pulled now.  Updating jquery-rails, the edge guides, and my test suite can proceed after that is complete.\n", "created_at": "2013-03-13 15:02:11", "user": 4815, "id": 14846188}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14849447", "text": "squashed\n", "created_at": "2013-03-13 15:50:41", "user": 4815, "id": 14849447}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14854958", "text": "Looks great :+1:, thanks @rubys :)\n", "created_at": "2013-03-13 17:12:00", "user": 26328, "id": 14854958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14866060", "text": ":green_heart: :yellow_heart: :heart: :purple_heart: :blue_heart: \n", "created_at": "2013-03-13 20:21:02", "user": 26328, "id": 14866060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14869103", "text": ":+1:\n", "created_at": "2013-03-13 21:17:16", "user": 27786, "id": 14869103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14869338", "text": ":+1: I was actually thinking about this just yesterday creating the migration with the password_digest. \n", "created_at": "2013-03-13 21:21:20", "user": 1507561, "id": 14869338}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As discussed this is a rework to support both HTTP headers and CGI env variables in the integration testing API.\n\nI refactored `Http::Headers` to always store the variables in CGI format internally. The data can be accessed using both formats and the integration testing API no makes use of `Http::Headers`.\n\nSince not all headers are prefixed with \"HTTP_\" in the env format I had to add a whitelist. I don't think the whitelist is complete so please let me know if I should add more.\n\nThis solves the problem described in #6513\n", "labels": ["actionpack"], "number": 9700, "updated_at": "2014-06-12 08:35:52", "user": 5402, "closed_at": "2013-03-13 15:42:27", "id": 11972968, "title": "rework passing headers and env variables in integration tests", "url": "https://api.github.com/repos/rails/rails/issues/9700", "created_at": "2013-03-13 13:28:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14840867", "text": "@pixeltrix @jeremy let me know what you think.\n", "created_at": "2013-03-13 13:28:58", "user": 5402, "id": 14840867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34550176", "text": "We could use a bit more guidance in the [Guide to Testing Rails Applications - Section 4.5 Setting Headers and CGI variables](http://guides.rubyonrails.org/testing.html#setting-headers-and-cgi-variables).  It's not clear, for example, when to use the HTTP prefix, or what case to use, or dashes vs. underscores.  Maybe there is some w3c spec we could point to, I don't know.\n", "created_at": "2014-02-08 17:39:44", "user": 380809, "id": 34550176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34550210", "text": "I think I'm just missing some fundamental distinction between an HTTP header and a CGI variable.\n", "created_at": "2014-02-08 17:40:55", "user": 380809, "id": 34550210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34640185", "text": "@jaredbeck the section now links the relevant RFC sections: https://github.com/rails/rails/commit/3b868cc99d4e417ac2090529ba41c4918454913d\n", "created_at": "2014-02-10 14:55:03", "user": 5402, "id": 34640185}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The ActiveSupport::TimeWithZone instance I am using comes straight from the DB from ActiveRecord.\nWhen subtracting 3.months or more it resets timezone to GMT.\nHuh?\n\n``` ruby\n[45] pry(main)> current_period_ends_at\n=> Thu, 13 Jun 2013 15:34:33 BST +01:00\n[46] pry(main)> current_period_ends_at.class\n=> ActiveSupport::TimeWithZone\n[47] pry(main)> current_period_ends_at - 1.month\n=> Mon, 13 May 2013 15:34:33 BST +01:00\n[48] pry(main)> current_period_ends_at - 2.months\n=> Sat, 13 Apr 2013 15:34:33 BST +01:00\n[49] pry(main)> current_period_ends_at - 3.months\n=> Wed, 13 Mar 2013 15:34:33 GMT +00:00\n[50] pry(main)> current_period_ends_at - 4.months\n=> Wed, 13 Feb 2013 15:34:33 GMT +00:00\n```\n", "labels": [], "number": 9701, "updated_at": "2013-03-13 15:13:32", "user": 167990, "closed_at": "2013-03-13 15:13:32", "id": 11976923, "title": "ActiveSupport::TimeWithZone - 3.months resets timezone information", "url": "https://api.github.com/repos/rails/rails/issues/9701", "created_at": "2013-03-13 15:00:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14846827", "text": "The BST timezone is daylight savings for GMT, therefore it only exists between the end of March and the end of October - what were you expecting?\n", "created_at": "2013-03-13 15:11:39", "user": 6321, "id": 14846827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14846940", "text": "Oh! Doh. Thanks, I haven't thought of that!\n", "created_at": "2013-03-13 15:13:32", "user": 167990, "id": 14846940}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is to avoid having to define irregular pluralizations for both snake-case and camel-case version of a multi-word expression.\n\nSay you hava a model called `PluralIrregular` with an associated table `plurales_irregulares` (which isn't that bad in spanish).\n\nI'll have to put two lines in inflections.rb to make this work:\n\n```\ninflect.irregular 'plural_irregular', 'plurales_irregulares'\ninflect.irregular 'PluralIrregular', 'PluralesIrregulares'\n```\n\nThis can be painful with many irregular plurals. Of course, you can change the pluralization rules if all your class names will be in spanish, but I found myself having to use quite a lot of irregular plurals for various reasons.\n", "labels": ["activesupport"], "number": 9702, "updated_at": "2014-06-19 08:54:09", "user": 5909, "closed_at": "2014-04-18 05:14:42", "id": 11980493, "title": "Small change to association name sigularization", "url": "https://api.github.com/repos/rails/rails/issues/9702", "created_at": "2013-03-13 16:10:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14871835", "text": "/cc @fxn\n", "created_at": "2013-03-13 22:09:20", "user": 27786, "id": 14871835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34982673", "text": "This would probably resolve #8928\n", "created_at": "2014-02-13 14:29:12", "user": 5402, "id": 34982673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35119424", "text": "+1 on this patch; I've been using a duck-punch version of this exact change in production for a while - see my comment on #8928.\n", "created_at": "2014-02-14 20:04:03", "user": 1191, "id": 35119424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35130847", "text": "The change seems fine, but having tests to guarantee it won't break in the future is a must.\n", "created_at": "2014-02-14 22:21:54", "user": 26328, "id": 35130847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/40787482", "text": "Thanks for the patch.\nI am closing this PR, as I cherry-pick your commit in another pr https://github.com/rails/rails/pull/14793 .\n\nthanks again.\n", "created_at": "2014-04-18 05:14:42", "user": 833383, "id": 40787482}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm running into an issue when using skip_before_filter with both the \"if\" and \"only\" options.\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:show], if: -> { false }\n```\n\nWhen running the above, I expect \"test\" to be called when hitting the show action, but this isn't the case.\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:random], if: -> { false }\n```\n\nWhen running the above, I expect \"test\" to be called regardless of the conditional when hitting the show action, but this isn't the case. It is called in this case when the conditional evaluates to false but it is not called if the conditional evaluates to true.\n", "labels": ["actionpack"], "number": 9703, "updated_at": "2017-11-14 20:05:26", "user": 788828, "closed_at": "2015-01-08 20:08:21", "id": 11981130, "title": "skip_before_filter strange behavior when using if and only together", "url": "https://api.github.com/repos/rails/rails/issues/9703", "created_at": "2013-03-13 16:22:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14854734", "text": "I agree that this seems strange. I'll take a look and report back. Please format your code using ``` (I edited your message).\n", "created_at": "2013-03-13 17:08:59", "user": 5402, "id": 14854734}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14901532", "text": "The problem is that both `only` and `if` are treated separately - if either of them will be fulfilled then skip will be applied. So in case of code:\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:show], if: -> { false }\n```\n\nit is treated as code:\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:show]\nskip_before_filter :test, if: -> { false }\n```\n\nUnfortunately documentation is not explaining that so it required deeper testing to find that out. To confirm that you need to check output of [ActiveSupport::Callbacks.skip_callback](https://github.com/rails/rails/blob/v4.0.0.beta1/activesupport/lib/active_support/callbacks.rb#L465).\n", "created_at": "2013-03-14 13:20:52", "user": 36869, "id": 14901532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15692634", "text": "Is that intended behavior or would it be worth trying to fix/change?\n", "created_at": "2013-03-31 15:17:19", "user": 788828, "id": 15692634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15830072", "text": "The problem is that `skip_before_filter` behaves differently than `before_filter` in this regard. This just confused a coworker and me for almost an hour, and [we're not the only ones](http://stackoverflow.com/questions/4637110/skip-before-filter-ignores-conditionals). It should be clearly documented as a strange behavior, because I guess you can't just change/fix it now that people are depending on the way it used to work…\n\nSince `skip_before_filter` is used a lot for security requirements, the unexpected behavior can lead to very ugly bugs; thinking of:\n\n``` ruby\nskip_before_filter :login_required, only: :show, if: :trusted_origin?\n```\n\n:scream: \n", "created_at": "2013-04-03 10:48:30", "user": 1037292, "id": 15830072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15830313", "text": "By the way, the easiest way to work around this seems to be to repeat the `before_filter` with the inverse condition after the skipping.\n\nWrong:\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:show], if: :skip_test?\n```\n\nCorrect:\n\n``` ruby\nbefore_filter :test\nskip_before_filter :test, only: [:show]\nbefore_filter      :test, only: [:show], unless: :skip_test?\n```\n", "created_at": "2013-04-03 10:55:24", "user": 1037292, "id": 15830313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/69240632", "text": "Closed by #18404\n", "created_at": "2015-01-08 20:08:21", "user": 47848, "id": 69240632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/223574827", "text": "@rafaelfranca That commit didn't close the issue, it merely documented this weird behaviour. Still present in Rails 5 rc1. Hate to use the old \"least surprise principle\" argument, but if this isn't totally unexpected behaviour I don't know what it is!\n\nCurrent best workaround is to code the `only:` part yourself as such:\n\n`skip_before_action :authenticate_with_jwt, if: -> { query_params.empty? && action_name == \"index\" }`\n", "created_at": "2016-06-03 13:12:25", "user": 1838241, "id": 223574827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/339069926", "text": "I'm with @bluehallu, I think this issue should be re-opened and fixed properly so it doesn't burn people in the future. \r\n\r\n@rafaelfranca Are you able to re-open this so it doesn't get lost?", "created_at": "2017-10-24 17:32:00", "user": 180819, "id": 339069926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/339071808", "text": "There is nothing to be fixed here. If you are using `if` and `only` together you are already asking to be burned. There is no defined behavior for this so there is no \"least surprise principle\" to follow. Any behavior we chose is going to be surprising, so the correct fix is: don't use them together", "created_at": "2017-10-24 17:38:28", "user": 47848, "id": 339071808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/344116590", "text": "But isn't this behavior inconsistent with `before_action` interface?", "created_at": "2017-11-14 01:33:08", "user": 1348174, "id": 344116590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/344381348", "text": "The same happens with `before_action`", "created_at": "2017-11-14 20:05:26", "user": 47848, "id": 344381348}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Re: #9690, raise an ArgumentError when a clashing named route is defined.\n", "labels": [], "number": 9704, "updated_at": "2014-06-12 17:49:10", "user": 402, "closed_at": "2013-03-24 19:55:44", "id": 11984563, "title": "Raise an ArgumentError when a clashing named route is defined", "url": "https://api.github.com/repos/rails/rails/issues/9704", "created_at": "2013-03-13 17:33:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14866862", "text": ":+1: needs a test and a changelog entry. I do worry about not adding the route at all, if I add a route, and then run `rake routes` or visit `rails/info/routes` and I don't see the route at all, then I would potentially be a bit confused. \n\nThis might be more obvious for the case where we're explicitly making named routes\n\n```\nget 'one' => 'test#example', as: :example\n```\n\nBut not as many people will realize this makes a named route as well\n\n```\nresources :example\n```\n\nWe should talk a little about adding the route with warning versus just warning.\n", "created_at": "2013-03-13 20:36:03", "user": 59744, "id": 14866862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867030", "text": "Never mind, just saw rails/journey@98a9802 it wouldn't be added anyway (if I'm reading that correctly).\n", "created_at": "2013-03-13 20:39:22", "user": 59744, "id": 14867030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14867141", "text": "This isn't changing behavior -- just logging to help people that would be confused like I was! \n\nI believe this year-old commit actually made the change: https://github.com/rails/journey/commit/98a9802a5c1f2d3a900461d10f5665a0d887dee7\n\nI added a note to the upgrade guide about the change in behavior in #9690 -- not sure if a CHANGELOG entry is warranted. \n\nI'm not sure how to test this, or I would have. The logger is nil when running the Rails tests (thus the `try`) -- any ideas definitely welcome!\n", "created_at": "2013-03-13 20:41:18", "user": 402, "id": 14867141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14871956", "text": ":+1:. but yeah, a test would be nice. Hm.\n", "created_at": "2013-03-13 22:11:58", "user": 27786, "id": 14871956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14875698", "text": "Thanks for the feedback! I pushed an update -- plz do lemme know what you think. \n\nI'm not sure how to test this... ideas definitely welcome. I'm also not super happy about using `ActionController::Base.logger` here -- especially with `try` -- but I couldn't find any examples of how this kind of thing should be done elsewhere...\n", "created_at": "2013-03-13 23:36:10", "user": 402, "id": 14875698}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14944042", "text": "I reverted to go back to the conditional expression as @jeremy suggested. I also took a stab at giving Journey a logger and using that instead of `ActionController::Base.logger`. Any other feedback welcome. Thanks for everything so far!\n", "created_at": "2013-03-15 05:05:01", "user": 402, "id": 14944042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157922", "text": "I gave this some more thought and decided it may be best to fail fast with an exception here. I can't think of a good reason for allowing clashing named routes, and raising an exception might save people from subtle issues in their apps. I chatted with @jeremy about this and I think he agrees. \n\nThat leaves the problem of explaining how a clashing named route may be defined using the `resources` method. This is a bit tricky to explain succinctly, but I've done my best to provide a helpful message while raising the exception. I also updated the CHANGELOG and the Upgrading Guide in an effort to cover all the bases.\n\nFeedback is more than welcome, of course, but if we agree this all makes sense I think this is ready to merge!\n", "created_at": "2013-03-20 04:33:23", "user": 402, "id": 15157922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15191229", "text": "Consider defining an `edit_collision` route after a `resources :collisions`. Then the error message will suggest that you check whether you have a `resources :edit_collisions`. Probably simplest to suggest that you may be overriding a route already defined by a resource with the same naming rather than suggesting the specific name.\n", "created_at": "2013-03-20 17:38:14", "user": 199, "id": 15191229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15192075", "text": "Great point, @jeremy -- I didn't think of that case.\n\nI tweaked the language. Let me know what you think. Perhaps this is just too much detail? I can try making it more succinct if you think that'd be smart. \n", "created_at": "2013-03-20 17:51:12", "user": 402, "id": 15192075}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15367215", "text": "Perfect :ok_hand:\n", "created_at": "2013-03-24 19:54:44", "user": 199, "id": 15367215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15678272", "text": "Great, thanks @trevorturk :+1:\n", "created_at": "2013-03-30 17:27:40", "user": 26328, "id": 15678272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17281149", "text": "Apparently this brought up an issue in Devise tracker (linked above), related to defining the root path based on different constraints. It'll raise this error because the root path will be already defined in the second time, without taking into account the constraints.\n\nNot sure how to approach/fix that yet, though. /cc @pixeltrix\n", "created_at": "2013-05-01 13:26:34", "user": 26328, "id": 17281149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17281669", "text": "@carlosantoniodasilva I'd just use a custom name for the authenticated route, e.g.\n\n``` ruby\nauthenticated :user do\n  root to: \"users#index\", as: :authenticated_root\nend\n\nunauthenticated do\n  root to: \"main#index\"\nend\n```\n", "created_at": "2013-05-01 13:38:38", "user": 6321, "id": 17281669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17298338", "text": "@pixeltrix Couldn't we check if the route is the same and if so, don't complain when we have similar named routes pointing to the same endpoint?\n", "created_at": "2013-05-01 18:41:36", "user": 9582, "id": 17298338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17298803", "text": "A little more background on why I suggested this change -- I ran into a subtle issue when upgrading Basecamp to Rails 4. It took a while to track down and I eventually found it was because the order of named route lookups had been reversed between Rails 3 and 4. I couldn't think of a good reason to have two routes with the same name and suggested we fail loudly and quickly to help people avoid subtle issues like the one I ran into.\n\nThat being said, I didn't think of this particular issue, and I'm sure there are more I haven't thought of as well. \n\nI'm a bit out of touch with Devise right now, but I wonder if it really makes sense to have two `root` routes? Can you elaborate on the reasoning behind that? Perhaps it'll inform our decision here -- we may want change this behavior to log instead of raising an error. We may also consider just leaving a note in the upgrade guide. That's what I did initially in d717882eb501510b8367382ea7d6c0097aac38cf but later decided that raising an exception might be a smarter thing to do. \n\nThis is definitely worth more discussion -- sorry for the long winded comment, in any case, though :wink: \n", "created_at": "2013-05-01 18:49:37", "user": 402, "id": 17298803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17298964", "text": "I don't think that raising an Argument Error is a good idea in this case. I think having just a warning would be helpful enough.\n", "created_at": "2013-05-01 18:52:31", "user": 4912, "id": 17298964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17299053", "text": "@sikachu can you help me understand why someone might want to have two named routes with the same name? (I don't really understand what Devise is doing here...)\n", "created_at": "2013-05-01 18:54:16", "user": 402, "id": 17299053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17299319", "text": "@trevorturk in case of Devise, `authenticated` generates a route constraint checking whether or not there's a user signed in. If there's a user, the constraint will match and then the routes inside the `authenticated` block will become available and recognizable, meaning that the `root` route will match for the authenticated user. When there's no user, anything inside the block is considered, and the `root` route would match the other definition. But both point to `root` and use `root_path`.\n", "created_at": "2013-05-01 18:58:36", "user": 26328, "id": 17299319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17299420", "text": "@trevorturk there are two use cases so far.\n1. When you have constraints, you have exactly the same route but have different endpoints based on constraints. The route name and route url are exactly the same though.\n   \n   ``` elixir\n   authenticate(:user) do\n     root to: \"private_home#index\"\n   end\n   \n   root to: \"public_home#index\"\n   ```\n2. Engines use the `routes.append` mechanism to add routes at the end. This is convenient because you can override any engine endpoint by simply declaring your route first. This makes it a bit harder.\n\nDefining a route first is a way to give some route higher priority. Raising on such route conflicts is similar to raising when a method is redefined in a class. It may be an accident but they are also legit cases where you would want to do it.\n", "created_at": "2013-05-01 19:00:15", "user": 9582, "id": 17299420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17299850", "text": "You call `root_path` and routes check constraints to see _which_ `root` route to call to generate a URL? I don't see how that works.\n", "created_at": "2013-05-01 19:07:40", "user": 199, "id": 17299850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17300310", "text": "@jeremy the generated route is the same, there is no nesting. The constraints are used only on matching.\n", "created_at": "2013-05-01 19:15:58", "user": 9582, "id": 17300310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17305641", "text": "@josevalim @jeremy actually there are situations where the generated url would be different, e.g.\n\n``` ruby\nconstraints subdomain: 'admin' do\n  root to: 'admin/dashboard#index'\nend\n\nconstraints subdomain: 'www' do\n  root to: 'pages#index'\nend\n```\n\nBy having the same name and not raising the latter would always be the winner, so calling `redirect_to root_url` would always go to 'www.example.com' even when you're on a 'admin.example.com' page. That's why I'd recommend naming them different:\n\n``` ruby\nconstraints subdomain: 'admin' do\n  root to: 'admin/dashboard#index', as: 'admin_root'\nend\n\nconstraints subdomain: 'www' do\n  root to: 'pages#index', as: 'public_root'\nend\n```\n\nWhether we raise or log a warning on a duplicate name is a matter of preference - I've no strong feelings either way.\n", "created_at": "2013-05-01 20:50:34", "user": 6321, "id": 17305641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17306949", "text": "```\nBy having the same name and not raising the latter would always be the winner,\nso calling redirect_to root_url would always go to 'www.example.com' even when\nyou're on a 'admin.example.com' page. \n```\n\nPrecisely.\n", "created_at": "2013-05-01 21:14:47", "user": 199, "id": 17306949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17317893", "text": "> Whether we raise or log a warning on a duplicate name is a matter of preference - I've no strong feelings either way. \n\nRaising an error is a backwards incompatible change for anyone who has the same URL routing to different controllers/actions based on constraints. The issue, to me, is that this change causes an error about duplicate route definition based only on URL. When a request passes through the router, the URL is not the only part that determines where a request ultimately ends up.\n\nI agree that helping developers discover that they've duplicated a route is a useful feature. I vote for logging it instead of raising.\n", "created_at": "2013-05-02 02:45:15", "user": 9379, "id": 17317893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17318322", "text": "@latortuga I think it's perfectly fine to introduce a backwards incompatible change when upgrading to a new major version.\n\nWith this change, developers are still free to create duplicate routes that use the same url -- just not the same name.    \n\nThe idea is to help people avoid subtle and confusing bugs caused when clashing names are used in URL helpers as I described in d717882eb501510b8367382ea7d6c0097aac38cf. \n\nIn my opinion, this is an easy change to deal with and raising an exception seems the best way to enforce a very reasonable best practice.\n", "created_at": "2013-05-02 03:05:44", "user": 402, "id": 17318322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17318695", "text": "```\nRaising an error is a backwards incompatible change for anyone who has the same\nURL routing to different controllers/actions based on constraints.\n```\n\nIt's a backward-incompatible change for anyone who _named_ these routes the same, unwittingly introducing a bug in their app.\n\n@trevorturk :+1:\n", "created_at": "2013-05-02 03:22:45", "user": 199, "id": 17318695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18072026", "text": "Ok, I have more news about this. Devise allows you default routes with default names and since we naturally rely on url helpers, we asked users to redefine a route with the same name in case they wanted to redirect elsewhere. But not anymore with Rails 4.rc. I feel like this pull request is hindering legitimate use cases in favor of some limited sense of security.\n\nIt also feels inconsistent with many other APIs in Ruby (and Rails), where redeclaring something extends or overrides the previous behaviour, but never raises.\n\nIf we are decided to go along this way, I would at least like to support a `scope` option that allows engines and other plugins to say: \"the routes defined here may collide with something defined previously but that is fine, just give preference to the main one\".\n", "created_at": "2013-05-17 16:32:28", "user": 9582, "id": 18072026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18073331", "text": "This isn't about security -- it's an effort to help people avoid obscure bugs on their apps as I described.\n\nHave you considered adding a configuration option in Devise so the urls could be configured from the start instead of overwritten?\n\nI don't think the scope option you propose would work. I would say that changing from raising to logging makes sense, but it doesn't add up if we decide that overriding routes defined in engines is a legitimate use case.\n\nIf we decide to revert this change, please make sure that things work as you expect transitioning from Rails 3 to 4, and to make sure the upgrade guide explains the change. My testing showed the orders were reversed from Rails 3 when routes were defined in routes.rb, but I didn't test with engines like Devise.\n", "created_at": "2013-05-17 16:58:13", "user": 402, "id": 18073331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18074830", "text": "I prefer the warning method over the error method. Exceptions should be\nsaved for exceptional situations where the program cannot or should\nnot continue.\nThis situation is relatively common, and while it may represent an accident\nby the user it may also represent an intentional use case of a Rails Engine\ndeveloper.\n\nOn Friday, May 17, 2013, Trevor Turk wrote:\n\n> This isn't about security -- it's an effort to help people avoid obscure\n> bugs on their apps as I described.\n> \n> Have you considered adding a configuration option in Devise so the urls\n> could be configured from the start instead of overwritten?\n> \n> I don't think the scope option you propose would work. I would say that\n> changing from raising to logging makes sense, but it doesn't add up if we\n> decide that overriding routes defined in engines is a legitimate use case.\n> \n> If we decide to revert this change, please make sure that things work as\n> you expect transitioning from Rails 3 to 4, and to make sure the upgrade\n> guide explains the change. My testing showed the orders were reversed from\n> Rails 3 when routes were defined in routes.rb, but I didn't test with\n> engines like Devise.\n> \n> On May 17, 2013, at 11:33 AM, \"José Valim\" <notifications@github.com<javascript:_e({}, 'cvml', 'notifications@github.com');>>\n> wrote:\n> \n> Ok, I have more news about this. Devise allows you default routes with\n> default names and since we naturally rely on url helpers, we asked users\n> to\n> redefine a route with the same name in case they wanted to redirect\n> elsewhere. But not anymore with Rails 4.rc. I feel like this pull request\n> is hindering legitimate use cases in favor of some limited sense of\n> security.\n> \n> It also feels inconsistent with many other APIs in Ruby (and Rails), where\n> redeclaring something extends or overrides the previous behaviour, but\n> never raises.\n> \n> If we are decided to go along this way, I would at least like to support a\n> scope option that allows engines and other plugins to say: \"the routes\n> defined here may collide with something defined previously but that is\n> fine, just give preference to the main one\".\n> \n> —\n> Reply to this email directly or view it on\n> GitHubhttps://github.com/rails/rails/pull/9704#issuecomment-18072026\n> .\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9704#issuecomment-18073331\n> .\n", "created_at": "2013-05-17 17:26:47", "user": 59744, "id": 18074830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18075209", "text": "If this is a legitimate use case, why should we have a warning? \n\n\"Warning: you are doing something perfectly reasonable.\" \n\nEither this is a legitimate use case or it isn't.\n", "created_at": "2013-05-17 17:33:17", "user": 402, "id": 18075209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18079512", "text": "Another option might be for Devise to define it's routes after the host app, and skip routes that have already been defined? \n", "created_at": "2013-05-17 18:51:05", "user": 402, "id": 18079512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18089352", "text": "Oops, by \"security\" I meant development security (the same security a compiler would give you) and not the \"protecting from an attack security\".\n\n> If we decide to revert this change, please make sure that things work as you expect transitioning from Rails 3 to 4, and to make sure the upgrade guide explains the change\n\nWill do.\n\n> I don't think the scope option you propose would work. \n\nWhy? From what I have in mind it would work just fine since the engine routes come after.\n\n> If this is a legitimate use case, why should we have a warning? \"Warning: you are doing something perfectly reasonable.\" Either this is a legitimate use case or it isn't.\n\nAgreed. I believe this is a legitimate use case and if we don't want to support it directly, we should at least have an option to. Again, this is very inconsistent with how we do everything else in Ruby and Rails. For example:\n\n```\nrespond_to do\n  format.html { render \"hello\" }\n  format.json { render json: @model }\n  format.html { render \"oops\" }\nend\n```\n\nBefore `respond_with` came out, plugins were use to have default blocks too:\n\n```\ndef default_respond_to\n  respond_to do\n    format.html { render \"hello\" }\n    format.json { render json: @model }\n    yield format\n  end\nend\n```\n\nWe could raise an error on duplicated format calls above assuming people could accidentally duplicate formats but we would be punishing legit use cases. Similar things happen with callbacks, method definitions, etc. It just feels like a random restriction.\n", "created_at": "2013-05-17 22:31:41", "user": 9582, "id": 18089352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18090250", "text": "Maybe I don't understand your idea of using scopes. I believe route names are global and would not be affected by constraint or scope blocks etc. \n\nI'm still not convinced that there is no better way forward, and the Rails 4 version bump is a great time to make a change like this. \n\nDid you consider the two suggestions I made?\n- Have you considered adding a configuration option in Devise so the urls could be configured from the start instead of overwritten?\n- Another option might be for Devise to define it's routes after the host app, and skip routes that have already been defined?\n\nI don't know if those ideas are feasible, but please do consider them. Also...\n- Please consider testing the difference between Rails 3 and 4 as I explain in the upgrade guide but with routes defined by an engine. \n\nFinally, please keep in mind that if we revert this change people are likely to be confused (as I was) about how clashing named routes affect each other -- and that just means more github issues for everyone :wink:\n", "created_at": "2013-05-17 23:02:05", "user": 402, "id": 18090250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18090777", "text": "The scope option would simply set that all the routes defined inside a given scope block should not raise. Something like:\n\n```\nscope :dont_raise_on_name_conflict => true do\n  # routes generated by devise come here\nend\n```\n\n> Have you considered adding a configuration option in Devise so the urls could be configured from the start instead of overwritten?\n\nThis wouldn't work. The routes that come first have higher preference and this would effectively give higher preference to Devise routes. Note that a duplicate route doesn't not cause conflicts in the router (again, inconsistent).\n\n> Another option might be for Devise to define it's routes after the host app, and skip routes that have already been defined?\n\nWe already define the routes after the host app but today there is no official way of querying the router to check if a name was already defined or not. This would be an ok solution.\n\n> Please consider testing the difference between Rails 3 and 4 as I explain in the upgrade guide but with routes defined by an engine.\n\nEverything seems to be working fine here.\n\n> Finally, please keep in mind that if we revert this change people are likely to be confused (as I was) about how clashing named routes affect each other -- and that just means more github issues for everyone \n\nBy breaking valid applications out there today we are just making things worse. Even more if we consider that this breaking change happened from Journey 1.0.3 -> 1.0.4 and that [latest Rails 3.2.x requires Journey 1.0.4](https://github.com/rails/rails/blob/3-2-stable/actionpack/actionpack.gemspec#L25). The majority of people who will likely face this issue, will do so **before** the Rails 4 update.\n", "created_at": "2013-05-17 23:23:24", "user": 9582, "id": 18090777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18091084", "text": "Ah, sorry -- I intended for this to be a Rails 4 change. \n\nThanks for testing with the engine-defined routes -- I'm glad that wasn't also a problem, but I'm not sure why it wasn't! \n\nI don't really like the `dont_raise_on_name_conflict` idea, but the \"querying the router to check if a name was already defined\" idea sounds nice. Do you think that's worth investigating? If so, I could give it a shot. If not, I'm tired of arguing about it :wink: If you revert, I think the upgrade guide would go back to explaining the issue, so I think we'd be all set. \n", "created_at": "2013-05-17 23:34:24", "user": 402, "id": 18091084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18091381", "text": "> Do you think that's worth investigating? If so, I could give it a shot.\n\nIf we decide we are keeping the error, this would be the best approach and I appreciate you are willing to give it a shot. I am still not in favor of keeping the error. Let's give it a day and see other's opinions. :) \n\n>  If not, I'm tired of arguing about it :wink:\n\nMe too!  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-05-17 23:45:44", "user": 9582, "id": 18091381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18165452", "text": "I have added `has_named_route?(route_name)` to Rails, commit 7a993ffc94933011b1ef3a9ed81841a787e94eda. Thanks everyone!\n", "created_at": "2013-05-20 18:56:49", "user": 9582, "id": 18165452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18165661", "text": "Awesome! \n\nSo, engines like Devise would use this, and we'll leave this exception to be raised for the case I ran into -- where an app has defined two routes with the same name?\n", "created_at": "2013-05-20 19:00:41", "user": 402, "id": 18165661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21581080", "text": "Running into strange edge case involving ordering of your routes file with this change, can you take a look at #11602 ?\n", "created_at": "2013-07-25 20:10:43", "user": 59744, "id": 21581080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32426976", "text": "I know this is closed out, but I'm running into an issue that I feel may be a bug, or maybe unwanted result.\n\n``` ruby\nnamespace :member do\n  get '/search' => 'searches#show', as: :search\nend\n\nnamespace :admin do\n  get '/search' => 'searches#show', as: :search\nend\n```\n\nOn rails 3, this would create 2 method names `member_search_path` to `/member/search` and `admin_search_path` to `/admin/search`. Since the URLs and the method names were different, there was never a worry about doing a `redirect_to` and landing on the wrong page. In rails 4 I just get the \"Invalid route name, already in use: 'search' \" error. As some have suggested, I could rename them to :member_search and :admin_search, but then the generated methods are `member_member_search_path` and `admin_admin_search_path` >_<\n\nI can see where in some cases like using constraints, or special scope, the method names might return the same, but that's not the case with namespace (at least in rails 3). \n", "created_at": "2014-01-15 23:25:59", "user": 2391, "id": 32426976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32427790", "text": "@jwoertink I'm confused because I think the code sample you provided should work in Rails 4. I just tested adding the following to a Rails 4 app in my routes file:\n\n``` ruby\nnamespace :member do\n  get '/search' => 'searches#show', as: :search\nend\n\nnamespace :admin do\n  get '/search' => 'searches#show', as: :search\nend\n```\n\n...and then running `rake routes` gives me the following output without an error:\n\n```\nmember_search GET /member/search(.:format)  member/searches#show\nadmin_search  GET /admin/search(.:format)   admin/searches#show\n```\n\nCould you try reproducing this with a fresh rails app on the latest version to see if it's a bug for sure?\n", "created_at": "2014-01-15 23:37:32", "user": 402, "id": 32427790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32428117", "text": "O_o wow... ok, well yeah.... it works in a fresh app, but not mine... both of which are using rails 4.0.2.... Well then I shall crawl back in to my hole and figure out why it's not working in my app. Thanks :D \n", "created_at": "2014-01-15 23:41:55", "user": 2391, "id": 32428117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32428413", "text": "@jwoertink I bet you have a route named `search` that you didn't explicitly set with the `as` option. I'd suggest stepping through your routes file to try and find the culprit. Sorry about that -- I know it can be tricky!\n", "created_at": "2014-01-15 23:45:54", "user": 402, "id": 32428413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42099362", "text": "Folks, I'm upgrading our app from 3.2 to 4.0 (as a step on the path to 4.1), and I'm running into an issue with subdomain constraint. We have 3 routes that are identically named, but have different paths based on whether you're in a vanilla domain, subdomain, or cname. Naturally, I get the \"already in use\" error.\n\n``` ruby\nget '/store', to: 'store#show', as: 'common_store', constraint: base_domain\nget '/', to: 'stores#show', as: 'common_store', constraint: subdomain\nget '/', to: 'stores#show', as: 'common_store', constraint: cname\n```\n\nIn the above snippet `base_domain`, `subdomain` and `cname` are lambdas with some logic determining whether we're in a subdomain or alternate domain. One thing of note is that technically all 3 of these routes represent an actual common store. You can think of it as \"in custom domains the common store is mounted at root, while in base it's at /store\". So in the app we'd actually prefer to refer to either of them as `common_store`, since that's what it is in the given context. Any ideas how to handle this?\n", "created_at": "2014-05-03 08:21:03", "user": 7758, "id": 42099362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42100628", "text": "@maxim I'd name the routes `base_common_store`, `subdomain_common_store` and `cname_common_store` and then use a helper method to determine which is the correct route to use, e.g:\n\n``` ruby\nget '/store', to: 'store#show', as: 'common_store', constraint: base_domain, as: 'base_common_store'\nget '/', to: 'stores#show', as: 'common_store', constraint: subdomain, as: 'subdomain_common_store'\nget '/', to: 'stores#show', as: 'common_store', constraint: came, as: 'cname_common_store'\n```\n\n``` ruby\nclass ApplicationController < ActionController::BaseController\n  helper_method :common_store_path, :common_store_url\n\n  protected\n\n  def common_store_path(options = {})\n    if base_domain?\n      base_common_store_path(options)\n    elsif subdomain?\n      subdomain_common_store_path(options)\n    elsif cname_domain?\n      cname_common_store_path(options)\n    else\n      raise RuntimeError, \"Unknown domain\"\n    end\n  end\n\n  def common_store_url(options = {})\n    common_store_path(options.merge(only_path: false))\n  end\nend\n```\n\nThese kind of things are application dependent and so need to be address within that context - in Rails 3.2 you would've just go the last defined route so it wasn't working properly anyway.\n", "created_at": "2014-05-03 09:31:54", "user": 6321, "id": 42100628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42109329", "text": "@pixeltrix Appreciate it. Hm. I find that there are 2 somewhat significant issues with this.\n1. My version actually did work in 3.2. The constraint on each route made it possible for Rails to fall through to the first matching route that adhered to said constraint. Here's how those constraints look:\n   \n   ``` ruby\n     base_host = -> r { r.subdomain.blank? && AppSettings.base_domain?(r.domain) }\n     subdomain = -> r { AppSettings.base_domain?(r.domain) && r.subdomain.present? && r.subdomain != \"www\" }\n     cname = -> r { !AppSettings.base_domain?(r.domain) }\n   ```\n   \n   As you see, it wouldn't just pick up the last defined route. The constraints clearly make it impossible to fall through to cname if there is a subdomain, and to fall through to subdomain if there is a base domain.\n2. Another problem is that even if I went the route you suggested (no pun intended) — it would mean that logic I have in my constraints will have to be repeated elsewhere. That's not a big deal, I could extract and reuse that logic, but then I'm telling rails the same info twice, once when defining routes, and once when defining helpers. (I do have multiple routes with this issue, not just common_store). It starts looking a bit more like unavoidable plumbing.\n", "created_at": "2014-05-03 16:27:39", "user": 7758, "id": 42109329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42111679", "text": "@maxim in regard to your first point, they may have been recognised correctly, but the last defined route would be the one used by the `common_store_path` url helper. As to your second point, without seeing all of the code it's hard to know exactly what to do but there ways of DRYing it up - for example you could define the helpers in the module directly as I've done in [this comment](https://github.com/rails/rails/issues/4394#issuecomment-5998326).\n", "created_at": "2014-05-03 17:50:02", "user": 6321, "id": 42111679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42114673", "text": "I think the point of confusion here is the difference between route names\nand route recognition.\n\nNamed routes are only used in URL helpers, and URL helpers are global. So,\nhaving two named routes with the same name can never be valid.\n\nIf you see this exception the only possible solution is to ensure you're\nusing unique names for all of your routes.\n\nOn Saturday, May 3, 2014, Andrew White notifications@github.com wrote:\n\n> @maxim https://github.com/maxim in regard to your first point, they may\n> have been recognised correctly, but the last defined route would be the one\n> used by the common_store_path url helper. As to your second point,\n> without seeing all of the code it's hard to know exactly what to do but\n> there ways of DRYing it up - for example you could define the helpers in\n> the module directly as I've done in this commenthttps://github.com/rails/rails/issues/4394#issuecomment-5998326\n> .\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9704#issuecomment-42111679\n> .\n", "created_at": "2014-05-03 19:51:39", "user": 402, "id": 42114673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42119275", "text": "@pixeltrix @trevorturk Wow, so that means that (in 3.2) the algorithm by which the matching route definition is selected for routing an http request is not the same as the algorithm that selects which route to return for the given helper. As in — if one route says \"this one is for when there is no subdomain\" and another says \"this one is for when there is subdomain\" then incoming request will get the correct route (e.g. without subdomain), but calling helper in the context of this request will give me the route that carries \"with subdomain\" constraint. Am I understanding correctly? That seems to imply that route resolution is inconsistent depending on which direction you resolve from. I didn't realize that.\n", "created_at": "2014-05-03 23:31:05", "user": 7758, "id": 42119275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42119788", "text": "@maxim I think you're still slightly confused. Your question is missing the point about named routes being global. Named routes don't care about the context of the request. Every time you use a named route helper it will generate the same URL. So having two named routes with the same name would make no sense. Only one of them could ever be used. \n", "created_at": "2014-05-03 23:58:04", "user": 402, "id": 42119788}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42120676", "text": "@trevorturk Hm, looks like I do get how it works. As you said, \"named routes don't care about the context of the request\". I just didn't realize this is the case in rails. To be clear, this could've been avoided if calling a helper triggered the same route resolution process as visiting a url would (but from another direction). It probably would have performance and coupling (to request context) implications, which might make it a bad solution. Much easier to have a global static route-name => url map, which causes the problem, since named routes would simply get overwritten in such map. This is similar to forgetting to include a factor into cache key for invalidation. It seems that helper really shouldn't be static-mapped to a url based on its name, there are other contextual factors at play. It's probably too late to have that discussion though.\n", "created_at": "2014-05-04 00:49:18", "user": 7758, "id": 42120676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42121152", "text": "That's an interesting idea -- I think it's outside of the scope of this\nthread, but it could be an interesting thing to consider for the future.\n\nOn Saturday, May 3, 2014, Maxim Chernyak aka hakunin <\nnotifications@github.com> wrote:\n\n> @trevorturk https://github.com/trevorturk I do understand how this\n> works. As you said, \"named routes don't care about the context of the\n> request\". I just didn't realize this was the case for 3.2. To be clear,\n> this could've been avoided if calling a helper triggered the same route\n> resolution process as visiting a url would (but from another direction). It\n> probably would have performance and coupling (to request context)\n> implications, which might make it a bad solution. Much easier to have a\n> global static route-name => url map, which causes the problem, since named\n> routes would simply get overwritten in such map. This is similar to\n> forgetting to include a factor into cache key for invalidation. It seems\n> that helper really shouldn't be static-mapped to a url based on its name,\n> there are other contextual factors at play. It's probably too late to have\n> that discussion though.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9704#issuecomment-42120676\n> .\n", "created_at": "2014-05-04 01:24:40", "user": 402, "id": 42121152}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Marshal#dump calls CollectionProxy#respond_to? when dumping some AR\ncollections. The call to load_target may mutate the internal state\nmid-dump, resulting in undesirable queries and a dumped string that may\nnot result in a usable object when processed by Marshal#load.\n\nThe proposed fix forces the use of Marshal internals to dump the\ncollection.\n", "labels": ["activerecord"], "number": 9705, "updated_at": "2014-06-18 07:57:32", "user": 17553, "closed_at": "2013-10-13 03:03:51", "id": 11987754, "title": "Prevent mutation of unsaved AR collections by Marshal#dump", "url": "https://api.github.com/repos/rails/rails/issues/9705", "created_at": "2013-03-13 18:44:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14861170", "text": "@tenderlove I misspoke when I said the problem is resolved. Reverting https://github.com/rails/rails/commit/ee43989 (by https://github.com/rails/rails/commit/18b9187) didn't push far enough into my corner case.\n", "created_at": "2013-03-13 18:50:37", "user": 17553, "id": 14861170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14884708", "text": "This fixes #8020 as well based on the example app.\n", "created_at": "2013-03-14 03:22:58", "user": 17553, "id": 14884708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14926637", "text": "Is this issue present on master?\n", "created_at": "2013-03-14 20:19:42", "user": 47848, "id": 14926637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14927677", "text": "@rafaelfranca No, master is fine. CollectionProxy has been refactored significantly and CollectionProxy#respond_to? is gone. I'm planning to submit a PR with just the new test after this PR is closed.\n", "created_at": "2013-03-14 20:38:24", "user": 17553, "id": 14927677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14964473", "text": "Looks like #8020 originated from mperham/dalli#250, so this problem has metastasized into other gems. The solution mentioned by @jsqu99 of calling Marshal#dump twice is the same workaround I was using when I showed this to @tenderlove, although I wasn't using cache. That's why I'm dumping twice in the test and asserting the outputs match.\n", "created_at": "2013-03-15 14:45:25", "user": 17553, "id": 14964473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15017047", "text": "Squashed\n", "created_at": "2013-03-17 04:02:40", "user": 17553, "id": 15017047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16914224", "text": "I have just applied this simple patch to my application and it fixes the issue. Thank you @macksmind !\n", "created_at": "2013-04-24 08:34:40", "user": 978899, "id": 16914224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18341380", "text": "Ran into this very same problem on 3.2.13 and this patch fixed the issue as well. Many thanks!\n", "created_at": "2013-05-23 12:57:48", "user": 1323048, "id": 18341380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21793701", "text": "@tenderlove Is this a candidate for 3.2.15 or should affected apps use a monkey patch?\n", "created_at": "2013-07-30 14:16:40", "user": 17553, "id": 21793701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22769078", "text": "Is this fix in a released version yet? \n", "created_at": "2013-08-16 14:30:53", "user": 4339381, "id": 22769078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22770450", "text": "@atvenu No word yet on whether it will be accepted.\n", "created_at": "2013-08-16 14:47:09", "user": 17553, "id": 22770450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22771820", "text": "Thank you....\n", "created_at": "2013-08-16 15:02:28", "user": 4339381, "id": 22771820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26210583", "text": "Since we could not get the fix into 3.2.15 and it is already fixed on 4.0 I'll close this pull request since we will not have another 3.2.x bug fix release. Sorry :cry:\n", "created_at": "2013-10-13 03:03:51", "user": 47848, "id": 26210583}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have the following route:\n\n```\nnamespace :api, :defaults => {:format => 'json'} do\n  namespace :v1 do\n    resources :blocked_domains, :only => [:index]\n  end\nend    \n```\n\nWith action caching enabled for blocked_domain controller.\n\n```\nmodule Api\n  module V1\n    class BlockedDomainsController < ApiController\n      before_filter :authenticate_user!\n      caches_action :index\n      cache_sweeper :blocked_domain_sweeper\n\n      respond_to :json\n\n      def index\n        respond_with BlockedDomain.search(params).result.all\n      end\n    end\n  end\nend\n```\n\nCaching works fine. But when i try to expire_action with:\n\n```\nexpire_action(:controller => '/api/v1/blocked_domains', :action => 'index', :format => 'json')\n```\n\nIt will fail. It happens because ActionCachePath.new(self, options, false).path returns \"localhost:3000/api/v1/blocked_domains\" instead of \"localhost:3000/api/v1/blocked_domains.json\" which is how the fragment is saved.\n\nMaybe, when the cache is created, it should also be saved without .json since this is the default format for that controller?\n", "labels": ["actionpack", "needs feedback"], "number": 9706, "updated_at": "2016-06-23 20:30:49", "user": 439774, "closed_at": "2013-06-23 12:48:17", "id": 11991321, "title": "Expire action fails when you have a different default format ", "url": "https://api.github.com/repos/rails/rails/issues/9706", "created_at": "2013-03-13 20:09:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14865554", "text": "Which Rails version are you using?\n", "created_at": "2013-03-13 20:11:05", "user": 47848, "id": 14865554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14865879", "text": "Ops, forgot that. I'm using 3.2.12.\n", "created_at": "2013-03-13 20:17:19", "user": 439774, "id": 14865879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14871304", "text": "@fernandomm your problem is the `:defaults` on the route definition. This is telling Rails that when generating a url with a format of `:json` the extension can be omitted - remove it and it will generate the full path.\n", "created_at": "2013-03-13 21:58:54", "user": 6321, "id": 14871304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14882098", "text": "@pixeltrix The problem is that if i remove it, /api/v1/blocked_domains won't return a json anymore and this breaks some 3rd party apps. I had to use this url ( without the .json ) to keep compatibility with an old PHP application.\n\nAny specific reason about why the cache function uses two different functions to generate the fragment name? ( it seems so, i haven't checked the code ) In my opinion, the first one should also omit the \".json\" part.\n", "created_at": "2013-03-14 01:43:20", "user": 439774, "id": 14882098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14890222", "text": "@fernandomm just move the default format handling to a before filter, e.g:\n\n``` ruby\nbefore_filter :set_default_format\n\ndef set_default_format\n  request.format = :json unless params.key?(:format)\nend\n```\n\nthat will use JSON for the routes without a format parameter.\n", "created_at": "2013-03-14 07:47:54", "user": 6321, "id": 14890222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16139805", "text": "@fernandomm the @pixeltrix's suggestion fixes your issue?\n", "created_at": "2013-04-09 20:59:36", "user": 47848, "id": 16139805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16383513", "text": "Very sorry for the delay.\n\nYes, it fixes. But i ended up clearing the entire cache otherwise i would have to add that before_filter to a bunch of controllers.\n\nIn my opinion, this should be fixed as using :defaults in routes is very common. See http://railscasts.com/episodes/350-rest-api-versioning\n\nOther developers might hit this bug and think that they are doing something wrong in sweepers. I lost 3-4 hours digging into Rails code to find what was wrong.\n", "created_at": "2013-04-15 13:08:02", "user": 439774, "id": 16383513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19873426", "text": "Okay. Since @fernandomm has their issue fixed, and this is currently-expected behavior, I'm giving it a close.\n\nIf someone wants to enhance Rails to make this kind of thing work, please send a pull request. Thanks!\n", "created_at": "2013-06-23 12:48:17", "user": 27786, "id": 19873426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/52930943", "text": "Shouldn't calling expire_action(..., format: 'json') make sure it's appending '.json' to the path, no matter if i set json as default or net? Because it isn't doing this.\nActually it's even doing the contrary: If you use pixeltrix' solution, you need to make sure to not set format: 'json' in expire_cache() or it won't work.\n", "created_at": "2014-08-21 14:51:24", "user": 6793065, "id": 52930943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125588606", "text": "This just caught me out, attempting to cache JSON API endpoints.\n", "created_at": "2015-07-28 12:44:47", "user": 876651, "id": 125588606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/228174199", "text": "-1 still having this problem\n", "created_at": "2016-06-23 20:30:49", "user": 6331667, "id": 228174199}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This test passes against 3.2 but fails against master.\n`[:id, :type]` were protected by default by sanitaizer, but now they aren't.\n\nActually we have to include `id` column in `permit` when we use `accepts_nested_attributes`.\n\nDo we have to do something with it guys?\n", "labels": [], "number": 9707, "updated_at": "2014-06-26 19:54:53", "user": 414803, "closed_at": "2013-03-22 14:13:11", "id": 11994582, "title": "When strong_parameters had been included, this case of update became possible", "url": "https://api.github.com/repos/rails/rails/issues/9707", "created_at": "2013-03-13 21:30:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15006411", "text": "Since you aren't passing the ActionController parameter hash to update_attributes, it won't be protected.\n\nOne of the benefits of strong_parameters making attribute protection a controller concern, is you're free to update_attributes at will internally.\n\nDoes this answer your question or am I misunderstanding the issue?\n", "created_at": "2013-03-16 15:19:16", "user": 552146, "id": 15006411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011209", "text": "Yes, as far as I know, @erichmenge is correct. If we're mistaken, please elaborate and we can re-open.\n", "created_at": "2013-03-16 20:01:44", "user": 27786, "id": 15011209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011725", "text": "Well I know guys it's controller thing, but logically thinking is it right case when we have record loaded and passing id it updates another record? I don't think so...\n", "created_at": "2013-03-16 20:32:51", "user": 414803, "id": 15011725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011758", "text": "If you update the id attribute, it will... update the id attribute.\n", "created_at": "2013-03-16 20:35:03", "user": 27786, "id": 15011758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15012131", "text": "Well this way I'd like to see it in `UPDATE ... SET ...` statement rather than `WHERE` statement:\n`UPDATE \"topics\" SET \"title\" = ?, \"updated_at\" = ?, \"content\" = ? WHERE \"topics\".\"id\" = 3  [[\"title\", \"Hm is it possible?\"], [\"updated_at\", 2013-03-16 20:58:46 UTC], [\"content\", \"--- Have a nice day\\n...\\n\"]]`\n", "created_at": "2013-03-16 20:59:33", "user": 414803, "id": 15012131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15012351", "text": "I'm re-opening this just in case this behavior is a bug. I am not sure. @jonleighton @tenderlove ?\n", "created_at": "2013-03-16 21:12:34", "user": 27786, "id": 15012351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15013873", "text": "Ah, that is interesting behavior. Thanks for the additional information @route.\n\nI'll see if I can't look a bit more into it in the next couple of days as well.\n\n```\nLoading development environment (Rails 4.0.0.beta1)\nirb(main):001:0> topic = Topic.create name: \"I like pie.\"\n   (0.1ms)  begin transaction\n  SQL (3.5ms)  INSERT INTO \"topics\" (\"created_at\", \"name\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Sat, 16 Mar 2013 23:01:24 UTC +00:00], [\"name\", \"I like pie.\"], [\"updated_at\", Sat, 16 Mar 2013 23:01:24 UTC +00:00]]\n   (1.7ms)  commit transaction\n=> #<Topic id: 1, name: \"I like pie.\", created_at: \"2013-03-16 23:01:24\", updated_at: \"2013-03-16 23:01:24\">\nirb(main):002:0> topic.update_attributes id: 15, name: \"I like pie a lot!\"\n   (0.1ms)  begin transaction\n  SQL (0.4ms)  UPDATE \"topics\" SET \"name\" = ?, \"updated_at\" = ? WHERE \"topics\".\"id\" = 15  [[\"name\", \"I like pie a lot!\"], [\"updated_at\", Sat, 16 Mar 2013 23:01:40 UTC +00:00]]\n   (0.1ms)  commit transaction\n=> true\nirb(main):003:0> topic\n=> #<Topic id: 15, name: \"I like pie a lot!\", created_at: \"2013-03-16 23:01:24\", updated_at: \"2013-03-16 23:01:40\">\nirb(main):004:0> topic.reload\n  Topic Load (0.4ms)  SELECT \"topics\".* FROM \"topics\" WHERE \"topics\".\"id\" = ? LIMIT 1  [[\"id\", 15]]\nActiveRecord::RecordNotFound: Couldn't find Topic with id=15\n```\n", "created_at": "2013-03-16 23:05:33", "user": 552146, "id": 15013873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15042486", "text": "It would be super nice to hear from people Steve mentioned and I've added fix for this also, opinions/suggestions?\n", "created_at": "2013-03-18 07:44:39", "user": 414803, "id": 15042486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15292397", "text": "This looks like a reasonable patch to me, but can you add an assertion at the end of the test to check that the record's id has actually changed. E.g. `assert_equal topic.title, Topic.find(1234).title` ?\n", "created_at": "2013-03-22 11:38:53", "user": 1979, "id": 15292397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15297907", "text": "@jonleighton done and added change log entry\n", "created_at": "2013-03-22 13:59:39", "user": 414803, "id": 15297907}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please sign your future gem releases with PGP, as described at https://www.rubygems-openpgp-ca.org. This allows attackers who forge Rails releases to be easily detected. We at Phusion are [already signing all our gems](http://www.phusion.nl/about/gpg).\n\nI realize that you may not necessarily trust this CA, but that is fine. By signing with PGP users can still verify files from your key directly, and if rubygems.org ever starts an official CA they can sign your keys without requiring actions from your side.\n", "labels": [], "number": 9708, "updated_at": "2013-03-13 22:29:14", "user": 819, "closed_at": "2013-03-13 22:23:47", "id": 11996542, "title": "Sign future gems with PGP", "url": "https://api.github.com/repos/rails/rails/issues/9708", "created_at": "2013-03-13 22:21:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872549", "text": "This is a duplicate of #9134.\n", "created_at": "2013-03-13 22:23:47", "user": 27786, "id": 14872549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872689", "text": "Not quite. #9134 advocates signing with X509. PGP provides many benefits over X509:\n- It works with the \"web of trust\" model, which is decentralized. It requires no existing CA infrastructure, and allows CA infrastructure to be built after the fact. X509 requires an existing CA infrastructure.\n- X509 tooling is very awkward. GPG is comparatively easy to use.\n\nhttps://www.rubygems-openpgp-ca.org/blog/gem-signing-x509-and-openpgp.html explains it better.\n", "created_at": "2013-03-13 22:26:44", "user": 819, "id": 14872689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14872802", "text": "The ticket is about gem signing in general, as far as I'm concerned. If you think that the distinction is important, please just comment over there.\n", "created_at": "2013-03-13 22:29:14", "user": 27786, "id": 14872802}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've actually [found the code](https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/plugin_new/plugin_new_generator.rb#L263-L276) that creates them but I'm not sure the best way to create a task that uses this logic.\n\nI can make a pull request if someone gives me a pointer to a similar addition.\n", "labels": ["engines"], "number": 9709, "updated_at": "2013-04-08 16:09:47", "user": 334809, "closed_at": "2013-04-08 16:09:47", "id": 11996914, "title": "Rails engine test dummies should be re-creatable", "url": "https://api.github.com/repos/rails/rails/issues/9709", "created_at": "2013-03-13 22:32:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873018", "text": ":trollface: +1 </end trollface>\n\nI agree that this is a legitimate idea. If you happen to delete the test application in an engine, it's difficult to get it back again. Having a rake task to generate that would be really useful.\n", "created_at": "2013-03-13 22:33:53", "user": 2687, "id": 14873018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873092", "text": "Why would you be deleting it?\n", "created_at": "2013-03-13 22:35:32", "user": 27786, "id": 14873092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873359", "text": "Let me turn that around: Why would you want to keep it around? It should be generated data and thus should not be committed.\n\nExcept there is no way to generate it without building another plugin.\n", "created_at": "2013-03-13 22:42:01", "user": 334809, "id": 14873359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14873573", "text": "Hmm. Maybe it's because I'm doing something slightly different: when I embed a dummy app in a gem (even if it's not an Engine), I actually write code for it. It's not just the simple dummy.\n", "created_at": "2013-03-13 22:47:08", "user": 27786, "id": 14873573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14890976", "text": "I'm not sure about this one... The dummy app is not strictly generated code. There will be modifications that you need in order to get your engine working as expected. If you don't generate the dummy app or deleted it by accident you can easily create a new engine and copy over the scaffold.\n\nIf you delete something there is also git to restore it. I'm also not sure where the benefits lie of not checking the dummy application into source control. As the tests are not working without it you would need to generate the app before every test run and loose the ability to make modifications.\n", "created_at": "2013-03-14 08:18:12", "user": 5402, "id": 14890976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14891058", "text": "I've seen ton of engine apps that don't have the dummy anymore, and eventually need it. They (and I agree) never checked it into git in the beginning.\n", "created_at": "2013-03-14 08:20:17", "user": 334809, "id": 14891058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16060016", "text": "This is more a feature request than an issue. The dummy application was made to be checked in the repository since the main reason to exist is to make possible to test a real integration with a Rails application.\n\nI agree that we can have a generator to the dummy application in the case that we started the plugin without it, but since we use the issue tracker only for issues I suggest to open a pull request or if you want more feedback about this one start a discussion in the Rails core mailing list.\n", "created_at": "2013-04-08 16:09:47", "user": 47848, "id": 16060016}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "this commit https://github.com/rails/rails/commit/7cc588b684f6d1af3e7fab1edfa6715e269e41a2 add default reaping frequency and the reaping may remove connection in use\n\n```\n$ rails new temp\n$ rails g model User name:string\n```\n\nlib/tasks/createusers.rake\n\n``` ruby\nnamespace :test do\n  desc \"createusers\"\n  task :createusers => :environment do\n    10000.times{User.new(name: \"ok\").save!}\n  end\nend\n```\n\n```\n$ rake rake test:createusers\n```\n# error output for gem 'mysql2'\n\nMysql2::Error: MySQL server has gone away: INSERT ...\nor \nMysql2::Error: Lost connection to MySQL server during query: INSERT ...\n# error output for gem 'pg'\n\nundefined method `fields' for nil:NilClass #query result is nil\n", "labels": ["activerecord"], "number": 9710, "updated_at": "2013-09-12 20:52:55", "user": 601525, "closed_at": "2013-03-20 18:21:38", "id": 12005670, "title": "database connection reaping may remove connection in use", "url": "https://api.github.com/repos/rails/rails/issues/9710", "created_at": "2013-03-14 04:47:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14886630", "text": "/cc @jonleighton @tenderlove \n", "created_at": "2013-03-14 04:52:28", "user": 27786, "id": 14886630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959383", "text": "confirmed. This commit breaks mysql2 tests on my machine. Mysql adapter works fine.\n", "created_at": "2013-03-15 13:08:59", "user": 5402, "id": 14959383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15074851", "text": "+1 not able to run any mysql2 tests. Only for a fashionable `30` frequency did the tests run for me.\n", "created_at": "2013-03-18 19:04:33", "user": 567626, "id": 15074851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15190243", "text": "Crap, I totally forgot the test runner issue.  I'll bump up this number in test.\n", "created_at": "2013-03-20 17:22:32", "user": 3124, "id": 15190243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15193987", "text": "I've reverted the commit. :-D\n", "created_at": "2013-03-20 18:21:38", "user": 3124, "id": 15193987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15244592", "text": "@tenderlove thanks for the revert :green_heart: \n", "created_at": "2013-03-21 15:17:54", "user": 5402, "id": 15244592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24334284", "text": "I'm using rails 4.0.0 with mysql2 and getting these errors still in my background workers.\n\n```\nundefined method `fields' for nil:NilClass\n```\n\n```\nmissing attribute: <random_column>\n```\n\n```\nMysql2::Error: MySQL server has gone away\n```\n\n```\nMysql2::Error: Lost connection to MySQL server during query\n```\n\nWhen the worker then goes to restart it works, so the issue is intermittent. Could this be related?\n", "created_at": "2013-09-12 16:15:21", "user": 212829, "id": 24334284}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "1. ActiverRecord Railtie : We don't use app vars\n2. Reserved Word test: Remove unnecessary line\n3. Association Test: We don't need 'c'\n4. ConnectionPool Test : We dont need pool_count \n", "labels": [], "number": 9711, "updated_at": "2014-06-21 09:42:18", "user": 567626, "closed_at": "2013-03-14 05:59:24", "id": 12006213, "title": "MOAR cleanups of unused variables. ", "url": "https://api.github.com/repos/rails/rails/issues/9711", "created_at": "2013-03-14 05:22:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14887238", "text": "//cc @senny @carlosantoniodasilva I hope I am not bugging you with these verrrry small improvements each day :smile: \n", "created_at": "2013-03-14 05:24:39", "user": 567626, "id": 14887238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14887901", "text": "Improvements are never annoying. :)\n", "created_at": "2013-03-14 05:58:20", "user": 27786, "id": 14887901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a Rails 4.0.0.beta1 regression.\n\nThe deprecation warning in `ActiveRecord::Relation::references_eager_loaded_tables?` fires whenever a query contains an `includes` and an e-mail value. In fact, the regular expression used to scan for table names is really brittle. (which is why this warning came to be in the first place)\n\nThe rate of false positives makes the warning really annoying, as it litters my unit test output. Please consider either\n1. a configuration option that removes the warning and the deprecated behavior, or\n2. a configuration option that silences the warning, or\n3. a Relation method like \"references\" that says \"I know what I'm doing, silence this warning\"\n\nThe regexp problem was documented in https://github.com/rails/rails/issues/7177\n\nThank you!\n", "labels": ["activerecord"], "number": 9712, "updated_at": "2013-10-31 01:13:09", "user": 11460, "closed_at": "2013-03-15 15:12:11", "id": 12006540, "title": "AR \"references\" deprecation warning when searching for email addresses", "url": "https://api.github.com/repos/rails/rails/issues/9712", "created_at": "2013-03-14 05:47:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14890803", "text": "I agree that having a deprecation warning that fires without being able to solve the problem is annoying. I would implement option 1 as it replicated the behaviour after the deprecation. The only downside is that we than have to deprecate the option with 4.1.\n\n@jonleighton thoughts?\n", "created_at": "2013-03-14 08:12:11", "user": 5402, "id": 14890803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959584", "text": "@senny option 1 sounds sensible.\n", "created_at": "2013-03-15 13:12:39", "user": 1979, "id": 14959584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959611", "text": "@senny do you want to work on this? if not I'll do it.\n", "created_at": "2013-03-15 13:13:10", "user": 1979, "id": 14959611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959781", "text": "@jonleighton I'm on it.\n", "created_at": "2013-03-15 13:17:09", "user": 5402, "id": 14959781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14966382", "text": "Thank you very much!!\n", "created_at": "2013-03-15 15:17:41", "user": 11460, "id": 14966382}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This will prevent error when using stale on live stream(issue #9636)\n\nTest application: https://github.com/imanel/liveStale\n\n**Rationale**: sometimes we want to use stale on longer actions(like live ones) and currently it is impossible. With this patch ETag will be set for actions that are not using `stream.write`, which is probably expected behavior.\n", "labels": [], "number": 9713, "updated_at": "2015-05-03 17:12:08", "user": 36869, "closed_at": "2013-03-14 20:39:52", "id": 12009204, "title": "Handle conditional get in live requests", "url": "https://api.github.com/repos/rails/rails/issues/9713", "created_at": "2013-03-14 08:20:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14916613", "text": "/cc @tenderlove\n", "created_at": "2013-03-14 17:30:08", "user": 27786, "id": 14916613}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm not sure if this is intentional - hopefully not. I was able to reproduce the issue using SQLite3 and MySQL as well - it's not DB specific, sample code : \n\n``` ruby\nModel.create!({}) # fails on master\nModel.create! :name => 'name' # OK\nModel.create! :name => nil # fails as well\n```\n\nincorrect SQL is generated: **INSERT INTO \"models\" VALUES(NULL)**\n", "labels": ["activerecord", "needs feedback"], "number": 9714, "updated_at": "2013-03-15 19:15:53", "user": 45967, "closed_at": "2013-03-15 19:15:53", "id": 12012238, "title": "Model.create fails when empty Hash given (on master)", "url": "https://api.github.com/repos/rails/rails/issues/9714", "created_at": "2013-03-14 10:13:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14895180", "text": "I tried to reproduce but it worked for me. Maybe I was doing something wrong. If you upload a sample app to github I'll take a look.\n", "created_at": "2013-03-14 10:22:03", "user": 5402, "id": 14895180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14979653", "text": "ohh, premature issue report I only tried MySQL/SQLite3 with 4.0 (while testing AR-JDBC on JRuby) and they failed the same with only AR stuff in the backtrace ... it must be smt on our (AR-JDBC) side with 4.0. sorry and thanks for trying\n", "created_at": "2013-03-15 19:15:53", "user": 45967, "id": 14979653}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm bootstraping a Rails 4b1 application using Ruby 2 and latest Bundler.\n\nWhen I run `bin/rails` command inside the app directory, I get the `rails new` message as if I was not in a Rails directory.\n\nI switched to `master` rails without success. I tried to delete all my rails gems without success neither.\n", "labels": [], "number": 9715, "updated_at": "2014-11-13 15:05:02", "user": 12682, "closed_at": "2013-03-14 11:14:06", "id": 12012584, "title": "\"bin/rails\" command in a Rails 4 app directory gives me the \"rails new\" help message", "url": "https://api.github.com/repos/rails/rails/issues/9715", "created_at": "2013-03-14 10:25:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14896106", "text": "OK. My bin/rails file looked like this : \nhttps://gist.github.com/slainer68/5160349\n\nI had to replace it with the current template file : https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/app/templates/bin/rails\n\nBut I don't understand why the template wasn't good just after the app generation using the Rails 4b1 gem...\n", "created_at": "2013-03-14 10:48:34", "user": 12682, "id": 14896106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14897023", "text": "OK, that's because I used --binstubs, see : https://gist.github.com/chrismo/5043420\n", "created_at": "2013-03-14 11:14:06", "user": 12682, "id": 14897023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14907146", "text": "I don't think you should close this issue. I ran into this too when trying out the Rails 4 beta, and it was confusing as hell to figure out what was going wrong. I think that \"$PROJECT/bin/rails\" would work as expected, and is a use case that should probably be handled.\n", "created_at": "2013-03-14 15:03:28", "user": 3300, "id": 14907146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14914930", "text": "Bundler's old binstubs don't work like the new `bundle binstubs` do, you need to use one or the other.\n", "created_at": "2013-03-14 17:02:24", "user": 27786, "id": 14914930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/38225491", "text": "`rake rails:update:bin` fixed the issue for me. The repo I was using had `/bin` in the `.gitignore` file.\n", "created_at": "2014-03-20 21:51:49", "user": 746347, "id": 38225491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/38730479", "text": "Thanks @dw2 ! That solution worked for me too.\n", "created_at": "2014-03-26 19:45:18", "user": 3486733, "id": 38730479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62902847", "text": "@dw2 This worked for me. Thanks.\n", "created_at": "2014-11-13 15:05:02", "user": 879734, "id": 62902847}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### 1. headers in functional tests\n#9700 already added support for functional tests as well. I just added test-cases to lock the behaviour and updated the documentation accordingly.\n### 2. document functional tests\n\nI added documentation for the request simulation methods in functional tests.\n", "labels": [], "number": 9716, "updated_at": "2014-06-26 19:55:02", "user": 5402, "closed_at": "2013-03-15 09:16:53", "id": 12013460, "title": "Rework headers functional tests", "url": "https://api.github.com/repos/rails/rails/issues/9716", "created_at": "2013-03-14 10:54:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14896383", "text": "@carlosantoniodasilva @pixeltrix let me know what you think.\n", "created_at": "2013-03-14 10:55:32", "user": 5402, "id": 14896383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14897091", "text": "@pixeltrix the fact that I used both notations is clearly a sign that it is confusing :smile: it is the other way around though. Using `request.headers` does not work. You need to use `request.env` as the `headers` method always instantiated a new `Http::Headers` class the changes will not persist: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/request.rb#L151-L153\n", "created_at": "2013-03-14 11:16:05", "user": 5402, "id": 14897091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14947140", "text": "@pixeltrix I updated the examples to be more useful. The access is still through `@request.env`. The problem is that `Http::Headers` does not reference the hash passed in but has it's own hash.\n", "created_at": "2013-03-15 07:44:51", "user": 5402, "id": 14947140}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request should resolve #7347 issue.\n\nThere was a bug/annoying problem when:\n1. there are some child records for has many association marked for destruction,\n2. in the the same transaction added new child records which conflicts with marked records by schema constraints like unique values for some attributes,\n3. on save there is Rollback Exception, because new conflicted records have been inserted before marked for destruction records are destroyed.\n\nExample code: https://gist.github.com/pftg/5160669\n", "labels": ["activerecord"], "number": 9717, "updated_at": "2014-07-04 15:46:48", "user": 125715, "closed_at": "2013-05-22 22:36:56", "id": 12015116, "title": " #7347: Destroy marked child records before new child records inserted", "url": "https://api.github.com/repos/rails/rails/issues/9717", "created_at": "2013-03-14 11:48:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14898574", "text": "If I add `validates_uniqueness_of` then record will be invalid: `ActiveRecord::RecordInvalid: Validation failed: ... has already been taken`.\n\nNext steps, I gonna to request feature to take in account `mark_for_destruction` in validation uniqueness and others constraints.\n\nElsewhere the destroy before insert was in versions before 3.2.7. And I reverted it.\n", "created_at": "2013-03-14 11:58:30", "user": 125715, "id": 14898574}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14902852", "text": "@pftg the test is not failing without the patch. I guess you can add a unique index on `birds` for `name` and `color` to make the test fail without the patch .\n", "created_at": "2013-03-14 13:48:32", "user": 6399, "id": 14902852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15047619", "text": "@neerajdotname I think comment about not failing tests was for old commit, which was without updated `schema.rb`. Will be great if you review updated PR.\n", "created_at": "2013-03-18 10:25:20", "user": 125715, "id": 15047619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15813271", "text": "+1, I just ran into this problem today.\n", "created_at": "2013-04-03 01:43:37", "user": 495484, "id": 15813271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18311909", "text": "Just saw this.  This issue has been fixed with PR #10417 \nThat's the master (4.x) branch.  I have a 3.2 backport PR @ #10681 that is awaiting attention.\n", "created_at": "2013-05-22 22:19:37", "user": 733873, "id": 18311909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18312776", "text": "Closed by #10417\n", "created_at": "2013-05-22 22:36:56", "user": 47848, "id": 18312776}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "routes\n\n```\nget '/my/path' => 'my#path'\n```\n\ncurrently:\n\n```\nassert_recognizes({ :controller => \"my\", :action => \"path\", :foo => 'bar'}, '/my/path?foo=bar' # fails\nassert_recognizes({ :controller => \"my\", :action => \"path\"}, '/my/path?foo=bar' # passes\n```\n\nI'm not sure if this is expect behaviour but it seems counter intuitive to me. I would expect the first assert to pass and the second to fail. If it is expected behaviour a small change to the documentation of assert_recognizes might be merited since it doesn't mention how query params are handled.\n", "labels": ["actionpack"], "number": 9718, "updated_at": "2013-03-17 09:05:56", "user": 242861, "closed_at": "2013-03-16 10:38:45", "id": 12015569, "title": "assert_recognizes doesn't expect query params", "url": "https://api.github.com/repos/rails/rails/issues/9718", "created_at": "2013-03-14 12:14:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14948145", "text": "/cc @pixeltrix \n", "created_at": "2013-03-15 08:22:46", "user": 5402, "id": 14948145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15002759", "text": "@msaspence it is documented that passing query parameters doesn't work for `assert_recognizes`:\n\n> You can also pass in extras with a hash containing URL parameters that would normally be in the query string. This can be used to assert that values in the query string string will end up in the params hash correctly. To test query strings you must use the extras argument, appending the query string on the path directly will not work. For example:\n\nHowever the code that does this isn't really testing anything:\n\n``` ruby\ndef assert_recognizes(expected_options, path, extras={}, message=nil)\n  request = recognized_request_for(path)\n\n  expected_options = expected_options.clone\n  extras.each_key { |key| expected_options.delete key } unless extras.nil?\n\n  expected_options.stringify_keys!\n  msg = build_message(message, \"The recognized options <?> did not match <?>, difference: <?>\",\n      request.path_parameters, expected_options, expected_options.diff(request.path_parameters))\n  assert_equal(expected_options, request.path_parameters, msg)\nend\n```\n\nas you can see all it does is delete the keys in extras from expected_options. :cry:\n\nThe problem is that these assertions are designed to be used in functional/controller test where there isn't a request stack whereas in an integration test you'd just send the request and assert the various parts of the request object.\n", "created_at": "2013-03-16 10:38:45", "user": 6321, "id": 15002759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15002849", "text": "@pixeltrix  Wouldn't it make sense to consider these params, if they are in fact present in case of a request stack, instead of wrongly passing the tests. \n", "created_at": "2013-03-16 10:47:38", "user": 567626, "id": 15002849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15002903", "text": "The `assert_recognizes` method is really for testing whether you've defined a route correctly - what the query params are is irrelevant to whether the router will recognise them. You'd be better off not putting them in the test - they are just visual noise and that's how the implementation treats them.\n", "created_at": "2013-03-16 10:51:52", "user": 6321, "id": 15002903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15019553", "text": "Query params are relevant if they are used by your route conditions class (as mine are)\n", "created_at": "2013-03-17 09:05:56", "user": 242861, "id": 15019553}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I ran into an issue that is documented in the following ticket:\nhttps://github.com/wvanbergen/scoped_search/issues/33\n\nThe following test showed it's \"something\" to do with strings from the params hash I'm pretty sure.\n\n``` ruby\n# Failure\n@query = params[:query]\nModel.search_for(@query)\n\n# Pass\nparams[:query] = (same string as previously, but manually set in controller)\n@query = params[:query]\nModel.search_for(@query)\n\n# Pass\n@query = params[:query]\nModel.search_for(\"#{@query} \")\n# NOTE: Fails without trailing space\n```\n\nThe error that is thrown is \"TypeError: can't convert nil into String\" during some operations within that gem.\n\nI'm guessing due to security something about a string from the params hash is different. Any ideas where I should start looking or what would be causing this difference?\n", "labels": [], "number": 9719, "updated_at": "2013-03-15 13:13:04", "user": 2103728, "closed_at": "2013-03-15 08:44:11", "id": 12019842, "title": "String from params hash different to normal strings", "url": "https://api.github.com/repos/rails/rails/issues/9719", "created_at": "2013-03-14 14:12:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14915149", "text": "Are you doing this on 4.0.0beta1 or on 3.2.13.rc2?\n", "created_at": "2013-03-14 17:06:08", "user": 27786, "id": 14915149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14932543", "text": "Sorry. This was done on 3.2.8 a while ago but I'll try and update and reproduce on 3.2.13.rc2 and 4.0.0beta1.\n", "created_at": "2013-03-14 22:10:09", "user": 2103728, "id": 14932543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14932891", "text": "If you're still on 3.2.8, _please_ make sure you upgrade, or apply the released security patches. There are _very_ serious vulnerabilities present in that release of Rails.\n", "created_at": "2013-03-14 22:18:10", "user": 27786, "id": 14932891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14933088", "text": "This isn't a real application its simply a dummy so I can easily reproduce the errors so no security issues there:\nhttps://github.com/brocktimus/rails_scoped_search\n\nStill going through and reproducing but when using ruby 1.9.3 the bug appears in 3.2.8, 3.2.12, 3.2.13rc. I couldn't test on 4.0.0beta1 because there's a problem with my Gemfile which I shall resolve later.\n\nInterestingly enough if using ruby 2.0.0 I don't get the test failures listed above so now I'm really confused.\n", "created_at": "2013-03-14 22:22:31", "user": 2103728, "id": 14933088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14934000", "text": "OK could not reproduce right now on 4.0.0.beta1 because the gem is not yet compatible. Will work on making it compatible and then try and reproduce. \n\nSo to summarise; ruby 1.9.3 with rails 3.2.12 or 3.2.13rc2 both exhibit the same behaviour. Error goes away if ruby 2.0.0 is being used.\n\nMain things I'm looking for is just direction I should start searching (if any) to find what Rails \"does\" to the params hash if anything. I can run off and investigate.\n", "created_at": "2013-03-14 22:42:58", "user": 2103728, "id": 14934000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14947986", "text": "I suspect the problem is caused by [this line](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/parameters.rb#L58): `params.force_encoding(Encoding::UTF_8).encode!`\n\nTo illustrate have a look at the following irb session:\n\n```\nirb(main):011:0> str = \"hans\"\n=> \"hans\"\nirb(main):017:0> forced_str = str.dup\n=> \"hans\"\nirb(main):018:0> forced_str.force_encoding(Encoding::UTF_8).encode!\n=> \"hans\"\nirb(main):015:0> str[4,1]\n=> \"\"\nirb(main):020:0> forced_str[4,1]\n=> nil\n```\n\nNow of course the plugin could handle both `nil` and `\"\"` but it seems like the API is inconsistent. As far as I can tell this is more related to Ruby than to Rails though.\n", "created_at": "2013-03-15 08:17:14", "user": 5402, "id": 14947986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14948685", "text": "@senny looks like that's fixed in Ruby 2.0.0:\n\n``` irb\n>> RUBY_VERSION\n=> \"2.0.0\"\n>> str = \"hans\"\n=> \"hans\"\n>> forced_str = str.dup\n=> \"hans\"\n>> forced_str.force_encoding(Encoding::UTF_8).encode!\n=> \"hans\"\n>> str[4,1]\n=> \"\"\n>> forced_str[4,1]\n=> \"\"\n```\n", "created_at": "2013-03-15 08:37:59", "user": 6321, "id": 14948685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14949211", "text": "Thanks @pixeltrix I'm closing this one as it is not a Rails related issue. I hope the feedback helps you to solve the problem in your application until you can jump on ruby 2.0. Ping me if you have further questions.\n", "created_at": "2013-03-15 08:44:10", "user": 5402, "id": 14949211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14953910", "text": "Thanks for all the help guys, very much appreciated.\n\nI originally noticed the issue 6 months ago and didn't get back to this until now. I couldn't write a test to reproduce it in the gem so write stub application to figure out what was going on. Figured it must be a rails \"thing\" since unit tests weren't helping. As soon as it worked on Ruby 2.0 this morning I started to realise it's likely a ruby problem thouhg.\n\nWith this info I'll try and fix bug in the library. Thanks again for all the help!\n", "created_at": "2013-03-15 10:35:44", "user": 2103728, "id": 14953910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14959604", "text": "Fixed my bug, thanks again :). Simply calling to_s where the error appears fixes the issue.\n", "created_at": "2013-03-15 13:13:04", "user": 2103728, "id": 14959604}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hash#deep_transform_keys and its families do not apply to a hash's nested arrays.  But it is less surprising for me if they do.  What do you think?\n\nSee #6060 for past discussion.\n", "labels": ["activesupport"], "number": 9720, "updated_at": "2014-06-20 10:48:01", "user": 10973, "closed_at": "2013-06-08 10:01:24", "id": 12027304, "title": "Hash#deep_*_keys(!) recurse into nested arrays.", "url": "https://api.github.com/repos/rails/rails/issues/9720", "created_at": "2013-03-14 16:45:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15581095", "text": ":+1: \n", "created_at": "2013-03-28 10:58:25", "user": 182119, "id": 15581095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15945008", "text": "HWIA digs into nested arrays.\n\n```\n>> {a: 'a', b: [ {c: 'c'} ] }.with_indifferent_access\n=> {\"a\"=>\"a\", \"b\"=>[{\"c\"=>\"c\"}]}\n```\n", "created_at": "2013-04-05 08:53:02", "user": 10973, "id": 15945008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18037077", "text": ":thumbsup: \n", "created_at": "2013-05-17 00:13:44", "user": 1114, "id": 18037077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18125566", "text": ":+1: \n\nTypo on line 95. ans --> and\n", "created_at": "2013-05-19 22:02:13", "user": 266319, "id": 18125566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19146434", "text": "Typo fixed and recreated PR #10887\n", "created_at": "2013-06-08 10:09:18", "user": 10973, "id": 19146434}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After seeing #6534 I found out that there is no XML equivalent of `to_json` method in Rails core. As some of us are still using XML I thought that I could prepare proof of concept of such method and see if it is good idea.\n\nIt's current state is far from perfect(not to mention lack of tests), but my main idea is to ask if I'm going in right direction? If so I would gladly improve code base and write more tests, but right now I could use some sanity check and opinions from more experienced Rails core developers about way I'm trying to do that.\n\nFrom my perspective the biggest gain would be calling methods like `render :xml => true` - in some cases that could be useful and this is allowed in XML spec, but I'm not sure if it will not break something.\n", "labels": [], "number": 9721, "updated_at": "2015-05-03 17:07:06", "user": 36869, "closed_at": "2013-03-15 08:49:00", "id": 12030290, "title": "Add to_xml method to core classes", "url": "https://api.github.com/repos/rails/rails/issues/9721", "created_at": "2013-03-14 17:49:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14919620", "text": "Noooooooooo…\n\nSeriously, given all the security problems we've had with JSON, YAML, etc. I don't think is a good idea and competing implementations of `to_json` stomping over each other led to the `as_json` solution introduced in Rails 2.3. Also the XML params parser has been removed in Rails 4.0 so if it was going to go anywhere I'd put it there.\n", "created_at": "2013-03-14 18:16:54", "user": 6321, "id": 14919620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14920006", "text": "My intention was to create only generator of XML - parser will probably be too controversial. I believe that XML is still first-class citizen for some developers, especially if you are providing API for multiple devices.\n", "created_at": "2013-03-14 18:23:08", "user": 36869, "id": 14920006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14948494", "text": "I think looking forward XML will no longer be relevant for the rails core. As @pixeltrix mentioned already the parser has been moved outside of Rails and this is a clear transition away from XML.\n\nBesides that we need to have very good reasons to add more methods to core classes. I think this is something that you can do in a gem or your application but should not go into Rails.\n\nI'm :-1: on this one.\n", "created_at": "2013-03-15 08:35:09", "user": 5402, "id": 14948494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14949733", "text": "As @senny said, the direction of Rails core is away from XML so I closing this. However thanks @imanel for taking the time to try and help to improve Rails.\n", "created_at": "2013-03-15 08:49:00", "user": 6321, "id": 14949733}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The cache counter seem like it is designed to work only through the association name, which means that when the child's parent_id changes the cache counter is not updated. This is a real problem is you are using update_attributes with a form hash.\n\nFor example\n\n```\nclass Foo < ActiveRecord::Base\n  has_many :bars\nend\n\nclass Bar < ActiveRecord::Base\n  attr_accessible :title, :foo_id\n  belongs_to :foo, inverse_of: :bars, counter_cache: true\nend\n\nfoo1 = Foo.create\nfoo2 = Foo.create\nbar = Bar.create\nfoo1.bars << bar\nfoor1.save\nfoo1.reload.bars_count # returns 0\nfoo2.reload.bars_count # returns 1\n\nparams[:bar] # { title: 'new title', foo_id: 2 }\nbar = Bar.first\nbar.update_attribtutes params[:bar]\n\nfoo1.reload.bars_count # returns 0 should return 1\nfoo2.reload.bars_count # returns 1 should return 0\n```\n", "labels": ["activerecord"], "number": 9722, "updated_at": "2014-08-15 09:23:45", "user": 242861, "closed_at": "2013-03-16 02:25:33", "id": 12030414, "title": "belongs_to cache counter isn't updated when :xxx_id attribute is changed", "url": "https://api.github.com/repos/rails/rails/issues/9722", "created_at": "2013-03-14 17:52:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14918030", "text": "Some more info\n\nhttp://stackoverflow.com/questions/9403577/rails-counter-cache-not-updating-correctly?answertab=active\n", "created_at": "2013-03-14 17:53:04", "user": 242861, "id": 14918030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14968474", "text": "I'm looking into this. I've written a test case and can confirm that this behavior exists on master. \n", "created_at": "2013-03-15 15:52:03", "user": 1075780, "id": 14968474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14970065", "text": "The gem https://github.com/bestvendor/counter_culture covers that, it is much more complete (disclaimer: I have not used it personally).\n", "created_at": "2013-03-15 16:19:22", "user": 3387, "id": 14970065}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I could not do:\n\n``` ruby\nProduct.find_each { |p| ... }\n```\n\nas I got following error:\n\n```\nActiveRecord::StatementInvalid: PG::Error: ERROR:  zero-length delimited identifier at or near \"\"\"\"\nLINE 1: ...products\"  ORDER BY \"products\".\"\" ASC LIM...\n```\n\nPlease someone help me verify\n", "labels": [], "number": 9723, "updated_at": "2013-03-15 00:04:40", "user": 135605, "closed_at": "2013-03-15 00:04:40", "id": 12044631, "title": "[3-2-stable] find_each does not work on Model scoped", "url": "https://api.github.com/repos/rails/rails/issues/9723", "created_at": "2013-03-14 23:40:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14937005", "text": "Sorry, I am going to close this ticket as I find this has something to do with PG than `#find_each` as my other friends got this working correctly on their boxes.\n", "created_at": "2013-03-15 00:04:40", "user": 135605, "id": 14937005}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I think I have a problem with reset_counters, but I need help knowing what information would be useful to diagnose the issue. I have been working on getting my application to use more cache counters and I successfully implemented several until reset_counters() just stopped working. I tried backing up to a previous revision when I knew it worked, and still nothing. I tried the standard new demo project with \"Post\" and \"Comments\" and that still failed. I upgraded from Rails 3.2.11 to 3.2.12 and it the same error occurred. It was working at one point, but now everything fails, so I think maybe the environment has something to do with it.\n\nhere is a gist of a new project I create to examine the problem, which includes the errors I have been getting : https://gist.github.com/ism/5166535\n\nI don't know where the problem is coming from. I think if reset_counters was failing, more people would be yelling, but after the sample project, I don't see how it is my code either.\n\nmy dev environment is OSX 10.75 with ruby 1.9.3p392  and rails 3.2.12 .\n\nI have pretty much wiped my environment and recreated it thinking it was something on my end.\n\nLet me know what I can to do to make this more clear.\n", "labels": ["activerecord"], "number": 9724, "updated_at": "2013-03-15 14:58:49", "user": 50290, "closed_at": "2013-03-15 10:31:33", "id": 12046045, "title": "reset_counters failing for new and existing projects", "url": "https://api.github.com/repos/rails/rails/issues/9724", "created_at": "2013-03-15 00:39:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14947366", "text": "If you upload a sample application with the latest `3.2.x` release (`3.2.13.rc2`) to github that I can check out I'll take a look.\n", "created_at": "2013-03-15 07:54:02", "user": 5402, "id": 14947366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14950160", "text": "Thanks. Here is what I was experimenting with: https://github.com/cgr/reset_counters_demo\n", "created_at": "2013-03-15 09:00:56", "user": 50290, "id": 14950160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14952881", "text": "I talked to @pixeltrix about this issue and he spotted that you are calling `reset_counters` with invalid parameters. As the [documentation](http://api.rubyonrails.org/classes/ActiveRecord/CounterCache.html#method-i-reset_counters) shows you should pass the association and not the column name of the counter:\n\n``` ruby\n# bad\nPost.reset_counters(1, :comments_count)\n\n# good\nPost.reset_counters(1, :comments)\n```\n\nAs we can detect that the passed symbol is not working I'll add an error message to `#reset_counters`.\n", "created_at": "2013-03-15 10:09:44", "user": 5402, "id": 14952881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14965240", "text": "Thanks Senny. That explains why it magically stopped working. My brain fizzled out :P Sorry for the trouble, but I appreciate your help.\n", "created_at": "2013-03-15 14:58:49", "user": 50290, "id": 14965240}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Right now several of the route options (only, except) can be defined\nas arrays of string or symbols. I was surprised when playing with\nrails 4 and this didn't work.\n- Added test for string array declaration.\n\nWith this change concerns could be declared with strings or symbols:\n\n```\nresources :posts, concerns: [:commentable, :taggable]\nresources :media, concerns: %w(commentable taggable)\n```\n", "labels": ["actionpack"], "number": 9725, "updated_at": "2014-07-04 15:46:43", "user": 648160, "closed_at": "2013-04-12 23:13:50", "id": 12048219, "title": "Allow route concerns to be defined as a string or symbol array", "url": "https://api.github.com/repos/rails/rails/issues/9725", "created_at": "2013-03-15 02:30:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14948222", "text": "/cc @pixeltrix \n", "created_at": "2013-03-15 08:25:04", "user": 5402, "id": 14948222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14950387", "text": "Looks like we also need a `to_sym` [here](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L1714) so that the following works:\n\n``` rb\nconcern 'taggable' do |options|\n  resources 'tags', options\nend\n```\n", "created_at": "2013-03-15 09:06:35", "user": 6321, "id": 14950387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14989348", "text": "@pixeltrix I've gone ahead and added an explicit test case (makes a lot of sense). I've also updated the PR to no longer use the `:picture` resource to test the string array, and instead I've added a new `:article` resource. I've updated the concern method as you suggested, and tweaked the taggable concern to match your example.\n\nThanks for looking at this guys!\n", "created_at": "2013-03-15 22:57:51", "user": 648160, "id": 14989348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16322330", "text": "I'll resubmit with suggested changes.\n", "created_at": "2013-04-12 23:13:50", "user": 648160, "id": 16322330}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I do see finder_sql is deprecated and am investigating the correct way to do what I want, but I thought I'd post this in case you still want the functionality to work as a transitional process.\n\n```\nclass Team\n  has_many :games, finder_sql: proc { \"select * from games where home_team_id = #{id} or away_team_id = #{id}\" }\nend\n\nclass game\n  belongs_to :home_team, class_name: 'Team'\n  belongs_to :away_team, class_name: 'Team'\n  scope :completed, proc { where(completed: true) }\nend\n```\n\nNow in a rails console, `team.games` works as expected, it generates the correct sql:\n\n```\nselect * from games where home_team_id = 3 or away_team_id = 3\n```\n\nHowever `team.games.completed` generates the following error:\n\n```\nSELECT \"games\".* FROM \"games\" WHERE \"games\".\"team_id\" = $1 AND \"games\".\"completed\" = 't'  [[nil, 3]]\n```\n\nAs you can see, it has completely ignored the `finder_sql` setup in the chained scenario.\n", "labels": ["activerecord", "needs feedback"], "number": 9726, "updated_at": "2013-03-18 11:16:28", "user": 26856, "closed_at": "2013-03-18 11:16:28", "id": 12049244, "title": "Rails 4 - finder_sql ignored when chained with a scope", "url": "https://api.github.com/repos/rails/rails/issues/9726", "created_at": "2013-03-15 03:30:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14942464", "text": "FWIW, I think the correct solution in my case is to create a method called `games` in the `Team` class which is simply `Game.where(\"home_team_id = ? or away_team_id = ?\", id, id)` that can be successfully chained. This is a better solution because the association should not be interacted with this way normally, e.g. you can't add/remove from it as a has_many without knowing the proper single foreign key to use.\n\nHaving said that, the above still demonstrates an issue with finder_sql chaining with scopes, even if there are \"better\" solutions for my exact need in this case.\n", "created_at": "2013-03-15 03:40:54", "user": 26856, "id": 14942464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14961434", "text": "/cc @jonleighton \n", "created_at": "2013-03-15 13:49:44", "user": 5402, "id": 14961434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14965424", "text": "Is this a regression from 3.2? `:finder_sql` is deprecated in Rails 4, so unless it's a regression then it's not going to be fixed.\n", "created_at": "2013-03-15 15:02:13", "user": 1979, "id": 14965424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15022151", "text": "From security perspective its not a good idea to use string interpolation in raw sequel. You could create a method like\n\n``` ruby\ndef games\n  Game.where(\"home_team_id =  ? or away_team_id = ?\", id, id)\nend\n```\n\nand than simply use your scopes for <code>games</code>\n", "created_at": "2013-03-17 12:48:39", "user": 594960, "id": 15022151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15032336", "text": "I agree with the opinion of @sharkzp \n\nDo not think it should be removed.\n", "created_at": "2013-03-17 22:21:19", "user": 455676, "id": 15032336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15035836", "text": "@sharkzp if you check my second comment that's exactly how i ended up doing it. The issue here was simply to demonstrate how finder_sql is broken.\n\nFWIW the only reason I used interpolation in the original example was a) I knew #{id} was a safe interpolation as it's always digits and b) I wasn't aware of any way to pass bind values in a finder_sql.\n", "created_at": "2013-03-18 01:51:51", "user": 26856, "id": 15035836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15041871", "text": "@tigris the question remains, did it work with 3.2.x or was this always broken?\n", "created_at": "2013-03-18 07:16:04", "user": 5402, "id": 15041871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15048712", "text": "@senny it would seem it is also broken in rails 3.2.12\n", "created_at": "2013-03-18 10:53:48", "user": 26856, "id": 15048712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15049557", "text": "I'm closing this one then. As @jonleighton said, the feature is deprecated in Rails 4 and we would only fix regressions from 3.2. It does not make much sense to improve an already deprecated feature.\n\nThanks for reporting!\n", "created_at": "2013-03-18 11:16:28", "user": 5402, "id": 15049557}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In **Section 4.3 Setting the Application Home Page** of the Edge Rails Guide - Getting Started with Rails, restore the following instruction after the first paragraph, otherwise \"Hello, Rails!\" will not display when the root URL is reloaded:\n\n> The first step to doing this is to delete the default page from your application:\n\n```\n$ rm public/index.html\n```\n\n> We need to do this as Rails will deliver any static file in the public directory in preference to any dynamic content we generate from the controllers.\n", "labels": ["docs"], "number": 9727, "updated_at": "2013-03-15 05:11:50", "user": 1610420, "closed_at": "2013-03-15 05:10:03", "id": 12049905, "title": "Edge RailsGuides: GettingStarted: 4.3 Setting the Application Home Page: delete index.html", "url": "https://api.github.com/repos/rails/rails/issues/9727", "created_at": "2013-03-15 04:15:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14943248", "text": "Where are you seeing this? http://edgeguides.rubyonrails.org/getting_started.html#setting-the-application-home-page does not have that text.\n", "created_at": "2013-03-15 04:20:24", "user": 27786, "id": 14943248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14943302", "text": "Exactly, the instructions should be restored, see that section in the current page at http://guides.rubyonrails.org/getting_started.html#setting-the-application-home-page, following the first paragraph \"Now that we have made the controller ... smoke test.\"\n", "created_at": "2013-03-15 04:23:10", "user": 1610420, "id": 14943302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14943403", "text": "Why would they need to restore that? `public/index.html` does not exist any more, that command won't do anything.\n", "created_at": "2013-03-15 04:27:37", "user": 27786, "id": 14943403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14943519", "text": "I am following the guide using Ruby 1.9.3/Rails 3.2.12. I guess the version of rails I am using still generates public/index.html. However, in Section 3.2 where the reader is instructed to run `$ rails --version` it expects Rails 3.2.9 or better. Did public/index.html get dropped at some point? Should I be using a newer version of Rails?\n", "created_at": "2013-03-15 04:33:40", "user": 1610420, "id": 14943519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14944142", "text": "The edge guides are for Rails 4, not for Rails 3.2. Please use the non-edge guides for Rails 3.2, or use rails 4.0.0.beta1 with edge guides. That's why they're 'edge' ;)\n\nI'll update the bit about 3.2.9 there, you're 100% right that's wrong.\n", "created_at": "2013-03-15 05:10:03", "user": 27786, "id": 14944142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14944185", "text": "Fixed in https://github.com/rails/rails/commit/258f1e5980641767dd4f0a80bdade39beabbfe6c\n", "created_at": "2013-03-15 05:11:50", "user": 27786, "id": 14944185}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Just fix some verrry small typos\n", "labels": [], "number": 9728, "updated_at": "2016-02-22 14:25:41", "user": 567626, "closed_at": "2013-03-15 12:50:56", "id": 12051652, "title": "Small typos here and there.", "url": "https://api.github.com/repos/rails/rails/issues/9728", "created_at": "2013-03-15 06:27:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14947163", "text": "looks good to me /cc @carlosantoniodasilva @steveklabnik \n", "created_at": "2013-03-15 07:45:51", "user": 5402, "id": 14947163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14958669", "text": "Thanks!\n", "created_at": "2013-03-15 12:51:01", "user": 26328, "id": 14958669}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `resource_location` method does not permit clearing it, in an attempt to not generate a url to go along with an api response.\n\nThe line was originally written 4 years ago: https://github.com/rails/rails/commit/3f78de67b5827ee47d738a1dc96518f24bbb0129#L1R156\n\nWhen calling `respond_with(thing, location: nil)` a `thing_url` should not be called. But obviously, in resource_location, the nil (or false) will fail and still attempt use the resource passed in to generate a url. This will cause errors if the route doesn't exist.\n\nObviously, this isn't a well documented option, so maybe there is an expected value to be passed in as the location when none is desired.\n", "labels": [], "number": 9729, "updated_at": "2013-03-15 07:29:49", "user": 163, "closed_at": "2013-03-15 07:29:49", "id": 12051953, "title": "Passing location: nil, or location: false to respond_with fails to prevent route method call", "url": "https://api.github.com/repos/rails/rails/issues/9729", "created_at": "2013-03-15 06:47:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14946049", "text": "One possible change would be `options.has_key?(:location) ? options[:location] : resources`. \n", "created_at": "2013-03-15 06:50:09", "user": 163, "id": 14946049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14946077", "text": "I'm not sure where the tests are for the responder, if I can find them I'll write tests and submit a PR.\n", "created_at": "2013-03-15 06:51:52", "user": 163, "id": 14946077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14946831", "text": "This is an active_model_serializers bug I'm experiencing. It's hard to pin down, but in the `display` method in actionpack responder, the original options get merged into the given_options. So `options[:location] = nil` will overwrite any changes to the location from resource_location.\n", "created_at": "2013-03-15 07:29:49", "user": 163, "id": 14946831}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9730, "updated_at": "2014-06-23 11:31:24", "user": 355150, "closed_at": "2013-03-15 12:50:15", "id": 12053159, "title": "typo fix", "url": "https://api.github.com/repos/rails/rails/issues/9730", "created_at": "2013-03-15 07:58:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14958625", "text": "Thanks, but the 3-2-13 branch does not get any direct pull request since it's a release branch. I'm merging this into 3-2-stable. Does this also need fixing in master?\n", "created_at": "2013-03-15 12:50:03", "user": 26328, "id": 14958625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14961011", "text": "Thanks for merging. page caching extracted to new gem, i think. No need to fix in master.\n", "created_at": "2013-03-15 13:42:54", "user": 355150, "id": 14961011}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9724.\n\nRaise an `ArgumentError` when the name of the counter does not\nmatch an association name.\n", "labels": [], "number": 9731, "updated_at": "2014-06-26 19:55:15", "user": 5402, "closed_at": "2013-03-15 10:31:31", "id": 12057577, "title": "`#reset_counters` verifies counter names.", "url": "https://api.github.com/repos/rails/rails/issues/9731", "created_at": "2013-03-15 10:24:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "warning: assigned but unused variable - task_name\n", "labels": [], "number": 9732, "updated_at": "2014-06-26 19:55:17", "user": 3948, "closed_at": "2013-03-15 12:46:32", "id": 12061268, "title": "Warning removed unused variable task_name", "url": "https://api.github.com/repos/rails/rails/issues/9732", "created_at": "2013-03-15 12:34:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9712.\n\nThe feature can be disabled completely.\n\n``` ruby\n# in your configuration\nconfig.active_record.disable_implicit_join_references = true\n\n# or directly\nActiveRecord::Base.disable_implicit_join_references = true\n```\n", "labels": [], "number": 9733, "updated_at": "2014-06-18 10:59:08", "user": 5402, "closed_at": "2013-03-15 15:12:10", "id": 12063690, "title": "make it possible to disable implicit join references.", "url": "https://api.github.com/repos/rails/rails/issues/9733", "created_at": "2013-03-15 13:47:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14961409", "text": "@jonleighton what do you think?\n", "created_at": "2013-03-15 13:49:16", "user": 5402, "id": 14961409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14965343", "text": "@senny seems good, but please update the deprecation warning so that people know they can use this option to quiet the deprecation.\n", "created_at": "2013-03-15 15:00:43", "user": 1979, "id": 14965343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14965758", "text": "@jonleighton thanks, very good idea. I pushed an updated version.\n", "created_at": "2013-03-15 15:07:45", "user": 5402, "id": 14965758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14987978", "text": "Great commit!\n", "created_at": "2013-03-15 22:17:24", "user": 158883, "id": 14987978}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The #primary_key? method has already been written to check the type is primary key or not. Modified the method li'l bit to reuse in other places.\n", "labels": [], "number": 9734, "updated_at": "2014-06-26 15:28:13", "user": 3786236, "closed_at": "2013-03-15 19:12:57", "id": 12064323, "title": "Method #primary_key? is not reused", "url": "https://api.github.com/repos/rails/rails/issues/9734", "created_at": "2013-03-15 14:04:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14972349", "text": "Seems legit. @carlosantoniodasilva ?\n", "created_at": "2013-03-15 16:58:31", "user": 27786, "id": 14972349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14979517", "text": "Thank you\n", "created_at": "2013-03-15 19:13:00", "user": 47848, "id": 14979517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14997673", "text": "@rafaelfranca: My pleasure :)\n", "created_at": "2013-03-16 02:02:55", "user": 3786236, "id": 14997673}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "there are a lot of methods that caches its result in instance variables\n\n``` ruby\ndef method\n  @method ||= smth\nend\n\n#more complex\ndef method\n  @method ||= begin\n    # calculations\n   end\nend\n```\n\nI've made little code that wraps methods making it cached. so one should just write:\n\n``` ruby\ndef method\n  # calculations\nend\n\ncached_method :method\n```\n\nRedefined method also supports first argument that forces execution of original method.\n\nHere is source with example\n\n``` ruby\nrequire 'active_support/core_ext'\n\nmodule CachedMethods\n  module ClassMethods\n    def cached_method(*methods)\n      options = methods.extract_options!\n      methods.each do |method|\n        varname = \"@_#{method}_cache\"\n        module_eval <<-RUBY\ndef #{method}_with_cache(reload = false)\n  return #{varname} unless #{varname}.nil? || reload\n  #{varname} = #{method}_without_cache\nend\n        RUBY\n        alias_method_chain method, :cache\n      end\n    end\n  end\nend\n\nObject.send(:include, CachedMethods)   \nModule.send(:include, CachedMethods::ClassMethods)\n\n# example\nclass X\n  def x\n    puts 'x'\n    1\n  end\n\n  cached_method :x\nend\n\nx = X.new\nx.x\n# prints 'x' \nx.x\n# doesn't print 'x'\nx.x true\n# prints again\n```\n\nWould you like to add this feature to ActiveSupport? If so, let me know, I'll prepare PR.\n", "labels": [], "number": 9735, "updated_at": "2013-03-15 14:12:18", "user": 1144890, "closed_at": "2013-03-15 14:12:18", "id": 12064346, "title": "cached methods", "url": "https://api.github.com/repos/rails/rails/issues/9735", "created_at": "2013-03-15 14:04:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14962618", "text": "Hey @printercu we use the github issue tracker to track bugs and new features (with attached code). Discussion about potential features should be held on the [Rails core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core). You can find more in our [Contribution guidelines](https://github.com/rails/rails/blob/master/CONTRIBUTING.md).\n\nRegarding the feature, AS once had the `ActiveSupport::Memoizable`. It was deprecated though and you can read up about the reasons here: https://github.com/rails/rails/commit/36253916b0b788d6ded56669d37c96ed05c92c5c\n\nI'm closing the issue for the reasons above. Thanks for your effort to make Rails better.\n", "created_at": "2013-03-15 14:12:17", "user": 5402, "id": 14962618}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Removed trailing white space from all files in actionmailer and \nactivemodel directories; ran rake before and after (same results).\nOther directories were not clean enough (test-wise) so deferred.\n", "labels": [], "number": 9736, "updated_at": "2014-06-23 14:20:34", "user": 43523, "closed_at": "2013-03-15 18:56:31", "id": 12075779, "title": "Removed trailing white space from all files in actionmailer +activemodels dirs.", "url": "https://api.github.com/repos/rails/rails/issues/9736", "created_at": "2013-03-15 18:38:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14978601", "text": "Usually only rails committers make these types of cosmetic changes. Also this might obscure the commit history, although its probably fine to get rid of the newlines. \n", "created_at": "2013-03-15 18:54:10", "user": 1075780, "id": 14978601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14978730", "text": "Yes, we don't make these kinds of changes for the reasons @wangjohn commented. If you were fixing this area of the codebase, removing them would be great.\n\nThank you for the patch, but I can't accept it.\n", "created_at": "2013-03-15 18:56:31", "user": 27786, "id": 14978730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14982883", "text": "You should change the documentation to state the above policy. I followed Section 6.3 of http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html bullet #2.\n", "created_at": "2013-03-15 20:24:34", "user": 43523, "id": 14982883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14982955", "text": "The policy is still the same, we just do not accept pull requests doing only this.\n", "created_at": "2013-03-15 20:26:04", "user": 47848, "id": 14982955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14983344", "text": "Is the policy this document - http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html ?\n", "created_at": "2013-03-15 20:33:28", "user": 43523, "id": 14983344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14983411", "text": "Yes. In the section 6.2 you can see:\n\n> Changes that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of Rails will generally not be accepted.\n", "created_at": "2013-03-15 20:34:40", "user": 47848, "id": 14983411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14983448", "text": "Found it - thanks. Bye.\n", "created_at": "2013-03-15 20:35:51", "user": 43523, "id": 14983448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, defining an association with a counter cache means that the counter only increments or decrements when an object is created or destroyed (see example in #9722). However, if an object updates its foreign key and removes itself from an association, the counter cache will not update correctly.\n\nI've included a `before_save` callback that increments or decrements the counter if the foreign key gets changed in a `belongs_to` association. If the foreign key was present before but is no longer present after the update, then the counter gets decremented. Likewise, if the foreign key was not present before but is present after the update, then the counter gets incremented.\n\nThe counter cache only gets changed if the record is not new (so it doesn't conflict with the `after_create` callback currently in place.\n", "labels": [], "number": 9737, "updated_at": "2018-02-08 17:39:32", "user": 1075780, "closed_at": "2013-03-16 02:25:32", "id": 12075904, "title": "The counter cache will now work correctly when the foreign key is changed. Fixes #9722.", "url": "https://api.github.com/repos/rails/rails/issues/9737", "created_at": "2013-03-15 18:41:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14981016", "text": "I was pretty confused why you would be changing the _primary key_ of a record, then I read the code and saw you are actually talking about updating a counter cache when a _foreign key_ changes, which makes a lot more sense.\n", "created_at": "2013-03-15 19:44:27", "user": 81224, "id": 14981016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14982081", "text": "@coreyward Yes, sorry that was a typo. I've updated the PR comments to reflect that.\n", "created_at": "2013-03-15 20:07:39", "user": 1075780, "id": 14982081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14982290", "text": "I think the case where the foreign key changed from an id to another is missing\n", "created_at": "2013-03-15 20:12:36", "user": 47848, "id": 14982290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14982430", "text": "@rafaelfranca Ah, quite true. I assumed that the count should stay the same but forgot that the count is kept by incrementing/decrementing foreign_key id. \n\nI'll change it now.\n", "created_at": "2013-03-15 20:15:13", "user": 1075780, "id": 14982430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14997289", "text": "I've changed my PR so that it now handles changing the foreign key to another valid foreign key. I've also added a test for this case.\n", "created_at": "2013-03-16 01:32:59", "user": 1075780, "id": 14997289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14997988", "text": ":heart:\n", "created_at": "2013-03-16 02:27:43", "user": 199, "id": 14997988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018178", "text": ":heart: \n", "created_at": "2013-03-17 06:19:59", "user": 47848, "id": 15018178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23076707", "text": ":heart:\n", "created_at": "2013-08-22 09:01:28", "user": 4260708, "id": 23076707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41920990", "text": "Nice :smiley: \n", "created_at": "2014-05-01 15:33:24", "user": 2165336, "id": 41920990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/317001541", "text": "I have the same issue in rails 5.1.2 @jeremy \r\n", "created_at": "2017-07-21 13:31:41", "user": 1336467, "id": 317001541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/364190067", "text": "Rails 5.1.4 here, and it looks like it's also not updating the cache for me when I do\r\n\r\n`Child.where(parent_id: old_parent_id).update!(parent_id: new_parent_id)`\r\n\r\nGiven:\r\n```\r\nclass Parent\r\n  has_many :children\r\nend\r\n\r\nclass Child\r\n  belongs_to :parent, counter_cache: true\r\nend\r\n```\r\n🤔 ", "created_at": "2018-02-08 17:39:32", "user": 4423037, "id": 364190067}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The default scaffold messages would be better without the \"was successfully\" part, for example:\n\n\"Account created.\" vs. \"Account was successfully created.\" or\n\"User updated.\" vs. \"User was successfully updated.\"\n\nShorter, cleaner, nicer. I realize that people customize these normally but defaults matter. Let's get rid of these extra words.\n", "labels": [], "number": 9738, "updated_at": "2013-03-15 20:55:35", "user": 493827, "closed_at": "2013-03-15 20:55:35", "id": 12080899, "title": "Remove \"was successfully\" from scaffold controller response messages", "url": "https://api.github.com/repos/rails/rails/issues/9738", "created_at": "2013-03-15 20:47:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14984397", "text": "We don't take feature request in the issues tracker. You the Rails Core mailing list if you want feedback or open a pull request\n", "created_at": "2013-03-15 20:55:35", "user": 47848, "id": 14984397}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The default scaffold messages would be better without the \"was successfully\" part, for example:\n\n\"Account created.\" vs. \"Account was successfully created.\" or\n\"User updated.\" vs. \"User was successfully updated.\"\n\nShorter, cleaner, nicer. I realize that people customize these normally but defaults matter. Let's get rid of these extra words.\n", "labels": [], "number": 9739, "updated_at": "2014-07-04 15:46:35", "user": 493827, "closed_at": "2013-03-15 23:30:52", "id": 12081811, "title": "Remove \"was successfully\" from scaffold controller response messages", "url": "https://api.github.com/repos/rails/rails/issues/9739", "created_at": "2013-03-15 21:11:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14985369", "text": "I personally prefer the former, for me it is more human friendly\n", "created_at": "2013-03-15 21:17:01", "user": 47848, "id": 14985369}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14985375", "text": "I forgot to update the test\n", "created_at": "2013-03-15 21:17:18", "user": 493827, "id": 14985375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14985798", "text": "rafaelfranca can you give more details as to why you think the words \"was successfully\" are more human friendly? IMHO It is more friendly not to waste a person's time with extra words so can you tell me a bit about what the value that these words provide. Thank you.\n", "created_at": "2013-03-15 21:26:40", "user": 493827, "id": 14985798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14986050", "text": "For me, the current text seems like I'm talking with a robot. \"User created\", \"User deleted\", \"User updated\"\n", "created_at": "2013-03-15 21:32:31", "user": 47848, "id": 14986050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14991478", "text": "Interesting PR. I indeed believe these messages are inertia, I personally show no message in my apps. Of course the user was created, of course the product was updated, you warn when you err! Imagine Vim telling \"character successfully inserted\".\n\nThat said, the current messages are fine for me, see no reason to invalidate every single tutorial about Rails.\n", "created_at": "2013-03-15 23:16:25", "user": 3387, "id": 14991478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14994149", "text": "@jscipione thanks for the PR, but although we see your point in being more concise, being more emphatic is also a valid approach, we believe there is not need to change the messages. Thank you.\n", "created_at": "2013-03-15 23:30:50", "user": 3387, "id": 14994149}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `UpgradeSignatureToEncryptionCookieStore` feature added by @spastorino in 8eefdb6d is great, but it only covers sessions using `CookieStore`, not cookies in general.\n\nWhen upgrading an app from 3.x to 4.0, all cookies are invalidated if you set `secret_key_base` as recommended by the deprecation warnings from (https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L138) and the upgrade guide (https://github.com/rails/rails/blob/master/guides/source/upgrading_ruby_on_rails.md#action-pack). \n\nI made an example app to demonstrate the issue here: https://github.com/trevorturk/rails-cookie-issue\n\nThis isn't really a bug -- more of a feature request. I think it's an important one, though. \n\nShould we start by adding a caveat into the upgrade guide explaining the situation?\n\nIn terms of adding the feature, I think we'd need a new cookie jar that would operate a bit like `UpgradeSignatureToEncryptionCookieStore` and a way for your app to opt into that cookie jar. \n\nThoughts? /cc @dhh, @jeremy, @spastorino \n", "labels": ["actionpack"], "number": 9740, "updated_at": "2013-03-24 23:04:45", "user": 402, "closed_at": "2013-03-24 23:04:45", "id": 12086016, "title": "Rails 4: cookies are invalidated after setting secret_key_base", "url": "https://api.github.com/repos/rails/rails/issues/9740", "created_at": "2013-03-15 23:24:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14992238", "text": "I'd love to see a cookie jar that works like the session upgrader. That would make this really smooth.\n\nTT, feel free to take a stab at that. I think between the work you've already done narrowing down the issue and the prior art in the session upgrader, you're well-versed to take a stab at this.\n\nOn Mar 15, 2013, at 7:25 PM, Trevor Turk notifications@github.com wrote:\n\n> The UpgradeSignatureToEncryptionCookieStore feature added by @spastorino in 8eefdb6d is great, but it only covers sessions using CookieStore, not cookies in general.\n> \n> When upgrading an app from 3.x to 4.0, all cookies are invalidated if you set secret_key_base as recommended by the deprecation warnings from (https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb#L138) and the upgrade guide (https://github.com/rails/rails/blob/master/guides/source/upgrading_ruby_on_rails.md#action-pack).\n> \n> I made an example app to demonstrate the issue here: https://github.com/trevorturk/rails-cookie-issue\n> \n> This isn't really a bug -- more of a feature request. I think it's an important one, though.\n> \n> Should we start by adding a caveat into the upgrade guide explaining the situation?\n> \n> In terms of adding the feature, I think we'd need a new cookie jar that would operate a bit like UpgradeSignatureToEncryptionCookieStore and a way for your app to opt into that cookie jar.\n> \n> Thoughts? /cc @dhh, @jeremy, @spastorino\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-15 23:27:00", "user": 2741, "id": 14992238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14994943", "text": "Will do!\n", "created_at": "2013-03-15 23:32:46", "user": 402, "id": 14994943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024547", "text": "@trevorturk :+1: please do and ping me to merge\n", "created_at": "2013-03-17 15:33:03", "user": 52642, "id": 15024547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15220450", "text": "This is the first time I looked at cookie code so may be I missed something. Here is my fix.\n\nhttps://github.com/neerajdotname/rails/commit/42f07f727efb05ec16824d6ccf3d2729af0187c0\n\nHere is the forked app  with the fix . \n\nhttps://github.com/neerajdotname/rails-cookie-issue/commit/ea6e5f42981d07b29dff97a28ca9b2a259b37db2\n", "created_at": "2013-03-21 05:38:28", "user": 6399, "id": 15220450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15324489", "text": "Thanks so much, @neerajdotname! This is a great start. I'm working something up that goes a bit farther, and I'll post back here when I wrap it up -- hopefully in the next day or two. \n", "created_at": "2013-03-22 22:24:42", "user": 402, "id": 15324489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15370388", "text": "Hey all -- I created a pull request for this issue in #9909. Please let me know what you think! I'll leave this issue open for now as I see it's associated with the 4.0.0 milestone. \n", "created_at": "2013-03-24 22:03:00", "user": 402, "id": 15370388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15371604", "text": "(Put #9909 on 4.0.0 milestone)\n", "created_at": "2013-03-24 23:04:45", "user": 199, "id": 15371604}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9741, "updated_at": "2014-07-04 15:46:33", "user": 840464, "closed_at": "2013-03-16 12:24:15", "id": 12088955, "title": "ensure AR::ConnectionHandler.connected?(klass) returns true or false", "url": "https://api.github.com/repos/rails/rails/issues/9741", "created_at": "2013-03-16 01:22:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15003950", "text": "The rationale behind the `xhr?` predicate discussion applies here. We write and document Ruby predicates, whose exact return value is irrelevant and undocumented, all over the project (with a few exceptions).\n", "created_at": "2013-03-16 12:24:12", "user": 3387, "id": 15003950}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a bare bones Rails 4 / Ruby 2 app. Nothing interesting in the controller or view. The error isn't very indicative of what's wrong. I'd be happy to give me info if you need it.\n\nA quick look at the source code had me try another browser thinking something got caught up when cleaning up after itself, but no luck. Bounced the server and everything...\n\n```\nStarted GET \"/login\" for 127.0.0.1 at 2013-03-15 21:26:30 -0400\n\nSystemStackError (stack level too deep):\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/reloader.rb:70\n\n\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_source.erb (1.2ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_trace.erb (2.3ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (2.7ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (31.8ms)\n```\n", "labels": [], "number": 9742, "updated_at": "2013-03-16 03:38:56", "user": 744212, "closed_at": "2013-03-16 03:38:56", "id": 12089042, "title": "\"Request\" is not a valid action name", "url": "https://api.github.com/repos/rails/rails/issues/9742", "created_at": "2013-03-16 01:28:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14997314", "text": "With some basic poking, turns out the index action was not happy with another action in that controller named `request`. I don't remember if I've ever used this name before, but haven't seen this warning before in the docs.\n\n``` Ruby\nclass LoginController < ApplicationController\n  def index\n    @login_session = LoginSession.new\n  end\n\n  def request\n    login_session = LoginSession.new(login_params)\n    redirect_to root_url, notice: I18n.t(:login_email_code)\n  end\n\n  private\n\n  def login_params\n    params.require(:login_session).permit(:email)\n  end\nend\n```\n\nWhen I remove the `def request` block, the `index` action loads fine. \n", "created_at": "2013-03-16 01:34:40", "user": 744212, "id": 14997314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14997342", "text": "Slimming down the controller to the following produces a different error:\n\n``` Ruby\nclass LoginController < ApplicationController\n  def index\n  end\n\n  def request\n  end\nend\n```\n\nStack trace:\n\n```\nStarted GET \"/login\" for 127.0.0.1 at 2013-03-15 21:35:49 -0400\n\nNoMethodError (undefined method `content_mime_type' for nil:NilClass):\n  actionpack (4.0.0.beta1) lib/action_controller/metal/params_wrapper.rb:274:in `_wrapper_enabled?'\n  actionpack (4.0.0.beta1) lib/action_controller/metal/params_wrapper.rb:233:in `process_action'\n  activerecord (4.0.0.beta1) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\n  actionpack (4.0.0.beta1) lib/abstract_controller/base.rb:136:in `process'\n  actionpack (4.0.0.beta1) lib/abstract_controller/rendering.rb:44:in `process'\n  actionpack (4.0.0.beta1) lib/action_controller/metal.rb:196:in `dispatch'\n  actionpack (4.0.0.beta1) lib/action_controller/metal/rack_delegation.rb:13:in `dispatch'\n  actionpack (4.0.0.beta1) lib/action_controller/metal.rb:232:in `block in action'\n  actionpack (4.0.0.beta1) lib/action_dispatch/routing/route_set.rb:78:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/routing/route_set.rb:78:in `dispatch'\n  actionpack (4.0.0.beta1) lib/action_dispatch/routing/route_set.rb:46:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/journey/router.rb:69:in `block in call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/journey/router.rb:57:in `each'\n  actionpack (4.0.0.beta1) lib/action_dispatch/journey/router.rb:57:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/routing/route_set.rb:651:in `call'\n  rack (1.5.2) lib/rack/etag.rb:23:in `call'\n  rack (1.5.2) lib/rack/conditionalget.rb:25:in `call'\n  rack (1.5.2) lib/rack/head.rb:11:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/params_parser.rb:27:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/flash.rb:241:in `call'\n  rack (1.5.2) lib/rack/session/abstract/id.rb:225:in `context'\n  rack (1.5.2) lib/rack/session/abstract/id.rb:220:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/cookies.rb:452:in `call'\n  activerecord (4.0.0.beta1) lib/active_record/query_cache.rb:36:in `call'\n  activerecord (4.0.0.beta1) lib/active_record/connection_adapters/abstract/connection_pool.rb:632:in `call'\n  activerecord (4.0.0.beta1) lib/active_record/migration.rb:348:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n  activesupport (4.0.0.beta1) lib/active_support/callbacks.rb:373:in `_run__4435187952207612521__call__callbacks'\n  activesupport (4.0.0.beta1) lib/active_support/callbacks.rb:78:in `run_callbacks'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/callbacks.rb:27:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/reloader.rb:64:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/remote_ip.rb:76:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'\n  railties (4.0.0.beta1) lib/rails/rack/logger.rb:38:in `call_app'\n  railties (4.0.0.beta1) lib/rails/rack/logger.rb:21:in `block in call'\n  activesupport (4.0.0.beta1) lib/active_support/tagged_logging.rb:67:in `block in tagged'\n  activesupport (4.0.0.beta1) lib/active_support/tagged_logging.rb:25:in `tagged'\n  activesupport (4.0.0.beta1) lib/active_support/tagged_logging.rb:67:in `tagged'\n  railties (4.0.0.beta1) lib/rails/rack/logger.rb:21:in `call'\n  quiet_assets (1.0.2) lib/quiet_assets.rb:18:in `call_with_quiet_assets'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/request_id.rb:21:in `call'\n  rack (1.5.2) lib/rack/methodoverride.rb:21:in `call'\n  rack (1.5.2) lib/rack/runtime.rb:17:in `call'\n  activesupport (4.0.0.beta1) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n  rack (1.5.2) lib/rack/lock.rb:17:in `call'\n  actionpack (4.0.0.beta1) lib/action_dispatch/middleware/static.rb:64:in `call'\n  railties (4.0.0.beta1) lib/rails/engine.rb:510:in `call'\n  railties (4.0.0.beta1) lib/rails/application.rb:96:in `call'\n  rack (1.5.2) lib/rack/content_length.rb:14:in `call'\n  thin (1.5.0) lib/thin/connection.rb:81:in `block in pre_process'\n  thin (1.5.0) lib/thin/connection.rb:79:in `catch'\n  thin (1.5.0) lib/thin/connection.rb:79:in `pre_process'\n  thin (1.5.0) lib/thin/connection.rb:54:in `process'\n  thin (1.5.0) lib/thin/connection.rb:39:in `receive_data'\n  eventmachine (1.0.3) lib/eventmachine.rb:187:in `run_machine'\n  eventmachine (1.0.3) lib/eventmachine.rb:187:in `run'\n  thin (1.5.0) lib/thin/backends/base.rb:63:in `start'\n  thin (1.5.0) lib/thin/server.rb:159:in `start'\n  rack (1.5.2) lib/rack/handler/thin.rb:16:in `run'\n  rack (1.5.2) lib/rack/server.rb:264:in `start'\n  railties (4.0.0.beta1) lib/rails/commands/server.rb:80:in `start'\n  railties (4.0.0.beta1) lib/rails/commands.rb:78:in `block in <top (required)>'\n  railties (4.0.0.beta1) lib/rails/commands.rb:73:in `tap'\n  railties (4.0.0.beta1) lib/rails/commands.rb:73:in `<top (required)>'\n  bin/rails:4:in `require'\n  bin/rails:4:in `<main>'\n\n\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_source.erb (1.2ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_trace.erb (2.6ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (3.6ms)\n  Rendered /Users/bhilkert/.rbenv/versions/2.0.0-p0/lib/ruby/gems/2.0.0/gems/actionpack-4.0.0.beta1/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (28.7ms)\n```\n", "created_at": "2013-03-16 01:37:16", "user": 744212, "id": 14997342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14998795", "text": "`request` is like a \"reserved word\" for Action Controller, same as `response` and `status` for instance. Take a look at #3447 for more discussion regarding `status`.\n\nThose are methods that AC provide and rely on, so they basically cannot be used as action names.\n", "created_at": "2013-03-16 03:38:56", "user": 26328, "id": 14998795}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Try fixing #9718\n\nQuery Parameters were being ignored, and only path info along with `extras` were used for matching route params. This behaviour made it to ignore wrong parameters.\n\nThis PR tries to make query parameters accountable too\n", "labels": [], "number": 9743, "updated_at": "2016-02-22 14:25:39", "user": 567626, "closed_at": "2013-03-16 10:47:57", "id": 12092404, "title": "Make assert_recognizes to consider request query parameters with extras", "url": "https://api.github.com/repos/rails/rails/issues/9743", "created_at": "2013-03-16 09:16:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15001952", "text": "//cc @pixeltrix Thoughts?\n", "created_at": "2013-03-16 09:17:17", "user": 567626, "id": 15001952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15002852", "text": "@vipulnsward Journey's responsibility is purely about recognising what's in PATH_INFO so this is really the wrong fix for the problem I outlined in the ticket. If you need to test a request properly then you should be using an integration test and ideally we'd make them quick enough so that functional tests can be deprecated.\n", "created_at": "2013-03-16 10:47:57", "user": 6321, "id": 15002852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15002985", "text": "Cool. Thanks!\n@pixeltrix I would really love to make  some very minor changes at some places, just to make the code readable a bit more, hope thats acceptable.\n", "created_at": "2013-03-16 11:00:23", "user": 567626, "id": 15002985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15003073", "text": "@vipulnsward we generally only merge stuff that's either a bug fix, new feature, or a significant code refactoring (which can be performance, memory or number of lines reduced). If it's just a couple lines that you've reformatted, then even if it's more readable, the general policy is to not merge so that the git history isn't polluted. However documentation improvements are always gratefully accepted. :smile:\n", "created_at": "2013-03-16 11:10:04", "user": 6321, "id": 15003073}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "test for\nhttps://github.com/rails/rails/blob/ad624345e54bd20802de67b2b5c9ef29ecf5d5f4/activerecord/lib/active_record/inheritance.rb#L18\n", "labels": [], "number": 9744, "updated_at": "2014-07-03 23:26:35", "user": 1095842, "closed_at": "2013-03-17 15:21:55", "id": 12093331, "title": "add test for `new` method's abstract error", "url": "https://api.github.com/repos/rails/rails/issues/9744", "created_at": "2013-03-16 11:13:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024321", "text": "Thanks, but they were added together with the patch: 53f18f2c5475809f7f6c5576aba89d6340a57c06.\n", "created_at": "2013-03-17 15:21:55", "user": 26328, "id": 15024321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15036192", "text": "ooo ok thx :) \n", "created_at": "2013-03-18 02:10:07", "user": 1095842, "id": 15036192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15036218", "text": "hmmm maybe we should move that tests to inheritance_spec.rb...? base_test.rb is getting bigger and bigger...\n", "created_at": "2013-03-18 02:11:45", "user": 1095842, "id": 15036218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15037013", "text": "@tkhr seems ok, can you update your pull request (or send a new one)? Thanks.\n", "created_at": "2013-03-18 02:54:17", "user": 26328, "id": 15037013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15038415", "text": "> @tkhr seems ok, can you update your pull request (or send a new one)? Thanks\n\nok, will do :) \n", "created_at": "2013-03-18 04:07:03", "user": 1095842, "id": 15038415}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently in Rails 4 form_for will ignore html: { multipart: true }\nTo add multipart you need have at last one f.file_field or f.multipart = true (this is so ugly!)\n\nThis change will revert posibility to pass multipart as html option\n", "labels": [], "number": 9745, "updated_at": "2014-06-26 19:55:27", "user": 4486, "closed_at": "2013-03-17 15:19:12", "id": 12095676, "title": "Allow pass multipart option to form_for", "url": "https://api.github.com/repos/rails/rails/issues/9745", "created_at": "2013-03-16 14:39:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011226", "text": "We'll need a test and a CHANGELOG entry.\n", "created_at": "2013-03-16 20:02:51", "user": 27786, "id": 15011226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018511", "text": "This don't need CHANGELOG entry since it is a regression. Please remove it and squash the commits\n", "created_at": "2013-03-17 07:01:24", "user": 47848, "id": 15018511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018562", "text": "Ahh, I thought it was removed for some reason. I can see how it could be a regression instead. :+1:\n", "created_at": "2013-03-17 07:06:30", "user": 27786, "id": 15018562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018576", "text": "It was removed by mistake on [this refactoring](https://github.com/rails/rails/commit/04338b9e3b6babdc4b5938d4eaf41de620985c41) done by @carlosantoniodasilva. \n", "created_at": "2013-03-17 07:08:45", "user": 47848, "id": 15018576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018778", "text": "Ahhh yes. :D \n", "created_at": "2013-03-17 07:35:38", "user": 27786, "id": 15018778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15020030", "text": "Done :)\n", "created_at": "2013-03-17 09:51:55", "user": 4486, "id": 15020030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024275", "text": "Oops, we didn't have a test for that =(, sorry about that.\n\nThanks @madmax.\n", "created_at": "2013-03-17 15:18:58", "user": 26328, "id": 15024275}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am using Rails 3.0.9 and Ruby 1.9.2\n\nModels associations are\n\ndocument.rb\n\n```\nhas_many :sections\naccepts_nested_attributes_for :sections, :allow_destroy => :true, :reject_if => proc { attrs| attrs.all? { |k, v| v.blank? } }\n```\n\nsection.rb\n\n```\nbelongs_to :document\nhas_many :paragraphs, :dependent => :destroy\nhas_many :contents :through => :paragraphs\nvalidates :user_id, :presence =>  { :message => \"Must be filled\" }\n```\n\nparagraph.rb\n\n```\nattr_accessible :user_id, :section_id, :content_id\nbelongs_to :section\nbelongs_to :content\nvalidates :user_id, :section, :content, :presence =>  { :message => \"Must be filled\" }\n```\n\nparagraphs table just like a intermediate table for sections and contents and I want to save records in documents, sections and paragraphs table using single form submission.\n\n_form.html.erb\n\n```\n<%= form_for @document, :validate => true do |f| %>\n   <%= f.error_messages %>\n   <div><%= f.text_field :name %></div>\n\n   <% f.fields_for :sections do |builder| %> \n      <div><%= builder.text_field :name %></div>\n      <div><%= builder.select :content_ids, Content.all.collect {|p| [ p.name, p.id ] },{:prompt => \"Please Select\"}, {:class => \"nhs_select\", :multiple => true}  %></div>\n   <% end %>\n   <%= f.submit :submit%>\n<% end %>\n```\n\nExample parameters when submiting the form\n\n```\n{\"document\"=>{\"name\"=>\"sdf\", \"sections_attributes\"=>{\"0\"=>{\"name\"=>\"sdf\", \"description\"=>\"sdf\", \"_destroy\"=>\"0\", \"content_ids\" => [\"1\", \"2\"]}}, \"commit\"=>\"Create Document\"}\n```\n\n**Problem**\nAt first, I submit the form, validation failed (without user_id in paragraph object) then render new form without showing error message even I have implemented code to display error messages.\nthen again clicked submit button, action goes to update method. But it **should go to new** action.\n\nAfter submitting the new form, the form render like:\n\n```\n<form id=\"edit_document_6\" class=\"edit_document\" method=\"post\" action=\"/documents/6\" accept-charset=\"UTF-8\">\n```\n\nI inspected in console, the inserted records were rollbacked but still the primary id is retain in object.\n\n**Console Output**\n\n```\nStarted POST \"/documents\" for 127.0.0.1 at 2013-03-15 19:17:12 +0530\n  Processing by DocumentsController#create as HTML\n  Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"fvjouziWyDPCsTIJQvguXG1vvAIGy8ej5hR+69TTeIQ=\", \"document\"=>{\"name\"=>\"sample\", \"sections_attributes\"=>{\"0\"=>{\"name\"=>\"one\", \"content_ids\"=>[\"1\", \"2\"]}}}, \"commit\"=>\"submit\"}\n  Content Load (0.0ms)  SELECT `contents`.* FROM `contents` WHERE `contents`.`id` IN (1, 2)\n  SQL (0.1ms)  BEGIN\n  SQL (0.0ms)  COMMIT\n  SQL (0.0ms)  BEGIN\n  SQL (0.3ms)  describe `documents`\n  AREL (0.1ms)  INSERT INTO `documents` (`name`, `created_at`, `updated_at`) VALUES ('sample', '2013-03-15 13:47:12', '2013-03-15 13:47:12')\n  SQL (0.3ms)  describe `sections`\n  AREL (0.1ms)  INSERT INTO `sections` (`name`, `document_id`, `created_at`, `updated_at`) VALUES ('one', 2, '2013-03-15 13:47:12', '2013-03-15 13:47:12')\n  Section Load (0.3ms)  SELECT `sections`.* FROM `sections` WHERE `sections`.`id` = 3 LIMIT 1\n  Content Load (0.1ms)  SELECT `contents`.* FROM `contents` WHERE `contents`.`id` = 1 LIMIT 1\n  SQL (72.5ms)  ROLLBACK\n  Content Load (0.1ms)  SELECT `contents`.* FROM `contents`\nRendered documents/_form.html.erb (4.8ms)\nRendered documents/new.html.erb within layouts/application (8.7ms)\n\n\nStarted POST \"/documents/2\" for 127.0.0.1 at 2013-03-15 19:17:48 +0530\n  Processing by DocumentsController#update as HTML\n  Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"fvjouziWyDPCsTIJQvguXG1vvAIGy8ej5hR+69TTeIQ=\", \"document\"=>{\"name\"=>\"sample\", \"sections_attributes\"=>{\"0\"=>{\"name\"=>\"one\", \"content_ids\"=>[\"1\", \"2\"]}}}, \"commit\"=>\"submit\", \"id\"=>\"2\"}\n  Document Load (0.2ms)  SELECT `documents`.* FROM `documents` WHERE `documents`.`id` = 2 LIMIT 1\nCompleted 404 Not Found in 10ms\n\nActiveRecord::RecordNotFound (Couldn't find Document with ID=2):\n  app/controllers/documents_controller.rb:30:in `update'\n```\n", "labels": ["actionpack", "needs feedback"], "number": 9746, "updated_at": "2013-05-23 07:09:26", "user": 254381, "closed_at": "2013-05-23 07:09:26", "id": 12096353, "title": "On submitting new form second time action goes to update method", "url": "https://api.github.com/repos/rails/rails/issues/9746", "created_at": "2013-03-16 15:32:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011165", "text": "Rails 3.0 does not get any support. If you can reproduce this on a newer Rails, please let me know and we can re-open.\n", "created_at": "2013-03-16 19:58:26", "user": 27786, "id": 15011165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011201", "text": "Also, Rails 3.0.9 has a VERY VERY SEVERE SECURITY issue, please either apply this patch or upgrade your Rails RIGHT NOW https://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-security/61bkgvnSGTQ\n", "created_at": "2013-03-16 20:00:47", "user": 27786, "id": 15011201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15047542", "text": "I confirm this issue also exists in Rails 3.2.6.\nI have uploaded testing project for your reference\nhttps://github.com/jmaniv/nested_model\n", "created_at": "2013-03-18 10:23:08", "user": 254381, "id": 15047542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15070599", "text": "Rails 3.2.6 also has VERY SEVERE SECURITY ISSUES and you should upgrade, @jmaniv \n\nRegardless, thank you. I'll re-open.\n", "created_at": "2013-03-18 17:57:58", "user": 27786, "id": 15070599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16112755", "text": "I updated the example app to use `3.2.13` and I am no longer able to open the \"/documents\". It crashes with the following error:\n\n```\nActiveRecord::UnknownAttributeError in DocumentsController#new\n\nunknown attribute: document_id\n\n.bundle/gems/activerecord-3.2.13/lib/active_record/attribute_assignment.rb:88:in `block in assign_attributes'\n.bundle/gems/activerecord-3.2.13/lib/active_record/attribute_assignment.rb:78:in `each'\n.bundle/gems/activerecord-3.2.13/lib/active_record/attribute_assignment.rb:78:in `assign_attributes'\n.bundle/gems/activerecord-3.2.13/lib/active_record/associations/association.rb:236:in `block in build_record'\n.bundle/gems/activerecord-3.2.13/lib/active_record/base.rb:500:in `initialize'\n.bundle/gems/activerecord-3.2.13/lib/active_record/reflection.rb:183:in `new'\n.bundle/gems/activerecord-3.2.13/lib/active_record/reflection.rb:183:in `build_association'\n.bundle/gems/activerecord-3.2.13/lib/active_record/associations/association.rb:233:in `build_record'\n.bundle/gems/activerecord-3.2.13/lib/active_record/associations/collection_association.rb:112:in `build'\n.bundle/gems/activerecord-3.2.13/lib/active_record/associations/collection_proxy.rb:46:in `build'\napp/controllers/documents_controller.rb:12:in `new'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/implicit_render.rb:4:in `send_action'\n.bundle/gems/actionpack-3.2.13/lib/abstract_controller/base.rb:167:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/rendering.rb:10:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/abstract_controller/callbacks.rb:18:in `block in process_action'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:414:in `_run__106822148653473933__process_action__1683638059170815515__callbacks'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:405:in `__run_callback'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:385:in `_run_process_action_callbacks'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:81:in `run_callbacks'\n.bundle/gems/actionpack-3.2.13/lib/abstract_controller/callbacks.rb:17:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/rescue.rb:29:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\n.bundle/gems/activesupport-3.2.13/lib/active_support/notifications.rb:123:in `block in instrument'\n.bundle/gems/activesupport-3.2.13/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n.bundle/gems/activesupport-3.2.13/lib/active_support/notifications.rb:123:in `instrument'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/params_wrapper.rb:207:in `process_action'\n.bundle/gems/activerecord-3.2.13/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\n.bundle/gems/actionpack-3.2.13/lib/abstract_controller/base.rb:121:in `process'\n.bundle/gems/actionpack-3.2.13/lib/abstract_controller/rendering.rb:45:in `process'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal.rb:203:in `dispatch'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\n.bundle/gems/actionpack-3.2.13/lib/action_controller/metal.rb:246:in `block in action'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/routing/route_set.rb:73:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/routing/route_set.rb:73:in `dispatch'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/routing/route_set.rb:36:in `call'\n.bundle/gems/journey-1.0.4/lib/journey/router.rb:68:in `block in call'\n.bundle/gems/journey-1.0.4/lib/journey/router.rb:56:in `each'\n.bundle/gems/journey-1.0.4/lib/journey/router.rb:56:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/routing/route_set.rb:612:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/etag.rb:23:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/conditionalget.rb:25:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/head.rb:14:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/flash.rb:242:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/session/abstract/id.rb:210:in `context'\n.bundle/gems/rack-1.4.5/lib/rack/session/abstract/id.rb:205:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/cookies.rb:341:in `call'\n.bundle/gems/activerecord-3.2.13/lib/active_record/query_cache.rb:64:in `call'\n.bundle/gems/activerecord-3.2.13/lib/active_record/connection_adapters/abstract/connection_pool.rb:479:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:405:in `_run__3569082033633159257__call__2382134482846149943__callbacks'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:405:in `__run_callback'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:385:in `_run_call_callbacks'\n.bundle/gems/activesupport-3.2.13/lib/active_support/callbacks.rb:81:in `run_callbacks'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/reloader.rb:65:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/remote_ip.rb:31:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/debug_exceptions.rb:16:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/show_exceptions.rb:56:in `call'\n.bundle/gems/railties-3.2.13/lib/rails/rack/logger.rb:32:in `call_app'\n.bundle/gems/railties-3.2.13/lib/rails/rack/logger.rb:16:in `block in call'\n.bundle/gems/activesupport-3.2.13/lib/active_support/tagged_logging.rb:22:in `tagged'\n.bundle/gems/railties-3.2.13/lib/rails/rack/logger.rb:16:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/request_id.rb:22:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/methodoverride.rb:21:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/runtime.rb:17:in `call'\n.bundle/gems/activesupport-3.2.13/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/lock.rb:15:in `call'\n.bundle/gems/actionpack-3.2.13/lib/action_dispatch/middleware/static.rb:63:in `call'\n.bundle/gems/railties-3.2.13/lib/rails/engine.rb:479:in `call'\n.bundle/gems/railties-3.2.13/lib/rails/application.rb:223:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/content_length.rb:14:in `call'\n.bundle/gems/railties-3.2.13/lib/rails/rack/log_tailer.rb:17:in `call'\n.bundle/gems/rack-1.4.5/lib/rack/handler/webrick.rb:59:in `service'\n/Users/senny/.rbenv/versions/1.9.3-p385/lib/ruby/1.9.1/webrick/httpserver.rb:138:in `service'\n/Users/senny/.rbenv/versions/1.9.3-p385/lib/ruby/1.9.1/webrick/httpserver.rb:94:in `run'\n/Users/senny/.rbenv/versions/1.9.3-p385/lib/ruby/1.9.1/webrick/server.rb:191:in `block in start_thread'\n```\n\nThis makes it impossible to reproduce. Can you update the sample app to the latest `3.2.x` version and see if it still exposes the bug?\n", "created_at": "2013-04-09 13:37:37", "user": 5402, "id": 16112755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17882387", "text": "Sorry! I missed to update migration files. I have updated now. Please checkout https://github.com/jmaniv/nested_model.\n", "created_at": "2013-05-14 15:12:02", "user": 254381, "id": 17882387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18203339", "text": "I am still not able to reproduce the problem. I cloned your app, updated Rails to 3.2.12 and submitted the form twice. It always hits `#create`:\n\n```\nStarted POST \"/documents\" for 127.0.0.1 at 2013-05-21 13:38:18 +0200\nProcessing by DocumentsController#create as HTML\n  Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"nh1uJdexjXlRqpwerLfL4dErIeZrOgPFP15prkAJmnU=\", \"document\"=>{\"name\"=>\"asd\", \"sections_attributes\"=>{\"0\"=>{\"name\"=>\"asddas\", \"content_ids\"=>[\"\", \"2\"]}}}, \"commit\"=>\"submit\"}\n  Content Load (0.2ms)  SELECT `contents`.* FROM `contents` WHERE `contents`.`id` = 2 LIMIT 1\n   (0.1ms)  BEGIN\n  SQL (1.2ms)  INSERT INTO `documents` (`created_at`, `name`, `updated_at`) VALUES ('2013-05-21 11:38:18', 'asd', '2013-05-21 11:38:18')\n  SQL (0.2ms)  INSERT INTO `sections` (`created_at`, `document_id`, `name`, `updated_at`) VALUES ('2013-05-21 11:38:18', 17, 'asddas', '2013-05-21 11:38:18')\n  Section Load (0.3ms)  SELECT `sections`.* FROM `sections` WHERE `sections`.`id` = 17 LIMIT 1\n   (0.7ms)  ROLLBACK\n  Content Load (0.3ms)  SELECT `contents`.* FROM `contents`\n  Rendered documents/_form.html.erb (3.8ms)\n  Rendered documents/new.html.erb within layouts/application (4.9ms)\nCompleted 200 OK in 87ms (Views: 10.9ms | ActiveRecord: 9.2ms)\n\n# ...\n\nStarted POST \"/documents\" for 127.0.0.1 at 2013-05-21 13:38:19 +0200\nProcessing by DocumentsController#create as HTML\n  Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"nh1uJdexjXlRqpwerLfL4dErIeZrOgPFP15prkAJmnU=\", \"document\"=>{\"name\"=>\"asd\", \"sections_attributes\"=>{\"0\"=>{\"name\"=>\"asddas\", \"content_ids\"=>[\"\", \"2\"]}}}, \"commit\"=>\"submit\"}\n  Content Load (0.3ms)  SELECT `contents`.* FROM `contents` WHERE `contents`.`id` = 2 LIMIT 1\n   (0.1ms)  BEGIN\n  SQL (0.9ms)  INSERT INTO `documents` (`created_at`, `name`, `updated_at`) VALUES ('2013-05-21 11:38:19', 'asd', '2013-05-21 11:38:19')\n  SQL (0.2ms)  INSERT INTO `sections` (`created_at`, `document_id`, `name`, `updated_at`) VALUES ('2013-05-21 11:38:19', 18, 'asddas', '2013-05-21 11:38:19')\n  Section Load (0.3ms)  SELECT `sections`.* FROM `sections` WHERE `sections`.`id` = 18 LIMIT 1\n   (0.5ms)  ROLLBACK\n  Content Load (0.3ms)  SELECT `contents`.* FROM `contents`\n  Rendered documents/_form.html.erb (18.2ms)\n  Rendered documents/new.html.erb within layouts/application (19.2ms)\nCompleted 200 OK in 35ms (Views: 24.6ms | ActiveRecord: 2.5ms)\n```\n\nI'll take another look if you can add a failing test-case to the sample application. For me it looks like everything is working as expected.\n", "created_at": "2013-05-21 11:39:52", "user": 5402, "id": 18203339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18326987", "text": "Bug was exists upto Rails 3.2.8. It was fixed in Rails 3.2.9 onwards. Thanks @senny\n", "created_at": "2013-05-23 07:09:26", "user": 254381, "id": 18326987}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "PR #5210 added a Friendship model to illustrate a bug, but in doing so\ncreated a confusing structure because both belongs_to declarations in\nFriendship referred to the same side of the join. The new structure\nmaintains the integrity of the bug test while changing the follower\nrelationship to be more useful for other testing.\n", "labels": [], "number": 9747, "updated_at": "2014-06-26 19:55:29", "user": 17553, "closed_at": "2013-03-17 06:14:11", "id": 12097259, "title": "Refactor Person/Friendship relationships to be more intuitive", "url": "https://api.github.com/repos/rails/rails/issues/9747", "created_at": "2013-03-16 16:47:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15007931", "text": "/cc @Pliny\n", "created_at": "2013-03-16 16:48:10", "user": 17553, "id": 15007931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011160", "text": "Stalkers? :/\n", "created_at": "2013-03-16 19:57:52", "user": 27786, "id": 15011160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15013692", "text": "Less creepy now.\n", "created_at": "2013-03-16 22:52:29", "user": 17553, "id": 15013692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15016952", "text": "Squashed\n", "created_at": "2013-03-17 03:56:34", "user": 17553, "id": 15016952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018038", "text": "@rafaelfranca That's what it amounts to. I was using Friendship to try to replicate #9263, but I stopped because I couldn't use it to actually join 2 People. The test isn't necessary, but the restructuring of Friendship makes it do what the naming indicates it should do.\n", "created_at": "2013-03-17 06:02:34", "user": 17553, "id": 15018038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018068", "text": "I'm :+1: fot the model changes, but I think we don't need the test since it is not testing behaviour, but the model structure.\n", "created_at": "2013-03-17 06:05:39", "user": 47848, "id": 15018068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018129", "text": "@rafaelfranca Removed the test and squashed.\n", "created_at": "2013-03-17 06:13:21", "user": 17553, "id": 15018129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018135", "text": "Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-03-17 06:14:31", "user": 47848, "id": 15018135}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Inspired by https://github.com/rails/rails/commit/b0d4a205713154a4cd3c065e8bdb42431f63dd74\n", "labels": [], "number": 9748, "updated_at": "2014-07-04 15:46:26", "user": 12886, "closed_at": "2013-03-16 20:32:06", "id": 12100229, "title": "Adding the --no-rc option to Rails 3.2. As seen in Rails 4.", "url": "https://api.github.com/repos/rails/rails/issues/9748", "created_at": "2013-03-16 20:29:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011717", "text": "We don't accept changes into the release branch, sorry. Please make another one against 3-2-x, though I'm honestly not sure about adding new features to 3.2.\n", "created_at": "2013-03-16 20:32:06", "user": 27786, "id": 15011717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011893", "text": "I figured that might be the case.  I'll resubmit, but which branch should I submit to?  The only others I see are the -stable branches.\n", "created_at": "2013-03-16 20:44:44", "user": 12886, "id": 15011893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15011976", "text": "3-2-stable will become 3.2.14 someday. (So submit it there)\n", "created_at": "2013-03-16 20:50:47", "user": 27786, "id": 15011976}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The screen capture toward the end of section **5.2 The first form** incorrectly shows a Routing Error message, `No route matches [POST] \"/posts/new\"`, not the expected Unknown Action message, `The action 'create' could not be found for PostsController`. \n\nThe attached screen capture shows the result at that step as displayed by Ruby 2.0.0-p0/Rails 4.0.0.beta1:\n\n![edge_guide_5 3_unknown_action](https://f.cloud.github.com/assets/1610420/267370/32a4ffbc-8e7c-11e2-9f64-b5de18057f57.png)\n", "labels": ["docs"], "number": 9749, "updated_at": "2013-03-16 21:16:16", "user": 1610420, "closed_at": "2013-03-16 21:15:48", "id": 12100684, "title": "Edge RailsGuides: Getting Started: 5.2 The first form: incorrect screen capture", "url": "https://api.github.com/repos/rails/rails/issues/9749", "created_at": "2013-03-16 21:06:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15012412", "text": "Thank you! When I went and updated them, I must have screwed it up. I used your image to replace it. <3\n", "created_at": "2013-03-16 21:16:16", "user": 27786, "id": 15012412}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Inspired by b0d4a20\n", "labels": [], "number": 9750, "updated_at": "2014-06-26 15:28:45", "user": 12886, "closed_at": "2013-03-17 05:57:26", "id": 12100754, "title": "Adding the --no-rc option to Rails 3.2. As seen in Rails 4.", "url": "https://api.github.com/repos/rails/rails/issues/9750", "created_at": "2013-03-16 21:11:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15012724", "text": ":+1: \n", "created_at": "2013-03-16 21:39:45", "user": 505427, "id": 15012724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15016222", "text": ":+1: \n", "created_at": "2013-03-17 02:43:37", "user": 428480, "id": 15016222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15017996", "text": "Sorry guys but the stable branches don't get new features.\n", "created_at": "2013-03-17 05:57:26", "user": 47848, "id": 15017996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15018007", "text": "Agree with @rafaelfranca, this is nice but we only apply bugfixes to stable branches. \n", "created_at": "2013-03-17 05:58:50", "user": 160941, "id": 15018007}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "weoifjweoifj\n", "labels": [], "number": 9751, "updated_at": "2014-07-04 15:46:23", "user": 1396, "closed_at": "2013-03-16 21:50:08", "id": 12101200, "title": "Adding a new feaature", "url": "https://api.github.com/repos/rails/rails/issues/9751", "created_at": "2013-03-16 21:49:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15012853", "text": "Mea culpa\n", "created_at": "2013-03-16 21:50:08", "user": 1396, "id": 15012853}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "An 's' is missing from the dir name `views` in the file path shown in the line \"Now, create a new file `app/view/posts/show.html.erb` ...\". \n\nThe path should read `app/views/posts/show.html.erb`.\n\nI found no other instances of `app/view/` in this page.\n", "labels": [], "number": 9752, "updated_at": "2013-03-16 23:32:46", "user": 1610420, "closed_at": "2013-03-16 23:32:41", "id": 12102097, "title": "Edge RailsGuide: Getting Started: 5.7 Showing Posts - incorrect path 'app/view/posts'", "url": "https://api.github.com/repos/rails/rails/issues/9752", "created_at": "2013-03-16 23:14:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15014192", "text": "Thank you!\n", "created_at": "2013-03-16 23:32:46", "user": 27786, "id": 15014192}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "forward-porting #7368\n", "labels": [], "number": 9753, "updated_at": "2014-06-26 16:16:50", "user": 98871, "closed_at": "2013-03-18 16:14:16", "id": 12102931, "title": "i18n locale fallback for localized views", "url": "https://api.github.com/repos/rails/rails/issues/9753", "created_at": "2013-03-17 00:43:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9754, "updated_at": "2014-06-26 16:16:52", "user": 17553, "closed_at": "2013-03-17 16:18:10", "id": 12104215, "title": "Fix rake test warnings in actionpack", "url": "https://api.github.com/repos/rails/rails/issues/9754", "created_at": "2013-03-17 03:27:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15016861", "text": "Relates to #8546\n\n/cc @carlosantoniodasilva @spastorino\n", "created_at": "2013-03-17 03:49:27", "user": 17553, "id": 15016861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024233", "text": "@rafaelfranca wdyt about that test?\n", "created_at": "2013-03-17 15:15:50", "user": 26328, "id": 15024233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025432", "text": "Removed and squashed.\n", "created_at": "2013-03-17 16:17:18", "user": 17553, "id": 15025432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025489", "text": "Thanks\n", "created_at": "2013-03-17 16:19:28", "user": 26328, "id": 15025489}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Would it be worth it to add a predicate optimization when a range's `begin` and `end` are equal?\n\n``` ruby\nPost.where(:published_at => Date.new(2012,4,25)..Date.new(2012,4,25))\n\n#=> Post Load (3.0ms)  SELECT `posts`.* FROM `posts` WHERE (`posts`.`published_at` BETWEEN '2012-04-25' AND '2012-04-25')\n```\n\nseems to be slightly slower than\n\n``` ruby\nPost.where(:published_at => Date.new(2012,4,25))\n\n#=> Post Load (2.7ms)  SELECT `posts`.* FROM `posts` WHERE `posts`.`published_at` = '2012-04-25'\n```\n\nSomewhere in `active_record/relation/query_methods.rb`, we could add something like:\n\n``` ruby\nif val.is_a?(Range) \n  return val.begin == val.end ? val.begin : val\nend\n```\n\nPlease let me know if it's worthwhile, and I'll submit a pull request.\n", "labels": [], "number": 9755, "updated_at": "2013-03-17 10:31:20", "user": 139536, "closed_at": "2013-03-17 10:31:20", "id": 12106053, "title": "Optimize 'where' when range's begin and end are equal", "url": "https://api.github.com/repos/rails/rails/issues/9755", "created_at": "2013-03-17 08:05:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15020453", "text": "Hey @ndbroadbent thanks for your help to make Rails better!\n\nTo keep the issues on Github focused we only use it to track bugs and features with attached code (Pull Requests). Check out the [CONTRIBUTING.md](https://github.com/rails/rails/blob/master/CONTRIBUTING.md) to read more about these guidelines. For feature suggestions please use the [Rails Core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core)\n\nAs this is a question/suggestion I'm closing the issue but please send your thoughts to the core mailing list to get your answer.\n\nCheers,\nYves\n", "created_at": "2013-03-17 10:31:20", "user": 5402, "id": 15020453}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a new version of the patch #8156\n\nDescription of this bug: #8015\n\ncc @fxn @steveklabnik @macksmind @strzalek\n", "labels": ["activesupport"], "number": 9756, "updated_at": "2014-09-06 06:26:14", "user": 31945, "closed_at": "2014-09-05 19:30:34", "id": 12106089, "title": "Fix for inflector's incorrect camelCase replacement for acronyms Mark II", "url": "https://api.github.com/repos/rails/rails/issues/9756", "created_at": "2013-03-17 08:11:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15019080", "text": "@fxn @steveklabnik A regression test case has been added. And I've run the ActionPack test suite to make sure they didn't break.\n", "created_at": "2013-03-17 08:12:30", "user": 31945, "id": 15019080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16564406", "text": "@fxn Hi, would you like to review this PR again?\n", "created_at": "2013-04-18 08:41:31", "user": 31945, "id": 16564406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17786239", "text": "Seems good\n", "created_at": "2013-05-12 22:03:26", "user": 10128, "id": 17786239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19099787", "text": "I guess getting this included for 4.0 is out of the window. How about 4.1? cc @fxn\n", "created_at": "2013-06-07 10:33:54", "user": 31945, "id": 19099787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41975049", "text": "Hi, I'd like to try this one last time - does the Rails core team like this to be fixed? If so I'll rebase, if not I am happy to close the PR. Thanks! cc @fxn\n", "created_at": "2014-05-02 01:30:49", "user": 31945, "id": 41975049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/49509062", "text": "@fxn or anyone else from the core team has any thoughts on this?\n", "created_at": "2014-07-19 13:08:21", "user": 752058, "id": 49509062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/52981749", "text": "Alternative/safer solution: https://github.com/matthewd/rails/commit/db471aba86014c7172d3dc5dba1fddbc334f6969\n\n/cc @fxn \n", "created_at": "2014-08-21 20:45:38", "user": 1034, "id": 52981749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/52988684", "text": "@matthewd :+1:\n", "created_at": "2014-08-21 21:38:56", "user": 8061, "id": 52988684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54670534", "text": "Committed my above proposal as ccbb48196efe06a0c1c360951caff74ee74a8d14\n", "created_at": "2014-09-05 19:30:34", "user": 1034, "id": 54670534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54704153", "text": "Sweet! :+1: \n", "created_at": "2014-09-06 06:26:14", "user": 31945, "id": 54704153}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove an unused parameter passed to assert_query_equal method from tests\n", "labels": [], "number": 9757, "updated_at": "2016-02-22 14:25:39", "user": 567626, "closed_at": "2013-03-17 15:35:07", "id": 12106736, "title": "remove unused parameter passed to assert_query_equal method", "url": "https://api.github.com/repos/rails/rails/issues/9757", "created_at": "2013-03-17 09:48:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Not pretty sure if these happened to be used. Also it was throwing warnings.\n", "labels": [], "number": 9758, "updated_at": "2014-06-24 01:22:12", "user": 567626, "closed_at": "2013-03-17 14:19:15", "id": 12106897, "title": "extra lines from Rakefile removed, which threw warning", "url": "https://api.github.com/repos/rails/rails/issues/9758", "created_at": "2013-03-17 10:05:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just refactored and removed unnecessary relationship hash that was created, changed to test values directly instead\n", "labels": [], "number": 9759, "updated_at": "2014-06-26 19:55:42", "user": 567626, "closed_at": "2013-03-17 14:17:28", "id": 12107292, "title": "refactor test to drop unnecessary hash creation, test directly instead", "url": "https://api.github.com/repos/rails/rails/issues/9759", "created_at": "2013-03-17 10:54:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15023358", "text": ":+1: Thanks.\n", "created_at": "2013-03-17 14:17:38", "user": 26328, "id": 15023358}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When i set `config.active_record.whitelist_attributes = false` in application.rb and go into rails console and run `MyApp::Application.config.active_record.whitelist_attributes` it returns nil\n\nThis is a problem when trying to use strong_parameters\n", "labels": [], "number": 9760, "updated_at": "2013-03-18 02:55:34", "user": 895373, "closed_at": "2013-03-17 21:49:34", "id": 12108065, "title": "Can't set active_record.whitelist_attributes", "url": "https://api.github.com/repos/rails/rails/issues/9760", "created_at": "2013-03-17 12:22:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15023813", "text": "what version of rails are you using?\n", "created_at": "2013-03-17 14:47:10", "user": 5402, "id": 15023813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15023970", "text": "I have tested this in both rails 3.2.11 and 3.2.12 with ruby 2.0\n", "created_at": "2013-03-17 14:57:52", "user": 895373, "id": 15023970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024189", "text": "Can you explain a little bit more why this is a problem when using strong parameters? Just to have some more background here for everyone. Thanks.\n", "created_at": "2013-03-17 15:13:11", "user": 26328, "id": 15024189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024461", "text": "This is a problem because i want to use strong_paramters instead of attr_accessible, so i should be able to to remove attr_accessible from my model and set active_record.whitelist_attributes to false.\nBut when i try to Update my model with update_attributes i get an error saying: WARNING: Can't mass-assign protected attributes\n", "created_at": "2013-03-17 15:29:30", "user": 895373, "id": 15024461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024753", "text": "Hm weird, according to the [strong params readme](https://github.com/rails/strong_parameters#installation), you should just be able to set the option to false, and remove attr_protected/accessible calls from your model.\n", "created_at": "2013-03-17 15:43:19", "user": 26328, "id": 15024753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024829", "text": "can you upload a sample app on Github that illustrates the problem?\n", "created_at": "2013-03-17 15:47:15", "user": 5402, "id": 15024829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15031737", "text": "Okay, so i created a sample app but i couldn't reproduce the error. Very weird..\n\nAfter a long time of digging i found out i was using a gem called audited to create audits for my models, and this gem caused the mass assignment error. So i looked at the docs for the gem, and it states that it assumes you are using attr_accessible (https://github.com/collectiveidea/audited#gotchas)\n\nLong story short, i just had to add an option called allow_mass_assignment: true and now it all works..\n\nI am very sory guys\n", "created_at": "2013-03-17 21:49:34", "user": 895373, "id": 15031737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15037049", "text": "No problem, thank you for reporting back.\n\nOn Sun, Mar 17, 2013 at 6:49 PM, Aske Hansen notifications@github.comwrote:\n\n> Okay, so i created a sample app but i couldn't reproduce the error. Very\n> weird..\n> \n> After a long time of digging i found out i was using a gem called audited\n> to create audits for my models, and this gem caused the mass assignment\n> error. So i looked at the docs for the gem, and it states that it assumes\n> you are using attr_accessible (\n> https://github.com/collectiveidea/audited#gotchas)\n> \n> Long story short, i just had to add an option called\n> allow_mass_assignment: true and now it all works..\n> \n> I am sory for any inconvenience\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9760#issuecomment-15031737\n> .\n\n## \n\nAt.\nCarlos Antonio\n", "created_at": "2013-03-18 02:55:34", "user": 26328, "id": 15037049}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using Process#kill was triggering ReportCrash on Mac OS Moutain Lion and\nthe test would not complete. This happened whether run from `rake test`\nor as ruby -w -Itest ...\n\n/cc @jonleighton @carlosantoniodasilva\n", "labels": [], "number": 9761, "updated_at": "2014-06-16 18:54:49", "user": 17553, "closed_at": "2013-03-22 14:44:16", "id": 12108684, "title": "Fix rails console --sandbox test for Mac OS", "url": "https://api.github.com/repos/rails/rails/issues/9761", "created_at": "2013-03-17 13:27:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15023324", "text": "Hm yeah, I was having problems but couldn't look yet. Will try your patch later, thanks @macksmind!\n", "created_at": "2013-03-17 14:15:38", "user": 26328, "id": 15023324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024678", "text": "Confirme, tests pass for me with this change.\n\n@jonleighton thoughts?\n", "created_at": "2013-03-17 15:39:56", "user": 26328, "id": 15024678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15032715", "text": "@carlosantoniodasilva not passed the tests...\n", "created_at": "2013-03-17 22:41:43", "user": 455676, "id": 15032715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15036903", "text": "@rrmartins sorry, what? It seems to be passing here.\n", "created_at": "2013-03-18 02:48:01", "user": 26328, "id": 15036903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15048839", "text": "@carlosantoniodasilva here in my machine had a failure, below is the log:\n\n``` ruby\n1) Failure:\nFullStackConsoleTest#test_sandbox [test/application/console_test.rb:125]:\n\"Post.count\" expected, but got:\n\nquit\n```\n", "created_at": "2013-03-18 10:57:32", "user": 455676, "id": 15048839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15062516", "text": "@rrmartins crap.. which version is your OS?\n", "created_at": "2013-03-18 15:49:38", "user": 26328, "id": 15062516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063017", "text": "@carlosantoniodasilva  here is my version 10.8.3\n", "created_at": "2013-03-18 15:56:47", "user": 455676, "id": 15063017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063777", "text": "@rrmartins Pulling that down now.\n", "created_at": "2013-03-18 16:08:37", "user": 17553, "id": 15063777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15065527", "text": "Weird, I'm already on OSX 10.8.3, and it worked.\n", "created_at": "2013-03-18 16:37:28", "user": 26328, "id": 15065527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15065881", "text": "Works for me on 10.8.3 too. @rrmartins, call you try increasing the timeout at line 109 and see if anything changes. Grasping at straws, but it seems like that quit should have already been consumed.\n", "created_at": "2013-03-18 16:42:49", "user": 17553, "id": 15065881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15290687", "text": "Sorry for my slow reply folks, I've been moving house :( :( :( I'll look at this today.\n", "created_at": "2013-03-22 10:49:41", "user": 1979, "id": 15290687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15293375", "text": "Hi guys, I hope that the above commit resolves this? Please let me know if not.\n", "created_at": "2013-03-22 12:06:29", "user": 1979, "id": 15293375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15297574", "text": "No, it doesn't.\n\n```\n$ bundle exec ruby -wItest test/application/console_test.rb\nRun options: --seed 41388\n\n# Running tests:\n\n.....Terminated: 15\n```\n", "created_at": "2013-03-22 13:52:57", "user": 17553, "id": 15297574}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15298262", "text": "Based on the Process#kill rdoc, what you did looks good. But I played with it for a while on my Mac and I couldn't figure out how to make it do what I wanted. My patch isn't ideal, but it's the best I could think of. Do we need to bring this up at http://bugs.ruby-lang.org/ ?\n", "created_at": "2013-03-22 14:06:23", "user": 17553, "id": 15298262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15299227", "text": "Hmm, weird. Maybe some native extension is objecting to the signal. Anyway, how about this?\n\n``` diff\ndiff --git a/railties/test/application/console_test.rb b/railties/test/application/console_test.rb\nindex d586822..80700a1 100644\n--- a/railties/test/application/console_test.rb\n+++ b/railties/test/application/console_test.rb\n@@ -126,12 +126,6 @@ class FullStackConsoleTest < ActiveSupport::TestCase\n     assert_output \"> \"\n   end\n\n-  def kill(pid)\n-    Process.kill('TERM', pid)\n-    Process.wait(pid)\n-  rescue Errno::ESRCH\n-  end\n-\n   def spawn_console\n     pid = Process.spawn(\n       \"#{app_path}/bin/rails console --sandbox\",\n@@ -148,15 +142,13 @@ class FullStackConsoleTest < ActiveSupport::TestCase\n     write_prompt \"Post.count\", \"=> 0\"\n     write_prompt \"Post.create\"\n     write_prompt \"Post.count\", \"=> 1\"\n-\n-    kill pid\n+    @master.puts \"quit\"\n\n     pid = spawn_console\n\n     write_prompt \"Post.count\", \"=> 0\"\n     write_prompt \"Post.transaction { Post.create; raise }\"\n     write_prompt \"Post.count\", \"=> 0\"\n-  ensure\n-    kill pid if pid\n+    @master.puts \"quit\"\n   end\n end\n```\n\nI basically want to avoid having special cases for different OSes.\n", "created_at": "2013-03-22 14:24:21", "user": 1979, "id": 15299227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15299812", "text": "Yes!\n", "created_at": "2013-03-22 14:35:01", "user": 17553, "id": 15299812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15300418", "text": "Ok, I've committed that then\n", "created_at": "2013-03-22 14:44:14", "user": 1979, "id": 15300418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15302369", "text": "@jonleighton Thanks\n", "created_at": "2013-03-22 15:16:27", "user": 17553, "id": 15302369}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #8079.\n\nI had to rework some of the tests because the mock allowed any arguments\nfor `connection.exeucte`. I think this is very dangerous as there could\nanything be executed without the tests noticing it.\n", "labels": ["activerecord"], "number": 9762, "updated_at": "2014-06-26 19:55:47", "user": 5402, "closed_at": "2013-03-17 19:35:54", "id": 12110287, "title": "`rake db:create` does not change permissions of root user.", "url": "https://api.github.com/repos/rails/rails/issues/9762", "created_at": "2013-03-17 15:49:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15024905", "text": "@carlosantoniodasilva @NZKoz let me know what you think.\n", "created_at": "2013-03-17 15:50:28", "user": 5402, "id": 15024905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025421", "text": "It seems good to me\n", "created_at": "2013-03-17 16:16:40", "user": 47848, "id": 15025421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025455", "text": "please hold the merge, there is something weird with mocha. It does not let the test fail but only prints the error message. I'm investigating.\n", "created_at": "2013-03-17 16:18:18", "user": 5402, "id": 15025455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15025593", "text": "Seems good :+1:\n", "created_at": "2013-03-17 16:26:37", "user": 26328, "id": 15025593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15026142", "text": "@rafaelfranca I fixed the things @carlosantoniodasilva pointed out. Feel free to merge. The mocha thing is related to a big `rescue Exception` around the code so I guess it would be a bigger unrelated change.\n", "created_at": "2013-03-17 16:53:41", "user": 5402, "id": 15026142}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. The loop was unnecessarily repeating itself\n2. Removed unused variable by use of each_key in place of each\n", "labels": [], "number": 9763, "updated_at": "2014-06-26 19:55:51", "user": 567626, "closed_at": "2013-03-18 15:48:53", "id": 12112785, "title": "fix repeat of test; remove unused variable by use of each_key", "url": "https://api.github.com/repos/rails/rails/issues/9763", "created_at": "2013-03-17 18:57:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15057781", "text": "@carlosantoniodasilva  @norman  Fixed/Squashed it.\n", "created_at": "2013-03-18 14:32:39", "user": 567626, "id": 15057781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15062488", "text": "Thanks @normal @vipulnsward \n", "created_at": "2013-03-18 15:49:07", "user": 26328, "id": 15062488}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I upgraded to Rails 4.0beta1 and Ruby 2.0 and now every time I try to open my rails app from a new browser session (every time I clear my cookies), I get:\n\n``` ruby\nSystemStackError in AnythingController#Index\nstack level too deep\n```\n\nThe controller can be anything, it happens on all pages. The full traceback is just:\n\n``` ruby\nactionpack (4.0.0.beta1) lib/action_dispatch/middleware/reloader.rb:70\n```\n\nSimply refreshing the page makes it load and the full traceback is just that 1 single line.\n\nAny ideas what it could be and how to troubleshoot?\n", "labels": ["needs feedback"], "number": 9764, "updated_at": "2015-08-24 23:41:10", "user": 578881, "closed_at": "2013-03-18 16:49:09", "id": 12117055, "title": "SystemStackError stack level too deep - actionpack (4.0.0.beta1) lib/action_dispatch/middleware/reloader.rb:70", "url": "https://api.github.com/repos/rails/rails/issues/9764", "created_at": "2013-03-18 00:13:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034333", "text": "Could you reproduce in a new application?\n", "created_at": "2013-03-18 00:15:30", "user": 47848, "id": 15034333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034408", "text": "No, I cannot.\n", "created_at": "2013-03-18 00:20:32", "user": 578881, "id": 15034408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034426", "text": "So unless you give us more information about how to reproduce it, we can't do anything :anguished:\n", "created_at": "2013-03-18 00:22:20", "user": 47848, "id": 15034426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15034462", "text": "I would've thought the traceback should provide more than just that single line. How would I troubleshoot? -- I will try to remove routes 1 at a time, but shouldn't actionpack give more than just 1 line?\n", "created_at": "2013-03-18 00:24:38", "user": 578881, "id": 15034462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15035268", "text": "Yes, it gives you more than 1 line, but in your case, you are doing something very wrong so when trying to give you the stack trace something is called in circular, so Ruby can't give you the information.\n\nSee the description of the SystemStackError class http://ruby-doc.org/core-2.0/SystemStackError.html\n", "created_at": "2013-03-18 01:18:36", "user": 47848, "id": 15035268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15048156", "text": "I've identified the method causing this weird error. It is in my audit_session model:\n\n``` ruby\n  def self.current_session_for(current_user, request)\n    self.find_or_create_by(\n      :updated_at.gt =>  MAX_AUDIT_SESSION_IDLE.ago,\n      user: current_user,\n      request_host: request.host,\n      request_domain: request.domain,\n      request_port: request.port,\n      remote_ip: request.env.has_key?(\"HTTP_X_FORWARDED_FOR\") ? request.env[\"HTTP_X_FORWARDED_FOR\"] : request.remote_ip,\n      user_agent: request.env['HTTP_USER_AGENT'],\n      browser_lang: request.env['HTTP_ACCEPT_LANGUAGE']\n    )\n  end\n```\n\nThe method is called from my ApplicationController as:\n\n``` ruby\n  def current_audit_session\n    @current_audit_session ||= AuditSession.current_session_for(current_user, request)\n  end\n```\n\nIf I uncomment the self.find_or_create_by then the application loads first but no audit_session model is created obviously. What am I doing wrong in that method?\n", "created_at": "2013-03-18 10:38:59", "user": 578881, "id": 15048156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15049249", "text": "Update: I have an after_create callback that runs this:\n\n``` ruby\n    def retrieve_geocode\n      if remote_ip.present?\n        GeocodeWorker.perform_async(Mongoid.default_session.options[:database].to_s,\n         self.class.model_name, self.id, remote_ip)\n      end\n    end\n```\n\nI changed the GeocodeWorker line to: \n\n``` ruby\n    GeocodeWorker.perform_async(Mongoid.default_session.options[:database].to_s,\n         self.class.model_name.to_s, self.id, remote_ip)\n```\n\nAnd the problem went away.\n\nWhy would using self.class.model_name instead of self.class.model_name.to_s in a model cause a stack level too deep error?\n", "created_at": "2013-03-18 11:08:26", "user": 578881, "id": 15049249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15066277", "text": "It's hard to debug these kind of problems without some running code to play with. If you want to figure out what happened you need to dig depper into perform_async and what methods on the `ModelName` are called.\n\nAs it is application related and not Rails related I am closing this issue.\n", "created_at": "2013-03-18 16:49:09", "user": 5402, "id": 15066277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19866620", "text": "Ive been having a similar problem with the stack level too deep error. My problem happens when using a transaction. \n\nIf i try to save the record outside of a transaction is works as expected. Only when I try to save them inside a transaction. Ive stripped down the transaction code to just a single object (i'll eventually have multiple) and I cant get this to save by itself. Again if i pull it out of a transaction and just save it alone, it works. \n\nParams Object \n\n<code>\nparams => {\n  \"resource\"=> {\n    \"resource_type\"=>\"document\", \n    \"resource_name\"=>\"My Rails Doc\",\n    \"source_id\"=>\"Dropbox\"\n  },\n  \"resource_document\"=> {\n    \"resource_document\"=> #<ActionDispatch::Http::UploadedFile:0x007f8e919d06f8\n      @content_type=\"text/plain\",\n      @headers= \"Content-Disposition: \n        form-data; name=\\\"resource_document[resource_document]\\\";\n        filename=\\\"rails_local_env_setup.txt\\\"\\r\\n\n        Content-Type: text/plain\\r\\n\",\n      @original_filename=\"rails_local_env_setup.txt\",\n      @tempfile= #<File:/var/folders/t4/lfmj7mhj52b2krryzh7dj4hh0000gn/T/RackMultipart20130604-29589-2c0seo>>},\n\n  \"action\"=>\"create\",\n  \"controller\"=>\"resources\"\n }\n</code>\nIt hits the resources controller (im currently using the teacher obj)\n\ndef create\n\n  if current_teacher\n    @resource = ResourceObject.create_teacher_resource(params, current_teacher)\n  end\n\n  if current_student\n    @resource = ResourceObject.create_student_resource(params, current_student)\n  end\n\n  if current_admin\n    @resource = Resource.new(params[:resource])\n  end\n\n  respond_to do |format|\n    if @resource.success\n      format.html { redirect_to @resource, notice: 'Resource was successfully created.' }\n      format.json { render json: @resource, status: :created, location: @resource }\n    else\n      format.html { render action: \"new\" }\n      format.json { render json: @resource.errors, status: :unprocessable_entity }\n    end\n  end\nend\n\nThen to the Resource Business Object\n\nclass ResourceObject\n\n  def self.create_teacher_resource(params, teacher)\n    begin\n      ActiveRecord::Base.transaction do\n        # Create Resource\n        @resource = Resource.new\n        @resource.resource_name = params[:resource][:resource_name]\n        @resource.resource_type = params[:resource][:resource_type]\n        @resource.source_id = params[:resource][:source_id]\n        @resource.teacher_id = teacher.id\n        @resource.save!\n\n```\n    return @resource.success = \"ok\"\n  end\n    rescue Exception => e\n  # TODO Need to figure out how to pass exception message back to controller\n      return @resource.errors\n    end     \n  end\nend\n```\n\nend\n", "created_at": "2013-06-22 23:41:12", "user": 3483466, "id": 19866620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20459071", "text": "Also having this problem, on rails 4 release version.\nRails Admin gem could be the issue as I'm using that. Doesn't seem to occur until I modify a file in development (even simple ones that have nothing to do with any executing code), the auto-reload fails. If I re-start the server everything works as it should.\n", "created_at": "2013-07-04 04:53:20", "user": 368013, "id": 20459071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20462258", "text": "@stakach can you reproduce this issue in a fresh Rails application? If so please upload it to GitHub so that we can take a look.\n", "created_at": "2013-07-04 07:10:52", "user": 5402, "id": 20462258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20462326", "text": "Will do over the weekend :)\n", "created_at": "2013-07-04 07:12:57", "user": 368013, "id": 20462326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37481066", "text": "@stakach Did you ever track down what might be causing this?  I'm having a similar problem, but so hard to track down in a large project without a source line...\n", "created_at": "2014-03-12 23:15:22", "user": 312435, "id": 37481066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37482000", "text": "My solution was to turn off auto-reload, never could reliably track down the issue. Although I'm fairly certain it something to do with concurrency / parallelism.\n\nChanged these in development environment\n\n``` ruby\n  config.cache_classes = true\n  config.eager_load = true\n```\n\nHowever I have come across a new issue in some more recent developments (running rails 4.1) that is almost as alarming - also seems to be concurrency issue, only happens in development and I have no reliable way to reproduce\n\n```\nI, [2014-03-11T17:12:21.164812 #35642]  INFO -- : Started GET \"/api/articles?q=test\" for 127.0.0.1 at 2014-03-11 17:12:21 +1100\nF, [2014-03-11T17:12:21.169950 #35642] FATAL -- : \nLoadError (cannot load such file -- /Users/stakach/Documents/projects/cotag-api/config/routes.rb):\n  libuv (0.11.23) lib/libuv/work.rb:70:in `call'\n  libuv (0.11.23) lib/libuv/work.rb:70:in `on_work'\n```\n\nI can assure you I did not delete routes.rb while the application was running!\nWorks in production, so I have been putting up with it.\n", "created_at": "2014-03-12 23:27:41", "user": 368013, "id": 37482000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37486384", "text": "Thanks, sad to hear you didn't get it figured out.\n\nI just spent some time with \"bundle open\" - commenting out the \"rescue\" blocks for whatever rails line it did give me.  After ~5 steps through action_dispatch, activerecord, actionpack, and activesupport, it finally showed me the line of my application causing it - stupidly a controller calling itself as I'd forgotten a '@'.\n\nNot sure why it failed to actually preserve the callback stack otherwise though, perhaps I'll try to put together a minimal package to demonstrate it losing the callstack.\n", "created_at": "2014-03-13 00:30:16", "user": 312435, "id": 37486384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37487048", "text": "Confirmed - a controller with this content will never generate a proper callback stack, unless you comment out various rescues such as actionpack/lib/action_controller/metal/rescue.rb:30 - 33\n\n```\n  class TestController < ApplicationController\n    def test() test() end  \n  end\n```\n", "created_at": "2014-03-13 00:34:49", "user": 312435, "id": 37487048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37520665", "text": "Just a note for any future generations.\n\nIf you get a `SystemStackError` with a single backtrace line: `actionpack (X.X.X) lib/action_dispatch/middleware/reloader.rb:70` then in 99.99% of cases this is a bug in **your application code** and **not a Rails bug**. What happens is that since Ruby version 1.9 a backtrace generated by `SystemStackError` is completely useless (always consisting of a single line, this is a bug in Ruby, see https://bugs.ruby-lang.org/issues/6216 /cc @matz @ko1). Therefore whenever **your app's code** blows the stack, you never get the relevant backtrace pointing back to your code, but instead you get a completely misleading and irrelevant backtrace pointing at Rails (like reported above).\n\nHow can you debug this? Try running your app with Ruby 1.8, Rubinius or JRuby (all these will provide you with usable backtraces), alternatively you can go @inspire22's way (I also did this in my app) and manually edit Rails' code iteratively removing relevant `rescue` statements until the backtrace starts pointing at your code.\n", "created_at": "2014-03-13 11:00:04", "user": 15688, "id": 37520665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50828604", "text": "To @thedarkone's point, I normally find these kinds of stack overflows are due to typos in class names that piss off the autoloader. So you might name a file \"resource_decorator.rb\" but accidentally define the class inside it \"class Resource\" -- mayhem ensues.\n", "created_at": "2014-07-31 22:43:56", "user": 16389, "id": 50828604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54642807", "text": "I ran into this issue when I had an enum with a key the same as a field.\n", "created_at": "2014-09-05 15:47:17", "user": 23020, "id": 54642807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/134415144", "text": "Same issue.  Turns out it was one of my gems.\n\nhttps://github.com/tchandy/octopus/issues/322\n", "created_at": "2015-08-24 23:41:10", "user": 134539, "id": 134415144}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "These tests should be in inheritance_test.rb since its testing a\nfeature which is implemented in inheritance.rb\n\nWe should extract tests out from base_test.rb if its possible since its getting bigger and bigger... :P \n\nref: #9744\n\n/cc @carlosantoniodasilva\n", "labels": [], "number": 9765, "updated_at": "2014-06-26 15:55:30", "user": 1095842, "closed_at": "2013-03-18 15:41:10", "id": 12122588, "title": "move tests out from base_test.rb", "url": "https://api.github.com/repos/rails/rails/issues/9765", "created_at": "2013-03-18 06:47:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "these TODOs have been around for a very long time without anyone acting on them. From the git log it's hard to tell what the intention behind them was and I think it's safe to remove them.\n", "labels": [], "number": 9766, "updated_at": "2014-06-26 15:55:32", "user": 5402, "closed_at": "2013-03-18 15:43:39", "id": 12123801, "title": "remove ancient TODOs", "url": "https://api.github.com/repos/rails/rails/issues/9766", "created_at": "2013-03-18 07:58:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15042811", "text": "@carlosantoniodasilva @rafaelfranca can you take a look?\n", "created_at": "2013-03-18 07:59:24", "user": 5402, "id": 15042811}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In china there is basic unit so called 万(10000) and 亿(100000000)\n\nbut the NumberHelper freeze the units hash to \n{0 => :unit, 1 => :ten, 2 => :hundred, 3 => :thousand, 6 => :million, 9 => :billion, 12 => :trillion, 15 => :quadrillion, -1 => :deci, -2 => :centi, -3 => :mili, -6 => :micro, -9 => :nano, -12 => :pico, -15 => :femto}.freeze\n\nwhich CANNOT make the unit to be customize, such as\n\n```\nnumber_to_human 10000, :locale=>\"zh_CN\"  # => 1万\nnumber_to_human 100000000, :locale=>\"zh_CN\"  # => 1亿\n```\n", "labels": ["actionpack"], "number": 9767, "updated_at": "2013-03-18 08:50:03", "user": 783849, "closed_at": "2013-03-18 08:50:03", "id": 12124053, "title": "I18n number_to_human feature: add 10000(万) 100000000(亿) units support for chinese", "url": "https://api.github.com/repos/rails/rails/issues/9767", "created_at": "2013-03-18 08:10:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15043559", "text": "Please use ``` to format your code blocks on github (I edited your message).\n\nWith Rails 4 the number helpers were moved to ActiveSupport. Also it looks like the `.freeze` is gone: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/number_helper.rb#L109-L110\n\nI think there is a possibility we can backport the `.freeze` removal to `3-2-stable` to get it released on 3.2.x\n", "created_at": "2013-03-18 08:30:01", "user": 5402, "id": 15043559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15044130", "text": "thanks a lot for the quick reply, that really solved my problem!\n", "created_at": "2013-03-18 08:49:54", "user": 783849, "id": 15044130}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #9767.\n\nThe defaults are already non-frozen on master. I think it's safe to backport this change to 3-2-stable.\n", "labels": ["actionview"], "number": 9768, "updated_at": "2014-07-03 07:02:23", "user": 5402, "closed_at": "2013-03-18 15:53:48", "id": 12124557, "title": "do not freeze NumberHelper defaults.", "url": "https://api.github.com/repos/rails/rails/issues/9768", "created_at": "2013-03-18 08:36:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15043764", "text": "@carlosantoniodasilva @rafaelfranca review please :grin: \n", "created_at": "2013-03-18 08:37:18", "user": 5402, "id": 15043764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15062807", "text": ":heart:\n", "created_at": "2013-03-18 15:53:52", "user": 26328, "id": 15062807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063169", "text": "Should probably add a test to assert these are not frozen to ensure they don't regress.\n", "created_at": "2013-03-18 15:59:10", "user": 169093, "id": 15063169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15064501", "text": "This change fall in the \"new feature\" category for me and I'd not backport in a stable branch, but I don't think will hurt.\n", "created_at": "2013-03-18 16:21:05", "user": 47848, "id": 15064501}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed unused variable from the method #concat_records\n", "labels": [], "number": 9769, "updated_at": "2014-07-04 15:46:15", "user": 3786236, "closed_at": "2013-03-19 08:10:14", "id": 12126571, "title": "Unused variable in the method #concat_records", "url": "https://api.github.com/repos/rails/rails/issues/9769", "created_at": "2013-03-18 09:54:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Given the following models\n\n``` ruby\nclass Player < ActiveRecord::Base\n  has_many :totals, class_name: 'PlayerTotal'\n\n  has_one :current_total,  -> { where(year: 2013) }, class_name: 'PlayerTotal'\n  has_one :previous_total, -> { where(year: 2012) }, class_name: 'PlayerTotal'\n\n  # Rails 3.2.12 equivalent of the above associations\n  # has_one :current_total,  conditions: { year: 2013 }, class_name: 'PlayerTotal'\n  # has_one :previous_total, conditions: { year: 2012 }, class_name: 'PlayerTotal'\nend\n\nclass PlayerTotal < ActiveRecord::Base\n  belongs_to :player\nend\n```\n\nI am trying to find a solution that will eager load the current_total and previous_total for all players. A simple eager load seems to work as expected, ruby and log output below:\n\n``` ruby\nPlayer.where(id: [99,33,34]).includes(:current_total, :previous_total)\n```\n\n```\n  Player Load (0.6ms)  SELECT \"players\".* FROM \"players\" WHERE \"players\".\"id\" IN (99, 33, 34)\n  PlayerTotal Load (0.8ms)  SELECT \"player_totals\".* FROM \"player_totals\" WHERE \"player_totals\".\"year\" = 2013 AND \"player_totals\".\"player_id\" IN (33, 34, 99)\n  PlayerTotal Load (0.7ms)  SELECT \"player_totals\".* FROM \"player_totals\" WHERE \"player_totals\".\"year\" = 2012 AND \"player_totals\".\"player_id\" IN (33, 34, 99)\n```\n\nIn fact, an even more complex eager load also works as expected. Note the usage of `player_totals` manually in the where clause here, I would like to avoid that if anyone knows how, but I don't think it's possible.\n\n``` ruby\nPlayer.where(id: [99,33,34]).includes(:previous_total).where('player_totals.total > ?', 100).references(:previous_total)\n```\n\n```\n  SQL (0.9ms)  SELECT \"players\".\"id\" AS t0_r0, \"players\".\"_name\" AS t0_r1, \"players\".\"created_at\" AS t0_r2, \"players\".\"updated_at\" AS t0_r3, \"player_totals\".\"id\" AS t1_r0, \"player_totals\".\"player_id\" AS t1_r1, \"player_totals\".\"year\" AS t1_r2, \"player_totals\".\"total\" AS t1_r3 FROM \"players\" LEFT OUTER JOIN \"player_totals\" ON \"player_totals\".\"player_id\" = \"players\".\"id\" AND \"player_totals\".\"year\" = 2012 WHERE \"players\".\"id\" IN (99, 33, 34) AND (player_totals.total > 100)\n```\n\nSo all good so far. The has_one associations are doing what I wanted. However, when I try and use both of my has_one associations together, that is when I find some trouble. Note the only addition to this query below compared to the working one above is the extra association in the includes() list.\n\n``` ruby\nPlayer.where(id: [99,33,34]).includes(:current_total, :previous_total).where('player_totals.total > ?', 100).references(:previous_total)\n```\n\n```\nActiveRecord::StatementInvalid: PG::Error: ERROR:  relation \"previous_totals_players\" does not exist\nLINE 5:                WHERE a.attrelid = '\"previous_totals_players\"...\n                                          ^\n:               SELECT a.attname, format_type(a.atttypid, a.atttypmod),\n                     pg_get_expr(d.adbin, d.adrelid), a.attnotnull, a.atttypid, a.atttypmod\n                FROM pg_attribute a LEFT JOIN pg_attrdef d\n                  ON a.attrelid = d.adrelid AND a.attnum = d.adnum\n               WHERE a.attrelid = '\"previous_totals_players\"'::regclass\n                 AND a.attnum > 0 AND NOT a.attisdropped\n               ORDER BY a.attnum\n```\n\nFor reference, I get the exact same error in rails 3.2.12 and rails 4.0.0rc2. Some tweaks are required for rails 4, such as the addition of .references() to the where() and the proc instead of conditions in the has_one declaration. Otherwise it's identical.\n", "labels": ["activerecord"], "number": 9770, "updated_at": "2013-03-27 19:21:17", "user": 26856, "closed_at": "2013-03-27 19:21:17", "id": 12129413, "title": "has_one with conditions fails to eager load when using additional where()", "url": "https://api.github.com/repos/rails/rails/issues/9770", "created_at": "2013-03-18 11:30:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15050531", "text": "The `where` part forces the `Preloader` to issue a join and not separate queries as in example 1. I suspect the problem is related to having 2 associations referencing the same table and that join.\n", "created_at": "2013-03-18 11:44:32", "user": 5402, "id": 15050531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15088177", "text": "It would seem that ActiveRecord is correctly aliasing the tables as it knows it needs to since the same table is used multiple times in the query and needs to avoid name collision. However, since one of those aliased tables is used in the where clause, it is then failing when parsing the binds because it is trying to figure out what type of value the bind should be. Since it can't ask the database about that table.column definition, as the table is aliased at this point.\n", "created_at": "2013-03-18 23:12:26", "user": 26856, "id": 15088177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15100442", "text": "/cc @jonleighton \n", "created_at": "2013-03-19 07:17:05", "user": 5402, "id": 15100442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15114885", "text": "On second glance, this would seem more wide spread.\n\n``` ruby\nclass Team < ActiveRecord::Base\n  has_many :home_games, class: 'Game'\n  has_many :away_games, class: 'Game'\nend\n\nclass Game < ActiveRecord::Base\n  has_one :home_team, class: 'Team'\n  has_one :away_team, class: 'Team'\nend\n\nGame.joins(:home_team).includes(:away_team).where('teams.name = ?', 'foo').references(:home_team)\n```\n\nThe select fails, again because it is joining on teams twice and my where clause does not know how to reference the correct join alias.\n", "created_at": "2013-03-19 13:48:18", "user": 26856, "id": 15114885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15248327", "text": "It would be awesome if you could turn this into a runnable test-case using [this gist](https://gist.github.com/neerajdotname/5187092)\n", "created_at": "2013-03-21 16:14:14", "user": 5402, "id": 15248327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15282281", "text": "@senny <a href=\"https://gist.github.com/tigris/5218844\">done.</a>\n\nFWIW, I couldn't get this to fail under rails 3.2.12 or rails 3.2.13 with my test gist.\n", "created_at": "2013-03-22 05:50:42", "user": 26856, "id": 15282281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15547320", "text": "@tigris this issue has been fixed in master.\n\nPlease try running your gist with\n\n```\ngem 'rails', github: 'rails/rails'\n```\n\nAnd yes it is an issue in `4.0.0.beta1` .\n", "created_at": "2013-03-27 19:19:34", "user": 6399, "id": 15547320}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15547403", "text": "Closing since it was fixed. If you still have the problem ping us and we will reopen\n", "created_at": "2013-03-27 19:21:16", "user": 47848, "id": 15547403}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed some typos found in activemodel\n", "labels": ["activemodel"], "number": 9771, "updated_at": "2016-02-22 14:25:38", "user": 567626, "closed_at": "2013-03-18 15:43:00", "id": 12130099, "title": "fix some typos found in activemodel", "url": "https://api.github.com/repos/rails/rails/issues/9771", "created_at": "2013-03-18 11:51:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15052418", "text": "looks good.\n\n/cc @carlosantoniodasilva \n", "created_at": "2013-03-18 12:39:22", "user": 5402, "id": 15052418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When a Time object has a set timezone (e.g. EST) and an exception is raised on that object, the timestamp in the exception message has UTC timezone instead of the set timezone.\n\n``` irb\nirb(main):018:0> time = Time.now.in_time_zone('EST')\n=> Mon, 18 Mar 2013 07:53:14 EST -05:00\nirb(main):019:0> time.foo\nNoMethodError: undefined method `foo' for 2013-03-18 07:53:14 UTC:Time\n    from /app/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.11/lib/active_support/time_with_zone.rb:332:in `method_missing'\n    from (irb):19\n    from /app/vendor/bundle/ruby/1.9.1/gems/railties-3.2.11/lib/rails/commands/console.rb:47:in `start'\n    from /app/vendor/bundle/ruby/1.9.1/gems/railties-3.2.11/lib/rails/commands/console.rb:8:in `start'\n    from /app/vendor/bundle/ruby/1.9.1/gems/railties-3.2.11/lib/rails/commands.rb:41:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n", "labels": ["activesupport"], "number": 9772, "updated_at": "2014-08-31 09:21:24", "user": 112484, "closed_at": "2013-03-18 16:49:47", "id": 12132230, "title": "Timestamps timezone in exception doesn't match", "url": "https://api.github.com/repos/rails/rails/issues/9772", "created_at": "2013-03-18 13:00:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15053307", "text": "Here is `time` in UTC\n\n``` irb\nirb(main):021:0> time.in_time_zone('UTC')\n=> Mon, 18 Mar 2013 12:53:14 UTC +00:00\n```\n", "created_at": "2013-03-18 13:01:39", "user": 112484, "id": 15053307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15057375", "text": "confirmed! This is because `TimeWithZone` has a `method_missing` hook that delegates to the wrapped time. We could:\n1. only delegate methods that `time.responds_to?()`.\n2. rescue `NoMethodError` and raise it from the context of `TimeWithZone`\n\n@pixeltrix I'd implement 1.) but I think there are API's that rely on method missing. Let me know what you think and I submit a PR.\n", "created_at": "2013-03-18 14:25:42", "user": 5402, "id": 15057375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15059430", "text": "@senny I think option 2 is the safest - can you think of any other error messages that might need re-raising (i.e. include self.inspect in their message)?\n", "created_at": "2013-03-18 15:00:04", "user": 6321, "id": 15059430}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15059856", "text": "@pixeltrix I'm on it (implementing 2.). I don't think other errors need re-raising as this problem only occurs in combination with `method_missing` which eventually raises `NoMethodError`. If other errors occur it should not switch context.\n", "created_at": "2013-03-18 15:07:09", "user": 5402, "id": 15059856}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Our contribution guide has a section on how to create issues. The CONTRIBUTING.md proxy currently only states to read the guide if you want to write code.\n\nI created a link to the reporting section for people that only want to report a bug. I also formatted the different points in a list.\n\nYou can view the final file here: https://github.com/senny/rails/blob/09fced4ec5db585167143efef746f616c6422fed/CONTRIBUTING.md\n", "labels": [], "number": 9773, "updated_at": "2014-06-14 18:14:04", "user": 5402, "closed_at": "2013-03-18 14:21:09", "id": 12135154, "title": "refer to the contributing guide on how to create issues.", "url": "https://api.github.com/repos/rails/rails/issues/9773", "created_at": "2013-03-18 14:17:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9772.\n\n`TimeWithZone` delegates everything to the wrapped `Time` object\nusing `method_missing`. The result is that `NoMethodError` error\nwill be raised in the context of `Time` which leads to a misleading\ndebug output.\n", "labels": ["activesupport"], "number": 9774, "updated_at": "2014-06-26 15:19:37", "user": 5402, "closed_at": "2013-03-18 16:49:45", "id": 12138431, "title": "`TimeWithZone` raises `NoMethodError` in proper context.", "url": "https://api.github.com/repos/rails/rails/issues/9774", "created_at": "2013-03-18 15:26:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15060998", "text": "@pixeltrix what do you think?\n", "created_at": "2013-03-18 15:28:21", "user": 5402, "id": 15060998}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In order to make it easier to verify Active Record issues\nbug authors are encouraged to provide gist based on provided\ntemplates\n", "labels": ["docs"], "number": 9775, "updated_at": "2014-06-26 19:56:05", "user": 6399, "closed_at": "2013-04-01 07:46:38", "id": 12138930, "title": "gist for Active Record issues [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9775", "created_at": "2013-03-18 15:37:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15061665", "text": "@fxn Please take a look. \n", "created_at": "2013-03-18 15:37:28", "user": 6399, "id": 15061665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063502", "text": "This is a great idea! I spent many hours trying to reproduce AR issues, and many times it resulted in an incomplete bug report. This would safe a ton of time and help to check what versions are affected by the bug.\n\n/cc @carlosantoniodasilva @rafaelfranca @steveklabnik \n", "created_at": "2013-03-18 16:03:56", "user": 5402, "id": 15063502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15063737", "text": "Looks good.\n\nIf the templates are too big for being inlined (they probably are) I believe we should store them in the repo and link to GitHub.\n", "created_at": "2013-03-18 16:07:59", "user": 3387, "id": 15063737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15064789", "text": ":+1: for what @fxn said.\n", "created_at": "2013-03-18 16:25:45", "user": 47848, "id": 15064789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15070361", "text": "You are amazing. :+1:\n", "created_at": "2013-03-18 17:54:00", "user": 27786, "id": 15070361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071658", "text": "@vipulnsward @stevenharman thanks and fixed .\n", "created_at": "2013-03-18 18:15:27", "user": 6399, "id": 15071658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15072189", "text": "@fxn Can you take it from here? I think it's better to hand over it to you rather than asking questions like where to store the templates etc. Thank you.\n", "created_at": "2013-03-18 18:23:46", "user": 6399, "id": 15072189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15072292", "text": "@neerajdotname sure, thanks!\n", "created_at": "2013-03-18 18:25:29", "user": 3387, "id": 15072292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15706893", "text": "I gave it another iteration, the gist for reports against the master branch is also self-contained.\n\nThanks for this proposal, it is a great idea.\n", "created_at": "2013-04-01 07:46:35", "user": 3387, "id": 15706893}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Knowing when a migration was executed is often really helpful when you\nare trying to track down a problem in production or any other\nenvironment for that matter.\n\nI found myself in that position lots of times, so I thought it's worth\nhaving this inside rails\n", "labels": ["activerecord"], "number": 9776, "updated_at": "2014-07-04 15:46:11", "user": 79502, "closed_at": "2013-06-04 07:40:32", "id": 12143427, "title": "Adding migrated_at timestamp to schema migrations", "url": "https://api.github.com/repos/rails/rails/issues/9776", "created_at": "2013-03-18 17:08:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15067898", "text": "Thinking about it now, there will be a problem with upgrade, when people will upgrade to the latest rails with the previous version of the schema migrations table.\n\nI will try and figure out (and implement) a solution for this case as well, if anyone has any input, would love to hear it.\n", "created_at": "2013-03-18 17:14:34", "user": 79502, "id": 15067898}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15068132", "text": "It's not much of a problem, just allow NULL for this field. And anyone who comes from older versions will know that if it's NULL it's before the upgrade...\n", "created_at": "2013-03-18 17:18:27", "user": 71468, "id": 15068132}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15068279", "text": "@arikfr, the problem is not the null thing (that's easily solvable), the problem is the insert statement, when you don't have the column.\n", "created_at": "2013-03-18 17:20:56", "user": 79502, "id": 15068279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15068629", "text": "Oh.\n\nI guess that you can query the table structure to check which version of the insert statement to use and give the users a way to generate the needed migration (to update schema_migrations table).\n", "created_at": "2013-03-18 17:26:27", "user": 71468, "id": 15068629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18892869", "text": "@KensoDev I believe NOW() is database specific, it might be a problem when migrating anything other than MySql.\n\nSkipping the cross vendors headache, It might just be better to log timestamp + timezone from the client end.\n", "created_at": "2013-06-04 07:18:01", "user": 1297254, "id": 18892869}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We have a query that looks like:\n\n`Photo.hottest.limit(10).pluck(\"photos.id\")`\n\nHottest is a named scope, defined as:\n\n```\nscope :hottest, lambda { |hotness_period = 24|\n  epoch = \"2012-04-26 23:36:54 UTC\"\n\n  select(\"photos.*, (LOG(10, count(user_likes.id)) + (EXTRACT(EPOCH FROM photos.created_at - to_timestamp('#{epoch}', 'YYYY-MM-DD HH24:MI:SS'))/#{(hotness_period).hours.to_i})) AS hotness\").\n    joins(\"INNER JOIN user_likes ON user_likes.liked_id = photos.id\").\n    where(:user_likes => {:liked_type => 'Photo'}).\n    group(:liked_id, '\"photos\".\"id\"').\n    order(:hotness).\n    reverse_order\n}\n```\n\nIn 3.2.12, the generated query looks like\n\n```\nSELECT photos.*, (LOG(10, count(user_likes.id)) + (EXTRACT(EPOCH FROM photos.created_at - to_timestamp('2012-04-26 23:36:54 UTC', 'YYYY-MM-DD HH24:MI:SS'))/86400)) AS hotness, photos.id FROM \"photos\" INNER JOIN user_likes ON user_likes.liked_id = photos.id WHERE \"user_likes\".\"liked_type\" = 'Photo' GROUP BY liked_id, \"photos\".\"id\" ORDER BY hotness DESC LIMIT 10\n```\n\nwhile in 3.2.13 it looks like\n\n```\nSELECT photos.id FROM \"photos\" INNER JOIN user_likes ON user_likes.liked_id = photos.id WHERE \"user_likes\".\"liked_type\" = 'Photo' GROUP BY liked_id, \"photos\".\"id\" ORDER BY hotness DESC LIMIT 10\n```\n\nThis only happens when using `pluck`. Without it, the query is correct in 3.2.13.\n", "labels": ["activerecord", "regression"], "number": 9777, "updated_at": "2014-01-22 00:34:32", "user": 41678, "closed_at": "2013-05-09 02:34:49", "id": 12145760, "title": "3.2.13 regression - pluck is ignoring named scopes", "url": "https://api.github.com/repos/rails/rails/issues/9777", "created_at": "2013-03-18 18:00:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071080", "text": "I don't see why this is a regression. The query is indeed different but is not the result the same?\n", "created_at": "2013-03-18 18:05:11", "user": 47848, "id": 15071080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071124", "text": "No. 3.2.13 throws an exception:\n\n```\nActiveRecord::StatementInvalid: PG::Error: ERROR:  column \"hotness\" does not exist\nLINE 1: ...'Photo' GROUP BY liked_id, \"photos\".\"id\" ORDER BY hotness DE...\n                                                         ^\n: SELECT  photos.id FROM \"photos\" INNER JOIN user_likes ON user_likes.liked_id = photos.id WHERE \"user_likes\".\"liked_type\" = 'Photo' GROUP BY liked_id, \"photos\".\"id\" ORDER BY hotness DESC LIMIT 10\nfrom /Users/mpd/.rvm/gems/ruby-1.9.3-p327/gems/activerecord-3.2.13/lib/active_record/connection_adapters/postgresql_adapter.rb:1161:in `async_exec'\n```\n", "created_at": "2013-03-18 18:05:55", "user": 41678, "id": 15071124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071443", "text": "It is ignoring the select clause because of #7551. See #8209 for more information.\n\nIt is indeed a change on behaviour and I think we should revert but it is too late, so you will have to wait 3.2.14.\n\nNext time, pleeeeeeeeeeeeeeeeeeeaaaaaaaasssssssseeeeeeeee, :pray:  try the Release Candidates.\n", "created_at": "2013-03-18 18:11:39", "user": 47848, "id": 15071443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071600", "text": "Is there a low-traffic mailing list where the RCs are announced?\n", "created_at": "2013-03-18 18:14:23", "user": 41678, "id": 15071600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071660", "text": "We announced they in our blog.\n", "created_at": "2013-03-18 18:15:27", "user": 47848, "id": 15071660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071787", "text": "I don't really have the time to be checking the blog that often. If there's a mailing list where they are announced, I'm happy to test the RCs when they happen.\n", "created_at": "2013-03-18 18:17:20", "user": 41678, "id": 15071787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15071874", "text": "It is always announced in the Rails core mailing list https://groups.google.com/d/msg/rubyonrails-core/NpP5OLq8iZs/xInfK2qqCe0J\n", "created_at": "2013-03-18 18:18:55", "user": 47848, "id": 15071874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15083088", "text": "As an aside, in 3.2.12 the pluck did not enlighten your query at all, your select query was still\n\n```\n   select photos.*, .... as hotness, photos.id ...\n```\n\nso not sure why you are actually using `pluck` at all. Now `pluck` is behaving more correctly: it only selects `photos.id`, which is (arguably) the requested behaviour. Granted, it does break your where clause.\n\nNote also the discussion in #9509.\n", "created_at": "2013-03-18 21:28:55", "user": 34460, "id": 15083088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15083672", "text": "True, but it still returned just a list of IDs, which is what I wanted in this case. (Other cases we do want the actual objects, which is still working as expected.)\n", "created_at": "2013-03-18 21:38:55", "user": 41678, "id": 15083672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112451", "text": "This bit us as well upon upgrade last night.\n\n[Geocoder](https://github.com/alexreisner/geocoder) adds some scopes such as `#nearbys`. Those scopes use a custom `select` to add a `distance` column. After upgrading to 3.2.13, any place where we used these scopes in conjunction with a `#pluck` was broken, because the custom `select` that adds the `distance` column was no longer used. The work around, of course, is to use `#map`.\n\nI think the decision in #9509 is the right one: This behavior changed and therefore it needs to be handled differently, perhaps with a warning. That might make it more apparent to folks when their usage of `#pluck` would give little benefit anyway.\n", "created_at": "2013-03-19 12:55:42", "user": 925, "id": 15112451}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Try fixing some of AR typos\n", "labels": [], "number": 9778, "updated_at": "2014-06-26 15:55:35", "user": 567626, "closed_at": "2013-03-18 18:40:01", "id": 12147524, "title": "fix typos in AR. lots of them.", "url": "https://api.github.com/repos/rails/rails/issues/9778", "created_at": "2013-03-18 18:37:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15073290", "text": "Thank you! :heart:\n\nIn the future, feel free to push the comment changes to lifo/docrails, which is a fast-track for documentation changes. Anything that touches code, even typo fixes, should go through a pull request, though, so :+1: \n", "created_at": "2013-03-18 18:40:44", "user": 27786, "id": 15073290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15073558", "text": "Thanks @steveklabnik I do push documentation changes to lifo/docrails, this had changes to code, so pushed here.\n", "created_at": "2013-03-18 18:44:52", "user": 567626, "id": 15073558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15073966", "text": "Absolutely, this was 100% right, I just wanted to mention in case you didn't know. :D\n", "created_at": "2013-03-18 18:51:03", "user": 27786, "id": 15073966}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\n$ ruby --version && gem --version && bundle --version\nruby 1.9.3p392 (2013-02-22) [i386-mingw32]\n2.0.3\nBundler version 1.3.4\n```\n\n``` ruby\n$ gem update rails -v 3.2.13\n[...]\n[...]\n\nParsing documentation for activesupport-3.2.13\nunable to convert \"\\x80\" from ASCII-8BIT to UTF-8 for lib/active_support/values/unicode_tables.dat, skipping\n```\n", "labels": ["docs"], "number": 9779, "updated_at": "2013-03-20 11:15:56", "user": 346803, "closed_at": "2013-03-20 11:15:56", "id": 12147659, "title": "activesupport-3.2.13  minor doc generation issue on Windows", "url": "https://api.github.com/repos/rails/rails/issues/9779", "created_at": "2013-03-18 18:40:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15073494", "text": "I want to say that this Isn't Our Problem, but I don't remember, exactly. @fxn? \n", "created_at": "2013-03-18 18:44:02", "user": 27786, "id": 15073494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15074674", "text": "I am not sure either. I wrestled already with UTF-8 and code page setup for my console (actually the entire system). My codepage still sits at 850.  When I change to 65001 - I stumble into other (not related) problems.  \n\nThis is one of the many issues for the still not totally extinct Windows users.  Very simular when installing certain gems like e.g.  `unable to convert \"\\x90\" from ASCII-8BIT to UTF-8 for lib/1.8/redcloth_scan.so, skipping`\n", "created_at": "2013-03-18 19:01:45", "user": 346803, "id": 15074674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15076394", "text": "At first sight I'd bet the problem comes from https://github.com/rails/rails/blob/master/activesupport/activesupport.gemspec#L18, we are telling RDoc that anything below _lib_ goes, while that should be all _.rb_ files.\n", "created_at": "2013-03-18 19:30:35", "user": 3387, "id": 15076394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15081040", "text": "That was too quick, we rather need to configure rdoc.rdoc_files I believe. The thing is RDoc should not be parsing a .dat file.\n", "created_at": "2013-03-18 20:52:27", "user": 3387, "id": 15081040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15082814", "text": ":+1:  ... nor binaries -  like  *.so files e.g.:\n\n``` ruby\nParsing documentation for nokogiri-1.5.7-x86-mingw32\nunable to convert \"\\x90\" from ASCII-8BIT to UTF-8 for lib/nokogiri/1.8/nokogiri.so, skipping\nunable to convert \"\\x90\" from ASCII-8BIT to UTF-8 for lib/nokogiri/1.9/nokogiri.so, skipping\nunable to convert \"\\x90\" from ASCII-8BIT to UTF-8 for lib/nokogiri/2.0/nokogiri.so, skipping\nInstalling ri documentation for nokogiri-1.5.7-x86-mingw32\n```\n", "created_at": "2013-03-18 21:23:41", "user": 346803, "id": 15082814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15085259", "text": "@drbrain do you have any advice here? I was looking into a way to specify files for rdoc in the gemspecs, but according to the docs there seems to be no setter for them.\n", "created_at": "2013-03-18 22:08:44", "user": 3387, "id": 15085259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15092014", "text": "It is an rdoc bug, I should be able to release a fix this week\n", "created_at": "2013-03-19 01:09:03", "user": 9831, "id": 15092014}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "we just upgraded to 3.2.13 from 3.2.12. actionmailer now appears to require mail ~> 2.5.3 which is causing us to receive `OpenSSL::SSL::SSLError: SSL_connect returned=1 errno=0 state=unknown state: unknown protocol` even though we explictly set `openssl_verify_mode` to `none`.\n\nhelp!\n", "labels": ["actionmailer"], "number": 9780, "updated_at": "2014-09-26 18:38:37", "user": 27679, "closed_at": "2013-05-09 02:36:57", "id": 12148437, "title": "actionmailer 3.2.13 requires \"mail ~> 2.5.3\" breaking compatibility", "url": "https://api.github.com/repos/rails/rails/issues/9780", "created_at": "2013-03-18 18:58:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15074626", "text": "+1\n\nOn Mon, Mar 18, 2013 at 1:58 PM, Shane Emmons notifications@github.comwrote:\n\n> we just upgraded to 3.2.13 from 3.2.12. actionmailer now appears to\n> require mail ~> 2.5.3 which is causing us to receive OpenSSL::SSL::SSLError:\n> SSL_connect returned=1 errno=0 state=unknown state: unknown protocol even\n> though we explictly set openssl_verify_mode to none.\n> \n> help!\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9780\n> .\n", "created_at": "2013-03-18 19:01:06", "user": 2576754, "id": 15074626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15074765", "text": "@jeremy thoughts?\n", "created_at": "2013-03-18 19:03:16", "user": 47848, "id": 15074765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15074897", "text": "Guys, please, help us and try the release candidates, after the release we can't rush to fix your issues.\n", "created_at": "2013-03-18 19:05:20", "user": 47848, "id": 15074897}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15099109", "text": "I just got bitten by this, started investigating\n", "created_at": "2013-03-19 06:13:33", "user": 12844, "id": 15099109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15099955", "text": "Hmm looks like this is breaking the backward compatibility of `ActionMailer::Base.mail` method too.\n\nIf we dont pass any recipient (To, Cc or Bcc) like belows code, we'll now get an error in action_mail 3.2.13\n\n``` ruby\nmail(from: \"noreply <noreply@foo.com>\",\n  to: nil, subject: \"hello, this is a mail\")\n```\n\n```\nArgumentError:\n  At least one recipient (To, Cc or Bcc) is required to send a message\n```\n", "created_at": "2013-03-19 06:54:53", "user": 1095842, "id": 15099955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15099957", "text": ":+1:\n", "created_at": "2013-03-19 06:55:05", "user": 17657, "id": 15099957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15104730", "text": "@tkhr I think previously it was silently failing if there are no TO in mail. But now it's giving an error. \n", "created_at": "2013-03-19 09:31:59", "user": 3948, "id": 15104730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15105754", "text": "@arunagw \n\n> @tkhr I think previously it was silently failing if there are no TO in mail. But now it's giving an error.\n\nYea exactly, doesn't that mean the backwards compatibility is broken?\nNow we'll have to check all of the recipient variables before executing the `mail` method right?\n\nlike\n\n``` ruby\nmail(from: \"noreply <noreply@foo.com>\",\n  to: @user.email, subject: \"hello, this is a mail\")\n```\n\nto\n\n``` ruby\nunless @user.email.blank?\n  mail(from: \"noreply <noreply@foo.com>\",\n    to: @user.email, subject: \"hello, this is a mail\")\nend\n```\n", "created_at": "2013-03-19 09:57:15", "user": 1095842, "id": 15105754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15114230", "text": "Regarding the SSL issue: Maybe caused by this?\nhttps://github.com/mikel/mail/commit/9890b197c51f1d340fa7275aa4bc17103746657b\n", "created_at": "2013-03-19 13:35:45", "user": 3557, "id": 15114230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15115408", "text": "@ledermann: looks like a leading candidate\n", "created_at": "2013-03-19 13:58:40", "user": 27679, "id": 15115408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15138841", "text": "@tkhr We're seeing this as well (although we found it was a bad test that was not supplying To:)\n\n@rafaelfranca Thanks for the tip. We'll try to test release candidates against our app in the future.\n", "created_at": "2013-03-19 19:52:02", "user": 634902, "id": 15138841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180800", "text": "I've worked around this by manually setting `mail = 2.4.4` in the Gemfile.lock. It's not pretty, but it works for now.\n", "created_at": "2013-03-20 15:01:17", "user": 27679, "id": 15180800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15186904", "text": "I ran into this problem upgrading from rails 3.2.11 to 3.2.13.  Oddly enough my work around was to remove the \"openssl_verify_mode => 'none'\" from my configuration.  After doing this the error went away and the emails deliver.  One smtp server is using a self-signed certificate and the other a wildcard certificate...once upon a time this parameter was required in these scenarios.\n", "created_at": "2013-03-20 16:32:42", "user": 120332, "id": 15186904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15461511", "text": "The \"openssl_verify_mode => 'none'\" is the problem for me too. I will try to remove it, and deploy again. \n", "created_at": "2013-03-26 14:32:44", "user": 68186, "id": 15461511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15467936", "text": "Having the same error for 3.2.13 but not for 3.2.12\n", "created_at": "2013-03-26 16:10:05", "user": 229709, "id": 15467936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15472350", "text": "+1\n\nv3.2.13 causes exceptions for actions that deliver email. Integration tests that mock the SMTP server didn't catch it, so it's in our production now.\n\n# Quick workaround:\n\nIf you're in a hurry for a workaround while a better solution comes out, change the Rails line in your Gemfile to:\n\n`gem 'rails', \"= 3.2.12\"`\n\nfollowed by\n\n`bundle update`\n\nThis will update the version of the ActionMailer gem dependency, which updates the Mailer gem dependency, which will restore the universe.\n", "created_at": "2013-03-26 17:18:16", "user": 1071917, "id": 15472350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15511147", "text": "+1\n\nI tried to remove  \"openssl_verify_mode => 'none' \" and it worked for me.\n", "created_at": "2013-03-27 08:52:49", "user": 38242, "id": 15511147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15891008", "text": ":+1:\n\nI tried removing `openssl_verify_mode` but then had a problem because my certificate hostname doesn't match. I could fix that, but as it's just localhost to localhost, instead I set `enable_starttls_auto` to false.\n", "created_at": "2013-04-04 10:58:24", "user": 126989, "id": 15891008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15981993", "text": "I guess, I'm doing something wrong. But, I have both\n\n``` ruby\n    enable_starttls_auto: false,\n    openssl_verify_mode: 'none'\n```\n\nbut I still get `hostname does not match the server certificate`.\n\nThe stack trace says\n\n```\n/usr/local/lib/ruby/1.9.1/openssl/ssl-internal.rb:121:in `post_connection_check'\n/usr/local/lib/ruby/1.9.1/net/smtp.rb:585:in `tlsconnect'\n```\n\nBut shouldn't the verification be disabled by my configuration?\n\nEDIT: Sorry, my mistake. For some reason, the configuration has not been applied to the mail message I wanted to deliver. Reading the settings form `Rails.application.config.action_mailer.smtp_settings` and passing them to the new message object solved my problem.\n", "created_at": "2013-04-05 21:32:34", "user": 1679688, "id": 15981993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17057138", "text": "Setting `enable_starttls_auto: false` worked for me as well.\n", "created_at": "2013-04-26 06:11:46", "user": 2400137, "id": 17057138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17646381", "text": "Seems we already have a workaround. We can't revert the version requirement since old mail versions has security issues.\n\nSo I'm closing this issue. I know it was a behavior change in a stable release but we can't revert. Sorry about that.\n", "created_at": "2013-05-09 02:36:57", "user": 47848, "id": 17646381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18119192", "text": "Setting [code]enable_starttls_auto: false[/code] didnt work for me, I am running rails 3.2.11.\n", "created_at": "2013-05-19 15:16:51", "user": 2163674, "id": 18119192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18518221", "text": "It didn't work for me either. \n", "created_at": "2013-05-27 23:38:59", "user": 1326771, "id": 18518221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18779824", "text": "SOLVED: If you bundle update, Rails 3.2.13 now picks up mail 2.5.4. I previously experienced this problem with mail 2.5.3 but no longer experience it with 2.5.4. Note that I have not changed any config values (my enable_starttls_auto attribute is still set to true)\n\nCan anybody concur?\n", "created_at": "2013-06-01 00:03:27", "user": 1071917, "id": 18779824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20555647", "text": "@aminariana Yes, upgrading to mail 2.5.4 fixed the issue for me without changing any config settings.\n", "created_at": "2013-07-06 15:07:23", "user": 860698, "id": 20555647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28119110", "text": "@aminariana Yes mail 2.5.4 fixed the issue - using both :enable_starttls_auto => true and :openssl_verify_mode  => 'none'\n", "created_at": "2013-11-09 05:09:52", "user": 54191, "id": 28119110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/38799302", "text": "Hello, I need configure a live/hotmail account but return `OpenSSL::SSL::SSLError` error. I use this configurations from [this link](http://windows.microsoft.com/en-us/windows/outlook/send-receive-from-app).\n\n```\nsmtp_settings:\n  address:              smtp-mail.outlook.com\n  port:                 587\n  domain:               XXXX.XXXX\n  user_name:            XXX@XXXX.XXX\n  password:             XXXXXX\n  authentication:       plain\n  enable_starttls_auto: true\n  openssl_verify_mode:  none\n```\n\nI use Rails 3.2.17 and actionmailer 3.2.12. I try enable_starttls_auto with false but unsuccessfully. Someone configured this type of account? \n\nThanks.\n", "created_at": "2014-03-27 13:02:00", "user": 623173, "id": 38799302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/38833211", "text": "@rodolfospalenza : Rails 3.2.x is not supported anymore (only for security fixes). If you experience this issue with Rails 4.0+, feel free to report back so we can reopen and fix the problem. Thanks! :-)\n", "created_at": "2014-03-27 17:17:15", "user": 354185, "id": 38833211}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "So Rails 4 is now doing this:\n\nhttps://github.com/rails/rails/tree/master/railties/lib/rails/generators/rails/app/templates/bin\n\nI disagree with it but I don't think getting it removed will happen at this point. However, there needs to be a working binstub extracted from the gem or bundler needs to have an option to not overwrite existing binstubs.\n\nGenerating individual binstubs (as recommended https://github.com/rails/rails/commit/009873aec89a4b843b41accf616b42b7a9917ba8) is not reasonable. The Rails dependency eco-system is gigantic now and having to type individual gem names for each binstub running each command is ridiculous.\n", "labels": [], "number": 9781, "updated_at": "2013-06-18 02:01:39", "user": 18524, "closed_at": "2013-03-18 19:30:35", "id": 12149620, "title": "Rails 4 overwrites bins", "url": "https://api.github.com/repos/rails/rails/issues/9781", "created_at": "2013-03-18 19:25:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15076393", "text": "Please use `bundle binstubs` rather than `--binstubs` when working with Rails 4. As long as you do that, there's no issue that I'm aware of. If there is, please file an issue against either project by default with the specific details of that bug.\n\nAs far as the greater 'should we do this' question, that discussion is not for Issues, which are only for bugs, it's for rails-core. Please post there if you want to discuss the feature in general.\n", "created_at": "2013-03-18 19:30:35", "user": 27786, "id": 15076393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15076550", "text": "In practice, it is reasonable. You'll likely find that your working set of executables is fairly small. (You needn't add an executable for every gem.)\n\nBundler had changed to not overwrite existing executables, but that was deemed a semver violation. It's free to change in its next major version instead.\n\nThis does put us in a tough spot, unfortunately, with bundler continuing to treat `bin/` as ephemeral while we make a pitch for first class version-controlled executables.\n\n/cc @hone @indirect\n", "created_at": "2013-03-18 19:33:09", "user": 199, "id": 15076550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15076960", "text": "@jeremy there could be an option for the command line to not overwrite that would still respect semver for a minor version bump. Something like: `bundle install --binstubs --keep`\n", "created_at": "2013-03-18 19:41:30", "user": 18524, "id": 15076960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15077702", "text": ":+1: @bcardarella. That's worth considering for new invocations of `bundle install`.\n\nThe real tough spot, though, is encountered by folks who ran `bundle install --binstubs` sometime in the past, which stores the `--binstubs` option in their `.bundle/config`. So every subsequent `bundle` overwrites `bin/*` and they won't know why. It just seems busted.\n", "created_at": "2013-03-18 19:55:10", "user": 199, "id": 15077702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15087475", "text": "Jeremy, one possibility is to print a warning if the overwritten binstub has changed… that might still end up spammy, though.\n\nOn Mar 18, 2013, at 12:56 PM, Jeremy Kemper notifications@github.com wrote:\n\n> @bcardarella. That's worth considering for new invocations of bundle install.\n> \n> The real tough spot, though, is encountered by folks who ran bundle install --binstubs sometime in the past, which stores the --binstubs option in their .bundle/config. So every subsequent bundle overwrites bin/\\* and they won't know why. It just seems busted.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-18 22:56:17", "user": 78, "id": 15087475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15087799", "text": "@indirect why not prompt the user if the bin has changed allow the user to see a diff, keep the changes, or keep the original? Similar to what Rails does when generating and there are conflicts?\n", "created_at": "2013-03-18 23:04:09", "user": 18524, "id": 15087799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15093874", "text": "@bcardarella that's a great idea. interested in implementing it? :)\n", "created_at": "2013-03-19 02:16:58", "user": 78, "id": 15093874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15094052", "text": "@indirect sure, I'll give it a shot in the next few days :)\n", "created_at": "2013-03-19 02:22:56", "user": 18524, "id": 15094052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15095847", "text": "Note that prompting technically changes the API, too, since it waits for user feedback. Could carefully check for a tty to see whether it's an interactive shell, but we're getting onto thin ice!\n", "created_at": "2013-03-19 03:37:35", "user": 199, "id": 15095847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15095939", "text": "@jeremy according to semver changes to the public API are allowed for a minor version change \"if new, backwards compatible functionality is introduced to the public API.\"\n", "created_at": "2013-03-19 03:41:51", "user": 18524, "id": 15095939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15096257", "text": "definitely check for a TTY. we do that one other place I think, and I need to add it for bundle show/open.\n\nOn Mar 18, 2013, at 8:42 PM, Brian Cardarella notifications@github.com wrote:\n\n> @jeremy according to semver changes to the public API \"if new, backwards compatible functionality is introduced to the public API.\"\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-19 03:55:54", "user": 78, "id": 15096257}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "1. Change from each to each_value since we did not use key in habtm\n2. Drop assignment of value to sum in test\n", "labels": [], "number": 9782, "updated_at": "2016-02-22 14:25:37", "user": 567626, "closed_at": "2013-03-18 20:04:39", "id": 12150643, "title": "Change from each to each_value;drop assignment in habtm", "url": "https://api.github.com/repos/rails/rails/issues/9782", "created_at": "2013-03-18 19:49:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15077914", "text": "Seems legit.\n", "created_at": "2013-03-18 19:59:05", "user": 27786, "id": 15077914}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is probably related to #9478.\n\nOn Ruby 1.9.3-p385, I have a number of tests that are failing with the following error:\n\n```\nNameError:\n   uninitialized constant Mocha::Mockery\n```\n\nI have verified these same tests pass on 3.2.12. Please let me know if I need to provide more information.\n", "labels": ["regression"], "number": 9783, "updated_at": "2013-06-24 04:48:15", "user": 120350, "closed_at": "2013-03-22 16:24:38", "id": 12153358, "title": "Mocha NameError on 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9783", "created_at": "2013-03-18 20:42:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15080716", "text": "Which version of mocha are you using? May you try to use latest one?\n", "created_at": "2013-03-18 20:46:52", "user": 26328, "id": 15080716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15081396", "text": ":+1: I'm also seeing lots of Mocha dependency issues with 3.2.13 for two projects. In both cases, mocha is locked to 0.10.x for various reasons related to other dependencies. I'm currently investigating what it will take to get those other dependencies upgraded (one of them has a hard dependency on mocha `~> 0.10.0`). \n\nMeanwhile, for a release that includes a series of fixes for security vulnerabilities, it seems that this patch-level release overstepped the bounds a bit.  I'll post again when I learn more.\n", "created_at": "2013-03-18 20:58:40", "user": 740, "id": 15081396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15081449", "text": "We're not including Mocha explicitly - it's a dependency for shoulda-matchers. Both were out of date, but updating to the latest version of shoulda-matchers (including a bump to Mocha 0.12.7) did not resolve this issue.\n", "created_at": "2013-03-18 20:59:30", "user": 120350, "id": 15081449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15081827", "text": "@rmm5t This patch level includes several other bug fixes that were sitting in 3-2-stable branch for a while. That's why we had two release candidates and asked people to test it before a final release, trying to ensure issues like this one wouldn't arise. Anyway, if you can try testing with a newer version of mocha, that'd be great.\n\n@todd can you please try explicitly requiring mocha 0.13.x to see if that fixes your issue?\n", "created_at": "2013-03-18 21:06:04", "user": 26328, "id": 15081827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15082439", "text": "Updating to mocha 0.13.3 fixes this issue.\n", "created_at": "2013-03-18 21:16:42", "user": 120350, "id": 15082439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15082715", "text": "@carlosantoniodasilva I understand. I'm just saying that I'd prefer to see security vulnerabilities fixed in their own patch-level releases. All the other bug fixes could have come minutes after in a 3.2.14 release, as long as 3.2.13 (with security fixes) had a better guarantee of backwards compatibility. That's all mostly moot at this point though.\n\nI'm working on trying to test with a newer version of mocha, but currently stuck in dependency hell. shoulda-matchers 1.5.0 (and master branch) is tied to bourne 1.2.x which is tied to mocha 0.12.7. Just working through what it takes to get everything up to snuff. \n\n@todd It's good to know that mocha 0.13.3 is working. There's light.\n", "created_at": "2013-03-18 21:21:58", "user": 740, "id": 15082715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15083153", "text": "Confirmed that mocha 0.13.3 fixed the issue for me too. For anyone coming to this issue because of shoulda or shoulda-matchers, here's what you'll need in your Gemfile to make things work (until a new version of shoulda-matchers is released).\n\n``` ruby\ngem \"bourne\", \">= 1.4.0\"\ngem \"shoulda-matchers\", github: \"thoughtbot/shoulda-matchers\", branch: \"dc-bourne-dependency\"\n```\n\nIf using test-unit, be sure to `bundle update shoulda` to v3.4.0 too.\n", "created_at": "2013-03-18 21:30:16", "user": 740, "id": 15083153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15083682", "text": "@rmm5t yes, I agree with you, and that's how it's been so far with latest sec fixes. Since the ones from today were not considered so severe, it was decided that 2 release candidates would be enough to check whether we had regressions or not, and release 3.2.13 with bug fixes + sec fixes. Unfortunately that didn't work very well as expected, we've had a few regressions.\n\nThanks guys for confirming that mocha 0.13 works fine. Lets see if we can do something to get other versions working.\n", "created_at": "2013-03-18 21:39:08", "user": 26328, "id": 15083682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15134450", "text": "Just a heads up to anyone coming to this issue - thoughtbot/shoulda-matchers#256 should resolve this issue. The code posted by @rmm5t above will no longer work - simply `bundle update shoulda-matchers` to get the fixed version.\n\nEDIT: However, this appears to introduce an issue with Capybara that prevents rspec from running (see: thoughtbot/shoulda-matchers#259).\n", "created_at": "2013-03-19 18:37:10", "user": 120350, "id": 15134450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15135718", "text": ":+1: to what @todd said.\n", "created_at": "2013-03-19 18:57:32", "user": 740, "id": 15135718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15153366", "text": "`shoulda-matchers` 1.5.2 contains a fix for this issue. Please `bundle update shoulda-matchers`.\n\nI think this issue can probably be closed.\n", "created_at": "2013-03-20 01:07:35", "user": 120350, "id": 15153366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15216936", "text": "+1 for `shoulda-matchers` 1.5.2\nCan close now\n", "created_at": "2013-03-21 03:00:37", "user": 1018543, "id": 15216936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15306499", "text": "Closing...\n", "created_at": "2013-03-22 16:24:38", "user": 5402, "id": 15306499}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Change `blank?` to `empty?` on obvious strings in `Column` to drop the extra method call\n", "labels": [], "number": 9784, "updated_at": "2014-06-26 15:55:42", "user": 567626, "closed_at": "2013-03-18 21:44:30", "id": 12155695, "title": "change from blank? to empty? on obvious string values  to save extra calls", "url": "https://api.github.com/repos/rails/rails/issues/9784", "created_at": "2013-03-18 21:36:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15084077", "text": "Actually, they're not completely interchangeable, `blank?` will also check for strings with spaces =(. I'm gonna revert, sorry.\n", "created_at": "2013-03-18 21:46:22", "user": 26328, "id": 15084077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15084117", "text": "This is what I'm was about to say\n", "created_at": "2013-03-18 21:47:06", "user": 47848, "id": 15084117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15084823", "text": ":+1:  Thanks.\n", "created_at": "2013-03-18 22:00:21", "user": 567626, "id": 15084823}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Set \"March 18, 2013\" as the release date for 3.2.13\n", "labels": [], "number": 9785, "updated_at": "2014-06-13 23:27:04", "user": 10076, "closed_at": "2013-03-18 21:57:14", "id": 12156423, "title": "Add release dates to documentation [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9785", "created_at": "2013-03-18 21:54:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A has_many :through association must manage the counter cache of its\njoin model in case the join model is simply deleted (without callbacks)\nrather than destroyed when the association is cleared.\n\nThe problem is that if :dependent => :destroy is specified on the\nhas_many :through, the join model will be destroyed (triggering\ncallbacks). This means that the join model will decrement the counter\ncache in addition to the has_many :through association. As a result,\nthe counter cache is decremented twice.\n\nThe has_many :through association should only try to manage the counter\ncache if the join model is not destroyed.\n", "labels": ["activerecord"], "number": 9786, "updated_at": "2014-07-04 15:46:08", "user": 34264, "closed_at": "2013-12-05 21:45:24", "id": 12156581, "title": "Ensure that has_many :through counter cache decrements aren't doubled up", "url": "https://api.github.com/repos/rails/rails/issues/9786", "created_at": "2013-03-18 21:58:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29941129", "text": "This looks to be fixed here: https://github.com/rails/rails/pull/12748\n", "created_at": "2013-12-05 21:42:08", "user": 313254, "id": 29941129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29941463", "text": "Right, it's the same issue. Thanks @ScotterC @laserlemon :+1:\n", "created_at": "2013-12-05 21:45:24", "user": 26328, "id": 29941463}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\n\"1.8 syntax\" => \"1.9 syntax\"\n```\n\nATP Action Pack\n", "labels": [], "number": 9787, "updated_at": "2014-07-04 04:10:04", "user": 59744, "closed_at": "2013-03-19 00:25:21", "id": 12158410, "title": "Use 1.9 Hash syntax in Routing::RouteSet", "url": "https://api.github.com/repos/rails/rails/issues/9787", "created_at": "2013-03-18 22:48:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15089999", "text": "HULK SMASH CODE FORMATTING PULL REQUEST BECAUSE CODE FORMATTING PULL REQUEST CAUSES BACKPORT AND MERGE CONFLICT PAIN.\n", "created_at": "2013-03-19 00:01:49", "user": 3124, "id": 15089999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15090496", "text": "tenderhulk :grin:\n—\nSent from Mailbox for iPhone\n\nOn Mon, Mar 18, 2013 at 7:02 PM, Aaron Patterson notifications@github.com\nwrote:\n\n> ## HULK SMASH CODE FORMATTING PULL REQUEST BECAUSE CODE FORMATTING PULL REQUEST CAUSES BACKPORT AND MERGE CONFLICT PAIN.\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/9787#issuecomment-15089999\n", "created_at": "2013-03-19 00:18:55", "user": 160941, "id": 15090496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15090690", "text": "Yup.\n", "created_at": "2013-03-19 00:25:21", "user": 27786, "id": 15090690}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm having an issue where font files with long filenames are 404'ing. \n\nFor example, given the following file: `/assets/fonts/fontcustom-1a2e07c9379f1449489ff0ef17823803.ttf`\n\nWhen calling it through SASS using\n  `font-url('fontcustom-1a2e07c9379f1449489ff0ef17823803.ttf')`\nit fails to load.\n\nBrowsing directly to the file at \n`localhost:3000/assets/fontcustom-1a2e07c9379f1449489ff0ef17823803.ttf`\nalso fails to load.\n\nHowever if you change the filename's hyphen `-` to an underscore `_`, like `fontcustom_1a2e07c9379f1449489ff0ef17823803.ttf`, and change the reference in the SASS file accordingly, it downloads correctly. \n\nAlso if you leave the hyphen but truncate some of the ending characters, it works. So \n`fontcustom-1a2e07.ttf` (in both the filesystem and SASS) works correctly. But one character more than that, `fontcustom-1a2e07c.ttf`, fails. \n\nAny idea what's going on here?\n", "labels": ["asset pipeline"], "number": 9788, "updated_at": "2016-04-05 22:10:57", "user": 361568, "closed_at": "2013-12-11 14:05:39", "id": 12163910, "title": "[Rails 3.2.11] Asset pipeline returning \"not found\" for assets with certain long filenames", "url": "https://api.github.com/repos/rails/rails/issues/9788", "created_at": "2013-03-19 02:31:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15100787", "text": "Perhpas sprokcets mixes it up with it's own fingerprinting.\n\n/cc @guilleiguaran \n", "created_at": "2013-03-19 07:30:18", "user": 5402, "id": 15100787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15217878", "text": "Looks like the Sprockets server strips out anything that looks like a fingerprint before the asset is resolved.\n\n``` ruby\n# Strip fingerprint\nif fingerprint = path_fingerprint(path)\n  path = path.sub(\"-#{fingerprint}\", '')\nend\n```\n\nHere's the offending expression:\n\n``` ruby\ndef path_fingerprint(path)\n  path[/-([0-9a-f]{7,40})\\.[^.]+$/, 1]\nend\n```\n\nThere's a similar issue reported at sstephenson/sprockets#396\n", "created_at": "2013-03-21 03:39:02", "user": 5549, "id": 15217878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285690", "text": "@jakemauer does the linked sprocket ticket match your situation?\n", "created_at": "2013-03-22 08:23:28", "user": 5402, "id": 15285690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16352214", "text": "@jakemauer for your specific situation, I submitted a pull request on fontcustom\nhttps://github.com/FontCustom/fontcustom/pull/61\n\nThe issue is still very much present in sprockets. \n", "created_at": "2013-04-14 14:51:28", "user": 9458, "id": 16352214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17479411", "text": "Three people in our company just spent a collective three hours debugging this because **all** self-hosted fonts from [Fonts.com](http://fonts.com) have UUIDs as their names.\n\n![Never say no to panda](http://24.media.tumblr.com/tumblr_m4awgkicUO1qdogtdo1_500.gif)\n\n:-(\n", "created_at": "2013-05-06 12:41:16", "user": 43314, "id": 17479411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25737976", "text": "Want to chime in to this thread and say that `carrierwave` is now broken for me as it generates filenames that don't show up in the asset pipeline. Hoping this is resolved ASAP.\n", "created_at": "2013-10-05 00:10:18", "user": 2460418, "id": 25737976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30303190", "text": "This is still an issue with Rails 4. @guilleiguaran can you take a look at this one?\n", "created_at": "2013-12-11 08:45:21", "user": 5402, "id": 30303190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30322312", "text": "This can't be fixed in rails or sprockets-rails, this need to be fixed in sprockets itself.\n\nThis issue will need to be reopen in in sprockets :grin: \n", "created_at": "2013-12-11 14:04:32", "user": 160941, "id": 30322312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30322386", "text": "Looks like there are PRs for this in sprockets, closing here :)\n", "created_at": "2013-12-11 14:05:39", "user": 160941, "id": 30322386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/77398637", "text": "this is still an issue as of right now in rails 4.2. can be hard to track down this error if you have an asset with a dash in it and it doesn't recompile properly. going to add a comment in https://github.com/sstephenson/sprockets/pull/473\n", "created_at": "2015-03-05 16:38:56", "user": 2923, "id": 77398637}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/206004634", "text": "Three years later and I just wasted an hour on this exact same problem, and google didn't help, because this issue didn't surface until I typed \"dashes in filenames\"... sigh.\n", "created_at": "2016-04-05 22:10:57", "user": 343090, "id": 206004634}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "text": "Moral of the story: One must be careful about lazily initializing\ninstance variables when subclassing.\n\nI would like to draw your attention to https://github.com/rails/rails/issues/4652 where\nthe reader will see that there appears to be some kind of initialization issue\nin rails.\n\nThe source of this issue is that:\n1) Engine#env_config contains \"@env_config ||= ...\"\n2) Application#env_config contains \"@env_config ||= ...\"\n3) Threads are in the picture\n4) Thread A calls Application#env_config, which super's to Engine#env_config\n5) After Engine#env_config returns but before Application#env_config sets @env_config again, Thread B begins running\n6) Thread B calls Application#env_config\n7) Thread B finds @env_config to contain a value (the one set by Engine#env_config) and returns it\n8) Thread B blows up because key set by Application#env_config are there.\n9) People report bugs with puma, thin, rainbows, webrick, etc\n10) Evan becomes tired of seeing these bugs\n11) Evan pours himself a stiff drink, puts on Top Gear(tm), and begins debugging\n12) Evan finds the source of the bug\n13) Evan authors a PR\n14) RIGHT NOW.\n\nThe bug is fixed by simply using a different ivar name in the methods.\nAlternately, Engine#env_config could just return a new Hash each time, not memoizing into @env_config.\n\nI bid you adieu.\n", "labels": [], "number": 9789, "updated_at": "2017-05-25 21:18:48", "user": 7, "closed_at": "2013-03-19 02:54:13", "id": 12163987, "title": "Change @env_config to @app_env_config", "url": "https://api.github.com/repos/rails/rails/issues/9789", "created_at": "2013-03-19 02:35:35", "comments": [{"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15094393", "text": "Damn.\n", "created_at": "2013-03-19 02:37:05", "user": 27786, "id": 15094393}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15094823", "text": "@evanphx Man, it must have been hard to track this down. I don't have enough words to express my gratitude for this pull request.\n", "created_at": "2013-03-19 02:54:07", "user": 9582, "id": 15094823}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15094932", "text": "Having been plagued by this for a while now, thanks @evanphx!\n", "created_at": "2013-03-19 02:59:08", "user": 18191, "id": 15094932}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15094939", "text": ":+1: @evanphx for prez\n", "created_at": "2013-03-19 02:59:57", "user": 2687, "id": 15094939}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15106449", "text": ":bow: \n", "created_at": "2013-03-19 10:15:03", "user": 567626, "id": 15106449}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15106895", "text": ":+1: \n", "created_at": "2013-03-19 10:26:56", "user": 215, "id": 15106895}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15107009", "text": ":+1: \n", "created_at": "2013-03-19 10:29:48", "user": 621238, "id": 15107009}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15133137", "text": "Yay! Lazy inits and threads, what a fun mix.\n", "created_at": "2013-03-19 18:16:57", "user": 15688, "id": 15133137}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19763081", "text": "Is this supposed to be merged and fixed in 3.2.13? Still having this issue: https://github.com/puma/puma/issues/204\n", "created_at": "2013-06-20 16:02:07", "user": 166943, "id": 19763081}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19851860", "text": "@rafBM if you click on the commit, you can see it's only in 3-2-stable, and hasn't made it to a release yet.\n", "created_at": "2013-06-22 06:07:04", "user": 27786, "id": 19851860}, {"reactions": {"+1": [9379, 1550392, 52430, 103887, 3325965], "laugh": [14013159, 3325965]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/130234890", "text": ":+1:\n", "created_at": "2015-08-12 09:25:52", "user": 1296308, "id": 130234890}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Any particular reason the dependency on i18n gem reverted from 0.6.4 back to 0.6.1 with rails upgrade 3.2.13?\n\nhttps://github.com/rails/rails/blob/a4b55827721a5967299f3c1531afb3d6d81e4ac0/activesupport/activesupport.gemspec#L21\n", "labels": [], "number": 9790, "updated_at": "2013-05-01 19:08:52", "user": 115, "closed_at": "2013-03-19 03:28:49", "id": 12164508, "title": "activesupport-3.2.12 i18n regression", "url": "https://api.github.com/repos/rails/rails/issues/9790", "created_at": "2013-03-19 03:03:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15095617", "text": "Basically some issues with 1.8.7 compatibility, that led to releasing the first rc locked into 0.6.1 197b9f4d61260bea9e2a0a4883977e02164a0667, and then they all rolled over with that version. It's been already fixed on 3-2-stable 641a27d47baf4804e89d5a99ee6d843a75d868e6, and should be in the next 3.2 release (which shouldn't take longer I imagine). Thanks.\n", "created_at": "2013-03-19 03:28:49", "user": 26328, "id": 15095617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17299923", "text": "Any ETA for the next stable 3.2 release? It's been about a month and I've been hoping to see this issue resolved.\n", "created_at": "2013-05-01 19:08:52", "user": 1459753, "id": 17299923}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I believe the reason `Railtie::Configurable` was created was so that the subclasses of the Railtie class would have the methods in the Configurable module (such as `instance`, `configure`, and `method_missing`). However, the implementer of Railtie did not want Railtie itself to have these methods.\n\nThis was implemented by forcing all modules that inherit from Railtie to include the Configurable module like so:\n\n``` ruby\nclass Railtie\n  class << self\n    def inherited(base)\n      base.send(:include, Railtie::Configurable)\n    end\n  ...\n  end\nend\n```\n\nThis isn't great because it forces all the subclasses of Railtie to have this module, which isn't ideal behavior. Instead, it would be nice to use inheritance to make sure these methods appear in subclasses of Railties.\n\nI've made it so that the Railtie class has the methods from Railtie::Configurable, and that Railtie itself cannot be instantiated and is effectively an abstract class.\n", "labels": ["railties"], "number": 9791, "updated_at": "2014-06-26 18:58:02", "user": 1075780, "closed_at": "2013-04-29 18:19:16", "id": 12164870, "title": "Removing Railtie::Configurable and replacing it with class methods", "url": "https://api.github.com/repos/rails/rails/issues/9791", "created_at": "2013-03-19 03:21:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15098611", "text": "@carlosantoniodasilva I agree that it makes more sense to use `public_send`. However, one of the tests uses a protected method on a Rails::Engine subclass: https://github.com/rails/rails/blob/master/railties/test/engine_test.rb#L12. \n\nDo you think I should move `routes?` to be a public method and also change to using a `public_send`, or leave as is? (I moved it to a public method for now)\n", "created_at": "2013-03-19 05:48:07", "user": 1075780, "id": 15098611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15198580", "text": "I've added a little documentation on the new methods that have been moved to `Railties` from the Configurable module. Hopefully this will make it more clear what these methods do.\n\n@carlosantoniodasilva and @josevalim I've changed my PR to reflect your suggestions. I've also removed a test that asserts that only abstract railties can inherit from Railtie. As noted by @josevalim, this requirement doesn't seem necessary.\n", "created_at": "2013-03-20 19:38:43", "user": 1075780, "id": 15198580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17178765", "text": "Remember to rebase agains master\n", "created_at": "2013-04-29 16:48:02", "user": 47848, "id": 17178765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17184031", "text": "Thanks @rafaelfranca ! I've rebased and pushed changes based on your suggestions.\n", "created_at": "2013-04-29 18:15:50", "user": 1075780, "id": 17184031}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Drop an unused hash being passed as argument\n2. Change slang SPESHUL to SPECIAL\n", "labels": [], "number": 9792, "updated_at": "2014-06-26 19:56:25", "user": 567626, "closed_at": "2013-03-19 05:34:02", "id": 12167003, "title": "drop an unused hash; change slang to SPECIAL", "url": "https://api.github.com/repos/rails/rails/issues/9792", "created_at": "2013-03-19 05:25:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15098287", "text": "Done/Squashed\n", "created_at": "2013-03-19 05:32:25", "user": 567626, "id": 15098287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15098326", "text": "Thanks.\n", "created_at": "2013-03-19 05:34:06", "user": 27786, "id": 15098326}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Toward the end of **5.12 Updating Posts**, the 'Back' and 'Next' links in `show.html.erb` are defined as\n\n```\n<%= link_to 'Back', action: :index %>\n| <%= link_to 'Edit', action: :edit, id: @post.id %>\n```\n\nThe next time the code for `show.html.erb` is listed, in **6.4 Generating a Controller**, the links are defined as\n\n```\n<%= link_to 'Edit Post', edit_post_path(@post) %> |\n<%= link_to 'Back to Posts', posts_path %>\n```\n\nwith no explanation for the changes.\n", "labels": ["docs"], "number": 9793, "updated_at": "2013-04-23 21:36:16", "user": 1610420, "closed_at": "2013-04-23 21:36:16", "id": 12167395, "title": "Edge Guide: Getting Started: unexplained changes to 'Back' and 'Edit' links in show.html.erb", "url": "https://api.github.com/repos/rails/rails/issues/9793", "created_at": "2013-03-19 05:49:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15100754", "text": "The first syntax is legacy and is not even generated anymore. I skimmed through the guide and there are still many mentions of `action:`. I think this should be rewritten to use path helpers otherwise it's confusing and does not really help to get started.\n\n@steveklabnik what's the status of this guide?\n", "created_at": "2013-03-19 07:28:54", "user": 5402, "id": 15100754}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15128284", "text": "I started to make a pass through it a while ago, then backed off.\n\nIt should probably get another go-over. Ryan initially wrote it a while ago. I'll put it on my plate.\n", "created_at": "2013-03-19 17:03:44", "user": 27786, "id": 15128284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16520095", "text": "@senny @steveklabnik I would love to help change the guide to use paths. Should this be done for all calls to action: in the getting started guide?\n", "created_at": "2013-04-17 17:27:07", "user": 1518902, "id": 16520095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16525347", "text": "Yes.\n", "created_at": "2013-04-17 18:46:37", "user": 27786, "id": 16525347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16537117", "text": "I was looking a little more into the getting started guide and I sort of understand why there is inconsistency because it is only in section 5.15 that the guide introduces the resources method. After that section, the guide uses the named routes helper instead of the call to action. \n\nIf the change was to be made to use the paths, the named routes should be introduced sooner. Thoughts?\n", "created_at": "2013-04-17 21:31:34", "user": 1518902, "id": 16537117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16537717", "text": "You should be able to replace any instance of `:action =>` with `controller#action`, no?\n", "created_at": "2013-04-17 21:43:42", "user": 27786, "id": 16537717}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16542063", "text": "I thought the same, so to confirm I followed the guide and incrementally changed the mention of <code>action:</code> but ran into some snags. The problem I think is the guide builds up the routes for every CRUD action. Therefore the routes look like \n\n<pre>\n<code>\n    posts GET   /posts(.:format)            posts#index\nposts_new GET   /posts/new(.:format)        posts#new\n          POST  /posts(.:format)            posts#create\n          GET   /posts/:id(.:format)        posts#show\n          GET   /posts/:id/edit(.:format)   posts#edit\n          PATCH /posts/:id(.:format)        posts#update\n     root       /                           welcome#index\n</code>\n</pre>\n\nSo changing <code><%= link_to 'Edit', action: :edit, id: @post.id %></code> to use a named route did not make sense based on the routes they currently have setup, or am I missing something?\n", "created_at": "2013-04-17 23:32:23", "user": 1518902, "id": 16542063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16551303", "text": "Ahh, I was confusing 'named routes' with 'the resource route macro.' Totally. Move the named routes part up, seems good.\n", "created_at": "2013-04-18 02:49:32", "user": 27786, "id": 16551303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16588464", "text": "Another clarification; just want to make sure the change is worth it. The guide is also saying...\n\nIn general, Rails encourages the use of resources objects in place of declaring routes manually. <b>It was only done in this guide as a learning exercise.</b> For more information about routing, see Rails Routing from the Outside In.\n\nThis \"justifies\" the use of <code>action:</code> in sections 1-5, and the use of paths going forward. \n\nLet me know what you think and I can start the change today if needed. \n", "created_at": "2013-04-18 16:49:30", "user": 1518902, "id": 16588464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16591654", "text": "I think it's better to just never teach things that are bad in the first place. People copy/paste code without reading that kind of stuff.\n", "created_at": "2013-04-18 17:46:27", "user": 27786, "id": 16591654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16887978", "text": "Made the changes to docrails.\n", "created_at": "2013-04-23 21:33:06", "user": 1518902, "id": 16887978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16888151", "text": "Okay then. Great!\n", "created_at": "2013-04-23 21:36:16", "user": 27786, "id": 16888151}], "assignees": [27786, 27786], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "If the host in `default_url_options` is accidentally set with a protocol such as \n\n```\nhost: \"http://example.com\"\n```\n\nthen the generated url will have the protocol twice `http://http://example.com` which is not what the user intended. Likely they wanted to define a host `host: \"example.com\"` and a `protocol: \"http://\"` but did not know the convention.\n\nThis may not the most common problem, but when it happens it can go undetected for a while. I accidentally added `http://` out of habit recently only to find all the links in my emails were broken after deploying a demo site to production. Rather than allow this accident go undetected, we can fix the problem in line by properly setting the protocol and host.\n\nI was able to find this related question on stack overflow: http://stackoverflow.com/questions/5878329/rails-3-devise-how-do-i-make-the-email-confirmation-links-use-secure-https-n where the answer was highly upvoted.\n\nThis is based off of work in #7415 cc/ @pixeltrix\n\nATP Action Mailer and Action Pack\n", "labels": [], "number": 9794, "updated_at": "2014-06-22 07:48:02", "user": 59744, "closed_at": "2013-03-20 01:48:50", "id": 12168085, "title": "Fix improperly configured host in generated urls", "url": "https://api.github.com/repos/rails/rails/issues/9794", "created_at": "2013-03-19 06:28:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15105733", "text": "@schneems can you rebase and I'll merge it - thanks!\n", "created_at": "2013-03-19 09:56:33", "user": 6321, "id": 15105733}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15130419", "text": "Rebased\n", "created_at": "2013-03-19 17:35:43", "user": 59744, "id": 15130419}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15154417", "text": "@schneems it's probably okay to backport this one - can you do a PR against 3-2-stable? Thanks!\n", "created_at": "2013-03-20 01:50:49", "user": 6321, "id": 15154417}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "hi, just upgrade to latest rails distribution and found this issue.\n\nI am testing template that rendering another partial in haml test file, and the test is like this:\n\nrender \nrendered.should render_template('template_name')\n\nThen I will caught in an error complains that \"response does not have method body\" . It turns out that the assert_template method in test_case.rb file under actionpack/lib add a new line  calling the body method of response.\n\n//Force body to be read in case the template is being streamed\nresponse.boy\n\nI finally give up use this way to assert the rendered template, instead, i assert whether the element shows up in the rendered partial.\n\nGIven if I want continue to use render_template in haml templates tests, do I have any other way to avoid that or how could covert the pure string into an http response?\n", "labels": ["actionview", "needs feedback"], "number": 9795, "updated_at": "2013-05-28 13:36:57", "user": 920329, "closed_at": "2013-05-28 13:36:57", "id": 12169822, "title": "assert on render_template failed because of response is string and does not have body method", "url": "https://api.github.com/repos/rails/rails/issues/9795", "created_at": "2013-03-19 08:07:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15491904", "text": "I find, that it's better to test functionality: I.e. id the correct content show up on the complete, rendered template, than to test implementation: Was the template included in a particular maner.\n\nBut, when that's said, I'm using haml, and I have never had problems using rspec and the `render_template` matcher. What version of rails, rspec and haml are you using? \n", "created_at": "2013-03-26 22:07:47", "user": 40206, "id": 15491904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17574117", "text": "Heya @iambowen did you solve this? If not can you provide some more information? (version of rails, rspec, haml etc)\n", "created_at": "2013-05-07 22:12:23", "user": 162976, "id": 17574117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18549620", "text": "@iambowen what is the state of this issue? Can you provide a running example or a sample application on GitHub?\n", "created_at": "2013-05-28 13:20:24", "user": 5402, "id": 18549620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18550183", "text": "Sorry, it's been like 2 months ago, I can't remember that much. This thing happens when I tried to use render_template method when testing haml template instead of testing controller to render certain template.  The problem is solved. Should I close the issue?\n", "created_at": "2013-05-28 13:30:14", "user": 920329, "id": 18550183}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Is it possible to have this feature in 3.2 branch?\nOriginally this feature was accepted to master, see https://github.com/rails/rails/pull/4132.\n\nThanks.\n", "labels": [], "number": 9796, "updated_at": "2014-07-02 18:15:15", "user": 788666, "closed_at": "2013-03-19 16:21:02", "id": 12169969, "title": "Reset postgreSQL search path in db:test:clone_structure.", "url": "https://api.github.com/repos/rails/rails/issues/9796", "created_at": "2013-03-19 08:14:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112444", "text": "It is, but can you please expand the commit message the same way it's there and add a changelog entry?\n", "created_at": "2013-03-19 12:55:29", "user": 26328, "id": 15112444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15122060", "text": "I've updated it. Thanks.\n", "created_at": "2013-03-19 15:42:57", "user": 788666, "id": 15122060}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The method #insert_record should use the loop variable as the argument.    \n", "labels": [], "number": 9797, "updated_at": "2014-06-19 01:38:13", "user": 3786236, "closed_at": "2013-03-20 07:59:16", "id": 12170216, "title": "Wrong variable used inside the block", "url": "https://api.github.com/repos/rails/rails/issues/9797", "created_at": "2013-03-19 08:24:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15103812", "text": "How about adding a test for this ?\n", "created_at": "2013-03-19 09:06:57", "user": 3948, "id": 15103812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112238", "text": "Please squash your commits.\n", "created_at": "2013-03-19 12:50:41", "user": 26328, "id": 15112238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15120728", "text": "@carlosantoniodasilva will squash to make it a single commit.\n", "created_at": "2013-03-19 15:20:31", "user": 3786236, "id": 15120728}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, I observe following test error with actionpack-3.2.13\n\n```\n  1) Failure:\ntest_parses_json_with_non-object_JSON_content(RootLessJSONParamsParsingTest) [/builddir/build/BUILD/rubygem-actionpack-3.2.13/usr/share/gems/gems/actionpack-3.2.13/test/dispatch/request/json_params_parsing_test.rb:124]:\nExpected response to be a <:ok>, but was <500>\n```\n\nThank you for looking into this\n", "labels": [], "number": 9798, "updated_at": "2013-03-20 09:30:10", "user": 14406, "closed_at": "2013-03-19 17:13:49", "id": 12172973, "title": "actionpack-3.2.13 test error", "url": "https://api.github.com/repos/rails/rails/issues/9798", "created_at": "2013-03-19 09:58:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15107177", "text": "This is my Ruby version:\n\n```\n$ ruby -v\nruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-linux]\n```\n\nand list of gems on my system:\n\n```\n# gem list\n\n*** LOCAL GEMS ***\n\nactivemodel (3.2.13)\nactiverecord (3.2.13)\nactiveresource (3.2.13)\nactivesupport (3.2.13)\narel (3.0.2)\nbcrypt-ruby (3.0.1)\nbigdecimal (1.2.0)\nbuilder (3.1.4)\nerubis (2.7.0)\nexecjs (1.4.0)\nhike (1.2.1)\ni18n (0.6.1)\nio-console (0.4.2)\njourney (1.0.4)\njson (1.7.7)\nmetaclass (0.0.1)\nminitest (4.3.2)\nmocha (0.13.1)\nmulti_json (1.3.6)\npsych (2.0.0)\nrack (1.4.5)\nrack-cache (1.2)\nrack-test (0.6.2)\nrdoc (4.0.0)\nref (1.0.0)\nsprockets (2.8.2)\nsqlite3 (1.3.5)\ntherubyracer (0.11.0)\ntilt (1.3.5)\ntzinfo (0.3.35)\nuglifier (1.3.0)\n```\n", "created_at": "2013-03-19 10:34:08", "user": 14406, "id": 15107177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112666", "text": "All green for me.\n\n```\nrails/actionpack [2.0.0-p0] ((v3.2.13) $)\n$ t test/dispatch/request/json_params_parsing_test.rb\nRun options: \n\n# Running tests:\n\nFinished tests in 0.125127s, 63.9350 tests/s, 175.8214 assertions/s.                                    \n8 tests, 22 assertions, 0 failures, 0 errors, 0 skips\n\nruby -v: ruby 2.0.0p0 (2013-02-24 revision 39474) [x86_64-darwin12.2.1]\n```\n", "created_at": "2013-03-19 13:01:33", "user": 26328, "id": 15112666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15127826", "text": "Must be some difference in installed gems. Also, I could try to run the test independently as you did, if it makes some difference (I don't expect any though :))\n", "created_at": "2013-03-19 16:56:11", "user": 14406, "id": 15127826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15127921", "text": "Can you spit out your `Gemfile.lock`?\n", "created_at": "2013-03-19 16:57:56", "user": 27786, "id": 15127921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15128633", "text": "@steveklabnik I don't have any. I'm running the test suite without Bundler as a part of build process for Fedora Rawhide. It is executed using following script [1]:\n\n```\npushd .%{gem_instdir}\n\n# load_path is not available, remove its require.\nsed -i '1,2d' test/abstract_unit.rb\n\n# dependency loop\n# depends on actionmailer, while actionmailer has BR(check): actionpack\nmv test/controller/assert_select_test.rb \\\n            test/controller/assert_select_test.rb.skip\n\n# The failing test was recently introduced:\n# https://github.com/rails/rails/commit/7003b36ecfe6f04a87e913828ab0f8dde4e03ecb\n# https://github.com/rails/rails/issues/9798\nruby -w -I.:lib:test -e 'Dir.glob(\"test/{abstract,controller,dispatch,template}/**/*_test.rb\").each {|t| require t}' \\\n  | grep \"3570 tests, 15953 assertions, 1 failures, 0 errors, 0 skips\"\n# activerecord tests must be run separately, otherwise we get superclass mismatch error\n# due to test classes that have same names in activerecord and other tests\nruby -w -I.:lib:test -e 'Dir.glob(\"test/activerecord/**/*_test.rb\").each {|t| require t}'\n```\n\nIt could be nice if you can provide yours Gemfile.lock, so I could compare if the dependencies are correctly satisfied on Fedora. Thank you.\n\n[1] http://pkgs.fedoraproject.org/cgit/rubygem-actionpack.git/tree/rubygem-actionpack.spec\n", "created_at": "2013-03-19 17:08:56", "user": 14406, "id": 15128633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15128991", "text": "```\n$ cat Gemfile.lock\nGIT\n  remote: git://github.com/voloko/sdoc.git\n  revision: 87ad100c0eb6113d9f0964c731a80444d9429ae3\n  specs:\n    sdoc (0.3.20)\n      json (>= 1.1.3)\n      rdoc (~> 3.10)\n\nPATH\n  remote: .\n  specs:\n    actionmailer (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      mail (~> 2.5.3)\n    actionpack (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n      erubis (~> 2.7.0)\n      rack (~> 1.5.2)\n      rack-test (~> 0.6.2)\n    activemodel (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n    activerecord (4.0.0.beta1)\n      activemodel (= 4.0.0.beta1)\n      activerecord-deprecated_finders (~> 0.0.3)\n      activesupport (= 4.0.0.beta1)\n      arel (~> 4.0.0.beta2)\n    activesupport (4.0.0.beta1)\n      i18n (~> 0.6, >= 0.6.4)\n      minitest (~> 4.2)\n      multi_json (~> 1.3)\n      thread_safe (~> 0.1)\n      tzinfo (~> 0.3.33)\n    rails (4.0.0.beta1)\n      actionmailer (= 4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activerecord (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.0.0.beta1)\n      sprockets-rails (~> 2.0.0.rc3)\n    railties (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.17.0, < 2.0)\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    activerecord-deprecated_finders (0.0.3)\n    arel (4.0.0.beta2)\n    atomic (1.0.1)\n    bcrypt-ruby (3.0.1)\n    benchmark-ips (1.2.0)\n    builder (3.1.4)\n    coffee-rails (4.0.0.beta1)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0.beta, < 5.0)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.6.1)\n    columnize (0.3.6)\n    dalli (2.6.2)\n    debugger (1.4.0)\n      columnize (>= 0.3.1)\n      debugger-linecache (~> 1.1.1)\n      debugger-ruby_core_source (~> 1.2.0)\n    debugger-linecache (1.1.2)\n      debugger-ruby_core_source (>= 1.1.1)\n    debugger-ruby_core_source (1.2.0)\n    erubis (2.7.0)\n    execjs (1.4.0)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.4)\n    jquery-rails (2.2.1)\n      railties (>= 3.0, < 5.0)\n      thor (>= 0.14, < 2.0)\n    json (1.7.7)\n    kindlerb (0.1.1)\n      mustache\n      nokogiri\n    mail (2.5.3)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    metaclass (0.0.1)\n    mime-types (1.21)\n    minitest (4.6.2)\n    mocha (0.13.3)\n      metaclass (~> 0.0.1)\n    multi_json (1.6.1)\n    mustache (0.99.4)\n    mysql (2.9.1)\n    mysql2 (0.3.11)\n    nokogiri (1.5.6)\n    pg (0.14.1)\n    polyglot (0.3.3)\n    racc (1.4.9)\n    rack (1.5.2)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    rake (10.0.3)\n    rdoc (3.12.2)\n      json (~> 1.4)\n    redcarpet (2.2.2)\n    ruby-prof (0.11.3)\n    sprockets (2.9.0)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.0.0.rc3)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (~> 2.8)\n    sqlite3 (1.3.7)\n    thor (0.17.0)\n    thread_safe (0.1.0)\n      atomic\n    tilt (1.3.5)\n    treetop (1.4.12)\n      polyglot\n      polyglot (>= 0.3.1)\n    turbolinks (1.0.0)\n      coffee-rails\n    tzinfo (0.3.37)\n    uglifier (1.3.0)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\n    w3c_validators (1.2)\n      json\n      nokogiri\n    yajl-ruby (1.1.0)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  activerecord-jdbcmysql-adapter (>= 1.2.7)\n  activerecord-jdbcpostgresql-adapter (>= 1.2.7)\n  activerecord-jdbcsqlite3-adapter (>= 1.2.7)\n  bcrypt-ruby (~> 3.0.0)\n  benchmark-ips\n  coffee-rails (~> 4.0.0.beta1)\n  dalli (>= 2.2.1)\n  debugger\n  jquery-rails (~> 2.2.0)\n  jruby-openssl\n  json\n  kindlerb\n  mocha (~> 0.13.0)\n  mysql (>= 2.9.0)\n  mysql2 (>= 0.3.10)\n  nokogiri (>= 1.4.5)\n  pg (>= 0.11.0)\n  racc (>= 1.4.6)\n  rack-cache (~> 1.2)\n  rails!\n  redcarpet (~> 2.2.2)\n  ruby-prof (~> 0.11.2)\n  sdoc!\n  sqlite3 (~> 1.3.6)\n  turbolinks\n  uglifier\n  w3c_validators\n  yajl-ruby\n```\n\nIf you're not running tests the standard way, then it's not our bug.\n", "created_at": "2013-03-19 17:13:49", "user": 27786, "id": 15128991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15137917", "text": "Would you be so kind and could you post Gemfile.lock for Rails 3.2.13? Yours is apparently for Rails 4.0. Thank you.\n", "created_at": "2013-03-19 19:35:17", "user": 14406, "id": 15137917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139829", "text": "Ah, yes, sorry:\n\n```\n$ cat Gemfile.lock\nGIT\n  remote: git://github.com/fxn/sdoc.git\n  revision: 9977ca4ecf83a76d637861f79319b11830d51de5\n  specs:\n    sdoc (0.3.19)\n      json (>= 1.1.3)\n      rdoc (~> 3.10)\n\nGIT\n  remote: git://github.com/rails/journey.git\n  revision: ebe574d11942083aa97dafcfd762359d030a6d31\n  branch: 1-0-stable\n  specs:\n    journey (1.0.4.20120614141756)\n\nPATH\n  remote: .\n  specs:\n    actionmailer (3.2.13)\n      actionpack (= 3.2.13)\n      mail (~> 2.5.3)\n    actionpack (3.2.13)\n      activemodel (= 3.2.13)\n      activesupport (= 3.2.13)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.5)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.2.1)\n    activemodel (3.2.13)\n      activesupport (= 3.2.13)\n      builder (~> 3.0.0)\n    activerecord (3.2.13)\n      activemodel (= 3.2.13)\n      activesupport (= 3.2.13)\n      arel (~> 3.0.2)\n      tzinfo (~> 0.3.29)\n    activeresource (3.2.13)\n      activemodel (= 3.2.13)\n      activesupport (= 3.2.13)\n    activesupport (3.2.13)\n      i18n (~> 0.6, >= 0.6.4)\n      multi_json (~> 1.0)\n    rails (3.2.13)\n      actionmailer (= 3.2.13)\n      actionpack (= 3.2.13)\n      activerecord (= 3.2.13)\n      activeresource (= 3.2.13)\n      activesupport (= 3.2.13)\n      bundler (~> 1.0)\n      railties (= 3.2.13)\n    railties (3.2.13)\n      actionpack (= 3.2.13)\n      activesupport (= 3.2.13)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n\nGEM\n  remote: https://rubygems.org/\n  specs:\n    RedCloth (4.2.9)\n    arel (3.0.2)\n    bcrypt-ruby (3.0.1)\n    benchmark-ips (1.2.0)\n    builder (3.0.4)\n    erubis (2.7.0)\n    execjs (1.4.0)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.4)\n    jquery-rails (2.2.1)\n      railties (>= 3.0, < 5.0)\n      thor (>= 0.14, < 2.0)\n    json (1.7.7)\n    mail (2.5.3)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    memcache-client (1.8.5)\n    metaclass (0.0.1)\n    mime-types (1.21)\n    mocha (0.13.3)\n      metaclass (~> 0.0.1)\n    multi_json (1.7.1)\n    mysql (2.9.1)\n    mysql2 (0.3.11)\n    nokogiri (1.5.8)\n    pg (0.14.1)\n    polyglot (0.3.3)\n    rack (1.4.5)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.3)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    rake (10.0.3)\n    rdoc (3.12.2)\n      json (~> 1.4)\n    sprockets (2.2.2)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sqlite3 (1.3.7)\n    system_timer (1.2.4)\n    thor (0.17.0)\n    tilt (1.3.6)\n    treetop (1.4.12)\n      polyglot\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.37)\n    uglifier (1.3.0)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\n    w3c_validators (1.2)\n      json\n      nokogiri\n    yajl-ruby (1.1.0)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  RedCloth (~> 4.2)\n  activerecord-jdbcmysql-adapter (>= 1.2.7)\n  activerecord-jdbcpostgresql-adapter (>= 1.2.7)\n  activerecord-jdbcsqlite3-adapter (>= 1.2.7)\n  arel\n  bcrypt-ruby (~> 3.0.0)\n  benchmark-ips\n  journey!\n  jquery-rails\n  jruby-openssl\n  json\n  memcache-client (>= 1.8.5)\n  mocha (>= 0.13.0)\n  mysql (>= 2.8.1)\n  mysql2 (>= 0.3.10)\n  nokogiri (>= 1.4.5)\n  pg (>= 0.11.0)\n  rails!\n  rake (>= 0.8.7)\n  sdoc!\n  sqlite3 (~> 1.3.5)\n  system_timer\n  uglifier (>= 1.0.3)\n  w3c_validators\n  yajl-ruby\n\n```\n", "created_at": "2013-03-19 20:09:45", "user": 27786, "id": 15139829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15165066", "text": "Ok, so update of multi_json from 1.3.6 to 1.7.1 fixed the issue.\n\nSince I believe that multi_json 1.3.6 satisfies the requirements implied by sprockets, uglifier, execjs and activesupport but it makes your test suite fails, it is obviously error in Ruby on Rails. Please fix the issue. Thank you.\n\n(I'm going to update the multi_json in Fedora, so this is not issue for me anymore, but others may care).\n", "created_at": "2013-03-20 09:22:58", "user": 14406, "id": 15165066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15165283", "text": "BTW multi_json 1.4.0 is the first version which works. 1.3.7 fails, not going to test older versions.\n", "created_at": "2013-03-20 09:28:30", "user": 14406, "id": 15165283}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When upgrading to Rails 3.2.13, we noticed our use of `action_missing` suddenly broke. After a lengthy troubleshoot, we narrowed it down to commit abf0c710210440e50b33b3e708b1e7e1dfbf9d65. Reverting to the old behaviour fixes the problem.\n\nThe key issue here is that `ActionController::HideActions` now assumes it knows all possible actions beforehand, which completely negates `action_missing`.\n", "labels": ["actionpack", "regression"], "number": 9799, "updated_at": "2013-09-16 01:20:27", "user": 736021, "closed_at": "2013-03-20 21:23:23", "id": 12174032, "title": "action_missing broken in rails-3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9799", "created_at": "2013-03-19 10:28:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15205479", "text": "no tests?\n", "created_at": "2013-03-20 21:41:33", "user": 1179, "id": 15205479}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When I executed rails's testcases, I saw a warning.\n\n```\nactivesupport/test/xml_mini/jdom_engine_test.rb:57: warning: mismatched indentations at 'end' with 'def' at 46\n```\n", "labels": [], "number": 9800, "updated_at": "2014-06-26 19:56:31", "user": 13426, "closed_at": "2013-03-19 12:17:42", "id": 12176853, "title": "Fix warning: mismatched indentatmmismatched indentations at 'end' with 'def'", "url": "https://api.github.com/repos/rails/rails/issues/9800", "created_at": "2013-03-19 11:55:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am using Rails 3.2.11 and I am having a problem with initializer code written inside:\n\nif Rails.env.development?\nend\n\nbeing executed when I run\n\n$ rake test\n\nI've tested this as follows:\n\n$ rails new test_app\n$ cd test_app\n$ rake db:migrate\n$ echo puts \\'this should not run in test\\' if Rails.env.development? > config/initializers/dev_only.rb\n$ rake test\n\nThis will print 'this should not run in test' in spite of the fact that I am running the tests.\n", "labels": [], "number": 9801, "updated_at": "2013-03-19 13:12:24", "user": 548990, "closed_at": "2013-03-19 12:54:09", "id": 12177018, "title": "Rails runs development-only initializers in test environment.", "url": "https://api.github.com/repos/rails/rails/issues/9801", "created_at": "2013-03-19 12:01:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112390", "text": "When you run `rake test`, `rake` is actually starts in your `development` environment, and then it fork another Ruby process which run the test in the `test` environment. That's an expected behavior.\n\nIt seems like you're trying to set something in the development environment only. I think your setting won't be leaked into the second Ruby process, so it should be fine for you to do that.\n", "created_at": "2013-03-19 12:54:09", "user": 4912, "id": 15112390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15113139", "text": "What is the correct way to run tests so that the development environment isn't invoked?\n", "created_at": "2013-03-19 13:12:24", "user": 548990, "id": 15113139}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This reverts commit 7cc5bf51b4c16e89340b8c45ca0297e387226aaf, which assumed that all controller actions can be known beforehand - completely negating action_missing.\n\nAlso adds a test to ensure this mistake does not happen again.\n\nFixes issue #9799.\n", "labels": [], "number": 9802, "updated_at": "2014-06-14 22:45:57", "user": 736021, "closed_at": "2013-03-20 21:16:08", "id": 12177629, "title": "Fix missing action_missing", "url": "https://api.github.com/repos/rails/rails/issues/9802", "created_at": "2013-03-19 12:22:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112198", "text": "Can you use `git revert` of that commit in one step, and add your test in another? I think it's easier to follow.\n", "created_at": "2013-03-19 12:49:47", "user": 26328, "id": 15112198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112365", "text": "Also, according to the issue, this happens on 3.2.13 as well right? So it's apparently a regression?\n", "created_at": "2013-03-19 12:53:26", "user": 26328, "id": 15112365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15112970", "text": "Single commit broken up into two separate.\n\nThe issue is a regression that also happens on 3.2.13. We've installed our own rails-3.2.13 fork in production with this patch applied, and I'd be happy to open a separate pull request for that if need be.\n", "created_at": "2013-03-19 13:08:27", "user": 736021, "id": 15112970}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15116063", "text": "The goal of the previous patch was to make it thread safe, so we need to ensure we won't have a regression on that side too. So simply reverting the commit won't cut, we need to make `@visible_actions` be a threadsafe hash.\n", "created_at": "2013-03-19 14:09:44", "user": 9582, "id": 15116063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15123147", "text": "Why have a `@visible_actions` hash at all?\n\n``` ruby\ndef visible_action?(action_name)\n  not self.hidden_actions.include?(action_name)\nend\n```\n\nGranted, I'm still a stranger to thread safety, but I'd consider `hidden_actions` to fit the bill.\n", "created_at": "2013-03-19 15:58:04", "user": 736021, "id": 15123147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15132993", "text": "@gufo's suggested `!hidden_actions.include?(action_name)` is thread safe and seems pretty straightforward.\n", "created_at": "2013-03-19 18:14:50", "user": 15688, "id": 15132993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15160913", "text": ":+1: for fixing this asap, it broke a large section of our site, we've applied band-aids in the mean time\n", "created_at": "2013-03-20 06:55:06", "user": 104009, "id": 15160913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15161480", "text": "I've implemented the suggested change. Since this is now a very small patch, I also squashed it into a single commit, removing the revertion.\n", "created_at": "2013-03-20 07:24:22", "user": 736021, "id": 15161480}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This morning, I updated rails from 3.2.12 to 3.2.13, which resulted in a major delay in loading my views. This is from loading my home page:\n\n```\nRails 3.2.12:\nCompleted 200 OK in 387ms (Views: 339.0ms | ActiveRecord: 27.1ms)\n\nRails 3.2.13:\nCompleted 200 OK in 4416ms (Views: 4361.2ms | ActiveRecord: 28.7ms)\n```\n\nThe only difference between the two commits it the Rails version, which of course did also result in a lot of other gems being updated... This is the difference in the Gemfile.lock:\n\n```\nGEM\n   remote: https://rubygems.org/\n   specs:\n-    actionmailer (3.2.12)\n-      actionpack (= 3.2.12)\n-      mail (~> 2.4.4)\n-    actionpack (3.2.12)\n-      activemodel (= 3.2.12)\n-      activesupport (= 3.2.12)\n+    actionmailer (3.2.13)\n+      actionpack (= 3.2.13)\n+      mail (~> 2.5.3)\n+    actionpack (3.2.13)\n+      activemodel (= 3.2.13)\n+      activesupport (= 3.2.13)\n       builder (~> 3.0.0)\n       erubis (~> 2.7.0)\n       journey (~> 1.0.4)\n@@ -14,19 +14,19 @@ GEM\n       rack-cache (~> 1.2)\n       rack-test (~> 0.6.1)\n       sprockets (~> 2.2.1)\n-    activemodel (3.2.12)\n-      activesupport (= 3.2.12)\n+    activemodel (3.2.13)\n+      activesupport (= 3.2.13)\n       builder (~> 3.0.0)\n-    activerecord (3.2.12)\n-      activemodel (= 3.2.12)\n-      activesupport (= 3.2.12)\n+    activerecord (3.2.13)\n+      activemodel (= 3.2.13)\n+      activesupport (= 3.2.13)\n       arel (~> 3.0.2)\n       tzinfo (~> 0.3.29)\n-    activeresource (3.2.12)\n-      activemodel (= 3.2.12)\n-      activesupport (= 3.2.12)\n-    activesupport (3.2.12)\n-      i18n (~> 0.6)\n+    activeresource (3.2.13)\n+      activemodel (= 3.2.13)\n+      activesupport (= 3.2.13)\n+    activesupport (3.2.13)\n+      i18n (= 0.6.1)\n       multi_json (~> 1.0)\n     airbrake (3.1.7)\n       activesupport\n@@ -129,7 +129,7 @@ GEM\n     hashr (0.0.22)\n     hike (1.2.1)\n     honeypot-captcha (0.0.2)\n-    i18n (0.6.4)\n+    i18n (0.6.1)\n     journey (1.0.4)\n     jquery-rails (2.2.0)\n       railties (>= 3.0, < 5.0)\n@@ -146,7 +146,7 @@ GEM\n     kgio (2.8.0)\n     listen (0.7.2)\n     lumberjack (1.0.2)\n-    mail (2.4.4)\n+    mail (2.5.3)\n       i18n (>= 0.4.0)\n       mime-types (~> 1.16)\n       treetop (~> 1.4.8)\n@@ -155,7 +155,7 @@ GEM\n     mime-types (1.21)\n     mocha (0.10.5)\n       metaclass (~> 0.0.1)\n-    multi_json (1.6.1)\n+    multi_json (1.7.1)\n     mysql2 (0.3.11)\n     nested_form (0.3.1)\n     net-scp (1.0.4)\n@@ -180,14 +180,14 @@ GEM\n       rack\n     rack-test (0.6.2)\n       rack (>= 1.0)\n-    rails (3.2.12)\n-      actionmailer (= 3.2.12)\n-      actionpack (= 3.2.12)\n-      activerecord (= 3.2.12)\n-      activeresource (= 3.2.12)\n-      activesupport (= 3.2.12)\n+    rails (3.2.13)\n+      actionmailer (= 3.2.13)\n+      actionpack (= 3.2.13)\n+      activerecord (= 3.2.13)\n+      activeresource (= 3.2.13)\n+      activesupport (= 3.2.13)\n       bundler (~> 1.0)\n-      railties (= 3.2.12)\n+      railties (= 3.2.13)\n     rails_admin (0.4.3)\n       bootstrap-sass (~> 2.2)\n       builder (~> 3.0)\n@@ -202,9 +202,9 @@ GEM\n       rails (~> 3.1)\n       remotipart (~> 1.0)\n       sass-rails (~> 3.1)\n-    railties (3.2.12)\n-      actionpack (= 3.2.12)\n-      activesupport (= 3.2.12)\n+    railties (3.2.13)\n+      actionpack (= 3.2.13)\n+      activesupport (= 3.2.13)\n       rack-ssl (~> 1.3.2)\n       rake (>= 0.8.7)\n       rdoc (~> 3.4)\n@@ -212,7 +212,7 @@ GEM\n     raindrops (0.10.0)\n     rake (10.0.3)\n     rb-fsevent (0.9.1)\n-    rdoc (3.12.1)\n+    rdoc (3.12.2)\n       json (~> 1.4)\n     remotipart (1.0.2)\n     rest-client (1.6.7)\n@@ -266,7 +266,7 @@ GEM\n       eventmachine (>= 0.12.6)\n       rack (>= 1.0.0)\n     thor (0.17.0)\n-    tilt (1.3.4)\n+    tilt (1.3.6)\n     tire (0.5.4)\n       activemodel (>= 3.0)\n       hashr (~> 0.0.19)\n@@ -280,7 +280,7 @@ GEM\n       actionpack (>= 3.1)\n       execjs\n       railties (>= 3.1)\n-    tzinfo (0.3.35)\n+    tzinfo (0.3.37)\n     uglifier (1.3.0)\n       execjs (>= 0.3.0)\n       multi_json (~> 1.0, >= 1.0.2)\n@@ -325,7 +325,7 @@ DEPENDENCIES\n   nested_form\n   newrelic_rpm (~> 3.5.5.38)\n   pry\n-  rails (= 3.2.12)\n+  rails (= 3.2.13)\n   rails_admin\n   rb-fsevent (= 0.9.1)\n   rmagick\n```\n\nOther then these two files nothing has changed.\n\nI understand that stuff in the asset pipeline can be slowing it down, but I dont see a difference when I change the value of \"config.assets.debug = false\" inside of development.rb.\n\nI suppose I do have a lot of assets in my asset pipeline I still need to clean up, which I will do before I deploy to production, but I wonder why this has now suddenly caused the lag after updating Rails. Question is: What is causing it and can I do something about it?\n\nI am running ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.4.0] and tried both Thin and Puma, but both have the same issue.\n", "labels": ["actionview", "asset pipeline", "regression"], "number": 9803, "updated_at": "2014-03-28 22:33:54", "user": 170640, "closed_at": "2013-03-20 23:42:01", "id": 12182528, "title": "Upgrade from 3.2.12 to 3.2.13 makes loading of views become really slow", "url": "https://api.github.com/repos/rails/rails/issues/9803", "created_at": "2013-03-19 14:32:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15118886", "text": "It is very hard to know something only with this information. Could you reproduce in a new application?\n", "created_at": "2013-03-19 14:52:54", "user": 47848, "id": 15118886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139405", "text": "I am seeing the exact same thing in [Discourse](https://github.com/discourse/discourse). Requesting a view with assets is taking several seconds longer than it used to before the patch. If I roll back rails to 3.2.12 performance returns.\n", "created_at": "2013-03-19 20:01:54", "user": 17538, "id": 15139405}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139535", "text": ":confounded: thank you to let use know guys. I marked it as a regression.\n", "created_at": "2013-03-19 20:03:57", "user": 47848, "id": 15139535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139579", "text": "Also, we saw this: https://github.com/activescaffold/active_scaffold/issues/249\nWe needed to add `<%# encoding: utf-8 %>` to js files, but didn't need that in 3.2.12.\n", "created_at": "2013-03-19 20:04:47", "user": 151885, "id": 15139579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15139766", "text": "@nlalonde this is related with #9498. Please follow the right issue\n", "created_at": "2013-03-19 20:08:37", "user": 47848, "id": 15139766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15142985", "text": "I can confirm the regression is unrelated to the security fixes. In Discourse I split out the security fixes into a monkey patch: https://github.com/discourse/discourse/blob/master/lib/freedom_patches/rails_security_fixes.rb and the performance issues do not occur.\n", "created_at": "2013-03-19 21:03:29", "user": 17538, "id": 15142985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15153238", "text": "We are seeing the same regression, and have pinned down to this method from Sprockets: https://github.com/rails/rails/blob/v3.2.13/actionpack/lib/sprockets/helpers/rails_helper.rb#L173-L178\n", "created_at": "2013-03-20 01:02:21", "user": 31945, "id": 15153238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15153993", "text": "I believe it's an issue with Sprockets' resolver: https://github.com/sstephenson/sprockets/blob/v2.2.2/lib/sprockets/trail.rb#L70-L83\n\nRails `.12` resolves the asset paths manually whereas `.13` tries to use Sprockets resolver, which then throws an exception.\n\nDiff:\n\n``` diff\n         def rewrite_extension(source, dir, ext)\n-          source_ext = File.extname(source)\n-          if ext && source_ext != \".#{ext}\"\n-            if !source_ext.empty? && (asset = asset_environment[source]) &&\n-                  asset.pathname.to_s =~ /#{source}\\Z/\n-              source\n-            else\n-              \"#{source}.#{ext}\"\n-            end\n-          else\n+          source_ext = File.extname(source)[1..-1]\n+\n+          if !ext || ext == source_ext\n+            source\n+          elsif source_ext.blank?\n+            \"#{source}.#{ext}\"\n+          elsif exact_match_present?(source)\n             source\n+          else\n+            \"#{source}.#{ext}\"\n           end\n         end\n+\n+        def exact_match_present?(source)\n+          pathname = asset_environment.resolve(source)\n+          pathname.to_s =~ /#{Regexp.escape(source)}\\Z/\n+        rescue Sprockets::FileNotFound\n+          false\n+        end\n```\n", "created_at": "2013-03-20 01:32:22", "user": 31945, "id": 15153993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15163892", "text": "@fredwu, good job :thumbsup: \n", "created_at": "2013-03-20 08:55:07", "user": 52580, "id": 15163892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15182453", "text": "yep experiencing this as well.\n", "created_at": "2013-03-20 15:26:54", "user": 134488, "id": 15182453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15205512", "text": "Same here. I've reverted to using @eviltrout's monkey patches. Page loads in development went from about 4 seconds to around 250 ms.\n", "created_at": "2013-03-20 21:42:14", "user": 172627, "id": 15205512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15205993", "text": "Thanks @fredwu\n", "created_at": "2013-03-20 21:51:10", "user": 338470, "id": 15205993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15209309", "text": "+1\n", "created_at": "2013-03-20 22:59:01", "user": 569702, "id": 15209309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15211078", "text": "Closing as I merged in @fredwu's patch.  Thanks! :D\n", "created_at": "2013-03-20 23:42:01", "user": 3124, "id": 15211078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15386653", "text": "I understand this patch will be released in 3.2.14... is there any release scheduling for 3.2.14? Thanks.\n", "created_at": "2013-03-25 10:44:21", "user": 1148215, "id": 15386653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15398301", "text": "No. If you need it use the 3-2-stable branch\n", "created_at": "2013-03-25 15:03:33", "user": 47848, "id": 15398301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15400160", "text": "thanks for the answer.\n", "created_at": "2013-03-25 15:32:15", "user": 1148215, "id": 15400160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15487868", "text": "Did the change, which triggered the regression, fix a bug or security issue? Otherwise it should not be included in a bug fix only release (3.2.x), just as the \"Maintenance policy for Ruby on Rails\" states. I assume this would save a lot of headaches and wasted time.\n", "created_at": "2013-03-26 20:53:59", "user": 175494, "id": 15487868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16176437", "text": "I agree with @gucki , upgrades to maintenance versions should be much smoother than they have been recently. Thanks\n", "created_at": "2013-04-10 14:12:15", "user": 9195, "id": 16176437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16176462", "text": "I'm with @gucki here.\n", "created_at": "2013-04-10 14:12:46", "user": 16653, "id": 16176462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16176977", "text": "I agree with @gucki\n", "created_at": "2013-04-10 14:21:14", "user": 247116, "id": 16176977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16177414", "text": "I agree with @gucki, it is a bug fix, this is why it was included in a bug fix release :wink:\n", "created_at": "2013-04-10 14:27:17", "user": 47848, "id": 16177414}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Thanks Mike for fixing this, I ran into the same issue on rails 3.2 and it would be nice to get this into 3.2.14\n", "labels": [], "number": 9804, "updated_at": "2014-07-01 05:43:56", "user": 205423, "closed_at": "2013-03-19 14:59:16", "id": 12182578, "title": "Backport #9347 to rails 3.2", "url": "https://api.github.com/repos/rails/rails/issues/9804", "created_at": "2013-03-19 14:33:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15119289", "text": "It would raise an exception, see https://github.com/rails/rails/issues/9269\n", "created_at": "2013-03-19 14:58:02", "user": 205423, "id": 15119289}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While using Rails 4.0.0.beta1 on Ruby 2.0.0p0 (2013-02-24 revision 39474) in a freshly generated empty rails app without any plugins or gems, the following code will throw an ArgumentError exception:\n\n``` ruby\nclass Idea < ActiveRecord::Base\n\n  with_options dependent: :destroy do |d|\n    d.has_many :posts, -> { order('id ASC') }\n  end\n\nend\n```\n\nThe exception:\n\nhttps://gist.github.com/isabanin/5197209\n\nIt looks like ActiveSupport::OptionMerger breaks because of the lambda argument in has_many. The following code works fine:\n\n``` ruby\nclass Idea < ActiveRecord::Base\n\n  has_many :posts, -> { order('id ASC') }, dependent: :destroy\n\nend\n```\n", "labels": ["activesupport"], "number": 9805, "updated_at": "2014-04-03 20:14:27", "user": 5837, "closed_at": "2014-04-03 20:14:27", "id": 12186566, "title": "ArgumentError when trying to use has_many with lambda block within with_options", "url": "https://api.github.com/repos/rails/rails/issues/9805", "created_at": "2013-03-19 15:49:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15168149", "text": "It expects the `Proc` to return a `Hash` to merge options with, what is **wrong** with new API (in `ActiveSupport::OptionMerger#method_missing`):\n\n``` ruby\n        if arguments.last.is_a?(Proc)\n          proc = arguments.pop\n          arguments << lambda { |*args| @options.deep_merge(proc.call(*args)) }\n```\n\nTry a quick fix for now (provide an empty `Hash` to merge with):\n\n``` ruby\n  with_options dependent: :destroy do |d|\n    d.has_many :posts, -> { order('id ASC') }, {}\n  end\n```\n", "created_at": "2013-03-20 10:44:47", "user": 1022687, "id": 15168149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15284712", "text": "As @softpro already mentioned the code from 9eaa0a34 breaks this functionality. I think we might consider reverting this commit as lambdas are used a lot for lazy evaluation.\n\n/cc @dhh \n", "created_at": "2013-03-22 07:44:10", "user": 5402, "id": 15284712}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "After upgrading to 3.2.13 my test suite started to fail in tests that check how many queries are issued for certain actions.\n\nI have the following setup (simplified from my proprietary app):\n\n``` ruby\nclass A < ActiveRecord::Base\n  belongs_to :m_b, inverse_of: :a, class_name: 'M::B', foreign_key: :m_b_id\n  has_one :c, :through => :m_b\nend\n\nclass M::B < ActiveRecord::Base\n  belongs_to :m_d, class_name: 'M::D'\n  has_one :c, :as => :thing\nend\n```\n\nThis is the test query code to expose the regression:\n\n``` ruby\nA.includes(:m_b => :m_d).includes(:c).limit(10).map { |a| a.m_b.m_d.to_s }\n```\n\nOn 3.2.12 this gives me 4 queries (one for each model as you would expect). On 3.2.13 m_d is not eager loaded and for each iteration of a I get queries:\n\n```\n  M::B Load (0.3ms)  SELECT \"m_b\".* FROM \"m_b\" WHERE \"m_b\".\"id\" = 20 LIMIT 1\n  M::D Load (0.3ms)  SELECT \"m_d\".* FROM \"m_d\" WHERE \"m_d\".\"id\" = 11 LIMIT 1\n```\n", "labels": ["activerecord", "regression"], "number": 9806, "updated_at": "2013-03-22 14:29:28", "user": 34627, "closed_at": "2013-03-22 14:29:28", "id": 12186769, "title": "Rails 3.2.13 regression in ActiveRecord::Relation#includes and has_one :through", "url": "https://api.github.com/repos/rails/rails/issues/9806", "created_at": "2013-03-19 15:53:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15123584", "text": "Reading through CHANGELOG.md for activerecord #8423 seemed the best candidate for the cause. @senny what do you think?\n", "created_at": "2013-03-19 16:04:13", "user": 34627, "id": 15123584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15246776", "text": "mmm I'm not sure. Can you produce a running example using [this gist](https://gist.github.com/neerajdotname/5187092) as a foundation?\n", "created_at": "2013-03-21 15:50:56", "user": 5402, "id": 15246776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15293400", "text": "@senny https://gist.github.com/betelgeuse/5220770\n\npass:\nACTIVE_RECORD_VERSION=3.2.12 ruby with_published_versions.rb \nfail:\nACTIVE_RECORD_VERSION=3.2.13 ruby with_published_versions.rb\n", "created_at": "2013-03-22 12:07:08", "user": 34627, "id": 15293400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15294748", "text": "thanks @betelgeuse ! I could confirm the issue. It does not exist on master but was caused by this backport: #9322 I'll look into it.\n", "created_at": "2013-03-22 12:46:17", "user": 5402, "id": 15294748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15298481", "text": "@betelgeuse I submitted a PR to fix the regression: #9870 \n", "created_at": "2013-03-22 14:10:30", "user": 5402, "id": 15298481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15299484", "text": "@betelgeuse the patch is merged into `3-2-stable`. You can try to run your code against it and see if it behaves as expected. I'm closing the issue for now.\n", "created_at": "2013-03-22 14:29:28", "user": 5402, "id": 15299484}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Remove unused payloads in blocks in caching instrumentation\n", "labels": [], "number": 9807, "updated_at": "2016-02-22 14:25:34", "user": 567626, "closed_at": "2013-03-19 20:48:28", "id": 12189624, "title": "remove unused payloads in blocks in caching instrumentation", "url": "https://api.github.com/repos/rails/rails/issues/9807", "created_at": "2013-03-19 16:41:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Running a query via `select_all` on a custom mysql2 connection is throwing a `TypeError: can't dup Symbol` in `ActiveRecord::Result` line 33.\n\nThe mysql2 connection is being made via the following:\n\n```\nActiveRecord::Base.mysql2_connection(\n    :host => Settings.import_db[:hostname],\n    :username => Settings.import_db[:username],\n    :password => Settings.import_db[:password],\n    :database => Settings.import_db[:database],\n    :port => Settings.import_db[:port],\n    :reconnect => true\n)\n```\n\nIssue present in 3.2.13\n", "labels": ["activerecord", "needs feedback"], "number": 9808, "updated_at": "2014-04-04 23:10:18", "user": 117200, "closed_at": "2014-04-04 23:10:18", "id": 12190635, "title": "ActiveRecord TypeError: can't dup Symbol", "url": "https://api.github.com/repos/rails/rails/issues/9808", "created_at": "2013-03-19 17:02:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15134704", "text": "Are you specifying your host, username, password, database, or port as a symbol? Without exposing sensitive information can you run\n\n```\n$ bundle open activerecord\n```\n\nThen modify line 33 to be\n\n```\ncolumns = @columns.map { |c| \n  puts c.inspect\n  c.dup.freeze \n}\n```\n\nThen try to initialize a DB connection and paste the output here? Don't forget to change that line back when done.\n", "created_at": "2013-03-19 18:40:41", "user": 59744, "id": 15134704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16101101", "text": "@DEfusion is this still a problem? Did the advice from @schneems help?\n", "created_at": "2013-04-09 08:50:20", "user": 5402, "id": 16101101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17373594", "text": "I work with @DEfusion, and this is still a problem for us. We're communicating with a remote, non-Rails database via a custom mysql connection with symbolize_keys set like so:\n\n```\n    Mysql2::Client.default_query_options.merge!(\n        :symbolize_keys => true\n    )\n```\n\nI put a line similar to the one @schneems suggested. All of the output from Rails is arrays of strings like this:\n\n```\n[\"id\", \"account_id\", \"test\", \"created_at\", \"updated_at\", \"state\"]\n```\n\nWhile arrays from our remote db are of symbols like so:\n\n```\n[:id, :domain, :enabled]\n```\n\nI can fix this problem by changing the map to look like this:\n\n```\n      columns = @columns.map { |c| c.is_a?(Symbol) ? c : c.dup.freeze }\n```\n\nAnd I can submit a PR for that, but it's not clear to me that it's actually the best solution.\n", "created_at": "2013-05-03 00:46:53", "user": 49172, "id": 17373594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26210373", "text": "@muffinista could you provide the pull request so we can discuss the solution?\n", "created_at": "2013-10-13 02:43:16", "user": 47848, "id": 26210373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39620305", "text": "Closed as stale. If you think it is still an issue let us know\n", "created_at": "2014-04-04 23:10:17", "user": 47848, "id": 39620305}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9809, "updated_at": "2014-07-04 15:46:00", "user": 621238, "closed_at": "2013-03-19 17:36:02", "id": 12192160, "title": "Small changes in text with removal of whitespace", "url": "https://api.github.com/repos/rails/rails/issues/9809", "created_at": "2013-03-19 17:34:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15130449", "text": "The typo fixes are legitimate, the whitespace is not. We try not to touch formatting of code unless there's an actual reason to do so, as it obscures the git history.\n\nPlease either rebase to contain only the typos, or just push those typo fixes up to lifo/docrails, thanks.\n", "created_at": "2013-03-19 17:36:02", "user": 27786, "id": 15130449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15130645", "text": "Ok. I will push only typos to docrails. Thanks :)\n", "created_at": "2013-03-19 17:38:22", "user": 621238, "id": 15130645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15130812", "text": "Thank you for fixing them!\n", "created_at": "2013-03-19 17:41:11", "user": 27786, "id": 15130812}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Prepending a module to active record model breaks callbacks on the latest activerecord.\n### Environment\n- ruby 2.0.0-p0\n- activerecord 4.0.0.beta1\n### How to reproduce\n\n``` ruby\nrequire 'active_record'\n\nActiveRecord::Base.establish_connection \\\n  database: ':memory:',\n  adapter: 'sqlite3'\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\nend\n\nmodule Foo\nend\n\nclass User < ActiveRecord::Base\n  prepend Foo\nend\n\nUser.create!\n```\n### Exception\n\n```\nNoMethodError: undefined method `_run__4165263878188078007__validation__callbacks' for #<User id: nil>\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activemodel-4.0.0.beta1/lib/active_model/attribute_methods.rb:429:in `method_missing'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/attribute_methods.rb:131:in `method_missing'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activesupport-4.0.0.beta1/lib/active_support/callbacks.rb:78:in `run_callbacks'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activemodel-4.0.0.beta1/lib/active_model/validations/callbacks.rb:106:in `run_validations!'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activemodel-4.0.0.beta1/lib/active_model/validations.rb:271:in `valid?'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:70:in `valid?'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:78:in `perform_validations'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:57:in `save!'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/attribute_methods/dirty.rb:41:in `save!'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:275:in `block in save!'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:326:in `block in with_transaction_returning_status'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:201:in `block in transaction'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:209:in `within_new_transaction'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/connection_adapters/abstract/database_statements.rb:201:in `transaction'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:209:in `transaction'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:323:in `with_transaction_returning_status'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/transactions.rb:275:in `save!'\n  from ~/.rvm/gems/ruby-2.0.0-p0/gems/activerecord-4.0.0.beta1/lib/active_record/validations.rb:41:in `create!'\n  from (irb):19\n  from ~/.rvm/rubies/ruby-2.0.0-p0/bin/irb:16:in `<main>'\n```\n\nIs this a bug or such behaviour is normal?\n", "labels": ["activerecord"], "number": 9810, "updated_at": "2013-05-01 12:50:03", "user": 241633, "closed_at": "2013-03-19 22:52:51", "id": 12196474, "title": "NoMethodError on callbacks with prepended module", "url": "https://api.github.com/repos/rails/rails/issues/9810", "created_at": "2013-03-19 19:05:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15138953", "text": "This seems a bug for me\n", "created_at": "2013-03-19 19:53:57", "user": 47848, "id": 15138953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15148692", "text": "Thanks for the reply, but it seems to be a ruby issue:\n\n``` ruby\nclass Record\n  prepend Module.new\n\n  def protected_method\n  end\n\n  protected :protected_method\nend\n\nrecord = Record.new\nrecord.respond_to?(:protected_method, true) #=> true\nrecord.send(:protected_method) #=> NoMethodError: undefined method `protected_method ...\n```\n\nbut:\n\n``` ruby\nclass Record\n  prepend Module.new\n\n  protected\n\n  def protected_method\n  end\nend\n\nrecord = Record.new\nrecord.respond_to?(:protected_method, true) #=> true\nrecord.send(:protected_method) #=> nil\n```\n", "created_at": "2013-03-19 22:52:50", "user": 241633, "id": 15148692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17279836", "text": "Ruby bug tracker:\n- https://bugs.ruby-lang.org/issues/8005\n- https://bugs.ruby-lang.org/issues/8127 (dupe)\n\nThis was fixed in ruby-trunk after ruby 2.0.0-p0, should land in the next patch release.\n", "created_at": "2013-05-01 12:50:03", "user": 15759, "id": 17279836}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9811, "updated_at": "2014-06-26 19:56:38", "user": 6399, "closed_at": "2013-03-19 19:17:53", "id": 12196884, "title": "fix sentence [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9811", "created_at": "2013-03-19 19:14:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This started showing up in Rails 3.2.12.\n\nThe problem in our apps is that we use multiple connections.  The main one, defined in database.yml is (in this case Sqlite3, my local env), however other AR objects in our environment are pointed at MSSQL via establish_connection and TinyTDS.\n\nSo here's the problem:\n\n``` ruby\nMyObject < ActiveRecord::Base\n  establish_connection(...)  # TinyTDS stuff here to MSSQL\n  set_table(\"BEST_TABLE\")   # legacy table \n...\nend\n\n> MyObject.where( :field => \"foo\" )\nActiveRecord::StatementInvalid: Could not find table 'BEST_TABLE' \nactiverecord-3.2.12/lib/active_record/connection_adapters/sqlite_adapter.rb:472:in `table_structure'\nactiverecord-3.2.12/lib/active_record/connection_adapters/sqlite_adapter.rb:346:in `columns'\nactiverecord-3.2.12/lib/active_record/connection_adapters/schema_cache.rb:12:in `block in initialize'\nactiverecord-3.2.12/lib/active_record/connection_adapters/schema_cache.rb:16:in `yield'\nactiverecord-3.2.12/lib/active_record/connection_adapters/schema_cache.rb:16:in `default'\nactiverecord-3.2.12/lib/active_record/connection_adapters/schema_cache.rb:16:in `block in initialize'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:56:in `yield'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:56:in `default'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:56:in `block in build_from_hash'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:4:in `each'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:4:in `map'\nactiverecord-3.2.12/lib/active_record/relation/predicate_builder.rb:4:in `build_from_hash'\nactiverecord-3.2.12/lib/active_record/relation/query_methods.rb:327:in `build_where'\nactiverecord-3.2.12/lib/active_record/relation/query_methods.rb:136:in `where'\nactiverecord-3.2.12/lib/active_record/querying.rb:9:in `where'\n```\n\nBut it's there, it exists, table exists, everything's fine.  And why is the sqlite_adapter in the backtrace when the connection on this AR object is to MSSQL? What's going on?\n\nSo let's figure out what's going on with pry:\n\n``` ruby\n#From: activerecord-3.2.12/lib/active_record/relation/predicate_builder.rb @ line 56 ActiveRecord::PredicateBuilder.build_from_hash:\n\n    51:           when Class\n    52:             # FIXME: I think we need to deprecate this behavior\n    53:             attribute.eq(value.name)\n    54:           when Integer, ActiveSupport::Duration\n    55:             # Arel treats integers as literals, but they should be quoted when compared with strings\n => 56:             column = engine.connection.schema_cache.columns_hash[table.name][attribute.name.to_s]\n    57:             attribute.eq(Arel::Nodes::SqlLiteral.new(engine.connection.quote(value, column)))\n    58:           else\n    59:             attribute.eq(value)\n    60:           end\n    61:         end\n\n[3] pry(ActiveRecord::PredicateBuilder)> MyObject.connection.raw_connection\n=> #<TinyTds::Client:0x00000006784820\n @query_options=\n  {:as=>:hash,\n   :symbolize_keys=>false,\n   :cache_rows=>true,\n   :timezone=>:local,\n   :empty_sets=>true}>\n[4] pry(ActiveRecord::PredicateBuilder)> engine.connection.raw_connection\n=> #<SQLite3::Database:0x00000006e26f98\n @authorizer=nil,\n @busy_handler=nil,\n @collations={},\n @encoding=#<Encoding:UTF-8>,\n @functions={},\n @readonly=false,\n @results_as_hash=true,\n @tracefunc=nil,\n @type_translation=nil>\n[5] pry(ActiveRecord::PredicateBuilder)> \n```\n\nOpps!  engine isn't right... but who sets engine?\n\nHere's the solution:\n\n``` ruby\nmodule ActiveRecord\n  module QueryMethods\n\n    # from activerecord-3.2.12/lib/active_record/relation/query_methods.rb:321\n    def build_where(opts, other = [])\n      case opts\n      when String, Array\n        [@klass.send(:sanitize_sql, other.empty? ? opts : ([opts] + other))]\n      when Hash\n        attributes = @klass.send(:expand_hash_conditions_for_aggregates, opts)\n        # original line:\n        # PredicateBuilder.build_from_hash(table.engine, attributes, table)\n        #  \n        # table.engine.connection == Sqlite3       INCORRECT!\n        # self.connection == TinyTDS!!             CORRECT!\n        #\n        # new line:\n        PredicateBuilder.build_from_hash(self, attributes, table)\n      else\n        [opts]\n      end\n    end\n\n  end\nend\n```\n\nI'm in the process of creating a test case for this (maybe the above fix) and a pull request, but I wanted to get eyes on this sooner rather than later.\n\nI did some digging in the existing issues but couldn't find an exact match.  Let me know if it's a dup.\n", "labels": ["activerecord", "needs feedback"], "number": 9812, "updated_at": "2013-03-20 15:45:20", "user": 73004, "closed_at": "2013-03-20 14:53:13", "id": 12200717, "title": "'where' clauses break with multiple db connections", "url": "https://api.github.com/repos/rails/rails/issues/9812", "created_at": "2013-03-19 20:42:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15142473", "text": "Is this occurring with Rails 3.2.13?\n", "created_at": "2013-03-19 20:54:12", "user": 47848, "id": 15142473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15155840", "text": "long story short, I'm not sure until I can test at work tomorrow.\n\nThe test case I just pushed is pretty rough, but it works (doesn't fail), which means that the problem may be in the mix-and-match of activerecord-sqlserver and 3.2.12.  So I have to keep hunting for now.  Will update tomorrow with more info.\n", "created_at": "2013-03-20 02:54:15", "user": 73004, "id": 15155840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180260", "text": "@rafaelfranca this problem doesn't occur in 3.2.13.  I'm sorry I didn't check the latest release before investigating -- we just did a security patch update to the latest rails (3.2.12) a couple weeks ago, so I missed it.  Thanks!\n", "created_at": "2013-03-20 14:53:13", "user": 73004, "id": 15180260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180337", "text": "Thank you for confirming it\n", "created_at": "2013-03-20 14:54:30", "user": 47848, "id": 15180337}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "We're trying to upgrade to 3.2.13 from 3.2.12 and encountered a strange bug with chained scopes for ActiveRecord classes that have a default scope.\n\nUnder 3.2.13, the chained scope `Animal.where(:id => 12345).find(Animal.first.id)` generates the SQL below, which returns the first Animal, while it should not find anything.\n`SELECT \"animals\".* FROM \"animals\" WHERE \"animals\".\"alive\" = 't' AND \"animals\".\"id\" = 11 LIMIT 1`\n\nUnder 3.2.12 it generates the correct SQL:\n`SELECT \"animals\".* FROM \"animals\" WHERE \"animals\".\"alive\" = 't' AND \"animals\".\"id\" = 12345 AND \"animals\".\"id\" = 10 LIMIT 1`\n\n[Gist showing problem](https://gist.github.com/pivotal-chorus/5200366)\n", "labels": ["activerecord", "regression"], "number": 9813, "updated_at": "2014-09-08 17:40:02", "user": 1163290, "closed_at": "2014-03-29 22:01:32", "id": 12203419, "title": "default_scope breaks chained scopes in 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9813", "created_at": "2013-03-19 21:38:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15147199", "text": "We did some digging and found that https://github.com/rails/rails/commit/f980289fd2c1b9073a94b5d49b780a49f5e2933c is the culprit. The commit prior works but this one fails our spec.\n", "created_at": "2013-03-19 22:21:25", "user": 1163290, "id": 15147199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15153164", "text": "default_scope has always been disaster-prone.  References: http://pragdave.blogs.pragprog.com/pragdave/2012/03/be-careful-using-default_scope-and-order.html http://stackoverflow.com/questions/3944019/default-scope-breaks-updatedeletedestroy-all-in-some-cases etc.  After some near accidents myself (caught during testing), I've banished the use of default_scope from apps that I support.\n\nSo, in addition to fixing this bug, I hope the Rails team either implements default_scope properly or deprecates it.  The current state, where it kinda works with simple queries but blows up horribly with more complex ones, is just not supportable.\n", "created_at": "2013-03-20 00:59:14", "user": 1776, "id": 15153164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15156456", "text": "This is not specific to default_scope. I get the same error combining a has_many relation with an ordinary named scope. Here is a project with just two models demonstrating the issue:\n\nhttps://github.com/pjungwir/scope-error\n", "created_at": "2013-03-20 03:21:54", "user": 660353, "id": 15156456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15162246", "text": "I did some digging and it looks like the change in [predicate_builder.rb](https://github.com/rails/rails/blob/f980289fd2c1b9073a94b5d49b780a49f5e2933c/activerecord/lib/active_record/relation/predicate_builder.rb#L23) caused it.\n\n``` ruby\nattribute = table[column]\n```\n\nWhen where is passed a hash condition it ends up being passed to PredicateBuilder.build_from_hash which creates an Arel::Node with the name property set as a string. When the finders and association finders generate their scopes they pass Arel nodes which are created with string names as well, like in [find_one](https://github.com/rails/rails/blob/f980289fd2c1b9073a94b5d49b780a49f5e2933c/activerecord/lib/active_record/relation/finder_methods.rb#L336). Whereas in 3.2.12 where was creating Arel nodes with name properties set as symbols and the finders behaved in the same manor as they do currently. \n\nSo when default scopes are used and [SpawnMethods#merge](https://github.com/rails/rails/blob/f980289fd2c1b9073a94b5d49b780a49f5e2933c/activerecord/lib/active_record/relation/spawn_methods.rb#L42) merges all the scopes with the finder scope it rejects all but one.  \n\nThe code from SpawnMethods#merge\n\n``` ruby\nmerged_wheres = @where_values + r.where_values\n\nunless @where_values.empty?\n  # Remove duplicates, last one wins.\n  seen = Hash.new { |h,table| h[table] = {} }\n  merged_wheres = merged_wheres.reverse.reject { |w|\n    nuke = false\n    if w.respond_to?(:operator) && w.operator == :==\n      name              = w.left.name\n      table             = w.left.relation.name\n      nuke              = seen[table][name]\n      seen[table][name] = true\n    end\n    nuke\n  }.reverse\nend\n\nmerged_relation.where_values = merged_wheres\n```\n", "created_at": "2013-03-20 07:56:11", "user": 4408, "id": 15162246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15162592", "text": "The reason it worked before is that `Animal.find` constructs an Arel node with a string key whereas the `Animal.where` constructs an Arel node with a symbol key. The `merge` method then sees them as different keys so  leaves them alone. By not casting to a symbol in 3.2.13 the `where` now constructs a node with a string key so `merge` overwrites the first condition.\n", "created_at": "2013-03-20 08:10:33", "user": 6321, "id": 15162592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15170835", "text": "Is there a drawback to using #to_s instead of #to_sym? (considering patching my deployed copies this way for the time being)\n", "created_at": "2013-03-20 11:49:27", "user": 23479, "id": 15170835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15177332", "text": "I think this is the same issue mentioned in this github blog post: https://github.com/blog/1440-today-s-email-incident\n", "created_at": "2013-03-20 14:04:08", "user": 513255, "id": 15177332}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15243249", "text": "Isn't it related to #8511?\n", "created_at": "2013-03-21 14:57:09", "user": 137464, "id": 15243249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15246660", "text": "No, they are different issues\n", "created_at": "2013-03-21 15:49:17", "user": 47848, "id": 15246660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15251866", "text": "I put kind of a hash-key opinion piece on the tenderlove commit because I've seen this class of bug a lot lately (working with hashes with mixed key types and/or with_indifferent_access, especially involving merges and initializations with things such as wrapper objects).\n\nhttps://github.com/rails/rails/commit/5ff6012dda560ac2bf7d25cba11422edde7c11c3\n", "created_at": "2013-03-21 17:08:14", "user": 149133, "id": 15251866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16154236", "text": "Any updates, thoughts on a solution to this?\n", "created_at": "2013-04-10 04:03:22", "user": 368260, "id": 16154236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16302991", "text": "Not pretty, but as a work-around (based on original bug report), instead of doing:\n\n```\nAnimal.where(:id => 12345).find(Animal.first.id)\n```\n\nI now do:\n\n```\nAnimal.where(\"id = ?\", 12345).find(Animal.first.id)\n```\n\nSo in other words, if you have scopes that you don't want overritten by merging in other conditions later on, don't specify their conditions with hashes.\n", "created_at": "2013-04-12 16:34:13", "user": 118280, "id": 16302991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18159629", "text": "Looks like this is the last 3.2.13 regression -- any reason to not revert f980289fd2c1b9073a94b5d49b780a49f5e2933c? Nothing in that commit or this thread rationalizes why it is crucial.\n", "created_at": "2013-05-20 17:15:06", "user": 6097, "id": 18159629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18196905", "text": "@jjb, did you read the security vulnerability in the commit message of f980289?\n", "created_at": "2013-05-21 09:03:14", "user": 12062, "id": 18196905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18216868", "text": "@willbryant Oh right, missed that, whoops :)\n\nSo, what's to be done about this? 2 options I can think of:\n- in predicate_builder.rb, print a warning message if an incoming column name is a string, so users know where to check if their code has problems (this might be very noisy in some cases though, even where it isn't relevant)\n- make SpawnMethods#merge smarter, to accommodate the behavior that @kristopher described\n", "created_at": "2013-05-21 15:33:01", "user": 6097, "id": 18216868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18337784", "text": "Before we go any further, could you test out the behavior of the current 3-2-stable branch?  I'm not getting the same behavior when I try that latest (well, my fork of it) in our big app.  It may be something that has already been addressed in the post-3.2.13 commits.\n", "created_at": "2013-05-23 11:35:32", "user": 12062, "id": 18337784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18349225", "text": "I haven't experienced the bug myself. Looks like @pivotal-chorus and @pjungwir have, and maybe others on this thread?\n", "created_at": "2013-05-23 15:04:18", "user": 6097, "id": 18349225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18354221", "text": "Although this is a change on behavior, now it is consistent. I still not sure if we should fix it back to the old behavior. I'll investigate more this week.\n\n![](http://i.imgur.com/xJ7a6k2.jpg)\n", "created_at": "2013-05-23 16:17:48", "user": 47848, "id": 18354221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18354677", "text": "How do either of those \"with default scope\" behaviors make sense?  I may be misunderstanding the examples, but shouldn't all of these wind up with an empty result?  The intuition is that both where and find act as filters on the result.\n", "created_at": "2013-05-23 16:25:13", "user": 15970, "id": 18354677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18360298", "text": "@rafaelfranca: I agree with @wilpa that `find` and `find_by_id` should not cancel other conditions. Moreover, the presence of a default_scope should not (invisibly) change whether or not they cancel other conditions. So I'd say 3.2.13 is not consistent at all, because the behavior change with vs without a default_scope is quite surprising.\n\nI think consistency between `find` vs `find_by_id` is a red herring. We shouldn't break `find` too just because `find_by_id` is broken. The correct fix is for neither method to cancel other query conditions. (And this would keep them consistent, but without breaking the use of scopes.)\n\nPlease also bear in mind that it's not just default_scope, but any named scope as well.\n", "created_at": "2013-05-23 17:54:29", "user": 660353, "id": 18360298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18360818", "text": "> Please also bear in mind that it's not just default_scope, but any named scope as well\n\n@pivotal-chorus perhaps you can modify the title (and possibly body) of this ticket to reflect this?\n", "created_at": "2013-05-23 18:02:41", "user": 6097, "id": 18360818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18363808", "text": "I said now it is consistent across the all with default scope case, but I agree that it should always work like the without default scope.\n\nHowever, changing it to behaves like without default scope is another behavior change and can't be done in a stable release.\n\nUnfortunately it is not easy to fix it without breaking behavior, and we can't revert the behavior to be like <= 3.2.12 without being security vulnerable.\n", "created_at": "2013-05-23 18:48:20", "user": 47848, "id": 18363808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18364583", "text": "@willbryant I updated my [demo project](https://github.com/pjungwir/scope-error) with a test-against-rails-3.2-stable branch, and I still see the same bug there.\n", "created_at": "2013-05-23 19:00:30", "user": 660353, "id": 18364583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18365471", "text": "I was looking over the post from @kristopher about removing duplicates. At the risk of opening a can of worms, why do that at all?\n", "created_at": "2013-05-23 19:15:18", "user": 660353, "id": 18365471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18374824", "text": "+1 for changing defect title since doesn't really pertain to default scopes, but chained scoping with hashes, right? Upgraded from 3.2.12 to 3.2.13 in a branch and tests started failing. Root cause was this where a number of controllers scope down the available resources based on permissions and then the show/update find on that; e.g.\nbooks = Book.where(:id => [1, 2])\nbook = books.find(3) # in 3.2.12 would raise RecordNotFound, 3.2.13 happily finds\n\n**update**\nThis does appear isolated to default scopes. In my project we're using Paranoia gem which automatically adds a default scope. I spun up a new rails project and confirmed chaining worked fine w/o the default scope and it failed as soon as I added one.\n", "created_at": "2013-05-23 22:03:42", "user": 643921, "id": 18374824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18376692", "text": "Merging overwriting conditions rather than ANDing them is definitely dangerous and semantically broken, but I believe that has been fixed in Rails 4.  Personally I agree that default_scope should behave the same way as normal scopes, so the consistent behavior is in that sense better even if it is the wrong behavior - it's the behavior 3.2 and 3.1 have.\n\nSomething is different in my 3-2-stable branch though, I don't have the dodgy behavior:\n\n```\nirb(main):002:0> User.where(:id => 10).find(100)\n  User Load (0.3ms)  SELECT `users`.* FROM `users` WHERE `users`.`id` = 10 AND `users`.`id` = 100 LIMIT 1 /**/\n```\n\nNot sure why I'm seeing different behavior, I don't think any of my patches relate to this:\n\n629a1e8 Merge remote-tracking branch 'rails/3-2-stable' into 3-2-stable\n451e032 Merge tag 'v3.2.13' into 3-2-stable\ndd36a8a if a date is assigned to a timezone-unaware time attribute, interpret it the same way the string of it would be\nedcd50c if a date is assigned to a timezone-aware time attribute, interpret it the same way the string of it would be\nbe7dbe8 fix subclass override not renamed with e2d19d60.\n008c01f handle not only strings in date type cast\ndc77a0a Merge branch 'current_transaction_records_3-2-stable' into 3-2-stable\n0328f3a expose :remember_record_state => false option on transaction(), so applications that don't need state rollback (or after_commit/rollback hooks) can garbage collect the records during long transactions\n54b4b323 when the transactional fixtures keeps a database transaction alive without using the transaction method, don't retain references to all the records saved in the fixtures transaction once their subtransaction completes\n9bfcd02 Merge tag 'v3.2.8' into 3-2-stable\na0a37c2 Merge branch 'flash_must_not_load_session_on_every_request_3-2-stable' into 3-2-stable\n037804d fix the Flash middleware loading the session on every request (very dangerous especially with Rack::Cache), it should only be loaded when the flash method is called\n8340f0e Merge branch 'has_one_through_has_many_with_conditions_3-2-stable' into 3-2-stable\n9fc40f2 Revert c6db37e (Don't allow a has_one association to go :through a collection association) - this is very useful, the test cases showed an example (it is usually used with a condition that makes the has_one select only one from the has_many collection), and it works fine\nb2217a1 Merge branch 'controller_test_param_conversions_3-2-stable' into 3-2-stable\n5c66ddd after assign_parameters correctly stringifies fixnum params passed in controller test calls, don't overwrite them with the un-strified values.  existing tests did attempt to cover this, but bypassed the params hash which is affected.\n5853cb8 Merge branch 'association_collection_scoped_with_arguments_3-2-stable' into 3-2-stable\nbabde2e has_many associations should accept arguments to scoped, as they did in 2.3\n6952b08 Merge branch 'assigns_should_not_stringify_values_3-2-stable' into 3-2-stable\n6509584 assigns(:foo) should not convert @foo's keys to strings if it happens to be a hash\n09f5495 Merge branch 'old_finder_old_behaviour_3-2-stable' into 3-2-stable\n2f17076 only the new #select(...) query API should concatenate selects together, the old API using an argument hash for find(:all, :select => ...)/all(:select => ...) shouldn't.  it didn't on 2.3, and otherwise calls to some_has_many_through.all(:select => 'DISTINCT x') fail, because they try to 'SELECT some_has_many_throughs.*, DISTINCT x'.\n3011d24 Merge branch 'action_methods_3-2-stable' into 3-2-stable\nb9cf4b0 _conditional_callback_around methods should not be included in action_methods\n3fe1ee7 nil in a serialized column should serialize to NULL, as it did in all previous versions of Rails\n", "created_at": "2013-05-23 22:47:22", "user": 12062, "id": 18376692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18378679", "text": "I don't get the offending behavior on a fresh 3.2.13 project either.\n\n```\nwill@frypan:/tmp/foo$ be rails generate model user name:string\n      invoke  active_record\n      create    db/migrate/20130523233948_create_users.rb\n      create    app/models/user.rb\n      invoke    test_unit\n      create      test/unit/user_test.rb\n      create      test/fixtures/users.yml\nwill@frypan:/tmp/foo$ rake db:create db:migrate\ndb/development.sqlite3 already exists\n==  CreateUsers: migrating ====================================================\n-- create_table(:users)\n   -> 0.0008s\n==  CreateUsers: migrated (0.0009s) ===========================================\n\nwill@frypan:/tmp/foo$ bundle exec rails console\nLoading development environment (Rails 3.2.13)\nirb(main):002:0> User.where(:id => 10).find(100)\n  User Load (3.6ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 10 AND \"users\".\"id\" = ? LIMIT 1  [[\"id\", 100]]\nActiveRecord::RecordNotFound: Couldn't find User with id=100 [WHERE \"users\".\"id\" = 10]\nirb(main):002:0> User.where(:id => 10).find_by_id(100)\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 10 AND \"users\".\"id\" = 100 LIMIT 1\n=> nil\nirb(main):003:0> User.where('id' => 10).find_by_id(100)\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 10 AND \"users\".\"id\" = 100 LIMIT 1\n=> nil\nirb(main):004:0> User.where('id' => 10).find(100)\n  User Load (0.1ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 10 AND \"users\".\"id\" = ? LIMIT 1  [[\"id\", 100]]\nActiveRecord::RecordNotFound: Couldn't find User with id=100 [WHERE \"users\".\"id\" = 10]\n    from /Users/will/.rbenv/versions/ree-1.8.7-2012.02/lib/ruby/gems/1.8/gems/activerecord-3.2.13/lib/active_record/relation/finder_methods.rb:343:in `find_one'\n    from /Users/will/.rbenv/versions/ree-1.8.7-2012.02/lib/ruby/gems/1.8/gems/activerecord-3.2.13/lib/active_record/relation/finder_methods.rb:314:in `find_with_ids'\n    from /Users/will/.rbenv/versions/ree-1.8.7-2012.02/lib/ruby/gems/1.8/gems/activerecord-3.2.13/lib/active_record/relation/finder_methods.rb:107:in `find'\n    from (irb):4\n```\n", "created_at": "2013-05-23 23:42:10", "user": 12062, "id": 18378679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18386431", "text": "Multiple calls to [where](https://github.com/rails/rails/blob/3-2-13/activerecord/lib/active_record/relation/query_methods.rb#L136) and find in the same scope don't cause a merge so the behavior is identical in 3.2.12 and 3.2.13\n\n``` ruby\nLoading development environment (Rails 3.2.12)\napp > User.where(:id => 1).where(:id => 2).where(:id => 3)\n  User Load (0.4ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 1 AND \"users\".\"id\" = 2 AND \"users\".\"id\" = 3\n\nLoading development environment (Rails 3.2.13)\napp > User.where(:id => 1).where(:id => 2).where(:id => 3)\n  User Load (0.4ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 1 AND \"users\".\"id\" = 2 AND \"users\".\"id\" = 3\n```\n\nwith_scope causes a scope merge in the same way default scope does so you can see the different merging semantics. \n\n### 3.2.12\n\n``` ruby\nLoading development environment (Rails 3.2.12)\napp > User.with_scope(find: User.where(:id => 1)) { User.with_scope(find: User.where(User.arel_table[:id].eq(2))) { User.find_by_id(3) } }\n  User Load (0.4ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 2 AND \"users\".\"id\" = 3 LIMIT 1\n\napp > User.with_scope(find: User.where(:id => 1)) { User.with_scope(find: User.where(User.arel_table['id'].eq(2))) { User.find_by_id(3) } }\n  User Load (0.5ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 1 AND \"users\".\"id\" = 2 AND \"users\".\"id\" = 3 LIMIT 1\n```\n\n### 3.2.13\n\n``` ruby\nLoading development environment (Rails 3.2.13)\napp > User.with_scope(find: User.where(:id => 1)) { User.with_scope(find: User.where(User.arel_table[:id].eq(2))) { User.find_by_id(3) } }\n  User Load (0.5ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 1 AND \"users\".\"id\" = 2 AND \"users\".\"id\" = 3 LIMIT 1\n\napp > User.with_scope(find: User.where(:id => 1)) { User.with_scope(find: User.where(User.arel_table['id'].eq(2))) { User.find_by_id(3) } }\n  User Load (0.5ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"id\" = 2 AND \"users\".\"id\" = 3 LIMIT 1\n```\n", "created_at": "2013-05-24 04:49:15", "user": 4408, "id": 18386431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18410172", "text": "I updated my orinal comment - it does appear to be related to default scopes - forgot we had Paranoia gem which auto-adds the scope. Confirmed in simple rails app that model w/\n\n```\nclass Book < ActiveRecord::Base\n  default_scope where(:id => [1,2])\nend\n\nbs = Book.all #  SELECT \"books\".* FROM \"books\" WHERE \"books\".\"id\" IN (1, 2)\nbs.find(3) # SELECT \"books\".* FROM \"books\" WHERE \"books\".\"id\" = ? LIMIT 1  [[\"id\", 3]]\n```\n\nin 3.2.12 the default scope was respected.\n", "created_at": "2013-05-24 15:01:25", "user": 643921, "id": 18410172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18446105", "text": "Ah, that's interesting - so @kristopher, your results and mine are different to those posted by @rafaelfranca.\n", "created_at": "2013-05-25 12:04:58", "user": 12062, "id": 18446105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19355675", "text": "Hi everyone, what's the status on this issue (will it be fixed on 3.2.14, or just leave as-is)? Also, what's the recommended approach dealing with chained scopes when upgrading an app to 3.2.13?\n", "created_at": "2013-06-12 21:09:00", "user": 337175, "id": 19355675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19916809", "text": "@willbryant @kristopher @rafaelfranca Could one of you summarize the situation?\n\nIt's very disapointing to see no further participation from @pivotal-chorus.\n", "created_at": "2013-06-24 16:04:30", "user": 6097, "id": 19916809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19919777", "text": "We stand by the original bug report, it looked like others were able to reproduce the problem with `find` canceling other conditions.  We have a workaround in our code (we basically stopped using default scopes when part of the scope might be cancelled), so have not pursued the issue further.\n", "created_at": "2013-06-24 16:52:09", "user": 1163290, "id": 19919777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19920257", "text": "The least disruptive workaround I've seen is to change this:\n\n```\nwhere(:foo => 'bar')\n```\n\nto this:\n\n```\nwhere(\"foo = ?\", 'bar')\n```\n\nThis keeps your condition opaque to the code that permits only one test per column.\n\nI get the sense we're not going to see a resolution for this except in Rails 4.\n", "created_at": "2013-06-24 16:59:17", "user": 660353, "id": 19920257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19920813", "text": "> I get the sense we're not going to see a resolution for this except in Rails 4.\n\nsame feeling here. following this thread much like Chrome's vary header bug... lots of fun and yet very sad =(\n", "created_at": "2013-06-24 17:08:02", "user": 513255, "id": 19920813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19932395", "text": "> I get the sense we're not going to see a resolution for this except in Rails 4.\n\nEven on Rails 4 it is hard to change this behavior. The behavior after 3.2.13 is at least consistent although I agree it is wrong. But, changing this behavior again will add another backward incompatible change that we don't want to add deliberately in a stable release.\n\nMaybe we can fix it for 4.1, unless we have a better idea how to fix it without adding another backward incompatible change.\n", "created_at": "2013-06-24 20:11:53", "user": 47848, "id": 19932395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19934625", "text": "my concern is having to go through my entire app to look for instances of where the problem might be... am i wrong that this is non-trivial?\n", "created_at": "2013-06-24 20:47:14", "user": 6097, "id": 19934625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19935017", "text": "Yes, this is non-trivial, but unfortunately I can't think about any way to change this behavior again without adding back the security role or braking again the behavior.\n", "created_at": "2013-06-24 20:53:23", "user": 47848, "id": 19935017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19935159", "text": "It seems like the current behavior is unexpected, undocumented, and undesirable.  The number of people relying on this behavior is probably zero.\n\nFix it in 4.1, and 3.2stable, and add something to the change log.\n", "created_at": "2013-06-24 20:55:23", "user": 16798, "id": 19935159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19935171", "text": "It'd be better to break apps loudly than to leave a giant landmine sitting there waiting to detonate the unwary (or even the highly wary).\n", "created_at": "2013-06-24 20:55:32", "user": 15970, "id": 19935171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19936026", "text": "I'll add my vote to fixing it even if it is backwards-incompatible with 3.2.13. After all, a fix would _restore_ backwards compatibility with 3.2.{1-12}.\n", "created_at": "2013-06-24 21:08:59", "user": 660353, "id": 19936026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19938729", "text": "But will break the behavior of the `find_by_*` using `default_scopes`. If this was easier we already had fixed it.\n\nI'm leaving this discussion. If anyone want to try to fix it without adding back the security role, please go ahead.\n", "created_at": "2013-06-24 21:52:21", "user": 47848, "id": 19938729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19938840", "text": "> The number of people relying on this behavior is probably zero.\n\nI thought this many times before, but you will be surprise how people like to rely on broken behavior, even knowing the behevior is wrong.\n", "created_at": "2013-06-24 21:54:05", "user": 47848, "id": 19938840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19946094", "text": "So is the 3.2.13 behaviour consistent with 4.0 now?\n\nThe community has been promoting `where(x: 'y').find(100)` instead of `find_by_id` for quite a while now, so personally I'd prefer to have the inconsistency in `find_by` rather than `find`, if that's what the question is down to. (I'm sure I'm not understanding all the issues here.)\n", "created_at": "2013-06-25 00:39:59", "user": 4278, "id": 19946094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19954337", "text": "My personal preference is for Active Record not overwriting previous conditions when adding new ones even if this means you end up with lolqueries like this:\n\n``` irb\n>> Product.where(id: 1).find_by_id(2)\n=> \"SELECT `products`.* FROM `products` WHERE `products`.`product_id` = 1 AND `products`.`product_id` = 2 LIMIT 1\"\n```\n\nIf you chain `where` then we don't overwrite but we do when merging scopes, e.g:\n\n``` irb\n>> Product.where(:product_id => 1).where(:product_id => 2).to_sql\n=> \"SELECT `products`.* FROM `products`  WHERE `products`.`product_id` = 1 AND `products`.`product_id` = 2\"\n```\n\nthis fact means that relation merging can end up overwriting association conditions, e.g:\n\n``` irb\n>> Manufacturer.find(1).products.find_by_manufacturer_id(2)\n=> \"SELECT `manufacturers`.* FROM `manufacturers` WHERE `manufacturers`.`id` = 1 LIMIT 1\"\n=> \"SELECT `products`.* FROM `products` WHERE `products`.`manufacturer_id` = 2 LIMIT 1\"\n```\n\nThis is what bit GitHub when sending out their emails.\n\nAs @rafaelfranca pointed out we can't just revert since that would re-introduce the security problem which is why I'm in favour of never overwriting conditions - it's the safest thing to do. However this is a breaking change so introducing it in 3.2 will be a problem.\n", "created_at": "2013-06-25 05:40:16", "user": 6321, "id": 19954337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19964528", "text": "Yeah, overwriting is very broken IMHO.  It certainly doesn't fit with relational algebra, and leads to nasty surprises such as the github issue.  It is also completely inconsistent as https://github.com/rails/rails/issues/9813#issuecomment-19920257 shows.\n\nThe 3-2-stable behaviour is already different to 3.2.13 I think, and seems fixed to me?\n", "created_at": "2013-06-25 09:55:28", "user": 12062, "id": 19964528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20034744", "text": "3-2-stable is still inconsistent, as is 4.\n\nI'm think either solution is fine. \n\nEither always merging scopes, and always removing where clauses that don't make sense.\n\nOr, as pixeltrix mentioned above, never removing where clauses that don't make sense. I think I like this approach better as it actually removes code rather than adds it, and the API makes more sense. ActiveRecord then always gives you exactly what you ask for, rather than sometimes trying to make sense out of nonsense requests.\n\nI'd be happy to write the code for it, but I'd like to hear that this is the solution that is wanted first.\n", "created_at": "2013-06-26 09:04:40", "user": 16798, "id": 20034744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20058938", "text": "@jpalermo I agree your second option is better. I'd rather Rails do what I tell it. Scopes & other conditions might get cumulatively added to a query at various unrelated parts of the codebase, e.g. a scope to filter out soft-deleted items, another one for permissions, another one to limit the results to children of a particular model, another for searching based on params[:search_query]. A request could wind up composing all of these. So if the end result is no records, that's what I'd like. Having Rails decide my request was nonsensical and returning more records than I wanted would be surprising and frustrating (and as Github experienced, a security hole).\n\nThank you for your offer to do the work!\n", "created_at": "2013-06-26 15:57:19", "user": 660353, "id": 20058938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20088381", "text": "@jpalermo sounds pretty good\n\nPerhaps @tenderlove should chime in at this point, since he committed the code that started this whole discussion (f980289fd2c1b9073a94b5d49b780a49f5e2933c).\n", "created_at": "2013-06-26 23:48:56", "user": 6097, "id": 20088381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20171192", "text": "Sorry, I see it is still broken on 3-2-stable in the default_scope case, as you say.  It was the double-where case that got fixed.\n\nDefault_scope should be consistent with what happens when you have two where scopes, which means not overwriting.  But default_scope is generally a terrible idea and it will be used in bad ways, so yeah, hard to change in a stable series.\n", "created_at": "2013-06-28 05:30:34", "user": 12062, "id": 20171192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20177045", "text": "Just to clarify here this isn't confined to `default_scope` - any time scopes are merged using `ActiveRecord::Relation#merge` it can happen, e.g:\n\n``` irb\n>> Manufacturer.find(1).products.merge(Product.where(manufacturer_id: 2)).to_sql\n=> \"SELECT `products`.* FROM `products` WHERE `products`.`manufacturer_id` = 2\"\n```\n", "created_at": "2013-06-28 08:50:57", "user": 6321, "id": 20177045}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20949149", "text": "Will this be resolved for 3.2.14? I see it's not part of that milestone.\n", "created_at": "2013-07-15 02:19:30", "user": 4566, "id": 20949149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20949184", "text": "No. It will not. I don't believe there is a way to fix it without breaking backward compatibility or introducing security concerns.\n", "created_at": "2013-07-15 02:21:50", "user": 47848, "id": 20949184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20949501", "text": "@rafaelfranca. We had a number of issues ([as listed here](http://blog.tech-angels.com/post/46249485212/should-you-upgrade-rails-from-3-2-12-to-3-2-13)) when deploying 3.2.13 -- despite passing tests on the release candidates leading up to it. I see other regressions have been resolved. We'll take a closer look into how this specific one will impact us. \n\nWe don't use default_scope a  lot, and could stop using it altogether, but @pixeltrix comment indicates that this is a larger issue.\n", "created_at": "2013-07-15 02:38:04", "user": 4566, "id": 20949501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20983825", "text": "@rafaelfranca If someone wanted to submit a pull request fixing the issue, what is the specific behavior they need to preserve backward compatibility with? If Rails acted like 3.2.12 but didn't have the security vulnerability, would that be backwards compatible? Or is there something else? Is the bug introduced in 3.2.13 the behavior you want to preserve? Merging queries is important enough to me I might be willing to work on the issue myself if I understood what you're looking for. As it stands, this bug is _currently_ a security problem since it can wipe out query conditions (as Github discovered).\n", "created_at": "2013-07-15 16:59:56", "user": 660353, "id": 20983825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20992895", "text": "I'd be on board with helping to find a solution for 3.2-stable, pending agreement on the criteria. (Maybe for master too, but that branch should be free to fix things in whatever way seems best for the future: to keep it focused, my main concern here is restoring what was broken by a patch release.) \n\n@rafaelfranca what does \"without breaking backward compatibility\" mean? I would echo the +1s for keeping scope merging behaviour in line with <= 3.2.12, i.e. don't clobber any conditions.\n", "created_at": "2013-07-15 18:35:17", "user": 4278, "id": 20992895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20994393", "text": "> If Rails acted like 3.2.12 but didn't have the security vulnerability, would that be backwards compatible?\n\nYes, it will.\n\n>  what does \"without breaking backward compatibility\" mean?\n\nIf you try to fix this issue without adding back the security vulnerability you will see that the only way to do it is changing the long standing behavior where right-most conditions override the left-most, and this will break the backward compatibility.\n\nThis is what I mean.\n", "created_at": "2013-07-15 18:56:02", "user": 47848, "id": 20994393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21031198", "text": "> If you try to fix this issue without adding back the security vulnerability you will see that the only way to do it is changing the long standing behavior where right-most conditions override the left-most, and this will break the backward compatibility.\n\nJust to reiterate what @rafaelfranca said here - you can't re-introduce the behaviour of 3.2.12 because that would re-introduce the `to_sym` DoS issue and you can't change the scope merging behaviour because that would break backwards compatibility. The only way I see any possibility of a fix is to somehow mark conditions coming from an association and prevent them being overwritten - if someone wants to have a go at a PR for that it should be possible to merge it without too much breakage.\n", "created_at": "2013-07-16 09:39:02", "user": 6321, "id": 21031198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21065328", "text": "@pixeltrix Frankly we are more concerned about scoping resulting in an incident [like GitHub experienced](https://github.com/blog/1440-today-s-email-incident) or worse, than we are about a DoS symbol attack. That's why we are still on 3.2.12. Just my two cents. Hope there's an official response/followup.\n", "created_at": "2013-07-16 19:03:45", "user": 4566, "id": 21065328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21066071", "text": "3.2.14 will not include any fix for this issue.\n", "created_at": "2013-07-16 19:15:11", "user": 47848, "id": 21066071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21082854", "text": "I'm digging in and having a look at this... might need some hand-holding to understand all the edge cases. See the failing tests listed above, I think those are expectations of clobbered equalities which is what we're trying to fix here? Not sure if this is a good approach, so let me know.\n\nFailing test: `test_tree_is_not_traversed` not sure what this is actually meant to test.\n\nI'll inspect the other failing tests more closely and see if it's what we're actually expecting to see with this fix.\n", "created_at": "2013-07-16 23:52:07", "user": 4278, "id": 21082854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21128123", "text": "> If you try to fix this issue without adding back the security vulnerability you will see that the only way to do it is changing the long standing behavior where right-most conditions override the left-most, and this will break the backward compatibility.\n\nI see what you mean now. So how _should_ it even behave? Even in 3.2.12 for example:\n\n```\nclass Developer\n  scope :confused, -> { where(status: \"confused\") }\n\n  def self.sad; where(status: \"sad\") end\nend\n\nDeveloper.sad.confused.to_sql\n#=> WHERE `developers`.`status` = 'confused'\n\nDeveloper.confused.sad.to_sql\n#=> WHERE `developers`.`status` = 'confused' AND `developers`.`status` = 'sad'\n```\n\n([ActiveRecord scopes vs class methods](http://blog.plataformatec.com.br/2013/02/active-record-scopes-vs-class-methods/) goes into great depth but doesn't mention this.)\n\nI loathe breaking backward compatibility, but IMO the semantics are too ambiguous about when to expect a clobber or an \"AND\" based on the provenance of the left-hand vs. right-hand relations. (I'm going to need a lookup table to understand this.) Unless we change it to _never_ clobber where values, can we even get around this, whether for the simple case above, or for the merge/scoping/default_scope discussed in this ticket?\n", "created_at": "2013-07-17 17:06:51", "user": 4278, "id": 21128123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21128440", "text": "When does anyone expect a clobber?  I think the clobbering is the whole problem here.\n", "created_at": "2013-07-17 17:12:17", "user": 15970, "id": 21128440}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21128579", "text": "The clobbering is expected behavior since, I think, the beginning of Rails. This is a very old behavior.\n\n@avit I don't see how to get around of this.\n", "created_at": "2013-07-17 17:14:23", "user": 47848, "id": 21128579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21128800", "text": "Can you give an example of expected clobbering?\n", "created_at": "2013-07-17 17:17:38", "user": 15970, "id": 21128800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21620304", "text": "Frankly I don't think anyone _expects_ clobbering.  To any reasonable programmer, clobbering's existence in previous versions is a surprise, not an expectation.\n\nFor an example, see Rafael's comment https://github.com/rails/rails/issues/9813#issuecomment-18354221\n\nBefore 3.2.13 there's 1 gotcha.  After 3.2.13 there are 2 (the second is what precipitated this issue)\n", "created_at": "2013-07-26 13:26:39", "user": 11226, "id": 21620304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21634844", "text": "The behavior in that example is absurd and dangerous. If backwards compatibility is such a concern, I suggest adding deprecation notices when clobbering occurs, then removing the clobbering in the next release.\n", "created_at": "2013-07-26 17:15:23", "user": 15970, "id": 21634844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21665705", "text": "I believe most developers who doesn't dig deeply into ActiveRecord would expect the \"where\" clauses to act as filters which gets concatenated, instead of merged (clobbering). \n\n@rafaelfranca The safest choice is to concat conditions. In production, not showing data is way less damaging than unknowingly revealing sensitive data. \n\nIf there is really a need to merge the conditions, is it possible to introduce a method to flag the ActiveRecord::Relation for merging so that when Arel will do that when producing the final SQL? \n\nThe clobbering should be an opt-in, and not a default behavior.\n", "created_at": "2013-07-27 13:49:48", "user": 112809, "id": 21665705}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21702065", "text": "I agree with @seantan here; if I understood the issue properly, I see this could cause security issues in some apps, if there is an initial condition in place to do user/account/domain scoping in some fashion, then later down the chain, an unexpected security issue (like some of those we had beginning of this year) let the user/account scoping attribute be overwritten to escape the initial conditions.\n\nSure you can handle that, but having the clobbering enabled will (I believe) require to be a lot more careful. I would much prefer to see no data in that case.\n", "created_at": "2013-07-29 06:46:16", "user": 10141, "id": 21702065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21758333", "text": "The debate about what's preferred or expected for 3.2-stable is essentially closed: it should continue to work the same as it always has. If you want to make an argument for changing it in 4.1+, the place to discuss that is the rails-core mailing list.\n\nI think my [first proposed fix](https://github.com/rails/rails/issues/9813#ref-commit-5b34651) is a non-starter, but I have some ideas now that I've explored the problem and understand it better. I'll take another look.\n", "created_at": "2013-07-29 23:02:58", "user": 4278, "id": 21758333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21876111", "text": "I'm fine waiting for 4.1 for any real change. What I would like to see is a formal description of the current behaviour and the gotchas to watch for:\nhttps://groups.google.com/forum/#!topic/rubyonrails-core/aVxS8N_AyCU\n", "created_at": "2013-07-31 16:31:06", "user": 4566, "id": 21876111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22750857", "text": "So in the mean time, the only solution is to deprecate the use of default_scopes?\n", "created_at": "2013-08-16 07:06:46", "user": 671970, "id": 22750857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/29963869", "text": "Has there been any movement on this issue? This is very important to my team.\n", "created_at": "2013-12-06 05:04:13", "user": 14217, "id": 29963869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32026666", "text": "We have gotten a solution in rails 3.2.16 (I assume it will also work on 2.3.13 and above) where we removed the code that clobbers the conditions. We went for a solution that creates as little surprises as possible.\n\n``` ruby\n>> Rails.version\n=> \"3.2.16\"\n>> Profile.where(id: 1).where(id: 2).to_sql\n=> \"SELECT `profiles`.* FROM `profiles`  WHERE `profiles`.`id` = 1 AND `profiles`.`id` = 2 AND (profiles.deleted_at IS NULL)\"\n```\n- This IS a monkey patch\n- This is not fully tested (although it works great in our test suite)\n- It seems to behave like ActiveRecord 4.x\n\nYou can find it here: https://gist.github.com/Bertg/8351770\n", "created_at": "2014-01-10 13:24:28", "user": 1434, "id": 32026666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39010516", "text": "This was changed on Rails 4.1 so I'm closing. We can't change this behavior on a stable branch like 4.0 or 3.2 so I'm closing.\n", "created_at": "2014-03-29 22:01:32", "user": 47848, "id": 39010516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39159334", "text": "@Bertg Have you shipped the patch above, and found it to work as expected? We want to pick it up, but wondering how stable and tested it is. Thanks for putting it together...\n", "created_at": "2014-04-01 00:39:52", "user": 601660, "id": 39159334}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm creating a wrapper to allow the FileUpdateChecker to send out notifications about changes in the file system. \n\nThe `ChangedFile` class allows one to specify a path and a change type. This object can then be passed around with references, or can be converted to a hash so that its information can easily be passed around as payload in the Notifications system.\n\nThis change paves the way for creating a better FileUpdateChecker (see https://github.com/rails/rails/pull/9259) which will identify which files have been changed and send out a notification using the `ChangedFile` class implemented in this PR. However, its a much smaller change than https://github.com/rails/rails/pull/9259 so I'm hoping to incorporate it slowly.\n", "labels": ["activesupport"], "number": 9814, "updated_at": "2015-12-31 06:48:12", "user": 1075780, "closed_at": "2015-12-31 06:48:12", "id": 12203548, "title": "Creating a ChangedFile class for sending file system updates through Notifications", "url": "https://api.github.com/repos/rails/rails/issues/9814", "created_at": "2013-03-19 21:42:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31096582", "text": "Did anyone ever get a chance to review this?\n", "created_at": "2013-12-22 21:37:30", "user": 162976, "id": 31096582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31113942", "text": "@wangjohn : Thanks. I think this will need a changelog entry but I'm not sure whether this will be accepted so let's wait for some feedback.\n\n@JonRowe : Thanks for taking care of the old PRs!\n", "created_at": "2013-12-23 11:14:02", "user": 354185, "id": 31113942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31114009", "text": "No worries ;)\n", "created_at": "2013-12-23 11:15:54", "user": 162976, "id": 31114009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31115416", "text": "I don't think this will get accepted as is, as it adds an unused class to the codebase.\nI understand you did this in order to split up the big (and awesome) work you did in an other branch. But adding unused classes to the codebase increases debt and reduces overall code readability.\n\nI think you should talk directly with a core committer to see how you can work together to fasten this.\n", "created_at": "2013-12-23 11:55:09", "user": 9347, "id": 31115416}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is now done a different way:-\n\n``` ruby\n# Define all resources\nRails.application.reload_routes!\nall_routes = Rails.application.routes.routes\n\n# Populate a table of controller and action names and controller_actions.\n# Create Webmaster default role for each secure_resource.\nall_routes.routes.each do |route|\n  w = ActionDispatch::Routing::RouteWrapper.new(route)\n  if w.endpoint == w.controller + \"#\" + w.action and !w.internal?\n    c = ControllerName.find_or_create_by_name(w.controller)\n    a = ActionName.find_or_create_by_name(w.action)\n    res = ControllerAction.find_or_create_by_name(w.endpoint, :controller_name_id => c.id, :action_name_id => a.id)\n    if !res.roles.include? 'Webmaster'\n      role = Role.find_by_name('Webmaster')\n      Interaction.create!([{:role_id => role.id, :controller_action_id => res.id}])\n    end\n  end\nend\n```\n\nIn my seeds.rb file:-\n\n``` ruby\nRails.application.reload_routes!\nall_routes = Rails.application.routes.routes\n\nrequire 'action_dispatch/routing/inspector'\ninspector = ActionDispatch::Routing::RoutesInspector.new(all_routes)\n\nr =[]\nfor routeRule in inspector.format(all_routes, ENV['CONTROLLER'])\n  # Parse routeRule to get your values\n  routeRule.split(' ').each do |s|\n    r << s if s.include?('#')\n  end\nend\n```\n\nThe call `inspector.format(all_routes, ENV['CONTROLLER'])` generates the above error.\n", "labels": ["needs feedback", "railties"], "number": 9815, "updated_at": "2013-03-22 12:31:30", "user": 852052, "closed_at": "2013-03-22 09:35:47", "id": 12204973, "title": "FIXED Rails 4.0.0.beta1 undefined method `header' for #<ActionDispatch::Journey::Routes:0x9adc8a8>", "url": "https://api.github.com/repos/rails/rails/issues/9815", "created_at": "2013-03-19 22:18:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285626", "text": "This PR #8658 changed the API of the inspector. It's now using a formatter to display the routes in various formats: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/inspector.rb#L90-L109\n\nAs you are passing `all_routes` as a formater, it does not work. I don't think this is a bug as you are not using the API as intended. Can you confirm so that we can close this ticket?\n\nAlso: please use ``` to format the code in your tickets. Otherwise it is extremely hard to read (I edited your message).\n", "created_at": "2013-03-22 08:21:01", "user": 5402, "id": 15285626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15287921", "text": "Hi, Thank you for the response.  My mistake I was porting working code from 3.2. \n\nI eventually realised the errors of my ways and amended the subject with FIXED because I did not know the right way to retract. Also I thought it might be useful to others to see the right way of obtaining all the routers endpoint info.\n\nSorry about the code format, again I did not know.  Thank you again.\n", "created_at": "2013-03-22 09:35:47", "user": 852052, "id": 15287921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15288119", "text": "Great to hear that it worked out! I saw the FIXED but did not get it :D\n\nif an issue is resolved just close it. Of course it is helpful for others if you write down the solution.\n\nThanks for reporting and cheers,\nYves\n\nAm 22.03.2013 um 10:36 schrieb ozpos notifications@github.com:\n\n> Hi, Thank you for the response. My mistake I was porting working code from 3.2.\n> \n> I eventually realised the errors of my ways and amended the subject with FIXED because I did not know the right way to retract. Also I thought it might be useful to others to see the right way of obtaining all the routers endpoint info.\n> \n> Sorry about the code format, again I did not know. Thank you again.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-22 09:40:50", "user": 5402, "id": 15288119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15291361", "text": "Hi Yves,\n\nThank you for your help.  I see that you have contributed to \nActionController doc w.r.t. strong parameters.\n\nI am one of those people struggling to uncover the right way to \nimplement some very simple use cases. \nhttps://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-talk/-EzFmHv7Js0\n\nWhen multi-level nested records require updates the strong parameter \npermitted declaration is a real pain.\n\nIf the app sends an array of nested records for editing in a response to \na user request then clearly they should be white listed automatically by \nsigning the attribute symbols and record hierarchy.  Mass assignment \nproblem gone !\n\nIt is does not seem very DRY to then reconstruct this complex white list \nagain.  After all the structure of the relation has already been \ndescribed elsewhere.\n\nWhat do you think ?\n\nThe link above is an attempt at establishing some interest in creating a \nsample app for rails new releases that displays the correct way of \nimplementing some core use cases. I would do this myself and give it \nback if I had the knowledge and vision and confidence that the app \ndisplayed current best practice.\n\nThe original rails demo app got me and many thousands of people \ninterested in rails in the first place.  It would be a great metric for \nfuture development if each release improved on this app while \nmaintaining its core functionality.\n\nHow can we get this done ?\n\nJohn Leake\n\nOn 22/03/13 09:41, Yves Senn wrote:\n\n> Great to hear that it worked out! I saw the FIXED but did not get it :D\n> \n> if an issue is resolved just close it. Of course it is helpful for \n> others if you write down the solution.\n> \n> Thanks for reporting and cheers,\n> Yves\n> \n> Am 22.03.2013 um 10:36 schrieb ozpos notifications@github.com:\n> \n> > Hi, Thank you for the response. My mistake I was porting working \n> > code from 3.2.\n> > \n> > I eventually realised the errors of my ways and amended the subject \n> > with FIXED because I did not know the right way to retract. Also I \n> > thought it might be useful to others to see the right way of obtaining \n> > all the routers endpoint info.\n> > \n> > Sorry about the code format, again I did not know. Thank you again.\n> > \n> > —\n> > Reply to this email directly or view it on GitHub.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9815#issuecomment-15288119.\n", "created_at": "2013-03-22 11:08:47", "user": 852052, "id": 15291361}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15294216", "text": "@ozpos this ticket is not the right place for this discussion. Please post on the [rails core mailing list](http://groups.google.com/group/rubyonrails-core)\n", "created_at": "2013-03-22 12:31:29", "user": 5402, "id": 15294216}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The error that's raised in case the required key is missing it's actually `ActionController::ParameterMissing` not `ActionController::MissingParameter`. It's important to fix so that people reading the guides knows what error to rescue from when needed.\n", "labels": [], "number": 9816, "updated_at": "2014-06-26 19:56:39", "user": 720224, "closed_at": "2013-03-19 22:40:19", "id": 12205782, "title": "Fix guides error on error class name", "url": "https://api.github.com/repos/rails/rails/issues/9816", "created_at": "2013-03-19 22:38:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15148141", "text": "You can confirm this here: https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/strong_parameters.rb#L170\n", "created_at": "2013-03-19 22:40:18", "user": 720224, "id": 15148141}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Type a fixo.\n", "labels": [], "number": 9817, "updated_at": "2014-06-26 19:56:41", "user": 3829, "closed_at": "2013-03-20 02:54:47", "id": 12210990, "title": "Commas aren't comas.", "url": "https://api.github.com/repos/rails/rails/issues/9817", "created_at": "2013-03-20 02:13:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157687", "text": "Working hard!\n", "created_at": "2013-03-20 04:21:41", "user": 251370, "id": 15157687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157717", "text": "It Is The Lord's Work\n", "created_at": "2013-03-20 04:23:05", "user": 3829, "id": 15157717}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Sorting then picking the last item incurs more cost than just finding the max. I've changed it so that when the current migration version is called, we use `max` instead of `sort.last`. \n", "labels": [], "number": 9818, "updated_at": "2014-06-26 15:55:45", "user": 1075780, "closed_at": "2013-03-20 02:55:58", "id": 12210995, "title": "Changed the call to .sort.last to .max when computing the migration version", "url": "https://api.github.com/repos/rails/rails/issues/9818", "created_at": "2013-03-20 02:14:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The json encoding of some legal utf8 characters has changed between rails 3.2.12 and 3.2.13.  I didn't see anything about this in the release notes, and it breaks some api integrations.  For example, consider the json output\n\n``` ruby\n# Rails 3.2.12\ninput \"polished look – instantly\"\nproduces json \"polished look \\u2013 instantly\"\n\n# Rails 3.2.13\ninput \"polished look – instantly\"\nproduces json \"polished look – instantly\"\n```\n\nThis change is unexpected, and produces issues when diffing output, since the input has not changed, but rails 3.2.13 has changed the output.\n\nI see similar problems with é (\\u00e9).\n\nIf you run the output through `ActiveSupport::JSON.decode` then the output compares equal, i.e.,\n\n``` ruby\n# Rubyish pseudocode\nActiveSupport::JSON.decode(\"polished look \\u2013 instantly\") == ActiveSupport::JSON.decode(\"polished look – instantly\")\n```\n\nHowever, there is no guarantee that the output of a Rails json api is being consumed in Ruby.  Nor is there any guarantee that it is being parsed by a json decoder before use.  Somebody might be comparing output of curl or similar using file diffs.  I know that the order of keys in json maps is not guaranteed, but diffing json api output before/after an upgrade is not uncommon, and it's common to do so with simple tools like curl and diff.\n\nI'm just giving you a friendly heads up that you might get other reports of this.  Thanks for all of your hard work in getting rails 3.2.13 out the door.\n\nI consider this a bug/regression/unexpected behavior, and I think others will as well.\n\nThanks!\n", "labels": [], "number": 9819, "updated_at": "2013-03-20 14:18:17", "user": 891957, "closed_at": "2013-03-20 14:18:17", "id": 12211505, "title": "rails 3.2.13 breaks/unexpectedly changes json encoding of some utf8 characters", "url": "https://api.github.com/repos/rails/rails/issues/9819", "created_at": "2013-03-20 02:46:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157461", "text": "There is another ticket about this, but yes, apparently we're now returning a UTF-8 string where before it was US-ASCII.\n", "created_at": "2013-03-20 04:08:02", "user": 27786, "id": 15157461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157706", "text": "@steveklabnik can you link the other ticket? Seeing something similar.\n", "created_at": "2013-03-20 04:22:27", "user": 27818, "id": 15157706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15157905", "text": "I don't remember it offhand, and I'm about to step away from the computer or I'd search.\n", "created_at": "2013-03-20 04:32:44", "user": 27786, "id": 15157905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15158780", "text": "I'll look harder, search didn't show an obvious match.\n", "created_at": "2013-03-20 05:16:45", "user": 27818, "id": 15158780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15159875", "text": "I'm striking a similar problem that I haven't nailed down yet.  I thought it was database related, but this could be it.\n", "created_at": "2013-03-20 06:06:46", "user": 19700, "id": 15159875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15160680", "text": "My solution was do this:\n\n``` ruby\n# Before 3.2.13\nvalue = ... a json string scraped from my rails api ...\nfile.write value\n\n# After 3.2.13\nvalue = ... the same json string scraped from my rails api ...\nfile.write value.force_encoding \"UTF-8\"\n```\n\nDoing that seemed to get rid of the crazy `\"\\xE2\" from ASCII-8BIT to UTF-8` exceptions that I was seeing after upgrading to Rails 3.2.13.  I also had to do my comparisons as\n\n``` ruby\n# This works in 3.2.13\nActiveSupport::JSON.decode(value1) == ActiveSupport::JSON.decode(value2)\n\n# This used to work in 3.2.12, but is broken in 3.2.13\nvalue1 == value2\n```\n\nJust posting this in case it helps anybody ...\n", "created_at": "2013-03-20 06:45:03", "user": 891957, "id": 15160680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15178052", "text": "Duplication of #9498\n", "created_at": "2013-03-20 14:18:17", "user": 47848, "id": 15178052}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The PR #8756 uses Sprockets for resolving files that already exists on disk, for those files their extensions don't need to be rewritten.\n\nFixes #9803\n", "labels": [], "number": 9820, "updated_at": "2014-06-12 05:53:28", "user": 31945, "closed_at": "2013-03-20 23:41:23", "id": 12213777, "title": "Fixed assets loading performance in 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9820", "created_at": "2013-03-20 05:15:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15158770", "text": "cc  @rafaelfranca\n", "created_at": "2013-03-20 05:16:28", "user": 31945, "id": 15158770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15176669", "text": "@fredwu could you check if this need to be fixed on https://github.com/rails/sprockets-rails too?\n", "created_at": "2013-03-20 13:52:18", "user": 47848, "id": 15176669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15176683", "text": "And please add a CHANGELOG entry.\n", "created_at": "2013-03-20 13:52:35", "user": 47848, "id": 15176683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15208062", "text": "Hi @rafaelfranca - changelog has been added. I just took a look at sprockets-rails and afaik it's unaffected.\n", "created_at": "2013-03-20 22:32:45", "user": 31945, "id": 15208062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix some typos in AR. CHANGELOG, tests, method doc. fixed\n", "labels": [], "number": 9821, "updated_at": "2016-02-22 14:25:35", "user": 567626, "closed_at": "2013-03-20 08:11:58", "id": 12214255, "title": "Fix some typos in AR- CHANGELOG, tests, method doc. fixed", "url": "https://api.github.com/repos/rails/rails/issues/9821", "created_at": "2013-03-20 05:48:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When running in production styesheet_link_tag, javascriot_include_tag etc. are generating the wrong tags.\n\nLinks reference /stylesheets or /javascripts and should be /assets with a digested filename.\n\n```\n$ /opt/ruby-2.0.0-p0/bin/bundle exec rails c production\nLoading production environment (Rails 4.0.0.beta1)\n>> helper.stylesheet_link_tag 'application'\n# => \"<link href=\\\"/stylesheets/application.css\\\" media=\\\"screen\\\" rel=\\\"stylesheet\\\" />\"\n>> helper.javascript_include_tag 'application'\n# => \"<script src=\"/javascripts/application.js\"></script>\"\n```\n\nconfig/environments/production.rb is the default generated from rails new \n\nhttps://gist.github.com/UnderpantsGnome/5202608\n", "labels": ["asset pipeline"], "number": 9822, "updated_at": "2013-03-21 22:37:45", "user": 17270, "closed_at": "2013-03-21 22:37:45", "id": 12214700, "title": "Rails 4.0.0.beta1 asset helpers generating the wrong HTML in production", "url": "https://api.github.com/repos/rails/rails/issues/9822", "created_at": "2013-03-20 06:21:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15270745", "text": "I'm closing this. It was tracked down to capistrano not actually compiling assets even though it was running the appropriate tasks. Sorry for the line noise.\n", "created_at": "2013-03-21 22:37:45", "user": 17270, "id": 15270745}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This PR creates a test for issue #9209. The test fails in the current master branch.\n", "labels": ["activerecord"], "number": 9823, "updated_at": "2014-06-20 15:43:06", "user": 1075780, "closed_at": "2014-01-28 21:17:30", "id": 12214953, "title": "Created a test for has_many :through presence validation issue", "url": "https://api.github.com/repos/rails/rails/issues/9823", "created_at": "2013-03-20 06:40:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/33513907", "text": "Issue https://github.com/rails/rails/issues/9029#issuecomment-21294553 has been marked as invalid, cause it can be solved with use of :inverse_of. \n\nAlso here is the original discussion - https://github.com/rails/rails/issues/5178#issuecomment-12126547\n\nSo I guess this can be closed // @steveklabnik \n", "created_at": "2014-01-28 19:22:24", "user": 230519, "id": 33513907}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The loop variable was not properly used in the #concat_records method. Fixed the wrong argument while calling the method #insert_record. \n", "labels": [], "number": 9824, "updated_at": "2014-06-26 15:55:50", "user": 3786236, "closed_at": "2013-03-20 15:06:27", "id": 12216519, "title": "Wrong variable used inside the block of #concat_records", "url": "https://api.github.com/repos/rails/rails/issues/9824", "created_at": "2013-03-20 08:06:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15175833", "text": "@anupamc Can you add a test ? \n", "created_at": "2013-03-20 13:35:24", "user": 6399, "id": 15175833}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9825, "updated_at": "2014-06-26 19:56:48", "user": 1204933, "closed_at": "2013-03-20 08:10:20", "id": 12216529, "title": "Fix a typo", "url": "https://api.github.com/repos/rails/rails/issues/9825", "created_at": "2013-03-20 08:07:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is done to improve clarity of the code. \n", "labels": [], "number": 9826, "updated_at": "2014-07-04 15:45:49", "user": 1204933, "closed_at": "2013-03-20 13:45:03", "id": 12217212, "title": "Move response body to a private method", "url": "https://api.github.com/repos/rails/rails/issues/9826", "created_at": "2013-03-20 08:37:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15176295", "text": "Sorry but we don't accept this kind of cosmetic change.\n\nThank you for the contribution.\n", "created_at": "2013-03-20 13:45:03", "user": 47848, "id": 15176295}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added tests in transactions_test.rb in order to address the .save vs .save! bug in issue #4566\n", "labels": [], "number": 9827, "updated_at": "2014-06-25 23:30:36", "user": 2438986, "closed_at": "2013-03-20 09:07:50", "id": 12217610, "title": "Simple tests added for Issue #4566", "url": "https://api.github.com/repos/rails/rails/issues/9827", "created_at": "2013-03-20 08:53:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Test cases for issue #4566\n", "labels": ["activerecord"], "number": 9828, "updated_at": "2014-06-26 19:13:20", "user": 2438986, "closed_at": "2013-07-15 10:44:26", "id": 12218157, "title": "Added test cases for .save vs  .save! bug", "url": "https://api.github.com/repos/rails/rails/issues/9828", "created_at": "2013-03-20 09:12:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15183294", "text": "Please squash your commits. Also, there are a couple of stray blank lines that should probably be removed.\n", "created_at": "2013-03-20 15:39:07", "user": 1075780, "id": 15183294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285370", "text": "I added a few comments. Please make sure to also squash all the commits into a single one and use a descriptive commit message.\n", "created_at": "2013-03-22 08:12:09", "user": 5402, "id": 15285370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19878212", "text": "Hey @vicli will you able to make changes in PR suggested? Also please squash commits into one. \n", "created_at": "2013-06-23 18:03:41", "user": 3948, "id": 19878212}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20596435", "text": "@arunagw how I can share my changes with @vicli, that he can complete his mission.\n\nBy the way, this tests are fallen at least for sqlite3. Is there any open issues connected with this bug, have not found myself yet.\n", "created_at": "2013-07-08 10:13:35", "user": 125715, "id": 20596435}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20922432", "text": "@pftg I think this is original issue https://github.com/rails/rails/issues/4566\n", "created_at": "2013-07-13 16:30:49", "user": 3948, "id": 20922432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20925077", "text": "Indeed! Sorry, missed, that issues #4566 still open.\n", "created_at": "2013-07-13 19:20:29", "user": 125715, "id": 20925077}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20962317", "text": "Closing this as #11434 merged.\n\nthanks.\n\n@pftg do we need these tests?\n", "created_at": "2013-07-15 10:44:26", "user": 3948, "id": 20962317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20962439", "text": "@arunagw, nope.\n", "created_at": "2013-07-15 10:47:59", "user": 125715, "id": 20962439}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "URL helpers seem to be keeping options from the current request when building links. This only happens when I use defaults in the routes. This is happening on rails 3.2.12.\n\nIn the second case, the output i expect is /all_html/foo, not /all_html/foo/booga\n\n``` ruby\n# config/routes.rb\nDefaultsBug::Application.routes.draw do\n  get \"/all/:type(/:category)\" => \"application#index\", :as => :all_products\n\n  defaults :format => :html do\n    get \"/all_html/:type(/:category)\" => \"application#index_html\", :as => :all_html_products\n  end\nend\n```\n\n``` ruby\n# application_controller.rb\nclass ApplicationController < ActionController::Base\n  def index\n    render :text => all_products_path(\"foo\")\n  end\n\n  def index_html\n    render :text => all_html_products_path(\"foo\")\n  end\nend\n```\n\n```\n$ curl http://localhost:3001/all/ooga/booga\n/all/foo\n$ curl http://localhost:3001/all_html/ooga/booga\n/all_html/foo/booga\n```\n", "labels": ["actionpack", "routing"], "number": 9829, "updated_at": "2013-11-13 22:17:52", "user": 34746, "closed_at": "2013-11-13 22:17:52", "id": 12220259, "title": "url_helpers persisting params from current request when combined with defaults", "url": "https://api.github.com/repos/rails/rails/issues/9829", "created_at": "2013-03-20 10:22:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285225", "text": "/cc @pixeltrix \n", "created_at": "2013-03-22 08:06:10", "user": 5402, "id": 15285225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15288274", "text": "This is intentional behaviour - the current path parameters are used when building urls so you can do things like:\n\n``` ruby\nredirect_to :action => :edit\n```\n\nwithout having to specify `:controller`, `:id`, etc. You need to overwrite the `:category` parameter by passing `nil` as a second parameter or as part of the options hash, e.g:\n\n``` ruby\nall_html_products_path(\"foo\", nil)\n```\n\nor \n\n``` ruby\nall_html_products_path(\"foo\", :category => nil)\n```\n", "created_at": "2013-03-22 09:44:33", "user": 6321, "id": 15288274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15288400", "text": "@pixeltrix Why does this happen only when using the default keyword (and that too, default on :format)\n\nAt the very least, it's pretty inconsistent that default affects this in this way.\n", "created_at": "2013-03-22 09:47:59", "user": 34746, "id": 15288400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15292234", "text": "@gja there's definitely something weird going on here because the `all_products_path` should have the `:category` parameter recalled - it may be something to do with `nil` defaults being omitted, because:\n\n``` irb\n>> app.get('/all/ooga/booga')\n=> 200\n>> app.url_for :controller => 'application', :action => 'index'\n=> \"http://www.example.com/all/ooga\"\n>> app.url_for :controller => 'application', :action => 'index', :format => nil\n=> \"http://www.example.com/all/ooga\"\n>> app.url_for :controller => 'application', :action => 'index', :format => :html\n=> \"http://www.example.com/all/ooga/booga.html\"\n```\n\nI'll investigate further.\n", "created_at": "2013-03-22 11:34:26", "user": 6321, "id": 15292234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20316776", "text": "@pixeltrix did you get any further investigating this?\n", "created_at": "2013-07-01 23:05:19", "user": 162976, "id": 20316776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23211380", "text": "I may also be experiencing this - http://stackoverflow.com/questions/18417881/rails-route-ignoring-parameter.\n\nI cannot override the current parameter for a given route.\n", "created_at": "2013-08-24 16:06:36", "user": 844437, "id": 23211380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23224724", "text": "I can confirm that this bug is present on 3.2.14, 3-2-stable, 4.0.0, 4-0-stable and master.\n", "created_at": "2013-08-25 09:31:26", "user": 354185, "id": 23224724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27902907", "text": "This is resolved in 4.0.1. \n\nAs per initial description, now the optional path segments don't get persisted - no need to nilify them. \n\n```\n$ curl http://localhost:3001/all/ooga/booga\n/all/foo\n$ curl http://localhost:3001/all_html/ooga/booga\n/all_html/foo\n```\n", "created_at": "2013-11-06 19:04:19", "user": 112600, "id": 27902907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28439736", "text": "@jurglic thanks for confirming\n", "created_at": "2013-11-13 22:17:52", "user": 47848, "id": 28439736}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In Rails 3.2.13 square brackets are appended to a custom name for `file_field` when using `:multiple => true`. I think this may be a bug.\n\nThe following code:\n\n```\n<%= f.file_field :attachment, :multiple => true, :name => 'user_file[attachment]' %>\n```\n\ngenerates the following html:\n\n```\n<input id=\"user_file_attachment\" multiple=\"multiple\" name=\"user_file[attachment][]\" type=\"file\" />\n```\n\nThe reason I am setting a custom name attribute is that I want it to be:\n\n```\n<input id=\"user_file_attachment\" multiple=\"multiple\" name=\"user_file[attachment]\" type=\"file\" />\n```\n\nThis does not seem to be possible when using the helper in Rails 3.2.13. I have to revert to plain HTML as a workaround.\n\nIn Rails 3.2.12 it was working like I expected it to work.\n", "labels": ["actionview", "regression"], "number": 9830, "updated_at": "2013-08-20 08:40:11", "user": 137118, "closed_at": "2013-04-05 19:37:13", "id": 12222735, "title": "Custom name for file_field is incorrect when using :multiple => true", "url": "https://api.github.com/repos/rails/rails/issues/9830", "created_at": "2013-03-20 11:23:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15173523", "text": "+1\n", "created_at": "2013-03-20 12:45:21", "user": 2379695, "id": 15173523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179600", "text": "-1\n\n@mischa78 How do you get others files? Because only one value from values of several params with the same name and without `[]` suffix is taken in account.\n", "created_at": "2013-03-20 14:43:12", "user": 125715, "id": 15179600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15179825", "text": "This is not a bug for me. The behaviour at 3.2.12 was wrong and now it is right as @pftg pointed.\n", "created_at": "2013-03-20 14:47:02", "user": 47848, "id": 15179825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180612", "text": "This breaks functionality with accepts nested attributes.  For example:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_many :images\n  accepts_nested_attributes_for :images\nend\n\nclass Image < ActiveRecord::Base\n  belongs_to :user\n\n  def file\n    get_file_from_storage_engine(name)\n  end\n\n  def file=(upload)\n    self.name = upload.original_filename\n    store_file_in_engine(upload)\n  end\nend\n```\n\n``` haml\n= semantic_form_for @user do |f|\n  = f.fields_for :images do |i|\n    = i.input :file, as: :file, input_html: {multiple: true, name: 'user[images_attributes][][file]'}\n```\n\n`user[images_attributes][][file]` will become `user[images_attributes][][file][]` which means `file` is now and array and the `file=` method on the `Image` class will be passed that array (triggering an `NoMethodError` `original_filename` for `Array`) \n\nRemoving the `name` option causes it to be generated as: `user[images_attributes][0][file][]` meaning that `file` will still be passed an array.\n\nHow should this be implemented with the new Rails behavior?\n", "created_at": "2013-03-20 14:58:36", "user": 65676, "id": 15180612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180762", "text": "I need this for [jQuery File Upload](http://blueimp.github.com/jQuery-File-Upload/) to work properly. jQuery File Upload submits files to the controller one-by-one, so even though I am using `:multiple => true` I don't want it to be submitted as an array. That's why I am setting a custom name for the field.\n\nFor the default name to have square brackets appended makes sense, but why do they get automatically added when I am setting the `:name` attribute myself? Shouldn't it just be the name I choose?\n\nIf you want your custom name to be an array you could still add the square brackets yourself:\n\n```\n<%= f.file_field :attachment, :multiple => true, :name => 'custom_name[foo][]' %>\n```\n", "created_at": "2013-03-20 15:00:43", "user": 137118, "id": 15180762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15181002", "text": "Why do you need to pass multiple when the `user[images_attributes]` is already an Array?\n", "created_at": "2013-03-20 15:04:37", "user": 47848, "id": 15181002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15181253", "text": "@rafaelfranca Unless the html input has `multiple=\"multiple\"` I can't select multiple files to upload in the file upload dialoge box.\n", "created_at": "2013-03-20 15:08:25", "user": 65676, "id": 15181253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15182757", "text": "Same here. I also use jQuery File Upload and face this issue with rails 3.2.13.\n", "created_at": "2013-03-20 15:31:06", "user": 646942, "id": 15182757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15194593", "text": "@adamhunter in your example better to use virtual attribute:\n\n```\ndef image_assets= files\n  files.each do |file|\n    self.images.build(file: file)\n  end\nend\n```\n\nBecause you use tricky logic, with using one field but for several different Image Model instances. So better to have presenter or virtual attribute, which describes your form more clear/simple and builds models with their relations inside.\n\nAbout custom names for Form Fields Helpers, which are not follow Rails naming convention, then better to use `file_field_tag` helper, as for me; otherwise needed to add more complexity for `add_default_name_and_id` to handle:\n1. `multiple: true` and `name: :some_custome_name` to return: `some_custom_name[]`\n2. `multiple: true` and `name: :some_custome_name` to return: `some_custom_name`\n", "created_at": "2013-03-20 18:31:12", "user": 125715, "id": 15194593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15206433", "text": "+1\n\nRelevant commits that may have broken this: 8e05a6f6380c6ddbef5a0620b30d19dbca7f2f15 (#9616), 2a6f208e (#8108)\n\nThose appear to have been intended for checkboxes, and did not take into account the other use of the `multiple` attribute like this one.\n\n@pftg I understand what you're saying there. However, it seems like a hack to need to pull the uploaded file out of the (now array) parameter—or to use a virtual attribute to accomplish the same—just to be able to use the 'multiple' feature of the file field. The two are not always used together.\n\nIn our case, we're creating multiple models from a set of multiple-selected files, each request done individually (which is great, because you can upload in parallel). With this issue, we're now getting arrays for our singular association, and it is no longer clean. We either have to bypass this change manually by specifying our own `file_field_tag` (dirty), or untangle the parameters in the controller (very dirty) or untangle the array using a virtual attribute (slightly better). As it stands, it's difficult to use the multiple-file-selection feature with a model which stores one file per instance.\n\nIMHO this is not tricky logic; the file field is much less usable without 'multiple' enabled, which is why this use should be supported. I'm fine using `file_field_tag` if the consensus disagrees, but I would prefer to keep it standard.\n\nHumor me for a moment as I perhaps don't understand the intricacies of this method: why isn't this `[]` determined from the cardinality of the association instead?\n", "created_at": "2013-03-20 21:59:39", "user": 89588, "id": 15206433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15291439", "text": "I agree that this is an issue. Adding [] to the name might be a good idea when there is no 'name' parameter present. but adding [] to the name when a user explicitly sets it to something different is just unexpected.\n\nSetting the name in the following lines of code act different from each other, which also feels strange\n\n``` ruby\nf.file_field :foo, multiple: true, name: 'foo' # results in \"name='foo[]'\" (f is a form-helper)\nfile_field_tag :foo, multiple: true, name: 'foo' # results in \"name='foo'\"\n```\n", "created_at": "2013-03-22 11:11:34", "user": 411353, "id": 15291439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15297270", "text": "@stephanvane - Agreed, if name is specified, it should not be changed. That's the core of my problem as well.\n", "created_at": "2013-03-22 13:46:48", "user": 89588, "id": 15297270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15318742", "text": "I've found this solution and it worked for me! (tested with Rails 4.0.0.beta1, Carrierwave and jQuery File Upload)\n\n``` javascript\n  $('#picture_image').attr('name', 'picture[image]');\n  $('#picture_image').fileupload();\n```\n\nYea, I just use jQuery to override the name attribute.\n", "created_at": "2013-03-22 20:04:33", "user": 1139160, "id": 15318742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15974114", "text": ":+1: I got burned by this regression earlier this week. I just submitted a pull request that fixes this issue against 3-2-stable. I'm now looking into fixing it against master too. Please review #10105.\n", "created_at": "2013-04-05 18:57:26", "user": 740, "id": 15974114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15974799", "text": "I just submitted #10106 against the master branch too, so we can keep this resolved in Rails 4.0 as well.\n", "created_at": "2013-04-05 19:10:41", "user": 740, "id": 15974799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19089244", "text": "Just a note for those still encountering this issue, you can use fileupload's option to override.\n\nparamName: 'my_model[image]'\n\nfor example\n", "created_at": "2013-06-07 05:09:08", "user": 1542516, "id": 19089244}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm having real trouble upgrading an app to Rails 4 beta as I have a product model that I want to assign department_ids. I would expect the following to work but it doesn't:\n\n``` ruby\nproduct.update(ActionController::Parameters.new({ :department_ids => ['1'] }).permit(:department_ids))\n```\n\n...whereas, the following works fine:\n\n``` ruby\nproduct.update({ :department_ids => ['1'] })\n```\n\nI would appreciate any workarounds as I'm pulling my hair out at the moment.\n", "labels": ["actionpack", "docs", "needs feedback"], "number": 9831, "updated_at": "2013-03-29 20:08:23", "user": 1236447, "closed_at": "2013-03-29 20:08:23", "id": 12226342, "title": "Strong Parameters - Problem with '_ids' methods", "url": "https://api.github.com/repos/rails/rails/issues/9831", "created_at": "2013-03-20 13:17:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15175104", "text": "Hmm, if I go with:\n\n``` ruby\nproduct.update(ActionController::Parameters.new({ :department_ids => ['1'] }).permit(department_ids: []))\n```\n\n...it works, but seems a little unintuitive.\n", "created_at": "2013-03-20 13:20:23", "user": 1236447, "id": 15175104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15175773", "text": "Yes, this is how it works, you have to specify which type of input you are expecting. But seems the documentation is outdated.\n", "created_at": "2013-03-20 13:34:11", "user": 47848, "id": 15175773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15176434", "text": "Hmm, why does supplying an empty array make it work? Seems a little odd i.e. `(:department_ids)` fails but `(department_ids: [])` works.\n", "created_at": "2013-03-20 13:48:07", "user": 1236447, "id": 15176434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15176514", "text": "Because the empty array is to say that you are expecting an Array as value of `department_ids`. See https://github.com/rails/strong_parameters#permitted-scalar-values\n", "created_at": "2013-03-20 13:49:31", "user": 47848, "id": 15176514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15181982", "text": "Ah, ok, thanks for the quick response.\n", "created_at": "2013-03-20 15:19:33", "user": 1236447, "id": 15181982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15182078", "text": "No problem. I'll leave this open to remember to upgrade the documentation in the Rails guides and docs\n", "created_at": "2013-03-20 15:21:01", "user": 47848, "id": 15182078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15182427", "text": "...actually one for thing. In the same form I have a series of images which I am permitting using:\n\n``` ruby\nparams.require(:product).permit(\n  :name, images_attributes: [:name, :uploaded_data]\n)\n```\n\nThe product model looks like:\n\n``` ruby\nclass Product < ActiveRecord::Base\n  accepts_nested_attributes_for :images\nend\n```\n\nThis works fine, except that after upgrading to Rails 4 beta, every time the form is submitted the images are multiplying i.e. if there was 1 then after submission there are 2, if there were 2 then after submission there would be 4 etc. It has me flummoxed.\n\nAny pointers would be much appreciated.\n", "created_at": "2013-03-20 15:26:26", "user": 1236447, "id": 15182427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15236336", "text": "Turns out that I had to permit `:id` in the image attributes to get it to work... isn't this a security concern as users could tamper with the id field?\n\n``` ruby\nparams.require(:product).permit(\n  :name, images_attributes: [:id, :name, :uploaded_data]\n)\n```\n\nI might raise a separate ticket for this.\n", "created_at": "2013-03-21 13:02:47", "user": 1236447, "id": 15236336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15237222", "text": "@thelucid without the id, Rails cannot say that you're actually trying to edit records, so it thinks they're new ones. The id works so that the nested attribute records can be correctly found and updated, so they're necessary.\n", "created_at": "2013-03-21 13:14:14", "user": 26328, "id": 15237222}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15237544", "text": "@carlosantoniodasilva But isn't this a security concern as users could tamper with the `id` field and get hold of other peoples images, see: https://github.com/rails/rails/issues/9851\n", "created_at": "2013-03-21 13:18:00", "user": 1236447, "id": 15237544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15284401", "text": "Regarding `accepts_nested_attributes_for` I have already written documentation in the guide. Please refer to http://edgeguides.rubyonrails.org/action_controller_overview.html#more-examples and let me know if there is something missing. I think the cases from this issue are all already documented.\n", "created_at": "2013-03-22 07:32:51", "user": 5402, "id": 15284401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15658303", "text": "The permit part of this ticket works as expected. If there are issues with accepts_nested_attributes_for, let's use a separate ticket.\n", "created_at": "2013-03-29 20:08:23", "user": 2741, "id": 15658303}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "boolean options default values defined explicitly, incorrect usage of required option replaced with boolean, settings of reused options are not overridden anymore'\n", "labels": ["railties"], "number": 9832, "updated_at": "2014-06-17 13:07:31", "user": 3668, "closed_at": "2014-05-02 10:48:13", "id": 12229362, "title": "issue #9525 is fixed - boolean options default values defined explicitly, incorrect usage of required option replaced with boolean, settings of reused options are not overridden anymore", "url": "https://api.github.com/repos/rails/rails/issues/9832", "created_at": "2013-03-20 14:30:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15180597", "text": "Can you change the commit message with a better explanation of what's going on, please?\n", "created_at": "2013-03-20 14:58:23", "user": 26328, "id": 15180597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15181849", "text": "You are welcome to do that, here is the sample ' boolean options default values defined explicitly, incorrect usage of required option replaced with boolean, settings of reused options are not overridden anymore'\n", "created_at": "2013-03-20 15:17:41", "user": 3668, "id": 15181849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15431592", "text": "When clicking on merge you're able to write a custom merge commit message - maybe that'd be fine?\n", "created_at": "2013-03-25 23:12:38", "user": 10128, "id": 15431592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16048138", "text": "should we add a test-case that passs `--assets=false` to make sure we don't run into regressions?\n", "created_at": "2013-04-08 12:45:35", "user": 5402, "id": 16048138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16049343", "text": "Surprisingly enough, it generated correct files. Issue only affected console output.\n", "created_at": "2013-04-08 13:12:21", "user": 3668, "id": 16049343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41999869", "text": "This can be closed I suppose.\n", "created_at": "2014-05-02 07:48:48", "user": 752058, "id": 41999869}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed unnecessary block from the test case.\n", "labels": [], "number": 9833, "updated_at": "2014-06-26 15:55:52", "user": 3786236, "closed_at": "2013-03-20 15:37:00", "id": 12232722, "title": "Removed unnecessary block", "url": "https://api.github.com/repos/rails/rails/issues/9833", "created_at": "2013-03-20 15:34:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm attempting to upgrade a Rails 3.2.13 application from Ruby 1.8.7-p370 to Ruby 1.9.3-p385. After upgrading, special characters are garbled in text retrieved from the database. For instance \"café\" appears as \"cafÃ©\". My database is latin1 encoded. I'm using mysql2 (0.3.11) and my `database.yml` looks like this:\n\n``` ruby\ndevelopment:\n  adapter: mysql2\n  encoding: latin1\n  database: my_db\n  username: root\n  host: localhost\n```\n\n(The same problem is also happening in the production environment, which has the same database config.)\n\nIt appears that when ActiveRecord retrieves text from the database, it decodes it as if it were utf-8, not latin1 (or ISO-8859-1) as I've specified.\n\nTo isolate the problem, I wrote a Ruby script that that uses mysql2 to query the database directly, bypassing ActiveRecord:\n\n``` ruby\nrequire 'rubygems'\nrequire 'mysql2'\n\nclient = Mysql2::Client.new(:host => \"localhost\",\n                            :username => \"root\",\n                            :database => \"food52_development_production\",\n                            :encoding => \"latin1\")\n\nresult = client.query('SELECT title FROM recipes WHERE id = 12934')\n\nputs result.first[\"title\"]\n```\n\nThe recipe with id 12934 has the word \"café\" in its title. Running this script in 1.9.3 outputs the correctly decoded text (\"café\"). If I change the `:encoding` option to `\"utf-8\"`, I once again see the garbled text (\"cafÃ©\").\n\nI also tried placing a breakpoint in `ActiveRecord::ConnectionAdapters` ([here](https://github.com/rails/rails/blob/v3.2.13/activerecord/lib/active_record/connection_adapters/mysql2_adapter.rb#L16)), to see what encoding configuration `Mysql2::Client` was being initialized with. It is being passed `:encoding => \"latin1\"`, as expected.\n\nAnd yet: somewhere along the line, it appears Rails decides decodes the text as utf-8.\n", "labels": ["activerecord"], "number": 9834, "updated_at": "2014-03-23 02:57:48", "user": 865076, "closed_at": "2013-03-29 16:30:51", "id": 12237269, "title": "ActiveRecord 3.2.13 appears not to respect latin1 database encoding specification with Ruby 1.9.3", "url": "https://api.github.com/repos/rails/rails/issues/9834", "created_at": "2013-03-20 17:00:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15193960", "text": "This console output demonstrates that the issue is an encoding mismatch:\n\n``` bash\n1.9.3-p385 :020 > title = Recipe.find(12934).title\n => \"The River CafÃ©'s Strawberry Sorbet\" \n1.9.3-p385 :021 > title.encode('ISO-8859-1', 'utf-8')\n => \"The River Caf\\xC3\\xA9's Strawberry Sorbet\" \n1.9.3-p385 :022 > puts _\nThe River Café's Strawberry Sorbet\n => nil \n```\n", "created_at": "2013-03-20 18:21:19", "user": 865076, "id": 15193960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15203903", "text": "Does your test script still generate good output if you run it via rails console instead of ruby:\n\n```\nrails console < test.rb\n```\n\n?\n", "created_at": "2013-03-20 21:13:46", "user": 255776, "id": 15203903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15208440", "text": "Hi, @grant-olson! Yes, I still get good output when I run the script via the rails console.\n", "created_at": "2013-03-20 22:41:07", "user": 865076, "id": 15208440}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15210861", "text": "Looks like you had utf-8 data in your latin1 database. When you upgraded from 1.8 to 1.9, which supports string encodings, the mysql2 driver started converting the latin1 query results (which were actually utf-8) to utf-8.\n\nThis is a common problem with mysql. You can hack around it by telling the mysql2 driver to treat latin1 as if it's already utf-8. In `config/initializers/mysql2_latin1_as_utf8.rb`:\n\n``` ruby\nrequire 'mysql2'\n\n# Work around latin1 database encoding in production by mapping it to utf8\nMysql2::Client::CHARSET_MAP['latin1'] = Encoding::UTF_8\n```\n", "created_at": "2013-03-20 23:35:19", "user": 199, "id": 15210861}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15216613", "text": "@jeremy, when I load a view with that initializer, I get\n\n> `ActionView::Template::Error (invalid byte sequence in UTF-8)`\n\non the line that contains the problematic string.\n\nWhen I run my testing script via the rails console, the output is\n\n> \"The River Caf?'s Strawberry Sorbet\"\n\nDo these datapoints fit with your theory?\n", "created_at": "2013-03-21 02:47:35", "user": 865076, "id": 15216613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15243898", "text": "@jeremy thanks for taking the time to chime in\n\n>  When you upgraded from 1.8 to 1.9, which supports string encodings, mysql2 driver started converting the latin1 query results (which were actually utf-8) to utf-8.\n\nGiven that our standalone script that uses the mysql2 gem doesn't reproduce the issue when running from 1.9, it doesn't seem like the values are actually utf-8. E.g when we tried to isolate the problem to just ruby 1.9 and ran the identical ruby script from 1.8 and 1.9, neither reproduces the issue - it's only when we run it within our rails app and use active record.\n\nThe next thing we'll try is writing a similar script that uses ActiveRecord to see if that reproduces the issue in 1.9 only.\n", "created_at": "2013-03-21 15:07:07", "user": 219341, "id": 15243898}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15623173", "text": "@jeremy is this an issue with Rails or with the application? Can we clarify some action items, or expected behavior here? \n", "created_at": "2013-03-29 00:26:09", "user": 59744, "id": 15623173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15647893", "text": "The theory is that there's a bug in the active record database adapter in rails3.2 running ruby 1.9.3 against a latin1 database.\n- our db was latin1 encoded\n- it worked in ruby 1.8.7\n- we upgraded to 1.9.3 and had character encoding issues\n- a standalone script running ruby 1.9.3 could read from the db without problem (see script earlier in thread)\n\nAt this point, we have re-encoded our db to be utf-8 and moved on, so we aren't in a great position to help further diagnose.\n\nAn action item would be to verify rails3.2 + ruby 1.9.3 can run against a database encoded with latin1, e.g with a database.yml that specifies\n\n```\ndevelopment:\n  adapter: mysql2\n  encoding: latin1\n  database: db_name\n  username: root\n  host: localhost\n```\n\nHowever, given we aren't volunteering to further help reproduce, we certainly aren't expecting others to. It could very well have been an issue in our application after all. This thread could serve as something to google for and chime in with more evidence if anyone else runs into a similar issue. It seems like practically everyone uses utf-8 though.\n", "created_at": "2013-03-29 16:11:06", "user": 219341, "id": 15647893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15648711", "text": "Gotcha, ill close this thread until we can get someone to reproduce the issue and start workin on the problem. People can still comment on the closed issue\n", "created_at": "2013-03-29 16:30:51", "user": 59744, "id": 15648711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15801034", "text": "I'm having the same issue with a database that was originally created with Rails 2.3/Ruby 1.8.7 and now is Rails 3.2/Ruby 1.9.3.  The database is set up with latin1 encoding, and I am getting the same issue as mentioned earlier.  I don't mind changing the database encoding, but I'm not sure that will all of the data that has already been stored in the database.\n", "created_at": "2013-04-02 20:39:38", "user": 64581, "id": 15801034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15801341", "text": "@tomrossi7: Our app was also originally created in Rails 2.3. You are correct that if you decide to make the transition to UTF-8, you will need to convert your existing data. In doing so, I found that this [post](http://www.mikeperham.com/2012/03/31/converting-a-mysql-database-from-latin1-to-utf8/) and the related [gist](https://gist.github.com/mperham/2045565) (both by @mperham) provide a good starting place.\n", "created_at": "2013-04-02 20:44:51", "user": 865076, "id": 15801341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15801680", "text": "Do you think I need to convert the database?  That sounds daunting!\n", "created_at": "2013-04-02 20:50:37", "user": 64581, "id": 15801680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15801914", "text": "I'll continue this conversation with @tomrossi7 elsewhere.\n", "created_at": "2013-04-02 20:55:10", "user": 865076, "id": 15801914}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18330583", "text": "Thanks Jeremy, It solved my problem! \n", "created_at": "2013-05-23 08:42:24", "user": 1286520, "id": 18330583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20805450", "text": "Hi all,\n\nI am experiencing the same problem. We use Ruby 1.9.3, Rails 3.2.13 and MySQL encoded in Latin1. \n\nWhen using the debugger and irb, I can fetch strings from the database and they are displayed correctly on the screen. However, when they are rendered into HTML by Rails, the weird characters appear. If I get the encoding of the string when fetched from MySQL, it says that it is \"UTF-8\", but in reality it is \"Latin1\". So I guess this is the problem, and the same that was discussed here.\n\nHas any of you found a solution for this yet ? We would like to avoid converting the DB if possible, as we would also need to convert many scripts that interact with it.\n\nThanks, and regards :)\n", "created_at": "2013-07-11 11:40:38", "user": 1053663, "id": 20805450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20822869", "text": "@UlisesDo my guess is that you are storing the strings in the table in UTF-8 format even though your mysql table is encoded as latin1.\n\nTry extracting the string with this:\n\n```\nstr.encode('iso-8859-1', 'utf-8').force_encoding('utf-8')\n```\n\ne.g.\n\n```\nclient = Mysql2::Client.new(:host => \"localhost\",\n                            :username => \"root\",\n                            :database => \"db_name\",\n                            :encoding => \"latin1\")\n\nresult = client.query(...)\nresult.first['column_name'].encode('iso-8859-1', 'utf-8').force_encoding('utf-8')\n```\n", "created_at": "2013-07-11 16:07:12", "user": 428744, "id": 20822869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21793418", "text": "For what it's worth: we had this issue (or a very similar one) as well -- the issue for us was that we had UTF8 tables in mysql and UTF8-encoded web content but had been using a LATIN1 connection from Rails. I simply could not find a solution that made ruby 1.9 interpret my janked-up data properly, and the slew of solutions that involved mysqldump and globally-replacing character encodings didn't work for me, either.\n\nWhat finally _did_ work was running a script to `UPDATE #{table} SET #{column} = convert(cast(convert(#{column} using latin1) as binary) using utf8);` on all my char, varchar, and text columns.\n\nHere's a [gist that does this for an entire database](https://gist.github.com/njvack/6113127). Only took a few seconds on 5M rows; it seems to only update rows that have changed. Back your stuff up first, of course.\n\nYou can figure out what combinations of convert and cast you need to use by fiddling around in the mysql client. Find a row and column with \"bad\" data and run queries like:\n\n`select bad_col, convert(bad_col using latin1) from table where id = X`\n\nuntil your output looks right. Using hex() will let you see what bytes are stored, and may also be useful for debugging.\n", "created_at": "2013-07-30 14:12:43", "user": 169598, "id": 21793418}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Get something like this for multiple objects being queried:\n\n``` sql\n\"table\".\"association_id\" IN (1, 2, 3) AND \"table\".\"association_type\" IN ('ModelA', 'ModelB', 'ModelC')\n```\n\nID & type should be coupled for each element like this:\n\n``` sql\n(\"table\".\"association_id\" = 1 AND \"table\".\"association_type\" = 'ModelA') OR (\"table\".\"association_id\" = 2 AND \"table\".\"association_type\" = 'ModelB') OR (\"table\".\"association_id\" = 3 AND \"table\".\"association_type\" = 'ModelC')\n```\n\nFor example this happens in `association.clear` when using a polymorphic association in the join model.\n\nNoticed in Rails 4.0.0.beta1. I haven't looked through the code yet, but it seems to be introduced earlier.\n\nBTW, this part of `WHERE` seems to be useless in `clear`.\n", "labels": ["activerecord"], "number": 9835, "updated_at": "2013-05-05 21:07:23", "user": 1022687, "closed_at": "2013-05-04 21:27:46", "id": 12240016, "title": "Wrong WHERE clause for array in polymorphic associations", "url": "https://api.github.com/repos/rails/rails/issues/9835", "created_at": "2013-03-20 17:57:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15823418", "text": "Thanks for reporting. Could you publish an executable test-case for the problem? You can use this gist: https://gist.github.com/neerajdotname/5187092 as a foundation. This helps a lot to reproduce and solve the issue.\n", "created_at": "2013-04-03 08:02:36", "user": 5402, "id": 15823418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17441453", "text": "Are you still experiencing this? I am trying to reproduce this (in beta1 and rc1), but am unable to trigger it.\n\nDo you have a code snippet you can post?\n", "created_at": "2013-05-04 21:02:54", "user": 56081, "id": 17441453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17441762", "text": "Since @toddsiegel could not reproduce I'm closing this issue.\n\n@softpro if you still are experiencing this let us know and we will reopen.\n", "created_at": "2013-05-04 21:27:46", "user": 47848, "id": 17441762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17443149", "text": "@rafaelfranca I was not able to reproduce it because I am not sure what exactly what the trigger is. If @softpro could post some code that would help. Perhaps you can reopen it then...\n", "created_at": "2013-05-04 23:31:13", "user": 56081, "id": 17443149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17443379", "text": "Well, we didn't have any answer in the last month so I prefer to keep close. We are avoid to keep stale issues open.\n\nIf @softpro post a reproduction step we can reopen.\n", "created_at": "2013-05-04 23:53:37", "user": 47848, "id": 17443379}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17459175", "text": "Sorry for not answering for too long.\n\nInstead of constructing a test-case I've made some investigation (using Rails 4.0.0.rc1 for now) and want to discuss this piece of code (in `ActiveRecord::Associations::ThroughAssociation#construct_join_attributes`):\n\n``` ruby\n          if options[:source_type]\n            join_attributes[source_reflection.foreign_type] =\n              records.map { |record| record.class.base_class.name }\n          end\n```\n\nI consider it to be responsible for this part of query from my example:\n\n``` sql\n    \"table\".\"association_type\" IN ('ModelA', 'ModelB', 'ModelC')\n```\n\nIt wasn't a real example so I've made a mistake: `ModelA`, `ModelB` & `ModelC` seem to be always equal in real life. So it won't lead to the wrong query.\n\nIf so, why do we need an array here when it seems to be always equal to `options[:source_type]` repeated `records.size` times?\n", "created_at": "2013-05-05 21:06:00", "user": 1022687, "id": 17459175}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi folks,\n\nFirst of all, please bear in mind that this is my first pull request here. I've read the guidelines but I may have missed something, please point it out.\n\nI know this is a very small change, but I noticed some code in activemodel and activesupport require all files from a specific directory, but they files are sorted before, which does not seem to be useful or needed, and only cause a little overhead when booting rails.\nMoreover, the way the files are required is not consistent with the rest of the code.\n\nWhat do you think ?\n", "labels": [], "number": 9836, "updated_at": "2014-06-26 19:56:53", "user": 803765, "closed_at": "2013-03-21 12:37:50", "id": 12241507, "title": "Tidying up some require and removing overhead caused by sorting", "url": "https://api.github.com/repos/rails/rails/issues/9836", "created_at": "2013-03-20 18:29:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15234328", "text": "It seems fine, thank you and [welcome to Rails contributors](http://contributors.rubyonrails.org/contributors/intrepidd/commits) :)\n", "created_at": "2013-03-21 12:39:03", "user": 26328, "id": 15234328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15237418", "text": "Thanks ! Feels great :)\n\nI'll try to hack with rails when I can.\n", "created_at": "2013-03-21 13:16:37", "user": 803765, "id": 15237418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9837, "updated_at": "2014-06-26 19:56:56", "user": 2205, "closed_at": "2013-03-20 20:56:02", "id": 12246687, "title": "Don't generate a scaffold.css when --no-assets is specified", "url": "https://api.github.com/repos/rails/rails/issues/9837", "created_at": "2013-03-20 20:25:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If the host in `default_url_options` is accidentally set with a protocol such as \n\n```\nhost: \"http://example.com\"\n```\n\nthen the generated url will have the protocol twice `http://http://example.com` which is not what the user intended. Likely they wanted to define a host `host: \"example.com\"` and a `protocol: \"http://\"` but did not know the convention.\n\nThis may not the most common problem, but when it happens it can go undetected for a while. I accidentally added `http://` out of habit recently only to find all the links in my emails were broken after deploying a demo site to production. Rather than allow this accident go undetected, we can fix the problem in line by properly setting the protocol and host.\n\nI was able to find this related question on stack overflow: http://stackoverflow.com/questions/5878329/rails-3-devise-how-do-i-make-the-email-confirmation-links-use-secure-https-n where the answer was highly upvoted.\n\nThis is based off of work in #7415 cc/ @pixeltrix\n\nback port of #9794\n\nATP Action Mailer and Action Pack\n", "labels": ["actionpack"], "number": 9838, "updated_at": "2014-07-04 15:45:39", "user": 59744, "closed_at": "2013-07-10 09:09:07", "id": 12247696, "title": "Fix improperly configured host in generated urls", "url": "https://api.github.com/repos/rails/rails/issues/9838", "created_at": "2013-03-20 20:49:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15203053", "text": "@pixeltrix would also be nice if we ignored host's with backslashes or used a more intelligent joining method like `File.joins` otherwise we end up with this\n\n```\nbar_path(host: 'example.com/')\n```\n\nTurns into `example.com//bar`\n", "created_at": "2013-03-20 20:58:52", "user": 59744, "id": 15203053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15222958", "text": "We could always `chomp` it:\n\n``` ruby\n>> \"http://www.example.com/\".chomp('/')\n=> \"http://www.example.com\"\n```\n", "created_at": "2013-03-21 07:30:13", "user": 6321, "id": 15222958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18668979", "text": "Ok, let me do the grumpy old man job: it is to a certain point the responsibility of the user to provide correct data. However, it is our responsibility to document and name our API as clearly as possible.\n\nThat said, `:host` is a very clear name. A host does not contain a schema. A host does not contain paths. I think normalizing those things is a waste of resource for the 99% of the correct cases at the cost of teaching wrong semantics to users!\n\nSo I'm :-1: on this one. :heart:\n", "created_at": "2013-05-30 09:00:11", "user": 9582, "id": 18668979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18670680", "text": "The problem is that it is a very expensive yet silent lesson. If you configure the host wrong then your outbound links in emails suddenly quit working all without exception or warning.   \n\nIf we know an invalid input causes an invalid output we should either fix the input or raise an instructive error.  \n\n## \n\nRichard Schneeman\nhttp://heroku.com\n@schneems\n\nSent from the road\n\nOn Thursday, May 30, 2013 at 6:01 PM, José Valim wrote:\n\n> Ok, let me do the grumpy old man job: it is to a certain point the responsibility of the user to provide correct data. However, it is our responsibility to document and name our API as clearly as possible.\n> That said, :host is a very clear name. A host does not contain a schema. A host does not contain paths. I think normalizing those things is a waste of resource for the 99% of the correct cases at the cost of teaching wrong semantics to users!\n> \n> —\n> Reply to this email directly or view it on GitHub (https://github.com/rails/rails/pull/9838#issuecomment-18668979).\n", "created_at": "2013-05-30 09:41:07", "user": 59744, "id": 18670680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18677130", "text": "I have had this problem as well, back when I didn't know these things. An instructive error would have been lovely, to let me know that rails made that distinction. \n", "created_at": "2013-05-30 12:33:33", "user": 40206, "id": 18677130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20717354", "text": "I've seen this error often in various applications.  In fact, I've seen it enough that I ended up doing some checks and manipulating the url mailed out to ensure both a host and protocol were specified to prevent this particular error from happening in a recent application.\n\n:+1: \n", "created_at": "2013-07-10 01:55:24", "user": 138048, "id": 20717354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20730010", "text": "I don't think we need to backport this now that Rails 4.0 has been released.\n", "created_at": "2013-07-10 09:09:07", "user": 6321, "id": 20730010}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is back ported from master #9837\n", "labels": [], "number": 9839, "updated_at": "2014-07-04 15:45:37", "user": 2205, "closed_at": "2013-03-21 12:27:42", "id": 12248961, "title": "Don't generate a scaffold.css when --no-assets is specified", "url": "https://api.github.com/repos/rails/rails/issues/9839", "created_at": "2013-03-20 21:17:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233414", "text": "I think is not worth to backport this to the stable branch.\n\nThank you for the contribution. We really appreciate it. :heart:\n", "created_at": "2013-03-21 12:27:42", "user": 47848, "id": 15233414}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit allows calling +match+ with a :via => :all option to explicitly match all verbs.\n\nThe :via => :all option was added to Rails 4 in the  process of deprecating +match+ (#5964). To facilitate the migration to Rails 4, it would be helpful to make this option available in Rails 3.\n", "labels": [], "number": 9840, "updated_at": "2014-06-19 09:21:07", "user": 209264, "closed_at": "2013-03-23 00:55:07", "id": 12249513, "title": "Add router DSL to explicitly match all verbs", "url": "https://api.github.com/repos/rails/rails/issues/9840", "created_at": "2013-03-20 21:30:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15206860", "text": "I think I'd rather not have this option in Rails 3, so that people can consciously choose whether they're really needing a get/post VS allowing to match all. By adding this option, we'd opening the ports for everyone to change match to match all to solve the problem, and the overall idea of not allowing match with a specific verb/verbs would be kinda useless I think. Just my cents about the change, lets get other feedback before acting. Thanks for your contribution.\n", "created_at": "2013-03-20 22:08:01", "user": 26328, "id": 15206860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15328164", "text": "+1 to what @carlosantoniodasilva  said .\n", "created_at": "2013-03-23 00:44:48", "user": 6399, "id": 15328164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15328334", "text": "Sorry but we don't backport features from master to stable versions, 3.2.x is only receiving bug fixes.\n\nThanks for you contribution!!!\n", "created_at": "2013-03-23 00:55:07", "user": 160941, "id": 15328334}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9841, "updated_at": "2013-03-21 15:26:45", "user": 35751, "closed_at": "2013-03-21 15:26:45", "id": 12250810, "title": "rubyonrails.org refers to 3.2.12, but the newest version is technically 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9841", "created_at": "2013-03-20 22:02:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15210936", "text": "/cc @dhh\n", "created_at": "2013-03-20 23:37:25", "user": 27786, "id": 15210936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15245150", "text": "Fixed.\n", "created_at": "2013-03-21 15:26:45", "user": 2741, "id": 15245150}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm using Rails 3.2.11, RSpec-rails 2.11.0, and Capybera 1.1.2.  I can't get a validation test\nto work as I expect.  The test for 'only_integer' doesn't fail validation when a fraction is passed in.\n\nNOTE - The migration has 'integer' as the type for 'rows' here...  So, it could be there's some interaction there (the test trying to assign an Integer field a fraction), but that seems like a bug if that's what's happening - the test for validation should pass if the DB type is integer.\n\nI've run the rake tasks db:reset, db:migrate, and db:test:prepare\n\n[Stranger yet, if I add \", greater_than: 0\" after only_integer: true - the test no longer fails]\n\nThe DB for my test environment is SQLite 3 (1.3.5).  I'm running the tests with Spork and Guard.\n\nMy model code looks like:\n\n---\n\nclass Storage < ActiveRecord::Base\n  attr_accessible :columns, :name, :rows\n  validates :name,    presence: true\n  validates :rows,    presence: true\n  validates_numericality_of :rows, only_integer: true\n  validates :columns, presence: true,\n                      numericality: true\nend\n\n---\n\nMy RSpec looks like:\n\nrequire 'spec_helper'\n\ndescribe Storage do\n  before do\n    @storage = Storage.new\n    @storage.name = \"Storage\"\n    @storage.rows = 2\n    @storage.columns = 3\n  end\n\n  subject { @storage }\n\n  it { should be_valid }\n\n  it { should respond_to(:name) }\n  it { should respond_to(:rows) }\n  it { should respond_to(:columns) }\n\n  describe \"with missing name\" do\n    before { @storage.name = \" \" }\n    it { should_not be_valid }\n  end\n\n  describe \"with missing row count\" do\n    before { @storage.rows = \" \" }\n    it { should_not be_valid }\n  end\n\n  describe \"with a non numberical row count\" do\n    before { @storage.rows = \"not a number\" }\n    it { should_not be_valid }\n  end\n\n  describe \"with a fractional row count\" do\n    before { @storage.rows = 1/2 }\n    it { should_not be_valid }                           <<<<< FAILS HERE\n  end\nend\n\n---\n\nThe migration looks like:\n\nclass CreateStorages < ActiveRecord::Migration\n  def change\n    create_table :storages do |t|\n      t.string :name\n      t.integer :rows\n      t.integer :columns\n\n```\n  t.timestamps\nend\n```\n\n  end\nend\n\n---\n\nThe <partial> RSpec output is:\n\n  1) Storage with a fractional row count \n     Failure/Error: it { should_not be_valid }\n       expected valid? to return false, got true\n     # ./spec/models/storage_spec.rb:37:in `block (3 levels) in <top (required)>'\n\nSo, I think this means that the problem is in the Rails validation code, not in RSpec.\n", "labels": [], "number": 9842, "updated_at": "2013-03-20 23:54:05", "user": 3029350, "closed_at": "2013-03-20 23:54:05", "id": 12253834, "title": "validates numericality only_integer fails to flag fractions as invalid (or RSpec test isn't correct)", "url": "https://api.github.com/repos/rails/rails/issues/9842", "created_at": "2013-03-20 23:31:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15211417", "text": "Looks like the error is in your test here:\n\n```\nbefore { @storage.rows = 1/2 } \n```\n\nRuby does integer division when you divide two integers:\n\n```\n>> 1/2\n=> 0\n```\n\nWhich is probably also why it passes when you add `greater_than: 0`\n\nYou can fix it by explicitely using floating point arithmetic:\n\n```\nbefore { @storage.rows = 1.0/2.0 } \n```\n", "created_at": "2013-03-20 23:51:09", "user": 5549, "id": 15211417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15211520", "text": "That was it!  Thank you.\n", "created_at": "2013-03-20 23:54:05", "user": 3029350, "id": 15211520}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Upgrading an existing Rails 3 app to Rails 4 results in a `rails` command that only ever prints the help for `rails new`. Here are reproduction steps:\n\n```\nmkdir app\ncd app\ncurl -sLo Gemfile http://git.io/G3awjw\nbundle install --binstubs --path vendor/bundle\nbundle exec rails new .\nbundle exec rails runner \"puts 'WORKING'\" #=> WORKING\nsed -i -e 's/3.2.13/4.0.0.beta1/g' Gemfile # update to rails 4\nruby -i -ne 'print if not /coffee|sass/' Gemfile\nbundle update rails\nrm -rf script/rails # like you're supposed to\nbundle exec rails runner \"puts 'WORKING'\" #=> help for rails new\n```\n\nThere are angry developers about this issue available for perusal in carlhuda/bundler#2253.\n", "labels": ["railties"], "number": 9843, "updated_at": "2014-06-12 18:23:20", "user": 78, "closed_at": "2013-04-09 16:24:49", "id": 12255055, "title": "Rails 4 prints help for \"rails new\" when running \"rails console\"", "url": "https://api.github.com/repos/rails/rails/issues/9843", "created_at": "2013-03-21 00:15:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212395", "text": "```\nbundle install --binstubs\n```\n\nThat would overwrite `bin/rails` that ship with Rails, and `rails` that ship with the gem only handles generating new app ... (I think)\n\nI think we keep getting issue like this. How do you think we should tackle it @jeremy @dhh ?\n", "created_at": "2013-03-21 00:18:17", "user": 4912, "id": 15212395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212416", "text": "The patch I just added does actually resolve the regression in `rails console`, but I'd like to get feedback on it before trying to get it applied.\n", "created_at": "2013-03-21 00:18:51", "user": 78, "id": 15212416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15447496", "text": "Is there a temporary fix for this? I need to run `rails console production` on my linux box.\n", "created_at": "2013-03-26 09:04:40", "user": 1236447, "id": 15447496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15466104", "text": "You should be able to run 'bundle config --delete binstubs && rake rails:update:binstubs && bin/rails' to get things working.\n\nOn Mar 26, 2013, at 2:05 AM, Jamie Hill notifications@github.com wrote:\n\n> Is there a temporary fix for this? I need to run rails console production on my linux box.\n> \n> \\\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-26 15:42:45", "user": 78, "id": 15466104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15466986", "text": "I then get `Don't know how to build task 'rails:update:binstubs'`\n", "created_at": "2013-03-26 15:56:03", "user": 1236447, "id": 15466986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15468654", "text": "`rake rails:update:bin`\n\nOn Mar 26, 2013, at 8:56 AM, Jamie Hill notifications@github.com wrote:\n\n> I then get Don't know how to build task 'rails:update:binstubs'\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-26 16:21:33", "user": 78, "id": 15468654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15469138", "text": "Perfect @indirect, many thanks.\n\nSo is the problem with Bundler? What is the long term fix? \n", "created_at": "2013-03-26 16:28:34", "user": 1236447, "id": 15469138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15482728", "text": "Probably best to abort with an error when it's been overwritten.\n\nThink `config --delete binstubs` needs to be `config --delete bin` as well.\n", "created_at": "2013-03-26 19:25:22", "user": 199, "id": 15482728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15533268", "text": "`bundle config --delete bin && rake rails:update:bin` works, thanks.\n\n@jeremy Would you put that code in `application.rb`?\n", "created_at": "2013-03-27 16:15:17", "user": 1236447, "id": 15533268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15566292", "text": "tested with cross-rails versions and fixed instructions. anything else?\n", "created_at": "2013-03-28 03:26:24", "user": 78, "id": 15566292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15581986", "text": "What is the technical limitation why `bin/rails` can't work for the current app if it was generated with Bundler? Can't Rails detect it's in an existing rails app?\n", "created_at": "2013-03-28 11:10:44", "user": 887, "id": 15581986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15695479", "text": "I'm with @mislav. Why break compatibility with `--binstubs`? As far as I'm aware, this is a pretty widely-used option.\n", "created_at": "2013-03-31 18:20:20", "user": 4338, "id": 15695479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16130092", "text": "This seems to have [failed the build](https://travis-ci.org/rails/rails/builds/6190788), mind taking a look? :pray::smile:\n", "created_at": "2013-04-09 18:14:10", "user": 26328, "id": 16130092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16131136", "text": "`rails server` was also breaking in the same way as `rails console`, right? If so then I won't have to open another issue, I think it's the same one.\n", "created_at": "2013-04-09 18:31:21", "user": 827224, "id": 16131136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16135217", "text": "@Agis-, yes, same issue.\n\n@carlosantoniodasilva I submitted a draft patch for review! I wasn't expecting it to just get merged. :) I will next have time to look at this tomorrow, so I'll check on things then if the build is still red.\n", "created_at": "2013-04-09 19:39:05", "user": 78, "id": 16135217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16135906", "text": "@indirect Ah, I almost lost my mind with this one! :bow: :clap: \n", "created_at": "2013-04-09 19:51:56", "user": 827224, "id": 16135906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16135923", "text": "@indirect thanks :heart:\n", "created_at": "2013-04-09 19:52:09", "user": 26328, "id": 16135923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16245525", "text": "@indirect So let me get this straight, the issue comes both Bundler overwriting `bin/rails` after you do a `bundle install --binstubs`? Could you shed some more light on why this regression happened with Rails 4? This was never the case in 3.2, was it?\n\nEdit: nvm, this was just answered: https://github.com/rails/rails/commit/9039c5038823754f79e04f1e83723e46229dbe05#commitcomment-2993604\n", "created_at": "2013-04-11 16:27:14", "user": 827224, "id": 16245525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16247087", "text": "the `rails` bin included in the rails gem try to find the `script/rails` file in Rails 3.2 and call it. But `script/rails` was changed to `bin/rails` and the `rails` bin included in the rails 4 gem try to find `script/rails` and `bin/rails`. If bundle override the `bin/rails` with its binstub the content of the `bin/rails` will not be the same of the included in Rails 4, so it will only print the help of the new command \n", "created_at": "2013-04-11 16:51:54", "user": 47848, "id": 16247087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16247233", "text": "@rafaelfranca thanks, this makes it even more clear!\n", "created_at": "2013-04-11 16:54:13", "user": 827224, "id": 16247233}], "assignees": [199, 199], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "rawr!\n\nSee https://github.com/rails/rails/pull/9177#issuecomment-14575192 for background infos.\n\nReviewed by @tenderlove\n", "labels": ["railties"], "number": 9844, "updated_at": "2014-06-25 12:23:13", "user": 9832, "closed_at": "2013-08-03 14:39:36", "id": 12255268, "title": "Moved test:run subtask names to RAILS_TESTS for easy modification", "url": "https://api.github.com/repos/rails/rails/issues/9844", "created_at": "2013-03-21 00:24:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212771", "text": "This pull request cannot be automatically merged. :grin:\n", "created_at": "2013-03-21 00:29:52", "user": 160941, "id": 15212771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212954", "text": "This commit was already merged\n", "created_at": "2013-03-21 00:33:26", "user": 47848, "id": 15212954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212982", "text": "Ops, I was wrong\n", "created_at": "2013-03-21 00:34:05", "user": 47848, "id": 15212982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15217553", "text": "Considered doing this, but it introduces a bare toplevel constant as de facto API.\n\nCan work around this with `Rake::Task['test:run'].enhance 'test:before'` though it doesn't fit with `test:run`'s error-collection scheme.\n", "created_at": "2013-03-21 03:25:35", "user": 199, "id": 15217553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22055865", "text": "this file has changed a lot from last 5 months. Please do a new PR if this patch is still required.\n\nClosing this.\n\nthanks.\n", "created_at": "2013-08-03 14:39:36", "user": 3948, "id": 22055865}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "um... yeah.\n", "labels": [], "number": 9845, "updated_at": "2014-07-04 15:45:32", "user": 9832, "closed_at": "2013-03-21 00:27:33", "id": 12255326, "title": "Tilde files   wow", "url": "https://api.github.com/repos/rails/rails/issues/9845", "created_at": "2013-03-21 00:26:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "yup yup\n", "labels": ["railties"], "number": 9846, "updated_at": "2014-07-04 15:45:30", "user": 9832, "closed_at": "2013-04-26 14:51:04", "id": 12255402, "title": "removed tilde files", "url": "https://api.github.com/repos/rails/rails/issues/9846", "created_at": "2013-03-21 00:29:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15212783", "text": "Have you run the tests?\n", "created_at": "2013-03-21 00:30:24", "user": 3124, "id": 15212783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17078933", "text": "These files are intentionally there to [test that they aren't rendered](https://github.com/rails/rails/blob/master/actionpack/test/template/render_test.rb#L376-L382).\n", "created_at": "2013-04-26 14:51:04", "user": 6321, "id": 17078933}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Fix copy table index test, that was wrongly testing same thing\n2. Change == to ! on false value in travis.rb\n", "labels": [], "number": 9847, "updated_at": "2014-06-26 15:55:54", "user": 567626, "closed_at": "2013-03-21 12:30:25", "id": 12261307, "title": "Fix copy table index test; Change == to ! on false in travis.rb", "url": "https://api.github.com/repos/rails/rails/issues/9847", "created_at": "2013-03-21 05:33:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15220356", "text": "cc @carlosantoniodasilva \n\nNot sure, if I should have removed the extra hash form comments.\n", "created_at": "2013-03-21 05:34:18", "user": 567626, "id": 15220356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15226499", "text": "@vipulnsward What do you think about this?\n\n   `failures = results.reject { |key, value| value }` \n", "created_at": "2013-03-21 09:25:14", "user": 621238, "id": 15226499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233594", "text": "Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-03-21 12:30:38", "user": 47848, "id": 15233594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233957", "text": ":smile: \n", "created_at": "2013-03-21 12:34:33", "user": 567626, "id": 15233957}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi\n\nI am using rails 3.2.13. \n\nbefore_filter :render_something\nafter_filter :some_method , :if => Proc.new{|c| @variable_in_controller.count }\n\nEven though the before_filter is rendering, This does not stop execution of the :if Proc in :after_callback. Even though the \"some_method\" is not actually executed.\n\nI came across a similar issue in one of the older rails, They say it is not happening on 3.2 but still I am facing the same issue. https://github.com/rails/rails/pull/4440\n\nRegards,\nRajesh\n", "labels": ["actionpack"], "number": 9848, "updated_at": "2013-11-03 01:08:42", "user": 577834, "closed_at": "2013-11-03 01:08:42", "id": 12266547, "title": "after_filter callbacks :if procs getting executed even when filter chain is halted by render in before_filter", "url": "https://api.github.com/repos/rails/rails/issues/9848", "created_at": "2013-03-21 09:43:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27635936", "text": "Could we close this issue? See: https://github.com/rails/rails/pull/9865\n", "created_at": "2013-11-03 00:25:34", "user": 611891, "id": 27635936}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Added ability to use an array of names to create multiple url helpers for one url route.\n\n``` ruby\n#config/routes.rb\nget 'homes', to: 'homes#index', as: [:home, :homes]\n```\n\n```\n$ rake routes\nhome GET    /homes(.:format)  homes#index\nhomes GET    /homes(.:format) homes#index\n```\n", "labels": [], "number": 9849, "updated_at": "2014-07-04 15:45:28", "user": 21104, "closed_at": "2013-03-21 12:24:33", "id": 12268070, "title": "Added ability to apply array to option 'as' of the Routing Mapper", "url": "https://api.github.com/repos/rails/rails/issues/9849", "created_at": "2013-03-21 10:29:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15229626", "text": "This seems like a bad idea.\n", "created_at": "2013-03-21 10:42:54", "user": 9347, "id": 15229626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15232108", "text": "Yeah... this will add more confusion that benefits.\n\nWhy do you need this?\n", "created_at": "2013-03-21 11:51:32", "user": 47848, "id": 15232108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233170", "text": "Example I have one page for several resources, and after updates I should be redirected to the page with minimal changes to code.\n\n``` ruby\n# config/routes.rb\nget 'homes', to: 'homes#index', as: [:home, :customers, :sellers, :visitors]\n```\n\n``` ruby\n# app/controllers/{users|sellers|visitors}_controller.rb\n\nrender_with(@user, location: customers_path)\nrender_with(@seller, location: sellers_path)\nrender_with(@visitor, location: visitors_path)\n```\n\nIt could be done via this:\n\n``` ruby\n%w(home customers sellers visitors).each {|name| get 'homes', to: 'homes#index', as: name}\n```\n\nI could not remember the real example, why I need this, it was long time ago.\n\nSo the main goal is add ability to create aliases to url helpers. \n", "created_at": "2013-03-21 12:21:31", "user": 21104, "id": 15233170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233293", "text": "I see. Thank you for the explanation.\n\nSince you can do the same using the loop in the routes I think is better to not include this on the rails code.\n\nThank you for the contribution. We really appreciate :heart: \n", "created_at": "2013-03-21 12:24:33", "user": 47848, "id": 15233293}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you define a scope on a model and then have multiple where conditions referencing the same field it will only use the last one. This can lead to unexpected SQL and might lead to security issues.\n\nI've created an example Rails app with detailed description here: https://github.com/erlingur/scope-issue\n\nWe have a model called Transaction with group_id:integer and price:integer.\n\nThe Transaction model also has a scope called high_price that is defined as such:\n\n```\nscope :high_price, where(\"price > 100\")\n```\n\nLet's say these transactions belong to groups and we also have users that can belong to groups.\n\nWe want to return all transactions that belong only to the user's groups and then any group he might select in a form to narrow it down.\n\nWe could do something like this:\n\n```\nTransaction.where(:group_id => [1,2,3]).where(:group_id => [2])\n```\n\nJust imagine the first where is using something like current_user.group_ids and the second is params[:group_ids].\n\nThis generates the following query:\n\n```\nSELECT \"transactions\".* FROM \"transactions\" WHERE \"transactions\".\"group_id\" IN (1, 2, 3) AND \"transactions\".\"group_id\" IN (2)\n```\n\nIf we want to only see high cost transactions for instance, we might do something like this:\n\n```\nTransaction.where(:group_id => [1,2,3]).where(:group_id => [2]).high_price\n```\n\nThis does not work correctly and is highly dangerous. This will generate the following query:\n\n```\nSELECT \"transactions\".* FROM \"transactions\" WHERE \"transactions\".\"group_id\" IN (2) AND (price > 100)\n```\n\nIt correctly added the price condition but it DROPPED the first where condition! Which means the user could now pass in any id from the form and look at transactions from any group.\n\nHowever, if I put the scope on first and then the where conditions like so:\n\n```\nTransaction.high_price.where(:group_id => [1,2,3]).where(:group_id => [2])\n```\n\nThen it will generate the correct query:\n\n```\nSELECT \"transactions\".* FROM \"transactions\" WHERE \"transactions\".\"group_id\" IN (1, 2, 3) AND \"transactions\".\"group_id\" IN (2) AND (price > 100)\n```\n\nIf I convert the scope into a class method then it always works correctly.\n", "labels": [], "number": 9850, "updated_at": "2013-03-21 12:21:13", "user": 509720, "closed_at": "2013-03-21 12:04:41", "id": 12270381, "title": "Using scopes can drop where conditions", "url": "https://api.github.com/repos/rails/rails/issues/9850", "created_at": "2013-03-21 11:44:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15232559", "text": "Already fixed on master see #9553 and 9f007d7fe5f90257c71baa2c4e7c76fb44512986\n", "created_at": "2013-03-21 12:04:41", "user": 47848, "id": 15232559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15233159", "text": "Brilliant, thanks @rafaelfranca!\n", "created_at": "2013-03-21 12:21:13", "user": 509720, "id": 15233159}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "While upgrading an app to Rails 4 beta, I've noticed a pattern that could be a security concern.\n\nLets say you have a product that has many images. When creating the record you would use something like:\n\n``` ruby\nparams.require(:product).permit(\n  :name, images_attributes: [:name, :upload]\n)\n```\n\nThis works fine, however when it comes to updating the record, the only way to get it to work is to permit the `:id` param as otherwise additional new images will be added each time rather than updating the existing ones, so you end up with:\n\n``` ruby\nparams.require(:product).permit(\n  :name, images_attributes: [:id, :name, :upload]\n)\n```\n\nThis is a security concern as users could tamper with the id field and get hold of other peoples images. Am I missing a workaround to this?\n", "labels": [], "number": 9851, "updated_at": "2013-03-21 17:08:51", "user": 1236447, "closed_at": "2013-03-21 17:08:51", "id": 12273777, "title": "Security concern with strong parameters and accepts_nested_attribute_for", "url": "https://api.github.com/repos/rails/rails/issues/9851", "created_at": "2013-03-21 13:16:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15251901", "text": "@thelucid as I commented in the related issue, ids are required so that Rails know you're actually editing a record instead of adding a new one. And I think it shouldn't be a security concern because [it acts in the existing association](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/nested_attributes.rb#L400-L405), which means it's scoped and should not find each record at the database level only based on the given id.\n\nPlease give it a try in some sort of application test, and if you do find that's a possible security issue, check out [Rails security page](http://rubyonrails.org/security) for more info on how to send it.\n\nThanks!\n", "created_at": "2013-03-21 17:08:51", "user": 26328, "id": 15251901}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails 3.2.13\nRuby 2.0.0-p0\n\n![Screenshot from 2013-03-21 10:47:27](https://f.cloud.github.com/assets/177525/285884/f3f2398c-922d-11e2-97fe-d1b4364d4cec.png)\n\nmodel/professional.rb\n\n``` ruby\nclass Professional < ActiveRecord::Base\n\n  extend FriendlyId\n\n  attr_accessible :crm, :name, :remove_photo, :photo, :photo_cache, :cell, :email,:curriculum, :visible\n  attr_accessible :clinics_attributes, :clinics_ids\n\n  has_many :clinics, class_name: 'Address', as: :addressable, dependent: :destroy\n  accepts_nested_attributes_for :clinics, :allow_destroy => true\n\n\n  validates_presence_of :crm, :name, :email\n  validates :email, email: true \n\n  scope :visible, where(:visible, true)\n\n  mount_uploader :photo, Profissionals::ImageUploader\n\n\n  friendly_id :name, use: :slugged\n\n\nend\n```\n\nmodel/address.rb\n\n``` ruby\nclass Address < ActiveRecord::Base\n  belongs_to :city\n  delegate :state, :to => :city, :allow_nil => true\n  belongs_to :addressable, polymorphic: true\n  attr_accessible :address, :complement, :description, :district, :number, :zipcode, :latitude, :longitude, :city_id\n\n\n  validates_presence_of :address\n\n  def to_s\n    \"#{address}, #{number} - #{district} - #{city}/#{state}\"\n  end\n\n\nend\n\n```\n", "labels": ["activerecord", "needs feedback"], "number": 9852, "updated_at": "2013-04-09 12:49:47", "user": 177525, "closed_at": "2013-04-09 12:48:03", "id": 12275301, "title": "Error signing has_many attributes: \"no implicit conversion of Symbol into Integer\"", "url": "https://api.github.com/repos/rails/rails/issues/9852", "created_at": "2013-03-21 13:51:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15239579", "text": "Ruby 1.9.3 is raising this error too.\n", "created_at": "2013-03-21 13:52:58", "user": 177525, "id": 15239579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16101032", "text": "Is this still an issue? From the bug report it's hard to tell what code you are executing. To help us debug the issue it would help if you put up a small sample app on github. If the problem is only related to ActiveRecord instead of making a sample app you should use this gist https://gist.github.com/neerajdotname/5187092 to create a focused executable example.\n", "created_at": "2013-04-09 08:48:03", "user": 5402, "id": 16101032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16110317", "text": "@senny Sorry for the delay. This was problem of \"default_value_for\" gem. I solved removing that gem. But, looks like they solved the problem recently. For it gave no problem in other  recently projects.\n", "created_at": "2013-04-09 12:48:03", "user": 177525, "id": 16110317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16110404", "text": "Thanks for reporting back :heart: .\n", "created_at": "2013-04-09 12:49:47", "user": 5402, "id": 16110404}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Most of the validation methods that I've seen around Rails have used a bang at the end of the method name to signify that an error can possibly be raised. I've refactored `raise_on_type_mismatch` to `raise_on_type_mismatch!` to follow this convention.\n", "labels": [], "number": 9853, "updated_at": "2014-06-26 19:57:04", "user": 1075780, "closed_at": "2013-03-21 16:08:38", "id": 12281443, "title": "Adding a bang to method name of raise_on_type_mismatch.", "url": "https://api.github.com/repos/rails/rails/issues/9853", "created_at": "2013-03-21 16:02:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Referring to #9080 [comment](https://github.com/rails/rails/pull/9080#issuecomment-15249358)\n\n> The way it should work is:\n> \n> 1) `rails test models/single_test` should NOT reload the db fixtures, but MUST provide access to the existing fixtures through the accessors, like `line_items(:one)`.\n> \n> 2) `rails test models/single_test --reload-fixtures` MUST reload the db fixtures AND provide access through accessors.\n> \n> 3) `rails test models` MUST reload the db fixtures AND provide access through accessors.\n> \n> 4) `rails test` MUST reload the db fixtures AND provide access through accessors.\n\nCurrently, since I've commented out `fixtures :all` in https://github.com/rails/rails/commit/1a0c58b2988a24a783b4f9a658ac629922125551#L2L9 all the helpers are not available, and that's not desired behavior at all.\n\n/cc @dhh, @rubys, @tenderlove \n", "labels": ["activerecord"], "number": 9854, "updated_at": "2013-03-29 20:08:52", "user": 4912, "closed_at": "2013-03-29 20:08:52", "id": 12283459, "title": "Fix regression on accessing database fixtures when runnning `rails test`  ", "url": "https://api.github.com/repos/rails/rails/issues/9854", "created_at": "2013-03-21 16:41:30", "comments": [], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Mysql's UTF8 support (charset name 'utf8') has been limited to 3-byte characters. This was changed in mysql 5.5 by adding a new charset 'utf8mb4' and creating an alias for 'utf8' of 'utf8mb3' (for multibyte 3 chars). It is my understanding that 'utf8mb4' is the \"real\" utf8 support, and it will likely be a popular option amongst developers. I discovered this problem by storing the text of Twitter messages where activerecord would throw an exception because mysql was rejecting the INSERT statements due to 'invalid' 4 byte UTF8 characters.\n\nThe current mysql2 gem does not support charset utf8mb4 but the github head version of the gem does. After setting up the new character set in database.yml and the mysql server, it is no longer possible to create a new database through the usual rake db creation tasks.\n\nThe mysql docs talk about a new limitation on database indexes for string columns when the utf8mb4 charset is in use. The limit is 191 characters for string columns using utf8mb4.  (http://dev.mysql.com/doc/refman/5.6/en/charset-unicode-upgrading.html). When the schema_migrations table is created with string length 255, mysql throws an error.\n\n$ rake db:setup\n\nMysql::Error: Specified key was too long; max key length is 767 bytes:\n CREATE UNIQUE INDEX `unique_schema_migrations` ON `schema_migrations` (`version`)\n\nA slightly longer writeup is in http://donpark.org/blog/2013/02/16/rails-3-2-12-not-ready-for-mysql-5-5-utf8mb4\n", "labels": [], "number": 9855, "updated_at": "2017-11-21 22:20:10", "user": 13176, "closed_at": "2013-03-21 17:19:02", "id": 12284622, "title": "MySQL UTF8MB4 breaks ActiveRecord schema setup", "url": "https://api.github.com/repos/rails/rails/issues/9855", "created_at": "2013-03-21 17:06:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15252529", "text": "Fixed by 8744632fb5649cf26cdcd1518a3554ece95a401b :grin:\n", "created_at": "2013-03-21 17:19:02", "user": 199, "id": 15252529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15252709", "text": "Thank You!\n", "created_at": "2013-03-21 17:21:53", "user": 13176, "id": 15252709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25678180", "text": "I still see the `Mysql2::Error: Specified key was too long; max key length is 767 bytes: CREATE UNIQUE INDEX` when performing `rake db:create && rake db:migrate` with Rails 4.\n", "created_at": "2013-10-04 06:06:22", "user": 126732, "id": 25678180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25845309", "text": "Having the same issue as @heaven, Rails4 as well, while trying to run default Devise migration.\n", "created_at": "2013-10-07 21:06:54", "user": 4374705, "id": 25845309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26044729", "text": "I'm still seeing this error in Rails4\n", "created_at": "2013-10-10 11:06:16", "user": 909696, "id": 26044729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28874587", "text": "this will set default mysql string column length to 191 instead of 255 which is the new index limit on utf8mb4 (aka real utf8).\n\n``` ruby\n# config/initializers/mysqlpls.rb\nrequire 'active_record/connection_adapters/abstract_mysql_adapter'\n\nmodule ActiveRecord\n  module ConnectionAdapters\n    class AbstractMysqlAdapter\n      NATIVE_DATABASE_TYPES[:string] = { :name => \"varchar\", :limit => 191 }\n    end\n  end\nend\n```\n", "created_at": "2013-11-20 09:47:24", "user": 276295, "id": 28874587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31556251", "text": ":+1: Thanks @edogawaconan's monkeypatch worked! :sparkles:\n", "created_at": "2014-01-03 21:44:50", "user": 9863, "id": 31556251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32533534", "text": "Are there plans to fix Rails 3 with this patch?\n", "created_at": "2014-01-16 20:18:14", "user": 6473, "id": 32533534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32537812", "text": "@yyyc514 unfortunately not, Rails 3 is not being supported for bug fixes anymore.\n", "created_at": "2014-01-16 20:30:04", "user": 26328, "id": 32537812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35066135", "text": "@jeremy Can you confirm the necessity of the patch by @edogawaconan for Rails 4? Readers of this issue will currently be unclear as to whether they need to include that patch and although it is trivial to find out, it would be good if an authoritative source could weigh in, so 'finding out' doesn't need to be repeated by every reader. Especially if the patch _is_ required, in which this case this issue should be reopened?\n", "created_at": "2014-02-14 08:50:43", "user": 307722, "id": 35066135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35597355", "text": "My Rails 4.0.2 schema exploded after I switched to utf8mb4 (needed it for Emoji support):\n\n```\n-    t.text     \"parameters\"\n+    t.text     \"parameters\",     limit: 16777215\n-    t.string   \"state\",      default: \"current\"\n+    t.string   \"state\"\n```\n\nWhat's worse - some defaults are missing. Please advise should I merge new limits with old defaults?\n", "created_at": "2014-02-20 08:09:20", "user": 115612, "id": 35597355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35618750", "text": "@Confusion Tricky one. Changing the default `string` length is a major breaking change. Some options to explore:\n- Explicitly limit your string length in the migration.\n- Use prefix indexes to limit index bloat (rarely need an index on all 191 chars).\n- Make default varchar limits configurable and dump it along with schema.rb to preserve compatibility.\n- Switch to MySQL `DYNAMIC` table format and enable `innodb_large_prefix` to increase the max key length from 767 bytes to 3072 bytes: http://dev.mysql.com/doc/refman/5.6/en/innodb-parameters.html#sysvar_innodb_large_prefix\n\n@firedev Your schema is dumped from your db, so if a default is missing, it was inadvertently removed from your db. Do a migration to re-add your default and the next schema dump will have it.\n", "created_at": "2014-02-20 13:00:49", "user": 199, "id": 35618750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37379805", "text": "Okay, thanks, but now I have the same\n\n```\nMysql2::Error: Specified key was too long; max key length is 767 bytes: CREATE UNIQUE INDEX `unique_schema_migrations`  ON `schema_migrations` (`version`)\n```\n\nGuess it was patched for `>= 4.1.0.rc1`, was it?\n", "created_at": "2014-03-12 06:42:13", "user": 115612, "id": 37379805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42715659", "text": "I have the same issue on Rails 4.1.1:\n\n```\nMysql2::Error: Index column size too large. The maximum column size is 767 bytes.: ALTER TABLE ...\n```\n", "created_at": "2014-05-09 21:23:13", "user": 1415597, "id": 42715659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42727742", "text": "I have used gem [`demoji`](https://github.com/taskrabbit/demoji) and converted database back to UTF8 to get rid of these issues.\n", "created_at": "2014-05-10 01:21:54", "user": 115612, "id": 42727742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/45171438", "text": "I'm also experiencing this issue in a Rails app recently upgraded from 3.2.18 to 4.1.1 in that it cannot create an index on a `VARCHAR(255)` column.\n\nThe only workaround I've found so far is updating the column to `VARCHAR(191)`.\n\nwith sql:\n\n```\nALTER TABLE table_name MODIFY column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\nin a migration:\n\n```\nexecute \"ALTER TABLE table_name MODIFY column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\"\n```\n\nSo it appears to me that either @edogawaconan's monkeypatch is still required in Rails 4.1.1 **or** you must manually keep track of any `string` values that you want to index on, to keep those specific columns limited to `VARCHAR(191)`.\n\nI'd **love** to be wrong about this, though.\n", "created_at": "2014-06-05 01:18:25", "user": 408939, "id": 45171438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50553954", "text": "fwiw I hit this error on rails 4.1.4, monkey patch fixed. Sorry haven't investigated more.\n", "created_at": "2014-07-29 23:33:04", "user": 1714, "id": 50553954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50571052", "text": "What I've done and what I've learned: \n- switched the database.yml encoding to utf8mb4\n- left all my tables utf8\n- left the database utf8 (ensures new tables are utf8 by default)\n- converted individual columns as necessary to utf8mb4\n- switched to schema.sql dumps and imports so the column encodings are preserved properly\n\nThis seems to work great without any weird Rails issues - if you can give up schema.rb, which I've always found more annoying than helpful in a large production app anyways.\n", "created_at": "2014-07-30 03:54:59", "user": 6473, "id": 50571052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/53210927", "text": "I'm getting this same problem with `4.2.0.beta1` (about key lengths being too long). The monkeypatch fixes this, but obviously is not ideal. Is this on the roadmap somewhere?\n", "created_at": "2014-08-24 22:12:27", "user": 1386207, "id": 53210927}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57665404", "text": "Solved.\nmysql 5.6\nrails 4.1\n\nin your my.cnf:\n\n```\ninnodb_large_prefix             = 1\ninnodb_file_format              = barracuda\ninnodb_file_per_table           = 1\n```\n\nand you must create the table with the option ROW_FORMAT=DYNAMIC (by default it's COMPACT)\n\nhere I found a monkey patch http://3.1415.jp/mgeu6lf5\n\n```\nconfig/initializers/ar_innodb_row_format.rb\n```\n\n``` ruby\nActiveSupport.on_load :active_record do\n  module ActiveRecord::ConnectionAdapters   \n    class AbstractMysqlAdapter \n      def create_table_with_innodb_row_format(table_name, options = {}) \n        table_options = options.reverse_merge(:options => 'ENGINE=InnoDB ROW_FORMAT=DYNAMIC')\n\n        create_table_without_innodb_row_format(table_name, table_options) do |td|\n         yield td if block_given? \n        end\n      end\n      alias_method_chain :create_table, :innodb_row_format \n    end\n  end\nend\n```\n", "created_at": "2014-10-02 17:24:16", "user": 2496204, "id": 57665404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57666389", "text": "better solution, instead of use the monkey path just add the option.\n\n``` ruby\ncreate_table :table_name, options: 'ROW_FORMAT=DYNAMIC' do |t|\n  ...\n```\n", "created_at": "2014-10-02 17:28:29", "user": 2496204, "id": 57666389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57670025", "text": "I think the point of the monkey patch is because it's easy to forget to always add those options... or new team members replace old ones and no one knows that special options are always required, etc...\n\nSure you can do it manually, but if you want to do it once and forget it (though document the monkey patch somewhere) the patch  makes sense.  My solution above has also proven to work well in practice.\n", "created_at": "2014-10-02 17:46:13", "user": 6473, "id": 57670025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57675534", "text": "@yyyc514 you can use any solution, which one depends on your project and your team. If the option to add ROW_FORMAT is there I will use it. I prefer use the options that rails provide instead of monkey patch something. \n\nMonkeypatch is the last resort. You say it will be easy for new team members... I don't agree, you can document this issue or even read the previous migrations. Also monkeypatch is not upgrade safe.\n\nThe required options will be visible for them even if they don't read the documentation or the migrations because they will receive the error discussed here. the obvious questions after face this error will be, How the previous migrations are working? and the first step will be look at them for sure.\n\nI encourage the use of the options parameter in create_table method.\n", "created_at": "2014-10-02 18:11:30", "user": 2496204, "id": 57675534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57683048", "text": "For stuff like this I usually also include a Ruby or Rails version check.  If someone bumps the Ruby or Rails version then an error gets raised and they re-evaluate the use of the monkey patch and it's utility - making the monkey patching about as upgrade safe as it's going to be.  Also putting all monkey patches in a single documented location also helps.  Though technically in this case the version of the DB might also matter in the \"check\" process. \n\nAgain, monkey patching isn't how I solved this particular issue, but it can be made safe enough.  `create_table` is great for those who are going to remember it every time.  But if you know you aren't, there are other choices.  \n\nThis is just an icky problem all around. :)\n", "created_at": "2014-10-02 18:49:55", "user": 6473, "id": 57683048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57683913", "text": "> they will receive the error discussed here\n\nNot if the indexes that trigger the issue are going to being added at a later date.  This can sometimes be quite a subtle issue that doesn't bite you until later. :-)\n", "created_at": "2014-10-02 18:53:30", "user": 6473, "id": 57683913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57700121", "text": "@yyyc514 Do you create indexes without testing it? before pushing the indexes to production you should test them in development, run your tests (env test), deploy to staging and if all is working you can deploy to production. If you don't follow a similar process you are doing it wrong...\n\nI can't imagine a case where I create a migration with indexes that will trigger the error when deploying to production, even a hotfix should be tested first.\n", "created_at": "2014-10-02 20:30:45", "user": 2496204, "id": 57700121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57753556", "text": "@NaN1488 No, I test migrations locally first but the problem is if it's a large table that you created previously in the wrong format (by forgetting the create_table options)... the problem isn't that you'll get an error adding the index (which isn't a biggy in and of itself) the problem is the downtime you'll have re-writing the entire table on disk before you can THEN try add the actual index.  Better to make sure the table is created properly even if someone is forgetful.\n\nEveryone is welcome to their opinion though. :)\n", "created_at": "2014-10-03 05:18:27", "user": 6473, "id": 57753556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57758565", "text": "I noticed that people from emojli mentioned that utf8mb4 still has problem dealing with emoji.\n\nReference: https://www.youtube.com/watch?v=GsyhGHUEt-k\n", "created_at": "2014-10-03 06:04:59", "user": 276295, "id": 57758565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/61479566", "text": "Take in account that the row format option is not translated in the schema file.\n", "created_at": "2014-11-03 13:52:48", "user": 166814, "id": 61479566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/74725216", "text": "2 years later. Where are we at with this? I just had the same error.\n", "created_at": "2015-02-17 18:44:58", "user": 873474, "id": 74725216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/76511319", "text": "I think it's read the full thread and pick a solution that works for you.  If using MySQL 5.6 or newer is an option and you can tweak a few settings and pick your own table storage format there are some options that don't have the weird 767 byte limitation at all - so all of this would \"just work\".  But otherwise you have to jump thru some hooks and hack around the index sizing issues.\n", "created_at": "2015-02-28 05:14:53", "user": 6473, "id": 76511319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/148467608", "text": "We need to be able to have the `NATIVE_DATABASE_TYPES` to a length of 191 when full UTF8 (utf8mb4) is used.\n", "created_at": "2015-10-15 17:35:08", "user": 138785, "id": 148467608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/197334072", "text": "after switching encodeing in `config/database.yml` no issues was founded. working good\n", "created_at": "2016-03-16 13:37:39", "user": 3322574, "id": 197334072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/200300421", "text": "I have always this error, when it was not this error:\n\nMysql2::Error: Specified key was too long; max key length is 767 bytes:\n\nit was this other:\n\nMysql2::Error: Specified key was too long; max key length is 3072 bytes\n\nso I as suggested before I create a new database with this settings using docker and the official mysql\n\ndocker run -p 3306:3306 --name mysql-name -e MYSQL_ROOT_PASSWORD=name -d mysql:5.6 --innodb-large-prefix=1 --innodb-file-format=barracuda --innodb-file-per-table=1\n\nand finally the database.yml as follows change utf8 latin1 the sswedish is because in the server I saw that:\n\n```\ndevelopment:\n  host: 192.168.99.100\n  database: name\n  username: root\n  password: root\n  adapter: mysql2\n  charset: latin1\n  encoding: latin1\n  collation: latin1_swedish_ci\n\n\ntest:\n  host: 192.168.99.100\n  database: name_test\n  username: root\n  password: root\n  adapter: mysql2\n  charset: latin1\n  encoding: latin1\n  collation: latin1_swedish_ci\n\nproduction:\n  host: 192.168.99.100\n  database: name\n  username: root\n  password: root\n  adapter: mysql2\n  charset: latin1\n  encoding: latin1\n  collation: latin1_swedish_ci\n```\n\nafter that works\n\nbundle exec rake db:create\nbundle exec rake db:migrate\n\nI did it with the monkey patch and without the monkey patch suggested [here ](http://3.1415.jp/mgeu6lf5)and it works\n\n> config/initializers/ar_innodb_row_format.rb\n\n```\nActiveSupport.on_load :active_record do\n  module ActiveRecord::ConnectionAdapters   \n    class AbstractMysqlAdapter \n      def create_table_with_innodb_row_format(table_name, options = {}) \n        table_options = options.reverse_merge(:options => 'ENGINE=InnoDB ROW_FORMAT=DYNAMIC')\n\n        create_table_without_innodb_row_format(table_name, table_options) do |td|\n         yield td if block_given? \n        end\n      end\n      alias_method_chain :create_table, :innodb_row_format \n    end\n  end\nend\n```\n", "created_at": "2016-03-23 11:16:16", "user": 2518346, "id": 200300421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/295639282", "text": "For those of you thinking \"wasn't this fixed in 8744632, why isn't it working?\". The fix was removed in #23168, for some reason...", "created_at": "2017-04-20 08:51:47", "user": 948625, "id": 295639282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/297084654", "text": "Until [this](https://github.com/rails/rails/commit/8744632fb5649cf26cdcd1518a3554ece95a401b) is re-applied, @NaN1488's solution: https://github.com/rails/rails/issues/9855#issuecomment-57666389 is helping to allow utf8mb4 in rails 5.0.2 and 5.1.0.rc2 for my applications.", "created_at": "2017-04-25 16:21:22", "user": 191847, "id": 297084654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/302948219", "text": "This issue is still happening in Rails 5.1.1 😕 ", "created_at": "2017-05-21 16:46:21", "user": 425200, "id": 302948219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/311242837", "text": "The monkey patch doesnt work with Rails 5.1.2/Ruby 2.4.1. Running Rails errors with with:\r\n\r\n```\r\nNoMethodError: undefined method `alias_method_chain' for ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter:Class\r\nDid you mean?  alias_method\r\n```\r\n\r\nI am migrating a project from Rails 4.2.8/Ruby 2.4.1. It works great with these versions (I have been using the monkey patch for a while). If anyone has a suggestion for a new monkey patch, i would appreciate it. I have tried the other suggestions in this thread, but they dont last long-term, something always breaks. The monkey patch worked flawlessly for me every time I dropped, created, and migrated the DB. Without it, i get the _767 bytes_ error.", "created_at": "2017-06-27 03:29:16", "user": 516548, "id": 311242837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/311411038", "text": "@scott-knight which one did you try? I've used @nanaya's and that works every time 😄 ", "created_at": "2017-06-27 16:24:40", "user": 425200, "id": 311411038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/311471251", "text": "@deanpcmad I have been using the one supplied by @NaN1488 and @anquegi. It's been great up until I tried to migrate as mentioned. I will try @nanaya's solution. Thanks for the input.", "created_at": "2017-06-27 20:11:45", "user": 516548, "id": 311471251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/317877627", "text": "I have worked around this by\r\nALTER DATABASE nnnnn CHARACTER SET utf8mb3\r\nBut I would like an out-of-box solution so I don't need to change the characterset in the database.", "created_at": "2017-07-25 21:26:51", "user": 26171839, "id": 317877627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/346167636", "text": "@matthewdarwin Thanks for your solution, Matthew! Did you tried to set `charset` to `utf8mb3` in database.yml and then run `rails db:create`?", "created_at": "2017-11-21 21:31:31", "user": 108335, "id": 346167636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/346180028", "text": "No, I did not try that.", "created_at": "2017-11-21 22:20:10", "user": 26171839, "id": 346180028}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm not sure if this is the same issue as #9697 or not, but my nested `scope` routes don't work anymore in 3.2.13 (but they do in 3.2.12):\n\n``` ruby\nscope '/job', :controller => :job do\n  scope '/:id', :action => :manage_applicant, :as => \"job_manage_applicant\", :constraints => { :id => /\\d+/ } do\n    get '/deselected', :active_tab => 0\n    get '/active', :active_tab => 1\n    get '/hired', :active_tab => 2\n    get '', :active_tab => 1\n  end\nend\n```\n\nIn 3.2.12, `rake routes` returns:\n\n```\njob_manage_applicant_deselected GET    /job/:id/deselected(.:format)    job#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>0}\n    job_manage_applicant_active GET    /job/:id/active(.:format)        job#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>1}\n     job_manage_applicant_hired GET    /job/:id/hired(.:format)         job#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>2}\n           job_manage_applicant GET    /job/:id(.:format)               job#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>1}\n```\n\nHowever, in 3.2.13:\n\n```\njob_manage_applicant_deselected GET    /job/:id/deselected(.:format)    deselected#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>0}\n    job_manage_applicant_active GET    /job/:id/active(.:format)        active#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>1}\n     job_manage_applicant_hired GET    /job/:id/hired(.:format)         hired#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>2}\n           job_manage_applicant GET    /job/:id(.:format)               job#manage_applicant {:subdomain=>\"clients\", :id=>/\\d+/, :active_tab=>1}\n```\n\nAnd then I get `ActionController::RoutingError`s about `uninitialized constant ActiveController`, etc.\n\nThe same behaviour is exhibited even if I put the `controller` option on the inner scope, or even on each specific route. Only this form worked:\n\n``` ruby\nscope '/job' do\n  scope '/:id', :action => :manage_applicant, :as => \"job_manage_applicant\", :constraints => { :id => /\\d+/ } do\n    get '/deselected' => 'job#manage_applicant', :active_tab => 0\n    get '/active' => 'job#manage_applicant', :active_tab => 1\n    get '/hired' => 'job#manage_applicant', :active_tab => 2\n    get '', :active_tab => 1\n  end\nend\n```\n\nWhich, of course, is not very DRY.\n", "labels": ["actionpack", "regression"], "number": 9856, "updated_at": "2014-01-07 09:36:54", "user": 57964, "closed_at": "2013-06-25 05:10:31", "id": 12287532, "title": "Setting controller on scope block in routes file - regression in 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9856", "created_at": "2013-03-21 18:09:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15257484", "text": "It seems the leading slashes caused the issue here, this code works as expected:\n\n``` ruby\nscope '/job', :controller => :job do\n  scope '/:id', :action => :manage_applicant, :as => \"job_manage_applicant\", :constraints => { :id => /\\d+/ } do\n    get 'deselected', :active_tab => 0\n    get 'active', :active_tab => 1\n    get 'hired', :active_tab => 2\n    get '', :active_tab => 1\n  end\nend\n```\n", "created_at": "2013-03-21 18:39:10", "user": 57964, "id": 15257484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285098", "text": "Confirmed! This was introduced with a commit I made to fix the match shorthand syntax #7554. The commit is c88ee76928a85cc34318d0442b38da4c850b7030\n\nIt looks like the scope options are not expanded when we determine if the match shorthand was used. This results in an invalid controller being set.\n\n@pixeltrix I already have a test case ready and will fix this but I'm not sure what the best way to tackle the problem is.\n", "created_at": "2013-03-22 08:00:11", "user": 5402, "id": 15285098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19950196", "text": "Did #9877 ever get looked at?\n", "created_at": "2013-06-25 03:00:32", "user": 162976, "id": 19950196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19953615", "text": "@JonRowe fixed on master, just getting feedback on whether it should be backported or not.\n", "created_at": "2013-06-25 05:11:50", "user": 6321, "id": 19953615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19954005", "text": "Awesome :)\n", "created_at": "2013-06-25 05:27:04", "user": 162976, "id": 19954005}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Ref: https://github.com/rails/rails/pull/7444\n\nSomeone should not be able to get the server to arbitrarily 500 by passing a simple invalid JSON or XML string.  This creates an easy DOS attack against some load balancers just by hitting up and app over and over with invalid requests... you can pull the entire app offline... a more appropriate response code would be 400 - \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\".\n\nThis commit makes this change.\n", "labels": ["actionpack"], "number": 9857, "updated_at": "2014-06-16 23:20:16", "user": 6473, "closed_at": "2013-05-01 00:38:57", "id": 12288301, "title": "failure to parse params should trigger a 400 Bad Request", "url": "https://api.github.com/repos/rails/rails/issues/9857", "created_at": "2013-03-21 18:27:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15286354", "text": "/cc @pixeltrix \n", "created_at": "2013-03-22 08:47:10", "user": 5402, "id": 15286354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17262934", "text": ":+1:\n\nLoad balancers probably shouldn't reject a server for 500, either!\n", "created_at": "2013-05-01 00:41:46", "user": 199, "id": 17262934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17262960", "text": ":+1: \n", "created_at": "2013-05-01 00:42:31", "user": 27786, "id": 17262960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17266563", "text": "Jeremy, I tried to have that argument with the linode channel, but most people there seemed to disagree with me.  _shrugs_\n", "created_at": "2013-05-01 03:02:55", "user": 6473, "id": 17266563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17282229", "text": "Hey folks, I'm wondering whether this needs a changelog entry or not, wdyt?\n", "created_at": "2013-05-01 13:51:29", "user": 26328, "id": 17282229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17290612", "text": "I can't say for sure... but I don't think it could hurt since some people might be depending on the old behavior in weird edge cases...  I think an entry would be nice actually.  It's a nice little improvement.\n", "created_at": "2013-05-01 16:33:01", "user": 6473, "id": 17290612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18043563", "text": "we're hitting this right now in a production app and it's a PITA.   _heavily_ agree and think it warrants a point release: it's a serious error for api based apps.\n\nregarding load balancers not barfing on 500: most can be configured that way, and we configure ours thusly for this reason.\n", "created_at": "2013-05-17 04:45:09", "user": 6094, "id": 18043563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18140458", "text": "Any chance this will be backported to 4-0-stable?\n", "created_at": "2013-05-20 10:12:21", "user": 17348, "id": 18140458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18141340", "text": "This should totally be in 4.0.  When tenderlove merged it I surely imagined it would go into 4. \n", "created_at": "2013-05-20 10:39:07", "user": 6473, "id": 18141340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23931773", "text": "Hi guys, I'm hitting the 400 status code fine but the response's body is always html even when the format of the request is :json. What is the best way of wrap this and return a nice JSON error message in the body?\n", "created_at": "2013-09-06 10:39:45", "user": 53006, "id": 23931773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23933274", "text": "@etdsoft is this in development or production? If it's the former then you're probably seeing the output from [`ActionDispatch::DebugExceptions`](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb). If it's the latter then it should return a JSON response.\n", "created_at": "2013-09-06 11:16:36", "user": 6321, "id": 23933274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23933612", "text": "Thanks @pixeltrix yes, this is in development, I'm just trying to wrap the error into a nice JSON response for an API endpoint, something like (keeping the 400 status)\n\n```\n{\"message\": \"Could not parse request body\"}\n```\n\nI've seen this, but it seems a bit overkill for a simple task that sure is quite common?\n\nhttp://stackoverflow.com/questions/15459143/how-to-rescue-from-actiondispatchparamsparserparseerror-in-rails-4\n", "created_at": "2013-09-06 11:25:02", "user": 53006, "id": 23933612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23935864", "text": "@etdsoft in production (and your tests) you will get something like this:\n\n``` json\n{\"status\": 400, \"error\": \"Bad Request\"}\n```\n\nA custom exceptions app would be the way to do it properly but you could set `config.consider_all_requests_local = false` in `config/development.rb` and override `show_detailed_exceptions?` to return true or false depending on whether `xhr?` is true or not, e.g:\n\n``` ruby\n# This should go in ApplicationController\ndef show_detailed_exceptions?\n  if Rails.env.development?\n    request.local? && !request.xhr?\n  else\n    false\n  end\nend\n```\n\nThis will show debug information for non-XHR requests made to 127.0.0.1 and use the production exceptions code otherwise.\n", "created_at": "2013-09-06 12:17:18", "user": 6321, "id": 23935864}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This issue came along due to a simple typo in params\n\n``` ruby\ndef update\n    @financial_infos = FinancialInfo.find(params[:id])\n\n    respond_to do |format|\n      if @financial_infos.update_attributes(params[:financial_infos])\n        format.json { head :no_content }\n      else\n        format.json { render json: @financial_infos.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n```\n\nThere was a typo in the `:financial_info` symbol inside the params. As a result, the `params[:financial_infos]` expression was nil, and hence nil was being passed into update_attributes. The issue is no error was ever thrown, update_attributes just updated (nothing) and it proceeded to \"work\"\n\nupdate_attributes should throw an error if nil is being passed as an argument (if you want to update nothing, it should either be an empty hash, or a hash with all the keys/values the same). Although it can be argued you should detect for nil, the above code is the default code made from the RoR scaffolder\n", "labels": ["activerecord"], "number": 9858, "updated_at": "2013-09-24 14:57:14", "user": 2337269, "closed_at": "2013-09-24 14:57:14", "id": 12289001, "title": "update_attributes shouldn't accept nil as a valid argument", "url": "https://api.github.com/repos/rails/rails/issues/9858", "created_at": "2013-03-21 18:43:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15265534", "text": "So apparently it was intentional that `update_attributes` not throw an error on nil, see the discussion here https://github.com/rails/rails/issues/478 and in the commit here https://github.com/rails/rails/commit/9e4b715d790aa84dfb3d7aa332e0012cbc264394.\n\nHowever, I agree that it seems like there should be an error thrown. The original reasoning to allow nil to be passed was because the error message was confusing. I think that if the error message wasn't confusing then we should rightfully throw an error. I'm making a PR in a couple minutes to fully flesh this out.\n", "created_at": "2013-03-21 21:09:12", "user": 1075780, "id": 15265534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15265663", "text": "Throwing an `ArgumentError` exception should not be confusing I think.\n", "created_at": "2013-03-21 21:11:22", "user": 803765, "id": 15265663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15267526", "text": "@Intrepidd I've gone ahead and thrown an argument exception in my PR. Hopefully the error message is clear enough that people who get the error will know what to do. Let me know if you have any comments/suggestions on what the message should be.\n", "created_at": "2013-03-21 21:44:20", "user": 1075780, "id": 15267526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23691913", "text": "I would suggest closing this one as it's a duplicate of #9860 \n", "created_at": "2013-09-03 06:10:53", "user": 1434, "id": 23691913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23812099", "text": "It's not a duplicate, that's a pull request that fixes this issue.\n", "created_at": "2013-09-04 18:24:08", "user": 27786, "id": 23812099}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When passing a hash of conditions to .where, instantiate an arel table\nif the keys represent a table associated to engine's table. Maintain\nexisting behavior if the keys are attributes of engine's table.\nThis allows queries like these:\n\n``` ruby\n  Post.joins(:author => :organization).\n    where(:authors => { :organizations => { :name => 'Acme' } } )\n```\n\nPreviously, that same query's WHERE clause would read: \n\n\"... WHERE \"authors\".\"organizations\" ...\n\nwhich would break because the 'authors' table doesn't have an 'organizations' column. This change will instantiate an Arel::Table for 'organizations', and the query will be built correctly\n", "labels": ["activerecord"], "number": 9859, "updated_at": "2014-06-27 20:44:28", "user": 815279, "closed_at": "2013-04-05 12:53:31", "id": 12293452, "title": "Allow nested conditions passed to .where to build arel tables in some cases", "url": "https://api.github.com/repos/rails/rails/issues/9859", "created_at": "2013-03-21 20:25:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15948140", "text": "/cc @rafaelfranca @jonleighton \n", "created_at": "2013-04-05 10:11:37", "user": 5402, "id": 15948140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15948181", "text": "@DanOlson Is there a reason that this PR points to `3-2-stable`? Is this only a problem on `3.2.x` or also on master?\n\nAs this changes the behavior I don't think it should be backported to 3-2-stable.\n", "created_at": "2013-04-05 10:13:02", "user": 5402, "id": 15948181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15953943", "text": "The current behaviour exists for security reasons, to prevent unsafe query generation. So we can't merge this.\n", "created_at": "2013-04-05 12:53:31", "user": 1979, "id": 15953943}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In https://github.com/rails/rails/commit/9e4b715d790aa84dfb3d7aa332e0012cbc264394, @josevalim allowed the ability to send a nil argument to `update_attributes` (in response to #478). However, the reasoning behind that was because a pretty cryptic error was thrown. The current behavior in Rails is that `thing.update_attributes(nil)` will return and not update any attributes without throwing any error.\n\nHowever, Instead of allowing you to send a nil argument, it might be better to raise an `ArgumentError` which has a clear error message. I've made that change here, but this PR is more intended as a discussion on which behavior is better.\n\nCloses #9858.\n", "labels": ["activerecord"], "number": 9860, "updated_at": "2014-06-12 21:41:48", "user": 1075780, "closed_at": "2013-09-24 14:57:14", "id": 12295679, "title": "Raising an error when nil is passed to update_attributes.", "url": "https://api.github.com/repos/rails/rails/issues/9860", "created_at": "2013-03-21 21:20:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15287586", "text": "What if the users wants to pass a custom object that responds to stringify_keys ?\n\nI'm totally for the error on nil because it is common and this allows developers to know what the problem is real quick.\n\nHowever, I'm not fond of the racism concerning the type of the parameter ;)\n\nAs I said in the outdated diff, everywhere in rails, hashes are expected without being type checked, that's the beauty of ruby, if you want strong type check, ruby is not the good solution I think :)\n\nWhat do you think of :\n- Only check for nil\n- Check for something that `resond_to?(:stringify_keys)`\n\nPlease let me know what you think of this, I'm not an expert so feel free to point out things that I may have missed.\n", "created_at": "2013-03-22 09:26:19", "user": 803765, "id": 15287586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15331257", "text": "@Intrepidd That's a pretty reasonable idea. I think checking for `respond_to?(:stringify_keys)` is a happy medium between checking explicitly for hashes and not checking the input arguments at all.\n\nThe PR has been updated.\n", "created_at": "2013-03-23 03:51:10", "user": 1075780, "id": 15331257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15334870", "text": "Thanks! Let's see what the core team thinks about it!\n\n## \n\nAdrien Siami\nOn Mar 23, 2013 3:52 AM, \"John J. Wang\" notifications@github.com wrote:\n\n> @Intrepidd https://github.com/Intrepidd That's a pretty reasonable\n> idea. I think checking for respond_to?(:stringify_keys) is a happy medium\n> between checking explicitly for hashes and not checking the input arguments\n> at all.\n> \n> The PR has been updated.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9860#issuecomment-15331257\n> .\n", "created_at": "2013-03-23 10:17:41", "user": 803765, "id": 15334870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16297125", "text": "this looks good to me.\n\n/cc @rafaelfranca \n", "created_at": "2013-04-12 14:51:36", "user": 5402, "id": 16297125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16297301", "text": "As this changes the functionality I think we should add a CHANGELOG entry.\n", "created_at": "2013-04-12 14:54:26", "user": 5402, "id": 16297301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16298302", "text": "@senny Added a changelog entry and rebased. @carlosantoniodasilva thanks for the comments!\n", "created_at": "2013-04-12 15:10:40", "user": 1075780, "id": 16298302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18549344", "text": "@wangjohn this does no longer apply cleanly, can you push a rebased version?\n", "created_at": "2013-05-28 13:15:24", "user": 5402, "id": 18549344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18575026", "text": "@senny I've just rebased and pushed.\n", "created_at": "2013-05-28 19:46:02", "user": 1075780, "id": 18575026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18596621", "text": "@rafaelfranca @carlosantoniodasilva can you take another look?\n", "created_at": "2013-05-29 05:18:41", "user": 5402, "id": 18596621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19503816", "text": "Any updates on this PR? If not, I'll go ahead and close it.\n", "created_at": "2013-06-15 21:32:49", "user": 1075780, "id": 19503816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19529181", "text": "let's wait for more feedback. I like this change but I'm not sure if there are implications because it changes the public API.\n", "created_at": "2013-06-17 07:06:33", "user": 5402, "id": 19529181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19540758", "text": "I feel conflicted about this one. If user is passing nil then obviously user does not want anything to happen. After this code now user has to do `sent_arguments || {}` so that code does not raise exception. I think it is better if the code does not raise exception on nil.\n", "created_at": "2013-06-17 12:05:58", "user": 6399, "id": 19540758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19540831", "text": "@neerajdotname but for the default case with strong parameters you already get `{}`, don't you?\n", "created_at": "2013-06-17 12:07:41", "user": 5402, "id": 19540831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19540922", "text": "@senny you might but ActiveRecord can be used without rest of rails goodies. \n\nUpdated: replaced `with` by `without`.\n", "created_at": "2013-06-17 12:09:44", "user": 6399, "id": 19540922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19541105", "text": "@neerajdotname sure, I guess it's a matter of taste. It's important that the default case does not get overcomplicated. That's why I mentioned strong params.\n\nMaybe we can get a word from @rafaelfranca and @jonleighton to wrap this PR up.\n", "created_at": "2013-06-17 12:14:09", "user": 5402, "id": 19541105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20021122", "text": "Please rebase from master. Thanks.\n", "created_at": "2013-06-26 01:15:09", "user": 26328, "id": 20021122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20025997", "text": "@carlosantoniodasilva Rebased and changed the changelog.\n", "created_at": "2013-06-26 04:00:38", "user": 1075780, "id": 20025997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23691877", "text": "+1 It will make debugging a lot easier for the developer as typos will be caught easily. In previous tickets the core team has stated that this is the typo of thing Rails should cater to. \n\nThe old behavior can be easily returnned by doing `arguments || {}` which makes it clear that the developer expects nil as an input.\n", "created_at": "2013-09-03 06:09:45", "user": 1434, "id": 23691877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/24951027", "text": "I'm fine with this change on master but I'd not put in a stable release.\n\nI'm merging.\n", "created_at": "2013-09-23 20:22:32", "user": 47848, "id": 24951027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25023457", "text": "Causes failures in Agile Web Development with Rails test.  Minimal test case:  http://intertwingly.net/tmp/update_attributes.html\n", "created_at": "2013-09-24 17:07:46", "user": 4815, "id": 25023457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25028109", "text": "@rubys The problem with the failures is that I removed the line `return if new_attributes.blank?`. It seems like this is actually required (in the case of the tests, we're getting an empty hash, so the `assign_attributes` method should just return without doing anything). \n\nThe simplest fix would be to just add this line back in. I'll make a PR to do this.\n", "created_at": "2013-09-24 18:02:43", "user": 1075780, "id": 25028109}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When setting the `fixture_path` using `Rails.root.join('my_fixture/path')` and if fixtures are set to `:all`, Rails throws an error that it can't find the file `rails_path/my_fixture/path/.yml`. This error is not very informative and takes a long time to track down. By converting the `fixture_path` to a String before getting its size, future users can easily be spared from wasting time tracking this down.\n", "labels": [], "number": 9861, "updated_at": "2014-06-15 17:01:22", "user": 130711, "closed_at": "2013-03-21 23:42:38", "id": 12295767, "title": "Allow fixture_path to be a Pathname", "url": "https://api.github.com/repos/rails/rails/issues/9861", "created_at": "2013-03-21 21:22:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is what the method currently looks like:\n\n```\ndef api_behavior(error)\n  raise error unless resourceful?\n\n  if get?\n    display resource\n  elsif post?\n    display resource, :status => :created, :location => api_location\n  else\n    head :no_content\n  end\nend\n```\n\nIt would be nice to have the resource returned on an update as well, like so:\n\n```\ndef api_behavior error\n  raise error unless resourceful?\n\n  if get?\n    display resource\n  elsif post?\n    display resource, :status => :created, :location => api_location\n  elsif put?\n    display resource, :status => :ok\n  else\n    head :no_content\n  end\nend\n```\n\nIf there is a reason for this behavior, I apologize for the confusion. If this seems preferable I am happy to provide a patch. Thank you! \n", "labels": [], "number": 9862, "updated_at": "2015-06-01 19:53:39", "user": 3764, "closed_at": "2013-03-21 22:31:53", "id": 12296985, "title": "PUT requests have no content when using respond_with", "url": "https://api.github.com/repos/rails/rails/issues/9862", "created_at": "2013-03-21 21:54:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15270431", "text": "This is on the middle line between a feature and a bug. It's a feature, since 204 is okay:\n\n>  If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to indicate successful completion of the request.\n\nFeel free to open a pull request changing it to a 200 and we can discuss it then, or we can talk about it on rails-core.\n", "created_at": "2013-03-21 22:31:53", "user": 27786, "id": 15270431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336973", "text": "Hey, I added a pull request that hopefully properly addresses this. Let me know if there's anything else I should do, thanks! \n", "created_at": "2013-03-23 13:21:25", "user": 3764, "id": 15336973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25824757", "text": "@quinn +1\n", "created_at": "2013-10-07 16:46:02", "user": 130762, "id": 25824757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/107685213", "text": "@quinn +1\n", "created_at": "2015-06-01 19:53:39", "user": 64581, "id": 107685213}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9863, "updated_at": "2014-06-26 19:57:19", "user": 505427, "closed_at": "2013-03-22 04:04:09", "id": 12305888, "title": "Change Standard error when is required bcrypt-ruby and fails", "url": "https://api.github.com/repos/rails/rails/issues/9863", "created_at": "2013-03-22 03:51:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Introduce test on Error#full_message for attribute with underscores\n2. Fix typo in test names\n", "labels": [], "number": 9864, "updated_at": "2016-02-22 14:26:21", "user": 567626, "closed_at": "2013-03-25 15:56:30", "id": 12306486, "title": "Introduce test on Error#full_message for attribute with underscores; Fix...", "url": "https://api.github.com/repos/rails/rails/issues/9864", "created_at": "2013-03-22 04:32:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15285777", "text": "Why is the new test relevant? Was there a change in behavior regarding attributes with underscores? Is it to prevent regressions?\n\nAlso it would be great if you could shorten your commit message. Github does not like long commit messages. You can always do a short description on the first line, then a blank line and then add a detailed description.\n", "created_at": "2013-03-22 08:26:21", "user": 5402, "id": 15285777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15286307", "text": "About the comments: Will keep in mind the next time\n\nWhile scanning through Error model, I found the tr(\".\",\"_\") and humanize on the result in `full_messages`.\n\nThe behaviour for having `_` in the name is different than having a `.`\n\nEx: \n`Model.nestedattr => Model nestedattr`\nbut `model_test` maps to `model_test` itself\n\nTest for previous behaviour is present the latter isn't, so added the test.\n", "created_at": "2013-03-22 08:45:28", "user": 567626, "id": 15286307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15286442", "text": "I see.\n\nRegarding the commit message, you can easily update it by using `git commit --amend` or `git rebase -i` and then issue a force push on your branch fix_test_AR_v2. The PR on Github will reflect the changes automatically.\n", "created_at": "2013-03-22 08:50:37", "user": 5402, "id": 15286442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15287193", "text": "@senny  updating in some time\n", "created_at": "2013-03-22 09:16:30", "user": 567626, "id": 15287193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15287585", "text": "Fixed message\n", "created_at": "2013-03-22 09:26:17", "user": 567626, "id": 15287585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15385374", "text": "//cc  @carlosantoniodasilva  @rafaelfranca\n", "created_at": "2013-03-25 10:12:05", "user": 567626, "id": 15385374}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This issue seems to be not present in master. This case is handled for multiple before_filters\n\nFix for issue\n\nhttps://github.com/rails/rails/issues/9848\n", "labels": ["actionpack"], "number": 9865, "updated_at": "2014-06-13 19:40:32", "user": 577834, "closed_at": "2013-10-13 04:59:07", "id": 12308729, "title": "after_filter callback's :if procs should not executed when filter_chain is halted by render", "url": "https://api.github.com/repos/rails/rails/issues/9865", "created_at": "2013-03-22 07:04:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15947700", "text": "could you add a test-case to verify the behavior?\n", "created_at": "2013-04-05 10:01:32", "user": 5402, "id": 15947700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15951755", "text": "Plus this test case should be sent to master as well so that we can ensure it works there and wont break :)\n", "created_at": "2013-04-05 11:57:03", "user": 26328, "id": 15951755}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16905135", "text": "I have added the test and code in seperate commits because I think the code changes may not be valid in any of the other branches(may need different fixes) but tests could be valid in other branches as well.\n", "created_at": "2013-04-24 02:38:25", "user": 577834, "id": 16905135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17469007", "text": "@neerajdotname I have updated the fix with the feedbacks you had given. Please verify If this is fine.\n", "created_at": "2013-05-06 07:17:54", "user": 577834, "id": 17469007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17539181", "text": "Looks good. Please squash the three commits into one and also add a changelog.\n", "created_at": "2013-05-07 12:32:59", "user": 6399, "id": 17539181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17706420", "text": "@neerajdotname  I have squashed the three commits and added a change log as well.\n", "created_at": "2013-05-10 06:36:27", "user": 577834, "id": 17706420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18677649", "text": "@neerajdotname when will this patch be merged?\n", "created_at": "2013-05-30 12:45:10", "user": 577834, "id": 18677649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18677871", "text": "@rajofchennai the callback code has undergone significant change because of refactoring by @tenderlove . Can you  rebase your code ? \n", "created_at": "2013-05-30 12:49:43", "user": 6399, "id": 18677871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18681753", "text": "@neerajdotname I looked at 3-2-stable and 3-2-13 branch, there seems to be no updates on the files I have modified. Did you mean I should port the changes for master as well?.\n", "created_at": "2013-05-30 14:00:05", "user": 577834, "id": 18681753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18682696", "text": "@rajofchennai I did not know that this PR was for 3.x .\n\nNot all the fixes to master is backported. That is decided by core team. I would suggest you to send a PR for master. And then if needed backport it to 3.x .\n", "created_at": "2013-05-30 14:14:31", "user": 6399, "id": 18682696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18689559", "text": "@neerajdotname This bug does not exist in master. Should I write tests alone for master, So that the bug does not regress?\n", "created_at": "2013-05-30 15:53:28", "user": 577834, "id": 18689559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18689937", "text": "@rajofchennai yes that would be nice.\n", "created_at": "2013-05-30 15:58:54", "user": 6399, "id": 18689937}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26211686", "text": "Closing since we could not get this patch in 3.2.15 and it is fixed on 4.0. Thanks\n", "created_at": "2013-10-13 04:59:07", "user": 47848, "id": 26211686}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The loop variable is not used in the test case. So it's been removed. \n", "labels": [], "number": 9866, "updated_at": "2014-06-26 15:56:04", "user": 3786236, "closed_at": "2013-03-22 14:57:32", "id": 12310857, "title": "Removed unused loop variable", "url": "https://api.github.com/repos/rails/rails/issues/9866", "created_at": "2013-03-22 08:55:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed unnecessary block from the test case.\n", "labels": [], "number": 9867, "updated_at": "2014-06-26 15:56:07", "user": 3786236, "closed_at": "2013-03-22 14:51:12", "id": 12317514, "title": "Removed unnecessary block", "url": "https://api.github.com/repos/rails/rails/issues/9867", "created_at": "2013-03-22 12:47:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In https://github.com/rest-client/rest-client/issues/144#issuecomment-14876580  we're trying to handle objects that behave like IO.   Some have suggested that respond_to?(:read) is a poor test of this and have suggested using IO.try_covert(obj) instead.   My counter example for this is ActionDispatch::Http::UploadedFile.  I'm wondering if there would be any support for adding this method?  I'd be happy to craft a pull request.\n\nSee: http://www.ruby-doc.org/core-2.0/IO.html#method-c-try_convert\n\ncc @tenderlove @josevalim @carllerche \n", "labels": [], "number": 9868, "updated_at": "2013-03-26 21:07:42", "user": 92044, "closed_at": "2013-03-22 14:32:23", "id": 12317894, "title": "Poll: add #to_io on ActionDispatch::Http::UploadedFile", "url": "https://api.github.com/repos/rails/rails/issues/9868", "created_at": "2013-03-22 12:59:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15299643", "text": "We use Github Issues exclusively for bug tracking and features with attached code (Pull Requests). Please follow our [contribution guidelines](https://github.com/rails/rails/blob/master/CONTRIBUTING.md) and post such questions to the [core mailing list](https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core).\n\nThanks :heart:\n", "created_at": "2013-03-22 14:32:23", "user": 5402, "id": 15299643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15488614", "text": "@jcoyne I see you didn't get much response from the mailing list. If this is something you're interested in pushing, a PR could be a good place to start that conversation. The one thing I can see being a problem is that Rails 4 is 1.9.3 compliant, and I don't believe we can use any non-backwards API components, so this feature would likely need to be backported in some manner to work with 1.9.3 code. \n", "created_at": "2013-03-26 21:07:42", "user": 59744, "id": 15488614}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I saw there are a lot of issues around chaning/merging scopes and conditions. My use case broke on Rails master (worked on 4.0.0.beta1 and 3.2.13).\n\nThe code:\n\n``` ruby\nclass Observation < ActiveRecord::Base\n  scope :identified, lambda { where(\"species_id <> 0\") }\nend\n\nclass MyObservation < Observation\n  scope :mine_identified, lambda { where(mine: true).identified }\nend\n\nMyObservation.mine_identified.to_sql\n#=> \"SELECT \\\"observations\\\".* FROM \\\"observations\\\"  WHERE (species_id <> 0)\"\n# FAIL!!\n```\n\nI did pretty lots of testing different variants. What can I say: it does not matter whether it is string or hash condition. But the order matters:\n\n``` ruby\nclass MyObservation < Observation\n  scope :mine_identified, lambda { identified.where(mine: true)}\nend\n\nMyObservation.mine_identified.to_sql\n#=> \"SELECT \\\"observations\\\".* FROM \\\"observations\\\"  WHERE \\\"observations\\\".\\\"mine\\\" = 't' AND (species_id <> 0)\"\n# PASS!!\n```\n\nAnd the most interesting is that failure happens only in the child model, if I move the combined scope into parent model, it is ok:\n\n``` ruby\nclass Observation < ActiveRecord::Base\n  scope :identified, lambda { where(\"species_id <> 0\") }\n  scope :mine_identified, lambda { identified.where(mine: true)}\nend\n\nObservation.mine_identified.to_sql\n#=> \"SELECT \\\"observations\\\".* FROM \\\"observations\\\"  WHERE \\\"observations\\\".\\\"mine\\\" = 't' AND (species_id <> 0)\"\n# PASS!!\n```\n\nP.S. I will try to dig into AR tests to see if I can create a failing test case.\n", "labels": ["activerecord"], "number": 9869, "updated_at": "2013-03-29 20:16:23", "user": 137464, "closed_at": "2013-03-29 20:06:12", "id": 12319792, "title": "Chaining (merging) scopes in inherited models", "url": "https://api.github.com/repos/rails/rails/issues/9869", "created_at": "2013-03-22 13:57:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15328292", "text": "This change in the behavior was caused by https://github.com/rails/rails/commit/cd26b6ae.\n\nIf you use any version of Rails after that commit, you get\n\n```\n> MyObservation.mine_identified\n# SELECT \"observations\".* FROM \"observations\" WHERE (species_id <> 0)\n```\n\nIf you use the commit before that one (de4a60c), then you get\n\n```\n> MyObservation.mine_identified\n# SELECT \"observations\".* FROM \"observations\" WHERE \"observations\".\"mine\" = 't' AND (species_id <> 0)\n```\n\nSo it might be worth referring to the original issue https://github.com/rails/rails/issues/7365 and to cc @neerajdotname\n", "created_at": "2013-03-23 00:52:43", "user": 10076, "id": 15328292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15328340", "text": "@claudiob thanks for narrowing it down to that commit. I'll look into this issue.\n", "created_at": "2013-03-23 00:55:27", "user": 6399, "id": 15328340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15334056", "text": "@claudiob thank you\n", "created_at": "2013-03-23 09:08:01", "user": 137464, "id": 15334056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15658213", "text": "Fixed in d593fa4.\n", "created_at": "2013-03-29 20:06:12", "user": 2741, "id": 15658213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15658524", "text": "@dhh the fix is not yet applied. Here is the PR. https://github.com/rails/rails/pull/9929\n\nIt is causing one test to fail. See PR for my comments regarding that failing test.\n", "created_at": "2013-03-29 20:13:30", "user": 6399, "id": 15658524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15658644", "text": "Set the milestone for 4.0 on that one instead.\n", "created_at": "2013-03-29 20:16:23", "user": 2741, "id": 15658644}], "assignees": [6399, 6399], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #9806.\n\nAs the `through_options` always contained `{:order=>nil}` the second time,\nthe preloader ran, the association was always reset. This patch only\nadds the `:order` to the `through_options` if it is set.\n\nThis is a regression and the problem was introduced with #9322\n", "labels": [], "number": 9870, "updated_at": "2014-06-14 17:52:47", "user": 5402, "closed_at": "2013-03-22 14:14:18", "id": 12320330, "title": "do not reset associations when preloading twice.", "url": "https://api.github.com/repos/rails/rails/issues/9870", "created_at": "2013-03-22 14:09:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": ["JRuby"], "number": 9871, "updated_at": "2014-06-26 19:57:28", "user": 3948, "closed_at": "2013-03-22 14:44:26", "id": 12320678, "title": "StringIO is not required by default in JRuby", "url": "https://api.github.com/repos/rails/rails/issues/9871", "created_at": "2013-03-22 14:18:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test-case was extracted from #9870 \n\nConflicts:\n\n```\nactiverecord/lib/active_record/associations/preloader/through_association.rb\nactiverecord/test/cases/associations/eager_test.rb\n```\n", "labels": [], "number": 9872, "updated_at": "2014-06-26 19:57:30", "user": 5402, "closed_at": "2013-03-22 14:24:52", "id": 12320830, "title": "test-case to prevent resetting associations when preloading twice.", "url": "https://api.github.com/repos/rails/rails/issues/9872", "created_at": "2013-03-22 14:22:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm sorry, saw it too late :cold_sweat: \n\nthis is a fix for #9870 \n", "labels": [], "number": 9873, "updated_at": "2014-07-03 07:02:57", "user": 5402, "closed_at": "2013-03-22 14:25:25", "id": 12320938, "title": "use ruby 1.8 Hash syntax [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9873", "created_at": "2013-03-22 14:24:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As we are doing same as https://github.com/rails/rails/blob/master/activesupport/test/key_generator_test.rb#L3-L8\n\nWe need to wait this to be fixed. Can be removed later.\n", "labels": ["JRuby"], "number": 9874, "updated_at": "2014-06-26 16:17:11", "user": 3948, "closed_at": "2013-03-25 16:27:23", "id": 12321588, "title": "Skipping test for OpenSSL::PKCS5 JRuby", "url": "https://api.github.com/repos/rails/rails/issues/9874", "created_at": "2013-03-22 14:39:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15362299", "text": "I ment we need to wait OpenSSL::PKCS5 to be fixed.\n", "created_at": "2013-03-24 16:42:38", "user": 3948, "id": 15362299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15384977", "text": "Updated :-) \n", "created_at": "2013-03-25 10:02:03", "user": 3948, "id": 15384977}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I try to launch `rails console`, Ruby complains that it needs the `readline` library. I can get around this by manually including `gem 'rb-readline'` in my Rails app's `Gemspec`, but I wish this were included by default.\n\nSystem:\n\n```\n$ specs rails ruby os\nSpecs:\n\nspecs 0.2\nhttps://github.com/mcandre/specs#readme\n\nrails --version\nRails 3.2.13\n\ngem --version\n2.0.3\n\nruby --version\nruby 1.9.3p374 (2013-01-15) [i386-mingw32]\n\nsysteminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"\nOS Name:                   Microsoft Windows XP Professional\nOS Version:                5.1.2600 Service Pack 3 Build 2600\n```\n", "labels": [], "number": 9875, "updated_at": "2013-03-22 15:45:13", "user": 5316, "closed_at": "2013-03-22 15:45:13", "id": 12322131, "title": "Rails omits rb-readline dependency for \"rails console\"", "url": "https://api.github.com/repos/rails/rails/issues/9875", "created_at": "2013-03-22 14:51:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15304113", "text": "Hey @mcandre -\n\nThe `readline` library is part of the Ruby standard library, but it doesn't build on Windows cleanly. So `rb-readline` is provided as a third-party lib to provide support. Long story short, this isn't up to Rails.\n\nIt is worth considering generating a Windows-workarounds section in the `Gemfile` for new apps if we detect that you're on that platform. Pull requests welcome :grin:\n", "created_at": "2013-03-22 15:45:13", "user": 199, "id": 15304113}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Disabling the hstore extension during testing created order dependent\ntest failures.\n\nOne way to view the problem in master is:\n\n```\nARCONN=postgresql bundle exec ruby -wI.:test -e \"%w{test/cases/adapters/postgresql/hstore_test.rb test/cases/schema_dumper_test.rb}.each { |f| require f }\"\n```\n", "labels": ["activerecord"], "number": 9876, "updated_at": "2014-06-14 03:55:28", "user": 17553, "closed_at": "2013-03-26 20:39:04", "id": 12323142, "title": "Restore columns dropped by hstore test", "url": "https://api.github.com/repos/rails/rails/issues/9876", "created_at": "2013-03-22 15:13:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15488704", "text": "@rafaelfranca Thanks!\n", "created_at": "2013-03-26 21:09:16", "user": 17553, "id": 15488704}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This test-case reproduces #9856 and is currently failing:\n\n```\n  1) Failure:\nTestRoutingMapper#test_controller_option_with_nesting_and_leading_slash [test/dispatch/routing_test.rb:1186]:\nExpected: \"job#manage_applicant\"\n  Actual: \"active#manage_applicant\"\n```\n", "labels": ["actionpack"], "number": 9877, "updated_at": "2014-07-01 05:50:27", "user": 5402, "closed_at": "2013-06-25 05:12:31", "id": 12323875, "title": "test case for controller option on scope block in routes file", "url": "https://api.github.com/repos/rails/rails/issues/9877", "created_at": "2013-03-22 15:28:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19950187", "text": "Did this or #9856 ever go anywhere?\n", "created_at": "2013-06-25 03:00:15", "user": 162976, "id": 19950187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19953635", "text": "Fixed by 37b4276dbf22382788f66bd5361f0736aadb0425\n", "created_at": "2013-06-25 05:12:31", "user": 6321, "id": 19953635}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9878, "updated_at": "2014-07-04 15:45:16", "user": 17553, "closed_at": "2013-03-23 11:41:36", "id": 12328792, "title": "Fix rake test warning in activerecord", "url": "https://api.github.com/repos/rails/rails/issues/9878", "created_at": "2013-03-22 17:20:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15335733", "text": "Closing because @tenderlove made the same change in db3a6e6.\n", "created_at": "2013-03-23 11:41:35", "user": 17553, "id": 15335733}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am trying to run a Rails 4 beta app in production and with the default production config, after running `rake assets:precompile`, all outputted files have digests on the end but the filenames within the `.css.scss` file to not include the digests meaning that the files come up as missing in the browser.\n\nTo replicate, create a brand new Rails 4 app (`rails new asset_bug`), add an `application.css.scss` file with the following content:\n\n``` scss\nbody { background: image-url('rails.png'); } \n```\n\nNow run:\n\n``` bash\nrake assets:precompile\n```\n\nThe resulting `application-?????.css` file contains:\n\n``` css\nbody { background: url(/assets/rails.png); } \n```\n\n...but should contain:\n\n``` css\nbody { background: url(/assets/rails-?????.png); } \n```\n\nAny workarounds would be greatly appreciated as I have a client waiting to see a project I've been working on.\n", "labels": ["asset pipeline"], "number": 9879, "updated_at": "2013-06-18 18:34:42", "user": 1236447, "closed_at": "2013-03-23 18:52:08", "id": 12345303, "title": "Asset pipeline bug - rake assets:precompile doesn't add digest to images within css", "url": "https://api.github.com/repos/rails/rails/issues/9879", "created_at": "2013-03-23 00:07:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15327517", "text": "can you try with RAILS_ENV?:\n\n`RAILS_ENV=production rake assets:precompile`\n", "created_at": "2013-03-23 00:10:34", "user": 160941, "id": 15327517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15327592", "text": "I could kiss you Guillermo!! ...works a charm. I assumed this would be the default behaviour, I'm pretty sure it was in 3.2.\n", "created_at": "2013-03-23 00:14:12", "user": 1236447, "id": 15327592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15339238", "text": "I think it should be the default\n", "created_at": "2013-03-23 15:54:28", "user": 47848, "id": 15339238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15342401", "text": "In 3-2-stable we are doing a hack to get this right:\n\nhttps://github.com/rails/rails/blob/3-2-stable/actionpack/lib/sprockets/assets.rake#L4-L25\n\nProbably it isn't being done anymore because that code has been a pain to maintain since ever and the most common deployment scenarios (Capistrano and Heroku) are passing RAILS_ENV anyway.\n", "created_at": "2013-03-23 18:46:58", "user": 160941, "id": 15342401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15342514", "text": "Gotcha. So I think we can close this issue.\n", "created_at": "2013-03-23 18:52:08", "user": 47848, "id": 15342514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15344714", "text": "Fair enough.\n", "created_at": "2013-03-23 21:04:27", "user": 1236447, "id": 15344714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19631275", "text": "If anyone - like me - is still having issues: \n\n```\ngem 'rails', '4.0.0.rc2'\ngem 'sass-rails', '~> 4.0.0.rc2'\n```\n\nfixed it :) :+1: \n", "created_at": "2013-06-18 18:34:42", "user": 37674, "id": 19631275}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Inside of assign_attributes, there is a method which checks to make sure that particular parameters exist. The previous method name was `validate_missing_parameters!` and sounds like some parameters should be missing, when in fact it's meant to check to make sure none of the parameters passed in as arguments are missing.\n\nBecause of this, I think that `validate_required_parameters!` is a more apt name. I also removed a space in the middle of an empty hash.\n", "labels": [], "number": 9880, "updated_at": "2014-06-19 19:18:24", "user": 1075780, "closed_at": "2013-03-23 17:27:17", "id": 12350056, "title": "Refactoring validate_missing_parameters to validate_required_parameters.", "url": "https://api.github.com/repos/rails/rails/issues/9880", "created_at": "2013-03-23 05:28:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15340914", "text": "Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-03-23 17:27:38", "user": 47848, "id": 15340914}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The goal is for a vanilla app to render coffee templates in production the same as it does in development and test.  As far as I can tell, that simply means moving coffee-rails from :assets to the top-level.\n", "labels": [], "number": 9881, "updated_at": "2014-06-26 19:57:38", "user": 222582, "closed_at": "2013-03-25 05:55:40", "id": 12351122, "title": "Put coffee-rails in top-level of generated Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/9881", "created_at": "2013-03-23 07:15:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336560", "text": "You shouldn't need to do this; assets gems belong in the assets group. To turn on asset compilation in production just\n\n```\nconfig.assets.compile = true\n```\n\nhttp://guides.rubyonrails.org/asset_pipeline.html#live-compilation\n", "created_at": "2013-03-23 12:50:51", "user": 27786, "id": 15336560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15337227", "text": "Yes, Rails default strategy is to precompile assets only in production. If you need to change it, you should do it in your own app and it can be done as @steveklabnik said and by changing config/application.rb to require assets in production.\n", "created_at": "2013-03-23 13:40:49", "user": 9582, "id": 15337227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15339814", "text": "This isn't about assets, it's about templates.\n", "created_at": "2013-03-23 16:27:11", "user": 222582, "id": 15339814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15339853", "text": "If you need coffeescript templates you should change in your application. Not every application use coffeescript templates and we don't want to make this the Rails default.\n", "created_at": "2013-03-23 16:29:11", "user": 47848, "id": 15339853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15339870", "text": "How about about disabling coffee templates in test and development by default?\n", "created_at": "2013-03-23 16:30:16", "user": 222582, "id": 15339870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15340004", "text": "I don't think is worth, doing this we will also disable coffeescript assets. If you need coffee templates on production just put the gem in the top level\n", "created_at": "2013-03-23 16:37:06", "user": 47848, "id": 15340004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15340084", "text": "Fair enough, thanks guys.\n", "created_at": "2013-03-23 16:41:05", "user": 222582, "id": 15340084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15348459", "text": "I'm +1 on this. We're bundling and encouraging coffeescript. It is the Rails default already.\n\nAnd it's extra confusing that they work in dev/test, then break when you deploy.\n", "created_at": "2013-03-23 23:37:56", "user": 199, "id": 15348459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15366978", "text": "I'm not sure if we still needing the `:assets` group in the Gemfile, I think the assets compilation isn't done 'by accident' anymore in production when a requested asset is not precompiled\n", "created_at": "2013-03-24 19:46:41", "user": 160941, "id": 15366978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15367903", "text": "@guilleiguaran Yeah, I remove the `assets` group in apps now. Nice to go back to `Bundler.require :default` in `config/application.rb` instead of the strange `Bundler.require :assets => ...` line.\n\n@gkop Could you update the changelog entry and rebase master? :heart:\n", "created_at": "2013-03-24 20:05:12", "user": 199, "id": 15367903}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1995168]}, "text": "In its current state, the inflector handles acronyms non-intuitively if\nthere are acronyms defined that contain other acronyms.\n\nExamples:\n- If you define HTM and HTML as acronyms, 'HTMLController'.underscore produces\n  different results depending on the order in which the two acronyms are\n  defined - in some cases the result is 'htm_l_controller'.\n- 'DNSController'.underscore will return 'd_ns_controller' if DNS and NS\n  are defined as an acronym, regardless of the order they are defined.\n\nThis commit includes tests for both cases and two changes to the\ninflector code to handle them. It changes the behaviour so that the\nlongest suitable acronym is always used.\n", "labels": ["activesupport"], "number": 9882, "updated_at": "2016-01-11 13:02:57", "user": 508113, "closed_at": "None", "id": 12354349, "title": "Match acronyms greedily in the inflector.", "url": "https://api.github.com/repos/rails/rails/issues/9882", "created_at": "2013-03-23 10:32:39", "comments": [{"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336532", "text": "There was recently some changes to how the inflector handles acronyms. Generally, the inflector is frozen, but I'll defer to @fxn on this.\n", "created_at": "2013-03-23 12:48:56", "user": 27786, "id": 15336532}, {"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15351842", "text": "Re @steveklabnik's comment, see #9756 (which is a mark II for #8156).\n", "created_at": "2013-03-24 05:36:24", "user": 31945, "id": 15351842}, {"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56749557", "text": "@johanlindblad Could you rebase this?\n", "created_at": "2014-09-24 22:34:36", "user": 1535036, "id": 56749557}, {"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/152575230", "text": "r? @rafaelfranca Inflector is frozen, but this seems legitimate.\n", "created_at": "2015-10-30 16:23:00", "user": 1529387, "id": 152575230}, {"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/152641920", "text": "I think the first case make sense, it should be order dependent, but the second doesn't.\n\nr? @fxn is the best person to decides this.\n", "created_at": "2015-10-30 20:18:28", "user": 47848, "id": 152641920}, {"reactions": {"+1": [1995168]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/170541174", "text": "@rafaelfranca and @fxn thinking about it a little, his changes really make sense. \n\nConsidering the registered order of acronyms (as it is today), if people define HTML and HTM in this order, it will always use HTM even for `HTMLController`. If we consider first the bigger acronyms (like @johanlindblad did), this problem is covered, and it will still work for classes like `HTMController`.\n", "created_at": "2016-01-11 13:00:13", "user": 2791965, "id": 170541174}], "assignees": [3387, 3387], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9883, "updated_at": "2014-06-26 19:57:42", "user": 621238, "closed_at": "2013-03-23 15:42:41", "id": 12354577, "title": "Fixed typos in activerecord CHANGELOG", "url": "https://api.github.com/repos/rails/rails/issues/9883", "created_at": "2013-03-23 10:56:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is the point of the date: order: element in en.yml to express the usual ordering of dates in a language?  If so and assuming en-US is the default, then shouldn't the date ordering be month,day,year not year,month,day?\n", "labels": ["i18n", "stale"], "number": 9884, "updated_at": "2014-05-04 21:09:04", "user": 26988, "closed_at": "2014-05-04 21:09:04", "id": 12354634, "title": "date order for locale/en.yml", "url": "https://api.github.com/repos/rails/rails/issues/9884", "created_at": "2013-03-23 11:01:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336512", "text": "Please post questions about how to use Rails on Stack Overflow or the rubyonrails-talk mailing list, or feature discussions on the rails-core mailing list. We keep Issues for bugs only. Unless you can find a reason that this causes a problem with you using Rails, this isn't appropriate here. Thanks!\n", "created_at": "2013-03-23 12:47:34", "user": 27786, "id": 15336512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336902", "text": "apologize for the breach of protocol, but if the order field is supposed to reflect the way people using a particular language order their dates then the current ordering is a bug (or incorrect at least) and should be fixed.  i am using the order from rails-i18n where that is the intent.  they seem to wish to defer to the en.yml here and it will order dates incorrectly in our app for our US users.  its an easy workaround, but seems to me anyone using order in this way will have to expend needless effort.\n", "created_at": "2013-03-23 13:14:58", "user": 26988, "id": 15336902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15342242", "text": "Awesome, than that's a bug!\n", "created_at": "2013-03-23 18:37:01", "user": 27786, "id": 15342242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15342253", "text": "Can you give me some way to reproduce this, either a simple app or a description on how to make it, please?\n", "created_at": "2013-03-23 18:37:37", "user": 27786, "id": 15342253}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15434322", "text": "ok here's a code excerpt:\n\n``` ruby\n  SHORT_SUBS = {\"day\"=>\"%d\", \"month\"=>\"%m\", \"year\"=>\"%Y\"}\n  NORMAL_SUBS = {\"day\"=>\"%-d\", \"month\"=>\"%B\", \"year\"=>\"%Y\"}\n\n  def date_formats\n    formats = Hash.new\n    @out_date[\"formats\"] = formats\n    formats[\"short\"] = sub_formats(SHORT_SUBS, '.' )\n    formats[\"normal\"] = sub_formats(NORMAL_SUBS, ' ' )\n  end\n\n  def sub_formats(subs, sep)\n    order = @date_yml[\"order\"].join(sep)       #from *.yml i18n files\n    subs.each_pair {|k,v| order.sub!(k,v)}\n    order\n  end\n```\n\nwhich will generate:\n\n``` ruby\nformats[\"short\"] = \"%Y.%m.%d\" \nformats[\"normal\"]=\"%Y %B %-d\"\n```\n\nAs mentioned, this are not the way dates are usually formatted is US english, so if this is the point of the order: element then its order should be changed to :month :day :year\n", "created_at": "2013-03-26 00:29:12", "user": 26988, "id": 15434322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15692865", "text": "@kagemusha do you mention the following image (`published on`)?\nI used scaffold generator with default en.yml.\n\n![date_order](https://f.cloud.github.com/assets/13426/321887/54ece54e-9a16-11e2-8601-6515dbbb6789.png)\n\nCertainly, I find related settings in `activesupport/lib/active_support/locale/en.yml` .\n\n```\n 17     # Used in date_select and datetime_select.\n 18     order:\n 19       - year\n 20       - month\n 21       - day\n```\n\nshould we use the following settings ?\n\n```\n 17     # Used in date_select and datetime_select.\n 18     order:\n 19       - month\n 20       - day\n 21       - year\n```\n", "created_at": "2013-03-31 15:32:33", "user": 13426, "id": 15692865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15693160", "text": "@kennyj Yes, another example of why i believe it should be changed to month, day, year.\n", "created_at": "2013-03-31 15:50:08", "user": 26988, "id": 15693160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15693387", "text": "@kagemusha (影武者 in Japanese) thanks for your quick response :)\nI want to fix it. But if we use the above settings(month - day -year), many testcases are failed.\nSo I'm a little cautious.\n\n@steveklabnik what do you think ? I'm not en-US.\nIf `date_select` method generate `March 31 2013` in the above image, is is natural for you ?\n", "created_at": "2013-03-31 16:08:46", "user": 13426, "id": 15693387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15693548", "text": "`March 31 2013` is absolutely natural for US citizens, that's how I'd write a date. It's a stupid way to write a date, but it's how we do it. MURRRICA! :)\n", "created_at": "2013-03-31 16:19:32", "user": 27786, "id": 15693548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15695550", "text": "thanks guys. Anyway, I've send pull request about this issue. #10020.\n", "created_at": "2013-03-31 18:25:24", "user": 13426, "id": 15695550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41925433", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2014-05-01 16:16:08", "user": 47848, "id": 41925433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42067057", "text": "Can someone confirm if it was fixed on https://github.com/svenfuchs/rails-i18n/pull/363?\nIf so, we can close this issue and #10020.\n", "created_at": "2014-05-02 19:10:01", "user": 611891, "id": 42067057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42145105", "text": "Unfortunately we can't change these defaults since it will break a lot of applications.\n\nSo I'm closing this issue.\n", "created_at": "2014-05-04 21:09:04", "user": 47848, "id": 42145105}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Not sure if this is a bug or anything yet, but I am seeing some weird behavior in my 3.2.12 app.\n\n```\n > Question.first\n  Question Load (1.8ms)  SELECT \"questions\".* FROM \"questions\" LIMIT 1\n => #<Question id: 7, so_id: 1642028, creation_date: \"2009-10-29 06:57:45\", score: 1812, accepted_answer_so_id: 1642035, title: \"What is the name of this operator: &quot;--&gt;&quo...\", view_count: 124958, link: \"http://stackoverflow.com/questions/1642028/what-is-...\", body: \"<p>After reading \\\"<a href=\\\"http://groups.google.com...\", answer_count: 17, is_answered: true, owner: \"GManNickG\", created_at: \"2013-03-23 07:02:48\", updated_at: \"2013-03-23 07:02:48\", accepted_answer_id: nil> \n1.9.3p392 :026 > Question.find(1)\n  Question Load (1.9ms)  SELECT \"questions\".* FROM \"questions\" WHERE \"questions\".\"id\" = $1 LIMIT 1  [[\"id\", 1]]\n => #<Question id: 1, so_id: 11227809, creation_date: \"2012-06-27 13:51:36\", score: 4072, accepted_answer_so_id: 11227902, title: \"Why is processing a sorted array faster than an uns...\", view_count: 216266, link: \"http://stackoverflow.com/questions/11227809/why-is-...\", body: \"<p>Here is a piece of C++ code that shows some very...\", answer_count: 9, is_answered: true, owner: \"GManNickG\", created_at: \"2013-03-23 07:02:10\", updated_at: \"2013-03-23 10:27:17\", accepted_answer_id: nil> \n```\n\nBoth are different questions, but the real question is why doesn't `.first` return the record with `id=1`?\n\nThis is the schema for my `Question` table:\n\n```\n  create_table \"questions\", :force => true do |t|\n    t.integer  \"so_id\"\n    t.datetime \"creation_date\"\n    t.integer  \"score\"\n    t.integer  \"accepted_answer_so_id\"\n    t.string   \"title\"\n    t.integer  \"view_count\"\n    t.string   \"link\"\n    t.text     \"body\"\n    t.integer  \"answer_count\"\n    t.boolean  \"is_answered\"\n    t.string   \"owner\"\n    t.datetime \"created_at\",            :null => false\n    t.datetime \"updated_at\",            :null => false\n    t.integer  \"accepted_answer_id\"\n  end\n\n  add_index \"questions\", [\"accepted_answer_so_id\"], :name => \"index_questions_on_accepted_answer_so_id\"\n  add_index \"questions\", [\"so_id\"], :name => \"index_questions_on_so_id\"\n  add_index \"questions\", [\"title\"], :name => \"index_questions_on_title\"\n```\n\nIt also happens in another model `Answer` as well (so something funky is happening here):\n\n```\n> Answer.first\n  Answer Load (1.0ms)  SELECT \"answers\".* FROM \"answers\" LIMIT 1\n => #<Answer id: 6629, so_id: 1048093, creation_date: \"2009-06-26 08:58:19\", is_accepted: false, question_id: 400, owner: \"Christian Hayter\", score: 10, created_at: \"2013-03-23 09:21:33\", updated_at: \"2013-03-23 09:23:32\", body: \"<p>I'd prefer <code>INFORMATION_SCHEMA.COLUMNS</cod...\"> \n1.9.3p392 :008 > Answer.find(1)\n  Answer Load (44.7ms)  SELECT \"answers\".* FROM \"answers\" WHERE \"answers\".\"id\" = $1 LIMIT 1  [[\"id\", 1]]\n => #<Answer id: 1, so_id: 11227902, creation_date: \"2012-06-27 13:56:42\", is_accepted: true, question_id: 1, owner: \"Mysticial\", score: 6423, created_at: \"2013-03-23 07:02:10\", updated_at: \"2013-03-23 09:43:12\", body: \"<p><strong>You are the victim of <a href=\\\"http://en...\"> \n```\n\nAlthough, it doesn't do that in another model:\n\n```\n> Tag.first\n  Tag Load (24.5ms)  SELECT \"tags\".* FROM \"tags\" LIMIT 1\n => #<Tag id: 1, name: \"java\", num_questions: 388310, created_at: \"2013-03-23 07:02:09\", updated_at: \"2013-03-23 07:02:09\"> \n```\n\nIs this something you guys have come across before? It usually works fine for me, in other apps and such. I recently did a `rake db:reset` so not sure if that may have anything to do with this funky behavior.\n", "labels": [], "number": 9885, "updated_at": "2013-03-23 12:15:01", "user": 137772, "closed_at": "2013-03-23 12:11:23", "id": 12354746, "title": "`.first` returns wrong results", "url": "https://api.github.com/repos/rails/rails/issues/9885", "created_at": "2013-03-23 11:16:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15335530", "text": "I assume you are using Postgres for this application? \nThis is the default behaviour when not specifying an order in your query.\nPostgres doesn't default to returning records in `id` order, it has it's own algorithm (which I'm not at all familiar with), if you'd like to return the first record by id you need to specify `Answer.order(:id).first` or specifying a default order scope on your models.\n\nThat being said, I'm pretty sure this has actually been addressed for Rails 4, if you don't specify an order when calling `first` or `last` it sets a default order of `id`, and will return your expected results. \nAs this is a big change in behaviour, it is understandable that it hasn't been considered for backporting to 3.2-stable.\n", "created_at": "2013-03-23 11:23:15", "user": 167215, "id": 15335530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15335671", "text": "Interesting...yes...I am using Postgres. It is the first app I am using Postgres locally too...so maybe that is the cause indeed.\n", "created_at": "2013-03-23 11:35:22", "user": 137772, "id": 15335671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15335909", "text": "The PR for Rails 4 with more details on the whole situation is here #5153, you can close this issue now, that's probably a better place to ask further questions\n", "created_at": "2013-03-23 11:55:11", "user": 167215, "id": 15335909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336091", "text": "That seems to be another issue - `update_attribute` versus the `first` or `find_first` methods.\n", "created_at": "2013-03-23 12:11:23", "user": 137772, "id": 15336091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336131", "text": "Yeah, sorry about that, the Github autocomplete decided that it liked another number better, I've updated the link\n", "created_at": "2013-03-23 12:15:01", "user": 167215, "id": 15336131}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi guys,\n\nHere is an example :\n\n```\n2.0.0p0 :003 > brand = Brand.first\n  Brand Load (0.3ms)  SELECT `brands`.* FROM `brands` LIMIT 1\n => #<Brand id: 1>\n2.0.0p0 :004 > brand.users.first\n  User Load (10.9ms)  SELECT `users`.* FROM `users` WHERE `users`.`brand_id` = 1 LIMIT 1\n => #<User id: 1>\n2.0.0p0 :005 > brand.users.first.brand\n  User Load (0.4ms)  SELECT `users`.* FROM `users` WHERE `users`.`brand_id` = 1 LIMIT 1\n  Brand Load (17.0ms)  SELECT `brands`.* FROM `brands` WHERE `brands`.`id` = 1 LIMIT 1\n => #<Brand id: 1>\n```\n\nOn the last line, we can see that a SQL Query is performed to retrieve the brand, but we already have the brand loaded into memory since we used it to fetch the user.\n\nI think this SQL query should not be performed, it caused me some N+1 issues for example.\n\nWhat do you think ? Is this even possible ?\n\nThis was tested on rails 3.2.13, could not manage to test in on edge since my project didn't want to upgrade, I'll try to create a new project from scratch.\n\nThanks\n", "labels": [], "number": 9886, "updated_at": "2013-03-24 20:02:10", "user": 803765, "closed_at": "2013-03-23 12:45:02", "id": 12355458, "title": "ActiveRecord should eager load the parent record when fetching a relation", "url": "https://api.github.com/repos/rails/rails/issues/9886", "created_at": "2013-03-23 12:27:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336460", "text": "Hey thanks! We don't take feature requests on the issues tracker, please post to the rails-core mailing list or submit a pull request that implements this. There are enough bugs that it's important we keep Issues bugs-only.\n", "created_at": "2013-03-23 12:45:02", "user": 27786, "id": 15336460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15336498", "text": "Hi, thanks for the quick answer, I thought this might be a bug, sorry for the inconvenience. \n\nI'll post to the rails-core ml then.\n", "created_at": "2013-03-23 12:46:48", "user": 803765, "id": 15336498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15367585", "text": "@Intrepidd check out the `:inverse_of` option to achieve this!\n", "created_at": "2013-03-24 19:59:59", "user": 199, "id": 15367585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15367728", "text": "awesome, thanks !\n", "created_at": "2013-03-24 20:02:10", "user": 803765, "id": 15367728}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "explanation in rails/rails#9862\n\nBasically, when using the default responders, have it return the resource from a PUT request the same way it does when POSTing.\n", "labels": [], "number": 9887, "updated_at": "2014-12-24 00:47:35", "user": 3764, "closed_at": "2013-03-23 13:38:53", "id": 12355965, "title": "PUT requests have no content when using respond_with", "url": "https://api.github.com/repos/rails/rails/issues/9887", "created_at": "2013-03-23 13:13:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15337203", "text": "Thanks for the pull request but I don't think it is worthy changing Rails. People have their own customizations for responders and they should be done in their respective apps.\n", "created_at": "2013-03-23 13:38:52", "user": 9582, "id": 15337203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/32991680", "text": "@josevalim I just ran into this unexpected behavior myself.  The behavior of \"respond_with\" should be consistent whether it is used in PUT/PATCH, GET or POST.  Fixing the behavior would not lock-in a flavor of responder customization as suggested... it would make \"respond_with\" consistent.\n", "created_at": "2014-01-22 04:00:43", "user": 28294, "id": 32991680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44790710", "text": "@josevalim I'm with @adamrixey, this doesn't seem to follow the principle of least surprise.\n", "created_at": "2014-06-01 22:01:22", "user": 1944735, "id": 44790710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68012360", "text": "@adamrixey I have that problem and I want to understand why if we know the problem is not in Rails? I don't want to deal with making something on my own and I don't understand the reasons of the comment of @josevalim.\n\nCan I response whatever I want in the update action using respond_with? \n", "created_at": "2014-12-24 00:01:35", "user": 4237280, "id": 68012360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68014718", "text": "`respond_with` is no longer part of Rails, please raise any issues on the responders gem.\n", "created_at": "2014-12-24 00:44:12", "user": 1529387, "id": 68014718}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9888, "updated_at": "2014-06-26 19:57:45", "user": 277819, "closed_at": "2013-03-23 16:29:37", "id": 12358200, "title": "Don't use hash fragment for travis link", "url": "https://api.github.com/repos/rails/rails/issues/9888", "created_at": "2013-03-23 16:15:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9889, "updated_at": "2014-06-26 15:56:16", "user": 6399, "closed_at": "2013-03-23 20:04:10", "id": 12361168, "title": "Unscoped works with other named scope even without block form", "url": "https://api.github.com/repos/rails/rails/issues/9889", "created_at": "2013-03-23 19:13:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15343747", "text": "@rafaelfranca your feedback was implemented . \n", "created_at": "2013-03-23 20:03:27", "user": 6399, "id": 15343747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15343760", "text": "Thank you  :heart: :green_heart: :blue_heart: :yellow_heart: :purple_heart:\n", "created_at": "2013-03-23 20:04:15", "user": 47848, "id": 15343760}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9890, "updated_at": "2014-06-26 19:57:49", "user": 621238, "closed_at": "2013-03-23 21:01:57", "id": 12363984, "title": "activemodel/CHANGELOG typo and change in test description", "url": "https://api.github.com/repos/rails/rails/issues/9890", "created_at": "2013-03-23 21:00:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is an updated version of #9451.Add custom index type with :using key\n\n```\nadd_index(:wikis, :body, :using => 'gin')\n```\n", "labels": [], "number": 9891, "updated_at": "2014-06-12 14:02:09", "user": 330368, "closed_at": "2013-03-23 21:37:18", "id": 12364431, "title": "Custom index type support with :using.", "url": "https://api.github.com/repos/rails/rails/issues/9891", "created_at": "2013-03-23 21:19:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15345680", "text": "OMG!! Very cool! Thank you so much\n", "created_at": "2013-03-23 21:36:55", "user": 47848, "id": 15345680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15346362", "text": ":heart: :heart_eyes: :+1: thanks!\n", "created_at": "2013-03-23 21:49:10", "user": 59744, "id": 15346362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15347039", "text": ":shipit:\n", "created_at": "2013-03-23 22:25:01", "user": 19534, "id": 15347039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18940235", "text": "This is quite welcome, but now we're dumping superfluous `using: :btree` options in everyone's `schema.rb`. The using option should only be dumped if it isn't the default.\n", "created_at": "2013-06-04 21:22:40", "user": 199, "id": 18940235}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a bug on v3.2.13 (reported in #9130 ) where newly created associations will overwrite directly set ids. It seems to be fixed on 3-2-stable but this will help with regressions.\n", "labels": [], "number": 9892, "updated_at": "2014-08-18 08:36:12", "user": 162976, "closed_at": "2013-03-24 01:10:08", "id": 12367898, "title": "Add a test to assert autosaving associations doesn't overwrite id accessor methods", "url": "https://api.github.com/repos/rails/rails/issues/9892", "created_at": "2013-03-24 01:08:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15349357", "text": "Failed to create this against the right branch, sorry.\n", "created_at": "2013-03-24 01:10:47", "user": 162976, "id": 15349357}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a bug on v3.2.13 (reported in #9130 ) where newly created associations will overwrite directly set ids. It seems to be fixed on 3-2-stable but this will help with regressions.\n", "labels": ["activerecord"], "number": 9893, "updated_at": "2014-07-02 06:18:26", "user": 162976, "closed_at": "2013-06-26 05:45:36", "id": 12367934, "title": "Add a test to assert autosaving associations doesn't overwrite id accessor methods", "url": "https://api.github.com/repos/rails/rails/issues/9893", "created_at": "2013-03-24 01:12:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19977166", "text": "@JonRowe ping, what is the status of this PR? Did the fixing commit on `master` include a test-case to prevent regressions? What was the fixing commit on `3-2-stable`? Is this test still necessary?\n", "created_at": "2013-06-25 13:50:55", "user": 5402, "id": 19977166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20014746", "text": "`what is the status of this PR?`\n\nNoone seems to have looked at it.\n\n`Did the fixing commit on master include a test-case to prevent regressions?`\n\nNo. That's why I wrote this, I was originally attempting to fix a reported bug.\n\n`What was the fixing commit on 3-2-stable?`\n\nThe part of ActiveRecord which had this bug was completely rewritten, no one commit.\n\n`Is this test still necessary?`\n\nTo prevent regressions only.\n", "created_at": "2013-06-25 23:07:31", "user": 162976, "id": 20014746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20028239", "text": "@JonRowe thanks for the detailed answer. I'm merging this one in.\n", "created_at": "2013-06-26 05:45:33", "user": 5402, "id": 20028239}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Running rails 4.0.0-beta1 on ruby 2.0.0-p1.\n\nIt seems as though when you perform code like the below, the where clauses are inherited by any callbacks it runs.\n\n``` ruby\nCategory.where(full_name: 'root/bar').create\n```\n\nThe above exhibits the problem. All of the below function as intended.\n\n``` ruby\nCategory.new(full_name: 'root/bar').save\nCategory.create(full_name: 'root/bar')\nCategory.where(full_name: 'root/bar').new.save\n```\n\nBy debugging on the rails console it reveals:\n\n``` ruby\n# This is basically running\nCategory.where(full_name: 'root/bar').where(full_name: 'root').first\n\n# When this is expected\nCategory.where(full_name: 'root').first\n```\n\nThis also applies to the first_or_create methods. I'm yet to test the find_or_create methods or the rails 3.x series. Should I write this into an active_record test? Any advice as to where to start?\n\nI've created an example application with this problem here https://github.com/brocktimus/rails_create_differences. Example class used below.\n\n``` ruby\nclass Category < ActiveRecord::Base\n\n  has_many :children, class_name: 'Category', foreign_key: :parent_id\n  belongs_to :parent, class_name: 'Category'\n\n  before_validation :assign_parents, on: :create\n\n  private\n\n  def assign_parents\n    parts = full_name.split '/'\n    self.name = parts.pop\n    self.parent = Category.where(full_name: parts.join('/')).first_or_initialize unless parts.empty?\n  end\n\nend\n```\n", "labels": ["activerecord", "attached PR"], "number": 9894, "updated_at": "2016-02-02 00:57:47", "user": 2103728, "closed_at": "None", "id": 12368417, "title": "ActiveRecord.where(hash).create callbacks inherit the where(hash)", "url": "https://api.github.com/repos/rails/rails/issues/9894", "created_at": "2013-03-24 02:13:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15460003", "text": "Hey @brocktimus and thanks for your report. I'm not sure if this is actually a bug. This problem was reported before and you can follow the discussion here #7853 and here #7391. Those tickets were closed because it was the expected behavior.\n\n/cc @jonleighton \n", "created_at": "2013-03-26 14:06:57", "user": 5402, "id": 15460003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15460674", "text": "Right if its working as intended thats fine. \n\nIn Rails 3 I would have used find_or_create_by_full_name(full_name). \n\nI'm just playing with rails 4 a bit and most of the transition documentation said to change that to the where(hash).first_or_create_by. I didn't realise the existence of .find_or_create(hash) until looking into the ActiveRecord code to investigate.\n\nDid you want me to document how those methods work anywhere or how things should be changed for compatibilty? Unsure exactly how railsguides and the like work and what happens during changeover between major releases.\n", "created_at": "2013-03-26 14:18:51", "user": 2103728, "id": 15460674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15461025", "text": "If we settle that this is the expected behavior It totally makes sense to document it. The fact that already 3 reports were filed regarding the same problem shows that it's not as \"expected\" as it could be which makes documentation even more necessary.\n\nIn my opinion the guides should explain how to get a 3.x app running on 4.0 without such complications. I think it would be good to promote `#find_or_create`. As the described scenario is a combination of different methods on relation it's kind of hard to put it into the rdocs. Methods that always run into this behavior like `first_or_create` could be a good place though.\n\n@rafaelfranca @steveklabnik thoughts?\n", "created_at": "2013-03-26 14:25:14", "user": 5402, "id": 15461025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15462752", "text": "Is `find_or_create` available in 3.2? I've been migrating across to the `where(hash).first_or_create` recently in my 3.2 apps because it was available and was the way rails seemed to be moving forward.\n\nJust figured I'd add my 2c regarding how it looks.\n\nI did think the `first_or_create` syntax was really nice before this, especially being able to pass in a block for extra parameters. It looked a lot nicer than the original `find_or_create_by_column_name` methods since you construct it like any other relation and then tack on `first_or_create` to the end. \n\nIt was the guides like that below and some others which suggested this as a drop in replacement.\n\nhttp://blog.remarkablelabs.com/2012/12/what-s-new-in-active-record-rails-4-countdown-to-2013\n\nThe idea of just doing `.new.save` as a work around seems awkward and I would've expected to be equivalent to `create`. I guess it ends up being a question of how often is this desired functionality, how often will it trip people up and how complex is it to \"fix\" right?\n", "created_at": "2013-03-26 14:52:53", "user": 2103728, "id": 15462752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15484398", "text": "Yeah, I think we should promote `find_or_create` since its behavior is closer to the dynamic finders.\n", "created_at": "2013-03-26 19:54:10", "user": 47848, "id": 15484398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15657859", "text": "Jon implemented find_or_create_by on relation, so let's just document that.\n", "created_at": "2013-03-29 19:57:20", "user": 2741, "id": 15657859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15952776", "text": "I agree. I kinda consider `first_or_create` and friends to be soft-deprecated, so we should definitely promote `find_or_create` and friends in the docs.\n", "created_at": "2013-04-05 12:25:40", "user": 1979, "id": 15952776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15953660", "text": "Want me to write something up to that effect in the Rails 4 release notes + upgrading ruby on rails guides?\n", "created_at": "2013-04-05 12:47:02", "user": 2103728, "id": 15953660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16114796", "text": "@brocktimus if you want, please\n", "created_at": "2013-04-09 14:15:22", "user": 47848, "id": 16114796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16501297", "text": "I'm confused.\n\nRails 4 Release Notes says this (http://edgeguides.rubyonrails.org/4_0_release_notes.html):\n\n```\nfind_or_create_by_... can be rewritten using find_or_create_by(...) or where(...).first_or_create.\n```\n\nIs this incorrect now? Considering that `first_or_create` is soft-deprecated?\n", "created_at": "2013-04-17 11:56:58", "user": 817931, "id": 16501297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16501442", "text": "Let's say I had this:\n\n```\nModel.where(a: 1, b: 1).first_or_create(c: 1)\n```\n\nHow can I reproduce this behaviour with new methods?\n\nIt's sad, `first_or_create` was really useful.\n", "created_at": "2013-04-17 12:00:51", "user": 817931, "id": 16501442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16502865", "text": "I've updated docrails to try and reflect that the first_or_\\* methods shouldn't be used as drop in replacements for the others. I don't know if there are similar issues with first_or_initialize, but I'm guessing there could be if you did specific things in an after_initialize block.\n\nhttps://github.com/brocktimus/docrails/commit/56297d0c8e9925e3e57699ac2a95028b72a64030\n\nAre the changes to magical finders a big enough change to be mentioned in the upgrading_ruby_on_rails guide? Currently there is no mention of them.\n\nI can't comment on the soft deprecation status, but can comment on that code. As it stands it would work, but would be very dependent on any callbacks in your model as the scope of the where will effect them as well.\n\nIf you didn't want to use them to prevent potential issues later you could rewrite it in one of the following ways:\n\n``` ruby\nModel.where(a: 1, b: 1).first_or_initialize(c: 1).save\n\ncreating = Model.find_or_initialize_by(a: 1, b: 1)\ncreating.c = 1 if creating.new_record?\ncreating.save\n```\n\nI liked it the first_or_\\* methods, but if they're too complicated or difficult to maintain I'm not overly attached to them.\n", "created_at": "2013-04-17 12:36:54", "user": 2103728, "id": 16502865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16502986", "text": "@brocktimus Thank you, that was very helpful! :thumbsup: \n", "created_at": "2013-04-17 12:39:48", "user": 817931, "id": 16502986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23222478", "text": "Is this still a bug now after changes to http://edgeguides.rubyonrails.org/4_0_release_notes.html ?\n", "created_at": "2013-08-25 05:57:33", "user": 567626, "id": 23222478}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23223901", "text": "@vipulnsward \n\n> Are the changes to magical finders a big enough change to be mentioned in the upgrading_ruby_on_rails guide? Currently there is no mention of them.\n\nI agree that we should mention it in the upgrading guide. Then I think that we can close it.\n", "created_at": "2013-08-25 08:24:41", "user": 354185, "id": 23223901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23225095", "text": "Since @jonleighton said the first_or_\\* methods are soft deprecated should we only mention the drop in replacements of find_or_*_by() ?\n", "created_at": "2013-08-25 10:07:43", "user": 2103728, "id": 23225095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23225183", "text": "I've done that already in https://github.com/brocktimus/docrails/commit/56297d0c8e9925e3e57699ac2a95028b72a64030 should I just merge that onto master of docrails?\n", "created_at": "2013-08-25 10:14:54", "user": 2103728, "id": 23225183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23282489", "text": "@brocktimus I have added https://github.com/rails/rails/pull/12015 based on your changes.\nYou can merge your changes after that gets reviewed.\n", "created_at": "2013-08-26 18:07:50", "user": 567626, "id": 23282489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25235215", "text": "I don't understand how this issue has been closed. The first report didn't include any `*_by*` methods as does not my issue #12305. How come they're related or is the documentation still not sufficiently written?\n\nDocumentation only writes about those dynamic methods, but not telling anything that this code should not work as it did before:\n`Foo.where(name: \"bar\").create` or `Foo.where(name: \"bar\").first_or_create(baz: \"bar\")`.\n\nAre you trying to say with the documentation change which led of closing these issues, that the code above should also not work and it is expected behavior of changing the default scope of the class itself (not even singleton class)?\n", "created_at": "2013-09-27 10:11:02", "user": 174160, "id": 25235215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25235694", "text": "For reference I'm posting the example from #12305 : \n\n``` ruby\nclass Testing < ActiveRecord::Base\n  scope :mine, -> { where(field: \"mine\") }\n\n  after_create do\n    Testing.where(field: \"other\").load\n  end\nend\n```\n\n```\nirb(main):005:0> Testing.mine.create\n   (1.0ms)  begin transaction\n  SQL (0.0ms)  INSERT INTO \"testings\" (\"created_at\", \"field\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Fri, 20 Sep 2013 15:56:33 UTC +00:00], [\"field\", \"mine\"], [\"updated_at\", Fri, 20 Sep 2013 15:56:33 UTC +00:00]]\n  Testing Load (0.0ms)  SELECT \"testings\".* FROM \"testings\" WHERE \"testings\".\"field\" = 'mine' AND \"testings\".\"field\" = 'other'\n   (12.0ms)  commit transaction\n=> #<Testing id: 2, field: \"mine\", created_at: \"2013-09-20 15:56:33\", updated_at: \"2013-09-20 15:56:33\">\n```\n\nI'll reopen as we did not change documentation for `#create` in combination with scopes.\n", "created_at": "2013-09-27 10:21:37", "user": 5402, "id": 25235694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25236325", "text": "As mentioned above, i don't think that the problem is only not being mentioned in the documentation, but the problem is that the class's scope itself is changed, which should not ever happen (unless specified explicitly with default scope, if i'm not mistaken).\n", "created_at": "2013-09-27 10:35:09", "user": 174160, "id": 25236325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25236787", "text": "I dug around myself before creating this ticket. I was using first or create and found that it was calling first and then ORing the result with create. Thus the problem (as I saw it) was within the create method, so thats how I raised the issue.\n\nThe reason this was an issue for me (and others) was because first_or_create was the recommended upgrade path from find_or_create_by_\\* methods in rails 3. This had different behaviour to the original find_or_create_by_\\* methods so instead I changed documentation to point at the newer find_or_create_by(hash) methods which had the same expected behaviour.\n\nI've got no idea if / when the behaviour of MyModel.query_scope.create was changed. Did it behave differently in previous versions of rails or is the comment more that it is unintuitive?\n", "created_at": "2013-09-27 10:45:12", "user": 2103728, "id": 25236787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25237000", "text": "The example code i wrote in issue #12305 worked fine with ActiveRecord 3.x series. The problem arised when i upgraded to 4.0.\n", "created_at": "2013-09-27 10:50:03", "user": 174160, "id": 25237000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35853571", "text": "It seems like the problem is that the lifecycle hooks/callbacks are being evaluated within a scope. What if we were to make all off these hooks be performed without an enclosing scope? That is, when would we need/want them to be performed inside a scope?\n", "created_at": "2014-02-24 02:39:34", "user": 3597621, "id": 35853571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44300178", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2014-05-27 16:29:09", "user": 7468109, "id": 44300178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44303753", "text": "The problem still exists in `rails 4.1.1` - i can reproduce the problem with example described in #12305.\n", "created_at": "2014-05-27 16:57:47", "user": 174160, "id": 44303753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44304398", "text": "Thanks. We do have a fix for at https://github.com/rails/rails/pull/15355. I'll link this issue there.\n", "created_at": "2014-05-27 17:03:16", "user": 47848, "id": 44304398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68540659", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-01-02 16:43:07", "user": 7468109, "id": 68540659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68591439", "text": "The problem still exists in `rails 4.2.0` - i can reproduce the problem with example described in #12305.\n", "created_at": "2015-01-03 11:13:30", "user": 174160, "id": 68591439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125373181", "text": "@rafaelfranca Do you realize the bug has been open for 2 years and it's still not fixed? WOW...\n", "created_at": "2015-07-27 22:53:40", "user": 1489947, "id": 125373181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125401218", "text": "@ThomasAlxDmy its OSS, feel free to open a PR with a fix. Comments like that really aren't helpful.\n\n@rafaelfranca @senny since this has been behaviour for all of the 4.x series is it worth reconsidering what intended behaviour should be given 5 is on the horizon? Possibly more people relying on this behaviour now than not. I'm not sure.\n", "created_at": "2015-07-28 01:32:17", "user": 2103728, "id": 125401218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125401451", "text": "@brocktimus Sorry don't want my name associated with rails/AR ;)\n", "created_at": "2015-07-28 01:34:58", "user": 1489947, "id": 125401451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125506531", "text": "Too late. Your entitlement to the free labor of others is now a permanent marker in the annals of Rails. \n\n> On Jul 28, 2015, at 03:36, ThomasAlxDmy notifications@github.com wrote:\n> \n> @brocktimus Sorry don't want my name associated with rails ;)\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2015-07-28 08:44:53", "user": 2741, "id": 125506531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125680963", "text": "@dhh lmao When did I say I was using rails? Was just trying to help a friend, I dropped rails/AR years ago mostly because of that kind of issues ;)\n", "created_at": "2015-07-28 17:08:13", "user": 1489947, "id": 125680963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125699659", "text": "Your friend is most welcome to join the community and help device a solution to their issue, if they can do so without your obnoxious entitlement. \n\nPlease do be on your merry way to whatever community you've found that has either no issues or is willing to tolerate your attitude about them. \n\n> On Jul 28, 2015, at 19:09, ThomasAlxDmy notifications@github.com wrote:\n> \n> @dhh lmao When did I say I was using rails? Was just trying to help a friend, I dropped rails/AR years ago mostly because of that kind of issues ;)\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2015-07-28 18:09:17", "user": 2741, "id": 125699659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125702073", "text": "@dhh You're over reacting my friend, I'm just pointing out true facts. And that's it. There ain't no bad intention. We all have issues but there's way different ways to tackle them. I was reading an interesting article about why is rails community slowly dying (small comparison with node -- which I'm not fan of personally) http://www.google.com/trends/explore?hl=en-US#q=%22ruby+on+rails%22,+/m/0bbxf89&cmpt=q&tz&tz and I do believe that is that kind of attitude that leads to it. \n\nI'm sorry if you can't distinguish your allies from your enemies.   \n", "created_at": "2015-07-28 18:20:20", "user": 1489947, "id": 125702073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125708411", "text": "Your \"true facts\" are as laughable as your claim of \"ally\". Rails is at this point a massive system with an incredibly strong, diligent, and ever-expanding community of users and contributors working on improving it. \n\nBut there will always be bugs, and this particular bug just wasn't important enough to summon any effort to its fix. Ipso facto. \n\nRails is not a vendor that owes you, or your friend, anything. It's a common space where everyone can contribute their own fixes and improvements, and in return enjoy that in kind from others.\n\nYou contributed nothing but needless scorn and entitlement. That is not the behavior of an \"ally\". Your post-rationalization for this disgraceful behavior is that the truth of a fact like \"bug X has not been fixed for me in duration Y\" completely side-steps the point. That truth is both trivial and obvious. You're not providing any service of revelation by sharing.\n\nThe tone in which you chose to, though, was indeed in bad intention. Your clearly meant to, and obviously continue to, belittle the work of thousands of contributors who share their work with all for free. \n\nAnd for what? Do you think anyone will be inspired to help your friend deal with this issue with greater haste because you huffed and puffed? Quite the contrary. Demanding the free labor of others with indignation is no way to inspire their charity.\n\nSo, again, please pack your entitlement, your banal analysis of the health of Rails, and be gone. Shoo, shoo. \n\n> On Jul 28, 2015, at 20:21, ThomasAlxDmy notifications@github.com wrote:\n> \n> @dhh You're over reacting my friend, I'm just pointing out true facts. and that's it. There ain't no bad intention. We all have issues but there's way different ways to tackle them. I was reading an interesting article about why is rails community slowly dying (small comparison with node -- which I'm not fan of personally) http://www.google.com/trends/explore?hl=en-US#q=%22ruby+on+rails%22,+/m/0bbxf89&cmpt=q&tz&tz and I do believe that is that kind of attitude that leads to it.\n> \n> I'm sorry if you can't distinguish your allies from your enemies.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2015-07-28 18:39:16", "user": 2741, "id": 125708411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125712333", "text": "Since we are discussing tends, these are interesting number about what you are complaining here http://issuestats.com/github/rails/rails. I think these numbers speak by their self.\n\nYes, I'm aware that this issue is open for 2 years. In fact I'm aware of all the issues on the issue tracker. But my time is limited, my interest too and I try to focus my time on the things that most interest me, because after all I work here not because someone pays me, but because I love to work with this team and use my free time to help people.\n\nI'm also aware that this is not a trivial issue to fix and it will require a lot of work and it may break a lot of applications like @brocktimus correctly pointed. I know It will be fixed eventually, because there are so many great people working on this framework that it is just matter of time. Every single day someone new starts to contribute to this framework and it is amazing how a little bit of encouragement can create amazing regular contributors like @senny @chancancode @sgrif @kaspth @robin850 @vipulnsward @meinac just to name few.\n\nI really don't know if Rails is dying, but I don't care, because the machinery that runs this framework is more alive than ever.\n", "created_at": "2015-07-28 18:46:50", "user": 47848, "id": 125712333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125713833", "text": "@brocktimus indeed, this is something that we can just change on Rails 5. The issue is assigned to me, we already have some patches, @sgrif already touched this code too, so I believe we will get it fixed in time to Rails 5.\n", "created_at": "2015-07-28 18:49:38", "user": 47848, "id": 125713833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125722544", "text": "@dhh Actually I don't think you're right. Because now I got your full attention, then people will come watch to see what's happening, and that issue will be work on again. Awareness is the key.\n\n`Do you realize the bug has been open for 2 years and it's still not fixed?`\n\nIS a true fact, and if you want to laugh about it, feel free but then I really wonder what kind of leader you are for \"Your community\". As you see it was not address against anyone, it was just an open statement. I have not asked for anything, nor I said that you owe me anything. \n\nDo you think you're going to win that argument by insulting and trolling me? In my humble opinion you should focus on more important thing for \"Your community\" than attacking the ones that want to raise awareness. \n\nFor my friends we found a way around it, so now it would just be helping \"Your community\"... Again, I think your attitude is very disappointing far far away from constructive. You should learn that contributing to a project is not the only way to make it move forward (note that I do not claim I ever did), and you should be grateful to all the people that are still trying to make Rails a better word rather than trolling them for your own sake.  \n", "created_at": "2015-07-28 19:05:39", "user": 1489947, "id": 125722544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125724321", "text": "> @dhh Actually I don't think you're right. Because now I got your full attention, then people will come watch to see what's happening, and that issue will be work on again. Awareness is the key.\n\nIn my experience that is not what happens. In fact this issue is an outlier, for the reasons that I already explained. So even with awareness the fix is still not trivial and I doubt it will be fixed.\n", "created_at": "2015-07-28 19:14:27", "user": 47848, "id": 125724321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125729656", "text": "@ThomasAlxDmy I love statistics. Check this out https://www.google.com/trends/explore?hl=en-US#q=rails%2C%20%2Fm%2F0bbxf89&cmpt=q&tz=Etc%2FGMT-3\n", "created_at": "2015-07-28 19:30:49", "user": 174160, "id": 125729656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125773865", "text": "You left out the `WOW...` part of your quote, dude, which was kind of the finer end of your shitty point\n", "created_at": "2015-07-28 22:47:08", "user": 98936, "id": 125773865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125776348", "text": "@joemsak stay polite please ;). And Yes WOW to express how surprise I was, did not bring much in the conversation, re-mentioning it felt useless to me (don't feed the trolls). Instead of trolling feel free to leave constructive comment and show that you're a grown man.\n\nTo come back to what Rafael said, in my humble opinion having bug is one things, not documenting and letting them hide into the code is another one. \n", "created_at": "2015-07-28 22:55:58", "user": 1489947, "id": 125776348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125776750", "text": "You've made an excellent point about leaving constructive comments.\n", "created_at": "2015-07-28 22:58:40", "user": 98936, "id": 125776750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125777001", "text": "If we document a bug it is not a bug anymore but a feature :smile:. Like I said this bug will die, when we think it is time.\n", "created_at": "2015-07-28 23:00:22", "user": 47848, "id": 125777001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125778016", "text": "😂😂 That's an extreme way of seeing things but why not...\n", "created_at": "2015-07-28 23:07:34", "user": 1489947, "id": 125778016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125784812", "text": "Please leave these wonderful people alone. Myself and many others appreciate their work.\n", "created_at": "2015-07-28 23:56:26", "user": 430277, "id": 125784812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125791951", "text": "Seriously, this guy has become a troll himself. The issue will be fixed when it's fixed. The Rails core team along with the entire community is constantly working on both features and bugs which amazes me.  Personally, I'm grateful for all of their hard work and sacrifice for the betterment of the framework. \n\nIf people want to bitch and whine about a long standing \"bug\" then perhaps they should quit the rant, write some code, and create a PR.  Last time I checked the core team and contributors are not on some corporate payroll and are not obligated to do anything. They do it for the love of the framework and the community which I think is fabulous. \n\nHopefully this thread dies, it's getting way out of hand. \n\nMyself and thousands others appreciate all you guys do!  \n", "created_at": "2015-07-29 00:42:16", "user": 13086902, "id": 125791951}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125800377", "text": "Certainly, this is just one of many issues with AR (the other one which comes to mind being rails/rails#9813 which can be \"solved\" by upgrading, which is not always a practical solution)\n\nI don't even recall the reason why I subscribed to this, but over time I learnt to be more defensive against the very framework itself (especially functionality that is obscure or only used by a minority). \n", "created_at": "2015-07-29 01:38:12", "user": 671970, "id": 125800377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/125801828", "text": "@rafaelfranca good to hear. Doesn't worry me too much since I just found it when playing with pre release stuff.\n\n@prusswan if ever I'm like \"I wonder what happens when I...\" and I think the behaviour is a bit edge case-y I'll just write a test around the \"broader\" task I'm trying to accomplish. Caught a few bugs in similar cases where I've been relying upon edge cases which have changed during an upgrade.\n", "created_at": "2015-07-29 01:42:33", "user": 2103728, "id": 125801828}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/178286933", "text": "@sgrif based on your comment in https://github.com/rails/rails/issues/23286#issuecomment-178274217 should this issue also be closed since its currently targeting 5.0?\n", "created_at": "2016-02-02 00:57:47", "user": 2103728, "id": 178286933}], "assignees": [47848, 47848], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Currently the ActiveModel::SecurePassword module force to create a requires you to have a password_digest attribute. This patch provide the option to switch the attribute name\n\n``` ruby\nclass Visitor\n  extend ActiveModel::Callbacks\n  include ActiveModel::Validations\n  include ActiveModel::SecurePassword\n\n  define_model_callbacks :create\n\n  has_secure_password(validations: false, column_name: :password)\n\n  attr_accessor :password, :password_confirmation\nend\n```\n", "labels": [], "number": 9895, "updated_at": "2014-07-04 15:45:08", "user": 505427, "closed_at": "2013-03-24 14:51:05", "id": 12368677, "title": "Change default SecurePassword column name", "url": "https://api.github.com/repos/rails/rails/issues/9895", "created_at": "2013-03-24 02:35:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15351290", "text": "Thanks for the patch 1.01 million\n", "created_at": "2013-03-24 04:24:46", "user": 3948113, "id": 15351290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15353197", "text": "This has already been suggested and rejected multiple times by the core team #1440 #1694 #6684 \nBasically, the response is that if you want something more custom than has_secure_password, there are lots of other auth options out there.\n", "created_at": "2013-03-24 08:35:29", "user": 167215, "id": 15353197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15360125", "text": "Yes, thanks for digging those up, @bradleypriest \n", "created_at": "2013-03-24 14:51:05", "user": 27786, "id": 15360125}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm not sure if this issue belongs in activerecord or in activerecord-jdbc-adapter, so apologies if I'm in the wrong repo.\n\nI'm working with Postgres JDBC adapter and I need to pass driver specific properties to the JDBC driver.\n\nI can do this fine in development using a database.yml that looks similar to this:\n\n``` ruby\ndevelopment:\n  adapter: postgresql\n  ...\n  properties:\n    name: value\n```\n\nAll is good and the name=value pair ends up in the connection's nested :properties hash.\n\nHowever in production where I use the DATABASE_URL environment variable instead of database.yml, I can't figure out how to get the nested properties to the JDBC driver.  I've tried several permutations and combinations in the uri query parameters such as\n\n``` ruby\n&name=value\n&properties[name]=value\n&properties/name=value\n&properties%name%5D=value\n```\n\nIn all cases the name=value properties do not end up in the connection's nested :properties hash as they do when using database.yml.\n", "labels": ["activerecord", "attached PR", "stale"], "number": 9896, "updated_at": "2014-05-20 19:18:50", "user": 651620, "closed_at": "2014-05-20 19:18:50", "id": 12368858, "title": "Passing JDBC driver properties from DATABASE_URL", "url": "https://api.github.com/repos/rails/rails/issues/9896", "created_at": "2013-03-24 02:57:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15391284", "text": "Hi @marclennox :)\nHow about 0ec6bc58d3d2149ac296496a04d7ceafe23f6067 ?\n\nMaybe, it works fine. But this commit has one problem - activerecord has dependency to rack. \n", "created_at": "2013-03-25 12:50:24", "user": 13426, "id": 15391284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15394223", "text": "That looks like it will do the trick for sure!\nOn Mar 25, 2013 8:51 AM, \"Toshinori Kajihara\" notifications@github.com\nwrote:\n\n> Hi @marclennox https://github.com/marclennox :)\n> How about 0ec6bc5https://github.com/rails/rails/commit/0ec6bc58d3d2149ac296496a04d7ceafe23f6067?\n> \n> Maybe, it works fine. But this commit has one problem - activerecord has\n> dependency to rack.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9896#issuecomment-15391284\n> .\n", "created_at": "2013-03-25 13:55:09", "user": 651620, "id": 15394223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15401596", "text": "Thank you for quick response.\n\nI changed the above commit because I think AR shouldn't depend on `rack`.\nI'll submit PR.\n", "created_at": "2013-03-25 15:53:33", "user": 13426, "id": 15401596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41925346", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-1-stable`, `4-0-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2014-05-01 16:15:38", "user": 47848, "id": 41925346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/43670793", "text": "This is fixed now with Rails 4.1. People can define these properties at the production section of database.yml and use DATABASE_URL only to set the connection credentials. Closing.\n", "created_at": "2014-05-20 19:18:50", "user": 47848, "id": 43670793}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9897, "updated_at": "2014-06-26 19:57:57", "user": 505427, "closed_at": "2013-03-24 03:35:59", "id": 12369103, "title": "Ignore pkg folders", "url": "https://api.github.com/repos/rails/rails/issues/9897", "created_at": "2013-03-24 03:32:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The detail_args_for method, without this fix, results in a NoMethodError there are no options being passed into it as it tries to execute the empty? method on a nil object.\n\nThe exact error that I used to get was the following...\n\nCompleted 500 Internal Server Error in 17ms\nNoMethodError (undefined method empty?' for nil:NilClass):\nactionpack (3.2.13) lib/action_view/lookup_context.rb:145:indetail_args_for'\nactionpack (3.2.13) lib/action_view/lookup_context.rb:139:in args_for_lookup'\nactionpack (3.2.13) lib/action_view/lookup_context.rb:109:infind'\nactionpack (3.2.13) lib/action_view/renderer/abstract_renderer.rb:3:in find_template'\nactionpack (3.2.13) lib/action_view/renderer/template_renderer.rb:34:indetermine_template'\n...\n", "labels": ["actionview", "needs feedback", "onhold"], "number": 9898, "updated_at": "2014-06-12 21:15:32", "user": 1389310, "closed_at": "2013-03-28 13:58:27", "id": 12369618, "title": "Fixes action_view issue where pages do not render due to NoMethodError", "url": "https://api.github.com/repos/rails/rails/issues/9898", "created_at": "2013-03-24 04:52:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15368210", "text": "Looks good. Could you add a test case for this error that demonstrates that it's fixed? Thanks!\n", "created_at": "2013-03-24 20:14:40", "user": 199, "id": 15368210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15441508", "text": "Yes, I can.\nCould you give me a hint as to where to which file should I add this test, or does it not really matter as long as it is in a reasonable location.\nI want to make sure that I am following the rails best practices.\nThanks\n", "created_at": "2013-03-26 05:15:11", "user": 1389310, "id": 15441508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15524893", "text": "I added the test for this fix. Let me know anything else is needed to accept the pull request\n", "created_at": "2013-03-27 14:04:12", "user": 1389310, "id": 15524893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15525177", "text": "@egjiri the test looks good but since you are using `send` I didn't undertand how this argument can be `nil` in a normal workflow.\n\nMaybe, to make easier to write a test can you tell what are the reproduction steps for this issue?\n", "created_at": "2013-03-27 14:08:46", "user": 47848, "id": 15525177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15526247", "text": "I am not too sure why options would even be nil...\n\nThis started happening when I switched to ruby 2.0.0 in the Gemfile and since then every page I try to open results in a 500 error (see above erro message).\nSwitching back to ruby 1.9.3 which I had before results in no problems and I am able to run my site without problems.\n\nI am sure why upgrading ruby would result in this issue but I decided to just make that detail_args_for method a little more robust in case this happens.\n", "created_at": "2013-03-27 14:27:08", "user": 1389310, "id": 15526247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15532200", "text": "I think is not a good idea to be defensive like this. We really don't need to change the code to check if one argument is a unexpected value.\n\nI think is better to try to reproduce in a new application and fix the real cause of this issue.\n", "created_at": "2013-03-27 15:58:39", "user": 47848, "id": 15532200}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15667926", "text": "@egjiri I think I found the root cause of your issue. Do you have the `new_relic` gem installed? See https://github.com/rails/rails/issues/8885#issuecomment-14039547\n", "created_at": "2013-03-30 01:57:42", "user": 47848, "id": 15667926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15667988", "text": "Yes, I had new_relic gem version 3.5.5.38.\nA couple hours ago I updated my gems and I was able to run my app in ruby v2 without this error\n", "created_at": "2013-03-30 02:02:40", "user": 1389310, "id": 15667988}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15668010", "text": "It looks like an older version of new_relic was the issue all along\n", "created_at": "2013-03-30 02:03:57", "user": 1389310, "id": 15668010}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "df36c5f - Fix assert_template assertion with :layout option\n4bd05a7 - Fix assert_template :layout => nil assertion\n0d19a08 - Improve assert_template layout checking\n", "labels": [], "number": 9899, "updated_at": "2014-07-03 07:03:01", "user": 17553, "closed_at": "2013-03-24 20:19:20", "id": 12372760, "title": "Backport #5808", "url": "https://api.github.com/repos/rails/rails/issues/9899", "created_at": "2013-03-24 12:27:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15360362", "text": "It needs a changelog entry explaining the improvements on assert_template. Thanks.\n", "created_at": "2013-03-24 15:05:08", "user": 26328, "id": 15360362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15361773", "text": "@carlosantoniodasilva This is nearly verbatim from #5808, which doesn't include a changelog entry because it's nearly all bugfix. The possible exception is allowing the expected layout to be a symbol.\n", "created_at": "2013-03-24 16:16:50", "user": 17553, "id": 15361773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15370786", "text": "@jeremy Thanks!\n", "created_at": "2013-03-24 22:22:52", "user": 17553, "id": 15370786}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "What is the reason to have two different but almost identically behaved `url_for`s?  There is one in `ActionView::Helpers::UrlHelper`, which is used in the views, and there is another in `ActionDispatch::Routing::UrlFor`.\n\nI wanted my models to know the resource URLs.  If i have understood correctly, it can be done by including `Rails.application.routes.url_helpers` into a model, which makes available the `url_for` from `ActionDispatch::Routing::UrlFor`.  However, this `url_for` does not understand nested resources.  In my `routes.rb`, i have:\n\n``` ruby\nresources :memberships do\n  resources :ticket_books  \nend\n```\n\nThe following works in a view context, using `url_for` from `ActionView::Helpers::UrlHelper`:\n\n``` ruby\n>> url_for :controller=>\"ticket_books\", :action=>\"show\", :id=>1\n=> \"/memberships/6/ticket_books/1\"\n```\n\nBut this fails in my model (after including `Rails.application.routes.url_helpers`):\n\n``` ruby\n>> url_for :controller=>\"ticket_books\", :action=>\"show\", :id=>1, :only_path => true\n!! #<ActionController::RoutingError: No route matches {:controller=>\"ticket_books\", :action=>\"show\", :id=>1}>\n```\n\nThis is with rails 3.2.12.\n", "labels": [], "number": 9900, "updated_at": "2013-03-24 20:53:39", "user": 712698, "closed_at": "2013-03-24 13:27:37", "id": 12373804, "title": "`url_for` from `ActionDispatch::Routing::UrlFor` does not understand nested resources", "url": "https://api.github.com/repos/rails/rails/issues/9900", "created_at": "2013-03-24 13:18:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15358890", "text": "Excuse me, i was stupid: in a model i need to supply also the `:membership_id` key, but in a view it is apparently automatically taken from `params`.\n", "created_at": "2013-03-24 13:27:37", "user": 712698, "id": 15358890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15368096", "text": "@alexeymuranov perhaps you can emulate that by providing `default_url_options` in your model\n", "created_at": "2013-03-24 20:09:41", "user": 199, "id": 15368096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15369000", "text": "I didn't know about `default_url_options`, i will look at it, thanks.\n", "created_at": "2013-03-24 20:53:39", "user": 712698, "id": 15369000}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix some typos\n", "labels": [], "number": 9901, "updated_at": "2016-02-22 14:26:22", "user": 567626, "closed_at": "2013-03-24 13:52:57", "id": 12373990, "title": "Fix some typos", "url": "https://api.github.com/repos/rails/rails/issues/9901", "created_at": "2013-03-24 13:37:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The Versions modules looks different with #8501\n", "labels": [], "number": 9902, "updated_at": "2014-06-26 19:58:01", "user": 505427, "closed_at": "2013-03-24 16:26:56", "id": 12374076, "title": "Fix update_version_rb task", "url": "https://api.github.com/repos/rails/rails/issues/9902", "created_at": "2013-03-24 13:45:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15360429", "text": "This looks a lot better, did you tested it? :smile: \n", "created_at": "2013-03-24 15:09:29", "user": 160941, "id": 15360429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15360479", "text": "@guilleiguaran  yes, I did\n", "created_at": "2013-03-24 15:12:36", "user": 505427, "id": 15360479}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The edge guides still says that you can do where.like and where.not_like, but it seems like these were pulled out.\n", "labels": ["docs"], "number": 9903, "updated_at": "2013-03-24 17:56:10", "user": 57162, "closed_at": "2013-03-24 17:56:10", "id": 12377661, "title": "Documentation says where.like is possible", "url": "https://api.github.com/repos/rails/rails/issues/9903", "created_at": "2013-03-24 17:42:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15364797", "text": "This was already changed in https://github.com/lifo/docrails/commit/5dfaf8b and will be merged back soon. Thanks for reporting.\n", "created_at": "2013-03-24 17:56:10", "user": 5402, "id": 15364797}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "completes https://github.com/rails/rails/commit/6f3f0f86332004fcee5c2f05d52bbff08c22f980\n", "labels": [], "number": 9904, "updated_at": "2014-06-26 17:13:10", "user": 4815, "closed_at": "2013-03-24 18:48:47", "id": 12378422, "title": "Use jquery-rails from github", "url": "https://api.github.com/repos/rails/rails/issues/9904", "created_at": "2013-03-24 18:40:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updated to reflect current API; specifically the removal of the serializer accessor in 41fea0334232824d5d509a6924e8c8487d53494b.\n", "labels": [], "number": 9905, "updated_at": "2014-06-26 19:58:05", "user": 110777, "closed_at": "2013-03-24 18:53:35", "id": 12378553, "title": "ActiveSupport::MessageVerifier doc update", "url": "https://api.github.com/repos/rails/rails/issues/9905", "created_at": "2013-03-24 18:49:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Recusion in PredicateBuilder.build_from_hash() so that passing a nested\nhash of conditions to .where will build a valid SQL query.\nThis allows queries like these:\n\n  Post.joins(author: :organization).\n    where(authors: { organizations: { name: 'Acme' } } )\n\nThis would fix issue #9511\nhttps://github.com/rails/rails/issues/9511\n\nPreviously, that same query's WHERE clause would read:\n\n\"... WHERE \"authors\".\"organizations\" ...\n\nwhich would break because the 'authors' table doesn't have an 'organizations' column. This change will instantiate an Arel::Table for 'organizations', and the query will be built correctly.\n", "labels": ["activerecord"], "number": 9906, "updated_at": "2014-07-03 15:12:07", "user": 815279, "closed_at": "2013-04-05 09:12:38", "id": 12378912, "title": "Fix bug with nested conditions passed to .where()", "url": "https://api.github.com/repos/rails/rails/issues/9906", "created_at": "2013-03-24 19:11:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15366450", "text": "I believe such query should be build as:\n\n``` ruby\nPost.joins(author: :organization).where(organizations: { name: 'Acme' })\n```\n\nSo that you don't need to use `authors` to get through the `organizations` table in the where. I think that's been done like that on purpose. /cc @jonleighton \n", "created_at": "2013-03-24 19:19:28", "user": 26328, "id": 15366450}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15416492", "text": "Looking around a bit, it seems this has been reported a few times previously, and is causing problems for people who expect the nested syntax to work: https://github.com/rails/rails/issues/6718 as an example. The popular library CanCan generates nested conditions, so I imagine there are quite a few apps out there that would rely on this being supported, especially considering it used to work. Although I've been able to find a few mentions of this issue, I haven't found an explanation as to why the behavior was changed. Is there a reason not to support both authors: {organizations: {name: 'Acme'}} AND organizations: {name: 'Acme'}?\n\nOther issues I've found relating to this:\nhttps://github.com/ryanb/cancan/issues/646\nhttps://github.com/ryanb/cancan/issues/830\nhttps://github.com/rails/rails/issues/9511\nhttps://github.com/rails/rails/issues/6718 (mentioned above)\n\nCheers!\n", "created_at": "2013-03-25 19:18:34", "user": 815279, "id": 15416492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15945695", "text": "This was changed to fix a security issue, therefore it won't be changed back.\n\nSee https://groups.google.com/forum/?hl=en&fromgroups=#!topic/rubyonrails-security/l4L0TEVAz1k for more details.\n", "created_at": "2013-04-05 09:12:38", "user": 1979, "id": 15945695}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails 4, mysql2 gem (This problem not exists in rails 3.2)\n\nIf we run\n\nActiveRecord::Base.connection.execute(\"LONG RUNNING SQL\") \n\nWe will get \n\nMysql2::Error: Lost connection to MySQL server during query: ...\n\nIt occurs in migrations mostly when we are alerting big tables.  \n\nI make some investigation and I think the problem is in class Reaper\nactiverecord/lib/active_record/connection_adapters/abstract/connection_pool.rb). \nMethod remove is called (by reap method) during query and we exception (Mysql2::Error: Lost connection to MySQL server during query)\n\nIf we add one of this options: \n\n  dead_connection_timeout: 10000000\n  reaping_frequency: 10000000\n\nto database.yml it will solve problem but rails then will be not able to reconnect to database after connection lost. \n", "labels": [], "number": 9907, "updated_at": "2014-03-15 12:58:43", "user": 4486, "closed_at": "2013-03-24 20:07:00", "id": 12379180, "title": "Rails 4 - Long running sql queries are killed", "url": "https://api.github.com/repos/rails/rails/issues/9907", "created_at": "2013-03-24 19:31:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15368028", "text": "Yep! This was recently reverted @ 7150a9dc036ca02e8293d31ac57a26c55860fff7\n", "created_at": "2013-03-24 20:07:00", "user": 199, "id": 15368028}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Seems to be a problem bundling current rail master (7a32c6300c2b11dc1660338535c653a0132df196)\n\nworkaround is removing the arel requirement from Gemfile\n\nseems this is because rails gemspec specified arel and master of arel are incompatible version:\n\n```\nBundler could not find compatible versions for gem \"arel\":\n  In Gemfile:\n    rails (>= 0) ruby depends on\n      arel (~> 3.0.2) ruby\n\n    arel (4.0.0.beta2.20130314230643)\n```\n\nhttps://github.com/carlhuda/bundler/issues/2419\n", "labels": [], "number": 9908, "updated_at": "2014-07-04 15:44:59", "user": 10033, "closed_at": "2013-03-25 18:16:29", "id": 12381256, "title": "unable to bundle HEAD rails master", "url": "https://api.github.com/repos/rails/rails/issues/9908", "created_at": "2013-03-24 21:39:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15410915", "text": "This is not the current rails master. See https://github.com/rails/rails/blob/master/activerecord/activerecord.gemspec#L27\n", "created_at": "2013-03-25 18:16:29", "user": 47848, "id": 15410915}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Re: #9740\n\nThis pull request introduces a new `UpgradeLegacySignedCookieJar` that is automatically used instead of `SignedCookieJar` when both `secret_token` and `secret_key_base` are present.\n\nCurrently, signed cookies generated by a Rails 3.x app will be invalidated by setting `secret_key_base`. This new cookie jar avoids this issue by transparently upgrading legacy signed cookies much like the `UpgradeSignatureToEncryptionCookieStore` does for legacy cookie-based sessions.\n\nI noticed this issue when upgrading Basecamp to Rails 4 and I've avoided setting `secret_key_base` pending a fix for this issue. \n\n@neerajdotname kicked things off and @jeremy provided some guidance along the way. Thank you!\n\n@spastorino asked to be notified when this pull request is ready, so here we go! \n\nThis PR also introduces a `ChainedCookieJars` module in response to this commit 2b773e148b56e0cff3b07ef1902311688fb9fed8. @jeremy suggested this would be an improvement in that is eliminates some duplication, and I agree. This ensures that chained cookie jars will always be initialized using the correct options. \n\n@jeremy and I also discussed and agreed that it makes sense to remove the `method_missing` calls introduced in that same commit as the methods have not been deprecated, but rather have simply been removed. I think the `method_missing` calls added unnecessary confusion -- better to just raise an exception which should be self-explanitory.  \n## \n\nOn a somewhat separate note, @spastorino, I'd like us to consider tweaking the way that the session-based cookie upgrade process works. I'm thinking we could allow the user to leave their app configured to use `session_store :cookie_store` instead of asking them to change to `session_store :upgrade_signature_to_encryption_cookie_store`.\n\nI think we can assume that the user wants to avoid invalidating legacy cookies when upgrading. We can tell if someone is upgrading by the presence of the legacy `secret_token` . So, much like this PR does, perhaps we could detect this state and switch to using the new `upgrade_signature_to_encryption_cookie_store` automatically? \n\nLet me know what you think about this PR and about this possible additional improvement to the cookie-based session upgrade process. I'm happy to work up a PR for that separately, but I thought it would be smart to bring it up now. \n", "labels": [], "number": 9909, "updated_at": "2014-06-17 03:55:49", "user": 402, "closed_at": "2013-03-25 05:57:24", "id": 12381564, "title": "Transparently upgrade signed cookies when setting secret_key_base", "url": "https://api.github.com/repos/rails/rails/issues/9909", "created_at": "2013-03-24 22:01:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15371201", "text": "@trevorturk +1 to the idea of automatically upgrading user's session data without asking them to use `session_store :upgrade_signature_to_encryption_cookie_store` .\n", "created_at": "2013-03-24 22:42:11", "user": 6399, "id": 15371201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15371720", "text": "Great! Nice refactoring, test coverage, and guide updates :heart:\n\nI'm a little concerned that removing `method_missing` didn't break any tests, but that is unrelated.\n\nCould you rebase master and squash for merge?\n", "created_at": "2013-03-24 23:11:36", "user": 199, "id": 15371720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15371741", "text": "Also a fan of having the default :cookie_store handle session upgrade to the latest & greatest :grin:\n", "created_at": "2013-03-24 23:12:36", "user": 199, "id": 15371741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15371949", "text": "Thanks for the review, guys!\n\nI rebased and squashed down to one commit -- should be good to merge.\n\nI'll work up a new pull request about the :cookie_store thing if that's ok with you, @spastorino?\n", "created_at": "2013-03-24 23:23:55", "user": 402, "id": 15371949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15438228", "text": "Great work @trevorturk and yes please do provide a PR for the cookie_store thing\n", "created_at": "2013-03-26 02:54:34", "user": 52642, "id": 15438228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15439244", "text": "Thanks, @spastorino! I started looking at the cookie_store thing today. I'll work something up in the next few days and /cc you. \n", "created_at": "2013-03-26 03:36:13", "user": 402, "id": 15439244}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I heard that the use of Marshall was one of the things you didn't like about Rails 4 Queue implementation as it was.\n\nSo I took a stab at changing to JSON.  Get's kinda tricky...\n\nWhat do you think?\n", "labels": [], "number": 9910, "updated_at": "2014-06-15 21:30:22", "user": 10033, "closed_at": "2013-03-25 06:02:31", "id": 12384225, "title": "Replace marshalling with JSON and payloadizers", "url": "https://api.github.com/repos/rails/rails/issues/9910", "created_at": "2013-03-25 01:29:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15378996", "text": "Hey @jacobo - thanks for digging in! The concern isn't with using the `Marshal` format, but with marshal_ing_ the entire job object. Switching formats won't address this :)\n", "created_at": "2013-03-25 06:02:31", "user": 199, "id": 15378996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15410193", "text": "Thanks for the feedback @jeremy I hope you don't mind that I keep trying :wink: https://github.com/rails/rails/pull/9924\n", "created_at": "2013-03-25 18:04:38", "user": 10033, "id": 15410193}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since Rails 3.1, partial template resolver searches also for `app/views/application` directory and it's been the Way, I think.\n\nSo I changed as below:\n- The guide explains the resolving order\n- `app/views/application` will be generated by `rails new` command\n", "labels": ["docs", "railties"], "number": 9911, "updated_at": "2014-06-12 07:12:07", "user": 3458, "closed_at": "2013-03-26 14:46:19", "id": 12384897, "title": "Fix guide and add `app/views/application`into default directory structure along with the current partial template resolving order", "url": "https://api.github.com/repos/rails/rails/issues/9911", "created_at": "2013-03-25 02:18:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15399907", "text": "/cc @josevalim @fxn\n", "created_at": "2013-03-25 15:28:42", "user": 27786, "id": 15399907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15410539", "text": "Could you point where in the code your found this information? I searched and didn't find.\n", "created_at": "2013-03-25 18:10:20", "user": 47848, "id": 15410539}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15435416", "text": "I got to know about it from [Railscasts #269](http://railscasts.com/episodes/269-template-inheritance?view=asciicast). The partial template path to be resolved is set [at this method](https://github.com/rails/rails/blob/master/actionpack/lib/abstract_controller/view_paths.rb#L33).\n\nPrecisely saying, the view path prefixes are pushed tracing up controllers' inheritance tree.\n", "created_at": "2013-03-26 01:06:22", "user": 3458, "id": 15435416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15459703", "text": "So this patch is twofold: document that due to template inheritance the `application` directory is checked if exists, and implicitly push for this idiom as blessed way to share partials.\n\nIn principle I like the proposal, but since we are touching the generated skeleton and blessed way to organise these kind partials, I'd like also to know what @dhh thinks.\n", "created_at": "2013-03-26 14:02:10", "user": 3387, "id": 15459703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15461938", "text": "I don't recall why we're checking the application directory if it exists, but I can't think of a good reason to do it now. It's just going to turn into a junk drawer. I'd rather remove this check in some version. Definitely not in favor of adding app/views/application to the skeleton by default.\n", "created_at": "2013-03-26 14:39:29", "user": 2741, "id": 15461938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15462128", "text": "Ah, I see. It's a side-effect from this reasonable case: EmployeesController < PeopleController, which will look first for employees/show, then fall back to look for people/show. It was never intended to fall all the way back to look for application/show. That's an unintended side-effect.\n", "created_at": "2013-03-26 14:42:58", "user": 2741, "id": 15462128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15462184", "text": "Yes, I thought the same\n", "created_at": "2013-03-26 14:43:54", "user": 47848, "id": 15462184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15462258", "text": "Now that we've confirmed what @dhh thinks about the issue, I agree with him; it should be removed later.\n", "created_at": "2013-03-26 14:45:15", "user": 3458, "id": 15462258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15462313", "text": "Excellent!\n", "created_at": "2013-03-26 14:46:05", "user": 3387, "id": 15462313}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Newer version contains some generator bugfixes\n", "labels": [], "number": 9912, "updated_at": "2014-06-26 15:28:02", "user": 129043, "closed_at": "2013-03-25 05:24:47", "id": 12387514, "title": "Relaxed jbuilder dependency and bumped version number", "url": "https://api.github.com/repos/rails/rails/issues/9912", "created_at": "2013-03-25 05:16:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have this in my routes.rb:\n\n``` ruby\nnamespace :office, :path => 'office(/:company_id)' do\n...\n  namespace :proposals do\n    ...\n    put 'bulk/activate', 'bulk/inactivate', 'bulk/trash', 'bulk/hide', 'bulk/mark_as_well', 'bulk/mark_as_not_well', 'bulk/update_brand', 'bulk/update_category',\n  end\nend\n```\n\nIn 3.2.12 it generates the following routes:\n\n``` bash\noffice_proposals_bulk_activate PUT      /office(/:company_id)/proposals/bulk/activate(.:format)                     office/proposals/bulk#activate\n                        office_proposals_bulk_inactivate PUT      /office(/:company_id)/proposals/bulk/inactivate(.:format)                   office/proposals/bulk#inactivate\n                             office_proposals_bulk_trash PUT      /office(/:company_id)/proposals/bulk/trash(.:format)                        office/proposals/bulk#trash\n                              office_proposals_bulk_hide PUT      /office(/:company_id)/proposals/bulk/hide(.:format)                         office/proposals/bulk#hide\n                      office_proposals_bulk_mark_as_well PUT      /office(/:company_id)/proposals/bulk/mark_as_well(.:format)                 office/proposals/bulk#mark_as_well\n                  office_proposals_bulk_mark_as_not_well PUT      /office(/:company_id)/proposals/bulk/mark_as_not_well(.:format)             office/proposals/bulk#mark_as_not_well\n                      office_proposals_bulk_update_brand PUT      /office(/:company_id)/proposals/bulk/update_brand(.:format)                 office/proposals/bulk#update_brand\n                   office_proposals_bulk_update_category PUT      /office(/:company_id)/proposals/bulk/update_category(.:format)              office/proposals/bulk#update_category\n                      office_proposals_bulk_update_group PUT      /office(/:company_id)/proposals/bulk/update_group(.:format)                 office/proposals/bulk#update_group\n                  office_proposals_bulk_update_condition PUT      /office(/:company_id)/proposals/bulk/update_condition(.:format)             office/proposals/bulk#update_condition\n         office_proposals_bulk_update_year_of_production PUT      /office(/:company_id)/proposals/bulk/update_year_of_production(.:format)    office/proposals/bulk#update_year_of_production\n      office_proposals_bulk_update_country_of_production PUT      /office(/:company_id)/proposals/bulk/update_country_of_production(.:format) office/proposals/bulk#update_country_of_production\n              office_proposals_bulk_update_payment_modes PUT      /office(/:company_id)/proposals/bulk/update_payment_modes(.:format)         office/proposals/bulk#update_payment_modes\n            office_proposals_bulk_update_payment_methods PUT      /office(/:company_id)/proposals/bulk/update_payment_methods(.:format)       office/proposals/bulk#update_payment_methods\n           office_proposals_bulk_update_delivery_methods PUT      /office(/:company_id)/proposals/bulk/update_delivery_methods(.:format)      office/proposals/bulk#update_delivery_methods\n```\n\nbut in 3.2.13 all routes are mapped to `activate` action:\n\n``` bash\noffice_proposals_bulk_activate PUT      /office(/:company_id)/proposals/bulk/activate(.:format)                     office/proposals/bulk#activate\n                        office_proposals_bulk_inactivate PUT      /office(/:company_id)/proposals/bulk/inactivate(.:format)                   office/proposals/bulk#activate\n                             office_proposals_bulk_trash PUT      /office(/:company_id)/proposals/bulk/trash(.:format)                        office/proposals/bulk#activate\n                              office_proposals_bulk_hide PUT      /office(/:company_id)/proposals/bulk/hide(.:format)                         office/proposals/bulk#activate\n                      office_proposals_bulk_mark_as_well PUT      /office(/:company_id)/proposals/bulk/mark_as_well(.:format)                 office/proposals/bulk#activate\n                  office_proposals_bulk_mark_as_not_well PUT      /office(/:company_id)/proposals/bulk/mark_as_not_well(.:format)             office/proposals/bulk#activate\n                      office_proposals_bulk_update_brand PUT      /office(/:company_id)/proposals/bulk/update_brand(.:format)                 office/proposals/bulk#activate\n                   office_proposals_bulk_update_category PUT      /office(/:company_id)/proposals/bulk/update_category(.:format)              office/proposals/bulk#activate\n                      office_proposals_bulk_update_group PUT      /office(/:company_id)/proposals/bulk/update_group(.:format)                 office/proposals/bulk#activate\n                  office_proposals_bulk_update_condition PUT      /office(/:company_id)/proposals/bulk/update_condition(.:format)             office/proposals/bulk#activate\n         office_proposals_bulk_update_year_of_production PUT      /office(/:company_id)/proposals/bulk/update_year_of_production(.:format)    office/proposals/bulk#activate\n      office_proposals_bulk_update_country_of_production PUT      /office(/:company_id)/proposals/bulk/update_country_of_production(.:format) office/proposals/bulk#activate\n              office_proposals_bulk_update_payment_modes PUT      /office(/:company_id)/proposals/bulk/update_payment_modes(.:format)         office/proposals/bulk#activate\n            office_proposals_bulk_update_payment_methods PUT      /office(/:company_id)/proposals/bulk/update_payment_methods(.:format)       office/proposals/bulk#activate\n           office_proposals_bulk_update_delivery_methods PUT      /office(/:company_id)/proposals/bulk/update_delivery_methods(.:format)      office/proposals/bulk#activate\n```\n", "labels": ["actionpack", "regression"], "number": 9913, "updated_at": "2013-04-03 13:48:08", "user": 100725, "closed_at": "2013-04-03 13:48:08", "id": 12389292, "title": "Incorrect routing in 3.2.13", "url": "https://api.github.com/repos/rails/rails/issues/9913", "created_at": "2013-03-25 07:11:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15381533", "text": "Confirmed! There are two bugs hidden related to passing multiple paths to `get`, `post`, etc...\n\nI'm looking into it and report back when I got a patch.\n\n/cc @pixeltrix \n", "created_at": "2013-03-25 08:09:13", "user": 5402, "id": 15381533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15408346", "text": "In you app Rails version is locked to 3.2.12 (which should work correctly).\nPlease make sure that you are using rails-3.2.13!\n", "created_at": "2013-03-25 17:36:25", "user": 100725, "id": 15408346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15410043", "text": "Cheers!\n", "created_at": "2013-03-25 18:02:18", "user": 653147, "id": 15410043}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using UsersController instead of UserController and users_controller instead of user_controller\n", "labels": [], "number": 9914, "updated_at": "2014-06-26 19:58:19", "user": 621238, "closed_at": "2013-03-25 09:24:13", "id": 12391779, "title": "Controller name pluralized", "url": "https://api.github.com/repos/rails/rails/issues/9914", "created_at": "2013-03-25 09:12:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "AR::Base#update_all does not apply limit without an order option.\n\n**This affects only Rails 3.0 family**\n\nGiven updated test case would update all rows instead of one.\n\n```\ndef test_update_all_with_order_and_limit\n  assert_equal 1, Topic.update_all(\"content = 'bulk updated!'\", nil, :limit => 1)\nend\n```\n\nThe reason lays in [update_all](https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/relation.rb#L164) method. \nThis method uses recursion and removes `:limit` and `:order` if one of them is set and the other is not set.\n\nI'm not certain about the reasons it do so.\nI see two ways to handle this problem:\n- Remove constraint for both options(since i'm unaware of it's intention, I can't make a pull request)\n- Make this a \"feature\" and add this side effect to documentation\n\nPlease advise.\n", "labels": ["activerecord"], "number": 9915, "updated_at": "2013-04-05 10:30:53", "user": 134304, "closed_at": "2013-04-05 10:30:53", "id": 12396481, "title": "AR::Base#update_all does not apply limit without an order option", "url": "https://api.github.com/repos/rails/rails/issues/9915", "created_at": "2013-03-25 11:47:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15947502", "text": "This definitely feels weird.\n\n/cc @jonleighton @tenderlove \n", "created_at": "2013-04-05 09:56:55", "user": 5402, "id": 15947502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15948301", "text": "I dont't know where 3-2 label came form, but it's not accurate. It works fine starting from 3.1, since `update_all` has been refactored.\n", "created_at": "2013-04-05 10:16:21", "user": 134304, "id": 15948301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15948798", "text": "Ahh I see. We no longer fix bugs in Rails `3.0.x` You can find a [writeup of our maintenance policy](http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/) over on the Ruby on Rails blog. If you want to benefit from bug-fixes please consider to upgrade to `3.2.x`.\n\nAs this is fixed in `3.2.x` and `master` I'm closing the issue.\n\nThanks for reporting.\n", "created_at": "2013-04-05 10:30:52", "user": 5402, "id": 15948798}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9916, "updated_at": "2014-06-26 19:58:20", "user": 6399, "closed_at": "2013-03-25 15:13:59", "id": 12400323, "title": "nil is retuned if cookie is tampered with [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9916", "created_at": "2013-03-25 13:42:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15398070", "text": "@neerajdotname could you improve your commit message? I think it is missing something\n", "created_at": "2013-03-25 15:00:14", "user": 47848, "id": 15398070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15398641", "text": "@rafaelfranca How does this look ? \n\nhttps://github.com/neerajdotname/rails/commit/d36cfa2231dba9ebf3bc6900b136b205c4b51af1\n", "created_at": "2013-03-25 15:08:44", "user": 6399, "id": 15398641}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I implemented a separate validator to ensure that records, which are marked for destruction do not count when validating the length.\n\nI also noticed that AR already had specific length tests, which I moved into a separate test-case.\n\nCloses #7247.\n", "labels": ["activerecord"], "number": 9917, "updated_at": "2014-12-30 09:27:30", "user": 5402, "closed_at": "2014-12-30 09:27:30", "id": 12404448, "title": "specific length validator for ActiveRecord to respect `mark_for_destruction`.", "url": "https://api.github.com/repos/rails/rails/issues/9917", "created_at": "2013-03-25 15:14:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15399086", "text": "@rafaelfranca can you take a look?\n", "created_at": "2013-03-25 15:15:47", "user": 5402, "id": 15399086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68313163", "text": "@senny seems good to me :shipit: \n", "created_at": "2014-12-29 23:01:15", "user": 47848, "id": 68313163}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/68341535", "text": "Committed with https://github.com/rails/rails/commit/2b12288139f9bad6cf6d058d93af66cdf598dda9\n", "created_at": "2014-12-30 09:27:30", "user": 5402, "id": 68341535}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 9918, "updated_at": "2014-06-26 19:58:22", "user": 621238, "closed_at": "2013-03-25 15:19:04", "id": 12404606, "title": "Fixed typo in railties/test", "url": "https://api.github.com/repos/rails/rails/issues/9918", "created_at": "2013-03-25 15:18:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15399306", "text": "Thank you!\n", "created_at": "2013-03-25 15:19:08", "user": 27786, "id": 15399306}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15399448", "text": ":smiley: \n", "created_at": "2013-03-25 15:21:24", "user": 621238, "id": 15399448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9896.\n\nWe often need to pass driver specific properties to JDBC adapter.\n\n``` ruby\ndevelopment:\n  adapter: postgresql\n  ...\n  properties:\n    name: value\n```\n\nBut ENV[\"DATABASE_URL\"] can't pass such properties for same purpose. For example\n\n``` ruby\nabstract://foo:123?encoding=utf8&properties%5Bname%5D=value\n  or\nabstract://foo:123?encoding=utf8&properties[name]=value\n```\n\n[BTW] my first version for this problem was 0ec6bc58d3d2149ac296496a04d7ceafe23f6067. But I thought AR shouldn't depend on `rack`\n", "labels": ["activerecord"], "number": 9919, "updated_at": "2014-06-25 01:55:17", "user": 13426, "closed_at": "2014-05-20 19:18:47", "id": 12407054, "title": "Add support for nested query parameter in DATABASE_URL. Fix #9896.", "url": "https://api.github.com/repos/rails/rails/issues/9919", "created_at": "2013-03-25 16:06:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15439136", "text": "I updated my PR. refactor previous code and also support unescaped query format\n", "created_at": "2013-03-26 03:31:21", "user": 13426, "id": 15439136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18213449", "text": "I updated this again.\n", "created_at": "2013-05-21 14:46:10", "user": 13426, "id": 18213449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34979663", "text": "@kennyj can you push a rebased version?\n", "created_at": "2014-02-13 13:56:23", "user": 5402, "id": 34979663}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/43670786", "text": "This is fixed now with Rails 4.1. People can define these properties at the production section of database.yml and use DATABASE_URL only to set the connection credentials. Closing.\n", "created_at": "2014-05-20 19:18:47", "user": 47848, "id": 43670786}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Closes #9325.\n\nI adjusted the example and the description in the testing guide and\nsimply linked from the mailer to the testing guide. This way we don't\nhave to maintain two separate places.\n", "labels": ["actionmailer", "docs"], "number": 9920, "updated_at": "2014-06-13 08:04:29", "user": 5402, "closed_at": "2013-03-25 18:50:35", "id": 12407527, "title": "move mailer testing examples into the testing guide.", "url": "https://api.github.com/repos/rails/rails/issues/9920", "created_at": "2013-03-25 16:16:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15403162", "text": "@steveklabnik can you take a look?\n", "created_at": "2013-03-25 16:16:45", "user": 5402, "id": 15403162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15412553", "text": "Also, an 80 char wrap would be nice. :)\n", "created_at": "2013-03-25 18:36:31", "user": 27786, "id": 15412553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15413963", "text": ":ok_hand: :heart: Thanks!\n", "created_at": "2013-03-25 18:50:48", "user": 27786, "id": 15413963}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi all,  \n\nThe edge doc chapter 9 needs updating.\n\nI would do so if I could find out how to get this use case to work under Rails-4.0.0.beta1\n\nPlease help this has brought my migration to rails 4 to a standstill despite several posings from myself to various forums.\n\nJohn Leake\n", "labels": ["docs"], "number": 9921, "updated_at": "2013-03-27 14:54:24", "user": 852052, "closed_at": "2013-03-27 14:54:24", "id": 12408695, "title": "Edge doc Chapter 9 does not work in Rails-4.0.0.beta1", "url": "https://api.github.com/repos/rails/rails/issues/9921", "created_at": "2013-03-25 16:42:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15408020", "text": "Would you mind posting the link to the edge doc you were talking about? Thanks. \n", "created_at": "2013-03-25 17:31:31", "user": 4912, "id": 15408020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15414981", "text": "On 25/03/13 17:32, Prem Sichanugrist wrote:\n\n> Would you mind posting the link to the edge doc you were talking \n> about? Thanks.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9921#issuecomment-15408020.\n> \n> Hi sorry.\n\nI would if I new where edge doc is.\n\nI followed the link within edge doc to report problems.\n\nJohn\n", "created_at": "2013-03-25 19:01:41", "user": 852052, "id": 15414981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15416287", "text": "@ozpos what guide are you talking about? Can you link to the section? In order to help you, we need to know what you were reading / doing. :smile_cat: \n", "created_at": "2013-03-25 19:16:07", "user": 5402, "id": 15416287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15416677", "text": "On 25/03/13 19:16, Yves Senn wrote:\n\n> @ozpos https://github.com/ozpos what guide are you talking about? \n> Can you link to the section? In order to help you, we need to know \n> what you were reading / doing. :smile_cat:\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9921#issuecomment-15416287.\n> \n> Hi, sorry again. Bit weird this, perhaps there are too many sources of \n> edge rails doc ?\n\nAnyway http://edgeguides.rubyonrails.org/form_helpers.html (ch 9) was \nwhere I was seeking help.\n\nMaybe this link should be plugged:-\n\n If for whatever reason you spot something to fix but cannot patch it yourself, please open an issue.\n\nMany thanks,\n\nJohn\n", "created_at": "2013-03-25 19:20:30", "user": 852052, "id": 15416677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15416827", "text": "Great! The \"edge rails doc\" can mean anything on http://edgeguides.rubyonrails.org/ , which there are a lot of things! They're not ordered, so \"Chapter 9\" doesn't make a lot of sense.\n\nWhat specifically does not work with the form helpers part? As far as I know, it should be up to date.\n", "created_at": "2013-03-25 19:22:07", "user": 27786, "id": 15416827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15418147", "text": "@ozpos what exactly in that chapter did not work? Did you get a stack-trace? Did nothing happen at all? Can you publish a sample application illustrating the problem on github?\n\n@steveklabnik the problem might be that strong_params is not mentioned at all in that section. Let's wait for his confirmation but I can add a small description for strong params and link to the relevant AC docs.\n", "created_at": "2013-03-25 19:35:40", "user": 5402, "id": 15418147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15418171", "text": "On 25/03/13 19:22, Steve Klabnik wrote:\n\n> Great! The \"edge rails doc\" can mean anything on \n> http://edgeguides.rubyonrails.org/ , which there are a lot of things! \n> They're not ordered, so \"Chapter 9\" doesn't make a lot of sense.\n> \n> What specifically does not work with the form helpers part? As far as \n> I know, it should be up to date.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9921#issuecomment-15416827.\n> \n> Hi,\n> All of chapter 9.  This approach only works for me with rails 3.2.x.\n\nI scaffolded a rails 4.0 app from scratch to try and get a many_to_many \nthrough example working.\n\nSince accepts_nested_attributes_for must be replaced with strong \nparameters I cannot find a description anywhere that has an end to end \ndemo of this basic use case.\n\nI have posted elsewhere to plead for an expert to donate 15 minutes of \ntheir time to knock out an app that exhibits all the core use cases of \nrails 4.0.\n\nThis would be a fantastic metric in demonstrating the ability of any new \nversion of rails to DRY up the code and display the desired best practice.\n\nI would like to see:-\n1. Edit of multi-level nested attributes in a single form.\n2. Edit several models on the same form.\n3. Edit multiple records from a single model on the same form.\n4. Basic authentication.\n5. Digest authentication.\n\nAs posted  here \nhttps://groups.google.com/forum/?fromgroups=#!topic/rubyonrails-talk/-EzFmHv7Js0\n\nThank you for your response.\n\nJohn Leake\n", "created_at": "2013-03-25 19:35:55", "user": 852052, "id": 15418171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15418390", "text": "On 25/03/13 19:36, Yves Senn wrote:\n\n> @ozpos https://github.com/ozpos what exactly in that chapter did not \n> work? Did you get a stack-trace? Did nothing happen at all? Can you \n> publish a sample application illustrating the problem on github?\n> \n> @steveklabnik https://github.com/steveklabnik the problem might be \n> that strong_params is not mentioned at all in that section. Let's wait \n> for his confirmation but I can add a small description for strong \n> params and link to the relevant AC docs.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9921#issuecomment-15418147.\n> \n> I will try and put the app on github.\n", "created_at": "2013-03-25 19:38:16", "user": 852052, "id": 15418390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15419124", "text": "@ozpos great! I will update the guide to mention strong parameters. In the mean time you can check out the following resources, which should explain your use case:\n- [action controller guide](http://edgeguides.rubyonrails.org/action_controller_overview.html#strong-parameters)\n- [strong parameters README](https://github.com/rails/strong_parameters/blob/master/README.md)\n\nplease still post the app to github, this will help me updating the guides.\n", "created_at": "2013-03-25 19:45:56", "user": 5402, "id": 15419124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15425752", "text": "Hi senny, All I seem to do these days is apologize for my incompetency.  My dev environment is RubyMine and although when I test my github account within the VCS settings RM connects fine. When I do a push it fails with authentication failure.\n\nI am a newbe git.\n", "created_at": "2013-03-25 21:09:49", "user": 852052, "id": 15425752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15426643", "text": "@ozpos no worries :heart:. Github has a great [help section](https://help.github.com/articles/set-up-git) to get your environment up and running. I don't use RubyMine so I can't help you very much but maybe these FAQ from Jetbrains help: http://www.jetbrains.com/ruby/webhelp/using-github-integration.html\n\nLet me know if it worked. I'm off for today but will update the docs tomorrow.\n", "created_at": "2013-03-25 21:26:09", "user": 5402, "id": 15426643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15426655", "text": "Don't worry about being a newbie!\n", "created_at": "2013-03-25 21:26:25", "user": 27786, "id": 15426655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15470628", "text": "Nearly a day later and I have managed to get a repo up to github:-\nhttps://github.com/ozpos/urps2\nI cannot seem to get the Rails 3.2 version up yet:-\nhttps://github.com/ozpos/urps1\n", "created_at": "2013-03-26 16:50:05", "user": 852052, "id": 15470628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15472950", "text": "Hi, Repo is at https://github.com/ozpos/urps2.\n\nI have made local changes and finally have use case 1 working but I am \nhaving difficulty pushing the changes to git.  I have a support ticket \nwith JetBrains.\n\nOn 25/03/13 21:26, Yves Senn wrote:\n\n> @ozpos https://github.com/ozpos no worries :heart:. Github has a \n> great help section https://help.github.com/articles/set-up-git to \n> get your environment up and running. I don't use RubyMine so I can't \n> help you very much but maybe these FAQ from Jetbrains help: \n> http://www.jetbrains.com/ruby/webhelp/using-github-integration.html\n> \n> Let me know if it worked. I'm off for today but will update the docs \n> tomorrow.\n> \n> —\n> Reply to this email directly or view it on GitHub \n> https://github.com/rails/rails/issues/9921#issuecomment-15426643.\n", "created_at": "2013-03-26 17:26:55", "user": 852052, "id": 15472950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15526330", "text": "@ozpos I documented the correct usage of strong parameters #9947. Let me know if this helps.\n", "created_at": "2013-03-27 14:28:47", "user": 5402, "id": 15526330}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have a model, Topic, which has 'conversations', a kind of message thread, and each conversation has many replies.\n\nThe replies inherit from conversations and just use a `parent_id` to point to the conversation that they are related to.\n\nThe Conversation model has a default scope of `parent_id: nil`, to enforce that they are roots and not replies. The Reply model has a default scope of `arel_table[:parent_id].not_eq(nil)` to enforce that they are replies.\n\nWhen I try to navigate from the Topic model to the replies directly, via\n\n``` ruby\n  has_many :conversations\n  has_many :replies, through: :conversations\n```\n\nit produces the query:\n\n``` sql\nSELECT \"conversations\".* FROM \"conversations\"\nINNER JOIN \"conversations\" \"conversations_replies_join\"\nON \"conversations\".\"parent_id\" = \"conversations_replies_join\".\"id\"\nWHERE \"conversations\".\"parent_id\" IS NULL\nAND \"conversations_replies_join\".\"topic_id\" = 1\nAND (\"conversations\".\"parent_id\" IS NOT NULL)\n```\n\nIt seems to be trying to enforce the default_scopes on the selected table `conversations` twice. Since we're trying to select the replies, it should not be enforcing the `WHERE \"conversations\".\"parent_id\" IS NULL` on this table, but on the `conversations_replies_join` table.\n\nI've made a repo that reproduces this bug with edge Rails [here](https://github.com/zephyr-dev/nested_association_with_default_scopes), with a failing test [here](https://github.com/zephyr-dev/nested_association_with_default_scopes/blob/master/test/models/topic_test.rb).\n", "labels": ["activerecord"], "number": 9922, "updated_at": "2014-02-04 09:59:32", "user": 1778835, "closed_at": "2014-02-04 09:59:32", "id": 12409546, "title": "Nested has_many throughs with default scopes don't work as expected", "url": "https://api.github.com/repos/rails/rails/issues/9922", "created_at": "2013-03-25 17:01:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15518159", "text": "@zephyr-dev Can you check if this is an issue with rails master too ?\n", "created_at": "2013-03-27 11:24:06", "user": 6399, "id": 15518159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15522373", "text": "Yep, sorry, I had thought that the --edge flag was the same as master. Ill check this out when I get a chance. \n", "created_at": "2013-03-27 13:15:57", "user": 239754, "id": 15522373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15523838", "text": "@benmoss `--edge` is indeed master but it seems the demo app that you built was not built using `--edge` .\n\nhttps://github.com/zephyr-dev/nested_association_with_default_scopes/blob/master/Gemfile#L3\n", "created_at": "2013-03-27 13:45:36", "user": 6399, "id": 15523838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15933157", "text": "Can you post a gist as per the section 1.2 of Rails guide http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-a-self-contained-gist-for-active-record-issues?\n", "created_at": "2013-04-05 00:41:38", "user": 6399, "id": 15933157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15933616", "text": "Sure, got some spare time tonight and gonna get this fixed up.\n\nFYI, doing a `rails new foobar --edge` does indeed spit out a Gemfile containing\n\n``` ruby\ngem 'rails',     :git => 'git://github.com/rails/rails.git', :branch => '3-2-stable'\ngem 'journey',   :git => 'git://github.com/rails/journey.git', :branch => '1-0-stable'\ngem 'arel',      :git => 'git://github.com/rails/arel.git', :branch => '3-0-stable'\n```\n\nat least for the Rails 3.2.12 CLI.\n", "created_at": "2013-04-05 00:57:13", "user": 239754, "id": 15933616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15933969", "text": "https://gist.github.com/benmoss/5315831\n", "created_at": "2013-04-05 01:08:49", "user": 239754, "id": 15933969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25674436", "text": "Just wondering will this be resolved for rails 4. I am getting the same issue\n", "created_at": "2013-10-04 03:38:14", "user": 239933, "id": 25674436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/34044903", "text": "@zephyr-dev To me this is the expected behavior. As you are joining through another association it will apply both default scopes. You're design hits an edge case where you don't want one of the default scopes to apply but if you think about it, there are also situations where you want it to apply:\n\n``` ruby\nclass Author\n  has_many :published_books\n  has_many :reviews, through: :books\nend\n\nclass PublishedBook\n  self.table_name = \"books\"\n  belongs_to :author\n  has_many :reviews\n\n  def self.default_scope\n    where(published: true)\n  end\nend\n\nclass Review\n  belongs_to :book\nend\n```\n\nI'm closing the issue but please report back if there are further areas to discuss.\n", "created_at": "2014-02-04 09:59:32", "user": 5402, "id": 34044903}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Can be called via\n\n```\nadd_index(:people, :last_name, :concurrently => true)\n```\n", "labels": ["activerecord"], "number": 9923, "updated_at": "2014-06-13 14:28:05", "user": 144138, "closed_at": "2013-03-26 14:18:22", "id": 12411280, "title": "Adds support for concurrent indexing in PostgreSQL adapter", "url": "https://api.github.com/repos/rails/rails/issues/9923", "created_at": "2013-03-25 17:39:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15411845", "text": ":+1:\n\nMySQL has a similar directive for INPLACE vs COPY vs DEFAULT index creation.\n", "created_at": "2013-03-25 18:28:54", "user": 199, "id": 15411845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15412484", "text": "@jeremy So have `:algorithm` as the argument instead of `:concurrently` and move the code to this up to the AbstractAdapters `add_index_options` and `add_index`?\n\n```\nadd_index(:people, :last_name, algorithm: :concurrently)\n```\n\nCorrect?\n", "created_at": "2013-03-25 18:35:45", "user": 144138, "id": 15412484}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15416771", "text": ":+1:\n", "created_at": "2013-03-25 19:21:32", "user": 199, "id": 15416771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15420013", "text": "@jeremy Let me know about the latest iteration. If all is good, I can squash the commits\n", "created_at": "2013-03-25 19:54:35", "user": 144138, "id": 15420013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15421503", "text": "It seems good to me. Needs a rebase thought.\n", "created_at": "2013-03-25 20:10:34", "user": 47848, "id": 15421503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15423446", "text": "Nicely done!\n", "created_at": "2013-03-25 20:31:10", "user": 199, "id": 15423446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15423453", "text": ":thumbsup: \n", "created_at": "2013-03-25 20:31:19", "user": 4338, "id": 15423453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15423808", "text": "I'll rebase this within the next hour or so\n", "created_at": "2013-03-25 20:37:45", "user": 144138, "id": 15423808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15428393", "text": "The tests in question already have extra strings, so I went with the example that was there.\n\nI rebased against master. I can pull out the extra spaces if necessary\n", "created_at": "2013-03-25 21:59:39", "user": 144138, "id": 15428393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15437930", "text": "Let me know if you want me to squash this PR\n", "created_at": "2013-03-26 02:42:14", "user": 144138, "id": 15437930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15460546", "text": "@rafaelfranca: Cleaned up that call, I had a ternary operator there, and pulled that out in favor of inspect\n", "created_at": "2013-03-26 14:16:34", "user": 144138, "id": 15460546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15460652", "text": "Thank you\n", "created_at": "2013-03-26 14:18:27", "user": 47848, "id": 15460652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15680862", "text": "Hello, guys. This is greate feature, I like \"algorithm: :concurrently\". But right now this feature doesn't work for PostgreSQL (I didn't check MySQL). First of all we should look at PostgreSQL documentation:\n\nhttp://www.postgresql.org/docs/9.2/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY\n\n> Regular index builds permit other regular index builds on the same table to occur in parallel, but only one concurrent index build can occur on a table at a time. In both cases, no other types of schema modification on the table are allowed meanwhile. **Another difference is that a regular CREATE INDEX command can be performed within a transaction block, but CREATE INDEX CONCURRENTLY cannot**.\n\nAnd of course each migration for PostgreSQL works in transaction block (it's perfect, because on fail it will rollback all changes). \n\nI worked under this feature also and when I saw this pull request, I didn't found in changes, how this solved.\n\nSo right now for such migration:\n\n``` ruby\nclass CreateUsers < ActiveRecord::Migration\n  def change\n    create_table :users do |t|\n      t.string :email\n      t.timestamps\n    end\n    add_index :users, :email, algorithm: :concurrently\n  end\nend\n```\n\nwe have such problem:\n\n``` bash\n$ rake db:migrate\n\n==  CreateUsers: migrating ====================================================\n-- create_table(:users)\n   -> 0.0274s\n-- add_index(:users, :email, {:algorithm=>:concurrently})\nrake aborted!\nAn error has occurred, this and all later migrations canceled:\n\nPG::Error: ERROR:  CREATE INDEX CONCURRENTLY cannot run inside a transaction block\n: CREATE  INDEX CONCURRENTLY \"index_users_on_email\" ON \"users\"  (\"email\")/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `exec'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `block in execute'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:425:in `block in log'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:420:in `log'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:127:in `execute'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/schema_statements.rb:416:in `add_index'\n/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-...\n...\nTasks: TOP => db:migrate\n(See full trace by running task with --trace)\n\n```\n\nTo create such indexes, I think in code should exists some queue, which will collect all such indexes in migration and execute this indexes after success execution of transaction block.\n\nP.S. rails tested version:\n\n``` ruby\nGIT\n  remote: git://github.com/rails/rails.git\n  revision: 3b0b573ac3ecbec5b1fa021abbe86b267bbefb8c\n  specs:\n    actionmailer (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      mail (~> 2.5.3)\n    actionpack (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n      erubis (~> 2.7.0)\n      rack (~> 1.5.2)\n      rack-test (~> 0.6.2)\n    activemodel (4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      builder (~> 3.1.0)\n    activerecord (4.0.0.beta1)\n      activemodel (= 4.0.0.beta1)\n      activerecord-deprecated_finders (~> 0.0.3)\n      activesupport (= 4.0.0.beta1)\n      arel (~> 4.0.0.beta2)\n    activesupport (4.0.0.beta1)\n      i18n (~> 0.6, >= 0.6.4)\n      minitest (~> 4.2)\n      multi_json (~> 1.3)\n      thread_safe (~> 0.1)\n      tzinfo (~> 0.3.37)\n    rails (4.0.0.beta1)\n      actionmailer (= 4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activerecord (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.0.0.beta1)\n      sprockets-rails (~> 2.0.0.rc3)\n    railties (4.0.0.beta1)\n      actionpack (= 4.0.0.beta1)\n      activesupport (= 4.0.0.beta1)\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n```\n\nThanks for all.\n", "created_at": "2013-03-30 20:01:31", "user": 98444, "id": 15680862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15681371", "text": "@le0pard 4ce98432512d11ac2f0330e2313c2c031552ffff introduced `disable_ddl_transaction!` method for migrations, which you can use to turn off the wrapping transaction for the specific migrations you need. That should solve your issue I think, by disabling the transaction in this migration. Hope that helps!\n", "created_at": "2013-03-30 20:33:14", "user": 26328, "id": 15681371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15681527", "text": "Yep, I understand your point @carlosantoniodasilva, but I didn't see any notice, what \"algorithm: :concurrently\" must(!!!) running with \"disable_ddl_transaction!\". Also, in this case we have \"add_index\" method which always will work correctly in migration except with this option \"algorithm: :concurrently\". I think we should fix \"add_index\" for this option or create separate method \"add_index_concurrently\" with notice, what user should run this without ddl transaction.\n", "created_at": "2013-03-30 20:43:13", "user": 98444, "id": 15681527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682246", "text": "@carlosantoniodasilva , also can we have such problem:\n\n``` ruby\nclass AddToFirstField < ActiveRecord::Migration\n  self.disable_ddl_transaction!\n  def change\n    add_index :users, :first_field, algorithm: :concurrently\n    add_column :users, invalid, :integersss\n  end\nend\n```\n\nStart migration first time:\n\n``` bash\n==  AddToFirstField: migrating ================================================\n-- add_index(:users, :first_field, {:algorithm=>:concurrently})\n   -> 0.0066s\n-- invalid()\nrake aborted!\nAn error has occurred, all later migrations canceled:\n\nundefined local variable or method `invalid' for #<AddToFirstField:0x007fedc2aec1a0>/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/migration.rb:621:in `block in method_missing'\n```\n\nStart migration second time:\n\n``` bash\n==  AddToFirstField: migrating ================================================\n-- add_index(:users, :first_field, {:algorithm=>:concurrently})\nrake aborted!\nAn error has occurred, all later migrations canceled:\n\nIndex name 'index_users_on_first_field' on table 'users' already exists/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:806:in `add_index_options'\n```\n\nAnd this case:\n\n``` ruby\nclass AddToFirstField < ActiveRecord::Migration\n  self.disable_ddl_transaction!\n  def change\n    add_index :users, :second_field, algorithm: :concurrently\n    add_index :users, :third_field, algorithm: :concurrently\n  end\nend\n```\n\nStart migration first time:\n\n``` bash\n==  AddToFirstField: migrating ================================================\n-- add_index(:users, :second_field, {:algorithm=>:concurrently})\n   -> 0.0075s\n-- add_index(:users, :third_field, {:algorithm=>:concurrently})\nrake aborted!\nAn error has occurred, all later migrations canceled:\n\nPG::Error: ERROR:  column \"third_field\" does not exist\n: CREATE  INDEX CONCURRENTLY \"index_users_on_third_field\" ON \"users\"  (\"third_field\")/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/postgresql/database_statements.rb:128:in `exec'\n```\n\nStart migration second time:\n\n``` bash\n==  AddToFirstField: migrating ================================================\n-- add_index(:users, :second_field, {:algorithm=>:concurrently})\nrake aborted!\nAn error has occurred, all later migrations canceled:\n\nIndex name 'index_users_on_second_field' on table 'users' already exists/Users/leo/.rvm/gems/ruby-2.0.0-p0/bundler/gems/rails-3b0b573ac3ec/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb:806:in `add_index_options'\n```\n\nConclusion: we should create separate migration for each concurent index with \"disable_ddl_transaction\" and without any aditional migration commands (add_index, add_column, etc.):\n\n``` ruby\nclass AddToFirstField < ActiveRecord::Migration\n  self.disable_ddl_transaction!\n  def change\n    add_index :users, :first_field, algorithm: :concurrently\n  end\nend\n\nclass AddToSecondField < ActiveRecord::Migration\n  self.disable_ddl_transaction!\n  def change\n    add_index :users, :second_field, algorithm: :concurrently\n  end\nend\n```\n\nThis isn't Rails way (I hope).\n", "created_at": "2013-03-30 21:30:49", "user": 98444, "id": 15682246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682531", "text": "This is a database limitation and we (Rails) are providing an API to make this possible. So, yes, if you need to add an index concurrently you should know you can't do inside a transaction and with additional migration commands.\n\nYou should know your database and its limitation. We can't provide everything.\n", "created_at": "2013-03-30 21:50:10", "user": 47848, "id": 15682531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682625", "text": "Thanks, @rafaelfranca. Ok, but is it good idea fix this limitation by concurent index queue and execute such indexes after success ddl transaction? Like it done in [pg_power](https://github.com/TMXCredit/pg_power#concurrent-index-creation). I just thinking add this fix in Rails in such way.\n", "created_at": "2013-03-30 21:56:20", "user": 98444, "id": 15682625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682668", "text": "No. I don't think is worth to add this complexity to Rails code base right now due a database constraint.\n", "created_at": "2013-03-30 21:59:07", "user": 47848, "id": 15682668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682693", "text": "If this feature become popular and we have to support more feature like this one so we can think to add this to Rails\n", "created_at": "2013-03-30 22:00:17", "user": 47848, "id": 15682693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682735", "text": "Thanks, @rafaelfranca, this is reasonable. In conclusion, I think we should write about this limitation in readme about this feature and what \"disable_ddl_transaction\" help to use it.\n", "created_at": "2013-03-30 22:03:15", "user": 98444, "id": 15682735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682761", "text": "Totally agree. We can put this in the CHANGELOG entry and also in the RDOC documentation. Want to open a pull request?\n", "created_at": "2013-03-30 22:05:30", "user": 47848, "id": 15682761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682835", "text": "My English is bad, I just can write good code. You can do this (or maybe someone can finish this). Thanks anyway for all.\n", "created_at": "2013-03-30 22:11:03", "user": 98444, "id": 15682835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682875", "text": "Ok. I'll do later\n", "created_at": "2013-03-30 22:14:13", "user": 47848, "id": 15682875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15682880", "text": "BTW, Thank you so much :heart: \n", "created_at": "2013-03-30 22:14:25", "user": 47848, "id": 15682880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15684605", "text": "+1 for adding a notice somewhere about running it without a transaction :+1:\n", "created_at": "2013-03-31 00:42:25", "user": 26328, "id": 15684605}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "(based on feedback from https://github.com/rails/rails/pull/9910)\n\nProblem I'm trying to solve:\n\nUsers of Rails Q API expect the Q system to be able to serialize and de-serialize the jobs they enQ.  If it's unable to do so, it should complain about it with an exact reason, at the time of enQ.\n\nMy take:\n\nThis problem can't easily be solved exclusively by the framework. Any attempt to do so fully would likely lead to a leaky abstraction wherein Job authors end up digging in to the guts of such an implementation.\n\nInstead, a simple and minimal contract should exist between Job objects and the framework responsible for enQ-ing and running them.\n1. a run method\n2. a serializable_hash method\n3. a from_serializable_hash method\n\nAdditionally:\n\nBackend job systems should have a choice on how to serialize jobs.  It's fine for Marshal to be the default in Rails, but it's unnecessarily restricting to impose this requirement on all integrators.\n", "labels": [], "number": 9924, "updated_at": "2014-06-12 08:54:41", "user": 10033, "closed_at": "2013-03-25 18:57:23", "id": 12412400, "title": "serializable_hash: Jobs should partially define how to as serialize and de-serialize themselves", "url": "https://api.github.com/repos/rails/rails/issues/9924", "created_at": "2013-03-25 18:03:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15414562", "text": "Hey @jacobo - there are going to be deeper, more fundamental changes to queueing. I'm thrilled that you're pitching in, but this line of development is a dead end, I'm afraid!\n", "created_at": "2013-03-25 18:57:23", "user": 199, "id": 15414562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15417176", "text": "@jeremy - Are there any other \"lines\" or approaches you might be able to suggest?\n\nWould you be open to seeing a from-scratch rails 4 Q implementation based on existing resQ or sidekiq conventions?\n", "created_at": "2013-03-25 19:25:43", "user": 10033, "id": 15417176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15418488", "text": "We're going back to the drawing board for the API, and it's (tentatively) slated for 4.1.\n\nIf you'd like to work on this kind of stuff, we (the Resque team) would love to have you.\n", "created_at": "2013-03-25 19:39:19", "user": 27786, "id": 15418488}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It makes sense to use relative links inside the guides. This way they work locally in the generated output as well as on guide.rubyonrails.org as edgeguide.rubyonrails.org.\n", "labels": [], "number": 9925, "updated_at": "2014-06-26 19:58:38", "user": 5402, "closed_at": "2013-03-25 19:02:31", "id": 12415740, "title": "use relative links inside guides [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/9925", "created_at": "2013-03-25 19:01:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15415070", "text": ":heart:\n", "created_at": "2013-03-25 19:02:35", "user": 27786, "id": 15415070}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix pg quoting\n", "labels": [], "number": 9926, "updated_at": "2016-02-22 14:26:23", "user": 567626, "closed_at": "2013-03-25 20:21:20", "id": 12420586, "title": "fix pg quoting", "url": "https://api.github.com/repos/rails/rails/issues/9926", "created_at": "2013-03-25 20:19:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15422460", "text": "@rafaelfranca could you merge this. Or fix the typo. pg is messed up for now.\n", "created_at": "2013-03-25 20:20:54", "user": 567626, "id": 15422460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15422500", "text": "I already did this. Thank you\n", "created_at": "2013-03-25 20:21:20", "user": 47848, "id": 15422500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15422545", "text": "thanks!\n", "created_at": "2013-03-25 20:21:50", "user": 567626, "id": 15422545}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Suppose we have \n\n``` erb\n<% c1 =\"'\" %>\n<% c2='\"' %>\n<input type='hidden' name='c1' value='<%= h c1 %>'>\n<input type='hidden' name='c1' value='<%= h c1 %>'>\n```\n\nThis works.\nHowever,\n\n``` erb\n<%= hidden_field_tag :c1, c1 %>\n<%= hidden_field_tag :c2, c2 %>\n```\n\nor\n\n``` erb\n<input type='hidden' name='c1' value=\"<%= h c1 %>\">\n<input type='hidden' name='c1' value=\"<%= h c1 %>\">\n```\n\ndoesn't. Basically, due to the way html_escape works, it seems that using single quotes to wrap values in the tag helpers makes it possible to use all string values as attributes.\n", "labels": ["actionview"], "number": 9927, "updated_at": "2013-03-26 19:14:05", "user": 400538, "closed_at": "2013-03-26 19:14:05", "id": 12421231, "title": "Shouldn't tag helpers use single quotes?", "url": "https://api.github.com/repos/rails/rails/issues/9927", "created_at": "2013-03-25 20:30:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15424122", "text": "Why it doesn't work. Could you put the generated HTML?\n", "created_at": "2013-03-25 20:42:38", "user": 47848, "id": 15424122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15424785", "text": "Sure!\nThis is the generated HTML:\n\n``` html\n    Single Quotes </br>\n    <input type='hidden' name='c1' value='&#x27;'>\n    <input type='hidden' name='c2' value='\"'>\n    hidden_field_tag </br>\n    <input id=\"c1\" name=\"c1\" type=\"hidden\" value=\"&#x27;\" />\n    <input id=\"c2\" name=\"c2\" type=\"hidden\" value=\"\"\" />    \n    double quotes </br>\n    <input type='hidden' name='c1' value=\"&#x27;\">\n    <input type='hidden' name='c1' value=\"\"\">\n```\n\nThis is how it's parsed by Firefox:\n\n``` html\n Single Quotes\n<br>\n<input type=\"hidden\" value=\"'\" name=\"c1\">\n<input type=\"hidden\" value=\"\"\" name=\"c2\">\nhidden_field_tag\n<br>\n<input id=\"c1\" type=\"hidden\" value=\"'\" name=\"c1\">\n<input id=\"c2\" type=\"hidden\" \"=\"\" value=\"\" name=\"c2\">\ndouble quotes\n<br>\n<input type=\"hidden\" value=\"'\" name=\"c1\">\n<input type=\"hidden\" \"=\"\" value=\"\" name=\"c1\">\n```\n\nThis is the erb code:\n\n``` erb\n    <% c1 =\"'\" %>\n    <% c2='\"' %>\n    Single Quotes </br>\n    <input type='hidden' name='c1' value='<%= h c1 %>'>\n    <input type='hidden' name='c2' value='<%= h c2 %>'>\n    hidden_field_tag </br>\n    <%= hidden_field_tag :c1, c1 %>\n    <%= hidden_field_tag :c2, c2 %>    \n    double quotes </br>\n    <input type='hidden' name='c1' value=\"<%= h c1 %>\">\n    <input type='hidden' name='c1' value=\"<%= h c2 %>\">\n```\n", "created_at": "2013-03-25 20:54:10", "user": 400538, "id": 15424785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15425117", "text": "I think the helpers should escape the double quotes too. @NZKoz @jeremy do you remember why they are not escaped?\n", "created_at": "2013-03-25 20:59:28", "user": 47848, "id": 15425117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15426353", "text": "Ever since b6ab4417720e03f1551abda2f1e4bd0a392dd04e we escape single and double quotes.  I'm not sure if you have a library installed which is messing with things:\n\n```\nERB::Util.html_escape(%('\"<>/))\n=> \"&#x27;&quot;&lt;&gt;/\n```\n\nand my generated html is:\n\n``` html\n<input id=\"c1\" name=\"c1\" type=\"hidden\" value=\"&#x27;\" />\n<input id=\"c2\" name=\"c2\" type=\"hidden\" value=\"&quot;\" />\n```\n\nWhat version of rails and libraries are you using?\n", "created_at": "2013-03-25 21:20:23", "user": 197, "id": 15426353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15426437", "text": "Good point. I should have tried on the console :flushed:\n", "created_at": "2013-03-25 21:21:56", "user": 47848, "id": 15426437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15430309", "text": "I have Rails 3.2.11. On the Rails console I get\n\n```\nirb(main):001:0> ERB::Util.html_escape(%('\"<>/))\n=> \"&#x27;&quot;&lt;&gt;/\"\n```\n\nWhich libraries should I check?\nHere is my Gemfile\n\n```\nruby \"1.9.3\"\ngem 'rails', '3.2.11'\ngem 'multi_json', '1.5.1'\ngem 'pg'\ngem 'thin'\ngem 'therubyracer'\ngem 'bootstrap-sass'\ngem 'simple_form'\ngem 'devise'\ngem 'cancan'\ngem 'role_model'\ngem 'redis'\ngem 'resque', \"~> 1.22.0\"\ngem 'carrierwave-postgresql'\ngem 'newrelic_rpm'\ngem 'carrierwave'\ngem 'roo'\ngem 'cells'\ngem 'remotipart'\ngem 'coffee-rails', '~> 3.2.1'\ngem 'active_scaffold', git: \"https://github.com/activescaffold/active_scaffold.git\"\ngem 'activerecord-postgres-hstore'\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n  gem 'uglifier', '>= 1.0.3'\nend\ngem 'jquery-rails'\n```\n", "created_at": "2013-03-25 22:40:21", "user": 400538, "id": 15430309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15481814", "text": "No idea. Try bootstrap-sass, cells, roo.\n\nI'm closing this issue since it is not a Rails issue. Thank you report. If you need any extra helper or found a solution please comment on this issue.\n", "created_at": "2013-03-26 19:14:05", "user": 47848, "id": 15481814}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Closes #3493\n\nThe PR extracts \"extra\" on mysql column to fetch `auto_increment` information, which is associated with the column.\n\nThis information is then used when migrating. \n", "labels": ["activerecord"], "number": 9928, "updated_at": "2014-06-26 15:56:24", "user": 567626, "closed_at": "2013-03-26 18:55:13", "id": 12421499, "title": "respect auto_increment in rename_column for mysql", "url": "https://api.github.com/repos/rails/rails/issues/9928", "created_at": "2013-03-25 20:36:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15423921", "text": "@rafaelfranca , @carlosantoniodasilva  : could you take a look at this?\n", "created_at": "2013-03-25 20:39:27", "user": 567626, "id": 15423921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15441294", "text": "fixed/rebased\n", "created_at": "2013-03-26 05:04:56", "user": 567626, "id": 15441294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15468850", "text": "@vipulnsward could you add a CHANGELOG entry?\n", "created_at": "2013-03-26 16:24:26", "user": 47848, "id": 15468850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15479651", "text": "@rafaelfranca  Added.\n", "created_at": "2013-03-26 18:49:55", "user": 567626, "id": 15479651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15480563", "text": "@rafaelfranca thanks.\n", "created_at": "2013-03-26 19:00:08", "user": 567626, "id": 15480563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15480670", "text": "Thank you!!\n\nRafael Mendonça França\nhttp://twitter.com/rafaelfranca\nhttps://github.com/rafaelfranca\n\nOn Tue, Mar 26, 2013 at 4:00 PM, Vipul A M notifications@github.com wrote:\n\n> @rafaelfranca https://github.com/rafaelfranca thanks.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/pull/9928#issuecomment-15480563\n> .\n", "created_at": "2013-03-26 19:01:38", "user": 47848, "id": 15480670}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "#9869\n\nThe fix is causing a test failure as of now.\n\n```\nNamedScopeTest#test_should_not_duplicates_where_values \n[/Users/nsingh/dev/\nrails_edge/rails/activerecord/test/cases/named_scope_test.rb:303]:\nExpected: [\"1=1\"]\n  Actual: [\"1=1\", \"1=1\"]\n```\n\nEven though the test is asserting that where values should not be duplicated, the sql that is generated does not have the duplication. So I'm not sure about the validity of the test.\n\nI'll clean up pull request with squashing, change log etc when it is all set to go.\n\ncc @jonleighton @tenderlove \n", "labels": ["activerecord"], "number": 9929, "updated_at": "2014-06-19 10:52:51", "user": 6399, "closed_at": "2013-04-05 12:19:49", "id": 12424578, "title": "current_scope is not applied for subclasses", "url": "https://api.github.com/repos/rails/rails/issues/9929", "created_at": "2013-03-25 21:47:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15952549", "text": "@neerajdotname I cherry-picked your test and fixed in 8606a7fbe9367e9ae37ad058dd07f0dd38daf015. Thanks.\n", "created_at": "2013-04-05 12:19:49", "user": 1979, "id": 15952549}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This gem is `data` gem. Thus I guess we should use latest version.\n", "labels": [], "number": 9930, "updated_at": "2014-06-26 19:58:47", "user": 13426, "closed_at": "2013-03-26 03:16:01", "id": 12432710, "title": "Bump TZInfo version to 0.3.37 based on version v2013b of the underlying tz data.", "url": "https://api.github.com/repos/rails/rails/issues/9930", "created_at": "2013-03-26 03:07:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I remove the 'db:test:prepare' task through lib/tasks/test.rake and this worked until recently, I believe probably due to the move to running test via 'rails test'.\n\nMy test.rake file:\n\n``` ruby\n    Rake::TaskManager.class_eval do\n      def delete_task(task_name)\n        @tasks.delete(task_name.to_s)\n      end\n      Rake.application.delete_task(\"db:test:prepare\")\n    end\n    namespace :db do\n        namespace :test do\n            task :prepare do\n              puts \"Hello\"\n            end\n        end\n    end\n```\n\nI tried to verify that the test.rake file is being run and the task is correctly being removed:\n\n``` ruby\n    Rake::TaskManager.class_eval do\n      def delete_task(task_name)\n        @tasks.delete(task_name.to_s)\n      end\n      def show_tasks\n        pp @tasks\n      end\n      Rake.application.delete_task(\"db:test:prepare\")\n    end\n    namespace :db do\n        namespace :test do\n            task :prepare do\n              puts \"Remember to run 'chmod 666 db/structure.sql; sudo -u nobody rake db:test:clone_structure; sudo -u nobody rake salsasan:prepare_test RAILS_ENV=test'\"\n            end\n        end\n    end\n    Rake.application.show_tasks\n```\n\nThis showed that the test.rake file is indeed being run and the task is correctly removed at least at that stage.\n\nAny ideas?\n\nI am on 078bfbffa41e29a9d8ff2cf56e4c9254e7260f24\n", "labels": ["railties"], "number": 9931, "updated_at": "2013-03-27 03:55:16", "user": 17080, "closed_at": "2013-03-27 03:55:16", "id": 12441279, "title": "Unable to remove task \"db:test:prepare\"", "url": "https://api.github.com/repos/rails/rails/issues/9931", "created_at": "2013-03-26 09:49:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15455239", "text": "I think the new test runner no longer uses `db:test:preapre` but accesses `db:test:load` directly.\n", "created_at": "2013-03-26 12:31:51", "user": 5402, "id": 15455239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15503035", "text": "@senny you are right, I modified it to replace db:test:load and it works, it doesn't seem like it should change the expected behaviour like that though... \n", "created_at": "2013-03-27 03:55:16", "user": 17080, "id": 15503035}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "#### 1.) multiple paths containing a slash\n\nThis is basically a revert of https://github.com/rails/rails/commit/d03aa104e069be4e301efa8cefb90a2a785a7bff and a new fix inside the `#match` method.\n#### 2.) multiple paths using the match shorthand syntax\n\nAs the `#match` must be aware of multiple paths the shorthand expansion must be applied for each path separately.\n", "labels": ["actionpack"], "number": 9932, "updated_at": "2014-06-26 16:17:22", "user": 5402, "closed_at": "2013-04-03 13:48:04", "id": 12444284, "title": "routing bugfixes when matching multiple paths", "url": "https://api.github.com/repos/rails/rails/issues/9932", "created_at": "2013-03-26 11:23:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15794766", "text": "Can you give a more detailed reason for the rationale for this patch?\n", "created_at": "2013-04-02 18:50:34", "user": 4338, "id": 15794766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15797844", "text": "I think we have enough information here\n", "created_at": "2013-04-02 19:43:57", "user": 47848, "id": 15797844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15804575", "text": "@stouset  the origin was #9913\n", "created_at": "2013-04-02 21:41:52", "user": 5402, "id": 15804575}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Imagine I have a controller and call some method on it that is missing:\n\n``` ruby\nclass ImagesController < ApplicationController\n  unexistent_method # method with such name is not defined\n\n  def index\n  end\n\nend\n```\n\n(actually I ran into this bug when I tried to call `caches_action` without proper gem)\n\nAnd I have a test\n\n``` ruby\nclass ImagesControllerTest < ActionController::TestCase\n\n  def test_index\n    get :index\n  end\nend\n```\n\nWhen I run the tests with `rails test test/functional/images_controller_test.rb` I get the following obscure error:\n\n```\nERROR ImagesControllerTest#test_get_index (0.59s)\n  RuntimeError:   @controller is nil: make sure you set it in your test's setup method.\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:631:in `block in check_required_ivars'\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:629:in `each'\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:629:in `check_required_ivars'\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:531:in `process'\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:64:in `process'\n  /home/vk/.rvm/gems/ruby-2.0.0-p0@rails4/bundler/gems/rails-2d33796457b1/actionpack/lib/action_controller/test_case.rb:468:in `get'\n  test/functional/images_controller_test.rb:11:in `block in <class:ImagesControllerTest>'\n```\n\nIf there are many tests in the file, the first one fails with this error but the following ones fail with different kinds of errors, e.g. saysing that action is missing from the controller while the action is actually there. Or sometimes it looks that request got to the controller but the `setup` block was not executed.\n\n---\n\nThis error was also happenning  on 4.0.0.beta1, before `rake` test was switched to `rails test`.\n\nAs a comparison, on 3.2.13 such test just fails to start with comprehensive message\n\n```\nundefined local variable or method `unexistent_method' for ImagesController:Class (NameError)\n```\n", "labels": ["actionpack"], "number": 9933, "updated_at": "2014-09-02 06:47:32", "user": 137464, "closed_at": "2014-09-02 06:47:32", "id": 12451427, "title": "Obscure error message in the tests if using undefined class method in controller", "url": "https://api.github.com/repos/rails/rails/issues/9933", "created_at": "2013-03-26 14:39:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15468561", "text": "I'll take a look and report back.\n", "created_at": "2013-03-26 16:19:49", "user": 5402, "id": 15468561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15471458", "text": "This is a minimalistic demo app: https://github.com/khustochka/cache_sweeper_fail\n\nIt actually demonstrates bug in `rails-observers` that makes `cache_sweeper` a missing method. And the missing method is what we need. The test output is as follows:\n\n```\n  1) Error:\nPostsControllerTest#test_should_create_post:\nRuntimeError: @controller is nil: make sure you set it in your test's setup method.\n    test/controllers/posts_controller_test.rb:21:in `block (2 levels) in <class:PostsControllerTest>'\n    test/controllers/posts_controller_test.rb:20:in `block in <class:PostsControllerTest>'\n\n  2) Error:\nPostsControllerTest#test_should_destroy_post:\nAbstractController::ActionNotFound: The action 'destroy' could not be found for PostsController\n    test/controllers/posts_controller_test.rb:44:in `block (2 levels) in <class:PostsControllerTest>'\n    test/controllers/posts_controller_test.rb:43:in `block in <class:PostsControllerTest>'\n\n  3) Error:\nPostsControllerTest#test_should_get_edit:\nNameError: undefined local variable or method `set_post' for #<PostsController:0x94e1bc4>\n    test/controllers/posts_controller_test.rb:33:in `block in <class:PostsControllerTest>'\n\n  4) Error:\nPostsControllerTest#test_should_get_index:\nActionView::Template::Error: undefined method `each' for nil:NilClass\n    app/views/posts/index.html.erb:15:in `_app_views_posts_index_html_erb__1066215553_80250650'\n    test/controllers/posts_controller_test.rb:9:in `block in <class:PostsControllerTest>'\n\n  5) Error:\nPostsControllerTest#test_should_get_new:\nActionView::Template::Error: First argument in form cannot contain nil or be empty\n    app/views/posts/_form.html.erb:1:in `_app_views_posts__form_html_erb___298614731_83449880'\n    app/views/posts/new.html.erb:3:in `_app_views_posts_new_html_erb__673722478_83319500'\n    test/controllers/posts_controller_test.rb:15:in `block in <class:PostsControllerTest>'\n\n  6) Error:\nPostsControllerTest#test_should_show_post:\nNameError: undefined local variable or method `set_post' for #<PostsController:0x9f6db10>\n    test/controllers/posts_controller_test.rb:28:in `block in <class:PostsControllerTest>'\n\n  7) Error:\nPostsControllerTest#test_should_update_post:\nAbstractController::ActionNotFound: The action 'update' could not be found for PostsController\n    test/controllers/posts_controller_test.rb:38:in `block in <class:PostsControllerTest>'\n```\n\nHere you can see the whole bunch of error messages: `@controller is nil` in the 1st test, `The action could not be found` for valid actions, as well as evidences of `setup` not beings executed: `undefined method 'each' for nil:NilClass`\n", "created_at": "2013-03-26 17:03:48", "user": 137464, "id": 15471458}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15589636", "text": "Thanks.\n", "created_at": "2013-03-28 13:57:58", "user": 137464, "id": 15589636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36275902", "text": "Hey I am also facing the same issue with rails 4 any solution ???\n", "created_at": "2014-02-27 18:44:22", "user": 5054529, "id": 36275902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36372364", "text": "@peeyushsingla : Could you provide an [executable gist](https://github.com/rails/rails/blob/master/guides/bug_report_templates/action_controller_gem.rb) to showcase the problem ? I'm [not able](https://gist.github.com/robin850/d76c382186d58c121637) to reproduce it with 4.0.3 or `master`.\n", "created_at": "2014-02-28 17:09:53", "user": 354185, "id": 36372364}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36387857", "text": "https://github.com/peeyushsingla/rc89   used sweeper to do basic cache expiration not worked. \n", "created_at": "2014-02-28 19:52:34", "user": 5054529, "id": 36387857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/36450905", "text": "@peeyushsingla : Ugh, you are right ; this problem remains with constants that do not exist. To reproduce, it's as simple as:\n\n```\n$ rails new new_app && cd new_app\n$ rails g controller foo bar\n$ echo \"include FooBar\" >> app/controllers/foo_controller.rb\n$ rake test\n```\n\nActually I think that this is not so easy to isolate inside an executable gist since it's Ruby which is raising the error, not Active Support. I guess that's because eager loading is not involved in the gist.\n", "created_at": "2014-03-02 10:32:30", "user": 354185, "id": 36450905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39448794", "text": "I tried to fix this issue in #14574, but it seems we can not simply raise `NameError` there. The build [has failed](https://travis-ci.org/rails/rails/jobs/22148339) in a lot of places. I'll close the PR until we find the right way to fix it.\n", "created_at": "2014-04-03 13:12:50", "user": 611891, "id": 39448794}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have a strange behavior when validating a record in a nested form. The association collection is empty when creating a new record and the validation does not catch the error. But when updating the same record the validation gets it right but continues to catch the error even after modifying the needed attribute value to make it pass. \n\nHere is the model:\n\n``` ruby\nclass Timesheet < ActiveRecord::Base\n  attr_accessible :status, :user_id, :start_date, :end_date, :activities_attributes\n\n  SUBMITTED = 'Submitted'\n  APPROUVED = 'Approuved'\n  REJECTED = 'Rejected'\n\n  STATUS_VALUES = [SUBMITTED, APPROUVED, REJECTED]\n  belongs_to :user\n  has_many :activities, dependent: :destroy, inverse_of: :timesheet\n  has_many :time_entries, through: :activities\n  accepts_nested_attributes_for :activities, allow_destroy: true\n\n  validates :user_id, presence: true\n  validates :status, presence: true, inclusion: {in: STATUS_VALUES} \n  validate :maximum_worktime_per_day\n\n  after_update :check_an_activity_present\n\n  after_initialize :init_working_week\n\n..\nprivate\n  def maximum_worktime_per_day\n      time_entries_by_date = time_entries.group_by(&:workdate)\n      time_entries_by_date.each do |key, value|\n        errors[:base] << \"Maximum daily time should not exceed 1 day\" if value.map(&:worktime).inject(:+) > 1\n        break\n      end\n    end\n```\n\nAs I could see the output in the console, when creating a new record, the hash 'time_entries_by_date' in the validation method is empty, that's why the record is saved without problems even if the worktime exceeds the validation value of 1 day.\nWhen updating the same record, the validation method catches well the error but does not refresh the hash values even after I modify the work time values to make it pass.\n\nRails version: 3.2.12\nRuby version: ruby 1.9.3p327 (2012-11-10) [x86_64-darwin12.2.0]\n\nThank you\n", "labels": ["activerecord"], "number": 9934, "updated_at": "2013-04-16 13:29:26", "user": 83579, "closed_at": "2013-04-16 13:29:26", "id": 12452214, "title": "nested form: validate :some_method, association collection is not refreshed", "url": "https://api.github.com/repos/rails/rails/issues/9934", "created_at": "2013-03-26 14:55:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15512480", "text": "It's hard to tell from the example code above what's going wrong. Could you provide a stripped down example of the problem? It would be great if you could fit it into a gist like this one: https://gist.github.com/neerajdotname/5187092\n", "created_at": "2013-03-27 09:23:03", "user": 5402, "id": 15512480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15513628", "text": "The gist is created at https://gist.github.com/Javix/5253033.\n\nThank you.\n\nBest regards,\n\nSerguei\n\nOn 27 Mar 2013, at 10:23, Yves Senn notifications@github.com wrote:\n\n> It's hard to tell from the example code above what's going wrong. Could you provide a stripped down example of the problem? It would be great if you could fit it into a gist like this one: https://gist.github.com/neerajdotname/5187092\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-03-27 09:45:26", "user": 83579, "id": 15513628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15522781", "text": "@Javix thanks for the gist but I think there was a misunderstanding. My question was if you could reduce the code to the actual problem that's happening and put that into an \"executable\" gist in the format like the one I linked. This would help me to reproduce the error without having to understand your complete application. As I understand it the problem you describe lies in a validation callback, so if you could reproduce it without controller or view logic that would help a great deal to fix the problem.\n", "created_at": "2013-03-27 13:24:49", "user": 5402, "id": 15522781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15551414", "text": "Hmmm, I really have no idea how to reduce the code and put everything in a separate file(s)/modules taking in account that a lot of things are involved in the processing(models, controller, views and a database). I could 'simulate' it in the rails console, but create an 'executable' gist - not sure. Any tips ? Thanks\n", "created_at": "2013-03-27 20:35:14", "user": 83579, "id": 15551414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15557940", "text": "@Javix one of my favorite gist.github.com features is an ability to split a gist into a [bunch of separate files](https://gist.github.com/killthekitten/5258720) ;)\n\nAlso, at the bottom of your gist I found [a link to the project repo](https://github.com/Javix/spot-time). I think @senny could miss it.\n\n@Javix can you post a gist with a breaking test (which would be perfect) or at least with a sequence of rails console calls that will help us to reproduce your bug?\n", "created_at": "2013-03-27 22:44:00", "user": 1201569, "id": 15557940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15588227", "text": "Here is a breaking test:\n\n```\n#timesheet_spec.rb\ndescribe \"when worked time per day is greater than 1 day\" do\n    it \"should not be valid\" do\n      new_timesheet = build(:submitted_timesheet)\n      activity = new_timesheet.activities.first\n      time_entry_1 = build(:time_entry, activity: activity, workdate: Date.today.beginning_of_week, worktime: 1.0)\n      activity_2 = build(:activity, timesheet: new_timesheet)\n      time_entry_2 = build(:time_entry, activity: activity_2, workdate: Date.today.beginning_of_week, worktime: 1.0)\n      expect(new_timesheet).to_not be_valid      \n    end    \n  end\n```\n\nYou can see corresponding factories for more details(..spec/factories). In short, when creating a timesheet, a build one activity with one day (monday) and worktime set to 1 by default. Hope this helps.\n", "created_at": "2013-03-28 13:29:45", "user": 83579, "id": 15588227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16431603", "text": "The problem is still there. It seems that validation at the Timesheet level is ignored because the corresponding association is empty and its parent is not yet assigned. Something like that was already discussed at https://github.com/rails/rails/issues/5061. As far as I understand, there is no way for the moment to validate it, right?\n", "created_at": "2013-04-16 08:07:57", "user": 83579, "id": 16431603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16444492", "text": "Finally, after digging a little bit, it is not a bug but a Rails validation behaviour. I came to the following validation method by changing the call from the activity level (calling the nested association from the :through always gives an empty array):\n\n```\nclass Timesheet < ActiveRecord::Base\nhas_many :activities, dependent: :destroy, inverse_of: :timesheet\n  has_many :time_entries, through: :activities\n  accepts_nested_attributes_for :activities, allow_destroy: true\n\n  validates :status, presence: true, inclusion: {in: STATUS_VALUES}  \n  validates :user_id, :start_date, :end_date, presence: true\n\n  validate do\n    check_activities_presence\n    check_for_overworked_day\n  end\n...\nprivate\n\n    def activities_count_valid?\n      activities.reject(&:marked_for_destruction?).count >= 1\n    end\n\n    def check_activities_presence\n      unless activities_count_valid?\n        errors.add(:base, \"You should have at least ONE activity present\")\n      end\n    end\n\n    def check_for_overworked_day\n      worktime_hash = Hash.new(0)\n      activities_not_marked_for_destruction = activities.reject(&:marked_for_destruction?)\n      activities_not_marked_for_destruction.each do |activity|\n        activity.time_entries.each do |time_entry|\n          worktime_hash[time_entry.workdate] += time_entry.worktime\n          if worktime_hash[time_entry.workdate] > 1\n            errors[:base] << \"Maximum daily time should not exceed 1 day\" \n            break\n          end\n        end\n      end\n    end\nend\n```\n\nSure, may be there is a more elegant way, I'll find it one day:)\n", "created_at": "2013-04-16 13:29:26", "user": 83579, "id": 16444492}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Assume we've got three models:\n\n```\nclass Payment < ActiveRecord::Base\nclass CardPayment < Payment\nclass CreditCardPayment < CardPayment\n```\n\nAssume that at least one CreditCardPayment have been added to database.\n\nRun console:\n\n```\n>> CardPayment.last\n  CardPayment Load (0.2ms)  SELECT \"payments\".* FROM \"payments\" WHERE \"payments\".\"type\" IN ('CardPayment') ORDER BY \"payments\".\"id\" DESC LIMIT 1\n=> nil\n>> CardPayment.descendants\n=> []\n>> CreditCardPayment.last\n  CreditCardPayment Load (0.5ms)  SELECT \"payments\".* FROM \"payments\" WHERE \"payments\".\"type\" IN ('CreditCardPayment') ORDER BY \"payments\".\"id\" DESC LIMIT 1\n=> #<CreditCardPayment id: 1, type: \"CreditCardPayment\", created_at: \"2013-03-26 15:19:08\", updated_at: \"2013-03-26 15:19:08\">\n>> CardPayment.descendants\n=> [CreditCardPayment(id: integer, type: string, created_at: datetime, updated_at: datetime)]\n\n```\n\nSo the middle sti model `CardPayment` does not have descendants till `CreditCardPayment` will be called. Problem is fixed when preloaded , what do you think?\n", "labels": [], "number": 9935, "updated_at": "2014-07-04 15:44:45", "user": 116947, "closed_at": "2013-03-26 15:54:18", "id": 12455172, "title": "Fix STI descentants by constantizing models", "url": "https://api.github.com/repos/rails/rails/issues/9935", "created_at": "2013-03-26 15:46:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15466855", "text": "AR is lazy you cannot just eager load the models.\n\nOne of the possible ways to solve this is by calling `require_dependency` in selected files of the STI hierarchy.\n", "created_at": "2013-03-26 15:53:56", "user": 3387, "id": 15466855}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Asia/Ulaanbaatar mapping is incorrect in ActiveSupport, in file activesupport/lib/active_support/values/time_zone.rb\n\n\"Ulaan Bataar\" => \"Asia/Ulaanbaatar\" should read \"Ulaanbaatar\" => \"Asia/Ulaanbaatar\"\n\nThanks\n", "labels": ["activesupport"], "number": 9936, "updated_at": "2013-03-26 16:36:04", "user": 115309, "closed_at": "2013-03-26 16:32:59", "id": 12457246, "title": "Asia/Ulaanbaatar is incorrect mapping", "url": "https://api.github.com/repos/rails/rails/issues/9936", "created_at": "2013-03-26 16:27:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15469534", "text": "@rafaelfranca Thank you very much :)\n", "created_at": "2013-03-26 16:34:22", "user": 115309, "id": 15469534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15469662", "text": "Thank you!!\n\nRafael Mendonça França\nhttp://twitter.com/rafaelfranca\nhttps://github.com/rafaelfranca\n\nOn Tue, Mar 26, 2013 at 1:34 PM, Zolzaya Erdenebaatar <\nnotifications@github.com> wrote:\n\n> @rafaelfranca https://github.com/rafaelfranca Thank you very much :)\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/9936#issuecomment-15469534\n> .\n", "created_at": "2013-03-26 16:36:04", "user": 47848, "id": 15469662}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixes #9936.\n\nFor reference, here is the info:\nhttp://www.timeanddate.com/library/abbreviations/timezones/asia/ulat.html\n", "labels": [], "number": 9937, "updated_at": "2014-06-26 19:58:53", "user": 115309, "closed_at": "2013-03-26 16:32:58", "id": 12457489, "title": "Asia/Ulaanbaatar is incorrect mapping", "url": "https://api.github.com/repos/rails/rails/issues/9937", "created_at": "2013-03-26 16:31:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nIs there any reason to not having the methods #symbolize_keys! & #deep_symbolize_keys! in the HashWithIndifferentAccess API ?\n\nThanks.\n\nP.S: I would be glad to implement this if needed.\n", "labels": ["activesupport"], "number": 9938, "updated_at": "2017-05-23 14:30:50", "user": 1465371, "closed_at": "2013-03-26 17:16:40", "id": 12458542, "title": "No #symbolize_keys! & #deep_symbolize_keys! for HashWithIndifferentAccess", "url": "https://api.github.com/repos/rails/rails/issues/9938", "created_at": "2013-03-26 16:53:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15471344", "text": "Why you want to symbolize the keys of a hash that doesn't have distinction between symbol keys and string keys?\n\nThat question is the reason. I still think we don't need this.\n", "created_at": "2013-03-26 17:01:53", "user": 47848, "id": 15471344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15471716", "text": "Good question.\n\nIn fact we already have  : #stringify_keys!,  #deep_stringify_keys! & #symbolize_keys so if there is already this methods why not having #symbolize_keys! & #deep_symbolize_keys! ?\n\nThe second reason is that when I use the #keep_if method it uses the String keys and I prefer Symbols.\n", "created_at": "2013-03-26 17:07:46", "user": 1465371, "id": 15471716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15472249", "text": "This is done by design. See https://github.com/rails/rails/blob/master/activesupport/lib/active_support/hash_with_indifferent_access.rb#L224-225\n\nAs these methods are destructive and the internal storage of the keys on HWIA are strings, allowing users to changing the storage to symbols will make the hash to stop to work.\n", "created_at": "2013-03-26 17:16:40", "user": 47848, "id": 15472249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15472530", "text": "Ok good point. Thanks :)\n", "created_at": "2013-03-26 17:20:39", "user": 1465371, "id": 15472530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/303416663", "text": "@rafaelfranca, what would you think about me implementing those methods and simply returning `self`? This would at least provide a level of confidence that `HashWithIndifferentAccess` would respond to the same methods as its super class. I'm more than happy to implement this. ", "created_at": "2017-05-23 14:30:49", "user": 5104499, "id": 303416663}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 9939, "updated_at": "2014-06-26 19:58:55", "user": 779128, "closed_at": "2013-03-26 18:14:20", "id": 12462295, "title": "Fixing some typo(s)/grammar.", "url": "https://api.github.com/repos/rails/rails/issues/9939", "created_at": "2013-03-26 18:09:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [92044]}, "text": "The HTTP standard clearly states that higher specificity mime-types should take precedence, when multiple mimetypes is supplied. This is not the case with the current version of rails (cloned of master branch).\n\n```\ncurl http://localhost:3000/entries --header \"Accept:application/json, text/plain\"\n```\n\nshould return json, and in fact does so. While\n\n```\ncurl http://localhost:3000/entries --header \"Accept:application/json, text/plain, */*\"\n```\n\nshould still return json, since the `*/*` is less specific, but this returns html.\n\nHere is [a test application](https://github.com/ekampp/accept-header-specificity-test) where this can be tested.\n", "labels": ["actionpack", "attached PR"], "number": 9940, "updated_at": "2018-03-23 09:15:14", "user": 40206, "closed_at": "2015-08-25 06:02:31", "id": 12469627, "title": "Multiple accept headers' specificity is misinterpreted", "url": "https://api.github.com/repos/rails/rails/issues/9940", "created_at": "2013-03-26 20:29:27", "comments": [{"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15487759", "text": "It seems that `Mime::Type.parse(\"Accept: application/json, text/plain, */*\")` simply parses the mime types in accordance to their position in the string, not their individual specificity.\n\n```\n=> [ #<Mime::Type:0x007fdabc15d7d8 @synonyms=[], @symbol=nil, @string=\"Accept: application/json\">, \n     #<Mime::Type:0x007fdabc42be38 @synonyms=[], @symbol=:text, @string=\"text/plain\">, \n     #<Mime::Type:0x007fdabc06e458 @synonyms=[], @symbol=nil, @string=\"*/*\">]\n```\n", "created_at": "2013-03-26 20:52:06", "user": 40206, "id": 15487759}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15493516", "text": "It seems that [mime negotiation](https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L123) completely ignores any previously, valid, available mimetype, and skips any check, if there is a `*/*` in the accept header.\n", "created_at": "2013-03-26 22:41:12", "user": 40206, "id": 15493516}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15498748", "text": "Thanks! I agree this needs fixed.\n", "created_at": "2013-03-27 01:06:17", "user": 27786, "id": 15498748}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15516108", "text": "@ekampp You are right . Rails completely ignores mime negotiation if `*/*` is present in accept header. And here is the reason why http://blog.bigbinary.com/2010/11/23/mime-type-resolution-in-rails.html .\n\nThis is by design. \n\nI don't think it's a bug . I'll let @josevalim confirm it .\n", "created_at": "2013-03-27 10:34:04", "user": 6399, "id": 15516108}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15517274", "text": "I read that blog as well. The problem is that opting out of mime type negotiation simply because there is a catch-all in there is wrong according to the specifications of HTTP. \n\nI'm thinking that we could check if any valid mime types has been found in the accept header, and if so use them, else opt out and return html. Allthough, I'm still a little unsure as to how we should determine which of the found, valid mime types that's more specific than others. The simple approach seems to be to negotiate all non-star (*) types before any star types.  \n", "created_at": "2013-03-27 11:03:57", "user": 40206, "id": 15517274}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15517503", "text": "@ekampp you are right we should follow HTTP specification. However the problem is the browser vendors are not following it very strictly. Rails team has gone through a number of iterations on accept header issue.\n\nAs suggested in the blog if things are in your control then  please use `.json`  in your requests.\n", "created_at": "2013-03-27 11:10:00", "user": 6399, "id": 15517503}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15517671", "text": "How so, do you mean \"[...] not following very strictly\"? \n", "created_at": "2013-03-27 11:14:10", "user": 40206, "id": 15517671}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15517968", "text": "Safari sends following order\n\n```\napplication/xml (q is 1)\napplication/xhtml+xml (q is 1)\nimage/png (q is 1)\ntext/html (q is 0.9)\ntext/plain (q is 0.8)\n\\*/\\* (q is 0.5)\n```\n\nSo you visit www.myappp.com in safari and if the app supports `.xml` then Rails should render `.xml` file. This is not what user wants to see. User wants to see .html page not .xml page. \n", "created_at": "2013-03-27 11:19:39", "user": 6399, "id": 15517968}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15518202", "text": "All right. So how could we approach the issue to allow clients that do know what they are talking about, to negotiate the right content with the server? \n", "created_at": "2013-03-27 11:25:11", "user": 40206, "id": 15518202}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15518346", "text": "If you lay out the core issue that you are having then we can work towards a solution.\n\nI'm assuming that all the app works fine in all the browsers. \n\nIssue could be you are sending a specific curl or API request. In that case I would suggest to use `.xml` or `.json` format to eliminate accept header parsing issue.\n", "created_at": "2013-03-27 11:28:57", "user": 6399, "id": 15518346}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15518555", "text": "The specific problem is that angularjs sends correct content negotiation when trying to grab content, which rails picks up wrong. So i'm getting html back, when I should be getting json back.\n\nI could add `.json` on the end, but that would mean hacking away at angularjs, which is doing the right thing. I would rather find a good solution and hack away at rails, which is doing the wrong thing :) \n\n@steveklabnik do you have a good idea for a solution here?  \n", "created_at": "2013-03-27 11:34:18", "user": 40206, "id": 15518555}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15519162", "text": "I will have to look at code to be sure but the rule that `*/*` trumps all is applied only when the request is not an ajax request. So if you are making ajax request then you should be good.\n", "created_at": "2013-03-27 11:51:39", "user": 6399, "id": 15519162}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15519374", "text": "Yes. I saw that. But that seems to be not quite right either. \n\nI would love to look into it my self, but I'm unsure on how I test those deeper parts of rails. So if you have some pointers, I will get on hacking away at it my self :) \n", "created_at": "2013-03-27 11:57:46", "user": 40206, "id": 15519374}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15519487", "text": "Rails guide has a section on contributing to rails. http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html . You can change/add tests and see how it behaves. \n", "created_at": "2013-03-27 12:01:17", "user": 6399, "id": 15519487}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15521080", "text": "Oh. What I meant was I'm having a hard time isolating the mime type stuff, so I can manipulate that specifically. The guide doesn't offer much help in that section. How do I instantiate the part of rails that does the content negoitation. \n\nI'm guessing that curling the application isn't good enough a test. I need to test the individual methods of the content negotiation modules, right? \n", "created_at": "2013-03-27 12:45:57", "user": 40206, "id": 15521080}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15521460", "text": "Related? https://github.com/rails/rails/pull/7464\n", "created_at": "2013-03-27 12:54:32", "user": 160962, "id": 15521460}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15522120", "text": "Yes. They are indeed related — thank you! \n\nThe code attached there solves the issue in parts: It solves the problem of opting out when `*/*` appears, which is an immediate solution to my problem. \n\nBut another aspect of the problem still persists, that rails doesn't take into consideration the relative specificity of the accept headers.\n", "created_at": "2013-03-27 13:09:39", "user": 40206, "id": 15522120}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15523645", "text": "@neerajdotname As mentioned in #7464 and https://bugs.webkit.org/show_bug.cgi?id=27267 that accept preference has been fixed 2 years ago.\n\nMy Safari sends:\n\n```\nHTTP_CONNECTION:keep-alive\nHTTP_CONTENT_LENGTH:0\nHTTP_ACCEPT:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nHTTP_ACCEPT_ENCODING:gzip, deflate\nHTTP_ACCEPT_LANGUAGE:pl-pl\nHTTP_USER_AGENT:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/536.26.17 (KHTML, like Gecko) Version/6.0.2 Safari/536.26.17\n```\n\nMy Chrome sends:\n\n```\nHTTP_CONNECTION:keep-alive\nHTTP_CONTENT_LENGTH:0\nHTTP_ACCEPT:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nHTTP_ACCEPT_CHARSET:UTF-8,*;q=0.5\nHTTP_ACCEPT_ENCODING:gzip,deflate,sdch\nHTTP_ACCEPT_LANGUAGE:pl-PL,pl;q=0.8,en-US;q=0.6,en;q=0.4\nHTTP_USER_AGENT:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.172 Safari/537.22\n```\n", "created_at": "2013-03-27 13:41:55", "user": 116740, "id": 15523645}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15524049", "text": "@pawelpacana indeed looks like the newer version of browsers have this problem fixed. \n\nI guess the question is do we want to break newer Rails application for people using older versions of browser.\n", "created_at": "2013-03-27 13:49:46", "user": 6399, "id": 15524049}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15524083", "text": "So the discussion becomes how many browsers, and how far back rails should support. \n\nI don't really have a good way of testing ie, but my Opera sends this:\n\n```\nUser-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.8.3) Presto/2.12.388 Version/12.14\nAccept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1\nAccept-Language: en,en-US;q=0.9,ja;q=0.8,fr;q=0.7,de;q=0.6,es;q=0.5,it;q=0.4,pt;q=0.3,pt-PT;q=0.2,nl;q=0.1\nAccept-Encoding: gzip, deflate\nConnection: Keep-Alive\n```\n", "created_at": "2013-03-27 13:50:20", "user": 40206, "id": 15524083}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15524197", "text": "As @pawelpacana noted, the problem has been fixed for over two years on webkit, i suggest that we begin to look at a way to then properly support the correct implementation of the accept headers.\n", "created_at": "2013-03-27 13:52:36", "user": 40206, "id": 15524197}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15527372", "text": "I'm thinking that we could determine which of the supplied, accepted mime types that doesn't include a star, parse those first according to their weighting, then parse all with a single star according to their weighting, and then, if nothing else is given, fall back to html. \n", "created_at": "2013-03-27 14:45:42", "user": 40206, "id": 15527372}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15638293", "text": "I used [browserstack](http://www.browserstack.com/) and @pawelpacana [tool](https://github.com/pawelpacana/webmachine-headers-test) to create list of accept-headers. I received 160 answers from browsers\n\nhttps://gist.github.com/LTe/5270348\n\nUniq headers:\n\n```\n\"text/html, application/xml;q=0.9\",\n\"text/html, application/xhtml+xml, */*\",\n\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n\"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1\",\n\"text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1\",\n\"application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\",\n\"*/*\"\n```\n\nI also updated my branch [click](https://github.com/LTe/rails/compare/178a6857997ec285ef774e1266dff915dcd65d47...mime_negotiation)\n\n> So you visit www.myappp.com in safari and if the app supports .xml then Rails should render .xml file. This is not what user wants to see. User wants to see .html page not .xml page.\n\n@neerajdotname when safari send\n\n```\napplication/xml (q is 1)\napplication/xhtml+xml (q is 1)\nimage/png (q is 1)\ntext/html (q is 0.9)\ntext/plain (q is 0.8)\n\\*/\\* (q is 0.5)\n```\n\nRails will send html as response. Because `application/xhtml+xml` at this point is the most important. For rails `application/xhtml+xml == text/html`\n\n> If more than one media range applies to a given type, the most specific reference has precedence.\n> http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\n", "created_at": "2013-03-29 12:04:58", "user": 160962, "id": 15638293}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15638556", "text": "@LTe clearly it looks like browsers have gotten their act together. As mentioned earlier if Rails starts doing the right thing then it will break older browsers. \n", "created_at": "2013-03-29 12:15:58", "user": 6399, "id": 15638556}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15638666", "text": "@neerajdotname can you give example of older browser with very-wrong accept-header?\n", "created_at": "2013-03-29 12:20:01", "user": 160962, "id": 15638666}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15638702", "text": "older version of safari had `image/png` at higher priority over `text/html`. \n", "created_at": "2013-03-29 12:22:00", "user": 6399, "id": 15638702}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15640360", "text": "@LTe \n\n```\napplication/xml (q is 1)\napplication/xhtml+xml (q is 1)\nimage/png (q is 1)\ntext/html (q is 0.9)\ntext/plain (q is 0.8)\n\\*/\\* (q is 0.5)\n```\n\nYou mentioned that in that above case the `application/xhtml+xml`  is the most important one.  Is it because that one has `+` sign. In the RFC I do not see anywhere being mentioned that one with `+` is even more specific.\n\nMay be I am wrong but I think all the top three are equally specific.\n", "created_at": "2013-03-29 13:21:42", "user": 6399, "id": 15640360}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15641253", "text": "> When a new media type is introduced for an XML-based format, the name of the media type SHOULD end with '+xml'.\n> http://tools.ietf.org/html/rfc3023#section-7\n\nIn this case, you're right. The question is what the author had in mind here? https://github.com/rails/rails/commit/69723138ad67a3c0b708b907f2831531cf87e55b#L0R108\n\n@dhh do this: https://github.com/rails/rails/commit/06c2b43f36c84ddd3e17ada057b3dc621d4140f0\n\nCommit message linked to: http://www.xml.com/pub/a/2004/07/21/dive.html\n\n> According to RFC 3023, if the media type given in the Content-Type HTTP header is application/xml, application/xml-dtd, application/xml-external-parsed-entity, or any one of the **subtypes** of application/xml such as application/atom+xml or application/rss+xml or even application/rdf+xml\n", "created_at": "2013-03-29 13:47:52", "user": 160962, "id": 15641253}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15724588", "text": "Again, @LTe that solution looks promising to me. \n", "created_at": "2013-04-01 17:04:34", "user": 40206, "id": 15724588}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17209258", "text": "What was the consensus here? Should `Rails` change to respect the mimetype order? Or is there still an issue with older browsers? Do we support those older browsers?\n", "created_at": "2013-04-30 04:39:04", "user": 162976, "id": 17209258}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17271127", "text": "I seems, that there is not issue with the newer browsers (everything newer than two or three years) as demonstrated by @LTe, but there might be an issue with older browsers if Rails does decide to respect the correct interpretation of mime types. \n\nIMHO Rails hasn't been scared of moving forward instead of backwards before, and they shouldn't need to be now. \n", "created_at": "2013-05-01 07:06:54", "user": 40206, "id": 17271127}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20255191", "text": "Hello, everyone!\nI get http-header from IE 8: \nAccept: image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, */*\nAnd I expect section  format.jpeg will work here:\n\n```\nrespond_to do |format|\n  if @picture.save\n    @result = [@picture.uploader_settings]\n    format.html { ...... }\n    format.jpeg { ....... }\n```\n\nBut now section format.html works instead.\nHow can I fix it?\nThank you\n", "created_at": "2013-06-30 20:53:00", "user": 495449, "id": 20255191}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23781997", "text": "Just to stir things up a bit. \n\nI am having the same issue in a situation where a plugin using jQuery's default `ajaxSettings`, that have a trailing `*/*` , and a request that goes through a proxy that strips the `HTTP_X_REQUESTED_WITH`, result in an HTML response.\n\nI understand the argument for backwards compatibility, even though I don't think it holds water anymore. There are at least two situations, cross-domain as per #7464 and my own proxy issues, where  `X-Requested-With` (a [non standard header](http://en.wikipedia.org/wiki/List_of_HTTP_header_fields))  is stripped away, resulting in HTML. Cross-domain AJAX, and CORS specifically, is, well, \"The future\". Three year old browsers, not so much.\n\nWould any of the following solutions be acceptable by the core?\n1. Specifically match the entire offending Accept headers from older browsers and serve HTML only in that case\n2. Like 1 but also sniff the browser to match (seems like a partial implementation of this exists [here](https://github.com/rails/rails/blob/master/actionpack/test/dispatch/mime_type_test.rb#L84) but is trumped by `BROWSER_LIKE_ACCEPTS`\n3. Like 1 or 2 but as an extracted gem?\n\n/cc @steveklabnik @neerajdotname \n", "created_at": "2013-09-04 11:21:34", "user": 736, "id": 23781997}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23808528", "text": "as a gem is CERTAINLY a good idea, I'm not sure that we can effectively select just the older browsers.\n", "created_at": "2013-09-04 17:35:10", "user": 27786, "id": 23808528}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23814199", "text": "A gem seems like a good idea. Who's up for stitching one together? \n", "created_at": "2013-09-04 18:50:36", "user": 40206, "id": 23814199}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23815042", "text": "@izumeroot which version of Rails you tested your code with ?\n", "created_at": "2013-09-04 19:01:39", "user": 6399, "id": 23815042}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23863591", "text": "Ok. Since I started the issue, I'll be happy to build a gem :smiley: \n\n@christos do you have time to join up in a collab on this one? \n", "created_at": "2013-09-05 12:21:55", "user": 40206, "id": 23863591}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23932390", "text": "@ekampp Sure thing. I have a branch in my rails for with a failing test: https://github.com/christos/rails/commit/827921ff218186773d49cd65130446757d0dc31d Or maybe we should start with @LTe 's pull request: https://github.com/rails/rails/pull/7464\n\n Not sure about the scope of the gem though. Should it just fix the \"Missing `HTTP_X_REQUESTED_WITH`\" issue or also remove [these](https://github.com/rails/rails/blob/master/actionpack/test/dispatch/mime_type_test.rb#L84) hacks?\n", "created_at": "2013-09-06 10:54:37", "user": 736, "id": 23932390}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23935048", "text": "@christos, in my personal opinion, and based on the information from the numerous tests in this comments track, it seems that modern browsers does adhere to mime types, so I think that we should try and remove all the hacks, and make a clean, correct implementation of the mime type interpretation. \n\nI'm avare that this will break backwards compatibility, but since it's a gem, it will be optionally available to those, using moderne clients. \n", "created_at": "2013-09-06 11:56:55", "user": 40206, "id": 23935048}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23940596", "text": "> modern browsers does adhere to mime types, so I think that we should try and remove all the hacks, and make a clean, correct implementation of the mime type interpretation\n\n@ekampp Looking forward to this gem. You may want to have a look how https://github.com/seancribbs/webmachine-ruby/blob/master/lib/webmachine/decision/conneg.rb does it.\n", "created_at": "2013-09-06 13:44:40", "user": 116740, "id": 23940596}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23950931", "text": "Doesn [this loop](https://github.com/seancribbs/webmachine-ruby/blob/master/lib/webmachine/decision/conneg.rb#L22) return on the first found media type, not necessarily the most correct one? \n", "created_at": "2013-09-06 16:06:57", "user": 40206, "id": 23950931}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35347272", "text": "So a year on and still no solution other than forcing mime type in API controllers?\n", "created_at": "2014-02-18 02:45:53", "user": 1037460, "id": 35347272}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35360252", "text": "Yes. Unfortunately. I, personally have implemented a patch, which effectively stops rails from defaulting to html, simply because there is a `*` in the Accept header. \n", "created_at": "2014-02-18 07:51:49", "user": 40206, "id": 35360252}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37990894", "text": "We're running into this problem in our production environment. Given that browsers have cleaned up their act within the past two years, rails properly supports q values, _and_ the `ignore_accept_header` directive is available for folks who want to completely opt-out of content negotiation, I think the backwards compatibility argument is flimsy.\n\nAnother proposal I have is to add another directive `ignore_browser_accept_header` and default to `true`. For those who are not concerned about supporting browser with incorrect mime-types, we could set `ignore_browser_accept_header = false`. This would also buy time to set proper deprecation messages when its time for this to become a default when the Rails team is ready to do so.\n\n@christos or @ekampp have either of you hacked a gem together for this yet?\n", "created_at": "2014-03-18 21:28:41", "user": 4628, "id": 37990894}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/37993346", "text": "FYI the code in question in rails internals is:\n\n``` ruby\nBROWSER_LIKE_ACCEPTS = /,\\s*\\*\\/\\*|\\*\\/\\*\\s*,/\n\ndef valid_accept_header\n  (xhr? && (accept.present? || content_mime_type)) ||\n    (accept.present? && accept !~ BROWSER_LIKE_ACCEPTS)\nend\n```\n\nfrom https://github.com/rails/rails/blob/47c3e06c6a17ec1408843975a280e10f12307b08/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L137-L142 and\n\n``` ruby\ndef formats\n  @env[\"action_dispatch.request.formats\"] ||=\n    if parameters[:format]\n      Array(Mime[parameters[:format]])\n    elsif use_accept_header && valid_accept_header\n      accepts\n    elsif xhr?\n      [Mime::JS]\n    else\n      [Mime::HTML]\n    end\nend\n```\n\nfrom https://github.com/rails/rails/blob/47c3e06c6a17ec1408843975a280e10f12307b08/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L60-L61\n", "created_at": "2014-03-18 21:50:22", "user": 4628, "id": 37993346}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39110096", "text": "I've just submitted #14540 in order to start addressing the deficiency with Rails mime parsing, notes are attached there.\n", "created_at": "2014-03-31 16:34:48", "user": 324744, "id": 39110096}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48566485", "text": ":+1: looking forward to this fix.\n\nThis is really confusing behavior and should be easier to find information on it.  I've wasted so much time expecting rails to do the 'right thing' in terms of content type negotiation! :angry:\n\nAfter reading this it's understandable why this isn't an easy fix though - just looking forward to the aforementioned gem or an option to disable.\n", "created_at": "2014-07-10 05:23:48", "user": 1121058, "id": 48566485}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48782913", "text": "nexmo (and essentially all other voxeo based cloud apps) sending the following:\n\n```\nuser-agent:  Voxeo-VXML/13.0.9.4.77184\naccept:  application/voicexml+xml, application/srgs+xml, application/srgs, text/x-vxml, */*\ncontent-type: application/x-www-form-urlencoded\n```\n\nI have registered those via `Mime::Type.register 'application/voicexml+xml', :xml, %w(text/x-vxml)`\n\nNow, please bring my XML processing back.\nAs for now, it just completely ignores format.xml{} block. Thanks.\n", "created_at": "2014-07-11 21:05:26", "user": 748075, "id": 48782913}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48795191", "text": "@celesteking Are you saying that that used to work and with my PR now fails, or is this a separate issue?\n", "created_at": "2014-07-11 23:48:28", "user": 324744, "id": 48795191}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48807642", "text": "@kreynolds, I'm on rails 3.x. Made a workaround by issuing xml response with text/html type, but that's, erm, completely wrong.\n", "created_at": "2014-07-12 10:14:39", "user": 748075, "id": 48807642}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48809101", "text": "@celesteking OK yah, thats a separate issue then. The mime handling in rails is broken at almost every level but I figured a good place to start would be fixing the header parsing/ordering. If this gets merged I can start moving back up the stack, fixing things as I go.\n", "created_at": "2014-07-12 11:36:59", "user": 324744, "id": 48809101}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50248489", "text": "same issue in rails 4.1. I get html instead of json with the following http header:\n`Accept:application/json, text/plain, */*`\nThis is issued by default by angularjs.  Therefore angularjs apps won't work with a rails backend out of the box.\n", "created_at": "2014-07-26 21:00:23", "user": 260555, "id": 50248489}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50250567", "text": "@nakhli I found that overriding [this](https://github.com/LTe/rails/blob/4848013178abc7bc9e7dc54c17b6d237ce8fdd61/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L122) will fix the problem for now, if you need your angular app or emberjs app to work properly. \n", "created_at": "2014-07-26 22:38:43", "user": 40206, "id": 50250567}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/50250925", "text": "@ekampp thank you this is useful.\n", "created_at": "2014-07-26 22:59:50", "user": 260555, "id": 50250925}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54787604", "text": "I ran into the same issue as @nakhli. Latest version of rails + latest version of angular + jbuilder = broken by default.\n", "created_at": "2014-09-08 08:09:32", "user": 4126, "id": 54787604}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54788160", "text": "There is a simple workaround for fixing it on the angular side. Fixing it on the rails side isn't so simple. I hope this gets fixed soon or a simple workaround gets posted.\n", "created_at": "2014-09-08 08:16:07", "user": 4126, "id": 54788160}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/57396567", "text": "Just ran into this problem on a system that is largely API oriented so I don't render HTML and the error message makes this even harder to diagnose:\n\n```\nCompleted 406 Not Acceptable in 103ms\n\nActionController::UnknownFormat (ActionController::UnknownFormat):\n  app/controllers/data_imports_controller.rb:5:in `show'\n```\n\nI get that this doesn't _seem_ like a very big issue, but from a usability standpoint for people building (as is more and more common) backend APIs to support front-end javascript frameworks this is a big time waster when it happens and there is no clear diagnosis. \n\nAs a stopgap would a clearer diagnosis error be acceptable?\n\n```\nCompleted 406 Not Acceptable in 103ms\n\nActionController::UnknownFormat (ActionController::UnknownFormat): Format requested: \"html\" from accept header \"application/json, text/plain, */*\"\n```\n\nThat extra detail would have at least pointed me in the right direction.\n\nAlso as a solution that doesn't involve changing the AngularJS sent headers I have my API calls all scoped in `routes.rb`:\n\n```\nscope '/api', defaults: { format: :json } do\n...\n```\n\nWhich pretty much eliminates this issue entirely.\n", "created_at": "2014-09-30 23:03:43", "user": 156449, "id": 57396567}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62961166", "text": "Looks like a clear step forward with a more self-describing exception to me. Mind if I provide a small patch for it?\n", "created_at": "2014-11-13 20:33:31", "user": 9337, "id": 62961166}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62962033", "text": "@rud This and many more bugs are fixed in #14540 .. lets try to get that in and start negotiating properly instead of adding any exceptions at all\n", "created_at": "2014-11-13 20:39:24", "user": 324744, "id": 62962033}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/115412352", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-06-25 21:59:03", "user": 7468109, "id": 115412352}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/126542316", "text": "I'm not seeing this issue happen in Rails 4.2.1 - even with `Accept: application/json, text/javascript, */*` Rails will respond with JSON.\n\nHowever, when using CORS, it breaks.\n\nStarting from a plain Rails project, I have the following in my `ApplicationController`:\n\n```\n  before_filter :cors_preflight_check\n  after_filter :cors_set_access_control_headers\n\n  def cors_set_access_control_headers\n    headers['Access-Control-Allow-Origin'] = '*'\n    headers['Access-Control-Allow-Methods'] = 'POST, GET, PUT, DELETE, OPTIONS'\n    headers['Access-Control-Allow-Headers'] = 'Origin, Content-Type, Accept, Authorization, Token'\n    headers['Access-Control-Max-Age'] = \"1728000\"\n  end\n\n  def cors_preflight_check\n    if request.method == 'OPTIONS'\n      headers['Access-Control-Allow-Origin'] = '*'\n      headers['Access-Control-Allow-Methods'] = 'POST, GET, PUT, DELETE, OPTIONS'\n      headers['Access-Control-Allow-Headers'] = 'X-Requested-With, X-Prototype-Version, Token'\n      headers['Access-Control-Max-Age'] = '1728000'\n\n      render :text => '', :content_type => 'text/plain'\n    end\n  end\n```\n\nAnd in my `ProductsController`:\n\n```\nclass ProductsController < ApplicationController\n  def index\n    respond_to do |format|\n      format.html\n      format.json { render json: {msg: \"it worked\"} }\n    end\n  end\nend\n```\n\nIssuing `$.ajax('/products')` from `http://localhost:3000/` sends `Accept: */*` and Rails responds with HTML.\n\nIssuing `$.ajax({url: 'products', dataType: 'json'})` from `http://localhost:3000/` sends `Accept: application/json, text/javascript, */*` and Rails responds with JSON.\n\nThat's fine.\n\nNow from any other domain:\n\nIssuing `$.ajax('http://localhost:3000/products')` from any other domain sends `Accept: */*` and Rails responds with HTML.\n\nIssuing `$.ajax({url: 'http://localhost:3000/products', dataType: 'json'})` from any other domain sends `Accept: application/json, text/javascript, */*` and Rails responds with **HTML** when it should respond with **JSON**.\n", "created_at": "2015-07-31 02:07:00", "user": 3767534, "id": 126542316}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/126590150", "text": "Hi @demsullivan! I think issue only appear when you make **non-ajax** HTTP request (like API does) with application/json accept header.\n", "created_at": "2015-07-31 07:16:45", "user": 160962, "id": 126590150}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/130321897", "text": "I have the same issue as @demsullivan (on 3.2.8). \n@LTe not sure what you mean by non-ajax request. \nAre CORS Ajax not considered ajax?\n", "created_at": "2015-08-12 14:29:01", "user": 512939, "id": 130321897}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/132998110", "text": "@demsullivan I believe you're right. But this is also quite an old issue. And they removed the implicit mime-type response out of Rails, and into the `responders` gem. So in your example you're explicitly responding with json. \n", "created_at": "2015-08-20 12:53:07", "user": 40206, "id": 132998110}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/132998399", "text": "I have updated the initial example to rails 4.2.3, which supports the results found by @demsullivan \n", "created_at": "2015-08-20 12:53:56", "user": 40206, "id": 132998399}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/134490793", "text": "This issue has been automatically closed because of inactivity.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-08-25 06:02:32", "user": 7468109, "id": 134490793}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182554410", "text": "This is still an issue. If `*/*` is present in the Accept header, it will skip content negotiation, even if more suitable mime-types precede the `*/*` Tested with 4-2-stable.\n", "created_at": "2016-02-10 20:01:07", "user": 92044, "id": 182554410}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182582026", "text": "We unfortunately still have browsers to thank for this behaviour. In IE10 (iirc), any software installed on your system can still prepend something to the accepts query. In other words, we cannot trust accept headers if they have _/_ in them because chances would be that you would serve the wrong page for anyone running on IE.\n", "created_at": "2016-02-10 21:06:08", "user": 9582, "id": 182582026}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182583327", "text": "IE10 is EOL as of January and has less than 3.4% of the market share according to netmarketshare.com.  Shouldn't Rails be concerned about the API use case? It's important to me that I give my clients the best matching content, rather than something that is merely adequate for them: `*/*`\n", "created_at": "2016-02-10 21:11:04", "user": 92044, "id": 182583327}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182620889", "text": "IIRC It is IE10 and older, which means we are looking at least at 15% market share. I haven't checked if they finally fixed the issue on IE11.\n", "created_at": "2016-02-10 22:56:26", "user": 9582, "id": 182620889}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182626920", "text": "What exactly is the accept header causing bad behavior that we're concerned about? When I went through the various browsers previously, everything seemed to Do The Right Thing™. Is our problem here when :format is unspecified, the browser prefers XML over HTML, and the endpoint implements both XML and HTML?\n", "created_at": "2016-02-10 23:03:18", "user": 324744, "id": 182626920}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182630629", "text": "We ran into this problem and wrote a middleware that rewrites the headers to deal with Internet Explorer mime type issues. I just pulled this chunk of code out of our rails repo, MIT licensed it, and am sharing it with you at https://gist.github.com/bradgessler/0958e3f8a17c358263c5 (pardon some of the IE rage in there). Feel free to use that in your own project (or better yet turn it into a gem to share with the rest of the community and post al link on here).\n\nOverall I believe this should belong in a middleware and should not be a rails core team concern.\n", "created_at": "2016-02-10 23:12:57", "user": 4628, "id": 182630629}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182659023", "text": "@bradgessler Nice work. I too prefer that approach.\n", "created_at": "2016-02-11 00:46:29", "user": 92044, "id": 182659023}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182668938", "text": "@bradgessler I agree, rails core should behave correctly and any goofiness belongs elsewhere.\n", "created_at": "2016-02-11 01:37:23", "user": 324744, "id": 182668938}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/357665268", "text": "Still can re-produced on Rails 5.0.0.1.\r\n\r\nRequests with header `Accept: x-any-type/x-any-subtype, */*` has been rewrited as `text/html` here (`ActionDispatch::Http::MimeNegotiation`):\r\n\r\nhttps://github.com/rails/rails/blob/v5.0.0.1/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L77\r\nhttps://github.com/rails/rails/blob/v5.0.0.1/actionpack/lib/action_dispatch/http/mime_negotiation.rb#L159\r\n\r\nIt's very annoying while using api-mode with requesting `Accept: application/json, */*` and return 406 (not acceptable).", "created_at": "2018-01-15 12:08:57", "user": 841969, "id": 357665268}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/357694892", "text": "As a reminder, I have this and several other issues fixed in #14540. I'd be happy to spend the time updating it to merge it cleanly into the main branch if I knew that rails core would accept it. There is no need for a separate gem or middleware or any nonsense like that, the parsing just needs to be correct.", "created_at": "2018-01-15 14:17:56", "user": 324744, "id": 357694892}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374921076", "text": "Cannot believe this is still not fixed in Rails 5.0.6. The following doesn't return JSON:\r\n\r\n    curl 'http://localhost:3000/article/1' -H 'Accept: application/json, */*'\r\n\r\nwith this in the controller:\r\n\r\n    respond_to do |format|\r\n      format.html { render }\r\n      format.json { render json: @article }\r\n    end\r\n\r\nPlease at least reopen the issue.", "created_at": "2018-03-21 12:31:54", "user": 157497, "id": 374921076}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374936185", "text": "I monkey-patched `ActionDispatch::Http::MimeNegotiation`, to skip browser-like accepts check:\r\n\r\n```ruby\r\n# This monkey patch applies to:\r\n#     Rails acts '*/*' in multi-accept types as 'text/html' directly.\r\n# Related to: https://github.com/rails/rails/issues/9940\r\nActionDispatch::Http::MimeNegotiation.send :remove_const, :BROWSER_LIKE_ACCEPTS\r\nActionDispatch::Http::MimeNegotiation.const_set :BROWSER_LIKE_ACCEPTS, /NEVER_MATCHED_MIME_TYPE_LOL/\r\n```", "created_at": "2018-03-21 13:29:16", "user": 841969, "id": 374936185}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375582810", "text": "@mb21 there's no need to reopen this issue. The bug is confirmed -- also by core team members. There is already a branch that fixes this problem, which is open: #14540 ", "created_at": "2018-03-23 08:48:05", "user": 40206, "id": 375582810}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375586943", "text": "@ekampp  I assumed issues would be closed only when they are fixed in master, i.e. when the branch that fixes the bug is merged? Would love to see #14540 merged, but it's been there since 2014 :S", "created_at": "2018-03-23 09:05:07", "user": 157497, "id": 375586943}, {"reactions": {"+1": [92044]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375589458", "text": "Yep, and this issue has been here since 2013. Don't get your hopes up 😉 ", "created_at": "2018-03-23 09:15:14", "user": 40206, "id": 375589458}], "assignees": [], "state": "closed", "is-pull-request": false}
