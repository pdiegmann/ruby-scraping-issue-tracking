{"reactions": {}, "text": "Added tcp connection closing.\nIn case of a greate number of requests no close connection led to a bug.\n", "labels": [], "number": 1, "updated_at": "2014-06-12 15:01:53", "user": 390214, "closed_at": "2011-06-29 05:05:53", "id": 412656, "title": "Trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/1", "created_at": "2010-11-11 11:46:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/535438", "text": "Hi.  Is there any code to reproduce that bug? I want one (if any) because I just want to write a test case on it.\n", "created_at": "2010-11-11 21:18:17", "user": 15377, "id": 535438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/536306", "text": "Hi. You can try this one.\n\nDummy server:\n\n<pre><code>\n#!/usr/bin/ruby\nrequire \"xmlrpc/server\"\n\ns = XMLRPC::Server.new(8080) \ns.add_handler(\"dummy\") do |a|\n    'Yeah'\nend\ns.serve\n</code></pre>\n\n\nClient:\n\n<pre><code>\n#!/usr/bin/ruby\n\nrequire 'xmlrpc/client'\n1000.times{\n    result = XMLRPC::Client.new2('http://localhost:8080/').call( 'dummy', ['Are you here?'])\n    p result\n}\n</code></pre>\n", "created_at": "2010-11-12 07:55:54", "user": 390214, "id": 536306}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/575290", "text": "Hi, we are discussing this.  Please stay tuned…\n", "created_at": "2010-11-30 09:46:50", "user": 15377, "id": 575290}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1455116", "text": "Sorry for late reply.\n\nAxy, you can use call_async instead of call for such case (non Keep-Alive TCP connection which is closed per connection.)\nYeah, I think that method name is awfully confusing but we don't want to touch xmlrpc lib as far as possible.\n", "created_at": "2011-06-28 12:29:01", "user": 44209, "id": 1455116}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1455253", "text": "Ok, tnx for the info.\n\nOn Tue, Jun 28, 2011 at 1:29 PM, nahi <\nreply@reply.github.com>wrote:\n\n> Sorry for late reply.\n> \n> Axy, you can use call_async instead of call for such case (non Keep-Alive\n> TCP connection which is closed per connection.)\n> Yeah, I think that method name is awfully confusing but we don't want to\n> touch xmlrpc lib as far as possible.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ruby/ruby/pull/1#issuecomment-1455116\n\n## \n\nBest regards,\n\nAleksei Kvitinskii\n", "created_at": "2011-06-28 12:55:40", "user": 390214, "id": 1455253}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "net/http rdoc improvements associated with http://redmine.ruby-lang.org/issues/show/4093.\n", "labels": [], "number": 2, "updated_at": "2014-07-14 15:23:51", "user": 2911, "closed_at": "2010-11-30 09:47:07", "id": 441857, "title": "Trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/2", "created_at": "2010-11-27 18:44:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/575291", "text": "I think this has been accepted.\n", "created_at": "2010-11-30 09:47:07", "user": 15377, "id": 575291}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Resolv still has the wrong regex for IPv4\n", "labels": [], "number": 3, "updated_at": "2010-12-08 20:25:27", "user": 5254, "closed_at": "2010-12-25 20:37:40", "id": 463660, "title": "Backport [ruby-core:29501] to 1.8.7 ", "url": "https://api.github.com/repos/ruby/ruby/issues/3", "created_at": "2010-12-08 20:25:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/626492", "text": "Hi, did you try the test case?  I'm experiencing a failure.\n", "created_at": "2010-12-21 05:18:58", "user": 15377, "id": 626492}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/634828", "text": "Hi, sorry I didn't respond before. I'll close this as you already [merged it](http://redmine.ruby-lang.org/repositories/revision/2?rev=30302)! \n\nHappy to see it made it to p330 :)\n", "created_at": "2010-12-25 20:37:40", "user": 5254, "id": 634828}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch adds `FileUtils.ln_r` (recursive hard link). It is patterned after `#cp_r` and I have used it in an app of mine, and thus far it has worked fine.\n\nThe only thing about it that I am not 100% sure, is it's handling of non-file and non-directory file types. I just assumed any other type other than a directory can be hard linked.\n\nAlso I made a note about using `--remove-destination` vs. `--force` I'm not sure why one would be used over the other. `#ln` uses `--force` while `#cp_r` uses `--remove-destination`. I went with the later.\n", "labels": [], "number": 4, "updated_at": "2014-06-19 20:35:44", "user": 23423, "closed_at": "2012-11-18 22:09:44", "id": 489097, "title": "FileUtils.ln_r", "url": "https://api.github.com/repos/ruby/ruby/issues/4", "created_at": "2010-12-22 21:43:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/631067", "text": "\"The only thing about it that I am not 100% sure, is it's handling of non-file and non-directory file types. \"\n\n'its' not 'it's' ;)\n", "created_at": "2010-12-22 23:33:51", "user": 17518, "id": 631067}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/631153", "text": "Hi, can you post it to our redmine?  As this is a new feature matz's approval is required.  Once that's made it's OK for me to pull it into the mainstream.  Thank you.\n\nhttp://redmine.ruby-lang.org/projects/ruby-19/issues/new\n(remember to set the tracker as \"feature\")\n", "created_at": "2010-12-23 00:20:47", "user": 15377, "id": 631153}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/703046", "text": "http://redmine.ruby-lang.org/issues/show/4189\n", "created_at": "2011-01-24 16:40:59", "user": 23423, "id": 703046}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6528664", "text": ":+1:\n\nHaving a convenience function to recursively create hard links based on a source directory is a rare need, but a need, nonetheless. I think FileUtils is a fine place for it when compared to the other choices of where to place it in Ruby core.\n", "created_at": "2012-06-23 21:55:21", "user": 54036, "id": 6528664}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10492775", "text": "Closing this as there is already an [open ticket on redmine](http://bugs.ruby-lang.org/issues/4189)\n", "created_at": "2012-11-18 22:09:44", "user": 277819, "id": 10492775}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Simple fix to some misleading documentation for the tempfile library. The example file paths were wrong.\n", "labels": [], "number": 5, "updated_at": "2014-06-26 10:51:32", "user": 26856, "closed_at": "2011-02-28 04:16:31", "id": 511598, "title": "Documentation update", "url": "https://api.github.com/repos/ruby/ruby/issues/5", "created_at": "2011-01-07 00:38:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/816744", "text": "Merged.  Thank you.\n", "created_at": "2011-02-28 04:16:31", "user": 15377, "id": 816744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit adds a little of syntactic sugar by aliasing / to the + method in Pathname.\n\nExample:\n    require 'pathname'\n    Pathname.pwd / \"directory\" / \"to\" / \"some\" / \"stuff\"\n\nThank you :)\n", "labels": [], "number": 6, "updated_at": "2011-05-22 19:36:19", "user": 24681, "closed_at": "2011-05-22 19:04:27", "id": 513177, "title": "Aliased / to + in Pathname", "url": "https://api.github.com/repos/ruby/ruby/issues/6", "created_at": "2011-01-07 20:20:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1218335", "text": "Glad to see this!\n", "created_at": "2011-05-22 19:36:19", "user": 23423, "id": 1218335}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tiny patch to show exception fault message like all other exceptions should.\n\nShould apply cleanly to all ruby versions since svn: 8258 (git: f1587ee5)\n", "labels": [], "number": 7, "updated_at": "2013-02-21 17:37:30", "user": 150197, "closed_at": "2011-05-27 02:27:57", "id": 528758, "title": "Fix xmlrpc fault message", "url": "https://api.github.com/repos/ruby/ruby/issues/7", "created_at": "2011-01-15 15:03:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1246816", "text": "I think I have already cherry-picked this change.  Thank you.\n", "created_at": "2011-05-27 02:27:57", "user": 15377, "id": 1246816}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13901994", "text": "commit miss :(\n", "created_at": "2013-02-21 17:37:30", "user": 277819, "id": 13901994}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changed \"argumtents\" to \"arguments\"\n", "labels": [], "number": 8, "updated_at": "2014-06-12 13:53:13", "user": 405288, "closed_at": "2011-02-28 03:59:35", "id": 542861, "title": "Fix typo in openssl file", "url": "https://api.github.com/repos/ruby/ruby/issues/8", "created_at": "2011-01-21 23:18:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/816728", "text": "Merged.  Thank you.\n", "created_at": "2011-02-28 03:59:35", "user": 15377, "id": 816728}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have documented some method from TkPhotoImage, based on the original Tcl/Tk docs.\n", "labels": [], "number": 9, "updated_at": "2014-06-24 21:21:13", "user": 498017, "closed_at": "2012-01-03 11:21:54", "id": 591879, "title": "TkPhotoImage documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/9", "created_at": "2011-02-11 13:40:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3338646", "text": "These requests has be merged by r31717\n", "created_at": "2012-01-03 11:21:54", "user": 37002, "id": 3338646}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I was having trouble locating the date formatting and parsing methods recently.  This commit fixes that.\n", "labels": [], "number": 10, "updated_at": "2014-07-22 00:27:26", "user": 2911, "closed_at": "2011-05-27 02:24:03", "id": 612258, "title": "Better date format/parse rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/10", "created_at": "2011-02-20 00:57:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/816770", "text": "No, sorry. I think this is wrong.  Date's strftime is _not_ the same as Time's.\n", "created_at": "2011-02-28 04:29:48", "user": 15377, "id": 816770}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Something wrong with this pull request?\n", "labels": [], "number": 11, "updated_at": "2014-06-14 13:49:52", "user": 263378, "closed_at": "2011-04-22 03:05:50", "id": 663031, "title": "Array#sort! docs missing ! in examples", "url": "https://api.github.com/repos/ruby/ruby/issues/11", "created_at": "2011-03-10 19:37:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1042517", "text": "Merged in r31320, thanks!\n", "created_at": "2011-04-22 03:05:50", "user": 13423, "id": 1042517}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "openssl compiled with « no-ssl2 » the extconf don't fail\nwhen running `make' having this compilation errors:\n\nossl_ssl.c:110:1: error: 'SSLv2_method' undeclared here (not in a function)\nossl_ssl.c:111:1: error: 'SSLv2_server_method' undeclared here (not in a function)\nossl_ssl.c:112:1: error: 'SSLv2_client_method' undeclared here (not in a function)\n\nThanks!\nLaurent\n", "labels": [], "number": 12, "updated_at": "2014-07-19 22:09:33", "user": 98590, "closed_at": "2011-05-04 17:38:54", "id": 739489, "title": "* ext/openssl/extconf.rb: Should check SSLv2_*method", "url": "https://api.github.com/repos/ruby/ruby/issues/12", "created_at": "2011-04-06 21:18:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1078339", "text": "I am running into this issue using RVM to compile ruby 1.9.2-head. Thank you for submitting this patch, I hope it gets merged soon.\n", "created_at": "2011-04-30 04:43:39", "user": 421736, "id": 1078339}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1101136", "text": "Yes it has been merged, thanks to Nobuhiro Iwamatsu.\nhttp://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&revision=31346\n", "created_at": "2011-05-04 17:38:54", "user": 98590, "id": 1101136}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit adds bigdecimal support to xmlrpc library.\n", "labels": [], "number": 13, "updated_at": "2014-07-11 18:36:38", "user": 102009, "closed_at": "2011-04-22 03:02:49", "id": 799407, "title": "Add BigDecimal support to xmlrpc", "url": "https://api.github.com/repos/ruby/ruby/issues/13", "created_at": "2011-04-21 16:43:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1040089", "text": "See issue here:\n\nhttp://redmine.ruby-lang.org/issues/4593\n", "created_at": "2011-04-21 16:45:15", "user": 102009, "id": 1040089}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1042512", "text": "Rejected in http://redmine.ruby-lang.org/issues/4593\n", "created_at": "2011-04-22 03:02:49", "user": 13423, "id": 1042512}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch fixes http://redmine.ruby-lang.org/issues/4571 by correctly parsing the microseconds into a double and passing that to the Time constructor.\n", "labels": [], "number": 14, "updated_at": "2014-06-21 19:45:28", "user": 22532, "closed_at": "2011-05-05 00:53:50", "id": 851566, "title": "Fix for Bug#4571", "url": "https://api.github.com/repos/ruby/ruby/issues/14", "created_at": "2011-05-05 00:50:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1103148", "text": "This went dreadfully wrong I fear..\n", "created_at": "2011-05-05 00:54:14", "user": 22532, "id": 1103148}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch fixes http://redmine.ruby-lang.org/issues/4571 by correctly parsing the microseconds into a double and passing that to the Time constructor.\n\nSorry for pull request #14, I had accidentily merged some other branch into it.\n", "labels": [], "number": 15, "updated_at": "2014-06-16 10:17:48", "user": 22532, "closed_at": "2011-05-06 06:20:11", "id": 851625, "title": "YAML.load time correctly parse usecs smaller than 1 fixes #4571", "url": "https://api.github.com/repos/ruby/ruby/issues/15", "created_at": "2011-05-05 01:13:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1109778", "text": "Merged the patch +fixed the overrun.\n", "created_at": "2011-05-06 06:20:11", "user": 15377, "id": 1109778}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch fixes support for scientific notation in complex numbers. Scientific notation numbers were incorrectly parsed as integers instead of floats.\n\nNote that one commit fixes a bunch of related whitespace in complex.c. If this is not good that commit can be omitted without breaking the patch.\n", "labels": [], "number": 16, "updated_at": "2014-06-24 00:02:09", "user": 22532, "closed_at": "2011-05-09 07:26:23", "id": 867004, "title": "Bug#4655", "url": "https://api.github.com/repos/ruby/ruby/issues/16", "created_at": "2011-05-08 23:55:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1120694", "text": "This patch includes many whitespace changes, please remove it.\nSee also coding style http://redmine.ruby-lang.org/projects/ruby/wiki/DeveloperHowto\n", "created_at": "2011-05-09 00:20:24", "user": 13423, "id": 1120694}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1120775", "text": "Hey nurse, thanks for the comment, I have removed the whitespace commit.\n", "created_at": "2011-05-09 01:06:23", "user": 22532, "id": 1120775}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1121606", "text": "Seems mrkn has already pulled it.  Thank you.\n", "created_at": "2011-05-09 07:26:23", "user": 15377, "id": 1121606}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "  numeric.c:2185\n", "labels": [], "number": 17, "updated_at": "2011-05-09 02:54:12", "user": 186023, "closed_at": "2011-05-09 02:54:12", "id": 867272, "title": "remove K&R style at:", "url": "https://api.github.com/repos/ruby/ruby/issues/17", "created_at": "2011-05-09 02:18:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1121002", "text": "Merged at r31490, thanks!\n", "created_at": "2011-05-09 02:54:12", "user": 13423, "id": 1121002}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to: http://redmine.ruby-lang.org/issues/4662\n", "labels": [], "number": 18, "updated_at": "2014-07-29 21:21:25", "user": 22532, "closed_at": "2011-05-24 08:34:46", "id": 872328, "title": "strftime %v capitalized month abbreviation", "url": "https://api.github.com/repos/ruby/ruby/issues/18", "created_at": "2011-05-09 17:54:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1152177", "text": "It seems OK to me.  I'm waiting confirmation from the library maintainer.\n", "created_at": "2011-05-13 10:36:55", "user": 15377, "id": 1152177}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1226847", "text": "This patch is rejected by maintainer.\n", "created_at": "2011-05-24 08:34:46", "user": 13423, "id": 1226847}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Corrected spelling of 'known' in line 913. Changed 'defs/knwon_errors.def' to 'defs/known_errors.def'\n", "labels": [], "number": 19, "updated_at": "2014-06-28 19:37:52", "user": 148916, "closed_at": "2011-05-13 10:00:56", "id": 874801, "title": "Corrected spelling of 'known' in line 913. Changed 'defs/knwon_errors.def", "url": "https://api.github.com/repos/ruby/ruby/issues/19", "created_at": "2011-05-10 03:54:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1152048", "text": "Merged (with identical modification to README.EXT.ja).  Thank you.\n", "created_at": "2011-05-13 10:00:57", "user": 15377, "id": 1152048}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added documentation for #flo_coerce method on numeric.c\n", "labels": [], "number": 21, "updated_at": "2014-07-25 22:51:46", "user": 83449, "closed_at": "2011-05-13 10:28:06", "id": 887077, "title": "Add #flo_coerce documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/21", "created_at": "2011-05-12 00:01:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1144379", "text": "Added another commit for some IPSocket docs\n", "created_at": "2011-05-12 02:59:08", "user": 83449, "id": 1144379}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1152064", "text": "Hi, can you separate the latter commit to another ticket?\n", "created_at": "2011-05-13 10:08:01", "user": 15377, "id": 1152064}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1152146", "text": "Cherry-picked your first commit.  Thank you.\n", "created_at": "2011-05-13 10:28:06", "user": 15377, "id": 1152146}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "dup the string passed in instead of cloning so that it's frozen state is ignored.\n\nThis prevents the unexpected error that occurs when setting the text on an element to what happens to be a frozen string\n", "labels": [], "number": 22, "updated_at": "2014-06-27 11:09:53", "user": 40791, "closed_at": "2011-05-26 06:51:23", "id": 921197, "title": "prevent an error when passing a frozen string to REXML::Text.new", "url": "https://api.github.com/repos/ruby/ruby/issues/22", "created_at": "2011-05-18 10:42:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1240539", "text": "I finally pulled this to the upstream.  Thank you.\n", "created_at": "2011-05-26 06:51:23", "user": 15377, "id": 1240539}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added documentation for using mathn. Added examples for using Prime, Vector & Matrix. Maintained the Rdoc format. \n", "labels": [], "number": 23, "updated_at": "2011-05-27 13:59:24", "user": 680493, "closed_at": "2011-05-22 01:42:26", "id": 936515, "title": "Adding documentation for mathn", "url": "https://api.github.com/repos/ruby/ruby/issues/23", "created_at": "2011-05-21 22:19:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just 2 small changes to README to fix spelling/grammar.\n\nKeep up the great work on ruby!\n", "labels": [], "number": 24, "updated_at": "2014-06-14 04:43:17", "user": 40264, "closed_at": "2011-05-24 08:32:50", "id": 942496, "title": "Fix typo's in spec/README", "url": "https://api.github.com/repos/ruby/ruby/issues/24", "created_at": "2011-05-23 17:20:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1226837", "text": "applied in r31718, thanks!\n", "created_at": "2011-05-24 08:32:50", "user": 13423, "id": 1226837}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request is only for purposes of code review. I will close it and submit a patch through the proper channels after I have got some people to look at it.\n", "labels": [], "number": 25, "updated_at": "2014-06-13 06:14:27", "user": 1714, "closed_at": "2011-07-26 23:10:19", "id": 967262, "title": "Require performance fix - code review", "url": "https://api.github.com/repos/ruby/ruby/issues/25", "created_at": "2011-05-28 00:37:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1281084", "text": "The patch seems that is not applying clean. load.c had some changes yesterday: https://github.com/ruby/ruby/commit/9ce69e7cef1272c86a93eeb9a1888fe6d2a94704#load.c\n", "created_at": "2011-06-02 14:45:27", "user": 5254, "id": 1281084}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1283436", "text": "I will investigate what effect that commit has on this patch, rebase it, and resubmit.\n", "created_at": "2011-06-02 19:08:07", "user": 1714, "id": 1283436}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1303264", "text": "Just wanted to drop a \"Thank you\" :)\n", "created_at": "2011-06-05 01:58:09", "user": 371940, "id": 1303264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1304651", "text": "Hope this will make it to the \"core\" :)\n", "created_at": "2011-06-05 14:14:42", "user": 12682, "id": 1304651}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1454898", "text": "thanks for the work Xavier.. with tons of railsprojects and a fast deployment cycle this really makes a difference.\n", "created_at": "2011-06-28 11:47:52", "user": 13777, "id": 1454898}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1657719", "text": "Is this patch (or something that solves the same problem) applied to ruby-core?\n", "created_at": "2011-07-26 20:52:21", "user": 2719, "id": 1657719}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1659933", "text": "1.9.3 has a different patch which will have a similar affect to this one for most apps. This patch is under consideration for 1.9.4.\n", "created_at": "2011-07-26 23:10:19", "user": 1714, "id": 1659933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9038977", "text": "what was the result? Did it get accepted? Can you provide a link to the ruby-core discussion page?\n", "created_at": "2012-10-01 16:14:45", "user": 83524, "id": 9038977}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10233247", "text": "Yes, please, what JayTeeSF said, I'm losing my youth waiting for rake db:migrate to load\n", "created_at": "2012-11-09 15:37:08", "user": 633753, "id": 10233247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10235023", "text": "FWIW @bbozo Ruby 2.0 looks like it will have a similar fix:\nhttp://bugs.ruby-lang.org/issues/7158\n", "created_at": "2012-11-09 16:23:26", "user": 83524, "id": 10235023}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10235403", "text": "Thank you @JayTeeSF ! :)\n", "created_at": "2012-11-09 16:32:52", "user": 633753, "id": 10235403}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove extraneous newline separating inject/reduce doc description.\n", "labels": [], "number": 26, "updated_at": "2014-06-12 09:59:06", "user": 199279, "closed_at": "2011-07-21 09:12:50", "id": 967822, "title": "Doc patch for Enumerable - inject/reduce", "url": "https://api.github.com/repos/ruby/ruby/issues/26", "created_at": "2011-05-28 07:11:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1622317", "text": "Merged in r32595, thanks!\n", "created_at": "2011-07-21 09:12:50", "user": 13423, "id": 1622317}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think this better reflects the results of doing ary.drop(n). There were a few missing words before.\n", "labels": [], "number": 27, "updated_at": "2011-06-09 15:23:11", "user": 402957, "closed_at": "2011-06-09 15:23:11", "id": 1025642, "title": "minor grammatical change to array.c", "url": "https://api.github.com/repos/ruby/ruby/issues/27", "created_at": "2011-06-08 18:31:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1334920", "text": "Sending this through redmine.\n", "created_at": "2011-06-09 15:23:11", "user": 402957, "id": 1334920}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think this will help to clone who want's to use git :-)\n", "labels": [], "number": 28, "updated_at": "2012-01-03 11:50:05", "user": 3948, "closed_at": "2012-01-03 11:50:05", "id": 1084834, "title": "Adding git way to clone and listing branches. ", "url": "https://api.github.com/repos/ruby/ruby/issues/28", "created_at": "2011-06-20 13:40:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3338906", "text": "This patch has be accepted by r34201\n", "created_at": "2012-01-03 11:50:05", "user": 37002, "id": 3338906}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 29, "updated_at": "2017-04-01 14:09:21", "user": 10137, "closed_at": "2012-03-05 16:36:26", "id": 1116173, "title": "-", "url": "https://api.github.com/repos/ruby/ruby/issues/29", "created_at": "2011-06-26 01:22:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- factor out post-facto dynamic method definitions\n- use define_command to create each fileutils method\n\nNOTE: I think OPT_TABLE keys should be Symbols instead of Strings, but I held off on that at this point.\n", "labels": [], "number": 30, "updated_at": "2014-06-12 07:44:59", "user": 23423, "closed_at": "2012-02-17 18:43:41", "id": 1158260, "title": "fileutils.rb: refactor FileUtils", "url": "https://api.github.com/repos/ruby/ruby/issues/30", "created_at": "2011-07-03 16:20:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1504053", "text": "After discussion, it seems clear that the internal table should really be using symbols and not strings for hash keys. Shall I make this change and include it as part of this patch?\n", "created_at": "2011-07-05 14:26:28", "user": 23423, "id": 1504053}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3293669", "text": "I don't think the strings vs. symbols thing matters.  Can you break this patch up a little though?  It seems there are many changes in one commit.  Can you separate the method visibility stuff from the other changes?  Thanks.\n", "created_at": "2011-12-28 18:36:15", "user": 3124, "id": 3293669}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3714739", "text": "I looked it over per your request. There's really no way to separate things further. The `define_command` method is what makes it possible to remove the method visibility stuff. It's all rather systematic, where the old `private_module_function` and `OPT_TABLE` calls were, they were replaced with `define_command`. Also, what might appear like a big change at the top and bottom is just moving the Verbose, DryRun and NoWrite modules from the bottom to the top, b/c they are no longer order dependent and also much simpler, it's a more convenient place to have them.\n", "created_at": "2012-01-30 05:26:48", "user": 23423, "id": 3714739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4024185", "text": "Okay, drop this pull request and merge #94. As I had mentioned, I lost track of this particular branch, so I had to redo it from scratch.\n", "created_at": "2012-02-17 17:32:55", "user": 23423, "id": 4024185}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4024403", "text": "Cool, thanks!  I don't seem to have permission to open / close, but I'll go ahead and apply #94.  Thanks!\n", "created_at": "2012-02-17 17:44:22", "user": 3124, "id": 4024403}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added some documentation to BasicObject explaining constant look-up behavior.\n", "labels": [], "number": 31, "updated_at": "2014-07-04 04:23:56", "user": 23423, "closed_at": "2012-02-15 17:09:30", "id": 1178833, "title": "BasicObject constant documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/31", "created_at": "2011-07-07 01:11:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1518566", "text": "Obviously I should have pulled from upstream first, but I forgot --don't know how that effects the pull request. But you could always just copy and paste the doc change. \n", "created_at": "2011-07-07 01:13:44", "user": 23423, "id": 1518566}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1623745", "text": "Hi, I happened to notice this is still open.  It seems your first point seems OK, but I'm not sure for the second part (should \"fix\" your problem by documenting that?).  So I'm going to reroute this request to our ITS.  Lets see a second opinion.\n", "created_at": "2011-07-21 14:07:50", "user": 15377, "id": 1623745}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3984378", "text": "Closing this, as the documentation has now been addressed by other patches.\n", "created_at": "2012-02-15 17:09:30", "user": 23423, "id": 3984378}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Function hex in secure random returns BINARY, which is unusable in some cases(like save string to sqlite)\n", "labels": [], "number": 32, "updated_at": "2011-07-07 14:07:55", "user": 207802, "closed_at": "2011-07-07 14:07:54", "id": 1181670, "title": "Function hex in secure random returns BINARY, which is unusable in some c", "url": "https://api.github.com/repos/ruby/ruby/issues/32", "created_at": "2011-07-07 12:02:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522407", "text": "Hi.\n\nCan you show us your particular \"some cases\", because I think a binary code with 0-9A-F range can properly be merged with other strings?\n", "created_at": "2011-07-07 12:53:58", "user": 15377, "id": 1522407}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522440", "text": "Hi, unfortunately main converstaion is in Russian https://groups.google.com/forum/#!topic/ror2ru/B1F7BlW_1H8 \n\nProblem repo with rails - https://github.com/whitered/rails_secure_random_bug . Rails recently decided to use ruby standart library secure random https://github.com/rails/rails/commit/1170cceaaec8c0c8aef173913405be1456e4b2be .\n\nSo name = SecureRandom.hex(1), u = User.create(:name => name) fails because sqlite can`t use binary string in https://github.com/whitered/rails_secure_random_bug/blob/master/test/unit/user_test.rb.\nYes, it is username and not too useful, but one could use SecureRandom.hex for password or token\n\nNot sure if it should be fixed on sql adapter`s side, but hope, You will merge it to prevent bugs in current rails with SecureRandom.\n", "created_at": "2011-07-07 13:00:50", "user": 207802, "id": 1522440}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522445", "text": "Sorry, closed pull request with comment.\n", "created_at": "2011-07-07 13:01:25", "user": 207802, "id": 1522445}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522681", "text": "Seems like a bug in either ActiveSupport and/or SQLite adapter.\n\nWhen I do this:\n\n```\nzsh % RAILS_ENV=test bundle exec rake db:migrate\n==  CreateUsers: migrating ====================================================\n-- create_table(:users)\n   -> 0.0369s\n==  CreateUsers: migrated (0.0370s) ===========================================\n\nzsh % RAILS_ENV=test bundle exec rails console\nLoading test environment (Rails 3.1.0.rc4)\nruby-1.9.2-p180 :001 > User.create name: SecureRandom.hex(1)\n  SQL (16.4ms)  INSERT INTO \"users\" (\"created_at\", \"name\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 07 Jul 2011 13:26:56 UTC +00:00], [\"name\", \"87\"], [\"updated_at\", Thu, 07 Jul 2011 13:26:56 UTC +00:00]]\n => #<User id: 1, name: \"87\", created_at: \"2011-07-07 13:26:56\", updated_at: \"2011-07-07 13:26:56\"> \nruby-1.9.2-p180 :002 > User.find_by_name(\"87\")\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" WHERE \"users\".\"name\" = '87' LIMIT 1\n => nil \nruby-1.9.2-p180 :003 > ^D\n```\n\nYes it exhibits your problem.  _But_, when you see the DB at this point,\n\n```\nzsh % RAILS_ENV=test bundle exec rails db\nSQLite version 3.6.22\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite> SELECT \"users\".* FROM \"users\";\n1|87|2011-07-07 13:26:56.422331|2011-07-07 13:26:56.422331\nsqlite> SELECT typeof(\"users\".name) FROM \"users\" WHERE \"users\".id = 1;\nblob\nsqlite> SELECT \"users\".* FROM \"users\" WHERE \"users\".\"name\" = \"87\" LIMIT 1;\nsqlite> SELECT count(*) FROM \"users\" WHERE \"users\".\"name\" = \"87\" LIMIT 1;\n0\nsqlite> -- BUT;\nsqlite> SELECT \"users\".* FROM \"users\" WHERE \"users\".\"name\" = CAST(\"87\" as BLOB) LIMIT 1;\n1|87|2011-07-07 13:26:56.422331|2011-07-07 13:26:56.422331\nsqlite> ^D\n```\n\nSo the fact is\n- The user is stored on the DB.\n- The user's name is a BLOB, rather than a TEXT.\n- You can retrieve the user by properly casting the name into BLOB.\n\nI cannot but concude this is due to type mismatch on Rails (or ActiveRecord or SQLite3 adapter --whichever).  It stores the user's name as a BLOB and then trying to get it using TEXT.  That's where it fails.\n", "created_at": "2011-07-07 13:39:21", "user": 15377, "id": 1522681}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522873", "text": "Thanks, Shyuohei! You digged to the real roots of problem!\n\nOnly one question left: do You think it should be fixed in Adapter only or it is acceptable to patch it in ruby standard library?\n", "created_at": "2011-07-07 14:03:18", "user": 207802, "id": 1522873}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1522909", "text": "There is a room for applying the patch I think, but the adapter should be fixed anyway because SecureRandom is not the only one who emits binaries.  It seems whenever you insert a binary to a sqlite database, you can no longer select it using the adapter.\n", "created_at": "2011-07-07 14:07:54", "user": 15377, "id": 1522909}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes HTTP/0.9 requests in WEBrick's httprequest. Calling meta_vars would raise an exception where the @header variable is not set (as is the case for an HTTP/0.9 simple request), but meta_vars should be available for any request. This is my patch from the thread at redmine issue tracker http://redmine.ruby-lang.org/issues/5022 .\n", "labels": [], "number": 33, "updated_at": "2011-07-21 08:32:36", "user": 485941, "closed_at": "2011-07-21 08:32:36", "id": 1238896, "title": "Fix HTTP/0.9 requests in WEBrick", "url": "https://api.github.com/repos/ruby/ruby/issues/33", "created_at": "2011-07-17 22:37:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1622136", "text": "Merged in r32593, thanks!\n", "created_at": "2011-07-21 08:32:36", "user": 13423, "id": 1622136}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation for the #delete_at method is inconsistent concerning the example array initialization. For all array examples brackets are used for the creation, except the #delete_at is uses the '%w' flavor.\nIn terms of a consistent documentation i would recommend to revise this.\n", "labels": [], "number": 34, "updated_at": "2014-07-08 04:04:04", "user": 55331, "closed_at": "2011-07-21 08:32:01", "id": 1258858, "title": "Doc Array#delete_at inconsistence fix", "url": "https://api.github.com/repos/ruby/ruby/issues/34", "created_at": "2011-07-20 19:59:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1622133", "text": "Merged in r32594, thanks!\n", "created_at": "2011-07-21 08:32:01", "user": 13423, "id": 1622133}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There are some confusions and inconsistence in the different Array method code examples. I tried to update these and made some adaptations.\n", "labels": [], "number": 35, "updated_at": "2014-07-03 03:53:09", "user": 55331, "closed_at": "2011-07-23 13:04:48", "id": 1273153, "title": "Array class rdoc documentation revisions", "url": "https://api.github.com/repos/ruby/ruby/issues/35", "created_at": "2011-07-22 22:46:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1637347", "text": "There are a lot inconsistency in these documentation, that's why i tried to give the whole thing a uniform touch. It's just an opinion for my part. ;) Feel free to decline these suggestion.\n\ncheers\n\nsamuel \n", "created_at": "2011-07-23 12:56:24", "user": 55331, "id": 1637347}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1637362", "text": "Thanks for the whole feedback. :)\n", "created_at": "2011-07-23 13:05:13", "user": 55331, "id": 1637362}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just fix typo.\n", "labels": [], "number": 36, "updated_at": "2014-07-03 07:42:39", "user": 93578, "closed_at": "2011-07-26 14:37:25", "id": 1287801, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/36", "created_at": "2011-07-26 10:15:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1654569", "text": "Applied.  Thank you.\n", "created_at": "2011-07-26 14:37:25", "user": 15377, "id": 1654569}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1655897", "text": "It be must be applied for ruby_1_9_3 branch too.\n", "created_at": "2011-07-26 16:55:55", "user": 93578, "id": 1655897}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1760050", "text": "Done.  Thank you pointing that out.\n", "created_at": "2011-08-09 01:52:21", "user": 15377, "id": 1760050}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "せっかくGitHubにコードがあるのに、日本語READMEのエンコードがEUCなので、\nGitHubのコードブラウザでうまく表示されていませんでした。\n最近のOSはだいたいUTF-8がデフォルトじゃないかとおもっているので、よかったら\n取り込んでください。\n", "labels": [], "number": 37, "updated_at": "2011-07-29 12:26:20", "user": 37002, "closed_at": "2011-07-29 12:26:20", "id": 1302724, "title": "Change encode of README.ja and README.EXT.ja from EUC-JP to UTF-8.", "url": "https://api.github.com/repos/ruby/ruby/issues/37", "created_at": "2011-07-28 13:17:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1680789", "text": "COPYING.ja を忘れてたので出しなおします。\n", "created_at": "2011-07-29 12:26:20", "user": 37002, "id": 1680789}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "*.ja のファイルは歴史的な事情からEUC-JPで記述されているため、redmine.ruby-lang の\nリポジトリやGithubのコードブラウザで表示すると文字化けして見えるのは残念です。\nこれらのファイルはUTF-8にしてしまった方がよいと思います。\nなお、このパッチを適用する場合は、同時にsvnのメタ情報の方も変更の必要があります。\n", "labels": [], "number": 38, "updated_at": "2014-07-11 22:49:01", "user": 37002, "closed_at": "2011-09-01 03:46:36", "id": 1309832, "title": "Change encoding from EUC-JP to UTF-8.", "url": "https://api.github.com/repos/ruby/ruby/issues/38", "created_at": "2011-07-29 12:58:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1964639", "text": "updated by https://github.com/ruby/ruby/pull/45\n", "created_at": "2011-09-01 03:46:36", "user": 37002, "id": 1964639}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 39, "updated_at": "2017-04-01 01:57:32", "user": 10137, "closed_at": "2012-06-21 22:35:48", "id": 1310328, "title": "-", "url": "https://api.github.com/repos/ruby/ruby/issues/39", "created_at": "2011-07-29 14:19:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1961433", "text": "Contrary to belief, shorter identifier names don't actually make code faster. I don't understand the purpose of changing the names to be _less_ understandable.\n", "created_at": "2011-08-31 20:13:47", "user": 3393, "id": 1961433}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6496351", "text": "This patch pollutes the global namespace by not using the rb_ prefix for non-static functions.\n\nThis patch replaces clear names with shortcuts that reduce the ability to understand the code.\n\nThis patch has bit-rotted and will no longer apply.\n\nThis patch has too many changes to understand.\n\nPlease reopen this request as small, separate, single-topic patches after correcting the above deficiencies.\n", "created_at": "2012-06-21 22:35:48", "user": 9831, "id": 6496351}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 40, "updated_at": "2014-08-17 02:01:04", "user": 15918, "closed_at": "2011-08-06 16:13:45", "id": 1355137, "title": "Add the missing receiver before calling epath", "url": "https://api.github.com/repos/ruby/ruby/issues/40", "created_at": "2011-08-06 03:35:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1745397", "text": "Merged in r32871, thanks!\n", "created_at": "2011-08-06 16:13:45", "user": 13423, "id": 1745397}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The implementation of YAML.object_maker allocates an object and\ninstance_variable_set the instance variables passed as the second\nargument, while Exception doesn't seem to use such instance variable to\nreturn the exception message (Exception#message). This bug can be\nreproduced by typing\nYAML::load(YAML::dump(Exception.new('test_message'))) in IRB, e.g.,\n\nruby-1.9.2-p290 :001 > require 'yaml'\n => true \nruby-1.9.2-p290 :002 > YAML::load(YAML::dump(Exception.new('test_message')))\n => #<Exception: Exception> \n# <Exception: \"test_message\"> is expected while the result is #<Exception: Exception>.\n", "labels": [], "number": 41, "updated_at": "2014-06-13 09:58:35", "user": 169064, "closed_at": "2012-03-05 13:23:54", "id": 1377591, "title": "Fix bug that causes YAML serialization problem for Exception.", "url": "https://api.github.com/repos/ruby/ruby/issues/41", "created_at": "2011-08-10 05:55:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1770094", "text": "The problem is related to Exception#message not being correctly un-serialized. This bug can be reproduced with executing:\n\nYAML::load(YAML::dump(Exception.new('test_message')))\n\nI proposed a fix. Please take a look. \n", "created_at": "2011-08-10 05:58:16", "user": 169064, "id": 1770094}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1770187", "text": "(comment) This doesn't happen with Psych.\n", "created_at": "2011-08-10 06:21:28", "user": 15377, "id": 1770187}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1770467", "text": "But some popular gems such as delayed_job (https://github.com/collectiveidea/delayed_job/blob/master/lib/delayed/yaml_ext.rb) are still depending on syck. What's the road map for syck? Is Psych going to replace syck? Why are there two implementations for YAML serialization?\n", "created_at": "2011-08-10 07:15:49", "user": 169064, "id": 1770467}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1770503", "text": "Hey, I just pointed out the fact.  Nothing more.  This can still be pulled.\n\nHowever if you want a concrete road map of syck this is not the place for it.  Please move to http://redmine.ruby-lang.org/projects/ruby-19/issues/new .\n", "created_at": "2011-08-10 07:23:45", "user": 15377, "id": 1770503}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1770564", "text": "Oh...I was just trying to understand whether this is a real bug or not, your comment kinda confused me. Thanks for the clarification :). Hope this one will be fixed in the next Ruby release :). \n", "created_at": "2011-08-10 07:34:39", "user": 169064, "id": 1770564}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1829904", "text": "Hi, can I confirm that this bug has been recognized and close the pull request? Thanks\n", "created_at": "2011-08-17 19:49:22", "user": 169064, "id": 1829904}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2305864", "text": "Since I haven't got response till now, I created a bug report: http://redmine.ruby-lang.org/issues/5415\n", "created_at": "2011-10-06 02:31:20", "user": 169064, "id": 2305864}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4322547", "text": "Applied at r34908.\n", "created_at": "2012-03-05 13:23:54", "user": 16700, "id": 4322547}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4324724", "text": "Thanks @nobu!\n", "created_at": "2012-03-05 15:25:34", "user": 169064, "id": 4324724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, these exports could be useful in C extensions.\n\nThanks\n", "labels": [], "number": 42, "updated_at": "2011-08-15 05:52:06", "user": 7280, "closed_at": "2011-08-16 02:43:36", "id": 1393411, "title": "* include/ruby/intern.h (rb_ary_first, rb_ary_last): export.", "url": "https://api.github.com/repos/ruby/ruby/issues/42", "created_at": "2011-08-12 08:45:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1802267", "text": "rb_ary_entry is not enough?\n", "created_at": "2011-08-14 16:59:25", "user": 13423, "id": 1802267}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1804959", "text": "I think it is, thanks.\n", "created_at": "2011-08-15 05:52:06", "user": 7280, "id": 1804959}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The existing documentation suggested that the hash depends only on the\nstring itself, and thus that it was consistently reproducible - this is\nnot the case though as a random per-process seed is involved as well.\n\n(FWIW, I looked at existing instances of \"Note:\" for stylistic consistency.)\n", "labels": [], "number": 43, "updated_at": "2014-07-20 06:05:11", "user": 3515, "closed_at": "2012-03-05 13:19:00", "id": 1394409, "title": "added note on consistency to String#hash documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/43", "created_at": "2011-08-12 12:14:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2063336", "text": "discuss with ruby-doc mailing list can be better way\n\nhere:\nhttp://www.ruby-lang.org/en/community/mailing-lists/\n", "created_at": "2011-09-11 11:01:50", "user": 186023, "id": 2063336}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4243611", "text": "I agree with @FND, this is VERY VERY VERY important to mention in the core documentation.\n", "created_at": "2012-02-29 18:29:48", "user": 15787, "id": 4243611}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4243637", "text": "hey @ayumin, would you merge this doc request?\n", "created_at": "2012-02-29 18:31:06", "user": 15787, "id": 4243637}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4319778", "text": "Seems r34769 has fixed this issue.\n", "created_at": "2012-03-05 10:02:58", "user": 16700, "id": 4319778}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`defined?(@@foo) && @@foo` will sometimes raise an error.\n\nTest and patch is provided.\n", "labels": [], "number": 44, "updated_at": "2014-06-18 09:37:10", "user": 499, "closed_at": "2011-08-25 07:22:09", "id": 1440012, "title": "Fix problem with `defined?(@@foo) && @@foo`", "url": "https://api.github.com/repos/ruby/ruby/issues/44", "created_at": "2011-08-19 10:25:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1897831", "text": "Committed to trunk and ruby_1_9_3: http://redmine.ruby-lang.org/issues/5204\n", "created_at": "2011-08-25 07:22:09", "user": 499, "id": 1897831}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "*.ja のファイルは歴史的な事情からEUC-JPで記述されているため、redmine.ruby-lang の\nリポジトリやGithubのコードブラウザで表示すると文字化けして見えるのは残念です。\nこれらのファイルはUTF-8にしてしまった方がよいと思います。\nなお、このパッチを適用する場合は、同時にsvnのメタ情報の方も変更の必要があります。\n# README.ja と README.EXT.ja が更新されたようなので rebase したものを再送します。\n", "labels": [], "number": 45, "updated_at": "2014-07-13 22:20:01", "user": 37002, "closed_at": "2011-09-04 12:32:56", "id": 1537970, "title": "Change encoding from EUC-JP to UTF-8. [Feature #5128] [ruby-dev:44289]", "url": "https://api.github.com/repos/ruby/ruby/issues/45", "created_at": "2011-09-01 03:44:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/1991097", "text": "混ぜておきました\n", "created_at": "2011-09-04 12:32:56", "user": 15377, "id": 1991097}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- strftime.c: remove unnecessary macros to check traditional c\n- vsnprintf.c: remove k&r\n", "labels": [], "number": 46, "updated_at": "2014-06-16 22:17:21", "user": 186023, "closed_at": "2012-08-16 01:58:23", "id": 1617562, "title": "unecessary macros and k&r style coding", "url": "https://api.github.com/repos/ruby/ruby/issues/46", "created_at": "2011-09-11 10:57:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4493795", "text": "One of the Rules for Core Developers [stated here](http://www.ruby-lang.org/en/community/ruby-core/):\n\n> K&R function declarations are used throughout Ruby’s source code and its packaged extensions.\n\nIs that already obsolete?\n", "created_at": "2012-03-14 08:14:17", "user": 287994, "id": 4493795}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6496395", "text": "Removing K&R function declarations is OK: http://bugs.ruby-lang.org/projects/ruby/wiki/DeveloperHowto#coding-style\n", "created_at": "2012-06-21 22:38:02", "user": 9831, "id": 6496395}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removing visibility flag hiding required symbols in ruby binary during final linking.\n\nFixes ruby-debug19, along with many other extensions.\n", "labels": [], "number": 47, "updated_at": "2014-06-13 17:51:28", "user": 14028, "closed_at": "2012-03-05 13:25:14", "id": 1658710, "title": "Symbol visibility fix", "url": "https://api.github.com/repos/ruby/ruby/issues/47", "created_at": "2011-09-16 01:43:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2111296", "text": "This fixes passenger support, too.\n", "created_at": "2011-09-16 02:34:21", "user": 14028, "id": 2111296}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2111413", "text": "You might want to look at:\n\nhttp://redmine.ruby-lang.org/issues/5193\n\nWhich is about getting ruby-debug working again on 1.9.3\n", "created_at": "2011-09-16 02:58:34", "user": 18630, "id": 2111413}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2111936", "text": "As @cfis says, We are considering about ruby-debug, so at least ruby-debug will work on 1.9.3 release.\nIf you know yet another library which is broken by visibility, please notice us.\n", "created_at": "2011-09-16 05:15:05", "user": 13423, "id": 2111936}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2112284", "text": "The problem is that these symbols are marked as `RUBY_EXTERN`, are globally available in the ruby static library, but are not visible in the ruby binary itself.\n\n`ruby_current_thread`, for example, is marked as an external symbol in the data section, and is visible in `libruby-static.a` but not in `ruby`:\n\n``` console\n$ nm -U libruby-static.a | grep ruby_current_thread\n0000000000131e88 D _ruby_current_thread\n$ nm -U ruby | grep ruby_current_thread    \n00000001002249d0 d _ruby_current_thread\n```\n\nIs this by design? Should these symbols only be used by the primarily linking binary and not by shared libraries?\n", "created_at": "2011-09-16 06:45:38", "user": 14028, "id": 2112284}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2425044", "text": "@nurse will you expose `ruby_current_thread` symbol when 1.9.3 is released? i have a library (also related to debugging but not ruby-debug) that depends on the visibility of this symbol\n", "created_at": "2011-10-17 04:54:45", "user": 17518, "id": 2425044}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2437013", "text": "The impression I got was that there might be an official interface to this instead? In any case, hiding symbols is going to break compatibility with many plugins.\n", "created_at": "2011-10-18 01:27:42", "user": 14028, "id": 2437013}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3756725", "text": "After installing the tuned ruby using https://gist.github.com/1688857 my specs run about 10-20% faster. No problems nor instabilities so far -> +1 :)\n", "created_at": "2012-02-01 10:32:34", "user": 175494, "id": 3756725}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm not sure why this wasn't also put into 1_8_7 a year ago when it was fixed in ruby 1.9.1, but hopefully this will find it's way in. It still causes a fair amount of trouble for people.\n", "labels": [], "number": 48, "updated_at": "2014-06-29 09:54:41", "user": 324744, "closed_at": "2012-01-03 09:31:04", "id": 1696954, "title": "OpenSSL Segfault Fix", "url": "https://api.github.com/repos/ruby/ruby/issues/48", "created_at": "2011-09-21 13:06:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2161457", "text": "My fault maybe.  I'll take care of this issue.  Stay tuned.\n", "created_at": "2011-09-21 21:39:04", "user": 15377, "id": 2161457}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2331414", "text": "Any updates on this?\n", "created_at": "2011-10-08 10:18:51", "user": 324744, "id": 2331414}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2331485", "text": "Sorry for the silence.  I now think it must be applied.  It will be included in the next patchlevel.\n", "created_at": "2011-10-08 10:40:54", "user": 15377, "id": 2331485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3337828", "text": "I believe it's done.  Thank you reporting.\n", "created_at": "2012-01-03 09:31:04", "user": 15377, "id": 3337828}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3339311", "text": "Indeed it is, thank you.\n", "created_at": "2012-01-03 12:42:11", "user": 324744, "id": 3339311}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There isn't much consistency in the docs when it comes to blocks. So I decided to go with the style that is most often used: `{|obj| block }`\nNo spaces, only around `block`.\n\nI can fix the other classes as well but before I do this maybe someone comments on this pr first.\n\nWhat about multiline blocks? They tend to look ugly. Curly braces everywhere and never ending chains.\nSee https://github.com/ruby/ruby/blob/trunk/enum.c#L2359-2364\n", "labels": [], "number": 49, "updated_at": "2011-10-03 18:56:28", "user": 263378, "closed_at": "2011-10-03 18:56:28", "id": 1735654, "title": "a more consistent doc style for blocks in enum.c", "url": "https://api.github.com/repos/ruby/ruby/issues/49", "created_at": "2011-09-25 23:25:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2275572", "text": "assigned drbrain on redmine: http://redmine.ruby-lang.org/issues/5393\n", "created_at": "2011-10-03 18:56:28", "user": 263378, "id": 2275572}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Allows the optional declaration of a whitelist of methods to expose through DRb for any class DRb will be sharing an instance of. (The current behavior of exposing all public methods of a class can leave a pretty scary security hole in some applications)\n\nIf drb_safe_methods is used in a class's definition, then any attempt to call a non-whitelisted method on that class through DRb will fail. There is no change to DRb's normal behavior if drb_safe_methods has not been called in a class's definition.\n", "labels": [], "number": 50, "updated_at": "2014-06-24 16:52:11", "user": 1011417, "closed_at": "2012-11-18 22:11:49", "id": 1748747, "title": "Allow per-class whitelisting of methods safe to expose through DRb", "url": "https://api.github.com/repos/ruby/ruby/issues/50", "created_at": "2011-09-27 03:43:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2355230", "text": "Hi.  I forwarded this issue to our ITS:\n\nhttp://redmine.ruby-lang.org/issues/5434\n\nPlease follow the discussion there.  I can do the pull once you get consensus.\n", "created_at": "2011-10-11 04:13:10", "user": 15377, "id": 2355230}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10492805", "text": "Closing this as there is already an [open ticket in redmine](http://bugs.ruby-lang.org/issues/5434)\n", "created_at": "2012-11-18 22:11:49", "user": 277819, "id": 10492805}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Production (not too complex) rails application loads in 15% faster.\n\nI cann't argue hard why filenames should be compared from right to left. Initially I tried to compare whole path, and then it could make a sense. But some mistakes were not catchable, so I give up.\n", "labels": [], "number": 51, "updated_at": "2014-06-19 05:20:07", "user": 249427, "closed_at": "2011-12-13 06:02:36", "id": 1854169, "title": "Keep LOADED_FEATURES sorted by filename without extention. It allows to use binary search on require.", "url": "https://api.github.com/repos/ruby/ruby/issues/51", "created_at": "2011-10-08 22:27:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2550254", "text": "having them in time order is useful for debugging, could this be considered before the merge?\n", "created_at": "2011-10-27 22:19:38", "user": 348, "id": 2550254}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2552660", "text": "I really doubt it would be merged.\n", "created_at": "2011-10-28 05:20:17", "user": 249427, "id": 2552660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2580426", "text": "@raggi new version of patch reacts on RUBY_LOADED_FEATURES_SORTED environment variable: https://gist.github.com/1272991\n", "created_at": "2011-10-31 17:49:35", "user": 249427, "id": 2580426}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3058609", "text": "Patch updated to fix hidden ruby's bug in load.c, which prevents update_rubygems to be executed.\n https://gist.github.com/1272991\n", "created_at": "2011-12-08 06:53:15", "user": 249427, "id": 3058609}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3119311", "text": "temporary close pull request, cause of branch names issues.\n", "created_at": "2011-12-13 06:02:36", "user": 249427, "id": 3119311}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 52, "updated_at": "2014-07-13 21:33:31", "user": 38757, "closed_at": "2012-07-04 03:01:15", "id": 1896526, "title": "Added support for &apos; to CGI::unescapeHTML", "url": "https://api.github.com/repos/ruby/ruby/issues/52", "created_at": "2011-10-13 01:40:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6496722", "text": "Created https://bugs.ruby-lang.org/issues/6620 for this pull request\n", "created_at": "2012-06-21 22:55:53", "user": 9831, "id": 6496722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6751696", "text": "Fixed by r36299\n", "created_at": "2012-07-04 03:01:15", "user": 9831, "id": 6751696}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6788824", "text": "It seems that ultimately this was reverted and rejected.\n", "created_at": "2012-07-05 19:51:29", "user": 9831, "id": 6788824}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6789714", "text": "Do you know an alternative? Or the explanation why?\n\nThanks,\n--i\n\nOn 2012-07-05, at 3:51 PM, Eric Hodel wrote:\n\n> It seems that ultimately this was reverted and rejected.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ruby/ruby/pull/52#issuecomment-6788824\n\n--i\n\ne-mail: self@igorsales.ca\ntwitter: @igorsales\nblog: http://igorsales.ca\n", "created_at": "2012-07-05 20:28:12", "user": 38757, "id": 6789714}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6790028", "text": "It is described on https://bugs.ruby-lang.org/issues/6620, it seems that &apos; is an XML specification.  You should direct follow-up questions there.\n", "created_at": "2012-07-05 20:41:46", "user": 9831, "id": 6790028}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 53, "updated_at": "2011-11-03 17:00:33", "user": 114588, "closed_at": "2012-01-03 06:55:44", "id": 1991607, "title": "Fix a small typo in documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/53", "created_at": "2011-10-19 08:17:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously, `ERB::Util.url_encode` was escaping tilde (~) where it should not have been. \n\nThis fixes that behaviour so that it now correctly avoids escaping all unreserved characters as per RFC 3986, Section 2.3:\nhttp://tools.ietf.org/html/rfc3986#section-2.3\n", "labels": [], "number": 54, "updated_at": "2014-08-19 00:18:52", "user": 4312, "closed_at": "2012-07-04 07:54:01", "id": 2030734, "title": "ERB::Util.url_encode should not escape unreserved characters", "url": "https://api.github.com/repos/ruby/ruby/issues/54", "created_at": "2011-10-24 06:21:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2516955", "text": "Why it _should not_? the RFC you refer says \"URIs that differ in the replacement of an unreserved character with   its corresponding percent-encoded US-ASCII octet are equivalent\".\n\nAlso, I don't think ERB is an \"URI producer\" that the RFC says.  It lacks the definition of what an URI producer is but it seems much structure-aware than the one ERB provides.\n", "created_at": "2011-10-25 13:21:22", "user": 15377, "id": 2516955}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2520335", "text": "At a minimum, it seems inconsistent. The implementation is avoiding percent encoding **all** unreserved characters **except** the tilde. What is the benefit of skipping the tilde?\n\nThis section on Wikipedia says it well:\n\n> Characters from the unreserved set never need to be percent-encoded. URIs that differ only by whether an \n> unreserved character is percent-encoded or appears literally are equivalent by definition, but URI processors, \n> in practice, may not always recognize this equivalence. For example, URI consumers shouldn't treat \"%41\" \n> differently from \"A\" or \"%7E\" differently from \"~\", but some do. For maximum interoperability, URI producers \n> are discouraged from percent-encoding unreserved characters.\n\nhttp://en.wikipedia.org/wiki/Percent-encoding#Percent-encoding_unreserved_characters\n\nAlso, fwiw., this is how the Perl implementation works:\n- http://search.cpan.org/dist/URI/URI/Escape.pm#DESCRIPTION\n", "created_at": "2011-10-25 17:46:15", "user": 4312, "id": 2520335}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2520453", "text": "I think we should also change`CGI.escape` to skip the tilde, applying the same argument above:\nhttps://github.com/ruby/ruby/blob/trunk/lib/cgi/util.rb#L7\n", "created_at": "2011-10-25 17:55:37", "user": 4312, "id": 2520453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4153679", "text": "Bump. I don't understand the argument against this -- it seems straightforward looking at the RFC and going by other implementations, including the Perl example I cited above.\n\nSurely it is not a coincidence that the current implementation is not escaping all unreserved characters _except_ the tilde?\n", "created_at": "2012-02-24 09:03:36", "user": 4312, "id": 4153679}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 55, "updated_at": "2014-06-15 05:07:39", "user": 183027, "closed_at": "2012-02-24 03:16:26", "id": 2091032, "title": "Fixed indentation on String#prepend example.", "url": "https://api.github.com/repos/ruby/ruby/issues/55", "created_at": "2011-10-30 15:57:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4150838", "text": "As same as #98. ChangeLog updated by r34782. Thank you.\n", "created_at": "2012-02-24 03:16:55", "user": 37002, "id": 4150838}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removing visibility flag hiding required symbols in ruby binary.\n\nMakes sure all libruby symbols are available from within the executable after final linking. Fixes ruby-debug19, passenger, and many other extensions.\n", "labels": [], "number": 56, "updated_at": "2014-06-17 12:15:22", "user": 14028, "closed_at": "2012-01-12 13:10:02", "id": 2093372, "title": "Ruby 1.9.3 p0 symbol visibility", "url": "https://api.github.com/repos/ruby/ruby/issues/56", "created_at": "2011-10-31 02:00:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3461148", "text": "+1 (Only because this issue doesn't seem to be getting much love)\n", "created_at": "2012-01-12 10:36:44", "user": 18952, "id": 3461148}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3462904", "text": "The correct solution for ruby-debug19 at least is to install the latest gems available from the rubyforge page:\n\nhttp://rubyforge.org/frs/?group_id=8883\n\nThese haven't been pushed to rubygems.org so nobody thinks they exist.\n", "created_at": "2012-01-12 13:10:02", "user": 14028, "id": 3462904}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3462985", "text": "@sj26 What, exactly should be required to install these? I'm noticing / unsure about a couple of things.\n- When installing `1.9.3-p0` from source (`autoconf -f && ./configure --prefix=/whatever && make && make install`), or from `rbenv`. The following directory does not exist: `$PREFIX/include/ruby-1.9.1/ruby-1.9.3-p0` - this appears to be required, as it contains a bunch of header files that appear to be important to compiling the native extensions. (What am I doing wrong?)\n- Is the symbol visibility patch still required? I noticed on the rubyforge thread that people were discussing that they were somehow private symbols, and Gems shouldn't be using them?\n- What role does the ruby-core-source gem play? Does that relate to my first point?\n\nThanks, sincerely - this is really stopping my team upgrading, so far we're using [this home-grown build process](https://gist.github.com/f9038e6ce68c90eb6d93) which appears to work.\n", "created_at": "2012-01-12 13:16:36", "user": 18952, "id": 3462985}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3463018", "text": "@sj26 I just noticed that you are Sam Cochran, and that it was your notes from the blog post dated 31.10.2011 that I've been referring to, including how to make sure the symbol exists.\n\nThe trick about making sure that `$PREFIX/include/ruby-1.9.1/ruby-1.9.3-p0` exists (because it doesn't on many builds I have seen) came from somewhere else, but seemed to help. Especially in cases where the extracted tar-sources are not preserved (e.g. `rbenv`)\n", "created_at": "2012-01-12 13:20:17", "user": 18952, "id": 3463018}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3463264", "text": "This works for me repeatably:\n\n``` text\nrbenv install 1.9.3-p0\nrbenv rehash\ncd ~\nmkdir latest-debug-gems\ncd latest-debug-gems\nrbenv local 1.9.3-p0\nwget http://rubyforge.org/frs/download.php/75414/linecache19-0.5.13.gem\nwget http://rubyforge.org/frs/download.php/74596/ruby_core_source-0.1.5.gem\nwget http://rubyforge.org/frs/download.php/75415/ruby-debug-base19-0.11.26.gem\nwget http://rubyforge.org/frs/download.php/63094/ruby-debug19-0.11.6.gem\ngem install *.gem -- --with-ruby-include=$(echo ~/.rbenv/versions/1.9.3-p0/include/ruby-1.9.1/ruby-1.9.3-p0/) --no-rdoc --no-ri\ncd -\n```\n\n`rbenv install` from [ruby-build](https://github.com/sstephenson/ruby-build).\n\nVerified working with:\n\n``` text\n$ ruby --version\nruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin11.2.0]\n$ irb\nirb(main):001:0> require 'ruby-debug'\n=> true\nirb(main):002:0> Debugger.start and puts Debugger.current_context\n#<Debugger::Context:0x007f95c5a306a8>\n=> nil\n```\n\nIf you are using `bundler`, firstly I recommend `1.1` (install with `--pre`) as it's so much faster. But secondly bundler will detect the already installed Gems from above, and you won't have to care about `bundle config` or any build problems when installing your bundle.\n\nYou may want to `cp` the gems from above into your project's `./vendor/cache` directory, so that Bundler doesn't fail to download them from rubygems.org.\n\nMy `Gemfile` entry for the above looks like:\n\n``` ruby\ngroup :development, :test do\n  gem 'ruby_core_source', '0.1.5', :require => false\n  gem 'linecache19', '0.5.13'\n  gem 'ruby-debug-base19', '0.11.26'\n  gem 'ruby-debug19', '0.11.6'\nend\n```\n", "created_at": "2012-01-12 13:38:57", "user": 18952, "id": 3463264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3466187", "text": "Additionally this only cures the `ruby-debug` problems, `rack-perftools.rb` et al still don't work.\n\nI also had to upgrade `rspec` to `2.8.0`, and remove `--debug` from my `.rspec` file. (With `--debug`, `rspec` tries to call `require 'ruby-debug'`, which doesn't work, as its now `require 'ruby-debug19'` since `ruby-debug-0.11.6` (maybe even sooner, but at least in `0.11.6`).\n", "created_at": "2012-01-12 16:46:08", "user": 18952, "id": 3466187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "More details in:\n\nhttp://redmine.ruby-lang.org/issues/5624\n", "labels": [], "number": 57, "updated_at": "2014-07-13 03:50:57", "user": 610423, "closed_at": "2012-01-03 11:24:16", "id": 2249145, "title": "Update code example to match its description in documentation text", "url": "https://api.github.com/repos/ruby/ruby/issues/57", "created_at": "2011-11-15 20:54:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3338663", "text": "This patch was merged by r33976\n", "created_at": "2012-01-03 11:24:16", "user": 37002, "id": 3338663}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It fixes an edge case that was not tested in the original version.\n", "labels": [], "number": 58, "updated_at": "2014-07-29 10:01:54", "user": 951, "closed_at": "2012-08-18 15:59:44", "id": 2261753, "title": "Accept parameters without value.", "url": "https://api.github.com/repos/ruby/ruby/issues/58", "created_at": "2011-11-16 21:10:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6496753", "text": "Created https://bugs.ruby-lang.org/issues/6621 for this pull request\n", "created_at": "2012-06-21 22:58:44", "user": 9831, "id": 6496753}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7845661", "text": "This issue was solved with changeset r36304. Thanks.\n", "created_at": "2012-08-18 15:59:44", "user": 37002, "id": 7845661}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "They simply serve as alternatives to the superset? and subset? method family.\n\nNeither the Comparable mixin nor <=> is implemented by intention, because a comparison with a completely disjunct other set would result in an undefined result, which then would cause exceptions when sorting an array of sets for example.\n\nI've also written a patch for rubyspec which tests the new methods and runs at least in MRI 1.8.7, 1.9.2 and 1.9.3. It is available here: https://github.com/aef/rubyspec\n", "labels": [], "number": 59, "updated_at": "2014-07-13 06:04:45", "user": 61401, "closed_at": "2012-08-30 04:42:53", "id": 2266970, "title": "Added <, >, <= and >= operators to Set", "url": "https://api.github.com/repos/ruby/ruby/issues/59", "created_at": "2011-11-17 09:52:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7845754", "text": "If you really want to let ruby-core accept patch, you should put this onto bugs.ruby-lang.org.\nThis opinion is new feature, so it probably doesn't be accepted in 2.0.\nBut it's possible on version if you got success matz's acceptance.\n\nGood luck.\n", "created_at": "2012-08-18 16:12:54", "user": 37002, "id": 7845754}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148823", "text": "Just committed an equivalent patch, thanks.\n", "created_at": "2012-08-30 04:03:49", "user": 10236, "id": 8148823}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148839", "text": "Someone please close this, or can I be part of @ruby?\n", "created_at": "2012-08-30 04:05:02", "user": 10236, "id": 8148839}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148908", "text": "> or can I be part of @ruby?\n\nWelcome,  now you are.  Please close this yourself. \n", "created_at": "2012-08-30 04:12:06", "user": 15377, "id": 8148908}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8149264", "text": "Merged in r36853. (Since I already had an equivalent patch I didn't pull your commit)\n", "created_at": "2012-08-30 04:42:53", "user": 10236, "id": 8149264}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I made it possible to use Pathname.[] as an alternative to Pathname.new, as the Set class does it already. Also I did mark the global Pathname() method deprecated because I think poisoning the global namespace with methods named after classes should be considered bad style. I hope you share that opinion.\n\nI've also written a patch for rubyspec which tests the new methods and runs at least in MRI 1.9.2 and 1.9.3. It does although not test for the deprecation warnings, because Brian Ford wouldn't accept the patch if it would do so. It is available here: https://github.com/aef/rubyspec/tree/pathname_brackets_instead_global_method\n", "labels": [], "number": 60, "updated_at": "2011-11-17 21:50:58", "user": 61401, "closed_at": "2011-11-17 21:51:45", "id": 2274172, "title": "Pathname['abc'] instead of Pathname('abc') global method as constructor alternative", "url": "https://api.github.com/repos/ruby/ruby/issues/60", "created_at": "2011-11-17 21:50:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[ruby-core#7363](https://bugs.ruby-lang.org/issues/7363)\n\nI made it possible to use Pathname.[] as an alternative to Pathname.new, as the Set class does it already. Also I did mark the global Pathname() method deprecated because I think poisoning the global namespace with methods named after classes should be considered bad style. I hope you share that opinion.\n\nI've also written a patch for rubyspec which tests the new methods and runs at least in MRI 1.9.2 and 1.9.3. It does although not test for the deprecation warnings, because Brian Ford wouldn't accept the patch if it would do so. It is available here: https://github.com/aef/rubyspec/tree/pathname_brackets_instead_global_method\n", "labels": [], "number": 61, "updated_at": "2014-06-21 01:38:16", "user": 61401, "closed_at": "2012-11-18 22:13:16", "id": 2274272, "title": "Pathname['abc'] instead of Pathname('abc') global method as constructor alternative", "url": "https://api.github.com/repos/ruby/ruby/issues/61", "created_at": "2011-11-17 22:00:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2782986", "text": "+1\n", "created_at": "2011-11-17 22:21:57", "user": 23423, "id": 2782986}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2789356", "text": "+1\n", "created_at": "2011-11-18 14:03:42", "user": 77664, "id": 2789356}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2791989", "text": "Even if `Pathname()` sticks around, `Pathname[]` is a good addition.\n\nPersonally I'd like to see the library optimized, renamed to just `Path` and added to core.\n", "created_at": "2011-11-18 17:46:24", "user": 23423, "id": 2791989}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/2792321", "text": "I would like that too.\n\nOn Fr, 2011-11-18 at 09:46 -0800, 7rans wrote:\n\n> Even if `Pathname()` sticks around, `Pathname[]` is a good addition.\n> \n> Personally I like to see the library optimized, renamed to just `Path` and added to core.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ruby/ruby/pull/61#issuecomment-2791989\n", "created_at": "2011-11-18 18:13:31", "user": 61401, "id": 2792321}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7845771", "text": "If you really want to let ruby-core accept patch, you should put this onto bugs.ruby-lang.org.\nThis opinion is new feature, so it probably doesn't be accepted in 2.0.\nBut it's possible on version if you got success matz's acceptance.\n\nGood luck.\n", "created_at": "2012-08-18 16:14:21", "user": 37002, "id": 7845771}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10413878", "text": "I've added reference to the ruby-core ticket in the description.\n", "created_at": "2012-11-15 16:06:53", "user": 277819, "id": 10413878}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10492823", "text": "Closing this as there is already an [open ticket on redmine](https://bugs.ruby-lang.org/issues/7363)\n", "created_at": "2012-11-18 22:13:16", "user": 277819, "id": 10492823}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed the SupportedPlatforms URL is leading to a 404, this fixes the link in the README\n", "labels": [], "number": 62, "updated_at": "2014-06-13 09:56:08", "user": 87115, "closed_at": "2011-12-12 08:38:35", "id": 2481341, "title": "Fixed SupportedPlatforms URL in the README", "url": "https://api.github.com/repos/ruby/ruby/issues/62", "created_at": "2011-12-07 22:53:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3103336", "text": "I merged in r34015, thanks!\n", "created_at": "2011-12-12 08:38:35", "user": 13423, "id": 3103336}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "lazy assigned load_path searched in loading_table were not expanded (line #186),\nbut all features, pushed to loading table, are expanded.\n\nThis bug is hidden because load_path is allways filled in loaded_features loop (line #160),\nbut if we try to optimize this loop (http://redmine.ruby-lang.org/issues/5427 , https://gist.github.com/1272991), \nthen load_path could be not filled, and bug exposed.\n", "labels": [], "number": 63, "updated_at": "2014-06-25 01:34:29", "user": 249427, "closed_at": "2011-12-13 06:00:15", "id": 2484432, "title": "Fix hidden bug in `rb_feature_p`", "url": "https://api.github.com/repos/ruby/ruby/issues/63", "created_at": "2011-12-08 07:05:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3058797", "text": "Ticket created: http://redmine.ruby-lang.org/issues/5727\n", "created_at": "2011-12-08 07:21:58", "user": 249427, "id": 3058797}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The problem are discussed here: https://github.com/rails/rails/issues/3164. \n\nTo summarize, if the HTTP connection type is Keep-Alive, and the response is 304(Empty body and no Content-Length), then webrick will close the connection and generate a warning. \n\nThis was introduced in https://github.com/ruby/ruby/commit/4ce158147502304af431c820c227134628578e74\n", "labels": [], "number": 64, "updated_at": "2011-12-20 03:30:40", "user": 192933, "closed_at": "2011-12-20 03:30:38", "id": 2505225, "title": "HTTP Keep-Alive should be honored for 304 response", "url": "https://api.github.com/repos/ruby/ruby/issues/64", "created_at": "2011-12-09 18:51:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3213784", "text": "Looks like it is fixed in https://github.com/ruby/ruby/commit/6ef323d6f8a4cb768ce8217171487d8932bc7bd8 and https://github.com/ruby/ruby/commit/0cbec6027cfb755972f80aab57920008d50fe842\nClosing this\n", "created_at": "2011-12-20 03:30:38", "user": 192933, "id": 3213784}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "s/legnth/length/ in negative length error message.\n", "labels": [], "number": 65, "updated_at": "2014-06-13 09:56:09", "user": 7378, "closed_at": "2011-12-12 07:19:54", "id": 2518394, "title": "fix small typo in stringio.co", "url": "https://api.github.com/repos/ruby/ruby/issues/65", "created_at": "2011-12-11 23:55:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3102816", "text": "Applied.  Thank you!\n", "created_at": "2011-12-12 07:19:54", "user": 15377, "id": 3102816}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It moderately increase performance of application loading.\n", "labels": [], "number": 66, "updated_at": "2014-06-12 09:59:07", "user": 249427, "closed_at": "2012-11-18 22:33:09", "id": 2548891, "title": "Keep LOADED_FEATURES sorted by filename without extention for faster lookup on require.", "url": "https://api.github.com/repos/ruby/ruby/issues/66", "created_at": "2011-12-14 08:37:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3756711", "text": "After installing the tuned ruby using https://gist.github.com/1688857 my specs run about 10-20% faster. No problems nor instabilities so far -> +1 :)\n", "created_at": "2012-02-01 10:32:07", "user": 175494, "id": 3756711}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7671180", "text": "Just an added (fairly large number) of datapoint(s): Nearly everyone at @Shopify has been running with this patch in development and production for over half a year with no bugs traced back to it.\n", "created_at": "2012-08-11 23:15:13", "user": 1284, "id": 7671180}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10493281", "text": "I've opened up a ticket for this on redmine as [#7387](https://bugs.ruby-lang.org/issues/7387)\n", "created_at": "2012-11-18 22:33:09", "user": 277819, "id": 10493281}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This avoids breaking from method chains in many cases. I don't see any other way to do this without this method.\n\nCan someone confirm pull request are a valid way of submitting patches ? I cannot register on the mailing list for some reason, it seems to be broken.\n\nExample:\n\n``` ruby\n[ 1, 2, 3, 4].select{|x| x.odd?}.embed{|x| {:total => x.count, :data => x}}\n```\n", "labels": [], "number": 67, "updated_at": "2014-06-18 08:20:37", "user": 110280, "closed_at": "2012-11-18 22:40:45", "id": 2551445, "title": "* Add Object#embed which works like tap but returns the block's value", "url": "https://api.github.com/repos/ruby/ruby/issues/67", "created_at": "2011-12-14 13:29:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3139503", "text": "I'll add that I did not have any revelation on the method's name, i guess wrap would also be a nice candidate, happy to change that if needed.\n", "created_at": "2011-12-14 13:36:49", "user": 110280, "id": 3139503}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3139867", "text": "It's OK you posted here.\n\nThoughts:\n- Do you have any real-world use case?  The example you provided is a bit too artificial that it seems less useful than `{:total => [1, 2, 3, 4].select ... }`.\n- Did you consider extending [ActiveSupport](https://github.com/rails/rails)? Other core people are puritanical to these nifty littile new methods these days.  Perhaps it might be easier for you to first pursuade ActiveSupport guys, then let them pursuade us.\n", "created_at": "2011-12-14 14:05:40", "user": 15377, "id": 3139867}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3140412", "text": "Hi shyouhei,\n\nThanks for the quick reply. Here's some clarifications:\n- The whole idea is to not break method chains, just like `Object#tap` so if you need more modifications it, e.g: `[ 1, 2, 3, 4].select{|x| x.odd?}.embed{|x| {:total => x.count, :data => x}}.to_json`\n- This is not specially targeted at rails code, but generic ruby programming (where you might not have ActiveSupport included). Otherwise, sure a gem could be used to re-open Object and add the method there.\n\nI hope this helps a little\n", "created_at": "2011-12-14 14:48:11", "user": 110280, "id": 3140412}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3160945", "text": "I think these other names could also be valid for this method:\n- wrap\n- fence\n", "created_at": "2011-12-15 13:30:28", "user": 110280, "id": 3160945}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3338226", "text": "any other thoughts regarding this PR ?\n", "created_at": "2012-01-03 10:24:50", "user": 110280, "id": 3338226}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3559333", "text": "Actually, Rails core have been considering introducing this method into ActiveSupport, but haven't come up with a good method name so far.\n\nBTW I would like to see this feature implemented in Ruby, but -1 for the method names `embed`, `wrap` or `fence`.\nIMO simply `do` would do since it simply **does** the block.\n", "created_at": "2012-01-19 08:07:02", "user": 11493, "id": 3559333}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3559445", "text": "how about doto then, so it doesn't step on the do block word\n", "created_at": "2012-01-19 08:19:25", "user": 110280, "id": 3559445}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3559690", "text": "`Object#doto`? That doesn't look like a typical English word...\n", "created_at": "2012-01-19 08:48:38", "user": 11493, "id": 3559690}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3560511", "text": "the problem with do is that it would allow:\n\n``` ruby\n[].do do |obj|\n   foo\nend\n```\n", "created_at": "2012-01-19 10:09:28", "user": 110280, "id": 3560511}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3560610", "text": "I'm happy to see it considered for rails, but since I use ruby mostly outside of rails and like to keep my gem dependency graph small, I'd be very happy to see this go in without having to pull in activerecord\n", "created_at": "2012-01-19 10:16:44", "user": 110280, "id": 3560610}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4666389", "text": "I think that with the recent addition of Enumerable#lazy this makes even more sense\n", "created_at": "2012-03-23 19:33:37", "user": 110280, "id": 4666389}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10493744", "text": "Closing this, I've opened up a ticket on redmine as feature [#7388](https://bugs.ruby-lang.org/issues/7388)\n", "created_at": "2012-11-18 22:40:44", "user": 277819, "id": 10493744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Correlated patch against 1.9.3-p0 and performance testing at https://gist.github.com/1480404\n", "labels": [], "number": 68, "updated_at": "2014-06-16 01:19:43", "user": 249427, "closed_at": "2012-11-18 23:03:19", "id": 2564451, "title": "Cache expanded_load_path to reduce startup time", "url": "https://api.github.com/repos/ruby/ruby/issues/68", "created_at": "2011-12-15 09:08:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3756708", "text": "After installing the tuned ruby using https://gist.github.com/1688857 my specs run about 10-20% faster. No problems nor instabilities so far -> +1 :)\n", "created_at": "2012-02-01 10:31:59", "user": 175494, "id": 3756708}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4861739", "text": "updated against trunk.\nadd check for already expanded path.\n", "created_at": "2012-03-31 21:11:26", "user": 249427, "id": 4861739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7671183", "text": "Just an added (fairly large number) of datapoint(s): Nearly everyone at @Shopify has been running with this patch in development and production for over half a year with no bugs traced back to it.\n", "created_at": "2012-08-11 23:15:20", "user": 1284, "id": 7671183}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10495143", "text": "Closing this, please refer to [feature #5767 on redmine](https://bugs.ruby-lang.org/issues/5767)\n", "created_at": "2012-11-18 23:03:19", "user": 277819, "id": 10495143}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\nThis patch is a proposition of change for \"thread-local\" variables, I discovered recently that they are not thread local after all and keeping a wrong documentation is the worst we can do !\n\nFeel free to change the formulation as long as the documentation is changed to reflect the true behavior.\n\n( the discussion on this started on http://bugs.ruby-lang.org/issues/5750 )\n", "labels": [], "number": 69, "updated_at": "2011-12-15 17:08:38", "user": 2983, "closed_at": "2012-01-03 07:02:33", "id": 2569286, "title": "changed documentation for \"thread-local\" variables", "url": "https://api.github.com/repos/ruby/ruby/issues/69", "created_at": "2011-12-15 16:45:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3165461", "text": "Can you please switch a discussion and pull request to bugs.ruby-lang.org? We don't hope to discuss the same topic on two place. It can make confusing easily.\n\nMoreover, ruby upstream repository is svn. github is only mirror. so, we can't use github pull mechanism.\n\nThank you for your cooperation.\n", "created_at": "2011-12-15 17:08:38", "user": 82712, "id": 3165461}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In my current environment (Ubunu 11.04 32bit gcc-4.5.2) it gives 4% performance improvement.\n", "labels": [], "number": 70, "updated_at": "2014-06-14 15:12:05", "user": 249427, "closed_at": "2012-01-05 10:48:29", "id": 2635332, "title": "st use function instead of macro", "url": "https://api.github.com/repos/ruby/ruby/issues/70", "created_at": "2011-12-22 09:12:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3247820", "text": "Opened issue http://bugs.ruby-lang.org/issues/5789\n", "created_at": "2011-12-22 10:58:39", "user": 249427, "id": 3247820}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3319955", "text": "Patch includes now:\n- pool allocation for table structs\n- packing for tables smaller than 6.\n", "created_at": "2011-12-31 06:09:24", "user": 249427, "id": 3319955}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3339171", "text": "Impressions:\n- C++ style comments are not loved so much in this project. You'd better avoid them.\n- Some magic numbers are not clear to me.  Why did you change `ST_DEFAULT_MAX_DENSITY` from 5 to 3?\n- You chose to pool-allocate something.\n  - `HOLDER_SIZE` might be too small.  For instance, [jemalloc uses 4MiB chunks](http://www.canonware.com/download/jemalloc/jemalloc-latest/doc/jemalloc.html).\n  - Isn't it space-inefficient that all `struct entry_typename` holds a pointer to its holder?\n", "created_at": "2012-01-03 12:25:20", "user": 15377, "id": 3339171}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3343659", "text": "> HOLDER_SIZE might be too small. For instance, jemalloc uses 4MiB chunks.\n\nHmm... I didn't check bigger size. I chooze not too big chunk size so that they could be garbage collected.\n\n> Isn't it space-inefficient that all struct entry_typename holds a pointer to its holder?\n\nIt is very small overhead. With this simple pool allocation application uses upto 10% less memore - so that it seems that standard linux memory allocator use bigger overhead or/and suffers from fragmentation.\n", "created_at": "2012-01-03 18:08:11", "user": 249427, "id": 3343659}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3345023", "text": "> C++ style comments are not loved so much in this project. You'd better avoid them.\n\nOk, I've remove them.\n\n> Some magic numbers are not clear to me. Why did you change ST_DEFAULT_MAX_DENSITY from 5 to 3?\n\nI've double checked: Redmine application and my homemade rails application gains 1-2% performance improvement by this.\nIt is very understandable: less density => shorter linked lists in hash buckets => faster searching for key.\nST_DEFAULT_MAX_DENSITY set to 3 => hashes first rehashed on 33 elements => small hashes are not affected, but bigger hashes are faster (and they even build faster)\n", "created_at": "2012-01-03 19:47:29", "user": 249427, "id": 3345023}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3363633", "text": "> > Isn't it space-inefficient that all struct entry_typename holds a pointer to its holder?\n> \n> It is very small overhead. With this simple pool allocation application uses upto 10% less memore - so that it seems that standard linux memory allocator use bigger overhead or/and suffers from fragmentation.\n\nThe easiest way is to allocate a holder using [posix_memalign()](http://pubs.opengroup.org/onlinepubs/009604499/functions/posix_memalign.html) to force them aligned to, say, 1MiB boundary.  Then obtaining a holder from an entry pointer goes into a matter of bit-masking a few LSBs out.\n\n> > Some magic numbers are not clear to me. Why did you change ST_DEFAULT_MAX_DENSITY from 5 to 3?\n> \n> I've double checked: Redmine application and my homemade rails application gains 1-2% performance improvement by this.\n> It is very understandable: less density => shorter linked lists in hash buckets => faster searching for key.\n> ST_DEFAULT_MAX_DENSITY set to 3 => hashes first rehashed on 33 elements => small hashes are not affected, but bigger hashes are faster (and they even build faster)\n\nHmm.  Lesser density yields more rehash operation so I think the story is not that simple, but anyway I believe your experimental result.\n", "created_at": "2012-01-05 00:18:48", "user": 15377, "id": 3363633}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3363718", "text": "Is it possible for you to divide this request into two?  The \"st use function instead of macro\" part seems OK so I can merge them if you provide a separate request.  The ambicious pool-allocation part on the other hand, needs more review.\n", "created_at": "2012-01-05 00:26:03", "user": 15377, "id": 3363718}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3365790", "text": "> Is it possible for you to divide this request into two? The \"st use function instead of macro\" part seems OK so I can merge them if you provide a separate request.\n\nYes, I wished to do it by myself. Could I also add some preparation for pool allocation and packing in this pool request: declare some macros-es (like PKEY, PVAL and st_alloc__), so that further pull requests would be more straightforward?\nUsage of PKEY(table, i) and PVAL(table, i) seems to me more readable than table->bins[i_2] and table->bins[i*2+1], are you agree?\n", "created_at": "2012-01-05 05:22:18", "user": 249427, "id": 3365790}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3366161", "text": "> Hmm. Lesser density yields more rehash operation so I think the story is not that simple, but anyway I believe your experimental result.\n\nYes, you are right: building big hashes seems to be slower. But they are not usually often build in typical application. Big hashes are more often \"build once, access many times\",  and when access/build proportion is large, less dense hash is faster up to 7% .\n", "created_at": "2012-01-05 06:26:49", "user": 249427, "id": 3366161}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3368171", "text": "Ok, first pull request is #77\n", "created_at": "2012-01-05 10:48:28", "user": 249427, "id": 3368171}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use packing for tables upto 12 elements. It gives ~8% of performance improvement, compared to trunk, and measurable memory footprint reduction (upto 50% on several kind of load).\n", "labels": [], "number": 71, "updated_at": "2014-06-12 10:12:17", "user": 249427, "closed_at": "2012-01-17 13:56:57", "id": 2635365, "title": "Pack small st_table (not only type_numhash)", "url": "https://api.github.com/repos/ruby/ruby/issues/71", "created_at": "2011-12-22 09:17:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3247129", "text": "Sounds interesting.\n", "created_at": "2011-12-22 09:35:38", "user": 15377, "id": 3247129}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3247816", "text": "Opened issue http://bugs.ruby-lang.org/issues/5789\n", "created_at": "2011-12-22 10:58:30", "user": 249427, "id": 3247816}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3337643", "text": "Hi, I can't compile your branch.  I get:\n\n```\n% make miniruby\ncompiling st.c\nst.c: In function 'unpack_entries':\nst.c:500:5: warning: initializer element is not computable at load time\nst.c: In function 'st_update':\nst.c:836:5: error: too many arguments to function 'find_entry'\nst.c:378:1: note: declared here\nmake: *** [st.o] Error 1\nzsh: exit 2     make miniruby\n```\n\n_EDIT_ I'm trying to compile funny-falcon/ruby@f37a569\n", "created_at": "2012-01-03 09:05:35", "user": 15377, "id": 3337643}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3343755", "text": "Yeah, I'm more concentrated on https://github.com/ruby/ruby/pull/70 branch.\nI'll fix it tomorrow.\n", "created_at": "2012-01-03 18:15:14", "user": 249427, "id": 3343755}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3344862", "text": "Ok, I've fixed.\n", "created_at": "2012-01-03 19:34:36", "user": 249427, "id": 3344862}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3528108", "text": "Closed in favor of https://github.com/ruby/ruby/pull/84\n", "created_at": "2012-01-17 13:56:57", "user": 249427, "id": 3528108}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Current code using `writeline` was causing sub-optimal conversing with a proxy due to the connect tunnel request headers being split over multiple packets. The modification I made allows the connect request to be written as one packet, avoiding problems and optimizing the conversation.\n", "labels": [], "number": 72, "updated_at": "2014-06-12 08:57:45", "user": 742745, "closed_at": "2012-01-23 12:54:20", "id": 2689596, "title": "Writing entire packet at once to avoid incomplete transmission", "url": "https://api.github.com/repos/ruby/ruby/issues/72", "created_at": "2011-12-30 16:01:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3613316", "text": "Merged as of r34362.  Thank you.\n", "created_at": "2012-01-23 12:54:20", "user": 15377, "id": 3613316}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently a SIGTERM is ignored by the webrick server. \nThis commit re-raises any exception which is fatal to ruby. \nOr signals that the process should terminate. \n", "labels": [], "number": 73, "updated_at": "2012-04-16 06:24:07", "user": 263, "closed_at": "2012-04-16 06:24:07", "id": 2691906, "title": "Re-raise dangerous exceptions in webrick server", "url": "https://api.github.com/repos/ruby/ruby/issues/73", "created_at": "2011-12-30 21:47:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3317626", "text": "ruby@8e171448, where this change was introduced, seems to imply that some exceptions were crashing webrick. \nIs it possible that `SignalException` is responsible for this?\nMaybe only some signals should be ignored and trap should be used instead?\n", "created_at": "2011-12-30 21:58:04", "user": 263, "id": 3317626}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5146423", "text": "r35303 merged it.\n", "created_at": "2012-04-16 06:24:07", "user": 13423, "id": 5146423}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\na.sample          #=> [7]\na.sample(4)      #=> [6, 4, 2, 5]\n", "labels": [], "number": 74, "updated_at": "2014-06-16 04:01:25", "user": 667909, "closed_at": "2012-01-04 09:04:03", "id": 2715545, "title": "Added additional documentation examples for Array#sample", "url": "https://api.github.com/repos/ruby/ruby/issues/74", "created_at": "2012-01-03 20:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3352157", "text": "Merged by r34210. Thanks.\n", "created_at": "2012-01-04 09:04:03", "user": 37002, "id": 3352157}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3360437", "text": "Shouldn't `a.sample #=> 7` (not an array)?\n", "created_at": "2012-01-04 20:18:38", "user": 20158, "id": 3360437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3361586", "text": "fark... My first commit to ruby and I messed it up. :(\nNew pull request sent that fixes it... Sorry everyone.\n", "created_at": "2012-01-04 21:37:52", "user": 667909, "id": 3361586}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3362408", "text": "no worries. everyone messes up every once in a while.\n\ni just happened to see it while passing through, and i was happy to learn (relearn?) that the #sample method exists.\n", "created_at": "2012-01-04 22:37:40", "user": 20158, "id": 3362408}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 75, "updated_at": "2012-01-05 19:59:49", "user": 667909, "closed_at": "2012-01-04 21:29:19", "id": 2728578, "title": "Fixed the typo in array#sample", "url": "https://api.github.com/repos/ruby/ruby/issues/75", "created_at": "2012-01-04 21:29:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3375393", "text": "Please fold two patches. And please fix your patch description. I think you made good clarification to array#sample doc, not only typo.\n", "created_at": "2012-01-05 19:58:21", "user": 82712, "id": 3375393}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3375411", "text": "bac comments. Please ignore me.\n", "created_at": "2012-01-05 19:59:49", "user": 82712, "id": 3375411}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "a.sample #=> 7 not\na.sample #=> [7]\n", "labels": [], "number": 76, "updated_at": "2012-01-05 02:53:17", "user": 667909, "closed_at": "2012-01-05 02:53:17", "id": 2728663, "title": "Fixed the typo in array#share.", "url": "https://api.github.com/repos/ruby/ruby/issues/76", "created_at": "2012-01-04 21:37:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3364964", "text": "Fixed by r34212. Thank you.\n", "created_at": "2012-01-05 02:53:17", "user": 37002, "id": 3364964}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch makes following changes:\n\n1) `st use function instead of macro` c3328a2f71aaeaa65fe752a4863d4f63ffa68a7a - turning some macros-es into functions.\nIt seems that modern compiler (gcc 4.5) with aggressive optimization (-O3 enabled by default in ruby-1.9.3) better optimizes functions. Also, it uses tight loop for searching in a packed table.\n2) `st macroses for packed tables` f92af2b7c1a0c8c51068e0a537b9857eb29ee2ec - several simple macros-es to organize packed table access\n3) `st macroses for allocation` faf83e360e7cc7a0b2b2e3e4d95d8fbc6df9838a - wrap allocation of st_\\* structs into macroses, so that they could be overridden in a future to optimize hash construction\n", "labels": [], "number": 77, "updated_at": "2014-06-16 03:51:47", "user": 249427, "closed_at": "2012-01-15 15:49:47", "id": 2733801, "title": "Organize st.c", "url": "https://api.github.com/repos/ruby/ruby/issues/77", "created_at": "2012-01-05 10:47:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3499702", "text": "Merged this branch into trunk (as revision 34313).  Thank you.\n", "created_at": "2012-01-15 15:49:47", "user": 15377, "id": 3499702}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix inconsistent usage of xmalloc/xfree and malloc/free in ruby-trunk.\nErrors founded with CALC_EXACT_MALLOC_SIZE set to 1.\n`make check` now works on Ubuntu 11.04 without crashes and has exactly same failures as ruby-trunk. \n\nDidn't test Windows related libraries.\n\nPatch reverts Oniguruma to use ruby_xmalloc and ruby_xfree. I did not test how it affects performance.\n", "labels": [], "number": 78, "updated_at": "2014-06-28 15:23:20", "user": 249427, "closed_at": "2012-01-09 09:13:52", "id": 2761200, "title": "Make ruby workable with CALC_EXACT_MALLOC_SIZE set to 1", "url": "https://api.github.com/repos/ruby/ruby/issues/78", "created_at": "2012-01-08 15:00:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3404654", "text": "I merged parts of this in [r34238](http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=34238&view=revision).\n\nI don't merge regint.h because I hesitated.\n\nI don't merge ruby_mimmalloc because I can't understand why it is needed, and temporally fix with free(3).\n", "created_at": "2012-01-08 21:10:05", "user": 13423, "id": 3404654}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3407974", "text": "I watched to [r3428](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/34238)\n`cfunc.c` and `syslog.c` should be also fixed, cause they produce SIGSEGV while `make check`.\n", "created_at": "2012-01-09 06:48:48", "user": 249427, "id": 3407974}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3408691", "text": "> I don't merge ruby_mimmalloc because I can't understand why it is needed, and temporally fix with free(3).\n\nYour \"temporary fix\" is not workable: `make test` fails on `test_class.rb` (SIGSEGV).\n`ruby_mimmalloc` is unavoidable because only main thread is allocated with `malloc`, all other are allocated with `ruby_xmalloc`.\n", "created_at": "2012-01-09 08:39:41", "user": 249427, "id": 3408691}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3409006", "text": "Updated pull request #79\n", "created_at": "2012-01-09 09:13:52", "user": 249427, "id": 3409006}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updated pull request #78\n", "labels": [], "number": 79, "updated_at": "2014-06-13 09:56:05", "user": 249427, "closed_at": "2012-01-16 11:42:12", "id": 2766461, "title": "Make ruby workable with CALC_EXACT_MALLOC_SIZE set to 1", "url": "https://api.github.com/repos/ruby/ruby/issues/79", "created_at": "2012-01-09 09:13:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3509564", "text": "Merged in r34257, thanks!\n", "created_at": "2012-01-16 11:42:56", "user": 13423, "id": 3509564}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- change capacity increment from `(capa + 1) * 2` to `capa * 2 + 1` .\n  \n  previous increment formula leads to inconvenient allocation patterns: 25bytes, 51bytes, etc\n  new formula leads to more comfortable allocation pattern: 24b, 48b, 96b\n- change STR_BUF_MIN_SIZE from 128 to 79\n  \n  128 leads to allocation of 129 bytes, which is very uncomfortable for allocators and unnecessary large.\n  (during Redmine startup this method is called about 3000000 times with capa < 128)\n", "labels": [], "number": 80, "updated_at": "2014-06-17 10:56:05", "user": 249427, "closed_at": "2012-01-11 10:24:04", "id": 2784687, "title": "Couple of tiny changes to string", "url": "https://api.github.com/repos/ruby/ruby/issues/80", "created_at": "2012-01-10 12:55:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3433048", "text": "The best practice of to get ignorance is, you don't show any performance number. \n", "created_at": "2012-01-10 17:13:49", "user": 82712, "id": 3433048}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3444547", "text": "I've made testing and realized my shame.\nWhile last commit has sever positive impact on performance with libc memory allocator, whole idea surprisingly doesn't cost the effort. I had wrong assumption that if some allocations are suitable for allocator, than application could win of it.\n\nSorry for being noising. Could some one close http://bugs.ruby-lang.org/issues/5875 ?\n", "created_at": "2012-01-11 10:24:04", "user": 249427, "id": 3444547}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3450451", "text": "> Could some one close http://bugs.ruby-lang.org/issues/5875 ?\n\ndone.\n", "created_at": "2012-01-11 17:47:16", "user": 82712, "id": 3450451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3450963", "text": "Thank you, Kosaki. I appreciate your attention.\n", "created_at": "2012-01-11 18:20:38", "user": 249427, "id": 3450963}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 81, "updated_at": "2012-01-10 17:40:35", "user": 249427, "closed_at": "2012-01-10 13:48:11", "id": 2784905, "title": "For small sizes malloc+memset is usually faster than calloc", "url": "https://api.github.com/repos/ruby/ruby/issues/81", "created_at": "2012-01-10 13:15:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3429871", "text": "while it is true for small script, it is not confirmed for vm_xcalloc\n", "created_at": "2012-01-10 13:48:11", "user": 249427, "id": 3429871}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3433150", "text": "Why do you think it's faster? At random change is no thank you.\n", "created_at": "2012-01-10 17:19:29", "user": 82712, "id": 3433150}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3433575", "text": "Well, you are right, no thank to me. I closed issue by myself.\n", "created_at": "2012-01-10 17:40:35", "user": 249427, "id": 3433575}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In the optparse library, the wrong string is used to remove the `i`, `m`, and `x` options from the encoding options when casting an argument to a `Regexp`.  It removes all characters that are NOT `i`, `m`, or `x`.  This results in the wrong options being passed as the third argument of `Regexp.new`.\n\n`optparse.rb:1714: warning: encoding option is ignored - %s` is thrown when valid options are passed as an argument, even though the options `i`, `m`, and `x` are correctly interpreted.  Also, the encoding of a Regexp argument cannot be set.\n", "labels": [], "number": 82, "updated_at": "2014-06-24 18:15:31", "user": 405526, "closed_at": "2012-01-16 07:48:25", "id": 2811007, "title": "Optparse passes incorrect options when casting to a Regexp", "url": "https://api.github.com/repos/ruby/ruby/issues/82", "created_at": "2012-01-11 22:25:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3507205", "text": "Seems nobu merged this.  Thank you.\n", "created_at": "2012-01-16 07:48:25", "user": 15377, "id": 3507205}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Usage of specialized pool allocation for st_table, st_table_entry and st_table.bins of smallest size.\n\nIt gives up to 20% peak performance improvement (assuming C extension like in test below) and up to 4% in average (assuming rails application). Also it gives considerable memory footprint reduction.\n\nPerformance testing is here https://gist.github.com/1626602\n", "labels": [], "number": 83, "updated_at": "2014-06-12 15:08:51", "user": 249427, "closed_at": "2012-11-18 23:13:47", "id": 2868438, "title": "Use pool allocation for st_table", "url": "https://api.github.com/repos/ruby/ruby/issues/83", "created_at": "2012-01-17 13:29:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3756704", "text": "After installing the tuned ruby using https://gist.github.com/1688857 my specs run about 10-20% faster. No problems nor instabilities so far -> +1 :)\n", "created_at": "2012-02-01 10:31:54", "user": 175494, "id": 3756704}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7671184", "text": "Just an added (fairly large number) of datapoint(s): Nearly everyone at @Shopify has been running with this patch in development and production for over half a year with no bugs traced back to it.\n", "created_at": "2012-08-11 23:15:24", "user": 1284, "id": 7671184}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10495804", "text": "Closing this, please refer to [feature #5903 on redmine](https://bugs.ruby-lang.org/issues/5903)\n", "created_at": "2012-11-18 23:13:47", "user": 277819, "id": 10495804}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Patch uses same technique as used for numhashes in trunk for packing tables of other types as well.\n\nAlso it use pointers in `st_table` structure (bins, head, tail) for packing tables of size 0 and 1, so that they need not to allocate bins at all.\n\nIt gives great speedup for creating small hashes, and little overhead for bigger hashes. It gives very countable memory footprint reduction.\n\nInvestigation shows, that typical rails application allocates tons of small hashes. Up to 40% of whole allocated hashes never grows bigger than 1 element size.\n\nCombined with #83 , it is faster than ruby-trunk even for hashes of sizes 7-10.\n\nPerformance testing using C extension is here https://gist.github.com/1626602 (also pool allocation patch tested here).\n", "labels": [], "number": 84, "updated_at": "2014-06-14 09:12:56", "user": 249427, "closed_at": "2012-03-10 14:58:20", "id": 2868697, "title": "Pack small hash tables (up to 6 entries) ", "url": "https://api.github.com/repos/ruby/ruby/issues/84", "created_at": "2012-01-17 13:55:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3756702", "text": "After installing the tuned ruby using https://gist.github.com/1688857 my specs run about 10-20% faster. No problems nor instabilities so far -> +1 :)\n", "created_at": "2012-02-01 10:31:48", "user": 175494, "id": 3756702}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3888325", "text": "Updated patch against trunk.\n", "created_at": "2012-02-09 14:45:42", "user": 249427, "id": 3888325}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4343106", "text": "This patch has been merged, no?\n", "created_at": "2012-03-06 12:01:09", "user": 30442, "id": 4343106}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4343179", "text": "No. Most of code, but not packing of \"st_table of any kind\" nor ultrapacking.\n", "created_at": "2012-03-06 12:07:31", "user": 249427, "id": 4343179}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4343189", "text": "I'll update patch against trunk in a day\n", "created_at": "2012-03-06 12:08:13", "user": 249427, "id": 4343189}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4344524", "text": "Note that `Qundef` cannot be appeared in st.c.\n", "created_at": "2012-03-06 13:49:29", "user": 16700, "id": 4344524}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4345939", "text": "@nobu , but how then we should workaround hash behaviour? When we call to `reject!` it uses `st_delete_safe` with `never` set to `Qundef`, so that our current key is overwritten with `Qundef` - and we could not find it in our keys.\n\nValuable option (as I think) is add `ST_DELETE_SAFE` to `enum st_retval` and/or add function `st_foreach_safe` which accepts `never` argument (and remove usage of `st_delete_safe` from `hash_foreach_iter`).\n(I know that `st_foreach_safe` exists in `hash.c`, maybe use another name for it)\n\nWhat is your opinion?\n", "created_at": "2012-03-06 15:12:57", "user": 249427, "id": 4345939}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4395045", "text": "Sorry for trashing pool request :( I'll fix it today\n", "created_at": "2012-03-08 16:41:06", "user": 249427, "id": 4395045}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4416266", "text": "I've updated patch.\n\nFifth commit (f67294a1bea36a63dc58442a604965c495140ae1) is slightly backward incompatible, but ST_CHECK is used only in couple of places of standard library, and I could not find other usage nor by github, nor by google.\n", "created_at": "2012-03-09 13:29:21", "user": 249427, "id": 4416266}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5202680", "text": "we've had some resque workers get stuck in an infinite loop during a find_entry (st.c) call with a 4 element cycle with this ultra packed perf patch. our build didn't include the 6270762 sha. problem doesn't seem to manifest under ruby-1.9.3_p125. it pains me to post this without a repro.\n", "created_at": "2012-04-18 16:28:35", "user": 14781, "id": 5202680}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5215589", "text": "Hi, rboyd. I know about rare stuck with my performance patch :(\nBut latest version (not published yet) (well, it is part of [tcs-ruby](https://github.com/thecodeshop/ruby/tree/tcs-ruby_1_9_3)) were tested with another issue's reporter and he reports no problems found, - and it is clear backport of accepted changes (with packing, but without ultrapacking)\n\nSo that, I think ruby trunk has no bug.\n\nPlease, test [tcs-ruby](https://github.com/thecodeshop/ruby/tree/tcs-ruby_1_9_3) or ruby-trunk, not this pull request or previous version of patch.\nI'll publish new version of patch soon, I just waited for tester's report. Could you report about your testing? You could do it here, at https://groups.google.com/forum/?fromgroups#!forum/thecodeshop , or by mail funny.falcon@gmail.com . Thanks.\n", "created_at": "2012-04-19 06:15:51", "user": 249427, "id": 5215589}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have added a to_hash method to the OpenStruct class. The use case is that in my current project, I wanted to run to_json on nested ostructs. The most straight forward way that was found was to convert nested ostructs to nested hashes.\n", "labels": [], "number": 85, "updated_at": "2012-01-20 15:47:18", "user": 703845, "closed_at": "2012-01-20 13:10:27", "id": 2905379, "title": "Added to_hash.", "url": "https://api.github.com/repos/ruby/ruby/issues/85", "created_at": "2012-01-19 23:41:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3578040", "text": "Hi,\n\nI'm sorry. We never pull a new feature. Because of, every new feature request is required Matz's ack on our project policy. So, please discuss your proposal on ruby-core.  \n", "created_at": "2012-01-20 02:06:49", "user": 82712, "id": 3578040}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3583275", "text": "or on bugs.ruby-lang.org.\n\nhttp://bugs.ruby-lang.org/projects/ruby-trunk/issues/new\n", "created_at": "2012-01-20 13:10:27", "user": 15377, "id": 3583275}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3585453", "text": "Interesting process. Thanks for the heads up.\n", "created_at": "2012-01-20 15:47:18", "user": 703845, "id": 3585453}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Using friendlier variable names\n- Dropping `for..in` block for `#each`\n- Inlining if statement\n\nI used this as a general benchmark:\n\n``` ruby\nrequire 'benchmark'\n\ndef new_ostruct_member(arg); end\n\ndef generate_data\n  (0..1000).map do |i|\n    {\"#{'k' * rand(100)}#{i}\" => \"#{'v' * rand(100)}#{i}\"}\n  end.inject &:merge\nend\n\nhash = generate_data\n\n\nreport = Benchmark.bmbm do |x|\n  x.report(\"old\") { 1000.times {\n    @table = {}\n      for k,v in hash\n        @table[k.to_sym] = v\n        new_ostruct_member(k)\n      end\n  } }\n\n  x.report(\"new\") { 1000.times {\n    @ntable = {}\n    hash.each do |key, value|\n      @ntable[key.to_sym] = value\n      new_ostruct_member key\n    end\n  } }\nend\n\nputs \"Is new result equal to old result? #{@table == @ntable}\"\nputs \"New is #{report.map(&:to_s).map(&:split).map(&:last).map(&:to_f).inject(:/) * 100 - 100}% faster\"\n```\n\nGeneral speed improvement: ~27% faster, after fixing benchmark.\n", "labels": [], "number": 86, "updated_at": "2012-11-16 20:02:16", "user": 334809, "closed_at": "2012-11-16 20:02:16", "id": 2920641, "title": "Cleaning up the initialize method, improving performance", "url": "https://api.github.com/repos/ruby/ruby/issues/86", "created_at": "2012-01-21 09:52:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3597753", "text": "Cleaned up the example to be a little more fair.\n", "created_at": "2012-01-21 18:01:21", "user": 334809, "id": 3597753}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3597996", "text": "Updated the benchmark again, using better tools.\n", "created_at": "2012-01-21 18:31:46", "user": 334809, "id": 3597996}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Firstly, it is cosmetic cleanup.\nSecondly, I could not understand, why, but it gives minor performance gain for rendering some rails page (about 1%)\n", "labels": [], "number": 87, "updated_at": "2014-06-21 19:16:49", "user": 249427, "closed_at": "2012-11-18 23:21:17", "id": 2934306, "title": "use rb_str_free for freeing string in parse.y", "url": "https://api.github.com/repos/ruby/ruby/issues/87", "created_at": "2012-01-23 13:04:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3615624", "text": "It is because of optimization.\nobjdump -d parse.o differs as following.\n\nBefore:\n000000000000f67a <dispose_string>:\n    f67a:       55                      push   %rbp\n    f67b:       48 89 e5                mov    %rsp,%rbp\n    f67e:       48 83 ec 10             sub    $0x10,%rsp\n    f682:       48 89 7d f8             mov    %rdi,-0x8(%rbp)\n    f686:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f68a:       48 8b 00                mov    (%rax),%rax\n    f68d:       25 00 20 00 00          and    $0x2000,%eax\n    f692:       48 85 c0                test   %rax,%rax\n    f695:       74 2b                   je     f6c2 <dispose_string+0x48>\n    f697:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f69b:       48 8b 00                mov    (%rax),%rax\n    f69e:       25 00 20 00 00          and    $0x2000,%eax\n    f6a3:       48 85 c0                test   %rax,%rax\n    f6a6:       75 0a                   jne    f6b2 <dispose_string+0x38>\n    f6a8:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f6ac:       48 83 c0 10             add    $0x10,%rax\n    f6b0:       eb 08                   jmp    f6ba <dispose_string+0x40>\n    f6b2:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f6b6:       48 8b 40 18             mov    0x18(%rax),%rax\n    f6ba:       48 89 c7                mov    %rax,%rdi\n    f6bd:       e8 00 00 00 00          callq  f6c2 <dispose_string+0x48>\n    f6c2:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f6c6:       48 89 c7                mov    %rax,%rdi\n    f6c9:       e8 00 00 00 00          callq  f6ce <dispose_string+0x54>\n    f6ce:       c9                      leaveq\n    f6cf:       c3                      retq\n\nAfter:\n000000000000f67a <dispose_string>:\n    f67a:       55                      push   %rbp\n    f67b:       48 89 e5                mov    %rsp,%rbp\n    f67e:       48 83 ec 10             sub    $0x10,%rsp\n    f682:       48 89 7d f8             mov    %rdi,-0x8(%rbp)\n    f686:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f68a:       48 89 c7                mov    %rax,%rdi\n    f68d:       e8 00 00 00 00          callq  f692 <dispose_string+0x18>\n    f692:       48 8b 45 f8             mov    -0x8(%rbp),%rax\n    f696:       48 89 c7                mov    %rax,%rdi\n    f699:       e8 00 00 00 00          callq  f69e <dispose_string+0x24>\n    f69e:       c9                      leaveq\n    f69f:       c3                      retq\n", "created_at": "2012-01-23 15:30:32", "user": 13423, "id": 3615624}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10496248", "text": "Closed, please refer to [Bug #7389 on redmine](https://bugs.ruby-lang.org/issues/7389)\n", "created_at": "2012-11-18 23:21:17", "user": 277819, "id": 10496248}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. embed `bits` into `heaps_slot`\n   It is faster a bit and more memory efficient after fork (tested with passenger)\n2. remove `heaps_freed`\n   It seems to be never properly used (I could be mistaken). But it definitely unused now.\n   (May be add usage for it instead of removing?)\n3. Simplify `HEAP_ALIGN*` macro usage for experiments (and for OpenBSD fix)\n", "labels": [], "number": 88, "updated_at": "2012-01-28 08:45:22", "user": 249427, "closed_at": "2012-01-28 08:45:22", "id": 2991632, "title": "Gc small fixes/trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/88", "created_at": "2012-01-27 08:23:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3685113", "text": "For GC issue, please create ticket on redmine and assign it Narihiro Nakamura.\n", "created_at": "2012-01-27 11:05:14", "user": 13423, "id": 3685113}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3699098", "text": "Close this request, cause third commit submitted to trunk, and I want to merge first and fourth commit.\n", "created_at": "2012-01-28 08:45:22", "user": 249427, "id": 3699098}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Too early call in `lazy_sweep` slows down sweep phase, cause while loop breaks on `if (has_free_object) { ... return TRUE;}` .\n\nHeap expand in `gc_clear_mark_on_sweep_slots` unnecessary expands number of heaps, which slows down iterations in `rb_objspace_call_finalizer`, and `gc_marks` (cause we often need to binary search heap for pointer).\n\nTesting suit: https://gist.github.com/1702301\n\nBefore:\n\n```\n$ sh siege.sh\nTransaction rate:         114.71 trans/sec\nTransaction rate:         117.84 trans/sec\nTransaction rate:         121.62 trans/sec\n$ sh siege.sh\nTransaction rate:         118.72 trans/sec\nTransaction rate:         120.32 trans/sec\nTransaction rate:         121.12 trans/sec\n```\n\nAfter:\n\n```\n$ sh siege.sh\nTransaction rate:         121.62 trans/sec\nTransaction rate:         122.12 trans/sec\nTransaction rate:         123.12 trans/sec\n$ sh siege.sh\nTransaction rate:         123.25 trans/sec\nTransaction rate:         121.94 trans/sec\nTransaction rate:         123.52 trans/sec\n```\n", "labels": [], "number": 89, "updated_at": "2014-07-07 12:40:30", "user": 249427, "closed_at": "2012-01-30 05:04:31", "id": 3015829, "title": "gc: increment heaps on lazy_sweep only if necessary", "url": "https://api.github.com/repos/ruby/ruby/issues/89", "created_at": "2012-01-30 04:06:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3714597", "text": "Rejected by Narihiro.  Sorry\n\nhttps://bugs.ruby-lang.org/issues/5946\n", "created_at": "2012-01-30 05:04:32", "user": 15377, "id": 3714597}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 90, "updated_at": "2014-06-16 03:31:33", "user": 40791, "closed_at": "2012-02-07 11:14:15", "id": 3110248, "title": "Documentation typo fix", "url": "https://api.github.com/repos/ruby/ruby/issues/90", "created_at": "2012-02-06 16:19:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3846237", "text": "Merged by r34462. Thanks.\n", "created_at": "2012-02-07 11:14:15", "user": 37002, "id": 3846237}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The \\* needs to be escaped because it was applying bold format (and removing the *s) to a comment where it was very import to show the *s.\n\n  \"and c will match all files that have c in them (including at the beginning or end).\"\n\nshould be\n\n  \"and *c\\* will match all files that have c in them (including at the beginning or end).\"\n\nNeed to escape the surrounding *s around *c\\* like  \\*c*\n\nSee the row regarding \\* in the fnmatch comment\n\nhttp://ruby-doc.org/core-1.9.3/File.html#method-c-fnmatch-3F\n", "labels": [], "number": 91, "updated_at": "2014-06-12 07:51:18", "user": 12886, "closed_at": "2012-02-10 21:14:18", "id": 3141377, "title": "The * needs to be escaped to avoid formatting in fnmatch comment", "url": "https://api.github.com/repos/ruby/ruby/issues/91", "created_at": "2012-02-08 14:25:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3914405", "text": "Merged in r34547, thanks!\n", "created_at": "2012-02-10 21:14:18", "user": 13423, "id": 3914405}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "...\n", "labels": [], "number": 92, "updated_at": "2014-06-12 17:18:31", "user": 249427, "closed_at": "2012-03-05 13:31:43", "id": 3185667, "title": "gc: tiny fixes in BITMAP size and HEAP_OBJ_LIMIT", "url": "https://api.github.com/repos/ruby/ruby/issues/92", "created_at": "2012-02-11 16:30:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3924279", "text": "Could you make a ticket on Redmine and assign to Narihiro Nakamura?\n", "created_at": "2012-02-11 23:08:51", "user": 13423, "id": 3924279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3925733", "text": "There is issue http://bugs.ruby-lang.org/issues/6006 . I forgot to assign it and set category.\n", "created_at": "2012-02-12 04:45:11", "user": 249427, "id": 3925733}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "RDoc is able to parse commented blocks of code (inside `/**/`) as a side-effect of its parsing, but other tools will ignore commented blocks. Using the \"#if 0\" directive hack is more portable among tools (like YARD) and still allows developers to properly ignore code by commenting it out (assuming the doc tool supports this). Note that the directive hack is already used in io.c (above this line), so this is not a novel methodology.\n", "labels": [], "number": 93, "updated_at": "2014-06-20 18:12:18", "user": 686, "closed_at": "2012-02-13 03:15:22", "id": 3193964, "title": "Use directive hack to make ARGF documentable in other tools [DOC]", "url": "https://api.github.com/repos/ruby/ruby/issues/93", "created_at": "2012-02-12 22:59:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3932004", "text": "Oh, if this is accepted, can it be backported into 1.9.3? Thanks!\n", "created_at": "2012-02-12 23:01:42", "user": 686, "id": 3932004}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/3933838", "text": "Seems nobu pulled your request. Thank you .\n", "created_at": "2012-02-13 03:15:22", "user": 15377, "id": 3933838}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactor FileUtils code to use more idiomatic Ruby and thus easier to read and work with:\n- factor out post-facto dynamic method definitions\n- use define_command to create each fileutils method\n\nNOTE: OPT_TABLE keys should probably be Symbols instead of Strings, but held off on that at this point.\n", "labels": [], "number": 94, "updated_at": "2014-06-13 05:50:20", "user": 23423, "closed_at": "2012-03-05 13:34:24", "id": 3270838, "title": "lib/fileutils.rb: refactor FileUtils", "url": "https://api.github.com/repos/ruby/ruby/issues/94", "created_at": "2012-02-17 17:30:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4024146", "text": "Note this is a resubmit of #30 with issues addressed. I had to resubmit b/c I lost previous pull request branch.\n", "created_at": "2012-02-17 17:31:03", "user": 23423, "id": 4024146}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4024719", "text": "This is applied at r34669.  Thanks!\n", "created_at": "2012-02-17 18:00:06", "user": 3124, "id": 4024719}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- make #new_ostruct_member a protected method\n- change #marshal_dump to duplicate table to prevent table tampering (VOID)\n- add #to_h method to faciliate polymorphic use as hash\n- add #[] and #[]= methods to facilitate dynamic gets and sets\n- add #merge! method to support mass updating\n", "labels": [], "number": 95, "updated_at": "2014-06-26 02:10:01", "user": 23423, "closed_at": "2012-11-15 20:36:09", "id": 3278964, "title": "lib/ostruct.rb: fix and enhance OpenStruct", "url": "https://api.github.com/repos/ruby/ruby/issues/95", "created_at": "2012-02-18 12:57:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4035534", "text": "There's no need to dup the table in marshal_dump. Marshal will not modify the return value and a simple dup does not prevent tampering as the values are not also duplicated.\n", "created_at": "2012-02-18 17:12:22", "user": 9831, "id": 4035534}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4038404", "text": "Since it's a public method, I was thinking about possible usage outside Marshal's and thinking about possibility of keys being made non-symbols. But it's not a big deal, if there's reason that it should not be dup'd, then okay.\n", "created_at": "2012-02-18 23:46:52", "user": 23423, "id": 4038404}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5874349", "text": "Have you guys got anywhere with this? :)\n", "created_at": "2012-05-23 14:31:12", "user": 250723, "id": 5874349}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5876260", "text": "@kwilczynski There is more discussion on [#6056](http://bugs.ruby-lang.org/issues/6056)\n", "created_at": "2012-05-23 15:38:34", "user": 277819, "id": 5876260}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5908816", "text": "At this point I would like to point out http://github.com/rubyworks/ostruct2.\n", "created_at": "2012-05-24 15:36:39", "user": 23423, "id": 5908816}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5909362", "text": "@trans oh nice! It has the features I wanted to add (ask whether they can be added...) to OpenStruct. @zzak do you think, that OpenStruct2 could be added aside of OpenStruct? Or, whether it could super-seed it, if it is backward compatible (@trans?) with OpenStruct?\n", "created_at": "2012-05-24 15:42:15", "user": 250723, "id": 5909362}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5909656", "text": "@kwilczynski That is up to the maintainer of `ostruct`. ie: @marcandre\n", "created_at": "2012-05-24 15:45:09", "user": 277819, "id": 5909656}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5909813", "text": "Oh, thanks @zzak :) @marcandre what do you think? Would it be possible to reach a consensus here? :)\n", "created_at": "2012-05-24 15:46:51", "user": 250723, "id": 5909813}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5910991", "text": "It can be used along side or as a drop-in replacement. It's effectively 100% compatible. \n\nHowever, it is also _brand spanking new_, so I would suggest it go through the \"usage ringer\" for a little bit before any consideration of it superseding the current library.\n", "created_at": "2012-05-24 16:29:43", "user": 23423, "id": 5910991}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5911366", "text": "For the feature requested in this pull request, I feel positive they will all be present in the 'ostruct' of Ruby 2.0.\n\nThere are interesting features in this ostruct2 library. I've wondered myself why OpenStruct currently doesn't allow overwriting methods. Ideally someone would open a feature request for this on http://bugs.ruby-lang.org/. \n\nFor the nesting/vivifying stuff, I think I can see the appeal, but I'm curious as to when you would want only one of these features, and also why it wasn't done as a subclass of OpenStruct. Again, a feature request on redmine is the way to go. \n\nRemember that releases of Ruby are not frequent and that compatibility is key, so feature requests should be well thought out and mature.\n", "created_at": "2012-05-24 16:43:39", "user": 33770, "id": 5911366}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6562301", "text": "@marcandre I am wonder how best to proceed now. My frame of mind on this is of course to move standard OpenStruct in the direction of OStruct2, with the ultimate goal they would be effectively the same --then I can happily kill OStruct2 library.\n\nWith the exception of two issues --one being your query regarding nesting/vivifying and the other being better delegation of dynamically called bang methods, I think OStruct2 is about about as we can expect from such a class.\n", "created_at": "2012-06-25 22:45:35", "user": 23423, "id": 6562301}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6572841", "text": "Thanks guys for looking into this! I'd love to see OStruct2 added :) Perhaps, if not as a replacement, then as an option aside of OpenStruct in the standard library. Users would have to choice of either or, and it would solve possible API and/or incompatibility issues.\n", "created_at": "2012-06-26 11:08:11", "user": 250723, "id": 6572841}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9851036", "text": "I've pushed changes to `ostruct` which I believe address most of this pull request (r37370 to r37376, github mirror not yet updated)\n", "created_at": "2012-10-28 21:38:52", "user": 33770, "id": 9851036}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10215087", "text": "Recursive support would be awesome - perhaps a constructor argument? https://github.com/aetherknight/recursive-open-struct\n\nAlso, a case-insensitivity option would be very useful..\n", "created_at": "2012-11-09 04:09:35", "user": 107935, "id": 10215087}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10224176", "text": "Is there any place where I can see what the changes were?\n", "created_at": "2012-11-09 12:11:38", "user": 23423, "id": 10224176}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10231298", "text": "@trans https://github.com/ruby/ruby/compare/af29f7d2a36647463b5afdc54c5fa4f7cf9e4275...87b248dc4d4bed790fc402756993d64962ed8595\n", "created_at": "2012-11-09 15:17:04", "user": 33770, "id": 10231298}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10424347", "text": "Closing this PR, as most is already in trunk.\nPlease open new PRs or feature requests on on redmine, for any other need.\n\nI'll comment that \"recursive support\" probably belongs in a subclass of OpenStruct and that it probably does not belong in stdlib. Separate gems & `bundler` are probably a good solution for it.\n", "created_at": "2012-11-15 20:36:09", "user": 33770, "id": 10424347}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nI found an error in net/http documentation :\n\n``` ruby\nNet::HTTP.start(uri.host, uri.port,\n  :use_ssl => uri.scheme == 'https').start do |http|\n  request = Net::HTTP::Get.new uri.request_uri\n\n  response = http.request request # Net::HTTPResponse object\nend\n```\n\nThe first line call start() method 2 times here.\n", "labels": [], "number": 96, "updated_at": "2014-06-13 05:50:19", "user": 709326, "closed_at": "2012-02-24 03:10:59", "id": 3285846, "title": "* lib/net/http.rb: fixed https doc error", "url": "https://api.github.com/repos/ruby/ruby/issues/96", "created_at": "2012-02-19 17:20:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4150849", "text": "Merged by r3781. Thank you.\n", "created_at": "2012-02-24 03:19:01", "user": 37002, "id": 4150849}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "First time committer here. How can I improve this implementation?\n\nEnumerable#join\n\n```\n>> (1..3).join(',')\n=> \"1,2,3\"\n```\n\nhttp://bugs.ruby-lang.org/issues/5970\n\nThanks!\n", "labels": [], "number": 97, "updated_at": "2014-07-03 02:18:42", "user": 16003, "closed_at": "2012-11-18 23:27:19", "id": 3301137, "title": "Add Enumerable#join with same semantics as Array#join", "url": "https://api.github.com/repos/ruby/ruby/issues/97", "created_at": "2012-02-20 21:15:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10496610", "text": "Closing this, please refer to [feature #5970 on redmine](http://bugs.ruby-lang.org/issues/5970)\n", "created_at": "2012-11-18 23:27:19", "user": 277819, "id": 10496610}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 98, "updated_at": "2014-06-15 05:13:39", "user": 108369, "closed_at": "2012-02-24 03:02:41", "id": 3331502, "title": "[documentation] Fix code highlighting for String#prepend", "url": "https://api.github.com/repos/ruby/ruby/issues/98", "created_at": "2012-02-22 11:46:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4150848", "text": "Merged by r3780. Thank you.\n", "created_at": "2012-02-24 03:18:38", "user": 37002, "id": 4150848}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "...conistent across sessions and advice for if that behavior is desired.  Cost me a bit of time this evening chasing down inconsistency between runs even after I had verified expected behavior through the documentation.  Perhaps save someone else a few moments.\n", "labels": [], "number": 99, "updated_at": "2012-02-23 23:33:14", "user": 344935, "closed_at": "2012-02-23 23:33:05", "id": 3352903, "title": "modified documentation for String::hash to clarify that results are not ...", "url": "https://api.github.com/repos/ruby/ruby/issues/99", "created_at": "2012-02-23 08:37:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4132660", "text": "submitted patch to redmine as well, seems most development happening there from what I've read.\n", "created_at": "2012-02-23 08:43:05", "user": 344935, "id": 4132660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4148201", "text": "I made a different change to cover this problem, see https://bugs.ruby-lang.org/issues/6068 for discussion.\n", "created_at": "2012-02-23 23:33:12", "user": 9831, "id": 4148201}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please, see http://bugs.ruby-lang.org/issues/4890 for more info about enumerator laziness.\n\nI've added `Enumerator#lazy` method that marks enumerator as lazy.\nAlso lazy `Enumerator#map` and `Enumerator#select` defined.\nThe idea is very simple - block that passed to lazy method (select or map) is converted to `Proc` and stored in enumerator itself. \nWhen next element requested - all `Proc` objects are called for this value and the result returned. `Proc#call` result handling depends on `proc_entry` type.\n\nExample:\n\n```\na = [1,2,3,4].to_enum.lazy\na.map { |a| a*10 }.select { |a| a > 10 }\nputs a.next #=> 20\nputs a.next #=> 30\nputs a.next #=> 40\n```\n\nKeep in mind - I'm kinda a newbie in ruby patching, so please, let me know your thoughts/fixes/comments.\nDoes it make any sense to add laziness this way?\n\nThanks. \n", "labels": [], "number": 100, "updated_at": "2014-06-12 15:54:26", "user": 287994, "closed_at": "2012-03-05 20:15:47", "id": 3380605, "title": "enumerator extended with lazy select and map", "url": "https://api.github.com/repos/ruby/ruby/issues/100", "created_at": "2012-02-24 22:56:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4167087", "text": "Is this marking the Enumerator in place rather returning a _new_ \"lazy enumerator\"?\n", "created_at": "2012-02-24 23:11:08", "user": 23423, "id": 4167087}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4171142", "text": "Yeah, it's marking in place. But that's not a problem since we have `enumerator_init_copy`, that can be used in `Enumerator#lazy`.\nThis PR is to demonstrate an idea, if the idea makes sense - I'll add necessary fixes and methods.\n", "created_at": "2012-02-25 06:35:05", "user": 287994, "id": 4171142}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please, see http://bugs.ruby-lang.org/issues/4890 for more info about enumerator laziness.\n\nLast week I've made this PR #100. But I've faced some problems while trying to push the idea further.\n\nSo, here's a straight C implementation of the `Enumerable::Lazy` based on ruby code, suggested in original feature request on bugs.ruby-lang.org.\n\n`Enumerable::Lazy#map`, `Enumerable::Lazy#select`, `Enumerable::Lazy#reject`, `Enumerable::Lazy#grep` added so far but I'm keep working on other methods as well.\n", "labels": [], "number": 101, "updated_at": "2014-06-14 05:43:32", "user": 287994, "closed_at": "2012-03-14 04:16:48", "id": 3489316, "title": "Feature 4890 lazy enumerator", "url": "https://api.github.com/repos/ruby/ruby/issues/101", "created_at": "2012-03-03 12:38:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "$ ruby -v\nruby 1.9.3p125 (2012-02-16 revision 34643) [x86_64-darwin11.3.0]\n\nI think seemingly this source code is no problem:\n\n$ cat unexpected.rb\n\n``` ruby\nlangs = [\"Ruby\"]\nlangs.each_with_object [] do |lang, the_langs|\n  the_langs << \"The #{lang}\"\nend.each do |the_lang|\n  puts the_lang\nend\n```\n\nBut syntax error:\n\n$ ruby unexpected.rb \nunexpected.rb:4: syntax error, unexpected keyword_do\nend.each do |the_lang|\n           ^\nunexpected.rb:5: syntax error, unexpected tIDENTIFIER, expecting keyword_do or '{' or '('\n\nI want to this code behaves like:\n\n$ cat expected.rb \n\n``` ruby\nlangs = [\"Ruby\"]\n(langs.each_with_object [] do |lang, the_langs|\n  the_langs << \"The #{lang}\"\nend).each do |the_lang|\n  puts the_lang\nend\n```\n\n$ ruby expected.rb \nThe Ruby\n\nI changed the block_call in the parse.y to a primary-expression.\n\n$ ./ruby -I./lib -I. unexpected.rb\nThe Ruby\n\n英語に自信がないので日本語でも失礼します。\n\n上の unexpected.rb はぼくには一見なんの問題もなさそうなコードに見えます。\nしかしそれは構文エラーです。\nぼくはこのブロックを一次式として扱うべきだと思いました。\n", "labels": [], "number": 102, "updated_at": "2014-06-14 20:43:16", "user": 798343, "closed_at": "2012-03-05 16:35:16", "id": 3505237, "title": "A block after the do-block without parenthesis", "url": "https://api.github.com/repos/ruby/ruby/issues/102", "created_at": "2012-03-05 11:50:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4322814", "text": "It makes too many conflicts: 5 shift/reduce, 240 reduce/reduce, and not acceptable straightforwardly.\nコンフリクトが多すぎるので、そのままでは受け入れられません。\n", "created_at": "2012-03-05 13:42:41", "user": 16700, "id": 4322814}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4326387", "text": "Pardon me. I'm thoughtless.\nI did think twice about this, and I thought to syntax about a block after the do-block without parenthesis need not be primary-expression.\n\nthanks!\n", "created_at": "2012-03-05 16:44:00", "user": 798343, "id": 4326387}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4326710", "text": "https://github.com/ruby/ruby/commit/c46bda\n", "created_at": "2012-03-05 17:00:09", "user": 199499, "id": 4326710}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since Enumerable#lazy were added based on my [patch](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/34951) I was thinking about adding `Kernel#lazy` - like `Kernel#to_enum` or `Kernel#enum_for`\nTo make possible this:\n\n```\na = Object.new\ndef a.each\n  yield 3\nend\na.lazy #=> Enumerable::Lazy\n```\n\nlazy_initialize is [now](https://github.com/ruby/ruby/commit/e7d4e659a070f6e188f3924bd8efb65e6919d2ef) without additional arguments.  \nDoes it make sense to revert this so that additional arguments can be passed to Kernel#lazy (like `Kernel#to_enum` or `Kernel#enum_for`)?\nThanks in advance.\n\n/cc @nobu\n/cc @shugo\n", "labels": [], "number": 103, "updated_at": "2014-07-22 23:56:42", "user": 287994, "closed_at": "2012-07-26 06:06:06", "id": 3599810, "title": "Kernel#lazy added", "url": "https://api.github.com/repos/ruby/ruby/issues/103", "created_at": "2012-03-11 07:42:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Currently, when Thread wakes on timeout, it could not remove itself from ConditionVariable waiters until it acquires lock.\n   So that, when ConditionVariable#signal is called, it will try to wakeup\n   such thread, instead of some one else.\n\nSimple way to avoid it, is to allow Mutex#sleep to recieve a block, which will be called right after Thread will awake, but before Mutex will be tried to lock\n1. Since MatzRuby use GVL for thread isolation, and native method could not be interrupted (unless it wish), we could remove couple of calles to Mutex#synchronize\n2. Usage of hash with `compare_by_identity` allows remove call to Array#include? in a Queue. Also it allows to remove other call Mutex#synchronize from ConditionVariable#wait in case when we rely on GVL.\n3. And cosmetic changes to SizedQueue\n", "labels": [], "number": 104, "updated_at": "2014-06-20 14:45:48", "user": 249427, "closed_at": "2012-11-18 23:36:21", "id": 3700523, "title": "Threads", "url": "https://api.github.com/repos/ruby/ruby/issues/104", "created_at": "2012-03-18 15:38:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10497146", "text": "Please refer to [Feature #7390 on redmine](https://bugs.ruby-lang.org/issues/7390), thank you!\n", "created_at": "2012-11-18 23:36:21", "user": 277819, "id": 10497146}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove result of copy-pasting with preprocessor macro and replace chain of else-if with switch statement.\n(if-else is O(n), switch is O(1) )\n", "labels": [], "number": 105, "updated_at": "2014-06-13 23:43:28", "user": 135265, "closed_at": "2012-03-19 06:21:16", "id": 3702883, "title": "compile.c: DRY iseq_specialized_instruction", "url": "https://api.github.com/repos/ruby/ruby/issues/105", "created_at": "2012-03-18 22:04:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4568271", "text": "Modern compilers optimize those if-else chain as switch first.\n", "created_at": "2012-03-19 06:07:08", "user": 16700, "id": 4568271}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4572100", "text": "Yes, when optimization is enabled they do (at least llvm-gcc 4.2 with -O3 does)\nthis is more for the DRY part and code readability.\n\nThanks for accepting patch.\n", "created_at": "2012-03-19 12:21:43", "user": 135265, "id": 4572100}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All parameters of Time.new can be string or int except seconds\nThis will fix that\n", "labels": [], "number": 106, "updated_at": "2012-03-23 12:51:05", "user": 928627, "closed_at": "2012-03-25 15:22:42", "id": 3779356, "title": "Time.new will accept seconds as string or int", "url": "https://api.github.com/repos/ruby/ruby/issues/106", "created_at": "2012-03-23 12:51:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Remove unused code from st.c and hash.c\n2. Remove unnecessary st_table allocation from hash.c\n3. Move safemode logic from hash.c to st.c to make it clearer\n4. st_shift to optimize Hash#shift\n", "labels": [], "number": 107, "updated_at": "2014-06-14 04:06:44", "user": 249427, "closed_at": "2012-09-11 07:34:46", "id": 3794576, "title": "Cleanup some st.c and hash.c code ", "url": "https://api.github.com/repos/ruby/ruby/issues/107", "created_at": "2012-03-24 21:21:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4696214", "text": "Add removal of ST_CHECK\nAdd ultrapacking\n", "created_at": "2012-03-26 15:13:36", "user": 249427, "id": 4696214}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Move immutable fields from `struct heaps_slot` and `struct sorted_heaps_slot` into `struct heaps_header`\n   One exception is `limit` field, but it starts to be mutable just before freeing a heaps_header, so that it is not big issue.\n2. Embed bitmap into `struct heaps_slot`\n3. Change `free_unused_heaps` to `free_unused_heap`, so that it will not be called on every GC round, but only when page should be freed.\n   While `free_unused_heaps` does not consume much time (it is invisible in profiler), but regular application has no need in calling this function every time.\n", "labels": [], "number": 108, "updated_at": "2014-07-17 18:23:11", "user": 249427, "closed_at": "2012-11-18 23:38:29", "id": 3795062, "title": "Simplify gc.c structures", "url": "https://api.github.com/repos/ruby/ruby/issues/108", "created_at": "2012-03-24 23:02:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/4677361", "text": "Opened Issue http://bugs.ruby-lang.org/issues/6199\n", "created_at": "2012-03-24 23:08:08", "user": 249427, "id": 4677361}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10497264", "text": "This has been resolved, please refer to [Feature #6199 on redmine](http://bugs.ruby-lang.org/issues/6199), or open another ticket on redmine if that can be improved.\n\nThank you!\n", "created_at": "2012-11-18 23:38:29", "user": 277819, "id": 10497264}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This refers to [Redmine #6203](https://bugs.ruby-lang.org/issues/6203):\n\nThis changes `Array#vaules_at` to behave more consistently with array slicing.\n\nWithout this patch:\n\n``` ruby\n    a = [0,1,2,3,4,5]\n    a[4..6] # => [4, 5]\n    a.values_at(4..6) # => [4,5,nil]\n    a.values_at(4..600) # => [4,5,nil]\n```\n\nWith this patch:\n\n``` ruby\n    a.values_at 4..6 # => [4, 5]\n    a.values_at 4..600 # => [4, 5]\n```\n", "labels": [], "number": 109, "updated_at": "2014-07-22 13:49:07", "user": 38430, "closed_at": "2012-10-12 01:31:52", "id": 3803100, "title": "Change Array#values_at to handle range index past end of array properly", "url": "https://api.github.com/repos/ruby/ruby/issues/109", "created_at": "2012-03-26 04:55:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We clarified the terms and definitions at the top of the documentation by providing examples.\n", "labels": [], "number": 110, "updated_at": "2012-05-10 09:06:15", "user": 778093, "closed_at": "2012-05-08 04:48:09", "id": 3904554, "title": "Improving introduction in Date/DateTime documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/110", "created_at": "2012-03-30 20:31:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5567385", "text": "Merged by r35590. Thanks.\n", "created_at": "2012-05-08 04:48:09", "user": 37002, "id": 5567385}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5620961", "text": "This pull was reverted by 16c364a .\n", "created_at": "2012-05-10 09:06:15", "user": 10973, "id": 5620961}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The patch fixes a simple omission:\nTracer allows setting of the attribute 'stdout', but the method 'trace_func' does not respect it in the main output. - The optional output of process id and thread id respects the attribute.\n\nBTW: The info on http://www.ruby-lang.org/en/community/ruby-core about how to submit patches via github seems outdated!? @shyouhei's fork of this repo is way behind... That's why I am sending this request to this repo.\n", "labels": [], "number": 111, "updated_at": "2014-06-27 10:45:40", "user": 1497057, "closed_at": "2012-11-18 23:50:03", "id": 3910665, "title": "Fix for using Kernel.printf for tracing output instead of stdout.printf", "url": "https://api.github.com/repos/ruby/ruby/issues/111", "created_at": "2012-03-31 14:59:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6602800", "text": "http://bugs.ruby-lang.org/issues/6490\n", "created_at": "2012-06-27 13:12:41", "user": 44136, "id": 6602800}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10497581", "text": "Closing this, please refer to [Bug #6490 on redmine](http://bugs.ruby-lang.org/issues/6490).\n", "created_at": "2012-11-18 23:50:03", "user": 277819, "id": 10497581}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Dear Rubyists, can we add \"is_integer?\" method to our core for main purposes of checking integerITY?\nI add it to \"golf_prelude.rb\" below of \"to_a\" stub.\n", "labels": [], "number": 112, "updated_at": "2012-04-01 18:06:29", "user": 578559, "closed_at": "2012-04-07 21:16:56", "id": 3917882, "title": "is_integer? method declaration in prelude, generally wanted from develop...", "url": "https://api.github.com/repos/ruby/ruby/issues/112", "created_at": "2012-04-01 18:06:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update  /ext/json/fbuffer/fbuffer.h These definitions is not used by ruby-internal.\nThis deletions will get us rid of warning produced by compiler.\n", "labels": [], "number": 113, "updated_at": "2014-06-16 20:47:36", "user": 578559, "closed_at": "2012-04-16 06:29:24", "id": 3928966, "title": "Update  /ext/json/fbuffer/fbuffer.h These definitions is not used by rub...", "url": "https://api.github.com/repos/ruby/ruby/issues/113", "created_at": "2012-04-02 15:54:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5146461", "text": "Could you contribute it to the upstream: https://github.com/flori/json ?\n", "created_at": "2012-04-16 06:29:24", "user": 13423, "id": 5146461}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5546117", "text": "Can you include me to the github organization of ruby, i'm also radiant cms developer. I can give some work on ruby-core.\n", "created_at": "2012-05-07 08:55:43", "user": 578559, "id": 5546117}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5546365", "text": "I don't think there are any work for the member of the github organization of ruby.\n", "created_at": "2012-05-07 09:13:22", "user": 13423, "id": 5546365}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5556250", "text": "Additional to say, if you are saying about pull requests which aren't merged,\nthey are not because of we are busy, because those suggestions are not trivial and hard to decide.\nSo people who can handle them needs to know the decision process of Ruby.\n\nI don't think people who doesn't know the fact that the original repo of Ruby is not here\nknow such process.\n", "created_at": "2012-05-07 17:59:18", "user": 13423, "id": 5556250}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Nothing major, I noticed what I thought was a small mistake in the documentation.\n", "labels": [], "number": 114, "updated_at": "2014-07-22 14:42:49", "user": 109224, "closed_at": "2012-05-11 22:06:11", "id": 3976354, "title": "Small documentation correction for cp_r.", "url": "https://api.github.com/repos/ruby/ruby/issues/114", "created_at": "2012-04-04 19:00:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5572776", "text": "Hello TJ, I've added your patch as [Bug #6411](https://bugs.ruby-lang.org/issues/6411)\n\nThank you!\n", "created_at": "2012-05-08 11:46:43", "user": 277819, "id": 5572776}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5586437", "text": "Of course! Thanks for getting to it. :)\n", "created_at": "2012-05-08 21:06:39", "user": 109224, "id": 5586437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5662239", "text": "Applied as http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/35626\n", "created_at": "2012-05-11 22:06:11", "user": 9831, "id": 5662239}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5664510", "text": "Thanks!\n", "created_at": "2012-05-12 02:08:21", "user": 109224, "id": 5664510}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Documentation for SHA256#block_length used incorrectly #digest_length.\n", "labels": [], "number": 115, "updated_at": "2014-06-14 03:50:14", "user": 124876, "closed_at": "2012-04-10 22:41:50", "id": 4041472, "title": "Fixed method name into documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/115", "created_at": "2012-04-10 07:24:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5058074", "text": "Committed in r35293 to ruby trunk.\n", "created_at": "2012-04-10 22:41:50", "user": 9831, "id": 5058074}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 116, "updated_at": "2014-08-10 03:25:01", "user": 142821, "closed_at": "2012-04-10 18:06:57", "id": 4046958, "title": "fix spelling mistake (developper -> developer)", "url": "https://api.github.com/repos/ruby/ruby/issues/116", "created_at": "2012-04-10 14:32:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5052230", "text": "Merged by r35287. Thanks.\n", "created_at": "2012-04-10 18:06:57", "user": 37002, "id": 5052230}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Does github rebase the requested branch automatically?\n", "labels": [], "number": 117, "updated_at": "2014-06-14 12:57:11", "user": 16700, "closed_at": "2012-11-19 00:08:18", "id": 4077407, "title": "Pretty testunit on tty", "url": "https://api.github.com/repos/ruby/ruby/issues/117", "created_at": "2012-04-12 02:25:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5083472", "text": "This pull request is just for my private use.\n", "created_at": "2012-04-12 02:30:43", "user": 16700, "id": 5083472}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5088480", "text": "> Does github rebase the requested branch automatically?\n\nNope.\n", "created_at": "2012-04-12 10:43:52", "user": 19248, "id": 5088480}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5088721", "text": "Thank you, what I wanted to say was pull/REQ/merge branch.\nIt seems working fine for me.\n", "created_at": "2012-04-12 11:05:19", "user": 16700, "id": 5088721}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5088797", "text": "Oh yeah, that works fine! :)\n", "created_at": "2012-04-12 11:09:55", "user": 19248, "id": 5088797}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5284169", "text": "Hi, I'm sorah who's maintaining `test/unit`.\n\nI'll review this later.\n", "created_at": "2012-04-23 15:45:04", "user": 29440, "id": 5284169}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10497797", "text": "@sorah ping! could you review this please?\n\nI'm going to close it for now, feel free to re-open if necessary.\n", "created_at": "2012-11-19 00:07:39", "user": 277819, "id": 10497797}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is to add the HTTP method PATCH to 1.8.7. I did not do testing, but followed the convention outlined by other method implementations.\n", "labels": [], "number": 118, "updated_at": "2012-04-15 19:17:05", "user": 651597, "closed_at": "2012-04-15 19:08:29", "id": 4123491, "title": "Adds HTTP PATCH to 1.8.7", "url": "https://api.github.com/repos/ruby/ruby/issues/118", "created_at": "2012-04-15 13:18:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5141634", "text": "A release branch won't merge a new feature.\n", "created_at": "2012-04-15 19:08:29", "user": 13423, "id": 5141634}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5141711", "text": "Sorry.\n", "created_at": "2012-04-15 19:17:05", "user": 651597, "id": 5141711}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is to add the HTTP method PATCH. I did not do testing, but followed the convention outlined by other method implementations.\n", "labels": [], "number": 119, "updated_at": "2012-04-15 14:04:35", "user": 651597, "closed_at": "2012-04-15 13:58:18", "id": 4123552, "title": "Ruby 1 9 1", "url": "https://api.github.com/repos/ruby/ruby/issues/119", "created_at": "2012-04-15 13:33:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5139389", "text": "1.9.1 has ended.\n", "created_at": "2012-04-15 13:58:18", "user": 16700, "id": 5139389}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5139430", "text": "Okay, thank for your time.\n", "created_at": "2012-04-15 14:04:35", "user": 651597, "id": 5139430}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is to add the HTTP method PATCH. I did not do testing, but followed the convention outlined by other method implementations.\n", "labels": [], "number": 120, "updated_at": "2012-04-15 19:08:49", "user": 651597, "closed_at": "2012-04-15 19:08:49", "id": 4123586, "title": "Adds HTTP PATCH to 1.9.2", "url": "https://api.github.com/repos/ruby/ruby/issues/120", "created_at": "2012-04-15 13:38:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5141639", "text": "A release branch won't merge a new feature.\n", "created_at": "2012-04-15 19:08:49", "user": 13423, "id": 5141639}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix for #6310\n", "labels": [], "number": 121, "updated_at": "2014-06-14 02:19:21", "user": 928627, "closed_at": "2012-08-30 15:29:08", "id": 4159956, "title": "Adding mul method for OPENSSL::PKey::EC::Point", "url": "https://api.github.com/repos/ruby/ruby/issues/121", "created_at": "2012-04-17 19:44:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5602758", "text": "Hi Sambasiva, I've added your patch to [#6310](http://bugs.ruby-lang.org/issues/6310#change-26553).\n\nThank you!\n", "created_at": "2012-05-09 15:25:31", "user": 277819, "id": 5602758}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5635839", "text": "Thanks to both of you!\n", "created_at": "2012-05-10 20:36:28", "user": 486012, "id": 5635839}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148689", "text": "@emboss has this been merged to trunk? Should we close this?\n", "created_at": "2012-08-30 03:53:28", "user": 3124, "id": 8148689}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8150828", "text": "@tenderlove Yes, it was merged to trunk in http://bugs.ruby-lang.org/issues/6310. Can you close this one for me please? I don't seem to have the permissions or I am doing something wrong... :(\n", "created_at": "2012-08-30 06:54:37", "user": 486012, "id": 8150828}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8163198", "text": "You can auto-close tickets if you add \"Fixes #121 on github\". I think @shyouhei can give you the ability to close pull requests. \n", "created_at": "2012-08-30 15:29:08", "user": 9831, "id": 8163198}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8184058", "text": "Thanks, Eric, and thanks for the tip!\n", "created_at": "2012-08-31 06:55:30", "user": 486012, "id": 8184058}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When the openssl library cannot verify a server certificate because the hostnames don't match, it outputs the error message: \"hostname does not match the server certificate\".\n\nThis causes people to throw their hands up and circumvent the security by disabling the cert verification or turning off SSL/TLS altogether.\n\nIt would be a huge improvement towards helping people debug and fix their mismatched certs if the error included the hostname that wasn't matching.\n\nThat's what my commit does.\n", "labels": [], "number": 122, "updated_at": "2014-06-12 08:11:09", "user": 59748, "closed_at": "2012-04-30 00:12:31", "id": 4272987, "title": "add hostname to \"hostname does not match server cert.\" error", "url": "https://api.github.com/repos/ruby/ruby/issues/122", "created_at": "2012-04-25 01:45:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5401705", "text": "This looks fine to me! \n\n@shyouhei It seems as if I cannot merge this directly. Could you please merge this or grant me the permission to do so? Thanks!  \n", "created_at": "2012-04-29 01:07:54", "user": 486012, "id": 5401705}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5410091", "text": "This patch was merged by r35494. Thanks.\n", "created_at": "2012-04-30 00:12:40", "user": 37002, "id": 5410091}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5415841", "text": "@ayumin Thanks!\n", "created_at": "2012-04-30 11:51:03", "user": 486012, "id": 5415841}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This came up in a Rails issue.  https://github.com/rails/rails/pull/2237#issuecomment-5412732\n\nShould we only add the log message if we're at a debug level?\n\nAlso, this is my first Ruby pull request, so I'm not sure the process and or what testing is needed.\n", "labels": [], "number": 123, "updated_at": "2014-06-19 10:25:14", "user": 22501, "closed_at": "2012-04-30 15:18:21", "id": 4350904, "title": "Only call add if we are at debug level", "url": "https://api.github.com/repos/ruby/ruby/issues/123", "created_at": "2012-04-30 14:14:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5419302", "text": "@jasonnoble actually this check happens in the add method. The reason i asked for a logger.debug? check in rails case was to avoid calculating the message, which is a bit expensive in that case. I think this can be closed.\n", "created_at": "2012-04-30 15:05:34", "user": 9582, "id": 5419302}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5419591", "text": "First pull request:  Denied...  :)\n", "created_at": "2012-04-30 15:18:21", "user": 22501, "id": 5419591}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added a .parser class method that returns DEFAULT_PARSER. This restores the expected behavior of URI::Generic.build2.\n", "labels": [], "number": 124, "updated_at": "2014-07-09 22:45:34", "user": 59748, "closed_at": "2012-07-16 13:20:37", "id": 4494459, "title": "add a URI::Generic.parser class method; fixes issue #6420", "url": "https://api.github.com/repos/ruby/ruby/issues/124", "created_at": "2012-05-09 15:12:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5602720", "text": "Hi Wes, I've added your patch to [#6420](http://bugs.ruby-lang.org/issues/6420).\n\nThank you!\n", "created_at": "2012-05-09 15:24:18", "user": 277819, "id": 5602720}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6150067", "text": "This was resolved with [r35692](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/35692)\n", "created_at": "2012-06-06 13:08:34", "user": 277819, "id": 6150067}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for Feature #6418\n", "labels": [], "number": 125, "updated_at": "2014-06-13 09:20:48", "user": 16700, "closed_at": "2012-06-04 06:42:21", "id": 4527047, "title": "win32: VT100 escape", "url": "https://api.github.com/repos/ruby/ruby/issues/125", "created_at": "2012-05-11 02:59:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5778862", "text": "@nobu as commented on Redmine:\n\nhttps://gist.github.com/2655794\n\n```\nruby 2.0.0dev (2012-05-11 trunk 35616) [i386-mingw32]\n1950 tests, 1650 assertions, 150 failures, 0 errors, 300 skips\n\n# DEFAULT\nFinished tests in 1.348063s, 1446.5199 tests/s, 1223.9784 assertions/s.\n\n# PRIDE\nFinished tests in 1.458083s, 1337.3724 tests/s, 1131.6228 assertions/s.\n\n# ANSICON\nFinished tests in 1.612092s, 1209.6084 tests/s, 1023.5148 assertions/s.\n\n# With ANSI patch\nFabulous tests in 1.409676s, 1383.2966 tests/s, 1170.4817 assertions/s.\n\n===\n\nRedirected (> output.log)\n\n# DEFAULT\nFinished tests in 1.083062s, 1800.4509 tests/s, 1523.4585 assertions/s.\n\n# PRIDE\nFinished tests in 1.067061s, 1827.4494 tests/s, 1546.3034 assertions/s.\n\n# ANSICON\nFinished tests in 1.216070s, 1603.5261 tests/s, 1356.8298 assertions/s.\n\n# With ANSI patch\nFinished tests in 1.060061s, 1839.5168 tests/s, 1556.5142 assertions/s.\n```\n\nSeems no major performance degradation happened.\n\nWhat else do we need to get this in?\n\nThank you.\n", "created_at": "2012-05-18 02:33:41", "user": 4182, "id": 5778862}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Dir/File/FileTest all have an exists method, so I found it confusing\nthat Pathname did not.\n", "labels": [], "number": 126, "updated_at": "2014-07-03 13:30:21", "user": 30756, "closed_at": "2012-06-03 13:22:56", "id": 4665122, "title": "Add exists method to Pathname", "url": "https://api.github.com/repos/ruby/ruby/issues/126", "created_at": "2012-05-21 05:35:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/5859909", "text": "@pwim Hi Paul, I've added your patch as [#6481](http://bugs.ruby-lang.org/issues/6481)\n\nThanks!\n", "created_at": "2012-05-22 21:48:58", "user": 277819, "id": 5859909}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6085323", "text": "@pwim This was rejected in [ruby-core:45401](http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/45401)\n", "created_at": "2012-06-03 13:05:16", "user": 277819, "id": 6085323}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6085448", "text": "@zzak Thanks for your help!\n", "created_at": "2012-06-03 13:22:56", "user": 30756, "id": 6085448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This method is like the `include?` method but instead of receiving a value and check if the array has it, it receives an array an check if it's part of another one.\n", "labels": [], "number": 127, "updated_at": "2014-07-02 17:50:14", "user": 210771, "closed_at": "2012-11-19 00:32:47", "id": 4807923, "title": "array.c: added method that verifies if an Array is part of another", "url": "https://api.github.com/repos/ruby/ruby/issues/127", "created_at": "2012-05-30 01:40:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6000739", "text": "file a Feature Request in bugs.ruby-lang.org.\n", "created_at": "2012-05-30 02:12:59", "user": 16700, "id": 6000739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6000808", "text": "It surprised me that `[\"a\", \"c\"].part_of? [\"a\", \"b\", \"c\"]` returns `true`.\nShould not put local variable declarations after executable code.\n", "created_at": "2012-05-30 02:19:52", "user": 16700, "id": 6000808}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6000865", "text": "@nobu the way I see it is `[\"a\", \"b\", \"c\"]` includes `[\"a\", \"c\"]`. That's way it returns true.\n", "created_at": "2012-05-30 02:24:44", "user": 210771, "id": 6000865}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6001107", "text": "It seemed like returning `true` if `X` is a portion of `Y` to me, where `X.part_of?(Y)`.\nI expected only this would return `true`:\n\n```\n[\"a\", \"b\"].part_of?([\"a\", \"b\", \"c\") #=> true\n```\n\nAnyway, you should go to http://bugs.ruby-lang.org/projects/ruby-trunk/issues/new\n", "created_at": "2012-05-30 02:49:47", "user": 16700, "id": 6001107}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6001343", "text": "@nobu Done with the Feature Request: http://bugs.ruby-lang.org/issues/6515\n", "created_at": "2012-05-30 03:15:08", "user": 210771, "id": 6001343}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6001436", "text": "1.9.3p125 :001 > a = [1,2,3,4,5]\n => [1, 2, 3, 4, 5] \n1.9.3p125 :002 > b = [2,3,4]\n => [2, 3, 4] \n1.9.3p125 :003 > c = [4,5,6]\n => [4, 5, 6] \n1.9.3p125 :004 > b == a & b\n => true \n1.9.3p125 :005 > c == a & c\n => false \n", "created_at": "2012-05-30 03:24:17", "user": 10137, "id": 6001436}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6001585", "text": "yap @hmaddocks. You're right, that's Set Theory. I'm proposing a much easier way to implement this theory making things much faster. If you review the code you can notice that I'm not comparing the sets because it's more expensive, instead I'm comparing the difference between them with an empty array.\n", "created_at": "2012-05-30 03:42:52", "user": 210771, "id": 6001585}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6009928", "text": "@hmaddocks I tested this PR and one importance difference is that it isn't order dependent as your example\n\n```\nruby-1.9.3-p125 :001 > a = [1,2,3,4,5]\n => [1, 2, 3, 4, 5] \nruby-1.9.3-p125 :002 > b = [4,3,2]  # it is your b but in a reverse order\n => [4, 3, 2] \nruby-1.9.3-p125 :003 > b == a & b\n => false\n```\n\nbut \n\n```\nruby-1.9.3-p125 :001 > [4,3,2].part_of? [1,2,3,4,5]\n=> true\n```\n", "created_at": "2012-05-30 13:39:15", "user": 11690, "id": 6009928}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6024517", "text": "The expression\n\n```\narray_1.part_of? array_2\n```\n\nimplies to me that you are treating the arrays as atomic units yet your implementation is treating the array as an arbitrary  collection of objects i.e., it's the contained objects that are being tested not the array.\n[2,3,4] != [4,3,2] even though they _contain_ the same objects.\nSeems to me that you want an iterative version of include?\n\n`1.9.3p125 :001 > a = [1,2,3,4,5]\n => [1, 2, 3, 4, 5] \n1.9.3p125 :002 > b = [2,3,4]\n => [2, 3, 4] \n1.9.3p125 :003 > a.include? b\n => false \n1.9.3p125 :004 > b.inject{|memo, obj| memo && a.include?(obj) }\n => true \n1.9.3p125 :005 > c = [4,3,2]\n => [4, 3, 2] \n1.9.3p125 :006 > c.inject{|memo, obj| memo && a.include?(obj) }\n => true \n1.9.3p125 :007 > d = [4,5,6]\n => [4, 5, 6] \n1.9.3p125 :008 > d.inject{|memo, obj| memo && a.include?(obj) }\n => false`\n", "created_at": "2012-05-30 23:37:37", "user": 10137, "id": 6024517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10498114", "text": "I'm closing this, please refer to [Feature #6515 on redmine](http://bugs.ruby-lang.org/issues/6515). Thank you!\n", "created_at": "2012-11-19 00:32:47", "user": 277819, "id": 10498114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello\n\nSorry if I have made mistakes but I'm quite a newbie. I found more logical the Array#index method to return an array of indexes and not the index of the first occurrence. \n\nThen, I found nicer to move the README files with a rdoc extension for more readability on Github for example.\n\nHave a nice day.\n", "labels": [], "number": 128, "updated_at": "2014-06-21 15:17:33", "user": 354185, "closed_at": "2012-11-19 00:35:22", "id": 4992014, "title": "Array#index more logical and add a rdoc extension to the README files", "url": "https://api.github.com/repos/ruby/ruby/issues/128", "created_at": "2012-06-10 15:32:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6229628", "text": "Hello Robin,\n\nI've added your `Array#index` feature patch as [#6572](http://bugs.ruby-lang.org/issues/6572).\n\nI didn't include the `README.rdoc` feature since it will probably be rejected, I've requested a similar patch recently with the response being:\n\n> @drbrain: \n> Since github is not the primary place people go to learn about ruby I think it is OK to keep \"README\"\n> with no extension.\n\nand\n\n> @mame: \n> README is not for github, but for newbie.\n> README extensions often represent platform in Unix culture.\n> \".rdoc\" may confuse users familiar with Unix but unfamiliar\n> with Ruby's toolchain.\n\nSee [#6388](http://bugs.ruby-lang.org/issues/6388)\n", "created_at": "2012-06-10 16:29:45", "user": 277819, "id": 6229628}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6229765", "text": "@zzak oh, sorry, I didn't know that we have to first create a ticket on the bug tracker. I'm sorry. Thank you so much. Thanks for the README. I think newbie are more apt to come on Github first and then clone the repository on their computer but it's true that Github it's not  the primary place.\n\nThank you for your answer ! Have a nice day :) \n", "created_at": "2012-06-10 16:46:56", "user": 354185, "id": 6229765}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6230951", "text": "Doesn't this break the current \"contract\" of `Array#index`? I think this is a very bad idea. This should be a new method, e.g. `index_all` or something to that effect.\n", "created_at": "2012-06-10 19:07:54", "user": 23423, "id": 6230951}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6231261", "text": "@trans : thank you, I hope it's good (I have called the method `Array#indexes` and I add an aliase which is `Array#index_all`).\n\nThank you. Have a nice day.\n", "created_at": "2012-06-10 19:45:09", "user": 354185, "id": 6231261}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6270936", "text": "Sorry I've missed the doc when I move the method.\n", "created_at": "2012-06-12 13:56:09", "user": 354185, "id": 6270936}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6314820", "text": "This will need tests before it can be committed.  Tests you add would go in test/ruby/test_array.rb\n\nSince this is a feature request for Array you will need to discuss it on https://bugs.ruby-lang.org before it can be committed (regardless of implementation).  You can either add the reasoning for this addition to #6572 or you can create a new ticket (and I will close #6572).  The ticket should provide examples of usage and reasons for inclusion in ruby.\n", "created_at": "2012-06-13 21:54:40", "user": 9831, "id": 6314820}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6322844", "text": "@drbrain ; what do you mean when you say that \"There is no implementation for argc > 0\" please ? I wait your answer to write tests and open the issue on the Ruby's bug tracker.\n", "created_at": "2012-06-14 08:24:46", "user": 354185, "id": 6322844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6336910", "text": "Your documentation says I should be able to `ary.indexes \"a\"` when a single argument is passed, for calling convention `-1`, `argc` will be 1 and `argv` will be a pointer to a ruby String \"a\".\n\nYou do not check if `argc > 0` nor do you use `argv` so your implementation will not return any value.\n\nI will add a line comment too.\n", "created_at": "2012-06-14 18:34:15", "user": 9831, "id": 6336910}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6352294", "text": "@drbrain : I have open an issue on bug tracker, it's [#6596](https://bugs.ruby-lang.org/issues/6596).\n", "created_at": "2012-06-15 09:06:31", "user": 354185, "id": 6352294}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10498143", "text": "I'm closing this, please refer to [Feature #6596 on redmine](https://bugs.ruby-lang.org/issues/6596). Thank you!\n", "created_at": "2012-11-19 00:35:22", "user": 277819, "id": 10498143}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Incorrect indentation fooled rdoc into thinking prose was a code sample; fix it.  Add consistent markup around literals in prose.\n", "labels": [], "number": 129, "updated_at": "2014-06-16 20:01:22", "user": 364390, "closed_at": "2012-08-18 16:32:27", "id": 5063890, "title": "enum.c fixes.", "url": "https://api.github.com/repos/ruby/ruby/issues/129", "created_at": "2012-06-14 07:33:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7845906", "text": "Merged by r36729. Thanks.\n", "created_at": "2012-08-18 16:32:27", "user": 37002, "id": 7845906}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- file.c (rb_file_s_rootname): new method File.rootname.\n  [Feature#6587]\n", "labels": [], "number": 130, "updated_at": "2012-11-19 01:14:19", "user": 16700, "closed_at": "2012-11-19 01:14:19", "id": 5065368, "title": "File.rootname", "url": "https://api.github.com/repos/ruby/ruby/issues/130", "created_at": "2012-06-14 09:22:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10498712", "text": "Closing this, please refer to [Feature #6587 on redmine](https://bugs.ruby-lang.org/issues/6587)\n", "created_at": "2012-11-19 01:14:19", "user": 277819, "id": 10498712}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes typo in comment\n", "labels": [], "number": 131, "updated_at": "2014-07-24 02:06:34", "user": 73707, "closed_at": "2012-06-21 21:00:15", "id": 5175944, "title": "fixed typo", "url": "https://api.github.com/repos/ruby/ruby/issues/131", "created_at": "2012-06-20 17:25:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6488184", "text": "Hi Trevor,\nThank you for the patch! I've added this to [ruby-lang #6619](http://bugs.ruby-lang.org/issues/6619)\n", "created_at": "2012-06-21 16:57:00", "user": 277819, "id": 6488184}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "similar to insert_text\n", "labels": [], "number": 132, "updated_at": "2014-06-12 07:14:01", "user": 16700, "closed_at": "2013-08-07 00:03:30", "id": 5208985, "title": "Readline.delete text", "url": "https://api.github.com/repos/ruby/ruby/issues/132", "created_at": "2012-06-22 06:09:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10498942", "text": "I am closing this, please refer to [Bug #6626 in redmine](https://bugs.ruby-lang.org/issues/6626)\n", "created_at": "2012-11-19 01:33:19", "user": 277819, "id": 10498942}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20718451", "text": "That ticket is still open.\n", "created_at": "2013-07-10 02:37:07", "user": 16700, "id": 20718451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22221090", "text": "Closed by [r42101](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/42101)\n", "created_at": "2013-08-07 00:03:30", "user": 277819, "id": 22221090}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Do not allocate new memory in rb_ary_modify when ARY_SHARED_NUM == 1\n  and length almost same.\n- Store ARY_CAPA instead of RARRAY_LEN in ary_make_shared, to make it useful\n- Fix rb_ary_sort_bang accordantly\n", "labels": [], "number": 133, "updated_at": "2014-06-26 07:36:23", "user": 249427, "closed_at": "2012-09-02 12:14:25", "id": 5234412, "title": "array.c: steel shared array's container when ARY_SHARED_NUM == 1", "url": "https://api.github.com/repos/ruby/ruby/issues/133", "created_at": "2012-06-24 07:17:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6531117", "text": "tests for ruby 1.9.3: \nafter patch  https://gist.github.com/2981959#file_test_after_patch\nbefore patch https://gist.github.com/2981959#file_test_before_patch\n\nfor ruby-trunk gain is lesser but still exists\n", "created_at": "2012-06-24 07:18:55", "user": 249427, "id": 6531117}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6532437", "text": "I've add other commit which make Array really suitable for acting as a queue:\n\nWhen ARY_SHARED_NUM == 1 , and shared array have enough space for pushed values,\nthen simply write them directly to shared array.\nThis commit makes Array's performance as a queue almost linear.\n\nNote that this commit depends on first one, cause it assumes that RARRAY_LEN(shared) \ncontains its capability.\n", "created_at": "2012-06-24 12:22:53", "user": 249427, "id": 6532437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6532442", "text": "Ruby-trunk issue is https://bugs.ruby-lang.org/issues/6638\nIt is not updated for second commit cause bugs.ruby-lang.org currently returns 500\n", "created_at": "2012-06-24 12:24:11", "user": 249427, "id": 6532442}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6540514", "text": "Fixed an error on `x = [...]; x.concat(x)`\n", "created_at": "2012-06-25 06:34:19", "user": 249427, "id": 6540514}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6571276", "text": "another two commits makes array full deque: not only `#push`/`#shift` pattern performs linearly, but `#unshift/#pop` behaves almost linearly as well.\n- when array owns its shared array (`ARY_SHARED_NUM == 1`),\n  and there is enough space then try unshift values directly into shared\n  array\n- when resulting array is big (~>100 items) then make it shared\n  with room enough for future `#unshifts` (`room = (capacity - result_len)/2`), and then insert into shared array\n- otherwise use old way (`memmove`) which is fast enough for small arrays.\n", "created_at": "2012-06-26 09:40:23", "user": 249427, "id": 6571276}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8221347", "text": "closed cause rewrite branch and open new pull request\n", "created_at": "2012-09-02 12:14:49", "user": 249427, "id": 8221347}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8221364", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2310356) (merged a98fa0f8 into 2c1939f4).\n", "created_at": "2012-09-02 12:16:39", "user": 1516820, "id": 8221364}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- io.c (is_popen_fork): check if fork and raise NotImplementedError if\n  unavailable.\n- io.c (rb_io_s_popen): allow environment variables hash and exec\n  options as flat parameters, not in an array arguments.\n- process.c (rb_execarg_extract_options): extract exec options, but no\n  exceptions on non-exec options and returns them as a Hash.\n- process.c (rb_execarg_setenv): set environment variables.\n", "labels": [], "number": 134, "updated_at": "2014-08-15 19:30:27", "user": 16700, "closed_at": "2012-06-27 01:01:28", "id": 5274093, "title": "popen: shell commands with envvars and execopts", "url": "https://api.github.com/repos/ruby/ruby/issues/134", "created_at": "2012-06-26 14:21:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix broken Marshal compatibilities on Complex, Rational, Date and DateTime.\n", "labels": [], "number": 135, "updated_at": "2015-09-24 13:58:14", "user": 16700, "closed_at": "2012-11-19 01:50:01", "id": 5283365, "title": "Compatible marshal loader", "url": "https://api.github.com/repos/ruby/ruby/issues/135", "created_at": "2012-06-26 20:54:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499159", "text": "Closing this, see [Bug #6625](https://bugs.ruby-lang.org/issues/6625) and [Bug #6652](https://bugs.ruby-lang.org/issues/6652) in redmine.\n", "created_at": "2012-11-19 01:50:01", "user": 277819, "id": 10499159}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cf. [[Feature #2674]](https://bugs.ruby-lang.org/issues/2674)\n", "labels": [], "number": 136, "updated_at": "2014-06-17 15:49:30", "user": 15377, "closed_at": "2012-11-19 01:54:21", "id": 5374415, "title": "ISeq#compile should accept IOs (like Ripper does today)", "url": "https://api.github.com/repos/ruby/ruby/issues/136", "created_at": "2012-07-01 14:04:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6788483", "text": "What about StringIO?\n", "created_at": "2012-07-05 19:38:31", "user": 9831, "id": 6788483}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6798413", "text": "Yes, that would be nice... The problem is however, that an IO-like object such as StringIO can break ISeq compilation by cheating #gets method.  I wish we could stop rerouting gets method to another (potentially malicious) one.\n", "created_at": "2012-07-06 06:50:40", "user": 15377, "id": 6798413}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499213", "text": "Closing this, please refer to [Feature #2674 in redmine](https://bugs.ruby-lang.org/issues/2674)\n", "created_at": "2012-11-19 01:54:21", "user": 277819, "id": 10499213}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Unify the test names for the `String`, `Array`, `Hash` and `Integer` method tests.\n", "labels": [], "number": 137, "updated_at": "2012-07-24 03:25:41", "user": 4312, "closed_at": "2012-07-24 03:25:41", "id": 5423208, "title": "More consistent and meaningful test names", "url": "https://api.github.com/repos/ruby/ruby/issues/137", "created_at": "2012-07-04 07:52:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6787799", "text": "These tests match the names of C functions, so I think this change is inappropriate.\n", "created_at": "2012-07-05 19:13:37", "user": 9831, "id": 6787799}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6816485", "text": "@drbrain They may have been testing those functions at some point, but now they are not. Even then, they are still named inconsistently.\n\nThese methods are testing the `String`, `Array`, `Hash` and `Integer` methods. The current test names do not describe what is being tested clearly and they are inconsistent.\n", "created_at": "2012-07-06 21:20:36", "user": 4312, "id": 6816485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6817713", "text": "`test_convert_type` calls `Kernel#String` which, in C, `rb_f_string` which calls `rb_String` which calls `rb_convert_type`, so the test name matches.\n\n`test_check_convert_type` calls `Kernel#Array` which is, in C, `rb_f_array` which calls `rb_Array` which calls `rb_check_convert_type`. \n\n`test_to_integer` calls `Kernel#Integer` which is, in C, `rb_f_integer` which calls `rb_to_integer`.\n\nIn each of these cases the setup is designed to follow a specific call path to hit the C function the test is named after.  The appear to be testing String, Array, Hash, Integer, but they're actually testing a specific case of the C internals.  While there are other callers of rb_convert_type, rb_check_convert_type and rb_to_integer, traveling through the Kernel methods is the easiest way to test the internals.\n", "created_at": "2012-07-06 22:30:00", "user": 9831, "id": 6817713}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6818433", "text": "Got it. Definitely the implementation of those tests threw me :)\n", "created_at": "2012-07-06 23:23:50", "user": 4312, "id": 6818433}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add example for String#bytesize\nAdd example for String#empty?\nAdd example for String#*\nAdd example for String#dump\nUpdate doc for String#center\n", "labels": [], "number": 138, "updated_at": "2012-07-05 20:40:19", "user": 3892, "closed_at": "2012-07-05 20:40:18", "id": 5434126, "title": "Improve documentation for String", "url": "https://api.github.com/repos/ruby/ruby/issues/138", "created_at": "2012-07-04 21:07:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6784498", "text": "Hi,\n\nThis is my first contribution to Ruby, and I plan to do more. Are there guidelines for submitting docs patches, or am I doing this right?\n\nThanks\n", "created_at": "2012-07-05 17:05:10", "user": 3892, "id": 6784498}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6787973", "text": "Pull requests are fine, but it may take a little longer for them to get committed than submitting to bugs.ruby-lang.org.\n", "created_at": "2012-07-05 19:19:56", "user": 9831, "id": 6787973}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6788762", "text": "@oscardelben Also, you should check out the [documenting ruby](http://documenting-ruby.org/) project\n", "created_at": "2012-07-05 19:49:24", "user": 277819, "id": 6788762}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6789912", "text": "@zzak that sounds like what I needed\n", "created_at": "2012-07-05 20:36:44", "user": 3892, "id": 6789912}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6789993", "text": "Applied at r36327 with some minor modifications to normalize formatting across all documentation and a fix to `padstr`.\n", "created_at": "2012-07-05 20:40:18", "user": 9831, "id": 6789993}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**Before patch**\n\n``` ruby\n1.9.3p125 :001 > require_relative \"file\"\nLoadError: cannot infer basepath\n    from (irb):1:in `require_relative'\n    from (irb):1\n    from /home/lite/.rvm/rubies/ruby-1.9.3-p125-perf/bin/irb:16:in `<main>'\n```\n\n**After patch**\n\n``` ruby\n1.9.3p125 :001 > require_relative \"file\"\n => true \n```\n", "labels": [], "number": 139, "updated_at": "2014-06-20 08:36:30", "user": 160962, "closed_at": "2012-11-19 02:11:25", "id": 5440617, "title": "Allow to use require_relative from eval and irb environment", "url": "https://api.github.com/repos/ruby/ruby/issues/139", "created_at": "2012-07-05 09:58:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6775510", "text": "Can you also modify necessary files so that `make` passes?\n", "created_at": "2012-07-05 10:23:18", "user": 15377, "id": 6775510}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6775679", "text": "> Can you also modify necessary files so that make passes?\n\nFor me `make` runs without problems. What do you mean by 'necessary files'?\n", "created_at": "2012-07-05 10:34:37", "user": 160962, "id": 6775679}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6776521", "text": "> For me `make` runs without problems. What do you mean by 'necessary files'?\n\nI suspect that's because you're using a preexisting build directory.  Create another folder elsewhere and start from cloning your repo into it.\n", "created_at": "2012-07-05 11:31:36", "user": 15377, "id": 6776521}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6776714", "text": "```\nlite@LTE-RB ~> git clone git@github.com:LTe/ruby.git\nCloning into 'ruby'...\nremote: Counting objects: 229291, done.\nremote: Compressing objects: 100% (45946/45946), done.\nremote: Total 229291 (delta 182177), reused 227095 (delta 181540)\nReceiving objects: 100% (229291/229291), 77.43 MiB | 2.90 MiB/s, done.\nResolving deltas: 100% (182177/182177), done.\n\nlite@LTE-RB ~> cd ruby/\n(trunk=85bb4) lite@LTE-RB ~/ruby> git checkout require_relative \nBranch require_relative set up to track remote branch require_relative from origin.\nSwitched to a new branch 'require_relative'\n(require_relative=d2b02) lite@LTE-RB ~/ruby> autoconf\n(require_relative=d2b02) lite@LTE-RB ~/ruby> ./configure\n*** stuff ***\nconfig.status: creating Makefile\nconfig.status: creating ruby-2.0.pc\n(require_relative=d2b02) lite@LTE-RB ~/ruby> make -j3\n*** stuff ***\ndone without error\n(require_relative=d2b02) lite@LTE-RB ~/ruby> sudo make install\n(require_relative=d2b02) lite@LTE-RB ~/ruby> /usr/local/bin/ruby -v\nruby 2.0.0dev (2012-07-05 trunk 36321) [x86_64-linux]\n```\n", "created_at": "2012-07-05 11:42:58", "user": 160962, "id": 6776714}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6779438", "text": "OK so when I checked your repo at first (was LTe@99392d9), it broke the compilation.  But now (LTe@f58d7c6) it compiles cleanly.\n", "created_at": "2012-07-05 14:05:43", "user": 15377, "id": 6779438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499440", "text": "I'm closing this, please refer to [Bug #7391 in redmine](https://github.com/ruby/ruby/pull/139)\n\n@shyouhei Could you please review the ticket in redmine?\n\nThank you!\n", "created_at": "2012-11-19 02:11:25", "user": 277819, "id": 10499440}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add links to Kernel#callcc for cross reference.\nImprove formatting.\n\nhttp://bugs.ruby-lang.org/issues/6706\n\ncc @drbrain\n", "labels": [], "number": 140, "updated_at": "2014-06-16 03:51:25", "user": 3892, "closed_at": "2012-07-14 08:32:42", "id": 5487458, "title": "Improve documentation of Continuation", "url": "https://api.github.com/repos/ruby/ruby/issues/140", "created_at": "2012-07-08 16:13:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6981167", "text": "marged by r36392. Thanks\nhttp://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=36392&view=revision\n", "created_at": "2012-07-14 08:32:42", "user": 37002, "id": 6981167}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 141, "updated_at": "2012-11-19 02:16:29", "user": 3892, "closed_at": "2012-11-19 02:16:29", "id": 5487594, "title": "Remove checks for RUBY_VERSION", "url": "https://api.github.com/repos/ruby/ruby/issues/141", "created_at": "2012-07-08 16:38:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6832510", "text": "http://bugs.ruby-lang.org/issues/6707\n", "created_at": "2012-07-08 16:40:38", "user": 3892, "id": 6832510}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499498", "text": "I'm closing this please refer to #6707\n", "created_at": "2012-11-19 02:16:28", "user": 277819, "id": 10499498}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, I defined a new instance method for Class. It's called `singleton_instance`. It returns the attached instance from a singleton Class. In short, it's the reversed version of the `Kernel#singleton_class` getter method.\n\nThis pull request has a corresponding issue on Ruby Issue Tracking System: https://bugs.ruby-lang.org/issues/6682\n", "labels": [], "number": 142, "updated_at": "2014-06-16 00:17:27", "user": 117807, "closed_at": "2012-11-18 23:44:29", "id": 5489817, "title": "Define Class#singleton_instance", "url": "https://api.github.com/repos/ruby/ruby/issues/142", "created_at": "2012-07-08 22:56:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10497526", "text": "Closing this, please refer to [Feature #6682 on redmine](https://bugs.ruby-lang.org/issues/6682)\n", "created_at": "2012-11-18 23:44:29", "user": 277819, "id": 10497526}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 143, "updated_at": "2014-06-12 16:54:11", "user": 3892, "closed_at": "2012-07-16 13:17:47", "id": 5490176, "title": "Remove unused parameter", "url": "https://api.github.com/repos/ruby/ruby/issues/143", "created_at": "2012-07-09 00:04:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/6836304", "text": "http://bugs.ruby-lang.org/issues/6708\n", "created_at": "2012-07-09 00:04:39", "user": 3892, "id": 6836304}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7005661", "text": "Merged by r36400. Thanks.\n", "created_at": "2012-07-16 13:17:47", "user": 37002, "id": 7005661}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The first line...\n\nReturns a copy of str with the first occurrence of pattern substituted for the second argument.\n\nshould be...\n\nReturns a copy of str with the first occurrence of pattern replaced by the second argument.\n\n\"substituted for\", implies that the pattern will replace the second argument, which is incorrect.\n", "labels": [], "number": 144, "updated_at": "2012-07-24 03:24:54", "user": 355634, "closed_at": "2012-07-24 03:24:54", "id": 5536393, "title": "altered documentation for String.sub() where verbage was incorrect", "url": "https://api.github.com/repos/ruby/ruby/issues/144", "created_at": "2012-07-10 22:27:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7197832", "text": "This patch is broken, see the diff.\n", "created_at": "2012-07-24 03:24:54", "user": 13423, "id": 7197832}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 145, "updated_at": "2012-07-14 07:20:12", "user": 16700, "closed_at": "2012-07-14 07:20:12", "id": 5617677, "title": "Refactor _run_parallel", "url": "https://api.github.com/repos/ruby/ruby/issues/145", "created_at": "2012-07-14 03:20:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://bugs.ruby-lang.org/issues/6743\n", "labels": [], "number": 146, "updated_at": "2014-07-08 04:01:13", "user": 3892, "closed_at": "2012-07-18 01:04:14", "id": 5645349, "title": "Add documentation for Debug library", "url": "https://api.github.com/repos/ruby/ruby/issues/146", "created_at": "2012-07-16 17:51:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Consider the following code in time.c (quo).\n\n```\nif (b == 0) rb_num_zerodiv();\nc = a / b;\n```\n\nThis patch informs the compiler that rb_num_zerodiv doesn't return.\nOtherwise some compilers may conclude that the division a / b is always\nreachable, leading to misoptimization.\n\nhttps://bugs.ruby-lang.org/issues/6736\n", "labels": [], "number": 147, "updated_at": "2012-09-21 21:28:17", "user": 801567, "closed_at": "2012-09-21 21:28:17", "id": 5665721, "title": "intern.h: mark rb_num_zerodiv as NORETURN", "url": "https://api.github.com/repos/ruby/ruby/issues/147", "created_at": "2012-07-17 14:52:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "add a new test to make sure that changing encoding of ASCII substrings that originated from binary strings doesn't fail. related pr and jira issues:\n1. https://github.com/jruby/jruby/pull/223\n2. https://github.com/rubyspec/rubyspec/pull/146\n3. http://jira.codehaus.org/browse/JRUBY-6764\n\nNote that i initially sent a pr to the rubyspec guys, but they aren't very responsive.\n", "labels": [], "number": 148, "updated_at": "2014-07-03 21:53:27", "user": 297621, "closed_at": "2012-08-23 21:15:07", "id": 5755713, "title": "add a new encoding test", "url": "https://api.github.com/repos/ruby/ruby/issues/148", "created_at": "2012-07-21 19:42:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7157906", "text": "What's the intension?\nThe upper half seems like a test for `Array#pack`.\nThe rest doesn't exist already?\n", "created_at": "2012-07-22 00:41:23", "user": 16700, "id": 7157906}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7158122", "text": "this test demonstrates a bug in jruby, in which certain ascii strings can\nend up as a view in a larger binary buffer. changing the encoding will\ntraverse the entire buffer checking for binary characters (i.e. > 0x7f)\ninstead of traversing the view. please let me know if that wasn't clear.\nthe links may give you a better idea as well.\nOn Jul 21, 2012 8:41 PM, \"Nobuyoshi Nakada\" <\nreply@reply.github.com>\nwrote:\n\n> What's the intension?\n> The upper half seems like a test for `Array#pack`.\n> The rest doesn't exist already?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/ruby/ruby/pull/148#issuecomment-7157906\n", "created_at": "2012-07-22 01:29:58", "user": 297621, "id": 7158122}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7197811", "text": "CRuby's test won't merge regression tests originated from other implementations.\nAnd on CRuby, such test should use ext/-test-/string/coderange.c\n", "created_at": "2012-07-24 03:23:06", "user": 13423, "id": 7197811}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7255352", "text": "Why not include regression tests found via bugs in other implementations? If there's a gap in MRI tests that don't exercise the behavior, then MRI is at risk of regressing as well.\n\nJRuby uses MRI's suite as one of our primary test suites, and we would like to contribute back to that suite in the form of additional tests. I do not understand the reluctance to add tests where there may be gaps.\n\nThe situation right now is that JRuby wants to use a test suite that is shared with other implementations, but RubySpec folks aren't merging pull requests, and MRI folks are rejecting them. Does nobody want to share test suites but us?\n", "created_at": "2012-07-25 17:17:15", "user": 10135, "id": 7255352}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7257536", "text": "@nobu I can't seem to find any tests for this case.  I've refactored the test to not look like a `pack` test.  I think the intention is to test the behavior of `String#slice` + `String#encode`.\n\n@nurse We should commit a test for this in order to define the behavior on MRI.  Maybe you can find an existing test for this behavior?\n\nHere's my updated patch:\n\n``` diff\n\ndiff --git a/test/ruby/test_string.rb b/test/ruby/test_string.rb\nindex 47f349c..0398aa4 100644\n--- a/test/ruby/test_string.rb\n+++ b/test/ruby/test_string.rb\n@@ -1940,6 +1940,18 @@ class TestString < Test::Unit::TestCase\n     assert_raise(Encoding::CompatibilityError) { \"\\u3042\".encode(\"ISO-2022-JP\").rstrip }\n   end\n\n+  def test_encoding_of_ascii_originating_from_binary\n+    binary_string = [0x82, 0x66, 0x6f, 0x6f]\n+\n+    ascii_string  = binary_string.pack('C4').slice(1, 3)\n+    assert_equal \"foo\", ascii_string\n+    assert_equal \"ASCII-8BIT\", ascii_string.encoding.name\n+\n+    utf8_string   = ascii_string.encode(\"UTF-8\")\n+    assert_equal \"foo\", utf8_string\n+    assert_equal \"UTF-8\", utf8_string.encoding.name\n+  end\n+\n =begin\n   def test_symbol_table_overflow\n     assert_in_out_err([], <<-INPUT, [], /symbol table overflow \\(symbol [a-z]{8}\\) \\(RuntimeError\\)/)\n```\n", "created_at": "2012-07-25 18:30:06", "user": 3124, "id": 7257536}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7269570", "text": "This test is not atomic; is join test.\nAs I said, on CRuby this test can be  written with coderange.so and it can be atomic.\nIt should be assertions for ascii_string and checks the coderange and the encoding of it.\n", "created_at": "2012-07-26 05:22:13", "user": 13423, "id": 7269570}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7287316", "text": "@nurse I don't understand what you mean by \"atomic\".  Can you show me?\n\nThis test is supposed to be testing copy-on-write behavior of the string.  Where calling `slice` doesn't create a new character array, and the bytes outside the new Ruby object range are not taken in to account when calling `encode`.\n\nHere is a diagram illustrating what this code is trying to test:\n\n![test diagram](https://img.skitch.com/20120726-gwgi5h7iitgu6i2ht3wky3byr8.jpg)\n", "created_at": "2012-07-26 19:10:25", "user": 3124, "id": 7287316}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7293352", "text": "Is \"without raising an exception\" the important part?\nThen the test should be:\n\n``` ruby\n  def test_encoding_of_ascii_originating_from_binary\n    binary_string = [0x82, 0x66, 0x6f, 0x6f]\n\n    ascii_string  = binary_string.pack('C4').slice(1, 3)\n    assert_equal(\"foo\", ascii_string)\n    assert_equal(Encoding::ASCII_8BIT, ascii_string.encoding)\n    utf8_string = nil\n    assert_nothing_raised(\"JRUBY-6764\") do\n      utf8_string = ascii_string.encode(Encoding::UTF_8)\n    end\n    assert_equal(\"foo\", utf8_string)\n    assert_equal(Encoding::UTF_8, utf8_string.encoding)\n  end\n```\n", "created_at": "2012-07-26 23:07:33", "user": 16700, "id": 7293352}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7293612", "text": "> @nurse I don't understand what you mean by \"atomic\". Can you show me?\n> \n> This test is supposed to be testing copy-on-write behavior of the string. Where calling slice doesn't create a new character array, and the bytes outside the new Ruby object range are not taken in to account when calling encode.\n\nIn other words, I can't understand what is tested by the test.\nOr it seems not a simplest reproducible program.\nIf it tests String#encode for shared string, it should describe it.\nI couldn't find it by the test.\n", "created_at": "2012-07-26 23:22:32", "user": 13423, "id": 7293612}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7326603", "text": "OK.  @nurse where do we test the behavior of CoW strings?\n\n@jvshahid can you rewrite the test like @nobu suggests and send another PR?  This is a test that defines the behavior of `encode` when combined with CoW strings, so please don't include the \"JRUBY\" string in your assertion though.\n\nThanks! :heart:\n", "created_at": "2012-07-27 23:59:00", "user": 3124, "id": 7326603}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7350105", "text": "> OK. @nurse where do we test the behavior of CoW strings?\n\nThis seems a test for String#encode, so this should be in test/ruby/test_transcode.rb.\nWhen creating a CoW string in this test, it should be clear that the code does it by C ext or a method named make_cow_string (it is OK the implementation uses pack or some hacky code).\n", "created_at": "2012-07-29 05:46:21", "user": 13423, "id": 7350105}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7355396", "text": "I made the changes on my branch, it's a new [commit](https://github.com/jvshahid/ruby/commit/32c63d97add4d403d158b27de413bb4b0c51a681) that moves the test and make it look like what @tenderlove and @nobu suggested. can someone please reopen the pull request.\n\nthanks,\n", "created_at": "2012-07-29 18:51:05", "user": 297621, "id": 7355396}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7357911", "text": "Does JRuby make shorter strings also shared?\n4bytes string wouldn't be shared in CRuby, I guess.\n", "created_at": "2012-07-30 00:13:39", "user": 16700, "id": 7357911}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7375798", "text": "We do not have a lower size limit for COW sharing (except for single-byte, for which we have a set of preallocated byte[1]).\n", "created_at": "2012-07-30 17:45:24", "user": 10135, "id": 7375798}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7382192", "text": "Ah yes, @nobu is right.  @jvshahid can you make the string longer?\n\nUnfortunately, I'm not a collaborator, so I cannot reopen.  @nobu or @nurse would you mind reopening this PR?  Thank you!\n", "created_at": "2012-07-30 21:07:42", "user": 3124, "id": 7382192}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7389268", "text": "@tenderlove welcome.  You are now a ruby/ruby team member.  Feel free to reopen this.\n", "created_at": "2012-07-31 04:03:07", "user": 15377, "id": 7389268}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7389813", "text": "@shyouhei thank you! :heart:  I will reopen this.\n", "created_at": "2012-07-31 04:56:15", "user": 3124, "id": 7389813}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7984327", "text": "Merged in r36808\n", "created_at": "2012-08-23 21:15:07", "user": 3124, "id": 7984327}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch just aliases StringIO#string to StringIO#to_s (as opposed to the default, inherited implementation of #to_s), in the interest of maintaining the POLS.\n", "labels": [], "number": 149, "updated_at": "2014-06-16 12:38:36", "user": 153561, "closed_at": "2012-07-24 02:10:49", "id": 5788913, "title": "Making StringIO#to_s behave as one would expect", "url": "https://api.github.com/repos/ruby/ruby/issues/149", "created_at": "2012-07-23 20:55:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7197043", "text": "Your expectation is not my expectation.\n", "created_at": "2012-07-24 02:10:49", "user": 16700, "id": 7197043}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7197140", "text": ":-1: I'm not @nobu but I know his feeling.  StringIO is neither String nor IO, so it is not obvious what should be expected for to_s call.\n\nI'm not against this diff.  Next time please write an enough reason for us to pull it, other than POLS.\n", "created_at": "2012-07-24 02:18:59", "user": 15377, "id": 7197140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7197356", "text": "@shyouhei Noted - thanks for the explanation.\n", "created_at": "2012-07-24 02:39:03", "user": 153561, "id": 7197356}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All methods of `Enumerator::Lazy` except `#cycle`, `#zip` and `#flat_map` optimized by using Procs chaining. Unoptimized methods are still use enumerators chaining and can be converted to Procs chaining later on.\n\nI believe it's an extensible way to do that (as requested by Nobuyoshi Nakada).\nFollow the discussion here: http://bugs.ruby-lang.org/issues/6183\n\nAll tests pass along with `#inspect` test and hybrid chaining test (when optimized and unoptimized methods chained together) added by patch.\n\nBenchmark results:\n\n```\n======================Lazy#map\n                      user     system      total        real\nTrunk             1.330000   0.000000   1.330000 (  1.332653)\nOptimized         0.770000   0.000000   0.770000 (  0.779608)\n======================Lazy#select\n                      user     system      total        real\nTrunk             1.240000   0.000000   1.240000 (  1.238195)\nOptimized         0.740000   0.000000   0.740000 (  0.739532)\n======================Lazy#grep\n                      user     system      total        real\nTrunk             1.500000   0.000000   1.500000 (  1.506823)\nOptimized         0.740000   0.000000   0.740000 (  0.741049)\n======================Lazy#take_while\n                      user     system      total        real\nTrunk             1.250000   0.000000   1.250000 (  1.249061)\nOptimized         0.730000   0.000000   0.730000 (  0.738524)\n======================Lazy#drop_while\n                      user     system      total        real\nTrunk             1.020000   0.000000   1.020000 (  1.022606)\nOptimized         0.410000   0.000000   0.410000 (  0.414222)\n======================Lazy#reject\n                      user     system      total        real\nTrunk             1.270000   0.010000   1.280000 (  1.293468)\nOptimized         0.740000   0.010000   0.750000 (  0.750853)\n======================Lazy#drop\n                      user     system      total        real\nTrunk             4.080000   0.000000   4.080000 (  4.086188)\nOptimized         1.510000   0.000000   1.510000 (  1.517811)\n======================Lazy#take\n                      user     system      total        real\nTrunk             0.540000   0.000000   0.540000 (  0.550599)\nOptimized         0.390000   0.000000   0.390000 (  0.383634)\n```\n", "labels": [], "number": 150, "updated_at": "2014-07-08 16:42:37", "user": 287994, "closed_at": "2012-11-19 02:36:19", "id": 5847154, "title": "Enumerator::Lazy optimized using Procs chaining", "url": "https://api.github.com/repos/ruby/ruby/issues/150", "created_at": "2012-07-26 06:04:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499726", "text": "Closing this, please review to [Bug #6183 on redmine](http://bugs.ruby-lang.org/issues/6183)\n", "created_at": "2012-11-19 02:36:19", "user": 277819, "id": 10499726}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For [JRUBY-6819](http://jira.codehaus.org/browse/JRUBY-6819) we had a bug when the separator string is longer than the string on which you call each_line that caused it to walk off the end. There did not appear to be a test that covered this in MRI's suite.\n", "labels": [], "number": 151, "updated_at": "2014-06-14 20:38:22", "user": 10135, "closed_at": "2012-08-07 00:44:04", "id": 6057292, "title": "Test String#each_line when separator is longer than the string.", "url": "https://api.github.com/repos/ruby/ruby/issues/151", "created_at": "2012-08-06 17:33:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7540706", "text": "Huh.  Thanks @headius.  I'll merge this in.\n", "created_at": "2012-08-07 00:32:13", "user": 3124, "id": 7540706}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7540877", "text": "Committed in r36648.  Thanks!\n", "created_at": "2012-08-07 00:44:04", "user": 3124, "id": 7540877}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nSorry this is not a very useful pull request but it adds doc for the `Method#clone` method. \n\nHave a nice day.\n", "labels": [], "number": 152, "updated_at": "2014-06-12 08:16:13", "user": 354185, "closed_at": "2012-08-07 20:53:32", "id": 6083252, "title": "Add few documentation on Method#clone", "url": "https://api.github.com/repos/ruby/ruby/issues/152", "created_at": "2012-08-07 17:14:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nI just add aliases for the `start_with?` and `end_with?` methods because an object can be designed by \"it\" and each verbs ends with an \"s\" when it's conjugated with the third person. \n\nIs there a better way to define aliases ? Sorry if I don't do it the right way, I can change it if you want.\n\nI have also a question : Why the `start_with?` and `end_with?` method (in the C sources) don't end with a _p like all other predicate methods ?\n\nHave a nice day.\n", "labels": [], "number": 153, "updated_at": "2017-05-30 14:03:35", "user": 354185, "closed_at": "2012-08-10 16:53:04", "id": 6105897, "title": "Add alisases for the start_with? and end_with? methods", "url": "https://api.github.com/repos/ruby/ruby/issues/153", "created_at": "2012-08-08 15:43:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7650314", "text": "Hi,\n\nI allow myself to close this pull request ; @eregon tells me that you don't want method names to end with \"s\".\n\nHave a nice day.\n", "created_at": "2012-08-10 16:53:04", "user": 354185, "id": 7650314}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7650891", "text": "That aliases for 3rd person verbs in English are uncommon, as it brings duplication and is not needed if the reader read as \"does this_string start with that_string?\", to be exact.\n", "created_at": "2012-08-10 17:16:14", "user": 168854, "id": 7650891}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7664782", "text": "Yes, after reflection it was for an if, like that :\n\n``` ruby\nif string.starts_with?\n  # ... blah\nend\n```\n\nbut your example with \"does string start with that string ?\" is correct so I think we can close this PR.\n", "created_at": "2012-08-11 07:46:08", "user": 354185, "id": 7664782}, {"reactions": {"+1": [20971]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268364734", "text": "Can we bump that and review that changes again please? While working on code it's the 3rd time I write \"starts_with?\" instead of \"start_with\"", "created_at": "2016-12-20 21:29:24", "user": 1714573, "id": 268364734}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304664368", "text": "@CodingFu Please submit a feature on https://bugs.ruby-lang.org/ if you want to discuss adding these aliases.", "created_at": "2017-05-29 13:43:44", "user": 168854, "id": 304664368}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304888270", "text": "@CodingFu But first have a look at https://bugs.ruby-lang.org/issues/5555 (rejected).", "created_at": "2017-05-30 14:03:35", "user": 1112299, "id": 304888270}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "OWASP doesn't recommend it https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content\nand &apos; is not a valid in HTML4 http://www.w3.org/TR/html4/sgml/entities.html\n", "labels": [], "number": 154, "updated_at": "2014-07-08 02:51:13", "user": 52642, "closed_at": "2012-08-23 07:45:57", "id": 6140268, "title": "It's not recommended to escape ' to &apos;", "url": "https://api.github.com/repos/ruby/ruby/issues/154", "created_at": "2012-08-09 23:31:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7631266", "text": "@xibbar is this OK to apply?\n", "created_at": "2012-08-10 00:37:26", "user": 3124, "id": 7631266}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7631585", "text": "Oh, I learned for the first time.\nThank you for your report.\n", "created_at": "2012-08-10 00:59:31", "user": 25030, "id": 7631585}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7631623", "text": "I will apply your patch. Thank you.\n", "created_at": "2012-08-10 01:02:21", "user": 25030, "id": 7631623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7631682", "text": "Thanks @xibbar! :heart:\n", "created_at": "2012-08-10 01:07:04", "user": 3124, "id": 7631682}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7632397", "text": "Thanks guys, just for your info, I've also opened https://bugs.ruby-lang.org/issues/6850\n", "created_at": "2012-08-10 01:59:36", "user": 52642, "id": 7632397}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7696790", "text": "I've updated the patch to take in consideration [r36687](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/36687)\n", "created_at": "2012-08-13 16:14:20", "user": 52642, "id": 7696790}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7697092", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2109740) (merged 538bd3cc into 4e75451a).\n", "created_at": "2012-08-13 16:24:43", "user": 1516820, "id": 7697092}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7962284", "text": "Merged in r36692\n", "created_at": "2012-08-23 07:45:57", "user": 13423, "id": 7962284}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `FileUtils#ln_sf` documentation indicates that calling it is the same as calling `ln_s(src, dest, :force)` which is wrong.\n\nThis commit fixes it by replacing `:force` with `:force => true`.\n", "labels": [], "number": 155, "updated_at": "2014-06-16 19:42:06", "user": 119303, "closed_at": "2012-08-18 15:57:18", "id": 6173419, "title": "Fixing a typo in FileUtils#ln_sf documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/155", "created_at": "2012-08-11 22:43:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7671048", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2097211) (merged e8e697d2 into 00468f21).\n", "created_at": "2012-08-11 22:53:21", "user": 1516820, "id": 7671048}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7845641", "text": "Merged by 6eb316780f Thanks.\n", "created_at": "2012-08-18 15:57:18", "user": 37002, "id": 7845641}], "assignees": [37002, 37002], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We just fixed this issue in Rails\nhttps://groups.google.com/forum/#!msg/rubyonrails-security/kKGNeMrnmiY/r2yM7xy-G48J%5B1-25%5D\n\nRuby's ERB is not escaping single quotes and this could lead to\nissues like ...\n\n<a href='<%= h link %>' >My Link!</a>\nbeing link = \" '; alert(hax) \"\n\nOWASP suggest escaping &, <, >, \", ' and /\nhttps://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet#RULE_.231_-_HTML_Escape_Before_Inserting_Untrusted_Data_into_HTML_Element_Content\n\nAbout / I don't think could lead to issues but that's another story.\n\nYou have the right code in CGI.escapeHTML\nhttps://github.com/ruby/ruby/blob/c47cca2f/lib/cgi/util.rb#L36 so my\nsuggestion is to reuse CGI.escapeHTML from ERB::Util\n", "labels": [], "number": 156, "updated_at": "2014-06-25 06:44:46", "user": 52642, "closed_at": "2012-08-13 16:06:27", "id": 6178029, "title": "Make ERB::Util.html_escape reuse CGI.escapeHTML", "url": "https://api.github.com/repos/ruby/ruby/issues/156", "created_at": "2012-08-12 16:16:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7677186", "text": "/cc @xibbar @tenderlove I've already sent an email to security but Shugo wanted to discuss it publicly.\n", "created_at": "2012-08-12 16:19:00", "user": 52642, "id": 7677186}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7677264", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2101939) (merged 01884ea0 into a6321085).\n", "created_at": "2012-08-12 16:27:05", "user": 1516820, "id": 7677264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7677540", "text": "@seki maintains `lib/erb*`.  I'm not sure he wants ERB to depend on CGI (as you may want to use ERB independently of CGI).  But probably we should update the ERB escape to match the CGI escape.\n\n@seki some background: we (on rails-core team) had to fix a security issue.  OWASP recommends escaping slashes and single quotes when HTML escaping.  It would be nice if those changes could be pushed to ERB.  What do you think?\n", "created_at": "2012-08-12 16:59:33", "user": 3124, "id": 7677540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7680054", "text": "I like that ERB is independent of CGI. I want a patch that update ERB's html_escape.\n\nI want to HTML-escape subroutine be added to Ruby, ERB use it in the future. (It would be nice if it is written by C.)\n", "created_at": "2012-08-12 21:32:23", "user": 33682, "id": 7680054}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7681022", "text": "@tenderlove @seki I've changed the implementation to not depend on CGI.\nI like the idea of an HTML-escape subroutine written in C that ERB and CGI both uses.\nThere are some gems around doing it like https://github.com/brianmario/escape_utils\nI'd merge anyway this pull request since it's fixing an issue and then we can improve the performance.\n", "created_at": "2012-08-12 23:35:21", "user": 52642, "id": 7681022}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7681030", "text": "Perhaps it's better to write a module with the shared code and call that from ERB and CGI.\nWhat do you prefer guys?\n", "created_at": "2012-08-12 23:36:12", "user": 52642, "id": 7681030}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7681061", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2103981) (merged 4cd8a2b9 into a6321085).\n", "created_at": "2012-08-12 23:41:10", "user": 1516820, "id": 7681061}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7683144", "text": "Sorry, I mistook. I did not know that CGI was refactored. We have cgi/util.\n", "created_at": "2012-08-13 04:01:50", "user": 33682, "id": 7683144}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7691058", "text": "@seki so you want me to require cgi/util from erb?\n", "created_at": "2012-08-13 13:04:39", "user": 52642, "id": 7691058}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7696493", "text": "Shugo already pushed this one so I'm closing the issue.\n", "created_at": "2012-08-13 16:06:27", "user": 52642, "id": 7696493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8243265", "text": "Was there some reason for not escaping single quote? Was it just bug or some convention to use only double quotes? Just interesting.\n", "created_at": "2012-09-03 17:13:17", "user": 155511, "id": 8243265}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 157, "updated_at": "2014-07-02 20:38:42", "user": 15918, "closed_at": "2012-11-19 02:57:01", "id": 6226307, "title": "Add handling for %i and %I quoting to irb", "url": "https://api.github.com/repos/ruby/ruby/issues/157", "created_at": "2012-08-14 20:27:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7739386", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2123155) (merged a3d5b145 into e1aa72d4).\n", "created_at": "2012-08-14 20:37:42", "user": 1516820, "id": 7739386}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7746878", "text": ":+1:\n", "created_at": "2012-08-15 03:02:54", "user": 15377, "id": 7746878}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148659", "text": "I am also :+1:, but I think we need approval from @keiju.  @keiju what do you think about this?  The parser has changed to include %i and %I, so we should probably add support to irb.\n", "created_at": "2012-08-30 03:50:35", "user": 3124, "id": 8148659}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499978", "text": "Closing this, please refer to [Feature #7392 in redmine](http://bugs.ruby-lang.org/issues/7392)\n", "created_at": "2012-11-19 02:57:01", "user": 277819, "id": 10499978}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Patch for http://bugs.ruby-lang.org/issues/6670\n", "labels": [], "number": 158, "updated_at": "2014-06-15 17:01:23", "user": 12285, "closed_at": "2012-11-19 03:00:13", "id": 6238752, "title": "Change String#lines, bytes, chars, codepoints to return array (#6670)", "url": "https://api.github.com/repos/ruby/ruby/issues/158", "created_at": "2012-08-15 11:52:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7754136", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2129407) (merged 3496fec0 into e272790d).\n", "created_at": "2012-08-15 12:04:13", "user": 1516820, "id": 7754136}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7755147", "text": "Should the docs for rb_str_each_line go with it to line [6249](https://github.com/ruby/ruby/pull/158/files#L0R6249)?\n\n_edit_ oops, I misread.. Nice patch Hara-san!\n", "created_at": "2012-08-15 13:01:20", "user": 277819, "id": 7755147}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500014", "text": "I'm closing this, please refer to [Feature #6670 in redmine](http://bugs.ruby-lang.org/issues/6670)\n", "created_at": "2012-11-19 03:00:13", "user": 277819, "id": 10500014}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nJust a fix a test which doesn't pass.\n\nHave a nice day.\n", "labels": [], "number": 159, "updated_at": "2012-08-19 14:22:01", "user": 354185, "closed_at": "2012-08-19 14:19:08", "id": 6310992, "title": "* test/ruby/envutil.rb : fix a syntax error", "url": "https://api.github.com/repos/ruby/ruby/issues/159", "created_at": "2012-08-19 09:02:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7851669", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2166849) (merged bc584d88 into 8198cca9).\n", "created_at": "2012-08-19 09:11:55", "user": 1516820, "id": 7851669}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7853458", "text": "It should run by just-compiled ruby.\n\nHow do you run the test?\nWhat error occurs where?\n", "created_at": "2012-08-19 14:10:31", "user": 16700, "id": 7853458}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7853494", "text": "Hello,\n\nI run the test a bad way, I create a temporary Rakefile with a test task which run all of the test*.rb file inside the test/ directory. I would like to check if it was normal so in a IRB session I wrote :\n\n``` ruby\nirb(main):001:0> def foo(args, prepare, code, message=nil, limit: 1.5)\nirb(main):002:1> end\nSyntaxError: (irb):1: syntax error, unexpected tLABEL\ndef foo(args, prepare, code, message=nil, limit: 1.5)\n                                                ^\n    from /usr/bin/irb:12:in `<main>'\nirb(main):003:0> \n```\n\nSo I thought it was a syntax error from the writer of this piece of code but if it isn't, sorry.\n", "created_at": "2012-08-19 14:15:16", "user": 354185, "id": 7853494}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7853524", "text": "It should work if you run `irb` in the trunk.\n", "created_at": "2012-08-19 14:19:08", "user": 16700, "id": 7853524}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7853548", "text": "@nobu : Yeah, my bad, sorry, I forgot to switch my Ruby version to 2.0. I'm an airhead, sorry. Have a nice day!\n", "created_at": "2012-08-19 14:22:01", "user": 354185, "id": 7853548}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- vm_insnhelper.c (vm_call_method): follow iclasses as klass in cfp\n  but not included modules.  [ruby-core:47241] [Bug #6891]\n- vm_insnhelper.c (vm_call_bmethod): pass defined_class to follow\n  proper ancestors.  [ruby-core:47241] [Bug #6891]\n", "labels": [], "number": 160, "updated_at": "2012-08-20 11:49:37", "user": 16700, "closed_at": "2012-08-20 11:49:37", "id": 6319907, "title": "vm_insnhelper.c: iclass as klass in cfp", "url": "https://api.github.com/repos/ruby/ruby/issues/160", "created_at": "2012-08-20 07:49:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7862868", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2174216) (merged 7de8c954 into de83cb9b).\n", "created_at": "2012-08-20 07:58:35", "user": 1516820, "id": 7862868}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nthis patch adds support for comment lines (i.e. lines that are going to be skipped during parsing) to CSV. \nThe standard behaviour of the class does not change. However, if the option `:comment_marker => \"#\"` is added to the constructor, all lines beginning with the specified marker are skipped. \nBehaviour during CSV writing remains unchanged.\nI've added tests for this option in `test/csv/test_features.rb`, to demonstrate usage and expected behaviour.\n\nIf this commit does not live up to some code or quality guidelines, I'd be happy to do my best to improve it.\n\nBy the way, thanks for the great work on ruby. \n", "labels": [], "number": 161, "updated_at": "2014-06-12 21:07:10", "user": 358625, "closed_at": "2012-08-20 20:53:17", "id": 6323761, "title": "Adds support for comment lines in csv files", "url": "https://api.github.com/repos/ruby/ruby/issues/161", "created_at": "2012-08-20 12:01:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7867288", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2176177) (merged 1f3b7122 into f869ed2f).\n", "created_at": "2012-08-20 12:11:35", "user": 1516820, "id": 7867288}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7867306", "text": "@jeg2 is the maintainer for csv, not sure if he maintains that as the [faster_csv](https://github.com/JEG2/faster_csv) gem\n", "created_at": "2012-08-20 12:12:54", "user": 277819, "id": 7867306}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7870462", "text": "I'm fine with this change, but would prefer we generalize it.  In other words, instead of `:comment_marker`, could we do something like `skip_lines: /\\A\\s*#/`?  This might make it possible to skip to skip silly header lines with dates and such.\n", "created_at": "2012-08-20 14:18:00", "user": 5639, "id": 7870462}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7870694", "text": "This was my first idea as well, but I didn't do it because I wasn't sure about the performance impact of matching an additional regex in each line. Or would that be negligible? \n", "created_at": "2012-08-20 14:24:48", "user": 358625, "id": 7870694}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7870842", "text": "I say who cares.  :)\n\nYou only need to pay the price if you need that feature, right?  And if you need it, you need it to get the parsing right.\n\nThat's my opinion.  Thoughts?\n", "created_at": "2012-08-20 14:30:28", "user": 5639, "id": 7870842}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7872006", "text": "Sounds great, I'll implement it and update the pull request accordingly.\n", "created_at": "2012-08-20 15:04:06", "user": 358625, "id": 7872006}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7874012", "text": "This should do it. You can now pass any object that responds to matches as a `:skip_lines` parameter. If you pass any other object (except nil), an ArgumentError is thrown.\nDuring parsing, any line matching `skip_lines` is skipped.\n", "created_at": "2012-08-20 16:00:10", "user": 358625, "id": 7874012}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7874232", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2178743) (merged 1578e5c3 into f869ed2f).\n", "created_at": "2012-08-20 16:06:56", "user": 1516820, "id": 7874232}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7875327", "text": "I am happy with this request and would like it merged.  Can that be done from the Git side, or do I need to handle the changes in Subversion?\n", "created_at": "2012-08-20 16:42:35", "user": 5639, "id": 7875327}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7880845", "text": "@JEG2 you must commit through subversion. This repo is a read-only mirror.\n", "created_at": "2012-08-20 19:39:48", "user": 9831, "id": 7880845}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7880874", "text": "… including a \"Fixes #161 on github\" in your subversion commit message will automatically close this pull request.\n", "created_at": "2012-08-20 19:40:52", "user": 9831, "id": 7880874}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7895290", "text": "Thank you for your feedback and the quick way to get this included.\n", "created_at": "2012-08-21 08:54:11", "user": 358625, "id": 7895290}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7901332", "text": "Thank you for doing the hard work.\n", "created_at": "2012-08-21 13:48:36", "user": 5639, "id": 7901332}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "as in title.\n", "labels": [], "number": 162, "updated_at": "2014-06-17 04:01:18", "user": 802389, "closed_at": "2012-08-21 13:04:59", "id": 6323867, "title": "minor spelling fix: pasing->passing", "url": "https://api.github.com/repos/ruby/ruby/issues/162", "created_at": "2012-08-20 12:08:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7867441", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2176245) (merged 90a1e249 into f4bc341b).\n", "created_at": "2012-08-20 12:19:52", "user": 1516820, "id": 7867441}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7900169", "text": "Merged by 75e2a26b . Thanks.\n", "created_at": "2012-08-21 13:04:59", "user": 37002, "id": 7900169}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- fix GNUmakefile.in to install example.html\n- update README.nacl to catch up the latest build environment\n", "labels": [], "number": 163, "updated_at": "2012-08-27 15:23:13", "user": 577684, "closed_at": "2012-08-27 15:22:48", "id": 6355319, "title": "make package should install example.html for nacl build", "url": "https://api.github.com/repos/ruby/ruby/issues/163", "created_at": "2012-08-21 16:30:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7907357", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2190926) (merged deb9d3bd into 2ed9b46b).\n", "created_at": "2012-08-21 16:39:29", "user": 1516820, "id": 7907357}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8059219", "text": "Close pull request because Yugui merged this change as git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@36830 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\n", "created_at": "2012-08-27 15:23:13", "user": 577684, "id": 8059219}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "NaCl port uses a toolchain which is specified by NACL_SDK_ROOT environment\nvariable. Originally, NaCl build added the toolchain under the NACL_SDK_ROOT\nto the PATH. But updating PATH doesn't work on Mac.\n", "labels": [], "number": 164, "updated_at": "2014-07-22 20:16:52", "user": 577684, "closed_at": "2012-08-27 15:19:59", "id": 6356679, "title": "Rewrite CC, LD, NM, AR, AS, RANLIB, OBJDUMP, and OBJCOPY instead of PATH", "url": "https://api.github.com/repos/ruby/ruby/issues/164", "created_at": "2012-08-21 17:22:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7909040", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2191441) (merged b036a6a7 into 8de500ce).\n", "created_at": "2012-08-21 17:32:35", "user": 1516820, "id": 7909040}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8059171", "text": "Close pull request because Yugui merged this change as git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@36828 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\n", "created_at": "2012-08-27 15:21:52", "user": 577684, "id": 8059171}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes [this bug](http://bugs.ruby-lang.org/issues/show/4156).\n", "labels": [], "number": 165, "updated_at": "2014-07-01 00:07:09", "user": 165531, "closed_at": "2012-11-19 03:06:51", "id": 6373241, "title": "Fix e2mmap version check.", "url": "https://api.github.com/repos/ruby/ruby/issues/165", "created_at": "2012-08-22 09:51:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7929575", "text": "This pull request [fails](http://travis-ci.org/ruby/ruby/builds/2198851) (merged a097b3ef into e48d99f0).\n", "created_at": "2012-08-22 09:53:12", "user": 1516820, "id": 7929575}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7930131", "text": "Thank you, please ignore this travis thing (it doesn'e know how to build 1.8.7).\n", "created_at": "2012-08-22 10:20:02", "user": 15377, "id": 7930131}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500103", "text": "Closing this, please refer to [Bug #4156 in redmine](http://bugs.ruby-lang.org/issues/4156)\n", "created_at": "2012-11-19 03:06:51", "user": 277819, "id": 10500103}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am teaching a Programming Fundamentals with Ruby class and as a class we decided to update some documentation that would make it easier for them, as beginners, to understand\n\nAlso submitted on Ruby Redmine\n", "labels": [], "number": 166, "updated_at": "2012-09-13 18:35:15", "user": 248182, "closed_at": "2012-09-13 18:35:15", "id": 6394359, "title": "update documentation for select and reject", "url": "https://api.github.com/repos/ruby/ruby/issues/166", "created_at": "2012-08-23 00:03:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7956332", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2207381) (merged 14c05517 into 5571c731).\n", "created_at": "2012-08-23 00:10:48", "user": 1516820, "id": 7956332}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7993010", "text": "how about `returns true` instead of `does not return false`?\n", "created_at": "2012-08-24 05:56:50", "user": 789513, "id": 7993010}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8004391", "text": "We thought about that but it's not true that it looks for, it's truthy,\nwhich might be more confusing\n\nSent from my iPhone\n\nOn Aug 24, 2012, at 1:56 AM, \"Dirk von Grünigen\" notifications@github.com\nwrote:\n\nhow about returns true instead of does not return false?\n\n—\nReply to this email directly or view it on\nGitHubhttps://github.com/ruby/ruby/pull/166#issuecomment-7993010.\n", "created_at": "2012-08-24 15:18:38", "user": 248182, "id": 8004391}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8016430", "text": "For Array#select, the changed documentation has the same truthiness problem, both `false` and `nil` will cause #select to omit the item but only `false` is mentioned. Perhaps \"true value\" instead of \"`true` value\"?  I would like to avoid excessive negatives as they can be difficult for non-native speakers to understand.\n\nI do like the change of \"is\" to \"returns\", definitely more clear.\n\nAlso, this patch restores HTML-style markup (`<i>ary</i>`) which makes the documentation harder to read when editing and reduces linkability (`<code>Enumerable#select</code>`), by writing just `Enumerable#select` ruby-doc.org readers can click through to the other definition.\n\nIf we can agree on better wording I can take care of the conversion from HTML-style markup to RDoc-style markup.\n\nI propose for #select (and the equivalent for #reject):\n\n> Returns an Array containing all elements of `enum` for which the block returns a true value.  See also Enumerable#select.\n> \n> If no block is given an Enumerator is returned instead.\n> \n> [Examples]\n\n\"a true value\" is used in several places in the documentation (as opposed to \"`true`\") to distinguish between \"any object except false or nil\" from just \"`true`\".  If you educate the users on the difference between the two the rest of the places it's used in the documentation should be easier to understand.\n", "created_at": "2012-08-24 22:16:38", "user": 9831, "id": 8016430}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8022829", "text": "@drbrain What do you think about `returns a truthy value` instead of `true value`? I know it's a little bit more cryptic but in my eyes also more clear than `true value` because the most people will associate that with the boolean value `true`.\n", "created_at": "2012-08-25 12:32:05", "user": 789513, "id": 8022829}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8024042", "text": "@drbrain I like `returns a true value` since it is consistent with other places in the documentation\n", "created_at": "2012-08-25 14:58:13", "user": 248182, "id": 8024042}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8024234", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2235187) (merged 2c1ceca4 into 5571c731).\n", "created_at": "2012-08-25 15:18:31", "user": 1516820, "id": 8024234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8024256", "text": "@jeffsaracco Why now not `true value` instead of `true`?\n", "created_at": "2012-08-25 15:20:56", "user": 789513, "id": 8024256}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8024293", "text": "@vongruenigen Thanks for the heads up, I got distracted when editing and forgot what I was supposed to change it to.\n", "created_at": "2012-08-25 15:24:59", "user": 248182, "id": 8024293}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8024409", "text": "This pull request [fails](http://travis-ci.org/ruby/ruby/builds/2235394) (merged af76190c into 5571c731).\n", "created_at": "2012-08-25 15:36:31", "user": 1516820, "id": 8024409}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8026059", "text": "I don't like \"truthy\" because non-native speakers may not understand it.  I like the current patch, I will commit it.\n", "created_at": "2012-08-25 18:29:39", "user": 9831, "id": 8026059}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8026727", "text": "@drbrain Good point, didn't notice that :)\n", "created_at": "2012-08-25 19:47:15", "user": 789513, "id": 8026727}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- -lbe is not required for linking\n- stack protector doesn't work for now because of the default gcc's bug\n- haiku build undefine SIGBUS, bud has SA_ONSTACK and USE_SIGALTSTACK\n", "labels": [], "number": 167, "updated_at": "2014-06-17 04:51:30", "user": 577684, "closed_at": "2012-08-23 02:59:46", "id": 6395184, "title": "Fixing Haiku build.", "url": "https://api.github.com/repos/ruby/ruby/issues/167", "created_at": "2012-08-23 01:12:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7957473", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2207996) (merged 3aa0d29b into 5571c731).\n", "created_at": "2012-08-23 01:21:07", "user": 1516820, "id": 7957473}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/7958744", "text": "Merged in r36791, thanks!\n", "created_at": "2012-08-23 02:59:46", "user": 13423, "id": 7958744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- configure.in: Fixing Haiku R1/alpha3 build with gcc-4.4.4.\n  - omit ANSI standard flags to compile socket extension where anonymous union\n    is required.\n  - remove redundant -be flags.\n", "labels": [], "number": 168, "updated_at": "2014-06-17 07:42:01", "user": 577684, "closed_at": "2012-08-29 00:26:47", "id": 6440578, "title": "Fix Haiku R1/alpha3 build", "url": "https://api.github.com/repos/ruby/ruby/issues/168", "created_at": "2012-08-24 18:13:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8010515", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2228642) (merged 281d8a19 into b29a0297).\n", "created_at": "2012-08-24 18:21:17", "user": 1516820, "id": 8010515}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8111787", "text": "Merged in r36839, thanks\n", "created_at": "2012-08-29 00:26:47", "user": 13423, "id": 8111787}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix for http://bugs.ruby-lang.org/issues/6903\n", "labels": [], "number": 169, "updated_at": "2014-06-18 00:50:11", "user": 48054, "closed_at": "2012-11-19 03:10:27", "id": 6463885, "title": "fix --enable-load-relative on systems with /lib64", "url": "https://api.github.com/repos/ruby/ruby/issues/169", "created_at": "2012-08-26 23:40:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8044287", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2245573) (merged 906ab0f6 into 8433e20f).\n", "created_at": "2012-08-26 23:49:47", "user": 1516820, "id": 8044287}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500150", "text": "This has been resolved, please refer to [Bug #6903 in redmine](http://bugs.ruby-lang.org/issues/6903)\n", "created_at": "2012-11-19 03:10:27", "user": 277819, "id": 10500150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix for http://bugs.ruby-lang.org/issues/6903\nsee also #169\n", "labels": [], "number": 170, "updated_at": "2014-06-29 02:34:59", "user": 48054, "closed_at": "2012-09-21 21:26:44", "id": 6463923, "title": "fix --enable-load-relative on systems with /lib64", "url": "https://api.github.com/repos/ruby/ruby/issues/170", "created_at": "2012-08-26 23:42:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For http://jira.codehaus.org/browse/JRUBY-6865 we discovered JRuby allows attributes to be named like \"foo?\" when passed to attr_accessor. A fix is going into JRuby 1.7.0.RC1, but there did not appear to be a test for invalid attr names in MRI.\n\nThis pull request adds a test. I was not exhaustive, but I covered a few key cases including the \"foo?\" form.\n", "labels": [], "number": 171, "updated_at": "2014-07-06 16:37:04", "user": 10135, "closed_at": "2012-08-27 18:00:17", "id": 6478095, "title": "Add test for invalid attribute names.", "url": "https://api.github.com/repos/ruby/ruby/issues/171", "created_at": "2012-08-27 16:35:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8061991", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2251792) (merged 788ba8ab into a5849245).\n", "created_at": "2012-08-27 16:45:07", "user": 1516820, "id": 8061991}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As it stands, it passes on the call to kill(2) which sends to everything\nin the process group of the caller.\n", "labels": [], "number": 172, "updated_at": "2013-09-27 05:20:00", "user": 476418, "closed_at": "2012-09-13 15:27:26", "id": 6515979, "title": "Catch Process.kill(sig, 0) and make sure we only kill ourselves", "url": "https://api.github.com/repos/ruby/ruby/issues/172", "created_at": "2012-08-29 00:25:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8111833", "text": "This pull request [fails](http://travis-ci.org/ruby/ruby/builds/2267475) (merged 5414c0c4 into 9871dd57).\n", "created_at": "2012-08-29 00:29:42", "user": 1516820, "id": 8111833}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112207", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2267614) (merged 90f3b34b into 9871dd57).\n", "created_at": "2012-08-29 00:53:10", "user": 1516820, "id": 8112207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112323", "text": "Why do we need to remove the ability to kill all processes in our process group?\n", "created_at": "2012-08-29 01:01:40", "user": 9831, "id": 8112323}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112472", "text": "Because the docs explicitly say that's not what it does?\n", "created_at": "2012-08-29 01:09:30", "user": 476418, "id": 8112472}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112495", "text": "``` c\n\n/*\n* call-seq:\n* Process.kill(signal, pid, ...) -> fixnum\n*\n* Sends the given signal to the specified process id(s), or to the\n* current process if _pid_ is zero.\n.... */\n```\n", "created_at": "2012-08-29 01:11:06", "user": 476418, "id": 8112495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112641", "text": "If you have another proposal then I'm happy to update the docs and implementation, I just think that the docs should represent the behaviour, this caught me out pretty badly last night and caused me rael problems.\n", "created_at": "2012-08-29 01:19:15", "user": 476418, "id": 8112641}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112729", "text": "The documentation should be updated to match the man page then.\n", "created_at": "2012-08-29 01:23:54", "user": 9831, "id": 8112729}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112745", "text": "Ok, I'll amend the PR.\n", "created_at": "2012-08-29 01:25:21", "user": 476418, "id": 8112745}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8112914", "text": "This pull request [fails](http://travis-ci.org/ruby/ruby/builds/2267816) (merged 89848eed into 9871dd57).\n", "created_at": "2012-08-29 01:36:32", "user": 1516820, "id": 8112914}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8154487", "text": "Not sure why the build failed, since this is now just a documentation fix.\n\nAny chance this could get merged? This can have pretty drastic implications.\n", "created_at": "2012-08-30 09:55:29", "user": 476418, "id": 8154487}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8154883", "text": "Sorry, forget thta travis thing.  The test script we use has race conditions somewhere.\n", "created_at": "2012-08-30 10:12:49", "user": 15377, "id": 8154883}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8412704", "text": "Any news on this? It's a pretty significant trap for young players.\n", "created_at": "2012-09-10 03:05:38", "user": 476418, "id": 8412704}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8429855", "text": "I haven't had time to commit it, but maybe @zzak will have time.\n\nNote that I haven't been back porting documentation to ruby 1.9.3, so the soonest this would be released is with ruby 2.0, expected in Spring, 2013 \n", "created_at": "2012-09-10 16:59:03", "user": 9831, "id": 8429855}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8532091", "text": "This was resolved by [r36962](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/36962)\n\nThank you for your contribution!\n", "created_at": "2012-09-13 15:25:47", "user": 277819, "id": 8532091}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8532127", "text": "@shyouhei Could you please close this? Or add me to github so that I can close it?\n", "created_at": "2012-09-13 15:26:57", "user": 277819, "id": 8532127}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8532139", "text": "Closed. Thanks for the response :)\n", "created_at": "2012-09-13 15:27:35", "user": 476418, "id": 8532139}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "At my day job we are doing some processing of an incoming IP address / host name in a Rails middleware and I noticed that the IPAddr class would always raise `ArgumentError` with only the error message giving any clue as to the cause. \n\nI needed to be able to programmatically determine to cause of the failure to determine how to procede. Matching against the error message was less than ideal so modifying the Exceptions in seemed to be the most logical course of action.\n\nWith new exceptions a developer can pragmatically determine the cause of the IPAddr failure in a more effective manor than checking the exception message.\n## Previously\n\n``` ruby\nbegin\n  ip = IPAddr.new(some_other_variable)\nrescue ArgumentError => e\n  # Can't programmatically determine cause of the failure\nend\n```\n## With Patch\n\n``` ruby\nbegin\n  ip = IPAddr.new(some_other_variable)\nrescue IPAddr::InvalidAddress => e\nrescue IPAddr::UnsupportedAddressFamily => e\nrescue IPAddr::UnsupportedAddressFamily => e\nrescue IPAddr::ZeroFilledNumber => e\n  # can use the exception to determine cause of the failure.\nend\n```\n", "labels": [], "number": 173, "updated_at": "2014-06-12 14:20:49", "user": 197226, "closed_at": "2012-08-31 07:32:16", "id": 6544314, "title": "Added meaningful exceptions to IPAddr", "url": "https://api.github.com/repos/ruby/ruby/issues/173", "created_at": "2012-08-30 03:23:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148418", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2279417) (merged 006aaa77 into 37cc18d5).\n", "created_at": "2012-08-30 03:32:12", "user": 1516820, "id": 8148418}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8148632", "text": "I like this change, but we need approval from @knu because he is [the maintainer](https://bugs.ruby-lang.org/projects/ruby/wiki/Maintainers).  @knu what do you think of this change?\n\nIt's annoying to inherit from ArgumentError, but makes sense for backwards compatibility. :+1:\n", "created_at": "2012-08-30 03:48:32", "user": 3124, "id": 8148632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8149845", "text": "I like the basics of the idea.  Here's my suggestions.\n- I'd like each error class to have a common suffix `Error`.\n- ...And maybe a common super class like `IPAddr::Error` (which would inherit `ArgumentError` for backwards compatibility).\n- I don't see much of a point in having `UnsupportedAddressFamily`, `InconsistentAddressFamily`,  and `UnspecifiedAddressFamily` separately.  What about just `AddressFamilyError` that represents these all?\n- `InvalidLength` would be better called `InvalidPrefixError`.\n- `ZeroFilledNumber` might not be worth being a separate class and could be merged into `InvalidIPv4`, or should at least be a subclass of that.\n", "created_at": "2012-08-30 05:38:56", "user": 10236, "id": 8149845}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8159252", "text": "@knu Thanks for the suggestions, they all make perfect sense. I try to implement these changes today.\n", "created_at": "2012-08-30 13:28:25", "user": 197226, "id": 8159252}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8165372", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2285352) (merged 3589191e into 37cc18d5).\n", "created_at": "2012-08-30 16:31:37", "user": 1516820, "id": 8165372}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8184194", "text": "Thanks.  On further consideration, I'm going to make the following changes.\n- When the address families mismatch in `mask!`, raise `InvalidPrefixError` instead of `AddressFamilyError`.\n- Merge `InvalidIPv4Error` and `InvalidIPv6Error` into `InvalidAddressError`, because you can't easily tell which version of IP address a given malformed IP address string was intended to be when `IPAddr.new` accepts both IPv4 and IPv6 addresses.  At least the current implementation is not really made for that.\n- Make `InvalidPrefixError` a subclass of `InvalidAddressError` because it is caused by a bad network address string.\n", "created_at": "2012-08-31 07:04:19", "user": 10236, "id": 8184194}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When array is used intensively as a queue (ie repeated `push`/`shift` calls), then its performance degrades very quickly with array's size (especially when almost every `shift` is followed be `push`), cause each `push` which is called after `shift` leads to allocation of new memory space and copying all items to.\n\nThis pull request fixes it in following way:\n- reuse shared array's storage when array is a single owner of shared array.\n- try to push items directly into shared array when array is a single owner of shared array\n- try to unshift items directly into shared array when array is a single owner (and allocate room for futher unshifts)\n", "labels": [], "number": 174, "updated_at": "2014-07-01 13:37:10", "user": 249427, "closed_at": "2012-11-19 03:18:43", "id": 6602190, "title": "Fix array behaviour when it is used as a queue", "url": "https://api.github.com/repos/ruby/ruby/issues/174", "created_at": "2012-09-02 12:21:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8221444", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2310413) (merged a98fa0f8 into 2c1939f4).\n", "created_at": "2012-09-02 12:29:24", "user": 1516820, "id": 8221444}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500260", "text": "Closing this, please refer to [Feature #7393 on redmine](http://bugs.ruby-lang.org/issues/7393)\n", "created_at": "2012-11-19 03:18:43", "user": 277819, "id": 10500260}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- process.c (rb_execarg_addopt, rb_execarg_run_options): add :uid and\n  :gid options.  [ruby-core:47414] [Feature #6975]\n", "labels": [], "number": 175, "updated_at": "2012-11-19 03:24:43", "user": 16700, "closed_at": "2012-11-19 03:24:43", "id": 6627963, "title": "process.c: uid gid exec options", "url": "https://api.github.com/repos/ruby/ruby/issues/175", "created_at": "2012-09-04 07:34:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8254894", "text": "This pull request [passes](http://travis-ci.org/ruby/ruby/builds/2328054) (merged bd83f3b9 into 4ef43fc0).\n", "created_at": "2012-09-04 07:42:37", "user": 1516820, "id": 8254894}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500319", "text": "This has been resolved by r37124, please refer to [Feature #6975 in redmine](http://bugs.ruby-lang.org/issues/6975)\n", "created_at": "2012-11-19 03:24:43", "user": 277819, "id": 10500319}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- internal.h (struct rb_classext_struct): move allocator function into\n  rb_classext_t from ordinary method table.  [ruby-dev:46121]\n  [Feature #6993]\n- object.c (rb_obj_alloc): call allocator function directly.\n- vm_method.c (rb_define_alloc_func, rb_undef_alloc_func)\n  (rb_get_alloc_func): use allocator function in rb_classext_t.\n", "labels": [], "number": 176, "updated_at": "2012-09-08 09:57:58", "user": 16700, "closed_at": "2012-09-08 09:57:58", "id": 6729913, "title": "internal.h: allocator function in rb_classext_t", "url": "https://api.github.com/repos/ruby/ruby/issues/176", "created_at": "2012-09-08 08:36:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 177, "updated_at": "2012-11-22 03:20:30", "user": 16700, "closed_at": "2012-11-22 03:20:30", "id": 6730193, "title": ".travis.yml: run test_thread.rb only.", "url": "https://api.github.com/repos/ruby/ruby/issues/177", "created_at": "2012-09-08 09:30:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500364", "text": "@nobu ping, should we close this?\n", "created_at": "2012-11-19 03:28:43", "user": 277819, "id": 10500364}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 178, "updated_at": "2014-06-17 16:41:29", "user": 577684, "closed_at": "2012-09-09 15:17:38", "id": 6743717, "title": "* process.c: exec() requires to be single threaded also on Haiku.", "url": "https://api.github.com/repos/ruby/ruby/issues/178", "created_at": "2012-09-09 13:51:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8404534", "text": "Merged in rr36940, thanks!\n", "created_at": "2012-09-09 15:17:38", "user": 13423, "id": 8404534}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems that tcmalloc and jemalloc suffers from difference from\nST_DEFAULT_PACKET_TABLE_SIZE and ST_DEFAULT_SECOND_TABLE_SIZE on 64bit\nplatform, cause 18_8 and 19_8 fall into the different allocation buckets.\nIt is not an issue on 32bit platform though.\n\nDifference in web application could reach 8% (tested with backported patch on ruby 1.9.3 using Redmine)\n", "labels": [], "number": 179, "updated_at": "2012-09-11 08:18:47", "user": 249427, "closed_at": "2012-09-11 08:18:47", "id": 6783142, "title": "* st.c: set packed size same as second table size", "url": "https://api.github.com/repos/ruby/ruby/issues/179", "created_at": "2012-09-11 07:32:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8450975", "text": "No, I was wrong\n", "created_at": "2012-09-11 08:18:47", "user": 249427, "id": 8450975}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Originally, 'size in bytes' and 'VALUE counts' are compared in this check logic.\nThis is apparently wrong. Both side of the equation must be consistent from the viewpoint of unit.\n", "labels": [], "number": 180, "updated_at": "2012-09-12 17:06:35", "user": 577684, "closed_at": "2012-09-12 15:56:16", "id": 6794685, "title": "* gc.c: Fix stack overflow calculation in stack_check()", "url": "https://api.github.com/repos/ruby/ruby/issues/180", "created_at": "2012-09-11 16:44:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8499135", "text": "`STACK_LENGTH` is count in `VALUE`s, because `STACK_START` and `STACK_END` are pointers to `VALUE`.\n", "created_at": "2012-09-12 15:56:16", "user": 16700, "id": 8499135}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8501991", "text": "Oops. I see.\nThank you for pointing it out.\n", "created_at": "2012-09-12 17:06:35", "user": 577684, "id": 8501991}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 181, "updated_at": "2012-09-21 21:25:43", "user": 577684, "closed_at": "2012-09-21 21:25:43", "id": 6823593, "title": "* configure.in: Don't use PIE on Haiku because loader support is not enough", "url": "https://api.github.com/repos/ruby/ruby/issues/181", "created_at": "2012-09-12 16:12:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8499755", "text": "With this patch, I finally succeed to finish make all & install in Haiku!!\n", "created_at": "2012-09-12 16:13:22", "user": 577684, "id": 8499755}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- thread.c (timer_thread_function): fixed a race against thread\n  context switch.\n- thread.c (clear_timer_interrupt): new helper function.\n", "labels": [], "number": 182, "updated_at": "2014-07-17 02:19:39", "user": 82712, "closed_at": "2012-09-22 00:56:42", "id": 6870339, "title": "Fixed patch for [Bug #4911]", "url": "https://api.github.com/repos/ruby/ruby/issues/182", "created_at": "2012-09-14 08:33:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Style changes and grammar fixes to ruby man page. Deleted a couple unnecessary commas, turned an awkward fragment into a parenthetical note, etc.\n", "labels": [], "number": 183, "updated_at": "2012-11-15 02:45:25", "user": 1048210, "closed_at": "2012-11-15 02:45:25", "id": 6901354, "title": "Grammar edits for man page", "url": "https://api.github.com/repos/ruby/ruby/issues/183", "created_at": "2012-09-16 07:09:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8593115", "text": "/cc @drbrain \n", "created_at": "2012-09-16 08:34:19", "user": 3124, "id": 8593115}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10395663", "text": "Fixed by [zzak:r37657](http://mla.n-z.jp/~w3ml/w3ml.cgi/ruby-changes/msg/25600).\n\n@michael-endsley Thank you for your contribution to ruby!\n", "created_at": "2012-11-15 02:45:25", "user": 277819, "id": 10395663}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nNot a very useful pull request, just examples on the documentation.\n\nHave a nice day.\n", "labels": [], "number": 184, "updated_at": "2012-09-20 17:42:58", "user": 354185, "closed_at": "2012-09-19 22:25:14", "id": 6958478, "title": "* complex.c : few improvement on the documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/184", "created_at": "2012-09-18 16:56:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8736086", "text": "Adding examples is always welcome, but I fear some may be redundant.\n- Most Complex operators accept a Numeric argument, which obviously means any of Float, Integer or Rational works.\n  So I think one example using integers is enough.\n- I'm not aware of first/last member terminology (rather real/imaginary part), and the semantic should be clear once somebody realizes adding an Integer is adding a Real, so a Complex whose imaginary part is 0. So I think it's best not to mention anything about \"members\" or \"parts\" there, because it's just the mathematical definition.\n\nrobin850 and zzak: I'm very happy to see so much documentation efforts, but I'd advise to check more in details the domain vocabulary and what's the idea behind the API.\n", "created_at": "2012-09-20 16:26:59", "user": 168854, "id": 8736086}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8739031", "text": "@eregon : true ! I will open a new pull request tomorrow with fixes with your proposal. Thanks ! :)\n", "created_at": "2012-09-20 17:42:58", "user": 354185, "id": 8739031}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 185, "updated_at": "2014-06-14 20:38:17", "user": 16700, "closed_at": "2012-11-19 03:31:28", "id": 6986766, "title": "Mkmf with space", "url": "https://api.github.com/repos/ruby/ruby/issues/185", "created_at": "2012-09-19 16:36:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499204", "text": "Hi, could you add some more explanation / description of this patch? It looks like this is to escape the paths in the mkmf makefiles. We've gotten a related bug report in mysql2 about a path with parentheses. It'd be great if you could handle that scenario as well. Hope it gets merged, thank you!\n", "created_at": "2012-11-19 01:53:52", "user": 39406, "id": 10499204}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499611", "text": "This is no longer relevant as an alternate solution has been merged already. \n", "created_at": "2012-11-19 02:26:24", "user": 4182, "id": 10499611}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10499638", "text": "@luislavena So can we close this then? Can you link to the associated revision or redmine ticket?\n", "created_at": "2012-11-19 02:29:00", "user": 277819, "id": 10499638}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500400", "text": "@luislavena Nevermind, I found it.\n\nClosing this, please refer to [Bug #7036 in redmine](http://bugs.ruby-lang.org/issues/7036)\n", "created_at": "2012-11-19 03:31:28", "user": 277819, "id": 10500400}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10502601", "text": "Awesome, thanks everyone!\n", "created_at": "2012-11-19 06:35:11", "user": 39406, "id": 10502601}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In trunk the Enumerable `#find` method `ifnone` parameter has to be callable or `nil`.  I found that sometimes I want to return a simple value without wrapping it in a proc.  This pull request adds support for non-callable defaults when no items match.\n\n``` ruby\na = [1, 2, 3]\n\n#The current behavior\na.find(proc { :foo }) { |x| x > 3 }\n=> :foo\n\n#Possible with my branch\na.find(0) { |x| x > 3 }\n=> 0\n```\n", "labels": [], "number": 186, "updated_at": "2014-06-12 19:51:43", "user": 9238, "closed_at": "2012-11-19 03:37:11", "id": 7032547, "title": "enum #find ifnone parameter can now be non-callable", "url": "https://api.github.com/repos/ruby/ruby/issues/186", "created_at": "2012-09-21 04:21:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/8806461", "text": "@nobu Let me know if that was not what you were suggesting. I am new to editing ruby :)\n", "created_at": "2012-09-24 03:12:03", "user": 9238, "id": 8806461}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9180042", "text": "`rb_check_funcall()` calls the method and returns the result if it is callable, and returns `Qundef` if the method is not defined.\n\n```\nVALUE result = rb_check_funcall(...);\nif (result != Qundef) return result;\nreturn ifnone;\n```\n", "created_at": "2012-10-05 15:50:08", "user": 16700, "id": 9180042}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9180611", "text": "Thanks @nobu.  I have implemented your approach.\n", "created_at": "2012-10-05 16:06:09", "user": 9238, "id": 9180611}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500469", "text": "Closing this, please refer to [Feature #7394 in redmine](http://bugs.ruby-lang.org/issues/7394)\n", "created_at": "2012-11-19 03:37:11", "user": 277819, "id": 10500469}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "By definition, a prime number can be a _positive_ integer greater than 1.\n\nhttp://mathworld.wolfram.com/PrimeNumber.html\n", "labels": [], "number": 187, "updated_at": "2014-06-19 10:36:02", "user": 38597, "closed_at": "2012-11-19 03:40:39", "id": 7040246, "title": "Negative numbers can't be primes by definition.", "url": "https://api.github.com/repos/ruby/ruby/issues/187", "created_at": "2012-09-21 13:02:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9017895", "text": "/cc @yugui\n", "created_at": "2012-09-30 20:59:17", "user": 3124, "id": 9017895}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9789554", "text": "@ikataitsev there is an interesting note about negative prime numbers - http://primes.utm.edu/notes/faq/negative_primes.html\nSo current code makes sense actually.\n", "created_at": "2012-10-25 18:56:41", "user": 200500, "id": 9789554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9820840", "text": "Prime numbers can't be negative but prime elements can. There are complex numbers ;)\n", "created_at": "2012-10-26 17:35:16", "user": 1093324, "id": 9820840}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500516", "text": "Closing this, please refer to [Bug #7395 in redmine](http://bugs.ruby-lang.org/issues/7395)\n", "created_at": "2012-11-19 03:40:39", "user": 277819, "id": 10500516}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nThis pull request is just a fix proposed in comments of #184.\n\nI allow myself to ping @eregon and @zzak for the review or other proposal.\n\nHave a nice day.\n", "labels": [], "number": 188, "updated_at": "2014-07-22 23:56:59", "user": 354185, "closed_at": "2012-09-22 17:39:13", "id": 7058797, "title": "* complex.c : fixes for 7c4d046", "url": "https://api.github.com/repos/ruby/ruby/issues/188", "created_at": "2012-09-22 09:02:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\nrequire 'open-uri'\n\nutl = \"http://www.grupogonzaga.com.br/tabid/2076/ref/-Resid%C3%AAncia-Curitiba-Tatuquara-1-quarto/fic/875756.aspx\" \no = open(url)\n\n#OpenURI::HTTPError: 301 Moved Permanently (Invalid Location URI)\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:342:in `rescue in open_http'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:339:in `open_http'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:775:in `buffer_open'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:203:in `block in open_loop'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:201:in `catch'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:201:in `open_loop'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:146:in `open_uri'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:677:in `open'\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/open-uri.rb:33:in `open'\n#   from (irb):68\n#   from /usr/local/rvm/rubies/ruby-1.9.3-p194/bin/irb:16:in `<main>'\n```\n\nbecouse this url returns a redirect with improper encoding:\n\n``` ruby\nresp = Net::HTTP.get_response(URI.encode(url))\nresp.header['location']\n# \"http://www.grupogonzaga.com.br/Alugar/Ficha-do-im\\xC3\\xB3vel/fic/875756.aspx?ref=-Resid\\xC3\\xAAncia-Curitiba-Tatuquara-1-quarto\"\n```\n\nNote the \\xC3\\xB3 bad encoded location return.\n\nAdded URI.encode to header['location'] on open-uri module.\n", "labels": [], "number": 189, "updated_at": "2014-06-30 09:56:04", "user": 503670, "closed_at": "2012-11-19 03:45:04", "id": 7248968, "title": "Some bad sites gives in location header URL without proper encoding", "url": "https://api.github.com/repos/ruby/ruby/issues/189", "created_at": "2012-09-30 20:56:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500566", "text": "Closing this, please refer to [Feature #7396 in redmine](http://bugs.ruby-lang.org/issues/7396)\n", "created_at": "2012-11-19 03:45:04", "user": 277819, "id": 10500566}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There did not appear to be any tests for initialize_clone/initialize_dup in MRI's suite.\n", "labels": [], "number": 190, "updated_at": "2014-06-18 13:31:38", "user": 10135, "closed_at": "2012-10-05 16:22:21", "id": 7382323, "title": "Add test for initialize_clone/initialize_dup behavior.", "url": "https://api.github.com/repos/ruby/ruby/issues/190", "created_at": "2012-10-05 16:00:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9181154", "text": "Thanks @headius.  This is merged in r37100\n", "created_at": "2012-10-05 16:22:21", "user": 3124, "id": 9181154}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes the bug which I reported yesterday at: http://bugs.ruby-lang.org/issues/7135\n\nI was having a problem with incorrect values yielded by String#codepoints, because the frozen string copy which it uses internally was being freed by the GC. I noticed that very similar code is used in String#lines and String#chars, so I added RB_GC_GUARD to those also to make sure that similar problems do not happen to anyone when using those methods.\n", "labels": [], "number": 191, "updated_at": "2014-06-23 18:07:46", "user": 1067359, "closed_at": "2012-10-11 14:18:39", "id": 7506204, "title": "Use RB_GC_GUARD to prevent GC from freeing String copies used by iterators", "url": "https://api.github.com/repos/ruby/ruby/issues/191", "created_at": "2012-10-11 08:18:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9332170", "text": "Sorry, one more thing: this bug occurs on both Ruby 1.9.2 and 1.9.3. I have confirmed that this patch can be applied cleanly to both v1_9_2_381 and v1_9_3_195. I recommend that you cherry-pick it onto both the 1.9.2 and 1.9.3 maintenance branches (so it will be included in future bugfix releases).\n", "created_at": "2012-10-11 08:24:06", "user": 1067359, "id": 9332170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9341488", "text": "RB_GC_GUARD() before RSTRING_PTR/LEN can be optimized out also.\n", "created_at": "2012-10-11 14:18:35", "user": 16700, "id": 9341488}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9343080", "text": "OK... let me try again.\n", "created_at": "2012-10-11 14:59:54", "user": 1067359, "id": 9343080}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes the following bug: http://bugs.ruby-lang.org/issues/7135\n\nAlthough the problem I encountered was from String#codepoints, String#chars and String#lines are implemented in a similar way, and it looks like the same problem could potentially affect them too. So this patch includes \"preemptive\" fixes for those 2 as well.\n\nThe bug affects Ruby 1.9.2, 1.9.3, and 2.0. I've checked that the patch applies cleanly to both v1_9_2_381 and v1_9_3_195. I recommend you cherry-pick it onto both the 1.9.2 and 1.9.3 maintenance branches.\n", "labels": [], "number": 192, "updated_at": "2012-11-19 03:45:50", "user": 1067359, "closed_at": "2012-11-19 03:45:50", "id": 7524264, "title": "Use RB_GC_GUARD to prevent GC from freeing String copies used by iterators", "url": "https://api.github.com/repos/ruby/ruby/issues/192", "created_at": "2012-10-11 19:40:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10014848", "text": "This was merged: http://bugs.ruby-lang.org/issues/7135#note-21\n", "created_at": "2012-11-02 13:51:46", "user": 199, "id": 10014848}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500573", "text": "I'm closing this, it's already been fixed. Please refer to #7135.\n", "created_at": "2012-11-19 03:45:50", "user": 277819, "id": 10500573}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My initial problem was that I couldn't specify \"1:*\" for the range to pull all of the messages from the selected mailbox. After I could retrieve them all, I encountered a few bugs parsing the emails in my inbox.\n\nI originally patched the 1.9.3 branch, and have made a separate patch for the trunk branch. This is the 1.9.3 branch, I will make a separate pull request for the trunk.\n", "labels": [], "number": 193, "updated_at": "2014-06-22 09:02:48", "user": 498451, "closed_at": "2012-11-19 03:46:56", "id": 7532047, "title": "IMAP Speed Improvements for 1.9.3 branch", "url": "https://api.github.com/repos/ruby/ruby/issues/193", "created_at": "2012-10-12 01:32:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364169", "text": "This issue should be for @shugo, but I can't seem to assign it to him.\n", "created_at": "2012-10-12 01:37:30", "user": 3124, "id": 9364169}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364336", "text": "Could you file a ticket for trunk at bugs.ruby-lang.org?\n", "created_at": "2012-10-12 01:49:45", "user": 34552, "id": 9364336}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364565", "text": "I can definitely file a ticket for trunk. This is kind of addressing a few issues at once; should I just make a single ticket for all of them, or should I make a separate ticket for each?\n", "created_at": "2012-10-12 02:05:47", "user": 498451, "id": 9364565}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364692", "text": "I prefer a separate ticket for each feature.\n", "created_at": "2012-10-12 02:16:58", "user": 34552, "id": 9364692}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364905", "text": "http://bugs.ruby-lang.org/issues/7145\nhttp://bugs.ruby-lang.org/issues/7146\nhttp://bugs.ruby-lang.org/issues/7147\n", "created_at": "2012-10-12 02:32:23", "user": 498451, "id": 9364905}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500584", "text": "I'm closing this please refer to the following tickets in redmine: #7145, #7146 and #7147\n", "created_at": "2012-11-19 03:46:56", "user": 277819, "id": 10500584}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My initial problem was that I couldn't specify \"1:*\" for the range to pull all of the messages from the selected mailbox. After I could retrieve them all, I encountered a few bugs parsing the emails in my inbox.\n\nI originally patched the 1.9.3 branch, and have made a separate patch for the trunk branch. This is the trunk version of the patch.\n", "labels": [], "number": 194, "updated_at": "2014-06-21 20:42:52", "user": 498451, "closed_at": "2012-10-13 03:42:39", "id": 7532408, "title": "IMAP Speed Improvements for Trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/194", "created_at": "2012-10-12 02:04:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9364918", "text": "http://bugs.ruby-lang.org/issues/7145\nhttp://bugs.ruby-lang.org/issues/7146\nhttp://bugs.ruby-lang.org/issues/7147\n", "created_at": "2012-10-12 02:33:34", "user": 498451, "id": 9364918}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9400576", "text": "Awwww crap did I just break this? I'm still somewhat new to GitHub, branches, and not messing stuff up :). I'll try to fix this.\n", "created_at": "2012-10-13 03:48:51", "user": 498451, "id": 9400576}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a number of places where literal, non-dynamic strings are used as the first argument for constant and instance variable get, set, and defined? methods. This reduces object overhead in all cases.\n\nNotable fixes:\n- Setting @original_filename and @content_type in read_multipart (cgi/core.rb). This is called for every multipart read.\n- Setting @uri and @ref in DrbObject.new_with (drb/drb.rb). Called for every \"with\" instantiation of a DrbObject.\n- Setting BINDING_QUEUE in IRB::Workspace#initialize (irb/workspace.rb). Called for every new IRB workspace.\n- Getting @mon_mutex in ConditionVariable#wait (monitor.rb). Called for every #wait. This fix makes the method require zero object allocation (other than imposed by the runtime).\n\nThe other fixes are rarely called, but fixed for consistency.\n\nmake test-all passes the same with or without this patch.\n", "labels": [], "number": 195, "updated_at": "2014-07-20 14:04:37", "user": 10135, "closed_at": "2012-11-16 16:57:13", "id": 7554085, "title": "Use symbols instead of strings for {const_,instance_variable_}{get,set}.", "url": "https://api.github.com/repos/ruby/ruby/issues/195", "created_at": "2012-10-12 21:00:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10453661", "text": "Committed as r37688.\n\nThanks for the PR.\n", "created_at": "2012-11-16 16:57:12", "user": 33770, "id": 10453661}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10453693", "text": "I'm sorry, I should have added 'patch by Charles Nutter' to the commit log but I forgot that although git can track authors, svn does not.\n", "created_at": "2012-11-16 16:58:04", "user": 33770, "id": 10453693}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I made a pull request for the first half of this yesterday, and then totally messed it up today :).\n\nThis pull request addresses: \n- https://bugs.ruby-lang.org/issues/7145\n- https://bugs.ruby-lang.org/issues/7146\n- https://bugs.ruby-lang.org/issues/7147\n- https://bugs.ruby-lang.org/issues/7153\n", "labels": [], "number": 196, "updated_at": "2014-07-08 03:41:27", "user": 498451, "closed_at": "2012-11-19 03:47:54", "id": 7559238, "title": "IMAP: Multiple bugs", "url": "https://api.github.com/repos/ruby/ruby/issues/196", "created_at": "2012-10-13 04:23:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500596", "text": "I'm closing this, please refer to the following tickets: #7145, #7146, #7147, #7153\n", "created_at": "2012-11-19 03:47:54", "user": 277819, "id": 10500596}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 197, "updated_at": "2012-10-19 18:37:14", "user": 795488, "closed_at": "2012-10-19 18:37:14", "id": 7563271, "title": "Make readme to actually be parsed with RDoc", "url": "https://api.github.com/repos/ruby/ruby/issues/197", "created_at": "2012-10-13 15:44:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9611908", "text": "The README is not for github, but for newbies.\n\nSee: http://bugs.ruby-lang.org/issues/6388#note-8\n", "created_at": "2012-10-19 18:37:14", "user": 9831, "id": 9611908}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`last-command-char` is long obsolete and recently was removed in GNU Emacs trunk, which broke \"ruby-electric.el\".\n\nFrom emacs documentation:\n\n```\nlast-command-char is a variable defined in `subr.el'.\n\n  This variable is an alias for `last-command-event'.\n  This variable is obsolete since at least 19.34;\n  use `last-command-event' instead.\n\nDocumentation:\nLast input event that was part of a command.\n```\n\nThis patch simply replaces uses of `last-command-char` with `last-command-event`.\n", "labels": [], "number": 198, "updated_at": "2014-06-13 21:49:27", "user": 119771, "closed_at": "2012-10-23 05:25:00", "id": 7682863, "title": "ruby-electric.el: using variable `last-command-event' instead of obsolete `last-command-char'", "url": "https://api.github.com/repos/ruby/ruby/issues/198", "created_at": "2012-10-18 10:57:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15990886", "text": "What's the status? In ruby-mode, I can't insert a curly brace character to do string interpolation, because ruby-electric-brace fails with:\n\n```\nSymbol's value as variable is void: last-command-char\n```\n\nSo I've temporarily turned ruby-electric-brace off in my .emacs.\n\nhttps://github.com/mcandre/dotfiles/blob/master/emacs#L188\n", "created_at": "2013-04-06 04:51:37", "user": 5316, "id": 15990886}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15991176", "text": "Patch is merged into SVN, update your ruby-electric.el.\n", "created_at": "2013-04-06 05:30:16", "user": 119771, "id": 15991176}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16112242", "text": "Works for me!\n", "created_at": "2013-04-09 13:27:23", "user": 5316, "id": 16112242}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is bad form to not set the content-length header on empty post requests. This will most likely end with a 411 response from the server. Sometimes post requests will be empty e.g. the initial request during a challenge-response authentication scenario.\n", "labels": [], "number": 199, "updated_at": "2014-06-22 19:12:52", "user": 755230, "closed_at": "2012-10-21 20:04:07", "id": 7752013, "title": "Ruby 1 9 3", "url": "https://api.github.com/repos/ruby/ruby/issues/199", "created_at": "2012-10-21 20:02:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is bad form to not set the content-length header on empty post requests. This will most likely end with a 411 response from the server. Sometimes post requests will be empty e.g. the initial request during a challenge-response authentication scenario.\n", "labels": [], "number": 200, "updated_at": "2012-10-22 03:36:10", "user": 755230, "closed_at": "2012-10-22 03:36:10", "id": 7752063, "title": "set content-length to zero on empty post requests", "url": "https://api.github.com/repos/ruby/ruby/issues/200", "created_at": "2012-10-21 20:07:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9650846", "text": "Can you patch against trunk? The 1.9.3 branch is not under development.\n\nA test would be nice, too, but I can probably write one for you.\n", "created_at": "2012-10-22 02:11:25", "user": 9831, "id": 9650846}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9651536", "text": "Sure, I'll patch that against trunk, I've already added a test.\n", "created_at": "2012-10-22 03:16:01", "user": 755230, "id": 9651536}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9651793", "text": "I'm closing this and resubmitting a new pull request.\n", "created_at": "2012-10-22 03:36:06", "user": 755230, "id": 9651793}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is bad form to not set the content-length header on empty post requests. This will most likely end with a 411 response from the server. Sometimes post requests will be empty e.g. the initial request during a challenge-response authentication scenario.\n\nI've also included a test. It checks to see that webrick does not return the 411 response code. This is a resubmitted pull request. I initially dev'd on the 1.9.3 branch pull request #200. Sorry about that - still trying to figure out the workflow around here. \n", "labels": [], "number": 201, "updated_at": "2014-06-16 13:28:35", "user": 755230, "closed_at": "2012-12-23 20:03:35", "id": 7756101, "title": "set content-length to zero on empty post requests", "url": "https://api.github.com/repos/ruby/ruby/issues/201", "created_at": "2012-10-22 03:43:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10031446", "text": "When you're done you should create a ticket on bugs.ruby-lang.org that references this pull request.  You don't need to submit the patch.\n", "created_at": "2012-11-02 21:50:41", "user": 9831, "id": 10031446}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500650", "text": "@gregors ping! Are you planning on writing this patch?\n", "created_at": "2012-11-19 03:52:12", "user": 277819, "id": 10500650}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10793508", "text": "Sorry holidays got in the way. Yes I am but I'm having trouble writing a proper test. After chatting with drbrain I thought that instead of looking at the http response code, I would check the headers in the request, but I can't seem to figure out how to do that. Any pointers anyone could give me?\n", "created_at": "2012-11-28 07:50:21", "user": 755230, "id": 10793508}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10865893", "text": "@gregors You're likely to receive more feedback if you open a ticket on bugs.ruby-lang.org, since that is preferred way and most committers don't check github.\n", "created_at": "2012-11-29 20:55:07", "user": 277819, "id": 10865893}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "mkmf doesn't create HAVE_X definitions, so HAVE_RL_PROMPT_START_IGNORE\nand HAVE_RL_PROMPT_END_IGNORE don't actually get defined by\next/readline/extconf.rb. Instead, we should detect for\nRL_PROMPT_START_IGNORE and RL_PROMPT_END_IGNORE directly.\n", "labels": [], "number": 202, "updated_at": "2014-06-23 22:29:25", "user": 84783, "closed_at": "2012-11-19 03:57:28", "id": 7787572, "title": "Fix detection of RL_PROMPT_*_IGNORE macros.", "url": "https://api.github.com/repos/ruby/ruby/issues/202", "created_at": "2012-10-23 04:44:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10213355", "text": "Any chance this could be merged in to trunk? It would be nice to have colourized prompts available in irb without having to apply custom patches.\n", "created_at": "2012-11-09 02:12:07", "user": 84783, "id": 10213355}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500708", "text": "I'm closing this, please refer to [Bug #7397 in redmine](http://bugs.ruby-lang.org/issues/7397)\n", "created_at": "2012-11-19 03:57:28", "user": 277819, "id": 10500708}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 203, "updated_at": "2012-10-23 17:48:43", "user": 10135, "closed_at": "2012-10-23 17:46:50", "id": 7804682, "title": "Add test for instance_exec receiving a curried proc.", "url": "https://api.github.com/repos/ruby/ruby/issues/203", "created_at": "2012-10-23 17:41:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9711106", "text": "Merged in r37303\n", "created_at": "2012-10-23 17:46:50", "user": 3124, "id": 9711106}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "SSLSocket#sysread can return fewer bytes than you request. This test does client reads and writes and server reads and writes concurrently, which means on a parallel-threaded implementation like JRuby there's a chance the client side will see partial data come from sysread.\n\nMy change here ensures that the sysread has read everything written before doing comparisons, allowing for partial sysread results.\n", "labels": [], "number": 204, "updated_at": "2014-06-16 21:05:56", "user": 10135, "closed_at": "2012-11-19 04:04:34", "id": 7844088, "title": "Modify TestSSL#test_read_and_write to handle partial sysreads.", "url": "https://api.github.com/repos/ruby/ruby/issues/204", "created_at": "2012-10-24 22:52:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/9764451", "text": "Added an additional tweak for the readpartial test in test_pair, which also assumes reads will always immediately return the complete result.\n", "created_at": "2012-10-25 02:53:48", "user": 10135, "id": 9764451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500786", "text": "Closing this, please refer to [Bug #7398 in redmine](http://bugs.ruby-lang.org/issues/7398)\n", "created_at": "2012-11-19 04:04:34", "user": 277819, "id": 10500786}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add PKCS7 tests.\n- PKCS7#type=\n- PKCS7#add_data\n- PKCS7 encoded content\n\nFrom JRuby pull requests: https://github.com/jruby/jruby/pull/355 and https://github.com/jruby/jruby/pull/356\n", "labels": [], "number": 205, "updated_at": "2014-06-15 08:09:33", "user": 10135, "closed_at": "2012-11-19 04:08:21", "id": 7907853, "title": "Add tests for PKCS7#type= and add_data.", "url": "https://api.github.com/repos/ruby/ruby/issues/205", "created_at": "2012-10-27 02:36:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500838", "text": "Closing this, please refer to [Feature #7399 on redmine](http://bugs.ruby-lang.org/issues/7399)\n", "created_at": "2012-11-19 04:08:21", "user": 277819, "id": 10500838}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These are tests we added to jruby-openssl over the years. They did not have equivalents in Ruby's test suite, so we are hoping to contribute them back to help build up MRI's suite as a common suite.\n\nSome caveats:\n- Not all of these pass in MRI's OpenSSL impl. Many differences appear to be minor, but I need help sorting out what's wrong in MRI or JRuby or minor enough that the test just needs to be patched.\n- There are several tests that reference bug numbers from JRuby. We would like to contribute these tests, but we would ideally not lose the JRuby bug numbers for future reference.\n- This commit also adds fixtures for the certificate tests, using some self-generated certs, keys, etc.\n\nI am standing by to work with ruby-core on getting these tests incorporated.\n", "labels": [], "number": 206, "updated_at": "2014-06-29 16:31:53", "user": 10135, "closed_at": "2012-11-19 04:10:50", "id": 7908750, "title": "Incorporate OpenSSL tests from JRuby.", "url": "https://api.github.com/repos/ruby/ruby/issues/206", "created_at": "2012-10-27 06:01:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500869", "text": "I'm closing this, please refer to [Feature #7400 in redmine](http://bugs.ruby-lang.org/issues/7400)\n", "created_at": "2012-11-19 04:10:50", "user": 277819, "id": 10500869}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I was suprised that `Set.new.join` gives me a NoMethodError. I have attached a small patch that adds a #join method to Set, which is a shortcut for `to_a.join`.\n\nI've also opened an issue at [bugs.ruby-lang.org](http://bugs.ruby-lang.org/issues/7226#change-31829).\n", "labels": [], "number": 207, "updated_at": "2012-11-19 04:11:29", "user": 139536, "closed_at": "2012-11-19 04:11:29", "id": 7917553, "title": "Added #join method as a shortcut for to_a.join", "url": "https://api.github.com/repos/ruby/ruby/issues/207", "created_at": "2012-10-28 07:42:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500875", "text": "I'm closing this, please refer to [Feature #7226 in redmine](http://bugs.ruby-lang.org/issues/7226)\n", "created_at": "2012-11-19 04:11:29", "user": 277819, "id": 10500875}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 208, "updated_at": "2014-07-10 23:01:25", "user": 86445, "closed_at": "2012-11-05 01:48:24", "id": 8074648, "title": "Correct Hash#delete documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/208", "created_at": "2012-11-02 23:46:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10035652", "text": "This was merged in [r37435](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/37435)\n\nThank you for your contribution!\n", "created_at": "2012-11-03 02:46:20", "user": 277819, "id": 10035652}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed incorrect example.  \":path>\" error was introduced in 030e887\n", "labels": [], "number": 209, "updated_at": "2012-11-05 03:43:30", "user": 709364, "closed_at": "2012-11-05 01:48:18", "id": 8081935, "title": "fix incorrect example which had been caused by typo", "url": "https://api.github.com/repos/ruby/ruby/issues/209", "created_at": "2012-11-03 18:56:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10058282", "text": "@cczona This was resolved by [r37472](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/37472)\n\nThank you for your contribution!\n", "created_at": "2012-11-05 01:20:49", "user": 277819, "id": 10058282}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10059187", "text": "Would you elaborate?  r37472 points to my commit.\n\n  lib/uri/http.rb (URI::HTTP.build): Fix example\n  Patch by Carina C. Zona\n  [Fixes #209 Github]\n", "created_at": "2012-11-05 02:38:22", "user": 709364, "id": 10059187}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10059260", "text": "@cczona I committed your patch to the subversion repository.\n\nWe only use github as a mirror.\n\nThere is a little more information on the [wiki](https://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute)\n\nEdit: whoops, I meant github was the mirror.\n", "created_at": "2012-11-05 02:45:04", "user": 277819, "id": 10059260}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10059859", "text": "Gotcha.  Thanks!\n", "created_at": "2012-11-05 03:41:42", "user": 709364, "id": 10059859}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Made fixes for spelling and grammar, changed to point people to Github rather than RAA / Rubyforge. \n\nAlso updated dates. Is there a system for doing this (e.g. every major release) or do they just get updated 'sometimes'?\n", "labels": [], "number": 210, "updated_at": "2014-06-22 09:08:08", "user": 42500, "closed_at": "2012-11-15 04:34:51", "id": 8160091, "title": "Fixes and updates for the man pages", "url": "https://api.github.com/repos/ruby/ruby/issues/210", "created_at": "2012-11-07 03:14:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10397298", "text": "Fixed by [zzak:r37658](http://mla.n-z.jp/?ruby-changes=25601).\n\n@gunn Thank you for your contribution to ruby!\n", "created_at": "2012-11-15 04:34:50", "user": 277819, "id": 10397298}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 211, "updated_at": "2014-06-16 13:28:32", "user": 14514, "closed_at": "2012-11-07 06:50:31", "id": 8161921, "title": "Fix minor typo in WEBrick docs", "url": "https://api.github.com/repos/ruby/ruby/issues/211", "created_at": "2012-11-07 06:36:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10139347", "text": "Merged by r37536.Thanks.\n", "created_at": "2012-11-07 06:50:31", "user": 37002, "id": 10139347}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Should be pretty straightforward.\n", "labels": [], "number": 212, "updated_at": "2014-07-06 22:02:46", "user": 830218, "closed_at": "2012-11-13 03:30:15", "id": 8311606, "title": "Changed deck to deque", "url": "https://api.github.com/repos/ruby/ruby/issues/212", "created_at": "2012-11-13 03:24:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10314439", "text": "@andrewmains12 Could you rebase this please?\n", "created_at": "2012-11-13 03:27:01", "user": 277819, "id": 10314439}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10314510", "text": "@zzak I am incredibly sorry; meant to make a pull request to one of my collaborator's repos. Rookie mistake, sorry for troubling you.\n", "created_at": "2012-11-13 03:31:00", "user": 830218, "id": 10314510}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pathname#cleanpath is a purely lexical cleanup of a unix path, to remove\nuseless syntax and return an equivalent path. However, the current default\nalgorithm makes choices that can return semantically different paths.\n\nThis patch sets the default algorithm to the safe alternative, guaranteeing the\nreturn of a semantically identical path. The unsafe/aggressive algorithm\nremains and can be enabled where appropriate.\n", "labels": [], "number": 213, "updated_at": "2014-07-18 04:59:15", "user": 435791, "closed_at": "2012-11-19 04:15:28", "id": 8362656, "title": "Pick safe default algorithm for Pathname#cleanpath", "url": "https://api.github.com/repos/ruby/ruby/issues/213", "created_at": "2012-11-14 18:14:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10377562", "text": "For added context, here's an example of how this can currently fail: https://gist.github.com/4069375\n", "created_at": "2012-11-14 18:26:43", "user": 435791, "id": 10377562}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500913", "text": "Closing this, please refer to [Feature #7401 in redmine](http://bugs.ruby-lang.org/issues/7401)\n", "created_at": "2012-11-19 04:15:28", "user": 277819, "id": 10500913}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://bugs.ruby-lang.org/issues/7371\n\nCompilers may optimize away the overflow/underflow checks since signed integer overflow is undefined behavior in C.  This patch uses unsigned multiplications instead.\n\nOne can compile the code using `gcc -ftrapv` and should notice traps at run time.\n\nOne can also try to compile the following (simplified) code using gcc 4.8 with `gcc -S -O2`; the resulting assembly code is an _empty_ function. \n\n```\n#define SIGNED_VALUE    long\n#define BASE_FIG        9\n\nvoid bar(void);\n\nvoid AddExponent(SIGNED_VALUE e, SIGNED_VALUE n)\n{\n    n = 1;\n    SIGNED_VALUE m = e+n;\n    SIGNED_VALUE eb, mb;\n    if(e>0) {\n        if(n>0) {\n            mb = m*(SIGNED_VALUE)BASE_FIG;\n            eb = e*(SIGNED_VALUE)BASE_FIG;\n            if(mb<eb) goto overflow;\n        }\n    }\n    return;\noverflow:\n    bar();\n}\n```\n\nRuby currently uses \"-fno-strict-overflow\" to disable such offending optimizations in gcc, but this workaround option is not supported by other compilers, thus not portable.\n", "labels": [], "number": 214, "updated_at": "2014-07-04 11:54:44", "user": 801567, "closed_at": "2012-11-19 04:16:33", "id": 8413754, "title": "bigdecimal.c: avoid undefined overflow checking", "url": "https://api.github.com/repos/ruby/ruby/issues/214", "created_at": "2012-11-16 08:45:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500921", "text": "Closing, please refer to [Bug #7371 in redmine](http://bugs.ruby-lang.org/issues/7371)\n", "created_at": "2012-11-19 04:16:33", "user": 277819, "id": 10500921}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When control-c'ing a rack app, WEBrick will not catch SIGINT and shutdown. Instead it hands back the following error:\n\nERROR Interrupt: \n    /Users/macbook/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick/server.rb:99:in `select'\n", "labels": [], "number": 215, "updated_at": "2014-06-17 01:54:34", "user": 686945, "closed_at": "2012-11-17 18:53:24", "id": 8414164, "title": "rescue SignalException so rack apps can shutdown properly", "url": "https://api.github.com/repos/ruby/ruby/issues/215", "created_at": "2012-11-16 09:08:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10454142", "text": "You probably don't want to handle any signal by a shutdown, what about just rescuing top-level Interrupt?\n", "created_at": "2012-11-16 17:10:37", "user": 168854, "id": 10454142}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10455618", "text": "thanks for your help eregon\n", "created_at": "2012-11-16 17:52:57", "user": 686945, "id": 10455618}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10455710", "text": "woops\n", "created_at": "2012-11-16 17:55:21", "user": 686945, "id": 10455710}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10477451", "text": "This behavior is mentioned in the documentation: http://www.ruby-doc.org/stdlib-1.9.3/libdoc/webrick/rdoc/WEBrick.html.\nI guess the intent is to let to the user the freedom of handling SIGINT.\n\nWhen I do a simple\n`ruby -rwebrick -e 'WEBrick::HTTPServer.new(Port: 8000, DocumentRoot: File.expand_path(\".\")).start'` and Ctrl+C, it shutdowns (but the fatal message is shown, indeed):\n\n```\n[2012-11-17 19:41:31] FATAL Interrupt: \n    .../webrick/server.rb:120:in `select'\n        ...\n    -e:1:in `<main>'\n[2012-11-17 19:41:31] INFO  going to shutdown ...\n[2012-11-17 19:41:31] INFO  WEBrick::HTTPServer#start done.\n```\n\nIf you want to change the default behavior or discuss it, you should open an issue at https://bugs.ruby-lang.org/.\n", "created_at": "2012-11-17 18:53:24", "user": 168854, "id": 10477451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10479534", "text": "Yes, this behavior was changed since Ruby 1.9.3.  WEBrick now shuts down on ^C\n", "created_at": "2012-11-17 22:05:27", "user": 9831, "id": 10479534}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10479682", "text": "maybe a better illustration:\n\n```\nrequire 'rack'\n\nclass App\n def call(req)\n   [200, {'Content-Type' => 'text/html'}, ['Hello! I Wont Exit Properly']]\n end\nend\nRack::Handler::WEBrick.run App.new, :Port => 3000\n```\n\nthis won't close, unless you do a kill -9. obviously not a major concern here, but thanks for the help again with this\n", "created_at": "2012-11-17 22:20:01", "user": 686945, "id": 10479682}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10480248", "text": "It quits as expected upon `^C` without your patch, are you sure you tested it properly?\n\n```\n$ ruby t.rb \n[2012-11-17 15:15:28] INFO  WEBrick 1.3.1\n[2012-11-17 15:15:28] INFO  ruby 2.0.0 (2012-11-15) [x86_64-darwin12.2.0]\n[2012-11-17 15:15:28] INFO  WEBrick::HTTPServer#start: pid=10599 port=3000\n^C[2012-11-17 15:15:29] FATAL Interrupt: \n    /usr/local/lib/ruby/2.0.0/webrick/server.rb:120:in `select'\n    /usr/local/lib/ruby/2.0.0/webrick/server.rb:120:in `block in start'\n    /usr/local/lib/ruby/2.0.0/webrick/server.rb:22:in `start'\n    /usr/local/lib/ruby/2.0.0/webrick/server.rb:110:in `start'\n    /Users/drbrain/tmp/gems/gems/rack-1.4.1/lib/rack/handler/webrick.rb:13:in `run'\n    t.rb:8:in `<main>'\n[2012-11-17 15:15:29] INFO  going to shutdown ...\n[2012-11-17 15:15:29] INFO  WEBrick::HTTPServer#start done.\n/usr/local/lib/ruby/2.0.0/webrick/server.rb:120:in `select': Interrupt\n    from /usr/local/lib/ruby/2.0.0/webrick/server.rb:120:in `block in start'\n    from /usr/local/lib/ruby/2.0.0/webrick/server.rb:22:in `start'\n    from /usr/local/lib/ruby/2.0.0/webrick/server.rb:110:in `start'\n    from /Users/drbrain/tmp/gems/gems/rack-1.4.1/lib/rack/handler/webrick.rb:13:in `run'\n    from t.rb:8:in `<main>'\n\n$ \n```\n", "created_at": "2012-11-17 23:17:25", "user": 9831, "id": 10480248}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10481438", "text": "The ruby versions I tested with have different behavior. if ruby-1.9.3-p194, the app won't even close. If using 2.0, you will get the message above, albeit, with WEBrick sort of spilling its guts.\n\ni thought it would make sense to bring the versions to have similar behavior, and have a one-line shutdown. instead of the fugly code above, just have:\n\n```\n[2012-11-17 20:18:28] INFO  WEBrick 1.3.1\n[2012-11-17 20:18:28] INFO  ruby 2.0.0 (2012-11-18) [x86_64-darwin11.4.0]\n[2012-11-17 20:18:28] INFO  WEBrick::HTTPServer#start: pid=65523 port=3000\n^C[2012-11-17 20:18:30] INFO  going to shutdown ...\n[2012-11-17 20:18:30] INFO  WEBrick::HTTPServer#start done.\n```\n\nas eregon pointed out, this is probably intentional so I can't argue really.\n", "created_at": "2012-11-18 01:38:30", "user": 686945, "id": 10481438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10481832", "text": "In ruby, patches start against trunk then are backported to maintained branches if they are bug fixes.  New features are not backported.  If a bug fix has been applied to trunk but not a maintenance branch you can request that it be backported on http://bugs.ruby-lang.org.  In order to be accepted to trunk they need to fix some bug in trunk or add some new feature to trunk.  (New features submitted during the freeze will not be committed until after the next release.)\n\nBefore writing the patch please verify that the new feature is not present in trunk or that the bug still exists in trunk.  If the bug has been fixed or the feature has been implemented since the last release the patch will be rejected.  This will make everyone sad, and we don't want to waste your valuable efforts.\n\nIn this case, an equivalent change was made to trunk (https://github.com/ruby/ruby/blob/42d38dec/ChangeLog#L8993-L9003).  As far as applying this patch is concerned, I don't see the need. WEBrick in trunk (where it matters as far as new patches are concerned) already behaves exactly as the subject and description of this patch say it doesn't.\n\nIf you think this is a bug that should be fixed in ruby 1.9.3 you can open a ticket to request that the original commits be backported to ruby 1.9.3 on http://bugs.ruby-lang.org.\n\nChanging the behavior to shutdown on Interrupt or SignalException is a separate matter that would likely be considered a new feature and couldn't be backported to 1.9.3.  I'm not the maintainer of WEBrick so I can't make this judgement.\n\nIf you think WEBrick should shutdown on Interrupt or SignalException please open a ticket on http://bugs.ruby-lang.org to be sure the WEBrick maintainer sees it.  There's no need to repost the patch, you can simply link to this pull request on github.\n\nI'm sorry we can't apply your contribution as a bug fix ☹ ☹ ☹\n", "created_at": "2012-11-18 02:38:34", "user": 9831, "id": 10481832}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- array.c (rb_ary_dup_of_p): new function\n  stricter check for equality of previously dup-ed array,\n  because rb_ary_shared_with_p doesn't handle case when #shift or #pop\n  were applied to original array\n- include/ruby/intern.h (rb_ary_dup_of_p): declare\n- load.c (rb_get_expanded_load_path, get_loaded_features_index):\n  use rb_ary_dup_of_p instead of rb_ary_shared_with_p\n", "labels": [], "number": 216, "updated_at": "2014-06-23 18:08:37", "user": 249427, "closed_at": "2012-11-19 04:17:04", "id": 8448991, "title": "rb_ary_dup_of_p - stricter change for array's copy", "url": "https://api.github.com/repos/ruby/ruby/issues/216", "created_at": "2012-11-18 10:03:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10484449", "text": "Issue http://bugs.ruby-lang.org/issues/7383\n", "created_at": "2012-11-18 10:10:14", "user": 249427, "id": 10484449}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10500927", "text": "Closing, please refer to [Bug #7383 in redmine](http://bugs.ruby-lang.org/issues/7383)\n", "created_at": "2012-11-19 04:17:04", "user": 277819, "id": 10500927}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10511046", "text": "@zzak what did you mean? I placed a link to that issue (which I created for referring this pull request)\n", "created_at": "2012-11-19 11:59:44", "user": 249427, "id": 10511046}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10514715", "text": "@funny-falcon Yes, the ticket on redmine is preferred since many committers don't use github.\n", "created_at": "2012-11-19 14:14:14", "user": 277819, "id": 10514715}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Http request class `Net::HTTP::Patch` is missing in documentation.\n", "labels": [], "number": 217, "updated_at": "2012-11-30 05:48:54", "user": 290782, "closed_at": "2012-11-30 05:48:54", "id": 8843866, "title": "Add `Net::HTTP::Patch` to documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/217", "created_at": "2012-11-30 05:35:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 218, "updated_at": "2014-07-09 11:33:53", "user": 10308, "closed_at": "2012-12-02 05:20:46", "id": 8911408, "title": "Suppress uninitialized warning from @is_proxy_class", "url": "https://api.github.com/repos/ruby/ruby/issues/218", "created_at": "2012-12-02 05:12:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10926318", "text": "Added your patch in redmine as [bug #7494](https://bugs.ruby-lang.org/issues/7494).\n\nThank you!\n", "created_at": "2012-12-02 05:20:46", "user": 277819, "id": 10926318}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/10982911", "text": "Resolved by [r38172](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/38172)\n\nThank you!\n", "created_at": "2012-12-04 03:28:28", "user": 277819, "id": 10982911}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 219, "updated_at": "2014-07-29 09:11:22", "user": 3892, "closed_at": "2012-12-08 07:06:44", "id": 9108609, "title": "improve ripper documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/219", "created_at": "2012-12-08 06:41:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11155851", "text": "This issue was solved with changeset r38273.\nOscar, thank you for this pull request.\nYour contribution to Ruby is greatly appreciated.\nMay Ruby be with you.\n", "created_at": "2012-12-08 07:06:44", "user": 33770, "id": 11155851}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there, I added an php handler for webrick based on the cgihandler. I think it is helpful and would be happy to get it included in ruby.\n\nRegards\nDaniel\n", "labels": [], "number": 220, "updated_at": "2014-08-06 13:00:30", "user": 606327, "closed_at": "2012-12-11 18:56:13", "id": 9124575, "title": "added php handler", "url": "https://api.github.com/repos/ruby/ruby/issues/220", "created_at": "2012-12-09 21:23:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11177643", "text": "I don't see the need for a php handler to be included in ruby.  \n", "created_at": "2012-12-09 23:10:39", "user": 1189320, "id": 11177643}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11177851", "text": "/cc @nahi\n", "created_at": "2012-12-09 23:27:30", "user": 3124, "id": 11177851}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11217929", "text": "Well, I see two possible scenarios for php support in webrick. First, we use webrick as a small and light weight webserver for a small project. We also depend on a 'legacy' php-webapp which we can use with the php-handler. A second one I have seen here: http://stackoverflow.com/questions/5437664/using-webrick-to-serve-php-web-applications . For people switching from php to ruby/ror it may be easier if they can run their former php projects in the new ruby environment.\n\nWhat do you think?\n", "created_at": "2012-12-10 21:12:40", "user": 606327, "id": 11217929}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11227199", "text": "I think this should be released as a separate gem.\n\nI doubt @nahi or anyone in ruby-core would want to support this.\n\nAlso, this patch can't be accepted as is, since it doesn't include any test. \n\nIn general, we're trying for move functionality out of the std lib into gems (easier to update, support, view as an independent , etc...)\n", "created_at": "2012-12-11 01:25:14", "user": 33770, "id": 11227199}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11249133", "text": "I agree with @marcandre\n", "created_at": "2012-12-11 15:58:37", "user": 1189320, "id": 11249133}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11256684", "text": "Ok, I see your point. I will add tests and see how to build a gem...\n\nThanks for your comments!\n", "created_at": "2012-12-11 18:48:58", "user": 606327, "id": 11256684}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11256979", "text": "Good. I'll close this pull request. To make a gem, use `bundler`. http://railscasts.com/episodes/245-new-gem-with-bundler\n", "created_at": "2012-12-11 18:56:13", "user": 33770, "id": 11256979}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 221, "updated_at": "2014-06-24 12:03:08", "user": 52642, "closed_at": "2012-12-11 03:02:32", "id": 9167458, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/221", "created_at": "2012-12-11 02:56:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just a minor thing, but I hope I clarified how default arguments are supposed to be gathered together.\n", "labels": [], "number": 222, "updated_at": "2012-12-19 09:07:42", "user": 2619, "closed_at": "2012-12-19 09:07:42", "id": 9391617, "title": "Found a typo, fixed it by improving the wording.", "url": "https://api.github.com/repos/ruby/ruby/issues/222", "created_at": "2012-12-19 06:06:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11522646", "text": "This issue was solved with changeset r38465.\nDave, thank you for reporting this issue.\nYour contribution to Ruby is greatly appreciated.\nMay Ruby be with you.\n", "created_at": "2012-12-19 09:07:42", "user": 33770, "id": 11522646}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Moved in 4bf3cb5ba9c0242bd5a6d0d55b7db9f837c09edf.\n", "labels": [], "number": 223, "updated_at": "2012-12-19 15:58:30", "user": 290782, "closed_at": "2012-12-19 15:58:30", "id": 9401380, "title": "* lib/README: Move pathname.rb from lib to ext", "url": "https://api.github.com/repos/ruby/ruby/issues/223", "created_at": "2012-12-19 14:16:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11535210", "text": "Hello! Thank you for the patch, but I'd actually prefer removing `lib/README` all together in favor of a `doc/standard_library` which covers ext and lib\n", "created_at": "2012-12-19 15:58:19", "user": 277819, "id": 11535210}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- continuation/continuation.c\n- fiber/fiber.c\n- mathn/complex/complex.c\n- mathn/rational/rational.c\n- openssl/ossl_bio.c\n- racc/cparse/cparse.c\n- refinement/refinement.c\n", "labels": [], "number": 224, "updated_at": "2012-12-19 16:07:11", "user": 290782, "closed_at": "2012-12-19 16:07:11", "id": 9401991, "title": "* ext/.document: Add missing ext modules to document", "url": "https://api.github.com/repos/ruby/ruby/issues/224", "created_at": "2012-12-19 14:37:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11535573", "text": "This was resolved by [r38475](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/38475), thanks for your contribution!\n", "created_at": "2012-12-19 16:07:11", "user": 277819, "id": 11535573}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "CSV::Row presents a hash-like interface. Adding these methods allows\nconsumers of CSV::Row objects to treat them and hashes more\ninterchangeably.\n\n@JEG2 was kind enough to ratify the idea, though he has not reviewed the code.\n\nI apologize if this is not the correct avenue by which to submit a patch.\n", "labels": [], "number": 225, "updated_at": "2014-07-19 04:40:53", "user": 12763, "closed_at": "2012-12-27 16:20:01", "id": 9531840, "title": "Adds CSV::Row#fetch and CSV::Row#has_key? methods", "url": "https://api.github.com/repos/ruby/ruby/issues/225", "created_at": "2012-12-27 04:32:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11711339", "text": "I applied this patch in revision 38633.  Thanks.\n\nThis can be closed.\n", "created_at": "2012-12-27 16:17:49", "user": 5639, "id": 11711339}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This avoid issues with application defined JobManager class\n\ncc @keiju\n", "labels": [], "number": 226, "updated_at": "2014-06-25 21:03:20", "user": 47848, "closed_at": "2012-12-28 00:08:08", "id": 9548688, "title": "Check from JobManager inside IRB namespace", "url": "https://api.github.com/repos/ruby/ruby/issues/226", "created_at": "2012-12-27 23:58:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11721882", "text": "Thank you for your contribution!\nPlease refer to [Bug #7628](https://bugs.ruby-lang.org/issues/7628)\n", "created_at": "2012-12-28 00:08:08", "user": 277819, "id": 11721882}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think I've made some improvements in the documentation about how to declare methods.  Please let me know what you think.\n", "labels": [], "number": 227, "updated_at": "2014-07-01 16:38:17", "user": 2619, "closed_at": "2013-01-04 23:40:40", "id": 9601410, "title": "Syntax documentation: method return values and expanded documentation of singletons", "url": "https://api.github.com/repos/ruby/ruby/issues/227", "created_at": "2013-01-01 10:02:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829698", "text": "I like this addition.  I can commit it with @zzak's suggestions, but I'm going to move much of the scope section to a new document describing modules and classes. I don't think this section fits well with methods\n", "created_at": "2013-01-02 23:43:59", "user": 9831, "id": 11829698}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11835862", "text": "@drbrain sure, that sound good. I'll leave this one for you.\n", "created_at": "2013-01-03 06:15:57", "user": 277819, "id": 11835862}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation of Hash#merge has been updated to clarify that this method\ncreates a shallow copy of the Hash specified in the method parameter.\n\nSidenote: if there is a particular set of standards I violated I'd love to hear so I can adjust the code to these standards.\n", "labels": [], "number": 228, "updated_at": "2014-06-12 13:18:16", "user": 86065, "closed_at": "2013-01-01 17:30:31", "id": 9602081, "title": "Documentation for Hash#merge and shallow copies.", "url": "https://api.github.com/repos/ruby/ruby/issues/228", "created_at": "2013-01-01 13:15:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11790997", "text": "Hi Yorick, Thanks for your contribution, and Happy New Year!\n\nWe have some guidelines on the [wiki](http://bugs.ruby-lang.org/projects/ruby/wiki/DocumenterHowTo), but not all of the core classes follow the same style, it's sort of a work in progress ;)\n", "created_at": "2013-01-01 17:20:43", "user": 277819, "id": 11790997}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11791013", "text": "Hash#merge does not copy values, it just copies references, but that is transparent to the user.\nSo the same values are in the merged Hash:\n\n``` ruby\n> h = { a: 1 }\n> v = [1, 2, 3]\n> v.object_id\n=> 2152765440 \n> h.merge({ key: v })[:key].object_id\n=> 2152765440 \n```\n", "created_at": "2013-01-01 17:22:26", "user": 168854, "id": 11791013}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11791025", "text": "And @zzak, you are welcome to revert the commit ;)\n(timing is quite unlucky, you commented between my 2 comments)\n\nHappy new year though!\n", "created_at": "2013-01-01 17:23:33", "user": 168854, "id": 11791025}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11791075", "text": "@eregon Thanks for clearing that up, I've reverted the docs in r38674.\n", "created_at": "2013-01-01 17:30:26", "user": 277819, "id": 11791075}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11791247", "text": "@YorickPeterse So, thanks for the request, but unfortunately it is misleading as is. But the doc of Hash#merge could likely be improved, do not hesitate to make another request!\n", "created_at": "2013-01-01 17:53:23", "user": 168854, "id": 11791247}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 229, "updated_at": "2013-01-01 18:12:26", "user": 5986, "closed_at": "2013-01-01 18:12:26", "id": 9603289, "title": "typo fix: \"IO-lie\"->\"IO-like\"", "url": "https://api.github.com/repos/ruby/ruby/issues/229", "created_at": "2013-01-01 17:24:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11791389", "text": "@zed-0xff Thank you for the patch, have a Happy New Year!\n", "created_at": "2013-01-01 18:12:26", "user": 277819, "id": 11791389}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 230, "updated_at": "2013-01-04 13:25:19", "user": 7736, "closed_at": "2013-01-04 02:57:42", "id": 9630600, "title": "Fix documentation for `def_single_delegator`", "url": "https://api.github.com/repos/ruby/ruby/issues/230", "created_at": "2013-01-02 23:00:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11828978", "text": "Thank you!\n\nHere is my suggestion:\n\n``` rdoc\ncall-seq:\n    def_single_delegator(accessor, method, new_name=method)\n\nDefines a method _method_ which delegates to _accessor_ (i.e. it calls\nthe method of the same name in _accessor_).  If _new_name_ is\nprovided, it is used as the name for the delegate method.\n```\n\nThis way `new_name` is used for the method arguments, instead of `ali`\n", "created_at": "2013-01-02 23:18:35", "user": 277819, "id": 11828978}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829252", "text": "I like `new_name` better!\n\nHowever, I’m not sure if you are suggesting changing the code (from `ali` to `new_name`) and documentation, or just changing the documentation to use `new_name` (and leaving the code as `ali`). I was trying to stay as close as possible to the actual method signature, which is why I did not do this.\n", "created_at": "2013-01-02 23:28:14", "user": 7736, "id": 11829252}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829379", "text": "That is why I suggest call-seq, you can use it to define your own method\narguments: http://rdoc.rubyforge.org/RDoc/Parser/Ruby.html\n\nOn Wed, Jan 2, 2013 at 6:28 PM, Vladimir Andrijevik <\nnotifications@github.com> wrote:\n\n> I like new_name better!\n> \n> However, I’m not sure if you are suggesting changing the code (from alito\n> new_name) and documentation, or just changing the documentation to use\n> new_name (and leaving the code as ali). I was trying to stay as close as\n> possible to the actual method signature, which is why I did not do this.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/230#issuecomment-11829252.\n", "created_at": "2013-01-02 23:32:08", "user": 277819, "id": 11829379}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829437", "text": "Oh, I see. That’s great, thank you! I will make the change as you suggested.\n", "created_at": "2013-01-02 23:34:11", "user": 7736, "id": 11829437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829631", "text": "Thank you for fixing this!\n\nOn Wed, Jan 2, 2013 at 6:34 PM, Vladimir Andrijevik <\nnotifications@github.com> wrote:\n\n> Oh, I see. That’s great, thank you! I will make the change as you\n> suggested.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/230#issuecomment-11829437.\n", "created_at": "2013-01-02 23:41:16", "user": 277819, "id": 11829631}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11840983", "text": "Updated. I put the `:call-seq:` after the comment to mirror other comments in the file which use `:call-seq:`.\n", "created_at": "2013-01-03 11:33:38", "user": 7736, "id": 11840983}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11870719", "text": "@vandrijevik Thanks for the patches!\nFor future reference, `call-seq`'s usually go at the top of the method definition. I fix this for you in the otherwise perfect commit.\n", "created_at": "2013-01-04 03:01:59", "user": 277819, "id": 11870719}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11880729", "text": "Great, thank you zzak! Is there a guideline document I can read so I can get this better next time?\n", "created_at": "2013-01-04 11:53:00", "user": 7736, "id": 11880729}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11882641", "text": "@vandrijevik There are some guidelines on the [wiki](http://bugs.ruby-lang.org/projects/ruby/wiki/DocumenterHowTo), and the [rdoc documentation](http://rdoc.rubyforge.org/) is also helpful\n", "created_at": "2013-01-04 13:25:19", "user": 277819, "id": 11882641}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The example for using SingleForwardable with a Class or Module was incorrect Ruby\n(it resulted in an exception).\n\nSince the English sentence was not clear about what the example was trying to document,\nthis is my best guess. The new example illustrates that a Module can be delegated from\nby extending it with SingleForwardable and using `def_delegator`.\n", "labels": [], "number": 231, "updated_at": "2013-01-03 05:59:42", "user": 7736, "closed_at": "2013-01-03 05:59:42", "id": 9630786, "title": "Fix doc for using SingleForwardable with Module", "url": "https://api.github.com/repos/ruby/ruby/issues/231", "created_at": "2013-01-02 23:08:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/11829050", "text": "This is much better, thank you!\n", "created_at": "2013-01-02 23:21:04", "user": 277819, "id": 11829050}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 232, "updated_at": "2013-01-05 17:25:00", "user": 1648712, "closed_at": "2013-01-05 17:25:00", "id": 9707308, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/232", "created_at": "2013-01-05 16:46:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 233, "updated_at": "2014-06-16 20:02:29", "user": 5986, "closed_at": "2013-01-13 04:43:25", "id": 9835484, "title": "typo fix: \"pipline\"->\"pipeline\"", "url": "https://api.github.com/repos/ruby/ruby/issues/233", "created_at": "2013-01-10 09:22:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 234, "updated_at": "2013-01-13 05:09:13", "user": 106525, "closed_at": "2013-01-13 05:09:13", "id": 9836292, "title": "Fixed a couple of spelling mistakes", "url": "https://api.github.com/repos/ruby/ruby/issues/234", "created_at": "2013-01-10 09:55:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 235, "updated_at": "2013-01-16 22:02:04", "user": 469345, "closed_at": "2013-01-16 22:02:04", "id": 10009746, "title": "markup error fixed.", "url": "https://api.github.com/repos/ruby/ruby/issues/235", "created_at": "2013-01-16 07:51:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 236, "updated_at": "2013-01-16 21:56:44", "user": 1206678, "closed_at": "2013-01-16 21:56:44", "id": 10027768, "title": "Corrected the typo concerning the String ex.", "url": "https://api.github.com/repos/ruby/ruby/issues/236", "created_at": "2013-01-16 17:38:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 237, "updated_at": "2013-01-17 11:35:09", "user": 5986, "closed_at": "2013-01-17 11:32:58", "id": 10048456, "title": "Fix markup error", "url": "https://api.github.com/repos/ruby/ruby/issues/237", "created_at": "2013-01-17 07:14:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12364351", "text": "Merged, thanks!\n", "created_at": "2013-01-17 11:35:09", "user": 168854, "id": 12364351}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Correct RDoc format for README.\n", "labels": [], "number": 238, "updated_at": "2013-01-18 23:50:21", "user": 1206678, "closed_at": "2013-01-18 21:46:06", "id": 10113534, "title": "README.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/238", "created_at": "2013-01-18 21:12:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12442415", "text": "Closing this, we don't want to add an extension right now.\n\nSee #128 for more information.\n\n[#7712](https://bugs.ruby-lang.org/issues/7712) on redmine was recently opened up for further discussion on this topic.\n\nThank you!\n", "created_at": "2013-01-18 21:46:06", "user": 277819, "id": 12442415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12443271", "text": "Thanks! I'll check the issue tracker next time. Regards!\n", "created_at": "2013-01-18 22:09:54", "user": 1206678, "id": 12443271}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi\n\nPlease consider changing @observer_peers to compare_by_identity. This fixes surprising effects when Strings or Arrays are used as observers.\n\nKind regards, Paul\n", "labels": [], "number": 239, "updated_at": "2013-01-27 17:20:48", "user": 3200503, "closed_at": "2013-01-27 17:20:48", "id": 10137674, "title": "observer.rb: Observers are compared by identity.", "url": "https://api.github.com/repos/ruby/ruby/issues/239", "created_at": "2013-01-20 16:10:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12757550", "text": "Thank you Paul for your report and patch!\n\nI've added this to readmine as [Feature #7745](https://bugs.ruby-lang.org/issues/7745), with target version for `next minor` as feature requests for 2.0 have been closed.\n\nPlease continue to redmine, and if you feel this is a \"showstopper\" (for immediate release), please discuss it there.\n", "created_at": "2013-01-27 17:20:47", "user": 277819, "id": 12757550}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "corrected spelling mistake at line 52\n", "labels": [], "number": 240, "updated_at": "2013-01-23 01:21:27", "user": 3273304, "closed_at": "2013-01-23 01:21:27", "id": 10191130, "title": "Update lib/README", "url": "https://api.github.com/repos/ruby/ruby/issues/240", "created_at": "2013-01-22 13:04:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "backport http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/36476 to make Net::HTTP respect http_proxy environment variables.\n", "labels": [], "number": 241, "updated_at": "2014-07-23 10:28:45", "user": 1535036, "closed_at": "2013-01-25 22:08:15", "id": 10321756, "title": "backport r36476", "url": "https://api.github.com/repos/ruby/ruby/issues/241", "created_at": "2013-01-25 18:46:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12723223", "text": "This is a new feature for 1.9.3 so it will be rejected.\n\nPS: You need to make back port requests here: https://bugs.ruby-lang.org/projects/ruby-193/issues/new and list the subversion commits that need to be backported.\n", "created_at": "2013-01-25 22:08:15", "user": 9831, "id": 12723223}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Signed integer overflow is undefined behavior in C.  Many compilers assume no signed integer overflows and even optimize away overflow checks.  The `-fno-strict-overflow` flag works around this issue in gcc, but doesn't fix the fundamentally broken code.\n\nThis patchset fixes signed integer overflows in `time.c`, `ossl.c`, and `bigdecimal.c`.\n", "labels": [], "number": 242, "updated_at": "2013-01-27 20:57:10", "user": 801567, "closed_at": "2013-01-27 17:16:10", "id": 10337102, "title": "Fix signed integer overflows", "url": "https://api.github.com/repos/ruby/ruby/issues/242", "created_at": "2013-01-26 11:29:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12757473", "text": "Thank you Xi for the report and patch!\n\nI've added this to redmine as [Bug #7744](https://bugs.ruby-lang.org/issues/7744), with target version of `next minor`.\n\nPlease continue to redmine, and if you feel this is a \"showstopper\" (for immediate release), please discuss it there.\n", "created_at": "2013-01-27 17:16:10", "user": 277819, "id": 12757473}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/12761404", "text": "Thanks!\n", "created_at": "2013-01-27 20:57:10", "user": 801567, "id": 12761404}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found doc in string.c incorrect as for current MRI. `@aref_re_silent` in corresponding [test](/ruby/ruby/blob/trunk/test/ruby/test_string.rb#L106-L122) hints it could be not an issue in some implimentations.\n", "labels": [], "number": 243, "updated_at": "2013-01-31 06:40:40", "user": 1160699, "closed_at": "2013-01-31 06:40:40", "id": 10478777, "title": "Changed misleading String#[]= doc", "url": "https://api.github.com/repos/ruby/ruby/issues/243", "created_at": "2013-01-30 22:17:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for CI [Feature #6111]\n", "labels": [], "number": 244, "updated_at": "2013-03-15 16:33:22", "user": 16700, "closed_at": "2013-03-15 16:33:22", "id": 10594510, "title": "Multiarch", "url": "https://api.github.com/repos/ruby/ruby/issues/244", "created_at": "2013-02-04 03:00:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14970902", "text": "This seems to have been applied as [r39109](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/39109)\n", "created_at": "2013-03-15 16:33:22", "user": 277819, "id": 14970902}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 245, "updated_at": "2013-02-05 01:16:47", "user": 3614, "closed_at": "2013-02-05 01:16:47", "id": 10632882, "title": "Fixed a grammatical error in security document.", "url": "https://api.github.com/repos/ruby/ruby/issues/245", "created_at": "2013-02-05 00:38:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In trunk, it seems to work as well as `ruby -e \"p :+\"`.\n\n```\nirb(main):001:0> p :+\n:+\n=> :+\n```\n", "labels": [], "number": 246, "updated_at": "2014-06-12 11:05:44", "user": 290782, "closed_at": "2013-02-05 16:42:50", "id": 10642346, "title": "* lib/irb.rb: Remove old restriction", "url": "https://api.github.com/repos/ruby/ruby/issues/246", "created_at": "2013-02-05 09:09:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13134922", "text": "Thank you Ryunosuke-san!\n\nThe example is fixed, but the restriction still seems like good advice.\n\nCan you reproduce it another way?\n", "created_at": "2013-02-05 15:37:28", "user": 277819, "id": 13134922}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13138103", "text": "Thank you for your review @zzak :smile: \n\nOK. I updated restriction example.\nBut I couldn't find more simply way...\n\nIs this acceptable?\n", "created_at": "2013-02-05 16:34:14", "user": 290782, "id": 13138103}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13138625", "text": "Thank you Ryunosuke-san, I think this example is too unnatural, and we should just stick with a warning for now.\n\nThat example may be fixed in a future patch to IRB, and there's no point in maintaining the example as well.\n\nThe advice is good though, and developers should recognize that not all code is evaluated in IRB the same as it is in Ruby because IRB has it's own lexer.\n\nThanks for your contribution, I'm going to close this ticket for now, unless someone can come up with a more natural example.\n", "created_at": "2013-02-05 16:42:50", "user": 277819, "id": 13138625}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13138819", "text": "All right.\nThanks a lot!!\n", "created_at": "2013-02-05 16:45:44", "user": 290782, "id": 13138819}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "...inspect output\n\nIn our migration from Ruby 1.8 to 1.9 we added a monkey patch to identify places we were using an implicit Array#to_s for concatenating all the elements.  This item popped up.  I don't believe that the existing implementation breaks anything, however I'm confident this was the intent of the author\n# Monkey Patch\n\n``` ruby\nclass Array\n  def to_s\n    raise \"check me\"\n  end\nend\n```\n", "labels": [], "number": 247, "updated_at": "2013-02-09 03:13:15", "user": 221605, "closed_at": "2013-02-09 03:13:15", "id": 10781082, "title": "Securerandom: only use random bytes, not extra Stringlib/securerandom.rb...", "url": "https://api.github.com/repos/ruby/ruby/issues/247", "created_at": "2013-02-08 14:34:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13325357", "text": "Thank you David!\n\nI've created the appropriate ticket on our bug tracker and assigned it to the maintainer of lib/securerandom.rb\n\nYou can continue to the discussion on [Bug #7811](https://bugs.ruby-lang.org/issues/7811).\n", "created_at": "2013-02-09 03:13:15", "user": 277819, "id": 13325357}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix typo and specify error type for expecting error.\n", "labels": [], "number": 248, "updated_at": "2014-06-30 11:48:07", "user": 1086548, "closed_at": "2013-02-16 11:17:59", "id": 10846015, "title": "Fix typo and specify error type.", "url": "https://api.github.com/repos/ruby/ruby/issues/248", "created_at": "2013-02-11 04:45:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13648256", "text": "This patch was merged by r39277. Thanks.\n", "created_at": "2013-02-16 11:17:59", "user": 37002, "id": 13648256}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for [Feature #7877]\n", "labels": [], "number": 249, "updated_at": "2014-07-08 16:43:09", "user": 16700, "closed_at": "2013-04-05 02:33:29", "id": 11142880, "title": "Enumerator::Lazy#with_index", "url": "https://api.github.com/repos/ruby/ruby/issues/249", "created_at": "2013-02-19 06:30:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936187", "text": "Closing, please continue discussion on [Feature #7877](http://bugs.ruby-lang.org/issues/7877)\n", "created_at": "2013-04-05 02:33:29", "user": 277819, "id": 15936187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 250, "updated_at": "2013-02-23 01:24:34", "user": 2308, "closed_at": "2013-02-23 01:24:34", "id": 11190832, "title": "Typo in tool/rbinstall.rb: COFNIG -> CONFIG", "url": "https://api.github.com/repos/ruby/ruby/issues/250", "created_at": "2013-02-20 09:57:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/13982479", "text": "r39338 fixed this, thanks\n", "created_at": "2013-02-23 01:24:34", "user": 13423, "id": 13982479}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The commit removes a redundant \"and\".\n\nIt makes\n\n> An OpenStruct utilizes Ruby's method lookup structure to and find and define the necessary methods for properties.\n\nto be\n\n> An OpenStruct utilizes Ruby's method lookup structure to find and define the necessary methods for properties.\n", "labels": [], "number": 251, "updated_at": "2014-07-16 06:47:11", "user": 69308, "closed_at": "2013-02-27 03:40:34", "id": 11440214, "title": "Fix a typo in OpenStruct documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/251", "created_at": "2013-02-27 03:18:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14155098", "text": "Thank you!\n", "created_at": "2013-02-27 03:39:05", "user": 277819, "id": 14155098}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for [Bug #7698] and [Bug #7971].\n", "labels": [], "number": 252, "updated_at": "2014-06-17 14:47:25", "user": 16700, "closed_at": "2013-02-28 22:29:38", "id": 11492538, "title": "Rubygems fix", "url": "https://api.github.com/repos/ruby/ruby/issues/252", "created_at": "2013-02-28 09:08:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14261794", "text": "Committed at r39542, and rubygems/rubygems@4d4cf728 rubygems/rubygems@83e01ec2 rubygems/rubygems@0d05a517\n\nThank you for the patch !\n", "created_at": "2013-02-28 22:29:38", "user": 9831, "id": 14261794}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 253, "updated_at": "2013-03-01 17:50:12", "user": 199499, "closed_at": "2013-03-01 17:50:12", "id": 11553613, "title": "minor typo : than -> then", "url": "https://api.github.com/repos/ruby/ruby/issues/253", "created_at": "2013-03-01 17:23:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14301759", "text": "Thanks! This was committed as r39550\n", "created_at": "2013-03-01 17:47:15", "user": 277819, "id": 14301759}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 254, "updated_at": "2013-03-02 05:46:54", "user": 106525, "closed_at": "2013-03-02 05:12:36", "id": 11559644, "title": "Moving comments to correct position in array.c", "url": "https://api.github.com/repos/ruby/ruby/issues/254", "created_at": "2013-03-01 20:05:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14323166", "text": "@ershad Thanks for your contribution, unfortunately I cannot accept this patch because it's invalid.  The comment for Array#delete_at is already in the correct position, [see here](http://ruby-doc.org/core-2.0/Array.html#method-i-delete_at)\n", "created_at": "2013-03-02 05:12:36", "user": 277819, "id": 14323166}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14323283", "text": "@zzak Thank you for your response. It's showing the definition of 'rb_ary_delete_at_m' when we click 'delete_at', please see the screenshot. Is that  correct?\n![Screenshot](https://f.cloud.github.com/assets/106525/212402/412324bc-82f9-11e2-9539-9ccf0008651f.png)\n", "created_at": "2013-03-02 05:23:25", "user": 106525, "id": 14323283}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14323408", "text": "@ershad Yes this is correct method used by MRI, see [here](https://github.com/ruby/ruby/blob/trunk/array.c#L5505)\n", "created_at": "2013-03-02 05:33:41", "user": 277819, "id": 14323408}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14323548", "text": "@zzak That's a new information for me, thank you.\n", "created_at": "2013-03-02 05:46:54", "user": 106525, "id": 14323548}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Really can't be bothered to raise a documentation bug for such a small issue, so am requesting a pull.\n", "labels": [], "number": 255, "updated_at": "2014-07-07 18:07:31", "user": 201442, "closed_at": "2013-03-04 01:29:42", "id": 11601036, "title": "Fix typo of Encoding::UTF_8", "url": "https://api.github.com/repos/ruby/ruby/issues/255", "created_at": "2013-03-04 00:30:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14360353", "text": "@Wardrop Thanks Tom!\n", "created_at": "2013-03-04 01:32:14", "user": 277819, "id": 14360353}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Minor wording fix to the doc for IO.select.\n\nRespectably means in a manner worthy of respect. Respectively means in the order previously stated.\n", "labels": [], "number": 256, "updated_at": "2013-03-09 01:04:56", "user": 28497, "closed_at": "2013-03-09 01:04:56", "id": 11826467, "title": "Wording fix in io.c.", "url": "https://api.github.com/repos/ruby/ruby/issues/256", "created_at": "2013-03-08 21:43:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When MakeMakefile is extended on itself there is a call to init_mkmf.\nThis method mainly setups various global variables, but it also sets @libdir_basename to default value \"lib\".\n\nWhen MakeMakefile is included in main object there is no call to init_mkmf.\nThat's why @libdir_basename is not set for main object.\n\nTherefore when we invoke mkmf methods on main object @libdir_basename is nil.\nThat leads to incorrect lib path when --with-XXX-dir is used.\n", "labels": [], "number": 257, "updated_at": "2014-06-12 05:42:06", "user": 386, "closed_at": "2013-03-11 03:40:05", "id": 11845917, "title": "Call init_mkmf for main", "url": "https://api.github.com/repos/ruby/ruby/issues/257", "created_at": "2013-03-09 23:42:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/14709351", "text": "@brainopia Thanks! It seems nobu has moved your ticket to redmine as [Bug #8074](https://bugs.ruby-lang.org/issues/8074)\n", "created_at": "2013-03-11 11:57:52", "user": 277819, "id": 14709351}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixing misinformation in array.c examples about delete method\n", "labels": [], "number": 258, "updated_at": "2013-03-17 18:22:39", "user": 27202, "closed_at": "2013-03-17 18:22:39", "id": 12112058, "title": "Fixing array documentation discrepancy", "url": "https://api.github.com/repos/ruby/ruby/issues/258", "created_at": "2013-03-17 18:06:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Look dicussion at http://bugs.ruby-lang.org/issues/7537\nNow negative numerics are treated as options only if some numeric options were explicitly specified. Instead they are treated as positional arguments.\n\nOne possible incompatibility introduced. It can happen if one explicitly specified numeric option (e.g. `-1`) and option which takes unrequired argument (in form `-p [VAL]` and not in form `-p=[VAL]`). \nThen old version treats `-p -1` as two different options while new version treats `-1` as `VAL` for `-p` option but not a separate option.\nTo restore old behavior one can either just use this options in different order: `-1 -p` or use declaration of option with equal sign: `-p=[VAL]`.\nTests illustrate this case.\n", "labels": [], "number": 259, "updated_at": "2014-06-27 12:49:57", "user": 814984, "closed_at": "2013-04-05 02:39:05", "id": 12131955, "title": "Make OptionParser able to use negative numbers as positional arguments", "url": "https://api.github.com/repos/ruby/ruby/issues/259", "created_at": "2013-03-18 12:52:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936304", "text": "Please continue discussion on [Bug #7537](http://bugs.ruby-lang.org/issues/7537) in redmine, thanks for the report and patch!\n", "created_at": "2013-04-05 02:39:05", "user": 277819, "id": 15936304}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Fix comment typo\n2. Remove used variables from Rinda test\n", "labels": [], "number": 260, "updated_at": "2013-03-19 19:42:25", "user": 567626, "closed_at": "2013-03-19 19:42:25", "id": 12193243, "title": "Fix comment typo; Remove used variables from Rinda test", "url": "https://api.github.com/repos/ruby/ruby/issues/260", "created_at": "2013-03-19 17:57:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15138302", "text": "patch merged by r39830 and r39832. Thanks.\n", "created_at": "2013-03-19 19:42:25", "user": 37002, "id": 15138302}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 261, "updated_at": "2014-07-03 01:28:15", "user": 3340, "closed_at": "2013-03-20 22:37:10", "id": 12251263, "title": "Minor spelling fix", "url": "https://api.github.com/repos/ruby/ruby/issues/261", "created_at": "2013-03-20 22:14:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15208249", "text": "@mathias Thank you!\n", "created_at": "2013-03-20 22:37:05", "user": 277819, "id": 15208249}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. Fixes dead code\n2. Removes unnecessary assignment\n", "labels": [], "number": 262, "updated_at": "2013-03-22 11:58:16", "user": 567626, "closed_at": "2013-03-22 11:58:16", "id": 12307167, "title": "Fixes dead code; Removes unnecessary assignment", "url": "https://api.github.com/repos/ruby/ruby/issues/262", "created_at": "2013-03-22 05:21:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15281752", "text": "//cc @zzak \n", "created_at": "2013-03-22 05:22:02", "user": 567626, "id": 15281752}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15293077", "text": "Thanks for your contribution. merged r39876.\n", "created_at": "2013-03-22 11:58:16", "user": 12301, "id": 15293077}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 263, "updated_at": "2014-07-25 08:13:49", "user": 22962, "closed_at": "2013-03-31 02:26:15", "id": 12362567, "title": "Alias File #path and #to_path in docs.", "url": "https://api.github.com/repos/ruby/ruby/issues/263", "created_at": "2013-03-23 20:04:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- load.c use lightweight structure for loaded features index\n  since loaded_feature_path checks name of feature, there is no\n  need to store feature string in an index - only hash value\n  is stored. And used hash structure need only one memory chunk,\n  so that there is no need for memory allocation per feature.\n  Offsets in LOADED_FEATURES could be organized in many\n  single linked lists inside of single allocated array, to\n  avoid many memory allocations.\n  And since there is no referred Ruby objects, there is not impact\n  on GC.\n", "labels": [], "number": 264, "updated_at": "2014-07-15 07:53:14", "user": 249427, "closed_at": "2013-04-05 02:43:58", "id": 12370609, "title": "load.c: lightweight loaded features index", "url": "https://api.github.com/repos/ruby/ruby/issues/264", "created_at": "2013-03-24 07:38:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15353165", "text": "Corresponding issue http://bugs.ruby-lang.org/issues/8158\n", "created_at": "2013-03-24 08:31:03", "user": 249427, "id": 15353165}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936418", "text": "@funny-falcon Thanks for the report and patch, I've uploaded your patch to redmine so we can close this ticket to continue discussion on [Feature #8158](http://bugs.ruby-lang.org/issues/8158)\n", "created_at": "2013-04-05 02:43:58", "user": 277819, "id": 15936418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When an ECC key is used to try and sign a pkcs7 message in the OpenSSL module the operation causes an exception as demonstrated here: https://gist.github.com/Jacob640/5239454\n\nThis patch rectifies the issue by creating a private? method for OpenSSL::PKey::EC that is an alias of OpenSSL::PKey::EC.private_key?\n\nAlso added is an improved warning when OpenSSL::PKey::EC.private_key= is used before a group has been set.\n", "labels": [], "number": 265, "updated_at": "2014-07-06 18:01:22", "user": 1777669, "closed_at": "2013-04-05 02:52:55", "id": 12414722, "title": "ext/openssl/ossl_pkey_ec.c, Add method private? as alias of private_key?", "url": "https://api.github.com/repos/ruby/ruby/issues/265", "created_at": "2013-03-25 18:44:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15548593", "text": "Reported at ruby bug tracker https://bugs.ruby-lang.org/issues/8177\n", "created_at": "2013-03-27 19:43:32", "user": 1777669, "id": 15548593}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936625", "text": "@Jacob640 Thanks for the report! Lets continue discussion on [Bug #8177](https://bugs.ruby-lang.org/issues/8177) and associated tickets.\n", "created_at": "2013-04-05 02:52:55", "user": 277819, "id": 15936625}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes [Bug #8097].\n\nSee http://bugs.ruby-lang.org/issues/8097\n", "labels": [], "number": 266, "updated_at": "2014-06-25 23:30:19", "user": 28908, "closed_at": "2013-03-29 13:14:06", "id": 12518454, "title": "Mutex#synchronize doesn't yield block params.", "url": "https://api.github.com/repos/ruby/ruby/issues/266", "created_at": "2013-03-27 15:54:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. change each to each_value\n2. remove unused variables from bigdecimal lib\n", "labels": [], "number": 267, "updated_at": "2013-03-29 00:44:23", "user": 567626, "closed_at": "2013-03-29 00:44:22", "id": 12584128, "title": "change each to each_value; remove unused variables in bigdecimal lib", "url": "https://api.github.com/repos/ruby/ruby/issues/267", "created_at": "2013-03-28 21:01:44", "comments": [], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 268, "updated_at": "2013-03-31 08:23:11", "user": 23535, "closed_at": "2013-03-31 08:23:11", "id": 12596439, "title": "proc.c: consider noex in define_method", "url": "https://api.github.com/repos/ruby/ruby/issues/268", "created_at": "2013-03-29 06:27:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently there is no documentation of the default timeout values in the Net libraries.\n\nFor example, Net:HTTP has a default [open_timeout](http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html#open_timeout-attribute-method) of nil (i.e. never timeout) and a [read_timeout](http://ruby-doc.org/stdlib-2.0/libdoc/net/http/rdoc/Net/HTTP.html#read_timeout-attribute-method) of 60 seconds.\n\nThis patch adds the documentation for the defaults of all the timeout options in Net::FTP, Net:HTTP, Net::POP and Net::SMTP.\n\nIf this patch is accepted I can backport it to the Ruby 1.9 branch.\n", "labels": [], "number": 269, "updated_at": "2014-07-02 17:15:05", "user": 153, "closed_at": "2013-03-31 01:50:23", "id": 12626929, "title": "Document the default Net timeout values", "url": "https://api.github.com/repos/ruby/ruby/issues/269", "created_at": "2013-03-30 06:43:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15685386", "text": "@toolmantim Please create backport tickets for http://bugs.ruby-lang.org/projects/ruby-200 and http://bugs.ruby-lang.org/projects/ruby-193\n", "created_at": "2013-03-31 01:58:20", "user": 12301, "id": 15685386}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15702098", "text": "Thanks @hsbt - created tickets http://bugs.ruby-lang.org/issues/8198 and http://bugs.ruby-lang.org/issues/8199 - can I also submit a patch file with the ticket?\n", "created_at": "2013-04-01 02:24:58", "user": 153, "id": 15702098}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15703693", "text": "@toolmantim Don't need to attach new patch. it is enough to report of revision number.\n", "created_at": "2013-04-01 04:11:04", "user": 12301, "id": 15703693}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Many parts of Ruby accept timeout values which are passed to `Timeout::timeout`. This raises questions about timeout's behaviour with certain types of input, such as `0` and `nil`.\n\nThis patches adds documentation for the behaviour timeout when given a `0` or `nil` argument.\n\nIf this patch is accepted I can backport it to the Ruby 1.9 branch.\n", "labels": [], "number": 270, "updated_at": "2013-04-01 02:25:54", "user": 153, "closed_at": "2013-03-31 02:05:45", "id": 12627171, "title": "Document Timeout::timeout 0 and nil argument behavior", "url": "https://api.github.com/repos/ruby/ruby/issues/270", "created_at": "2013-03-30 07:14:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15685463", "text": "@toolmantim Please create backport tickets for http://bugs.ruby-lang.org/projects/ruby-200 and http://bugs.ruby-lang.org/projects/ruby-193\n", "created_at": "2013-03-31 02:08:25", "user": 12301, "id": 15685463}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15702112", "text": "Thanks @hsbt - created tickets http://bugs.ruby-lang.org/issues/8196 and http://bugs.ruby-lang.org/issues/8197\n", "created_at": "2013-04-01 02:25:54", "user": 153, "id": 15702112}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nJust a little pull request for a syntax error fix in the Zlib documentation.\n\nHave a nice day.\n", "labels": [], "number": 271, "updated_at": "2014-06-24 19:15:43", "user": 354185, "closed_at": "2013-04-01 13:10:39", "id": 12656205, "title": "Fix documentation syntax error", "url": "https://api.github.com/repos/ruby/ruby/issues/271", "created_at": "2013-04-01 09:13:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15714399", "text": "Thanks! There was also a misnamed variable (inflate VS zi). I will commit soon.\n", "created_at": "2013-04-01 13:00:31", "user": 168854, "id": 15714399}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15715133", "text": "@eregon : Thanks! :)\n", "created_at": "2013-04-01 13:26:29", "user": 354185, "id": 15715133}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "this fully prevents intermittent @timeout_info error \"can't add a new key into hash during iteration\".\n", "labels": [], "number": 272, "updated_at": "2014-07-02 05:26:26", "user": 439499, "closed_at": "2013-10-15 17:20:37", "id": 12664603, "title": "better thread safety through use of TimeoutMutex", "url": "https://api.github.com/repos/ruby/ruby/issues/272", "created_at": "2013-04-01 15:40:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15720758", "text": "The idea with this change is to use TimeoutMutex.synchronize within all methods which directly access @timeout_info, and only in those methods (not in the class methods).  Structuring it like this ensures all use of @timeout_info is properly synchronized at all times (even when public instance methods of WEBrick::Utils::TimeoutHandler are called by outside code).\n", "created_at": "2013-04-01 15:43:24", "user": 439499, "id": 15720758}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15720815", "text": "This commit could also be cherry-picked in the 1.9.x and 2.0.x release branches.\n", "created_at": "2013-04-01 15:44:29", "user": 439499, "id": 15720815}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936724", "text": "@joelnordell It might help to provide a test or reproducible script that illustrates the bug.\n", "created_at": "2013-04-05 02:56:49", "user": 277819, "id": 15936724}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15936739", "text": "@nahi Do you have any opinion on this? Is this considered a bug?\n\nIf we don't get a response from the Webrick maintainer I can move this to redmine.\n", "created_at": "2013-04-05 02:57:40", "user": 277819, "id": 15936739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/15937299", "text": "It's hard to reproduce reliably.  In my case, it manifested as intermittently failing cucumber tests, when running multiple test processes in parallel on a heavily loaded machine.  The history of this file shows a couple of prior attempts to fix the problem, which I think may have improved it but my analysis of the code led me to believe there could still potentially have been an issue.\n\nOne possible downside of my fix is it could potentially reduce the performance of WEBrick slightly, but I don't expect it to be significant in practice.  It definitely resolved the intermittent failures I was experiencing.\n", "created_at": "2013-04-05 03:24:51", "user": 439499, "id": 15937299}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18300061", "text": "Hey guys, any update on this?  Are you going to merge it?\n", "created_at": "2013-05-22 18:58:59", "user": 439499, "id": 18300061}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18436134", "text": "@nahi nudge\n", "created_at": "2013-05-25 00:00:07", "user": 12301, "id": 18436134}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20787686", "text": "@joelnordell Are you still getting this error with Ruby 2.0?\n\nI ask because @nurse made two commits before the release for a similar issue. See: 3c491a9 and 7b18633\n\nIf you can't reproduce this in 2.0.0+ then we should be able to close this ticket.\n", "created_at": "2013-07-11 03:18:40", "user": 277819, "id": 20787686}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22172870", "text": "@joelnordell Sorry for late response. Naruse-san seems to have fixed this bug by this commit https://github.com/ruby/ruby/commit/7b18633804c606e8bcccfbb44e7d7b795e777ea6. Can you review the commit?\n", "created_at": "2013-08-06 11:35:25", "user": 44209, "id": 22172870}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22189060", "text": "Hi @nahi, I saw that commit previously, actually.  I think it might fix the problem for MRI Ruby, but there is still a potential issue in JRuby, which my fix should address.  It basically boils down to the fact that JRuby has preemptive threads, whereas MRI Ruby does not.  Given preemptive threads in JRuby, all access to @timeout_info must be synchronized within the TimeoutMutex.  Just getting a copy of the keys, and iterating on that, isn't quite enough because the iteration loop (not to mention retrieving the keys list itself) is accessing that object without mutex synchronization and therefore it could be simultaneously modified by another thread.\n", "created_at": "2013-08-06 15:46:57", "user": 439499, "id": 22189060}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22189236", "text": "The other thing my commit here does is clarify in the code the use & purpose of TimeoutMutex -- only to synchronize access to @timeout_info -- and so I removed it in some places where it was not actually necessary, while adding it in others.\n", "created_at": "2013-08-06 15:49:18", "user": 439499, "id": 22189236}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22192508", "text": "@joelnordell I understand that nahi is a member of the jruby team, but if this issue only affects jruby threads, then it is an issue that should be addressed in the jruby tracker.\n", "created_at": "2013-08-06 16:35:23", "user": 277819, "id": 22192508}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354196", "text": "This issue has been fixed in CRuby, thank you for the report!\n", "created_at": "2013-10-15 17:20:37", "user": 277819, "id": 26354196}], "assignees": [44209, 44209], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This file is purely for include in rdoc, \nbut rdoc fails to properly escape the single character string.\nThis fix allows copy/paste directly from the docs:\nhttp://www.ruby-doc.org/stdlib-2.0/libdoc/curses/rdoc/Curses.html\n", "labels": [], "number": 273, "updated_at": "2014-07-23 04:52:21", "user": 4666, "closed_at": "2013-04-05 03:12:40", "id": 12820747, "title": "Fixed syntax in curses example", "url": "https://api.github.com/repos/ruby/ruby/issues/273", "created_at": "2013-04-04 21:16:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 274, "updated_at": "2013-04-09 00:35:14", "user": 36123, "closed_at": "2013-04-09 00:35:14", "id": 12832321, "title": "Finish docs for URI::FTP", "url": "https://api.github.com/repos/ruby/ruby/issues/274", "created_at": "2013-04-05 04:56:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Traverses the given levels of a hash and returns the value associated with the\nlast key provided.  Allows for concise access for deeply nested hashes - often encountered with dealing with external restful apis.\n\n```\nhash = { level1: { level2: { level3: 3 } } }\nhash.traverse :level1, :level2, :level3 #=> 3\n```\n\nAlso supports a default value block if the value is nil or the key is\nnot found.\n\n```\nhash.traverse(:level1, :level2, :non_existent_key) { 5 } #=> 5\n```\n\nI'm aware that the probability of getting a feature accepted via PR is slim, but this is something I've built into my rubies for a while and use often so it seemed worth the attempt.\n", "labels": [], "number": 275, "updated_at": "2013-04-11 14:19:35", "user": 533751, "closed_at": "2013-04-10 23:04:27", "id": 12878599, "title": "hash.c: Add traverse for clean nested access", "url": "https://api.github.com/repos/ruby/ruby/issues/275", "created_at": "2013-04-06 14:44:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16207947", "text": "@tylerdooling I have added your ticket to redmine as [Feature #8246](https://bugs.ruby-lang.org/issues/8246), thank you!\n", "created_at": "2013-04-10 23:04:27", "user": 277819, "id": 16207947}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16210329", "text": "Is it ok for this to happen?:\n\n``` ruby\nh = {a:{b:nil}}\nh.traverse(:a, :b) { 42 }  #=> 42\n```\n", "created_at": "2013-04-11 00:14:17", "user": 324275, "id": 16210329}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16213801", "text": "Thanks, @zzak!\n", "created_at": "2013-04-11 02:26:35", "user": 533751, "id": 16213801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16214050", "text": "@phluid61 -  the idea is essentially an extended `fetch`.  Like `fetch`, the last provided key is available to the block, and the resulting value of the block is returned.\n\nI've found the default value feature of `fetch` to be useful, and thought is would be missed if not implemented here.\n\nI'd be interested in any concerns you might have with it however.\n", "created_at": "2013-04-11 02:38:28", "user": 533751, "id": 16214050}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16217714", "text": "@tylerdooling in `fetch`, the block is only executed if there is no such key.\n\n``` ruby\nh = {a:nil}\nh.fetch(:a) { 123 } #=> nil\nh.fetch(:b) { 123 } #=> 123\n\nh.traverse(:a) { 123 } #=> 123\nh.traverse(:b) { 123 } #=> 123\n```\n\nI'd suggest moving your test (lines 685-687) up to 679, i.e.\n\n``` C\n/* 678: */\n      if (i < RARRAY_LEN(argv) - 1){\n        if (rb_block_given_p()){\n          rval = rb_yield(RARRAY_PTR(argv)[i]);\n        } else {\n          rval = Qnil;\n        }\n      }\n      break;\n```\n", "created_at": "2013-04-11 05:40:47", "user": 324275, "id": 16217714}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16237187", "text": "@phluid61 - thanks - the inconsistency there is good to point out.  I'll bring that up on the redmine discussion if it gets that far.\n", "created_at": "2013-04-11 14:19:35", "user": 533751, "id": 16237187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "One of the most important operarions for 3 dimensional vectors is the cross product because it helps to determinate the normal vector of two vectors contained inside a plane\nhttp://en.wikipedia.org/wiki/Cross_product\n", "labels": [], "number": 276, "updated_at": "2014-07-08 14:21:06", "user": 214138, "closed_at": "2013-04-13 03:09:06", "id": 12882053, "title": "Implement cross product to vector class", "url": "https://api.github.com/repos/ruby/ruby/issues/276", "created_at": "2013-04-06 19:04:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16031966", "text": "Thanks for the pull request. This is a good feature request. I'll merge this in (with a better test) soon.\n", "created_at": "2013-04-08 04:23:17", "user": 33770, "id": 16031966}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16075773", "text": "ok I will work with another test, I think I will add some other cases for this operation\n", "created_at": "2013-04-08 20:20:23", "user": 214138, "id": 16075773}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16326620", "text": "Thanks @3zcurdia !\n", "created_at": "2013-04-13 03:10:27", "user": 33770, "id": 16326620}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16665093", "text": "@marcandre I mean: \n\n> BTW, this criteria is wrong...\n\nWhat criteria?\n\nAlso, good find on the typo, I missed that one.\n", "created_at": "2013-04-19 17:03:33", "user": 277819, "id": 16665093}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48283207", "text": "I think, this implementation is wrong. It means now: \"Vector[1, 0, 0].cross_product Vector[0, 1, 0] => Vector[0,0,-1]\", but it should(as we can read in doc, and from intuitive mean of cross_product) be Vector[0,0,1]. Actually, this function give a negative of cross product.\n", "created_at": "2014-07-08 08:07:13", "user": 2254815, "id": 48283207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48342390", "text": "@whateverpl You're right, this has already been reported: https://bugs.ruby-lang.org/issues/9499\n", "created_at": "2014-07-08 14:21:06", "user": 33770, "id": 48342390}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix doc typo.\n", "labels": [], "number": 277, "updated_at": "2014-07-08 21:19:15", "user": 45995, "closed_at": "2013-04-16 03:32:26", "id": 12892500, "title": "Doc change", "url": "https://api.github.com/repos/ruby/ruby/issues/277", "created_at": "2013-04-07 09:02:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16023784", "text": "@windwiny Wow, thats a lot of patches! :smile: Thank you!\n", "created_at": "2013-04-07 20:54:31", "user": 277819, "id": 16023784}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16107873", "text": "@zzak Can you review this patch? I think that we should separate this patch to follow topics:\n- addition of document.\n- fix typo.\n- fix wrong documentation.\n\nI can review these topics. If you ok, I'll separate it and applying these patches. :smiley: \n", "created_at": "2013-04-09 11:45:59", "user": 12301, "id": 16107873}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16112510", "text": "@hsbt I can handle this one, I was considering separating into core and stdlib, with each lib getting a patch.\n", "created_at": "2013-04-09 13:32:38", "user": 277819, "id": 16112510}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16113127", "text": "@zzak agreed. I can help you.\n", "created_at": "2013-04-09 13:44:09", "user": 12301, "id": 16113127}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16114052", "text": "@hsbt If you have time tonight (JST), sure, I probably won't get to it until tomorrow morning (JST).\n", "created_at": "2013-04-09 14:01:48", "user": 277819, "id": 16114052}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16114880", "text": "@zzak I have no time tonight(JST) :sleeping: \n", "created_at": "2013-04-09 14:16:44", "user": 12301, "id": 16114880}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16115164", "text": "@hsbt np, thanks for all your help lately with documentation patches!\n", "created_at": "2013-04-09 14:21:28", "user": 277819, "id": 16115164}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16273757", "text": "I've committed the first part of this, patching the core classes, and will work over the extensions patch next.\n", "created_at": "2013-04-12 03:03:29", "user": 277819, "id": 16273757}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16291079", "text": "@zzak :+1: \n", "created_at": "2013-04-12 12:52:31", "user": 12301, "id": 16291079}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16424956", "text": "@windwiny I've committed your patches separately, thanks for your contributions!\n\n/cc @hsbt \n", "created_at": "2013-04-16 03:36:57", "user": 277819, "id": 16424956}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Minor typo\n", "labels": [], "number": 278, "updated_at": "2014-07-17 01:34:23", "user": 18191, "closed_at": "2013-04-09 00:30:00", "id": 12909130, "title": "Fix documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/278", "created_at": "2013-04-08 05:37:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 279, "updated_at": "2014-07-20 00:56:20", "user": 459733, "closed_at": "2013-04-09 00:24:47", "id": 12930191, "title": "Fixed comment typo", "url": "https://api.github.com/repos/ruby/ruby/issues/279", "created_at": "2013-04-08 15:56:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "with this minimal ruby code\n\n```\nrequire 'debug'\nputs\n```\n\nwhen trying to list the code, it'll fail like so:\n\n```\n(rdb:1) l\n[-3, 6] in script.rb\nNo sourcefile available for script.rb\n```\n", "labels": [], "number": 280, "updated_at": "2014-06-27 08:46:15", "user": 752835, "closed_at": "2013-04-24 03:45:01", "id": 12989379, "title": "Fix debug listing when called from the same file the debug module has been required from", "url": "https://api.github.com/repos/ruby/ruby/issues/280", "created_at": "2013-04-09 20:01:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16906669", "text": "Thank you for your contribution! Please continue discussion on [Bug #8318](https://bugs.ruby-lang.org/issues/8318)\n", "created_at": "2013-04-24 03:45:01", "user": 277819, "id": 16906669}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "README was missing word \"the\" in two instances of the statement \"Or if you are using git then use following command\".\n", "labels": [], "number": 281, "updated_at": "2014-06-14 12:46:00", "user": 706128, "closed_at": "2013-04-11 00:19:51", "id": 13003111, "title": "Corrected missing 'the's in README", "url": "https://api.github.com/repos/ruby/ruby/issues/281", "created_at": "2013-04-10 04:00:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16210517", "text": "@abwinkler999 Thank you for the patch!\n", "created_at": "2013-04-11 00:20:54", "user": 277819, "id": 16210517}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch properly identifies and documents aliased methods in Array. I wasn't sure if there were any conventions around where to put aliases in the C class definition or alphabetization of methods, so hopefully this is acceptable.\n", "labels": [], "number": 282, "updated_at": "2014-06-13 17:57:52", "user": 22962, "closed_at": "2013-04-24 03:29:33", "id": 13003338, "title": "Properly document aliases in Array.", "url": "https://api.github.com/repos/ruby/ruby/issues/282", "created_at": "2013-04-10 04:15:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16212948", "text": "This changes method names in error messages.\nFor instance, for\n\n```\n  a = []; a.slice(1, 1, 1)\n```\n\nfrom\n\n```\n  -e:1:in `slice': wrong number of arguments (3 for 1..2) (ArgumentError)\n```\n\nto\n\n```\n  -e:1:in `[]': wrong number of arguments (3 for 1..2) (ArgumentError)\n```\n", "created_at": "2013-04-11 01:52:24", "user": 16700, "id": 16212948}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16906322", "text": "@phiggins Thanks! I have committed your doc changes, but I see no point in the C function changes.\n\nAlso, @winwindy already patched #find_index alias in #277\n", "created_at": "2013-04-24 03:30:41", "user": 277819, "id": 16906322}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 283, "updated_at": "2014-07-03 09:54:28", "user": 30442, "closed_at": "2013-04-11 00:30:06", "id": 13023367, "title": "Document File::FNM_EXTGLOB flag", "url": "https://api.github.com/repos/ruby/ruby/issues/283", "created_at": "2013-04-10 15:05:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16210779", "text": "@rkh Thanks for the patch! This was merged in [r40223](https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/40223)\n", "created_at": "2013-04-11 00:30:06", "user": 277819, "id": 16210779}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Sorry, I messed that up.\n", "labels": [], "number": 284, "updated_at": "2013-04-11 09:49:24", "user": 30442, "closed_at": "2013-04-11 09:47:38", "id": 13055031, "title": "* dir.c (file_s_fnmatch): Fix return value in example", "url": "https://api.github.com/repos/ruby/ruby/issues/284", "created_at": "2013-04-11 07:11:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225005", "text": "In 0daf538ab48070d42be999b0fdb5344fcf6eb840, should not the flag be `File::FNM_EXTGLOB` instead of `File::FNM_PATHNAME`?\n", "created_at": "2013-04-11 09:36:15", "user": 168854, "id": 16225005}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225059", "text": "Right. OH MY GOD ALL THE COPY PASTA.\n", "created_at": "2013-04-11 09:37:46", "user": 30442, "id": 16225059}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225276", "text": "@rkh np, Please update patch, I'll applying it again.\n", "created_at": "2013-04-11 09:43:24", "user": 12301, "id": 16225276}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225384", "text": "Has already been fixed in 43c93dbdd930745b0c7e461aa949e420d4cc9b6f.\n", "created_at": "2013-04-11 09:46:08", "user": 30442, "id": 16225384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225442", "text": "OK, nice, did not see that.\n", "created_at": "2013-04-11 09:47:38", "user": 168854, "id": 16225442}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16225517", "text": "@rkh I missed to check 43c93db. Thanks for your contribution. :smile: \n", "created_at": "2013-04-11 09:49:24", "user": 12301, "id": 16225517}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The previous implementation wouldn't allow for white-spaces nor a leading dot\nin the no_proxy list. The latter is described in the wget documentation as a valid case.\n\nBy being more strict on the characters, which are counted to a domainname,\nwe allow for white-spaces.\nAlso, a possible leading dot will be handled gracefully.\n", "labels": [], "number": 285, "updated_at": "2014-06-14 04:30:32", "user": 4126955, "closed_at": "2013-04-24 03:41:32", "id": 13071142, "title": "no_proxy with whitespaces and leading dots.", "url": "https://api.github.com/repos/ruby/ruby/issues/285", "created_at": "2013-04-11 14:50:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16772722", "text": "+1 The transparent proxy/no_proxy implementation in ruby 2.0 overrides the higher level proxy handling codes like in [rubygems](https://github.com/rubygems/rubygems/blob/master/lib/rubygems/remote_fetcher.rb#L449) or [bundler](https://github.com/carlhuda/bundler/blob/master/lib/bundler/vendor/net/http/persistent.rb#L857) which do allow for whitspaces and leading dots.\n", "created_at": "2013-04-22 09:14:42", "user": 439223, "id": 16772722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16906592", "text": "Thanks for your contribution! Please continue discussion on [Feature #8317](https://bugs.ruby-lang.org/issues/8317)\n", "created_at": "2013-04-24 03:41:32", "user": 277819, "id": 16906592}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "removes all the empty strings from an array. The idea is to avoid using things like:\n\narray.reject(&:empty?)\n", "labels": [], "number": 286, "updated_at": "2014-07-05 13:48:07", "user": 210771, "closed_at": "2013-04-19 21:16:53", "id": 13160846, "title": "Add a new method to array that removes empty strings", "url": "https://api.github.com/repos/ruby/ruby/issues/286", "created_at": "2013-04-13 18:38:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16339007", "text": "I'm afraid it's unlikely that combining two clean and simple features like `reject` and `empty?` will ever be accepted. Moreover, very few methods of `Array` expect methods on its elements; there's `sort` and friends that rely on `<=>`, which is defined for all `Object` and that's about it I think.\n", "created_at": "2013-04-13 19:17:49", "user": 33770, "id": 16339007}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16339137", "text": "@marcandre how about compact? It also uses two clean and simple features like `reject` and `nil?` and I think it was accepted. Or we can delete all of these methods and use `reject` and `object.method` or we can make the interaction with array much easier.\n", "created_at": "2013-04-13 19:25:05", "user": 210771, "id": 16339137}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16339754", "text": "Actually, `compact` does not call `nil?`. It evaluates the \"truthiness\" of its elements directly and this [is hardcoded](http://stackoverflow.com/questions/3082341/ifx-vs-ifx-false-in-ruby/3082399#3082399). There is no method called and it is not possible to have `array.compact` raise a `NoMethodError`.\n", "created_at": "2013-04-13 20:02:55", "user": 33770, "id": 16339754}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16591449", "text": "it seems no need to add the method to the ruby inside?\n", "created_at": "2013-04-18 17:43:07", "user": 1398729, "id": 16591449}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16690439", "text": "Thanks for you feedback... I have a new idea, I'll submit a PR soon\n", "created_at": "2013-04-19 21:16:53", "user": 210771, "id": 16690439}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 287, "updated_at": "2014-06-24 22:01:22", "user": 166986, "closed_at": "2013-04-16 02:36:10", "id": 13228928, "title": "* ext/pty/lib/expect.rb: Fix error message", "url": "https://api.github.com/repos/ruby/ruby/issues/287", "created_at": "2013-04-16 02:17:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 288, "updated_at": "2014-06-15 00:27:34", "user": 384535, "closed_at": "2013-04-16 06:30:51", "id": 13229721, "title": "fix ENV.to_a rdoc example", "url": "https://api.github.com/repos/ruby/ruby/issues/288", "created_at": "2013-04-16 03:06:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 289, "updated_at": "2014-07-22 09:16:37", "user": 939977, "closed_at": "2013-04-17 01:18:48", "id": 13248360, "title": "fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/289", "created_at": "2013-04-16 14:13:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The variable was an alias of `last-command-event` but has been removed in Emacs 24.3.\n\nThe same thing has already been fixed in ruby-electric.el: https://github.com/ruby/ruby/pull/198\n", "labels": [], "number": 290, "updated_at": "2014-06-18 13:56:12", "user": 2545, "closed_at": "2013-04-21 10:09:16", "id": 13344592, "title": "Replace use of obsolete variable `last-command-char`", "url": "https://api.github.com/repos/ruby/ruby/issues/290", "created_at": "2013-04-18 11:08:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 291, "updated_at": "2014-06-30 19:02:12", "user": 10137, "closed_at": "2013-04-18 22:46:59", "id": 13376798, "title": "Correct a typo", "url": "https://api.github.com/repos/ruby/ruby/issues/291", "created_at": "2013-04-18 22:27:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix typos, and string#include? example\n", "labels": [], "number": 292, "updated_at": "2014-07-22 14:45:28", "user": 567626, "closed_at": "2013-04-24 04:00:14", "id": 13439462, "title": "Fix string/socket documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/292", "created_at": "2013-04-20 18:49:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16906912", "text": "@vipulnsward Please file a bug on [rdoc issues tracker](https://github.com/rdoc/rdoc/issues/new)\n", "created_at": "2013-04-24 03:55:50", "user": 277819, "id": 16906912}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 293, "updated_at": "2014-07-22 14:45:28", "user": 45995, "closed_at": "2013-04-24 04:51:14", "id": 13446258, "title": "Document methods parameter describe.", "url": "https://api.github.com/repos/ruby/ruby/issues/293", "created_at": "2013-04-21 08:38:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "make consistent with String#getbyte and all other documentation, discovered when search for \"integer\" missed setbyte.\n", "labels": [], "number": 294, "updated_at": "2014-07-22 14:45:28", "user": 1590554, "closed_at": "2013-04-24 04:56:28", "id": 13515020, "title": "String#setbyte documentation - integer replaces int", "url": "https://api.github.com/repos/ruby/ruby/issues/294", "created_at": "2013-04-23 01:18:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 295, "updated_at": "2014-06-24 23:45:17", "user": 45995, "closed_at": "2013-04-24 05:06:49", "id": 13522537, "title": "Tk library and sample change.", "url": "https://api.github.com/repos/ruby/ruby/issues/295", "created_at": "2013-04-23 07:34:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/16908173", "text": "@windwiny Thanks for your contribution! I've committed your typo fix, and added your patch for further discussion as [Bug #8319](https://bugs.ruby-lang.org/issues/8319) so TK maintainer can review.\n", "created_at": "2013-04-24 05:02:53", "user": 277819, "id": 16908173}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17058221", "text": "This patch is fix sample bug\n1. ext/tk/sample/demos-en/floor2.rb  and  ext/tk/sample/demos-en/knightstour.rb , using Tk::Canvas.create .\n2. ext/tk/sample/demos-en/dialog1.rb , Tk.update run after eval_samplecode Dialog close may be throw nilClass.\n", "created_at": "2013-04-26 06:57:40", "user": 45995, "id": 17058221}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nJust a very tiny fix for a missing quote.\n\nHave a nice day.\n", "labels": [], "number": 296, "updated_at": "2013-05-05 12:54:25", "user": 354185, "closed_at": "2013-05-05 12:54:25", "id": 13976964, "title": "* doc/syntax/refinements.rdoc : Fix a missing quote", "url": "https://api.github.com/repos/ruby/ruby/issues/296", "created_at": "2013-05-05 11:22:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17451303", "text": "Thanks (closing explicitly since I miswrote the issue number)!\n", "created_at": "2013-05-05 12:54:25", "user": 168854, "id": 17451303}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The word \"ignored\" was misspelt in the original.\n", "labels": [], "number": 297, "updated_at": "2013-05-06 11:43:02", "user": 20378, "closed_at": "2013-05-06 06:40:48", "id": 13989207, "title": "Fix typo in compar.c", "url": "https://api.github.com/repos/ruby/ruby/issues/297", "created_at": "2013-05-06 05:49:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17468216", "text": "Thanks!\nInterestingly enough this is related to a current issue: https://bugs.ruby-lang.org/issues/7688\nI would be interested to have your opinion on it (especially the #== part discussed at the end).\n", "created_at": "2013-05-06 06:43:37", "user": 168854, "id": 17468216}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17477330", "text": "Ah - that's probably a bit beyond me.\n\nI know that \"42\" == 42 won't throw an exception, even though I'd probably prefer it if it threw an exception. I think Ruby is too permissive a language. That's about it.\n", "created_at": "2013-05-06 11:43:02", "user": 20378, "id": 17477330}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just cleaned up the code a little. Also shortened the line that creates random characters by using a combination of ranges, to_a and join.\n\nWas also looking through the IRB code to check out an implementation detail and found the code quite hard to read so have amended indentation, swapped out large quoted arrays for %W and replaced long multiline blocks with do rather than brace style.\n", "labels": [], "number": 298, "updated_at": "2013-05-06 21:29:12", "user": 35007, "closed_at": "2013-05-06 21:29:12", "id": 14018119, "title": "Added some breathing space to the code in utils.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/298", "created_at": "2013-05-06 20:01:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17509466", "text": "Hmmm...the build failed. Apologies, I'll issue a new request with the extra changes removed.\n", "created_at": "2013-05-06 21:29:12", "user": 35007, "id": 17509466}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just cleaned up the code a little. Also shortened the line that creates random characters by using a combination of ranges, to_a and join.\n", "labels": [], "number": 299, "updated_at": "2014-07-07 15:40:01", "user": 35007, "closed_at": "2013-06-04 14:12:13", "id": 14023201, "title": "Cleaned up code and refactored timeout", "url": "https://api.github.com/repos/ruby/ruby/issues/299", "created_at": "2013-05-06 21:55:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17527795", "text": "While checking out other parts of the code:\n1. Swapped out large quoted arrays in irb/completion.rb to use the clearer %W syntax instead.\n2. Improved the documentation for obspace.c (corrected grammar, clarified the English).\n", "created_at": "2013-05-07 07:40:08", "user": 35007, "id": 17527795}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17528516", "text": "Noticed the clang build failed again, downloaded the raw file and looks like it has issues allocating memory? Do you often have these issues on Travis as the failure has nothing to do with my additions, which are small refactors and documentation improvements.\n", "created_at": "2013-05-07 07:57:41", "user": 35007, "id": 17528516}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18196987", "text": "I guess it would, thanks @QuentinLangeveldt! Is that a directive to change it or just a suggestion?\n", "created_at": "2013-05-21 09:04:58", "user": 35007, "id": 18196987}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18200588", "text": "Just a suggestion. =)  Nothing wrong with the way you did it. \n", "created_at": "2013-05-21 10:28:31", "user": 2077059, "id": 18200588}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18202701", "text": "OK - you able to merge this or are you just wading in?\n", "created_at": "2013-05-21 11:22:53", "user": 35007, "id": 18202701}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18296050", "text": "> Noticed the clang build failed again, downloaded the raw file and looks like it has issues allocating memory? Do you often have these issues on Travis as the failure has nothing to do with my additions, which are small refactors and documentation improvements.\n\nIt seems frequent indeed. I do not know the exact reason though. Maybe @nurse, @shyouhei or @nobu can tell us?\n", "created_at": "2013-05-22 17:58:01", "user": 168854, "id": 18296050}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18340028", "text": "So happy to revert aspects of this branch if anyone directs me to ;)\n", "created_at": "2013-05-23 12:30:08", "user": 35007, "id": 18340028}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18389802", "text": "> So happy to revert aspects of this branch if anyone directs me to ;)\n\nPlease address my comments if you want it merged.\n", "created_at": "2013-05-24 07:09:55", "user": 168854, "id": 18389802}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18906557", "text": "Thanks @eregon - have addressed your comments so should be good to go.\n", "created_at": "2013-06-04 12:50:17", "user": 35007, "id": 18906557}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18911676", "text": "Thanks @eregon - what about the changes I made to swap out %W for %w? No good? I replaced that code carefully and reponded to your request to change %W to %w so would be interested to know why they didn't make it in?\n", "created_at": "2013-06-04 14:15:50", "user": 35007, "id": 18911676}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18911942", "text": "So I merged the wording changes and the %W => %w as 2 commits (as they are unrelated).\nThanks!\n\nI did not merge changes in lib/webrick to avoid mixing style (there are other instances of Array.new, and it is probably not worth changing).\n", "created_at": "2013-06-04 14:19:29", "user": 168854, "id": 18911942}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18912103", "text": "Awesome! Many thanks, I just committed to Ruby!!!\n", "created_at": "2013-06-04 14:21:42", "user": 35007, "id": 18912103}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, you can get something out of `MatchData` like this:\n\n``` ruby\nm = \"2_apples\".match /(\\d+)_(apple|orange)s?/\ncount, thing = m[1], m[2]\n# or\n_, count, thing = \"2_apples\".match(/(\\d+)_(apple|orange)s?/).to_a\n# or\ncount, thing = \"2_apples\".match(/(\\d+)_(apple|orange)s?/).captures\n```\n\nHowever, this extra `#to_a` or `#captures` that you have to add makes things slightly more verbose.\n\nWith this PR, it would be possible to do the following:\n\n``` ruby\ncount, thing = \"2_apples\".match /(\\d+)_(apple|orange)s?/\n```\n\nWhich looks a bit cleaner and nicer.\n\nI am unsure if we can get it into 1.9 but it would be still great to have it on 2.0.\n", "labels": [], "number": 300, "updated_at": "2014-07-17 19:37:31", "user": 315596, "closed_at": "2013-05-10 23:13:33", "id": 14163046, "title": "alias MatchData#captures to #to_ary", "url": "https://api.github.com/repos/ruby/ruby/issues/300", "created_at": "2013-05-09 19:58:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17686964", "text": "You could use the splat operator `*`:\n\n```\n_, count, thing = * \"2_apples\".match /(\\d+)_(apple|orange)s?/\n```\n\nThe method `to_ary` is used for implicit coercion to an `Array` and thus should really be defined for classes that behave like arrays. But there is no `MatchData#push` for example, so I'm afraid this request can not be accepted. Also, having `to_ary` not returning the same thing as `to_a` would go against that idea and could be very confusing.\n", "created_at": "2013-05-09 20:13:42", "user": 33770, "id": 17686964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17687675", "text": "Using splat operator for this still seems tricky. My proposed version looks, um, more natural to both read and write.\n\n> thus should really be defined for classes that behave like arrays\n> But there is no MatchData#push for example\n\nI don't quite agree. I think implementing `#to_ary` just in sake of easy destructuring (thus easier capture access) is worth it already.\n", "created_at": "2013-05-09 20:26:49", "user": 315596, "id": 17687675}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17749227", "text": "Maybe someone else of ruby-core will be more clear than I am. I'm not even talking about the usefulness of your request, just about the fact that `to_ary` should be implemented only on classes that behave exactly like an array. Not even `Set` has `to_ary` defined.\nI'm closing your request, but if you want to have your formalize your request, please open a feature request on the official tracker: http://bugs.ruby-lang.org/\n", "created_at": "2013-05-10 23:13:33", "user": 33770, "id": 17749227}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 301, "updated_at": "2013-05-13 01:36:15", "user": 435791, "closed_at": "2013-05-13 01:36:15", "id": 14206844, "title": "Hash[] and {} are not equivalent, though they are similar", "url": "https://api.github.com/repos/ruby/ruby/issues/301", "created_at": "2013-05-10 19:57:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17748807", "text": "How exactly are they not equivalent?\n", "created_at": "2013-05-10 22:58:14", "user": 33770, "id": 17748807}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17750964", "text": "They accept different inputs and produce different outputs. For example, Hash[] accepts a single Array parameter in the form Hash[ [[1,2],[3,4]] ], but {} does not. They both construct a Hash, but they are not equivalent in function.\n", "created_at": "2013-05-11 00:24:23", "user": 435791, "id": 17750964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17752781", "text": "My reading of the doc says that, for example, `Hash[ [ [key, value], ... ] ]` is equivalent to `{key => value, ...}`. I'm not sure I see a problem with that, or why saying it is \"similar\" instead of \"equivalent\" improves things. Maybe @zzak will?\n", "created_at": "2013-05-11 02:16:14", "user": 33770, "id": 17752781}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17780346", "text": "I understand the confusion, but Hash[] is definitely not equivalent with literal form {}, so we should probably just say \"similar\".\n\nI will commit this, thank you @eam!\n", "created_at": "2013-05-12 16:14:05", "user": 277819, "id": 17780346}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Socket.tcp supports a :connect_timeout opt but not :timeout. This looks like a pretty straightforward mistake in 5515afbf\n", "labels": [], "number": 302, "updated_at": "2014-07-01 12:21:11", "user": 245734, "closed_at": "2013-05-12 01:47:15", "id": 14223712, "title": "Fix Socket.tcp doc comment", "url": "https://api.github.com/repos/ruby/ruby/issues/302", "created_at": "2013-05-11 16:31:19", "comments": [], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a fix for  http://bugs.ruby-lang.org/issues/8392\n\nMore specifically, the second example in Forwardable's documentation was a poor combination of two examples, and it did not make sense. This commit cleans it up.\n", "labels": [], "number": 303, "updated_at": "2013-05-19 20:35:12", "user": 99726, "closed_at": "2013-05-19 20:01:20", "id": 14228746, "title": "Clean up Forwardable documentation example", "url": "https://api.github.com/repos/ruby/ruby/issues/303", "created_at": "2013-05-11 23:54:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17789799", "text": "@joem Good catch, I'm glad you found this, but I'm afraid your example doesn't really work either. Did you try it?\n\nThis doc bug is a regression from my commit here ( 5452c2d ).\n\nLets come up with a good example for the overview of Forwardable.\n", "created_at": "2013-05-13 01:51:30", "user": 277819, "id": 17789799}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17798082", "text": "@zzak Yeah, I know it doesn't work on it's own. I couldn't come up with a short example that worked without additional code and was not overly redundant with the following example (the Queue example in the 'Another example' section), so I just went with the bare minimum improvement: make the class and methods match.\n\nWhat do you think about making it a complete working example, like so:\n\n``` ruby\nrequire 'forwardable'\n\nclass RecordCollection\n  extend Forwardable\n  def_delegator :@records, :[], :record_number\n  def_delegators :@records, :size, :<<, :map\n\n  def initialize\n    @records = [1, 2, 3]\n  end\n\nend\n\nr = RecordCollection.new\nr.record_number(0)   # => 1\nr.size               # => 3\nr << 4               # => [1, 2, 3, 4]\nr.map { |x| x * 2 }  # => [2, 4, 6, 8]\n```\n\nAlso, I'm not sure what the policy is for explicitly stating the 'require' in stdlib examples. I looked at a bunch others, and some examples have it while others don't.\n", "created_at": "2013-05-13 08:19:58", "user": 99726, "id": 17798082}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17848192", "text": "@joem That would be perfect, so long as the first example is cohesive.\n\nThe part right after that..\n\n> If the object isn’t a Module and Class, You can too extend Forwardable module.\n\nI think should just say\n\n> You can even extend regular objects with Forwardable.\n\nAnd yes, definitely mention the require bit.\n\nThank you for working on this!\n", "created_at": "2013-05-13 23:36:30", "user": 277819, "id": 17848192}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17919438", "text": "OK, there are those changes.\n\nAnother question: Do you think the first example (the first RecordCollection, not the second one I edited) should also have an initialize method to set up the @records array? As it is now, those lines of code can be input without error, but if you try to call the method that's delegated, record_number(), then you get an error, since the array was never set up.\n", "created_at": "2013-05-15 04:14:00", "user": 99726, "id": 17919438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17919546", "text": "And now that I'm looking at it, I think the 'printer' example could use a minor change to make it a little clearer. On first glance, I think it could be a little confusing that the regular object that the example is extending is a String and then it calls #puts on it that instance of a String, using another string as the argument. I think it could be better if instead of String.new, it used Array.new, or Hash.new, or some other object that is not usually as closely related to 'puts' as String, thereby making it even clearer that the 'puts' extension has nothing to do with the object.\n", "created_at": "2013-05-15 04:19:17", "user": 99726, "id": 17919546}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18123833", "text": "@joem Looks good, I changed it up a little as you can see by the commit.\n\nThank you for your contribution!\n", "created_at": "2013-05-19 20:05:41", "user": 277819, "id": 18123833}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18124279", "text": "Cool. Looks great to me!\n", "created_at": "2013-05-19 20:34:48", "user": 99726, "id": 18124279}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The DEFAULT constant on Random (core) is used to access Ruby's default PRNG directly. Access to it should be documented at least on one line. \n", "labels": [], "number": 304, "updated_at": "2013-05-13 01:11:45", "user": 598891, "closed_at": "2013-05-13 01:10:39", "id": 14241565, "title": "Documentation for Random::DEFAULT", "url": "https://api.github.com/repos/ruby/ruby/issues/304", "created_at": "2013-05-12 23:32:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17789107", "text": "@eLobato Thank you!\n", "created_at": "2013-05-13 01:11:45", "user": 277819, "id": 17789107}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi All,\n\nThis pull request about adding the facility level to Syslog::Logger without closing and reopening syslog just using priority from syslog(3)\n\nThis allows have different instances of Syslog::Logger which will log using different facility level. Example:\n\n``` ruby\nrequire 'syslog/logger'\n\nuser_log = Syslog::Logger.new \"ruby\"\nlocal0_log = Syslog::Logger.new \"ruby\", Syslog::LOG_LOCAL0\nlocal7_log = Syslog::Logger.new \"ruby\"\nlocal7_log.facility = Syslog::LOG_LOCAL7\n\nuser_log.info 'this line logged using user facility'\nlocal0_log.info 'this line logged using local0 facility'\nlocal7_log.info 'this line logged using local7 facility'\n\n```\n", "labels": [], "number": 305, "updated_at": "2014-07-01 06:03:20", "user": 545571, "closed_at": "2013-07-26 11:15:49", "id": 14260248, "title": "Add facility to Syslog::Logger", "url": "https://api.github.com/repos/ruby/ruby/issues/305", "created_at": "2013-05-13 13:30:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17972324", "text": "Seems legit to me. /cc @drbrain \n", "created_at": "2013-05-15 23:18:59", "user": 3124, "id": 17972324}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20668431", "text": "@drbrain Could you review this?\n", "created_at": "2013-07-09 11:41:26", "user": 12301, "id": 20668431}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21395627", "text": "Thank you.\n@drbrain, it's your turn.\n", "created_at": "2013-07-23 06:29:04", "user": 10236, "id": 21395627}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21447987", "text": "I have no problem with it. Sorry for the delay!\n", "created_at": "2013-07-23 21:38:02", "user": 9831, "id": 21447987}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21459536", "text": "Do we want to maintain https://github.com/sparklemotion/sysloglogger, or just leave it and integrate changes directly into ruby?\n", "created_at": "2013-07-24 02:13:01", "user": 10236, "id": 21459536}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pretty much what the commits say. I removed a line that should not be on BigMath's documentation (http://www.ruby-doc.org/stdlib-1.9.3/libdoc/bigdecimal/rdoc/BigMath.html) see top of that page,  'mathematical functions' should not be there. \n\nAlso added a bunch of examples of usage and formatted method parameters on the existing doc.\n\nRemoved as BigMath is documented on lib/bigdecimal/math.rb\nDocumentation for BigMath module\n", "labels": [], "number": 306, "updated_at": "2013-05-19 21:10:53", "user": 598891, "closed_at": "2013-05-19 21:02:33", "id": 14287218, "title": "Documentation and Examples for BigMath ext module", "url": "https://api.github.com/repos/ruby/ruby/issues/306", "created_at": "2013-05-13 23:34:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/17929659", "text": "@zzak I was wondering if it makes more sense to use 'BigDecimal', 'Numeric' or whichever type it is, instead of x, prec, etc.. see line 36 for an example.\n\nWould Rdoc link to bigdecimal, numeric etc if I simply write their first letter in uppercase? It seems not to be the case for C core comments.\n", "created_at": "2013-05-15 09:56:35", "user": 598891, "id": 17929659}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18047712", "text": "Feel free to ping me on #ruby-core for feedback\n", "created_at": "2013-05-17 07:37:02", "user": 598891, "id": 18047712}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18124788", "text": "@eLobato Thank you for your contribution!\n", "created_at": "2013-05-19 21:10:53", "user": 277819, "id": 18124788}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "MAHINE => MACHINE\n", "labels": [], "number": 307, "updated_at": "2013-05-17 13:21:11", "user": 2983, "closed_at": "2013-05-17 12:53:04", "id": 14397213, "title": "fixed typo", "url": "https://api.github.com/repos/ruby/ruby/issues/307", "created_at": "2013-05-16 09:22:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/net/http/response.rb: transparently deflates the response body,\n  removes the \"content-encoding\" response header, but does not adjust\n  the \"content-length\" header accordingly.\n  So, pass the context to the Inflater so that we count the\n  uncompressed data for every chunk inflated, and then on finish we\n  set the right Content-Length.\n  [Bug #8182]\n- test/net/http/test_httpresponse.rb: enhance testcase to check\n  the right Content-Length\n", "labels": [], "number": 308, "updated_at": "2014-06-12 15:52:25", "user": 15332, "closed_at": "2013-05-19 22:37:49", "id": 14397367, "title": "[Bug #8182] XMLRPC request fails with \"Wrong size. Was 31564, should be 1501\"", "url": "https://api.github.com/repos/ruby/ruby/issues/308", "created_at": "2013-05-16 09:26:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18126077", "text": "Closing this in favor of the ticket on redmine: http://bugs.ruby-lang.org/issues/8182\n", "created_at": "2013-05-19 22:37:49", "user": 277819, "id": 18126077}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request contains a more detailed doc for Math core, which includes domains and codomains of functions, classes that the methods accept as parameters, examples for every function, and a few others.\n", "labels": [], "number": 309, "updated_at": "2013-05-20 10:47:05", "user": 598891, "closed_at": "2013-05-19 22:34:18", "id": 14418429, "title": "Math core docs, domains, codomains..", "url": "https://api.github.com/repos/ruby/ruby/issues/309", "created_at": "2013-05-16 17:57:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18047710", "text": "Feel free to ping me on #ruby-core for feedback\n", "created_at": "2013-05-17 07:36:57", "user": 598891, "id": 18047710}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18069068", "text": "Pretty nice, especially the domains/codomains.\n\n@zzak I am less sure about argument types, they are all numeric if I am not mistaken (also what is the RDoc syntax to specify the type?).\nAnd what about UTF-8 characters? They are nice, but does the whole toolchain support it?\n", "created_at": "2013-05-17 15:42:25", "user": 168854, "id": 18069068}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18069226", "text": "No types in the arguments, and keep it ASCII\n", "created_at": "2013-05-17 15:45:29", "user": 277819, "id": 18069226}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18070221", "text": "I'll remove the UTF-8 characters, but what about types on return values, and definitions like this https://github.com/ruby/ruby/pull/309/files#L0R643 ?\n", "created_at": "2013-05-17 16:00:55", "user": 598891, "id": 18070221}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18070567", "text": "Types are ok, for both, but not in the syntax you were using.\n", "created_at": "2013-05-17 16:06:42", "user": 277819, "id": 18070567}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18072394", "text": "@zzak  What syntax would you suggest?\n", "created_at": "2013-05-17 16:39:31", "user": 598891, "id": 18072394}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18077349", "text": "Sorry, I thought we discussed this on irc, basically just do something\nlike: Math.foo(number, other_number) -> Float\n\nOr Math.bar(number, float) -> Float should suffice. I'm not super objective\non this because there are a number of styles used throughout the core docs.\nBut since I've never seen anything like foo(Type: local), then i would\nsuggest against it.\n\nOn Fri, May 17, 2013 at 12:39 PM, Daniel Lobato García <\nnotifications@github.com> wrote:\n\n> @zzak https://github.com/zzak What syntax would you suggest?\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/309#issuecomment-18072394\n> .\n", "created_at": "2013-05-17 18:11:35", "user": 277819, "id": 18077349}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18078173", "text": "@zzak There you go. I know types on the arguments look somewhat exotic in Ruby but I personally found them useful to know what kind of thing could I put in there.\n", "created_at": "2013-05-17 18:26:53", "user": 598891, "id": 18078173}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18078634", "text": "Beautiful, thank you! I will review the rest later this evening hopefully.\n\nOn Fri, May 17, 2013 at 2:27 PM, Daniel Lobato García <\nnotifications@github.com> wrote:\n\n> @zzak https://github.com/zzak There you go. I know types on the\n> arguments look somewhat exotic in Ruby but I personally found them useful\n> to know what kind of thing could I put in there.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/309#issuecomment-18078173\n> .\n", "created_at": "2013-05-17 18:35:39", "user": 277819, "id": 18078634}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18126034", "text": "@eLobato Thank you for your contribution!\n", "created_at": "2013-05-19 22:35:39", "user": 277819, "id": 18126034}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 310, "updated_at": "2013-05-19 14:16:26", "user": 45995, "closed_at": "2013-05-19 14:16:26", "id": 14491219, "title": "document fix, change default script encoding ", "url": "https://api.github.com/repos/ruby/ruby/issues/310", "created_at": "2013-05-19 02:12:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18118319", "text": "This patch was merged by r40828. Thanks.\n", "created_at": "2013-05-19 14:16:26", "user": 37002, "id": 18118319}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\nuse ruby -run -e httpd .\n```\n\nrun a webrick http server, can not show no 8bit-ascii directory/file name.\n\nthis patch can fix this problem, but not more other test.\n\n```\nmodified:   webrick/htmlutils.rb\nmodified:   webrick/httpservlet/filehandler.rb\nmodified:   webrick/httputils.rb\n```\n\nruby issue\n\n```\nhttps://bugs.ruby-lang.org/issues/8425\n```\n", "labels": [], "number": 311, "updated_at": "2013-05-19 18:41:08", "user": 45995, "closed_at": "2013-05-19 18:41:08", "id": 14491360, "title": "webrick show local filesystem charset bug", "url": "https://api.github.com/repos/ruby/ruby/issues/311", "created_at": "2013-05-19 02:36:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18122482", "text": "Closing this in favor of redmine ticket: https://bugs.ruby-lang.org/issues/8425\n", "created_at": "2013-05-19 18:41:07", "user": 277819, "id": 18122482}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @zzak\n", "labels": [], "number": 312, "updated_at": "2013-05-19 18:18:49", "user": 4468419, "closed_at": "2013-05-19 18:18:49", "id": 14492570, "title": "Document PP::ObjectMixin", "url": "https://api.github.com/repos/ruby/ruby/issues/312", "created_at": "2013-05-19 05:45:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @zzak \n", "labels": [], "number": 313, "updated_at": "2014-07-14 04:45:53", "user": 4468419, "closed_at": "2013-05-20 14:33:30", "id": 14522089, "title": "Fixed Forwardable overview example", "url": "https://api.github.com/repos/ruby/ruby/issues/313", "created_at": "2013-05-20 14:27:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @nobu\n", "labels": [], "number": 314, "updated_at": "2017-10-22 01:15:03", "user": 45995, "closed_at": "2017-10-22 01:15:03", "id": 14548562, "title": "* lib/webrick/httpservlet/filehandler.rb: some fix on win platform or not utf-8 platform", "url": "https://api.github.com/repos/ruby/ruby/issues/314", "created_at": "2013-05-21 02:48:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20788863", "text": "@windwiny Do you have a ticket in the bug tracker for this yet?\n\nCan you reproduce a failing test or script?\n\n@nobu ping!\n", "created_at": "2013-07-11 03:49:44", "user": 277819, "id": 20788863}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354251", "text": "@windwiny ping!\n\nCould you give some more feedback?\n", "created_at": "2013-10-15 17:21:15", "user": 277819, "id": 26354251}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26575759", "text": "@zzak hi, did you have a windows system?\n\ni am test is in CP936, a directory include filename 桌面\n\nrun webrick in console:\n\n```\nruby -run -e httpd . -p 8000\n```\n\nand open link in IE:\n\n```\nhttp://127.0.0.1:8000/\n```\n\nthe IE show:\n\n```\nInternal Server Error\nincompatible encoding regexp match (ASCII-8BIT regexp with GBK string) \n--------------------------------------------------------------------------------\n\nWEBrick/1.3.1 (Ruby/2.0.0/2013-06-27) at 127.0.0.1:8000 \n```\n\nconsole log:\n\n```\n[2013-10-18 14:54:48] INFO  WEBrick 1.3.1\n[2013-10-18 14:54:48] INFO  ruby 2.0.0 (2013-06-27) [i386-mingw32]\n[2013-10-18 14:54:48] INFO  WEBrick::HTTPServer#start: pid=1560 port=8000\n[2013-10-18 14:54:50] ERROR Encoding::CompatibilityError: incompatible encoding regexp match (ASCII-8BIT regexp with GBK string)\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httputils.rb:440:in `gsub'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httputils.rb:440:in `_escape'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httputils.rb:455:in `escape'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/filehandler.rb:465:in `block in set_dir_list'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/filehandler.rb:457:in `each'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/filehandler.rb:457:in `set_dir_list'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/filehandler.rb:218:in `do_GET'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/abstract.rb:106:in `service'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpservlet/filehandler.rb:213:in `service'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpserver.rb:138:in `service'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/httpserver.rb:94:in `run'\n        e:/ux/ruby2/lib/ruby/2.0.0/webrick/server.rb:295:in `block in start_thread'\nlocalhost - - [18/Oct/2013:14:54:50 中国标准时间] \"GET / HTTP/1.1\" 500 350\n```\n", "created_at": "2013-10-18 07:03:04", "user": 45995, "id": 26575759}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26601327", "text": "Use of force_encoding don't seem appropriate.\n", "created_at": "2013-10-18 14:45:36", "user": 16700, "id": 26601327}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26694639", "text": "chcp can't affect filesystem encoding, which is system-wide.\n", "created_at": "2013-10-21 06:09:26", "user": 16700, "id": 26694639}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338443427", "text": "Can you address this patch to https://bugs.ruby-lang.org/projects/ruby-trunk/issues ?\r\n\r\nWebrick is only handled on our redmine tracker. Thanks.", "created_at": "2017-10-22 01:15:03", "user": 12301, "id": 338443427}], "assignees": [44209, 44209], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A couple of C-exts (stringio and io/console) define modules with lowercase\nnames. This fixes it, given that in Ruby constants must be capitalized.\n", "labels": [], "number": 315, "updated_at": "2014-06-27 19:08:50", "user": 83234, "closed_at": "2013-05-23 18:10:33", "id": 14684334, "title": "Fix lowercase module names", "url": "https://api.github.com/repos/ruby/ruby/issues/315", "created_at": "2013-05-23 16:52:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18357551", "text": "LGTM /cc @nobu \n", "created_at": "2013-05-23 17:09:37", "user": 277819, "id": 18357551}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18361304", "text": "These modules are intentionally hidden, so I will close this. See @8335ce70\n", "created_at": "2013-05-23 18:10:32", "user": 9831, "id": 18361304}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18396763", "text": "@drbrain isn't that what private constants would be for? lowercase constant names seem like invalid Ruby, not \"hidden\" :(\n", "created_at": "2013-05-24 10:11:29", "user": 83234, "id": 18396763}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18429846", "text": "If @nobu made them lowercase (and inaccessible) it's likely there's a reason they weren't made private. See also @db41a18, they still have a lowercase name.\n", "created_at": "2013-05-24 21:03:13", "user": 9831, "id": 18429846}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19098644", "text": "@drbrain thanks :) I'll just ask nobu.\n", "created_at": "2013-06-07 10:02:28", "user": 83234, "id": 19098644}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19098647", "text": "@nobu is there a link to anywhere where I could read why are those constants lowercase [and not private]?\n", "created_at": "2013-06-07 10:02:31", "user": 83234, "id": 19098647}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19487234", "text": "Because it's just easier in C.\n", "created_at": "2013-06-14 23:39:40", "user": 16700, "id": 19487234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28394970", "text": "Whatever...\n", "created_at": "2013-11-13 13:47:27", "user": 83234, "id": 28394970}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28458203", "text": "Just `private_constant` wasn't introduced then.\n", "created_at": "2013-11-14 04:13:56", "user": 16700, "id": 28458203}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @zzak :cat: \n", "labels": [], "number": 316, "updated_at": "2014-06-27 01:57:30", "user": 4468419, "closed_at": "2013-05-23 21:49:26", "id": 14697128, "title": "Fix example in Forwardable overview", "url": "https://api.github.com/repos/ruby/ruby/issues/316", "created_at": "2013-05-23 21:41:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In documentation, if you're constructing a Key class from a file named `private_key.pem`, it's probably going to not return true on #public? .\n", "labels": [], "number": 317, "updated_at": "2013-05-24 18:42:11", "user": 5363, "closed_at": "2013-05-24 18:42:11", "id": 14737656, "title": "Loading a key example contains a filename that does not seem to match the intended output", "url": "https://api.github.com/repos/ruby/ruby/issues/317", "created_at": "2013-05-24 18:15:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18422687", "text": "Actually, I should have followed through the examples with irb. It does return true. How odd. Nevermind.\n", "created_at": "2013-05-24 18:42:11", "user": 5363, "id": 18422687}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 318, "updated_at": "2013-05-25 02:28:57", "user": 10137, "closed_at": "2013-05-25 02:28:57", "id": 14751359, "title": "ruby 2.0.0", "url": "https://api.github.com/repos/ruby/ruby/issues/318", "created_at": "2013-05-25 02:17:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "FileUtils.mkdir and mkdir_p can't handle root directory, so I fixed them.\n\n```\n$ ruby -rfileutils -e 'FileUtils.mkdir(\"/\")'\n/Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:247:in `mkdir': No such file or directory -  (Errno::ENOENT)\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:247:in `fu_mkdir'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:176:in `block in mkdir'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:175:in `each'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:175:in `mkdir'\n    from -e:1:in `<main>'\n$ ruby -rfileutils -e 'FileUtils.mkdir_p(\"/\")'\n/Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:247:in `mkdir': No such file or directory -  (Errno::ENOENT)\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:247:in `fu_mkdir'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:221:in `block (2 levels) in mkdir_p'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:219:in `reverse_each'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:219:in `block in mkdir_p'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:205:in `each'\n    from /Users/komamitsu/.rbenv/versions/1.9.3-p392/lib/ruby/1.9.1/fileutils.rb:205:in `mkdir_p'\n    from -e:1:in `<main>'\n```\n", "labels": [], "number": 319, "updated_at": "2014-07-24 15:40:01", "user": 59043, "closed_at": "2013-06-03 14:23:48", "id": 14844805, "title": "fix FileUtils.mkdir('/')", "url": "https://api.github.com/repos/ruby/ruby/issues/319", "created_at": "2013-05-28 15:19:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18844442", "text": "Merged by r41047. Thanks :smiley:\n", "created_at": "2013-06-03 14:23:48", "user": 37002, "id": 18844442}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current names of methods like Socket.gethostname are not very idiomatic of Ruby. In order to maintain backwards compatibility we decided to alias to the more idiomatic names.\n## \n\n@adkron\n@zph \n", "labels": [], "number": 320, "updated_at": "2014-06-15 16:09:19", "user": 4253, "closed_at": "2013-05-29 01:30:10", "id": 14868484, "title": "Utilize more idiomatic naming conventions for Socket class methods", "url": "https://api.github.com/repos/ruby/ruby/issues/320", "created_at": "2013-05-29 00:29:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18590939", "text": "These methods are named after POSIX standard\n", "created_at": "2013-05-29 01:30:10", "user": 277819, "id": 18590939}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18591511", "text": "@zzak I understand that they are named after the POSIX standards. That is why we only aliased the methods. I think this should be reopened for discussion.\n", "created_at": "2013-05-29 01:49:08", "user": 4253, "id": 18591511}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18591614", "text": "Please open a feature request on http://bugs.ruby-lang.org/ for discussion.\n", "created_at": "2013-05-29 01:53:30", "user": 277819, "id": 18591614}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18593200", "text": "@zzak thanks for pointing me in the right direction.\n\n@zph created a ticket at https://bugs.ruby-lang.org/issues/8459\n", "created_at": "2013-05-29 02:53:31", "user": 4253, "id": 18593200}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 321, "updated_at": "2013-05-31 07:04:56", "user": 3829, "closed_at": "2013-05-31 07:02:56", "id": 14935695, "title": "Add missing closing paren in SSLSocket#initialize documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/321", "created_at": "2013-05-30 11:19:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18674545", "text": "Not sure about the dot\n", "created_at": "2013-05-30 11:25:00", "user": 199499, "id": 18674545}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18675260", "text": "Let me force-push it with the dot outside the parens\n", "created_at": "2013-05-30 11:44:09", "user": 3829, "id": 18675260}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18675301", "text": "how about now @Nami-Doc ?\n", "created_at": "2013-05-30 11:45:09", "user": 3829, "id": 18675301}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18675927", "text": "I think it's better :).\n", "created_at": "2013-05-30 12:03:03", "user": 199499, "id": 18675927}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18726928", "text": "@knewter @Nami-Doc Thank you!\n", "created_at": "2013-05-31 07:04:55", "user": 277819, "id": 18726928}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed three typos in comments (`object.c` and `proc.c`).\n", "labels": [], "number": 322, "updated_at": "2013-05-31 07:10:54", "user": 935203, "closed_at": "2013-05-31 07:08:11", "id": 14976171, "title": "Minor comment typo fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/322", "created_at": "2013-05-31 05:03:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18727410", "text": "@Anorov Thank you!\n", "created_at": "2013-05-31 07:10:54", "user": 277819, "id": 18727410}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently\n\n``` ruby\n\n9.05.to_d.to_s('F') => \"9.050000000000001\"\n\n```\n\nwhich adds the extra '1'\nThis patch tries to fix this behaviour and associated tests\n", "labels": [], "number": 323, "updated_at": "2014-06-18 07:37:26", "user": 567626, "closed_at": "2013-06-04 06:38:33", "id": 15102817, "title": "Fix Float#to_d behaviour", "url": "https://api.github.com/repos/ruby/ruby/issues/323", "created_at": "2013-06-04 05:42:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18890337", "text": "cc @mrkn\n", "created_at": "2013-06-04 05:43:38", "user": 567626, "id": 18890337}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18892849", "text": "Anyone knows _why_ it was `Float::DIG+1` earlier?\n", "created_at": "2013-06-04 07:17:18", "user": 499, "id": 18892849}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18893556", "text": "@judofyr Here's the commit: 079fb8d\n", "created_at": "2013-06-04 07:38:10", "user": 277819, "id": 18893556}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The array concatenation example is incorrect. Concatenation returns a new array, it does not concatenate in place as the example suggests.\n\nIn the current documentation, `a` would still be `[\"a\", \"b\", \"c\"]`, not `[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]`.\n", "labels": [], "number": 324, "updated_at": "2013-06-13 04:53:44", "user": 1957122, "closed_at": "2013-06-04 16:17:14", "id": 15123922, "title": "Fix incorrect array.c concat documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/324", "created_at": "2013-06-04 15:10:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/18919187", "text": "Indeed, thanks!\n", "created_at": "2013-06-04 15:59:36", "user": 168854, "id": 18919187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/date/date_parse.c (rfc2822_cb): check if wday is given, since it\n  can be omitted.\n", "labels": [], "number": 325, "updated_at": "2014-07-31 08:42:06", "user": 16700, "closed_at": "2013-07-21 18:40:39", "id": 15585498, "title": "date_parse.c: missing wday", "url": "https://api.github.com/repos/ruby/ruby/issues/325", "created_at": "2013-06-15 02:35:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20669016", "text": "@nobu Can I merge this?\n", "created_at": "2013-07-09 11:54:39", "user": 12301, "id": 20669016}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21314598", "text": "This can be closed by [r42100](https://github.com/ruby/ruby/commit/ff7772062f4c10d88249a155dfd918a385dda577)\n", "created_at": "2013-07-21 18:40:39", "user": 277819, "id": 21314598}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changed negative if conditions to unless' for improved readability.\n", "labels": [], "number": 326, "updated_at": "2014-06-17 19:06:45", "user": 1687642, "closed_at": "2013-07-11 04:03:16", "id": 15597538, "title": "Changed negative if conditions to unless'", "url": "https://api.github.com/repos/ruby/ruby/issues/326", "created_at": "2013-06-15 22:01:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19511677", "text": "@akr: What do you think?\n\n(@akr is the maintainer of securerandom, please wait his answer).\n", "created_at": "2013-06-16 12:30:34", "user": 168854, "id": 19511677}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20789354", "text": "@rafalchmiel Looks good, thank you!\n\n@eregon This patch was so simple, I felt it was ok to commit. I will suffer the wrath of Tanaka-san :heart: :sparkling_heart: \n", "created_at": "2013-07-11 04:10:51", "user": 277819, "id": 20789354}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790299", "text": "While contributions are always welcome, I don't think this kind of patches are generally worth looking into for busy and productive maintainers like @akr, because they much belong to personal tastes and don't really fix or improve anything.\nIt would only invite the risk of introducing unnecessary bugs, like the one above that was luckily found before merging.\n", "created_at": "2013-07-11 04:52:32", "user": 10236, "id": 20790299}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20798724", "text": "@knu I agree, but I did not know what was best (reject or merge). I wanted an opinion on the code style, which probably only akr could give us (I do not want to make time lost to maintainers for simple style changes because they have to update with trunk).\n", "created_at": "2013-07-11 09:02:25", "user": 168854, "id": 20798724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`make` has an order which applies environment variable.\nIf we want to disable existence environment variable in Makefile,\nthen using make's argument is better.\n\nI hit this issue when try to make [td-agent](https://github.com/treasure-data/td-agent) RPM package with Ruby 2.0 (this report seems related: https://bugzilla.redhat.com/show_bug.cgi?id=921650 ).\nI don't know the better solution but this bug is critical for our RPM packaging.\n\nAnd maybe, 2.1 has same bug.\n", "labels": [], "number": 327, "updated_at": "2014-06-12 17:45:57", "user": 16928, "closed_at": "2013-06-25 13:30:39", "id": 15606855, "title": "Fix DESTDIR related 'make' issue when DESTDIR specified", "url": "https://api.github.com/repos/ruby/ruby/issues/327", "created_at": "2013-06-16 16:01:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19522005", "text": "@drbrain Please review this pull request\n", "created_at": "2013-06-17 00:34:43", "user": 12301, "id": 19522005}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19524121", "text": "I'd like to see the Makefile that is causing the problem.  Does it define DESTDIR (when it shouldn't) ?\n", "created_at": "2013-06-17 02:42:18", "user": 10236, "id": 19524121}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19524158", "text": "I mean, if Makefile defines DESTDIR inside, `make DESTDIR=` does not help anyway e.g. on *BSD make.\n", "created_at": "2013-06-17 02:44:11", "user": 10236, "id": 19524158}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19662878", "text": "I don't know the details of *BSD make so I don't know the best solution.\nIf there is more better approach, please use!\n\nThe important thing for us is to fix this critical bug :)\n", "created_at": "2013-06-19 04:46:56", "user": 16928, "id": 19662878}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19664126", "text": "I guess no one has responded to this issue because they don't see what the problem is and how this is a bug on the rubygems side.\n\nTo be specific,  how an unexpected DESTDIR value comes in?  That's why I asked for a copy of the Makefile in question.\n", "created_at": "2013-06-19 05:42:18", "user": 10236, "id": 19664126}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19855893", "text": "ping.\nCan I merge it into CRuby repository?\n", "created_at": "2013-06-22 12:19:56", "user": 21976, "id": 19855893}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19865485", "text": "@knu Installation flow of td-agent is `make install DESTDIR=$RPM_BUILD_ROOT` -> `gem install` -> `make install` (specifying DESTDIR is popular RPM manner).\nIn RPM process, DESTDIR and other environment variables are assigned into MAKEFLAGS, so DESTDIR is not cleared at last `make install`.\nSo maybe, defining `override DESTDIR =` in generated Makefile or my patch resolves this issue.\n\nThis issue is introduced since Ruby 2.0, so rubygems / mkmf.rb breaks a compatibility.\nIf this is not a bug of ruby side, need packging guide to avoid DESTDIR problem of rubygems.\n", "created_at": "2013-06-22 22:02:38", "user": 16928, "id": 19865485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19868355", "text": "Ah, MAKEFLAGS.  Now I see the problem.\n\nSo, why not always pass DESTDIR as below?\nI also changed the order of arguments as nmake may not allow macro definitions after a target name.\n\n```\ndiff --git a/lib/rubygems/ext/builder.rb b/lib/rubygems/ext/builder.rb\nindex 9b6ad30..ab454b4 100644\n--- a/lib/rubygems/ext/builder.rb\n+++ b/lib/rubygems/ext/builder.rb\n@@ -23,9 +23,14 @@ class Gem::Ext::Builder\n       make_program = (/mswin/ =~ RUBY_PLATFORM) ? 'nmake' : 'make'\n     end\n\n-    ['', ' install'].each do |target|\n-      cmd = \"#{make_program}#{target}\"\n-      run(cmd, results, \"make#{target}\")\n+    ['', 'install'].each do |target|\n+      # Pass DESTDIR via command line to override what's in MAKEFLAGS\n+      cmd = [\n+        make_program,\n+        '\"DESTDIR=%s\"' % ENV['DESTDIR'],\n+        target\n+      ].join(' ').rstrip\n+      run(cmd, results, \"make #{target}\".rstrip)\n     end\n   end\n```\n", "created_at": "2013-06-23 03:14:14", "user": 10236, "id": 19868355}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19868996", "text": "I'll fix the tests and send a pull request to the upstream (rubygems/rubygems) later.\n", "created_at": "2013-06-23 04:36:56", "user": 10236, "id": 19868996}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19870235", "text": "@knu I tested your patch and works fine. Thanks!\n", "created_at": "2013-06-23 07:22:27", "user": 16928, "id": 19870235}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19889532", "text": "I think it is a bug in mkmf.rb that DESTDIR is embedded unexpectedly.\n", "created_at": "2013-06-24 05:20:06", "user": 16700, "id": 19889532}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19890808", "text": "@nobu I'm afraid there is nothing mkmf.rb can or should do here, because in principle DESTDIR is for \"make install\" and it may not necessarily be specified (possibly through MAKEFLAGS) in \"ruby extconf.rb\" or \"make\".\n\nSo, I think it's only the driver (rubygems in this context) that can and should take full care of any variable that might affect the installation process.\n", "created_at": "2013-06-24 06:21:27", "user": 10236, "id": 19890808}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Example in MiniTest::Mock#expect is missing a close parenthesis.\n", "labels": [], "number": 328, "updated_at": "2014-07-03 03:30:03", "user": 1314085, "closed_at": "2013-06-16 23:29:56", "id": 15611971, "title": "Fix syntax error in example code", "url": "https://api.github.com/repos/ruby/ruby/issues/328", "created_at": "2013-06-16 22:54:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19521088", "text": "@mrgilman Nice catch! Do you mind submitting this to the upstream repo ([seattlerb/minitest](https://github.com/seattlerb/minitest)) instead?\n\nThank you!\n", "created_at": "2013-06-16 23:24:37", "user": 277819, "id": 19521088}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19521157", "text": "@zzak No problem! See: https://github.com/seattlerb/minitest/pull/312\n", "created_at": "2013-06-16 23:29:56", "user": 1314085, "id": 19521157}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This should fix the following error when using FileUtils#chmod. Unfortunately I can't find any instructions on how to run the test suite, so I haven't put a test in for it yet. If you could point me in the right direction for that then I'll happily add one :)\n\n```\n[00:30:36] Creating deploy account...                                              \n\nuseradd --create-home --shell /bin/bash --groups adm deploy\nmkdir -p /home/deploy/.ssh\nsetting up sudoers...\nadding id_teleport.pub to authorized_keys...\n/usr/local/lib/ruby/2.0.0/fileutils.rb:970:in `chmod': undefined method `mode_to_s' for File\nUtils:Module (NoMethodError)\n        from /tmp/_teleported/gem/teleport/util.rb:214:in `chmod'\n        from /tmp/_teleported/gem/teleport/util.rb:123:in `mkdir'\n        from /tmp/_teleported/gem/teleport/util.rb:130:in `mkdir_if_necessary'\n        from /tmp/_teleported/gem/teleport/install.rb:189:in `_create_user'\n        from /tmp/_teleported/gem/teleport/install.rb:40:in `block (2 levels) in initialize'\n        from /tmp/_teleported/gem/teleport/install.rb:261:in `_with_callback'\n        from /tmp/_teleported/gem/teleport/install.rb:39:in `block in initialize'\n        from /tmp/_teleported/gem/teleport/install.rb:261:in `_with_callback'\n        from /tmp/_teleported/gem/teleport/install.rb:36:in `initialize'\n        from /tmp/_teleported/gem/teleport/main.rb:164:in `new'\n        from /tmp/_teleported/gem/teleport/main.rb:164:in `install'\n        from /tmp/_teleported/gem/teleport/main.rb:20:in `initialize'\n        from -e:1:in `new'\n        from -e:1:in `<main>'\n[01:30:36] Failed!       \n```\n", "labels": [], "number": 329, "updated_at": "2014-11-04 06:52:57", "user": 94277, "closed_at": "2014-11-04 06:52:56", "id": 15620733, "title": "Bugfix for missing module method error in FileUtils#chmod", "url": "https://api.github.com/repos/ruby/ruby/issues/329", "created_at": "2013-06-17 08:07:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20789415", "text": "@robotmay There's a [few docs](http://ruby-doc.org/core-2.0/doc/contributing_rdoc.html#label-Running+tests) available for [running tests](https://bugs.ruby-lang.org/projects/ruby/wiki/DeveloperHowto#Test)\n\nHowever, I think I remember @nobu saying there was no test for the module functions.\n\nMaybe you can write one?\n", "created_at": "2013-07-11 04:13:40", "user": 277819, "id": 20789415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354360", "text": "@robotmay Could you show the code that caused this error? Perhaps a smaller reproducible example would help us resolve this sooner.\n\nThank you\n", "created_at": "2013-10-15 17:22:41", "user": 277819, "id": 26354360}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26360698", "text": "@zzak Gah, I completely forgot about this; thanks for reminding me. I'll take a look at it tomorrow and see if I can provide you with something!\n", "created_at": "2013-10-15 18:38:40", "user": 94277, "id": 26360698}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32987366", "text": "@robotmay you should report https://github.com/gurgeous/teleport at first.\n", "created_at": "2014-01-22 02:12:30", "user": 12301, "id": 32987366}], "assignees": [16700, 16700], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "XMLRPC specification never stated that faultCode must be a integer.\nsee http://xmlrpc.scripting.com/spec.html\n\nThe Python xmlrpclib accepts Strings and maybe other implementation does.\nThis proposal is a try to stay in conformity with the specification and compatible with other implementations\n", "labels": [], "number": 330, "updated_at": "2013-06-26 13:54:45", "user": 5979, "closed_at": "2013-06-26 13:54:45", "id": 15698926, "title": "modified XMLRPC::Parser faultCode to accept String along with Integer see comment below", "url": "https://api.github.com/repos/ruby/ruby/issues/330", "created_at": "2013-06-18 16:54:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19961796", "text": "@kou Could you review this pull request?\n", "created_at": "2013-06-25 09:01:39", "user": 12301, "id": 19961796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19963531", "text": "The XML-RPC specification says:\n\n> The <methodResponse> could also contain a <fault> which contains a <value> which is a <struct> containing two elements, one named <faultCode>, an <int> and one named <faultString>, a <string>.\n\nIt seems that faultCode should be integer.\n\nCan I close this pull request? (@hsbt, could you add me to the ruby organization to close this pull request?)\n", "created_at": "2013-06-25 09:39:59", "user": 27350, "id": 19963531}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19964092", "text": "@kou added you into ruby/ruby team :octocat: \n", "created_at": "2013-06-25 09:49:00", "user": 12301, "id": 19964092}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19965416", "text": "Thanks!\nI will wait a response for a few weeks.\n", "created_at": "2013-06-25 10:03:53", "user": 27350, "id": 19965416}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20047213", "text": "@kou Yes, you are right, I 've read it twice the day I made this patch, and read it badly :) I was too tired and lulled by Pythonist folks ...\n\nYou can close for me.\n", "created_at": "2013-06-26 13:37:36", "user": 5979, "id": 20047213}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20048620", "text": "Thanks for confirming it! :-)\nI close it.\n", "created_at": "2013-06-26 13:54:45", "user": 27350, "id": 20048620}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Encoding changes from 1.8 to 1.9 has made calls to CGI::unescapeHTML more expensive, even if no escaping needs to be done. While a few calls will have negligible difference, unescaping each line of a large CSV file will cause the losses to stack up.\n\nBenchmarking\n\n``` ruby\nrequire 'cgi'\nrequire 'benchmark'\n\nBenchmark.bm(5) do |x|\n  puts RUBY_VERSION\n  string = CGI.escapeHTML(\"A\") # => \"A\"\n    x.report(\"CGI::unescapeHTML\") do\n    100_000.times do\n      CGI.unescapeHTML(string)\n    end\n  end\nend\n```\n\n1.8.7-p371\n\n```\nuser     system      total        real\nCGI::unescapeHTML  0.040000   0.000000   0.040000 (  0.041975)\n```\n\n1.9.3-p429 (with railsexpress patches and GC tuning)\n\n```\nRUBY_GC_MALLOC_LIMIT=1000000000\nRUBY_FREE_MIN=500000\nRUBY_HEAP_MIN_SLOTS=40000\n\nuser     system      total        real\nCGI::unescapeHTML  0.120000   0.010000   0.130000 (  0.127006)\n\nuser     system      total        real\nCGI::unescapeHTML with performance change  0.060000   0.000000   0.060000 (  0.058035)\n```\n", "labels": [], "number": 331, "updated_at": "2013-06-19 01:02:57", "user": 1709841, "closed_at": "2013-06-19 01:01:21", "id": 15714865, "title": "Performance change: should only attempt unescaping if escape character may be present", "url": "https://api.github.com/repos/ruby/ruby/issues/331", "created_at": "2013-06-18 21:49:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19654967", "text": "Should have rebased other changes so I will resubmit this request.\n", "created_at": "2013-06-19 01:02:57", "user": 1709841, "id": 19654967}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please note: I'm not 100% sure that this fix is the correct fix, so this patch requires careful scrutiny by someone familiar with the BigDecimal implementation. However, the test cases I added do show a clear problem with BigMath.exp of immediate types with values < 0 and may be useful to integrate regardless of whether the fix goes in.\n\nProblem: BigMath.exp(-x, n) == BigMath.exp(x, n) whenever x is an immediate type. For example, BigMath.exp(-1, 20) is 2.718. The correct value is 0.3679 (that is, 1/2.718)\n\nMechanism: It appears that the VALUE x passed into BigMath_s_exp is promoted to a Real _vx. At bigdecimal.c:2742, the code flips the sign bit on negative values as part of the implementation of the identity that E *_ -x == 1 / (E *\\* x). Later at line 2774, the sign is rechecked and the reciprocal of the result is returned if the original argument was negative.\n\nHowever, in the calculation loop at line 2765, it's the original VALUE x that's used in the iteration instead of vx->obj. This works OK for BigDecimals since VPSetSign reaches though vx into the original x. (That is itself a separate problem, since it results in the argument being unexpectedly modified; I will submit a separate issue for that.) But immediate types still have their original (negative) values.\n\nFix: I suspect that it's just ToValue(vx) that's intended here instead of x.\n", "labels": [], "number": 332, "updated_at": "2014-06-19 08:53:54", "user": 443181, "closed_at": "2013-06-25 12:34:05", "id": 15718103, "title": "Fix BigMath::exp for negative immediate types, add tests for these cases", "url": "https://api.github.com/repos/ruby/ruby/issues/332", "created_at": "2013-06-18 23:01:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19649540", "text": "This issue also occurs in 1.9.3 and probably 1.8 as well.\n", "created_at": "2013-06-18 23:03:58", "user": 443181, "id": 19649540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19961983", "text": "@mrkn Could you review this pull request?\n", "created_at": "2013-06-25 09:06:04", "user": 12301, "id": 19961983}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19962901", "text": "I'll check it tonight.\n", "created_at": "2013-06-25 09:25:27", "user": 3959, "id": 19962901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Encoding changes from 1.8 to 1.9 has made calls to CGI::unescapeHTML more expensive, even if no escaping needs to be done. While a few calls will have negligible difference, unescaping each line of a large CSV file will cause the losses to stack up.\n\nBenchmarking\n\n``` ruby\nrequire 'cgi'\nrequire 'benchmark'\n\nBenchmark.bm(5) do |x|\n  puts RUBY_VERSION\n  string = CGI.escapeHTML(\"A\") # => \"A\"\n    x.report(\"CGI::unescapeHTML\") do\n    100_000.times do\n      CGI.unescapeHTML(string)\n    end\n  end\nend\n```\n\n1.8.7-p371\n\n```\nuser     system      total        real\nCGI::unescapeHTML  0.040000   0.000000   0.040000 (  0.041975)\n```\n\n1.9.3-p429 (with railsexpress patches and GC tuning)\n\n```\nRUBY_GC_MALLOC_LIMIT=1000000000\nRUBY_FREE_MIN=500000\nRUBY_HEAP_MIN_SLOTS=40000\n\nuser     system      total        real\nCGI::unescapeHTML  0.120000   0.010000   0.130000 (  0.127006)\n\nuser     system      total        real\nCGI::unescapeHTML with performance change  0.060000   0.000000   0.060000 (  0.058035)\n```\n", "labels": [], "number": 333, "updated_at": "2016-05-11 01:48:58", "user": 1709841, "closed_at": "2016-05-11 01:48:45", "id": 15722009, "title": "Performance change: should only attempt unescaping if escape character may be present", "url": "https://api.github.com/repos/ruby/ruby/issues/333", "created_at": "2013-06-19 01:04:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19671127", "text": "@xibbar Please review this pull request.\n", "created_at": "2013-06-19 09:03:37", "user": 12301, "id": 19671127}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19962001", "text": "@xibbar ping\n", "created_at": "2013-06-25 09:06:24", "user": 12301, "id": 19962001}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19969902", "text": "why ping? @hsbt \n", "created_at": "2013-06-25 11:28:23", "user": 25030, "id": 19969902}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19971440", "text": "merged by\n69ea68cc21f6539b58c08d8a122fdce3f062a1ce\ne26fe81b0bb395ef60ef2139cd0df16c3a88ce65\n", "created_at": "2013-06-25 12:05:46", "user": 25030, "id": 19971440}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19971468", "text": "thanks @bbxiao1 \n", "created_at": "2013-06-25 12:06:22", "user": 25030, "id": 19971468}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179791068", "text": "HTML data can be any valid encodings.\nSo this is just a bug.\n", "created_at": "2016-02-04 12:04:30", "user": 16700, "id": 179791068}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179866997", "text": "I recognize this behavior.\nUTF-16 character escaping raised.\n", "created_at": "2016-02-04 14:23:31", "user": 25030, "id": 179866997}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/218341446", "text": "Ruby 2.4 introduced C extension for `CGI.unescapeHTML`. see https://github.com/ruby/ruby/tree/trunk/ext/cgi/escape\n", "created_at": "2016-05-11 01:48:45", "user": 12301, "id": 218341446}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 334, "updated_at": "2014-06-19 10:27:33", "user": 4551554, "closed_at": "2013-06-23 17:43:29", "id": 15868351, "title": "changed grammar in win32 readme ", "url": "https://api.github.com/repos/ruby/ruby/issues/334", "created_at": "2013-06-21 19:57:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19877874", "text": "Thank you @blankenshipz!\n", "created_at": "2013-06-23 17:44:44", "user": 277819, "id": 19877874}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added some documentation for the undocumented Module#extended.\nIn the second commit I also fixed up some parentheses placing as it seemed odd that some have white space around the parameter and some don't - I found without white space to be commoner so I went with that. \n\nCheers and thanks for your work!\nTobi\n", "labels": [], "number": 335, "updated_at": "2013-07-10 05:30:36", "user": 606517, "closed_at": "2013-07-09 12:09:34", "id": 15897529, "title": "Module extended doc", "url": "https://api.github.com/repos/ruby/ruby/issues/335", "created_at": "2013-06-23 14:27:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19878092", "text": "I'm gonna hold off on this one until I get some more sleep, thank you for the patch!\n", "created_at": "2013-06-23 17:56:56", "user": 277819, "id": 19878092}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19878411", "text": "Thanks for being so quick with the merges and communicative :-)\n", "created_at": "2013-06-23 18:15:35", "user": 606517, "id": 19878411}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20596832", "text": "ping @zzak \n", "created_at": "2013-07-08 10:22:50", "user": 179065, "id": 20596832}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20669421", "text": "@PragTob Thank you for your patch. I applied this patch instead of @zzak :sleepy: \n", "created_at": "2013-07-09 12:03:35", "user": 12301, "id": 20669421}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20669689", "text": "fixed 331f22cd3021df5c397024d65651687d05cd8f75\n", "created_at": "2013-07-09 12:09:34", "user": 12301, "id": 20669689}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20673121", "text": "Jay happy to help and thanks for your work!\n", "created_at": "2013-07-09 13:20:38", "user": 606517, "id": 20673121}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20722416", "text": "Whoops, looks like I took a very long nap ;)\n\nThanks @hsbt!\n", "created_at": "2013-07-10 05:30:36", "user": 277819, "id": 20722416}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixing a wrong example for Array#reject as noticed in the comments online.\n\nI don't know what the original author intended but since all the other operations return [4, 5, 6] I changed it to <= instead of changing the result to [3, 4, 5, 6]\n\nThanks for your work on Ruby!\nTobi\n", "labels": [], "number": 336, "updated_at": "2014-06-19 10:08:04", "user": 606517, "closed_at": "2013-06-23 17:59:03", "id": 15897536, "title": "Fix wrong example output for reject example", "url": "https://api.github.com/repos/ruby/ruby/issues/336", "created_at": "2013-06-23 14:29:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19878071", "text": "Thank you @PragTob!\n", "created_at": "2013-06-23 17:55:56", "user": 277819, "id": 19878071}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just a simple typo noticed while browsing the online comments.\n", "labels": [], "number": 337, "updated_at": "2014-06-14 00:37:19", "user": 606517, "closed_at": "2013-06-23 17:48:43", "id": 15897624, "title": "Fixed typo for Array#zip one more that --> one more than", "url": "https://api.github.com/repos/ruby/ruby/issues/337", "created_at": "2013-06-23 14:40:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19877972", "text": "Thank you @PragTob!\n", "created_at": "2013-06-23 17:50:34", "user": 277819, "id": 19877972}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 338, "updated_at": "2013-06-26 14:05:48", "user": 1016365, "closed_at": "2013-06-24 08:59:37", "id": 15903707, "title": "create Markdown version of ReadMe for github", "url": "https://api.github.com/repos/ruby/ruby/issues/338", "created_at": "2013-06-23 22:52:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19969812", "text": "@zzak  Why was it closed?\n", "created_at": "2013-06-25 11:26:01", "user": 168854, "id": 19969812}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19978344", "text": "@eregon This has been submitted a number of times before. The conclusion is that github is not the source for reading ruby documentation.\n", "created_at": "2013-06-25 14:08:04", "user": 277819, "id": 19978344}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20048999", "text": "@zzak Thanks, what I thought. I just wanted to ensure it was not accidental (the OP knows why it was closed).\n", "created_at": "2013-06-26 13:59:27", "user": 168854, "id": 20048999}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20049444", "text": ":heart: \n", "created_at": "2013-06-26 14:05:48", "user": 277819, "id": 20049444}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that the first option for _state_ was not appearing as a bullet point and decided to correct that if possible.  If this is sufficient I'd love to see it merged.  If not, how can I improve this patch?\n", "labels": [], "number": 339, "updated_at": "2013-07-09 12:08:08", "user": 996477, "closed_at": "2013-07-09 12:08:08", "id": 15957939, "title": "fixup stying of `Json#generate` parameter docs", "url": "https://api.github.com/repos/ruby/ruby/issues/339", "created_at": "2013-06-25 02:04:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19978584", "text": "@daveworth This looks good, I will merge it soon, thank you!\n", "created_at": "2013-06-25 14:11:40", "user": 277819, "id": 19978584}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20668817", "text": "@daveworth Thank you! I applied this patch instead of @zzak \n", "created_at": "2013-07-09 11:50:27", "user": 12301, "id": 20668817}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20669621", "text": "fixed 7eeb65397dda8490f90e625429d952628cf5a819\n", "created_at": "2013-07-09 12:08:08", "user": 12301, "id": 20669621}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "while perusing the documentation of many files in the Ruby trunk I noticed these apparent typos.  If the spelling was not intentional I would love to see this merged in.\n", "labels": [], "number": 340, "updated_at": "2013-06-25 09:07:15", "user": 996477, "closed_at": "2013-06-25 08:54:30", "id": 15957975, "title": "correct the spelling of \"usage\" in a few files", "url": "https://api.github.com/repos/ruby/ruby/issues/340", "created_at": "2013-06-25 02:06:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/19962034", "text": "Thank you!\n", "created_at": "2013-06-25 09:07:15", "user": 12301, "id": 19962034}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I _believe_ the correct capitalization of \"Ruby\" is with \"R\".  If so, and in an attempt to make the documentation consistent, I've tracked down as many of the instances in `trunk` which should be uppercase as I could and changed them in this PR.  I've intentionally ignored some cases in comments (non-Tomdoc'd) or in licensing information which will not appear in the public documentation.\n", "labels": [], "number": 341, "updated_at": "2014-06-12 17:59:12", "user": 996477, "closed_at": "2013-07-18 13:51:08", "id": 15958011, "title": "upper-case \"Ruby\" in TomDoc as it is a proper noun", "url": "https://api.github.com/repos/ruby/ruby/issues/341", "created_at": "2013-06-25 02:07:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20789519", "text": "@daveworth Thank you for your contribution!\n\nLooking at @drbrain's syntax guides as a recent template for good documentation technique, I've noticed he uses \"ruby\" in a few places.\n\nI would like to ask for his opinion on this, as it may be intentional.\n", "created_at": "2013-07-11 04:18:22", "user": 277819, "id": 20789519}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21184713", "text": "@daveworth Thank you, I have merged part of your patch.\n\nThe ones I didn't merge were because they should go upstream, as they are standard library gems with their own upstream repository and tracker.\n\nThese libraries are:\ngithub.com/rdoc/rdoc\ngithub.com/tenderlove/psych\ngithub.com/tenderlove/racc\ngithub.com/rubygems/rubygems\ngithub.com/jimweirich/rake\n\nI can submit and merge patches upstream for most of these, but I wanted to let you know for future reference.\n", "created_at": "2013-07-18 13:54:37", "user": 277819, "id": 21184713}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21197012", "text": "Awesome.  If you don't mind submitting the upstream patches I would love that! Otherwise I can do the extraction.\n\nThanks again!\n", "created_at": "2013-07-18 16:43:30", "user": 996477, "id": 21197012}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21229083", "text": "@daveworth I have merged them all upstream except lib/rake\\* ( 7420110 ), because I'm unsure which branch is used upstream for `lib/rake.rb`.\n", "created_at": "2013-07-19 03:08:10", "user": 277819, "id": 21229083}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21250486", "text": "@zzak hmm.. so I was just working off of Ruby/trunk but I'm not sure I know which upstream branch of Rake's that is connected to.  I will have a look\n", "created_at": "2013-07-19 13:52:27", "user": 996477, "id": 21250486}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21262078", "text": "@daveworth the person who would know is @drbrain, it seems like when there is a rake 0.9.x release it is imported directly into ruby-trunk. I'm just not sure what branch its taken from\n", "created_at": "2013-07-19 16:51:42", "user": 277819, "id": 21262078}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation for Mutex#sleep did not previously note that\nafter the thread that is put to sleep by the call to wait is woken\nup, it will attempt to reacquire the mutex. This note has now been\nadded.\n", "labels": [], "number": 342, "updated_at": "2014-06-29 11:36:34", "user": 1008839, "closed_at": "2013-07-15 02:00:39", "id": 16003034, "title": "Expound further on the behaviour of Mutex#sleep", "url": "https://api.github.com/repos/ruby/ruby/issues/342", "created_at": "2013-06-25 21:33:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20789623", "text": "@timabdulla Thank you for your contribution!\n\nThe only spec on this I could find is [here](https://github.com/rubyspec/rubyspec/blob/0d2c17e000f40d4b991087a27a1ca2094fae9bea/core/mutex/sleep_spec.rb#L30), which describes the mutex is relocked when woken up.\n\nIf your statement is true, I'd like to see a spec or example of this so that I can better understand your meaning. And if that works, it might be worth adding the bit about relock to the documentation as well.\n", "created_at": "2013-07-11 04:24:00", "user": 277819, "id": 20789623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20826416", "text": "sorry, the commit message wasn't worded in the most precise manner. I was having difficulty trying to concisely explain the omission that I saw in the documentation. the spec that you've linked to demonstrates exactly the behaviour I was meaning to explain in my documentation addition. when a thread calls Mutex#sleep, the thread is put to sleep and the mutex released; upon being woken up for any reason, the thread will attempt to reacquire the mutex. I found that this behaviour was not clearly explained in the existing docs. \n\nit's most easy to see the existence of this behaviour in the source[0], but I've also attached an example[1], though I think the rubyspec specs do a good job of illuming this behaviour. \n\n[0] https://github.com/ruby/ruby/blob/trunk/thread.c#L4547-L4552\n[1] https://gist.github.com/timabdulla/5977231\n", "created_at": "2013-07-11 17:01:02", "user": 1008839, "id": 20826416}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20907839", "text": "@timabdulla I think the confusion is the phrase \"reacquire the mutex\", but you should say \"reacquire the lock\".\n\nI think it is easier to understand.\n", "created_at": "2013-07-12 22:27:50", "user": 277819, "id": 20907839}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20909925", "text": "@zzak cool, I agree. I modified the wording and updated the commit \n", "created_at": "2013-07-12 23:28:38", "user": 1008839, "id": 20909925}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20912086", "text": "@nurse @ko1 any objection?\n", "created_at": "2013-07-13 00:59:22", "user": 277819, "id": 20912086}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20912172", "text": "No objection.\n", "created_at": "2013-07-13 01:05:24", "user": 9558, "id": 20912172}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 343, "updated_at": "2013-06-26 14:56:27", "user": 8061, "closed_at": "2013-06-26 14:56:27", "id": 16005856, "title": "Fix copy-paste error in BigDecimal.save_rounding_mode example", "url": "https://api.github.com/repos/ruby/ruby/issues/343", "created_at": "2013-06-25 22:38:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 344, "updated_at": "2014-10-03 03:55:52", "user": 689072, "closed_at": "2014-10-03 03:48:57", "id": 16016977, "title": "add two methods in Matrix -- vertically and horizontally merging two existing matrices", "url": "https://api.github.com/repos/ruby/ruby/issues/344", "created_at": "2013-06-26 06:24:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20029506", "text": "Interesting feature request. Idea is good, but I'd like to find better names for the methods.\n", "created_at": "2013-06-26 06:35:48", "user": 33770, "id": 20029506}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20029780", "text": "Hi, Marc, the names for these two methods come from the similar operations of matrices in Python http://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html#numpy.hstack and http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html#numpy.vstack\n", "created_at": "2013-06-26 06:46:25", "user": 689072, "id": 20029780}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354531", "text": "@marcandre Could you provide more feedback on the naming scheme?\n\nWould like to see this merged, but not sure since we've already passed the [big feature freeze deadline](http://bugs.ruby-lang.org/projects/ruby-trunk/wiki/ReleaseEngineering210).\n", "created_at": "2013-10-15 17:24:39", "user": 277819, "id": 26354531}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354866", "text": "I'm soo late with what I want to do for ruby-core :-( \n\nNot sure that the big feature freeze applies to libraries, I guess I'll enquire.\n\nAlso, I'm wondering if these shouldn't be instance methods\n", "created_at": "2013-10-15 17:28:44", "user": 33770, "id": 26354866}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26394693", "text": "Hi, @marcandre, @zzak, is there anything I can do to help? I use lots of matrix manipulation in C++ (itpp) and Python (Numpy, Scipy). If this is a direction you would like to go, I am more than willing to implement the methods.\n", "created_at": "2013-10-16 06:02:29", "user": 689072, "id": 26394693}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57748934", "text": "As no better names came up, I used `hstack` and `vstack`. I modified them slightly to accept multiple parameters and created both instance and class methods as I can imagine both being used.\n\nThanks for this PR @creasyw \n", "created_at": "2014-10-03 03:55:52", "user": 33770, "id": 57748934}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There is a required first argument to HTTP.new. The example here was non-executable and would likely be confusing to anyone attempting to use it.\n", "labels": [], "number": 345, "updated_at": "2014-07-23 23:21:29", "user": 2071, "closed_at": "2013-07-04 02:55:42", "id": 16108574, "title": "Fixing example in comments that raised an error", "url": "https://api.github.com/repos/ruby/ruby/issues/345", "created_at": "2013-06-27 19:05:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 346, "updated_at": "2013-06-30 13:44:30", "user": 4642242, "closed_at": "2013-06-30 13:44:30", "id": 16157822, "title": "Corrected few comments.", "url": "https://api.github.com/repos/ruby/ruby/issues/346", "created_at": "2013-06-28 19:35:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I wrote a new implementation of Prime::EratosthenesGenerator/EratosthenesSieve.  It's a simple implementation of a segmented sieve of Eratosthenes but in my tests has performed much faster than the library version (see graphs).\n\nIt has the same interface and passes the same unit test as the original.\n\n![chart_1](https://f.cloud.github.com/assets/2107646/724561/beaeaa0e-e038-11e2-823e-2bf909ef8708.png)\n\n![chart_2](https://f.cloud.github.com/assets/2107646/724562/c886d434-e038-11e2-8afc-08416b9cfeb8.png)\n", "labels": [], "number": 347, "updated_at": "2014-06-13 20:57:37", "user": 2107646, "closed_at": "2013-07-18 02:07:28", "id": 16162376, "title": "Faster primes", "url": "https://api.github.com/repos/ruby/ruby/issues/347", "created_at": "2013-06-28 21:23:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20453968", "text": "@yugui Could you review this?\n", "created_at": "2013-07-04 00:58:02", "user": 12301, "id": 20453968}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20454499", "text": "@robertjlooby Can you show the comparison of the memory usage between the original and yours?\n", "created_at": "2013-07-04 01:17:07", "user": 3959, "id": 20454499}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20653141", "text": "Looks like mine uses slightly less memory (really about equal) through calculating the primes up to 50,000 but after that loses out pretty badly.  However, above ~3,000,000 the factor seems about constant in the 13-20x range.\n\nAll the data I've taken along with the graphs are [here](https://docs.google.com/spreadsheet/ccc?key=0Ahz3DUa2_Z2mdFUzemZKRGdUVnd4SVJNMDdaQ0ExSEE&usp=sharing)\n\n![chart_1](https://f.cloud.github.com/assets/2107646/766085/ce21a86a-e84e-11e2-880c-07663daf11b5.png)\n![chart_2](https://f.cloud.github.com/assets/2107646/766088/dee0e562-e84e-11e2-8775-2e3e6a01815d.png)\n", "created_at": "2013-07-09 04:41:51", "user": 2107646, "id": 20653141}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20673366", "text": "On Tue, Jul 9, 2013 at 1:42 PM, robertjlooby notifications@github.comwrote:\n\n> Looks like mine uses slightly less memory (really about equal) through\n> calculating the primes up to 50,000 but after that loses out pretty badly.\n> However, above ~3,000,000 the factor seems about constant in the 13-20x\n> range.\n> \n> All the data I've taken along with the graphs are herehttps://docs.google.com/spreadsheet/ccc?key=0Ahz3DUa2_Z2mdFUzemZKRGdUVnd4SVJNMDdaQ0ExSEE&usp=sharing\n\nThanks.  I'll merge your change in this weekend.\n\n> [image: chart_1]https://f.cloud.github.com/assets/2107646/766085/ce21a86a-e84e-11e2-880c-07663daf11b5.png\n> [image: chart_2]https://f.cloud.github.com/assets/2107646/766088/dee0e562-e84e-11e2-8775-2e3e6a01815d.png\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/347#issuecomment-20653141\n> .\n\n## \n\nYuki Sonoda (Yugui)\nyugui@yugui.jp\nhttp://yugui.jp\n", "created_at": "2013-07-09 13:24:31", "user": 8161, "id": 20673366}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20951302", "text": "I'm sorry for letting you wait for so long.  I've committed your change into the svn repository.\n", "created_at": "2013-07-15 04:22:26", "user": 8161, "id": 20951302}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21158407", "text": "@yugui @mrkn Thanks for your action :smile: \n", "created_at": "2013-07-18 02:08:40", "user": 12301, "id": 21158407}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 348, "updated_at": "2014-07-11 22:10:33", "user": 52642, "closed_at": "2013-07-10 03:07:24", "id": 16183719, "title": "Fix warning: assigned but unused variable - id", "url": "https://api.github.com/repos/ruby/ruby/issues/348", "created_at": "2013-06-30 04:24:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20719175", "text": "@spastorino Thank you for your patch. But this issue was already fixed by a3a62f87e144be31b9ca8ad6415b207f43f4e126\n", "created_at": "2013-07-10 03:07:24", "user": 12301, "id": 20719175}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed a rb_obj_equal documentation typo where \"a\" was used instead of \"obj\".\n", "labels": [], "number": 349, "updated_at": "2013-07-04 13:32:55", "user": 464180, "closed_at": "2013-07-04 13:32:55", "id": 16367564, "title": "Fixed typo for rb_obj_equal documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/349", "created_at": "2013-07-04 13:19:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Missing quote in an example code.\n", "labels": [], "number": 350, "updated_at": "2013-07-10 05:35:06", "user": 1172471, "closed_at": "2013-07-08 10:21:33", "id": 16372359, "title": "Fix comment typo in OpenSSL::Digest", "url": "https://api.github.com/repos/ruby/ruby/issues/350", "created_at": "2013-07-04 15:20:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20596780", "text": "Fixed in 660fed67.\n\n@hsbt: you need to write \"fixes\" instead of \"fix\" to get GitHub to automatically close a pull request.\n", "created_at": "2013-07-08 10:21:33", "user": 179065, "id": 20596780}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20722533", "text": "@hsbt @charliesome Please also absolute link to the github pull request in the commit log and change log.\n", "created_at": "2013-07-10 05:35:05", "user": 277819, "id": 20722533}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "dtrace version SUN D 1.11 introduces a check in the dtrace compiler to ensure that probes actually exist. If there are no probes, then dtrace -G step will fail.\n\nWithout this fix, on operating systems with the newer version of dtrace (for instance SmartOS platform images newer than June 2013) the configure step fails with the following error:\ndtrace: failed to link script conftest_provider: No probe sites found for declared provider\n\nThis makes configure incorrectly determine that -G is _not_ needed, and make subsequently fails.\n\nAs this test is only being used to determine whether -G is necessary (for instance, on OSX it is not), adding a real probe to the conftest allows it to succeed.\n", "labels": [], "number": 351, "updated_at": "2014-06-25 10:52:40", "user": 77073, "closed_at": "2013-07-08 20:53:47", "id": 16432867, "title": "configure correctly tests dtrace -G in version 1.11", "url": "https://api.github.com/repos/ruby/ruby/issues/351", "created_at": "2013-07-06 16:45:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20635188", "text": "This is closed with this commit:\nhttps://github.com/ruby/ruby/commit/2b5f033cb5dfddb66d9103fd1cce103bde35d60e\n\nThank you!\n", "created_at": "2013-07-08 20:53:47", "user": 77073, "id": 20635188}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The docs for Object#<=> say that it is implemented in terms of case equality (===), which I'm pretty sure is untrue.\n", "labels": [], "number": 352, "updated_at": "2014-07-17 21:19:33", "user": 982, "closed_at": "2013-07-09 07:12:09", "id": 16444681, "title": "Fix Object spaceship operator (<=>) doc to reflect that it uses ==, not ===", "url": "https://api.github.com/repos/ruby/ruby/issues/352", "created_at": "2013-07-07 16:05:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20573499", "text": "ping @nurse via b88a502\n", "created_at": "2013-07-07 16:49:24", "user": 277819, "id": 20573499}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20573507", "text": "@avdi Thank you! It looks like `==` to me too, but it hasn't changed since naruse-san wrote this doc, so I wonder if there was a reason.\n", "created_at": "2013-07-07 16:50:12", "user": 277819, "id": 20573507}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20603369", "text": "It calls statically `rb_equal`, which is `===` on Kernel, which calls `==` (unless both objects have the same address).\nSo I guess we could say it calls `==`, but there is the slight difference that it will not call `==` if both objects have the same address.\n", "created_at": "2013-07-08 13:00:54", "user": 168854, "id": 20603369}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20604245", "text": "I suspect this is a bug introduced in r26161 (b3c3dda3) [ruby-core:24063].\n\nThe condition should be `(obj1 == obj2 || rb_funcall(obj1, id_eq, 1, obj2))` where `ID id_eq = rb_intern(\"==\");`.\n\n/cc @marcandre\n", "created_at": "2013-07-08 13:16:31", "user": 10236, "id": 20604245}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20618494", "text": "Ah, I read it wrong.  Just forget my previous post.\n", "created_at": "2013-07-08 16:38:05", "user": 10236, "id": 20618494}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20618997", "text": "I think it's just rb_equal() happens to be what Kernel#=== is bound to, and #=== should not be mentioned here because it does not call === in any way.\n\nThe correct rdoc for Kernel#<=> will be `Returns 0 if obj.equal?(other) or obj == other, otherwise nil.`\n", "created_at": "2013-07-08 16:45:50", "user": 10236, "id": 20618997}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20657139", "text": "Fixed in b0bc85f.  Thank you!\n", "created_at": "2013-07-09 07:12:09", "user": 10236, "id": 20657139}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The doc for `==` and `===` do not show up in the [Ruby Doc 2.0 String](http://ruby-doc.org/core-2.0/String.html#method-i-3D-3D), I think it's because there is a missing line.\n", "labels": [], "number": 353, "updated_at": "2014-07-24 11:25:43", "user": 1000669, "closed_at": "2013-07-09 12:06:59", "id": 16446609, "title": "Add a missing line for rb_str_equal of string.c", "url": "https://api.github.com/repos/ruby/ruby/issues/353", "created_at": "2013-07-07 18:37:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20668400", "text": "Thank you for your patch! I applied this.\n", "created_at": "2013-07-09 11:40:50", "user": 12301, "id": 20668400}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20669570", "text": "fixed 78db35897dcbd888f06cdb74169f95ab2de74b8a\n", "created_at": "2013-07-09 12:06:59", "user": 12301, "id": 20669570}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This would add support of multi-thread access to log file from different instances of ruby application.\nAlso it adds ability to specify 'keep' period for old files which are either 'daily', 'weekly', or 'monthly'.\n\nTry to explain:\nsuppose you have a rails application. You can start it as rails server, rails console or even rake task. All of them writes log into log/<rails_env>.log file.\n\nIf init log with (e.g.) 'daily' age period inside of application config, the problem is as follows:\nRails server creates production.log and uses it. The same for rails console (or rake task).\nAnd new day come up. The server instance renames production.log to production.log.YYYYMMDD and creates new production.log. The console instance of the app would rename production.log again (that is already at current day timestamp) to poduction.log.YYYYMMDD.1 and creates new poduction.log.\nThe console would write into production.log as should be but! The server instance would write into production.log.YYYYMMDD!\n", "labels": [], "number": 354, "updated_at": "2014-06-13 01:46:12", "user": 871452, "closed_at": "2013-11-01 22:29:22", "id": 16473406, "title": "add support for multi-threading access to log file with age params", "url": "https://api.github.com/repos/ruby/ruby/issues/354", "created_at": "2013-07-08 14:21:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20648413", "text": "@nahi How do you think about this pull request?\n", "created_at": "2013-07-09 01:40:18", "user": 12301, "id": 20648413}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20789942", "text": "This could definitely use some tests. :wink: \n", "created_at": "2013-07-11 04:37:24", "user": 277819, "id": 20789942}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22174105", "text": "@kolobock Thank you, I understand your situation. It's my understanding that this is multi-process logger sharing issue, not multi-threading.  For multi-process logger sharing, we need to shift old log file atomically but current Logger doesn't offer such feature. We'd need multi-process rendezvous primitive such as lockf, etc. but so far I think it's not in Logger's scope.\n\nI'm open to discuss how we can solve this general issue (multi-process logger sharing) but you can you Syslog::Logger or log4r instead at this moment.\n", "created_at": "2013-08-06 12:04:58", "user": 44209, "id": 22174105}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354803", "text": "If there is no further feedback on this feature I think we should close it (not immediately).\n\nThere are possible solutions for this user, as @nahi metioned: such as Syslog::Logger.\n\n@nahi Would you object to closing this ticket, in favor of an alternate solution until further discussion can be made for Multi-process logger sharing (such as a new feature ticket)?\n", "created_at": "2013-10-15 17:27:58", "user": 277819, "id": 26354803}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26695140", "text": "@nahi @zzak @hsbt We've implemented multi-process sharing logger for serverengine (fluentd). \nDo you have any interests for it? https://github.com/frsyuki/serverengine/blob/master/lib/serverengine/daemon_logger.rb\n\nThis is the issue we worked on https://github.com/frsyuki/serverengine/issues/9. \n", "created_at": "2013-10-21 06:29:40", "user": 2290461, "id": 26695140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26883524", "text": "I sent a separated pull request for porting inter-process locking of ServerEngine's DaemonLogger into ruby's Logger https://github.com/ruby/ruby/pull/428\n", "created_at": "2013-10-23 06:38:18", "user": 2290461, "id": 26883524}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27606084", "text": "CRuby r43511 (SHA: 0749adc54ceffce15ad40947bd05be19fc9f1618) should fix this.\n", "created_at": "2013-11-01 22:29:22", "user": 13423, "id": 27606084}], "assignees": [44209, 44209], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Passing `nil` into `SSLContext` for `ssl_version` causes\nOpenSSL to use its internal default.  For OpenSSL 1.0.1 this is\n`:TLSv1_2`.\n\nI added the defaults for the `SSLContext` options too, while\nI was at it.\n\nI found this when compiling ruby-1.9.3-p448 with OpenSSL 1.0.1.  I couldn't get gems from a local gem-server running with apache2 (SSL enabled) on CentOS 6.\n", "labels": [], "number": 355, "updated_at": "2018-01-17 18:11:16", "user": 40799, "closed_at": "2013-10-15 17:56:34", "id": 16539859, "title": "Net::HTTPS should use SSLContext's defaults", "url": "https://api.github.com/repos/ruby/ruby/issues/355", "created_at": "2013-07-09 18:28:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790077", "text": "@docwhat Thank you for your contribution!\n\nI would like @nurse opinion as `net/http` maintainer.\n\nAlso, if this patch is accepted, we should add documentation for the getter methods.\n", "created_at": "2013-07-11 04:43:19", "user": 277819, "id": 20790077}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20799852", "text": "It looks good.\nHow do you think @nahi and @emboss?\n", "created_at": "2013-07-11 09:27:56", "user": 13423, "id": 20799852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21263438", "text": "I added documentation for the getter methods, @zzak.\n\nAny thoughts @nahi and @emboss?\n", "created_at": "2013-07-19 17:15:16", "user": 40799, "id": 21263438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21263537", "text": "Oh, btw: Do I submit a separate pull request for 2.0.0? Is does someone else do that?\n\nThe issue is present there too.\n", "created_at": "2013-07-19 17:16:37", "user": 40799, "id": 21263537}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21263699", "text": "@docwhat \n\n> Oh, btw: Do I submit a separate pull request for 2.0.0? Is does someone else do that?\n\nThe maintainer of 2.0.0 branch will handle this.\n", "created_at": "2013-07-19 17:19:32", "user": 277819, "id": 21263699}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22175385", "text": "I'm unsure that DEFAULT_PARAMS is better than OpenSSL's default. @docwwhat, would you please explain the detailed reason you cannot connect to the gem server?\n", "created_at": "2013-08-06 12:33:27", "user": 44209, "id": 22175385}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22221439", "text": "These are the defaults for the OpenSSL Ruby library.  The problem is that OpenSSL 1.0.1 has different defaults internally than the ruby library uses; specifically, TLS 1.2.  When the ruby library doesn't support or know about these settings, then things don't work.\n\nThe problem in my case is that my gem server (due to company policy) can only have certain ciphers.  None of the TLS 1.2 ciphers and none of the SSLv1 & SSLv2 ciphers are available.  This causes failures with out-of-the-box ruby 1.9.[23] with OpenSSL 1.0.1.\n\nDowngrading OpenSSL to 0.9X or upgrading Ruby to 2.0 fixes the problems.\n\nWe could backport the openssl support from Ruby 2.0 to Ruby 1.9.x which would fix _this_ problem, but by having Net::HTTP use openssl.rb's defaults, we'll prevent this problem from occurring in the future.\n", "created_at": "2013-08-07 00:12:32", "user": 40799, "id": 22221439}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26357223", "text": "We probably can't backport any features to 1.9.3 at this point.\n\nI would suggest one of the solutions you mentioned in the last message:\n\n> Downgrading OpenSSL to 0.9X or upgrading Ruby to 2.0 fixes the problems.\n\nIf this issue is present in trunk, please submit a patch, otherwise please request a backport to 2.0+\n\nThank you!\n", "created_at": "2013-10-15 17:56:34", "user": 277819, "id": 26357223}], "assignees": [13423, 13423], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "WEBRick: `Util.create_listeners` doesn't make use of logger param\n", "labels": [], "number": 356, "updated_at": "2015-01-02 06:58:09", "user": 567626, "closed_at": "2015-01-02 06:58:09", "id": 16571151, "title": "WEBRick: Util.create_listeners doesn't make use of logger param", "url": "https://api.github.com/repos/ruby/ruby/issues/356", "created_at": "2013-07-10 10:54:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20734673", "text": "cc @nahi \n", "created_at": "2013-07-10 10:54:18", "user": 567626, "id": 20734673}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20759717", "text": "This change isn't backwards compatible. When creating a server that runs as root you create the listeners, drop privileges, then create a server with `DoNotListen: true` and give it your precreated listeners. The new required parameter breaks such usage.\n\nAdditionally, your patch doesn't seem to do anything with the logger in #create_listeners. Did I miss something?\n", "created_at": "2013-07-10 17:43:35", "user": 9831, "id": 20759717}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20760312", "text": "Actually the patch removes the logger. Not make it required.\n", "created_at": "2013-07-10 17:53:13", "user": 567626, "id": 20760312}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20763386", "text": "Oops, my apologies. I did not read carefully enough\n", "created_at": "2013-07-10 18:38:52", "user": 9831, "id": 20763386}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790146", "text": "@vipulnsward @drbrain Should the `logger` parameter be removed from `Utils#create_listeners` as well?\n", "created_at": "2013-07-11 04:46:22", "user": 277819, "id": 20790146}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790325", "text": "@zzak actually that too is removed.\nI should be writing better PR messages, so the changes aren't being confused with.\n", "created_at": "2013-07-11 04:53:33", "user": 567626, "id": 20790325}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790683", "text": "@vipulnsward There are no tests for `#create_listeners`. Do you think you could add some?\n", "created_at": "2013-07-11 05:08:45", "user": 277819, "id": 20790683}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790699", "text": "sure @zzak \n", "created_at": "2013-07-11 05:09:34", "user": 567626, "id": 20790699}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26357326", "text": "@vipulnsward Any update here? Would like to see this merged, if we have the blessing of @nahi\n", "created_at": "2013-10-15 17:57:51", "user": 277819, "id": 26357326}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27292861", "text": "@zzak @nahi updated.\n", "created_at": "2013-10-29 10:46:25", "user": 567626, "id": 27292861}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Exapmles -> Examples\n", "labels": [], "number": 357, "updated_at": "2014-06-14 22:59:46", "user": 142821, "closed_at": "2013-07-11 04:54:23", "id": 16595186, "title": "fix documentation typo", "url": "https://api.github.com/repos/ruby/ruby/issues/357", "created_at": "2013-07-10 19:17:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20790467", "text": "@hynkle Thank you for your contribution!\n", "created_at": "2013-07-11 04:59:18", "user": 277819, "id": 20790467}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 358, "updated_at": "2013-07-10 20:47:58", "user": 39390, "closed_at": "2013-07-10 20:47:58", "id": 16598959, "title": "removed optional then for ease of readability", "url": "https://api.github.com/repos/ruby/ruby/issues/358", "created_at": "2013-07-10 20:27:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20771982", "text": "I disagree, so I won't commit it.\n", "created_at": "2013-07-10 20:47:58", "user": 9831, "id": 20771982}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Coerce an object to a set or return an existing set. Requested as a feature here http://bugs.ruby-lang.org/issues/8626\n", "labels": [], "number": 359, "updated_at": "2014-06-28 07:46:17", "user": 4271, "closed_at": "2013-07-19 02:24:30", "id": 16640723, "title": "add Set() method to standard library to coerce objects into sets.", "url": "https://api.github.com/repos/ruby/ruby/issues/359", "created_at": "2013-07-11 16:33:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20853882", "text": "I could redefine `Set#to_set` to return self so you would be able to use `obj.to_set` for that.  How does it sound to you?\n\n`Array()` is useful because there are more than just one method for conversion (`to_ary` and `to_a`).  In Set there is only `to_set`, so its usefulness will be very limited.\n", "created_at": "2013-07-12 01:38:53", "user": 10236, "id": 20853882}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20854716", "text": "That works for me, but that's a change in the current behavior. I don't know if anyone else would protest\n", "created_at": "2013-07-12 02:11:41", "user": 4271, "id": 20854716}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add documentation for `Bignum#coerce` in bignum.c.\n", "labels": [], "number": 360, "updated_at": "2014-06-28 19:53:20", "user": 1000669, "closed_at": "2013-07-15 02:16:06", "id": 16717713, "title": "Add Bignum#coerce documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/360", "created_at": "2013-07-13 17:47:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20923845", "text": "Nice! I love that you found the \"Missing documentation\" comment and replaced it with real docs! Thank you!\n\nI will try to get this merged in tonight.\n", "created_at": "2013-07-13 18:05:33", "user": 277819, "id": 20923845}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am sure there is an excellent reason `Queue` doesn't support `#each`. But not knowing what that reason is, I went and implemented it. Why? Well, it's awfully convenient for writing simple consumers:\n\n``` ruby\ninq = Queue.new\noutq = Queue.new\ndoubler = Thread.new do\n  inq.each do |n|\n    outq << n + n\n  end\nend\n```\n\nIt also opens up the possibility of making `Queue` `Enumerable`, but I'm not opening that can of worms in this PR.\n", "labels": [], "number": 361, "updated_at": "2014-07-04 13:31:16", "user": 982, "closed_at": "2013-08-07 00:34:08", "id": 16741318, "title": "Add Queue#each.", "url": "https://api.github.com/repos/ruby/ruby/issues/361", "created_at": "2013-07-15 06:49:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20973769", "text": "P.S. As you'll see in the code and tests it also returns an Enumerator when no block is passed, and handles the `non_block` argument.\n", "created_at": "2013-07-15 14:39:17", "user": 982, "id": 20973769}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20975740", "text": "@avdi thank you! Since this is a new feature we will need matz approval, could you open a feature request on the bug tracker?\n", "created_at": "2013-07-15 15:05:54", "user": 277819, "id": 20975740}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20977947", "text": "Sure, I wasn't sure of the procedure (is it written up somewhere?)\n", "created_at": "2013-07-15 15:35:35", "user": 982, "id": 20977947}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20978633", "text": "Done: https://bugs.ruby-lang.org/issues/8639\n", "created_at": "2013-07-15 15:45:20", "user": 982, "id": 20978633}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/20980488", "text": "@avdi Thank you! There is some info on requesting features in [./doc/contributing.rdoc](http://www.ruby-doc.org/core-2.0/doc/contributing_rdoc.html#label-How+To+Request+Features), which is mostly from [the old wiki page](https://bugs.ruby-lang.org/projects/ruby/wiki/HowToRequestFeatures)\n", "created_at": "2013-07-15 16:10:50", "user": 277819, "id": 20980488}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22221776", "text": "@ko1 How do you think about this?\n", "created_at": "2013-08-07 00:21:33", "user": 12301, "id": 22221776}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22221947", "text": "Discuss on redmine.\n", "created_at": "2013-08-07 00:25:53", "user": 9558, "id": 22221947}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22222287", "text": "@avdi Please attach patches of this pull request to redmine.\n", "created_at": "2013-08-07 00:35:17", "user": 12301, "id": 22222287}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22662907", "text": "Why and how?\n\nOn Tue, Aug 6, 2013 at 8:35 PM, SHIBATA Hiroshi notifications@github.comwrote:\n\n> @avdi https://github.com/avdi Please attach patches of this pull\n> request to redmine.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/361#issuecomment-22222287\n> .\n\n## \n\nAvdi Grimm\nhttp://avdi.org\n\nI only check email twice a day. to reach me sooner, go to\nhttp://awayfind.com/avdi\n", "created_at": "2013-08-14 20:00:27", "user": 982, "id": 22662907}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22670262", "text": "@avid I have uploaded the patch for you, but for future reference I have created the following screencast: http://vimeo.com/72374408\n", "created_at": "2013-08-14 21:54:01", "user": 277819, "id": 22670262}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22670571", "text": "Thanks a lot! As I mentioned on the ML, since I'm off to a conference it\nprobably would have been a little while before I got around to it.\n\nOn Wed, Aug 14, 2013 at 5:54 PM, Zachary Scott notifications@github.comwrote:\n\n> @avid https://github.com/avid I have uploaded the patch for you, but\n> for future reference I have created the following screencast:\n> http://vimeo.com/72374408\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/361#issuecomment-22670262\n> .\n\n## \n\nAvdi Grimm\nhttp://avdi.org\n\nI only check email twice a day. to reach me sooner, go to\nhttp://awayfind.com/avdi\n", "created_at": "2013-08-14 21:58:58", "user": 982, "id": 22670571}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22671305", "text": "No worries, I hope you and others find my screencast useful.\n\nI will see you at SCRC! ❤\n", "created_at": "2013-08-14 22:09:04", "user": 277819, "id": 22671305}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Addresses [Bug #8641]\n\nThis is my very first attempt at hacking Ruby C code, and is TOTALLY cargo-culted. I don't expect this to be merged in, but I would LOVE some feedback so I can get better at this. Thank you!\n", "labels": [], "number": 362, "updated_at": "2014-06-13 07:00:18", "user": 982, "closed_at": "2013-08-27 02:52:16", "id": 16872874, "title": "Allow Enumerator size argument to be any callable, not just a Proc or Integer.", "url": "https://api.github.com/repos/ruby/ruby/issues/362", "created_at": "2013-07-17 15:59:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21124773", "text": "I think some screwy whitespace might have made it's way in. Sorry, I need to set up Emacs for Ruby conventions.\n", "created_at": "2013-07-17 16:18:12", "user": 982, "id": 21124773}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21125436", "text": "In addition to the whitespace, ideally the test would be more strict by using an `Object` with a singleton method `#call` instead of a `Method`.\n\nThanks for helping with the patch, it's appreciated especially that I'm travelling right now.\n", "created_at": "2013-07-17 16:28:02", "user": 33770, "id": 21125436}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21126643", "text": "Duh. I think I meant to write it that way in the first place and then got all stupid about it. Just pushed a better test.\n", "created_at": "2013-07-17 16:45:47", "user": 982, "id": 21126643}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21127037", "text": "BTW I'm kinda confused why `e->args` would ever be used in calling the \"size\" callable. I just copied that from the proc version of the code but it seems odd to me.\n", "created_at": "2013-07-17 16:51:21", "user": 982, "id": 21127037}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21127806", "text": "Specifically, I'm trying to think of a case where the args to be passed to the method to enumerate over would be the same as the args to be passed to the size callable.\n", "created_at": "2013-07-17 17:02:04", "user": 982, "id": 21127806}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21127940", "text": "BTW is it protocol for this to include a Changelog update?\n", "created_at": "2013-07-17 17:04:13", "user": 982, "id": 21127940}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21128723", "text": "@avdi Usually the person who commits your patch will write the ChangeLog\n\nHowever, NEWS file changes are welcome\n", "created_at": "2013-07-17 17:16:25", "user": 277819, "id": 21128723}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21133323", "text": "hm i dont know but would it make a difference in benchmark if we test for proc first and then use rb_proc_call and if its not a proc than use the rb_respond_to?   i think that rb_proc_call may be faster than rb_funcall2 ?\n", "created_at": "2013-07-17 18:22:07", "user": 225553, "id": 21133323}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21222461", "text": "Thanks for the changes, looks like the patch is ok now. I should commit it soon.\n\nAs for the arguments question, it was either never pass any, or pass them along which allowed something like:\n\n```\nclass Foo\n    def bar(*args)\n      return to_enum(:bar, &method(:bar_size)) unless block_given?\n      # yield according to args\n    end\n    def bar_size(*args)\n      # calculate according to args\n    end\nend\n```\n\nOf course it would have been possible to use a block like `to_enum(:bar) { bar_size(*args) }` which makes the argument passing not necessary.\n", "created_at": "2013-07-18 23:29:49", "user": 33770, "id": 21222461}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21228468", "text": "Thanks for the explanation. When I thought it through I came up with\nsomething similar, but I couldn't think of a real-world example. It's not\nthat usual in Ruby to have multiple methods which all take the same\narguments, simply because whenever we see that we tend to turn it into a\nclass instead. So I'm still curious if there are any real-world examples.\n\nAnyway, not a huge deal. I'm just excited that it may make it in!\n\nOn Thu, Jul 18, 2013 at 7:29 PM, Marc-André Lafortune <\nnotifications@github.com> wrote:\n\n> Thanks for the changes, looks like the patch is ok now. I should commit it\n> soon.\n> \n> As for the arguments question, it was either never pass any, or pass them\n> along which allowed something like:\n> \n> class Foo\n>     def bar(_args)\n>       return to_enum(:bar, &method(:bar_size)) unless block_given?\n>       # yield according to args\n>     end\n>     def bar_size(_args)\n>       # calculate according to args\n>     end\n> end\n> \n> Of course it would have been possible to use a block like to_enum(:bar) {\n> bar_size(*args) } which makes the argument passing not necessary.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/362#issuecomment-21222461\n> .\n\n## \n\nAvdi Grimm\nhttp://avdi.org\n\nI only check email twice a day. to reach me sooner, go to\nhttp://awayfind.com/avdi\n", "created_at": "2013-07-19 02:45:56", "user": 982, "id": 21228468}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21228508", "text": "On Wed, Jul 17, 2013 at 2:22 PM, Hanmac notifications@github.com wrote:\n\n> hm i dont know but would it make a difference in benchmark if we test for\n> proc first and then use rb_proc_call and if its not a proc than use the\n> rb_respond_to? i think that rb_proc_call may be faster than rb_funcall2 ?\n\nThe performance difference sounds plausible, but I'm curious if the Ruby\nlibs do this optimization anywhere else where they rely on a callable? If\nso I'd love to see it and learn from it.\n", "created_at": "2013-07-19 02:47:21", "user": 982, "id": 21228508}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23310062", "text": "Sorry for the delay, the PR escaped my mind while I was travelling...\n", "created_at": "2013-08-27 02:53:51", "user": 33770, "id": 23310062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Per @drbrain's suggestion: https://twitter.com/drbrain/status/356695594527490049\n", "labels": [], "number": 363, "updated_at": "2014-06-16 23:16:10", "user": 982, "closed_at": "2013-07-20 13:50:30", "id": 16954676, "title": "Document running a single test using `make test TEST=some_file`", "url": "https://api.github.com/repos/ruby/ruby/issues/363", "created_at": "2013-07-19 03:15:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21293755", "text": "@avdi Thank you! I have committed your patch! :heart: :metal:\n", "created_at": "2013-07-20 13:49:09", "user": 277819, "id": 21293755}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "replaced tabs to 2 spaces in the sample files\n", "labels": [], "number": 364, "updated_at": "2014-06-22 20:40:20", "user": 689198, "closed_at": "2013-07-20 13:45:18", "id": 16956578, "title": "sample whitespace fixed, from tabs to 2 spaces", "url": "https://api.github.com/repos/ruby/ruby/issues/364", "created_at": "2013-07-19 05:15:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21293739", "text": "@sergiocampama Thank you, I have committed your patch!\n\nGenerally speaking, whitespace and other superficial commits aren't recommended. But I have reviewed your changes and they seem ok for samples. Try to provide more helpful patches next time! :heart:\n", "created_at": "2013-07-20 13:48:25", "user": 277819, "id": 21293739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21454467", "text": "hey zzak, thanks! i want to contribute to ruby, but I am not yet familiarized with the code just yet... are there any \"boring\" issues pending in any branch of ruby (test, docs, core) that I might get into to get the hang of it?\n", "created_at": "2013-07-23 23:43:29", "user": 689198, "id": 21454467}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21459229", "text": "There are plenty \n", "created_at": "2013-07-24 02:01:22", "user": 277819, "id": 21459229}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21459251", "text": "Oops. There are plenty of open bugs on the tracker: bugs.ruby-lang.org that could use review\n", "created_at": "2013-07-24 02:02:06", "user": 277819, "id": 21459251}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove a backslash `\\` in Line 614 of regexp.rdoc.\n\n``` ruby\n[1] pry(main)> s = 'a' * 25 + 'd' + 'a' * 4 + 'c'\n=> \"aaaaaaaaaaaaaaaaaaaaaaaaadaaaac\"\n[2] pry(main)> /(b|a)/ =~ s\n=> 0\n[3] pry(main)> /(b|a+)/ =~ s\n=> 0\n[4] pry(main)> /(b|a+)*/ =~ s\n=> 0\n```\n", "labels": [], "number": 365, "updated_at": "2014-06-30 07:23:18", "user": 1000669, "closed_at": "2013-07-20 13:34:59", "id": 17006280, "title": "Fix a typo in doc/regexp.rdoc (remove a backslash)", "url": "https://api.github.com/repos/ruby/ruby/issues/365", "created_at": "2013-07-20 13:22:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21293655", "text": "@JuanitoFatas Thank you, I've committed your patch! :heart:\n", "created_at": "2013-07-20 13:41:13", "user": 277819, "id": 21293655}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21294129", "text": "Thanks! I just notice that this also applied to [re.rdoc in 1.9.3](https://github.com/ruby/ruby/tree/ruby_1_9_3/doc/re.rdoc#L543) (line 543). :microscope: \n", "created_at": "2013-07-20 14:15:13", "user": 1000669, "id": 21294129}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21304953", "text": "@JuanitoFatas I will have to open a backport request in order to merge this patch in 1.9.3 and 2.0.0.\n", "created_at": "2013-07-21 04:23:14", "user": 277819, "id": 21304953}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For grammar's sake\n", "labels": [], "number": 366, "updated_at": "2013-07-24 11:08:14", "user": 817039, "closed_at": "2013-07-24 10:57:20", "id": 17138759, "title": "Add is_an? as an alias to is_a?", "url": "https://api.github.com/repos/ruby/ruby/issues/366", "created_at": "2013-07-24 04:18:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21477293", "text": "See http://bugs.ruby-lang.org/issues/5555#note-10.\nI think only basic forms are used to avoid a proliferation of such variants.\nAliases in Ruby for grammar are pretty rare if not nonexistent.\n\nBut you can of course submit your request to http://bugs.ruby-lang.org if you still want to try, although I doubt it would be accepted.\n", "created_at": "2013-07-24 10:57:20", "user": 168854, "id": 21477293}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21477672", "text": "I guess I'll have to try harder to be a ruby commiter, heh.\nThanks for clearing that up.\n", "created_at": "2013-07-24 11:08:03", "user": 817039, "id": 21477672}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change 'ArgumentError: wrong number of arguments (%d for %d)' to ArgumentError: wrong number of arguments (%d instead of %d).\n\nThis clarifies the meaning of the message without any room for doubt.\n\nAnd looks like raises many doubts: http://stackoverflow.com/questions/7537450/what-does-wrong-number-of-arguments-1-for-0-mean-in-ruby\n\nPersonally, I did find the wording weird the first time I saw that error message and I had to google it to make sure I got it right. With this pull request, we leave no room for further doubt.\n", "labels": [], "number": 367, "updated_at": "2014-06-21 15:15:05", "user": 259568, "closed_at": "2013-10-15 18:15:39", "id": 17256282, "title": "Reword ArgumentError message", "url": "https://api.github.com/repos/ruby/ruby/issues/367", "created_at": "2013-07-26 09:57:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21613883", "text": "Agreed. Might break some tests tho?\n", "created_at": "2013-07-26 10:52:25", "user": 199499, "id": 21613883}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21634554", "text": "Do you mean tests that assert the message? Yes, those would be broken. But it would be an easy – search and replace – fix.\n", "created_at": "2013-07-26 17:10:23", "user": 259568, "id": 21634554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26357502", "text": "Due to the backwards incompatible nature of this patch, I think it would be best top request a new feature in redmine.\n\n@Nerian Could you move this to a feature request on http://bugs.ruby-lang.org/ and update/close this ticket when done?\n\nWithin a few days/weeks I can do this for you.\n\nThanks!\n", "created_at": "2013-10-15 18:00:03", "user": 277819, "id": 26357502}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26358813", "text": "Sure thing. There it is: http://bugs.ruby-lang.org/issues/9025\n", "created_at": "2013-10-15 18:15:39", "user": 259568, "id": 26358813}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ruby -v #=> ruby 2.0.0p247 (2013-06-27 revision 41674) [i686-linux]\n\nFrozen Enumerator can modify positions. \n\n``` ruby\nenum = [1, 2].to_enum.freeze\nenum.next #=> 1\nenum.rewind\nenum.next #=> 1\n```\n\nBut it can't replace receiver-object/block on following methods.\n- Enumerator#initialize_copy\n- Enumerator::Lazy#initialize_copy\n- Enumerator::Lazy#initialize\n\n``` ruby\nenum = [1, 2].to_enum.freeze\nenum.send :initialize_copy, [1, 2]   #=> RuntimeError: can't modify frozen Enumerator\n\nlazy = [1, 2].to_enum.lazy.freeze\nlazy.send :initialize_copy, [1, 2]   #=> RuntimeError: can't modify frozen Enumerator::Lazy\nlazy.send :initialize, [1, 2], &->{} #=> RuntimeError: can't modify frozen Enumerator::Lazy\n```\n\nExcept Enumerator#initialize.\n\n``` ruby\nenum = [1, 2].to_enum.freeze\nenum.send :initialize, [3, 4] #=> warning: Enumerator.new without a block is deprecated; use Object#to_enum\n                              #   <Enumerator: [3, 4]:each>\nenum.send :initialize, &->{}  #=> #<Enumerator: #<Enumerator::Generator:0xb7fa7258>:each>\n```\n\nIs this a spec?\n", "labels": [], "number": 368, "updated_at": "2013-07-29 18:47:06", "user": 1180335, "closed_at": "2013-07-29 07:34:37", "id": 17307921, "title": "Should Enumerator#initialize check frozen status?", "url": "https://api.github.com/repos/ruby/ruby/issues/368", "created_at": "2013-07-28 06:39:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21701302", "text": "The reason #initialize_copy raises an error on a frozen object is just because of its common behavior (see rb_obj_init_copy()) and it is not because Enumerator explicitly checks the frozenness.  Plus, using a private method #initialize to modify an enumerator object is an unsupported operation and kind of abuse.\n\nTo wrap up, my take is that Enumerator doesn't have the sense of frozenness, so there is no spec at the moment.\n\nGiven that, I'm not sure we would want to decently implement the frozenness in Enumerator because a frozen enumerator, if at all, would have no use.  Even #peek could change the state of the object, so all you could do with it is call #size or #inspect.  There should be something better to do than pass an unusable object around.\n", "created_at": "2013-07-29 06:17:57", "user": 10236, "id": 21701302}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21703619", "text": "Thank you for sharing that with me!\nI quite agree \"#initialize to modify an enumerator object is an unsupported operation and kind of abuse\".\n\nI felt strange Enumerator#initialize. This is because [Regexp#initialize explicitly checking frozen](https://github.com/ruby/ruby/blob/3f8e82b421de15760133e5ec7fded086e26ca913/re.c#L2420) and I don't know when using frozen Regexp.\nI guessed every #initialize required checking frozen.\n\nBut I'm sure frozen Enumerator has no meanings and the implementation is needless.\nThank you :)\n", "created_at": "2013-07-29 07:34:36", "user": 1180335, "id": 21703619}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21712348", "text": "Actually, I didn't mean to reject this.  What I wrote above was just an excuse for not eagerly supporting frozenness in Enumerator.\nI think it makes much sense to prevent a frozen enumerator from being modified with #initialize, so I'm going to merge this.\nThanks for your report!\n", "created_at": "2013-07-29 10:53:52", "user": 10236, "id": 21712348}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21741981", "text": "I'm happy with the results :)\nThank you!\n", "created_at": "2013-07-29 18:47:06", "user": 1180335, "id": 21741981}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 369, "updated_at": "2014-07-01 20:33:12", "user": 2240638, "closed_at": "2013-07-31 03:08:21", "id": 17431848, "title": "Fix outdated url.", "url": "https://api.github.com/repos/ruby/ruby/issues/369", "created_at": "2013-07-31 02:40:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21840114", "text": "@Red54 Thank you for your contribution!\n", "created_at": "2013-07-31 04:50:17", "user": 277819, "id": 21840114}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/21971801", "text": "Nice (:\n", "created_at": "2013-08-01 21:39:20", "user": 2791965, "id": 21971801}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If not rescued, may error out if the current working directory is on a network drive (windows only). \n", "labels": [], "number": 370, "updated_at": "2014-07-10 20:47:24", "user": 2637065, "closed_at": "2013-11-07 15:32:41", "id": 17543961, "title": "(win32) Rescue Errno::EINVAL in SecureRandom.random_bytes", "url": "https://api.github.com/repos/ruby/ruby/issues/370", "created_at": "2013-08-02 04:18:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26357561", "text": "@akr Any comment?\n", "created_at": "2013-10-15 18:00:45", "user": 277819, "id": 26357561}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26380351", "text": "2013/10/16 Zachary Scott notifications@github.com\n\n> @akr Any comment?\n\nI can't test this problem because I don't have\nWindows development environment.\n\nIf you can reproduce the problem and confirm the patch fix it,\nplease commit it.\n\nIf you cannot, I recommend to assign this issue to\n\n## Windows developer for Ruby (usa or nobu).\n\nTanaka Akira\n", "created_at": "2013-10-15 23:04:52", "user": 10538, "id": 26380351}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26471893", "text": "I can't reproduce it.\n", "created_at": "2013-10-17 00:55:55", "user": 16700, "id": 26471893}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26477799", "text": "@dbowring Can you show us example to reproduce this? Perhaps a test case?\n\nWithout any feedback within a week or so, I must close this ticket.\n\nThanks for the report!\n", "created_at": "2013-10-17 03:59:07", "user": 277819, "id": 26477799}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27975281", "text": "No feedback for 3 months, if someone can reproduce with some code, or test, please open a ticket on [bugs.ruby-lang.org](http://bugs.ruby-lang.org/)\n", "created_at": "2013-11-07 15:32:41", "user": 277819, "id": 27975281}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "...which otherwise would have been written as \"foo.is_a? Array\"\n", "labels": [], "number": 371, "updated_at": "2013-08-03 16:10:27", "user": 957103, "closed_at": "2013-08-03 16:10:27", "id": 17568191, "title": "Added #is_an? to properly write cases like \"foo.is_an? Array\"...", "url": "https://api.github.com/repos/ruby/ruby/issues/371", "created_at": "2013-08-02 16:10:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22017509", "text": "This has been refused numerous times already, I think.\n", "created_at": "2013-08-02 16:33:30", "user": 199499, "id": 22017509}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22035735", "text": "I'm sorry, I didn't know.\n\nI would like to insist though, since I consider this is consistent with the motivation of ruby of being a human-oriented, natural language.\n", "created_at": "2013-08-02 21:03:49", "user": 957103, "id": 22035735}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22047436", "text": "From matz: http://bugs.ruby-lang.org/issues/5555#note-10\n", "created_at": "2013-08-03 03:08:14", "user": 2637065, "id": 22047436}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22057074", "text": "Ok. That seems fair enough. I agree.\n", "created_at": "2013-08-03 16:10:27", "user": 957103, "id": 22057074}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 372, "updated_at": "2014-07-02 19:33:19", "user": 1180335, "closed_at": "2013-08-04 21:18:41", "id": 17611536, "title": "[DOC] Remove Enumerator::Lazy#cycle", "url": "https://api.github.com/repos/ruby/ruby/issues/372", "created_at": "2013-08-04 19:03:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22084966", "text": "Thanks!\n", "created_at": "2013-08-05 03:06:35", "user": 1180335, "id": 22084966}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix TracePoint#enable result\n", "labels": [], "number": 373, "updated_at": "2014-07-02 22:53:51", "user": 60238, "closed_at": "2013-08-05 13:26:44", "id": 17619491, "title": "* vm_trace.c: [DOC] Fix TracePoint example", "url": "https://api.github.com/repos/ruby/ruby/issues/373", "created_at": "2013-08-05 05:14:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I believe one of the +/- timezone signs here are incorrect. I changed one of them, arbitrarily chosen.\n", "labels": [], "number": 374, "updated_at": "2013-08-06 13:41:47", "user": 121299, "closed_at": "2013-08-06 13:41:47", "id": 17654631, "title": "typo correction in Time documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/374", "created_at": "2013-08-05 19:34:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This describes what the code actually does. The old\nversion referenced a class check and the spaceship operator,\nboth of which aren't used.\n\nAlso fixed formatting of the whole comment to be one space from\nthe \\* as per the style guide\n\nI must admit that I do not fully follow the C code, and when reading it I would expect it to call === on obj, instead of ==, but this is the behaviour I get, so I think I misinterpreted the C code there.\n\nSmall demonstration of current behaviour:\n\n``` ruby\nclass FakeString\n  def initialize string\n    @string = string\n  end\n\n  def to_str\n    'i must exist, but i am not actually used'\n  end\n\n  def ==(other)\n    @string == other\n  end\nend\n\n\nfake = FakeString.new('a')\n\nputs 'a' == fake # true\nputs fake == 'a' # true\nputs 'b' == fake # false\nputs fake == 'b' #false\n```\n", "labels": [], "number": 375, "updated_at": "2013-08-08 19:33:33", "user": 624143, "closed_at": "2013-08-07 00:04:02", "id": 17711517, "title": "Fixed descriptions of String#==", "url": "https://api.github.com/repos/ruby/ruby/issues/375", "created_at": "2013-08-06 20:04:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22207705", "text": "@markijbema You should see also String#<=>\n", "created_at": "2013-08-06 20:15:25", "user": 277819, "id": 22207705}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22208409", "text": "Sorry, that's a bit too cryptical. Did I misunderstand? Or should something change there as well?\n", "created_at": "2013-08-06 20:25:21", "user": 624143, "id": 22208409}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22212223", "text": "String#<=> discusses the comparison of strings used by String#==\n", "created_at": "2013-08-06 21:18:33", "user": 277819, "id": 22212223}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22214933", "text": "Unless I'm very much mistaken, String#== does not use String#<=> at all. That's kind of the core of this change.\n\nhttps://github.com/ruby/ruby/blob/7f33b7deec724d3589a8ea63f1cfe24443d34bb8/string.c#L2409-L2419\n\nIt only uses str_eql for actual strings, not rb_str_cmp_m.\n", "created_at": "2013-08-06 21:57:50", "user": 624143, "id": 22214933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22216485", "text": "@markijbema Sorry, i didn't mean to imply that String#<=> was used by String#==, only that they are similar and you can look at the documentation for String#<=> for inspiration.\n", "created_at": "2013-08-06 22:23:10", "user": 277819, "id": 22216485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22233099", "text": "I see what you mean now. Are you sure about the case equality though? When I change == to === in the code above it does not work (and returns false for everything).\n\nThanks for cleaning up my patch! Sorry for misunderstanding.\n", "created_at": "2013-08-07 06:57:05", "user": 624143, "id": 22233099}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22249799", "text": "On Aug 7, 2013, at 2:57 AM, Mark IJbema notifications@github.com wrote:\n\n> I see what you mean now. Are you sure about the case equality though? When I change == to === in the code above it does not work (and returns false for everything).\n> \n> This what rb_equal does, if I'm not mistaken.\n> Thanks for cleaning up my patch! Sorry for misunderstanding.\n> \n> No problem, thank you for the patch!\n", "created_at": "2013-08-07 13:13:23", "user": 277819, "id": 22249799}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22346187", "text": "Yes, it is wat rb_equal does. And it is also what I would think str#== uses, when reading the ruby code. However, I could not reproduce this behaviour in my code. As said, the code as I pasted above in the pullrequest works. When I change it to === it does not. So either I completely misunderstand something about how === works, or it actually does use ==.\n", "created_at": "2013-08-08 18:50:28", "user": 624143, "id": 22346187}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22348886", "text": "Which change did you make?\n\n```\n>> 'a' === FakeString.new('a')\n=> true\n>> FakeString.new('a') === 'a'\n=> true\n```\n\nIf you also replaced FakeString#== with FakeString#=== this would not work as String#== does not dispatch to FakeString#===.\n", "created_at": "2013-08-08 19:27:11", "user": 9831, "id": 22348886}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22349308", "text": "Ah, I understand now. Thanks for clarifying!\n", "created_at": "2013-08-08 19:33:33", "user": 624143, "id": 22349308}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is this intended?\n\nruby -v\n- ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-linux]\n- ruby 2.1.0dev (2013-08-09 trunk 42476) [x86_64-linux]\n\n``` ruby\nClass.new.__send__ :append_features, Module.new #=> NoMethodError: undefined method `append_features' for #<Class:0x007f4473d178b0>\nClass.new.__send__ :prepend_features, Module.new #=> TypeError: wrong argument type Class (expected Module)\n```\n", "labels": [], "number": 376, "updated_at": "2013-08-14 08:59:14", "user": 1180335, "closed_at": "2013-08-13 12:57:22", "id": 17871597, "title": "Class should undef Module#prepend_features on own scope as Module#append_features", "url": "https://api.github.com/repos/ruby/ruby/issues/376", "created_at": "2013-08-09 16:16:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22434058", "text": "@nobu ping\n", "created_at": "2013-08-10 04:45:34", "user": 12301, "id": 22434058}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22562966", "text": "Thank you!\n", "created_at": "2013-08-13 13:03:11", "user": 1180335, "id": 22562966}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added documentation to some constants missing documentation yet. If you feel any of them should have nodoc instead, I will add those.\n\nTo be honest, some of those feel strange to me, for instance the nr of days per months are only used in a private method, so should be private imho, but I guess we can't for backwards compatibility reasons?\n", "labels": [], "number": 377, "updated_at": "2014-07-03 19:53:23", "user": 624143, "closed_at": "2013-08-10 17:46:41", "id": 17899777, "title": "Documented undocumented constants in time.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/377", "created_at": "2013-08-10 15:08:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22443935", "text": "I think they should be kept public, not just for compat, but because they are helpful only added when you `require 'time'`.\n", "created_at": "2013-08-10 17:42:54", "user": 277819, "id": 22443935}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22443990", "text": "Ok, I can see the functionality. But it seems strange that they are public, but for instance month_days isn't. But I don't feel too strongly about having them public/private either way.\n", "created_at": "2013-08-10 17:45:56", "user": 624143, "id": 22443990}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22450837", "text": "@markijbema I've reverted this change and `nodoc`'d the constants at tanaka-san's request. See: 2e04bc7 and the associated ruby-core email mentioned in the `ChangeLog`\n", "created_at": "2013-08-11 01:49:39", "user": 277819, "id": 22450837}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22458161", "text": "Ok, that seems fair. I have no strong opinion on whether it should be documented or not, just took the ruby documentation project as guide to find some undocumented code, and as excuse to browse around the code, and while such, trying to provide something useful as well.\n\nRegarding that, If I may ask another minute of your time, is the way I'm providing pull requests correct (since I noticed you have to reformat it in some way, or is that only because ruby is still using svn internally?)?\n", "created_at": "2013-08-11 14:04:41", "user": 624143, "id": 22458161}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22464169", "text": "@markijbema You did nothing wrong, don't worry! Sometimes we make mistakes, including myself, this was just one of those not-so-rare occasions where it's better to just `nodoc`.\n\nFrom a patch perspective, your patches were applied by me verbatim, and I should have reviewed it more closely to spot the bug with the example, but noone is perfect and this is my fault.\n\nIn short, keep doing what you're doing and thanks for the contributions!\n", "created_at": "2013-08-11 20:05:36", "user": 277819, "id": 22464169}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22464750", "text": "Ok, thanks!\n", "created_at": "2013-08-11 20:36:46", "user": 624143, "id": 22464750}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/8771\n", "labels": [], "number": 378, "updated_at": "2017-09-28 07:26:37", "user": 323058, "closed_at": "2017-09-28 07:26:37", "id": 17904750, "title": "Fix for Bug8771, Net::HTTP.start should pass proxy configuration from ENV", "url": "https://api.github.com/repos/ruby/ruby/issues/378", "created_at": "2013-08-10 22:07:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26357636", "text": "This patch was rejected, see ruby-core:57246\n", "created_at": "2013-10-15 18:01:43", "user": 277819, "id": 26357636}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52137986", "text": "@zzak can this be reopened? I have asked for the bug to be reopened as well in https://bugs.ruby-lang.org/issues/8771. I think the underlying inconsistency when using a proxy between `Net::HTTP.start('google.com').get('/')` and `Net::HTTP.new('google.com').get('/')` is a valid bug and this patch appears to address it.\n", "created_at": "2014-08-14 02:48:10", "user": 315873, "id": 52137986}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52138968", "text": "Can you write a test?\n", "created_at": "2014-08-14 03:07:02", "user": 277819, "id": 52138968}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89020821", "text": "Looks like there's a test here now, and this just needs a rebase\n", "created_at": "2015-04-02 19:40:26", "user": 1535036, "id": 89020821}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332751787", "text": "Implemented as r58798", "created_at": "2017-09-28 07:26:37", "user": 13423, "id": 332751787}], "assignees": [13423, 13423], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is this intended?\n\n``` ruby\n$VERBOSE = true\n\nfoo = Object.new\n\ndef foo.to_int\n  0\nend\n\nrng = -> max { foo }\n\nclass << rng\n  alias_method :rand, :call\nend\n```\n\nruby 2.0.0dev (2013-02-22 trunk 39375) [x86_64-linux]\n\n``` ruby\n[:a, :b].sample random: rng  #=> :a\n[:a, :b].shuffle random: rng #=> [:b, :a]\n```\n\nruby 2.1.0dev (2013-08-11 trunk 42503) [x86_64-linux]\n\n``` ruby\n[:a, :b].sample random: rng  #=> undefined method `<' for #<Object:0x007ff19d5a4f60> (NoMethodError)\n[:a, :b].shuffle random: rng #=> undefined method `<' for #<Object:0x007ff19d5a4f60> (NoMethodError)\n```\n", "labels": [], "number": 379, "updated_at": "2014-08-04 04:28:36", "user": 1180335, "closed_at": "2013-08-13 13:17:52", "id": 17907545, "title": "Array#{sample,shuffle} should use random_generator_result.to_int", "url": "https://api.github.com/repos/ruby/ruby/issues/379", "created_at": "2013-08-11 03:12:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22563875", "text": "Thank you!\n", "created_at": "2013-08-13 13:19:47", "user": 1180335, "id": 22563875}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adds a note and two examples on string literal concatenation to the literals documentation.\n", "labels": [], "number": 380, "updated_at": "2014-06-15 02:02:33", "user": 476505, "closed_at": "2013-08-12 23:57:27", "id": 17957745, "title": "* doc/syntax/literals.rdoc: Add string literal concatenation", "url": "https://api.github.com/repos/ruby/ruby/issues/380", "created_at": "2013-08-12 18:50:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22519069", "text": "I purposefully avoided describing string literal concatenation due to https://bugs.ruby-lang.org/issues/6265 (which, I think, was still on the table for 2.0.0 when I wrote this page)\n\nSo long as string concatenation still exists in ruby I think it should be documented.\n", "created_at": "2013-08-12 19:34:59", "user": 9831, "id": 22519069}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22526796", "text": "@drbrain cool. Do you think the few lines I wrote would work or should I add more of a formal paragraph like in [Programming Ruby](http://www.ruby-doc.org/docs/ProgrammingRuby/html/language.html#UD)?\n", "created_at": "2013-08-12 21:26:43", "user": 476505, "id": 22526796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22527241", "text": "I think your single sentence is sufficient, but you may want to add an example showing that single quote, double quote and %-style strings can be intermixed:\n\n```\n$ ruby -e \"p %q{c} 'b' \\\"a\\\"\"\n\"cba\"\n```\n\nbut a percent-string last is ambiguous with the % method:\n\n```\n$ ruby -e \"p \\\"a\\\" 'b' %q{c}\"\n-e:1:in `<main>': undefined method `q' for main:Object (NoMethodError)\n```\n", "created_at": "2013-08-12 21:32:35", "user": 9831, "id": 22527241}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22530246", "text": "@drbrain added! ^_^\n", "created_at": "2013-08-12 22:16:58", "user": 476505, "id": 22530246}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Logger::Formatter::FORMAT` is a constant and should be named accordingly.\n\nWhen I first saw `Logger::Formatter::Format` I thought it was a class used to describe the format, but it is just a string.\n", "labels": [], "number": 381, "updated_at": "2015-11-20 14:27:13", "user": 66112, "closed_at": "2015-11-20 14:27:13", "id": 18034944, "title": "Logger::Formatter::FORMAT is a constant", "url": "https://api.github.com/repos/ruby/ruby/issues/381", "created_at": "2013-08-14 04:47:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22630437", "text": "Revised, LGTM.\n", "created_at": "2013-08-14 11:57:05", "user": 2791965, "id": 22630437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22678322", "text": "This will break backward compatibility as this is a common pattern:\n\n``` ruby\nclass MyLogger::MyFormatter < ::Logger::Formatter\n  Format = \"[%s#%d] %5s -- %s: %s\\n\"\n\n  def call(severity, time, progname, msg)\n    Format % [format_datetime(time), $$, severity, progname, msg2str(msg)]\n  end\nend\n```\n\nsee:\n\nhttps://github.com/search?l=ruby&q=%22Logger%3A%3AFormatter%3A%3AFormat%22&ref=searchresults&type=Code\n", "created_at": "2013-08-15 00:43:39", "user": 9831, "id": 22678322}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22688634", "text": "You're right that this isn't backward compatible, but your example should still work as you define a new `Format` constant.\nThe question is, if this has been \"advertised\" as something public. Looking at the docs I guess not.\n", "created_at": "2013-08-15 07:13:19", "user": 66112, "id": 22688634}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22806026", "text": "What about Format = FORMAT = ... in the interim?\n", "created_at": "2013-08-17 05:31:05", "user": 10936, "id": 22806026}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22807250", "text": "I already thought about that. What would \"in the interim\" mean here? Until 2.1 is released? Or 3.0?\n", "created_at": "2013-08-17 07:34:00", "user": 66112, "id": 22807250}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23690687", "text": "Is there a reason you need it a constant? Or you just want it for consistency?\n", "created_at": "2013-09-03 05:24:44", "user": 277819, "id": 23690687}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23694228", "text": "@zzak I don't _need_ it to be a constant, it _is_ already a constant. And it should be named like that.\n", "created_at": "2013-09-03 07:26:03", "user": 66112, "id": 23694228}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23738086", "text": "Perhaps we should just update the documentation for Logger::Formatter\n", "created_at": "2013-09-03 19:01:01", "user": 277819, "id": 23738086}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23786746", "text": "I checked a lot of the code from @drbrain's search above. It seems no one is just modifying `Format` and sticking to the default `Formatter`. Probably because Ruby will already warn about this. That's the only use case that would break with this change.\n\n@joelmccracken Thinking about your suggestion I noticed that it just won't work that way. The implementation would have to check if either `Format` or `FORMAT` have to be used, which is probably undecidable.\n\nThat said I'd still vote to merge this into `trunk`. Any objections?\n", "created_at": "2013-09-04 12:58:07", "user": 66112, "id": 23786746}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23862052", "text": "I don't see advantages.\n\n", "created_at": "2013-09-05 11:49:52", "user": 16700, "id": 23862052}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26877027", "text": "Such feature would need @nahi's approval\n", "created_at": "2013-10-23 02:51:40", "user": 277819, "id": 26877027}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/155258236", "text": "I agree with nobu.\nI think there are no widely accepted rules or agreements to name constants with upper-case. \n", "created_at": "2015-11-10 01:55:42", "user": 315008, "id": 155258236}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158414877", "text": "I succeeded the maintainer of Logger from nahi, and I also can't see advantages. Let me close. \n", "created_at": "2015-11-20 14:27:13", "user": 2290461, "id": 158414877}], "assignees": [2290461, 2290461], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 382, "updated_at": "2014-07-01 02:12:38", "user": 1180335, "closed_at": "2013-08-14 17:36:04", "id": 18056622, "title": "[DOC] Narrow Hash#{[]=,store} duplicating String key", "url": "https://api.github.com/repos/ruby/ruby/issues/382", "created_at": "2013-08-14 14:53:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22652776", "text": "@kachick Thank you! I have committed your patch with some format changes.\n\nBecause this is edge case, I think it should follow original example as \"note\".\n", "created_at": "2013-08-14 17:35:11", "user": 277819, "id": 22652776}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22653184", "text": "Good! Thanks for your improvements :)\n", "created_at": "2013-08-14 17:40:57", "user": 1180335, "id": 22653184}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 383, "updated_at": "2014-06-20 09:05:45", "user": 1180335, "closed_at": "2013-10-23 15:17:10", "id": 18197725, "title": "OpenStruct's exception, special-string, Enumerator#size", "url": "https://api.github.com/repos/ruby/ruby/issues/383", "created_at": "2013-08-17 18:41:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359055", "text": "@marcandre Could you review this when you get a chance?\n", "created_at": "2013-10-15 18:18:18", "user": 277819, "id": 26359055}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359385", "text": "These look really good :+1\nI'll triple check and commit them soon.\n", "created_at": "2013-10-15 18:22:39", "user": 33770, "id": 26359385}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26915103", "text": "These were all great commits. They were committed almost verbatim; I tweaked a bit the commit messages.\n\nThere was one test that relied on `\"+(binary)\".to_sym == :+`. I didn't know that, thanks! I find it a bit crazy. It will probably make it in my RubyConf talk in a few weeks :-) Anyways, I preferred using a test with a general object that converts to a symbol. I also opened http://bugs.ruby-lang.org/issues/9048\n", "created_at": "2013-10-23 15:31:17", "user": 33770, "id": 26915103}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26923355", "text": "Thanks!\nI'm looking forward to your talk :)\n", "created_at": "2013-10-23 17:05:36", "user": 1180335, "id": 26923355}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nNot sure if this breaks anything else but it has solved a major frustration with our use of proxies and ruby tools.\n\nThanks,\nTom\n", "labels": [], "number": 384, "updated_at": "2013-08-20 13:16:12", "user": 310856, "closed_at": "2013-08-20 11:59:31", "id": 18290686, "title": "Allowing proxy specified by http_env variable to use basic authentication", "url": "https://api.github.com/repos/ruby/ruby/issues/384", "created_at": "2013-08-20 11:32:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/22939965", "text": "As far as I know, it is intentional not to take confidential information from environment variables, which policy has once (or more) been clearly stated by the maintainer. (e.g. http://bugs.ruby-lang.org/issues/4388 -- This one is in Japanese)\n\nSo, this is not a bug nor is it about a patch.  It's about the policy.  You must step in to bugs.ruby-lang.org, file an issue and try to convince the maintainer if you have a strong opinion on this against the current policy.\n", "created_at": "2013-08-20 11:59:31", "user": 10236, "id": 22939965}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I couldn't find `test_forwardable.rb`.\n\n`ruby -v` ruby 2.1.0dev (2013-08-27 trunk 42710) [x86_64-linux]\n\n``` ruby\n# coding: us-ascii\n\n$VERBOSE = true\n\nrequire 'forwardable'\n\nclass Foo\n  extend Forwardable\n\n  attr_reader :destination\n\n  def initialize\n    @destination = []\n  end\n\n  def_delegators :@destination, '__id__'\nend\n\nfoo = Foo.new\n\np foo.destination.__id__.equal?(foo.__id__) #=> false\n\nclass Foo\n  def_delegators :@destination, :__id__\nend\n\np foo.destination.__id__.equal?(foo.__id__) #=> true\n\n\nDESTINATION = []\nobj = Object.new\nobj.extend SingleForwardable\n\nobj.def_delegators :DESTINATION, '__id__'\np obj.__id__.equal?(DESTINATION.__id__) #=> false\n\nobj.def_delegators :DESTINATION, :__id__\np obj.__id__.equal?(DESTINATION.__id__) #=> true\n```\n", "labels": [], "number": 385, "updated_at": "2014-07-04 03:58:06", "user": 1180335, "closed_at": "2013-10-15 18:19:40", "id": 18620241, "title": "When given Symbol names, {Single}Forwardable#def_delegators should reject #__id__ and #__send__ as String names.", "url": "https://api.github.com/repos/ruby/ruby/issues/385", "created_at": "2013-08-27 17:01:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23690750", "text": "@kachick The maintainer of forwardable should give you some feedback, that is keiju-san. Unfortunately he doesn't monitor github, so I suggest opening a ticket on [bugs.ruby-lang.org](http://bugs.ruby-lang.org/) and assigning it to him.\n", "created_at": "2013-09-03 05:27:34", "user": 277819, "id": 23690750}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23698957", "text": "@zzak Thanks for your suggestion :)\nI have opened the ticket http://bugs.ruby-lang.org/issues/8855.\n\n/cc @keiju\n", "created_at": "2013-09-03 09:11:09", "user": 1180335, "id": 23698957}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359163", "text": "Closing in favor of redmine ticket [Bug #8855](http://bugs.ruby-lang.org/issues/8855)\n", "created_at": "2013-10-15 18:19:40", "user": 277819, "id": 26359163}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 386, "updated_at": "2014-06-19 02:29:12", "user": 982, "closed_at": "2013-09-03 05:52:11", "id": 18629802, "title": "Clarify documentation for ConditionVariable#wait", "url": "https://api.github.com/repos/ruby/ruby/issues/386", "created_at": "2013-08-27 19:49:26", "comments": [], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've implemented class hierarchy method caching against the current trunk.\n\nI've skipped a bunch of commits relating to constant caching in this pull request that were in the `klasscache-trunk` branch, because they were causing hard to resolve merge conflicts.\n\nOnce this patch set is reviewed and I have merged it into SVN trunk, I'll work on implementing better constant caching again.\n\ncc @ko1\n", "labels": [], "number": 387, "updated_at": "2014-06-15 17:51:30", "user": 179065, "closed_at": "2013-09-04 05:29:30", "id": 18659687, "title": "Implement class hierarchy method caching", "url": "https://api.github.com/repos/ruby/ruby/issues/387", "created_at": "2013-08-28 10:12:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23427869", "text": "How will this affect #extend? Will #extend still clear the global method cache?\n", "created_at": "2013-08-28 16:22:00", "user": 499, "id": 23427869}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23459963", "text": "@judofyr No. extend calls rb_include_module on the singleton class which takes care of hierarchical invalidation.\n\nBecause singleton classes have no descendants, #extend is now quite cheap!\n", "created_at": "2013-08-29 00:48:43", "user": 179065, "id": 23459963}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23603146", "text": "Whoaw. Great work, as always.\n", "created_at": "2013-08-31 08:57:07", "user": 199499, "id": 23603146}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23653791", "text": "@ko1 I have addressed your feedback\n", "created_at": "2013-09-02 11:03:02", "user": 179065, "id": 23653791}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23701600", "text": "I read whole of patch and it seems good.(no problem)\nThank you for your great effort, and yoru patient.\n\nI and Nobu discussed about this patch and we consider 32bit restriction of sp_ar_index_t is not desireble for future.\nOptions:\n(1) use only st and make another patch to introduce sp_ar.[ch] with exact benchmark\nthis option make this patch simple. I prefer this option.\nAfter commit without sp_ar.[ch], then discuss with benchmark result.\n(2) Use st_data_t as sp_ar_index_t.\nEasy way to fix this patch.\n\nTrivial points:\n(a) memory consumption. Do you have measurement environmen?\nIf you don't have, I'll check them on my environment.\n\n(b) function and type names\nCan I fix after your commits after discussion with you?\n`seq' is too simple for me.\n", "created_at": "2013-09-03 10:04:18", "user": 9558, "id": 23701600}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23701851", "text": "> (1) use only st and make another patch to introduce sp_ar.[ch] with exact benchmark\n> this option make this patch simple. I prefer this option.\n> After commit without sp_ar.[ch], then discuss with benchmark result.\n\nI agree this is the best option. I will remove sp_ar from this patch and then we can discuss adding it back later.\n\n> (a) memory consumption. Do you have measurement environmen?\n> If you don't have, I'll check them on my environment.\n\nI don't, sorry.\n\n> (b) function and type names\n> Can I fix after your commits after discussion with you?\n> `seq' is too simple for me.\n\nDo you mean that you will fix naming after I commit this to trunk? I'm ok with this.\n", "created_at": "2013-09-03 10:09:23", "user": 179065, "id": 23701851}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23703325", "text": "> ```\n> (1) use only st and make another patch to introduce sp_ar.[ch] with exact benchmark\n> this option make this patch simple. I prefer this option.\n> After commit without sp_ar.[ch], then discuss with benchmark result.\n> ```\n> \n> I agree this is the best option. I will remove sp_ar from this patch and then we can discuss adding it back later.\n\nThank you for additional effort.\n\n> ```\n> (a) memory consumption. Do you have measurement environmen?\n> If you don't have, I'll check them on my environment.\n> ```\n> \n> I don't, sorry.\n\nOk. I'll check it.\n\n> ```\n> (b) function and type names\n> Can I fix after your commits after discussion with you?\n> `seq' is too simple for me.\n> ```\n> \n> Do you mean that you will fix naming after I commit this to trunk? I'm ok with this.\n\nYes. It is trivial problem.\nI want to unify seq and state_version.\n(i) vm_state_version -> vm_seq_number\n(ii) seq -> state_version\n(iii) other good name\n", "created_at": "2013-09-03 10:40:51", "user": 9558, "id": 23703325}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23703521", "text": "This is other comments for future:\n\n(1) Can we unify method table and method caching table?\nIf we can, it reduces memory consumption.\n\n(2) do you want to replace st.[ch] with sp_ar.[ch] for ID key tables?\nI can agree with benchmark results.\n", "created_at": "2013-09-03 10:45:54", "user": 9558, "id": 23703521}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23706937", "text": "@charliesome: But it will cause lots of method cache misses, right?\n\n``` ruby\n  def foo(x)\n    x.bar\n  end\n\n  a = Foo.new.extend Helpers\n  foo(a)\n  b = Foo.new.extend Helpers\n  foo(b)\n```\n\n## \n\n// Magnus Holm\n", "created_at": "2013-09-03 11:54:20", "user": 499, "id": 23706937}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23708083", "text": "Memory consumption for test-all.\nhttp://www.atdot.net/fp_store/f.3ztjsm/file.copipa-temp-image.png\nnot so big difference (but on not practical usecase)\n", "created_at": "2013-09-03 12:15:27", "user": 9558, "id": 23708083}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23708691", "text": "@judofyr Yep, the `#bar` call site will miss often in your example.\n", "created_at": "2013-09-03 12:28:12", "user": 179065, "id": 23708691}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23763710", "text": "@ko1 I have removed sparse array, so I hope I can merge this into trunk today if it looks good to you.\n", "created_at": "2013-09-04 03:24:57", "user": 179065, "id": 23763710}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 388, "updated_at": "2014-06-27 10:40:31", "user": 1180335, "closed_at": "2013-09-23 02:36:36", "id": 18730861, "title": "[DOC] Update Enumerator#each", "url": "https://api.github.com/repos/ruby/ruby/issues/388", "created_at": "2013-08-29 13:33:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23498152", "text": ":heart:\n", "created_at": "2013-08-29 15:27:45", "user": 277819, "id": 23498152}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23691476", "text": "@kachick I think the example may be too complex for beginners. Could you create a smaller one? Perhaps explain it thoroughly?\n", "created_at": "2013-09-03 05:54:55", "user": 277819, "id": 23691476}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23698108", "text": "@zzak Thank you for the comment :)\nBut sorry, I couldn't find daily use-case for Enumerator#each.\n- I added 1194270.\n  I hope that overviews an enumerator passes given arguments to receiver.\n- Enumerable#to_a has similar documentation missing.\n  9bdbdbf follows it.\n", "created_at": "2013-09-03 08:53:52", "user": 1180335, "id": 23698108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24821004", "text": "@kachick Enumerator includes Enumerable so #each allows use of all thosee features.\n\n@_zzak I think it is OK to reference Primes from core docs.\n", "created_at": "2013-09-20 16:02:48", "user": 9831, "id": 24821004}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24822279", "text": "@zzak @drbrain Thanks for your reviews :)\n", "created_at": "2013-09-20 16:21:16", "user": 1180335, "id": 24822279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24896493", "text": "I will close this ticket then, if I have missed something please submit a new patch.\n", "created_at": "2013-09-23 02:36:36", "user": 277819, "id": 24896493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24899726", "text": "@zzak All patches are committed. Thank you! :)\n", "created_at": "2013-09-23 05:32:26", "user": 1180335, "id": 24899726}], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As per http://tools.ietf.org/html/rfc4408#section-3.1.3, when a TXT or SPF record contains multiple strings, those strings should be concatenated without any delimiter. Resolv was taking the first string, which meant that valid data in a TXT record wouldn't be available. This change just concatenates the strings together.\n", "labels": [], "number": 389, "updated_at": "2014-01-19 05:35:47", "user": 436530, "closed_at": "2013-11-07 17:59:43", "id": 18787522, "title": "Resolv: Multiple strings should be concatenated in a DNS record's data", "url": "https://api.github.com/repos/ruby/ruby/issues/389", "created_at": "2013-08-30 13:28:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23689877", "text": "@akr is the current maintainer of resolv.rb but doesn't monitor github, could you move this patch to [bugs.ruby-lang.org](http://bugs.ruby-lang.org)?\n", "created_at": "2013-09-03 04:49:09", "user": 277819, "id": 23689877}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27990073", "text": "I have moved this to the bug tracker as [Bug #9093](http://bugs.ruby-lang.org/issues/9093)\n", "created_at": "2013-11-07 17:59:43", "user": 277819, "id": 27990073}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32701588", "text": "This was resolved by [r44642](https://github.com/ruby/ruby/commit/e86a904)\n", "created_at": "2014-01-19 05:35:47", "user": 277819, "id": 32701588}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The new ruby-lang bug url is bugs.ruby-lang.org.  \n\nAside:  Can you direct me to documentation on the right correct way to contribute back to Ruby?  Is the github repo a mirror or main?  Thanks.\n", "labels": [], "number": 390, "updated_at": "2014-06-19 02:31:04", "user": 313254, "closed_at": "2013-09-03 05:41:52", "id": 18873251, "title": "Updating the Crash Report bugs url", "url": "https://api.github.com/repos/ruby/ruby/issues/390", "created_at": "2013-09-02 16:52:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23672633", "text": "@ScotterC Github patches are ok! I will commit this upstream when I get a chance.\n\nThank you! :heart:\n", "created_at": "2013-09-02 18:01:30", "user": 277819, "id": 23672633}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Feature #8632\n", "labels": [], "number": 391, "updated_at": "2014-06-17 05:06:56", "user": 69933, "closed_at": "2013-10-23 16:24:30", "id": 19010161, "title": "lib/erb.rb: add ability to assign local variables with Hash in ERB#result", "url": "https://api.github.com/repos/ruby/ruby/issues/391", "created_at": "2013-09-04 23:40:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23855686", "text": "@seki Could you review this?\n", "created_at": "2013-09-05 09:43:06", "user": 12301, "id": 23855686}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23863177", "text": "Do you want this?\n\n``` ruby\n\nrequire 'erb'\n\nmodule ERBWithHash\n  class HashAsBinding\n    def initialize(hash)\n      @_env = hash\n    end\n\n    def method_missing(msg, *args)\n      super if block_given?\n      super unless args.empty?\n      @_env.fetch(msg) { @_env.fetch(msg.to_s) { super }}\n    end\n  end\n\n  def result_with_hash(hash)\n    __erb__ = self\n    HashAsBinding.new(hash).instance_eval { __erb__.result(binding) }\n  end\nend\n\nclass ERB\n  include ERBWithHash\nend\n\nmy_erb = ERB.new(<<EOS)\nfile_size: <%= x.read.size%>\ncollection:\n<% z.each_with_index do |it, idx| %> [<%= idx%>] <%= it %>\n<% end %>\n\nEOS\n\nputs my_erb.result_with_hash(x: File.open(__FILE__), y: 3, z: ['z', 'zz'])\n\nrequire 'set'\nset = Set.new\nset << 'a'\nset << 3\nset << Thread.current\n\nputs my_erb.result_with_hash(x: File.open(__FILE__), y: nil, z: set)\n\n\n```\n", "created_at": "2013-09-05 12:13:19", "user": 33682, "id": 23863177}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23864047", "text": "https://gist.github.com/seki/6449467\n", "created_at": "2013-09-05 12:30:57", "user": 33682, "id": 23864047}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23864562", "text": "Hi @seki, thank you for the quick response!\n\nIt looks good, but i afraid we can get a performance penalty with `method_missing`. Please let me check\n", "created_at": "2013-09-05 12:41:32", "user": 69933, "id": 23864562}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23865322", "text": "Your right, its better:\n\n```\n       user     system      total        real\nMethod missing  9.030000   1.260000  10.290000 ( 10.285973)\nBinding 10.590000   1.240000  11.830000 ( 11.836209)\n```\n\nLike it :+1: \n", "created_at": "2013-09-05 12:55:22", "user": 69933, "id": 23865322}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23866346", "text": "In your code: \nI think It can't assign a File, a Set, and so on.\n\n``` ruby\n eval(__bvalues.map{ |k, v| \"#{k} = __bvalues[#{k.inspect}]; \"}.join, __binding)\n\n```\n", "created_at": "2013-09-05 13:13:06", "user": 33682, "id": 23866346}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/23979074", "text": "@Ptico I was in the gem erb_with_hash. http://rubygems.org/gems/erb_with_hash\n", "created_at": "2013-09-07 01:32:49", "user": 43500, "id": 23979074}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359279", "text": "Any update on this ticket?\n\n/cc @seki @Ptico \n", "created_at": "2013-10-15 18:21:10", "user": 277819, "id": 26359279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26361050", "text": "@zzak i'm absolutely happy with @seki solution, but dunno what to do next\n", "created_at": "2013-10-15 18:43:05", "user": 69933, "id": 26361050}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26877112", "text": "its up to @seki to commit this.\n\nif he feels existing solution (or gem) is good enough, then we close the ticket.\n", "created_at": "2013-10-23 02:54:11", "user": 277819, "id": 26877112}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26879611", "text": "Sorry, I forgot it. (and reminded now)\nWe have to close the ticket.\n\n2013/10/23 11:54\u001b$B!\"\u001b(BZachary Scott notifications@github.com \u001b$B$N%a%C%;!<%8\u001b(B:\n\n> its up to @seki to commit this.\n> \n> if he feels existing solution (or gem) is good enough, then we close the ticket.\n> \n> \u001b$B!=\u001b(B\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-23 04:12:20", "user": 33682, "id": 26879611}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26919871", "text": "Closing per @seki -san's [request](https://twitter.com/m_seki/status/393038548137291776)\n\n@hsbt @shyouhei In the future, lets add @seki as collaborator if he wants :smile:\n", "created_at": "2013-10-23 16:24:30", "user": 277819, "id": 26919871}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26959084", "text": "@zzak added seki into collaborator of this repository :octocat: \n", "created_at": "2013-10-24 00:53:52", "user": 12301, "id": 26959084}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In certain cases, things like Array#sort can result in a confusing error\nmessage. For instance where a and b are characters in a string,\n\"string\":\n\n  array.sort { |a, b| string.index(a) <=> string.index(b) }\n\nIf one of the index calls returns nil, we will get \"comparison of String\nwith String failed\", which is somewhat unhelpful, since it's easy to be\nconfused, given that what is really being compared is a Fixnum or\nNilClass (the cause of the error). Yes, as far as Array#sort is\nconcerned, the two characters are the things being sorted, but it's\nuseful to call attention to the return value of the comparison in this\ncase.\n\nThis patch adds a \"reason\" argument to rb_cmperr, which will provide an\nerror message of \"comparison of String with String failed: comparator\nreturned nil\" in the case above, or, in the case of:\n\n  1.upto('10').to_a\n\nit will provide the message: \"comparison of Fixnum with String failed:\ncoercion was not possible\"\n", "labels": [], "number": 392, "updated_at": "2018-02-23 03:06:30", "user": 14947, "closed_at": "None", "id": 19137135, "title": "Improve comparison error message.", "url": "https://api.github.com/repos/ruby/ruby/issues/392", "created_at": "2013-09-07 02:41:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26351801", "text": "@nobu any objection here?\n", "created_at": "2013-10-15 16:49:48", "user": 277819, "id": 26351801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26354282", "text": "Idea is good. Not too sure about the wording of \"coercion was not possible\". Do we need more explanation in that case?\n", "created_at": "2013-10-15 17:21:35", "user": 33770, "id": 26354282}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26355596", "text": "Not sure how much more specific we can get without making the change somewhat more complex. Open to making whatever changes core seems appropriate in order to get this merged, though!\n", "created_at": "2013-10-15 17:37:04", "user": 14947, "id": 26355596}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32610447", "text": "Just thought I'd check in on this. Any word?\n", "created_at": "2014-01-17 14:37:15", "user": 14947, "id": 32610447}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "It seems the code is duplicated, so required a file to reuse ack method here.\n", "labels": [], "number": 393, "updated_at": "2014-06-16 16:07:30", "user": 39390, "closed_at": "2013-09-20 14:39:21", "id": 19158562, "title": "removed duplicate code, requiring file instead", "url": "https://api.github.com/repos/ruby/ruby/issues/393", "created_at": "2013-09-08 09:58:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24822517", "text": "Hey @zzak, is there anything wrong with the commit? I saw it closed instead of merged.\n", "created_at": "2013-09-20 16:24:35", "user": 39390, "id": 24822517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24845143", "text": "@gouravtiwari i committed it in 000f39b\n", "created_at": "2013-09-20 22:23:04", "user": 277819, "id": 24845143}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24861301", "text": "Benchmark code is very sensitive to execution conditions, including calling `require` or not.\n(For instance, actually loading RubyGems has a significant impact.)\nTherefore I think this should not be merged.\nIt also introduces a dependency to files in `other-lang`, which might be undesirable.\n", "created_at": "2013-09-21 12:06:26", "user": 168854, "id": 24861301}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24869903", "text": "That is a very good point! Sorry! Lets revert it.\n\n@eregon thanks for the review! <3\n\nOn Sep 21, 2013, at 8:06 AM, Benoit Daloze notifications@github.com wrote:\n\n> Benchmark code is very sensitive to execution conditions, including calling require or not.\n> (For instance, actually loading RubyGems has a significant impact.)\n> Therefore I think this should not be merged.\n> It also introduces a dependency to files in other-lang, which might be undesirable.\n> \n> \\\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-09-21 20:22:26", "user": 277819, "id": 24869903}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24875304", "text": "Great point, I didn't think about it. Benchmark tests should never have dependency on any other features, which might slow the tests. THanks @zzak and @eregon :)\n", "created_at": "2013-09-22 03:18:44", "user": 39390, "id": 24875304}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 394, "updated_at": "2014-06-20 11:06:27", "user": 982, "closed_at": "2013-09-20 14:44:34", "id": 19410112, "title": "Clarify SecureRandom#hex documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/394", "created_at": "2013-09-12 19:44:14", "comments": [], "assignees": [277819, 277819], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since `include` works on top level, it's reasonable to enable top level\n`prepend` as well. I also included a test case for top level `include`.\n", "labels": [], "number": 395, "updated_at": "2014-07-04 13:46:42", "user": 1079123, "closed_at": "2013-10-15 18:22:32", "id": 19777151, "title": "eval.c: make prepend work on top level", "url": "https://api.github.com/repos/ruby/ruby/issues/395", "created_at": "2013-09-19 19:46:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24877584", "text": "Sorry, I just realised that the tests are bad, since the ancestry chain gets polluted by my modules. I cannot figure out the proper way to test this, though.\n", "created_at": "2013-09-22 07:42:50", "user": 1079123, "id": 24877584}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24889588", "text": "You can use `assert_separately` to run a test in a separated process.\n", "created_at": "2013-09-22 20:15:18", "user": 16700, "id": 24889588}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24890474", "text": "Thanks! I corrected the tests.\n", "created_at": "2013-09-22 21:01:49", "user": 1079123, "id": 24890474}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24924251", "text": "I just noticed this issue: http://bugs.ruby-lang.org/issues/8846\n\nShould I adjust the patch in order to make things consistent with the changes proposed in that issue?\n", "created_at": "2013-09-23 14:35:07", "user": 1079123, "id": 24924251}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25137177", "text": "Yes, it'd be nice.\nAnd could you open a ticket on https://bugs.ruby-lang.org?\n", "created_at": "2013-09-26 01:06:31", "user": 16700, "id": 25137177}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25205279", "text": "Done https://bugs.ruby-lang.org/issues/8959\n", "created_at": "2013-09-26 21:25:31", "user": 1079123, "id": 25205279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359373", "text": "Closing this ticket in favor of [Feature #8959](https://bugs.ruby-lang.org/issues/8959)\n\nPlease continue discussion in redmine.\n", "created_at": "2013-10-15 18:22:32", "user": 277819, "id": 26359373}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 396, "updated_at": "2014-06-17 03:17:12", "user": 39390, "closed_at": "2013-09-22 03:19:39", "id": 19852573, "title": "Removed duplicate code by require_relative", "url": "https://api.github.com/repos/ruby/ruby/issues/396", "created_at": "2013-09-21 06:42:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24861310", "text": "Please see my comment in #393.\n", "created_at": "2013-09-21 12:07:16", "user": 168854, "id": 24861310}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24875315", "text": "I am closing this as explained in #393 \n", "created_at": "2013-09-22 03:19:39", "user": 39390, "id": 24875315}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 397, "updated_at": "2013-09-23 17:57:01", "user": 39390, "closed_at": "2013-09-22 10:01:08", "id": 19867442, "title": "removed trailing comma and fixing a failing spec", "url": "https://api.github.com/repos/ruby/ruby/issues/397", "created_at": "2013-09-22 03:37:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879223", "text": "It's valid.\n", "created_at": "2013-09-22 10:01:08", "user": 16700, "id": 24879223}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879283", "text": "May be I am not getting \"It's valid\". Is leaving comma a good practice? Also, is failing test case is valid?\n", "created_at": "2013-09-22 10:05:23", "user": 39390, "id": 24879283}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879398", "text": "For the case adding new elements.\nAnd the test is irrelevant to the original pull request.\n", "created_at": "2013-09-22 10:13:48", "user": 16700, "id": 24879398}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879582", "text": "How is it failing? It is not at me nor CI. Maybe your active ruby version is older.\n", "created_at": "2013-09-22 10:27:14", "user": 168854, "id": 24879582}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879660", "text": "@nobu Sorry for committing irrelevant test, though it was for another reason.\n@eregon you are absolutely right, I thought active ruby version would not matter, as I would run it from the source itself, but it does (mine was 1.9.3-p448).\n", "created_at": "2013-09-22 10:33:30", "user": 39390, "id": 24879660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24879684", "text": "@nobu, so shall it be a good practice to leave comma(,) after last array element, when you want to add more elements later? (May be as an indication?)\n", "created_at": "2013-09-22 10:34:46", "user": 39390, "id": 24879684}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This introduces minor fixes/changes to `BigDecimal` documentation:\n- `BigDecimal#==` returns `false`, not `nil`.\n- `10_000.times do` seems more idiomatic (and more readable in the case of this example) than `for i in (1..10000)`.\n- There’s a difference in specificity between what mathematical ‘infinity’ and `BigDecimal`’s +Infinity and -Infinity are; this tries to adjust the spelling in the right places.\n", "labels": [], "number": 398, "updated_at": "2014-06-12 13:59:52", "user": 56633, "closed_at": "2013-09-26 13:15:28", "id": 19877915, "title": "BigDecimal doc fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/398", "created_at": "2013-09-22 19:26:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Drop an extraneous word.\n", "labels": [], "number": 399, "updated_at": "2014-06-29 00:15:39", "user": 56633, "closed_at": "2013-09-26 13:05:01", "id": 19878238, "title": "Digest doc fix", "url": "https://api.github.com/repos/ruby/ruby/issues/399", "created_at": "2013-09-22 19:45:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a minor adjustment to the code style of `Observable` examples.\n\nPlease let me know if this is too frivolous and not worthwhile (and apologies for bothering in this case!). :)\n", "labels": [], "number": 400, "updated_at": "2014-06-20 10:56:04", "user": 56633, "closed_at": "2013-09-26 13:10:14", "id": 19878316, "title": "Observer doc fix", "url": "https://api.github.com/repos/ruby/ruby/issues/400", "created_at": "2013-09-22 19:49:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24897022", "text": "@chastell Wow, thanks for all the doc patches! I will try to review them and get you some feedback soon! :heart:\n", "created_at": "2013-09-23 03:07:50", "user": 277819, "id": 24897022}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/24898307", "text": "Thanks! The other ones are more sane, this one is rather frivolous – hence asking whether such minutiæ are worth your (and others’) time.\n\nAlso, obviously, there’s absolutely no rush whatsoever – I’m just working on my Arrrrcamp talk on stdlib (see you in Ghent!), caught these few along the way. :)\n", "created_at": "2013-09-23 04:17:34", "user": 56633, "id": 24898307}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25165735", "text": "@chastell These changes to Observable are welcome, anything to improve the documentation standards with today's practices.\n\nThank you!\n", "created_at": "2013-09-26 13:08:04", "user": 277819, "id": 25165735}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In an openssl example a variable was named wrong.\n", "labels": [], "number": 401, "updated_at": "2014-06-26 04:33:07", "user": 68035, "closed_at": "2013-09-26 13:05:01", "id": 19905510, "title": "Fix documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/401", "created_at": "2013-09-23 12:14:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This allows for syntax such as (notice the missing commas):\n\n``` ruby\nsome_hash = {\n  :foo => 'bar'\n  :bar => 'foo'\n  :baz => {\n    :qux => 'quux'\n    :corge => 'grault'\n  }\n}\n```\n\nThis does not break existing hashes. You are able to mix-and-match old and new syntax, e.g.,\n\n``` ruby\nsome_hash = {\n  :foo => 'bar'\n  :bar => 'foo',\n  :baz => {\n    :foo => 'bar'\n    :bar => 'foo',\n    :qux => 'quux'\n    :corge => 'grault',\n  },\n}\n```\n\nAdditionally, this only affects hashes inside of curly braces (`{` and `}`).\n\n**Update 2013-09-30**\n\nThis now also applies to arrays inside of square brackets (`[` and `]`), e.g.,\n\n``` ruby\nsome_array = [\n  :foo\n  :bar\n  [\n    'baz'\n    :qux\n  ]\n  {\n    :quux => 'grault'\n    'garply' => [\n      'waldo' => :fred\n    ]\n    :plugh => 'xyzzy'\n  }\n]\n```\n\n**Update 2013-10-01**\n\nThis now applies to method call arguments. This enables syntax such as\n\n``` ruby\nHash[\n  :foo, 'bar'\n  :baz, 'qux'\n]\n```\n\n(becomes `{ :foo => \"bar\", :baz => \"qux\" }`)\n\nas well as\n\n``` ruby\nputs(\"this is line one\"\n     \"this is line two\"\n     \"this is line three\")\n```\n", "labels": [], "number": 402, "updated_at": "2014-06-14 05:00:44", "user": 768488, "closed_at": "2013-10-15 18:23:38", "id": 20050240, "title": "Allow args and members delimited by \\n inside of (), {}, and []", "url": "https://api.github.com/repos/ruby/ruby/issues/402", "created_at": "2013-09-25 15:40:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25102243", "text": "While this seems to be a mostly pointless change, and I'm sure there there are many issues it could bring up, I think the modified syntax goes well with ruby's overall feel.\n", "created_at": "2013-09-25 16:23:04", "user": 2290027, "id": 25102243}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25102607", "text": "I like the way it reduces keystrokes.\n", "created_at": "2013-09-25 16:27:27", "user": 33043, "id": 25102607}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25103712", "text": "@jlorich This can help prevent typos resulting in `syntax error, unexpected tSYMBEG, expecting '}'`, so I wouldn't necessarily say \"pointless\".\n", "created_at": "2013-09-25 16:42:05", "user": 768488, "id": 25103712}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25109006", "text": "I like this implicit comma approach because it avoids a common issue while working on a piece of code, where you need to temporarily comment out a value.\n\nsome_hash = {\n  :this => 'that',\n  :foo => 'not bar'#'bar',\n  :those => 'the other'\n}\n", "created_at": "2013-09-25 17:47:29", "user": 35354, "id": 25109006}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25116355", "text": "it seems pretty useful, makes ruby more life coffee script, which is crazy cause I think coffees cript was inspired by ruby, at what point do the androids stop being robots and start being people ?  if only I had a sheep. \n", "created_at": "2013-09-25 19:18:00", "user": 1239340, "id": 25116355}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25121825", "text": ":+1: \nI totally :heart: it...\n", "created_at": "2013-09-25 20:27:07", "user": 2791965, "id": 25121825}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25150885", "text": "You can reduce `assocs_no_comma` rule.\nPlease file a feature request on https://bugs.ruby-lang.org, hopefully with tests.\n\n``` diff\ndiff --git a/parse.y b/parse.y\nindex e203549..9e5a334 100644\n--- a/parse.y\n+++ b/parse.y\n@@ -779,7 +779,7 @@ static void token_info_pop(struct parser_params*, const char *token);\n %type <node> command_asgn mrhs mrhs_arg superclass block_call block_command\n %type <node> f_block_optarg f_block_opt\n %type <node> f_arglist f_args f_arg f_arg_item f_optarg f_marg f_marg_list f_margs\n-%type <node> assoc_list assocs assoc undef_list backref string_dvar for_var\n+%type <node> assoc_list assocs assocs_no_comma assoc undef_list backref string_dvar for_var\n %type <node> block_param opt_block_param block_param_def f_opt\n %type <node> f_kwarg f_kw f_block_kwarg f_block_kw\n %type <node> bv_decls opt_bv_decl bvar\n@@ -4893,7 +4893,7 @@ singleton : var_ref\n        ;\n\n assoc_list : none\n-       | assocs trailer\n+       | assocs_no_comma trailer\n            {\n            /*%%%*/\n            $$ = $1;\n@@ -4920,6 +4920,23 @@ assocs       : assoc\n            }\n        ;\n\n+assocs_no_comma : assoc\n+           /*%c%*/\n+           /*%c\n+           {\n+           $$ = rb_ary_new3(1, $1);\n+           }\n+           %*/\n+       | assocs_no_comma assoc_separator assoc\n+           {\n+           /*%%%*/\n+           $$ = list_concat($1, $3);\n+           /*%\n+           $$ = rb_ary_push($1, $3);\n+           %*/\n+           }\n+       ;\n+\n assoc      : arg_value tASSOC arg_value\n            {\n            /*%%%*/\n@@ -4991,7 +5008,10 @@ rbracket : opt_nl ']'\n        ;\n\n trailer        : /* none */\n-       | '\\n'\n+       | assoc_separator\n+       ;\n+\n+assoc_separator : '\\n'\n        | ','\n        ;\n\n```\n", "created_at": "2013-09-26 08:21:28", "user": 16700, "id": 25150885}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25174747", "text": "Hi @nobu, thanks for the feedback! Good call on reducing the `assocs_no_comma` rules and adding a new `assoc_seperator`. I've submitted a feature request (https://bugs.ruby-lang.org/issues/8956), and I am looking into writing the tests now.\n", "created_at": "2013-09-26 15:00:20", "user": 768488, "id": 25174747}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26359448", "text": "Closing ticket to continue discussion in redmine [Feature #8956](https://bugs.ruby-lang.org/issues/8956)\n", "created_at": "2013-10-15 18:23:38", "user": 277819, "id": 26359448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Array`, `Hash`, and `String` support both `#length` and `#size`. `Range` and `Enumerator` recently added `#size` but do not remain consistent with the rest of core with the exclusion of `#length`. This pull request aliases `Range`'s and `Enumerator`'s `#size` to `#length`.\n", "labels": [], "number": 403, "updated_at": "2018-02-23 03:06:30", "user": 191331, "closed_at": "None", "id": 20152203, "title": "Add {Enumerator,Range}#length aliases for their respective #size's", "url": "https://api.github.com/repos/ruby/ruby/issues/403", "created_at": "2013-09-27 04:44:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25691043", "text": "@nobu probably has a good answer as to why they don't have `length`\n", "created_at": "2013-10-04 10:58:35", "user": 277819, "id": 25691043}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26002989", "text": "So, for me, even `Array` and `Hash` doesn't make sense to have `length`... But, since `length` and `size` do, in most cases, the same thing, I can't see any problem.\n", "created_at": "2013-10-09 19:55:54", "user": 2791965, "id": 26002989}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26004424", "text": "I'm not sure what `Array` or `Hash` have to do with `Enumerator#length`\n", "created_at": "2013-10-09 20:13:45", "user": 277819, "id": 26004424}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26047707", "text": "Well, what I tried to say is that I don't agree with Ruby when the method `length` may ever return the same value of `size`, maybe even at `String` class... \n\nBut thinking a little more, Ruby is, in my opinion, a very receptive language. And, for some languages people use `size` to get, for example, the length of a String, and in other lenguage people use `length`, what in my opinion is the best. \n\nThen, with these two cases in mind, I think it is not Ruby's fault that these two words are prostituted in programming world, and is reasonable that `size` and `length` ever return the same value, to people of the two languages that I said get the most common result from the `size` or `length`, the method that they are most familiar.\n\nThis, obviously, is my opinion... If you had a good answer to `length` alias to `size` in `Array` and not in `Enumerator`, the opinion can change. :smiley: \n", "created_at": "2013-10-10 12:04:09", "user": 2791965, "id": 26047707}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This pull request adds an internal function called `rb_funcall_ci`. This function takes an `rb_call_info_t *` and allows method calls from C to take advantage of method caching.\n\nThis gives a large performance improvement when repeatedly calling methods, for example in `Array#sort`.\n\nI used this benchmark script to compare the performance of `Array#sort` when using `rb_funcall` vs. using `rb_funcall_ci`:\n\n``` ruby\nrequire \"benchmark\"\n\nint_ary = (1..1_000_000).to_a.shuffle\nfloat_ary = int_ary.map(&:to_f)\n\nBenchmark.bm do |bm|\n  5.times do\n    bm.report \"int_ary.sort  \" do\n      # uses optimized comparison that does not call any methods\n      int_ary.sort\n    end\n  end\n  5.times do\n    bm.report \"float_ary.sort\" do\n      # calls Float#<=>\n      float_ary.sort\n    end\n  end\nend\n```\n\nResults for `rb_funcall`:\n\n```\n       user     system      total        real\nint_ary.sort    0.160000   0.000000   0.160000 (  0.170144)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.168473)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.169287)\nint_ary.sort    0.170000   0.010000   0.180000 (  0.176867)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.166630)\nfloat_ary.sort  0.910000   0.000000   0.910000 (  0.911482)\nfloat_ary.sort  0.910000   0.000000   0.910000 (  0.914818)\nfloat_ary.sort  0.910000   0.000000   0.910000 (  0.912684)\nfloat_ary.sort  0.920000   0.000000   0.920000 (  0.915842)\nfloat_ary.sort  0.920000   0.010000   0.930000 (  0.925721)\n```\n\nResults for `rb_funcall_ci`:\n\n```\n       user     system      total        real\nint_ary.sort    0.170000   0.000000   0.170000 (  0.170202)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.169039)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.168966)\nint_ary.sort    0.170000   0.010000   0.180000 (  0.177495)\nint_ary.sort    0.170000   0.000000   0.170000 (  0.166742)\nfloat_ary.sort  0.680000   0.000000   0.680000 (  0.683508)\nfloat_ary.sort  0.680000   0.000000   0.680000 (  0.685977)\nfloat_ary.sort  0.690000   0.000000   0.690000 (  0.685701)\nfloat_ary.sort  0.690000   0.000000   0.690000 (  0.692503)\nfloat_ary.sort  0.700000   0.010000   0.710000 (  0.708043)\n```\n\ncc @ko1\n", "labels": [], "number": 404, "updated_at": "2018-02-23 03:06:31", "user": 179065, "closed_at": "None", "id": 20212388, "title": "Add rb_funcall_ci", "url": "https://api.github.com/repos/ruby/ruby/issues/404", "created_at": "2013-09-28 13:54:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25298554", "text": "Here we are again, good job\n", "created_at": "2013-09-28 13:57:22", "user": 199499, "id": 25298554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25299596", "text": "Do not use a static variable carelessly.\n\n``` diff\ndiff --git a/array.c b/array.c\nindex 85fdf89..906211e 100644\n--- a/array.c\n+++ b/array.c\n@@ -2293,6 +2293,7 @@ struct ary_sort_data {\n     VALUE ary;\n     int opt_methods;\n     int opt_inited;\n+    rb_call_info_t ci;\n };\n\n enum {\n@@ -2351,12 +2352,7 @@ sort_2(const void *ap, const void *bp, void *dummy)\n    return rb_str_cmp(a, b);\n     }\n\n-    {\n-   static rb_call_info_t ci;\n-   ci.mid = id_cmp;\n-   ci.argc = 1;\n-   retval = rb_funcall_ci(&ci, a, &b);\n-    }\n+    retval = rb_funcall_ci(&data->ci, a, &b);\n\n     n = rb_cmpint(retval, a, b);\n     sort_reentered(data->ary);\n@@ -2394,14 +2390,23 @@ rb_ary_sort_bang(VALUE ary)\n    VALUE tmp = ary_make_substitution(ary); /* only ary refers tmp */\n    struct ary_sort_data data;\n    long len = RARRAY_LEN(ary);\n+   int (*sort_func)(const void *, const void *, void *);\n\n    RBASIC_CLEAR_CLASS(tmp);\n    data.ary = tmp;\n    data.opt_methods = 0;\n    data.opt_inited = 0;\n+   if (rb_block_given_p()) {\n+       sort_func = sort_1;\n+   }\n+   else {\n+       sort_func = sort_2;\n+       memset(&data.ci, 0, sizeof(data.ci));\n+       data.ci.mid = id_cmp;\n+       data.ci.argc = 1;\n+   }\n    RARRAY_PTR_USE(tmp, ptr, {\n-       ruby_qsort(ptr, len, sizeof(VALUE),\n-              rb_block_given_p()?sort_1:sort_2, &data);\n+       ruby_qsort(ptr, len, sizeof(VALUE), sort_func, &data);\n    }); /* WB: no new reference */\n    rb_ary_modify(ary);\n         if (ARY_EMBED_P(tmp)) {\n```\n", "created_at": "2013-09-28 15:00:52", "user": 16700, "id": 25299596}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25310716", "text": "`Array.new(10){BasicObject.new}.sort` segfaults.\nIt seems lacking method_missing case.\n", "created_at": "2013-09-28 23:13:49", "user": 16700, "id": 25310716}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25312000", "text": "diff --git a/vm_eval.c b/vm_eval.c\n\n``` diff\nindex 2f64d13..8698a49 100644\n--- a/vm_eval.c\n+++ b/vm_eval.c\n@@ -766,7 +766,13 @@ rb_funcall_ci(rb_call_info_t *ci, VALUE recv, const VALUE *argv)\n {\n     rb_thread_t *th = GET_THREAD();\n     ci->recv = recv;\n+    int call_status;\n+\n     vm_search_method(ci, recv);\n+    call_status = rb_method_call_status(th, ci->me, CALL_FCALL, recv);\n+    if (call_status != NOEX_OK) {\n+   return method_missing(recv, ci->mid, ci->argc, argv, call_status);\n+    }\n     return vm_call0_body(th, ci, argv);\n }\n\n```\n", "created_at": "2013-09-29 00:55:26", "user": 16700, "id": 25312000}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25314495", "text": "@nobu The second patch slows `float_ary.sort` from about 0.67 seconds to 0.74 for me. I think the call_status check should be cached.\n", "created_at": "2013-09-29 04:55:39", "user": 179065, "id": 25314495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25314613", "text": "@nobu I fixed the `Array.new(10){BasicObject.new}.sort` segfault by invoking the method through `ci->call`. This also takes advantage of method type fast paths.\n\nLet me know if you think this is ok to commit.\n", "created_at": "2013-09-29 05:10:22", "user": 179065, "id": 25314613}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26064607", "text": "@nobu @ko1 Do either of you have any final opinion on this?\n", "created_at": "2013-10-10 15:38:41", "user": 179065, "id": 26064607}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This implements #8556 from MRI's redmine, which calls for an additional delegator that wraps all calls in synchronization, to make them a bit more concurrency-friendly.\n", "labels": [], "number": 405, "updated_at": "2018-02-23 03:06:32", "user": 10135, "closed_at": "None", "id": 20298570, "title": "SynchronizedDelegator for wrapping thread-unsafe objects (#8556)", "url": "https://api.github.com/repos/ruby/ruby/issues/405", "created_at": "2013-09-30 22:59:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25415000", "text": "Given that `Monitor` is just sugar (and an extra object) on top of `MonitorMixin`, any particular reason you're not using `MonitorMixin` for this?\n", "created_at": "2013-09-30 23:24:33", "user": 982, "id": 25415000}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25416084", "text": "...I was going to write an alternate version (and maybe a `DelegateClass` version as well), but for some reason I can't run tests on this branch. They keep failing with `test/test_delegate.rb: cannot load such file -- thread`. This is true even after a dist-clean, configure, and make. No idea what's going on...\n", "created_at": "2013-09-30 23:48:50", "user": 982, "id": 25416084}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25416207", "text": "I thought about using MonitorMixin too, but because this is a delegate, we don't want to define any more methods on it than we need to.\n\nI think perhaps you need to add `-I .ext/<platform>` to pick up the built extensions on a local build.\n", "created_at": "2013-09-30 23:52:01", "user": 10135, "id": 25416207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25416632", "text": "OK, that's a fair point.\n", "created_at": "2013-10-01 00:02:03", "user": 982, "id": 25416632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25417666", "text": "Another way to reduce the object and call overhead would be to manually inline the MonitorMixin and SimpleDelegate logic into SynchronizedDelegate. That increases the possibility that a change in one might not be reflected in others, but it would improve performance by avoiding the extra object and the extra dispatches.\n\nHere's performance numbers for the current implementation on JRuby and ruby-head. Based on this, the perf impact over a normal delegator is around 2.5x-3.5x with the current implementation.\n\nBenchmark:\n\n``` ruby\nrequire 'benchmark'\nrequire 'delegate'\n\nclass Foo\n  def x\n    self\n  end\nend\n\nf = Foo.new\nf2 = SimpleDelegator.new(f)\nf3 = SimpleDelegator.new(f)\n\nloop do\n  puts \"simple\"\n  puts Benchmark.measure {\n    1_000_000.times do\n      f2.x; f2.x; f2.x; f2.x; f2.x\n    end\n  }\n  puts \"synchronized\"\n  puts Benchmark.measure {\n    1_000_000.times do\n      f3.x; f3.x; f3.x; f3.x; f3.x\n    end\n  }\nend\n```\n\nruby head:\n\n```\nsimple\n  2.810000   0.000000   2.810000 (  2.812045)\nsynchronized\n  8.490000   0.000000   8.490000 (  8.502126)\nsimple\n  3.030000   0.010000   3.040000 (  3.032756)\nsynchronized\n 10.010000   0.010000  10.020000 ( 10.024378)\nsimple\n  2.790000   0.010000   2.800000 (  2.795635)\nsynchronized\n 10.050000   0.010000  10.060000 ( 10.062782)\nsimple\n  2.860000   0.000000   2.860000 (  2.861839)\nsynchronized\n  9.790000   0.010000   9.800000 (  9.800231)\nsimple\n  3.230000   0.000000   3.230000 (  3.229262)\nsynchronized\n 10.180000   0.010000  10.190000 ( 10.196863)\n```\n\nJRuby head (with invokedynamic):\n\n```\nsimple\n  4.070000   0.110000   4.180000 (  2.231000)\nsynchronized\n  8.320000   0.100000   8.420000 (  5.484000)\nsimple\n  2.070000   0.020000   2.090000 (  1.833000)\nsynchronized\n  4.010000   0.010000   4.020000 (  3.919000)\nsimple\n  1.620000   0.000000   1.620000 (  1.539000)\nsynchronized\n  3.640000   0.010000   3.650000 (  3.605000)\nsimple\n  1.800000   0.010000   1.810000 (  1.780000)\nsynchronized\n  3.980000   0.010000   3.990000 (  3.946000)\nsimple\n  1.900000   0.000000   1.900000 (  1.755000)\nsynchronized\n  3.980000   0.010000   3.990000 (  3.883000)\nsimple\n  1.550000   0.000000   1.550000 (  1.519000)\nsynchronized\n  4.220000   0.010000   4.230000 (  4.121000)\n```\n", "created_at": "2013-10-01 00:24:07", "user": 10135, "id": 25417666}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- lib/weakref.rb: Modify weakref to not use delegation. See #6308.\n- test/test_weakref.rb: Alter tests that use delegation.\n", "labels": [], "number": 406, "updated_at": "2018-02-23 03:06:33", "user": 10135, "closed_at": "None", "id": 20302725, "title": "Remove delegation from WeakRef. See #6308 in MRI's bug tracker.", "url": "https://api.github.com/repos/ruby/ruby/issues/406", "created_at": "2013-10-01 00:55:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27517795", "text": "Updated based on discussions in https://bugs.ruby-lang.org/issues/6308\n", "created_at": "2013-10-31 19:28:36", "user": 10135, "id": 27517795}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- os.respond_to?(:name) and os.respond_to?(:name=) now return true\n- os.method(:name) and os.method(:name=) now return method objects\n", "labels": [], "number": 407, "updated_at": "2013-10-03 16:36:07", "user": 395621, "closed_at": "2013-10-03 03:34:36", "id": 20303054, "title": "An OpenStruct responds to all messages", "url": "https://api.github.com/repos/ruby/ruby/issues/407", "created_at": "2013-10-01 01:06:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25589400", "text": "@marcandre Can you take a look at this?\n", "created_at": "2013-10-03 00:45:46", "user": 179065, "id": 25589400}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25595369", "text": "I thought about this before, actually.\n\nThe idea makes sense at first, but there are problems with this. The main one is that I feel it's dangerous that `any_open_struct.respond_to?(:to_ary)` returns `true` (same for `to_str`, `to_int`, etc...). This kind of test is used in a zillion methods of Ruby to determine if an object is array-like (or string-like, etc.). This can lead to unexpected behavior in many cases and could also create some incompatibilities that could be very confusing to debug. The incompatibilities could also be in the future, say if Ruby accepts a new type of argument to a method and uses that kind of check.\n\nIt's not clear it would be more useful either. If you know you are dealing with an `OpenStruct`, then there's no need to call `respond_to?`. If you don't know, then if whoever created the `OpenStruct` did not specify a value for `foo` then it's probably best that `respond_to?(:foo)` returns `false`, even though calling `foo` with no arguments would actually return `nil`.\n\nAnother aspect is that `os.foo(1,2,3)` raises a `NoMethodError`, so in a way it doesn't respond to `foo` (when given arguments).\n\nIn any case, the pull request could not be accepted as is since the current implementation of `new_ostruct_member` relies on `respond_to?` to check if it needs to create a method or not, so that would have to change too.\n\nFor the above reasons, I think I have to reject the PR . I'm closing it, but if anyone isn't convinced by the above, don't hesitate to open an issue on bugs.ruby-lang.org for further discussion on ruby-core.\n\nThanks\n", "created_at": "2013-10-03 03:34:36", "user": 33770, "id": 25595369}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25636306", "text": "Thanks for the detailed response. This makes a lot of sense for me.\n\nIn my specific use case, having `OpenStruct` reply `true` to `respond_to?` would have been nice, but I think you are right that it'd be a lot of trouble in most other circumstances.\n", "created_at": "2013-10-03 16:36:04", "user": 395621, "id": 25636306}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/weakref.rb: Add support for a reference queue. See #6309.\n- test/test_weakref.rb: Test reference queue logic.\n", "labels": [], "number": 408, "updated_at": "2018-02-23 03:06:34", "user": 10135, "closed_at": "None", "id": 20303475, "title": "Add reference queue support to WeakRef.", "url": "https://api.github.com/repos/ruby/ruby/issues/408", "created_at": "2013-10-01 01:22:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25467300", "text": "Note that the test does not pass, and I'm not sure why.\n", "created_at": "2013-10-01 16:45:39", "user": 10135, "id": 25467300}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32831037", "text": "@headius Did you see #480?\n", "created_at": "2014-01-21 09:04:25", "user": 277819, "id": 32831037}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 409, "updated_at": "2014-07-01 21:09:32", "user": 325, "closed_at": "2013-10-04 10:59:20", "id": 20409826, "title": "[DOC FIX] Changes CREATRW to WRCREAT in dbm docs", "url": "https://api.github.com/repos/ruby/ruby/issues/409", "created_at": "2013-10-02 17:37:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This doc fix is in trunk and 2.0 but is also valid and important in 1.9.3, which is still in wide use.  Could you include the fix in this branch as well?\n", "labels": [], "number": 410, "updated_at": "2013-10-31 15:42:27", "user": 28410, "closed_at": "2013-10-15 15:50:23", "id": 20428746, "title": "Pasted rb_obj_cmp doc fix from trunk and 2.0 into 1.9.3 branch.", "url": "https://api.github.com/repos/ruby/ruby/issues/410", "created_at": "2013-10-02 23:18:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25690367", "text": "@keithrbennett It's unlikely we will backport such small doc patches to the 1.9 series at this point. We are focusing on 2.1 and 2.0 series for documentation.\n\nHowever, I will leave this ticket open and hopefully try to convince usa-san to backport eventually.\n", "created_at": "2013-10-04 10:43:41", "user": 277819, "id": 25690367}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26346657", "text": "@keithrbennett Thanks!\n\nI have opened a redmine ticket for [Backport #9024](http://bugs.ruby-lang.org/issues/9024), but can't guarantee usa will commit.\n\nI'm closing this ticket, please refer to the backport ticket for further discussion.\n", "created_at": "2013-10-15 15:50:23", "user": 277819, "id": 26346657}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27496927", "text": "@keithrbennett You will be happy to know this patch was backported to 1.9.3 in commit ab05a6d \n\nThank you!!\n", "created_at": "2013-10-31 15:42:27", "user": 277819, "id": 27496927}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "the expected output should be 0\n", "labels": [], "number": 411, "updated_at": "2014-06-27 11:10:34", "user": 335238, "closed_at": "2013-10-03 00:51:08", "id": 20429102, "title": "small documentation fix, hash default value", "url": "https://api.github.com/repos/ruby/ruby/issues/411", "created_at": "2013-10-02 23:28:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25690392", "text": ":+1: @charliesome @yakko \n", "created_at": "2013-10-04 10:44:18", "user": 277819, "id": 25690392}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This clarifies what `.base64` and `.urlsafe_base64` return and how passing `nil` makes size-taking methods to default to 16 bytes.\n", "labels": [], "number": 412, "updated_at": "2014-06-25 10:53:05", "user": 56633, "closed_at": "2013-11-07 17:55:12", "id": 20455144, "title": "SecureRandom doc fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/412", "created_at": "2013-10-03 13:52:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25690475", "text": "@chastell Thanks! I will try to review these patches soon :heart: \n", "created_at": "2013-10-04 10:45:57", "user": 277819, "id": 25690475}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26351861", "text": "Sorry for the delay on this patch, I will try to commit it soon!\n", "created_at": "2013-10-15 16:50:28", "user": 277819, "id": 26351861}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The sentence on #mount_proc and #start call order seems somewhat incomplete; this clarifies it.\n", "labels": [], "number": 413, "updated_at": "2014-06-29 00:19:42", "user": 56633, "closed_at": "2013-10-05 23:43:10", "id": 20455664, "title": "WEBrick doc clarification", "url": "https://api.github.com/repos/ruby/ruby/issues/413", "created_at": "2013-10-03 14:01:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch changes semantic of RUBY_GC_MALLOC_LIMIT.\nInstead of being \"periodical trigger\" it becomes more like \"safety trigger\"\nwhich fires in allocation increase (instead of allocation amount).\nSo that there is less need to tune RUBY_GC_MALLOC_LIMIT at all, and default\n8Mb becomes meaningful.\n\nBefore GC relaxation in commit 8c0033a `make check` ran 13% faster\n(292s instead of 338s) and doesn't seems to use more memory. It is now\nruns at the same speed, but I propose to revert some part of GC\nrelaxation (in a second commit).\n\nTradeoffs for patch simplicity:\n- it is not exact: only String, Array, Object, Struct, Bignum and Time are\n  handled\n- only one function (xwillfree) introduced. Perhaps, more readable api\n  could be useful.\n- xwillfree exposed to the public (ruby.h). Perhaps, it should be in an\n  internal.h, but st.c doesn't include internal.h .\n  But may be it could be useful for extensions.\n\nIssue http://bugs.ruby-lang.org/issues/8985\n", "labels": [], "number": 414, "updated_at": "2014-11-04 06:59:31", "user": 249427, "closed_at": "2014-11-04 06:59:31", "id": 20516248, "title": "xwillfree - promise to free memory", "url": "https://api.github.com/repos/ruby/ruby/issues/414", "created_at": "2013-10-04 11:33:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61600826", "text": "This issue is solved by https://bugs.ruby-lang.org/issues/8985\n", "created_at": "2014-11-04 06:59:31", "user": 12301, "id": 61600826}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch fixes a race condition in which a mutex gets locked by a background thread and not properly unlocked after forking.  This occurs when the background thread is blocked waiting to lock the mutex and the mutex is unlocked right around the time that the process gets forked.  When this happens the mutex is not part of `keeping_mutexes`.  Instead, it's still tracked as `locking_mutex` even though the mutex _has_ actually been locked by the background thread.\n\nThis was originally reported by https://bugs.ruby-lang.org/issues/8433.  A test has been added verifying the fix.\n\nCompletely open to any / all feedback as I'm certainly not a c guru :)\n", "labels": [], "number": 415, "updated_at": "2014-06-26 21:02:41", "user": 6991, "closed_at": "2013-10-05 11:37:31", "id": 20533125, "title": "Fix race condition causing some mutexes to remain locked after forking", "url": "https://api.github.com/repos/ruby/ruby/issues/415", "created_at": "2013-10-04 15:41:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25746800", "text": "This was closed by 57b8687debea4e532898cdf0380d63bb62749b9a\n", "created_at": "2013-10-05 11:37:31", "user": 6991, "id": 25746800}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This update fixes a typo in the documentation on line 83 in time.rb\n", "labels": [], "number": 416, "updated_at": "2014-06-28 00:59:53", "user": 2181356, "closed_at": "2013-10-07 11:35:14", "id": 20585762, "title": "Fix typo on line 83 in the documentation for time.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/416", "created_at": "2013-10-06 20:37:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25801707", "text": "@srt32 Thanks! :heart: \n", "created_at": "2013-10-07 11:37:40", "user": 277819, "id": 25801707}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ruby projects can specify which Ruby they test against on Travis CI, this includes ruby-head. We regularly fall behind the ruby-head version installed on Travis CI compared to trunk. With this change to the .travis.yml, after every successful build of ruby/ruby, we will update the ruby-head used by other projects on Travis CI, giving it more exposure and shortening the feedback cycle for Ruby trunk, as regressions might get discovered earlier and external libraries are better prepared for future releases.\n", "labels": [], "number": 417, "updated_at": "2014-06-12 17:40:46", "user": 30442, "closed_at": "2013-10-07 20:46:43", "id": 20627760, "title": "Add webhook to rebuild ruby-head installed on Travis CI VMs", "url": "https://api.github.com/repos/ruby/ruby/issues/417", "created_at": "2013-10-07 17:55:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25830056", "text": "For reference: https://github.com/travis-ci/travis-build/pull/151\n", "created_at": "2013-10-07 17:55:31", "user": 30442, "id": 25830056}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 418, "updated_at": "2014-06-27 23:30:07", "user": 2564322, "closed_at": "2013-10-16 20:55:13", "id": 20698044, "title": "Document methods in io/nonblock", "url": "https://api.github.com/repos/ruby/ruby/issues/418", "created_at": "2013-10-08 18:39:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/25923805", "text": "@reprah Thank you! :heart:\n", "created_at": "2013-10-08 20:18:55", "user": 277819, "id": 25923805}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26351755", "text": "I just want to check with @nobu on this before committing, thank you for the patch!\n", "created_at": "2013-10-15 16:49:19", "user": 277819, "id": 26351755}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26418297", "text": "I've committed a patch to teach RDoc about `io/nonblock` ( 8ead788 ) and will review this patch and commit soon!\n", "created_at": "2013-10-16 13:42:19", "user": 277819, "id": 26418297}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26468327", "text": "@zzak Thanks for the update! io/nonblock must be thrilled with all the attention it's getting...\n", "created_at": "2013-10-16 23:33:00", "user": 2564322, "id": 26468327}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add ducomentation for Arrays#pop. I hope I did it right, since I didn't do such knd of things before.\n", "labels": [], "number": 419, "updated_at": "2013-10-09 21:46:43", "user": 4018286, "closed_at": "2013-10-09 21:46:43", "id": 20760133, "title": "Update array.c", "url": "https://api.github.com/repos/ruby/ruby/issues/419", "created_at": "2013-10-09 18:14:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26011831", "text": "Array#pop is already documented here:\n\nhttps://github.com/ruby/ruby/blob/9c6ea2f2004081591417ab2195ca487053c3b101/array.c#L959-L978\n\nAs the \"pop\" method calls the C function rb_ary_pop_m:\n\nhttps://github.com/ruby/ruby/blob/9c6ea2f2004081591417ab2195ca487053c3b101/array.c#L5585\n\nSo this adds duplicate documentation and I must close it.\n", "created_at": "2013-10-09 21:46:43", "user": 9831, "id": 26011831}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Fixed spelling errors.\n- Ensure all documentation is within 80 columns.\n- Remove double spacing after periods.\n", "labels": [], "number": 420, "updated_at": "2014-06-28 02:38:15", "user": 12671, "closed_at": "2013-10-16 22:17:02", "id": 20794121, "title": "Curses documentation cleanups.", "url": "https://api.github.com/repos/ruby/ruby/issues/420", "created_at": "2013-10-10 08:50:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26053936", "text": "Looks good, thanks! :heart:\n", "created_at": "2013-10-10 13:36:49", "user": 277819, "id": 26053936}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26060067", "text": "Just curious.\n\n(13/10/10 17:50), Postmodern wrote:\n\n> - Remove double spacing after periods.\n\nIs it wrong?\n", "created_at": "2013-10-10 14:50:00", "user": 16700, "id": 26060067}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26060538", "text": "I generally remove them when I see them too. Mostly because they are actual tabs and not spaces.\n\n> On Oct 10, 2013, at 10:50 AM, Nobuyoshi Nakada notifications@github.com wrote:\n> \n> Just curious.\n> \n> (13/10/10 17:50), Postmodern wrote:\n> \n> > - Remove double spacing after periods.\n> \n> Is it wrong?\n> \\\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-10 14:55:22", "user": 277819, "id": 26060538}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26080309", "text": "One space after a period is a recent development. Either is OK: http://theworldsgreatestbook.com/how-many-spaces-after-a-period/\n\nFor mono space text, I find two easier to read. Browsers remove the extra space so it causes no problem. \n", "created_at": "2013-10-10 18:48:45", "user": 9831, "id": 26080309}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26110012", "text": "The debate on this problem goes back apparently 100 years.\nIt was a fight among typesetters and proportional type standards.\n\nI think double spaces are correct,  but opinions differ!\n\n## But the issue is not resolved to this day!\n- Chastity and Competency have much in common,\n  they both encompass their own punishment!!\n  Charles E. Thornton,  2001\n\n*\n", "created_at": "2013-10-11 02:45:42", "user": 4409319, "id": 26110012}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26115009", "text": ">  I think double spaces are correct, but opinions differ!\n\nI see what you did there :) I remember being initially taught to use two spaces, and then later being taught to never use two spaces. This is one of those debates like how to use the [oxford comma](http://www.theatlantic.com/technology/archive/2013/08/facebook-fauxlore-kerouac-burroughs-and-a-fight-over-the-oxford-comma-that-never-was/278452/).\n\nThe cumulative benefit of this PR outweighs the downsides of two-space or one-space.\n", "created_at": "2013-10-11 05:09:50", "user": 12671, "id": 26115009}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26351718", "text": "I will commit this soon, thank you!\n", "created_at": "2013-10-15 16:48:54", "user": 277819, "id": 26351718}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've updated docs in object_tracing.c a bit:\n- `trace_object_allocations_stop` has improved wording.\n- `trace_object_allocations_clear` now has a comment about the consequences on garbage-collecting.\n\nI think that the example in the rdoc for `trace_object_allocations` should feature `allocation_class_path` and `allocation_method_id` but Koichi-san might want to do this in a specific way.\n", "labels": [], "number": 421, "updated_at": "2014-06-16 00:19:30", "user": 103167, "closed_at": "2013-11-07 17:44:54", "id": 20823266, "title": "Documentation improvements in object_tracing.c", "url": "https://api.github.com/repos/ruby/ruby/issues/421", "created_at": "2013-10-10 17:44:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26351692", "text": "@srawlins Thanks for the patch!\n\nI will check on the garbage collection note, and then commit your patch.\n\nFeel free to submit a patch for `allocation_class_path` and `allocation_method_id` and we can discuss it there.\n", "created_at": "2013-10-15 16:48:34", "user": 277819, "id": 26351692}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26463284", "text": "@srawlins You may also be interested in the following new methods to `ext/objspace`:\n- ObjectSpace.trace_object_allocations_debug_start: 17e1c72 \n- ObjectSpace.reachable_objects_from_root: ede6826 \n", "created_at": "2013-10-16 22:08:38", "user": 277819, "id": 26463284}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26528371", "text": "@zzak `ObjectSpace.trace_object_allocations_debug_start` looks interesting, but Koichi-san didn't leave any rdoc there. :/ The ChangeLog comment is cryptic.\n\n`ObjectSpace.reachable_objects_from_root` does have some rdoc (\"Return all reachable objects from root.\") but it's not clear what is the difference between this and `ObjectSpace.each_object`, other than returning a Hash versus an Enumerator (maybe that is all).\n\nI'd like to experiment with these method, thanks for the tip!\n", "created_at": "2013-10-17 17:11:51", "user": 103167, "id": 26528371}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26877856", "text": "@srawlins I have confirmed with koichi-san that GC still runs during active `trace_object_allocations`, you can see yourself:\n\n``` ruby\nrequire 'objspace'\n\nObjectSpace.trace_object_allocations {\n  loop { ' ' }\n}\n```\n\nIf you watch OS memory usage, it should indicate that GC is working.\n\nI will commit your patch for `trace_object_allocations_stop`\n", "created_at": "2013-10-23 03:19:35", "user": 277819, "id": 26877856}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://public.wsu.edu/~brians/errors/complement.html\n\nCompliment is when you say something nice.\n\nComplement is when what you have matches something else.\n\nhttps://en.wikipedia.org/wiki/Two's_complement indicates that it's spelt \"complement\".\n", "labels": [], "number": 422, "updated_at": "2014-06-21 00:39:59", "user": 20378, "closed_at": "2013-10-13 14:54:08", "id": 20924994, "title": "Fix spelling from compliment to complement", "url": "https://api.github.com/repos/ruby/ruby/issues/422", "created_at": "2013-10-13 11:02:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In large ruby applications it is quite tricky to track down the cause of increased memory usage, especially when a reference leak is present (a global/root object holding references to an increasing number of objects over time).\n\nThis patch adds a `ObjectSpace.heap_dump` to objspace.so. This new method dumps out the contents of the ruby heap as json, either to stdout or an optional file.\n\n``` ruby\nObjectSpace.trace_object_allocations_start\nGC.start\nObjectSpace.heap_dump\n```\n\n---\n##### root objects\n\nObjects referenced by roots are listed in ROOT entries:\n\n```\n{\"type\":\"ROOT\", \"root\":\"vm\", \"references\":[\"0x7f82f28d0640\"]}\n{\"type\":\"ROOT\", \"root\":\"global_list\", \"references\":[\"0x7f82f2833638\", \"0x7f82f282bf78\"]}\n{\"type\":\"ROOT\", \"root\":\"global_tbl\", \"references\":[\"0x7f82f28db428\", \"0x7f82f28db428\", \"0x7f82f28dac08\", \"0x7f82f28dab90\", \"0x7f82f28dab18\", \"0x7f82f28dab90\", \"0x7f82f28da898\", \"0x7f82f28da898\", \"0x7f82f28da898\", \"0x7f82f28da898\", \"0x7f82f28da898\", \"0x7f82f28d0640\", \"0x7f82f28d0640\", \"0x7f82f28d0640\", \"0x7f82f293b5f8\", \"0x7f82f293b5f8\"]}\n```\n##### strings\n\nSTRING entries contain details about the strings size, class, shared/frozen/embedded status and outbound references:\n\n```\n{\"address\":\"0x7f82f2828008\", \"type\":\"STRING\", \"class\":\"0x7f82f2829660\", \"frozen\":true, \"embedded\":true, \"bytesize\":9, \"value\":\"LoadError\", \"encoding\":\"US-ASCII\"}\n{\"address\":\"0x7f82f2833e80\", \"type\":\"STRING\", \"class\":\"0x7f82f2829660\", \"embedded\":true, \"bytesize\":5, \"value\":\"Class\", \"encoding\":\"US-ASCII\", \"file\":\"-e\", \"line\":1, \"generation\":6}\n{\"address\":\"0x7f82f2833778\", \"type\":\"STRING\", \"class\":\"0x7f82f2829660\", \"shared\":true, \"references\":[\"0x7f82f2832f58\"]}\n{\"address\":\"0x7f82f28399e8\", \"type\":\"STRING\", \"class\":\"0x7f82f2829660\", \"frozen\":true, \"bytesize\":19, \"capacity\":120, \"value\":\"block in initialize\", \"memsize\":120}\n```\n##### hashes\n\n```\n{\"address\":\"0x7f82f2859b58\", \"type\":\"HASH\", \"class\":\"0x7f82f28e1940\", \"size\":0, \"default\":\"0x7f82f2859b08\", \"references\":[\"0x7f82f2859b08\"], \"memsize\":192}\n{\"address\":\"0x7f82f285adf0\", \"type\":\"HASH\", \"class\":\"0x7f82f28e1940\", \"size\":2, \"references\":[\"0x7f82f285adc8\", \"0x7f82f285acd8\"], \"memsize\":192}\n```\n##### arrays\n\n```\n{\"address\":\"0x7f82f2872068\", \"type\":\"ARRAY\", \"length\":1, \"embedded\":true, \"references\":[\"0x7f82f2901c40\"]}\n{\"address\":\"0x7f82f2890568\", \"type\":\"ARRAY\", \"length\":56, \"references\":[\"0x7f82f2890dd8\", \"0x7f82f2890338\", \"0x7f82f288ba18\", \"0x7f82f288b2c0\", \"0x7f82f288ac58\", \"0x7f82f288a000\", \"0x7f82f28891a0\", \"0x7f82f2888598\", \"0x7f82f287af10\", \"0x7f82f2878530\", \"0x7f82f28780a8\", \"0x7f82f2873c10\", \"0x7f82f28737d8\", \"0x7f82f28734b8\", \"0x7f82f2873120\", \"0x7f82f2872e50\", \"0x7f82f29310a8\", \"0x7f82f2930388\", \"0x7f82f2930220\", \"0x7f82f292bd60\", \"0x7f82f292bc70\", \"0x7f82f292a528\", \"0x7f82f292a208\", \"0x7f82f2929e48\", \"0x7f82f290bdd0\", \"0x7f82f290bce0\", \"0x7f82f290bb28\", \"0x7f82f290b6f0\", \"0x7f82f290b5b0\", \"0x7f82f290b268\", \"0x7f82f290ae08\", \"0x7f82f290ad18\", \"0x7f82f28782b0\", \"0x7f82f29094e0\", \"0x7f82f2907258\", \"0x7f82f2906f10\", \"0x7f82f2906e20\", \"0x7f82f2906d58\", \"0x7f82f2906b50\", \"0x7f82f2906920\", \"0x7f82f2906678\", \"0x7f82f2906308\", \"0x7f82f2906060\", \"0x7f82f2905de0\", \"0x7f82f2905b10\", \"0x7f82f2905840\", \"0x7f82f2905430\", \"0x7f82f29051b0\", \"0x7f82f29050c0\", \"0x7f82f2904eb8\", \"0x7f82f2904e40\", \"0x7f82f2904dc8\", \"0x7f82f2904d50\", \"0x7f82f2904cd8\", \"0x7f82f29045a8\", \"0x7f82f2904288\"], \"memsize\":448}\n```\n##### data\n\n```\n{\"address\":\"0x7f82f2890dd8\", \"type\":\"DATA\", \"class\":\"0x7f82f28d02f8\", \"struct\":\"iseq\", \"references\":[\"0x7f82f28906f8\", \"0x7f82f2890ec8\", \"0x7f82f28917b0\", \"0x7f82f292ac08\", \"0x7f82f292ac08\", \"0x7f82f28913f0\"], \"memsize\":976}\n{\"address\":\"0x7f82f2963b20\", \"type\":\"DATA\", \"class\":\"0x7f82f28d9128\", \"struct\":\"time\", \"memsize\":88}\n```\n##### nodes\n\n```\n{\"address\":\"0x7f82f2960b50\", \"type\":\"NODE\", \"node_type\":\"NODE_CREF\", \"references\":[\"0x7f82f282b7a8\"]}\n{\"address\":\"0x7f82f293b648\", \"type\":\"NODE\", \"node_type\":\"NODE_BLOCK\", \"references\":[\"0x7f82f293b670\"]}\n{\"address\":\"0x7f82f293b670\", \"type\":\"NODE\", \"node_type\":\"NODE_CALL\", \"references\":[\"0x7f82f293b698\"]}\n{\"address\":\"0x7f82f293b698\", \"type\":\"NODE\", \"node_type\":\"NODE_CONST\"}\n```\n##### classes and modules\n\n```\n{\"address\":\"0x7f82f28280d0\", \"type\":\"CLASS\", \"class\":\"0x7f82f28280a8\", \"name\":\"ScriptError\", \"references\":[\"0x7f82f2832e40\", \"0x7f82f28286e8\"], \"memsize\":656}\n{\"address\":\"0x7f82f2829e58\", \"type\":\"MODULE\", \"class\":\"0x7f82f282b758\", \"name\":\"Comparable\", \"references\":[\"0x7f82f2829e58\", \"0x7f82f2829e58\", \"0x7f82f2829e58\", \"0x7f82f2829e58\", \"0x7f82f2829e58\", \"0x7f82f2829e58\", \"0x7f82f28324b8\"], \"memsize\":848}\n{\"address\":\"0x7f82f28504e0\", \"type\":\"ICLASS\", \"class\":\"0x7f82f2829e58\", \"references\":[\"0x7f82f28324b8\", \"0x7f82f282b7a8\"]}\n```\n##### other objects\n\n```\n{\"address\":\"0x7f82f28328c8\", \"type\":\"OBJECT\", \"class\":\"0x7f82f2838188\", \"ivars\":3, \"references\":[\"0x7f82f285b638\"]}\n```\n", "labels": [], "number": 423, "updated_at": "2014-06-13 18:29:07", "user": 2567, "closed_at": "2013-11-08 17:07:36", "id": 21056002, "title": "Add ObjectSpace.heap_dump to objspace.so", "url": "https://api.github.com/repos/ruby/ruby/issues/423", "created_at": "2013-10-16 01:50:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26396080", "text": "Based on feedback from @ko1, I have modified the ruby signatures as follows:\n\n```\n *  call-seq:\n *    ObjectSpace.dump(obj[, output: :string]) # => \"{ ... }\"\n *    ObjectSpace.dump(obj, output: :file) # => \"/tmp/rubyobj000000\"\n *    ObjectSpace.dump(obj, output: :stdout) # => nil\n\n *  call-seq:\n *    ObjectSpace.dump_all([output: :file]) # => \"/tmp/rubyheap000000\"\n *    ObjectSpace.dump_all(output: :stdout) # => nil\n *    ObjectSpace.dump_all(output: :string) # => \"{...}\\n{...}\\n...\"\n```\n\n/cc https://bugs.ruby-lang.org/issues/9026\n", "created_at": "2013-10-16 06:43:36", "user": 2567, "id": 26396080}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for travis! :heart:\n", "labels": [], "number": 424, "updated_at": "2013-10-16 13:36:38", "user": 277819, "closed_at": "2013-10-16 13:36:38", "id": 21079540, "title": "* ext/io/nonblock/nonblock.c: Use rb_cIO for rb_define_method instead", "url": "https://api.github.com/repos/ruby/ruby/issues/424", "created_at": "2013-10-16 13:22:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26417872", "text": "committed in r43306\n", "created_at": "2013-10-16 13:36:38", "user": 277819, "id": 26417872}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 425, "updated_at": "2014-06-12 14:18:06", "user": 325, "closed_at": "2013-11-07 16:07:32", "id": 21198024, "title": "Fixes formatting in golf_prelude.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/425", "created_at": "2013-10-18 02:54:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26569196", "text": "@zzak I was reading through some ruby source and saw this and decided I might as well fix up some formatting while looking at it.\n\nIs there a test for this anywhere? There’s a mention in README.EXT but that’s about it.\n\nThe closest docs I could find for this are here: http://rbjl.net/34-do-you-know-the-official-ruby-interpreter-goruby\n", "created_at": "2013-10-18 02:59:07", "user": 325, "id": 26569196}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26877304", "text": "I have to regretfully reject this change.\n\nThe purpose of golf isn't to be the most well styled code, only as a joke. That said, consistency or style changes to it aren't very helpful.. consider it altering Mona Lisa (im sure some of the shading technique could be updated with today's technology right?)\n\nI appreciate your contribution, and I'm sure many other committers feel the same as I do! If you find a bug in goruby, then we can think about an update :grin:\n\nWithout objection I will close this ticket in a few days.\n\nThank you!\n", "created_at": "2013-10-23 03:01:02", "user": 277819, "id": 26877304}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26903155", "text": "Consider this less an alteration to the Mona Lisa, and more like I saw some dings in the frame while I was walking by and decided to repair them to keep things professional.\n\nEdward\n\nOn Oct 22, 2013, at 11:01 PM, Zachary Scott notifications@github.com wrote:\n\n> I have to regretfully reject this change.\n> \n> The purpose of golf isn't to be the most well styled code, only as a joke. That said, consistency or style changes to it aren't very helpful.. consider it altering Mona Lisa (im sure some of the shading technique could be updated with today's technology right?)\n> \n> I appreciate your contribution, and I'm sure many other committers feel the same as I do! If you find a bug in goruby, then we can think about an update \n> \n> Without objection I will close this ticket in a few days.\n> \n> Thank you!\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-23 13:12:42", "user": 325, "id": 26903155}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26903346", "text": "@edward The thing is I think `goruby` is meant to be somewhat obfuscated?\n", "created_at": "2013-10-23 13:15:35", "user": 277819, "id": 26903346}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26909698", "text": "@zzak I didn’t get that impression from looking at the code; there are some places where it’s been properly indented, and some others where it just looks sloppy and not purposefully obfuscated.\n", "created_at": "2013-10-23 14:32:16", "user": 325, "id": 26909698}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26919555", "text": "@edward by looking at the [history of golf_prelude.rb](https://github.com/ruby/ruby/commits/trunk/golf_prelude.rb), i've concluded that it's meant _for_ golfers, not as _golf_.. with that in mind I'm considering this patch. Still, I would prefer another committers opinion in the matter before making any decision.\n", "created_at": "2013-10-23 16:20:38", "user": 277819, "id": 26919555}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26929926", "text": "Sounds good. Thanks for your open mind.\n\nEdward\n\nOn Oct 23, 2013, at 12:20 PM, Zachary Scott notifications@github.com wrote:\n\n> @edward by looking at the history of golf_prelude.rb, i've concluded that it's meant for golfers, not as golf.. with that in mind I'm considering this patch. Still, I would prefer another committers opinion in the matter before making any decision.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-23 18:19:22", "user": 325, "id": 26929926}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26931050", "text": "@zzak: I'd say to go ahead and commit it.\n\nNow I'm eagerly awaiting a pull request changing all hard tabs in*.c files to 8 spaces ;-)\n", "created_at": "2013-10-23 18:28:12", "user": 33770, "id": 26931050}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26936855", "text": "@marcandre Oh man, the emacs is fierce. I just wish I had had a heads up somewhere in a Contributing section in the Ruby README about this preference. It had been driving me nuts as to what was going on until it finally dawned upon me that some editors do the mixed spaces/tabs thing.\n", "created_at": "2013-10-23 19:15:01", "user": 325, "id": 26936855}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add documentation for the methods `set_socket` and `mdtm`\n- Fix a couple of typos\n- Remove comments on the documentation that are now unnecessary/inaccurate\n", "labels": [], "number": 426, "updated_at": "2014-06-21 14:32:55", "user": 225802, "closed_at": "2013-11-07 17:39:42", "id": 21240899, "title": "Add documentation for set_socket, mdtm in Net::FTP", "url": "https://api.github.com/repos/ruby/ruby/issues/426", "created_at": "2013-10-18 19:46:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- array.c: document the use of negative indices in \"Accessing Elements\"\n", "labels": [], "number": 427, "updated_at": "2014-06-28 00:04:31", "user": 319885, "closed_at": "2013-11-07 17:19:12", "id": 21303993, "title": "array.c: improve documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/427", "created_at": "2013-10-21 09:25:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request is actually addressing the same issue with https://github.com/ruby/ruby/pull/354. \n\nCurrent ruby's standard logger errors when we use it with log shifting in multi-process environments. Following is a code snippet to re-produce this problem. \n\n``` ruby\nrequire 'logger'\nrequire 'parallel'\n\nlogger = Logger.new(\"/tmp/test.log\", 3, 1024 * 10)\nParallel.map(['a', 'b'], :in_processes => 2) do |letter|\n  300000.times do\n    logger.info letter * 5000\n  end\nend\n```\n\nBy executing this, logger errors like\n\n```\nlog writing failed. closed stream\nlog shifting failed. closed stream\nlog writing failed. closed stream\nlog shifting failed. closed stream\n...\n```\n\nPlease read [my blog post](http://blog.livedoor.jp/sonots/archives/32645828.html) (Japanese) which I wrote before for more details.\n\nThis patch is to fix the issue using inter-process locking (flock). \n\nFYI: This patch is a port from ServerEngine's [DaemonLogger](https://github.com/frsyuki/serverengine/blob/master/lib/serverengine/daemon_logger.rb) which we worked for Fluentd. Please see https://github.com/frsyuki/serverengine/issues/9 about discussions on it. \n\nI also issued on bug the tracker https://bugs.ruby-lang.org/issues/9046\n", "labels": [], "number": 428, "updated_at": "2014-06-13 01:43:38", "user": 2290461, "closed_at": "2013-11-01 22:18:01", "id": 21436014, "title": "Inter-process locking for log rotation", "url": "https://api.github.com/repos/ruby/ruby/issues/428", "created_at": "2013-10-23 06:36:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26887361", "text": "Additionally lib/logger.rb is not multi-process safe at least on open_logfile and create_logfile.\n", "created_at": "2013-10-23 08:13:44", "user": 13423, "id": 26887361}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26894512", "text": "@nurse For `open_logfile`, I came up with only two ways to make it be multi-process safe. \n\n1) Create a file named `\"#{filename}.lock\"` to exclusively lock `open_logfile`. Code looks as below:\n\n``` ruby\ndef open_logfile(filename)\n  open(\"#{filename}.lock\", (File::WRONLY | File::APPEND | File::CREAT)) do |lock|\n    lock.flock(File::LOCK_EX)\n    if (FileTest.exist?(filename))\n      logdev = open(filename, (File::WRONLY | File::APPEND))\n    else\n      create_logfile(filename)\n    end\n  end\nend\n```\n\nIn this case, we have to change the lock filename used for log shifting to `#{@filename}.lock` too. The bad point of this approach is that the lock file must _always_ exist so that all processes lock the same i-node. \n\n2) Stop `add_log_header`\n\nIf we can remove `add_log_header` from `create_logfile` method like, \n\n``` ruby\ndef create_logfile(filename)\n  logdev = open(filename, (File::WRONLY | File::APPEND | File::CREAT))\n  logdev.sync = true\n-  add_log_header(logdev)\n  logdev\nend\n```\n\nthen I think `create_logfile` can be a multi-process safe. FYI: ServerEngine::DaemonLogger is taking this approach ... Any thoughts or idea?\n", "created_at": "2013-10-23 10:27:45", "user": 2290461, "id": 26894512}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26895224", "text": "@sonots @nurse the reason why it always use `open` with 'a' mode (`File::WRONLY | File::APPEND | File::CREAT`) is that `create_logfile` or `open_logfile` are not multi-process safe. The behavior is different from existent code because it doesn't call `add_log_header`. I think it's possible to make `add_log_header` multi-process safe but it needs more code.\n", "created_at": "2013-10-23 10:41:59", "user": 40720, "id": 26895224}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26895829", "text": "For this case, specify O_EXCL with O_CREAT.\n\n``` ruby\nbegin\n  lock = open(filename, File::WRONLY | File::APPEND)\n  # file is exist\n  lock.flock(File::LOCK_EX)\n  return lock\nrescue Errno::ENOENT\n  # file is not exist at that time\n  begin\n    lock = open(filename, File::WRONLY | File::APPEND | File::CREAT | File::EXCL)\n    lock.flock(File::LOCK_EX)\n    return lock\n  rescue Errno::EEXIST\n    # ignore and retry to open the file which is created by another process\n  end\n  retry\nend\n```\n\n// FreeBSD has O_EXLOCK but linux doesn't have it\n\nAnd add_log_header will be like\n\n``` ruby\n    def add_log_header(file)\n      file.write(\n        \"# Logfile created on %s by %s\\n\" % [Time.now.to_s, Logger::ProgName]\n      ) if file.size == 0\n    end\n```\n", "created_at": "2013-10-23 10:53:54", "user": 13423, "id": 26895829}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26958786", "text": "@nurse I've updated. Could you check https://github.com/sonots/ruby/commit/21b038c636945f72ba637dc03563318b80c561b3? Thanks!\n", "created_at": "2013-10-24 00:46:56", "user": 2290461, "id": 26958786}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27278735", "text": "@nurse ping!\n", "created_at": "2013-10-29 04:56:59", "user": 2290461, "id": 27278735}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27550982", "text": "@nurse Can I merge this?\n", "created_at": "2013-11-01 07:20:49", "user": 12301, "id": 27550982}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nWhen using `File#exist?`, if we are working on Windows or with paths containing whitespaces, the result is unexpected if we do not use File.expand_path on the given name.\n\nI hope this could save some time for people hitting the same issue.\n\nHave a nice day!\n", "labels": [], "number": 429, "updated_at": "2014-07-15 00:30:11", "user": 354185, "closed_at": "2013-10-25 04:11:24", "id": 21448361, "title": "Add a mention about File.expand_path (File#exist?)", "url": "https://api.github.com/repos/ruby/ruby/issues/429", "created_at": "2013-10-23 11:45:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26974822", "text": "I think `File.exist?` should handle whitespaces on Windows too. I will test on Windows to confirm that.\n", "created_at": "2013-10-24 08:33:31", "user": 168854, "id": 26974822}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26976844", "text": "@eregon : Actually, it doesn't handle whitespaces neither on Linux.\n", "created_at": "2013-10-24 09:11:06", "user": 354185, "id": 26976844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26995326", "text": "What do you mean?\n\n``` ruby\nFile.exist? 'a file with spaces'\n```\n\nworks.\n", "created_at": "2013-10-24 14:11:52", "user": 168854, "id": 26995326}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/26998793", "text": "Actually, I was unable to get `File.exist?('a path with spaces')` (on Linux) to be truthy while the path exists so I googled a bit to find why and find [this recommendation](https://www.ruby-forum.com/topic/201953#879422) and it solved my problem. It also states that `File.expand_path` solve issues on Windows with back-slashes in paths so I've put it in the patch but to be honest, I haven't rebooted to try it.\n", "created_at": "2013-10-24 14:50:45", "user": 354185, "id": 26998793}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27059659", "text": "It's not specific for `File.exist?` and sounds like a problem how you wrote a literal string.\n", "created_at": "2013-10-25 04:11:24", "user": 16700, "id": 27059659}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27175596", "text": "@nobu : At least, on Windows it's advisable to use `File.expand_path`, no ?\n", "created_at": "2013-10-27 18:26:05", "user": 354185, "id": 27175596}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27191328", "text": "For the primary ADS?\n", "created_at": "2013-10-28 06:18:00", "user": 16700, "id": 27191328}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27195849", "text": "(sorry but what does \"ADS\" means here please ? :smile:)\n", "created_at": "2013-10-28 08:38:30", "user": 354185, "id": 27195849}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27233727", "text": "@robin850 I think nobu means `active directory service`\n", "created_at": "2013-10-28 17:21:32", "user": 277819, "id": 27233727}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27280665", "text": "`Alternae Data Stream` is a feature of NTFS.\nAnd `$DATA` stream is the alias of its main content.\n", "created_at": "2013-10-29 06:09:24", "user": 16700, "id": 27280665}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27304332", "text": "I can't answer anything about Windows, I'm on Linux. :smile: I would simply love to say that I think that at least, even if my string is not written correctly, according to the forum post, it's advisable to use `File.expand_path` on Windows systems, what do you think ?\n", "created_at": "2013-10-29 13:56:55", "user": 354185, "id": 27304332}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27676406", "text": "`File.expand_path` can be useful in general to avoid being dependent of the _current working directory_, but this is valid for any path, not in particular for `File.exist?`.\n\nOn Windows, I am only aware of `Dir.glob` needing `/`, the other filesystem methods handle fine either `/` or `\\` as far as I know. The rule is: always write your literal path with `/` and if it comes from user input, `File.expand_path` might be useful.\n", "created_at": "2013-11-04 10:38:25", "user": 168854, "id": 27676406}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 430, "updated_at": "2014-06-29 00:36:16", "user": 5782107, "closed_at": "2013-11-07 17:13:59", "id": 21636163, "title": "Fix typo in comment of CSV.parse_line", "url": "https://api.github.com/repos/ruby/ruby/issues/430", "created_at": "2013-10-26 16:00:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "NameError#to_s presented an inconsistent behavior with other *Error classes:\n\n> StandardError.new(\"foo\") # => <StandardError: foo>\n> StandardError.new(String) # => <StandardError: String>\n> NameError.new(\"foo\") # => <NameError: foo>\n> NameError.new(String) # => Exception: `to_s': can't convert Class into String\n> (TypeError)\n\nAlthough Kernel#raise specifically states a \"string\" in the doc, it does accept\nany instance that has #to_s. The exception that is raised for\nNameError.new(String) makes this behavior inconsistent.\n\nThis patch removes the specific name_err_to_s(). Comparing to exc_to_s() it\nseems like the only difference between them is the usage of StringValue(exc)\ninstead of rb_String(exc).\n", "labels": [], "number": 431, "updated_at": "2013-10-28 06:30:25", "user": 351445, "closed_at": "2013-10-28 06:16:14", "id": 21657456, "title": "Remove NameError#to_s override", "url": "https://api.github.com/repos/ruby/ruby/issues/431", "created_at": "2013-10-27 18:16:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27191650", "text": "Woohoo! Thanks :-) \n", "created_at": "2013-10-28 06:30:25", "user": 351445, "id": 27191650}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This implements context threading dispatch in the MRI bytecode interpreter (http://www.cs.toronto.edu/syslab/pubs/demkea_context.pdf).\n\n@edward @graemej @charliesome can you please review?\n", "labels": [], "number": 432, "updated_at": "2015-11-13 14:59:34", "user": 1551119, "closed_at": "2015-11-13 14:59:34", "id": 21667932, "title": "Context threading", "url": "https://api.github.com/repos/ruby/ruby/issues/432", "created_at": "2013-10-28 02:32:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27186475", "text": "cc @ko1 @nobu \n", "created_at": "2013-10-28 02:33:36", "user": 179065, "id": 27186475}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27186784", "text": "When I run this locally I get:\n\n```\nλ ./miniruby\n<internal:prelude>:1: [BUG] Stack consistency error (sp: 17571898259904, bp: 17571898292632)\nruby 2.1.0dev (2013-10-01 trunk 43111) [x86_64-darwin12.5.0]\n```\n", "created_at": "2013-10-28 02:46:53", "user": 179065, "id": 27186784}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27186820", "text": "(1) x86 only?\n(2) test results?\n(3) any benchmark comparison?\n", "created_at": "2013-10-28 02:48:39", "user": 9558, "id": 27186820}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27188035", "text": "(1) x86_64, Mac OS X only for now\n(2) make test passes 100%\n(3) I'm re-running benchmarks on an isolated machine. I don't trust the last set of results - they were \"too good to be true\". I'll attach results in the morning.\n\n@charliesome are you building this on Mac OS X 10.8? https://github.com/fbogsany/ruby/commit/c1bbb7e0162fbccffdaa44ca56c92aad5b46c304 fixed a bug for Mac OS X 10.9, but may have broken 10.8 support (more accurately, fixed a problem with LLVM/clang, but may have broken builds with gcc). I'll setup a VM with 10.8 & see if I can replicate the problem.\n", "created_at": "2013-10-28 03:44:08", "user": 1551119, "id": 27188035}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27188149", "text": "@fbogsany Yes, running 10.8 here.\n", "created_at": "2013-10-28 03:49:48", "user": 179065, "id": 27188149}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27188663", "text": "(2013/10/28 12:44), Francis Bogsanyi wrote:\n\n> (2) make test passes 100%\n\nCould you try test-all ?\n\n## \n\n// SASADA Koichi at atdot dot net\n", "created_at": "2013-10-28 04:16:48", "user": 9558, "id": 27188663}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27205160", "text": "Benchmark results at https://gist.github.com/fbogsany/7195495\n", "created_at": "2013-10-28 11:49:05", "user": 1551119, "id": 27205160}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27219400", "text": "make test-all:\n10652 tests, 2579933 assertions, 0 failures, 0 errors, 29 skips\n\nmake test-rubyspec:\n10 errors related to openssl\n4 failures related to OpenStruct:\n11)\nOpenStruct.new when frozen is not writeable FAILED\nExpected RuntimeError but got TypeError (can't modify frozen OpenStruct)\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:37:in `block (4 levels) in <top (required)>'\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:4:in`<top (required)>'\n\n12)\nOpenStruct.new when frozen cannot create new fields FAILED\nExpected RuntimeError but got TypeError (can't modify frozen OpenStruct)\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:41:in `block (4 levels) in <top (required)>'\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:4:in`<top (required)>'\n\n13)\nOpenStruct.new when frozen creates a frozen clone FAILED\nExpected RuntimeError but got TypeError (can't modify frozen OpenStruct)\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:47:in `block (4 levels) in <top (required)>'\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/frozen_spec.rb:4:in`<top (required)>'\n\n14)\nOpenStruct#method_missing when called with a method name ending in '=' raises a TypeError when self is frozen FAILED\nExpected RuntimeError but got TypeError (can't modify frozen OpenStruct)\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/method_missing_spec.rb:23:in `block (3 levels) in <top (required)>'\n/Users/fbogsany/Projects/Shopify/ruby/spec/rubyspec/library/openstruct/method_missing_spec.rb:4:in`<top (required)>'\n", "created_at": "2013-10-28 15:06:46", "user": 1551119, "id": 27219400}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27221562", "text": "Travis CI is failing.\n", "created_at": "2013-10-28 15:27:06", "user": 16700, "id": 27221562}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27224656", "text": "@charliesome I'm experiencing similar problems with a fresh git clone. Curiously, everything works fine (including on Linux with the latest commit) if I configure with: `CFLAGS=-g3 ./configure --enable-debug-env`. It's likely that my earlier builds were configured that way.\n", "created_at": "2013-10-28 15:58:20", "user": 1551119, "id": 27224656}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27239341", "text": "@fbogsany Those RubySpec failures are related to a recent OpenStruct change, not your code.\n", "created_at": "2013-10-28 18:13:28", "user": 179065, "id": 27239341}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27273514", "text": "@fbogsany thank you for your results of benchmarking.\n\nCould you try this with installing binaries? There is a possibility to compare with miniruby. miniruby and installed ruby have a bit difference.\n\n$ ruby benchmark/driver.rb --executables=\"normal_ruby::path_to_installed_normal_ruby; ctruby::path_to_installed_contex_theaded_ruby' --pattern='bm_' --directory=dir_to_benchmark -r 5\n\n\"-r 5\" measures 5 times and show \"lowest seconds\".\n", "created_at": "2013-10-29 02:10:07", "user": 9558, "id": 27273514}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27280242", "text": "I’m trying to run just one of the benchmarks but am running into an error with loading rubygems:\n\n`$ ruby benchmark/driver.rb --executables=\"normal_ruby::/opt/boxen/rbenv/shims/ruby; ctruby::./ruby\" --pattern='bm_app_answer.rb' --directory=/Users/edward/Code/C/ruby/benchmark` gives me\n\n```\n<internal:gem_prelude>:1:in `require': cannot load such file -- rubygems.rb (LoadError)\n    from <internal:gem_prelude>:1:in `<compiled>'\n`./ruby  /Users/edward/Code/C/ruby/benchmark/bm_app_answer.rb' exited with abnormal status (pid 97574 exit 1)\n```\n\nAny ideas as to what’s up there? Similarly:\n\n```\n$ ./ruby -rubygems\n<internal:gem_prelude>:1:in `require': cannot load such file -- rubygems.rb (LoadError)\n    from <internal:gem_prelude>:1:in `<compiled>'\n```\n\nCuriously, I can do this with the compiled irb:\n\n```\n$ ./bin/irb\nirb(main):001:0> require 'rubygems'\n=> false\n```\n", "created_at": "2013-10-29 05:54:23", "user": 325, "id": 27280242}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27280369", "text": "@charliesome Hm?\n\nOn Oct 29, 2013, at 1:55 AM, Charlie Somerville notifications@github.com wrote:\n\n> @edward `bin/irb\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-29 05:59:21", "user": 325, "id": 27280369}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27280427", "text": "@edward `bin/irb` is just a script that will use whatever Ruby is in your PATH, not the compiled Ruby.\n\nIf you want to use the compiled Ruby, you'll need to set up your load path properly: `./ruby -Ilib:.:.ext/common:.ext/x86_64-*`\n", "created_at": "2013-10-29 06:01:37", "user": 179065, "id": 27280427}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27280623", "text": "Ah! Right – ok, got it:\n\n`ruby benchmark/driver.rb --executables=\"normal_ruby::/opt/boxen/rbenv/shims/ruby; ctruby::/Users/edward/Code/C/ruby/ruby -Ilib:.:.ext/common:.ext/x86_64-darwin13.0.0/\" --pattern='bm_app_answer' --directory=/Users/edward/Code/C/ruby/benchmark` definitely does the trick.\n\nOn Oct 29, 2013, at 2:02 AM, Charlie Somerville notifications@github.com wrote:\n\n> @edward bin/irb is just a script that will use whatever Ruby is in your PATH, not the compiled Ruby.\n> \n> If you want to use the compiled Ruby, you'll need to set up your load path properly: ./ruby -Ilib:.:.ext/common:.ext/x86_64-*\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-10-29 06:07:42", "user": 325, "id": 27280623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27300872", "text": "Here are my results with just a regular `./configure`: https://gist.github.com/edward/7214270\n", "created_at": "2013-10-29 13:07:54", "user": 325, "id": 27300872}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27303923", "text": "@edward ctruby is slower?\nany miunderstand?\n\n> app_aobench 112.314 220.067\n", "created_at": "2013-10-29 13:51:57", "user": 9558, "id": 27303923}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27308174", "text": "@ko1 It looks like it’s slower in some cases and _much_ faster in others. For example:\n\n```\nhash_shift  6.037   0.156\n…\nvm3_gc  16.075  10.622\n…\nvm_thread_pass_flood    0.674   0.297\n```\n\nI’m going to try with `CFLAGS=-g3 ./configure --enable-debug-env` and report back.\n", "created_at": "2013-10-29 14:39:02", "user": 325, "id": 27308174}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27320309", "text": "Actually – after reading about those flags and asking @fbogsany about them, I’m going to hold off.\n\nI’m very excited to find out more about what is slowing some of these benchmark tests down.\n\n@charliesome I was speaking with @fbogsany and we think that your `Stack consistency error` issue may be related to the Boxen setup that Shopify uses. It seems that _with_ this setup, and whatever libraries may be linked to in comparison with a setup without Boxen, may be causing this built Ruby to function correctly.\n", "created_at": "2013-10-29 16:45:46", "user": 325, "id": 27320309}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27329355", "text": "@edward you're comparing to `ruby 2.0.0p247`, it's probably better to compare this patch to trunk and compile it with the same flags\n", "created_at": "2013-10-29 18:22:45", "user": 97820, "id": 27329355}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27342305", "text": "The Boxen setup that Shopify uses includes gcc 4.2. My best guess is that the ruby ./configure picks that up by default & it :sparkles: \"just works\" :sparkles:.\n\nLLVM appears to have a bug. It uses two registers (both r13 and r14) for REG_PC and sometimes fails to keep them in synch. At least branchunless has this problem, and probably branchif as well. This is \"fixed\" with -g3.\n\nGCC on Linux has a different problem (\"gcc (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3\"). Compiling without -g3 appears to enable -fomit-frame-pointer by default, which interferes with context-threading.\n\nI'm going to try building on Linux with -fno-omit-frame-pointer. I don't have a workaround for Mac OS X yet.\n", "created_at": "2013-10-29 20:52:13", "user": 1551119, "id": 27342305}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27417492", "text": "`make main` with gcc on Linux works for me, however I get the following failure during `make install-nodoc`:\n\n```\n./miniruby -I./lib -I. -I.ext/common  ./tool/runruby.rb --extout=.ext  -- --disable-gems -r./x86_64-linux-fake ./tool/rbinstall.rb --make=\"make\" --dest-dir=\"\" --extout=\".ext\" --mflags=\"\" --make-flags=\"\" --data-mode=0644 --prog-mode=0755 --installed-list .installed.list --mantype=\"doc\"\n./tool/rbinstall.rb:3: [BUG] Segmentation fault\nruby 2.1.0dev (2013-10-23 context_threading 43398) [x86_64-linux]\n\n-- Control frame information -----------------------------------------------\nc:0002 p:0000 s:0033 E:000260 EVAL   ./tool/rbinstall.rb:3 [FINISH]\nc:0001 p:0000 s:0002 E:001a08 TOP    [FINISH]\n\n./tool/rbinstall.rb:3:in `<main>'\n\n-- C level backtrace information -------------------------------------------\nSegmentation fault (core dumped)\nmake: *** [do-install-nodoc] Error 139\n```\n\nThis is similar to the current failures on Travis CI, although my build gets further than Travis.\n", "created_at": "2013-10-30 17:43:12", "user": 1551119, "id": 27417492}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27441479", "text": "This looks like a heisenbug - the failing command doesn't fail when run under gdb.\n", "created_at": "2013-10-30 21:36:32", "user": 1551119, "id": 27441479}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156407093", "text": "TBH, this is a pretty big patch and it would need a rebase before we could test it..\n", "created_at": "2015-11-13 11:45:25", "user": 277819, "id": 156407093}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156454166", "text": "> TBH, this is a pretty big patch and it would need a rebase before we could test it..\n\nNot worth the effort (yet). It needs a ton of work & I haven't had the time. The PR against ruby/ruby was accidental (should have been against Shopify/ruby). The feedback was useful, but I'm going to close this for now.\n", "created_at": "2015-11-13 14:59:33", "user": 1551119, "id": 156454166}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. This source code already included \"windows.h\", therefore it's already declared:\n   WINBASEAPI DWORD WINAPI GetLastError (VOID);\n2. At cygwin64, still sizeof(DWORD) is 4, but sizeof(unsigned long) is 8, it make confliction.\n", "labels": [], "number": 433, "updated_at": "2014-06-25 21:44:27", "user": 1631846, "closed_at": "2013-11-08 15:30:40", "id": 21742834, "title": "Unnecessary declaration. It's maybe OBSOLETE.", "url": "https://api.github.com/repos/ruby/ruby/issues/433", "created_at": "2013-10-29 08:30:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull req fixes irb's unexpected crash.\n\nWhen an exception whose backtrace is `nil` is raised, irb crashes and exits.\nirb requires `#backtrace` with `Exception` but some exceptions have not their backtraces.\nAn example of such exceptions I found is `ActionView::Template::Error`.\nWith such exception, irb crashes with `NoMethodError` as the following:\n\n```\n> irb\nirb(main):001:0> require 'action_view'\n=> true\nirb(main):002:0> e = ActionView::Template::Error.new(:foo, Exception.new)\n=> #<ActionView::Template::Error: Exception>\nirb(main):003:0> raise e\nActionView::Template::Error: Exception\n/Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:502:in `block (2 levels) in eval_input': undefined method `[]' for nil:NilClass (NoMethodError)\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:624:in `signal_status'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:489:in `block in eval_input'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb/ruby-lex.rb:247:in `block (2 levels) in each_top_level_statement'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb/ruby-lex.rb:233:in `loop'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb/ruby-lex.rb:233:in `block in each_top_level_statement'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb/ruby-lex.rb:232:in `catch'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb/ruby-lex.rb:232:in `each_top_level_statement'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:488:in `eval_input'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:397:in `block in start'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:396:in `catch'\n    from /Users/makimoto/.rbenv/versions/trunk/lib/ruby/2.1.0/irb.rb:396:in `start'\n    from /Users/makimoto/.rbenv/versions/trunk/bin/irb:11:in `<main>'\n> \n```\n\nWith my patch, `irb` just shows ordinary exception messages without crash.\n\n```\n> irb\nirb(main):001:0> require 'action_view'\n=> true\nirb(main):002:0>  e = ActionView::Template::Error.new(:foo, Exception.new)\n=> #<ActionView::Template::Error: Exception>\nirb(main):003:0> raise e\nActionView::Template::Error: Exception\n\nirb(main):004:0>\n```\n\n(Of course, such exceptions are bad-mannered. However, they can occur actually. So it should be fixed.)\n", "labels": [], "number": 434, "updated_at": "2014-09-20 01:41:27", "user": 34493, "closed_at": "2014-08-13 02:23:15", "id": 21815884, "title": "Prevent irb from crashing when exception with nil backtrace is raised", "url": "https://api.github.com/repos/ruby/ruby/issues/434", "created_at": "2013-10-30 10:29:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27379157", "text": "Patch looks good to me.\n", "created_at": "2013-10-30 10:43:27", "user": 29440, "id": 27379157}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27382708", "text": "Good find! Now try to write a test for it :trollface: \n", "created_at": "2013-10-30 11:51:25", "user": 277819, "id": 27382708}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27392096", "text": "@zzak okay, how about it? 2327a2914881dc8651b8589deeeedbb8df7c8a3e\n", "created_at": "2013-10-30 14:13:59", "user": 34493, "id": 27392096}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27392210", "text": "Why does that exception class make its backtrace `nil`?\n", "created_at": "2013-10-30 14:15:17", "user": 16700, "id": 27392210}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27396159", "text": "@nobu \n\n> Why does that exception class make its backtrace nil?\n\nYou mean \"that exception\" is my example `ActionView::Template::Error`?\nIn that case, it works as a wrapper of other exceptions and overrides default `Exception#backtrace` with backtrace of others' exceptions.\n", "created_at": "2013-10-30 14:57:49", "user": 34493, "id": 27396159}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27397827", "text": "Then it seems a bug of `ActionView::Template::Error`, which overrides `#backtrace` but not `#set_backtrace`.\n\nAs for the patch, please file a new ticket on https://bugs.ruby-lang.org and ask keiju-san.\n", "created_at": "2013-10-30 15:14:33", "user": 16700, "id": 27397827}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/27405094", "text": "Okay, done. http://bugs.ruby-lang.org/issues/9063\nAnd I'm try fixing `ActionView::Template::Error`...\n", "created_at": "2013-10-30 16:09:01", "user": 34493, "id": 27405094}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 435, "updated_at": "2014-06-14 13:23:31", "user": 5986, "closed_at": "2013-11-07 17:03:41", "id": 21852536, "title": "'all_wait' => 'all_waits' typo fix in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/435", "created_at": "2013-10-30 19:30:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "OpenSSL::Engine and OpenSSL::Config are complete, along with other cleanup as well\n", "labels": [], "number": 436, "updated_at": "2014-07-01 23:11:55", "user": 67049, "closed_at": "2013-12-09 19:25:33", "id": 22313926, "title": "OpenSSL documentation - little cleanup, mostly adding", "url": "https://api.github.com/repos/ruby/ruby/issues/436", "created_at": "2013-11-08 03:23:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28380952", "text": "@vbatts Could you please rebase and squash?\n\nI've got it narrowed down to a few files and want to make it easier to review.\n\nIn the future could you please submit smaller patches? It's too time consuming to review and commit such large changes.\n", "created_at": "2013-11-13 09:38:22", "user": 277819, "id": 28380952}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29262192", "text": "@vbatts please rebase your branch and finish your changes to ossl_bn.c so we can close this ticket `50.times { :heart: }`\n", "created_at": "2013-11-26 02:15:16", "user": 277819, "id": 29262192}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30164496", "text": "I will close this since all completed patches have been applied, please open a new ticket when you finish documenting `bn`.\n", "created_at": "2013-12-09 19:25:33", "user": 277819, "id": 30164496}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 438, "updated_at": "2014-06-27 10:46:41", "user": 1714, "closed_at": "2013-11-09 21:28:48", "id": 22394085, "title": "Fix typo in e2mmap documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/438", "created_at": "2013-11-09 21:21:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28137356", "text": "@keiju\n", "created_at": "2013-11-09 21:25:18", "user": 1714, "id": 28137356}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28137455", "text": "high five charlie\n", "created_at": "2013-11-09 21:30:47", "user": 1714, "id": 28137455}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@charliesome here is another one.\n", "labels": [], "number": 439, "updated_at": "2014-06-16 02:16:15", "user": 1714, "closed_at": "2013-11-09 22:43:33", "id": 22394696, "title": "Fix typos in WeakRef documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/439", "created_at": "2013-11-09 21:59:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28138953", "text": "@charliesome Do you even commit bro?\n", "created_at": "2013-11-09 22:45:02", "user": 277819, "id": 28138953}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28139243", "text": "high five\n", "created_at": "2013-11-09 23:01:29", "user": 1714, "id": 28139243}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Two small documentation fixes:\n- Grammar fix in NEWS for change to Timeout.timeout (It looks like bug numbers are generally not listed in NEWS, but otherwise I would include [Bug #8730] in the bullet point.)\n- Add rdoc to Timeout.timeout stating behavior regarding this change.\n", "labels": [], "number": 440, "updated_at": "2014-07-05 09:53:19", "user": 103167, "closed_at": "2013-11-10 16:06:56", "id": 22410710, "title": "Documentation improvements in NEWS and timeout.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/440", "created_at": "2013-11-10 15:50:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As discussed at rubyconf.\n\nFTFY\n\nR @matz\n", "labels": [], "number": 441, "updated_at": "2014-07-26 11:25:30", "user": 1714, "closed_at": "2013-11-10 22:03:24", "id": 22418316, "title": "Fix up lambda syntax", "url": "https://api.github.com/repos/ruby/ruby/issues/441", "created_at": "2013-11-10 22:02:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28162184", "text": "Damn, you beat me!\n", "created_at": "2013-11-10 22:03:55", "user": 179065, "id": 28162184}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As discussed at rubyconf.\n\nFTFY\n\nR @matz\n", "labels": [], "number": 442, "updated_at": "2014-06-15 14:02:02", "user": 1714, "closed_at": "2013-11-12 05:34:32", "id": 22418339, "title": "Fix up lambda syntax.", "url": "https://api.github.com/repos/ruby/ruby/issues/442", "created_at": "2013-11-10 22:03:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28182077", "text": "Currently I have no idea to add any method  or operator whose name includes non-ASCII characters.\nBesides that, your implementation will have encoding issue.\n\nSeea patch attached to http://bugs.ruby-lang.org/issues/9099\n", "created_at": "2013-11-11 08:56:50", "user": 30733, "id": 28182077}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The bug has been reported almost 3 years ago, so we may believe it could stand open for more time. Until it's fixed, users should be aware of it when willing to use the \\W character class.\n", "labels": [], "number": 443, "updated_at": "2014-06-12 17:50:22", "user": 32246, "closed_at": "2013-11-13 00:08:13", "id": 22515030, "title": "Warn about bug #4044 in documentation until it gets fixed", "url": "https://api.github.com/repos/ruby/ruby/issues/443", "created_at": "2013-11-12 12:33:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28349258", "text": "Thanks :)\n", "created_at": "2013-11-13 00:29:11", "user": 32246, "id": 28349258}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Enumerable#to_a` works by creating an empty array with small capacity, then populating it and expanding the capacity as it goes. For large enumerables, this causes several resizes, which can hurt performance. When an enumerable exposes a `size` method, we can guess that the resulting array's size will usually be equal to the enumerable's size. If we're right, we only have to set capacity once, and if we're wrong, we don't lose anything.\n\nThis PR adjusts enum.c's to_a method to take advantage of the size method when it's there. In my tests this makes `Range#to_a` about 10% faster, and doesn't have any significant effect on a vanilla enum with no `size` method. I couldn't find any existing benchmark that this consistently made better or worse.\n\nIf you like this idea, this could also be done in other classes with custom `to_a`, like Hash.\n\n(Sorry if this isn't a proper way to submit a patch, by the way. I wasn't sure.)\n", "labels": [], "number": 444, "updated_at": "2015-11-10 01:51:02", "user": 1795573, "closed_at": "2015-11-10 01:51:02", "id": 22553091, "title": "Use size to set array capa when possible", "url": "https://api.github.com/repos/ruby/ruby/issues/444", "created_at": "2013-11-12 21:49:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28337272", "text": "_Speedup ratios (with three runs)_\n\n```\napp_answer  1.031\napp_aobench 1.017\napp_erb 1.012\napp_factorial   1.009\napp_fib 0.997\napp_mandelbrot  0.990\napp_pentomino   1.005\napp_raise   1.023\napp_strconcat   0.993\napp_tak 1.032\napp_tarai   1.019\napp_uri 0.987\nenum_to_a_sized 1.094\nenum_to_a_unsized   1.019\nhash_shift  1.003\nio_file_create  1.012\nio_file_read    1.003\nio_file_write   0.990\nio_select   1.006\nio_select2  1.003\nio_select3  0.986\nloop_for    1.021\nloop_generator  1.004\nloop_times  0.942\nloop_whileloop  1.015\nloop_whileloop2 0.983\nso_ackermann    1.024\nso_array    1.007\nso_binary_trees 1.009\nso_concatenate  1.013\nso_count_words  1.023\nso_exception    1.018\nso_fannkuch 1.012\nso_fasta    1.016\nso_k_nucleotide 0.989\nso_lists    0.995\nso_mandelbrot   0.992\nso_matrix   1.018\nso_meteor_contest   1.002\nso_nbody    1.003\nso_nested_loop  0.976\nso_nsieve   1.007\nso_nsieve_bits  0.995\nso_object   0.998\nso_partial_sums 0.988\nso_pidigits 0.996\nso_random   1.016\nso_reverse_complement   1.002\nso_sieve    0.981\nso_spectralnorm 0.933\nvm1_attr_ivar*  0.981\nvm1_attr_ivar_set*  1.054\nvm1_block*  1.010\nvm1_const*  1.055\nvm1_ensure* 0.747\nvm1_float_simple*   1.003\nvm1_gc_short_lived* 1.006\nvm1_gc_short_with_complex_long* 1.003\nvm1_gc_short_with_long* 1.006\nvm1_gc_short_with_symbol*   1.009\nvm1_gc_wb_ary*  1.014\nvm1_gc_wb_obj*  1.004\nvm1_ivar*   1.007\nvm1_ivar_set*   0.963\nvm1_length* 1.015\nvm1_lvar_init*  0.937\nvm1_lvar_set*   1.001\nvm1_neq*    0.969\nvm1_not*    0.991\nvm1_rescue* 0.980\nvm1_simplereturn*   0.991\nvm1_swap*   1.023\nvm1_yield*  0.970\nvm2_array*  1.012\nvm2_bigarray*   0.994\nvm2_bighash*    0.999\nvm2_case*   1.057\nvm2_defined_method* 1.014\nvm2_dstr*   1.029\nvm2_eval*   1.098\nvm2_method* 0.987\nvm2_method_missing* 1.007\nvm2_method_with_block*  1.001\nvm2_mutex*  1.022\nvm2_poly_method*    1.046\nvm2_poly_method_ov* 1.004\nvm2_proc*   0.967\nvm2_raise1* 1.050\nvm2_raise2* 1.024\nvm2_regexp* 0.998\nvm2_send*   1.005\nvm2_super*  1.012\nvm2_unif1*  0.998\nvm2_zsuper* 1.003\nvm3_backtrace   0.938\nvm3_clearmethodcache    1.008\nvm3_gc  0.992\n```\n", "created_at": "2013-11-12 21:52:43", "user": 1795573, "id": 28337272}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for review and travis-ci before commit\n", "labels": [], "number": 445, "updated_at": "2015-01-24 06:19:41", "user": 277819, "closed_at": "2013-11-21 01:47:04", "id": 22577052, "title": "Remove unused arguments from OpenSSL::Buffering::new", "url": "https://api.github.com/repos/ruby/ruby/issues/445", "created_at": "2013-11-13 08:27:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28953636", "text": "receiving arbitrary arguments and call super is the idiom of definition of Module's `initialize` method.\nSee implementation of OpenSSL::SSL::Nonblock#initialize.\nI think call `super` at the end of OpenSSL::Buffering#initialize is better than removing arbitrary arguments.\n\nAnyway, OpenSSL::SSL::SSLSocket#initialize doesn't pass argument to ancestors, there's no actual problem in openssl.\n", "created_at": "2013-11-21 02:42:29", "user": 21976, "id": 28953636}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 446, "updated_at": "2014-09-22 21:22:52", "user": 277819, "closed_at": "2013-12-09 20:00:13", "id": 22577305, "title": "Deprecate OpenSSL::Digest::Digest", "url": "https://api.github.com/repos/ruby/ruby/issues/446", "created_at": "2013-11-13 08:34:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28376508", "text": "/cc @emboss\n", "created_at": "2013-11-13 08:34:53", "user": 277819, "id": 28376508}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28957801", "text": ":+1: \n", "created_at": "2013-11-21 04:43:50", "user": 567626, "id": 28957801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29172364", "text": "If nobody relies on it, absolutely!\n", "created_at": "2013-11-25 01:29:45", "user": 486012, "id": 29172364}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add `HTTPIMUsed`, as it is also supported by rack/rails.\nRFC - http://tools.ietf.org/html/rfc3229\n", "labels": [], "number": 447, "updated_at": "2014-06-22 08:53:09", "user": 567626, "closed_at": "2013-12-08 17:16:35", "id": 22652702, "title": "Add `HTTPIMUsed`, as it is also supported by rack/rails.", "url": "https://api.github.com/repos/ruby/ruby/issues/447", "created_at": "2013-11-14 09:57:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28471926", "text": "cc @knu , @drbrain \n", "created_at": "2013-11-14 10:01:53", "user": 567626, "id": 28471926}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28508281", "text": "@nurse is the Net::HTTP maintainer.\n", "created_at": "2013-11-14 18:16:51", "user": 9831, "id": 28508281}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Including `::Kernel.dup` brings across the #open method into\nSimpleDelegator with undesirable consequences.\n\ne.g.\n\n``` Ruby\n  class A\n  end\n  SimpleDelegator.new(A.new).open\n  # => NoMethodError: private method `open' called for #<A:0x007fca1aa1fbd0>\n```\n", "labels": [], "number": 448, "updated_at": "2013-11-14 21:08:21", "user": 162976, "closed_at": "2013-11-14 16:32:11", "id": 22656323, "title": "Undefine SimpleDelegator#open", "url": "https://api.github.com/repos/ruby/ruby/issues/448", "created_at": "2013-11-14 11:14:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28498690", "text": "`open` is a private method defined in `Kernel`, so `A.new.open` also raises that exception.\n", "created_at": "2013-11-14 16:32:11", "user": 16700, "id": 28498690}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28522993", "text": "Sorry my test case was over simplified, see #449.\n", "created_at": "2013-11-14 21:08:20", "user": 162976, "id": 28522993}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Including `::Kernel.dup` brings across the #open method into\nSimpleDelegator with undesirable consequences.\n\ne.g.\n\n``` Ruby\nclass A\n  def open\n  end\nend\n\nSimpleDelegator.new(A.new).open\n# => nil\n\nSimpleDelegator.new(A.new).send :open\n# ArgumentError: wrong number of arguments (0 for 1..3)\n\n/cc @nobu this shows the real problem\n```\n", "labels": [], "number": 449, "updated_at": "2014-07-15 07:53:21", "user": 162976, "closed_at": "2013-11-15 08:10:17", "id": 22692799, "title": "Undefine SimpleDelegator#open due to private method interference", "url": "https://api.github.com/repos/ruby/ruby/issues/449", "created_at": "2013-11-14 21:08:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I had trouble reading through the Observer.rb documentation before I realized that it was technically incorrect: “The observers must implement a method called +update+ to receive notifications” is simply not true; it’s whatever #add_observer sets it to, and #update is just the default.\n", "labels": [], "number": 450, "updated_at": "2014-06-26 04:33:14", "user": 325, "closed_at": "2013-11-21 04:45:47", "id": 22697438, "title": "Fixes/clarifies Observer.rb documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/450", "created_at": "2013-11-14 22:12:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28528248", "text": "Paging Dr. @zzak for a documentation PR\n", "created_at": "2013-11-14 22:13:35", "user": 325, "id": 28528248}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28529696", "text": "Well I just learned a thing!\n", "created_at": "2013-11-14 22:33:06", "user": 982, "id": 28529696}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28539177", "text": ":confetti_ball: \n", "created_at": "2013-11-15 01:01:26", "user": 277819, "id": 28539177}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is at least an order of magnitude slower on all operations. I guess Ruby 2 is much faster than its predecessors!\n\nAs a bonus, links to source code should now show up in RDoc.\n\nBenchmarks: https://gist.github.com/xaviershay/7520037\n\nRedmine: https://bugs.ruby-lang.org/issues/9121\n", "labels": [], "number": 451, "updated_at": "2018-02-23 03:06:34", "user": 1714, "closed_at": "None", "id": 22809156, "title": "Never use rbtree to implemented SortedSet.", "url": "https://api.github.com/repos/ruby/ruby/issues/451", "created_at": "2013-11-18 00:23:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28669101", "text": "@knu ping!\n\nAs maintainer of `lib/set.rb`, Akinori-san should be able to review and commit this.\n\nPersonally, I like this change! :clap: You had me at the RDoc bonus, but the simplicity is nice!\n", "created_at": "2013-11-18 00:44:39", "user": 277819, "id": 28669101}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28669988", "text": "What's missing here is I don't have a good hypothesis for _why_ rbtree is so much slower, but if others can replicate the benchmark I think it's ok to figure that out later if anyone wants to try speeding up the pure ruby version again.\n", "created_at": "2013-11-18 01:24:23", "user": 1714, "id": 28669988}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28670296", "text": "Agreed, although last time I checked `rbtree` was broken on `2.1.0` so eliminating that dependency may help keep stdlib stable.\n", "created_at": "2013-11-18 01:36:04", "user": 277819, "id": 28670296}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28671285", "text": "What's the benchmark numbers you get with ruby 1.9.3?  Is it Hash in Ruby 2.1 that got faster or else?\n", "created_at": "2013-11-18 02:14:38", "user": 10236, "id": 28671285}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28713932", "text": "1.9.3 is slower across the board, but has the same difference between rbtree and not: https://gist.github.com/xaviershay/7520037#file-gistfile2-txt\n", "created_at": "2013-11-18 16:37:52", "user": 1714, "id": 28713932}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28741490", "text": "These benchmarks miss the point of using rbtree, which is to pay a small insertion cost to keep the structure sorted so that ordered lookups are fast. If you only need to perform lookups _after_ the structure is built, then rbtree is a waste of time.\n\nSee https://gist.github.com/vjoel/7535917.\n\nAlso, this part of the benchmark is particularly misleading:\n\n```\nb.report(\"#to_a #{n} items\") {\n  10000.times { s.to_a }\n}\n```\n\nbecause the non-rbtree implementation _caches_ the #to_a output and will never drop that cache inside of the above loop.\n", "created_at": "2013-11-18 21:48:50", "user": 56725, "id": 28741490}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28763542", "text": "Thanks @vjoel , that's an obvious case I should have seen. I still think this change should be applied:\n1. Radically changing the performance characteristics of a structure depending on what gems the user has loaded seems unacceptable to me.\n2. The rbtree version is trivial to implement yourself if you want to use it.\n3. Having a dependency in the stdlib on an externally maintained gem seems bad.\n   3a. ... particularly if that dependency doesn't work on trunk (I don't know if that's true or not)\n4. Removes a fairly terrible `setup` method with string evals, puts the methods back into rdoc.\n", "created_at": "2013-11-19 04:03:52", "user": 1714, "id": 28763542}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28764279", "text": "@xaviershay I agree, mostly. The two implementations are not implementations of the same concept.\n\nApparently, your use-case works better with lazy sorting (the stdlib when require 'rbtree' fails). There are definitely use-cases where eager sorting is needed. IMHO, most people will think of SortedSet as being \"eager\" in this sense. (For example, see the Java 7 docs http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html--this interface has two implementations, based on trees and skiplists, which are both maintain sorted structures on insertion, rather than waiting for lookups.) Perhaps a lazily sorted set should be a separate class called LazilySortedSet.\n\nI vote for keeping SortedSet as it is using rbtree and _adding_ rbtree to the stdlib. But I've been saying that for years...\n", "created_at": "2013-11-19 04:26:08", "user": 56725, "id": 28764279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28765073", "text": "> I vote for keeping SortedSet as it is using rbtree and adding rbtree to the stdlib.\n\nI could support that. Seems obvious that a language comes with an efficient tree structure.\n", "created_at": "2013-11-19 04:50:57", "user": 1714, "id": 28765073}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29869724", "text": "@knu , want to make call on this one way or the other so we can close it out?\n", "created_at": "2013-12-05 03:56:26", "user": 1714, "id": 29869724}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`Numeric#zero?` returns `true` or `false`, while `Numeric#nonzero?` returns `self` or `nil`. This patch fixes this inconsistency and adds a `Numeric#nonzero` (non-predicate) method that returns `self` or `nil` for chaining comparisons.\n", "labels": [], "number": 452, "updated_at": "2018-02-23 03:06:35", "user": 10308, "closed_at": "None", "id": 22855773, "title": "Make Numeric#nonzero? behavior consistent with Numeric#zero?", "url": "https://api.github.com/repos/ruby/ruby/issues/452", "created_at": "2013-11-18 18:08:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28723265", "text": "Nice!\n", "created_at": "2013-11-18 18:18:49", "user": 83234, "id": 28723265}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The spec essentially leaves incomplete URI's as undefined behaviour\n\n(http://www.ietf.org/rfc/rfc2396.txt Appendix F: Abbreviated URLs)\n\nBut inline with the behaviour of browsers and the like, it makes the\nmost sense to assume that a pattern that matches a hostname should be\ntreated as such.\n", "labels": [], "number": 453, "updated_at": "2014-07-26 08:05:48", "user": 476418, "closed_at": "2013-11-21 06:46:33", "id": 23046027, "title": "Treat bare hostnames as the host when parsing as into a URI", "url": "https://api.github.com/repos/ruby/ruby/issues/453", "created_at": "2013-11-21 05:42:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28959549", "text": "This patch is more or less inspired by the look on my face when I tried:\n\n``` ruby\n> u=URI(\"localhost\")\n=> #<... URL:localhost>\n> u.scheme = \"http\"\n=> \"http\"\n> u.port = 9200\n=> 9200\n> u.to_s\n=> \"http::9200localhost\"\n```\n", "created_at": "2013-11-21 05:42:59", "user": 476418, "id": 28959549}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28959670", "text": "cc @arika\n", "created_at": "2013-11-21 05:47:00", "user": 179065, "id": 28959670}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28960264", "text": "This makes no sense.  Read the last paragraph of the appendix.  The address bar of a web browser is somewhere a relative path is not supposed to be typed in, but `URI::Generic` is a container to hold any type of URIs including relative paths.\n\nThis would easily break existing code including the following example:\n\n```\nuri = URI(link['href'])\nif uri.is_a?(URI::HTTP) || uri.scheme.nil?\n  new_uri = current_uri + uri\nend\n```\n", "created_at": "2013-11-21 06:06:13", "user": 10236, "id": 28960264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28960484", "text": "Ok, cool.\n\nSo we should probably write tests for that case? And what's the behaviour that ensures that `link['href']` (which I assume you're implying is a relative URI) emits an `URI::HTTP` ? It seems like opposite sides of the edgecase, but as it stands I'm stuck writing similarly weird looking boilerplate. I'm accepting CLI args, to pass to an API that expects a URI; so I end up doing:\n\n``` ruby\nuri = URI(uri_or_hostname)\nif !uri.scheme and !uri.host\n  uri.host = uri.path\n  uri.path = nil\n  uri.port = 9200\n  uri.scheme = \"http\"\nend\n```\n\nThis works, but only a madman would expect this to not randomly break at some point in the future (imo), and the alternatives involve trying to parse the string as a URI by hand, which is also a Terrible Idea(tm) given that there's URI support in the stdlib.\n\nGiven that, thoughts on a more elegant solution?\n", "created_at": "2013-11-21 06:13:35", "user": 476418, "id": 28960484}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28960924", "text": "Also, given that the last paragraph reads:\n\n```\n Since an abbreviated URL has the same syntax as a relative URL path,\n   abbreviated URL references cannot be used in contexts where relative\n   URLs are expected.  This limits the use of abbreviated URLs to places\n   where there is no defined base URL, such as dialog boxes and off-line\n   advertisements.\n```\n\nand that in this context there IS no defined base URL, I'm not convinced this makes no sense. It would probably require an API change upstream, ie:\n\n``` ruby\nbase = URI(\"https://butts.lol/path\")\nbase.resolve(\"/foobar\").to_s #=> \"https://butts.lol/foobar\"\n```\n\nI'm happy to tackle this if there's buyin upstream.\n", "created_at": "2013-11-21 06:27:26", "user": 476418, "id": 28960924}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28961364", "text": "It is how a user input should be validated and parsed in a certain application, so it depends on...\n- whether an URI `//example.org` is allowed\n- whether a hostname prefix like `www.` is allowed to be omitted\n- whether a hostname suffix like `.com` is allowed to be omitted\n- whether `user@example.org` should be treated as `http://user@example.org/` or an email address\n\nIf I were you, I would probably do as simply as follows:\n\n```\nuri = URI(uri_or_hostname)\nif !uri.is_a?(URI::HTTP)\n  # no support for \"//example.org\", let it just fail \n  uri = URI(\"http://\" + uri_or_hostname)\nend\n```\n\nIf you like exactly how a web browser does, then you should look into the jungle of the source code of the browser.\n", "created_at": "2013-11-21 06:39:25", "user": 10236, "id": 28961364}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28961620", "text": "That's no good for this specific case, as people might want to use other schemes. HTTP is a sane default, but it should respect other attempts.\n\nTesting if `#scheme` is nil might work around the issue, but it seems to be a lot of fiddling around inside my application that it seems more plausible the URI parser should be able to do.\n\nThat said, this feels a lot like rejection so I guess I'll just close.\n", "created_at": "2013-11-21 06:46:33", "user": 476418, "id": 28961620}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28961796", "text": "> and that in this context there IS no defined base URL, I'm not convinced this makes no sense. It would probably require an API change upstream, ie:\n\n\"This\" refers to this pull request which changes how a string is parsed regardless of the context.\n\nIt might be understandable if your proposal was (for example) to change how an HTTP client library (like open-uri) treats a URI object that lacks a scheme, or just as you say it was about changing a part except resolve().  But changing the parser that affects everywhere everything looked like a broken idea to me.\n", "created_at": "2013-11-21 06:51:35", "user": 10236, "id": 28961796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28962386", "text": "Well, so when I made the `resolve` example, my point was that it would still \"break\" the API as it stands, as I would expect `URI(\"some.host.com\").host == \"some.host.some\"`, but\n\n`URI(\"https://host.com\").resolve(\"/foobar\")` to resolve \"/foobar\" relative to the URI. Either way would require upstream changes. The crux of this issue is that 100% of the people I've shown this in my office were surprised by the behaviour. It's not a representative sample, and it's not warrant to merge unquestioningly, but imho it's evidence that what the current library does is probably not right.\n\nWith that in mind, I need you to tell me what you're willing to accept. I've already fleshed out what I would expect the library to do, but since you don't agree, I need your stance on the matter to move forward.\n\nEDIT: The whole point is that it's not http specific at all, in case I didn't make that clear. In my opinion the spec reads that without context (Like a base URI), something that looks like a hostname should be parsed as a hostname, not a relative path.\n", "created_at": "2013-11-21 07:09:16", "user": 476418, "id": 28962386}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28962660", "text": "My view is that for URI.parse to treat \"some.host.com\" as a host name \"some.host.com\" is no way forward when a bare hostname is not a URI, and therefore this whole issue is out of scope for our URI library.\n\nAs I said, it is for a client library/application to decide how it deals with a non-URI string.\n", "created_at": "2013-11-21 07:18:28", "user": 10236, "id": 28962660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/28963062", "text": "As you suggested, I added tests for `uri + URI(\"path\")` in addition to `uri + \"path\"`.\n", "created_at": "2013-11-21 07:30:03", "user": 10236, "id": 28963062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The underlying `Date::_strptime` returns a hash with week elements that are\nignored in the arguments passed to `Time::make_time`:\n\n``` ruby\nDate._strptime('2013-W46-4', '%Y-W%W-%w')\n# => {:year=>2013, :wnum1=>46, :wday=>4}\nDate.strptime('2013-W46-4', '%Y-W%W-%w')\n# => #<Date: 2013-11-21 (4913235/2,0,2299161)>\n```\n\nThis patch ensures that if these arguments are present, the resulting month\nand day resolved from Date::strptime are not lost.\n\nBefore Patch (WRONG):\n\n``` ruby\nTime.strptime('2013-W46-4', '%Y-W%W-%w')\n# => 2013-01-01 00:00:00 UTC\n```\n\nAfter Patch (CORRECT):\n\n``` ruby\nTime.strptime('2013-W46-4', '%Y-W%W-%w')\n# => 2013-11-21 00:00:00 UTC\n```\n\nI am unsure of where to add tests for this, but believe that the fix should be back-ported to the 1.9 branch.\n", "labels": [], "number": 454, "updated_at": "2014-07-14 22:37:04", "user": 210924, "closed_at": "2013-11-23 05:49:47", "id": 23049893, "title": "Fix bug where week-type arguments are parsed-and-ignored in Time::strptime", "url": "https://api.github.com/repos/ruby/ruby/issues/454", "created_at": "2013-11-21 08:00:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29126511", "text": "I found several more issues with week handling, both here and in Date.strptime c-function. I'm closing this bug until I can come up with an adequate solution to address all of it.\n", "created_at": "2013-11-23 05:49:45", "user": 210924, "id": 29126511}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes the issue I described in: https://bugs.ruby-lang.org/issues/8560\n\nBasically, skip_lines takes any object that responds to match and passes in each line of the csv as an argument to match. But when skip_lines is a string, string#match converts it's argument to a Regexp. In our case, that argument is each line in the CSV. So each line gets converted to a Regexp one at a time.\n\nIt is very unexpected behavior for each line in the CSV to act as a Regexp. And in many cases, it will cause an error similar to:\n\n```\n2.0.0-p247 :001 > \"test\".match \"#(\"\nRegexpError: end pattern with unmatched parenthesis: /#(/\n    from (irb):1:in `match'\n    from (irb):1\n    from /home/kyle/.rvm/rubies/ruby-2.0.0-p247/bin/irb:12:in `<main>'\n```\n\nForced to make the choice between converting skip_lines to a Regexp if it's a String and converting each line in the CSV to a Regexp, I've chosen the former.\n", "labels": [], "number": 455, "updated_at": "2014-06-14 00:03:45", "user": 1191305, "closed_at": "2013-11-23 23:24:02", "id": 23182011, "title": "If skip_lines is set to a String, convert it to a Regexp", "url": "https://api.github.com/repos/ruby/ruby/issues/455", "created_at": "2013-11-23 05:17:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29126162", "text": "/cc @JEG2\n", "created_at": "2013-11-23 05:19:18", "user": 1191305, "id": 29126162}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29134796", "text": "This patch is perfect and ready to apply.  Can we merge it here or does it need to be done via Subversion?\n", "created_at": "2013-11-23 15:52:10", "user": 5639, "id": 29134796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29135170", "text": "It needs to be committed via subversion.\n", "created_at": "2013-11-23 16:12:07", "user": 9831, "id": 29135170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29135384", "text": "The expected value should come first to `assert_equal`.\n", "created_at": "2013-11-23 16:22:54", "user": 16700, "id": 29135384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29139181", "text": "Thanks guys. I've fixed the assertions to have expectations come first and I've generated a patch that I've attached to the original issue in Redmine.\n", "created_at": "2013-11-23 19:10:28", "user": 1191305, "id": 29139181}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29144228", "text": "I've applies the patch.  We can close this pull request.\n", "created_at": "2013-11-23 23:15:08", "user": 5639, "id": 29144228}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29144412", "text": "@JEG2 in the future you can close pull requests by including a comment like this the commit message:\n\nhttps://github.com/ruby/ruby/commit/f67be32291c437156328a3887c8448f669672c26\n", "created_at": "2013-11-23 23:25:53", "user": 9831, "id": 29144412}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29144470", "text": "Roger.  Thanks.\n", "created_at": "2013-11-23 23:28:44", "user": 5639, "id": 29144470}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Typo fixes in URI module\n", "labels": [], "number": 456, "updated_at": "2014-06-28 22:50:56", "user": 567626, "closed_at": "2013-11-25 10:51:15", "id": 23207300, "title": "Typo fixes in URI module", "url": "https://api.github.com/repos/ruby/ruby/issues/456", "created_at": "2013-11-24 15:42:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29173117", "text": "Thank you for the patch!\n\nI will commit this soon.\n", "created_at": "2013-11-25 01:58:07", "user": 277819, "id": 29173117}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "merge revision(s) 43775:\n\n```\n* util.c (ruby_strtod): ignore too long fraction part, which does not\n  affect the result.\n```\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_0_0@43778 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\n\nConflicts:\n    ChangeLog\n    test/ruby/test_float.rb\n    version.h\n", "labels": [], "number": 457, "updated_at": "2014-06-17 03:55:16", "user": 16457, "closed_at": "2013-12-22 23:39:30", "id": 23267277, "title": "cherry pick 46cd2f4 for CVE-2013-4164", "url": "https://api.github.com/repos/ruby/ruby/issues/457", "created_at": "2013-11-25 19:45:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "merge revision(s) 43775:\n\n```\n* util.c (ruby_strtod): ignore too long fraction part, which does not\n  affect the result.\n```\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_0_0@43778 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\n\nConflicts:\n    ChangeLog\n    test/ruby/test_float.rb\n    version.h\n", "labels": [], "number": 458, "updated_at": "2014-06-20 16:37:38", "user": 16457, "closed_at": "2013-12-23 00:05:00", "id": 23267963, "title": "cherry pick 46cd2f463c5668f53436076e67db59fdc33ff384 for CVE-2013-4164", "url": "https://api.github.com/repos/ruby/ruby/issues/458", "created_at": "2013-11-25 19:55:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29249045", "text": "We should probably use the SVN revision in the commit message\n", "created_at": "2013-11-25 22:26:55", "user": 179065, "id": 29249045}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Problem was that a simple class like:\n\n```\nclass X < DelegateClass(Integer)\n  def initialize(value)\n    value = Integer(value)\n    super(value)\n  end\nend\n```\n\nwould fail because Integer would call method_missing of SimpleDelegate, but that would raise an exception since the object to delegate to is not yet set (it will be when super is called).\n\n/cc @nobu\n", "labels": [], "number": 459, "updated_at": "2014-06-12 06:14:53", "user": 148622, "closed_at": "2013-12-04 19:49:22", "id": 23471874, "title": "Fix bug #9155. Problem with delegate class.", "url": "https://api.github.com/repos/ruby/ruby/issues/459", "created_at": "2013-11-29 01:16:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29491652", "text": "What exactly is the issue? The given code works without the patch, no?\n", "created_at": "2013-11-29 01:32:04", "user": 33770, "id": 29491652}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29492061", "text": "Without the fix, the following exception is raised:\n\n```\n 1) Error:\nTestDelegateClass#test_use_delegated_method_in_constuctor:\nArgumentError: not delegated\n    /Users/simon/Documents/rainforest/ruby/lib/delegate.rb:384:in `__getobj__'\n    /Users/simon/Documents/rainforest/ruby/lib/delegate.rb:77:in `method_missing'\n    test/test_delegate.rb:174:in `initialize'\n    test/test_delegate.rb:180:in `new'\n    test/test_delegate.rb:180:in `test_use_delegated_method_in_constuctor'\n```\n", "created_at": "2013-11-29 01:51:06", "user": 148622, "id": 29492061}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29492480", "text": "@marcandre this only affects 2.1 preview 2 and up.\n", "created_at": "2013-11-29 02:09:50", "user": 44345, "id": 29492480}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29551970", "text": "ref http://bugs.ruby-lang.org/issues/9155\n", "created_at": "2013-11-30 13:00:22", "user": 12301, "id": 29551970}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29837624", "text": "Nobu resolved this with [changeset r43984](http://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/43984).\n", "created_at": "2013-12-04 19:39:12", "user": 44345, "id": 29837624}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29838603", "text": ":+1: \n", "created_at": "2013-12-04 19:49:22", "user": 33770, "id": 29838603}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29853949", "text": "@smathieu @ukd1 Thank you for your report!\n", "created_at": "2013-12-04 22:45:57", "user": 12301, "id": 29853949}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29858391", "text": "@hsbt / @marcandre no problem. The code @smathieu wrote didn't get used; is there a guide to writing these in the correct style? Should they be sent to another place except github? We'll probably end up finding more things and would like to keep helping out, but would like to understand how to better!\n\nRuss\n", "created_at": "2013-12-04 23:48:58", "user": 44345, "id": 29858391}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit tests recently [fixed bug](http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/vm_insnhelper.c?r1=43913&r2=43912&pathrev=43913). The problem is consists of the following: when we have object which doesn't have defined `:===` method Ruby crashes in case statement. `BasicObject` doesn't have this method and the bug is reproduced on this object:\n\n``` ruby\ncase 1\nwhen BasicObject.new\nend\n```\n\nAnd we have crash.\n", "labels": [], "number": 460, "updated_at": "2013-11-30 07:13:33", "user": 243846, "closed_at": "2013-11-30 07:13:33", "id": 23494473, "title": "Test for crashing Ruby when object doesn't have :=== method in case", "url": "https://api.github.com/repos/ruby/ruby/issues/460", "created_at": "2013-11-29 14:18:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29523921", "text": "Test is already committed: https://github.com/ruby/ruby/commit/14361a72ff538f2b0a8833ecbef01c3ec7f19c48\n\n(But I guess test needed for context \"method not defined.\"...)\n", "created_at": "2013-11-29 15:51:21", "user": 29440, "id": 29523921}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29547348", "text": "Ok\n", "created_at": "2013-11-30 07:13:33", "user": 243846, "id": 29547348}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ruby spends a non-trivial amount of time in `rb_id2str` when booting the GitHub Rails app:\n\n![screen shot 2013-12-01 at 10 17 02 pm](https://f.cloud.github.com/assets/179065/1650278/9bdfef58-5a7a-11e3-8637-562ad91605e1.png)\n\nThis pull request changes `global_symbols.id_str` to be an array instead of a hash table. Because ID values are sequentially increasing integers, using a hashtable for `id_str` is unnecessary and slow.\n\nThis improves the boot time of our app by about 150-200ms.\n\nBefore:\n\n```\n        6.65 real         5.40 user         1.23 sys\n        6.76 real         5.47 user         1.25 sys\n        6.58 real         5.35 user         1.20 sys\n        6.62 real         5.39 user         1.20 sys\n        6.69 real         5.44 user         1.21 sys\n```\n\nAfter:\n\n```\n        6.41 real         5.19 user         1.19 sys\n        6.45 real         5.22 user         1.20 sys\n        6.45 real         5.21 user         1.20 sys\n        6.46 real         5.22 user         1.20 sys\n        6.43 real         5.20 user         1.20 sys\n```\n\ncc @ko1\n", "labels": [], "number": 461, "updated_at": "2015-01-03 09:55:14", "user": 179065, "closed_at": "2015-01-03 09:55:14", "id": 23535071, "title": "Use an array instead of a hash table for id_str", "url": "https://api.github.com/repos/ruby/ruby/issues/461", "created_at": "2013-12-01 11:23:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29598089", "text": "cc @nobu\n", "created_at": "2013-12-02 07:02:51", "user": 179065, "id": 29598089}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31059944", "text": "looks reasonable\n", "created_at": "2013-12-21 09:26:04", "user": 249427, "id": 31059944}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68589367", "text": "this issue has been fixed by 3e69b074c5ad87778fac4d7974fe1e5fc11d5ed3\n", "created_at": "2015-01-03 09:55:14", "user": 12301, "id": 68589367}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- vm.c (Init_VM): Define RubyVM::InstructionHelper with\n  singleton methods #method_serial and #constant_serial.\n- test/ruby/test_insnhelper.rb: Test new methods.\n\nWith `RubyVM::InstructionHelper`, users have visibility into the method and constant caches.\n\n``` ruby\ndef constants_busted?(&blk)\n  starting = RubyVM::InstructionHelper.constant_serial\n  yield\n  ending = RubyVM::InstructionHelper.constant_serial\n  ending > starting\nend\n\nbusted = constants_busted? do\n  class Foo; end\nend\nputs busted.inspect\n# true\n```\n\nThanks for considering; any input is appreciated!\n", "labels": [], "number": 462, "updated_at": "2013-12-08 17:13:59", "user": 164506, "closed_at": "2013-12-08 17:13:59", "id": 23543971, "title": "Expose serial helper macros", "url": "https://api.github.com/repos/ruby/ruby/issues/462", "created_at": "2013-12-01 21:42:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30008025", "text": "Matching feature request: http://bugs.ruby-lang.org/issues/9190\n", "created_at": "2013-12-06 16:33:44", "user": 164506, "id": 30008025}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30085865", "text": "Closed by cc1063092b366a0a8449528ab6bf67a72f5ce027; thanks everyone!\n", "created_at": "2013-12-08 17:13:59", "user": 164506, "id": 30085865}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "remove unnecessary initialization.\n", "labels": [], "number": 463, "updated_at": "2014-06-20 17:20:09", "user": 567626, "closed_at": "2013-12-07 10:25:51", "id": 23640989, "title": "remove unnecessary initialization.", "url": "https://api.github.com/repos/ruby/ruby/issues/463", "created_at": "2013-12-03 13:04:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[DOC] fix some typos in webrick and xmlrpc lib.\n", "labels": [], "number": 464, "updated_at": "2014-07-01 19:40:25", "user": 567626, "closed_at": "2013-12-06 02:10:44", "id": 23641238, "title": "[DOC] fix some typos in webrick and xmlrpc lib.", "url": "https://api.github.com/repos/ruby/ruby/issues/464", "created_at": "2013-12-03 13:09:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/29708359", "text": "Thank you for the patch, I will commit this soon!\n", "created_at": "2013-12-03 13:16:39", "user": 277819, "id": 29708359}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updated list of word breaking characters for Readline completion need to omit space character ` `as it breaks completion of`String` instance containing one or more spaces:\n\n``` ruby\nirb> 'test me'.u<press TAB for completions>\nme'.uid            me'.unpack         me'.update         me'.usec\nme'.unbind         me'.unshift        me'.upto           me'.utc\nme'.ungetbyte      me'.untaint        me'.use_loader=    me'.utc?\nme'.ungetc         me'.untrust        me'.use_readline   me'.utc_offset\nme'.uniq           me'.untrusted?     me'.use_readline=  me'.utime\nme'.uniq!          me'.upcase         me'.use_readline?  me'.utime=\nme'.unlock         me'.upcase!        me'.use_tracer=\n```\n\nSee, leading string is broken by space and completion is improperly processed and unrelated methods are offered.\n\nWith the fix, completion starts to work properly again:\n\n``` ruby\nirb> 'test me'.u<press TAB for completions>\n'test me'.unpack      'test me'.untrusted?  'test me'.upto\n'test me'.untaint     'test me'.upcase      \n'test me'.untrust     'test me'.upcase!\n```\n\nI believe this fix won't touch completions for other objects. Also see no reason to omit backslash character `\\\\` from the default list.\n\nTake care\n", "labels": [], "number": 465, "updated_at": "2015-03-10 01:50:44", "user": 1522770, "closed_at": "None", "id": 23645542, "title": "Fix of bugfix to #1145", "url": "https://api.github.com/repos/ruby/ruby/issues/465", "created_at": "2013-12-03 14:26:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33757135", "text": "I'm working on this issue with Keiju, we should have a patch ready soon.\n\nThanks!\n", "created_at": "2014-01-31 02:34:37", "user": 277819, "id": 33757135}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52004743", "text": "This patch broke following completion:\n- `1 + :foo.u<tab>`\n- `1 + 'foo'.u<tab>`\n", "created_at": "2014-08-13 03:03:45", "user": 12301, "id": 52004743}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "http://Web.Golux.Com/coar/cgi/ doesn't seem to work now.\nIt is currently redirected to [Apache Software webring](http://www.webring.org/hub/apachesupport?w=1440;rh=http%3A%2F%2Fcgi-spec.golux.com%2F;rd=1), which is not directly referring to CGI.\n\nAnd RFC 3875 does not contain this link. So I propose to change the link to RFC's.\n", "labels": [], "number": 466, "updated_at": "2014-07-06 12:08:29", "user": 91011, "closed_at": "2013-12-06 02:00:23", "id": 23686098, "title": "* lib/webrick/httprequest.rb: [DOC] Change document link", "url": "https://api.github.com/repos/ruby/ruby/issues/466", "created_at": "2013-12-04 00:39:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30049752", "text": "Thank you!!!\n", "created_at": "2013-12-07 07:26:54", "user": 91011, "id": 30049752}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The comment on the method <code>Net::HTTPHeader#to_hash</code> states pair of key and values however it is should be pair of key and values, the values should be arrays and not strings (as in the comment), below is a sample to prove this.\n\n``` ruby\nNet::HTTP.get_response(URI('http://www.google.com')).to_hash\n=> {\"date\"=>[\"Thu, 05 Dec 2013 01:56:13 GMT\"],\n \"expires\"=>[\"-1\"],\n \"cache-control\"=>[\"private, max-age=0\"],\n \"content-type\"=>[\"text/html; charset=ISO-8859-1\"],\n \"set-cookie\"=>\n  [\"PREF=ID=d1e913f2336ed0f7:FF=0:TM=1386208573:LM=1386208573:S=VAKJNSsp0fqk2KJo; expires=Sat, 05-Dec-2015 01:56:13 GMT; path=/; domain=.google.com\",\n   \"NID=67=n11-eGCvw3LfM3Uh9vPzB7mE5fC2B8QcLI01LoasujaIC3lm73DIFij78i40ibkMGx_FHxS6rC1MtlcJDnlLYbYbwecXI1PJM5qFE-D6-mOGgF69jvWws3QUzxtmKocO; expires=Fri, 06-Jun-2014 01:56:13 GMT; path=/; domain=.google.com; HttpOnly\"],\n \"p3p\"=>\n  [\"CP=\\\"This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&answer=151657 for more info.\\\"\"],\n \"server\"=>[\"gws\"],\n \"x-xss-protection\"=>[\"1; mode=block\"],\n \"x-frame-options\"=>[\"SAMEORIGIN\"],\n \"alternate-protocol\"=>[\"80:quic\"],\n \"transfer-encoding\"=>[\"chunked\"]}\n```\n", "labels": [], "number": 467, "updated_at": "2013-12-07 10:36:17", "user": 593852, "closed_at": "2013-12-07 10:36:17", "id": 23761904, "title": "Net/http to_hash returns pair of key and values (where the values are arrays and not strings)", "url": "https://api.github.com/repos/ruby/ruby/issues/467", "created_at": "2013-12-05 02:06:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While developing some software on 1.8, I discovered that question marks in struct members break everything.\n\nI assumed it was still broken, so I wrote a test and found it's fixed on trunk, but since there's no regression test for it I'm pushing it upstream.\n\nThe error on 1.8:\n\n```\nirb(main):001:0> k = Struct.new(:a, :b?)\n=> #<Class:0x107387108>\nirb(main):002:0> o = k.new(\"a\", false)\n=> #<struct #<Class:0x107387108> a=\"a\", :b?=false>\nirb(main):003:0> o.b?\nNoMethodError: undefined method `b?' for #<struct #<Class:0x107387108> a=\"a\", :b?=false>\n        from (irb):3\nirb(main):004:0>\n```\n", "labels": [], "number": 468, "updated_at": "2014-06-26 04:33:18", "user": 476418, "closed_at": "2013-12-06 23:27:45", "id": 23883145, "title": "Tests/struct question mark", "url": "https://api.github.com/repos/ruby/ruby/issues/468", "created_at": "2013-12-06 20:28:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This makes it possible to detect the reason for the failure.\n", "labels": [], "number": 469, "updated_at": "2014-11-16 16:37:58", "user": 23553, "closed_at": "2014-11-16 16:37:53", "id": 23895972, "title": "lib/resolv.rb: pass rcode to OtherResolvError", "url": "https://api.github.com/repos/ruby/ruby/issues/469", "created_at": "2013-12-07 01:01:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32831923", "text": "This is up to @akr.\n\n@corny Could you write a test for this proposed feature?\n\nThanks!\n", "created_at": "2014-01-21 09:19:11", "user": 277819, "id": 32831923}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[DOC] Wordsmith marshal.c documentation.\n", "labels": [], "number": 470, "updated_at": "2014-06-15 07:57:33", "user": 567626, "closed_at": "2013-12-09 08:51:29", "id": 23929892, "title": "[DOC] Wordsmith marshal.c documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/470", "created_at": "2013-12-08 19:56:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "  See https://github.com/jruby/jruby/issues/1311.\n\n(My dev env is borked and I'm on the road, so I can't commit this directly right now.)\n", "labels": [], "number": 471, "updated_at": "2014-06-22 01:07:34", "user": 10135, "closed_at": "2014-05-24 13:54:19", "id": 24016221, "title": "* test/date/test_date.rb: Add test for sub-ms date comparisons.", "url": "https://api.github.com/repos/ruby/ruby/issues/471", "created_at": "2013-12-10 06:28:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44087869", "text": "Already merged this pull request manually at cb7076696c269668a981315b89630a2d5f2b88ae\n", "created_at": "2014-05-24 13:54:19", "user": 12301, "id": 44087869}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- [Including modules containing constants no longer invalidate method cache](https://github.com/ruby/ruby/blob/trunk/ChangeLog#L2830-L2832)\n", "labels": [], "number": 472, "updated_at": "2015-01-03 21:44:02", "user": 164506, "closed_at": "2015-01-02 07:23:44", "id": 24072985, "title": "Refactor #test_include_module_with_constants_invalidates_method_cache", "url": "https://api.github.com/repos/ruby/ruby/issues/472", "created_at": "2013-12-10 23:05:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30278918", "text": "Matching Issue: http://bugs.ruby-lang.org/issues/9240\n", "created_at": "2013-12-10 23:21:09", "user": 164506, "id": 30278918}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68538396", "text": "Thanks @hsbt :smile: \n", "created_at": "2015-01-02 16:17:42", "user": 164506, "id": 68538396}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68573667", "text": "@simeonwillbanks :bow: Sorry, too too late response.\n", "created_at": "2015-01-02 23:42:23", "user": 12301, "id": 68573667}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68610789", "text": "No worries @hsbt!\n", "created_at": "2015-01-03 21:44:02", "user": 164506, "id": 68610789}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 473, "updated_at": "2013-12-12 03:29:21", "user": 246222, "closed_at": "2013-12-12 03:14:53", "id": 24132424, "title": "Fix typo in xmlrpc", "url": "https://api.github.com/repos/ruby/ruby/issues/473", "created_at": "2013-12-11 19:46:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30386270", "text": "Fixed by a4b26274dd1d35241ca489593dccf66aeab30030\n\n@dvsuresh Thank you for your contribution. I missed to mention your github account.\n", "created_at": "2013-12-12 03:14:53", "user": 12301, "id": 30386270}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30386759", "text": "@hsbt thanks\n", "created_at": "2013-12-12 03:29:21", "user": 246222, "id": 30386759}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 474, "updated_at": "2014-07-07 13:53:29", "user": 246222, "closed_at": "2013-12-12 06:07:18", "id": 24158754, "title": "Fix typo in docs/globals.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/474", "created_at": "2013-12-12 05:38:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30391779", "text": "@dvsuresh :sparkles: \n", "created_at": "2013-12-12 06:13:54", "user": 11493, "id": 30391779}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30391918", "text": "@amatsuda Thanks!\n", "created_at": "2013-12-12 06:17:46", "user": 246222, "id": 30391918}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30421936", "text": "タイポモンスタ :abcd: :japanese_ogre: \n", "created_at": "2013-12-12 13:47:46", "user": 277819, "id": 30421936}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 475, "updated_at": "2014-06-29 18:00:31", "user": 246222, "closed_at": "2013-12-12 07:24:22", "id": 24161245, "title": "Fix typo in comments 'example'", "url": "https://api.github.com/repos/ruby/ruby/issues/475", "created_at": "2013-12-12 07:14:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30394143", "text": ":thumbsup::thumbsup::thumbsup:\n", "created_at": "2013-12-12 07:25:47", "user": 11493, "id": 30394143}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 476, "updated_at": "2014-07-03 13:10:44", "user": 246222, "closed_at": "2013-12-13 02:25:17", "id": 24223278, "title": "Fix typo is doc/contributing.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/476", "created_at": "2013-12-13 02:17:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30481688", "text": "@dvsuresh :revolving_hearts:\n", "created_at": "2013-12-13 02:27:49", "user": 11493, "id": 30481688}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30481731", "text": "wow, so fast :clap: \n", "created_at": "2013-12-13 02:28:38", "user": 277819, "id": 30481731}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Showcase that ruby can support other languages part from English.\n", "labels": [], "number": 477, "updated_at": "2014-07-08 02:24:22", "user": 235844, "closed_at": "2013-12-22 20:13:31", "id": 24223557, "title": "[DOC] Add example stating that ruby supports other encodings", "url": "https://api.github.com/repos/ruby/ruby/issues/477", "created_at": "2013-12-13 02:26:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30598661", "text": "Updated the PR with more edits\n", "created_at": "2013-12-15 05:30:51", "user": 235844, "id": 30598661}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://www.w3.org/TR/html5/association-of-controls-and-forms.html#url-encoded-form-data returns 404 error.\n", "labels": [], "number": 478, "updated_at": "2014-06-26 00:48:09", "user": 309329, "closed_at": "2013-12-13 23:24:18", "id": 24278243, "title": "* lib/uri/common.rb: [DOC] Fix a broken link", "url": "https://api.github.com/repos/ruby/ruby/issues/478", "created_at": "2013-12-13 23:03:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Recently we had 3 issues (related to this tests) on JRuby and since MRI doesn't have test coverage to them and also JRuby tests are synced with the MRI tests so I think would not hurt if we add it.\n", "labels": [], "number": 479, "updated_at": "2014-06-26 19:32:53", "user": 39306, "closed_at": "2013-12-14 04:31:30", "id": 24285144, "title": "Additional test coverage", "url": "https://api.github.com/repos/ruby/ruby/issues/479", "created_at": "2013-12-14 03:44:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30560130", "text": "Merged  at r44199-r44201.\n", "created_at": "2013-12-14 04:31:30", "user": 16700, "id": 30560130}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30560500", "text": "Thanks.\n", "created_at": "2013-12-14 04:59:08", "user": 39306, "id": 30560500}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for [Feature #6309]\n", "labels": [], "number": 480, "updated_at": "2016-12-10 18:00:18", "user": 16700, "closed_at": "2016-12-10 18:00:18", "id": 24285899, "title": "new weakref implementation.", "url": "https://api.github.com/repos/ruby/ruby/issues/480", "created_at": "2013-12-14 04:32:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 481, "updated_at": "2014-06-25 10:53:22", "user": 246222, "closed_at": "2013-12-14 07:30:03", "id": 24287135, "title": "Correct spelling in doc/contributing.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/481", "created_at": "2013-12-14 06:51:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30562321", "text": "@amatsuda Thank you :sparkles:\n", "created_at": "2013-12-14 07:40:18", "user": 246222, "id": 30562321}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30562426", "text": "@dvsuresh :smiley_cat: \n", "created_at": "2013-12-14 07:52:41", "user": 11493, "id": 30562426}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 482, "updated_at": "2014-06-14 20:16:33", "user": 246222, "closed_at": "2013-12-14 10:59:18", "id": 24287741, "title": "Correct a couple of typos in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/482", "created_at": "2013-12-14 08:04:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30564901", "text": "@dvsuresh Awesome:bangbang:\n", "created_at": "2013-12-14 11:01:11", "user": 11493, "id": 30564901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 483, "updated_at": "2014-06-18 20:40:53", "user": 7032, "closed_at": "2013-12-14 18:27:52", "id": 24295629, "title": "Fix output of Shellwords.escape()", "url": "https://api.github.com/repos/ruby/ruby/issues/483", "created_at": "2013-12-14 17:13:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30582788", "text": "@anatol :mushroom: :sunflower:\n", "created_at": "2013-12-14 18:32:28", "user": 11493, "id": 30582788}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Latest W3C **Candidate Recommendation** (As of now)\n\nref: https://github.com/ruby/ruby/pull/478#discussion_r8351952\n\ncc: @zzak\n", "labels": [], "number": 484, "updated_at": "2014-07-11 15:55:43", "user": 12539, "closed_at": "2014-01-21 08:57:29", "id": 24295715, "title": "* lib/uri/common.rb: [DOC] change dynamic URI to static URI", "url": "https://api.github.com/repos/ruby/ruby/issues/484", "created_at": "2013-12-14 17:18:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30594862", "text": "We need to confirm implementation is correct with http://www.w3.org/TR/2013/CR-html5-20130806/forms.html#url-encoded-form-data\n", "created_at": "2013-12-15 00:14:12", "user": 12301, "id": 30594862}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30600422", "text": "@hsbt This URI was added in [commit in 2010-03-12](https://github.com/ruby/ruby/commit/8212cdf176a5ac5e6693d4a0284437a38d5922b4#diff-5aecce86ef66006d6771d4e81587be2cR730) ([Minor change in 2011-12-17](https://github.com/ruby/ruby/commit/7cabeff61a25e37517afcdc4fb164a9365f5e30c#diff-5aecce86ef66006d6771d4e81587be2cR862)). I think so your was with reference to [2010-03-04 specifications](http://www.w3.org/TR/2010/WD-html5-20100304/forms.html#url-encoded-form-data) or [2009-08-25 specifications](http://www.w3.org/TR/2009/WD-html5-20090825/forms.html#url-encoded-form-data). There is no significant difference with the [latest specifications](http://www.w3.org/TR/2013/CR-html5-20130806/forms.html#url-encoded-form-data).\n", "created_at": "2013-12-15 08:32:51", "user": 12539, "id": 30600422}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31095132", "text": "@hsbt I will leave this one to you\n", "created_at": "2013-12-22 20:28:26", "user": 277819, "id": 31095132}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32830527", "text": "The implementation looks correct to me,so I'm going to commit the link to the static documentation url.\n\nThanks!\n", "created_at": "2014-01-21 08:54:39", "user": 277819, "id": 32830527}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 485, "updated_at": "2014-07-01 07:37:52", "user": 246222, "closed_at": "2013-12-22 18:25:41", "id": 24302157, "title": "Found more spelling corrections in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/485", "created_at": "2013-12-14 23:42:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30594396", "text": "Thanks for your report.\n\nUpstream of rubygems is https://github.com/rubygems/rubygems . Please report your patch in rubygems directly?\n", "created_at": "2013-12-14 23:48:26", "user": 12301, "id": 30594396}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30594604", "text": "@hsbt  There are the errors I found in http://github.com/ruby/ruby. \n", "created_at": "2013-12-14 23:59:25", "user": 246222, "id": 30594604}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30594833", "text": "lib/rubygems isn't maintained here officially. Issues are solved by https://github.com/rubygems/rubygems before https://github.com/ruby/ruby .\n", "created_at": "2013-12-15 00:12:19", "user": 12301, "id": 30594833}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30594896", "text": "Ok got it, thanks for explaining. \n", "created_at": "2013-12-15 00:15:46", "user": 246222, "id": 30594896}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/30598677", "text": "Usually I backport changes to lib/rubygems, but it's best to submit directly.\n", "created_at": "2013-12-15 05:31:57", "user": 9831, "id": 30598677}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 486, "updated_at": "2014-06-27 21:57:59", "user": 246222, "closed_at": "2013-12-22 15:05:09", "id": 24660508, "title": "Correct few typos in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/486", "created_at": "2013-12-21 05:27:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31058678", "text": "I guess rake and rdoc also have their own repos so the fixes should be made there.\n", "created_at": "2013-12-21 07:36:03", "user": 11493, "id": 31058678}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31058693", "text": "Ok I will do that, thanks\n", "created_at": "2013-12-21 07:38:06", "user": 246222, "id": 31058693}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31101437", "text": "@zzak you should backport or report rake fixes to upstream\n", "created_at": "2013-12-23 02:02:17", "user": 12301, "id": 31101437}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31101640", "text": "@hsbt I would love to, but I don't have commit to Rake. Maybe @drbrain or @jimweirich can change that?\n\n> On Dec 22, 2013, at 9:02 PM, SHIBATA Hiroshi notifications@github.com wrote:\n> \n> @zzak you should backport or report rake fixes to upstream\n> \n> \\\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2013-12-23 02:15:30", "user": 277819, "id": 31101640}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31190599", "text": "Also, this has already been fixed upstream\n", "created_at": "2013-12-25 03:19:39", "user": 277819, "id": 31190599}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add magic comment `# -*- immutable: string -*-` to Ruby that implies `.freeze` on every string literal in the file. To get a mutable string in a file that starts with the magic comment, use `String.new` or `''.dup`.\n\nFor more details, background, and rationale, please see this blog post:\n\nhttp://development.invoca.com/magic-comment-immutable-string-makes-ruby-2-1s-literal-freeze-optimization-the-default/\n", "labels": [], "number": 487, "updated_at": "2015-09-12 09:51:58", "user": 166511, "closed_at": "2015-09-12 09:51:58", "id": 24673254, "title": "Magic comment \"immutable: string\" makes \"literal\".freeze the default for that file", "url": "https://api.github.com/repos/ruby/ruby/issues/487", "created_at": "2013-12-22 00:07:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31076026", "text": "It's most probably too late for 2.1.0. See also https://bugs.ruby-lang.org/issues/8976 for a very similar feature request.\n", "created_at": "2013-12-22 00:41:41", "user": 212792, "id": 31076026}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31161028", "text": "Patch looks good to me, bar the comments I've left above.\n", "created_at": "2013-12-24 06:51:43", "user": 179065, "id": 31161028}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31270790", "text": "Matching ruby-lang feature/issue:\nhttps://bugs.ruby-lang.org/issues/9278\n", "created_at": "2013-12-27 17:09:46", "user": 166511, "id": 31270790}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36350850", "text": "Is something like this going to happen?\n", "created_at": "2014-02-28 13:37:59", "user": 2072686, "id": 36350850}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36365601", "text": "> Is something like this going to happen?\n\nHope so! :)  As argued on our blog post, it is totally impractical and non-Ruby-like to append `.freeze` to every string literal.  And fortunately, in our experience it is extremely rare for code to actually mutate a string literal ... and in cases where it does (buffer accumulation) it's trivial to write `String.new` or `\"\".dup` to get a mutable string.\n", "created_at": "2014-02-28 16:08:31", "user": 166511, "id": 36365601}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/94272703", "text": "+1 Really interested in this feature and totally agree with @ColinDKelley's comment. Is this feature going to be added in the near future?\n", "created_at": "2015-04-19 12:41:50", "user": 90962, "id": 94272703}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131496109", "text": ":+1:\n", "created_at": "2015-08-16 07:10:41", "user": 3117356, "id": 131496109}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139744941", "text": "Please continue discussion on our tracker. see https://bugs.ruby-lang.org/issues/11473\n", "created_at": "2015-09-12 09:51:58", "user": 12301, "id": 139744941}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `SSL_OP_MSIE_SSLV2_RSA_PADDING` has been removed from latest snapshot of OpenSSL 1.0.1. (it has been removed in https://github.com/openssl/openssl/commit/4b61f6d2a675fdb57dc93991e7b332a745b44d1f)\n\nBecause Debian's `openssl` package is made with backported patches from latest snapshot, I could not build the `openssl` module on Debian GNU/Linux sid (amd64) without this fix. (the Debian's `openssl>=1.0.1e-5` will corrupt the build) Yes, this is a problem of Debian package, but this has been merged into the release branch of OpenSSL 1.1.0, I think we need this before the next release of OpenSSL will come.\n", "labels": [], "number": 488, "updated_at": "2014-06-12 11:09:07", "user": 63651, "closed_at": "2013-12-25 01:42:25", "id": 24744834, "title": "Declare `OP_MSIE_SSLV2_RSA_PADDING` only if the macro is defined.", "url": "https://api.github.com/repos/ruby/ruby/issues/488", "created_at": "2013-12-24 12:14:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "modify doc error:\n\n``` ruby\n    using M\n    x = C.new\n    c.foo # prints \"C#foo in M\"\n```\n\nchange to:\n\n``` ruby\n    using M\n    x = C.new\n    x.foo # prints \"C#foo in M\"\n```\n", "labels": [], "number": 489, "updated_at": "2014-06-27 12:08:28", "user": 27893, "closed_at": "2014-01-22 06:22:00", "id": 24788243, "title": "Update refinements.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/489", "created_at": "2013-12-26 13:32:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31241063", "text": "Actually I can't get either example to work in trunk, so I will have to investigate further.\n\nThanks!\n", "created_at": "2013-12-27 00:06:03", "user": 277819, "id": 31241063}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31244076", "text": "@zzak  yes,  the entire document are wrong。\n", "created_at": "2013-12-27 02:21:12", "user": 27893, "id": 31244076}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32996463", "text": "fixed by https://github.com/ruby/ruby/pull/508\n", "created_at": "2014-01-22 06:22:00", "user": 12301, "id": 32996463}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 490, "updated_at": "2014-06-25 10:53:42", "user": 246222, "closed_at": "2013-12-28 08:26:40", "id": 24842908, "title": "Fix a few typos", "url": "https://api.github.com/repos/ruby/ruby/issues/490", "created_at": "2013-12-28 08:03:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31292768", "text": "@dv2 Thanks!\n", "created_at": "2013-12-28 08:27:17", "user": 179065, "id": 31292768}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is something that is broken in JRuby and we realized that mri also doesn't have test coverage.\n", "labels": [], "number": 491, "updated_at": "2014-06-25 15:19:47", "user": 39306, "closed_at": "2013-12-28 23:49:35", "id": 24852110, "title": "Added tests for sprintf with a hash as parameter.", "url": "https://api.github.com/repos/ruby/ruby/issues/491", "created_at": "2013-12-28 22:04:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since https://bugs.ruby-lang.org/issues/6504, there's no way to customize CXXFLAGS in extconf.rb.\n", "labels": [], "number": 492, "updated_at": "2014-06-17 07:08:40", "user": 69755, "closed_at": "2013-12-29 09:45:57", "id": 24856025, "title": "mkmf.rb: make CXXFLAGS customizable", "url": "https://api.github.com/repos/ruby/ruby/issues/492", "created_at": "2013-12-29 05:25:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31314225", "text": "Imported your patch at [r44459](http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=44459&view=revision).\n\nThank you for your contribution!\n", "created_at": "2013-12-29 09:45:49", "user": 29440, "id": 31314225}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31314258", "text": "Thanks!\n", "created_at": "2013-12-29 09:49:15", "user": 69755, "id": 31314258}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [17675583]}, "text": "Added a method that rotates the matrix clockwise or counter clockwise.\n", "labels": [], "number": 493, "updated_at": "2017-12-03 23:03:22", "user": 1211580, "closed_at": "2017-12-03 21:15:33", "id": 24945020, "title": "Added a rotate function for the matrix class", "url": "https://api.github.com/repos/ruby/ruby/issues/493", "created_at": "2014-01-01 20:04:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31429442", "text": "@marcandre Ping!\n", "created_at": "2014-01-01 20:22:21", "user": 277819, "id": 31429442}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31434798", "text": "Tks for the pull request.\nI'm curious: in which circumstances would this be useful?\n", "created_at": "2014-01-02 01:40:53", "user": 33770, "id": 31434798}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348798162", "text": "@marcandre Ping!\r\n\r\nThis can be useful e.g to create a spiral matrix by adding the elements to the beginning of matrix and rotating it.", "created_at": "2017-12-03 17:12:52", "user": 17675583, "id": 348798162}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348812077", "text": "I'm not familiar with \"spiral matrix\",  nor can I find any reference to it. What are they, what can they be used for?", "created_at": "2017-12-03 20:31:48", "user": 33770, "id": 348812077}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348812493", "text": "@marcandre \r\n\r\nSpiral matrix is presented here - https://stackoverflow.com/questions/33684970/print-2-d-array-in-clockwise-expanding-spiral-from-center\r\n\r\nBut I mean it's just an example e.g. python has matrix rotate method so does matlab so I reckon they are there to make some operations easier and I think Ruby's Matrix class has a shortage of methods and functionalities so it would be great to enhance it.", "created_at": "2017-12-03 20:37:47", "user": 17675583, "id": 348812493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348813568", "text": "Thanks for this pointing out. I remain unconvinced of the actual use of this method. I feel the goal with `matrix` is to provide all functionalities that are actually useful. For other things that are easy to do and seem only useful in homeworks, I'm much less enthusiastic. That's why I'm asking for an actual usecase.", "created_at": "2017-12-03 20:52:47", "user": 33770, "id": 348813568}, {"reactions": {"+1": [33770]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348814630", "text": "I see your point there. Thanks a lot anyway.", "created_at": "2017-12-03 21:07:22", "user": 17675583, "id": 348814630}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348815252", "text": "I'll close this, and will gladly reopen and consider if given an actual use case. If that was the case, some kind of `reverse`/`flip` method might be in order too, but again I don't know of a real use for either. Thanks", "created_at": "2017-12-03 21:15:33", "user": 33770, "id": 348815252}, {"reactions": {"+1": [33770]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348825902", "text": "In case this is reopened some time (which I do not advocate hereby): the API with `rotate(true)` vs. `rotate(false)` for indicating direction should be changed at all costs to something that is more self-explanatory.", "created_at": "2017-12-03 23:03:22", "user": 1112299, "id": 348825902}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\nThis is a simple proposal to simplify the code of `intersect?` and `disjoint?`.\n", "labels": [], "number": 494, "updated_at": "2014-01-02 17:13:53", "user": 498017, "closed_at": "2014-01-02 17:08:14", "id": 24964109, "title": "Code simplification for intersect? and disjoint?", "url": "https://api.github.com/repos/ruby/ruby/issues/494", "created_at": "2014-01-02 13:42:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31466916", "text": "I'm afraid this patch is not acceptable.\nThe proposed implementation will be less efficient, in particular with big sets that do have elements in common.\nIndeed it will produce an intermediate array that is not needed and will not stop as soon as a matching element is found.\n", "created_at": "2014-01-02 17:08:14", "user": 33770, "id": 31466916}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31467344", "text": "I totally understand, thanks for this explanation.\n", "created_at": "2014-01-02 17:13:52", "user": 498017, "id": 31467344}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "# Cachelined: A ruby improvement\n### Abstract\n\n![](https://raw.github.com/shyouhei/sandbox/master/cachelined/banner.png)\n\nIt's faster, even compared to 2.1.\n### Introduction\n\nRuby is an object oriented language.  Although it is normal these days, \"everything is an object\" has been a key characteristic of this language.\n\nThe \"object\", in practice, is stored as a C struct named `struct RVALUE` (with a few exceptions such as `true`, `false`).  This struct is a 5 machine-word sized structure.  Its first word is management area mainly for flags, the next word is a pointer to that object's class if any, and the remaining 3 words are dedicated for each classes.\n\n``` c\nstruct RBasic {\n    VALUE flags;\n    const VALUE klass;\n};\n\ntypedef struct RVALUE {\n    union {\n        struct {\n            struct RBasic basic;\n            VALUE v1;\n            VALUE v2;\n            VALUE v3;\n        } values;\n        …\n    } as;\n} RVALUE;\n```\n\nThe problem is, 5 is a prime number.  So cache mechanisms of any size cannot store this struct efficiently.  Most notably, CPUs have been equipped with data caches since their mid age; Ruby's objects do not suit there.  That does not always mean a breakage but significant slowdown is happening.\n\nToday I'd like to propose a fix around this; to make objects power-of-two sized.  What I did was to make objects 8 words length instead of 5.  By doing so an object, most importantly its `struct RBasic` part, is forced to fit in a same cache line.\n\nA side effect is that the extended areas of each objects can be used to store additional info.  For instance strings can hold up to 48 bytes inside their objects;  most short strings are now embedded, which reduces memory allocations.\n### Cache Lines\n\nIt is not the recent development.  At least, Intel i386 could use upto 64KiB L1 cache.  But since CPUs get faster and faster, the importance of cache is rising rapidly.\n\nWhen CPU tries to retrieve an area of memory, no matter how many bytes it requested, a bunch of memory regions are loaded anyway for later uses.  This bunch is called \"cache line\".  The size of that line vary from model to model, but most recent CPUs use 64 bytes.  So whenever you poke a memory, 64 bytes are concerned at once.\n\nLike I mentioned above ruby objects are (were) 5 words width, or 40 bytes.  Objects are tightly arranged inside memory.  If an object starts from 0 byte offset from cache line, the next object is 24 bytes on the current cache, but remaining 16 bytes are not.  As 5 is a prime, the size of an object and the cache line size are pairwise disjoint.  This means every patterns of placements are possible.  Only 3 out of 8 possible arrangement holds entire object at once in a cache line.  All other cases need to access real memory twice.\n### Our Approach\n\nTo fix this issue is simple; just make ruby objects large enough so that they can tightly fit into each cache lines.  By carefully aligning initial allocation, we can force every objects to be cache line aligned.  By dong so every access to an object is guaranteed to have at most one physical memory access.\n### Embedding Others\n\nInteresting side effect of expanding object width, is that it eliminates some memory allocations.\n\nSeveral ruby objects \"embeds\" their contents when possible.  These objects include strings, arrays, hashes, and instances of pure-ruby classes; that is, a wide range of popular objects do so.  Now, the width of an object is extended.  This means there are much more rooms for those embedding objects.  For instance arrays can now embed upto 6 elements.  Hashes can hold upto 3 key-value pairs.  Strings can hold upto 48 bytes.  These relatively small objects are now self-contained.  They can avoid extra cost of allocations.\n### Experiments\n\nTo determine effectiveness of this approach I took several experiments on my vaio pro laptop.  This machine is 2 physical / 4 logical core Haswell equipped, running Linux 3.12.0 (3.12.0 was needed for Linux to support Intel p-state on this chip).\n#### Results of `make benchmark`\n\nHere is the result of `make benchmark`, against ruby 2.1.1p2, 2.0.0p376, 1.9.3p488, and ours (trunk r44485 + our patch); all compiled from source, same compiler (clang 3.4), same options.\n\n![](https://raw.github.com/shyouhei/sandbox/master/cachelined/benchmark.png)\n\nThe result of proposed approach is very similar to 2.1.1p2.  It seems they are virtually identical.  But our approach is the fastest for most cases.  Most are few % faster than 2.1.1p2; which is typical to cache optimizations.  Several cases earn more speedup because of side effect mentioned above, most notably is `bm_vm3_gc`; which in fact used most if its time around hash allocations.\n#### Results of `make rdoc`\n\nTo measure impacts of our approach to a real-world program, `make rdoc XRUBY=${target}` is tested against the set of ruby versions mentioned above.  However, 1.9.3 was not able to make it through due to the version RDoc supports.  So it is not on the graph.\n\n![](https://raw.github.com/shyouhei/sandbox/master/cachelined/rdoc.png)\n\nHere again, our approach is the fastest.  RDoc is almost 100% pure-ruby, so hash optimizations benefit it very much.\n#### Memory usage\n\nOne key concern about our approach is the increasing size of objects; that can impact on memory footprint.  Though at the same time many small memory regions (notably hashes) are packed into one, which can partially reduce memory usages.  How much is used in fact?\n\nTo measure memory usages I used valgrind memory profiler.  It can profile memory usage in non-disruptive manner.  Here are memory footprints of rdoc generation:\n\n![](https://raw.github.com/shyouhei/sandbox/master/cachelined/massif.211p2.png)<br>![](https://raw.github.com/shyouhei/sandbox/master/cachelined/massif.cachelined.png)\n\nTwo graphs above are the memory profiles for both ours and 2.1.1p2.  It shows that the memory footprint does blow up.  However I also have to note that the blew up ratio is  260.5 / 207.4 == 1.256, which is below what is expected from the object size (8 words / 5 words == 1.6 times bigger).  If you take a closer look at them, you see the amount acquired by `heap_assign_page()` is increasing, while that of `objspace_xmalloc()` is decreasing.  This means some part of memories originally taken externally are now embedded into objects; which clearly describes the side effect we expected.\n#### Cache profile\n\nValgrind can also profile cache misshits.  However this feature is ultra slow, not suitable for real-world programs like RDoc.  So I tested `ruby --disable-gems -e\"0x400000.times { Object.new }\"`.  The output below is cache misshit delta between ours versus 2.1.1p2.\n\n```\nzsh % cg_diff cachegrind.out.cachelined cachegrind.out.211p2 | cg_annotate /dev/stdin\n--------------------------------------------------------------------------------\nFiles compared:   cachegrind.out.cachelined; cachegrind.out.211p2\nCommand:          ./ruby --disable-gems -e0x400000.times { Object.new }; /home/shyouhei/data/target/ruby_2_1/bin/ruby --disable-gems -e0x400000.times { Object.new }\nData file:        /dev/stdin\nEvents recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\nEvents shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\nEvent sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw\nThresholds:       0.1 100 100 100 100 100 100 100 100\nInclude dirs:     \nUser annotated:   \nAuto-annotation:  off\n\n--------------------------------------------------------------------------------\n        Ir  I1mr ILmr      Dr       D1mr DLmr      Dw    D1mw    DLmw \n--------------------------------------------------------------------------------\n12,772,600 3,381  -36 742,954 -1,725,002    2 222,942 -30,220 -14,810  PROGRAM TOTALS\n\n--------------------------------------------------------------------------------\n       Ir  I1mr ILmr      Dr       D1mr DLmr        Dw    D1mw    DLmw  file:function\n--------------------------------------------------------------------------------\n8,490,879    13   -1 -65,345 -1,553,377    0  -102,802 -19,959       0  gc.c:gc_heap_lazy_sweep\n1,435,366   -12    1 247,409     -1,476    0   144,589     436       0  gc.c:gc_mark\n  938,264     4    1  42,615     -3,114    0    32,188    -328       0  gc.c:gc_marks_body\n  732,366   -23   -2 180,170     23,350    0    91,665      22       0  gc.c:gc_mark_children\n  544,747    -1    2  72,222        -68    0     1,826       0       0  gc.c:mark_current_machine_context\n  516,747   -11    0 167,970     21,331    0    54,456      59       0  st.c:st_foreach\n  226,596  -368    0  78,816     10,844    0    39,408    -353       0  gc.c:mark_method_entry_i\n -204,979   -33    1 -45,053   -152,686    0   -38,672  12,178       2  gc.c:newobj_of\n  119,003  -365    0  36,875      5,999    0     3,186       0       0  st.c:st_foreach_check\n -100,022   -93    1 -11,628       -556    0   -37,545 -15,310 -14,791  gc.c:heap_assign_page\n  -95,217   -37    0 -34,943       -125    0         0       0       0  gc.c:rb_gc_mark_maybe\n   76,464     0    0  33,453      2,771    0    23,895       0       0  gc.c:mark_const_entry_i\n   34,515     5    0  10,620          7    0     5,310       0       0  hash.c:foreach_safe_i\n   29,571    21    0   3,942        296    0     4,854       0       0  gc.c:rb_gc_mark_locations\n   29,205     0    0  15,930      1,177    0     5,310       0       0  variable.c:mark_global_entry\n   27,317   -42    0   4,897        708    0       944       0       0  vm.c:rb_vm_mark\n   22,656    -1    0   7,552          0    0         0       0       0  gc.c:rb_gc_mark\n  -20,253     0    0  -2,421     -7,125    0       -27       1       0  gc.c:rb_gc_call_finalizer_at_exit\n  -19,602    21    0  -4,340     -1,669    0    -5,874  -6,707       0  gc.c:garbage_collect_body\n  -18,335   134    0  -9,156         -7    0    -3,061      -3       0  parse.y:rb_intern2\n  -18,131   -33   -2  -5,163       -229    0    -2,464     -44       3  /build/buildd/eglibc-2.17/malloc/malloc.c:_int_free\n  -16,541    60    0  -2,080       -281    0    -2,300     -65      83  /build/buildd/eglibc-2.17/malloc/malloc.c:_int_malloc\n   16,284     8    0   8,142          0    0     5,428      -1       0  gc.c:mark_entry\n   14,809  -377    0   4,189        881    0     2,773     118       0  vm.c:rb_thread_mark\n   14,342  -119   -1   3,611        474    0     1,892      59       0  gc.c:gc_mark_roots\n```\n\nIt shows that data read (\"Dr\") is increasing, while cache misshit (\"D1mr\") is decreasing.  This conforms very much with the memory profile;  the footprint increases so data read counts up, while cache misshit decreases as designed to be.\n### Conclusion\n\nProposed is a way optimize cache misshits in ruby's object system.  It speeds up both benchmarks and real-world programs, by sacrificing memory footprint a bit.\n\n**UPDATE** charts updated as I recompiled ruby using clang 3.4.\n", "labels": [], "number": 495, "updated_at": "2014-06-12 10:12:07", "user": 15377, "closed_at": "2014-02-17 04:01:27", "id": 25036706, "title": "[Feature #9362] Minimize cache misshit to gain optimal speed", "url": "https://api.github.com/repos/ruby/ruby/issues/495", "created_at": "2014-01-03 21:24:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31555051", "text": "As being a committer I could have merged this as-is, but I wanted to request your comments because this patch has obvious drawback (binary breakage).\n", "created_at": "2014-01-03 21:26:27", "user": 15377, "id": 31555051}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31555660", "text": "Great job :+1:  .\n\nThat might need a raising in ruby's malloc threshold?\n", "created_at": "2014-01-03 21:35:45", "user": 199499, "id": 31555660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31557702", "text": "@Nami-Doc Can be.  But I'm not sure if rising should boost things up (because of now-larger objects), or lowering (because of lesser # of malloc).\n", "created_at": "2014-01-03 22:06:29", "user": 15377, "id": 31557702}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31558384", "text": "Feature requested. http://bugs.ruby-lang.org/issues/9362\n", "created_at": "2014-01-03 22:17:02", "user": 15377, "id": 31558384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31571429", "text": "Interesting. Have you tried 6-word objects? This would fit 4 objects into 3 cache lines, and 2/3 of the cache lines would contain complete objects, but only increase the size by 1/5 instead of 3/5. Are you sure your 3/8 arrangements with a complete object is right? It looks like 4/5 to me at first glance. (From [HN](https://news.ycombinator.com/item?id=7009426))\n", "created_at": "2014-01-04 04:44:11", "user": 133882, "id": 31571429}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31572870", "text": "Cache line size is generally 64 bytes on x86, 8*8=64 so each cache line contains exactly 8 objects. This assumes a contiguous array of objects initially cache line aligned.\n", "created_at": "2014-01-04 06:36:43", "user": 345780, "id": 31572870}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31573607", "text": "@fleitz Re-read the pull request again. Right now, ruby objects take 5 _words_, not 5 bytes. This proposal makes ruby objects take 8 words, or one whole cache line per object (assuming 8 byte words and 64 bit cache lines).\n", "created_at": "2014-01-04 07:43:33", "user": 133882, "id": 31573607}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31580604", "text": "OK so I found @infogulch's comment interesting.  I did RDoc with changing object sizes one by one, and got this chart.\n\n![](https://raw.github.com/shyouhei/sandbox/master/cachelined/object-sizes.png)\n\nTo obtain time and memory at once I used `time make rdoc…` so the mirage varied from my previous experiments, which used valgrind.\n\nObserved are:\n- Case of 5 words, which is also what 2.1 uses for object size, is still a bit faster than 2.1.\n  - This is because our patch inlines objects more aggressively compared to vanilla 2.1.\n- Memory usages are monotonic increasing.\n- 8 words is the fastest.\n- 7 words is (surprisingly) faster than 6 words, but only a little bit.\n- Anything bigger than 8 seems no use.\n\nI see 6 words is another good choice between memory - time tradeoff.  It uses almost same amount of memory than before, and is much faster. \n", "created_at": "2014-01-04 15:26:06", "user": 15377, "id": 31580604}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31622668", "text": "Would it be worth setting the word size as a compile time flag with Default 6 maybe (Assuming this is possible) so that, in the cases where the extra speed is super important and worth the memory increase (Heavy duty processing for example) the option to use 8 words is available?\n", "created_at": "2014-01-06 01:54:56", "user": 21911, "id": 31622668}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31628047", "text": "@rurounijones Making object size configurable (is in fact possible technically) confuses extension libraries.  Different object sizes are of course binary incompatible.  By doing so end-users should encounter unknown SEGV by corrupted objects, which are very hard to tackle.  So I 'd like to prefer everyone to use a better default.\n\nIt's completely OK with me to choose 6.\n", "created_at": "2014-01-06 05:15:48", "user": 15377, "id": 31628047}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35227377", "text": "CF: [[ruby-core:60784]](https://bugs.ruby-lang.org/issues/9362#change-45198)\n\nIn the latest ruby-core meetup we agreed to reject this particular patch because it comsumes too much memory.  So I close this now.  I believe the concept itself is still valid though.  Let me brush things up.\n\nLook forward my second try.\n", "created_at": "2014-02-17 04:01:27", "user": 15377, "id": 35227377}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "xmldecl is now also using :attribute_quote context setting.\n", "labels": [], "number": 496, "updated_at": "2018-02-23 03:06:36", "user": 214521, "closed_at": "None", "id": 25089953, "title": "fix for #9367", "url": "https://api.github.com/repos/ruby/ruby/issues/496", "created_at": "2014-01-06 08:18:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52002624", "text": "@kou Could your review this?\n", "created_at": "2014-08-13 02:22:38", "user": 12301, "id": 52002624}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119959770", "text": "I've reviewed and commented at https://redmine.ruby-lang.org/issues/9367#note-10\nThere is no response. I want to close it.\n", "created_at": "2015-07-09 13:15:57", "user": 27350, "id": 119959770}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119961046", "text": "Thanks your comment for issue status.\n", "created_at": "2015-07-09 13:18:55", "user": 12301, "id": 119961046}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120196434", "text": "Looks like Ruby Redmine is not a good place for a code review.  I think @bearmini could update (force-push) this PR for every revised patch and @kou could then add line comments.\n", "created_at": "2015-07-10 01:41:49", "user": 10236, "id": 120196434}], "assignees": [27350, 27350], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This caches compiled versions of different encoded regular expressions.\nThis helps performance wise in cases where the same regular expression\ngets used against different encodings.\n\nIn Rails this is a pretty common scenario if templates with user\ngenerated content sometimes only contain ASCII characters, other times\nbinary and sometimes UTF-8.\n\nThis caches the encodings with the lowest three encoding id's, which is\nUS-ASCII, BINARY and UTF-8. They are also the most commonly used and\nprovides a compromise between additional size usage and performance.\n", "labels": [], "number": 497, "updated_at": "2018-02-23 03:06:37", "user": 7851, "closed_at": "None", "id": 25099372, "title": "Cache multiple compiled regexps", "url": "https://api.github.com/repos/ruby/ruby/issues/497", "created_at": "2014-01-06 12:37:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31647742", "text": "@charliesome Updated with the feedback\n", "created_at": "2014-01-06 13:25:45", "user": 7851, "id": 31647742}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31647802", "text": "Also introduces RREGEXP_PTR() macro for accessing the regex_t data. At first I though this might be useful for the moving, but it wasn't in the end. I still feel it's a useful thing to do to make stuff more flexible though.\n", "created_at": "2014-01-06 13:26:59", "user": 7851, "id": 31647802}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31670507", "text": "For the object size concern, if #495 is merged you will have the six words (maybe eight) in an RObject\n", "created_at": "2014-01-06 18:02:21", "user": 9831, "id": 31670507}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31671453", "text": "@drbrain Yeah, I saw that but didn't want this to depend on it. If this is accepted, we can change it later to use the available space.\n", "created_at": "2014-01-06 18:13:20", "user": 7851, "id": 31671453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39325569", "text": "Anything here that I could do to move this along? There are benchmark numbers in the commit message here: https://github.com/dbussink/ruby/commit/7a7f5c2e2e95680f46845dd22ed329873e26e946\n\ncc @ko1\n", "created_at": "2014-04-02 12:48:28", "user": 7851, "id": 39325569}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/178480175", "text": "I merged RREGEXP_PTR change.\n\nThe concern is...\n- The situation this expects: a regexp matches strings with vary encodings is enough exist?\n- This introduces C AP source incompatibility (Maybe this is tiny one)\n", "created_at": "2016-02-02 09:49:21", "user": 13423, "id": 178480175}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/178494697", "text": "> The situation this expects: a regexp matches strings with vary encodings is enough exist?\n\nI've seen this quite regularly. The biggest source is strings that are either US-ASCII or UTF-8 that hit the same location. This was extracted for example from the github application and also saw the same cases in other Rails applications. If it hadn't made a real impact, I wouldn't have started the pull request :smile:. \n", "created_at": "2016-02-02 10:17:27", "user": 7851, "id": 178494697}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "On win32 platform, file system encoding not UTF-8,\n\ncd to a non-ascii directory and run rdoc xxx, that raise a error.\n\n---\n\nruby 2.0.0p353 (2013-11-22) [i386-mingw32]\n", "labels": [], "number": 498, "updated_at": "2018-02-23 03:06:38", "user": 45995, "closed_at": "None", "id": 25151573, "title": "casecmp(b).zero? add to_i avoid call nil.zero?", "url": "https://api.github.com/repos/ruby/ruby/issues/498", "created_at": "2014-01-07 07:15:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31736270", "text": "That would make SAME_PATHS return `true` when `b` is not String-like which is definitely not desirable. The bug is likely upper in the calls.\n", "created_at": "2014-01-07 13:19:48", "user": 168854, "id": 31736270}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Also see https://bugs.ruby-lang.org/issues/9377\n", "labels": [], "number": 499, "updated_at": "2014-06-18 10:23:09", "user": 7851, "closed_at": "2014-01-09 14:12:49", "id": 25231325, "title": "Fix segfault for super bind call", "url": "https://api.github.com/repos/ruby/ruby/issues/499", "created_at": "2014-01-08 10:37:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31934267", "text": "Closing this has been fixed differently.\n", "created_at": "2014-01-09 14:12:49", "user": 7851, "id": 31934267}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 500, "updated_at": "2014-06-24 18:37:37", "user": 2782858, "closed_at": "2014-01-19 05:52:43", "id": 25294946, "title": "Fix typos", "url": "https://api.github.com/repos/ruby/ruby/issues/500", "created_at": "2014-01-09 05:15:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Documents the case where the range is not Numeric.\nAdds an example for the case where the range is not Numeric.\nAdds an example for the case where the method returns Infinity.\n", "labels": [], "number": 501, "updated_at": "2014-01-09 21:27:56", "user": 47542, "closed_at": "2014-01-09 21:25:20", "id": 25319504, "title": "Improve documentation of Range#size", "url": "https://api.github.com/repos/ruby/ruby/issues/501", "created_at": "2014-01-09 13:39:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31952494", "text": "@eregon Eh. Yes. Always double-check your commits after lunch.\n\nI amended the patch.\n\nThanks for noticing.\n", "created_at": "2014-01-09 16:54:42", "user": 47542, "id": 31952494}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/31978311", "text": "Merged, thanks!\n", "created_at": "2014-01-09 21:27:56", "user": 168854, "id": 31978311}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a _failing_ test that illustrates the problem.\n\n./miniruby -I./lib -I. -I.ext/common  ./tool/runruby.rb test/bigdecimal/test_bigmath.rb\n...\n[4/6] TestBigMath#test_division = 0.00 s  \n  1) Failure:\nTestBigMath#test_division [test/bigdecimal/test_bigmath.rb:18]:\nExpected |1486.868686869 - 1487.0| (0.13131313100006992) to be <= 0.001.\n", "labels": [], "number": 502, "updated_at": "2014-06-27 00:05:55", "user": 23320, "closed_at": "2014-01-21 09:21:33", "id": 25341091, "title": "#9316 BigDecimal division in Ruby 2.1", "url": "https://api.github.com/repos/ruby/ruby/issues/502", "created_at": "2014-01-09 18:46:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32832049", "text": "Thank you for the patch, this was fixed by e7fe564\n", "created_at": "2014-01-21 09:21:33", "user": 277819, "id": 32832049}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added the ability to set **FILE** and **LINE**\n\n```\n__FILE__ = \"test.nw\"\n__LINE__ = 10            # this is the line number of the current line\n```\n\nThis helps when using tool like noweb to create ruby files.\n\nBugs: You get a warning about \"warning: possibly useless use of a literal in void context\".\n          and the RHS must be an integer for **LINE** and a String for **FILE**.  The RHS is not evaluated.\n\nThe following example would not change the **FILE** or the **LINE**\n\n```\n__FILE__ = \"A\" + \"B\"      # warning: __FILE__ can only be set to a String, ignored\n__LINE__ = 10 + 1          # warning: __LINE__ can only be set to a Fixnum, ignored\n```\n\nChanging **FILE** at the top level (in main) does what you want for backtraces to return the correct values.\n\nChangiing **FILE** in a block does not affect backtrace outside of that block.\n\nThe semantics of '**FILE** = {string}' is confusing as it looks like the assignment will happen at runtime when the assignment happens (or should happen) at compile time.\n", "labels": [], "number": 503, "updated_at": "2014-07-17 01:42:05", "user": 99491, "closed_at": "2014-02-21 07:53:03", "id": 25428740, "title": "Add the ability to set __FILE__ and __LINE__", "url": "https://api.github.com/repos/ruby/ruby/issues/503", "created_at": "2014-01-10 22:52:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since `Dir.pwd` aliases `Dir.getwd`, their docs are identical. However, looking up `Dir.pwd` is a bit awkward given the example doesn't even show the `pwd` method.\n\nThis change clarifies that and shows how the usages are equivalent.\n", "labels": [], "number": 504, "updated_at": "2014-06-24 15:33:52", "user": 130504, "closed_at": "2014-01-21 12:11:22", "id": 25469475, "title": "Add example for Dir.pwd in Dir.getwd doc", "url": "https://api.github.com/repos/ruby/ruby/issues/504", "created_at": "2014-01-12 20:45:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "09 is not valid digit in Ruby:\n\n``` shell\n$ irb --simple-prompt                                                \n>> 09\nSyntaxError: (irb):1: Invalid octal digit\n    from /usr/local/opt/rbenv/versions/2.1.0/bin/irb:11:in `<main>'\n>> \n```\n", "labels": [], "number": 505, "updated_at": "2014-06-14 10:41:23", "user": 243846, "closed_at": "2014-05-08 19:02:59", "id": 25502048, "title": "Fix failed example of delegator usage", "url": "https://api.github.com/repos/ruby/ruby/issues/505", "created_at": "2014-01-13 14:56:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42591479", "text": "merged by r45882. thenks.\n", "created_at": "2014-05-08 19:02:59", "user": 37002, "id": 42591479}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 506, "updated_at": "2014-06-23 17:07:47", "user": 45995, "closed_at": "2014-01-19 05:47:30", "id": 25704272, "title": "fix some typo", "url": "https://api.github.com/repos/ruby/ruby/issues/506", "created_at": "2014-01-16 05:32:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 507, "updated_at": "2014-07-05 16:45:30", "user": 277819, "closed_at": "2014-05-24 13:58:55", "id": 25778024, "title": "* hash.c: [DOC] Fix typo in Hash#reject warning", "url": "https://api.github.com/repos/ruby/ruby/issues/507", "created_at": "2014-01-17 00:15:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32569512", "text": "Thanks, fix it.\n", "created_at": "2014-01-17 00:54:10", "user": 16700, "id": 32569512}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32573497", "text": "@nobu i dont have keys on this machine so i can't commit it yet. you're welcome to backport the patch!\n", "created_at": "2014-01-17 01:50:58", "user": 277819, "id": 32573497}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32599393", "text": "It's not for the trunk but 2.1!\n", "created_at": "2014-01-17 11:44:29", "user": 16700, "id": 32599393}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44087992", "text": "this pull request is no longer required.\n", "created_at": "2014-05-24 13:58:55", "user": 12301, "id": 44087992}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The sample code in `refinements.rdoc` invokes a method using the wrong\nvariable name.\n", "labels": [], "number": 508, "updated_at": "2014-07-02 08:21:11", "user": 47542, "closed_at": "2014-01-21 12:01:07", "id": 25912866, "title": "Fix typo in refinement sample code", "url": "https://api.github.com/repos/ruby/ruby/issues/508", "created_at": "2014-01-20 11:24:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When initialized URI::Generic always have non-nil @path. But when object\nis just allocated, @path == nil, and #path_query returns nil.\nWith that in mind we can see, that #to_s will fail on line 1484\n  str << path_query\nwith 'TypeError: no implicit conversion of nil into String'.\n\nIn normal circumstances we will always have initialized URI::Generic's,\nand that problem won't affect us.\n\nHowever, it will affect us during debugging. If we step into\nURI::Generic.new(...), context will switch to allocated URI::Generic\nwith @path == nil. Most common debuggers have prompt with current\ncontext. For example in 'pry_debugger' it looks like this\n  2.0.0 (#URI::Parser:0x007f94529ed570):0 >\n\nAs you can see, if we step into initialization of new URI::Generic,\ndebugger will crash due to above mentioned TypeError.\n\nI believe it is not a debugger problem, since having current context in\nprompt is very convenient, but a slight defect in a library code.\n", "labels": [], "number": 509, "updated_at": "2014-01-21 06:22:26", "user": 2338443, "closed_at": "2014-01-20 22:57:44", "id": 25925888, "title": "Fix bug when URI::Generic#to_s fails for allocated objects.", "url": "https://api.github.com/repos/ruby/ruby/issues/509", "created_at": "2014-01-20 15:28:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32805422", "text": "We can't guarantee all uninitialized objects are safe to print.\n", "created_at": "2014-01-20 22:57:44", "user": 16700, "id": 32805422}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/32820911", "text": "It's a bug of pry.\n`inspect` methods may raise a exception, a debugger should consider and fallback it.\n", "created_at": "2014-01-21 04:36:09", "user": 16700, "id": 32820911}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The parameter referred to in the docs is called `new`, not `newer`.\n", "labels": [], "number": 510, "updated_at": "2014-07-10 04:11:34", "user": 311914, "closed_at": "2014-01-22 06:25:06", "id": 26049418, "title": "Fix typo in FileUtils#uptodate? documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/510", "created_at": "2014-01-21 22:13:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [3628124]}, "text": "This is a working proof-of-concept for tracking more advanced code coverage metrics in the Coverage module. Namely, Method Coverage (Function Coverage), and Decision Coverage (as defined in [Steve Cornett's Code Coverage Analysis paper](http://www.bullseye.com/coverage.html)). I'd love feedback!\n\nSince Ruby 1.9, the format of a Coverage report looks like:\n\n``` ruby\n{\"foo.rb\" => [1, 1, 10, nil, nil, 1, 1, nil, 0, nil]}\n```\n\n(from the [rdoc](http://ruby-doc.org/stdlib-2.1.0/libdoc/coverage/rdoc/Coverage.html)) which says that, within \"foo.rb\":\n- lines 1 and 2 were executed once,\n- line 3 was executed 10 times,\n- lines 4 and 5 were \"disabled\" as far as Coverage is concerned,\n- etc.\n\nThis pull request changes the format to be more complicated. For the following ruby file:\n\n``` ruby\ndef sum\n  s = 0\n  10.times do |x|\n    s += x\n  end\n\n  if s == 45\n    p :okay\n    p :ok\n  else\n    p :ng\n  end\nend\n\ndef never_executed\n  \"badwrong\"\nend\n\ndef hello(name)\n  puts \"Hello #{name}\"\nend\n\nsum; sum; hello(\"Sam\")\n```\n\nCoverage.result would yield the following:\n\n``` ruby\n{\"/Users/sam/code/ruby/cov_method.rb\" => {\n  lines: [1, 2, 2, 20, nil, nil, 2, 2, 2, nil, 0, nil, nil, nil, 1, 0, nil, nil, 1, 1, nil, nil, 1],\n  methods: {1 => 2, 15 => 0, 19 => 1},\n  decisions: {7=> [1, 0]}\n}}\n```\n\nSo the following things change about the coverage report:\n1. The coverage report for a given file is a _Hash_, changed from an _Array_.\n2. The execution count for each _line_ is in `Coverage.result[file][:lines]`, changed from `Coverage.result[file]`.\n3. The coverage report includes execution counts for each _method_ in `Coverage.result[file][:methods]`. This object is a hash, with line number keys (where each method was defined), and execution count values (\"calls\"). This could be changed to be the same format as `[:lines]`, but a Hash presumably saves space and time.\n4. The coverage report includes execution counts for each _\"decision\"_ in `Coverage.result[file][:decisions]`. This object is a Hash, with line number keys (the condition of an `if`, a `when` line, etc.), and count values for `true` decisions and `false` decisions. `7=>[2,1]` states that the condition resulted in a truthy value 2 times, and a falsey value 1 time.\n### Decisions\n\nA decision is the result of an `if`, `elsif`, `unless`, `?:`, `when`, `while`, or `until` condition, which are all tracked with this new feature. Since the results of the _conditions_ are tracked, void bodies will be noted. For example:\n\n``` ruby\n:yes if 2+2 == 4\n```\n\nwill report that a conditional statement exists at line 1, and that statement resulted in a truthy decision 1 time, and a falsey decision 0 times, which means not all decisions were tested.\n### _More_ Coverage\n- I think that Statement Coverage, and Condition Coverage could be added to this feature, using the same strategies.\n- I think that Method Coverage could be changed to a more general Function Coverage, which would also track calls to Procs (and lambda Procs) as well as Methods.\n### Caveats\n\nI was not very clear on the magic numbers used in [ruby.h](https://github.com/ruby/ruby/pull/511/files#diff-2), and just used values for the new macros that seemed to work.\n\n`for a in b` is _not_ tracked in Decision Coverage because that syntax does not really involve \"Decisions\". The sequence `for a in b; code; end` is just transformed into `b.each { |a| code }` at compile time. This makes me want to add Proc call coverage to the Method Coverage metric.\n### Updates\n\nI completely rewrote and rebranded \"Branch\" coverage into \"Decision\" coverage after reading more of Steve Cornett's paper. The resultant metric is much more robust, tracking void `else`s, and one-line if/else combos much better.\n", "labels": [], "number": 511, "updated_at": "2018-02-23 03:06:38", "user": 103167, "closed_at": "None", "id": 26059376, "title": "Add method coverage and decision coverage metrics", "url": "https://api.github.com/repos/ruby/ruby/issues/511", "created_at": "2014-01-22 01:13:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68297112", "text": "I'd love to see this make its way into ruby core.  Is this effectively a dead proposal?\n", "created_at": "2014-12-29 20:04:02", "user": 28457, "id": 68297112}, {"reactions": {"+1": [3628124]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68299184", "text": "@brianphillips , I let this one drift for a looooong time. I should add one commit just to fix merge conflicts :stuck_out_tongue: All of the discussion has been at [Ruby bug #9508](https://bugs.ruby-lang.org/issues/9508). Not sure why I never linked back to that bug here...\n\nAfter 2.2.0-preview1 was announced, I let this go, fairly certain that it wouldn't be accepted into 2.2.0 _after_ preview1 was already out. Now that 2.2.0 is out, I should fix the merge conflicts and poke Yusuke, who has generously dedicated a lot of time reviewing this already.\n\nWe left off on a discussion about how this PR makes testing-with-`Coverage.start` a bit slower than it was (testing-with-`Coverage.start` is already slower than testing-normally). IMHO you should kind of expect that coverage runs will be slower, but that sucks for anyone who doesn't want to wrap their `Coverage.start` line with if/else garbage. So I think what would make my proposal much more attractive is an optional arg to `Coverage.start`. I think it would go like this:\n- **`Coverage.start` before this PR**: track line coverage; `Coverage.result` yields a Hash with Array values.\n- **`Coverage.start` after this PR**: track line coverage; `Coverage.result` yields a Hash with Array values.\n- **`Coverage.start(:all)` after this PR**: track line, method, and decision coverage; `Coverage.result` yields a Hash with Hash values, explained in the description above; each Hash value has keys `:lines`, `:methods`, `:decisions`.\n- **`Coverage.start(:lines, :methods)` after this PR**: track line and method coverage only; `Coverage.result` yields a Hash with Hash values; each Hash value has keys `:lines` and `:methods`.\n\nThe only problem with this solution is that it makes tons of the deep C code wrapped in gross if/else statements. But it should make it faster...\n", "created_at": "2014-12-29 20:25:23", "user": 103167, "id": 68299184}, {"reactions": {"+1": [2359186, 1481264, 1068525, 84783]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/186217728", "text": "Any updates on branch/decision coverage support? I believe this is specially important in ruby, given that statements like:\n\n```\ndo_something if condition?\n```\n\nare reported as 100% covered with the current approach.\n", "created_at": "2016-02-19 13:44:17", "user": 1577721, "id": 186217728}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262940361", "text": "@srawlins, first of all, thanks a lot for all the effort you've put into this PR! \r\n\r\nI'd like to make a suggestion about offered syntax: we could add an optional hash instead of a symbol (or a list of them) as an argument. It would make possible to add more options to the method in future without problems with backward compatibility. For example, something like\r\n\r\n```ruby\r\nCoverage.start(only_lines: true)\r\n```\r\n\r\nRegarding speed issues: personally, I think that more complete coverage report overweight tests slowing down. After all, people use coverage tools to track down bugs and false 100% report may lead to missed issues. That's why I also think splitting internal coverage modes into `:lines`, `:methods` and `:decisions` isn't required: all of them are important. Also, as you mentioned earlier, such splitting would complicate internal code significantly and cause harm in future development of this feature.\r\n\r\nSo, from my point of view, we could just format output differently depending on an option given to `Coverage.start`. Those who cares about speed of their test suite may add a conditional statement like [SimpleCov Readme suggests](https://github.com/colszowka/simplecov#running-coverage-only-on-demand).\r\n\r\nLooking forward to merging this feature into Ruby!", "created_at": "2016-11-25 11:48:36", "user": 3628124, "id": 262940361}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/328569500", "text": "Any update's on this? Coverage reports are really misleading when conditional branches are excluded from reports and makes using single-line conditionals riskier as a result, even though they're considered in some cases to be idiomatic Ruby. This leads to a case where using the idiomatic syntax style results in riskier code since you can't tell from a coverage report if you've covered all of your code paths correctly. This effectively leads to having to make a decision over whether you want your code to be easier to cover but less readable or more readable but more difficult to cover.", "created_at": "2017-09-11 15:40:18", "user": 84783, "id": 328569500}, {"reactions": {"heart": [4385736]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/328753499", "text": "I'm VERY SORRY for whopping three-year delay...  I'm now working to implement branch coverage and method coverage.  I plan to finish and include it in Ruby 2.5.\r\n\r\nThis pull request is so inspiring, but there seem some issues.  I show them below.  Anyway, I really appreciate what you've done.\r\nBased on your proposal, I'm now organizing my own idea.  I will create another ticket for branch and method coverage in a few days.\r\n\r\n## Branch coverage of `case` statement\r\n\r\nFor example:\r\n\r\n~~~\r\n 1:def f(x)\r\n 2:  case x\r\n 3:  when :foo\r\n 4:    p :foo\r\n 5:  else\r\n 6:    p :other\r\n 7:  end\r\n 8:end\r\n 9:\r\n10:# tests\r\n11:f(:foo)\r\n12:f(:bar)\r\n~~~\r\n\r\nWhen measuring the coverage of this code above by using your patch, the result is:\r\n\r\n~~~\r\n{\"/tmp/ruby/t.rb\"=>\r\n  {:lines=>[1, 2, nil, 1, nil, 1, nil, nil, nil, nil, 1, 1],\r\n   :methods=>{1=>4},\r\n   :decisions=>{3=>[1, 0], 7=>[1, 0]}}}\r\n~~~\r\n\r\nThere is `0` in `3=>[1, 0]`, which seems that \"branch coverage\" is not 100%.  Actually, there is no way to change the `0` to `1`.  IMO, it is undesirable as a software metric to measure for understanding the degree of a test suite.\r\n\r\n## Branch coverage identifier\r\n\r\nI'm afraid if identifying a branch by using only its lineno would be troublesome because there may be multiple branches in one line.  Also, for convenience, I'd like the information to tell `if` from `while`.  I'm thinking of identifying it by `[<label>, <numbering-id>, <lineno>]` for branch coverage, and `[<method-name>, <lineno>]` for method coverage, like:\r\n\r\n~~~\r\n{\"/tmp/ruby/t.rb\"=>\r\n  {:lines=>[1, 2, nil, 1, nil, 1, nil, nil, nil, nil, 1, 1],\r\n   :methods=>{[:f, 1]=>4},\r\n   :branches=>{[:case, 0, 3]=>{[:when, 1, 4]=>1, [:else, 2, 6]=>1}}}\r\n~~~\r\n\r\n## Branch coverage vs. decision coverage\r\n\r\nThis is just nitpiking, but  I think that \"branch coverage\" is more correct name than \"decision coverage.\"  You attributed [this document](http://www.bullseye.com/coverage.html).  This is slightly difficult to understand, but [the original document that it cites](http://www.tc.faa.gov/its/worldpac/techrpt/ar0654.pdf) says:\r\n\r\n> 4.2.3 Branch Coverage Versus Decision Coverage (Issue 5).\r\n>\r\n> *snip* This\r\n> is based partly on the fact that a Boolean expression evaluated outside of a flow control construct\r\n> may indeed be saved and used to control program flow later.\r\n\r\nSo, target of decision coverage is not only `if` and `while` statements, but also any Boolean expression such as:\r\n\r\n    cond = some? && complex? || condition?\r\n\r\nIn fact, your patch measures only `if` and `while` statements, i.e., branch coverage.\r\n\r\nDecision coverage might be also useful, but to define it, we need to decide \"what is a Boolean expression in Ruby\".  For now, I'd like to focus on only branch coverage.\r\n\r\n## New event types\r\n\r\nAs you may have noticed, adding many new event types is not a good idea.  @ko1, the main developer of Ruby VM, dislikes it.  And the magic number must be the power of 2 so that we can mask it by bit operation.\r\n\r\nI'll work without adding new event types.", "created_at": "2017-09-12 06:38:03", "user": 21557, "id": 328753499}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The problem arises when a signal is sent at the same time as a process is being forked via `IO.popen`. In this case, the `recv_child_error` function called by `rb_fork_internal` makes a call to the `read` syscall which returns -1 with errno set to EINTR. Because the child process hasn't actually exited, this effectively deadlocks MRI, as the code in `rb_fork_internal` blocks indefinitely waiting for the child process to exit so that the exit code can be returned to the caller:\n\n``` c\n        error_occured = recv_child_error(ep[0], &state, &exc, &err, errmsg, errmsg_buflen, chfunc_is_async_signal_safe);\n        if (state || error_occured) {\n            if (status) {\n                rb_protect(proc_syswait, (VALUE)pid, status);\n                if (state) *status = state;\n            }\n            else {\n                rb_syswait(pid);\n                if (state) rb_exc_raise(exc);\n            }\n```\n\nThe fix is to retry the `read` in `recv_child_error` when errno is `EINTR`. This ensures that we will not incorrectly block waiting for the child process to exit when the parent receives a signal.\n\nWe were able to reproduce this problem with the following Ruby code:\n\n``` ruby\n#!/usr/bin/env ruby\n\ntrap(\"QUIT\"){}\n\n1000.times do |i|\n  puts \"iteration #{i}\"\n  fork do\n    Process.kill(\"QUIT\", Process.ppid)\n  end\n  IO.popen(\"cat\", 'r+'){}\nend\n```\n", "labels": [], "number": 512, "updated_at": "2014-01-22 19:59:39", "user": 4303686, "closed_at": "2014-01-22 19:59:39", "id": 26117481, "title": "Fix deadlock in rb_fork_internal", "url": "https://api.github.com/repos/ruby/ruby/issues/512", "created_at": "2014-01-22 19:51:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33061186", "text": "Putting this on a branch.\n", "created_at": "2014-01-22 19:59:38", "user": 4303686, "id": 33061186}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The problem arises when a signal is sent at the same time as a process is being forked via `IO.popen`. In this case, the `recv_child_error` function called by `rb_fork_internal` makes a call to the `read` syscall which returns -1 with errno set to EINTR. Because the child process hasn't actually exited, this effectively deadlocks MRI, as the code in `rb_fork_internal` blocks indefinitely waiting for the child process to exit so that the exit code can be returned to the caller:\n\n``` c\n        error_occured = recv_child_error(ep[0], &state, &exc, &err, errmsg, errmsg_buflen, chfunc_is_async_signal_safe);\n        if (state || error_occured) {\n            if (status) {\n                rb_protect(proc_syswait, (VALUE)pid, status);\n                if (state) *status = state;\n            }\n            else {\n                rb_syswait(pid);\n                if (state) rb_exc_raise(exc);\n            }\n```\n\nThe fix is to retry the `read` in `recv_child_error` when errno is `EINTR`. This ensures that we will not incorrectly block waiting for the child process to exit when the parent receives a signal.\n\nWe were able to reproduce this problem with the following Ruby code:\n\n``` ruby\n#!/usr/bin/env ruby\n\ntrap(\"QUIT\"){}\n\n1000.times do |i|\n  puts \"iteration #{i}\"\n  fork do\n    Process.kill(\"QUIT\", Process.ppid)\n  end\n  IO.popen(\"cat\", 'r+'){}\nend\n```\n", "labels": [], "number": 513, "updated_at": "2014-06-27 22:31:00", "user": 4303686, "closed_at": "2014-01-23 05:08:33", "id": 26118129, "title": "Fix deadlock in rb_fork_internal", "url": "https://api.github.com/repos/ruby/ruby/issues/513", "created_at": "2014-01-22 19:59:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "DRb.start_service must be called at least once per process\n\nI'm not quite sure if this is true or if this is the proper way of handling with this problem.\n\nBut after several hours of investigation we could finally track down why our request didn't respond in some scenarios involving Unicorn and even Puma in daemonized mode.\n\nI suspect the only reason is that the call is needed to be done at least once per process and this has made the trick for us.\n\nI don't remember if Ruby has now any specific after_fork official hook so that this could be fixed on DRb code directly, but here's one suggestion on how to tackle this problem.\n", "labels": [], "number": 514, "updated_at": "2014-06-12 13:24:54", "user": 32246, "closed_at": "2014-01-31 21:43:25", "id": 26248745, "title": "Document need for calling DRb.start_service on after fork hooks", "url": "https://api.github.com/repos/ruby/ruby/issues/514", "created_at": "2014-01-24 15:42:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33845615", "text": "@rosenfeld Thank you.\n", "created_at": "2014-01-31 21:45:23", "user": 277819, "id": 33845615}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33855644", "text": "Thank you :-) \n", "created_at": "2014-02-01 00:11:30", "user": 32246, "id": 33855644}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "removed config param being sent to DRb.auto_load since its unused.\n", "labels": [], "number": 515, "updated_at": "2015-01-04 00:23:38", "user": 567626, "closed_at": "2015-01-04 00:23:38", "id": 26295643, "title": "removed config param being sent to DRb.auto_load since its unused.", "url": "https://api.github.com/repos/ruby/ruby/issues/515", "created_at": "2014-01-25 16:22:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adds descriptions/examples for three class-level methods of Shell:\n- alias_command\n- def_system_command\n- install_system_commands\n\nIf you, @zzak, have time to review/suggest changes that's always appreciated. Thanks!\n", "labels": [], "number": 516, "updated_at": "2014-07-04 13:56:15", "user": 2564322, "closed_at": "2014-05-08 18:46:39", "id": 26301479, "title": "Add documentation in lib/shell.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/516", "created_at": "2014-01-25 21:26:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34556170", "text": "@reprah Could you rebase this? Something messed up on our svn+git sync.\n", "created_at": "2014-02-08 21:06:34", "user": 277819, "id": 34556170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34579015", "text": "@zzak Sure. So\n\n```\n$ git rebase trunk\n```\n\non my feature branch and push that to my fork?\n", "created_at": "2014-02-09 17:00:56", "user": 2564322, "id": 34579015}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34589426", "text": "@reprah That should work, alternatively I can just look at reprah/ruby@a83f1cf but if you plan to make any more commits you should give it a rebase.\n", "created_at": "2014-02-09 22:29:00", "user": 277819, "id": 34589426}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37549198", "text": "@zzak sorry for the delay in getting back to you on this! There are issues with rebasing my documentation onto the current trunk. I get several merge conflicts when running `git pull upstream trunk' to update my fork's trunk and can't proceed to rebasing... if you can use the file you mentioned in your comment above, that'd be great. Sorry for the inconvenience and thanks for your hard work.\n", "created_at": "2014-03-13 15:49:01", "user": 2564322, "id": 37549198}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37612934", "text": "@reprah No worries, I will try to merge this soon. I can merge it easily enough by hand :)\n", "created_at": "2014-03-14 03:09:56", "user": 277819, "id": 37612934}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42589261", "text": "merged by r45881. Thanks.\n", "created_at": "2014-05-08 18:46:39", "user": 37002, "id": 42589261}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request changes `attr`, `attr_reader`, `attr_writer`, and\n`attr_accessor` so that the now return an array of symbols representing\nthe methods that have effectively been added. This matches with the\nbehavior of `def` since the 2.1.0 release.\n", "labels": [], "number": 517, "updated_at": "2018-02-23 03:06:39", "user": 5226, "closed_at": "None", "id": 26318596, "title": "Adds a return value for attr* methods", "url": "https://api.github.com/repos/ruby/ruby/issues/517", "created_at": "2014-01-26 17:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34551207", "text": "@jballanc I think this needs to be rebased\n", "created_at": "2014-02-08 18:14:57", "user": 277819, "id": 34551207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34553438", "text": "Thanks for the heads-up @zzak ... Rebased against trunk.\n", "created_at": "2014-02-08 19:33:49", "user": 5226, "id": 34553438}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34554065", "text": "The Travis failure is in compiling [enc/utf_8.c](/ruby/ruby/blob/trunk/enc/utf_8.c), which is unrelated to this diff.\n", "created_at": "2014-02-08 19:55:34", "user": 5226, "id": 34554065}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 518, "updated_at": "2014-06-14 13:22:43", "user": 59744, "closed_at": "2014-01-31 21:17:42", "id": 26395378, "title": "show proper name for require in examples", "url": "https://api.github.com/repos/ruby/ruby/issues/518", "created_at": "2014-01-27 21:17:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33454164", "text": "@strand You definitely need to `require 'securerandom'` for these examples.\n", "created_at": "2014-01-28 06:24:37", "user": 277819, "id": 33454164}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33540185", "text": "Oh yeh you do! I was using Pry as my REPL, not IRB. My bad.\n", "created_at": "2014-01-28 23:31:13", "user": 509611, "id": 33540185}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33845648", "text": "@schneems Thanks! :heart_eyes_cat: \n", "created_at": "2014-01-31 21:45:46", "user": 277819, "id": 33845648}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Noticed that the new `Exception#cause` didn't have documentation, which is a bummer since it's such a nice little feature for wrapping up exceptions.\n\nWasn't 100% certain whether my use of `an_exception` as the return was totally right--unclear what the conventions are around that based on what I saw in `error.c`\n", "labels": [], "number": 519, "updated_at": "2014-06-19 15:06:09", "user": 130504, "closed_at": "2014-01-31 21:33:08", "id": 26641440, "title": "Documentation for Exception#cause", "url": "https://api.github.com/repos/ruby/ruby/issues/519", "created_at": "2014-01-30 22:43:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33844665", "text": "@jasonrclark Good find, thanks! :heart: \n", "created_at": "2014-01-31 21:33:35", "user": 277819, "id": 33844665}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33844814", "text": "Thanks for the merge! :sparkles:\n", "created_at": "2014-01-31 21:35:17", "user": 130504, "id": 33844814}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The 3rd parameter on HTTPGenericRequest.new means if a request has a response body. When using send_request and passing \"HEAD\" as the first parameters it fails while trying to read the response body.\n\nI got the fix, but I couldn't find a way to create a test for this.\n\nI will be glad to update this PR if someone could give me the directions to create this test.\n", "labels": [], "number": 520, "updated_at": "2015-01-02 12:09:18", "user": 830903, "closed_at": "2015-01-02 12:09:18", "id": 26644269, "title": "Fix for using send_request with HEAD", "url": "https://api.github.com/repos/ruby/ruby/issues/520", "created_at": "2014-01-30 23:28:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34556166", "text": "@rodrigosaito Could you rebase this? Something messed up on our svn+git sync.\n", "created_at": "2014-02-08 21:06:26", "user": 277819, "id": 34556166}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34557486", "text": "@zzak rebased\n", "created_at": "2014-02-08 21:51:10", "user": 830903, "id": 34557486}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For testing purposes I would like to be able to mock stdio/stdout with StringIO objects. This is not currently possible with readline due to an explicit check for a FILE type.\n", "labels": [], "number": 521, "updated_at": "2014-01-31 07:17:25", "user": 820991, "closed_at": "2014-01-31 05:37:12", "id": 26656196, "title": "Add support for StringIO objects to readline", "url": "https://api.github.com/repos/ruby/ruby/issues/521", "created_at": "2014-01-31 05:07:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33763000", "text": "This consists from two parts, just not to raise for `StringIO`, and to revert r42402 (ruby/ruby@d2fa5dff127bcc7ef481d7b3adca7637db3637e0).\nBoth can cause segfaults.\nWe can't accept this request.\n", "created_at": "2014-01-31 05:37:12", "user": 16700, "id": 33763000}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 522, "updated_at": "2014-07-08 09:13:25", "user": 935310, "closed_at": "2014-01-31 21:07:25", "id": 26680754, "title": "fix typo rdoc in Numeric#step", "url": "https://api.github.com/repos/ruby/ruby/issues/522", "created_at": "2014-01-31 13:24:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33845666", "text": "@ksss Thanks!\n", "created_at": "2014-01-31 21:45:59", "user": 277819, "id": 33845666}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33860730", "text": "Thank you for the fix!\n", "created_at": "2014-02-01 02:23:26", "user": 935310, "id": 33860730}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The basename parameter to Tempfile.new is mostly meaningless, as the\nfilename is made unique. An empty string default paremeter will still\ngive a valid unique filename, freeing the caller to not be concerned\nwith the filename at all.\n", "labels": [], "number": 523, "updated_at": "2015-01-04 00:23:38", "user": 12231, "closed_at": "2015-01-04 00:23:38", "id": 26699586, "title": "tempfile.rb: provide default basename parameter", "url": "https://api.github.com/repos/ruby/ruby/issues/523", "created_at": "2014-01-31 17:02:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/33822041", "text": "Awesome! The parameter has become a useless require config. Thanks for this!\n", "created_at": "2014-01-31 17:16:06", "user": 4271, "id": 33822041}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34556160", "text": "@dissolved Could you rebase this? Something messed up on our svn+git sync.\n", "created_at": "2014-02-08 21:06:17", "user": 277819, "id": 34556160}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34563826", "text": "Done.\n", "created_at": "2014-02-09 02:50:32", "user": 12231, "id": 34563826}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42590066", "text": "@dissolved, Thanks for your request. You should post this idea to bugs.ruby-lang.org. \n", "created_at": "2014-05-08 18:52:34", "user": 37002, "id": 42590066}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43396826", "text": "It isn't really a bug though. Are feature requests sent to bugs.ruby-lang.org as well?\n\nAnyway, just rebased again... Travis CI build is passing.\n", "created_at": "2014-05-17 03:55:09", "user": 12231, "id": 43396826}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 524, "updated_at": "2014-06-25 16:09:46", "user": 97820, "closed_at": "2014-02-05 00:38:09", "id": 26823276, "title": "Fix grammatical error in set.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/524", "created_at": "2014-02-03 18:08:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 525, "updated_at": "2014-06-22 03:32:21", "user": 102056, "closed_at": "2014-02-10 05:43:26", "id": 26955893, "title": "enum_take: document that it is OK to take more than available", "url": "https://api.github.com/repos/ruby/ruby/issues/525", "created_at": "2014-02-05 12:27:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34556140", "text": "@Strech Could you rebase this? Something messed up on our svn+git sync.\n", "created_at": "2014-02-08 21:05:43", "user": 277819, "id": 34556140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34556150", "text": "@mvidner I mean..\n", "created_at": "2014-02-08 21:05:58", "user": 277819, "id": 34556150}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34557891", "text": "Sure; rebased, with [ci skip].\n", "created_at": "2014-02-08 22:07:14", "user": 102056, "id": 34557891}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "rb_ary_modify is running twice in rb_ary_initialize.\n", "labels": [], "number": 526, "updated_at": "2014-06-14 10:23:03", "user": 935310, "closed_at": "2014-02-06 01:34:45", "id": 26969870, "title": "* array.c delete extra rb_ary_modify", "url": "https://api.github.com/repos/ruby/ruby/issues/526", "created_at": "2014-02-05 15:37:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34286156", "text": "Sorry, my understanding of Ruby was not enough.\nThanks for add comment!\n", "created_at": "2014-02-06 02:25:01", "user": 935310, "id": 34286156}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Not sure if this is the correct place to document this http://ruby-doc.org/stdlib-2.1.0/libdoc/stringio/rdoc/StringIO.html . This file was the only place \"Pseudo I/O on String object.\" was present in the code base.\n", "labels": [], "number": 527, "updated_at": "2014-06-21 13:09:52", "user": 59744, "closed_at": "2014-02-06 03:10:38", "id": 26983996, "title": "add docs and example for stringio", "url": "https://api.github.com/repos/ruby/ruby/issues/527", "created_at": "2014-02-05 18:09:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": " \"which deals with a collection of unordered values with no duplicates\" is not clear to me. There is an order which is reflected by Hash since 1.9. The set is unsorted. I could be wrong and it does not keep Hash's order but the comments allude to it working that way.\n", "labels": [], "number": 528, "updated_at": "2014-02-07 21:56:28", "user": 12170, "closed_at": "2014-02-07 21:56:28", "id": 27067835, "title": "Update set doc", "url": "https://api.github.com/repos/ruby/ruby/issues/528", "created_at": "2014-02-06 17:32:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Recent nacl_sdk has non-executable irt_core. You need to run\n\n$ ./naclsdk update --force pepper_canary\n\nto fetch the very recent nacl_sdk. The ruby package in naclports compiles with this patch.\n", "labels": [], "number": 529, "updated_at": "2014-06-23 20:56:04", "user": 29770, "closed_at": "2014-06-23 20:56:04", "id": 27211408, "title": "nacl/nacl-config.rb: Use File.exist? instead of executable? for irt_core. ", "url": "https://api.github.com/repos/ruby/ruby/issues/529", "created_at": "2014-02-08 23:15:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "  Make a test of Array#flatten! in TestArray#test_flatten! test.\n", "labels": [], "number": 530, "updated_at": "2014-06-23 08:27:27", "user": 935310, "closed_at": "2014-02-13 07:56:59", "id": 27217655, "title": "* test/ruby/test_array.rb (test_flatten!): fix typo test code", "url": "https://api.github.com/repos/ruby/ruby/issues/530", "created_at": "2014-02-09 06:31:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34955472", "text": "I got the following error:\n\n```\n[ 66/154] TestArray#test_flatten! = 0.00 s\n  1) Failure:\nTestArray#test_flatten! [/Users/zzak/projects/ruby/test/ruby/test_array.rb:801]:\n<[]> expected but was\n<nil>\n```\n", "created_at": "2014-02-13 07:53:09", "user": 277819, "id": 34955472}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34955526", "text": "My mistake, looks good. Thanks!\n", "created_at": "2014-02-13 07:54:22", "user": 277819, "id": 34955526}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34977597", "text": "OK all right! Thanks for merge!\nBut now, test of travis-ci is failing by a other code...\n", "created_at": "2014-02-13 13:30:54", "user": 935310, "id": 34977597}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The first arg is `logdev` in description of args, but `name` in call-seq part.\n", "labels": [], "number": 531, "updated_at": "2014-06-27 11:24:59", "user": 706434, "closed_at": "2014-02-11 00:15:16", "id": 27273561, "title": "* lib/logger.rb: [DOC] Fix arg name for Logger.new.", "url": "https://api.github.com/repos/ruby/ruby/issues/531", "created_at": "2014-02-10 15:20:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Correct spelling of 'library'\n\nThanks!\n", "labels": [], "number": 532, "updated_at": "2014-06-26 05:15:54", "user": 465358, "closed_at": "2014-02-11 08:03:24", "id": 27330526, "title": "ext/tk/README.tcltklib: Fix Tcl/Tk library typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/532", "created_at": "2014-02-11 07:58:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/34733308", "text": "@xta Thank you!\n", "created_at": "2014-02-11 08:05:17", "user": 277819, "id": 34733308}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed typo for \"Marhsal.dump\"\n\nThanks!\n", "labels": [], "number": 533, "updated_at": "2014-06-26 04:38:28", "user": 465358, "closed_at": "2014-02-13 07:00:51", "id": 27497182, "title": "fix marshal.c typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/533", "created_at": "2014-02-13 06:24:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 534, "updated_at": "2014-06-27 10:44:11", "user": 3800237, "closed_at": "2014-02-15 23:15:33", "id": 27523373, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/534", "created_at": "2014-02-13 14:56:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently in JRuby, trying to read from an SSL socket with only a partial TLS record results in spinning indefinitely until the rest of the record comes in (issue https://github.com/jruby/jruby/issues/1280). This will make sure that a non blocking read correctly results in a IO::WaitReadable in that case instead.\n", "labels": [], "number": 535, "updated_at": "2014-08-10 14:15:42", "user": 1011417, "closed_at": "2014-02-26 00:19:05", "id": 27669503, "title": "read_nonblock on a partial TLS record should result in an IO::WaitReadable", "url": "https://api.github.com/repos/ruby/ruby/issues/535", "created_at": "2014-02-16 10:50:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36076323", "text": "Just read the latest release note that 1.9.3 is now in security update only mode, so i've reissued this pull request on trunk\n", "created_at": "2014-02-26 00:19:05", "user": 1011417, "id": 36076323}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "MiniTest::Unit::TestCase,  is deprecated in Minitest 5.0\n", "labels": [], "number": 536, "updated_at": "2014-07-03 03:30:00", "user": 3156948, "closed_at": "2014-02-17 14:12:38", "id": 27702615, "title": "Update testcase.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/536", "created_at": "2014-02-17 09:45:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35284654", "text": "Minitest 5 has not been merged in the stdlib, so I must close this.\n", "created_at": "2014-02-17 14:12:38", "user": 277819, "id": 35284654}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Array#shift is not make shared array when arguments is 0,1,2,3.\nTherefore, call memmove() even if too big array.\n\nI change make shared array if length over ARY_DEFAULT_SIZE and add test code about this.\n\nI send benchmark this patch.\n\n``` ruby\nrequire 'benchmark'\n\nBenchmark.bm do |x|\n  [10_000,1_000_000,100_000_000].each do |n|\n    ary = Array.new(n,0)\n    GC.start\n    x.report(\"#{n}:shift\"){ ary.shift }\n    (0..4).each do |i|\n      ary = Array.new(n,0)\n      GC.start\n      x.report(\"#{n}:shift(#{i})\"){ ary.shift(i) }\n    end\n  end\nend\n```\n\nbefore\n\n```\n       user     system      total        real\n10000:shift  0.000000   0.000000   0.000000 (  0.000004)\n10000:shift(0)  0.000000   0.000000   0.000000 (  0.000009)\n10000:shift(1)  0.000000   0.000000   0.000000 (  0.000008)\n10000:shift(2)  0.000000   0.000000   0.000000 (  0.000007)\n10000:shift(3)  0.000000   0.000000   0.000000 (  0.000008)\n10000:shift(4)  0.000000   0.000000   0.000000 (  0.000004)\n1000000:shift  0.000000   0.000000   0.000000 (  0.000006)\n1000000:shift(0)  0.000000   0.000000   0.000000 (  0.000750)\n1000000:shift(1)  0.000000   0.000000   0.000000 (  0.000865)\n1000000:shift(2)  0.000000   0.000000   0.000000 (  0.000796)\n1000000:shift(3)  0.000000   0.000000   0.000000 (  0.000774)\n1000000:shift(4)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift(0)  0.090000   0.000000   0.090000 (  0.096063)\n100000000:shift(1)  0.090000   0.010000   0.100000 (  0.093355)\n100000000:shift(2)  0.100000   0.000000   0.100000 (  0.092509)\n100000000:shift(3)  0.100000   0.000000   0.100000 (  0.096386)\n100000000:shift(4)  0.000000   0.000000   0.000000 (  0.000006)\n```\n\nafter\n\n```\n       user     system      total        real\n10000:shift  0.000000   0.000000   0.000000 (  0.000005)\n10000:shift(0)  0.000000   0.000000   0.000000 (  0.000004)\n10000:shift(1)  0.000000   0.000000   0.000000 (  0.000003)\n10000:shift(2)  0.000000   0.000000   0.000000 (  0.000004)\n10000:shift(3)  0.000000   0.000000   0.000000 (  0.000004)\n10000:shift(4)  0.000000   0.000000   0.000000 (  0.000004)\n1000000:shift  0.000000   0.000000   0.000000 (  0.000005)\n1000000:shift(0)  0.000000   0.000000   0.000000 (  0.000005)\n1000000:shift(1)  0.000000   0.000000   0.000000 (  0.000006)\n1000000:shift(2)  0.000000   0.000000   0.000000 (  0.000006)\n1000000:shift(3)  0.000000   0.000000   0.000000 (  0.000005)\n1000000:shift(4)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift  0.000000   0.000000   0.000000 (  0.000005)\n100000000:shift(0)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift(1)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift(2)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift(3)  0.000000   0.000000   0.000000 (  0.000006)\n100000000:shift(4)  0.000000   0.000000   0.000000 (  0.000006)\n```\n", "labels": [], "number": 537, "updated_at": "2015-01-03 02:30:36", "user": 935310, "closed_at": "2015-01-03 02:30:36", "id": 27835562, "title": "* array.c (rb_ary_shift_m): use shared instead of MEMMOVE if with arguments", "url": "https://api.github.com/repos/ruby/ruby/issues/537", "created_at": "2014-02-18 22:49:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35462900", "text": "How about reuse code like that?\n\n```\nIndex: array.c\n===================================================================\n--- array.c (revision 45043)\n+++ array.c (working copy)\n@@ -1066,14 +1066,21 @@\n     n = RARRAY_LEN(result);\n     if (ARY_SHARED_P(ary)) {\n    if (ARY_SHARED_OCCUPIED(ARY_SHARED(ary))) {\n+     setup_occupied_shared:\n        ary_mem_clear(ary, 0, n);\n    }\n         ARY_INCREASE_PTR(ary, n);\n     }\n     else {\n-   RARRAY_PTR_USE(ary, ptr, {\n-       MEMMOVE(ptr, ptr + n, VALUE, RARRAY_LEN(ary)-n);\n-   }); /* WB: no new reference */\n+   if (RARRAY_LEN(ary) < ARY_DEFAULT_SIZE) {\n+       RARRAY_PTR_USE(ary, ptr, {\n+       MEMMOVE(ptr, ptr + n, VALUE, RARRAY_LEN(ary)-n);\n+       }); /* WB: no new reference */\n+   }\n+   else {\n+       ary_make_shared(ary);\n+       goto setup_occupied_shared;\n+   }\n     }\n     ARY_INCREASE_LEN(ary, -n);\n\n```\n", "created_at": "2014-02-19 03:36:26", "user": 9558, "id": 35462900}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35468730", "text": "Thank you for review.\n\nI hava one more idea.\nThat code is never used.\n\n```\n    if (ARY_SHARED_OCCUPIED(ARY_SHARED(ary))) {\n        ary_mem_clear(ary, 0, n);\n    }\n```\n\nBecause `ary_take_first_or_last`(`ary_make_partial`) return embed or shared num is more than 2(ary and result) array.\nBut it does not change this time. I was thinking this is a different problem.\n\nFinally, I would like to do this.\n\n```\n--- a/array.c\n+++ b/array.c\n@@ -1056,6 +1056,7 @@ rb_ary_shift_m(int argc, VALUE *argv, VALUE ary)\n {\n     VALUE result;\n     long n;\n+    long len = RARRAY_LEN(ary);\n\n     if (argc == 0) {\n        return rb_ary_shift(ary);\n@@ -1064,17 +1065,20 @@ rb_ary_shift_m(int argc, VALUE *argv, VALUE ary)\n     rb_ary_modify_check(ary);\n     result = ary_take_first_or_last(argc, argv, ary, ARY_TAKE_FIRST);\n     n = RARRAY_LEN(result);\n-    if (ARY_SHARED_P(ary)) {\n-       if (ARY_SHARED_OCCUPIED(ARY_SHARED(ary))) {\n-           ary_mem_clear(ary, 0, n);\n+    if (!ARY_SHARED_P(ary)) {\n+       if (len < ARY_DEFAULT_SIZE) {\n+           RARRAY_PTR_USE(ary, ptr, {\n+               MEMMOVE(ptr, ptr+n, VALUE, len-n);\n+           }); /* WB: no new reference */\n+           ARY_INCREASE_LEN(ary, -n);\n+           return result;\n        }\n-        ARY_INCREASE_PTR(ary, n);\n-    }\n-    else {\n-       RARRAY_PTR_USE(ary, ptr, {\n-           MEMMOVE(ptr, ptr + n, VALUE, RARRAY_LEN(ary)-n);\n-       }); /* WB: no new reference */\n+       assert(!ARY_EMBED_P(ary)); /* ARY_EMBED_LEN_MAX < ARY_DEFAULT_SIZE */\n+\n+       ary_mem_clear(ary, 0, n);\n+       ary_make_shared(ary);\n     }\n+    ARY_INCREASE_PTR(ary, n);\n     ARY_INCREASE_LEN(ary, -n);\n\n     return result;\n```\n\nWhat do you think? @ko1 \n", "created_at": "2014-02-19 05:56:15", "user": 935310, "id": 35468730}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35790706", "text": "Sorry @ko1. my mistake.\n\ni commit good reuse code!\n", "created_at": "2014-02-22 01:33:38", "user": 935310, "id": 35790706}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "IMHO, this looks more like ruby like to me. Just submitting for now to start the conversation.\n", "labels": [], "number": 538, "updated_at": "2014-08-21 19:17:57", "user": 43164, "closed_at": "2014-08-21 19:17:57", "id": 27841541, "title": "A more ruby esque encode method.", "url": "https://api.github.com/repos/ruby/ruby/issues/538", "created_at": "2014-02-19 00:33:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Age log rotation is very useful, like `Logger.new log_name, 'daily'`, that should make every day has their own log file, but right now that's not for sure. Sometimes logger will continues to write in old log file after age rotation.\n\nCurrent implements compare the modify time of the log file and the end time of previous period for checking whether should shift the log file, there is one case will cause the problem, if the comparing happening in almost midnight, like _2014-01-02 23:59:59.999_, that's larger than _2014-01-01 23:59:59_, no need to shift at that time, and the real writing to disk will happen the next day, like _2014-01-03 00:00:00.121_, so at the next log event, the modify time will still be larger than _2014-01-02 23:59:59_.\n\nIn my real situation, if there is some events in _23:59:59_, it will never shift the log file.\n\nSo i change the implements of `check_shift_log`, import a new instance variable in `LogDevice` class, named `@next_rotate_time`, it will hold the start time of next period, for example, current day is _2014-02-19_, the value will be _2014-02-20 00:00:00.000_, in `check_shift_log`, if the current time is large than that value, will shift the log file and update `@next_rotate_time`, in this case, it will be _2014-02-21 00:00:00.000_.\n\nThat should fix the problem.\n", "labels": [], "number": 539, "updated_at": "2014-07-10 06:34:48", "user": 824436, "closed_at": "2014-02-21 07:11:13", "id": 27852739, "title": "Fixup sometimes logger fails on age log rotation", "url": "https://api.github.com/repos/ruby/ruby/issues/539", "created_at": "2014-02-19 06:00:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request includes three commits:\n- [Add default arguments to `Time::strptime` to match `Date::strptime`.](https://github.com/sferik/ruby-1/commit/1679b909f51e9467b29e6ff84ba5f341ae7b961c) After this patch, `Time::strptime` may be invoked with 0, 1, or 2 arguments. When invoked with 0 or 1, it produces a result equivalent to `Date::strptime` invoked with the same arguments.\n- [Raise ArgumentError if time passed to `Time::strptime` is invalid.](https://github.com/sferik/ruby-1/commit/70087ce27f605c3cc3265ad1c196544dfd0d8b08) This fixes a Ruby bug and adds a test to ensure it will not regress. Before this commit:\n\n``` ruby\nrequire 'date'\nDate::strptime('31/02/2014', '%d/%m/%Y') # ArgumentError: invalid date\nrequire 'time'\nTime::strptime('31/02/2014', '%d/%m/%Y') # 2014-03-03 00:00:00 +0000\n```\n- I have also [renamed variables in `Time::parse` to be consistent with the changes I made to `Time::strptime`](https://github.com/sferik/ruby-1/commit/306938092e79f5581e466879fdb5abe538b7549f). Specifically, renaming `d` to `hash`, since it is not a `Date` and renaming the `date` parameter to `time`. I believe both of these changes make the code clearer.\n\nThank you for considering this patch.\n", "labels": [], "number": 540, "updated_at": "2018-02-23 03:06:40", "user": 10308, "closed_at": "None", "id": 27870627, "title": "Improvements to Time::strptime", "url": "https://api.github.com/repos/ruby/ruby/issues/540", "created_at": "2014-02-19 12:26:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35545149", "text": "Just a note to say that there are no `Time::strptime` specs in https://github.com/rubyspec/rubyspec but there are a bunch for `Date::strptime` that can probably be used as a starting point.\n", "created_at": "2014-02-19 20:34:41", "user": 59449, "id": 35545149}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35771123", "text": "@jamesotron I’m not sure it makes sense to specify the new behavior of `Date::strptime` until that behavior exists in MRI but I will happily update RubySpec after these changes are merged. I have added assertions to the MRI test suit as part of this patch.\n", "created_at": "2014-02-21 20:39:42", "user": 10308, "id": 35771123}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35998707", "text": "It makes no sense to me to call strptime with zero arguments.  Maybe you should mandate the first one.\n", "created_at": "2014-02-25 11:32:24", "user": 15377, "id": 35998707}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36055170", "text": "@shyouhei I was just making it consistent with `Date::strptime`. Should I also remove the default argument from `Date::strptime`?\n", "created_at": "2014-02-25 20:39:02", "user": 10308, "id": 36055170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42157429", "text": "I agree strptime with no arguments doesn't make sense, and I agree DateTime and Time should be consistent, so I think they should be removed from Date::strptime.\n\nAlso, it would be nice to have RubySpec tests for DateTime.\n", "created_at": "2014-05-05 03:52:09", "user": 8358, "id": 42157429}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42737873", "text": "@felipec That would be a backward-incompatible change. It would be possible to make that change in Ruby 3 but, in the mean time, I think Ruby 2 should have consistent behavior between `Date` and `Time`.\n", "created_at": "2014-05-10 10:06:55", "user": 10308, "id": 42737873}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42754305", "text": "Since there's no Ruby 3 branch, I'm pretty sure if these defaults are added, people are going to forget to remove them when Ruby 3 comes along =/\n", "created_at": "2014-05-10 21:09:09", "user": 8358, "id": 42754305}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "If we expose the log dev mutex, we will be able to write new methods in a subclass of logger, and make sure they are thread safe, for instance:\n\n``` ruby\nclass FancyLogger < Logger\n  def silence(temporary_level = Logger::ERROR)\n    @logdev.synchronize do\n\n    end\n  end\nend\n```\n\nrelated: https://github.com/rails/activerecord-session_store/issues/19\n\n[fix https://bugs.ruby-lang.org/issues/9532]\n", "labels": [], "number": 541, "updated_at": "2015-11-20 18:32:56", "user": 833383, "closed_at": "2015-11-20 14:18:10", "id": 27908283, "title": "Expose logger mutex", "url": "https://api.github.com/repos/ruby/ruby/issues/541", "created_at": "2014-02-19 20:50:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/144481466", "text": "cc @charliesome \n", "created_at": "2015-09-30 17:19:06", "user": 833383, "id": 144481466}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158269664", "text": "I tried to merge this pull request. but some tests are fails.\n", "created_at": "2015-11-20 03:36:09", "user": 12301, "id": 158269664}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158278137", "text": "@hsbt can you paste here which tests were falling? when i did this PR everything was green. I can rebase it and see what CI says.\n", "created_at": "2015-11-20 04:48:46", "user": 833383, "id": 158278137}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158281715", "text": "@arthurnn Could you rebase?\n", "created_at": "2015-11-20 05:15:59", "user": 2290461, "id": 158281715}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158282234", "text": "Done rebasing.\n", "created_at": "2015-11-20 05:21:36", "user": 833383, "id": 158282234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158282375", "text": "Thanks, I will check later. \n", "created_at": "2015-11-20 05:23:32", "user": 2290461, "id": 158282375}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158282851", "text": "I got following results with `make test-all TESTS='logger -j4'`\n\n```\n34 tests, 130 assertions, 17 failures, 6 errors, 0 skips\n```\n\nmy ruby version is `ruby 2.3.0dev (2015-11-18 trunk 52625) [x86_64-darwin15]`\n", "created_at": "2015-11-20 05:26:57", "user": 12301, "id": 158282851}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158284136", "text": "@arthurnn Could you fix based on codes of trunk if you still want this feature?\n", "created_at": "2015-11-20 05:37:32", "user": 2290461, "id": 158284136}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158295403", "text": "I will fix this, looking at the problem right now\n", "created_at": "2015-11-20 06:37:06", "user": 833383, "id": 158295403}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158297200", "text": "the problem was that i was not calling `mon_initialize` , which seems new.\nNow it should work, at least the tests passes locally\n", "created_at": "2015-11-20 06:53:02", "user": 833383, "id": 158297200}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158308451", "text": "@arthurnn Thanks! I confirmed to pass on my environment.\n", "created_at": "2015-11-20 07:23:32", "user": 12301, "id": 158308451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158411431", "text": "It looks fine, I will merge\n", "created_at": "2015-11-20 14:10:11", "user": 2290461, "id": 158411431}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158413234", "text": "@arthurnn merged to trunk, thanks!\n", "created_at": "2015-11-20 14:19:02", "user": 2290461, "id": 158413234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158484401", "text": ":cool:\n", "created_at": "2015-11-20 18:32:56", "user": 833383, "id": 158484401}], "assignees": [2290461, 2290461], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a line directive to Ruby\n\n```\n  #line {nn} [\"filename\"]\n```\n\nThis is done by creating a array of filenames and using the upper bits of the line_number to determine the current filename.  The original filename is in position 0.\n\nAn extra node is added by the parser that informs the compiler of the filenames so the backtrace code can follow it.\n\nThe **__LINE__** and **__FILE__** _constants_ are updated and compile time warnings are also effected.\n", "labels": [], "number": 542, "updated_at": "2014-06-16 03:09:01", "user": 99491, "closed_at": "2014-02-21 15:13:51", "id": 28024554, "title": "Line directive (#line ...)", "url": "https://api.github.com/repos/ruby/ruby/issues/542", "created_at": "2014-02-21 08:00:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a **line directive** to Ruby\n\n```\n  #line {nn} [\"filename\"]\n```\n\nThis is done by creating a array of filenames and using the upper bits of the line_number to determine the current filename.  The original filename is in position 0.\n\nAn extra node is added by the parser that informs the compiler of the filenames so the backtrace code can follow it.\n\nThe **__LINE__** and **__FILE__** _constants_ are updated and compile time warnings are also effected.\n", "labels": [], "number": 543, "updated_at": "2015-08-22 22:01:03", "user": 99491, "closed_at": "2015-08-22 22:01:03", "id": 28048780, "title": "Line directive", "url": "https://api.github.com/repos/ruby/ruby/issues/543", "created_at": "2014-02-21 15:23:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "avaiable => available, and my lamest commit to a major repo\n", "labels": [], "number": 544, "updated_at": "2014-06-15 09:42:53", "user": 215266, "closed_at": "2014-02-23 02:27:19", "id": 28065944, "title": "Sp correction", "url": "https://api.github.com/repos/ruby/ruby/issues/544", "created_at": "2014-02-21 19:24:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35827287", "text": "@jkassemi Thanks for the patch, every one counts! :heart:\n", "created_at": "2014-02-23 09:10:48", "user": 277819, "id": 35827287}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found some wasted spaces in README.ja.md, so I have modified. I polish some sentences along the way. \n\nTruth be told, I want to do more great things for ruby, but because my ability clumsy yet, start here...!\n", "labels": [], "number": 545, "updated_at": "2014-07-13 00:48:44", "user": 5266933, "closed_at": "2014-02-23 02:27:19", "id": 28097630, "title": "Fix README.ja.md", "url": "https://api.github.com/repos/ruby/ruby/issues/545", "created_at": "2014-02-22 15:17:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "i try benchmark this change.\n\n``` ruby\nrequire 'benchmark'\n\nn = 10000000\n\nBenchmark.bm do |x|\n  GC.start\n  empty_time = x.report(\"empty\"){n.times{ }}\n  GC.start\n  embed_time = x.report(\"embed length\"){n.times{ [].length }}\n  puts embed_time.real / empty_time.real\nend\n```\n\nresult of 10 times average.\n\nbefore: 1.681396211600276\nafter: 1.6629606856866217\n\nit's more faster but just a little :ant: \n", "labels": [], "number": 546, "updated_at": "2014-02-27 02:42:03", "user": 935310, "closed_at": "2014-02-27 02:42:03", "id": 28164975, "title": "* include/ruby/ruby.h (RARRAY_LEN):  change more faster get embed array length", "url": "https://api.github.com/repos/ruby/ruby/issues/546", "created_at": "2014-02-24 14:31:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/35991664", "text": "What's your platform, (OS, CPU, compiler)?\nIt seems depending on such conditions.\n", "created_at": "2014-02-25 09:56:23", "user": 16700, "id": 35991664}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36204396", "text": "exactly.\nI took more some benchmarks (OS X, Core i5, gcc).\nBut result didn't change almost.\nI'll close this issue.\nthanks.\n", "created_at": "2014-02-27 02:42:03", "user": 935310, "id": 36204396}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There's been an open issue in JRuby (https://github.com/jruby/jruby/issues/1280) caused by read_nonblock spinning indefinitely when only a partial TLS record is available. JRuby syncs their openssl tests from the main ruby repo, so I thought I'd issue this pull request here to add the test for MRI as well. MRI already handles this case correctly.\n", "labels": [], "number": 547, "updated_at": "2014-08-10 01:45:47", "user": 1011417, "closed_at": "2014-05-25 00:10:09", "id": 28297839, "title": "Testing read_nonblock on a partial TLS record results in IO::WaitReadable", "url": "https://api.github.com/repos/ruby/ruby/issues/547", "created_at": "2014-02-26 00:16:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "s/FORTY/FORTIFY/\n", "labels": [], "number": 548, "updated_at": "2014-06-26 17:44:51", "user": 2010013, "closed_at": "2014-02-26 18:58:27", "id": 28336190, "title": "Fixed typo in comment", "url": "https://api.github.com/repos/ruby/ruby/issues/548", "created_at": "2014-02-26 14:21:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36166127", "text": "@qnet-herwin Thanks for the patch!\n", "created_at": "2014-02-26 19:29:53", "user": 277819, "id": 36166127}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Bug #9573]\n", "labels": [], "number": 549, "updated_at": "2016-12-10 18:00:18", "user": 16700, "closed_at": "2016-12-10 18:00:18", "id": 28409302, "title": "Ancestor include", "url": "https://api.github.com/repos/ruby/ruby/issues/549", "created_at": "2014-02-27 10:48:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This documents the special value \".*\" as the second argument for File.basename.\n", "labels": [], "number": 550, "updated_at": "2014-06-26 04:38:35", "user": 982, "closed_at": "2014-02-28 00:41:08", "id": 28458626, "title": "Add more documentation for File.basename", "url": "https://api.github.com/repos/ruby/ruby/issues/550", "created_at": "2014-02-27 22:00:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 551, "updated_at": "2014-06-25 01:12:23", "user": 3800237, "closed_at": "2014-03-01 01:54:02", "id": 28515515, "title": "[DOC] Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/551", "created_at": "2014-02-28 16:50:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From Euclidean complex vector product: second vector needs to be conjugated.\n(Theoretically is now slower but more importantly doesn't cause havoc.)\n", "labels": [], "number": 552, "updated_at": "2014-07-01 21:01:22", "user": 6136951, "closed_at": "2014-03-03 00:58:05", "id": 28592506, "title": "Bug fix: Vector.magnitude: Complex numberes", "url": "https://api.github.com/repos/ruby/ruby/issues/552", "created_at": "2014-03-03 00:11:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36474228", "text": "`Complex#abs2` returns the product of `self` and `self.conjugate`.\n", "created_at": "2014-03-03 00:58:05", "user": 16700, "id": 36474228}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/36474362", "text": "Oh, I'm stupid. I see. I'm using old ruby...\n", "created_at": "2014-03-03 01:02:46", "user": 6136951, "id": 36474362}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`'\\a'` and `'\\\\a'` are both the same as `\"\\\\a\"` because single-quoted strings let `\\` escape `\\`.\n\n(This fact makes it possible to write the string backslash+singlequote, `\"\\\\'\"`, as a single-quoted string `'\\\\\\''`.)\n\nWhat is the correct way in the .rdoc to escape the backslashes surrounded by `<tt>`? I'm not confident that I did _that_ perfectly.  According to github preview, the last backslash kept trying to escape the `</tt>` instead of being a backslash character, so I sadly separated them with a space character.\n", "labels": [], "number": 553, "updated_at": "2014-06-20 22:17:32", "user": 947619, "closed_at": "2014-03-14 03:13:19", "id": 28754554, "title": "Document single-quoted strings more accurately", "url": "https://api.github.com/repos/ruby/ruby/issues/553", "created_at": "2014-03-05 00:21:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37612790", "text": "It looks good to me:\n![screen shot 2014-03-13 at 8 06 09 pm](https://f.cloud.github.com/assets/277819/2417622/a1386498-ab25-11e3-956d-58ad8a0c3bcf.png)\n", "created_at": "2014-03-14 03:06:39", "user": 277819, "id": 37612790}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 554, "updated_at": "2014-06-21 12:43:13", "user": 947619, "closed_at": "2014-03-06 06:10:37", "id": 28760906, "title": "docs: fix mistake in example code", "url": "https://api.github.com/repos/ruby/ruby/issues/554", "created_at": "2014-03-05 02:45:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 555, "updated_at": "2014-07-16 14:13:13", "user": 947619, "closed_at": "2014-03-06 06:20:54", "id": 28819855, "title": "docs: Fix left/right mix-ups", "url": "https://api.github.com/repos/ruby/ruby/issues/555", "created_at": "2014-03-05 19:52:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The default values for `GC_HEAP_FREE_SLOTS` and `GC_HEAP_INIT_SLOTS` are reversed, which causes incorrect default values to be set for these GC parameters.\n", "labels": [], "number": 556, "updated_at": "2014-06-21 23:06:07", "user": 4303686, "closed_at": "2014-03-24 05:30:42", "id": 28846561, "title": "Fix up default GC params", "url": "https://api.github.com/repos/ruby/ruby/issues/556", "created_at": "2014-03-06 03:04:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 557, "updated_at": "2014-07-28 18:02:57", "user": 12577, "closed_at": "2014-03-07 22:29:11", "id": 28970038, "title": "Enum yield values", "url": "https://api.github.com/repos/ruby/ruby/issues/557", "created_at": "2014-03-07 14:45:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix test for hash iterators.\nIt's should be test for Enumerator object.\n", "labels": [], "number": 558, "updated_at": "2014-07-06 21:38:03", "user": 935310, "closed_at": "2014-03-10 01:55:17", "id": 29041832, "title": "* test/ruby/test_enumerator.rb (test_iterators):", "url": "https://api.github.com/repos/ruby/ruby/issues/558", "created_at": "2014-03-09 11:49:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This merges all upstream changes from the 2.1.1 tag.\n\n/cc @charliesome @tmm1\n", "labels": [], "number": 559, "updated_at": "2014-03-10 12:35:57", "user": 7851, "closed_at": "2014-03-10 12:35:43", "id": 29091321, "title": "Merge upstream 2.1.1", "url": "https://api.github.com/repos/ruby/ruby/issues/559", "created_at": "2014-03-10 12:35:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37177417", "text": "Sorry, wrong repo :(\n", "created_at": "2014-03-10 12:35:57", "user": 7851, "id": 37177417}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 560, "updated_at": "2014-03-10 16:48:03", "user": 6909669, "closed_at": "2014-03-10 16:48:03", "id": 29111334, "title": "Select to accept args", "url": "https://api.github.com/repos/ruby/ruby/issues/560", "created_at": "2014-03-10 16:47:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 561, "updated_at": "2014-07-06 04:54:55", "user": 6909669, "closed_at": "2014-03-10 16:49:50", "id": 29111427, "title": "Select to accept args", "url": "https://api.github.com/repos/ruby/ruby/issues/561", "created_at": "2014-03-10 16:48:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Check that `fptr` is not NULL before dereferencing in `dump_object`.\n", "labels": [], "number": 562, "updated_at": "2014-06-27 11:27:44", "user": 4303686, "closed_at": "2014-03-10 21:56:18", "id": 29119376, "title": "Check fptr before trying to dump FILE object fd", "url": "https://api.github.com/repos/ruby/ruby/issues/562", "created_at": "2014-03-10 18:21:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There are two doc changes here.\n- ee4fcad fixes the docs. They used to say, \"with no arguments `instance_methods` the methods of ancestors are not included\".  This is not true (with no argument then the ancestors methods are included).  I've fixed this and updated the examples \n-  fb9d67f helps with readability, added `<i>` tags and updated the size of an array in an example\n", "labels": [], "number": 563, "updated_at": "2014-03-12 15:32:13", "user": 6289830, "closed_at": "2014-03-12 15:32:13", "id": 29272486, "title": "* class.C: [DOC] Instance methods documentation fix", "url": "https://api.github.com/repos/ruby/ruby/issues/563", "created_at": "2014-03-12 15:26:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37422386", "text": "Moved to [documenting-ruby](https://github.com/documenting-ruby)\n", "created_at": "2014-03-12 15:32:13", "user": 6289830, "id": 37422386}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There are two doc changes here.\n- 559abaf fixes the docs. They used to say, \"with no arguments `instance_methods` the methods of ancestors are not included\".  This is not true (with no argument then the ancestors methods are included).  I've also updated the examples \n-  39d7023 helps with readability, added `<i>` tags and updated the size of an array in an example\n", "labels": [], "number": 564, "updated_at": "2014-03-12 15:45:52", "user": 6289830, "closed_at": "2014-03-12 15:45:52", "id": 29274328, "title": "Instance methods docs", "url": "https://api.github.com/repos/ruby/ruby/issues/564", "created_at": "2014-03-12 15:45:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37424301", "text": "sorry, error.\n", "created_at": "2014-03-12 15:45:52", "user": 6289830, "id": 37424301}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ruby compilation fails if you're using libreadline>=6.3\n", "labels": [], "number": 565, "updated_at": "2014-03-13 01:02:16", "user": 225435, "closed_at": "2014-03-13 01:02:16", "id": 29311057, "title": "Backport fix for [Bug #9578]", "url": "https://api.github.com/repos/ruby/ruby/issues/565", "created_at": "2014-03-12 22:43:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37489328", "text": "This issue is already fixed by r45225, r45240 and 45243 in trunk. I created backport ticket: https://bugs.ruby-lang.org/issues/9630\n", "created_at": "2014-03-13 01:02:16", "user": 12301, "id": 37489328}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I install kgio, it failed. The error message is:\n\n```\n/opt/ruby21/lib64/ruby/2.1.0/mkmf.rb:705:in `Integer': can't convert nil into Integer (TypeError)\n     from /opt/ruby21/lib64/ruby/2.1.0/mkmf.rb:705:in `block in try_constant'\n```\n", "labels": [], "number": 566, "updated_at": "2015-03-10 01:50:30", "user": 18908, "closed_at": "None", "id": 29321492, "title": "bug fixed: gets might be nil", "url": "https://api.github.com/repos/ruby/ruby/issues/566", "created_at": "2014-03-13 02:35:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37503677", "text": "Why is nothing read?\nAnd https://github.com/wsylvest/kgio/blob/master/ext/kgio/extconf.rb doesn't seem using `check_sizeof` nor `try_constant`.\nFrom where does it occur?\n", "created_at": "2014-03-13 06:27:43", "user": 16700, "id": 37503677}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Documentation for `hash` suggests that `hash` is only based on string length and content. However, running: `'a'.hash()` in two different irb sessions produces different results.\n", "labels": [], "number": 567, "updated_at": "2014-03-14 01:31:19", "user": 452161, "closed_at": "2014-03-14 01:31:19", "id": 29381765, "title": "doc change for string hash()", "url": "https://api.github.com/repos/ruby/ruby/issues/567", "created_at": "2014-03-13 19:29:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37605197", "text": "The word \"instance\" seems ambiguous.\n\nAnd the documentation for `rb_obj_hash()` already describes it as:\n\n> The hash value for an object may not be identical across invocations or\n> implementations of ruby.  If you need a stable identifier across ruby\n> invocations and implementations you will need to generate one with a custom\n> method.\n", "created_at": "2014-03-14 00:57:40", "user": 16700, "id": 37605197}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The cofactor is  very useful and important operation.\n\nWe can do some calculations more smart.\n\n``` ruby\n# a is object of Matrix class\n\n# Determinant\na[0,0] * a.cofactor(0,0) + a[0,1] * a.cofactor(0,1) .. \n\n#Matrix of cofactors\nc = Matrix.new([a.cofactor(0,0), a.cofactor(0,1)..], [a.cofactor(1,0)..\n\n# Inverse of a matrix\nc.transpose/a.determinant\n\n# cross product\nv1, v2, .. , v(n-1): n-vector\ne = Vector[1,1...,1]\na = Matrix[e, v1, v2, .. , v(n-1)]\n\nVector[a.cofactor(0,0), a.cofactor(0,1), .. ,a.cofactor(0,n-1)]\n\n```\n\nIt help us to think general definition(it means m \\* n matrix) of determinant, inverse, and other.\n", "labels": [], "number": 568, "updated_at": "2015-06-05 15:49:29", "user": 5266933, "closed_at": "2014-04-06 17:48:22", "id": 29494269, "title": "Add cofactor and first_minor methods for the Matrix class", "url": "https://api.github.com/repos/ruby/ruby/issues/568", "created_at": "2014-03-15 15:05:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37738726", "text": "Good proposal.\n\nThere should really be 3 commits in this PR. There's a change to the doc of minor (not sure about why these changes are needed), the addition of `first_minor` ad the addition of `cofactor`.\n\nWould you like to split this in three commits?\n", "created_at": "2014-03-15 21:35:50", "user": 33770, "id": 37738726}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37745083", "text": "Thank for your review!! I’ll do anything you say. Thank you.\n", "created_at": "2014-03-16 01:28:00", "user": 5266933, "id": 37745083}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37754493", "text": "I did everything  Mr. marcandre said. I would appreciate if you could check it again.\n", "created_at": "2014-03-16 11:15:24", "user": 5266933, "id": 37754493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37765598", "text": "Thanks for your reviews again. I did what you said. I appreciate that you gave me a lot of comments.\n", "created_at": "2014-03-16 18:34:45", "user": 5266933, "id": 37765598}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37779100", "text": "Great work @gogotanaka \n\nI've made some small comments, otherwise this looks good.\n\nIt would be great if you could also modify the NEWS file, and make sure you end up with 2 commits (on for `first_minor`, then one for `cofactor`). Yeah, this will delete my comments, but that's fine :smiley: \n", "created_at": "2014-03-17 01:45:44", "user": 33770, "id": 37779100}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/37822287", "text": "I have completed.\n\nThanks for reviewing again and again. Mr. @marcandre \n", "created_at": "2014-03-17 14:37:05", "user": 5266933, "id": 37822287}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38376652", "text": "I have finished all modifications. Could anyone please check it?\n", "created_at": "2014-03-23 08:12:37", "user": 5266933, "id": 38376652}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39674788", "text": "Committed, thanks for the PR!\n", "created_at": "2014-04-06 17:49:07", "user": 33770, "id": 39674788}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, only the GCM mode of authenticated encryption is supported in Ruby. This patch adds support for the CCM mode of authenticated encryption. It also adds support for explicitly setting IV length, which is required by OpenSSL when dealing with non-standard IV lengths in CCM mode. See https://bugs.ruby-lang.org/issues/9642 for more information.\n\nMore details:\n- Add #ossl_is_ccm macro for AES-128-CCM, AES-192-CCM and AES-256-CCM\n- Modify OpenSSL::Cipher#authenticated? to return true for CCM modes\n- Add ossl_ccm_set_auth_tag and ossl_ccm_get_auth_tag methods\n- Modify OpenSSL::Cipher#auth_tag and OpenSSL::Cipher#auth_tag= to\n  support CCM\n- Add OpenSSL::Cipher#iv_len= method to support non-standard CCM IV\n  lengths\n- Add some documentation on how to use non-standard CCM IV lengths\n", "labels": ["OpenSSL"], "number": 569, "updated_at": "2016-10-23 12:03:19", "user": 681636, "closed_at": "2016-10-23 12:03:19", "id": 29525908, "title": "Finish adding support for AES-CCM mode", "url": "https://api.github.com/repos/ruby/ruby/issues/569", "created_at": "2014-03-16 20:45:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39400901", "text": "Does anyone have pointers as to what is missing for this PR to be considered for inclusion?\n", "created_at": "2014-04-03 00:34:42", "user": 681636, "id": 39400901}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39416280", "text": "@louismullie This needs approval of @emboss\n", "created_at": "2014-04-03 06:16:47", "user": 277819, "id": 39416280}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41644012", "text": "@zzak @emboss Any updates on this?\n", "created_at": "2014-04-29 05:59:49", "user": 681636, "id": 41644012}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68523197", "text": "@nahi Can you review this?\n", "created_at": "2015-01-02 12:21:32", "user": 12301, "id": 68523197}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156408001", "text": "I'm not sold on this patch, and releasing \"as-is\" is taking priority at the moment.\n\nI also think making `iv_len` public might be a bad decision.\n", "created_at": "2015-11-13 11:48:28", "user": 277819, "id": 156408001}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225387405", "text": "OpenSSL needs to know the plaintext length before setting the AAD or starting encrypting. So if we want support AES-CCM in OpenSSL::Cipher, we need another method #plaintext_len=, and of course this is a very bad idea.\n", "created_at": "2016-06-11 19:04:19", "user": 1033740, "id": 225387405}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/255584875", "text": "As commented before, CCM does not fit with the interface of OpenSSL::Cipher. Please open a new issue at https://github.com/ruby/openssl if you have ideas about this.\n", "created_at": "2016-10-23 12:03:19", "user": 1033740, "id": 255584875}], "assignees": [1033740, 1033740], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All number conversion methods have special treatment of `nil` -\nthey don't convert it using `to_i` but instead raise a TypeError.\n\nThis patch fixes the documentation so that this case is specifically\nmentioned for all.\n", "labels": [], "number": 570, "updated_at": "2014-06-26 04:22:17", "user": 47542, "closed_at": "2014-03-21 00:50:14", "id": 29652297, "title": "Document number conversion of `nil`", "url": "https://api.github.com/repos/ruby/ruby/issues/570", "created_at": "2014-03-18 15:01:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- configure.in: Fix a build problem with clang and --with-opt-dir.\n  If ruby is configured with --with-opt-dir=dir when using clang\n  as compiler, a warning `clang: warning: argument unused during\n  compilation: '-I dir'` is emitted almost every time clang\n  compiles a file.  Unfortunately, RUBY_CHECK_PRINTF_PREFIX takes\n  any output from the compiler as fatal error, and the check thus\n  fails due to the warning.  This is an attempt to fix the problem\n  by adding a flag -Qunused-arguments to CFLAGS locally in the\n  function to suppress the warning.\n", "labels": [], "number": 571, "updated_at": "2014-06-25 01:55:18", "user": 10236, "closed_at": "2014-03-21 13:02:50", "id": 29827230, "title": "Fix a build problem with clang and --with-opt-dir.", "url": "https://api.github.com/repos/ruby/ruby/issues/571", "created_at": "2014-03-20 15:15:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `GC::start` method documentation was inconsistent with the text listing the\ncurrently available keyword parameters.\n\n`GC#garbage_collect` was further out of date. The `ObjectSpace.garbage_collect`\nline resulted in the docs showing \"garbage_collect -> nil\" twice, and it was\nmissing the keyword parameter flavor.\n", "labels": [], "number": 572, "updated_at": "2014-06-19 15:19:40", "user": 130504, "closed_at": "2014-03-21 07:37:12", "id": 29854766, "title": "Fix for GC::start and GC#garbage_collect docs", "url": "https://api.github.com/repos/ruby/ruby/issues/572", "created_at": "2014-03-20 20:27:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38254199", "text": "@jasonrclark Thanks!\n", "created_at": "2014-03-21 07:35:32", "user": 277819, "id": 38254199}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current implementation of `escape_element` and `unescape_element` don't suppor the `*elements` argument. This result in both methods always simply returning the original `str` passed to them.\n", "labels": [], "number": 573, "updated_at": "2014-03-21 21:47:50", "user": 103360, "closed_at": "2014-03-21 21:47:50", "id": 29907066, "title": "support *elements in escape synonyms", "url": "https://api.github.com/repos/ruby/ruby/issues/573", "created_at": "2014-03-21 15:04:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 574, "updated_at": "2014-08-11 04:38:22", "user": 178162, "closed_at": "2014-04-02 05:58:12", "id": 29920724, "title": "Fix typo: unclosed HTML tag.", "url": "https://api.github.com/repos/ruby/ruby/issues/574", "created_at": "2014-03-21 17:51:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39325271", "text": "Thank you!\n", "created_at": "2014-04-02 12:45:15", "user": 178162, "id": 39325271}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1st commit: don't try to encode `nil` headers. Currently this causes: \n\n```\nNoMethodError: undefined method `encode' for nil:NilClass\n```\n\n2nd commit: just makes sense for this converter, I think. Currently leading/trailing whitespace will create: `:_symbol_header` or `:symbol_header_`.\n", "labels": [], "number": 575, "updated_at": "2014-07-01 02:59:40", "user": 17570, "closed_at": "2014-04-01 14:41:57", "id": 29945468, "title": "Fixes for CSV Header Conversion", "url": "https://api.github.com/repos/ruby/ruby/issues/575", "created_at": "2014-03-21 22:47:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39061537", "text": "cc @jeg2\n", "created_at": "2014-03-31 07:51:19", "user": 277819, "id": 39061537}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39132440", "text": "I think adding the `strip()` call is pretty safe.  It does technically change the results you would get with certain files, but I think it's probably for the better.\n\nI'm less sure swallowing the `nil` headers.  If we do that, it rules out the possibility of writing a converter that changes nil headers into what you would like them to be.\n\nThoughts?\n", "created_at": "2014-03-31 19:46:29", "user": 5639, "id": 39132440}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39173166", "text": "> I'm less sure swallowing the nil headers.\n> ... it rules out the possibility of writing a converter that changes nil headers into what you would like them to be.\n\nTrue, but what's the use case? Not much context is provided for `nil` headers. One could append a counter to the generated name (how would one then make the relation between the auto generated name and its values) or use a constant value as a catch-all.\n\nThat aside, the current code (`NoMethodError` aside) doesn't necessarily accommodate this. One would either have to put their converter before the builtins or the builtins would have to convert `nil` to a `String` to [prevent header processing from being halted](https://github.com/sshaw/ruby/blob/c60f337377fb392766d289803fcee44fe026bed2/lib/csv.rb#L2178).\n", "created_at": "2014-04-01 05:55:54", "user": 17570, "id": 39173166}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39213448", "text": "You convinced me.  I applied both of your changes.\n\nThank you.\n", "created_at": "2014-04-01 14:43:13", "user": 5639, "id": 39213448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found some improvements.\n### Before\n\n``` ruby:before\nMatrix.diagonal( )\n=> NoMethodError: undefined method `size' for nil:NilClass\n\nMatrix.scalar(0, 1)\n=> NoMethodError: undefined method `size' for nil:NilClass\n\nMatrix.empty.inverse\n=> NoMethodError: undefined method `size' for nil:NilClass\n```\n### After\n\n``` ruby:after\nMatrix.diagonal( )\n=> Matrix.empty(0, 0)\n\nMatrix.scalar(0, 1)\n=> Matrix.empty(0, 0)\n\n Matrix.empty.inverse\n=> Matrix.empty(0, 0)\n```\n\nAnd, add test for raising ErrDimensionMismatch in Matrix#inverse.\n", "labels": [], "number": 576, "updated_at": "2014-07-13 20:16:41", "user": 5266933, "closed_at": "2014-04-06 17:48:22", "id": 29957439, "title": "Some improvements to matrix", "url": "https://api.github.com/repos/ruby/ruby/issues/576", "created_at": "2014-03-22 09:08:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38357588", "text": "Interesting. Shouldn't `Matrix.empty.inverse` return `Matrix.empty`?\n", "created_at": "2014-03-22 17:09:37", "user": 33770, "id": 38357588}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38375524", "text": "Hmm, Matrix.scalar(0,1) is undefined, so I thought Matrix.empty.inverse should be also undefined.\n\nBut I think twice about it,  Matrix.scalar(0,n) (for any n)  should return  Matrix.empty.\n\nAnd Matrix.empty.inverse should return Matrix.empty.\n\nI will change immediately.\n", "created_at": "2014-03-23 06:45:44", "user": 5266933, "id": 38375524}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38375622", "text": "I have one question. May I ask?\n\nWhen I should change my commits like now, which is more preferable, git push -force, git revert or other way?\n", "created_at": "2014-03-23 06:54:08", "user": 5266933, "id": 38375622}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38375645", "text": "> When I should change my commits like now, which is more preferable, git push -force, git revert or other way?\n\nFeel free to commit the way you prefer. It'll all end up being squashed down to one SVN commit if this is merged.\n", "created_at": "2014-03-23 06:55:54", "user": 179065, "id": 38375645}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38375776", "text": "@charliesome Thank you for answering my question. I will try.\n", "created_at": "2014-03-23 07:06:14", "user": 5266933, "id": 38375776}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38376697", "text": "I have finished all modifications. \n", "created_at": "2014-03-23 08:15:17", "user": 5266933, "id": 38376697}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38386345", "text": "> Feel free to commit the way you prefer. It'll all end up being squashed down to one SVN commit if this is merged.\n\n@charliesome  I disagree, I even [blogged about why](http://blog.marc-andre.ca/2014/02/05/why-i-wont-squash-my-commits/).\n", "created_at": "2014-03-23 15:49:57", "user": 33770, "id": 38386345}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38386469", "text": "@gogotanaka Good catch about `Matrix.diagonal`.\n\nI double checked what packages like octave do for `empty.inverse` and they return an empty matrix by default.\n\nSo if you don't mind, and sorry to contradict what @charliesome told you, would you be kind enough to restructure this PR into two commits, one for the inverse of an empty matrix, the other for `diagonal()` and `git push -f`?\n\nThanks for your good work.\n", "created_at": "2014-03-23 15:54:46", "user": 33770, "id": 38386469}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39674783", "text": "Committed, thanks for the PR!\n", "created_at": "2014-04-06 17:48:56", "user": 33770, "id": 39674783}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/40224598", "text": "@marcandre  oh.. I am very sorry for ignoring your comments... \n\nSo far I had no time to commit ruby. \n\nBut, I want to do what you said(test pattern, git push -f) and commit  ruby more!\n", "created_at": "2014-04-11 16:46:31", "user": 5266933, "id": 40224598}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 577, "updated_at": "2014-07-23 11:01:42", "user": 80475, "closed_at": "2014-03-25 23:31:36", "id": 30154331, "title": "Fix spelling of Jim Weirich.", "url": "https://api.github.com/repos/ruby/ruby/issues/577", "created_at": "2014-03-25 19:10:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\n\n[This is also Bug #9676](https://bugs.ruby-lang.org/issues/9676)\n`rb_reg_search()` [allocates (dups) a String to attach to the backreference object](https://github.com/ruby/ruby/blob/trunk/re.c#L1453). If `#gsub` has been passed 2 arguments (not Enumerator form) and the second argument is a String, then it shouldn't make these allocations when calling `rb_reg_search()` inside it's loop.\n## Example\n\n``` ruby\n# gsub-allocates-too-much.rb\nrequire File.join(__dir__, \"lib\", \"allocation_stats\")\n\ndef puts_object_list(name, stats)\n  objects = stats.allocations.group_by(:sourcefile, :sourceline, :class).all.\n    values.flatten.map(&:object).\n    map {|o| o.is_a?(String) ? \"#{o.inspect}<#{o.encoding.to_s}>\" : o.inspect }\n  puts \"#{name} #{objects.flatten.size} new objects:\"\n  objects.group_by(&:hash).values.each { |ary| puts \"#{ary.join(\", \")}\" }\nend\n\nslash = '/'; underscore = '_'; colon = ':' # allocate before the trace\nstr = \"12:34:45:67\"\nstats = AllocationStats.trace { str.gsub(colon, underscore) }\nputs '> \"12:34:45:67\".gsub(\":\", \"_\")'\nputs_object_list(\"gsub substitutes 3x times:\", stats)\n```\n\n```\n$ ruby ../allocation_stats/gsub-allocates-too-much.rb\n> \"12:34:45:67\".gsub(\":\", \"_\")\ngsub substitutes 3x times: 12 new objects:\n\"12:34:45:67\"<UTF-8>, \"12:34:45:67\"<UTF-8>, \"12:34:45:67\"<UTF-8>, \"12:34:45:67\"<UTF-8>\n\"12_34_45_67\"<UTF-8>\n\":\"<ASCII-8BIT>, \":\"<ASCII-8BIT>\n\":\"<US-ASCII>, \":\"<US-ASCII>\n#<MatchData \":\">\n#<MatchData nil>\n/:/\n```\n\nThe Strings that are copies of the original String are all unnecessary (except one).\n## The Fix\n\nThe fix involves allocating the `str` attribute of the backreference object only when necessary. In order to do this without changing the signature of `rb_reg_search()`, this patch changes `rb_reg_search()` to wrap a new function `rb_reg_search0()`. So no calls to `rb_reg_search()` need to change, and `str_gsub()` changes just two calls into `rb_reg_search0()` to avoid the allocations.\n## Impact\n\nThe impact of this fix is primarily faster garbage collection. I have two \"real world\" examples:\n- ActiveRecord sqlite3 specs: total time in GC reduced from 11.2s to 10.4s (7% savings).\n- Mail gem specs: total time in GC reduced from 0.220s to 0.215s (2% savings).\n\nThese numbers bounced around a lot though. I'm open to better benchmarking suggestions. I used ActiveRecord and Mail for real world examples of `#gsub`, where realistic Strings are gsubbed.\n", "labels": [], "number": 578, "updated_at": "2014-06-19 12:24:33", "user": 103167, "closed_at": "2014-03-25 23:46:58", "id": 30155324, "title": "String#gsub shouldn't allocate so many Strings in its loop", "url": "https://api.github.com/repos/ruby/ruby/issues/578", "created_at": "2014-03-25 19:21:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38635852", "text": "@srawlins Thanks!\n", "created_at": "2014-03-25 23:53:48", "user": 179065, "id": 38635852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38636308", "text": "Thanks much @charliesome!\n", "created_at": "2014-03-26 00:00:46", "user": 103167, "id": 38636308}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## Problem\n\n[This is also Ruby Bug #9680](https://bugs.ruby-lang.org/issues/9680)\n\nCurrently `String#sub`, `#sub!`, `#gsub`, and `#gsub!` all accept a String pattern, but immediately create a Regexp from it, and use the regex engine to search for the pattern. This is not performant. For example, `\"123:456\".gsub(\":\", \"_\")` creates the following objects, most of which are immediately up for GC:\n- dup of the original String\n- result String\n- 2x `\":\"<US-ASCII>`\n- 2x `\":\"<ASCII-8BIT>`\n- Regexp from pattern: `/:/`\n- `#<MatchData \":\">`\n- `#<MatchData nil>`\n## Solution\n\nThe solution is not too complicated. Calls to `rb_reg_search()` are replaced with calls to a new function, `rb_pat_search()`, which conditionally calls `rb_reg_search()` or `rb_str_index()`, depending on whether the pattern is a String. Calculating the substring that needs to be replaced is also different when the pattern is a String.\n## Impact\n\nRuntime of each method is dramatically reduced:\n\n``` ruby\nrequire 'benchmark'\n\nn = 4_000_000\nBenchmark.bm(7) do |bm|\n  str1 = \"123:456\"; str2 = \"123_456\";\n  colon = \":\"; underscore = \"_\"\n  # each benchmark runs the substring method twice so that the bang methods can\n  # perform the same number of substitutions to str1 each go around.\n  bm.report(\"sub\")   { n.times { str1.sub(colon, underscore);   str2.sub(underscore, colon) } }\n  bm.report(\"sub!\")  { n.times { str1.sub!(colon, underscore);  str1.sub!(underscore, colon) } }\n  bm.report(\"gsub\")  { n.times { str1.gsub(colon, underscore);  str2.gsub(underscore, colon) } }\n  bm.report(\"gsub!\") { n.times { str1.gsub!(colon, underscore); str1.gsub!(underscore, colon) } }\nend\n```\n\n```\n# trunk\n              user     system      total        real\nsub      40.450000   0.580000  41.030000 ( 41.209658)\nsub!     39.780000   0.580000  40.360000 ( 40.656789)\ngsub     58.500000   0.820000  59.320000 ( 59.603923)\ngsub!    59.400000   0.770000  60.170000 ( 60.435687)\n\n# this patch\n              user     system      total        real\nsub       3.060000   0.010000   3.070000 (  3.091920)\nsub!      2.380000   0.010000   2.390000 (  2.390769)\ngsub      7.130000   0.130000   7.260000 (  7.299139)\ngsub!     7.660000   0.150000   7.810000 (  7.846190)\n```\n\nWhen using a String pattern, runtime is reduced by 87% to 94%.\n## Incompatibilities\n\nThere is only one incompatibility that I am aware of: `$&` will not be set after using a sub method with a String pattern. (Subgroups (`$1`, ...) will not be available either, but weren't before, since String patterns are escaped before being used.)\n## The new test\n\nI was wrestling with a character-length vs. byte-length bug which didn't fail any of the existing gsub tests, but did fail a REXML test in an obscure way. This new test was helpful, but perhaps isn't necessary.\n## Future improvements\n\nOnly 3 more methods use the function, `get_pat()`, that creates a Regexp from the String pattern: `#split`, `#scan`, and `#match`. I think this fix could be applied to these as well.\n", "labels": [], "number": 579, "updated_at": "2014-06-18 14:07:13", "user": 103167, "closed_at": "2014-03-27 10:00:49", "id": 30249408, "title": "String#sub and siblings should not use regex when String pattern is passed", "url": "https://api.github.com/repos/ruby/ruby/issues/579", "created_at": "2014-03-26 20:41:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "CSV currently accepts `nil` as a data source, and treats it like an `IO`. Since it's not an `IO`, it blows up in the internals, sometimes much later.\n\nI noticed the issue when I accidentally passed `nil` into `CSV.parse`:\n\n```\nirb(main):001:0> CSV.parse(nil)\nNoMethodError: undefined method `close' for nil:NilClass\n        from /Users/peeja/.rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/csv.rb:1293:in `ensure in parse'\n        from /Users/peeja/.rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/csv.rb:1293:in `parse'\n        from (irb):1\n        from /Users/peeja/.rubies/ruby-2.0.0-p353/bin/irb:12:in `<main>'\n```\n\nIt took me a while to track down what was going on. This should provide a better message.\n", "labels": [], "number": 580, "updated_at": "2014-06-13 11:12:30", "user": 2407, "closed_at": "2014-06-05 06:14:45", "id": 30342856, "title": "CSV: Reject nil as a data source.", "url": "https://api.github.com/repos/ruby/ruby/issues/580", "created_at": "2014-03-27 21:15:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39680390", "text": "The build is failing on Travis in the `before_script`, for what looks like unrelated reasons. Would someone give me a hand?\n", "created_at": "2014-04-06 20:54:51", "user": 2407, "id": 39680390}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44108895", "text": "This needs approval from @jeg2\n", "created_at": "2014-05-25 01:28:09", "user": 277819, "id": 44108895}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44138219", "text": "I'm fine with this change. I'm currently on vacation without the SSH key needed to commit it. Could someone please apply it for me?  Thanks!\n", "created_at": "2014-05-25 15:58:46", "user": 5639, "id": 44138219}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44139424", "text": "@JEG2 no problem, i've committed it for you in 0aa197c\n", "created_at": "2014-05-25 16:44:35", "user": 277819, "id": 44139424}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44140279", "text": "Thanks, guys!\n", "created_at": "2014-05-25 17:18:58", "user": 2407, "id": 44140279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44152429", "text": "this pull request break our test-suites. see. http://chkbuild003.hsbt.org/chkbuild/ruby-trunk/log/20140526T000013Z.fail.html.gz\n\n@zzak @Peeja \n\nPlease fix broken tests.\n", "created_at": "2014-05-26 02:07:07", "user": 12301, "id": 44152429}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44162187", "text": "the failures seem fixed by r461234\n", "created_at": "2014-05-26 06:57:22", "user": 277819, "id": 44162187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "# super_module\n### allows a module to define and invoke class methods the same way a superclass does\n\nDocumentation by Annas Al Maleh (a.k.a. Andy Maleh)\n\nSuperModule allows defining and invoking class methods just like a superclass by doing so in the \nmodule definition body. This removes the need to delay the definition and invocation of class methods\nvia self.included(base)\n\nUsing SuperModule therefore facilitates writing correct mixin code that is easily and productively \nmaintainable by following the same familiar semantics of superclass code definition. \n\nSuperModule does support module dependencies by allowing a module to include other modules, even if\nthey depend on base class methods. This achieves better visibility and maintainability of module \ndependencies.\n\nTo use, simply include SuperModule at the top of a module definition body, and then follow it by \nincluding other module dependencies if needed, base class method invocations, base class method\ndefinitions, and instance method definitions.\n\nThe following serves as a nice example for the use of SuperModule:\n\n```\nrequire 'super_module'\n\nmodule UserIdentifiable\n  include SuperModule\n\n  belongs_to :user\n  validates :user_id, presence: true\n\n  def self.most_active_user\n    User.find_by_id(select('count(id) as head_count, user_id').group('user_id').order('count(id) desc').first.user_id)\n  end\n\n  def slug\n    \"#{self.class.name}_#{id}_user_#{user_id}\"\n  end\nend\n\nclass ClubParticipation < ActiveRecord::Base\n  include UserIdentifiable\nend\n\nclass CourseEnrollment < ActiveRecord::Base\n  include UserIdentifiable\nend\n\nmodule Accountable\n  include SuperModule\n  include UserIdentifiable\nend\n\nclass Activity < ActiveRecord::Base\n  include Accountable\nend\n\nCourseEnrollment.most_active_user\nClubParticipation.most_active_user\nActivity.last.slug\nClubParticipation.create(club_id: club.id, user_id: user.id).slug\nCourseEnrollment.new(course_id: course.id).valid?\n```\n## Notes\n\nSuperModule was designed to be used in the code definition of a module and must be included\nat the very top of the body definition before including any other modules\n\nAs with regular module inclusion in a base class, make sure any methods that the \"super module\"\n(module enhanced with SuperModule) depends on have been defined in the class or superclass\nabove (before) the inclusion of the \"super module\".\n\nAlso available as a separate project on GitHub: https://github.com/AndyObtiva/super_module\n", "labels": [], "number": 581, "updated_at": "2014-06-12 16:43:02", "user": 23052, "closed_at": "2014-04-02 13:15:15", "id": 30351983, "title": "Added super_module allows a module to define and invoke class methods like a superclass", "url": "https://api.github.com/repos/ruby/ruby/issues/581", "created_at": "2014-03-27 23:31:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38913913", "text": "This is awesome @AndyObtiva very useful and needed. Ty!\n", "created_at": "2014-03-28 12:32:16", "user": 13984, "id": 38913913}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/38969677", "text": "I think you should make this into a gem instead.\n", "created_at": "2014-03-28 21:24:40", "user": 9831, "id": 38969677}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39283580", "text": "Thanks for the feedback drbrain and marcandre. I ended up refactoring to the succinct \"class << base\" alternative. \n\ndrbrain, given that you provided feedback, I assume that after you posted you did notice my comment at the bottom saying this has already been rolled out as a separate project (i.e. Rubygem): \"Also available as a separate project on GitHub: https://github.com/AndyObtiva/super_module\". Here is a direct link to it in fact: https://rubygems.org/gems/super_module\n\nAs Ruby classes get bigger (like say more than 200 lines of code), and repeat behavior across several classes, it is common to identify a common trait in all these classes and extract it into a Mixin Module to ease maintainability and improve reuse. In the code example mentioned in the Pull Request description, an ActiveRecord validation and some behavior focused on a specific domain model trait was extracted to a Mixin Module called UserIdentifiable to make it easy to reuse and maintain separately from original models that contained it, shrinking any monolithic classes down in the process. Traditionally, in order to build such a Mixin Module, a Ruby programmer would have to remember when to use include vs extend to include instance vs class methods, and remember that to encapsulate any class method invocations in a Mixin Module that will be used via \"include\", they need to override the hook method included(base). That discouraged many beginner and even intermediate Ruby programmers from taking advantage of Modules to properly model traits that are easy to understand and maintain. After all, things went wrong if they did not know how to class_eval class behavior in a Module included(base) hook method, a relatively advanced programming technique that is considered meta-programming in Ruby. \n\nI am mentioning this to illustrate that Modules as Trait Mixins is a common domain modeling and aspect oriented programming use-case for writing maintainable domain code in Ruby, and yet it is painful to use them in the traditional fashion. Therefore, I believe it is worth giving people a native Trait Mixin option out of the box instead of leaving them to rely on a slew of error-prone complicated techniques that make using modules harder for Ruby beginners and intermediate programmers, or otherwise use sub-optimal library solutions like ActiveSupport::Concern that merely put lipstick on a pig's lips.\n\nThis also allows programmers to continue to think of Ruby code in Modules the same way they think about it in Classes where class method invocations go in the Module body, class method definitions go into class << self or be defined as self.method, and finally instance methods are just defined in the Module body. That in turn helps programmers stay more productive by not being distracted by Module vs Class differences as much.\n\nA work colleague of mine (Jim Ray) and I agree that perhaps naming SuperModule as Trait works better if included in Ruby. After all, representing Traits was the way we learned how to use Mixin Modules for domain modeling in projects, as recommended in David A Black's old book Ruby for Rails (and his newer incarnation of it, The Well Grounded Rubyist). It is also what Scala officially calls them (Traits). In David's book by the way, they are referred to as characteristics or capabilities. However, my colleague and I prefer the term \"Trait\" since it is shorter, clearer, and easier to understand. \n\nThat name might also encourage people to properly name Mixin Modules to represent Traits, therefore better emulating the domain they are dealing with. For example, Cacheable in a Trait. Cache is not a Trait and would not make a proper name by that standard. Cache is a better name for a Cache service class, which could be called from a Cacheable trait Mixin Module to add that behavior characteristic to a domain model class. In any case, people would still be free to name their modules whatever they like of course, but at least also have the support for including and invoking class behavior from a Mixin Module natively and effortlessly by simply including Trait on top in its body.\n\nI am open to considering other names as well if you are open to the idea, yet prefer a different name (e.g. Mixin or Concern. The latter could represent an official replacement for ActiveSupport::Concern though my colleague Jim despises that name as he does not feel it is representative enough of all uses of a Mixin Module. Trait seems to capture that more broadly)\n\nThanks again for the swift feedback, and I look forward to hearing back from you soon.\n\nAndy Maleh\n", "created_at": "2014-04-02 02:40:41", "user": 23052, "id": 39283580}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39380507", "text": "Since you've already released this is a gem then you should nominate it for inclusion in Ruby once it becomes popular.\n", "created_at": "2014-04-02 20:39:43", "user": 9831, "id": 39380507}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, the malloc_limit creeps up slowly on bigger heaps. This eliminates that by only increasing the limit if the malloc_increase is significantly larger than malloc_limit.\n", "labels": [], "number": 582, "updated_at": "2018-02-23 03:06:40", "user": 7, "closed_at": "None", "id": 30437805, "title": "Eliminate malloc_limit creepers", "url": "https://api.github.com/repos/ruby/ruby/issues/582", "created_at": "2014-03-29 05:27:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39520698", "text": "I guess the thing that confuses me is that we have \n\nRUBY_GC_MALLOC_LIMIT_MAX and RUBY_GC_OLDMALLOC_LIMIT_MAX  now ... the big bug seems to be that they were not respected properly. \n\nOnce respected as in @ko1 s patch, is the creeper protection needed ? \n", "created_at": "2014-04-04 00:23:27", "user": 5213, "id": 39520698}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39521147", "text": "I agree - couldn't this be resolved by using @ko1's patch and properly tuning `RUBY_GC_MALLOC_LIMIT_MAX` for the application?\n", "created_at": "2014-04-04 00:31:18", "user": 4303686, "id": 39521147}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39525373", "text": "The problem I have with @ko1's patch is that it basically forces a FULL GC every 32M (by default) worth of allocations. This means that the full GC runs more often than it probably needs to, eliminating the whole reason for having generations in the first place.\n", "created_at": "2014-04-04 02:02:30", "user": 7, "id": 39525373}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39525422", "text": "IMHO, the idea of a \"MAX\" value is wrong entirely. The system needs to be tuning it's behavior based on how the heap is used.\n", "created_at": "2014-04-04 02:03:28", "user": 7, "id": 39525422}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39525609", "text": "@evanphx that was always the intention of max there, remember where we came from ... in Ruby 2.0 GC MALLOC LIMIT was a measly 8MB. \n\nAgree we can eventually do better but I think just respecting the new max should be good enough to stop the majority of malloc creep pain out there. Which leave us _only_ with the memory doubling issue.\n\n32MB for Discourse is just enough not to be triggering malloc related GCs, though under Rails 3 minus a freedom patch or 2 it was not enough (probably 50-100MB) \n\n32MB max may be slightly low as a default. \n", "created_at": "2014-04-04 02:07:10", "user": 5213, "id": 39525609}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39526343", "text": "FWIW, less than 1% of Shopify's major GC's are triggered by breaching malloc limit.\n", "created_at": "2014-04-04 02:24:29", "user": 4303686, "id": 39526343}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39532924", "text": "@csfrancis With our without @ko1's latest patch? Before his latest patch, the limit is pushed so high you'll hit it less and less as time goes on.\n", "created_at": "2014-04-04 05:26:05", "user": 7, "id": 39532924}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39560505", "text": "We're on 2.1.1 with `RUBY_GC_MALLOC_LIMIT_MAX` set to 128MB. We're also using the gctools OOBGC, which may be helping us out too. Here's a timechart of `malloc_increase` over the past 4 hours from one of our production app servers (Unicorn):\n\n![image](https://cloud.githubusercontent.com/assets/4303686/2615210/3de6aaf8-bbf6-11e3-8d05-f8cf7ffaf617.png)\n", "created_at": "2014-04-04 12:42:55", "user": 4303686, "id": 39560505}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41966395", "text": "Memory bloat is a constant problem for our puma and sidekiq daemons.  Generally monit has to restart them every day or so.  We're on 2.1.1 with @SamSaffron's tunings.\n", "created_at": "2014-05-01 22:56:16", "user": 2911, "id": 41966395}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41974830", "text": "@mperham did you try @ko1's patch (its literally a 2 line change) also a https://github.com/ko1/gc_tracer dump will be a godsend debugging it. \n\nneed to figure out if its a malloc creep or heap bloat. \n", "created_at": "2014-05-02 01:25:11", "user": 5213, "id": 41974830}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41978599", "text": "No, I don't run production on anything but stable releases. \n\n> On May 1, 2014, at 18:25, Sam notifications@github.com wrote:\n> \n> @mperham did you try @ko1's patch (its literally a 2 line change) also a https://github.com/ko1/gc_tracer dump will be a godsend debugging it.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2014-05-02 02:32:04", "user": 2911, "id": 41978599}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41981303", "text": "Well you need to find out if this is malloc creep or heap bloat. \n\nOnly way to do that is by either running gc tracer or at least getting GC.stat from the process once memory creeps up. You can attach to it and get that using rbtrace if you include it. \n", "created_at": "2014-05-02 03:10:51", "user": 5213, "id": 41981303}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42025803", "text": "Another option is to use the gc logger in https://github.com/tmm1/gctools. This outputs the gc trigger for every gc to stderr.\n", "created_at": "2014-05-02 12:32:11", "user": 4303686, "id": 42025803}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "a missing 'of'\n", "labels": [], "number": 583, "updated_at": "2014-07-03 07:39:53", "user": 7378, "closed_at": "2014-04-03 06:04:24", "id": 30701342, "title": "fix minor typo in csv.rb docs", "url": "https://api.github.com/repos/ruby/ruby/issues/583", "created_at": "2014-04-02 16:05:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@charliesome /cc: @Sirupsen, @camilo, @arthurnn\n\nThis adds a few things:\n- Support for libunwind on Linux. There's no need to `#undef backtrace` on Linux because libunwind's global `backtrace` symbol will take precedence over glibc.\n- ~~If `USE_BACKTRACE_SYMBOLS_FD` is defined, MRI will use `backtrace_symbols_fd` rather than `backtrace_symbols` or `rb_dump_backtrace_with_lines`, which are both potentially unsafe when being called from a signal handler. The latter methods also allocate memory from the heap, which can also be unsafe in that context.~~\n- Always use `backtrace_symbols_fd` when attempting to dump a backtrace when `rb_print_backtrace` is called from a signal handler.\n- Dump machine registers on x64. In cases where core dumps are not being generated, it's still useful to know register contents.\n", "labels": [], "number": 584, "updated_at": "2018-02-23 03:06:41", "user": 4303686, "closed_at": "None", "id": 30784531, "title": "rb_vm_bugreport() improvements", "url": "https://api.github.com/repos/ruby/ruby/issues/584", "created_at": "2014-04-03 15:18:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39468209", "text": "It looks like the build is broken in trunk, which is also causing my branch to fail. Once it's fixed I'll rebase.\n", "created_at": "2014-04-03 15:51:03", "user": 4303686, "id": 39468209}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "I am using rails 4.1, which includes minitest 5.\nGetting this warning when running tests:\n\n``` ruby\nMiniTest::Unit::TestCase is now Minitest::Test. From /Users/arthurnn/.rbenv/versions/2.1.1/lib/ruby/2.1.0/test/unit/testcase.rb:8:in `<module:Unit>'\n```\n\nThis PR should fix the warning on test unit when using minitest 5+\nreview @zzak\n", "labels": [], "number": 585, "updated_at": "2014-07-03 03:30:01", "user": 833383, "closed_at": "2014-04-06 17:55:24", "id": 30791419, "title": "Remove WARN when using minitest5 and test unit", "url": "https://api.github.com/repos/ruby/ruby/issues/585", "created_at": "2014-04-03 16:32:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39529433", "text": "I don't think its that simple, we're discussing this in a ticket on the bug tracker: [Bug #9660](https://bugs.ruby-lang.org/issues/9660)\n", "created_at": "2014-04-04 03:47:33", "user": 277819, "id": 39529433}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39674968", "text": "Closing, please refer to the issue zzak mentions.\n", "created_at": "2014-04-06 17:55:24", "user": 33770, "id": 39674968}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39676170", "text": "Cool. Thanks\n\nOn Sunday, April 6, 2014, Marc-André Lafortune notifications@github.com\nwrote:\n\n> Closed #585 https://github.com/ruby/ruby/pull/585.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHubhttps://github.com/ruby/ruby/pull/585\n> .\n\n## \n\nArthur Nogueira Neves\nFollow me @arthurnn http://www.twitter.com/arthurnn89\n", "created_at": "2014-04-06 18:35:04", "user": 833383, "id": 39676170}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Thread::critical` was removed some time ago, and in truth this is just a global `Mutex` with a synchronize block.\n", "labels": [], "number": 589, "updated_at": "2014-06-21 13:58:48", "user": 48658, "closed_at": "2014-04-17 07:33:12", "id": 30917021, "title": "Update Thread::exclusive docs to for synchronize", "url": "https://api.github.com/repos/ruby/ruby/issues/589", "created_at": "2014-04-05 14:48:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39691638", "text": "It might be worth emphasising that even when a thread is inside this 'critical' section, other threads are still free to run as long as they don't try to also use `Thread.exclusive` - ie. it's just a convenience wrapper around a single mutex.\n", "created_at": "2014-04-07 02:27:35", "user": 179065, "id": 39691638}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39769577", "text": "@charliesome Updated. How does that look?\n", "created_at": "2014-04-07 19:00:03", "user": 48658, "id": 39769577}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/39807671", "text": "Seems legit to me, cc @zzak \n", "created_at": "2014-04-08 03:10:35", "user": 179065, "id": 39807671}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'd like to be able to scrape C headers for function signatures and struct definitions, and pass the text into the CParser methods with little to no preprocessing.\n", "labels": [], "number": 590, "updated_at": "2015-01-03 00:58:37", "user": 10137, "closed_at": "2015-01-03 00:58:37", "id": 31256631, "title": "Support for Fiddle::CParser to handle rich signatures including parameter names and function pointer types", "url": "https://api.github.com/repos/ruby/ruby/issues/590", "created_at": "2014-04-10 16:01:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44108918", "text": "This feature needs the @tenderlove's seal of approval\n", "created_at": "2014-05-25 01:30:16", "user": 277819, "id": 44108918}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44146344", "text": "Nice! As long as the tests pass, I'm :+1:\n", "created_at": "2014-05-25 21:43:20", "user": 3124, "id": 44146344}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44960589", "text": "Cool. I see the tests were run by Travis on commit 89cc06cc3ad3a3c7c4432fc2545899aab1cfbae6 but not on c13ad0353114480ec9ecfe044654a9545e98e3ff.\n", "created_at": "2014-06-03 12:56:58", "user": 10137, "id": 44960589}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There could be potential issues with leaking session ids between clients, using a timing attack. This patch doesn't guarantee constant time for `SSL_SESSION_cmp`, but at least makes it constant time if the `ssl_version` and `session_id_length` are equal, which would make certain types of attacks more difficult.\n\nFor example, if one was attempting to determine the number of active SSL sessions on a server, this would largely thwart such an attacker.\n\nTo be clear: I do not believe this is a significant security issue, but rather a place where we might be able to more closely match a developer's expectations of the function.\n\nFor reference, see:\n- http://seclists.org/fulldisclosure/2014/Apr/117\n- https://news.ycombinator.com/item?id=7570043\n", "labels": [], "number": 591, "updated_at": "2015-01-03 01:19:05", "user": 180404, "closed_at": "2015-01-03 01:19:05", "id": 31292680, "title": "Make `SSL_SESSION_cmp` use `CRYPTO_memcmp`", "url": "https://api.github.com/repos/ruby/ruby/issues/591", "created_at": "2014-04-10 23:59:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44083159", "text": "@emboss, how do you think?\n", "created_at": "2014-05-24 10:15:04", "user": 16700, "id": 44083159}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44134986", "text": "@nobu @PiPeep I'm pretty sure it doesn't hurt to use a constant time comparison in this place - better to play safe than sorry. Agreed!\n", "created_at": "2014-05-25 14:43:35", "user": 486012, "id": 44134986}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We've encountered a problem in Shopify production where unnecessary controller context is being retained by the [`sym_proc_cache`](https://github.com/ruby/ruby/blob/f2606d6250d5f4b2e7d02b97567b74de6435864a/string.c#L8485-L8513). The problem is the creation of the proc from the symbol is in the context of a controller - as a result, when the proc is cached in `sym_proc_cache`, the controller and all of its context is being cached along with it. This causes memory to be unnecessarily retained beyond the lifetime of a request.\n\nOur proposed solution is to not include local variables in the proc's environment context. As far as I can tell, it should not be possible to access local variables from a Proc when using `to_proc`.\n", "labels": [], "number": 592, "updated_at": "2014-06-29 18:55:26", "user": 4303686, "closed_at": "2014-04-12 13:12:21", "id": 31324706, "title": "Don't include locals in envvar when calling to_proc", "url": "https://api.github.com/repos/ruby/ruby/issues/592", "created_at": "2014-04-11 12:50:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Git Repo URL is not actual linked in overview.\nI think not github but bitbucket is right. (https://bitbucket.org/xi/libyaml)\n", "labels": [], "number": 593, "updated_at": "2014-07-13 15:19:07", "user": 121045, "closed_at": "2014-04-13 01:00:14", "id": 31391338, "title": "[DOC] Fix a dead link in Psych", "url": "https://api.github.com/repos/ruby/ruby/issues/593", "created_at": "2014-04-12 21:12:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add Matrix#adjugate to make a matrix adjugate.\n\nAdjugate is really important operator to handle matrix (especially Exploring Data with ruby)\n\n``` ruby:\n# Property\n\n* Any n-th matrix  `m`(object of Matrix class) Satisfy the following conditions\n\nMatrix.identity(n) == (m.adjugate * m) / m.det\n\n# Differential vector or matrix\nLet A = (a(i, j)) is n-th matrix, A(i, j) is adjugate matrix excluding the j and column i row A.\n\ndef. ∂det(A)/∂a(i,j) = (-1) ** (i + j) * det(A(i, j))\n```\n\nSome people regards adjugate matrix as Hermitian adjoint.\n\nI regard adjuate matrix as transpose of the cofactor matrix by  referencing http://en.wikipedia.org/wiki/Adjugate_matrix.\n", "labels": [], "number": 594, "updated_at": "2014-07-18 01:25:48", "user": 5266933, "closed_at": "2014-07-18 01:25:48", "id": 31408047, "title": "Add #adjugate method to matrix class", "url": "https://api.github.com/repos/ruby/ruby/issues/594", "created_at": "2014-04-13 15:25:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44108926", "text": "@marcandre ping!\n", "created_at": "2014-05-25 01:30:38", "user": 277819, "id": 44108926}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44586535", "text": "Sorry, not much time to look at this as I'm travelling.\nI understand the request for `collect_with_index` but my first reaction is to try to find a better solution, even though none comes to mind easily.\n", "created_at": "2014-05-29 21:19:03", "user": 33770, "id": 44586535}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44590487", "text": "Any reason you can't use `each_with_index.map`?\n", "created_at": "2014-05-29 21:54:07", "user": 179065, "id": 44590487}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44591085", "text": "@charliesome, the thing is, `Matrix#map` returns a `Matrix`, but `Matrix.diagonal(1,2).each_with_index.map{42}` returns an `Array`...\nAnd `Matrix.diagonal(1,2).map.with_index{|elem, (row, column)|}` doesn't work as it gives out the \"linear\" indices, not the `(row, column)` pair that's wanted.\n", "created_at": "2014-05-29 22:00:30", "user": 33770, "id": 44591085}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44622665", "text": "@gogotanaka I'm :+1: for `adjucate`, with the following points:\n1) We could use `self.class.build` instead of `map_with_index`\n2) I'm doubtful about abbreviation `adj`. Could be confuse with `adjoint`, which has less precise meaning. I think it's best to remove it altogether.\n3) I notice the use of `rand` in the tests, this could randomly fail if the matrix generated is singular, right?\n\nI'm still thinking about `map_with_index`. I understand it is inconvenient to do that, but I find it really an ugly solution. Maybe  `build` could accept a `Matrix` instead of a `row` and `column` arguments.\n\nI'd say let's focus on `adjucate` for now; I'd like more concrete needs for `map_with_index`.\n", "created_at": "2014-05-30 07:32:05", "user": 33770, "id": 44622665}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48560001", "text": "@marcandre Sorry for the late reply. Even though it might be something infelicity to say here,  I take a leave of absence from my university, and I am traveling too. This is because I love programing(especially Ruby).  If you don't mind, how about we go for coffee?\n\nSorry, It is infelicity here. By the way,  thank for nice comments! \n\n> 1) We could use self.class.build instead of map_with_index\n\nI thought :arrow_down: is really beautiful.\n\n```\ncollect_with_index do |_, row, column|\n  cofactor(column, row)\nend\n```\n\nBut now, as you said, `map_with_index` is useful for thinking about only adjucate.\n\nSo I will change it.\n\nBut I really want to brush up `Matrix` class, this is just first step.\n\nSo when `map_with_index` is needed, I implement again.\n\n> 2) I'm doubtful about abbreviation adj. Could be confuse with adjoint, which has less precise meaning. I think it's best to remove it altogether.\n\nHmm, I think adj operator always means adjuate in the math, but I see your point. Ruby should be not for mathematician but rubyist. I will change.\n\n> 3) I notice the use of rand in the tests, this could randomly fail if the matrix generated is singular, right?\n\nIt's really my mistake.. sorry. ok, I will change.\n", "created_at": "2014-07-10 02:52:58", "user": 5266933, "id": 48560001}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48828121", "text": "@marcandre I have fixed all of what you said! Please check my code, when you have a time.\n", "created_at": "2014-07-13 00:39:36", "user": 5266933, "id": 48828121}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49386397", "text": "move to https://bugs.ruby-lang.org/issues/10056\n", "created_at": "2014-07-18 01:25:46", "user": 5266933, "id": 49386397}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fix typo in comment of template/opt_sc.inc.tmpl, template/optinsn.inc.tmpl and template/optunifs.inc.tmpl \n", "labels": [], "number": 595, "updated_at": "2014-06-21 07:13:44", "user": 73532, "closed_at": "2014-04-17 06:57:24", "id": 31467704, "title": "Fix typo in comment of opt_sc.inc.tmpl, optinsn.inc.tmpl, optunifs.inc.tmpl", "url": "https://api.github.com/repos/ruby/ruby/issues/595", "created_at": "2014-04-14 14:48:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently `#each_slice` creates a new Array each time it yields, to hold the elements (`each_slice_i`). However, if the block given to `#each_slice` immediately separates the elements into multiple block arguments, then that new Array is immediately discarded, when it could have been used for every yield from `#each_slice`. Take these two examples:\n\n``` ruby\narrays = []\n(1..10).each_slice(3) { |a| arrays << a }\n\n(1..10).each_slice(3) { |a,b,c| sum = a+b+c }\n```\n\nIn the first example, the yielded Array _is_ `a`, so we can't reuse the allocated Array for the next yield (we must create a new one). In the second example, however, Ruby immediately separates the elements of the yielded Array into `a`, `b`, and `c`, discarding the Array instance. This can be made faster. (Everything above is true for `#each_cons` as well.)\n#### The patch\n\nThis patch uses `rb_block_arity()` to test how many arguments the given block can take, and only creates new Arrays if the arity is 1 or -1 (this should mean that the block either takes _exactly 1_ argument (no separation), _only a splat_ argument (no separation), or is a lambda with 0 required arguments (unknown separation) ([#arity docs](http://www.ruby-doc.org/core-2.1.1/Proc.html#method-i-arity)). This performance trick is already used in [Hash#each_pair](https://github.com/ruby/ruby/blob/trunk/hash.c#L1611):\n\n``` ruby\nif (rb_block_arity() > 1)\n    rb_hash_foreach(hash, each_pair_i_fast, 0);\nelse\n    rb_hash_foreach(hash, each_pair_i, 0);\n```\n#### Speedup\n\nIn a micro-benchmark, the speedup is decent, approximately 30% for arg-separating blocks. Here are some numbers for `#each_cons`. Scores are seconds of user-time (smaller is better) running variants of `200_000.times { (1..100).each_cons(3) { |a,b,c| sum = a+b+c } }`. Some accept 1 arg, and some accept 3 args. Some used a block, some a proc, and one used a lambda:\n\n```\nyield recipient  trunk  patch\nblock (1 arg)     5.40   4.53\nblock (3 args)    4.00   3.07\nproc (1 arg)      4.77   4.52\nproc (3 args)     4.06   3.04\nlambda (3 args)   3.86   2.84\n```\n", "labels": [], "number": 596, "updated_at": "2014-06-30 06:34:29", "user": 103167, "closed_at": "2014-04-15 03:54:33", "id": 31513653, "title": "Enumerable#each_slice and #each_cons should use fewer Arrays", "url": "https://api.github.com/repos/ruby/ruby/issues/596", "created_at": "2014-04-14 23:21:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/40594384", "text": "I found an incompatibility.\n\n```\n$ ruby -ve 'ary = []; (1..10).each_slice(3, &lambda {|a, *| ary << a }); p ary'\nruby 2.1.0p0 (2013-12-25 revision 44422) [x86_64-linux]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n$ ./miniruby -ve 'ary = []; (1..10).each_slice(3, &lambda {|a, *| ary << a }); p ary'\nruby 2.2.0dev (2014-04-16 trunk 45599) [x86_64-linux]\n[[10], [10], [10], [10]]\n```\n", "created_at": "2014-04-16 12:49:23", "user": 21557, "id": 40594384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/40810006", "text": "> This patch uses rb_block_arity() to test how many arguments the given block can take, and only creates new Arrays if the arity is 1 or -1 (this should mean that the block either takes exactly 1 argument (no separation), only a splat argument (no separation), or is a lambda with 0 required arguments (unknown separation) (#arity docs).\n\nOnly cases of strictly positive arity can likely be optimized directly in such a way.\n`arity = -n-1 with n > 0` means `n` mandatory arguments, and some optional args (mame's example has -2 arity).\narity is not enough for some complex cases like `lambda { |a,b=2,c| }.arity => -3`\n", "created_at": "2014-04-18 13:54:40", "user": 168854, "id": 40810006}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a patch for Net::HTTP standard library.\n\nI ran into an issue when DNS resolution failed because of poor network connection. In this case, even though I had Net::HTTP open_timeout set it didn't stop the operation but kept hanging until some low level timeout (30s) stopped it. I was seeing error messages like this:\n\n```\ngetaddrinfo: nodename nor servname provided, or not known for host ******:80\n```\n\nI traced it to `lib/net/http.rb:880` where it calls `TCPSocket.open` within `Timeout.timeout` block. I dived into the C code for TCPSocket and eventually found a syscall to `getaddrinfo`. This is a blocking syscall which cannot be handled by Ruby timeout mechanism.\n\nI'm not sure why this issue hasn't been reported before. I think `open_timeout` should halt the execution no matter if there is an issue with DNS or opening network connection to the host.\n\nI looked for people experiencing similar issues and found [this thread](https://www.ruby-forum.com/topic/195798). I took the idea for my patch from there. This small patch calls Ruby DNS resolver first before passing connection address to TCPSocket. Ruby DNS resolver works nice with timeouts.\n\nAs far as I can see it shouldn't introduce any problems or significant performance degradation. Please review and give your feedback.\n\nFor everybody else experiencing this issue as a workaround I suggest to use `Resolv.getaddress(hostname)` inside `Timeout.timeout` block before passing connection address to Net::HTTP. If this patch gets accepted it will make Net::HTTP open_timeout more reliable for everyone.\n", "labels": [], "number": 597, "updated_at": "2014-12-13 16:25:42", "user": 91422, "closed_at": "2014-04-15 17:03:51", "id": 31563968, "title": "Use Ruby DNS resolver to handle DNS timeout in Net::HTTP", "url": "https://api.github.com/repos/ruby/ruby/issues/597", "created_at": "2014-04-15 15:32:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/40507119", "text": "If this is an issue in your environment you should `require 'resolv-replace'`\n", "created_at": "2014-04-15 17:03:51", "user": 9831, "id": 40507119}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/41309772", "text": "Makes sense, I didn't find anything about \"resolv-replace\". Thanks.\n", "created_at": "2014-04-24 17:41:07", "user": 91422, "id": 41309772}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/66881708", "text": ":thumbsup:\n", "created_at": "2014-12-13 16:25:42", "user": 1301844, "id": 66881708}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've addded tests that was nonexistent test code of flat_map.\n", "labels": [], "number": 598, "updated_at": "2014-07-18 01:56:06", "user": 22629, "closed_at": "2014-04-26 02:57:47", "id": 32279478, "title": "test/ruby/test_enum.rb: Add flat_map tests", "url": "https://api.github.com/repos/ruby/ruby/issues/598", "created_at": "2014-04-26 02:24:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "An issue in rails (activerecord) showed up which indicates that there\nare at least some IPAddresses which continue to use the unmasked piece\nof the address.\n\nhttps://github.com/rails/rails/issues/14857\n\nThis is apparently the difference between the \"cidr\" data type and the\n\"inet\" datatype. This change exposes an api so that the correct address\ntype can be used.\n", "labels": [], "number": 599, "updated_at": "2018-02-23 03:06:43", "user": 766985, "closed_at": "None", "id": 32295504, "title": "Add access to raw host in ipaddr module.", "url": "https://api.github.com/repos/ruby/ruby/issues/599", "created_at": "2014-04-26 18:51:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42618844", "text": "@knu what do you think?\n", "created_at": "2014-05-08 23:30:45", "user": 766985, "id": 42618844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42629971", "text": "Have you looked at the ipaddress gem, which you might want to migrate to?\n\nIt has been a candidate for a replacement for ipaddr in the standard library, and if we need to extend ipaddr I want to make sure API compatibility/similarity with ipaddress is taken into account.\n", "created_at": "2014-05-09 03:19:36", "user": 10236, "id": 42629971}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This issue was originally reported against JRuby here: https://github.com/jruby/jruby/issues/1647\n\nI can reproduce it with MRI 1.9.3-p484 and MRI 2.1.1-p76.\n\n``` Ruby\nrequire 'tmpdir'\nrequire 'find'\nrequire 'set'\nrequire 'rspec'\n\ndescribe 'Dir.entries' do\n  it 'follows symlinks' do\n    Dir.mktmpdir('jruby-file-find-test') do |fn|\n      FileUtils.cd(fn) do\n        # Create real dir with file.\n        FileUtils.mkdir_p('dir')\n        FileUtils.touch('dir/foo.txt')\n\n        # Create symlink.\n        File.symlink('dir', 'dir-link')\n\n        # Find files in symlinked dir.\n        filenames = Set.new\n        Dir.entries('dir-link/') do |entry|\n          filenames << entry\n        end\n\n        expected_filenames = Set.new(['dir-link/', 'dir-link/foo.txt'])\n        filenames.should == expected_filenames\n      end\n    end\n  end\nend\n```\n\nThe above test fails, but should pass.\n", "labels": [], "number": 600, "updated_at": "2014-07-09 05:33:41", "user": 433268, "closed_at": "2014-04-26 23:30:52", "id": 32300806, "title": "Follow symlinks with dir dot entries", "url": "https://api.github.com/repos/ruby/ruby/issues/600", "created_at": "2014-04-26 23:29:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This issue was originally reported against JRuby here: https://github.com/jruby/jruby/issues/1647\n\nI can reproduce it with MRI 1.9.3-p484 and MRI 2.1.1-p76.\n\n``` Ruby\nrequire 'tmpdir'\nrequire 'find'\nrequire 'set'\nrequire 'minitest/autorun'\n\nclass FindInSymlinkedDirectoryTest < Minitest::Test\n\n  def test_find_in_symlink\n    Dir.mktmpdir('jruby-file-find-test') do |fn|\n      FileUtils.cd(fn) do\n        # Create real dir with file\n        FileUtils.mkdir_p('dir')\n        File.write('dir/foo.txt', 'Hello world!')\n\n        # Create symlink\n        File.symlink('dir', 'dir-link')\n\n        # Find files in symlinked dir\n        filenames = Set.new\n        Find.find('dir-link/') do |fn|\n          filenames << fn\n        end\n\n        expected_filenames = Set.new(['dir-link/', 'dir-link/foo.txt'])\n        assert_equal expected_filenames, filenames\n      end\n    end\n  end\n\nend\n```\n\nThe above test _should_ pass.\nInstead, this is the output:\n\n``` bash\nF\n\nFailures:\n\n  1) Dir.entries follows symlinks\n     Failure/Error: filenames.should == expected_filenames\n       expected: #<Set: {\"dir-link/\", \"dir-link/foo.txt\"}>\n            got: #<Set: {}> (using ==)\n       Diff:\n       @@ -1,2 +1,2 @@\n       -#<Set: {\"dir-link/\", \"dir-link/foo.txt\"}>\n       +#<Set: {}>\n     # ./dir_entries.rb:24:in `block (4 levels) in <top (required)>'\n     # ./dir_entries.rb:9:in `block (3 levels) in <top (required)>'\n     # ./dir_entries.rb:8:in `block (2 levels) in <top (required)>'\n\nFinished in 0.00124 seconds\n1 example, 1 failure\n\nFailed examples:\n\nrspec ./dir_entries.rb:7 # Dir.entries follows symlinks\n```\n", "labels": [], "number": 601, "updated_at": "2014-04-29 15:55:17", "user": 433268, "closed_at": "2014-04-26 23:40:16", "id": 32300839, "title": "Follow symlinks.", "url": "https://api.github.com/repos/ruby/ruby/issues/601", "created_at": "2014-04-26 23:32:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add support for encryption/decryption in sspi auth using secur32.dll\n", "labels": [], "number": 602, "updated_at": "2015-03-16 05:24:30", "user": 2116373, "closed_at": "2015-03-16 05:24:30", "id": 32331273, "title": "add support for encryption/decryption in sspi auth using secur32.dll", "url": "https://api.github.com/repos/ruby/ruby/issues/602", "created_at": "2014-04-28 04:45:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44108965", "text": "I'm unfamiliar with win32 api' but this could use tests either way. Two other questions come up:\n- Why 1.9.3 branch?\n- Have you considered making this a gem?\n", "created_at": "2014-05-25 01:33:21", "user": 277819, "id": 44108965}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44170108", "text": "We needed this fix in 1.9.3 version but yeah 2.0 will also be useful. Currently we are trying to workaround using a separate gem, but this is something that will be useful for others as well. Will look into writing tests for this and also try to have a PR on latest branch.\n", "created_at": "2014-05-26 08:55:55", "user": 2116373, "id": 44170108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81427011", "text": "Ruby 1.9.3 is EOL at 2015/02/23. If you need to apply this patch into trunk, Please reopen this.\n", "created_at": "2015-03-16 05:24:30", "user": 12301, "id": 81427011}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 603, "updated_at": "2014-06-18 21:46:06", "user": 3119321, "closed_at": "2014-04-28 15:23:06", "id": 32356946, "title": "Small fix on spelling ", "url": "https://api.github.com/repos/ruby/ruby/issues/603", "created_at": "2014-04-28 13:02:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Also use fully qualified commands in examples. i.e. `Fileutils.rm` instead of `rm`\n", "labels": [], "number": 604, "updated_at": "2014-06-27 22:25:24", "user": 59744, "closed_at": "2014-05-08 18:33:55", "id": 32396411, "title": "docs - show fileutils require at top", "url": "https://api.github.com/repos/ruby/ruby/issues/604", "created_at": "2014-04-28 20:39:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42587477", "text": "merged by r45880. thanks.\n", "created_at": "2014-05-08 18:33:55", "user": 37002, "id": 42587477}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42590692", "text": "thanks @ayumin !\n", "created_at": "2014-05-08 18:57:15", "user": 59744, "id": 42590692}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "decrement highbound on is_pointer_to_heap's b-search more efficiently.\n", "labels": [], "number": 605, "updated_at": "2014-04-29 21:22:15", "user": 439933, "closed_at": "2014-04-29 21:22:12", "id": 32485620, "title": "decrement highbound on is_pointer_to_heap b-search more efficiently", "url": "https://api.github.com/repos/ruby/ruby/issues/605", "created_at": "2014-04-29 21:12:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Change existing note on whitespace into a bullet point\n- Add info about escaping literal whitespace: `\\`\n- Add info about using character classes with whitespace: `[ ]`\n", "labels": [], "number": 606, "updated_at": "2014-06-22 07:22:46", "user": 92831, "closed_at": "2014-05-25 01:37:23", "id": 32752444, "title": "Improve docs on whitespace with Regexp::EXTENDED", "url": "https://api.github.com/repos/ruby/ruby/issues/606", "created_at": "2014-05-03 18:36:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43021558", "text": "@zzak When you get the chance, could you have a look for this. I'm happy to amend as needed.\n", "created_at": "2014-05-13 22:29:21", "user": 92831, "id": 43021558}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44109028", "text": "@allolex Thanks!\n", "created_at": "2014-05-25 01:38:20", "user": 277819, "id": 44109028}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current code doesn't correctly stop handling requests on keep-alive connections if the client keeps sending requests quickly. This is because the existing check for `@status != :Running` only kicks in if the initial `IO.select()` returns with a timeout.\n\nAlso handle `Errno::ENOTSOCK`, which is what `IO.select()` raises on Windows due to `@listeners` becoming empty during shutdown.\n", "labels": [], "number": 607, "updated_at": "2014-06-12 08:22:25", "user": 794414, "closed_at": "2014-05-08 01:20:46", "id": 32864850, "title": "WEBrick - Avoid hang during shutdown due to active keep-alive connections", "url": "https://api.github.com/repos/ruby/ruby/issues/607", "created_at": "2014-05-06 04:02:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42279613", "text": "Couldn't you make a test?\n", "created_at": "2014-05-06 08:51:33", "user": 16700, "id": 42279613}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42499577", "text": "I've added a test now and tidied up the logic so that `@status` is checked again after `IO.select` returns (otherwise the server will handle the first keep-alive request after shutdown when it might just as well have rejected it).\n", "created_at": "2014-05-08 00:27:52", "user": 794414, "id": 42499577}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- eval.c (setup_exception): set backtrace in system stack error\n  other than the pre-allocated sysstack_error.  [Feature #6216]\n- proc.c (Init_Proc): freeze the pre-allocated sysstack_error.\n- vm_insnhelper.c (vm_stackoverflow): raise new instance for each\n  times without calling any methods to keep the backtrace with no\n  further stack overflow.\n", "labels": [], "number": 608, "updated_at": "2014-06-23 02:41:37", "user": 16700, "closed_at": "2014-05-11 03:23:56", "id": 32878608, "title": "Backtrace for SystemStackError", "url": "https://api.github.com/repos/ruby/ruby/issues/608", "created_at": "2014-05-06 09:51:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "allow optional comma between alias arguments.\n", "labels": [], "number": 609, "updated_at": "2014-06-12 09:13:29", "user": 16700, "closed_at": "2014-05-09 02:11:32", "id": 32958111, "title": "Feature #6074 optional comma in alias arguments", "url": "https://api.github.com/repos/ruby/ruby/issues/609", "created_at": "2014-05-07 06:13:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42393309", "text": ":+1: Hooray\n", "created_at": "2014-05-07 06:20:45", "user": 920053, "id": 42393309}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42548586", "text": ":+1:\n", "created_at": "2014-05-08 13:21:08", "user": 158883, "id": 42548586}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/42627335", "text": "https://bugs.ruby-lang.org/issues/6074#note-16\n", "created_at": "2014-05-09 02:11:32", "user": 16700, "id": 42627335}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 610, "updated_at": "2014-06-17 16:04:20", "user": 5466070, "closed_at": "2014-05-24 21:35:27", "id": 33126391, "title": "Clarify default argument for Array.new", "url": "https://api.github.com/repos/ruby/ruby/issues/610", "created_at": "2014-05-08 21:38:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44100285", "text": "@Elffers Thanks for the patch! <3\n", "created_at": "2014-05-24 21:30:57", "user": 277819, "id": 44100285}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 611, "updated_at": "2014-05-10 16:15:37", "user": 16700, "closed_at": "2014-05-10 16:15:37", "id": 33240952, "title": "Bug#9820 kill by ignored signal", "url": "https://api.github.com/repos/ruby/ruby/issues/611", "created_at": "2014-05-10 15:58:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Copy example from `shuffle` to `shuffle!`.\n- Show the result after `shuffle!` and `shuffle`.\n- Copy `rng` argument example from `shuffle` to `shuffle!`.\n", "labels": [], "number": 612, "updated_at": "2014-07-05 21:52:18", "user": 1000669, "closed_at": "2014-05-24 13:40:48", "id": 33369493, "title": "* array.c [DOC] Add more documents to shuffle! and shuffle.", "url": "https://api.github.com/repos/ruby/ruby/issues/612", "created_at": "2014-05-13 05:21:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44089202", "text": "Thanks @hsbt.\n", "created_at": "2014-05-24 14:45:48", "user": 1000669, "id": 44089202}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Support for 1.9+ hash syntax, currently `capitalize` only accept as argument a string.\n", "labels": [], "number": 613, "updated_at": "2014-05-19 05:24:10", "user": 1000404, "closed_at": "2014-05-19 05:24:10", "id": 33439413, "title": "support for symbols.", "url": "https://api.github.com/repos/ruby/ruby/issues/613", "created_at": "2014-05-13 21:11:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43030668", "text": "In what case you need to pass a symbol?\n", "created_at": "2014-05-14 00:42:35", "user": 16700, "id": 43030668}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43033642", "text": "In the case we pass symbols within the hash to `initialize_http_header`\nfor example this test would fail:\n\n``` ruby\nrequire 'net/http'\nrequire 'test/unit'\n\nclass HTTPHeaderTest < Test::Unit::TestCase\n\n  class C\n    include Net::HTTPHeader\n    def initialize\n      initialize_http_header({})\n    end\n    attr_accessor :body\n  end\n\n  def setup\n    @c = C.new\n  end\n\n  def test_each_capitalized_hash\n    @c[:Authorization] = ['token']\n    @c.each_capitalized do |k,v|\n      assert_equal 'Authorization', k\n      assert_equal 'token', v\n    end\n  end\nend\n```\n\n```\n1) Error:\ntest_each_capitalized_hash(HTTPHeaderTest):\nNoMethodError: undefined method `split' for :authorization:Symbol\n    /Users/chris/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/net/http/header.rb:172:in `capitalize'\n    /Users/chris/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/net/http/header.rb:165:in `block in each_capitalized'\n    /Users/chris/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/net/http/header.rb:164:in `each'\n    /Users/chris/.rvm/rubies/ruby-2.0.0-p353/lib/ruby/2.0.0/net/http/header.rb:164:in `each_capitalized'\n```\n", "created_at": "2014-05-14 01:39:44", "user": 1000404, "id": 43033642}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43039523", "text": "I'm afraid that `HTTPHeader`'s keys must be strings.\n", "created_at": "2014-05-14 03:47:56", "user": 16700, "id": 43039523}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43090517", "text": "If that is the case, we must keep passing strings, thanks for your time.\n", "created_at": "2014-05-14 14:52:20", "user": 1000404, "id": 43090517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43090786", "text": "@nobu Would it be complicated to allow symbols?\n", "created_at": "2014-05-14 14:54:09", "user": 33770, "id": 43090786}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43203097", "text": "Just I don't think it makes sense.\n", "created_at": "2014-05-15 12:30:58", "user": 16700, "id": 43203097}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43466990", "text": "Just a note: \"1.9+ hash syntax\" is not concerned with this change at all; you could pass a symbol in older versions.\n", "created_at": "2014-05-19 05:24:09", "user": 16700, "id": 43466990}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 614, "updated_at": "2014-05-17 04:41:44", "user": 1078126, "closed_at": "2014-05-17 04:30:40", "id": 33722765, "title": "Replace tab with spaces in range.c", "url": "https://api.github.com/repos/ruby/ruby/issues/614", "created_at": "2014-05-17 03:56:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43397405", "text": "Why expanding?\n", "created_at": "2014-05-17 04:30:40", "user": 16700, "id": 43397405}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43397447", "text": "Per [coding style](https://bugs.ruby-lang.org/projects/ruby/wiki/DeveloperHowto) tabs are correct\n", "created_at": "2014-05-17 04:33:18", "user": 9831, "id": 43397447}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/43397520", "text": "Thank you for telling me coding style.\n", "created_at": "2014-05-17 04:38:11", "user": 1078126, "id": 43397520}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ARGF.lines` has been deprecated in favor of `ARGF.each_line`\n", "labels": [], "number": 615, "updated_at": "2014-06-27 11:36:18", "user": 828240, "closed_at": "2014-05-18 03:16:30", "id": 33741752, "title": "* io.c: [DOC] Update ARGF documentation examples", "url": "https://api.github.com/repos/ruby/ruby/issues/615", "created_at": "2014-05-17 23:22:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- fix SMTP dot-stuffing for messages not ending with a new-line\n\nWhen a message body ends with just a \".\" and no new-line Ruby does not dot-stuff correctly.  The remaining butter (after the last new-line) also needs to be dot-stuffed properly to avoid SMTP errors.\n\nThis includes a patch as well as passing test.\n\nReference:\n- https://bugs.ruby-lang.org/issues/9627\n- https://github.com/mikel/mail/pull/683\n", "labels": [], "number": 616, "updated_at": "2014-06-18 13:28:10", "user": 6473, "closed_at": "2014-05-23 12:37:57", "id": 34115146, "title": "net/protocol.rb: fix SMTP dot stuffing", "url": "https://api.github.com/repos/ruby/ruby/issues/616", "created_at": "2014-05-22 19:45:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 617, "updated_at": "2014-06-26 12:13:36", "user": 5356517, "closed_at": "2014-05-24 06:06:21", "id": 34225788, "title": "Insert a break after the method return value.", "url": "https://api.github.com/repos/ruby/ruby/issues/617", "created_at": "2014-05-24 05:06:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 618, "updated_at": "2014-06-29 11:21:27", "user": 5356517, "closed_at": "2014-05-26 15:05:20", "id": 34309970, "title": "fix typo.", "url": "https://api.github.com/repos/ruby/ruby/issues/618", "created_at": "2014-05-26 14:05:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The source shows that `#result` delegates to `Kernel.eval`.  The\ndocumentation for `Kernel.eval` says:\n\n>  Evaluates the Ruby expression(s) in string. If binding is given, which\n>  must be a Binding object...\n\nFurthermore, I demonstrated that `#result` does not accept a proc by\nswitching the example in the documentation to use a proc:\n\n``` ruby\nrequire \"erb\"\n\nclass Listings\n  PRODUCT = { :name => \"Chicken Fried Steak\",\n              :desc => \"A well messages pattie, breaded and fried.\",\n              :cost => 9.95 }\n\n  attr_reader :product, :price\n\n  def initialize( product = \"\", price = \"\" )\n    @product = product\n    @price = price\n  end\n\n  def build\n    # b = binding\n    b = proc {}\n    # create and run templates, filling member data variables\n    ERB.new(<<-'END_PRODUCT'.gsub(/^\\s+/, \"\"), 0, \"\", \"@product\").result b\n      <%= PRODUCT[:name] %>\n      <%= PRODUCT[:desc] %>\n    END_PRODUCT\n    ERB.new(<<-'END_PRICE'.gsub(/^\\s+/, \"\"), 0, \"\", \"@price\").result b\n      <%= PRODUCT[:name] %> -- <%= PRODUCT[:cost] %>\n      <%= PRODUCT[:desc] %>\n    END_PRICE\n  end\nend\n\nlistings = Listings.new\nlistings.build\n\nputs listings.product + \"\\n\" + listings.price\n```\n\nThis outputs:\n\n```\nruby-2.1.1/lib/ruby/2.1.0/erb.rb:847:in `eval': wrong argument type proc (expected binding) (TypeError)\n    from ruby-2.1.1/lib/ruby/2.1.0/erb.rb:847:in `block in result'\n    from ruby-2.1.1/lib/ruby/2.1.0/erb.rb:848:in `call'\n    from ruby-2.1.1/lib/ruby/2.1.0/erb.rb:848:in `result'\n    from -:21:in `build'\n    from -:34:in `block in <main>'\n    from -:37:in `call'\n    from -:37:in `<main>'\n```\n", "labels": [], "number": 619, "updated_at": "2014-06-12 17:18:29", "user": 193421, "closed_at": "2014-05-30 01:23:57", "id": 34527574, "title": "ERB#result does not accept a proc.", "url": "https://api.github.com/repos/ruby/ruby/issues/619", "created_at": "2014-05-29 04:14:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When the docs for `lib/English.rb` were first written [1](https://github.com/ruby/ruby/commit/f8c7b41165042b3d398a6a237aac9207e2856aea#diff-2c060ee58c8d1169e19a88d41b3f0259L3),\n`$LOADED_FEATURES` was an alias for `$\"` defined in `lib/English.rb`.\n\nCurrently, however, `$LOADED_FEATURES` is defined in `load.c` along with\n`$\"` itself [2](https://github.com/ruby/ruby/blob/5cc1d57c3957ecabe02c5ad79dd75c523457187f/load.c#L1179).\n\nUpdate the documentation present in `lib/English.rb` to reflect that and\ndon't misguide the reader.\n", "labels": [], "number": 620, "updated_at": "2015-10-20 18:06:39", "user": 586813, "closed_at": "2014-05-31 20:00:17", "id": 34615674, "title": "Remove `$LOADED_FEATURES` from examples in `lib/English.rb`", "url": "https://api.github.com/repos/ruby/ruby/issues/620", "created_at": "2014-05-30 03:40:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44757383", "text": "@leafac Thanks! Could you update [doc/globals.rdoc](https://github.com/ruby/ruby/blob/trunk/doc/globals.rdoc) to list `$LOADED_FEATURES` then?\n\nI will merge once its ready.\n", "created_at": "2014-05-31 19:31:21", "user": 277819, "id": 44757383}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44757605", "text": "There you go @zzak, thanks!\n", "created_at": "2014-05-31 19:39:24", "user": 586813, "id": 44757605}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44758417", "text": "@leafac Thanks! <3\n", "created_at": "2014-05-31 20:09:41", "user": 277819, "id": 44758417}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/149649884", "text": ":thumbsup: -- BTW: the \"docu bug\" was introduced as a side-effect of 6dcbfbc5259a6ebfdf7ac68a69574ca270111da7\n", "created_at": "2015-10-20 18:05:30", "user": 17322, "id": 149649884}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `raise` method is delegated to the source object, so calling `raise` inside `__getobj__` will fail. The available alternative is to call `__raise__` instead.\n\n/cc @zzak\n", "labels": [], "number": 621, "updated_at": "2014-06-13 09:26:01", "user": 80978, "closed_at": "2014-05-30 18:56:40", "id": 34670559, "title": "Document raise/__raise__ usage on the Delegator class.", "url": "https://api.github.com/repos/ruby/ruby/issues/621", "created_at": "2014-05-30 18:42:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\n* lib/net/imap.rb (body_type_1part): Gmail IMAP reports a body\n  type as \"MIXED\" followed immediately by params\n  [ruby-core:62864] [Bug #9885]\n```\n\nThis is to address: https://bugs.ruby-lang.org/issues/9885\n", "labels": [], "number": 622, "updated_at": "2014-08-06 09:03:23", "user": 68707, "closed_at": "2014-08-06 09:03:23", "id": 34682637, "title": "Net::IMAP parse failure on FETCHed BODYSTRUCTURE with \"mixed\" body type", "url": "https://api.github.com/repos/ruby/ruby/issues/622", "created_at": "2014-05-30 21:29:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51310016", "text": "Looks like this has been merged.  Thanks!\n", "created_at": "2014-08-06 09:03:23", "user": 10236, "id": 51310016}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nThis is just a tiny pull request that adds a mention about `rb_call_super` in the README.EXT file. This method can be pretty useful when overriding existing methods with inheritance but we need to look at Ruby's code to find it.\n\nI'm not sure if this is intentional not to speak about it though.\n\nHave a nice day.\n", "labels": [], "number": 623, "updated_at": "2014-06-12 09:13:28", "user": 354185, "closed_at": "2014-06-02 16:42:25", "id": 34729612, "title": "Add a tiny note about rb_call_super", "url": "https://api.github.com/repos/ruby/ruby/issues/623", "created_at": "2014-06-01 14:44:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44861183", "text": "@robin850 Thanks!\n", "created_at": "2014-06-02 16:42:57", "user": 277819, "id": 44861183}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44864583", "text": "@zzak: Thank you too! :-)\n", "created_at": "2014-06-02 17:10:38", "user": 354185, "id": 44864583}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've discovered this bug [when I was trying to work with GOST keys](https://bugs.ruby-lang.org/issues/9830) (which are EC keys), and I was unable to do signing as `sign` method in `OpenSSL::PKey` class (superclass of `OpenSSL::PKey::EC`) calls `private?` method on self, but `OpenSSL::PKey::EC` doesn't implement it, but implement method `private_key?` with the same meaning.\n", "labels": ["OpenSSL"], "number": 624, "updated_at": "2016-06-12 10:06:39", "user": 264400, "closed_at": "2016-06-11 18:52:18", "id": 34732574, "title": "Define aliases private? and public? for OpenSSL::PKey::EC", "url": "https://api.github.com/repos/ruby/ruby/issues/624", "created_at": "2014-06-01 17:26:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156408701", "text": "This patch seems ok to me, but we need a reproducible failure, and/or test! <3\n", "created_at": "2015-11-13 11:50:20", "user": 277819, "id": 156408701}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225384942", "text": "r55098 (ruby/openssl@55888652e2972384588d349f49f133bb9ac4368b) renamed #private_key? and #public_key? to #private? and #public? respectively.\n\nhttps://bugs.ruby-lang.org/issues/6567\n", "created_at": "2016-06-11 18:52:18", "user": 1033740, "id": 225384942}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225424361", "text": "@rhenium thank you! :heart: \n", "created_at": "2016-06-12 10:06:39", "user": 264400, "id": 225424361}], "assignees": [1033740, 1033740], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see https://bugs.ruby-lang.org/issues/9892\n", "labels": [], "number": 625, "updated_at": "2014-07-11 06:31:38", "user": 12301, "closed_at": "2014-06-02 03:32:25", "id": 34739759, "title": "CONTRIBUTING guides", "url": "https://api.github.com/repos/ruby/ruby/issues/625", "created_at": "2014-06-01 23:52:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/44793333", "text": "Did you also see [doc/contributing.rdoc](https://github.com/ruby/ruby/blob/trunk/doc/contributing.rdoc)?\n", "created_at": "2014-06-01 23:58:12", "user": 277819, "id": 44793333}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see https://bugs.ruby-lang.org/issues/9852\n", "labels": [], "number": 626, "updated_at": "2014-06-30 02:39:51", "user": 12301, "closed_at": "2014-06-30 02:39:48", "id": 34740493, "title": "Install task of bundle gems.", "url": "https://api.github.com/repos/ruby/ruby/issues/626", "created_at": "2014-06-02 00:32:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47490240", "text": "applied at 27d345dff4cca902cc4d61057d892aca5fd2d936\n", "created_at": "2014-06-30 02:39:48", "user": 12301, "id": 47490240}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "OpenSSL 0.9.x vs OpenSSL 1.0.x uses a different struct definition, which\nwill cause problems if the ssl libraries are dynamically loaded, and if\nthe application is built against 0.9 and run against 1.0.\n\nhttp://bugs.python.org/issue21564 details the same issue in python's\nhashlib extension.\n\nInstead of declaring the EVP_MD_CTX struct directly as a stack variable,\nuse the provided API functions to allocate and deallocate instances.\n", "labels": [], "number": 627, "updated_at": "2015-09-12 14:12:20", "user": 10137, "closed_at": "2015-09-12 09:43:25", "id": 34867967, "title": "Fix a binary compatibility issue with the size of the EVP_MD_CTX struct.", "url": "https://api.github.com/repos/ruby/ruby/issues/627", "created_at": "2014-06-03 14:23:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45002718", "text": "0.9 and 1.0 OpenSSL are binary-incompatible for other reasons too, are not?\n", "created_at": "2014-06-03 18:31:43", "user": 16700, "id": 45002718}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45005946", "text": "@nobu Indeed the data structures maintained by different versions of OpenSSL are incompatible in a number of ways. However the API provides allocators and initializers for nearly all public types, e.g. SSL_CTX_new, BN_CTX_new, BIO_NEW_mem_buf, etc. So long as the application only refers to struct types like SSL_CTX_, BIGNUM_, by pointer, then it doesn't matter what the struct contents are except to the library. Further, the set of extern \"C\" symbols needed by the application are generally present in all (recent) versions of OpenSSL.\n\nThe only real issue is the addition of CRYPTO_THREADID functions added in version 1.0 to deprecate the CRYPTO_thread_id functions. But if the application is built against version 0.9, those new symbols won't be configured, and it won't matter which version of the library is picked up at run time.\n\nThe only places in the code currently not written to work in this model are the two functions in openssl/ossl_pkey.c that declare EVP_MD_CTX instances on the stack.\n", "created_at": "2014-06-03 18:58:24", "user": 10137, "id": 45005946}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45012339", "text": "your patch contains:\n1. a conflict,\n2. unnecessary white space changes, and\n3. allocation of the context before argument checks which can raise an exception, and can cause memory leaks.\n", "created_at": "2014-06-03 19:55:39", "user": 16700, "id": 45012339}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45221321", "text": "@nobu, I see now I my branch started from a revision that was out of date. It seemed like the best thing to do was to start from the most recent revision of the source file in question, then reapply my original commit. I believe your concerns are addressed.\n", "created_at": "2014-06-05 13:52:30", "user": 10137, "id": 45221321}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139744630", "text": "Patch author left from github. We can't contact him/her. I close this.\n", "created_at": "2015-09-12 09:43:25", "user": 12301, "id": 139744630}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139748223", "text": "I think we should drop OpenSSL 0.9 support.\n", "created_at": "2015-09-12 10:48:42", "user": 16700, "id": 139748223}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139774231", "text": "@nobu I agreed it. OpenSSL 0.9 is already disabled on CRuby test suite. and We should support TLS 1.2 related with https://bugs.ruby-lang.org/issues/11524\n", "created_at": "2015-09-12 14:12:20", "user": 12301, "id": 139774231}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see https://bugs.ruby-lang.org/issues/9904\n", "labels": [], "number": 628, "updated_at": "2014-07-11 06:31:29", "user": 12301, "closed_at": "2014-06-13 23:34:10", "id": 35029783, "title": "Remove dead links", "url": "https://api.github.com/repos/ruby/ruby/issues/628", "created_at": "2014-06-05 06:05:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see https://bugs.ruby-lang.org/issues/9860\n", "labels": [], "number": 629, "updated_at": "2014-07-02 22:50:13", "user": 12301, "closed_at": "2014-07-02 22:50:11", "id": 35031247, "title": "Extracted Logger::Application from logger.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/629", "created_at": "2014-06-05 06:44:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47847296", "text": "applied at r46650\n", "created_at": "2014-07-02 22:50:11", "user": 12301, "id": 47847296}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove MAX_MULTIPART_LENGTH - according to RFC-1867, servers can terminate an upload at anytime on space constraints.\nAlso, clients in general are not required to adhere to MAXLENGTH attributes.\nClients are also generally required to supply an overall content-length for servers to decide on.\n", "labels": [], "number": 630, "updated_at": "2014-06-16 01:11:03", "user": 441543, "closed_at": "2014-06-07 08:18:02", "id": 35198892, "title": "[Bug #8370]", "url": "https://api.github.com/repos/ruby/ruby/issues/630", "created_at": "2014-06-07 03:48:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "str.slice!(fixnum) does not return fixnum and it returns new_str.\n", "labels": [], "number": 631, "updated_at": "2014-06-14 11:01:56", "user": 1078126, "closed_at": "2014-06-07 19:56:21", "id": 35207575, "title": "Fix comment in rb_str_slice_bang()", "url": "https://api.github.com/repos/ruby/ruby/issues/631", "created_at": "2014-06-07 12:35:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Provide a mechanism to specify the max_multipart_length of multipart data.\nRemove MAX_MULTIPART_LENGTH constant and replace with a option to CGI.new,\nthat takes either a simple Integer scalar or a lambda that returns an Integer, for more\ncomplex length limit calculation logic.\nModify multipart tests to be able to accept same options as CGI.new.\n", "labels": [], "number": 632, "updated_at": "2014-06-16 20:09:22", "user": 441543, "closed_at": "2014-06-08 22:50:44", "id": 35232989, "title": "[Bug-8370]", "url": "https://api.github.com/repos/ruby/ruby/issues/632", "created_at": "2014-06-08 10:19:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Can pass a simple integer scalar, or a lambda that returns an integer, for capturing more complex logic at request parse time.\nAmends earlier fix by removing getter/setters, which require a separate feature request.\n", "labels": [], "number": 633, "updated_at": "2014-06-12 05:35:18", "user": 441543, "closed_at": "2014-06-11 08:13:20", "id": 35249817, "title": "[BUG-8370] - Configure max multipart length in CGI.new", "url": "https://api.github.com/repos/ruby/ruby/issues/633", "created_at": "2014-06-08 22:55:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45713678", "text": "fixed by r46392\n", "created_at": "2014-06-11 08:13:20", "user": 12301, "id": 45713678}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes a typo in gc.c (gcdebug_sentinel).\n\"sentinel\" not \"sential\"\n", "labels": [], "number": 634, "updated_at": "2014-06-14 17:21:24", "user": 73532, "closed_at": "2014-06-09 07:06:09", "id": 35262225, "title": "gc.c (gcdebug_sentinel) : fix typo.", "url": "https://api.github.com/repos/ruby/ruby/issues/634", "created_at": "2014-06-09 06:05:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/csv.rb (CSV#<<): honor explicity given encoding.  based on\n  the patch by DAISUKE TANIWAKI <daisuketaniwaki AT gmail.com> at\n  [ruby-core:62113].  [Bug #9766]\n", "labels": [], "number": 635, "updated_at": "2014-06-12 05:35:19", "user": 16700, "closed_at": "2014-06-11 08:11:48", "id": 35316653, "title": "csv.rb: honor encoding option", "url": "https://api.github.com/repos/ruby/ruby/issues/635", "created_at": "2014-06-09 19:39:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45534541", "text": "/c @JEG2\n", "created_at": "2014-06-09 19:41:10", "user": 9831, "id": 45534541}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45550674", "text": "There's a typo in this patch.  Search for `encodign`.  I think it works, because it doesn't look like that assignment is ever used.  So it should probably just be removed.\n\nOtherwise, this change seems fine.\n", "created_at": "2014-06-09 22:08:30", "user": 5639, "id": 45550674}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45713531", "text": "fixed by r46391\n", "created_at": "2014-06-11 08:11:48", "user": 12301, "id": 45713531}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a suggested implementation of https://bugs.ruby-lang.org/issues/9925\nI am wide-open to other ideas, this was the first approach I thought through.\n", "labels": [], "number": 636, "updated_at": "2018-02-23 03:06:44", "user": 39406, "closed_at": "None", "id": 35341969, "title": "Use the RUBY_GAI environment variable to alter default DNS lookups", "url": "https://api.github.com/repos/ruby/ruby/issues/636", "created_at": "2014-06-10 01:28:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45564644", "text": "For completeness, do you have examples of other libraries configuring address family preferences the same way?\n", "created_at": "2014-06-10 01:31:10", "user": 9831, "id": 45564644}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45565712", "text": "Well, of course there is `gai.conf` - which doesn't much work. Node.JS currently does something like Ruby does with `LOOKUP_ORDER_HACK_INET`. (By the way, what if that became an environment variable instead of a compile time change?)\n\nAnother approach I would like very much would be a module variable in Socket that I could toggle globally or per-instance.\n", "created_at": "2014-06-10 01:52:04", "user": 39406, "id": 45565712}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- lib/webrick/httpresponse.rb: unset content-length header when responding to\n    HEAD requests.\n  - test/webrick/test_httpresponse.rb: tests for above\n", "labels": [], "number": 637, "updated_at": "2014-06-12 05:35:20", "user": 172194, "closed_at": "2014-06-10 19:58:59", "id": 35416842, "title": "Redmine 9927: Remove content-length when responding to HEAD request with webrick", "url": "https://api.github.com/repos/ruby/ruby/issues/637", "created_at": "2014-06-10 19:35:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45663699", "text": "This appears to be a bug in curl, see: https://bugs.ruby-lang.org/issues/9927#note-2\n", "created_at": "2014-06-10 19:58:59", "user": 9831, "id": 45663699}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see http://tools.ietf.org/html/rfc7238\n", "labels": [], "number": 638, "updated_at": "2014-06-12 09:40:56", "user": 1935767, "closed_at": "2014-06-12 09:38:41", "id": 35466048, "title": "http: add Net::HTTPPermanentRedirect(308), see rfc7238", "url": "https://api.github.com/repos/ruby/ruby/issues/638", "created_at": "2014-06-11 09:29:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/45847834", "text": "looks good\n", "created_at": "2014-06-12 09:30:12", "user": 13423, "id": 45847834}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Provides a more efficient way to get the number of symbols in Ruby's symbol table which comes in handy when trying to detect accidental conversion of user strings into symbols.\n\nUsing `Symbol.all_symbols` for this is inefficient.\n", "labels": [], "number": 639, "updated_at": "2014-06-24 17:16:30", "user": 325821, "closed_at": "2014-06-24 17:16:30", "id": 35713553, "title": "Add Symbol.count", "url": "https://api.github.com/repos/ruby/ruby/issues/639", "created_at": "2014-06-13 22:53:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46190455", "text": "@nobu I got the idea to add this while attempting to track the size of the symbols table using StatsD on our production servers to hopefully catch any accidental string to symbol conversions. \n\nMy initial attempt used `Symbol.all_symbols.count` but after reading the source code I realized that it builds a new array of every symbol in the table each time you call it.\n", "created_at": "2014-06-16 15:07:26", "user": 325821, "id": 46190455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46534366", "text": "Usually we discuss new features at ruby-lang.org, please file a new issue https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new\n", "created_at": "2014-06-19 08:13:58", "user": 16700, "id": 46534366}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46606455", "text": "@nobu thanks for the info. Issue opened at https://bugs.ruby-lang.org/issues/9963.\n", "created_at": "2014-06-19 19:36:26", "user": 325821, "id": 46606455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47000808", "text": "Closing. `2.2.0` will have garbage collection for symbols (https://bugs.ruby-lang.org/issues/9634) which solves this entire problem.\n", "created_at": "2014-06-24 17:16:23", "user": 325821, "id": 47000808}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix handling path's like '~/.gem/2.1.0/bin' in PATH variable.\n", "labels": [], "number": 640, "updated_at": "2014-06-15 21:00:07", "user": 3531127, "closed_at": "2014-06-15 21:00:07", "id": 35757459, "title": "[RubyGems] Fix handling path's started with '~/' in environment variable PATH.", "url": "https://api.github.com/repos/ruby/ruby/issues/640", "created_at": "2014-06-15 20:38:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46127750", "text": "Could you submit this upstream to the [rubygems issue tracker](https://github.com/rubygems/rubygems/issues/new)\n", "created_at": "2014-06-15 21:00:07", "user": 277819, "id": 46127750}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Prevent exception if a header value is `nil`\n", "labels": [], "number": 641, "updated_at": "2016-01-29 01:45:32", "user": 338814, "closed_at": "2016-01-29 01:45:32", "id": 35796330, "title": "Coerce header value to string", "url": "https://api.github.com/repos/ruby/ruby/issues/641", "created_at": "2014-06-16 13:34:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46232964", "text": "Why don't you use \"\"?\n", "created_at": "2014-06-16 20:35:36", "user": 16700, "id": 46232964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46307571", "text": "@nobu I do now, but I had to follow a stack trace to this line to find out that I needed to do so. I would rather let others avoid that.\n\nAlso, it makes more sense to me to have the knowledge that \"header must be a string\" encoded in one place (this method) than many (every place a header is generated).\n", "created_at": "2014-06-17 13:39:50", "user": 338814, "id": 46307571}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 642, "updated_at": "2014-06-18 12:04:25", "user": 7906296, "closed_at": "2014-06-16 20:27:05", "id": 35831931, "title": "Ruby 2 0 0", "url": "https://api.github.com/repos/ruby/ruby/issues/642", "created_at": "2014-06-16 20:15:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/46231558", "text": "Uh ? Try stackoverflow instead :)\n", "created_at": "2014-06-16 20:24:28", "user": 199499, "id": 46231558}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes RbConfig::CONFIG[\"prefix\"] being empty when ruby was configured\n--with-rubyarchprefix. The 'why' is pretty convoluted:\n\nrbconfig.rb is _not_ generated by autoconf for some reason I cannot fathom, but\ninstead, at compile-time, miniruby is used to run tool/mkconfig.rb to generate\nit. mkconfig.rb parses the config.status shell script to do that; that's weird,\nbut okay. The actually relevant lines in the script look like this:\n\n```\nS[\"rubyarchdir\"]=\"${rubyarchprefix}/${ruby_version}\"\n```\n\nSo mkconfig.rb has code to expand these variables as well. But it doesn't end\nhere. TOPDIR in rbconfig.rb is what is used to figure out CONFIG[\"prefix\"];\nthis is done by chopping off the part without the prefix from the full path of\nthe file:\n\n```\nTOPDIR = File.dirname(__FILE__).chomp!(\"/lib/amd64/ruby/2.0.0\")\n```\n\nand\n\n```\nCONFIG[\"prefix\"] = (TOPDIR || DESTDIR + \"/opt/niksula\")\n```\n\nI don't know why this needs to be done at runtime. Anyway, the bug lies in the\nmkconfig.rb code that generates the TOPDIR line above. After reading the\nvariables from config.status, \"prefix\" and \"exec_prefix\" are set to the empty\nstring, and the expansion is only done _after_ this. That means, if your\nrubyarchprefix happens to begin with either \"${prefix}\" or \"${exec_prefix}\",\nyou will get a correctly generated TOPDIR line (one that does not contain your\nprefix). However, if you used --with-rubyarchprefix to set it explicitly,\nyou're not so lucky: there is no prefix or exec_prefix variable there, so you\nget the full rubyarchdir path on the TOPDIR line in rbconfig.rb, and thus the\nprefix resolves to empty at runtime.\n\nBecause I don't know why TOPDIR is decided at runtime, I'm leaving it like that\nwith this patch; otherwise I'd just set it to be prefix.\n\nI tested this against ruby 2.1.2 release version.\n", "labels": [], "number": 643, "updated_at": "2014-06-27 15:38:41", "user": 167940, "closed_at": "2014-06-27 15:38:41", "id": 36658496, "title": "fix empty RbConfig::CONFIG[\"prefix\"] when configured --with-rubyarchprefix", "url": "https://api.github.com/repos/ruby/ruby/issues/643", "created_at": "2014-06-27 12:14:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Define TAU constant in math.c similar to PI.\n- Define TAU method in bigdecimal/math based on existing\n  PI method.\n", "labels": [], "number": 644, "updated_at": "2017-02-10 21:55:39", "user": 17822, "closed_at": "2015-07-20 23:01:37", "id": 36720913, "title": "Define the TAU circle constant [Feature #4897]", "url": "https://api.github.com/repos/ruby/ruby/issues/644", "created_at": "2014-06-28 08:33:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47421775", "text": "I tested like this:\n\noubliette:~/dev/ruby> [trunk_define_tau] /usr/local/bin/ruby -r bigdecimal/math -e 'puts Math::PI, BigMath.PI(20), Math::TAU, BigMath.TAU(20)'\n3.141592653589793\n0.3141592653589793238462643383279502884519859293521427E1\n6.283185307179586\n0.6283185307179586476925286766559005769039718587042854E1\n", "created_at": "2014-06-28 08:37:05", "user": 17822, "id": 47421775}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47421798", "text": "Link to issue tracker:\nhttps://bugs.ruby-lang.org/issues/4897\n", "created_at": "2014-06-28 08:38:41", "user": 17822, "id": 47421798}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47425305", "text": "Rebased on top of 38f013391d3ae9556008c37f95bdeb2b9da46de0 \"bigdecimal/math.rb: error message in BigMath#PI\"\n", "created_at": "2014-06-28 11:42:37", "user": 17822, "id": 47425305}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48105767", "text": "Simon, I think you've erred in putting PI first.  Shouldn't TAU be first?  Or perhaps they should be in alphabetical order: E, PI, TAU?  Thanks for this patch and raising my awareness of Tau.  I'm a Tau convert now too...\n", "created_at": "2014-07-06 08:15:06", "user": 19199, "id": 48105767}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49498763", "text": "@thoran (Not sure if you're totally serious, but) I don't think changing the order is necessary or sensible. Glad to hear Tau has another convert.. :)\n", "created_at": "2014-07-19 03:50:25", "user": 17822, "id": 49498763}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119973515", "text": "@simonbaird Please tell me how popular is tau in the community of mathematicians and physicians.  I don't have any idea of it.  I want to know how many research papers or textbooks using this new constant definition have been published as of today.\n", "created_at": "2015-07-09 13:45:07", "user": 3959, "id": 119973515}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120234147", "text": "@mrkn Take a look [here](http://tauday.com/state-of-the-tau). It shows a year by year list of Tau related highlights including some books and publications that use it.\n", "created_at": "2015-07-10 05:37:16", "user": 17822, "id": 120234147}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120234323", "text": "Google calculator has Tau: https://www.google.com/search?q=tau+%2B+0\n", "created_at": "2015-07-10 05:39:09", "user": 17822, "id": 120234323}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120254722", "text": "@simonbaird Hi! Thank you for working on it. While leaving a decision to @mrkn san, let me say something here.\n\nTau makes more sense than pi to me and is important constant as you show. I personally love this number. \nBut I really doubt whether it worth having tau as constant in Ruby. There are a lot of other math constants which are also important. And `E` and `PI` are top two of special one, very special. While Nobody complain about having `E` and `PI` as constant, discussing about how important other constants(Tau) is and worth it are kind of difficult.\n", "created_at": "2015-07-10 06:53:03", "user": 5266933, "id": 120254722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120774743", "text": "The two most important constants in mathematics are e and \"the circle constant\". And, (according to the Tau supporters, myself included), the circle constant is Tau. So that's why I don't think the \"slippery slope\" argument, i.e. \"if we add Tau then people will want to add many other constants\" is valid.\n\nNevertheless, I understand the decision about whether to merge this is not a clear one. Here's some of my thoughts why it could be merged:\n- It won't hurt anyone\n- It can help further the acceptance and adoption of Tau (which I believe is a good thing for the world)\n\nHow about asking \"why not\" instead of \"why\"?\n", "created_at": "2015-07-13 00:00:03", "user": 17822, "id": 120774743}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123082639", "text": "@simonbaird I decided to reject this proposal.  The reasons is:\n- It looks to me that tau as the circle constant isn't popular enough to be introduced in Ruby's core although it has good property.\n- So introducing tau is hurt the future Ruby now.  Core constants cannot remove easily.\n- It's not Ruby's role to help further the acceptance and adoption of tau.\n- I found that Python and Julia rejected similar proposals.  See https://bugs.python.org/issue12345 and https://github.com/JuliaLang/julia/pull/4864.\n", "created_at": "2015-07-20 23:01:33", "user": 3959, "id": 123082639}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123110580", "text": "Okay, your reasoning is very sensible and well explained. Thanks very much for the consideration. Best wishes, Simon.\n", "created_at": "2015-07-21 00:39:50", "user": 17822, "id": 123110580}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/279076957", "text": "> I found that Python and Julia rejected similar proposals. See https://bugs.python.org/issue12345 and JuliaLang/julia#4864.\r\n\r\nJust FYI, Python actually ended up incorporating the proposal: issue 12345 is now marked as solved -- by Guido himself, no less :)", "created_at": "2017-02-10 21:55:39", "user": 478237, "id": 279076957}], "assignees": [3959, 3959], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@trans prefers limited_to and I agree with that.\n\ncf: https://github.com/rubyworks/facets/pull/108\n", "labels": [], "number": 645, "updated_at": "2018-02-23 03:06:45", "user": 1495368, "closed_at": "None", "id": 36744734, "title": "String#squeeze and count: change other_str to limited_to", "url": "https://api.github.com/repos/ruby/ruby/issues/645", "created_at": "2014-06-29 12:14:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47454004", "text": "The prose does not flow naturally with this change. It should be updated to match the name change.\n", "created_at": "2014-06-29 13:02:13", "user": 9831, "id": 47454004}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47454263", "text": "> It should be updated to match the name change\n\nCould you tell me what you mean by \"the name change\"?\nIf you mean \"limited_to\"'s grammar is wrong, I'd like to use \"target\" as argument name.\n", "created_at": "2014-06-29 13:14:04", "user": 1495368, "id": 47454263}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47489590", "text": "Yes, the grammar is wrong. It's OK to change the wording when changing the parameter names. I think \"target\" is no better than other_str\n", "created_at": "2014-06-30 02:20:43", "user": 9831, "id": 47489590}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47492417", "text": "Now I use \"target\". How would you like?\n", "created_at": "2014-06-30 03:39:30", "user": 1495368, "id": 47492417}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47492585", "text": "@cielavenir Seems like `target` and `limited_to`, not reflect the essence of usage. Otherwise `other_str` says that argument must be a String\n", "created_at": "2014-06-30 03:44:39", "user": 920053, "id": 47492585}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The documented return from `File.join` is `path`.  This patch changes it\nto `string` to avoid confusion with `Pathname#join`, which returns a\n`Pathname` object.\n", "labels": [], "number": 646, "updated_at": "2014-06-30 02:39:49", "user": 193421, "closed_at": "2014-06-30 02:39:49", "id": 36765006, "title": "document File.join returns a string", "url": "https://api.github.com/repos/ruby/ruby/issues/646", "created_at": "2014-06-30 02:30:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed empty file and associated file require\n", "labels": [], "number": 647, "updated_at": "2014-07-01 02:33:10", "user": 567626, "closed_at": "2014-07-01 02:33:10", "id": 36829661, "title": "Removed empty file and associated file require", "url": "https://api.github.com/repos/ruby/ruby/issues/647", "created_at": "2014-06-30 19:19:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Removed experimental `digest/hmac` file which was unused and deprecated by 1.9\n- Removed tests for `digest/hmac`\n", "labels": [], "number": 648, "updated_at": "2014-07-01 07:31:43", "user": 567626, "closed_at": "2014-07-01 07:23:46", "id": 36861070, "title": "Removed experimental `digest/hmac` file which was unused and deprecated by 1.9", "url": "https://api.github.com/repos/ruby/ruby/issues/648", "created_at": "2014-07-01 04:13:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47625381", "text": "Thanks!\n", "created_at": "2014-07-01 07:31:43", "user": 10236, "id": 47625381}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pass for Typo fixes in json ext\n", "labels": [], "number": 649, "updated_at": "2014-07-03 09:05:47", "user": 567626, "closed_at": "2014-07-03 09:05:45", "id": 36862441, "title": "Pass for Typo fixes in json ext", "url": "https://api.github.com/repos/ruby/ruby/issues/649", "created_at": "2014-07-01 04:57:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47883186", "text": "https://github.com/flori/json/pull/212\n", "created_at": "2014-07-03 09:05:45", "user": 567626, "id": 47883186}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Pass over Generator to use consistent, set/ returns method language\n- Fixed grammar in initialize_copy description\n", "labels": [], "number": 650, "updated_at": "2014-07-03 21:18:03", "user": 567626, "closed_at": "2014-07-03 09:05:23", "id": 36955227, "title": "Pass over  JSON generator", "url": "https://api.github.com/repos/ruby/ruby/issues/650", "created_at": "2014-07-02 06:27:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47745270", "text": "The broken build was due to a faulty commit, which has been removed.\n", "created_at": "2014-07-02 07:32:15", "user": 567626, "id": 47745270}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47745490", "text": "json library in ruby/ruby is not upstream, Please submit patch into https://github.com/flori/json at first.\n", "created_at": "2014-07-02 07:35:26", "user": 12301, "id": 47745490}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47745788", "text": "Oh. @hsbt Should I close all PR's from here?\n", "created_at": "2014-07-02 07:39:23", "user": 567626, "id": 47745788}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47883152", "text": "Opened upstream at https://github.com/flori/json/pull/212\n", "created_at": "2014-07-03 09:05:23", "user": 567626, "id": 47883152}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47975336", "text": "@hsbt can you point me to place where I can find which of the plugins is upstream. I din't find such detail.\ncc @zzak. \nAlternatively, it would be a great to add a \"README-notice\" stating the code is upstream and place where upstream resides. wdyt?\n", "created_at": "2014-07-03 19:40:21", "user": 567626, "id": 47975336}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47985937", "text": "We have a stdlib doc, but it doesn't point to the upstream locations.. we should add it!\n", "created_at": "2014-07-03 21:18:03", "user": 277819, "id": 47985937}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Document `Complex` class json generation methods.\n", "labels": [], "number": 651, "updated_at": "2014-07-03 05:20:55", "user": 567626, "closed_at": "2014-07-03 05:20:51", "id": 36956077, "title": "Document `Complex` json generation methods.", "url": "https://api.github.com/repos/ruby/ruby/issues/651", "created_at": "2014-07-02 06:47:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47867818", "text": "https://github.com/flori/json/pull/211\n", "created_at": "2014-07-03 05:20:51", "user": 567626, "id": 47867818}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Document `Rational` json generation methods.\n", "labels": [], "number": 652, "updated_at": "2014-07-03 05:18:13", "user": 567626, "closed_at": "2014-07-03 05:18:10", "id": 36956478, "title": "Document `Rational` json generation methods.", "url": "https://api.github.com/repos/ruby/ruby/issues/652", "created_at": "2014-07-02 06:56:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47867699", "text": "Opened PR upstream at https://github.com/flori/json/pull/210\n", "created_at": "2014-07-03 05:18:10", "user": 567626, "id": 47867699}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use `new.respond?(:method)` instead of checking from instance methods, which is slower.\n\nperf: https://gist.github.com/vipulnsward/8d30ace92d530e4244c2\n", "labels": [], "number": 653, "updated_at": "2014-07-03 05:13:13", "user": 567626, "closed_at": "2014-07-03 05:13:07", "id": 36958142, "title": "Use `new.respond?(:method)` instead of checking from instance methods, which is slower.", "url": "https://api.github.com/repos/ruby/ruby/issues/653", "created_at": "2014-07-02 07:29:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47747397", "text": "Why not `method_defined?` ?\n", "created_at": "2014-07-02 08:01:39", "user": 16700, "id": 47747397}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/47867453", "text": "Thanks @nobu . Opened PR upstream at https://github.com/flori/json/pull/209\n", "created_at": "2014-07-03 05:13:04", "user": 567626, "id": 47867453}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When GetDBM2 get expaned the code tries to use `dbmp` but there is\nno such variable available in that scope. So I renamed the argument `data` to `dbmp`.\n", "labels": [], "number": 655, "updated_at": "2014-07-13 08:33:38", "user": 1512383, "closed_at": "2014-07-13 08:33:38", "id": 36998700, "title": "Fix a bug in macro GetDBM2.", "url": "https://api.github.com/repos/ruby/ruby/issues/655", "created_at": "2014-07-02 16:22:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48140525", "text": "@akr How do you think about this?\n", "created_at": "2014-07-07 04:40:51", "user": 12301, "id": 48140525}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix wrong attr_reader `modifieer` => `modifier` from irb locale\n", "labels": [], "number": 656, "updated_at": "2014-07-04 20:11:08", "user": 567626, "closed_at": "2014-07-04 20:11:08", "id": 37142805, "title": "Fix wrong attr_reader `modifieer` => `modifier` from irb locale", "url": "https://api.github.com/repos/ruby/ruby/issues/656", "created_at": "2014-07-04 05:24:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Document `OpenSSL::Random`.\n", "labels": [], "number": 657, "updated_at": "2014-10-03 23:55:52", "user": 567626, "closed_at": "2014-10-03 23:52:17", "id": 37221822, "title": "Document `OpenSSL::Random`.", "url": "https://api.github.com/repos/ruby/ruby/issues/657", "created_at": "2014-07-06 15:53:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50283980", "text": "@vipulnsward Also, I'd like to merge #686 before merging this so we can preview our changes in rdoc first\n", "created_at": "2014-07-27 20:00:37", "user": 277819, "id": 50283980}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50307232", "text": "@zzak updated based on review. Will wait for #686 to be merged for updating.\n", "created_at": "2014-07-28 07:23:21", "user": 567626, "id": 50307232}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57882143", "text": "@vipulnsward Merged! Thanks! <3\n", "created_at": "2014-10-03 23:54:18", "user": 277819, "id": 57882143}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57882387", "text": ":green_heart: \n", "created_at": "2014-10-03 23:55:52", "user": 567626, "id": 57882387}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Readability improvements\n- English language fixes\n- Formatting fixes\n", "labels": [], "number": 658, "updated_at": "2014-07-11 06:43:56", "user": 193421, "closed_at": "2014-07-11 06:43:56", "id": 37238967, "title": "improve documentation for IO.read", "url": "https://api.github.com/repos/ruby/ruby/issues/658", "created_at": "2014-07-07 04:38:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Slight grammatical error in README.\n", "labels": [], "number": 659, "updated_at": "2014-07-13 07:42:23", "user": 706128, "closed_at": "2014-07-13 07:42:23", "id": 37428778, "title": "Subject-verb agreement in README [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/659", "created_at": "2014-07-09 02:21:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously: Vector[1, 0, 0].cross_product Vector[0, 1, 0]   => Vector[0, 0, -1]\nNow gives the correct result:\nVector[1, 0, 0].cross_product Vector[0, 1, 0]   => Vector[0, 0, 1]\n", "labels": [], "number": 660, "updated_at": "2014-07-11 05:19:46", "user": 1739168, "closed_at": "2014-07-11 05:19:46", "id": 37627940, "title": "Cross product function fix", "url": "https://api.github.com/repos/ruby/ruby/issues/660", "created_at": "2014-07-11 04:52:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48695148", "text": "Thank you for your patch. See #276 and https://bugs.ruby-lang.org/issues/9499\n", "created_at": "2014-07-11 05:19:46", "user": 33770, "id": 48695148}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 661, "updated_at": "2014-08-06 10:19:11", "user": 5356517, "closed_at": "2014-08-06 10:19:11", "id": 37713834, "title": "Fix Set#clone to clone internal hash.", "url": "https://api.github.com/repos/ruby/ruby/issues/661", "created_at": "2014-07-12 06:15:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48803800", "text": "Please describe this fixes.\n", "created_at": "2014-07-12 06:22:53", "user": 12301, "id": 48803800}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48804151", "text": "Now `initialize_copy` use dup method to copy internal hash (@hash).\nSo we can change cloned set even if frozend.\n\n```\ns1 = Set[10, 20]\ns1.freeze\n\nsd = s1.dup\nsc = s1.clone\n\nsd.add 1000\nsc.add 1000\n\np \"sd.frozen? #{sd.frozen?}\"\n# => \"sd.frozen? false\"\np \"sc.frozen? #{sc.frozen?}\"\n# => \"sc.frozen? true\"\n\n\np \"sd: #{sd.inspect}\"\n# => \"sd: #<Set: {10, 20, 1000}>\"\np \"sc: #{sc.inspect}\"\n# => \"sc: #<Set: {10, 20, 1000}>\"\n```\n\nI think this behavior is weird. But http://docs.ruby-lang.org/ja/2.1.0/library/set.html cautions this behavior.\nSo this issue is maybe proposal not fix Sorry.\n", "created_at": "2014-07-12 06:45:16", "user": 5356517, "id": 48804151}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50290399", "text": "@knu ping\n", "created_at": "2014-07-28 00:05:04", "user": 12301, "id": 50290399}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51309720", "text": "Looks good, I'll merge this shortly.\n", "created_at": "2014-08-06 09:00:16", "user": 10236, "id": 51309720}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems strange to me that the element reference operator is missing from the methods documentation. While it doesn't use infix notation like the others listed, it is still a special operator method available for people to implement.\n\n[]= is missing as well, but assignment methods are described in the paragraphs above, as well as in assignment.rdoc\n", "labels": [], "number": 662, "updated_at": "2014-09-22 10:53:52", "user": 1413247, "closed_at": "2014-09-22 10:53:52", "id": 37733332, "title": "Added element reference operator to methods.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/662", "created_at": "2014-07-13 02:46:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50237652", "text": "I'm not sure this is technically a \"method operator\", which is what we're describing here.\n", "created_at": "2014-07-26 15:45:36", "user": 277819, "id": 50237652}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50237911", "text": "[] accepts more than one argument too (see the paragraph above the list) so I think this an d []= need their own section.\n", "created_at": "2014-07-26 15:55:47", "user": 9831, "id": 50237911}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50255933", "text": "@zzak The reason I think it should be listed is that defining the [] method allows you to use the [ ] syntax, which is what appears the be the defining characteristic of \"method operators\": The automatic conversion of \"traditional\" syntax to method calls. Perhaps this isn't the best section since it doesn't use the same infix notation like the others and is arguably not an \"operator\", but I think it deserves a mention _somewhere_ at least. This just seemed like the most appropriate section.\n\n@drbrain You're right, I missed that. Under the unary operators would be a nice place for a small section on them I think.\n", "created_at": "2014-07-27 04:54:15", "user": 1413247, "id": 50255933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50256652", "text": "I removed the element reference method from the operator methods list and added a tiny section and example on the element methods. Tell me what you think.\n", "created_at": "2014-07-27 05:51:44", "user": 1413247, "id": 50256652}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50258236", "text": "I like it.\n", "created_at": "2014-07-27 07:44:31", "user": 9831, "id": 50258236}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change all `encrypter` => `encryptor` and `decrypter` => `decryptor`\n", "labels": [], "number": 663, "updated_at": "2014-07-19 16:14:03", "user": 567626, "closed_at": "2014-07-19 16:14:03", "id": 37733629, "title": "Change all `encrypter` => `encryptor` and `decrypter` => `decryptor`", "url": "https://api.github.com/repos/ruby/ruby/issues/663", "created_at": "2014-07-13 03:14:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix call to ciphers class method and spell out `encryption`\n", "labels": [], "number": 664, "updated_at": "2014-07-13 08:54:08", "user": 567626, "closed_at": "2014-07-13 08:54:08", "id": 37734649, "title": "Fix call to ciphers class method and spell out `encryption`", "url": "https://api.github.com/repos/ruby/ruby/issues/664", "created_at": "2014-07-13 04:43:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix typo and change HMAC unavailable warning.\n", "labels": [], "number": 665, "updated_at": "2014-07-27 19:42:13", "user": 567626, "closed_at": "2014-07-27 19:42:13", "id": 37734838, "title": "Fix typo and change HMAC unavailable warning.", "url": "https://api.github.com/repos/ruby/ruby/issues/665", "created_at": "2014-07-13 05:01:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Convert argument Pathname if required, throw TypeError if conversion fails\n", "labels": [], "number": 666, "updated_at": "2018-02-23 03:06:46", "user": 441543, "closed_at": "None", "id": 37736611, "title": "[Bug 10011]", "url": "https://api.github.com/repos/ruby/ruby/issues/666", "created_at": "2014-07-13 07:41:47", "comments": [], "assignees": [10538, 10538], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Guards against a `nil` return value from `Time.month_days` when offsetting date.\nOut of range values are then caught when `Time.utc` is called (as usual).\n\nPreviously a `nil` return value from `Time.month_days` would have the `<`\noperator called on it, and raise `NoMethodError`.\n", "labels": [], "number": 667, "updated_at": "2014-07-19 02:59:03", "user": 1144873, "closed_at": "2014-07-19 02:59:03", "id": 37839388, "title": "Fix `Time.parse` for out of range arguments with an offset", "url": "https://api.github.com/repos/ruby/ruby/issues/667", "created_at": "2014-07-14 23:48:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49001508", "text": "@akr - not sure why specs are failing. Let me know if there's anything I can do. :octocat: \n", "created_at": "2014-07-15 07:59:26", "user": 1144873, "id": 49001508}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49028431", "text": "https://github.com/nobu/ruby/compare/catch-out-of-range-times\n", "created_at": "2014-07-15 13:07:47", "user": 16700, "id": 49028431}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49455894", "text": "Looks good @nobu !\n", "created_at": "2014-07-18 17:12:27", "user": 1144873, "id": 49455894}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@drbrain I create patch of upgrading rake to 10.3.2. Do you have plan of bundled rake version on Ruby 2.2.0?\n\nI think we need to backport rake, rdoc and rubygems into trunk before fall.\n", "labels": [], "number": 668, "updated_at": "2015-04-11 11:20:09", "user": 12301, "closed_at": "2014-07-15 03:12:37", "id": 37841234, "title": "Update rake version to 10.3.2", "url": "https://api.github.com/repos/ruby/ruby/issues/668", "created_at": "2014-07-15 00:23:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48977016", "text": "Yes, I plan to update all three before fall.  RubyGems to 2.4 after its release this week and RDoc and Rake sometime later.\n\nI have another bug fix for rake I need to make for a 10.3.3 can be released, but it should be OK to apply this to trunk now.\n", "created_at": "2014-07-15 00:27:17", "user": 9831, "id": 48977016}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/48977316", "text": "@drbrain I understood. I'll help you to upgrade these libraries :octocat: \n", "created_at": "2014-07-15 00:31:58", "user": 12301, "id": 48977316}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request adds the missing `:mtime` and `:nocreate` options to the documentation of `FileUtils.touch`.\n\nThose options are currently supported but not documented.\n", "labels": [], "number": 669, "updated_at": "2014-07-18 01:17:59", "user": 69308, "closed_at": "2014-07-18 01:17:59", "id": 37954588, "title": "Add missing options in documentation of FileUtils.touch", "url": "https://api.github.com/repos/ruby/ruby/issues/669", "created_at": "2014-07-16 07:03:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 670, "updated_at": "2014-07-18 22:57:27", "user": 47405, "closed_at": "2014-07-17 07:36:36", "id": 38044322, "title": "Fix minor typo in docs for path_s_glob (Pathname::glob)", "url": "https://api.github.com/repos/ruby/ruby/issues/670", "created_at": "2014-07-17 03:02:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49266797", "text": "It is valid ruby code.\n", "created_at": "2014-07-17 07:17:32", "user": 16700, "id": 49266797}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49268157", "text": "They are equivalent:\n\n``` ruby\nPathname.glob(\"config/\" \"*.rb\")\n#=> [#<Pathname:config/application.rb>, #<Pathname:config/boot.rb>, #<Pathname:config/environment.rb>, #<Pathname:config/routes.rb>]\nPathname.glob(\"config/\" + \"*.rb\")\n#=> [#<Pathname:config/application.rb>, #<Pathname:config/boot.rb>, #<Pathname:config/environment.rb>, #<Pathname:config/routes.rb>]\n```\n", "created_at": "2014-07-17 07:36:36", "user": 277819, "id": 49268157}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49291654", "text": "I'd just make it `Pathname.glob(\"config/*.rb\")`.\n", "created_at": "2014-07-17 10:50:49", "user": 10236, "id": 49291654}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49488783", "text": "My mistake was that I copied the code sample blindly, with the exception of storing `\"*.rb\"` in a variable:\n\n``` ruby\nextension = \"*.rb\"\nPathname.glob(\"config/\" extension) # SyntaxError: unexpected tIDENTIFIER, expecting end-of-input\nPathname.glob(\"config/\" + extension) # Valid and correct\n```\n", "created_at": "2014-07-18 22:57:25", "user": 47405, "id": 49488783}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This optimizes `Enumerable#any?` to eliminate unneeded object allocations when an Array or Hash is empty.\n\nThis preserves the semantics of `any?`:\n\n> If the block is not given, Ruby adds an implicit block of { |obj| obj } that will cause any? to return true if at least one of the collection members is not false or nil.\n\nIf the array or hash is empty and `each` has not been overridden, this allows `any?` to return immediately without calling `rb_block_call`.\n\nHere's the results of a benchmark I ran:\n\n```\nruby 2.1.2\n                       user     system      total        real\nempty array        1.710000   0.010000   1.720000 (  1.719641)\nempty hash         1.820000   0.000000   1.820000 (  1.825466)\nnon-empty array    3.320000   0.000000   3.320000 (  3.335912)\nnon-empty hash     6.420000   0.030000   6.450000 (  6.462176)\n```\n\n```\nruby 2.1.2 with any? optimization\n                       user     system      total        real\nempty array        0.940000   0.000000   0.940000 (  0.936230)\nempty hash         0.870000   0.000000   0.870000 (  0.869757)\nnon-empty array    3.110000   0.000000   3.110000 (  3.115228)\nnon-empty hash     6.840000   0.010000   6.850000 (  6.868313)\n```\n\nAnd here's the benchmark code:\n\n``` ruby\nrequire 'benchmark'\n\niters = (1..10_000_000)\nBenchmark.bm(16) do |x|\n  x.report(\"empty array\") { iters.each { [].any? } }\n  x.report(\"empty hash\") { iters.each { {}.any? } }\n  x.report(\"non-empty array\") { iters.each { [1].any? } }\n  x.report(\"non-empty hash\") { iters.each { { :foo => true }.any? } }\nend\n```\n", "labels": [], "number": 671, "updated_at": "2014-07-18 02:49:35", "user": 4303686, "closed_at": "2014-07-18 02:20:10", "id": 38138717, "title": "Optimize any? object allocations for Array and Hash", "url": "https://api.github.com/repos/ruby/ruby/issues/671", "created_at": "2014-07-18 00:20:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49388247", "text": "It makes\n\n``` ruby\nclass Fixnum; include Enumerable; end\n10.any?\n```\n\nsegfault.\n\nAnd you measure array/hash creation together.\nThe benchmark should be:\n\n``` ruby\nrequire 'benchmark'\n\niters = (1..10_000_000)\nempty_array = []\nempty_hash = {}\nnon_empty_array = [1]\nnon_empty_hash = {foo: true}\nBenchmark.bm(16) do |x|\n  x.report(\"empty array\") { iters.each { empty_array.any? } }\n  x.report(\"empty hash\") { iters.each { empty_hash.any? } }\n  x.report(\"non-empty array\") { iters.each { non_empty_array.any? } }\n  x.report(\"non-empty hash\") { iters.each { non_empty_hash.any? } }\nend\n```\n\nThe results are:\n\n```\n                       user     system      total        real\nempty array        1.500000   0.000000   1.500000 (  1.497229)\nempty hash         1.550000   0.000000   1.550000 (  1.551505)\nnon-empty array    2.720000   0.000000   2.720000 (  2.719121)\nnon-empty hash     3.500000   0.010000   3.510000 (  3.505582)\n```\n\nV\n\n```\n                       user     system      total        real\nempty array        0.610000   0.000000   0.610000 (  0.619116)\nempty hash         0.620000   0.000000   0.620000 (  0.613088)\nnon-empty array    0.660000   0.000000   0.660000 (  0.662380)\nnon-empty hash     0.650000   0.000000   0.650000 (  0.647114)\n```\n", "created_at": "2014-07-18 02:04:20", "user": 16700, "id": 49388247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49389538", "text": "You could change the conditional to:\n\n``` c\n    if (!IMMEDIATE_P(obj) &&\n        (RBASIC_CLASS(obj) == rb_cArray && RARRAY_LEN(obj) == 0 &&\n        BASIC_OP_UNREDEFINED_P(BOP_EACH, ARRAY_REDEFINED_OP_FLAG)) ||\n        (RBASIC_CLASS(obj) == rb_cHash && RHASH_EMPTY_P(obj) &&\n        BASIC_OP_UNREDEFINED_P(BOP_EACH, HASH_REDEFINED_OP_FLAG))) {\n        return Qfalse;\n    }\n    ...\n```\n\nAnd that should fix the segfault.\n", "created_at": "2014-07-18 02:30:59", "user": 4303686, "id": 49389538}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49390391", "text": "Note that `IMMEDIATE_P(Qfalse)` is false.\n", "created_at": "2014-07-18 02:49:35", "user": 16700, "id": 49390391}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "nodoc, `ConditionVariable#marshal_dump` which is unsupported and raises exception.\n", "labels": [], "number": 672, "updated_at": "2014-07-19 16:03:44", "user": 567626, "closed_at": "2014-07-19 16:03:44", "id": 38190032, "title": "nodoc, `ConditionVariable#marshal_dump`", "url": "https://api.github.com/repos/ruby/ruby/issues/672", "created_at": "2014-07-18 16:11:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc @zzak\n", "labels": [], "number": 673, "updated_at": "2014-07-26 16:59:33", "user": 47848, "closed_at": "2014-07-19 17:14:03", "id": 38210407, "title": "Fix typo on documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/673", "created_at": "2014-07-18 20:40:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49513086", "text": "this typo seems to be fixed in trunk. ref. https://github.com/ruby/ruby/blob/trunk/lib/uri/common.rb#L375\n", "created_at": "2014-07-19 15:57:29", "user": 12301, "id": 49513086}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49515138", "text": "Oh right. Thank you for checking @hsbt \n", "created_at": "2014-07-19 17:14:03", "user": 47848, "id": 49515138}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50240826", "text": "@rafaelfranca Thanks anyways <3 <3 <3\n", "created_at": "2014-07-26 16:59:33", "user": 277819, "id": 50240826}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 674, "updated_at": "2017-11-20 02:19:23", "user": 3332329, "closed_at": "2017-11-20 02:19:23", "id": 38211164, "title": "Added element-wise multiplication to Matrices.", "url": "https://api.github.com/repos/ruby/ruby/issues/674", "created_at": "2014-07-18 20:50:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49496312", "text": "I've added the tests, as well as changed the name to hadamard and changed the `&&` and the `do ... end`.\n", "created_at": "2014-07-19 01:41:45", "user": 3332329, "id": 49496312}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49497331", "text": "@glenwayguy You need to describe usecase of this implementation when creating pull-request.\n", "created_at": "2014-07-19 02:34:07", "user": 12301, "id": 49497331}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49497692", "text": "@hsbt The use case of the hadamard product? Where do I need to put said description - in the commit, the code?\n", "created_at": "2014-07-19 02:57:00", "user": 3332329, "id": 49497692}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50238809", "text": "Great to see that the Matrix class will have element-wise multiplication. In Math programs like Matlab or Octave the standard notation for element-wise multiplication is A .\\* B. I guess in Ruby there is no way to have a dot in a method name?\n", "created_at": "2014-07-26 16:21:26", "user": 430682, "id": 50238809}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50241443", "text": "@marcandre Wouldn't it be better to leave it at `element_multiplication`? Once other element-wise operations will be added, it will be more consistent and easier to remember and guess. I was thinking about creating a PR for `element_division` and `element_exponentiation`. Also, I think everyone who knows a bit about matrices will intuitively understand what `element_multiplication` means, whereas the term \"Hadamard\" is fairly technical.\n", "created_at": "2014-07-26 17:14:31", "user": 430682, "id": 50241443}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72589193", "text": "IMHO only `hadamar` is not so great name, since it can be confused with the Hadamar matrix (http://en.wikipedia.org/wiki/Hadamard_matrix), that is the one usually shorted to only `Hadamar` and it should be (if someday implemented):\n `hadamar_matrix = Matrix.hadamar(original_matrix)`\n\nI guess it need to be caled `hadamar_product`,as @marcandre said is its most common name.\n\n@michaelimstepf: If we cannot use the standard `.*`, `./` and `.**` notation in Ruby that would be the ideal, what about `&*`, `&/` and `&**` as shorthands?\n\n@hsbt: Is a really common operation, for example, right now I'm using it to select irregular sections of a matrix by doing the hadamard product of te matrix with one containing '1's in the areas that I want and '0's in the rest.\n\nAnd is also very used in loosy compression, quantum information and communication algorithms.\n", "created_at": "2015-02-03 04:04:28", "user": 4518921, "id": 72589193}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/120487542", "text": "Thanks @hsbt for assigning this to me, I should have done that (and not forget about this!)\n\nI'm travelling right now, will add `hadamard_product` and an alias `entrywise_product` in a few weeks at the most.\n", "created_at": "2015-07-10 18:26:41", "user": 33770, "id": 120487542}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167009652", "text": "@marcandre Hi, is this still good to be added, or do any other changes need to be made?\n", "created_at": "2015-12-23 23:41:30", "user": 3332329, "id": 167009652}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167022376", "text": "Argh, completely slipped my mind to merge this when I got back, very sorry everyone, this won't make it in the next Ruby I'm afraid, we're long passed the feature freeze...\n", "created_at": "2015-12-24 01:52:32", "user": 33770, "id": 167022376}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/341948375", "text": "Was this never merged?\r\n", "created_at": "2017-11-05 04:26:42", "user": 9698639, "id": 341948375}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/343311669", "text": "Thanks @luchillo17  for the ping, and sorry for keeping on forgetting about this.\r\n\r\nI some commits ready for this and https://bugs.ruby-lang.org/issues/10903 : in #1746\r\n\r\nAny comments before I merge in trunk?", "created_at": "2017-11-09 22:24:05", "user": 33770, "id": 343311669}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345574241", "text": "Merged. Thanks again", "created_at": "2017-11-20 02:19:23", "user": 33770, "id": 345574241}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 675, "updated_at": "2015-06-16 04:04:00", "user": 5356517, "closed_at": "2015-06-16 04:03:50", "id": 38250466, "title": "Fix Set#replace to not clear self @hash if Error is raised", "url": "https://api.github.com/repos/ruby/ruby/issues/675", "created_at": "2014-07-20 04:03:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49537555", "text": "seems better to create a hash from the argument and replace `@hash` with it.\n", "created_at": "2014-07-20 05:21:22", "user": 16700, "id": 49537555}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50290379", "text": "@knu ping\n", "created_at": "2014-07-28 00:04:32", "user": 12301, "id": 50290379}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51309642", "text": "I'll look for a fix.\n", "created_at": "2014-08-06 08:59:20", "user": 10236, "id": 51309642}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51320375", "text": "Currently almost all methods that provide a bulk operation do not work atomically, which means there is no rollback even if an iteration fails halfway.  So, I'm not absolutely sure if `replace` solely has to guarantee that the operation it provides is atomic.  I'd like to hear from users on this.\n", "created_at": "2014-08-06 11:00:15", "user": 10236, "id": 51320375}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51321807", "text": "If we introduce a transaction kind of thing, we will see significant performance degradation which may nullify one of the essential points in using Set in place of Array.\n\nNow, looking at the test case, I guess the biggest defect of the method could be that it clears the receiver before it even knows a parameter given is enumerable.  So, I'll add a check for that as a first step.\n", "created_at": "2014-08-06 11:19:03", "user": 10236, "id": 51321807}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51324722", "text": "Just wondering, wouldn't this implementation be basically as efficient and safe?\n\n```\ndef replace(enum)\n   unless enum.instance_of?(self.class)\n     enum = Set.new(enum)\n   end\n   @hash.replace(enum.instance_variable_get(:@hash))\n   self\n end\n```\n", "created_at": "2014-08-06 11:54:10", "user": 33770, "id": 51324722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51328888", "text": "@marcandre First of all, Set is basically designed to be nice to subclasses in that it makes intensive use of public instance methods; whenever it stores elements it is done via `add`, so if you want to define a subclass of Set that does some kind of validation or transformation all you need is override `add`.  Changing `replace` to directly replace `@hash` with one generated via a Set instance will break the original behavior of `replace` of the subclass.  There's a compatibility issue here.\n\nSecondly, the proposed patch covers all of the following cases, which will trigger a rollback:\n- object given does not respond to each (or each_entry)\n- object.each fails in the middle of iteration (IO error, etc.)\n- self.add fails at some element\n\nSo, I thought we need to make it clear how far we need to go.\n", "created_at": "2014-08-06 12:43:17", "user": 10236, "id": 51328888}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51339294", "text": "Good point about subclasses.\n\nI believe the following variation covers all your points:\n\n```\n def replace(enum)\n   unless enum.instance_of?(self.class)\n     enum = self.class.new(enum)\n   end\n   @hash.replace(enum.instance_variable_get(:@hash))\n   self\n end\n```\n", "created_at": "2014-08-06 14:09:57", "user": 33770, "id": 51339294}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51349743", "text": "@marcandre I've once thought that might work (see the current implementation of `collect!`, etc.) but sometimes a subclass adds extra arguments and a block to its constructor which affect the behavior of the `add` method, so it's not safe to use it.  Probably the solution would be `enum = (self & []).merge(enum)`.\n", "created_at": "2014-08-06 15:20:28", "user": 10236, "id": 51349743}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51350021", "text": "Or `enum = self.dup.clear.merge(enum)` may be better.\n", "created_at": "2014-08-06 15:22:23", "user": 10236, "id": 51350021}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51358591", "text": "Subclasses shouldn't add mandatory extra arguments/blocks, though (Liskov substitution principle). And since the current implementation already assumes `self.class.new` works, I'd say we should use it (and avoid duplicating an object for nothing), but it's your call :smile: \n", "created_at": "2014-08-06 16:16:28", "user": 33770, "id": 51358591}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51465108", "text": "@knu: I'm curious about the subclasses you talk about. If `SetSubclass.new` requires additional arguments, or a block, what does `SetSubclass[]` do? I don't see how it could require an extra parameter or a block\n", "created_at": "2014-08-07 12:33:13", "user": 33770, "id": 51465108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51485635", "text": "I don't know.  Maybe you could just use keyword arguments if this kind of set is aimed for storing numbers or strings, not hashes.\nIn any case, you don't necessarily support `self.[]` when it is not suitable; Hash has `self.[]` but you have to use `Hash.new` if you need to specify a default value or proc.\n", "created_at": "2014-08-07 15:13:25", "user": 10236, "id": 51485635}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112278470", "text": "I think this is done.\n", "created_at": "2015-06-16 04:03:50", "user": 10236, "id": 112278470}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "getopts() can receive default value, but it doesn't print in '--help' output.\nI'd like to add printing default values. And also I add printing comment for options.\nPlease see the below example. \n\n``` ruby\n#!/bin/env ruby\nrequire 'optparse'\nopt = ARGV.getopts(\"\",\n                   \"alpha:\",\n                   \"beta:B\",\n                   \"gamma:G;This is description\"\n                   )\n\n# expected output with '--help' option are below\n#\n#  --alpha VAL\n#  --beta  VAL(=B)\n#  --gamma VAL(=G) # This is description\n```\n\nAnd if you don't mind, please merge it to official repos.\nThanks,\n", "labels": [], "number": 676, "updated_at": "2014-07-21 06:56:58", "user": 6840393, "closed_at": "2014-07-21 06:56:58", "id": 38272475, "title": "optparse.rb-getopts() : Add printing default value and comment", "url": "https://api.github.com/repos/ruby/ruby/issues/676", "created_at": "2014-07-21 02:08:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@drbrain I created backport patch for rdoc master. It have large diffs :octocat: \n\nCan I commit this?\n", "labels": [], "number": 677, "updated_at": "2014-09-05 01:45:29", "user": 12301, "closed_at": "2014-09-05 01:45:27", "id": 38277341, "title": "Update to RDoc master b96b689", "url": "https://api.github.com/repos/ruby/ruby/issues/677", "created_at": "2014-07-21 05:27:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49784488", "text": "There are still some bugs I want to fix before merging.\n", "created_at": "2014-07-22 18:58:22", "user": 9831, "id": 49784488}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49785214", "text": "@drbrain ok, I wait to merge this. \n", "created_at": "2014-07-22 19:03:44", "user": 12301, "id": 49785214}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54572211", "text": "We planned Ruby 2.2.0preview1, I merged this.\n", "created_at": "2014-09-05 01:44:57", "user": 12301, "id": 54572211}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54572238", "text": "fixed at r47392 d42d6e690e3f553b971322eae783ac6b0d4d9692\n", "created_at": "2014-09-05 01:45:27", "user": 12301, "id": 54572238}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 678, "updated_at": "2015-09-26 15:26:22", "user": 16700, "closed_at": "2014-07-21 06:32:02", "id": 38278721, "title": "fix leaked tempfiles", "url": "https://api.github.com/repos/ruby/ruby/issues/678", "created_at": "2014-07-21 06:17:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49575068", "text": "Thanks @nobu ! I merged your fixes into https://github.com/rdoc/rdoc/commit/adeeb750ac4d522aff906851b4f5ef07afcc91d6 and update my pull-request https://github.com/hsbt/ruby/commit/e6c4c955338afaecde28fbfafbaae67887942249\n", "created_at": "2014-07-21 06:29:46", "user": 12301, "id": 49575068}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/49575151", "text": "I didn't know the PR to a forked branch would be sent to the origin.\n", "created_at": "2014-07-21 06:32:02", "user": 16700, "id": 49575151}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 679, "updated_at": "2014-07-22 19:06:45", "user": 567626, "closed_at": "2014-07-22 19:06:45", "id": 38369003, "title": "Remove sample from `DRb::ExtServ` in favour of sample in sample directory", "url": "https://api.github.com/repos/ruby/ruby/issues/679", "created_at": "2014-07-22 04:53:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 680, "updated_at": "2014-07-30 18:53:16", "user": 621238, "closed_at": "2014-07-30 15:43:47", "id": 38431882, "title": " Added description for BigDecimal.new when initial value is Rational or Float", "url": "https://api.github.com/repos/ruby/ruby/issues/680", "created_at": "2014-07-22 18:57:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50252725", "text": "@prathamesh-sonpatki What do you mean by \"the digits value must be provided\"?\n\nCan you provide an example?\n", "created_at": "2014-07-27 01:01:35", "user": 277819, "id": 50252725}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50255439", "text": "@zzak Yes. When we don't pass the second argument to `BigDecimal.new` when the first argument is float or rational we get error \n\n``` ruby\nirb(main):006:0> BigDecimal.new(1.0)\nArgumentError: can't omit precision for a Float.\n    from (irb):6:in `initialize'\n    from (irb):6:in `new'\n    from (irb):6\n    from /Users/prathamesh/.rbenv/versions/2.1.2/bin/irb:11:in `<main>'\n```\n\nI think these lines are causing this behavior\nhttps://github.com/prathamesh-sonpatki/ruby/blob/fix-bigdecimal-documentation/ext/bigdecimal/bigdecimal.c#L2540\n", "created_at": "2014-07-27 04:18:33", "user": 621238, "id": 50255439}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50627920", "text": "@prathamesh-sonpatki Thanks.\n", "created_at": "2014-07-30 15:08:39", "user": 3959, "id": 50627920}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50628501", "text": "@prathamesh-sonpatki But, #690 is more better description about exceptions.\nSo I'll employ #690, but I'd like to write your name in ChangeLog.\n", "created_at": "2014-07-30 15:12:45", "user": 3959, "id": 50628501}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50628633", "text": "Please close this issue (I don't have the permission).\n", "created_at": "2014-07-30 15:13:34", "user": 3959, "id": 50628633}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50633400", "text": "@mrkn Thanks for your review! I'll close this.\n", "created_at": "2014-07-30 15:43:46", "user": 277819, "id": 50633400}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50662361", "text": "@mrkn Thanks for the review. I agree #690 is better description and covers every error.\n", "created_at": "2014-07-30 18:53:14", "user": 621238, "id": 50662361}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 681, "updated_at": "2014-07-25 03:25:15", "user": 52642, "closed_at": "2014-07-25 03:25:15", "id": 38659285, "title": "Make the self = FALSE condition a bit cleaner", "url": "https://api.github.com/repos/ruby/ruby/issues/681", "created_at": "2014-07-24 18:18:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50064876", "text": "Seems like Travis is randomly failing. You can see here https://travis-ci.org/ruby/ruby/builds build 9667 broken and in the next 9668 with \"2014-07-25\" bot commit, started passing.\n", "created_at": "2014-07-24 19:19:07", "user": 52642, "id": 50064876}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nThis pull request removes the constant values as they may change in the future and add a link to the actual values that is more up-to-date than our documentation anyway.\n\nAlso remove the mention about the default value as it may change again in the future.\n\nHave a nice day.\n", "labels": [], "number": 682, "updated_at": "2014-07-28 08:21:15", "user": 354185, "closed_at": "2014-07-27 19:42:13", "id": 38668484, "title": "Tiny improvements in the Zlib documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/682", "created_at": "2014-07-24 20:03:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50073260", "text": "I think the first paragraph and last chunk should be left alone, the minimum compression is still 0, but there's a special value now for \"let zlib decide\" (-1).\n", "created_at": "2014-07-24 20:27:19", "user": 9831, "id": 50073260}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50073453", "text": "… we should probably remove the values from the constant list too, there's no need to explain what they are as zlib may change their values at will (as with the value of default compression).\n", "created_at": "2014-07-24 20:29:06", "user": 9831, "id": 50073453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50189142", "text": "Thanks for the quick feedback @drbrain! The values are removed from the list but I've took the liberty to add a link to the actual values. I've removed the default value from the last chunk as this is wrong anyway. Let me know if I should update anything else. :-)\n", "created_at": "2014-07-25 18:48:52", "user": 354185, "id": 50189142}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On Linux, `HOST_NAME_MAX` seems to default to 64.\n\nThere is however `NI_MAXHOST`, which is used by many tools already, and supports much longer hostnames by default.\n\nOn current Ruby on an Ubuntu 14.04 system, the current behavior can be reproduced with the following code IFF the hostname is >= 65 characters:\n\n``` ruby\nrequire 'socket'\nSocket.gethostname\n```\n\n/cc @charliesome\n", "labels": [], "number": 683, "updated_at": "2014-07-25 04:21:30", "user": 203, "closed_at": "2014-07-25 04:21:30", "id": 38695424, "title": "Support hostnames longer than 64 chars", "url": "https://api.github.com/repos/ruby/ruby/issues/683", "created_at": "2014-07-25 03:55:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50106718", "text": "Thanks! Applied in 73ac899b7f05d2473506cab815614bd75e01c3d2.\n", "created_at": "2014-07-25 04:21:30", "user": 179065, "id": 50106718}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (assoc): allow quoted labels in hash literals.\n  [ruby-core:34453] [Feature #4276]\n", "labels": [], "number": 684, "updated_at": "2014-07-25 12:18:49", "user": 16700, "closed_at": "2014-07-25 12:18:49", "id": 38708774, "title": "parse.y: quoted label", "url": "https://api.github.com/repos/ruby/ruby/issues/684", "created_at": "2014-07-25 08:35:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, the Matrix class supports scalar (real number) multiplication, division and exponentiation, e.g. `5 * Matrix[ [25, 93], [-1, 66] ]`. This PR adds scalar addition and subtraction, which is supported by major scientific tools including Matlab, Octave and Python (numpy).\n", "labels": [], "number": 685, "updated_at": "2014-07-27 20:10:47", "user": 430682, "closed_at": "2014-07-27 19:48:07", "id": 38834454, "title": "Adding scalar Addition and Substraction", "url": "https://api.github.com/repos/ruby/ruby/issues/685", "created_at": "2014-07-27 07:49:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50283615", "text": "Closing this to add some more code\n", "created_at": "2014-07-27 19:48:07", "user": 430682, "id": 50283615}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50284283", "text": "I think that adding this feature is a net loss. We are losing the error message, which is the expected vanila behavior. The feature should be published as a gem, and not forced onto everyone by adding it to the core.\n", "created_at": "2014-07-27 20:10:47", "user": 3823881, "id": 50284283}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "before:\n![screen shot 2014-07-27 at 12 52 59 pm](https://cloud.githubusercontent.com/assets/277819/3714961/aed231bc-15c7-11e4-82f4-dca59c47bd75.png)\n\nafter:\n![screen shot 2014-07-27 at 12 53 05 pm](https://cloud.githubusercontent.com/assets/277819/3714962/b4265576-15c7-11e4-8e45-aacd0d36cda1.png)\n", "labels": [], "number": 686, "updated_at": "2014-10-03 23:30:04", "user": 277819, "closed_at": "2014-10-03 23:26:43", "id": 38849160, "title": "Use rb_define_*method instead of DEFMETHOD so RDoc can parse these methods.", "url": "https://api.github.com/repos/ruby/ruby/issues/686", "created_at": "2014-07-27 19:53:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50288340", "text": "We can also use `rb_define_module_function` which does the same thing as a pair of `rb_define_method` and `rb_define_singleton_method` calls.\n", "created_at": "2014-07-27 22:42:37", "user": 179065, "id": 50288340}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50288569", "text": "rb_define_module_function makes private instance methods, but that shouldn't matter.  I say @charliesome's suggestion is best.\n", "created_at": "2014-07-27 22:49:52", "user": 9831, "id": 50288569}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50288631", "text": "@drbrain Ah, I didn't know that. That behaviour makes more sense to me, but it's a potential compatibility issue so I'm not sure if we should do it.\n", "created_at": "2014-07-27 22:52:20", "user": 179065, "id": 50288631}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50288718", "text": "This change is meant to be benign, and not alter the visibility of these methods\n", "created_at": "2014-07-27 22:55:15", "user": 277819, "id": 50288718}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57880767", "text": "@charliesome Please check ce63c19 \n", "created_at": "2014-10-03 23:30:04", "user": 277819, "id": 57880767}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "move `enum.one?` documentation before the relevant method.\n", "labels": [], "number": 687, "updated_at": "2014-08-06 11:51:15", "user": 567626, "closed_at": "2014-08-06 11:51:15", "id": 38868204, "title": "move enum.one? documentation before the relevant method.", "url": "https://api.github.com/repos/ruby/ruby/issues/687", "created_at": "2014-07-28 07:52:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51324088", "text": "Thanks!\n", "created_at": "2014-08-06 11:46:29", "user": 10236, "id": 51324088}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I could be totally wrong, but it seems the standard library doesn't provide a reliable way of comparing hashes in constant-time.\n- The docs for OpenSSL::HMAC [encourage the use of `Digest#to_s`](http://ruby-doc.org/stdlib-2.1.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html#method-c-new).\n- Ruby's string comparison [uses memcmp](http://rxr.whitequark.org/mri/source/string.c#2382), which isn't timing safe.\n\nWith this patch I propose to add an additional method, `OpenSSL::HMAC#verify`, which takes a binary string with a digest and compares it against the computed hash.\n\nI've also logged a feature request at https://bugs.ruby-lang.org/issues/10098 - since this is my first time contributing I'm not sure what constitutes a \"tiny fix\"; here's a pull request too.\n", "labels": [], "number": 688, "updated_at": "2014-07-29 04:01:31", "user": 648293, "closed_at": "2014-07-29 04:01:27", "id": 38898859, "title": "add timing-safe hmac verify method", "url": "https://api.github.com/repos/ruby/ruby/issues/688", "created_at": "2014-07-28 15:02:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50432270", "text": "Superceded by #689.\n", "created_at": "2014-07-29 04:01:27", "user": 648293, "id": 50432270}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Supercedes #688. Adds a constant-time string compare method, suited for comparing digests.\n", "labels": [], "number": 689, "updated_at": "2018-02-23 03:06:47", "user": 648293, "closed_at": "None", "id": 38956399, "title": "add timing safe string compare method", "url": "https://api.github.com/repos/ruby/ruby/issues/689", "created_at": "2014-07-29 04:01:10", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`BigDecimal.new` raises some Exceptions.\nBut it is undocumented.\n\nthis PR is very similar to #680.\nBut #680 seems still not enough. \n\nEspecially, ArgumentError by larger digits value than Float::DIG + 1 causes some trouble.\n", "labels": [], "number": 690, "updated_at": "2014-07-31 22:52:54", "user": 116996, "closed_at": "2014-07-31 22:40:54", "id": 39069940, "title": "Add description of `BigDecimal.new` exceptions", "url": "https://api.github.com/repos/ruby/ruby/issues/690", "created_at": "2014-07-30 08:19:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50594446", "text": "@mrkn ping\n", "created_at": "2014-07-30 09:45:12", "user": 12301, "id": 50594446}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50629118", "text": "@joker1007 Thanks.\n", "created_at": "2014-07-30 15:16:43", "user": 3959, "id": 50629118}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50633871", "text": "I would also like to add anywhere we have \"initial value\" and \"digits value\" we can replace with just \"+initial+\" and \"+digits+\" which refer to the arguments to this function; and will save us some whitespace.\n", "created_at": "2014-07-30 15:46:37", "user": 277819, "id": 50633871}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50637432", "text": "@zzak I fixed it. Thanks!\n", "created_at": "2014-07-30 16:10:51", "user": 116996, "id": 50637432}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50829347", "text": ":+1: \n", "created_at": "2014-07-31 22:52:54", "user": 12301, "id": 50829347}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The [RDoc is not being generated for open](http://ruby-doc.org/stdlib-2.1.2/libdoc/tempfile/rdoc/Tempfile.html) (the documentation is readable only in the [yard](http://yard.ruby-doc.org/stdlib-2.1.2/Tempfile.html#open-class_method) version). This change should make it work.\n", "labels": [], "number": 691, "updated_at": "2014-08-13 02:28:43", "user": 173797, "closed_at": "2014-08-13 02:28:43", "id": 39216309, "title": "Unify class methods definitions.", "url": "https://api.github.com/repos/ruby/ruby/issues/691", "created_at": "2014-07-31 17:13:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50789585", "text": "For a better diffing of the changes ignore white-space: https://github.com/ruby/ruby/pull/691/files?w=1\n", "created_at": "2014-07-31 17:16:46", "user": 173797, "id": 50789585}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51427472", "text": "link to issue tracker https://bugs.ruby-lang.org/issues/10105\n", "created_at": "2014-08-07 03:35:21", "user": 173797, "id": 51427472}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 692, "updated_at": "2014-08-01 07:40:52", "user": 435791, "closed_at": "2014-08-01 07:40:52", "id": 39261629, "title": "numeric.c: 0 % Float::NAN returns Float::NAN", "url": "https://api.github.com/repos/ruby/ruby/issues/692", "created_at": "2014-08-01 05:06:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": null, "labels": [], "number": 693, "updated_at": "2014-08-02 11:06:34", "user": 159441, "closed_at": "2014-08-02 11:06:34", "id": 39346959, "title": "fix typo in ChangeLog", "url": "https://api.github.com/repos/ruby/ruby/issues/693", "created_at": "2014-08-02 10:54:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/50960099", "text": "Thanks for your contribution.\n", "created_at": "2014-08-02 11:01:28", "user": 12301, "id": 50960099}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request changes Pathname#ascend and Pathname#descend to return an Enumerator if no block is given.\n\nI also had to change the existing tests from using #to_enum to block form to test the existing behavior, not the new.\n", "labels": [], "number": 694, "updated_at": "2018-02-23 03:06:47", "user": 436758, "closed_at": "None", "id": 39615152, "title": "Pathname#ascend, #descend returning Enumerator", "url": "https://api.github.com/repos/ruby/ruby/issues/694", "created_at": "2014-08-06 12:15:14", "comments": [], "assignees": [10538, 10538], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Possible resolution for [ruby-core:64039] [Feature #10095], adds an optional block to Object#itself\n", "labels": [], "number": 695, "updated_at": "2017-12-14 04:48:06", "user": 324275, "closed_at": "2017-12-14 04:48:00", "id": 39786062, "title": "[ruby-core:64039] [Feature #10095] Object#itself with block", "url": "https://api.github.com/repos/ruby/ruby/issues/695", "created_at": "2014-08-08 02:17:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351607953", "text": "This request was implemented by `yield_self` at https://github.com/ruby/ruby/commit/cec0668209483a3f233574211c4b8fbd3d1d64b7", "created_at": "2017-12-14 04:48:00", "user": 12301, "id": 351607953}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\nOnly a lot of fix ident.\nBye\n", "labels": [], "number": 696, "updated_at": "2014-08-11 15:48:24", "user": 98590, "closed_at": "2014-08-09 01:39:19", "id": 39835097, "title": "Fix ident", "url": "https://api.github.com/repos/ruby/ruby/issues/696", "created_at": "2014-08-08 15:41:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/51673506", "text": "@spk Thanks for your patch. I applied at https://github.com/ruby/ruby/commit/8e5af8b628b2a52d203e43ad5a8b18375f801cde\n", "created_at": "2014-08-09 01:39:19", "user": 12301, "id": 51673506}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Make not to do unnecessary recursive search.\n", "labels": [], "number": 697, "updated_at": "2014-11-04 15:08:40", "user": 5356517, "closed_at": "2014-11-04 15:08:40", "id": 39900621, "title": "Refactor Set#flatten_merge", "url": "https://api.github.com/repos/ruby/ruby/issues/697", "created_at": "2014-08-10 04:13:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61588518", "text": "@knu Could you review this?\n", "created_at": "2014-11-04 03:27:54", "user": 12301, "id": 61588518}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61590160", "text": "I'm not sure how this improves things. Yes, in recursive cases, detection would happen one call to `flatten_merge` sooner, but in the non recursive case (which is the common and important case), we'll be adding the initial set's id to `seen` and removing it for nothing.\n", "created_at": "2014-11-04 03:53:38", "user": 33770, "id": 61590160}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61599170", "text": "I'd agree with @marcandre here.  Applying flatten_merge to a recursive set will result in a run-time error anyway, and the cause for such an error is most likely a bug or invalid data, so you wouldn't get much if you could save a few method calls to cover that.  I would take the performance in regular cases.  To push this further, we could even delay the initialization of `seen` like this:\n\n```\n  def flatten_merge(set, seen = nil)\n    set.each { |e|\n      if e.is_a?(Set)\n        seen ||= Set.new\n        if seen.include?(e_id = e.object_id)\n          ...\n```\n\nDo you guys think it's reasonable?\n", "created_at": "2014-11-04 06:33:12", "user": 10236, "id": 61599170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61650667", "text": "> Do you guys think it's reasonable?\n\n:+1:\n", "created_at": "2014-11-04 14:53:07", "user": 33770, "id": 61650667}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61653287", "text": "Thanks for your comments. I understand recursive case is not commom case. So my refactoring is not so good viewed from performance. \n", "created_at": "2014-11-04 15:08:40", "user": 5356517, "id": 61653287}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix indent ! :snowboarder: \n", "labels": [], "number": 698, "updated_at": "2014-08-13 02:07:42", "user": 98590, "closed_at": "2014-08-13 02:07:42", "id": 40049895, "title": "* test/openssl/test_ssl_session.rb: fix indent.", "url": "https://api.github.com/repos/ruby/ruby/issues/698", "created_at": "2014-08-12 12:28:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 699, "updated_at": "2014-08-13 15:55:58", "user": 827984, "closed_at": "2014-08-13 11:50:21", "id": 40138503, "title": "If start is out of range, should return nil", "url": "https://api.github.com/repos/ruby/ruby/issues/699", "created_at": "2014-08-13 09:46:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52038349", "text": "It breaks the current spec.\nWhy \"should\" it?\n", "created_at": "2014-08-13 11:50:21", "user": 16700, "id": 52038349}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52060565", "text": "From documentation Array#[] \"Returns nil if the index (or starting index) are out of range.\"\n", "created_at": "2014-08-13 15:02:10", "user": 827984, "id": 52060565}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52068692", "text": "The doc could be made more precise, but this is not a bug (see for example https://bugs.ruby-lang.org/issues/4245 )\nMaybe we should add the following explanation line:\n\n```\n   *  Returns +nil+ if the index (or starting index) are out of range.\n + *  A starting index equal to the length of the array may be used to specify\n + *  elements after the last one and is thus not out of range.\n```\n", "created_at": "2014-08-13 15:55:58", "user": 33770, "id": 52068692}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Particularly when using libraries, I find myself often monkey patching in this code to get more information about what they are trying to connect to and why they are failing.\n\nThis keeps the exception type the same and only changes the message to include more information before, so I think it is a safe, backwards compatible change.\n", "labels": [], "number": 700, "updated_at": "2015-01-03 01:39:36", "user": 1714, "closed_at": "2015-01-03 01:39:36", "id": 40206352, "title": "More descriptive error message when net/http fails to connect to a server", "url": "https://api.github.com/repos/ruby/ruby/issues/700", "created_at": "2014-08-13 22:31:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52121537", "text": "Filed at https://bugs.ruby-lang.org/issues/10129\n", "created_at": "2014-08-13 22:38:06", "user": 1714, "id": 52121537}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Implements access to a guaranteed monotonic clock (except on older linuxes). Supports OS/X, Windows 2000 and later, Linux with clock_gettime. \n", "labels": [], "number": 701, "updated_at": "2014-08-15 09:23:29", "user": 1204643, "closed_at": "2014-08-15 09:23:29", "id": 40329870, "title": "Time clock monotonic", "url": "https://api.github.com/repos/ruby/ruby/issues/701", "created_at": "2014-08-15 07:51:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52285893", "text": "Use bugs.ruby-lang.org for feature requests.\n- https://github.com/ruby/ruby/blob/trunk/CONTRIBUTING.md\n- https://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute\n", "created_at": "2014-08-15 08:42:37", "user": 29440, "id": 52285893}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/52288703", "text": "Moved to correct tracker. \n", "created_at": "2014-08-15 09:23:29", "user": 1204643, "id": 52288703}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because the yield runs arbitrary application code it's possible the\nunderlying file descriptor is closed during the block.\nThis prevents developers from having to wrap all `CSV.open` calls in a `begin`...`rescue` block to catch `Errno::EBADF`\n", "labels": [], "number": 702, "updated_at": "2014-11-13 00:14:53", "user": 2071, "closed_at": "2014-11-13 00:14:53", "id": 40442629, "title": "Don't attempt to close a closed IO object", "url": "https://api.github.com/repos/ruby/ruby/issues/702", "created_at": "2014-08-17 20:27:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/62819762", "text": "Moved here: https://bugs.ruby-lang.org/issues/10504\n", "created_at": "2014-11-13 00:14:53", "user": 2071, "id": 62819762}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Prior to this commit it was difficult to catch and properly handle\ninvalid encodings in URIs. It's unsafe to `rescue ArgumentError` and\ntreat all caught exceptions similarly.\nThis commit allows application developers to properly handle malformed\nURIs separate from other kinds of problems that may occur in their app.\n", "labels": [], "number": 703, "updated_at": "2014-11-13 00:14:30", "user": 2071, "closed_at": "2014-11-13 00:14:30", "id": 40659597, "title": "Raise a specific error when %-encoding is invalid", "url": "https://api.github.com/repos/ruby/ruby/issues/703", "created_at": "2014-08-20 03:07:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/62819704", "text": "Moved here: https://bugs.ruby-lang.org/issues/10503\n", "created_at": "2014-11-13 00:14:30", "user": 2071, "id": 62819704}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello!\nThis PR contains tiny refactor for `lib/logger.rb`.\n`%6N` - it's a microseconds with leading zeros, just what the doctor ordered. :)\n", "labels": [], "number": 704, "updated_at": "2014-08-25 04:01:22", "user": 5562931, "closed_at": "2014-08-25 04:01:22", "id": 41005721, "title": "Use \"%6N\" (strftime) to format microseconds.", "url": "https://api.github.com/repos/ruby/ruby/issues/704", "created_at": "2014-08-24 11:29:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53189864", "text": "Travis CI build failed in some unexpected place...\n\n```\n  1) Error:\nTestIO#test_advise:\nErrno::EINVAL: Invalid argument - /tmp/test_io20140824-24682-jape3l (0, 0, willneed)\n    /home/travis/build/ruby/ruby/test/ruby/test_io.rb:2447:in `advise'\n    /home/travis/build/ruby/ruby/test/ruby/test_io.rb:2447:in `block (4 levels) in test_advise'\n. . .\n\n15496 tests, 2785478 assertions, 0 failures, 1 errors, 64 skips\n```\n", "created_at": "2014-08-24 11:55:17", "user": 5562931, "id": 53189864}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53190751", "text": "Seems like that is not my changes breaks the build.\nNow, all is good.\n", "created_at": "2014-08-24 12:22:43", "user": 5562931, "id": 53190751}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 705, "updated_at": "2014-10-04 00:12:50", "user": 45995, "closed_at": "2014-10-04 00:12:50", "id": 41144423, "title": "change nodoc,  win32ole samples, add wait input to quit program", "url": "https://api.github.com/repos/ruby/ruby/issues/705", "created_at": "2014-08-26 07:30:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 706, "updated_at": "2018-02-23 03:06:48", "user": 51043, "closed_at": "None", "id": 41342118, "title": "Add File.openat() for thread safe file operations.", "url": "https://api.github.com/repos/ruby/ruby/issues/706", "created_at": "2014-08-27 23:37:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53711103", "text": "What about platforms without `openat(2)`?\n", "created_at": "2014-08-28 12:10:50", "user": 168854, "id": 53711103}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53714714", "text": "Please use [our tracker](https://bugs.ruby-lang.org/search?q=openat) when proposing a new feature.\n", "created_at": "2014-08-28 12:49:14", "user": 10236, "id": 53714714}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53805001", "text": "Platforms missing openat() won't have the method available.\n", "created_at": "2014-08-28 21:39:37", "user": 51043, "id": 53805001}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53805908", "text": "Moving discussion to https://bugs.ruby-lang.org/issues/10181\n", "created_at": "2014-08-28 21:47:46", "user": 51043, "id": 53805908}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53843116", "text": "+1\n", "created_at": "2014-08-29 06:54:09", "user": 315008, "id": 53843116}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This fixes an issue where the `copy` argument was not properly being passed into `#convert_to_array`.\nThus making it possible for the internal structure of matrix to be mutated from outside the instance.\n\nThank you @shyouhei for the [git contributing guide](https://github.com/shyouhei/ruby/wiki/noncommitterhowto)\n\n/cc @shyouhei @tenderlove\n", "labels": [], "number": 707, "updated_at": "2014-10-03 04:10:49", "user": 128298, "closed_at": "2014-10-03 03:43:47", "id": 41544382, "title": "Fix Matrix.rows copy bug", "url": "https://api.github.com/repos/ruby/ruby/issues/707", "created_at": "2014-08-29 22:14:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/53962423", "text": "Good catch :+1: \nI'll merge it in soon.\nThanks\n", "created_at": "2014-08-30 15:59:57", "user": 33770, "id": 53962423}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54143724", "text": "@marcandre Awesome, thanks. :-)\n", "created_at": "2014-09-02 12:26:30", "user": 128298, "id": 54143724}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57527607", "text": "@marcandre any news on this? No rush or anything, I know you guys are busy, I'm just giddy I might have my first commit to ruby :-)\n", "created_at": "2014-10-01 19:56:07", "user": 128298, "id": 57527607}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57748491", "text": "Woo! :-)\nThanks! @marcandre \n", "created_at": "2014-10-03 03:46:48", "user": 128298, "id": 57748491}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57748716", "text": "Thanks @arronmabrey for the good patch and for pinging me about the delay. In any case, it'll be in 2.2.0\n", "created_at": "2014-10-03 03:51:33", "user": 33770, "id": 57748716}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I ported simplecov into ruby core for test coverage. \n### Usage\n\n``` shell\nCOVERAGE=1 make test-all TESTS=test/cgi\n```\n\nit generate test coverage to `coverage` direcotory.\n### Limitation\n- test_coverage.rb and test_process.rb broke test suit with SimpleCov\n- some tests failed randomly.\n### TODO\n- more reduce bundled simplecov(additional configuration, formatter, etc)\n- measure rubyspec coverage\n\n/cc @colszowka\n", "labels": [], "number": 708, "updated_at": "2014-09-03 03:12:39", "user": 12301, "closed_at": "2014-09-03 03:12:37", "id": 41576339, "title": "[experimental] test coverage using SimpleCov", "url": "https://api.github.com/repos/ruby/ruby/issues/708", "created_at": "2014-08-31 02:04:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Test a mountpoint that does not exist.\nMaybe `/outerspace` is enough ?\n", "labels": [], "number": 709, "updated_at": "2014-09-04 11:26:23", "user": 98590, "closed_at": "2014-09-04 11:26:23", "id": 41848683, "title": "test_pathname.rb: mountpoint enoent", "url": "https://api.github.com/repos/ruby/ruby/issues/709", "created_at": "2014-09-03 18:22:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54404954", "text": "I think `/nonexistent` is enough.\nIt used for nobody's home directory in Debian/Ubuntu.\n\n```\n% getent passwd nobody\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\n% LANG=C stat /nonexistent\nstat: cannot stat `/nonexistent': No such file or directory\n```\n", "created_at": "2014-09-04 04:19:16", "user": 11857, "id": 54404954}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54454291", "text": "Is it normal the build is failing with clang ?\n", "created_at": "2014-09-04 11:10:13", "user": 98590, "id": 54454291}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54455156", "text": "@spk np, travis is failed by timeout sometimes.\n", "created_at": "2014-09-04 11:16:10", "user": 12301, "id": 54455156}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54455689", "text": "Ok ! Thanks !\n", "created_at": "2014-09-04 11:19:53", "user": 98590, "id": 54455689}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added some missing tests in csv library\n", "labels": [], "number": 710, "updated_at": "2014-09-05 09:38:11", "user": 98590, "closed_at": "2014-09-05 09:38:11", "id": 41969568, "title": "Tests csv", "url": "https://api.github.com/repos/ruby/ruby/issues/710", "created_at": "2014-09-04 18:34:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54604268", "text": "Thanks. merged at https://github.com/ruby/ruby/commit/7e3b185a257213bc3c18e06a0ea648fbbdf937ae\n", "created_at": "2014-09-05 09:38:11", "user": 12301, "id": 54604268}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## This addresses the XSS issue reported in JQuery bug #9521 and fixed in https://github.com/jquery/jquery/commit/db9e023e62c1ff5d8f21ed9868ab6878da2005e9.\n\nI noticed the copy of JQuery in the RDoc generator contains a known XSS security vulnerability that was fixed in JQuery mainline.  It's a single character fix so rather than updating to the newest version of JQuery, it's easy enough just to patch the code to eliminate the.  Simple enough but if you prefer a discussion on ruby-dev, I am happy to initiate it.\n", "labels": [], "number": 711, "updated_at": "2014-09-05 23:36:42", "user": 3953235, "closed_at": "2014-09-05 23:29:53", "id": 42100069, "title": "Manually apply JQuery fix for XSS bug (#9521)", "url": "https://api.github.com/repos/ruby/ruby/issues/711", "created_at": "2014-09-05 23:09:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54693717", "text": "I can't make heads or tails of this patch, so I'm just going to bump jQuery to the latest `1.6.x` in RDoc and then backport to Ruby\n", "created_at": "2014-09-05 23:29:49", "user": 277819, "id": 54693717}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/54694096", "text": "Thanks zzak (and sorry the patch didn't show up clearly).  GitHub's diff doesn't like that the file is a single line and simply doesn't show the diff.  The XSS fix boils down to a single character fix; from this:\n\n/^(?:[^<]_(<[\\w\\W]+>)[^>]_$|#([\\w-]*)$)/,\n\nto this:\n\n/^(?:[^#<]_(<[\\w\\W]+>)[^>]_$|#([\\w-]*)$)/,\n\nNotice there's just a # in the fixed one, sandwiched before the ^ and <.\n\nUpgrading JQuery to the latest 1.6.x is a better idea than patching.  I believe the fix is in >= 1.6.2.\n", "created_at": "2014-09-05 23:36:42", "user": 3953235, "id": 54694096}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A little fix for iseq.c.\n\nget_line_info() have used linear search to find line info.\nI changed it to use a binary search.\n", "labels": [], "number": 712, "updated_at": "2014-11-26 12:13:11", "user": 10137, "closed_at": "None", "id": 42620760, "title": "* iseq.c: use binary search to find line info", "url": "https://api.github.com/repos/ruby/ruby/issues/712", "created_at": "2014-09-12 11:43:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55392588", "text": "ticket is https://bugs.ruby-lang.org/issues/10233 .\n", "created_at": "2014-09-12 11:52:00", "user": 10137, "id": 55392588}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`Pathname#relative_path_from` uses `String#casecmp` to compare strings on Windows. This can return nil for strings with different encodings, and the code previously assumed that it always returned a Fixnum.\n\nFor example:\n\n``` ruby\nPathname.new(\"foö\".encode(\"UTF-8\")).relative_path_from(\n    Pathname.new(\"bär\".encode(\"ISO-8859-1\")))\n```\n", "labels": [], "number": 713, "updated_at": "2014-09-26 21:48:37", "user": 188, "closed_at": "2014-09-15 01:32:23", "id": 42664482, "title": "Fix a Pathname#relative_path_from crash on Windows.", "url": "https://api.github.com/repos/ruby/ruby/issues/713", "created_at": "2014-09-12 19:53:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 714, "updated_at": "2014-09-15 00:46:27", "user": 60238, "closed_at": "2014-09-15 00:46:27", "id": 42681840, "title": "fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/714", "created_at": "2014-09-13 00:10:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently docs example suggests that Hash.store will return self instead of value - this patch updates example to show that Hash.store is returning value and update itself.\n", "labels": [], "number": 715, "updated_at": "2014-09-13 13:23:09", "user": 36869, "closed_at": "2014-09-13 13:23:09", "id": 42690986, "title": "Small fix for Hash.store docs", "url": "https://api.github.com/repos/ruby/ruby/issues/715", "created_at": "2014-09-13 09:17:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for fix https://github.com/ruby/ruby/pull/714\n", "labels": [], "number": 716, "updated_at": "2014-09-17 09:52:45", "user": 98590, "closed_at": "2014-09-17 02:38:55", "id": 42704269, "title": "fiddle/test_import.rb: added test for long long", "url": "https://api.github.com/repos/ruby/ruby/issues/716", "created_at": "2014-09-13 19:59:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55865141", "text": "`Fiddle::SIZEOF_LONG_LONG` may not be defined, and r47590 includes the test for it.\n", "created_at": "2014-09-17 08:43:19", "user": 16700, "id": 55865141}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55872118", "text": "Yes so much better !\n", "created_at": "2014-09-17 09:52:45", "user": 98590, "id": 55872118}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The sprintf handling for Rational added in 1d196e0d2bd99590d03a73d7e59aa87f7266f8e3 was only working for a limited subset of values.\n\nIn addition to specific tests for the first examples I encountered, I've added a (rather ugly) set of nested loops, which together will test many combinations of formatting options: we know that float formatting works correctly, so we can just assert that matching Rational values produce the same strings.\n\nThough [I have tangled with sprintf in a past life](https://github.com/rubinius/rubinius/commit/d6712a7fd110edcbe1b641e1f2a92c88473565d8), this is just a result of trial & error to get the added tests passing – it seems to behave much better, but I won't claim it's a complete implementation. The TODO on the non-`f` formats is untouched.\n\nThis should fix the consistent segfault we're seeing in the Rails (ActiveSupport) test suite.\n\n/cc @nobu :heart: :green_heart: :blue_heart: \n", "labels": [], "number": 717, "updated_at": "2014-09-14 23:14:40", "user": 1034, "closed_at": "2014-09-14 23:14:40", "id": 42727797, "title": "sprintf.c: improve rational 'f' format", "url": "https://api.github.com/repos/ruby/ruby/issues/717", "created_at": "2014-09-14 19:11:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/uri/rfc3986_parser.rb: specify a regexp for :OPAQUE; generic.rb\n  assumes it is present, and will refuse all values otherwise.\n", "labels": [], "number": 718, "updated_at": "2014-09-17 14:20:29", "user": 1034, "closed_at": "2014-09-17 14:20:29", "id": 42800191, "title": "uri/rfc3986_parser.rb: allow opaque to be set", "url": "https://api.github.com/repos/ruby/ruby/issues/718", "created_at": "2014-09-15 17:56:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55668315", "text": "@nurse Can you take a look?\n", "created_at": "2014-09-15 22:22:58", "user": 11493, "id": 55668315}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@charliesome /cc: @camilo\n\nThis makes the global method cache configurable at runtime via the `RUBY_GLOBAL_METHOD_CACHE_SIZE` environment variable.\n\nIncreasing the method cache from the default of 2k to 256k in Shopify has reduced the system-wide time spent in `st_lookup` and `vm_search_method` by about 4%:\n\nThe following are two 60 second profiles from one of our production app servers (`perf record -a -- sleep 60`):\n##### 2k method cache\n\n```\n     9.62%             ruby  ruby                           [.] vm_exec_core\n     7.97%             ruby  ruby                           [.] st_lookup\n     2.28%             ruby  ruby                           [.] vm_search_method\n     1.78%  kafka_sysv_mq_p  kafka_sysv_mq_producer         [.] siftdown\n     1.63%          splunkd  [kernel.kallsyms]              [k] isolate_migratepages_range\n     1.62%             ruby  ruby                           [.] vm_call_iseq_setup_normal\n     1.42%             ruby  ruby                           [.] newobj_of\n```\n##### 256k method cache\n\n```\n     7.12%             ruby  ruby                           [.] vm_exec_core\n     3.95%             ruby  ruby                           [.] st_lookup\n     2.49%          splunkd  splunkd                        [.] TailWatcher::findApplicableConfigs(Pathname const&, StatWrap const&, bool, std::map<Str, TailConfig const*, std::less<Str>, std::allocator<std::pair<Str const, TailConfig con\n     2.07%           docker  docker                         [.] index/suffixarray.(*suffixSortable).Less\n     1.65%  kafka_sysv_mq_p  kafka_sysv_mq_producer         [.] siftdown\n     1.65%             ruby  ruby                           [.] vm_search_method\n     1.37%          splunkd  libc-2.19.so                   [.] __memcmp_sse4_1\n     1.26%          splunkd  [kernel.kallsyms]              [k] isolate_migratepages_range\n     1.24%             ruby  ruby                           [.] newobj_of\n```\n", "labels": [], "number": 719, "updated_at": "2015-05-29 14:09:37", "user": 4303686, "closed_at": "2014-09-18 00:37:46", "id": 42877408, "title": "Configurable global method cache size", "url": "https://api.github.com/repos/ruby/ruby/issues/719", "created_at": "2014-09-16 12:44:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55757602", "text": ":+1: travis looks not happy tho\n", "created_at": "2014-09-16 15:08:44", "user": 7748, "id": 55757602}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55757890", "text": "@camilo yeah, I think that's unrelated (trunk is broken). When trunk is fixed I'll rebase and run again.\n", "created_at": "2014-09-16 15:10:28", "user": 4303686, "id": 55757890}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55885687", "text": "Very interesting. Is this value of 256k supposed to be determined by any means? Or is this meant to be fine-tuned based on each app's specific details?\n", "created_at": "2014-09-17 12:24:57", "user": 108369, "id": 55885687}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55888704", "text": "256k was somewhat arbitrary on our part. This adds about 10MB to the RSS of our unicorn workers, but given that they start at 550MB before forking it's a small price to pay. \n\nLike GC parameters, this should be fine-tuned for the application. That being said, we haven't really done any fine-tuning yet. I'm hoping to write a blog post about that sometime in the near future.\n", "created_at": "2014-09-17 12:54:36", "user": 4303686, "id": 55888704}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55891179", "text": "Thanks ! Ok I get it, looking forward to this blog post ! :+1: \n", "created_at": "2014-09-17 13:15:28", "user": 108369, "id": 55891179}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55978738", "text": "@nobu I've added a new commit that uses `calloc`.\n", "created_at": "2014-09-18 00:00:48", "user": 4303686, "id": 55978738}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70877328", "text": "thanks for the digging and [the nice blogpost](http://www.shopify.com/technology/16777156-tuning-rubys-global-method-cache) @csfrancis \n", "created_at": "2015-01-21 17:06:35", "user": 48745, "id": 70877328}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70888105", "text": "Thanks @phoet!\n", "created_at": "2015-01-21 18:01:58", "user": 4303686, "id": 70888105}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/106818045", "text": "Is the current default value of `GLOBAL_METHOD_CACHE_SIZE` appropriate for 2015? Discourse, GitLab, Redmine, Spree, and other serious Ruby projects require a bit more that that I presume.\n", "created_at": "2015-05-29 14:09:37", "user": 252023, "id": 106818045}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit removes the line argv[1] = NULL; This is to ensure that the\nps command performs correctly on operating systems that take the process\ntitle from memory, such as AIX or Solaris. Before this fix it would stop\nwriting the process title when it encountered the NULL pointer that\nargv[x] is getting assigned to. If a different argument is set to NULL\nbesides 1 it truncates after that argument. This fix allows for the\nentire argument to be written to process title since the logic is in\nplace to account for varying lengths of arguments.\n", "labels": [], "number": 720, "updated_at": "2015-03-16 03:55:40", "user": 3732489, "closed_at": "2015-03-16 03:54:54", "id": 42934076, "title": "(Feature #10090) Fix setproctitle bug on AIX", "url": "https://api.github.com/repos/ruby/ruby/issues/720", "created_at": "2014-09-16 21:11:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56201927", "text": "Would love to get some eyes on this simple PR and see if we can't get it merged in so I can avoid carrying a patch. \n", "created_at": "2014-09-19 16:37:47", "user": 344926, "id": 56201927}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81392213", "text": "https://bugs.ruby-lang.org/issues/10090\n", "created_at": "2015-03-16 03:55:40", "user": 12301, "id": 81392213}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 721, "updated_at": "2014-09-24 22:49:04", "user": 1717864, "closed_at": "2014-09-24 22:49:04", "id": 43013656, "title": "Remove error in build documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/721", "created_at": "2014-09-17 13:54:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56751045", "text": "It had fixed by 0ba78cb2\n", "created_at": "2014-09-24 22:49:04", "user": 37002, "id": 56751045}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "flat_map is faster and uses less object allocations.\nSee my bench setup & results: https://gist.github.com/wojtekmach/925a780b844dc1d7114a\n\nThanks to @sferik for a presentation on speeding up ruby: https://speakerdeck.com/sferik/writing-fast-ruby\n", "labels": [], "number": 722, "updated_at": "2014-09-17 22:45:26", "user": 76071, "closed_at": "2014-09-17 22:45:26", "id": 43067693, "title": "Replace map/flatten with flat_map", "url": "https://api.github.com/repos/ruby/ruby/issues/722", "created_at": "2014-09-17 22:05:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55969514", "text": "@nobu removed changes from `lib/mkmf.rb`\n", "created_at": "2014-09-17 22:22:23", "user": 76071, "id": 55969514}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55970522", "text": "Please be careful: `flat_map` only performs one level of flattening (i.e. `flatten(1)`), so the behavior may or may not be the same in each of these cases.\n", "created_at": "2014-09-17 22:28:55", "user": 10308, "id": 55970522}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/55972555", "text": "@sferik good point. I can confirm that the change in `net/http` is safe, but will need to dig deeper in rexml.\n", "created_at": "2014-09-17 22:45:26", "user": 76071, "id": 55972555}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR adds ability to run the test suites on OS X (10.9.4) on Travis CI.\n\nThe multi-OS feature has been enabled on ruby/ruby.\n\nA few things to note:\n1. A `before_install` task (`diff`) is allowed to fail. It is not clear why `make reconfig` creates a different configuration, or how this should be addressed on OS X.\n2. Uses OpenSSL installed by Homebrew.\n3. On OS X, parallel makes for `encs` and `exts` targets are disabled. Seems to present some race conditions frequently.\n4. A test is modified to allow it to pass on OS X. The existing threshold seems a bit too stringent.\n", "labels": [], "number": 723, "updated_at": "2014-09-20 03:38:11", "user": 25666, "closed_at": "2014-09-20 02:59:15", "id": 43209422, "title": "Enable Multi-OS feature to run tests on OS X workers", "url": "https://api.github.com/repos/ruby/ruby/issues/723", "created_at": "2014-09-19 06:47:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Pass over spacing incompatibilities in Date and DateTime docs.\n- Fix some sentences for proper Grammar\n- Fix some typos\n", "labels": [], "number": 724, "updated_at": "2014-10-12 18:26:13", "user": 567626, "closed_at": "2014-10-12 18:26:13", "id": 43290297, "title": "Date/Time doc fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/724", "created_at": "2014-09-19 22:49:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since the Symbol GC patch got merged, this might be unnecessary now, but I'm not sure.\n", "labels": [], "number": 725, "updated_at": "2015-02-02 01:55:55", "user": 451345, "closed_at": "2015-02-02 01:55:55", "id": 43315155, "title": "Remove security doc section about symbols", "url": "https://api.github.com/repos/ruby/ruby/issues/725", "created_at": "2014-09-20 17:28:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56282740", "text": "This section needs to be updated, not removed. It is still possible to create immortal symbols that cannot be garbage collected.\n\nI think it should also say something like \"prior to Ruby 2.2 all symbols are immortal and cannot be garbage collected\" so that people using the latest documentation aren't misled by accident when they run their program on older Ruby\n", "created_at": "2014-09-20 22:45:44", "user": 9831, "id": 56282740}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56283225", "text": "Do you have an example of creating a symbol that can't be garbage collected, and is it worth including in the doc? I've updated the branch to be far less aggressive about removing info.\n", "created_at": "2014-09-20 23:10:45", "user": 451345, "id": 56283225}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56283459", "text": "I don't recall the details. Maybe @authorNari can comment before I look them up\n", "created_at": "2014-09-20 23:21:54", "user": 9831, "id": 56283459}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56287908", "text": "I don't think we need to document past behavior\n", "created_at": "2014-09-21 03:49:09", "user": 277819, "id": 56287908}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57121447", "text": "The current sentences are totally wrong.\nSymbols generated by `to_sym` or `intern` can be collected.\nImmortal symbols are generated by `instance_variable_set`, `const_set`, `define_method`, etc.\n", "created_at": "2014-09-29 06:30:18", "user": 16700, "id": 57121447}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57250063", "text": "Okay, I updated the the doc to the best of my current knowledge.\n", "created_at": "2014-09-30 00:15:24", "user": 451345, "id": 57250063}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72375401", "text": "Hey everyone - can I get some guidance about what exactly has to change for this PR to be accepted?\n", "created_at": "2015-02-01 17:58:55", "user": 451345, "id": 72375401}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is some simple documentation clean up for lib/matrix.rb :smile:\n", "labels": [], "number": 726, "updated_at": "2014-09-24 22:54:56", "user": 625707, "closed_at": "2014-09-24 22:54:56", "id": 43670147, "title": "Cleans up spelling/word errors in documentation for Matrix", "url": "https://api.github.com/repos/ruby/ruby/issues/726", "created_at": "2014-09-23 19:07:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/56751604", "text": "This patch has merged by r47710. Thanks.\n", "created_at": "2014-09-24 22:54:56", "user": 37002, "id": 56751604}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 727, "updated_at": "2014-09-29 03:31:03", "user": 37290, "closed_at": "2014-09-29 03:22:12", "id": 44253815, "title": "Added additional options for WEBrick's SSLContext", "url": "https://api.github.com/repos/ruby/ruby/issues/727", "created_at": "2014-09-29 03:16:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "from the recent commits (and trying to write my own bindings against TypedData) i think that the stuff that is shipped with ruby itself like stdlib should follow the rules of the new TypedData even for hidden stuff like that metadata, and should not just disable that warnings \nand shouldnt the untypedData removed somhow later?\n\nsorry that this are singlefile commits i did it with the github interface\n", "labels": [], "number": 728, "updated_at": "2014-11-26 12:13:11", "user": 225553, "closed_at": "None", "id": 44299936, "title": "Typed digest", "url": "https://api.github.com/repos/ruby/ruby/issues/728", "created_at": "2014-09-29 14:34:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57256871", "text": "Sharing data across dynamically loaded extension libraries doesn't always work, e.g., Windows.\n", "created_at": "2014-09-30 01:52:32", "user": 16700, "id": 57256871}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes the gcc and Sun atomic intrinsics used by the ATOMIC_INC and ATOMIC_DEC macros.\n- For Win32, the macros return the new value after the increment/decrement\n- For gcc and Sun, the macros return the value prior to the increment/decrement\n\nSimply using *_fetch instead of fetch_* ensures the behavior is coherent for all platforms.\nFrom a quick search, it seems the only place where ATOMIC_INC and ATOMIC_DEC is used is not affected by this issue as it doesn't really care about the atomic properties of the operation, so this is mostly future-proofing the macros.\n", "labels": [], "number": 729, "updated_at": "2017-09-12 05:39:06", "user": 3615018, "closed_at": "None", "id": 44472004, "title": "Fixed atomic correctness for gcc intrinsics used by ATOMIC_INC/ATOMIC_DEC", "url": "https://api.github.com/repos/ruby/ruby/issues/729", "created_at": "2014-09-30 17:00:14", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Unsure if people are actively editing these flags for development, however these methods have been commented out since 2007/2008\n", "labels": [], "number": 730, "updated_at": "2014-10-01 09:19:46", "user": 22493, "closed_at": "2014-10-01 09:19:46", "id": 44526038, "title": "remove commented out code", "url": "https://api.github.com/repos/ruby/ruby/issues/730", "created_at": "2014-10-01 03:58:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57417243", "text": "OK.\n", "created_at": "2014-10-01 04:19:19", "user": 9558, "id": 57417243}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57438609", "text": "@nolman Thanks. I applied your patch at https://github.com/ruby/ruby/commit/2b0cc32c1a74da7eba2fd5dfbe07a57e8228b5a8\n", "created_at": "2014-10-01 09:19:46", "user": 12301, "id": 57438609}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When the `:DoNotReverseLookup` option was originally added to `WEBrick::Config::General` hash in [this commit](https://github.com/ruby/ruby/commit/0d8a0904d93e9600ccd095eabd5e4165c15987ff), the intent was to set `sock.do_not_reverse_lookup` to true **only if** the value of `:DoNotReverseLookup` is **truthy**. Here is the original implementation in webrick/server.rb in that original commit:\n\n```\nif @config[:DoNotReverseLookup]\n  sock.do_not_reverse_lookup = true\nend\n```\n\nHowever, at a later point in time, this code in webrick/server.rb got inadvertently simplified to this:\n\n```\nsock.do_not_reverse_lookup = config[:DoNotReverseLookup]\n```\n\nThis new code does not represent the original intent of the `:DoNotReverseLookup` option. Since `:DoNotReverseLookup` is `nil` by default, this code effectively sets `sock.do_not_reverse_lookup` to **false** unless `:DoNotReverseLookup` is **explicitly** set to true. The original code left `sock.do_not_reverse_lookup` alone unless `:DoNotReverseLookup` was explicitly set to true. When left alone, `sock.do_not_reverse_lookup` would naturally default to the global `Socket.do_not_reverse_lookup` value currently in effect. And since the default value of `Socket.do_not_reverse_lookup` is true, `sock.do_not_reverse_lookup` would be **true** as well, which is the opposite of the result we are currently getting.\n\nThis is a very subtle and insidious bug, since reverse look-up rarely causes slowness in development, but it becomes an intermittent bug in production, depending on the host's network environment. This strange intermittent slowness problem is then very difficult to trace back to its root cause in WEBrick's default configuration.\n\nThis pull request resolves the issue and provides test coverage for the `:DoNotReverseLookup` option based on the following expected behavior:\n\n```\n+--------------------------------------------------------------------------+\n|        Expected interaction between Socket.do_not_reverse_lookup         |\n|            and WEBrick::Config::General[:DoNotReverseLookup]             |\n+----------------------------+---------------------------------------------+\n|                            |WEBrick::Config::General[:DoNotReverseLookup]|\n+----------------------------+--------------+---------------+--------------+\n|Socket.do_not_reverse_lookup|     TRUE     |     FALSE     |     NIL      |\n+----------------------------+--------------+---------------+--------------+\n|            TRUE            |     true     |     false     |     true     |\n+----------------------------+--------------+---------------+--------------+\n|            FALSE           |     true     |     false     |     false    |\n+----------------------------+--------------+---------------+--------------+\n```\n", "labels": [], "number": 731, "updated_at": "2015-03-16 12:45:41", "user": 77592, "closed_at": "2015-03-16 08:44:13", "id": 44546281, "title": "Fix regression bug in WEBrick's :DoNotReverseLookup config option implementation", "url": "https://api.github.com/repos/ruby/ruby/issues/731", "created_at": "2014-10-01 09:51:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/57590055", "text": "A little background - a [user's story](http://vais.github.io/2014/10/01/webrick-do-not-reverse-lookup/) for this pull request :)\n", "created_at": "2014-10-02 06:39:58", "user": 77592, "id": 57590055}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81634056", "text": "Thanks, @hsbt, you made my day! :)\n", "created_at": "2015-03-16 12:45:41", "user": 77592, "id": 81634056}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed a minor typo in the comment when inspecting the source of the pkg_config method.\n", "labels": [], "number": 732, "updated_at": "2014-10-08 15:28:20", "user": 24955, "closed_at": "2014-10-08 15:28:20", "id": 45207698, "title": "Fix minor typo in comment in pkg_config method", "url": "https://api.github.com/repos/ruby/ruby/issues/732", "created_at": "2014-10-08 06:05:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58376094", "text": "\"iff\" is not a typo.\n", "created_at": "2014-10-08 15:28:20", "user": 16700, "id": 58376094}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Fix rendering of [UNIXSocket.html#recv_io](http://www.ruby-doc.org/stdlib-2.1.0/libdoc/socket/rdoc/UNIXSocket.html#method-i-recv_io)\n- Fix sentence\n### Rendering before\n\n![screen shot 2014-10-08 at 13 11 24](https://cloud.githubusercontent.com/assets/290596/4558160/5ab90652-4edc-11e4-9ed3-01f01a108165.png)\n### After\n\n![screen shot 2014-10-08 at 13 11 41](https://cloud.githubusercontent.com/assets/290596/4558161/5fd1f4f0-4edc-11e4-8d60-3cb43e2a3d8c.png)\n", "labels": [], "number": 733, "updated_at": "2014-10-11 00:38:46", "user": 290596, "closed_at": "2014-10-11 00:38:46", "id": 45231865, "title": "Render example correctly", "url": "https://api.github.com/repos/ruby/ruby/issues/733", "created_at": "2014-10-08 11:19:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- variable.c (rb_const_get_0): warn deprecated constant reference.\n- variable.c (rb_mod_deprecate_constant): mark constants to be\n  warned as deprecated.\n", "labels": [], "number": 734, "updated_at": "2015-07-30 04:20:43", "user": 16700, "closed_at": "2015-07-30 04:20:42", "id": 45257805, "title": "variable.c: Module#deprecate_constant", "url": "https://api.github.com/repos/ruby/ruby/issues/734", "created_at": "2014-10-08 15:25:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "make ID immortal always.\n", "labels": [], "number": 735, "updated_at": "2014-10-14 07:33:26", "user": 16700, "closed_at": "2014-10-14 07:33:26", "id": 45339638, "title": "Id2sym", "url": "https://api.github.com/repos/ruby/ruby/issues/735", "created_at": "2014-10-09 08:22:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This new version executes an order of magnitude faster.\n\n```\nrequire 'benchmark'\nrequire 'prime'\n\ndef prime?(n)\n  return true if n == 2\n  return false if n % 2 == 0 || n < 2\n  (3..(n**0.5).floor).step(2) { |i|\n    return false if n % i == 0\n  }\n  true\nend\n\n# Current Method\nputs Benchmark.measure {\n  (1..1_000_000).each { |i| i.prime? }\n}\n\n# Improved\nputs Benchmark.measure {\n  # Current Method\n  (1..1_000_000).each { |i| prime?(i) }\n}\n\n# Current Method\nputs Benchmark.measure {\n  1000.times {\n    (1..1_000).each { |i| i.prime? }\n  }\n}\n\n# Improved\nputs Benchmark.measure {\n  1000.times {\n    (1..1_000).each { |i| prime?(i) }\n  }\n}\n```\n", "labels": [], "number": 736, "updated_at": "2015-10-20 03:24:35", "user": 350357, "closed_at": "2015-10-20 03:24:35", "id": 45436808, "title": "Rewrote #prime? to be much faster.", "url": "https://api.github.com/repos/ruby/ruby/issues/736", "created_at": "2014-10-10 01:21:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58609225", "text": "Looking at the `prime` library's code, there are some blocks that are needlessly captured, and there's even a useless `loop do`. Fixing this doubles performance. Still, you're right that use simple code will run faster.\n\nI've opened https://bugs.ruby-lang.org/issues/10354 with more details.\n", "created_at": "2014-10-10 03:43:25", "user": 33770, "id": 58609225}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58807768", "text": "Dunno Ruby. Just taking a look outta curiosity. However, I've got a very fast Java algorithm. Dunno how trusty-worthy it is. If any of you can convert it to Ruby, here it is:  :alien:  \n\nhttp://forum.Processing.org/two/discussion/7526/generating-large-prime-numbers\n\n``` Java\nstatic final boolean isPrimeJS(long n) {\n  if (n <= 5L)  return n >= 2L & n != 4L;\n  if ((n&1L) == 0L | n%3L == 0L | n%5L == 0L)  return false;\n\n  int i = -23, sqrtN = (int)Math.sqrt(n) + 1;\n  while ((i+=30) <= sqrtN)  if\n    ( n%i      == 0L\n    | n%(i+4)  == 0L\n    | n%(i+6)  == 0L\n    | n%(i+10) == 0L\n    | n%(i+12) == 0L\n    | n%(i+16) == 0L\n    | n%(i+22) == 0L\n    | n%(i+24) == 0L)       return false;\n\n  return true;\n}\n```\n", "created_at": "2014-10-12 16:23:48", "user": 6551569, "id": 58807768}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58820453", "text": "Since this improvement is getting some attention, I rewrote `prime?` again using a better algorithm.  It is about 2x better than my previous submission.\n\noriginal method:  24.59\nmy first submission:  4.27\nmy latest submission:  2.76\n- benchmarked with ruby-2.1.3 on Integers\n", "created_at": "2014-10-12 20:10:11", "user": 350357, "id": 58820453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58834574", "text": "@nslocum's current implementation uses 6 steps like this previous Java 1 I had before the more optimized 30 step I posted above:\n\n``` Java\nstatic final boolean isPrimeLong(long n) {\n  //if (n == 2L | n == 3L)  return true;\n  if (n <= 3L)  return n >= 2L;\n\n  //if (n < 2L || (n&1L) == 0L || n%3L == 0L)  return false;\n  if ((n&1L) == 0L | n%3L == 0L)  return false;\n\n  long i = -1L, sqrtN = (long)Math.sqrt(n) + 1L;\n  while ((i+=6L) <= sqrtN)\n    if (n%i == 0L || n%(i+2L) == 0L)  return false;\n\n  return true;\n}\n```\n\nIn my Java's benchmark, the 30 step is about 1.3x faster than 6 step!\nDunno how precise the 30-step is, but it's a good alternative candidate for **isProbablePrime()**!  :innocent:\n\nP.S.: Loved the `return n >= 2  if n <= 3;` part! 1 less condition!!!   :clap:  \n", "created_at": "2014-10-13 01:42:56", "user": 6551569, "id": 58834574}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/59411716", "text": "@nslocum This trivial change seems to eek out a tiny improvement:\n\n``` ruby\ndef prime?(n)\n  return false if n % 2 == 0 || n < 2\n  (3..(n**0.5).floor).step(2) { |i|\n    return false if n % i == 0 && n != 2\n  }\n  true\nend\n```\n", "created_at": "2014-10-16 18:56:57", "user": 378214, "id": 59411716}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72765536", "text": "Another tiny improvement eek, according to my benchmarks:\n\n``` ruby\ndef prime?(n)\n  return false if n.even? || n < 2\n  (3..(n**0.5).floor).step(2) { |i|\n    return false if n % i == 0 && n != 2\n  }\n  true\nend\n```\n", "created_at": "2015-02-04 00:18:20", "user": 7573396, "id": 72765536}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/149417004", "text": "Fixed, see https://bugs.ruby-lang.org/issues/10354\n", "created_at": "2015-10-20 03:24:35", "user": 33770, "id": 149417004}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Bug #10315]\n", "labels": [], "number": 737, "updated_at": "2014-10-11 04:51:35", "user": 16700, "closed_at": "2014-10-11 04:51:35", "id": 45541202, "title": "Hash dup order", "url": "https://api.github.com/repos/ruby/ruby/issues/737", "created_at": "2014-10-11 04:23:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 738, "updated_at": "2014-10-12 01:42:37", "user": 5356517, "closed_at": "2014-10-12 01:42:37", "id": 45566903, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/738", "created_at": "2014-10-12 01:16:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This example won't compile because the init is not valid C.\n\nI didn't update the Japanese version, should I do that too?\n", "labels": [], "number": 739, "updated_at": "2014-10-13 06:00:14", "user": 27786, "closed_at": "2014-10-12 23:47:19", "id": 45580813, "title": "small fix for extension example", "url": "https://api.github.com/repos/ruby/ruby/issues/739", "created_at": "2014-10-12 14:07:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58828058", "text": "@steveklabnik LGTM Thank you! <3\n", "created_at": "2014-10-12 23:47:05", "user": 277819, "id": 58828058}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/58848989", "text": "Thanks for the quick merge! :D <3\n", "created_at": "2014-10-13 06:00:14", "user": 27786, "id": 58848989}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, the error message about frozen object contains camel cased class name.\n\nFor example:\n\n``` ruby\n[].freeze << 'hi'\n```\n\nthrows\n\n```\nRuntimeError: can't modify frozen Array\n```\n\nnot \n\n```\nRuntimeError: can't modify frozen array\n```\n", "labels": [], "number": 740, "updated_at": "2014-10-14 22:19:03", "user": 290782, "closed_at": "2014-10-14 19:58:22", "id": 45765367, "title": "fix doc about frozen object", "url": "https://api.github.com/repos/ruby/ruby/issues/740", "created_at": "2014-10-14 15:39:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/59108455", "text": "@tricknotes Merged, thank you! <3\n", "created_at": "2014-10-14 20:11:57", "user": 277819, "id": 59108455}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 741, "updated_at": "2014-10-14 22:57:14", "user": 5266933, "closed_at": "2014-10-14 22:57:14", "id": 45810591, "title": "Add matrix adjugate", "url": "https://api.github.com/repos/ruby/ruby/issues/741", "created_at": "2014-10-14 22:57:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In my server I have few ip address. When I send email I want to choose the ip address from which send.\n", "labels": [], "number": 742, "updated_at": "2018-02-23 03:06:50", "user": 576091, "closed_at": "None", "id": 46172625, "title": "Add ability to set source_ip for SMTP", "url": "https://api.github.com/repos/ruby/ruby/issues/742", "created_at": "2014-10-18 12:01:25", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Kernel#String tries not `to_s` but `to_str` first.\n\nThe follwing source:\nrb_String(VALUE val)\nhttps://github.com/ruby/ruby/blob/trunk/object.c#L3010\n\nrb_check_string_type\nhttps://github.com/ruby/ruby/blob/trunk/string.c#L1745\n", "labels": [], "number": 743, "updated_at": "2014-11-04 03:39:22", "user": 1078126, "closed_at": "2014-11-04 03:39:22", "id": 46263434, "title": "Fix document of Kernel.Stirng", "url": "https://api.github.com/repos/ruby/ruby/issues/743", "created_at": "2014-10-20 12:03:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This clarifies the documentation for the skip_blanks option to the CSV library.\n\nThe original documentation was confusing, since  \"CSV will skip over any rows with no content\" doesn't distinguish between \"rows that are literally blank\" and \"rows that contain only column separators but no data.\" This revised documentation explains that the skip_blanks option only handles the former case, and gives suggestions about how to handle the latter.\n", "labels": [], "number": 744, "updated_at": "2014-11-04 03:23:59", "user": 2341553, "closed_at": "2014-11-04 03:23:59", "id": 46640923, "title": "lib/csv.rb: Small documentation fix", "url": "https://api.github.com/repos/ruby/ruby/issues/744", "created_at": "2014-10-23 15:50:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60646849", "text": "I'm not sure why the CI build failed on a test that seems to have nothing to do with the code change?\n", "created_at": "2014-10-27 18:39:56", "user": 2341553, "id": 60646849}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update\n", "labels": [], "number": 745, "updated_at": "2014-10-23 21:45:26", "user": 7033952, "closed_at": "2014-10-23 21:45:26", "id": 46681030, "title": "Merge pull request #1 from ruby/trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/745", "created_at": "2014-10-23 21:43:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The issue pops up when `Method#to_proc` is called, then the binding of that proc is obtained, and one tries to modify (get/set) the local variables in that binding.\n\nLets examine the code below.\n\n``` ruby\nclass Foo\n  def bar\n  end\nend\n\ninstance = Foo.new\nmethod_proc = instance.method(:bar).to_proc\nb = method_proc.binding\n\nb.local_variable_set(:value, [1, 2, 3])\n```\n\nRunning this code with `ruby 2.1.3p242 (2014-09-19 revision 47630)` on OS X results in Segmentation Fault:\n\n```\nbug.rb:10: [BUG] Segmentation fault at 0x00000000000070\nruby 2.1.3p242 (2014-09-19 revision 47630) [x86_64-darwin14.0]\n\n-- Crash Report log information --------------------------------------------\n   See Crash Report log file under the one of following:\n     * ~/Library/Logs/CrashReporter\n     * /Library/Logs/CrashReporter\n     * ~/Library/Logs/DiagnosticReports\n     * /Library/Logs/DiagnosticReports\n   for more details.\n\n-- Control frame information -----------------------------------------------\nc:0003 p:---- s:0012 e:000011 CFUNC  :local_variable_set\nc:0002 p:0053 s:0007 E:001780 EVAL   bug.rb:10 [FINISH]\nc:0001 p:0000 s:0002 E:001838 TOP    [FINISH]\n\nbug.rb:10:in `<main>'\nbug.rb:10:in `local_variable_set'\n\n-- C level backtrace information -------------------------------------------\n0   libruby.2.1.0.dylib                 0x0000000104099ff0 rb_vm_bugreport + 144\n1   libruby.2.1.0.dylib                 0x0000000103f4b251 report_bug + 305\n2   libruby.2.1.0.dylib                 0x0000000103f4b114 rb_bug + 180\n3   libruby.2.1.0.dylib                 0x000000010401c04c sigsegv + 156\n4   libsystem_platform.dylib            0x00007fff8fb45f1a _sigtramp + 26\n5   libruby.2.1.0.dylib                 0x0000000103f5cfe0 bind_local_variable_set + 128\n6   ???                                 0x0000000000003170 0x0 + 12656\n\n-- Other runtime information -----------------------------------------------\n\n* Loaded script: bug.rb\n\n* Loaded features:\n\n    0 enumerator.so\n    1 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/2.1.0/x86_64-darwin14.0/enc/encdb.bundle\n    2 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/2.1.0/x86_64-darwin14.0/enc/trans/transdb.bundle\n    3 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/2.1.0/x86_64-darwin14.0/rbconfig.rb\n    4 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/compatibility.rb\n    5 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/defaults.rb\n    6 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/deprecate.rb\n    7 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/errors.rb\n    8 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/version.rb\n    9 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/requirement.rb\n   10 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/platform.rb\n   11 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/basic_specification.rb\n   12 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/stub_specification.rb\n   13 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/specification.rb\n   14 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/exceptions.rb\n   15 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/core_ext/kernel_gem.rb\n   16 thread.rb\n   17 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/2.1.0/x86_64-darwin14.0/thread.bundle\n   18 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/2.1.0/monitor.rb\n   19 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems/core_ext/kernel_require.rb\n   20 /Users/s2gatev/.rvm/rubies/ruby-2.1.3/lib/ruby/site_ruby/2.1.0/rubygems.rb\n\n[NOTE]\nYou may have encountered a bug in the Ruby interpreter or extension libraries.\nBug reports are welcome.\nDon't forget to include the above Crash Report log file.\nFor details: http://www.ruby-lang.org/bugreport.html\n```\n\nI noticed the same issue is present in the trunk. The functionality for getting `Proc` out of `Method` seems to be discussed and accepted. I noticed that it was introduced with f331b5584edbf106ab85f4663ddbe55031176b3a.\n\nPerhaps I am not getting something right but I'm wondering if you have considered this scenario when introducing the change? Perhaps the fix should be different if so. I don't know if you are the right person to ask @nobu, but I am tagging you since you committed the change. I'd be very thankful if you can shed some light on this issue.\n\nThanks in advance!\n", "labels": [], "number": 746, "updated_at": "2015-01-03 01:42:17", "user": 1536145, "closed_at": "2015-01-03 01:42:17", "id": 46830871, "title": "Fix Segmentation Fault when getting binding of method made to proc", "url": "https://api.github.com/repos/ruby/ruby/issues/746", "created_at": "2014-10-26 03:22:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60507695", "text": "Please file a new ticket at [the BTS](https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new).\n\nYour patch prohibits all `Method`s from creating a binding.\nIt's not a correct fix.\n", "created_at": "2014-10-26 06:07:38", "user": 16700, "id": 60507695}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60515462", "text": "I have updated my proposal for solution and have filed a [ticket](https://bugs.ruby-lang.org/issues/10428).\n", "created_at": "2014-10-26 12:15:45", "user": 1536145, "id": 60515462}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68578785", "text": "this issue is fixed by e45b215fdd16f4fefc8f97f2391ef532f10c8f50\n\nI can't reproduce with current HEAD\n", "created_at": "2015-01-03 01:42:17", "user": 12301, "id": 68578785}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Docs currently lose information when parsing `Open3` comments (notice the `opts` hash with missing key [here](http://www.rubydoc.info/stdlib/open3/Open3.capture2e) and [here](http://www.ruby-doc.org/stdlib-2.1.3/libdoc/open3/rdoc/Open3.html#method-c-capture2e)). This commit wraps them in `<code>` tags, b/c that's what I saw used [elsewhere](https://github.com/ruby/ruby/blob/512c0364b3f526bef5bed1b224fbe6bb7f253eff/io.c#L9584)\n\n![docs-update](https://cloud.githubusercontent.com/assets/77495/4784000/89fcbad8-5d3e-11e4-9a4e-7c96ad95f46a.png)\n\nI'd do more, but couldn't figure out how docs officially get built (there's a number of tools), or if there was a documentation standard that I could use to guide my efforts (e.g. there appears to be cross-linking, but I don't really understand how the doc tool figures out what to apply it to, or when it should/shouldn't be used). A documentation standard (or even a paragraph of prose listing the tool/command and stream-of-consciousness thoughts) would make it a lot easier to contribute here, because more work went into inferring the right thing to do than into making the changes. If one does exist, maybe link it in README.\\* or CONTRIBUTING.md or https://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute\n", "labels": [], "number": 747, "updated_at": "2014-11-04 03:13:39", "user": 77495, "closed_at": "2014-11-04 03:13:39", "id": 46850884, "title": "lib/open3.rb: fix code formatting in documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/747", "created_at": "2014-10-26 18:49:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 748, "updated_at": "2014-10-27 06:53:51", "user": 16700, "closed_at": "2014-10-27 06:53:51", "id": 46872079, "title": "Ripper bug", "url": "https://api.github.com/repos/ruby/ruby/issues/748", "created_at": "2014-10-27 05:52:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 749, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 46872097, "title": "Feature#10298 float sum", "url": "https://api.github.com/repos/ruby/ruby/issues/749", "created_at": "2014-10-27 05:53:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 750, "updated_at": "2014-10-27 08:15:39", "user": 16700, "closed_at": "2014-10-27 08:15:39", "id": 46878586, "title": "Method proc binding receiver", "url": "https://api.github.com/repos/ruby/ruby/issues/750", "created_at": "2014-10-27 07:56:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Set here by [RefactorCop](http://refactorcop.r14.railsrumble.com/ruby/ruby)\n", "labels": [], "number": 751, "updated_at": "2014-12-04 00:50:42", "user": 1240504, "closed_at": "2014-12-04 00:48:24", "id": 46948000, "title": "Remove unused variable", "url": "https://api.github.com/repos/ruby/ruby/issues/751", "created_at": "2014-10-27 19:24:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65520016", "text": "We can't evaluate this changes because of tk doesn't have enough tests.\n", "created_at": "2014-12-04 00:49:35", "user": 12301, "id": 65520016}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Sent here by RefactorCop http://refactorcop.r14.railsrumble.com/ruby/ruby\n", "labels": [], "number": 752, "updated_at": "2014-12-04 00:48:22", "user": 325485, "closed_at": "2014-12-04 00:48:22", "id": 46948001, "title": "Remove unused variable", "url": "https://api.github.com/repos/ruby/ruby/issues/752", "created_at": "2014-10-27 19:24:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Found via RefactorCop\n", "labels": [], "number": 753, "updated_at": "2014-10-27 19:27:40", "user": 1240504, "closed_at": "2014-10-27 19:27:40", "id": 46948199, "title": "Remove unused variable", "url": "https://api.github.com/repos/ruby/ruby/issues/753", "created_at": "2014-10-27 19:25:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch revises the documentation of `Module#const_defined?`. Changes are:\n- Describes first the default behavior.\n- Documents autoload logic.\n- Documents that `const_missing` is not called if the constant is not present.\n- Inserts examples as the material they depict is introduced (instead of just one chunk at the end).\n- Removes parens from the sentence that says that `Object` is checked if the receiver is a module since that's a regular step of the lookup algorithm, not something to be deemphasized.\n- Revises some indentation.\n- Uniformizes the distance from code to \"#=>\"s to 3 spaces (mod vertical alignment).\n", "labels": [], "number": 754, "updated_at": "2015-01-29 05:18:07", "user": 3387, "closed_at": "2014-11-08 16:56:39", "id": 46959529, "title": "revises the documentation of Module#const_defined?", "url": "https://api.github.com/repos/ruby/ruby/issues/754", "created_at": "2014-10-27 21:06:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60671367", "text": "Looks like a good improvement, thanks :+1:\n", "created_at": "2014-10-27 21:20:22", "user": 33770, "id": 60671367}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60675804", "text": "@eregon good point, pushed an update.\n", "created_at": "2014-10-27 21:50:55", "user": 3387, "id": 60675804}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60724829", "text": "I have revised the patch to have the default behavior covered first, and only later explain what happens if `inherited` is false. This order not only is more natural, but the explanation reads better in my view, since in the previous version the examples used the default flag but the wording wasn't clear about it until you reached the paragraph about the flag.\n\nAlso, instead of the meaningless `M::A`, I have rewritten that example with `Admin::User`.\n\nAnd have revised the examples, in particular there's one involving `BasicObject` which is always a good source of counterexamples for constants.\n", "created_at": "2014-10-28 08:48:29", "user": 3387, "id": 60724829}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60814457", "text": "By the way, let me give some perspective to this PR.\n\nI am working on a guide about constants [to be contributed to the Ruby core docs](https://www.ruby-forum.com/topic/5620931). That guide is going to be as comprehensive and detailed as possible, but I believe API docs should not be repeated. My plan is to briefly mention them in the guide, but refer the reader to the actual API for details.\n\nSo this PR tries to bring that level of information to this method, and others would come probably.\n\nIn particular, in a future PR I'd add docs coverage for the constant path support @tenderlove added a while back.\n", "created_at": "2014-10-28 19:15:37", "user": 3387, "id": 60814457}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60930988", "text": "@nobu oh right, it assumes the autoload would succeed. Going to revise that and the spaces in a moment.\n", "created_at": "2014-10-29 14:18:00", "user": 3387, "id": 60930988}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/60932914", "text": "@nobu patch updated, thank you!\n", "created_at": "2014-10-29 14:28:42", "user": 3387, "id": 60932914}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/62264815", "text": "Committed at 61ad543a33, thanks!\n", "created_at": "2014-11-08 16:56:55", "user": 168854, "id": 62264815}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/62266032", "text": ":heart:\n", "created_at": "2014-11-08 17:31:41", "user": 3387, "id": 62266032}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/62269719", "text": ":clap: \n", "created_at": "2014-11-08 18:23:02", "user": 277819, "id": 62269719}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/71970628", "text": "@nobu I have seen symbols do not trigger autoloading, but strings do:\n\n```\nfxn@yeager:~/tmp $ cat foo.rb\nautoload :X, 'x'\n\np Object.const_defined?(:X)\np Object.const_defined?('X')\n\nfxn@yeager:~/tmp $ cat x.rb\nX = 1\np :AUTOLOADED\n\nfxn@yeager:~/tmp $ ruby -v -I. foo.rb\nruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-darwin14]\ntrue\n:AUTOLOADED\ntrue\n```\n\nWhat do you think? A bug maybe?\n", "created_at": "2015-01-29 05:18:07", "user": 3387, "id": 71970628}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pay special attention to changes to Win32API.rb, the arguments for DL::CFunc.new do not map 1:1 to Fiddle::Function.new.\n", "labels": [], "number": 755, "updated_at": "2015-06-17 17:51:06", "user": 270746, "closed_at": "2014-10-31 21:13:59", "id": 47330744, "title": "Remove DL as it's made redundant by Fiddle.", "url": "https://api.github.com/repos/ruby/ruby/issues/755", "created_at": "2014-10-30 21:30:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61178614", "text": "There was a ticket related to this, and I think we've decided to remove it: https://bugs.ruby-lang.org/issues/5458\n", "created_at": "2014-10-30 22:10:41", "user": 277819, "id": 61178614}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61178767", "text": "@tenderlove Could you review this?\n", "created_at": "2014-10-30 22:12:01", "user": 12301, "id": 61178767}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61180856", "text": "It looks good to me.  I'll try it out on a my machine and merge it in.\n", "created_at": "2014-10-30 22:29:51", "user": 3124, "id": 61180856}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61189119", "text": "I'm not sure what's up with the CI failures. Looks like the tests are trying to open enc/unicode/data/NormalizationTest.txt and failing even though the file is there.\n", "created_at": "2014-10-30 23:37:14", "user": 270746, "id": 61189119}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61201081", "text": "@1337807 I fixed build fails on travis. Please rebase or merge with mater branch.\n", "created_at": "2014-10-31 01:29:37", "user": 12301, "id": 61201081}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61208325", "text": "Thank you @hsbt!\n", "created_at": "2014-10-31 02:51:20", "user": 270746, "id": 61208325}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61332627", "text": "Merged in r48217. Thanks for your first commit!!!\n", "created_at": "2014-10-31 21:13:59", "user": 3124, "id": 61332627}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112826506", "text": "[Ruby is supposed to be following semantic versioning](https://www.ruby-lang.org/en/news/2013/12/21/ruby-version-policy-changes-with-2-1-0/). How on earth does removing dl not constitute a breaking change?\n\nOn Windows Ruby 2.0 you can do:\n\n``` ruby\nrequire 'dl/import'\n```\n\nbut on 2.1 you cannot? That is a breaking change. I don't care that there was a deprecation warning in 2.1, that warning should stay in place until ruby 3 where you can make whatever breaking changes you want.\n\nThis causes all sorts of problems with gems, such as https://github.com/net-ssh/net-ssh/pull/221. They worked around it by having a bunch of `RUBY_VERSION` checks. But inside of the same MAJOR.MINOR version, they should **not** have to do that.\n\n@tenderlove or others, any explanation on why this is okay? Or how it isn't a violation of [Semantic Versioning](http://semver.org/)?\n", "created_at": "2015-06-17 14:37:48", "user": 3189231, "id": 112826506}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112843894", "text": "Ruby does not follow _the_ Semantic Versioning.  Please read the article you pointed to again.\n", "created_at": "2015-06-17 15:22:44", "user": 10236, "id": 112843894}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112860112", "text": "Oh ... so minor changes don't have to maintain APIs. That's frustrating from a semver standpoint because it's not semver. I made assumptions when it said \"more Semantic Versioning\" and didn't read all the details. Them linking to semver.org may have had something to do with my assuming their versioning had something to do with semver. But after reading what it actually says the MAJOR, MINOR, TINY, and PATCH mean, it really doesn't have much of anything to do with semver at all.\n\nSorry, I should've read the policy more before commenting.\n", "created_at": "2015-06-17 15:59:26", "user": 3189231, "id": 112860112}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112870405", "text": "There are some historical reasons we cannot adopt semver.  One of them is, ironically, related to compatibility.  Ruby, inside its source tree and as a community, has had a history of making an assumption that each of the three numbers MAJOR, MINOR and TEENY should consist of a single digit, and so many libraries, applications and build tools rely on it.  Due to this, we cannot waste digits for MAJOR and MINOR by incrementing them so frequently, or we will be running out of digits really soon.\n", "created_at": "2015-06-17 16:32:56", "user": 10236, "id": 112870405}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112890277", "text": "Maybe when Ruby 3 comes around they could actually follow semver and make the code in ruby that assumes single digits stop doing that. The current major and minor could become just major and increase on API breaks, teeny could become minor and only add new api changes and not delete things like this `dl` change, patch would be more like the semver patch.\n\nI don't know how many places in the Ruby source it's expecting single digit versions, but if gems are doing that and break, that seems okay to me if the major version goes up. I would expect that there will be lots of gems that stop working with a new major version anyway since that has happened in the past (such as with 1.9 vs 2.0 or even worse 1.8 vs 1.9). And if Ruby was actually following semver, this wouldn't be a weird surprising thing for stuff to break on a major version change.\n", "created_at": "2015-06-17 17:51:06", "user": 3189231, "id": 112890277}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The example was using `.include?` instead of `.member?`.\n\n[ci skip]\n", "labels": [], "number": 756, "updated_at": "2015-03-14 09:16:27", "user": 332276, "closed_at": "2015-03-14 09:16:27", "id": 47637735, "title": "[DOC] Fixes enum.member? documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/756", "created_at": "2014-11-03 20:06:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/80181620", "text": "@shamanime Hi, thank you for working on this stuff.\nActually this documentation is shared by both `#include?` and `#member?`, so I'm gonna add example for `#member?` like `#map` and `#collect`.\n", "created_at": "2015-03-14 09:02:07", "user": 5266933, "id": 80181620}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 757, "updated_at": "2014-12-07 07:17:27", "user": 1429315, "closed_at": "2014-12-07 02:22:00", "id": 47656932, "title": "Typo close -> closes.", "url": "https://api.github.com/repos/ruby/ruby/issues/757", "created_at": "2014-11-03 23:04:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/63089025", "text": "LGTM :+1:\n", "created_at": "2014-11-14 16:22:43", "user": 2791965, "id": 63089025}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "when net::http get response as chunked gzip.\n\nit drops last inflation. so it cause Z_BUF_ERROR.\n\nActually, this bug is not exist in 1.8.7, but it appears when maybe 2.x\n\nthere is test ruby code for this problems.\n\n``` ruby\nrequire 'net/https'\nrequire 'open-uri'\n\nurl = \"http://xe.sketchbooks.co.kr/806541\"\nuri = URI.parse(url.to_s)\nhttp = Net::HTTP::new(uri.host, uri.port)\n\nhttp_get = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(http_get)\n```\n", "labels": [], "number": 758, "updated_at": "2014-11-06 06:47:43", "user": 439301, "closed_at": "2014-11-06 06:47:43", "id": 47927601, "title": "fix http_chunked_gzip_decoding_error", "url": "https://api.github.com/repos/ruby/ruby/issues/758", "created_at": "2014-11-06 06:24:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/61934048", "text": "I close this patch because I miss something sorry. I will resend new patch.\n", "created_at": "2014-11-06 06:47:43", "user": 439301, "id": 61934048}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "OS X 10.10\nruby 2.1.4\nCompiler: clang\n\n```\n./configure --prefix ~/.rbenv/versions/2.1.4 --disable-install-doc --without-gcc --with-out-ext=tk --with-opt-dir=/usr/local/opt/libyaml:/usr/local/opt/openssl:/usr/local/opt/readline\n<..>\n```\n\n```\n$ make\n<..>\nconfiguring socket\nfixing apple's netinet6/in6.rb ...No such file or directory @ rb_sysopen - /usr/include/netinet6/in6.h\nFailed to configure socket. It will not be installed.\n<..>\n```\n\n```\nls /usr/include/netinet6/in6.h\ngls: cannot access /usr/include/netinet6/in6.h: No such file or directory\n```\n", "labels": [], "number": 759, "updated_at": "2015-03-16 03:58:57", "user": 100999, "closed_at": "2015-03-16 03:58:57", "id": 47964747, "title": "Fix socket configuration on OS X 10.10", "url": "https://api.github.com/repos/ruby/ruby/issues/759", "created_at": "2014-11-06 14:01:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73406148", "text": "My Yosemite environments(clean install and upgrade install) have in6.h file.\n", "created_at": "2015-02-08 11:02:14", "user": 12301, "id": 73406148}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73415016", "text": "There is no `/usr/include` directory at all on a clean install.\n\n```\nMac-Admin:~ admin$ uname -a\nDarwin Mac-Admin.local 14.0.0 Darwin Kernel Version 14.0.0: Fri Sep 19 00:26:44 PDT 2014; root:xnu-2782.1.97~2/RELEASE_X86_64 x86_64\nMac-Admin:~ admin$ ls -al /usr/include/\nls: /usr/include/: No such file or directory\nMac-Admin:~ admin$ ls -al /usr\ntotal 8\ndrwxr-xr-x@   10 root  wheel    340 Nov  3 15:58 .\ndrwxr-xr-x    30 root  wheel   1088 Nov  3 18:20 ..\ndrwxr-xr-x     5 root  wheel    170 Sep 10 01:41 X11\nlrwxr-xr-x     1 root  wheel      3 Nov  3 15:58 X11R6 -> X11\ndrwxr-xr-x  1046 root  wheel  35564 Nov  3 15:57 bin\ndrwxr-xr-x   250 root  wheel   8500 Nov  3 15:52 lib\ndrwxr-xr-x   170 root  wheel   5780 Nov  3 16:14 libexec\ndrwxr-xr-x   244 root  wheel   8296 Nov  3 15:56 sbin\ndrwxr-xr-x    43 root  wheel   1462 Nov  3 15:56 share\ndrwxr-xr-x     4 root  wheel    136 Nov  3 15:34 standalone\n```\n\nI've got it with `Developer Tools`.\n\n```\nMac-Admin:~ admin$ ls /usr/include/netinet6/in6.h \n/usr/include/netinet6/in6.h\n```\n", "created_at": "2015-02-08 15:17:45", "user": 100999, "id": 73415016}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 760, "updated_at": "2014-11-17 07:32:03", "user": 60238, "closed_at": "2014-11-17 07:32:03", "id": 48876958, "title": "fix ChangeLog entry.", "url": "https://api.github.com/repos/ruby/ruby/issues/760", "created_at": "2014-11-15 06:21:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/63268826", "text": "I create issue on bugs.r-l.o: https://bugs.ruby-lang.org/issues/10521\n", "created_at": "2014-11-17 07:32:03", "user": 12301, "id": 63268826}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Clarify variable names\n- Add markup around inline example\n- Reordered examples to match descriptions\n", "labels": [], "number": 761, "updated_at": "2015-02-12 01:49:16", "user": 5466070, "closed_at": "2015-02-12 01:49:16", "id": 49016647, "title": "Improve Proc.call documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/761", "created_at": "2014-11-16 21:31:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Net::Http` supports an `ssl_version` parameter.  Unfortunately, the `Net::Http#connect` method passes the parameter via the `OpenSSL::SSL::SSLContext#set_params` method:\n\n```\n@ssl_context = OpenSSL::SSL::SSLContext.new\n@ssl_context.set_params(ssl_parameters)\n```\n\nIt appears based on debugging that `set_params` should not set the `ssl_version` despite it being a key in `DEFAULT_PARAMS` and `Net::Http#connect` should do something like the following:\n\n```\n@ssl_context = OpenSSL::SSL::SSLContext.new\n@ssl_context.set_params(ssl_parameters)\n@ssl_context.ssl_version = ssl_version\n```\n\nThe included test fails when `set_params` is called, but passes when only `ssl_version=` is called. \n", "labels": [], "number": 762, "updated_at": "2016-10-23 12:06:44", "user": 33120, "closed_at": "2016-10-23 12:06:44", "id": 49145120, "title": "Set ssl version from params", "url": "https://api.github.com/repos/ruby/ruby/issues/762", "created_at": "2014-11-17 21:05:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156405599", "text": "I tried this patch, but it [failed on travis](https://travis-ci.org/ruby/openssl/builds/90923748)\n", "created_at": "2015-11-13 11:41:50", "user": 277819, "id": 156405599}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/255585019", "text": "As commented by @hsbt, SSLContext#set_params seems to be working correctly and the test case failed because of the certificate verification error.\n", "created_at": "2016-10-23 12:06:44", "user": 1033740, "id": 255585019}], "assignees": [1033740, 1033740], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Get user and pass from http_proxy variable when specified, so that NET::HTTP can handle connections behind authenticated proxies automatically.\n", "labels": [], "number": 763, "updated_at": "2018-03-19 14:04:23", "user": 1385470, "closed_at": "2018-03-19 14:04:23", "id": 49170353, "title": "Retrive proxy user and password from http_proxy", "url": "https://api.github.com/repos/ruby/ruby/issues/763", "created_at": "2014-11-18 01:49:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68586311", "text": "This patch was merged by r49118, Thanks.\n", "created_at": "2015-01-03 07:23:20", "user": 37002, "id": 68586311}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68613041", "text": "this pull request is reverted.\n", "created_at": "2015-01-03 23:00:06", "user": 12301, "id": 68613041}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371793735", "text": "This was fixed on https://bugs.ruby-lang.org/issues/12921\r\nIMO can be closed.", "created_at": "2018-03-09 11:58:36", "user": 1037088, "id": 371793735}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Noticed there was a preposition missing for the [`Proc#arity`](http://ruby-doc.org/core-2.1.5/Proc.html#arity-method) docs.\n", "labels": [], "number": 764, "updated_at": "2014-12-01 02:09:41", "user": 3117356, "closed_at": "2014-12-01 02:09:41", "id": 49530796, "title": "grammar, 'same as a' for Proc#arity", "url": "https://api.github.com/repos/ruby/ruby/issues/764", "created_at": "2014-11-20 11:12:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "URI::Generic.build accepts URI components and users may not expect that a host component needs to be wrapped with square brackets since it's not providing a URI.\n#### Currently, we need to manually wrap ipv6 addess with brackets:\n\n``` ruby\nURI::HTTP.build(:host => \"[::1]\", :path => \"/bar/baz\")\n```\n#### An alternative below is not good because URI should be abstracting this:\n\n``` ruby\nuri = URI::HTTP.build(:path => \"/bar/baz\")\nuri.hostname = \"::1\"\nuri\n```\n#### When passing a uri to URI to parse, then it makes sense to require []:\n\n``` ruby\nURI(\"http://[::1]/bar/baz\")\n```\n#### But, since I'm building from uri components, I would prefer to support either:\n\n``` ruby\nURI::HTTP.build(:host => \"[::1]\", :path => \"/bar/baz\")\n# Or\nURI::HTTP.build(:host => \"::1\", :path => \"/bar/baz\")\n```\n\n**Note**\n- I added missing assertions to the existing build tests in the first commit.\n- I did not modify the else case in initialize(when arg_check is false) since ipv6 check seems similar to the existing host checks and should be bypassed in that case.\n", "labels": [], "number": 765, "updated_at": "2015-02-10 16:22:41", "user": 19339, "closed_at": "2014-12-01 17:37:35", "id": 49622556, "title": "Support bare ipv6 hosts in URI::Generic.build ", "url": "https://api.github.com/repos/ruby/ruby/issues/765", "created_at": "2014-11-20 21:48:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/63886198", "text": "@tenderlove This is the change I chatted with you about.\n", "created_at": "2014-11-20 21:48:40", "user": 19339, "id": 63886198}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/63888474", "text": "Looks good :+1: \n", "created_at": "2014-11-20 22:03:41", "user": 651659, "id": 63888474}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/63985684", "text": "@nurse does this look ok to merge?\n", "created_at": "2014-11-21 15:30:10", "user": 3124, "id": 63985684}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/64033997", "text": ":+1: This should make using URI in a lot of other places much simpler.\n", "created_at": "2014-11-21 20:37:48", "user": 52120, "id": 64033997}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 766, "updated_at": "2014-11-22 22:32:21", "user": 391371, "closed_at": "2014-11-22 22:32:21", "id": 49795894, "title": "* ext/psych/psych_parser.c: parse - move declaration into #ifdef", "url": "https://api.github.com/repos/ruby/ruby/issues/766", "created_at": "2014-11-22 15:53:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/64098097", "text": "\"move declaration of _conditionally used variable_\"?\n\nAnyway, you need to report to the upstream, https://github.com/tenderlove/psych\n", "created_at": "2014-11-22 22:32:21", "user": 16700, "id": 64098097}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 767, "updated_at": "2014-11-23 00:44:49", "user": 391371, "closed_at": "2014-11-22 22:47:52", "id": 49795980, "title": "* io.c (rb_io_sysread) - Remove redundant assignment of 'n'", "url": "https://api.github.com/repos/ruby/ruby/issues/767", "created_at": "2014-11-22 15:57:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pull Request\n", "labels": [], "number": 768, "updated_at": "2014-11-23 17:32:41", "user": 8963519, "closed_at": "2014-11-23 17:32:41", "id": 49832033, "title": "Ruby", "url": "https://api.github.com/repos/ruby/ruby/issues/768", "created_at": "2014-11-23 17:28:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 769, "updated_at": "2018-02-23 03:06:51", "user": 277819, "closed_at": "None", "id": 49982064, "title": "Tmpdir stdlib to create extension", "url": "https://api.github.com/repos/ruby/ruby/issues/769", "created_at": "2014-11-25 06:38:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/64424494", "text": "`Class` doesn't have `extends` method, and `Module#extend` accepts only modules.\n", "created_at": "2014-11-25 16:11:56", "user": 16700, "id": 64424494}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98885859", "text": "@nobu Sorry, I meant this to be a module and use prepend. Does that work for you?\n", "created_at": "2015-05-04 23:46:01", "user": 277819, "id": 98885859}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Previously Net::IMAP#validate_data referenced undefined variable `num`\n\nIntroduces NumValidator helper module that contains\nvalidators of 'number' and 'nz_number' data types (as per RFC 3501)\n", "labels": [], "number": 770, "updated_at": "2014-12-06 01:19:25", "user": 2079110, "closed_at": "2014-12-06 01:19:25", "id": 49993424, "title": "Fix undefined variable usage & refactor/DRY code", "url": "https://api.github.com/repos/ruby/ruby/issues/770", "created_at": "2014-11-25 09:28:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65519439", "text": "ping @shugo \n", "created_at": "2014-12-04 00:43:16", "user": 12301, "id": 65519439}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Verbatim copied from rake/doc/rake.1 @ v10.4.0\n\nFollows 3908d5d3303dbd3f20f106aa71b5c094b67ac577 (r48560)\nResolves jimweirich/rake#283\n", "labels": [], "number": 771, "updated_at": "2014-12-01 01:54:18", "user": 2079110, "closed_at": "2014-12-01 01:54:18", "id": 50008701, "title": "Update Rake man page", "url": "https://api.github.com/repos/ruby/ruby/issues/771", "created_at": "2014-11-25 10:34:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 772, "updated_at": "2014-11-27 01:04:14", "user": 645514, "closed_at": "2014-11-27 01:04:14", "id": 50237173, "title": "Fix typos in lib/matrix.rb [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/772", "created_at": "2014-11-26 23:11:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/64732464", "text": "Applied, thanks! :smile:\n", "created_at": "2014-11-27 01:04:14", "user": 33770, "id": 64732464}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- encoding.c - Remove redundant assignments\n- regparse.c - Remove redundant assignments\n", "labels": [], "number": 773, "updated_at": "2014-11-30 12:55:48", "user": 391371, "closed_at": "2014-11-30 12:55:48", "id": 50284139, "title": "Remove redundant assignments", "url": "https://api.github.com/repos/ruby/ruby/issues/773", "created_at": "2014-11-27 12:01:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/64984425", "text": "No, they are not redundant, just not enough tests.\n", "created_at": "2014-11-30 12:55:48", "user": 16700, "id": 64984425}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 774, "updated_at": "2014-12-04 00:42:42", "user": 7755586, "closed_at": "2014-12-04 00:42:42", "id": 50400501, "title": "edits on tool/eval.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/774", "created_at": "2014-11-28 19:58:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65010495", "text": "Please add details of this change.\n", "created_at": "2014-12-01 01:21:40", "user": 12301, "id": 65010495}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 775, "updated_at": "2014-12-01 06:04:29", "user": 235844, "closed_at": "2014-12-01 06:04:29", "id": 50461874, "title": "refinements are no longer experimental", "url": "https://api.github.com/repos/ruby/ruby/issues/775", "created_at": "2014-11-30 16:05:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65024212", "text": "fixed at 6ec023e56822ac9d3948cfbcf9a8c9e6bc9dbab9\n", "created_at": "2014-12-01 06:04:29", "user": 12301, "id": 65024212}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See: https://bugs.ruby-lang.org/issues/10017\n", "labels": [], "number": 776, "updated_at": "2016-03-02 12:42:58", "user": 76071, "closed_at": "2015-06-12 08:35:38", "id": 50472247, "title": "Add `Hash#fetch_values`", "url": "https://api.github.com/repos/ruby/ruby/issues/776", "created_at": "2014-11-30 21:56:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/66758742", "text": "I would be great to have a `fetch_values` and a `fetch_values!`, `fetch_values` shouldn't raise a error and `fetch_values!` should do it.\n", "created_at": "2014-12-12 10:57:02", "user": 165599, "id": 66758742}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/66759632", "text": "@timoschilling \n\n> Shouldn't this be `h.fetch_values(\"cow\", \"bird\") { |k| k.upcase } #=> [\"BOVINE\", \"BIRD\"]`\n\nno, we want to only invoke the block when the key is not present. \"cow\" key is present in the hash, \"bird\" isn't.\n\n> I would be great to have a fetch_values and a fetch_values!, fetch_values shouldn't raise a error and fetch_values! should do it.\n\nthere's already `Hash#values_at` that doesn't raise an error, and here `fetch_values` is supposed to be a companion method. See https://bugs.ruby-lang.org/issues/10017 for more information.\n", "created_at": "2014-12-12 11:06:09", "user": 76071, "id": 66759632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72389317", "text": "@nobu any comments about this? seems there was good initial feedback about this proposal: https://bugs.ruby-lang.org/issues/10017. Please let me know what can I do to push this forward\n", "created_at": "2015-02-01 22:49:23", "user": 76071, "id": 72389317}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "i make a pull from ruby:trunk to anil18:ser. copy the code\n", "labels": [], "number": 777, "updated_at": "2014-12-04 12:02:04", "user": 10059915, "closed_at": "2014-12-04 12:02:04", "id": 50964284, "title": "Ser", "url": "https://api.github.com/repos/ruby/ruby/issues/777", "created_at": "2014-12-04 11:26:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We have to generate the files which are required for a few of the benchmarks. IMO `benchmark/run.rb` should handle this.\n", "labels": [], "number": 778, "updated_at": "2014-12-05 05:44:01", "user": 4335742, "closed_at": "2014-12-05 05:44:01", "id": 51052907, "title": "Prepare 'fasta.output' before running benchmarks.", "url": "https://api.github.com/repos/ruby/ruby/issues/778", "created_at": "2014-12-05 01:30:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65748554", "text": "maybe run.rb is not maintained. could you try driver.rb?\n", "created_at": "2014-12-05 05:15:51", "user": 9558, "id": 65748554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/65750030", "text": "That worked :) Thanks!\n", "created_at": "2014-12-05 05:44:01", "user": 4335742, "id": 65750030}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is referencing `require` instead of `load`.\n", "labels": [], "number": 779, "updated_at": "2014-12-09 03:52:17", "user": 193936, "closed_at": "2014-12-09 03:52:17", "id": 51237310, "title": "Fix `rb_eval_string_wrap` documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/779", "created_at": "2014-12-07 23:55:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit adds documentation around the behavior of `String#chomp`\nwhen passed an empty string (a string with a length of zero). This is documented in\nthe Perl documentation for `#chomp`, but not in the Ruby documentation.\n", "labels": [], "number": 780, "updated_at": "2014-12-09 11:26:00", "user": 2751, "closed_at": "2014-12-09 11:26:00", "id": 51386224, "title": "add missing documentation around String#chomp", "url": "https://api.github.com/repos/ruby/ruby/issues/780", "created_at": "2014-12-09 04:13:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "try > tries\n", "labels": [], "number": 781, "updated_at": "2014-12-11 23:20:33", "user": 2499983, "closed_at": "2014-12-11 23:20:33", "id": 51729878, "title": "Fix spelling in docco for read", "url": "https://api.github.com/repos/ruby/ruby/issues/781", "created_at": "2014-12-11 19:52:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "bug_10591 - update regex to require one or more spaces (changed from zero or more) between the status code and the reason code.\n\nRFC2616 says\nStatus-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF\n\nhttp://grokbase.com/t/apache/dev/085mz81ecq/empty-reason-phrase-bz-44995-45092\nReason-Phrase = *<TEXT, excluding CR, LF>\nThis seems to imply that the Reason-Phrase can be empty.\n\nUpdated test cases to catch any regressions if the regex is changed at this point again.\n", "labels": [], "number": 782, "updated_at": "2014-12-23 18:11:18", "user": 441543, "closed_at": "2014-12-23 18:11:18", "id": 51876630, "title": "bug_10591 - update regex to require one or more spaces (changed from zer...", "url": "https://api.github.com/repos/ruby/ruby/issues/782", "created_at": "2014-12-13 04:48:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- The aim of this test is to aid other implementations in being\n  conformant with MRI.\n- The existing test calls GDBM#each_key with a block,\n- this commit tests that, when called without a block, the method\n  returns an Enumerator, and does not assume there is a block,\n- the 'gdbm' gem attempts to have identical behaviour to this\n  implementation, but assumes there is a block.\n", "labels": [], "number": 783, "updated_at": "2014-12-17 01:54:57", "user": 137838, "closed_at": "2014-12-17 01:54:56", "id": 51880887, "title": "test gdbm each_key called without a block", "url": "https://api.github.com/repos/ruby/ruby/issues/783", "created_at": "2014-12-13 08:19:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 784, "updated_at": "2014-12-15 01:49:06", "user": 5117472, "closed_at": "2014-12-15 01:48:52", "id": 51941064, "title": "Add semicolons to searcher.js", "url": "https://api.github.com/repos/ruby/ruby/issues/784", "created_at": "2014-12-15 01:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/66940825", "text": "This needs to be submitted upstream to RDoc instead, please.\n\nhttps://github.com/rdoc/rdoc\n", "created_at": "2014-12-15 01:48:52", "user": 277819, "id": 66940825}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- iseq.c (rb_method_for_self_aref, rb_method_for_self_aset): call\n  accessor functions directly, not to be affected by [] and []=\n  methods.  [ruby-core:66846] [Bug #10601]\n- struct.c (define_aref_method, define_aset_method): ditto.\n- vm_insnhelper.c (rb_vm_opt_struct_aref, rb_vm_opt_struct_aset):\n  direct accessors of Struct.\n", "labels": [], "number": 785, "updated_at": "2014-12-16 07:09:23", "user": 16700, "closed_at": "2014-12-16 07:09:23", "id": 52067143, "title": "iseq.c: struct accessors", "url": "https://api.github.com/repos/ruby/ruby/issues/785", "created_at": "2014-12-16 02:42:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 786, "updated_at": "2014-12-18 11:53:33", "user": 874635, "closed_at": "2014-12-18 11:52:44", "id": 52178173, "title": "Allow multiple assignment in conditionals. [Bug #10450]", "url": "https://api.github.com/repos/ruby/ruby/issues/786", "created_at": "2014-12-16 22:48:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/67475977", "text": "Retracting as a slightly altered version is being proposed on https://bugs.ruby-lang.org/issues/10617.\n", "created_at": "2014-12-18 11:52:44", "user": 874635, "id": 67475977}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request changes 'Tk::Tcllib::Plotchart.pixel_to_coords' and 'Tk::Tcllib::Plotchart::ChartMethod#pixel_to_coords' to invoke the appropriate function of Tcl.\n", "labels": [], "number": 787, "updated_at": "2014-12-27 01:12:02", "user": 3735304, "closed_at": "2014-12-27 01:12:02", "id": 52181565, "title": "ext/tk/lib/tkextlib/tcllib/plotchart.rb: pixel_to_coords should invoke pixelToCoords, not coordsToPixel.", "url": "https://api.github.com/repos/ruby/ruby/issues/787", "created_at": "2014-12-16 23:24:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed spelling of \"allocation\".\n", "labels": [], "number": 788, "updated_at": "2014-12-19 06:24:50", "user": 5892627, "closed_at": "2014-12-19 06:24:50", "id": 52358748, "title": "Fixed a small spelling mistake", "url": "https://api.github.com/repos/ruby/ruby/issues/788", "created_at": "2014-12-18 12:31:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/67602875", "text": "It has been fixed.\n", "created_at": "2014-12-19 06:24:50", "user": 16700, "id": 67602875}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`rb_eql` returns an `int`, but `hash_equal` implicitly casts it to `VALUE`. This means that `my_hash.eql?(my_hash_like_object)` returns `0` instead of `true` when the two instances are eql.\n", "labels": [], "number": 789, "updated_at": "2014-12-19 06:41:43", "user": 1782845, "closed_at": "2014-12-19 06:41:43", "id": 52388405, "title": "Fix implicit conversion from int to VALUE in Hash#eql?", "url": "https://api.github.com/repos/ruby/ruby/issues/789", "created_at": "2014-12-18 16:52:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 790, "updated_at": "2014-12-22 01:21:34", "user": 10137, "closed_at": "2014-12-22 01:21:34", "id": 52612437, "title": "Updated files", "url": "https://api.github.com/repos/ruby/ruby/issues/790", "created_at": "2014-12-22 01:17:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- re.c (rb_reg_to_proc): new method Regexp#to_proc, which returns\n  a Proc does matching.  [Feature#7883]\n", "labels": [], "number": 791, "updated_at": "2015-02-11 12:44:31", "user": 16700, "closed_at": "2015-02-11 12:44:31", "id": 52710560, "title": "re.c: Regexp#to_proc", "url": "https://api.github.com/repos/ruby/ruby/issues/791", "created_at": "2014-12-23 03:15:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73868313", "text": "Although I like the idea of adding this \"for consistency\", I'm not sure if there's a real need for it: Isn't the use case for this basically just solving the same problem as [Enumerable#grep](http://ruby-doc.org/core-2.2.0/Enumerable.html#method-i-grep)?\n\n```\n%w(abc def).select { |x| x =~/ab/ } # => [\"abc\"]\n%w(abc def).grep /ab/ # => [\"abc\"]\n\n%w(abc def).select(&/ab/) # => [\"abc\"] # Proposed\n```\n", "created_at": "2015-02-11 11:38:55", "user": 7573396, "id": 73868313}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73875272", "text": "I know, https://bugs.ruby-lang.org/issues/7883#note-12\nThis PR is just to run the CI.\n", "created_at": "2015-02-11 12:44:31", "user": 16700, "id": 73875272}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/io/console/console.c (console_dev): send the given arguments\n  to the opened console.  as a special case, do nothing if :close\n  is given.\n- test/lib/leakchecker.rb (LeakChecker#check_fd_leak): close if\n  console.\n", "labels": [], "number": 792, "updated_at": "2014-12-25 08:53:29", "user": 16700, "closed_at": "2014-12-25 08:53:29", "id": 52842443, "title": "console.c: IO.console arguments passing", "url": "https://api.github.com/repos/ruby/ruby/issues/792", "created_at": "2014-12-25 01:21:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 793, "updated_at": "2014-12-25 07:02:07", "user": 16700, "closed_at": "2014-12-25 07:02:07", "id": 52850743, "title": "Apple ignored char in path", "url": "https://api.github.com/repos/ruby/ruby/issues/793", "created_at": "2014-12-25 06:43:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "see https://github.com/ruby/www.ruby-lang.org/issues/921\n", "labels": [], "number": 794, "updated_at": "2014-12-27 01:16:28", "user": 12301, "closed_at": "2014-12-27 01:06:51", "id": 52944619, "title": "listed sha1 digests when making packaging", "url": "https://api.github.com/repos/ruby/ruby/issues/794", "created_at": "2014-12-27 00:59:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Replace `\\t` to `space` in the code example doc. It breaks YARD code\nhighlighting.  Ex: http://www.rubydoc.info/stdlib/socket/Socket#accept_nonblock-instance_method\n", "labels": [], "number": 795, "updated_at": "2014-12-27 04:10:32", "user": 195886, "closed_at": "2014-12-27 04:10:32", "id": 52946516, "title": "Improve Socket documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/795", "created_at": "2014-12-27 02:59:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi. It is my first time to submit a documentation patch and I was wondering if these kinds of PRs are accepted?\n\nI updated the documentation to improve legibility, as well as added UUID generation examples to the summary.\n", "labels": [], "number": 796, "updated_at": "2015-01-02 06:37:41", "user": 20772, "closed_at": "2015-01-02 06:37:41", "id": 52947532, "title": "Improve SecureRandom documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/796", "created_at": "2014-12-27 04:06:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A call to `Message#each_answer` does only include answers, however there are also two more kinds of\nresponses: Authority and Additional. Iterating through `Message#each_resource` allows us to retrieve\nall information from the `Message` object.\n\nThis is specially important if for example we are trying to retrieve NS entries from a gtld server\n(say `a.gtld-servers.net`) for a domain which is controlled by them. In this case this Message include\nthis information in the authority section, which was not being returned before with `Message#each_answer`.\n\nFor example, asking `199.19.56.1` (`a0.org.afilias-nst.info`) for `ruby-lang.org` without this change returns empty array, while with this change the authority section of the response is returned.\n\n```\nrequire 'resolv'\ndns = Resolv::DNS.new(:nameserver => ['199.19.56.1'])\nputs dns.getresources('ruby-lang.org', Resolv::DNS::Resource::IN::NS).map(&:name)\n```\n\nDig (`dig ns ruby-lang.org @199.19.56.1`) returns the information like this:\n\n```\n; <<>> DiG 9.8.3-P1 <<>> ns ruby-lang.org @199.19.56.1\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 17104\n;; flags: qr rd; QUERY: 1, ANSWER: 0, AUTHORITY: 2, ADDITIONAL: 0\n;; WARNING: recursion requested but not available\n\n;; QUESTION SECTION:\n;ruby-lang.org.         IN  NS\n\n;; AUTHORITY SECTION:\nruby-lang.org.      86400   IN  NS  support.netlab.jp.\nruby-lang.org.      86400   IN  NS  pichu.netlab.jp.\n\n;; Query time: 388 msec\n;; SERVER: 199.19.56.1#53(199.19.56.1)\n;; WHEN: Sat Dec 27 07:09:22 2014\n;; MSG SIZE  rcvd: 82\n```\n", "labels": [], "number": 797, "updated_at": "2018-01-01 17:48:36", "user": 8706, "closed_at": "2018-01-01 17:47:59", "id": 52949453, "title": "When retrieving information from the DNS message object get not only answers, but all resources", "url": "https://api.github.com/repos/ruby/ruby/issues/797", "created_at": "2014-12-27 06:11:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354665933", "text": "Got merged in https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/56583", "created_at": "2018-01-01 17:47:56", "user": 8706, "id": 354665933}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "when `GEM_HOME` is set the `Gem.dir` points to it during installation and the bundled gems are installed in wrong location, this PR fixes it by using proper `gem_dir` which is displayed earlier as the target for installation.\n", "labels": [], "number": 798, "updated_at": "2014-12-28 15:27:07", "user": 48054, "closed_at": "2014-12-28 14:50:55", "id": 52981081, "title": "fix target location for installing bundled gems", "url": "https://api.github.com/repos/ruby/ruby/issues/798", "created_at": "2014-12-28 13:26:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68207254", "text": "tracked the problem to https://github.com/ruby/ruby/commit/a7f03a4659d34a459f915a41f260a1b9299ef219 - by @nobu\n", "created_at": "2014-12-28 13:37:30", "user": 48054, "id": 68207254}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": " It breaks YARD doc method summary: http://www.rubydoc.info/stdlib/core/IO and http://www.rubydoc.info/stdlib/core/Process.\n", "labels": [], "number": 799, "updated_at": "2014-12-29 02:22:52", "user": 195886, "closed_at": "2014-12-29 01:38:39", "id": 53012453, "title": "Improve document for YARD doc.", "url": "https://api.github.com/repos/ruby/ruby/issues/799", "created_at": "2014-12-28 23:22:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68226541", "text": "Sounds like a bug of YARD.\n", "created_at": "2014-12-29 01:39:31", "user": 16700, "id": 68226541}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68227895", "text": "Thanks @nobu. I sent them a patch to fix this behaviour.\n", "created_at": "2014-12-29 02:22:52", "user": 195886, "id": 68227895}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "UNIX permissions are octal numbers and thus need to be given with a leading zero\n", "labels": [], "number": 800, "updated_at": "2014-12-30 00:35:06", "user": 637990, "closed_at": "2014-12-30 00:35:06", "id": 53065291, "title": "fix dbm doc", "url": "https://api.github.com/repos/ruby/ruby/issues/800", "created_at": "2014-12-29 19:31:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/10550\n", "labels": [], "number": 801, "updated_at": "2014-12-30 08:09:18", "user": 3877651, "closed_at": "2014-12-30 08:09:18", "id": 53071104, "title": "make Resolv::DNS::Name#== case-insensitive", "url": "https://api.github.com/repos/ruby/ruby/issues/801", "created_at": "2014-12-29 20:56:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68317040", "text": "Can you add testcase?\n", "created_at": "2014-12-29 23:58:52", "user": 12301, "id": 68317040}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68337769", "text": "merged at https://github.com/ruby/ruby/commit/69a7bb31f917bd68d78460216aa2ef274428790e\n", "created_at": "2014-12-30 08:09:18", "user": 12301, "id": 68337769}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It looks like @marcandre added `#round` to `Matrix` some years ago, but I would also like to be able to use this method with instances of `Vector`.\n\nBecause both `Matrix` and `Vector` both store their components in an underlying `Array`, and implement `#map` over that `Array`, I propose moving `Matrix#round` to `Matrix::RoundHelper` so that it may be included in both the `Matrix` and `Vector` classes and the functionality may be shared between them.\n", "labels": [], "number": 802, "updated_at": "2015-03-07 18:11:16", "user": 706922, "closed_at": "2015-03-05 23:45:56", "id": 53094249, "title": "adding #round to Vector as well as Matrix", "url": "https://api.github.com/repos/ruby/ruby/issues/802", "created_at": "2014-12-30 05:32:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68332937", "text": "Thanks for the PR.\n\nAdding `Vector#round` sounds fine.\n\nThe helper isn't a bad idea (although I'm not sure why you defined a `round_to` instead of `round` directly), but since the implementation is really so simple, I'm not sure it's really necessary. I think it might be best to keep it duplicated, for example so the documentation works.\n", "created_at": "2014-12-30 06:10:10", "user": 33770, "id": 68332937}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68366746", "text": "> I'm not sure why you defined a round_to instead of round directly\n\nI actually did this to allow the method to be documented properly in each module. But if we think it's okay to have that bit of repeated code, we won't have to worry about that anymore.\n\nI just pushed an amended commit.\n\nThanks @marcandre!\n", "created_at": "2014-12-30 15:43:06", "user": 706922, "id": 68366746}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/76996041", "text": "@marcandre should I submit this to the ruby issue tracker over at https://bugs.ruby-lang.org ? Is there any hope of this getting merged from here on github?\n", "created_at": "2015-03-03 17:46:52", "user": 706922, "id": 76996041}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77477709", "text": "Awesome, thanks for the reminder.\n", "created_at": "2015-03-05 23:45:56", "user": 33770, "id": 77477709}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77701654", "text": "Awesome, thanks so much!\n", "created_at": "2015-03-07 18:11:16", "user": 706922, "id": 77701654}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There was finger pointing earlier someone pointed at String#scrub tests for being incomprehensible. So I'm following @headius lead and opening a PR. Starting here and see where my time lets me go.\n\nThis is a pure refactoring, no functional code change in the slightest. Just moving code around to give each test case a more descriptive name.\n\nI don't know exactly what all these tests cases are doing but I've tried to take a best guess to get started to see if there is interest. Starting on github because its easier for me, when I'm done with String#scrub tests I'll move to redmine or flatten as required.\n\nOnly 10 assertions left in the original #test_scrub, I don't fully understand what they're doing so any advice would be great. Similarly if my names are incorrect just let me know what they should be! If this is too much talking on a PR I'll take discussions elsewhere.\n\n/cc @headius, @zzak.\n", "labels": [], "number": 803, "updated_at": "2015-01-02 19:04:53", "user": 2103728, "closed_at": "2015-01-02 06:51:09", "id": 53240089, "title": "Tidying up string scrub tests", "url": "https://api.github.com/repos/ruby/ruby/issues/803", "created_at": "2015-01-02 06:48:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68511217", "text": "I had idea a few hours ago and implemented just now only to find out @nobu had already done it since I forked this morning! \n", "created_at": "2015-01-02 06:51:09", "user": 2103728, "id": 68511217}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68552090", "text": "Thanks for jumping in anyway! Keep it up...we have a lot of work to do.\n- Charlie (mobile)\n  On Jan 2, 2015 12:51 AM, \"brocktimus\" notifications@github.com wrote:\n\n> Closed #803 https://github.com/ruby/ruby/pull/803.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ruby/ruby/pull/803#event-213374450.\n", "created_at": "2015-01-02 19:02:04", "user": 10135, "id": 68552090}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68552315", "text": ":+1: Thank you for pitching in\n", "created_at": "2015-01-02 19:04:53", "user": 277819, "id": 68552315}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The provision for this is in the implementation but a minor bug causes the regex\nto be /\\A\\z/. This commit fixes that bug.\n", "labels": [], "number": 804, "updated_at": "2015-05-19 02:35:29", "user": 78186, "closed_at": "2015-05-19 02:35:29", "id": 53317551, "title": "URI::Generic.build should accept port as a string", "url": "https://api.github.com/repos/ruby/ruby/issues/804", "created_at": "2015-01-03 22:35:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103293114", "text": "@nurse Can you review this?\n", "created_at": "2015-05-19 01:28:29", "user": 12301, "id": 103293114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This would give the ability to pass header names as symbols, e.g. when using httparty:\n\n``` ruby\nHTTParty.get('https://api.github.com', headers: { token: 'secret-token' })\n```\n\nI might be wrong, but I believe this will bring more consistency to multiple libraries that are using net/http since most of the times passing symbols as hash keys has become a standard in Ruby (or atleast in Rails).\n", "labels": [], "number": 805, "updated_at": "2015-02-08 11:14:31", "user": 1437202, "closed_at": "2015-02-08 11:14:31", "id": 53319833, "title": "Pass header names as symbols", "url": "https://api.github.com/repos/ruby/ruby/issues/805", "created_at": "2015-01-04 00:19:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So far if a key named 'modifiable' is assigned to OpenStruct such as:\n\n``` ruby\nos = OpenStruct.new(modifiable: true)\n```\n\nthe OpenStruct instance will define a public method called 'modifiable', overriding the already defined method for checking if the object is frozen. Everytime afterwards we will get an error when assigning attributes:\n\n``` ruby\nos.foo = :bar\n#=> NoMethodError: undefined method `[]=' for true:TrueClass\n```\n\nThis way we will be able to avoid that.\n", "labels": [], "number": 806, "updated_at": "2018-03-21 08:27:55", "user": 1437202, "closed_at": "2018-03-21 08:27:55", "id": 53355321, "title": "Enable assigning :modifiable attribute to OpenStruct.", "url": "https://api.github.com/repos/ruby/ruby/issues/806", "created_at": "2015-01-05 00:56:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69255737", "text": "Reject for the backward compatibilities, due to gems using internal methods.\n", "created_at": "2015-01-08 21:49:37", "user": 16700, "id": 69255737}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69469085", "text": "Which gems depend on using internal methods? Should you be concerned about other's libraries if they're using anything that's not in the Public API?\n", "created_at": "2015-01-10 19:45:13", "user": 1437202, "id": 69469085}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/374556125", "text": "The problem with modifiable and any other internal attributes is no longer there since \r\nd01d5e9. \r\n```ruby\r\nhead :016 > os = OpenStruct.new(modifiable: true)\r\n => #<OpenStruct modifiable=true>\r\nhead :017 > os.foo = :bar\r\n => :bar\r\nhead :018 > os.modifiable\r\n => true\r\nhead :019 >\r\n```\r\n\r\nIMO this PR can be closed.", "created_at": "2018-03-20 10:58:31", "user": 1037088, "id": 374556125}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 807, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 53356471, "title": "Feature#10098 timing safe eql", "url": "https://api.github.com/repos/ruby/ruby/issues/807", "created_at": "2015-01-05 01:30:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180809151", "text": "?\n", "created_at": "2016-02-06 16:53:05", "user": 1666682, "id": 180809151}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 808, "updated_at": "2015-01-08 06:52:24", "user": 77495, "closed_at": "2015-01-05 22:21:36", "id": 53453063, "title": "Open3 properly passes non-keyword hash args to spawn", "url": "https://api.github.com/repos/ruby/ruby/issues/808", "created_at": "2015-01-05 21:55:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/68792695", "text": "It seems the problem is integer options handling, not open3.\nI reported https://bugs.ruby-lang.org/issues/10699\n", "created_at": "2015-01-05 22:21:36", "user": 10538, "id": 68792695}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69038128", "text": "It seems the keyword arguments behavior is more difficult than I felt at first.\nRuby 2.1's open3 has same issue and it is not expected Ruby 2.1 will change keyword arguments behavior.\nSo I committed your patch to fix the problem now and make it backportable to Ruby 2.2 and Ruby 2.1.\nThank you.\n", "created_at": "2015-01-07 15:33:30", "user": 10538, "id": 69038128}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69142832", "text": "NP, thanks for pulling.\n", "created_at": "2015-01-08 06:52:24", "user": 77495, "id": 69142832}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`--disable-install-doc` skips rdoc indexes as well.\n\nSee: https://github.com/ruby/ruby/blob/trunk/configure.in#L3638\n", "labels": [], "number": 809, "updated_at": "2015-01-08 02:39:57", "user": 4335742, "closed_at": "2015-01-08 02:39:57", "id": 53706211, "title": "Remove redundant configuration option.", "url": "https://api.github.com/repos/ruby/ruby/issues/809", "created_at": "2015-01-08 01:59:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use `Hash#[]` instead of `Hash#include?`\n\nHere are some stupid benchmarks https://gist.github.com/ismaelga/68bb3ea51b4742f65699\nFor some reason the difference is not as linear as expected and in some rare cases `Hash#include?` actually runs faster. I must admit I don't know what could cause that.\n", "labels": [], "number": 810, "updated_at": "2015-02-12 17:28:42", "user": 492663, "closed_at": "2015-02-12 17:28:42", "id": 53946173, "title": "Tiny performance gain at Set#include?", "url": "https://api.github.com/repos/ruby/ruby/issues/810", "created_at": "2015-01-10 05:13:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74113451", "text": "Can be closed since this was merged: https://github.com/ruby/ruby/commit/709e0ecbda73ec5b6b16ea07383e68f0a58fedc5\n", "created_at": "2015-02-12 17:27:26", "user": 5091, "id": 74113451}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- array.c (rb_ary_select_bang, ary_reject_bang): linear\n  performance.  [ruby-core:67418] [Bug #10714]\n", "labels": [], "number": 811, "updated_at": "2015-01-15 02:04:55", "user": 16700, "closed_at": "2015-01-15 02:04:55", "id": 53959405, "title": "array.c: linear performance", "url": "https://api.github.com/repos/ruby/ruby/issues/811", "created_at": "2015-01-10 14:17:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "continuation of #798\n", "labels": [], "number": 812, "updated_at": "2015-01-13 13:02:23", "user": 48054, "closed_at": "2015-01-13 13:02:23", "id": 54001446, "title": "fix changing permissions of installed bundled gems", "url": "https://api.github.com/repos/ruby/ruby/issues/812", "created_at": "2015-01-11 19:19:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69507199", "text": "btw. not sure if `with_destdir` should be used here, the \"default\" gems don't use this method, so it should be either removed in \"bundled\" gems or added in \"default\" gems\n", "created_at": "2015-01-11 19:26:08", "user": 48054, "id": 69507199}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69697328", "text": "Won't rubygems support optional parameters to set permissions?\n", "created_at": "2015-01-13 05:25:35", "user": 16700, "id": 69697328}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69732240", "text": "currently rubygems sets the attributes based on content of the gem, as this is bad behavior I have opened a PR to use a default value that respects `umask` => https://github.com/rubygems/rubygems/pull/1041\n", "created_at": "2015-01-13 11:39:50", "user": 48054, "id": 69732240}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have opened an accompanying redmine ticket: https://redmine.ruby-lang.org/issues/10730\n\nI am aware that since this is a (small) feature PR, the discussion has to be on the redmine.\n\nPlease Note: The diff is deceptively large, if you look carefully you will notice that the change is actually small and the actual binary search algorithm remained completely intact. \n", "labels": [], "number": 813, "updated_at": "2015-06-16 05:51:54", "user": 1065097, "closed_at": "2015-06-16 05:51:54", "id": 54006949, "title": "Implement Array#bsearch_index method", "url": "https://api.github.com/repos/ruby/ruby/issues/813", "created_at": "2015-01-11 22:05:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112303459", "text": "This has now been accepted into Ruby Trunk: https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/50839\n", "created_at": "2015-06-16 05:51:54", "user": 1065097, "id": 112303459}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation appears to erroneously demonstrate the #to_a method instead of #entries.\n", "labels": [], "number": 814, "updated_at": "2015-01-12 19:30:36", "user": 46677, "closed_at": "2015-01-12 19:30:26", "id": 54089532, "title": "Fix documentation for Enumerable#entries", "url": "https://api.github.com/repos/ruby/ruby/issues/814", "created_at": "2015-01-12 18:35:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69628766", "text": "`#to_a` is a synonym iirc\n", "created_at": "2015-01-12 19:23:39", "user": 277819, "id": 69628766}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69629930", "text": "@zzak You do...\n\n```\nEnumerable.instance_method(:entries) == Enumerable.instance_method(:to_a)\n# => true \n```\n", "created_at": "2015-01-12 19:30:26", "user": 33770, "id": 69629930}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/10740\n", "labels": [], "number": 815, "updated_at": "2015-02-17 01:54:57", "user": 1919660, "closed_at": "2015-02-17 01:54:57", "id": 54262634, "title": "Make Base64.urlsafe methods actually urlsafe.", "url": "https://api.github.com/repos/ruby/ruby/issues/815", "created_at": "2015-01-13 23:15:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69842659", "text": "Looks good to me based on https://tools.ietf.org/html/rfc4648#section-5 and the \"padding\" section of http://en.wikipedia.org/wiki/Base64\n\nA strict reading of RFC4648 (section 3.2 in particular) might imply that one should allow the caller of these methods to decide whether they want to generate/require padding, but in the urlsafe case it seems better to omit padding, since including it defeats the point of making the encoding urlsafe.\n", "created_at": "2015-01-13 23:30:16", "user": 16878, "id": 69842659}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69843623", "text": "+1\n", "created_at": "2015-01-13 23:37:22", "user": 148319, "id": 69843623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/69850332", "text": ":+1: \n", "created_at": "2015-01-14 00:42:14", "user": 1090229, "id": 69850332}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70308489", "text": "Pushed a change, waiting for CI.  I don't actually know how to run the tests locally. :/\n", "created_at": "2015-01-16 19:31:44", "user": 1919660, "id": 70308489}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70311337", "text": "Travis doesn't run the unit tests. `make test` for all tests, `make test TESTS=subdir` to run just the tests in that subdirectory IIRC, `make help` should say\n", "created_at": "2015-01-16 19:49:37", "user": 9831, "id": 70311337}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70318993", "text": "Thanks so much, `make test-all TESTS=test/base64` did it for me.  Should be good to go now.\n", "created_at": "2015-01-16 20:42:39", "user": 1919660, "id": 70318993}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/70321058", "text": "@mame \n", "created_at": "2015-01-16 20:58:13", "user": 1919660, "id": 70321058}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74605746", "text": "merged at https://github.com/ruby/ruby/commit/6b6680945ed3274cddbc34fdfd410d74081a3e94\n", "created_at": "2015-02-17 01:54:57", "user": 12301, "id": 74605746}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Makefile.in (VPATH, NEWLINE_C), common.mk (common-srcs): make\n  and use newline.c under enc/trans directory, not toplevel.  no\n  longer search enc directory implicitly.\n- configure.in, enc/Makefile.in (BUILTIN_ENCS, BUILTIN_TRANSES):\n  prefix respective directory names to builtin encodings and\n  transcoder source names.\n", "labels": [], "number": 816, "updated_at": "2015-01-18 23:52:30", "user": 16700, "closed_at": "2015-01-18 23:52:30", "id": 54659096, "title": "builtin encodings and transcoder locations", "url": "https://api.github.com/repos/ruby/ruby/issues/816", "created_at": "2015-01-17 11:30:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 817, "updated_at": "2015-01-19 22:56:54", "user": 987638, "closed_at": "2015-01-19 18:02:25", "id": 54780075, "title": "fix documentation of birthtime", "url": "https://api.github.com/repos/ruby/ruby/issues/817", "created_at": "2015-01-19 15:54:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch allows a logger to be created that has a custom date format\nto the rotated log files when shift_age is set, instead of the hardcoded\nvalue (\"%Y%m%d\"), like so:\n\n```\nLogger.new('foo.log', 1024000, '%Y-%m-%d')\n```\n\nMaking this format configurable allows users to adapt their logs to\nrigid outside systems that might require strict formatting of file\nnames.\n\nSee https://bugs.ruby-lang.org/issues/10772\n", "labels": [], "number": 818, "updated_at": "2016-04-19 04:15:24", "user": 73104, "closed_at": "2016-04-18 15:16:16", "id": 55223638, "title": "Feature #10772: Add ability to change rotated log file extention", "url": "https://api.github.com/repos/ruby/ruby/issues/818", "created_at": "2015-01-22 23:19:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/211425542", "text": "fixed via https://github.com/ruby/ruby/commit/2c6f15b1ad90af37d7e0eefff7b3f5262e0a4c0b\n", "created_at": "2016-04-18 15:16:16", "user": 2290461, "id": 211425542}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/211722541", "text": "Thank you very much for adding this!\n", "created_at": "2016-04-19 04:15:24", "user": 73104, "id": 211722541}], "assignees": [2290461, 2290461], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 819, "updated_at": "2015-01-23 04:40:37", "user": 7078074, "closed_at": "2015-01-23 04:40:37", "id": 55243662, "title": "Update gcbench.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/819", "created_at": "2015-01-23 04:20:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/71146842", "text": "Unnecessary, and no descriptions.\n", "created_at": "2015-01-23 04:40:37", "user": 16700, "id": 71146842}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR restores using `break` from a block with nested begin-rescue.\nExample(it is valid on Ruby 2.2.0, 2.1.5):\n\n``` ruby\n2.times do\n  begin\n    raise\n  rescue\n    begin\n      raise\n    rescue\n      break\n    end\n  end\nend\n```\n", "labels": [], "number": 820, "updated_at": "2015-01-23 14:57:52", "user": 4456724, "closed_at": "2015-01-23 14:57:52", "id": 55283309, "title": "Fail to break from a block with nested begin-rescue", "url": "https://api.github.com/repos/ruby/ruby/issues/820", "created_at": "2015-01-23 13:53:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "BCrypt Ruby currently uses StringValuePtr to access strings and make comparisons with password. When updating to 2.2.0 we noticed that some passwords didn't work.\nAfter tracking the problem down to only form encoded requests of passwords with url encoded characters I found that the mri functions that Bcrypt Ruby is using are returning incorrectly terminated strings, resulting in password hashing being broken.\n\nI've narrowed it down to `str_buf_cat` when a string is in the heap but then moved to within the embedded section and then appending a zero length string. This results in the the string then being corrupt when being accessed through the `StringValuePtr` without taking account of the defined length within the `RString` object.\n\nEnsuring that the string is terminated in `str_make_independent_expand` when it is moved to an embedded string resolves the issue I've been seeing.\n\nI don't know whether this should be addressed here or whether the way that BCrypt Ruby is using the mri functions and whether it should be taking into account the length attribute within `RString`?\n\nReplicate the issue\n\n``` ruby\n#!/usr/bin/env ruby\n\nembedded_string = \"abcdefghi\"\nstring = embedded_string.gsub(\"efg\", \"123\")\n# This returns a non-embedded String object\n\nputs string\n# Without a puts the string is modified some where between the gsub and being\n# used in the str_append to be in the `ary` section of `RString`.\n# When puts is uses the string object is also modified:\n#  capa & shared within aux are modified\n\nnil_embedded_string = nil.to_s\nnon_terminated = \"#{string}#{nil_embedded_string}\"\n# as the length of `nil_embedded_string` is zero the string within `ary` is not\n# correctly terminated. (str_buf_cat)\n\n# Accessing non_terminated through mri method calls results in using an\n# unterminated string.\n# eg:\n# __some_function(non_terminated)\n#\n# void some_function(VALUE str) {\n#   printf(\"%s\\n\", StringValuePtr(str));\n# }\n# // This uses `ary` which is not correctly terminated\n```\n", "labels": [], "number": 821, "updated_at": "2015-01-26 02:41:52", "user": 287677, "closed_at": "2015-01-26 02:41:52", "id": 55435335, "title": "Terminate String when moved from heap to embedded.", "url": "https://api.github.com/repos/ruby/ruby/issues/821", "created_at": "2015-01-25 23:35:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes an intermittent SIGBUS observed on Linux x64. Possibly fixes https://bugs.ruby-lang.org/issues/10626.\n\nThe root problem is that if ASLR places the heap and stack regions too close together, the C stack can potentially grow into the heap. The Linux kernel handles this by raising a SIGBUS signal and terminating the process: http://lxr.free-electrons.com/source/mm/memory.c?v=3.16#L2635. Because Ruby C stacks grow dynamically, and Linux process stacks are not reserved/commited up front, it's possible for the heap the prevent the stack from growing to the size allowed by `ulimit`.\n\nI have written a small proof of concept that can reproduce the problem on Ruby 2.1.5: https://gist.github.com/csfrancis/46e360d401609275246c\n\nMy solution is to fully reserve the stack virtual address space at process start up. I do this by determining the current stack bounds, and then subtracting the available stack space (according to the process' `rlimit`) from the current `rsp`. Touching memory at that value reserves the address range for the stack (but only commits one physical page of memory). \n\nRight now, this is Linux ~~x64~~ only (other platforms will just no-op)~~, but it wouldn't be too difficult to implement the same solution for i386 as well~~.\n", "labels": [], "number": 822, "updated_at": "2015-02-01 18:07:04", "user": 4303686, "closed_at": "2015-01-31 03:07:36", "id": 55990897, "title": "Fix intermittent SIGBUS on x64 Linux", "url": "https://api.github.com/repos/ruby/ruby/issues/822", "created_at": "2015-01-30 03:36:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72230479", "text": "Thank you for the investigation and the patch.\n\nDoes following patch work?\n\n``` diff\ndiff --git i/thread_pthread.c w/thread_pthread.c\nindex 3ef316c..b7d0bf2 100644\n--- i/thread_pthread.c\n+++ w/thread_pthread.c\n@@ -675,4 +675,7 @@ ruby_init_stack(volatile VALUE *addr\n        native_main_thread.stack_maxsize = size;\n        native_main_thread.stack_start = stackaddr;\n+# if defined(__linux__) && (defined(__x86_64__) || defined(__i386__))\n+       *(volatile unsigned long long *)((char *)stackaddr - size) = 0;\n+# endif\n        return;\n    }\n```\n", "created_at": "2015-01-30 16:44:25", "user": 16700, "id": 72230479}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72253038", "text": "It didn't work outside gdb.\n\n``` diff\ndiff --git a/thread_pthread.c b/thread_pthread.c\nindex 3ef316c..94b3ef7 100644\n--- a/thread_pthread.c\n+++ b/thread_pthread.c\n@@ -653,6 +653,30 @@ space_size(size_t stack_size)\n     }\n }\n\n+#ifdef __linux__\n+static __attribute__((noinline)) void\n+reserve_stack(int dir, volatile char *limit, size_t size)\n+{\n+    volatile char buf[0x100];\n+    size -= sizeof(buf);   /* margin */\n+    if (STACK_GROW_DIRECTION > 0 || dir > 0) {\n+   limit += size;\n+   if (limit > buf + sizeof(buf)) {\n+       size = limit - (buf + sizeof(buf));\n+       limit = alloca(size);\n+       limit[size-1] = 0;\n+   }\n+    }\n+    else {\n+   limit -= size;\n+   if (buf > limit) {\n+       limit = alloca(buf - limit);\n+       limit[0] = 0;\n+   }\n+    }\n+}\n+#endif\n+\n #undef ruby_init_stack\n /* Set stack bottom of Ruby implementation.\n  *\n@@ -674,6 +698,9 @@ ruby_init_stack(volatile VALUE *addr\n    if (get_main_stack(&stackaddr, &size) == 0) {\n        native_main_thread.stack_maxsize = size;\n        native_main_thread.stack_start = stackaddr;\n+# if defined(__linux__)\n+       reserve_stack(STACK_UPPER((VALUE *)(void *)&addr, +1, -1), stackaddr, size);\n+# endif\n        return;\n    }\n     }\n```\n", "created_at": "2015-01-30 19:08:27", "user": 16700, "id": 72253038}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72254971", "text": "@nobu what was wrong with your first patch? Why doesn't that work?\n", "created_at": "2015-01-30 19:21:23", "user": 4303686, "id": 72254971}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72261165", "text": "First patch doesn't work because the Linux kernel appears to check if the access is related to `rsp` or if it is just a wild pointer.\n", "created_at": "2015-01-30 20:00:04", "user": 1551119, "id": 72261165}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72298188", "text": "@nobu I've created a new patch, based on your suggested patch.\n\nThe problem with your patch is that it doesn't check if `RLIMIT_STACK` is `RLIM_INFINITY`. In my development environment this was causing the build to fail because `make` sets `RLIMIT_STACK` to `RLIM_INFINITY`.\n", "created_at": "2015-01-31 01:35:02", "user": 4303686, "id": 72298188}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72298209", "text": "It seems that this patch increases memory usage even in the case it is unnecessary, doesn't it?\n", "created_at": "2015-01-31 01:35:32", "user": 16700, "id": 72298209}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72298477", "text": "> It seems that this patch increases memory usage even in the case it is unncessary, doesn't it?\n\nIt does, but very slightly. Even though we're fully reserving the entire stack region, only a single additional page is used (the memory that is touched by `limit[0] = 0;`):\n\n```\n7fffe43ee000-7fffe4bed000 rw-p 00000000 00:00 0                          [stack]\nSize:               8192 kB\nRss:                  44 kB\nPss:                  44 kB\nShared_Clean:          0 kB\nShared_Dirty:          0 kB\nPrivate_Clean:         0 kB\nPrivate_Dirty:        44 kB\nReferenced:           44 kB\nAnonymous:            44 kB\nAnonHugePages:         0 kB\nSwap:                  0 kB\nKernelPageSize:        4 kB\nMMUPageSize:           4 kB\nLocked:                0 kB\nVmFlags: rd wr mr mw me gd ac\n```\n\nThis is from my development machine with an 8MB stack. Notice RSS is only 44kb, even though 8MB is reserved.\n", "created_at": "2015-01-31 01:41:30", "user": 4303686, "id": 72298477}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72301077", "text": "The `get_stack()` change caused SEGV on my Virtualbox Ubuntu 14.\n", "created_at": "2015-01-31 02:44:39", "user": 16700, "id": 72301077}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72302108", "text": "Awesome @nobu - would you be able to backport this to 2.2?\n", "created_at": "2015-01-31 03:15:06", "user": 4303686, "id": 72302108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72305213", "text": "@csfrancis Wow, I spent significant time on this issue and would love to hear some more words how did you run into the issue and how did you approach diagnosing it further and finding a fix. I am also curious about two things:\n1. Why doesn't this problem then affect ordinary C programs? i mean your description doesn't mention anything very specific to the interpreter, except maybe \"Ruby C stacks grow dynamically\", but I am not really sure what you mean here.\n2. Do pthreads fit into this picture in any way? My impresion was that the Ruby process relies to some extent on pthreads for stack handling (there are always at least two threads running in the Ruby interpreter, from what I understand, the timer and the core thread, with their own separate stacks).\n", "created_at": "2015-01-31 05:11:16", "user": 26233, "id": 72305213}, {"reactions": {"heart": [578608]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72373643", "text": "> how did you run into the issue\n\nWe receive notifications when Ruby processes crash in our production environment (and they dump core). \n\n> how did you approach diagnosing it further \n\nThe core dump for this particular problem looked strange to me for a couple of reasons:\n- It crashed with a SIGBUS and not a SEGV, which is pretty unusual.\n- It crashed in a core VM function, `vm_call0_cfunc_with_frame`, which is called frequently.\n- The instruction that caused the SIGBUS was a `call`:\n  - `=> 0x00007ffef02b47ca <+698>:   callq  *0x18(%r13)`\n  - I verified that the target address was valid.\n\nI spent a bit of time investigating various theories, but finally found one that stood out. Given that the target address was valid `callq` instruction that was generating the SIGBUS, I realized what a `call` instruction actually does; it pushes the next instruction onto the stack and does an absolute jump to the target address. The value of the stack pointer in the faulting frame was:\n\n```\n(gdb) p $rsp\n$2 = (void *) 0x7fff006b9000\n```\n\nI found this to be suspicious because it was 4k aligned.\n\nA core file is just a memory dump of a process, it really has a wealth of information. Using `readelf` you can see the memory region layout of a given corefile. What it will show you is the mapping of memory region in the core file to the virtual address region in the process. For example:\n\n```\n[vagrant] ~ $ readelf -a core\n<...snip...>\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n<...snip...>\n  LOAD           0x000000001f6a0000 0x00007ffef1bb7000 0x0000000000000000\n                 0x000000000eb01000 0x000000000eb01000  RW     1000\n  LOAD           0x000000002e1a1000 0x00007fff006b8000 0x0000000000000000\n                 0x0000000000052000 0x0000000000052000  RW     1000\n```\n\nSo, what this tells me is that `0x00007ffef1bb7000` is `0xeb01000` bytes in size, which means it ranges from `0x7ffef1bb7000-0x7fff006b8000`. I determined that this was the heap for a few reasons:\n- It is one of the largest mappings in the process, and it doesn't map to any executable code.\n- There are a number of Ruby objects that live in this region. The Ruby GC uses `malloc` to allocate backend memory, so all Ruby objects live on the heap.\n\nWe can tell the mapping after the heap is the stack, because it starts at `0x7fff006b8000` (which you'll notice is 0x1000 away from `rsp` at the time of the SIGBUS). I'm not sure why, but I think the core file format coalesces the stack guard page into the main stack region.\n\nMy theory at this point was that the stack needed to grow in order to call a function, but couldn't because it was running into the heap. To prove that, I dug into the Linux kernel to figure out what happens when the stack needs to grow. Sure enough, that led me to the URL I pasted in the PR description: http://lxr.free-electrons.com/source/mm/memory.c?v=3.16#L2635. If you look at the function that's being called there, `check_stack_guard_page`, you'll see it fails if there's a region above/below that prevents the stack from growing: http://lxr.free-electrons.com/source/mm/memory.c?v=3.16#L2589. And when the stack can't grow, the kernel will raise a SIGBUS.\n\nAfter coming to this conclusion I wrote a proof of concept script. The script calls itself repeatedly, on each execution checking the distance between the heap and stack segments. If they're within a certain threshold, it allocates a large number of Ruby objects, and then calls a recursive function that will force the stack to grow. Because ASLR randomly places the heap and stack segments, this can take a long time to manifest on x64 (it took over 18k executions for me to hit it). However, because i386 has a much smaller virtual address space, I think this problem would occur much faster on that platform.\n\n> Why doesn't this problem then affect ordinary C programs?\n\nThis could totally affect ordinary C programs if they use a similar workload. What I meant regarding Ruby C stacks growing dynamically is that MRI does not have its own dedicated stack for Ruby code. Because Ruby code and C code share the same stack, if Ruby code calls a C function, it can cause the native stack to grow. \n\n> Do pthreads fit into this picture in any way?\n\nNative threads do have their own stacks. I haven't really investigated how pthreads handle stack allocation, but I suspect they could suffer from the same problem. In our case (Shopify), we're basically using Ruby in a single threaded fashion, so I doubt it would be an issue for us.\n", "created_at": "2015-02-01 17:19:28", "user": 4303686, "id": 72373643}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72375777", "text": "@csfrancis Wow, thank you so much for taking the time to write it up! If I understand you right, isn't this then in the end a flaw in the Linux memory management that perhaps should be reported in the Linux bug tracker?\n\nI went through some of the same hops you went, except I discovered this behaviour locally and was fortunate to start already with a semi-reprodicible test case (in the form of a huge app, but still). I ran the test case in valgrind, have seen that it does not crash then, then I ran it in gdb, did not crash either, finally I figured out a way of also reproducing it in gdb by using:\n\n```\nset disable-randomization off\n```\n\nwhich is quite telling now with your explanation in mind. Anyway, I was able to get a dissasembly and things like that, see my latter comments here:\n\nhttps://bugs.ruby-lang.org/issues/10626\n\nI also validated that the stack pointer is actually aligned and that the stack actually is way smaller than the ulimit -s. I just could not go further than that, and concluded it is most likely related to pthreads - even if you do not use threads at the Ruby level, the Ruby interpreter runs with two pthread threads - one for the timer and one executing the main Ruby thread and pthread's do some of their own magic regarding stack handling (eg. Ruby interpreter does pthread_attr_setstacksize). It would never occur to me a SIGBUS could be triggered in the way you presented, that is just crazy stuff that I don't think is documented anywhere, but of course I think you are right.\n\nHaving spent so much time on this, respect, man.\n", "created_at": "2015-02-01 18:07:04", "user": 26233, "id": 72375777}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently in Makefiles created by `Kernel#create_makefile`, there is no definition of `cxxflags` while the default value of `$CXXFLAGS` is `\"$(cxxflags)\"`.\n\nI think it is less astonishing to set the default value as bellow than the current value `\"\"`.\n\n``` ruby\ncxxflags = \"#{RbConfig::MAKEFILE_CONFIG['cxxflags']}\"\n```\n", "labels": [], "number": 823, "updated_at": "2015-02-03 03:28:14", "user": 1302759, "closed_at": "2015-02-03 03:28:14", "id": 56260967, "title": "Set default cxxflags for extension", "url": "https://api.github.com/repos/ruby/ruby/issues/823", "created_at": "2015-02-02 16:49:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Symbols can be garbage collected as of ruby 2.2 . Remove docs\nsaying that they can't be GC'ed.\n", "labels": [], "number": 824, "updated_at": "2015-02-05 20:08:48", "user": 766985, "closed_at": "2015-02-03 03:19:21", "id": 56323774, "title": "Remove outdated section about symbol gc", "url": "https://api.github.com/repos/ruby/ruby/issues/824", "created_at": "2015-02-03 02:09:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72585748", "text": "Not all symbols.\n", "created_at": "2015-02-03 03:19:21", "user": 16700, "id": 72585748}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72586082", "text": "@nobu \n\nMortal symbols are the one's that could be used to cause a DDOS right?\n\n~E\n", "created_at": "2015-02-03 03:23:33", "user": 766985, "id": 72586082}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72586679", "text": "@estsauver I think only _immortal_ symbols can cause a problem.\n\n@nobu: I feel there's a section that definitely needs to be updated. Did I misunderstand that `send`, `instance_variable_get`, etc..., won't create immortal symbols?\n", "created_at": "2015-02-03 03:30:36", "user": 33770, "id": 72586679}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72587197", "text": "@marcandre on further inspection, it does look like it possible to create some symbols that are immortal from user input. (http://www.sitepoint.com/symbol-gc-ruby-2-2/)\n\nInstead of a wholesale removal of this section, I will update this to make reference to the distinction between mortal and immortal in this section and open a new PR. \n", "created_at": "2015-02-03 03:37:14", "user": 766985, "id": 72587197}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72587549", "text": "@estsauver Here's a starting point:\n\n```\nSince version 2.2, mortal symbols can be garbage collected. Most symbols you\ncreate (e.g. by calling +to_sym+) are mortal.\n\nImmortal symbols will be created when defining a method (e.g. with +define_method+),\nsetting an instance variable (e.g. with +instance_variable_set+), creating a variable or\nconstant (e.g. with +const_set+) or by C extensions calling `ID2SYM`.\nIn those cases, you shouldn't use user input.\n\nOther calls that used to be vulnerable such as +to_sym+, +send+, +instance_variable_get+,\n+const_get+, etc. are no longer a threat.\n```\n", "created_at": "2015-02-03 03:42:11", "user": 33770, "id": 72587549}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72588171", "text": "@nobu: Did what I wrote sound right?\n", "created_at": "2015-02-03 03:50:35", "user": 33770, "id": 72588171}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72703254", "text": "@marcandre Absolutely correct.\n\nBut it is difficult to clarify that which is immortal symbol creation or not is.\nShould we write what operations are safe (to_sym, send and so on)?\n", "created_at": "2015-02-03 18:13:23", "user": 9558, "id": 72703254}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72885990", "text": "@ko1 I think it's important to list operations that are safe _and_ unsafe.\n\nI've committed an improved text, maybe someone can review it and improve the wording if need be (@zzak?)\n", "created_at": "2015-02-04 16:25:41", "user": 33770, "id": 72885990}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72889303", "text": "Argh, looks like there's a bug and both `send` and `__send__` create immortal symbols :frowning: \n`public_send` looks good.\n", "created_at": "2015-02-04 16:42:24", "user": 33770, "id": 72889303}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72915065", "text": "@marcandre I doubt that we can list _unsafe_ operations. For example, we can't list 3rd party C extensions.\n", "created_at": "2015-02-04 18:55:32", "user": 9558, "id": 72915065}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72918261", "text": "@ko1: We indeed have to mention C extensions, but we can list unsafe builtin operations. How would you modify the doc (as it reads after my change)?\n", "created_at": "2015-02-04 19:12:40", "user": 33770, "id": 72918261}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72918373", "text": "I think I've managed to patch all holes in `send` / `__send__` :four_leaf_clover: \n", "created_at": "2015-02-04 19:13:16", "user": 33770, "id": 72918373}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72926631", "text": "I was happy to vanquish my fear of `vm_insnhelper` :japanese_ogre:, but it defeated me in the end... \n\n@ko1 I've assigned [bug 10828](https://bugs.ruby-lang.org/issues/10828) to nobu, but maybe I should have assigned it to you?\n", "created_at": "2015-02-04 19:57:22", "user": 33770, "id": 72926631}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72999558", "text": "@marcandre I'm not sure how to guarantee which operations are safe and which operations are unsafe. For example, you don't mention about thread local variables. At least, I can't list all of unsafe operations.\n", "created_at": "2015-02-05 06:13:08", "user": 9558, "id": 72999558}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72999640", "text": "@marcandre Sorry, you mention about \"creating a variable\" for thread local variables.\n", "created_at": "2015-02-05 06:14:03", "user": 9558, "id": 72999640}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/72999876", "text": "ripper doesn't make any mortal symbols? There is ripper_id2sym() function.\n", "created_at": "2015-02-05 06:17:16", "user": 9558, "id": 72999876}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73117210", "text": "I found only legit uses of  `ripper_id2sym` and `ripper_intern`.\nI looked for other leaks and found some [when calling with keyword arguments](https://bugs.ruby-lang.org/issues/10831) :frowning: so I amended the security doc.\n", "created_at": "2015-02-05 20:08:48", "user": 33770, "id": 73117210}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`expoennt` was causing a bigdecimal build to fail with:\n\n```\nbigdecimal.c: In function âVpSetPTRâ:\nbigdecimal.c:4421:5: error: âRealâ has no member named âexpoenntâ\n```\n", "labels": [], "number": 825, "updated_at": "2015-02-04 07:34:00", "user": 2499983, "closed_at": "2015-02-04 07:34:00", "id": 56377392, "title": "Update expoennt to exponent to match member name.", "url": "https://api.github.com/repos/ruby/ruby/issues/825", "created_at": "2015-02-03 13:29:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://bugs.ruby-lang.org/issues/10561 for more information. I've also applied the changes regarding this in Rubinius (https://github.com/rubinius/rubinius/commit/217034f9508ff7270e571845baeede10aa838159) to ensure that it behaves the same.\n", "labels": [], "number": 826, "updated_at": "2015-02-05 10:20:01", "user": 86065, "closed_at": "2015-02-05 08:21:51", "id": 56507682, "title": "Corrected docs of Thread::Backtrace::Location#path and friends", "url": "https://api.github.com/repos/ruby/ruby/issues/826", "created_at": "2015-02-04 10:14:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73010216", "text": "It's not an alias.\n", "created_at": "2015-02-05 08:21:51", "user": 16700, "id": 73010216}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73023945", "text": "See https://bugs.ruby-lang.org/issues/10561#note-7\n", "created_at": "2015-02-05 10:20:01", "user": 168854, "id": 73023945}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reading through the `OptionParser` documentation I noticed [this](https://github.com/ruby/ruby/blob/trunk/lib/optparse.rb#L299-L303):\n\n``` ruby\n# Another typical switch to print the version.\nopts.on_tail(\"--version\", \"Show version\") do\n  puts ::Version.join('.')\n  exit\nend\n```\n\nWhile the [`OptionParser.version()`](https://github.com/ruby/ruby/blob/trunk/lib/optparse.rb#L1163-L1165) instance method is defined, `::Version` is not accessible outside the class. This causes the example program to error out when supplied with the `--version` flag.\n", "labels": [], "number": 827, "updated_at": "2015-02-08 15:44:08", "user": 1479130, "closed_at": "2015-02-08 15:26:40", "id": 56938262, "title": "OptionParser Documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/827", "created_at": "2015-02-08 04:17:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73415410", "text": "Updated at r49547.\n", "created_at": "2015-02-08 15:26:40", "user": 16700, "id": 73415410}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Pathname support was added to Net::FTP list and getbinaryfile methods by @shugo in 613a324.\n\nThis pull request fixes the following error when calling String#+ with a Pathname:\n  TypeError: no implicit conversion of Pathname into String\n\nFound in the following Net::FTP instance methods:\nchdir\ndelete\ngettextfile\nmdtm\nmkdir\nnlst\nputbinaryfile\nputtextfile\nrename\nrmdir\nsize\n\nNote, this pull request normalizes the changes from 613a324 so each of these methods support Pathnames in the same way, via String interpolation (see the second commit).  It's my opinion this is more readable and seems to creates less String objects.\n\nThe third commit adds commented tests that I used to recreate the TypeError but don't actually test the methods correctly.  I can either do correct tests with someone's help (nlst with returning filelists was not easy to test), remove the commented tests, or leave them commented.  \n\nI wasn't sure if I should add a ChangeLog entry or if someone on ruby-core is supposed to do that.\n\nPlease advise. \n\nThanks in advance for your review!\n\ncc @tenderlove \n", "labels": [], "number": 828, "updated_at": "2015-02-10 16:22:20", "user": 19339, "closed_at": "2015-02-10 02:28:54", "id": 57042093, "title": "Net::FTP support pathnames", "url": "https://api.github.com/repos/ruby/ruby/issues/828", "created_at": "2015-02-09 15:06:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73543994", "text": "I'm not quite sure why the CI tests are failing.  I tried amending and force-pushing but a different test failed.\n", "created_at": "2015-02-09 16:52:07", "user": 19339, "id": 73543994}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73544666", "text": "LGTM\n", "created_at": "2015-02-09 16:55:23", "user": 277819, "id": 73544666}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/73727403", "text": "Thank you @zzak and @shugo !!!  :smile: \n", "created_at": "2015-02-10 16:11:05", "user": 19339, "id": 73727403}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "check and make RAND_egd optional to support libressl.\n", "labels": [], "number": 829, "updated_at": "2015-02-13 01:52:07", "user": 2306079, "closed_at": "2015-02-12 09:38:19", "id": 57424631, "title": "check RAND_egd to support libressl", "url": "https://api.github.com/repos/ruby/ruby/issues/829", "created_at": "2015-02-12 06:56:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74039964", "text": "libressl won't provide these functions?\n", "created_at": "2015-02-12 09:18:11", "user": 16700, "id": 74039964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74191543", "text": "Their absence is intentional. Please take a look at https://bugs.ruby-lang.org/issues/10053 too.\n", "created_at": "2015-02-13 01:52:06", "user": 212792, "id": 74191543}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Only symbolic keys are gathered by `**`, I've updated the example output accordingly.\n", "labels": [], "number": 830, "updated_at": "2015-02-17 06:01:09", "user": 28232, "closed_at": "2015-02-17 02:08:38", "id": 57461054, "title": "Fix documentation for \"calling_methods\"", "url": "https://api.github.com/repos/ruby/ruby/issues/830", "created_at": "2015-02-12 13:39:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added to the rdoc for Hash#include? and Set#include? to explain that they override the implementation provided by Enumerable, and use `#hash` rather than `#==` to test for membership.\n", "labels": [], "number": 831, "updated_at": "2015-02-17 01:53:27", "user": 111963, "closed_at": "2015-02-17 01:53:27", "id": 57851129, "title": "Added to rdoc for Hash#include? and Set#include?", "url": "https://api.github.com/repos/ruby/ruby/issues/831", "created_at": "2015-02-16 21:04:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74605656", "text": "Thank you! I merged at https://github.com/ruby/ruby/commit/f6b9a0feafe9d3f598867cbb5d1a1dbbb8ba91a6\n", "created_at": "2015-02-17 01:53:27", "user": 12301, "id": 74605656}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`anOther` looks quite strange, I've replaced it by `other`\n", "labels": [], "number": 832, "updated_at": "2015-02-17 09:38:58", "user": 28232, "closed_at": "2015-02-17 09:35:53", "id": 57901389, "title": "Replace camelcase variable name in documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/832", "created_at": "2015-02-17 09:29:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/74640243", "text": "Sorry, wrong branch, opened a new PR: https://github.com/ruby/ruby/pull/833\n", "created_at": "2015-02-17 09:36:08", "user": 28232, "id": 74640243}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`anOther` looks quite strange, I've replaced it by `other`\n", "labels": [], "number": 833, "updated_at": "2015-02-21 09:36:49", "user": 28232, "closed_at": "2015-02-21 07:20:00", "id": 57902217, "title": "Replace camelcase variable name in documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/833", "created_at": "2015-02-17 09:38:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "age old rebase\n\nping @zzak \n:heart: \n", "labels": [], "number": 834, "updated_at": "2015-02-21 21:09:59", "user": 67049, "closed_at": "2015-02-21 19:14:55", "id": 58439915, "title": "ext/openssl: documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/834", "created_at": "2015-02-21 03:39:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/75372567", "text": "@nobu thanks. I have updated. PTAL\n", "created_at": "2015-02-21 13:53:22", "user": 67049, "id": 75372567}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After the conversion to Fiddle, back-to-back commits assumed either an Array or\na String, however both have been allowed for the history of this module, as seen\nin the line of code: \n\n``` ruby\n     @proto = [import].join.tr(\"VPpNnLlIi\", \"0SSI\").sub(/^(.)0*$/, '\\1')\n```\n\nSince `@proto` has already been set, let's use it in the Fiddle.new args argument.\n\n_That said, I don't really understand the purpose of `.sub(/^(.)0*$/, '\\1')` - it removes all trailing void arguments after an initial non-void argument? Huh?_\n\nWhile converting the Fiddle, these commits were the source of the confusion:\n@unak expects a string in 2e5610353fd3c0067e2528763a53c2a635067f02\n\n``` diff\n     @func = Fiddle::Function.new(\n       handle[func],\n-      import.map { |win_type| TYPEMAP[win_type.tr(\"VPpNnLlIi\", \"0SSI\")] },\n+      import.chars.map { |win_type| TYPEMAP[win_type.tr(\"VPpNnLlIi\", \"0SSI\")] },\n       TYPEMAP[export.tr(\"VPpNnLlIi\", \"0SSI\")],\n-      Fiddle::Importer::CALL_TYPE_TO_ABI[calltype]\n+      Fiddle::Importer.const_get(:CALL_TYPE_TO_ABI)[calltype]\n     )\n```\n\n@tenderlove expects an array in 07308c4d30b8c5260e5366c8eed2abf054d86fe7\n\n``` diff\n+    @func = Fiddle::Function.new(\n+      handle[func],\n+      import.map { |win_type| TYPEMAP[win_type.tr(\"VPpNnLlIi\", \"0SSI\")] },\n+      TYPEMAP[export.tr(\"VPpNnLlIi\", \"0SSI\")],\n+      Fiddle::Importer::CALL_TYPE_TO_ABI[calltype]\n+     )\n```\n\nThis came to my attention for Ruby 2.2 incompatibility in brianmario/mysql2#584\n", "labels": [], "number": 835, "updated_at": "2015-02-25 19:01:08", "user": 39406, "closed_at": "2015-02-25 13:09:01", "id": 58448114, "title": "The import argument to Win32API.new can be either an Array or a String.", "url": "https://api.github.com/repos/ruby/ruby/issues/835", "created_at": "2015-02-21 07:27:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/75361020", "text": "https://bugs.ruby-lang.org/issues/10876\n", "created_at": "2015-02-21 07:52:08", "user": 39406, "id": 75361020}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/76031144", "text": "This must still be backported to ruby_2_2 branch!\n", "created_at": "2015-02-25 19:01:08", "user": 39406, "id": 76031144}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 836, "updated_at": "2016-02-07 01:25:38", "user": 16700, "closed_at": "2016-02-07 01:24:24", "id": 58486313, "title": "Unbalance massign", "url": "https://api.github.com/repos/ruby/ruby/issues/836", "created_at": "2015-02-22 01:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180809177", "text": "Is someone going to merge this?\n", "created_at": "2016-02-06 16:53:27", "user": 1666682, "id": 180809177}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "You cannot multiply two vectors.  This has been a problem in the documentation for over a year sadly.  It's about time to fix it.\n", "labels": [], "number": 837, "updated_at": "2015-02-22 20:24:31", "user": 3077078, "closed_at": "2015-02-22 20:24:31", "id": 58515524, "title": "Fix Vector multiplication documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/837", "created_at": "2015-02-22 19:50:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/75455667", "text": "Indeed, thanks :+1: !\n", "created_at": "2015-02-22 20:24:31", "user": 33770, "id": 75455667}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The example output for the first URI::join example had the wrong domain (input was \"example.com\", output had \"localhost\").\n", "labels": [], "number": 838, "updated_at": "2015-02-24 18:09:38", "user": 127818, "closed_at": "2015-02-24 18:09:38", "id": 58777971, "title": "Trivial documentation fix to URI::join", "url": "https://api.github.com/repos/ruby/ruby/issues/838", "created_at": "2015-02-24 18:01:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/75811969", "text": "Thanks!\n", "created_at": "2015-02-24 18:09:38", "user": 33770, "id": 75811969}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a quote form [NEWS-2.1.0](https://github.com/ruby/ruby/blob/trunk/doc/NEWS-2.1.0#L100).\n\n> Mutex#owned? is no longer experimental.\n", "labels": [], "number": 839, "updated_at": "2015-03-07 01:29:58", "user": 3800237, "closed_at": "2015-03-07 00:31:26", "id": 59310570, "title": "[DOC]Mutex#owned? is no longer experimental since 2.1.0", "url": "https://api.github.com/repos/ruby/ruby/issues/839", "created_at": "2015-02-27 23:39:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77665594", "text": "Thank you\n", "created_at": "2015-03-07 01:29:58", "user": 3800237, "id": 77665594}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Revert r49759 \"configure.in: check USDT headers\" to see if the CI passes.\n", "labels": [], "number": 840, "updated_at": "2015-03-01 03:36:07", "user": 16700, "closed_at": "2015-03-01 03:32:57", "id": 59373232, "title": "trivis-ci failures", "url": "https://api.github.com/repos/ruby/ruby/issues/840", "created_at": "2015-03-01 03:03:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 841, "updated_at": "2015-03-04 01:48:01", "user": 16700, "closed_at": "2015-03-04 01:48:01", "id": 59375377, "title": "force update", "url": "https://api.github.com/repos/ruby/ruby/issues/841", "created_at": "2015-03-01 03:38:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "![lol](http://hosted.akibraun.com/g/stander.gif)\n", "labels": [], "number": 842, "updated_at": "2015-03-04 01:19:10", "user": 1090020, "closed_at": "2015-03-04 01:19:10", "id": 59695946, "title": "Fix typo in slice_after's exception message", "url": "https://api.github.com/repos/ruby/ruby/issues/842", "created_at": "2015-03-03 19:54:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 843, "updated_at": "2015-03-04 01:19:10", "user": 59292, "closed_at": "2015-03-04 01:19:10", "id": 59713600, "title": "[DOC] add some missing spaces and fix a grammatical error in method docs", "url": "https://api.github.com/repos/ruby/ruby/issues/843", "created_at": "2015-03-03 22:04:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Documentation implies that #delete method has a `default` paramater, but it doesn't.\n", "labels": [], "number": 844, "updated_at": "2015-03-05 08:03:55", "user": 35517, "closed_at": "2015-03-05 08:02:51", "id": 59791913, "title": "Update Hash#delete documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/844", "created_at": "2015-03-04 12:35:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77155783", "text": "> If the key is not found, returns the nil\n\nThat is kind of a weird sentence, maybe rename it to:\n\n> If the key is not found, it returns nil\n", "created_at": "2015-03-04 13:19:37", "user": 10358424, "id": 77155783}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77322167", "text": "@ivdma @raoulvdberge thanks!\n", "created_at": "2015-03-05 08:03:55", "user": 5266933, "id": 77322167}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's not guaranteed in the docs that for the method works like this:\n\n```\n    [1,2,3,4,5].uniq {|x| x.odd? }  #=> [1, 2]\n```\n\nbut there is a test for it in `test_array.rb` and jruby seems to also visit array elements in order.\n", "labels": [], "number": 845, "updated_at": "2017-11-15 08:53:26", "user": 37493, "closed_at": "2015-03-07 00:41:44", "id": 59924356, "title": "document that first element is kept when using Array#uniq and #uniq!", "url": "https://api.github.com/repos/ruby/ruby/issues/845", "created_at": "2015-03-05 09:14:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77330652", "text": "also, the documentation for `Array#&` hints at this (\"The order is preserved from the original array\")\n", "created_at": "2015-03-05 09:16:17", "user": 37493, "id": 77330652}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "LoadErroe => LoadError\n", "labels": [], "number": 846, "updated_at": "2015-03-05 11:53:13", "user": 6248028, "closed_at": "2015-03-05 11:53:13", "id": 59940894, "title": "fix spelling mistake", "url": "https://api.github.com/repos/ruby/ruby/issues/846", "created_at": "2015-03-05 11:45:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/77351537", "text": "Thank you for your patch, but we are using only trunk branch on github.\n\nI already created backport request to our issue tracker: https://bugs.ruby-lang.org/issues/10934\n", "created_at": "2015-03-05 11:53:13", "user": 12301, "id": 77351537}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": null, "labels": [], "number": 847, "updated_at": "2015-03-07 00:21:08", "user": 115515, "closed_at": "2015-03-07 00:21:08", "id": 60174593, "title": "Added documentation to version method", "url": "https://api.github.com/repos/ruby/ruby/issues/847", "created_at": "2015-03-06 23:32:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Suggested by @unak to avoid the situation of trying to load the Win32 libraries while cross-compiling gems on a Linux host, as seen in tjschuck/rake-compiler-dev-box#20\n\nNormally a PR would be against trunk, but trunk has moved all Win32-specific code out of `lib/securerandom.rb`, so if the same problem exists on trunk it will require a different solution.\n\nhttps://bugs.ruby-lang.org/issues/10948\n", "labels": [], "number": 848, "updated_at": "2015-04-13 17:39:50", "user": 39406, "closed_at": "2015-04-13 17:39:48", "id": 60244705, "title": "Skip Win32 libraries in SecureRandom if OpenSSL::Random is available", "url": "https://api.github.com/repos/ruby/ruby/issues/848", "created_at": "2015-03-08 06:49:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/83130849", "text": "I don't understand what's wrong with Travis tests, but I cannot imagine they are related to this PR. Is there anything I can do to help this along?\n", "created_at": "2015-03-18 19:29:15", "user": 39406, "id": 83130849}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84283476", "text": "@sodabrew Try rebasing.  I don't know but it may be some bug that has been fixed in trunk.\n", "created_at": "2015-03-21 08:59:59", "user": 10236, "id": 84283476}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84375067", "text": "This change is correctly based at fb72edcedfef116e499795586951389392f68d02 which is the top of ruby_2_2. As explained in the notes, trunk has moved this code to a different file.\n", "created_at": "2015-03-21 15:45:04", "user": 39406, "id": 84375067}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84382372", "text": "I am looking into why the tests are failing for the `ruby_2_2` branch in #857. It is not because of my commit here, so I hope this can be merged now and look into the Travis issues separately.\n", "created_at": "2015-03-21 16:16:01", "user": 39406, "id": 84382372}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89514245", "text": "This change was already approved by @unak in https://bugs.ruby-lang.org/issues/10948#change-51803\nIs there anything I can do to help this along for merge onto ruby_2_2?\n", "created_at": "2015-04-04 06:54:14", "user": 39406, "id": 89514245}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89514608", "text": "What you can do is only waiting :-)\n", "created_at": "2015-04-04 07:04:39", "user": 17790, "id": 89514608}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92441882", "text": "I see this merged today, thank you!\n", "created_at": "2015-04-13 17:39:48", "user": 39406, "id": 92441882}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "One possible fix for https://bugs.ruby-lang.org/issues/10967\n", "labels": [], "number": 849, "updated_at": "2015-05-21 06:42:18", "user": 52642, "closed_at": "2015-05-21 06:42:18", "id": 60832791, "title": "Remove private attribute warning", "url": "https://api.github.com/repos/ruby/ruby/issues/849", "created_at": "2015-03-12 15:02:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/87154576", "text": ":+1: \n", "created_at": "2015-03-28 03:35:31", "user": 1946610, "id": 87154576}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 850, "updated_at": "2015-05-07 11:30:27", "user": 3800237, "closed_at": "2015-03-13 20:17:50", "id": 60893429, "title": "[DOC] Update Set#to_a. Hash is now ordered.", "url": "https://api.github.com/repos/ruby/ruby/issues/850", "created_at": "2015-03-12 20:22:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/78659492", "text": "It is by design that the order of a Set is unspecified. Specifying it would prevent potential optimizations and leak internal details of the implementation. The order is therefore implementation-dependent and should not be relied on. If you need such a guarantee, use Hash directly or a Set in combination with an Array.\n", "created_at": "2015-03-12 22:29:52", "user": 168854, "id": 78659492}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/78747401", "text": "I tend to agree with @eregon.  I'd also point out that while this feature may be an open secret it is totally unspec'd/untested, so I'm not inclined to document it this way at this moment.\nPlus, Set is a base class of this kind, so I'd rather not add a nature that may sometimes be hard for a subclass to inherit.\nWhat about designing OrderedSet to start with?\n", "created_at": "2015-03-13 02:06:39", "user": 10236, "id": 78747401}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/79337414", "text": "\bI understand that why the order of a set is unspecified.\nThank you.\n", "created_at": "2015-03-13 20:16:43", "user": 3800237, "id": 79337414}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 851, "updated_at": "2015-03-16 00:34:03", "user": 167012, "closed_at": "2015-03-15 17:53:43", "id": 61811629, "title": "Fix typo yeild -> yield in test/ruby/test_lambda.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/851", "created_at": "2015-03-15 13:24:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 852, "updated_at": "2015-03-16 00:33:48", "user": 167012, "closed_at": "2015-03-15 17:53:43", "id": 61812025, "title": "Fix typo signle -> single in test/ruby/test_proc.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/852", "created_at": "2015-03-15 13:26:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81177490", "text": "@hanachin thanks!\n", "created_at": "2015-03-15 17:54:27", "user": 5266933, "id": 81177490}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently String#crypt assumes that it is called on a password typed\nby the user, specifically, that it does not contain null character.\nWhen it does:\n\n> \"abc\\0def\".crypt(\"pass\") == \"abc\".crypt(\"pass\")\n> => true\n\nThis may not be desirable, and developers invoking crypt on strings\nthat potentially include null may expect different results. To\nprevent security failures, this patch changes String#crypt to throw\nArgumentError when invoked on String that includes null character.\n", "labels": [], "number": 853, "updated_at": "2015-05-10 02:49:38", "user": 1485264, "closed_at": "2015-05-10 02:49:38", "id": 62026257, "title": "Raise ArgumentError when string passed to String#crypt contains null.", "url": "https://api.github.com/repos/ruby/ruby/issues/853", "created_at": "2015-03-16 09:37:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81540542", "text": "https://www.reddit.com/r/netsec/comments/2yugos/null_bytes_bcrypt_problem/\n", "created_at": "2015-03-16 09:37:27", "user": 1485264, "id": 81540542}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84158942", "text": "I think you're looking for `StringValueCStr`\n", "created_at": "2015-03-20 21:41:54", "user": 1034, "id": 84158942}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 854, "updated_at": "2015-03-16 22:18:32", "user": 10731781, "closed_at": "2015-03-16 22:18:32", "id": 62223241, "title": "Ruby is too hard to install so we fixed it (for Mac, Windows Version comming soon)!", "url": "https://api.github.com/repos/ruby/ruby/issues/854", "created_at": "2015-03-16 22:16:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Mac Ruby Install By Cosmic Labs at https://github.com/cosmic-labs/Mac-Ruby-Install/blob/master/installruby.sh download and install Ruby Better!\n\nMac Version Only Windows in development!\n", "labels": [], "number": 855, "updated_at": "2015-03-17 01:12:24", "user": 10731781, "closed_at": "2015-03-16 22:27:47", "id": 62224190, "title": "Create mac-ruby-install.shell", "url": "https://api.github.com/repos/ruby/ruby/issues/855", "created_at": "2015-03-16 22:22:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/81991092", "text": "@CosmicWebServices  how about they change the version number?\n", "created_at": "2015-03-16 23:30:45", "user": 969118, "id": 81991092}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/82010095", "text": "Why do you need download another tarball under the working copy directory?\nAnd 2.0.0p247 is too old.\nEven pre-installed ruby on Yosemite is 2.0.0p481.\n", "created_at": "2015-03-17 00:57:28", "user": 16700, "id": 82010095}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/82016095", "text": "- do not use hardcoded temporary path for security reason.\n- users may want `--enable-shared`.\n- `make SUDO=sudo install` can replace `make; sudo make install`\n", "created_at": "2015-03-17 01:12:24", "user": 16700, "id": 82016095}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR has an empty commit to see if Travis tests are working for the ruby_2_2 branch.\n", "labels": [], "number": 856, "updated_at": "2015-03-21 23:01:35", "user": 39406, "closed_at": "2015-03-21 16:01:32", "id": 63420994, "title": "Ruby 2.2 branch tests", "url": "https://api.github.com/repos/ruby/ruby/issues/856", "created_at": "2015-03-21 15:59:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84377906", "text": "I picked the wrong destination branch, sorry!\n", "created_at": "2015-03-21 16:01:52", "user": 39406, "id": 84377906}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 857, "updated_at": "2015-03-29 11:06:59", "user": 39406, "closed_at": "2015-03-21 22:42:41", "id": 63421473, "title": "This is an empty commit to see if Travis tests are working", "url": "https://api.github.com/repos/ruby/ruby/issues/857", "created_at": "2015-03-21 16:04:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84382066", "text": "Even with no changes, `ruby_2_2` branch fails tests on Travis with:\n\n```\nThe command \"make test-all TESTS='-q -j2'\" exited with 0.\n0.08s$ make test-rubyspec\n./miniruby -I./lib -I. -I.ext/common  ./tool/runruby.rb --extout=.ext  -- --disable-gems ./spec/mspec/bin/mspec run -B ./spec/default.mspec \n/home/travis/build/ruby/ruby/spec/default.mspec:1:in `load': cannot load such file -- /home/travis/build/ruby/ruby/spec/rubyspec/ruby.2.2.mspec (LoadError)\n    from /home/travis/build/ruby/ruby/spec/default.mspec:1:in `<top (required)>'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:76:in `load'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:76:in `block (2 levels) in load'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:74:in `each'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:74:in `block in load'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:71:in `each'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:71:in `load'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:89:in `load_default'\n    from /home/travis/build/ruby/ruby/spec/mspec/lib/mspec/utils/script.rb:212:in `main'\n    from ./spec/mspec/bin/mspec:7:in `<main>'\nmake: *** [test-rubyspec] Error 1\n```\n", "created_at": "2015-03-21 16:14:52", "user": 39406, "id": 84382066}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84445594", "text": "@nurse I'll let you fix this, we should just need to change `ruby.2.2.mspec` to `default.mspec` in `spec/default.mspec` in the ruby_2_2 branch.\n", "created_at": "2015-03-21 19:52:05", "user": 168854, "id": 84445594}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/84464194", "text": "Already created backport ticket [Backport #10953](https://bugs.ruby-lang.org/issues/10953)\n", "created_at": "2015-03-21 22:42:41", "user": 12301, "id": 84464194}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/87394680", "text": "All tests fail with this Mongolian vowel error, are you sure that this is a reasonable version of rubyspec to run ruby_2_2 against?\n\n```\n1)\nRegexp with character classes doesn't match Unicode Mongolian vowel seperator characters with [[:blank:]] FAILED\nExpected [\"᠎\"]\n to equal []\n/home/travis/build/ruby/ruby/spec/rubyspec/language/regexp/character_classes_spec.rb:152:in `block (3 levels) in <top (required)>'\n/home/travis/build/ruby/ruby/spec/rubyspec/language/regexp/character_classes_spec.rb:4:in `<top (required)>'\nFinished in 79.910335 seconds\n3400 files, 23032 examples, 172617 expectations, 1 failure, 0 errors, 0 tagged\nmake: *** [test-rubyspec] Error 1\nThe command \"make test-rubyspec\" exited with 2.\n```\n", "created_at": "2015-03-29 11:06:59", "user": 39406, "id": 87394680}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`RUBY_ENGINE_VERSION` was [added by Rubinius](https://github.com/rubinius/rubinius/commit/8212c460b97a6f277db35de5295f046a868eb8ac) for reporting the version of the Ruby engine. It has also [been proposed for JRuby](https://github.com/jruby/jruby/issues/2746), where it would be equivalent to `JRUBY_VERSION`. In CRuby `RUBY_ENGINE_VERSION` would be the same as `RUBY_VERSION`.\n\nThis would be a standard way to check the engine or interpreter version across Ruby implementations.\n", "labels": [], "number": 858, "updated_at": "2015-04-08 08:46:14", "user": 378214, "closed_at": "2015-04-08 08:46:14", "id": 63829277, "title": "Support RUBY_ENGINE_VERSION", "url": "https://api.github.com/repos/ruby/ruby/issues/858", "created_at": "2015-03-23 20:51:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/85694379", "text": "Just to clarify.  The motivation behind adding a `RUBY_ENGINE_VERSION` constant is so that programmers can have a standard constant to check to see the version of the engine that they're on.  So a person can check that they are on JRuby by checking the `RUBY_ENGINE` constant, and see that they're on JRuby version 3.14159 by checking `RUBY_ENGINE_VERSION`, and that JRuby 3.14159 implements Ruby 2.1.2 by checking `RUBY_VERSION`.\n\nIn MRI `RUBY_ENGINE_VERSION` will always equal `RUBY_VERSION`, but that might not be true on other engines.\n", "created_at": "2015-03-24 21:17:29", "user": 3124, "id": 85694379}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/86235096", "text": "Just an update but JRuby has [added support](https://github.com/jruby/jruby/commit/a7bfa0d2606f19dea301af4cbc2c7f9f18cf90a3) for `RUBY_ENGINE_VERSION`.\n", "created_at": "2015-03-25 22:18:01", "user": 378214, "id": 86235096}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/86242127", "text": "Do you mean using `RUBY_VERSION` as the version of features?\n", "created_at": "2015-03-25 22:47:26", "user": 16700, "id": 86242127}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/86249529", "text": "Yes, the features of that version of the reference implementation. So for current versions it would be:\n\n``` ruby\nRUBY_ENGINE #=> “ruby\"\nRUBY_ENGINE_VERSION #=> “2.2.1”\nRUBY_VERSION #=> “2.2.1\"\n\nRUBY_ENGINE #=> “jruby\"\nRUBY_ENGINE_VERSION #=> “1.7.19”\nRUBY_VERSION #=> “1.9.3”\n\nRUBY_ENGINE #=> \"rbx\"\nRUBY_ENGINE_VERSION #=> “2.5.2”\nRUBY_VERSION #=> “2.1.0”\n```\n", "created_at": "2015-03-25 23:15:08", "user": 378214, "id": 86249529}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/86253877", "text": "Though it wasn't what I meant to propose, with modern Ruby's semantic versioning it might also make sense to drop TINY from the feature specification `RUBY_VERSION`:\n\n``` ruby\nRUBY_ENGINE #=> “ruby\"\nRUBY_ENGINE_VERSION #=> “2.2.1”\nRUBY_VERSION #=> “2.2.0\"\n```\n", "created_at": "2015-03-25 23:39:50", "user": 378214, "id": 86253877}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I couldn't find one\n", "labels": [], "number": 859, "updated_at": "2015-03-26 01:05:49", "user": 196514, "closed_at": "2015-03-26 01:05:49", "id": 64289700, "title": "Adding test for observer functionality", "url": "https://api.github.com/repos/ruby/ruby/issues/859", "created_at": "2015-03-25 14:53:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Not all ObjectSpace methods are available by default. This patch adds the appropriate require to the first example so it is clear how to require the correct file to get all examples to work correctly.\n", "labels": [], "number": 860, "updated_at": "2015-04-12 15:32:30", "user": 59744, "closed_at": "2015-04-12 05:20:22", "id": 65288992, "title": "Document require name for ObjectSpace methods", "url": "https://api.github.com/repos/ruby/ruby/issues/860", "created_at": "2015-03-30 19:56:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92081718", "text": "Thanks!\n", "created_at": "2015-04-12 15:32:30", "user": 59744, "id": 92081718}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This disallows changing the ruby_version constant by --with-ruby-version configuration options. The two places version numbers are disallowed as well, since there are a lot of places which cannot handle this format properly.\n\nruby_version_dir_name now specifies custom version string for versioned directories, e.g. instead of default X.Y.Z, you can specify whatever string.\n\nThis is related to https://bugs.ruby-lang.org/issues/11002\n", "labels": [], "number": 861, "updated_at": "2018-02-23 03:06:53", "user": 14406, "closed_at": "None", "id": 65686758, "title": "Use ruby_version_dir_name for versioned directories.", "url": "https://api.github.com/repos/ruby/ruby/issues/861", "created_at": "2015-04-01 13:41:02", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 862, "updated_at": "2015-04-04 20:45:54", "user": 14406, "closed_at": "2015-04-04 12:32:44", "id": 65915882, "title": "Gemify rake", "url": "https://api.github.com/repos/ruby/ruby/issues/862", "created_at": "2015-04-02 12:30:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/88985612", "text": "I approve of this change.\n", "created_at": "2015-04-02 17:40:02", "user": 9831, "id": 88985612}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89286686", "text": "Now I noticed that some RubyGems were failing due to missing Rake, so the 7d2b6a8cab9cf1238df9c1546c09ea4d6b313ab4 commit add bundled gems on $LOAD_PATH (although the approach is rather naive ATM, but it can be improved later if needed).\n", "created_at": "2015-04-03 13:25:21", "user": 14406, "id": 89286686}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89336171", "text": "Weird, why it fails on travis? The gems are not expanded there for some reason?\n", "created_at": "2015-04-03 15:54:54", "user": 14406, "id": 89336171}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89497411", "text": "@voxik Travis instance is fragile environment :(\n", "created_at": "2015-04-04 04:11:52", "user": 12301, "id": 89497411}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes the first half of https://bugs.ruby-lang.org/issues/10845\n\n(I tried to fix the second half but `rb_str_format` is scary and even when allocating the buffer to be of the correct class, the return value somehow was String anyways)\n", "labels": [], "number": 863, "updated_at": "2015-05-15 01:22:54", "user": 1946610, "closed_at": "2015-05-15 01:22:54", "id": 66074154, "title": "[String] Make String#+ return an instance of self.class", "url": "https://api.github.com/repos/ruby/ruby/issues/863", "created_at": "2015-04-03 04:42:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/89476163", "text": "At least, You need to add tests for your code.\n", "created_at": "2015-04-04 01:02:09", "user": 12301, "id": 89476163}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102216473", "text": "I never figured out with this is recursing, so I'm going to close the PR :(\n", "created_at": "2015-05-15 01:22:54", "user": 1946610, "id": 102216473}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "current code in irb.rb assumes that STDOUT is not changed from the moment the file\nis loaded till Irb.start is called.  But this is not always the case.\nE.g. suppose we run rails console using spring pre-loader.  First time we run the console (which uses Irb)\nit loads irb.rb and OUTPUT.sync set to true, but next time we run the console irb.rb already loaded and\nthus OUTPUT.sync is not set to true and may be false.\nThis causes problem described in https://youtrack.jetbrains.com/issue/RUBY-16344\n\nThe solution I propose is to set OUTPUT.sycn to true in Irb#start.\n", "labels": [], "number": 864, "updated_at": "2015-10-23 08:56:35", "user": 450628, "closed_at": "2015-10-23 08:56:35", "id": 66588543, "title": "Irb#start should set STDOUT.sync to true", "url": "https://api.github.com/repos/ruby/ruby/issues/864", "created_at": "2015-04-06 11:46:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 865, "updated_at": "2015-04-07 01:23:49", "user": 10308, "closed_at": "2015-04-07 01:23:49", "id": 66652992, "title": "Fix typo in comment", "url": "https://api.github.com/repos/ruby/ruby/issues/865", "created_at": "2015-04-06 16:55:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 866, "updated_at": "2018-02-23 03:06:54", "user": 10308, "closed_at": "None", "id": 66653796, "title": "Replace MEMCPY with ALLOC_AND_COPY", "url": "https://api.github.com/repos/ruby/ruby/issues/866", "created_at": "2015-04-06 16:58:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/90315380", "text": "I guess it should be:\n\n``` c\n    if (catch_table) {\n    ALLOC_AND_COPY(&iseq->catch_table->entries, catch_table,\n               struct iseq_catch_table_entry, catch_table->size);\n    }\n```\n", "created_at": "2015-04-07 02:09:19", "user": 16700, "id": 90315380}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "It's feature proposal for Dev MTG.\n", "labels": [], "number": 867, "updated_at": "2015-04-11 19:38:02", "user": 12301, "closed_at": "2015-04-11 11:16:00", "id": 66744433, "title": "Gemify JSON", "url": "https://api.github.com/repos/ruby/ruby/issues/867", "created_at": "2015-04-07 01:16:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/91912071", "text": "How is JSON still installed with `make install` after this change?\n", "created_at": "2015-04-11 19:38:02", "user": 168854, "id": 91912071}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 868, "updated_at": "2015-05-17 07:31:26", "user": 196747, "closed_at": "2015-05-16 21:35:49", "id": 67087138, "title": "Use Array#compact before Array#uniq", "url": "https://api.github.com/repos/ruby/ruby/issues/868", "created_at": "2015-04-08 09:20:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/90864700", "text": "What does it change?\n", "created_at": "2015-04-08 09:47:04", "user": 168854, "id": 90864700}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/90930252", "text": "That's to_set in the second case, not uniq.\n\nOn Wed, Apr 8, 2015 at 2:09 PM, Marat notifications@github.com wrote:\n\n> Benchmark.ips do |x|\n>   items = [1, 2, 1, 1, 2, 3, 4, nil, 5, nil, 5]\n>   x.report(\"first uniq\") do\n>     items.uniq.compact\n>   end\n> \n>   x.report(\"first compact\") do\n>     items.compact.to_set\n>   endend\n> \n> Calculating -------------------------------------\n>           first uniq    37.559k i/100ms\n> \n> ##        first compact    13.585k i/100ms\n> \n> ```\n>       first uniq    606.085k (± 5.5%) i/s -      3.042M\n>    first compact    164.800k (± 7.3%) i/s -    828.685k\n> ```\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/ruby/ruby/pull/868#issuecomment-90893858.\n", "created_at": "2015-04-08 14:18:39", "user": 168854, "id": 90930252}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/90932165", "text": "sorry, it was not the\n", "created_at": "2015-04-08 14:26:32", "user": 196747, "id": 90932165}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102700117", "text": "Can you send this to [rubygems/rubygems](https://github.com/rubygems/rubygems)?  After it's merged there, it will be put in to Ruby.\n", "created_at": "2015-05-16 21:35:49", "user": 3124, "id": 102700117}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102762480", "text": ":+1: :gem: \n", "created_at": "2015-05-17 07:31:26", "user": 196747, "id": 102762480}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 869, "updated_at": "2015-04-15 08:43:06", "user": 1707078, "closed_at": "2015-04-15 08:41:42", "id": 67420663, "title": "Add documentation for rb_tracepoint_new C level API", "url": "https://api.github.com/repos/ruby/ruby/issues/869", "created_at": "2015-04-09 18:15:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92293851", "text": "How about to write we can not specify internal and not internal events simultaneously?\n", "created_at": "2015-04-13 09:44:32", "user": 9558, "id": 92293851}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92300332", "text": "@ko1 Done (also squashed commits).\n", "created_at": "2015-04-13 10:14:39", "user": 1707078, "id": 92300332}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92303111", "text": "One more comment.\n\n> - \\*   1. VALUE target_thval - Thread in which the tracepoint is to be created.\n\nPlease note something like \"If false or nil (Qfalse or Qnil), it will not bind specific thread\".\n\nAnd do not pass 0 directly (Qnil will be nice) in example.\n", "created_at": "2015-04-13 10:33:57", "user": 9558, "id": 92303111}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92307785", "text": "Sure. By the way, if target_thval is false or nil (Qfalse or Qnil), it will bind to the current thread, right ?\n", "created_at": "2015-04-13 10:54:05", "user": 1707078, "id": 92307785}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92319455", "text": "OMG! Thank you for asking this question.\n\nNow, it is completely ignored and enable on _all_ threads.\n\nThere are three options.\n(a) Specify a thread\n(b) Specify current thread\n(c) Enable on all threads  <- current behavior with any option\n\nBefore documentation, we need to decide this spec.\n\n(b) can be specify with (a) (rb_thread_current()). So nil (or false) specify (c) is reasonable for me.\n", "created_at": "2015-04-13 11:26:01", "user": 9558, "id": 92319455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92331344", "text": "@ko1 Thanks for explaining, it makes sense to use nil/false to bind tracepoints to all threads. So currently we're not making use of this param and binding to all threads. I'll document the same.\n", "created_at": "2015-04-13 12:15:06", "user": 1707078, "id": 92331344}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92428939", "text": "@ko1 Done.\n", "created_at": "2015-04-13 17:14:28", "user": 1707078, "id": 92428939}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/92429868", "text": "By the way, I have a question for you. Why do we have to throw error when normal and internal events are mixed in `rb_tracepoint_new` ? Is there a limitation that holds us from using both kinds of events simultaneously ?\n", "created_at": "2015-04-13 17:16:13", "user": 1707078, "id": 92429868}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/93263289", "text": "There are two reasons.\n\n(1) we can't use any Ruby APIs in internal events. I added about it.\n(2) We can employ 32 events because of 32 bit word. I will separate normal and internal event spaces.\n", "created_at": "2015-04-15 08:42:52", "user": 9558, "id": 93263289}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/93263419", "text": "Thank you, I committed it.\n", "created_at": "2015-04-15 08:43:06", "user": 9558, "id": 93263419}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 870, "updated_at": "2015-04-12 04:53:34", "user": 5356517, "closed_at": "2015-04-12 04:53:34", "id": 67865175, "title": "[ci skip] Remove extension from require argument", "url": "https://api.github.com/repos/ruby/ruby/issues/870", "created_at": "2015-04-12 03:13:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add examples and mention that the `:TOTAL` key returns the number of allocated + freed slots (rather than bytes). Also add an example for passing in a hash as an argument.\n", "labels": [], "number": 871, "updated_at": "2015-04-14 00:03:22", "user": 59744, "closed_at": "2015-04-14 00:03:22", "id": 68141953, "title": "Add documentation to ObjectSpace.count_objects", "url": "https://api.github.com/repos/ruby/ruby/issues/871", "created_at": "2015-04-13 16:47:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":cat:\n", "labels": [], "number": 872, "updated_at": "2015-04-15 07:56:21", "user": 1147484, "closed_at": "2015-04-15 01:38:51", "id": 68451373, "title": "Fix typos in comments and documentation [skip ci]", "url": "https://api.github.com/repos/ruby/ruby/issues/872", "created_at": "2015-04-14 17:38:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/93094854", "text": "Looks good :+1: \n", "created_at": "2015-04-14 22:27:50", "user": 2374245, "id": 93094854}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/93249865", "text": "@GloverDonovan @hsbt thanks! :star: \n", "created_at": "2015-04-15 07:56:20", "user": 1147484, "id": 93249865}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With TLSv1.0 being no longer considered \"strong encryption\" by NIST and the PCI SSC, I figured I'd propose this patch to remove it from the defaults list.\n\nI can totally understand if this is too early to be this strict as a default, but figured I'd propose anyways just in case Ruby was ready for it.\n\n**References:**\n- https://www.pcisecuritystandards.org/pdfs/15_02_12_PCI_SSC_Bulletin_on_DSS_revisions_SSL_update.pdf\n  https://www.pcisecuritystandards.org/pdfs/15_03_25_PCI_SSC_FAQ_SSL_Protocol_Vulnerability_Revisions_to_PCI_DSS_PAD.pdf (this should become effective tomorrow in the PCI DSS 3.1 update)\n- NIST SP 800-57: Recommendation for Key Management – Part 1: General (Revision 3)\n- NIST SP 800-52: Guidelines for the Selection, Configuration, and Use of Transport Layer Security (TLS)\n  Implementations (Revision 1)\n- https://www.trustwave.com/Resources/SpiderLabs-Blog/Bring-Out-Your-Dead--An-Update-on-the-PCI-relevance-of-SSLv3/?page=1&year=0&month=0\n", "labels": [], "number": 873, "updated_at": "2017-07-06 03:55:38", "user": 794283, "closed_at": "2015-11-04 10:07:10", "id": 68566980, "title": "Drop TLSv1.0 from Ruby SSL::SSLContext::DEFAULT_PARAMS", "url": "https://api.github.com/repos/ruby/ruby/issues/873", "created_at": "2015-04-15 04:01:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103290886", "text": "@nahi Can you review this pull request?\n", "created_at": "2015-05-19 01:17:03", "user": 12301, "id": 103290886}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103295740", "text": "The question is, should we forbid TLSv1 from Ruby programs, but my answer is \"I'm not sure\" since there could still be people depending on it. However, switching to TLSv1_2 should be mostly compatible.\n\nWhat I dislike about this approach is it changes default behavior and breaks compatibility. But I guess that is all of security...\n", "created_at": "2015-05-19 01:42:22", "user": 277819, "id": 103295740}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146334453", "text": "We should just do this.  This change won't restrict people from manually enabling those features if they really need them.  IIRC we chose to maintain \"secure defaults\", so if something is proven to be insecure, then we should consider it to be a bug in our defaults.\n", "created_at": "2015-10-07 21:24:48", "user": 3124, "id": 146334453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146398733", "text": "w00t!\n", "created_at": "2015-10-08 02:24:58", "user": 794283, "id": 146398733}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146418923", "text": "@tenderlove Ok, I will deal with it\n", "created_at": "2015-10-08 04:47:42", "user": 277819, "id": 146418923}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146756446", "text": "As I said in May TLSv1.1 support has been dropped and affects many libraries and API servers like aws-sdk. Reverting \n", "created_at": "2015-10-09 05:11:54", "user": 29440, "id": 146756446}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146757295", "text": "Reverted at r52089 e2d79c4. I think, we should consider more carefully about this.\n", "created_at": "2015-10-09 05:22:20", "user": 29440, "id": 146757295}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148747170", "text": "Based some of the feedback here, I did some testing on this and in fact (despite what I would have guessed) the setting of ssl_version in the defaults did unfortunately knock out TLSv1.1 support.  In  testing this today, it seems the OP_NO_TLSv1 line by itself is sufficient to prevent TLSv1.0, while still allowing TLSv1.1 and TLSv1.2 to function.\n\nIf someone else would like to confirm my findings, I've put together PoC code to replicate my assertion against this pull:\n\nClient: https://gist.github.com/claudijd/cc8de4fe8f2a6e97605d (used this Ruby branch)\nServer: https://gist.github.com/claudijd/6ce45deabb154ceb7efa (used OpenSSL 1.0.2d)\n", "created_at": "2015-10-16 15:30:31", "user": 794283, "id": 148747170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148914988", "text": "this should work. I want to hear other opinions before merge -- @nahi or someone?\n", "created_at": "2015-10-17 13:01:35", "user": 29440, "id": 148914988}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150499804", "text": "I think @claudijd 's last commits are ok to me. \n", "created_at": "2015-10-23 07:49:18", "user": 12301, "id": 150499804}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153668462", "text": "Don't drop TLSv1 because Major browsers still supports it.\nReopen after Google Chrome and Firefox drop the support.\n", "created_at": "2015-11-04 10:07:10", "user": 13423, "id": 153668462}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153701779", "text": "@nurse : browsers support TLSv1 because a minority of websites don't support tls1.1 or 1.2. That's a backward compatibility problem browsers have to deal with, but Ruby should not be impacted by it.\n", "created_at": "2015-11-04 12:12:11", "user": 415617, "id": 153701779}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153711580", "text": "You didn't say why Ruby shouldn't be impacted by it.\n", "created_at": "2015-11-04 12:48:35", "user": 13423, "id": 153711580}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313203382", "text": "hey all. it's now 2017, and the default still hasn't been changed. is this going to be reconsidered? i thought ruby would pick a sane and secure default for me, as hinted to by @tenderlove comment but it's not the case. \r\n\r\ncan't the default be secure, and the API opt-in for insecure? by that i mean, instead of opting in for security like so:\r\n```\r\nssl_version = :TLS_v1_2\r\n```\r\n\r\nyou would opt in for the insecure choice:\r\n```\r\nssl_verion = :TLS_v1\r\n```\r\n\r\nright now it seems net/http will pick the worst default possible as far as encryption goes, and i don't think users expect that. am i misunderstanding something? if a website offers tlsv1 and tlsv1.2, is net/http going to ask for and use tlsv1 instead? \r\n\r\ni understand the concern is users will see errors for websites not offering tls v1.2, but v1.0 is insecure, v1_2 is recommended, and it's still possible to use the insecure variant by setting the tls version (like you have to do now to choose a secure default).\r\n\r\nweb is moving away from tlsv1, i think ruby should too.\r\n", "created_at": "2017-07-05 19:31:44", "user": 8934693, "id": 313203382}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313210108", "text": "@nurse while chrome and firefox may support v1, if a website offers something better then they'll use that. ruby doesn't, as far as i can tell, and will use tlsv1 regardless. am i wrong about this? i hope so :) ", "created_at": "2017-07-05 19:59:38", "user": 8934693, "id": 313210108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313222553", "text": "discovered that :SSLv23 means it will choose what's most recent from the peer, so if tls v1.2 is offered it will be used, based on this SO post: https://stackoverflow.com/questions/11059059/is-it-possible-to-enable-tls-v1-2-in-ruby-if-so-how#11059873 thanks guys and sorry for noise.", "created_at": "2017-07-05 20:49:02", "user": 8934693, "id": 313222553}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313263926", "text": "This issue is a stalled status. If you hope to reconsider this issue, Please open a issue on https://github.com/ruby/openssl/issues .", "created_at": "2017-07-06 00:39:42", "user": 12301, "id": 313263926}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313288491", "text": "@hsbt thanks\r\ni think the current behaviour is good, from SO post:\r\n> You may still continue to use the more generic :SSLv23 for maximum interoperability. It will have the effect that the newest protocol supported by the peer will be used for the connection. If your peer understands TLS 1.2, then it will be used. But opposed to the above sample, if the peer does not speak 1.2, then the implementation will silently fall back to the best/newest version that the peer does understand - while in the above example, the connection would be rejected by the peer if it did not recognize 1.2.\r\n\r\n", "created_at": "2017-07-06 03:55:38", "user": 8934693, "id": 313288491}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes the following bug in `MonitorMixin`: if a thread dies in the exclusive section, the next thread to enter will do so successfully, but it will inadvertently hold the lock for the rest of its life, blocking others from entering.\n\nI experienced this bug while using a `Logger` from multiple threads. When using `#synchronize`, as `Logger` does, the bug only appears if the timing is right (if it's a bit later the `ensure` block will clean up properly), but it always appears when using `#enter` or `#try_enter`.\n\nThis PR has one commit to add failing tests and one commit to fix the bug and make them pass.\n#### Background\n\nA monitor uses a `Mutex` to ensure that 'ownership' is exclusive to one thread. The owner thread can enter multiple times. Once all its entries have a corresponding exit, the monitor unlocks the `Mutex`.\n\nThe problem is that the `Mutex` will unlock automatically if the thread that locked it dies, but the `Monitor` does not clear the owner's entry counter if the owner thread dies.\n\nThe solution is to reset `@mon_count` every time the lock is obtained by a new owner thread.\n#### Bug example\n\nGiven a monitor and threads `t1` and `t2`,\n1. `t1` enters, gets the lock, is set as `@mon_owner` and increments `@mon_count` to `1`.\n2. `t1` dies. `@mon_owner` and `@mon_count` are unchanged, but the lock is released.\n3. `t2` enters, gets the lock, is set as `@mon_owner` and increments `@mon_count` to `2`.\n4. `t2` exits, decrements `@mon_count` to `1`, remains owner and retains the lock.\n5. `t2` has entered once and exited once, but retains the lock for the rest of its life, blocking other threads.\n\nOriginal code relevant to the example:\n\n```\n180   #\n181   # Enters exclusive section.\n182   #\n183   def mon_enter\n184     if @mon_owner != Thread.current\n185       @mon_mutex.lock\n186       @mon_owner = Thread.current\n187     end\n188     @mon_count += 1\n189   end\n190\n191   #\n192   # Leaves exclusive section.\n193   #\n194   def mon_exit\n195     mon_check_owner\n196     @mon_count -=1\n197     if @mon_count == 0\n198       @mon_owner = nil\n199       @mon_mutex.unlock\n200     end\n201   end\n```\n", "labels": [], "number": 874, "updated_at": "2016-02-13 01:44:43", "user": 124641, "closed_at": "2015-05-18 06:34:30", "id": 68651879, "title": "Fix for MonitorMixin bug that appears after thread death", "url": "https://api.github.com/repos/ruby/ruby/issues/874", "created_at": "2015-04-15 11:18:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102699908", "text": "Looks good to me. @shugo what do you think?\n", "created_at": "2015-05-16 21:33:04", "user": 3124, "id": 102699908}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102883670", "text": "@tenderlove The proposed fix looks good.  I'll merge it.\n", "created_at": "2015-05-18 01:20:28", "user": 34552, "id": 102883670}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102948480", "text": "Thanks @shugo & @tenderlove!\n", "created_at": "2015-05-18 07:26:08", "user": 124641, "id": 102948480}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157316291", "text": "This patch was merged on May. Any particular reason it's not been backported on 2.1.x and 2.2.x?\n", "created_at": "2015-11-17 09:18:16", "user": 207754, "id": 157316291}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/183558657", "text": "FWIW I spent a good amount of time tracking this issue down. It would be great if this was backported.\n\nThe scenario that I was seeing (but should also be fixed by this PR):\n1. `t1` enters and owns the lock, `@mon_count` is `1` and `@mon_owner` is `t1`.\n2. `t2` enters and blocks trying to acquire the lock in `Mutex#lock`.\n3. `t1` exits the monitor. This releases the `Mutex` and signals `t2`, which causes it to return from [`native_cond_wait`](https://github.com/ruby/ruby/blob/v2_1_6/thread.c#L4343). However, `t1` still owns the GIL and `t2` [blocks trying to reacquire the GIL](https://github.com/ruby/ruby/blob/v2_1_6/thread.c#L4419).\n4. `t1` kills `t2` using [`Thread#kill`](http://ruby-doc.org/core-2.1.6/Thread.html#method-i-kill). This sets the interrupt flag on `t2`.\n5. `t1` releases the GIL.\n6. `t2` acquires GIL. Because the `t2` was signaled by the mutex being released, and not interrupted by the `kill`, the `interrupted` variable is `false`. This [prevents interrupts from being checked](https://github.com/ruby/ruby/blob/v2_1_6/thread.c#L4437-L4439).\n7. `t2` executes the remainder of [MonitorMixin#mon_enter](https://github.com/ruby/ruby/blob/v2_1_6/lib/monitor.rb#L186-L188) before checking interrupts. This causes `@mon_owner` to be incorrectly assigned and `@mon_count` to be artificially incremented to `1`.\n8. `t2` is killed. Because it's killed before entering the [`begin`](https://github.com/ruby/ruby/blob/v2_1_6/lib/monitor.rb#L209) block in `mon_synchronize`, the `ensure` block never runs, and the `@mon_count` and `@mon_owner` variables are not modified.\n9. `t1` enters and owns the lock (`t2` doesn't own the lock anymore). But because `@mon_count` was not updated, `@mon_count` is now `2`, and the lock will not be released for as long as `t1` is alive.\n\nThis fix works for `MonitorMixin`, but would not fix any other code that makes similar assumptions about how mutexes in MRI work. I think a better fix would be to have `rb_mutex_lock` always check for interrupts before returning.\n", "created_at": "2016-02-13 01:44:43", "user": 4303686, "id": 183558657}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Clean up warnings clang is emitting.\n", "labels": [], "number": 875, "updated_at": "2015-04-19 03:20:49", "user": 230310, "closed_at": "2015-04-19 03:20:49", "id": 69375938, "title": "Adding parens around assignments to get rid of Wparentheses warnings", "url": "https://api.github.com/repos/ruby/ruby/issues/875", "created_at": "2015-04-19 03:06:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":cat: \n", "labels": [], "number": 876, "updated_at": "2015-04-20 07:15:09", "user": 1147484, "closed_at": "2015-04-20 03:46:15", "id": 69466285, "title": "Fix typos", "url": "https://api.github.com/repos/ruby/ruby/issues/876", "created_at": "2015-04-19 21:23:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/94378042", "text": "@hsbt thank you \n", "created_at": "2015-04-20 07:15:09", "user": 1147484, "id": 94378042}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This test case tests not `rb_check_convert_type` but `Kernel#Array`.\nIf we test `rb_check_convert_type`, `assert_equal([o], Array(o))` should be `assert_equal(nil, Array(o))`.\n", "labels": [], "number": 877, "updated_at": "2015-04-21 11:47:09", "user": 5356517, "closed_at": "2015-04-21 11:47:09", "id": 69504345, "title": "[ci skip] Fix test name", "url": "https://api.github.com/repos/ruby/ruby/issues/877", "created_at": "2015-04-20 04:28:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [1568662, 71481, 6672367, 5409858, 64050, 1445068]}, "text": "Allows for the use of heredocs which appear nicely indented in ruby source code, but the indentation is removed during parsing.\n\nOriginal proposal: https://bugs.ruby-lang.org/issues/9098\n\nUses the syntax suggested by Avdi Grimm (`<<~`), and should have the same semantics as `String#strip_heredoc` from ActiveSupport, that is, the indentation of the least-indented line is removed from each line of the string.\n\nNo attempt was made to deal with inconsistent indentation (tabs are considered equal to spaces).\n\nPlease let me know if I can improve this patch. Thanks!\n", "labels": [], "number": 878, "updated_at": "2015-12-08 10:26:09", "user": 3877651, "closed_at": "2015-12-08 10:26:08", "id": 69568311, "title": "parse.y: add heredoc <<~ syntax (Feature #9098)", "url": "https://api.github.com/repos/ruby/ruby/issues/878", "created_at": "2015-04-20 11:39:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95315836", "text": "Yay!\n", "created_at": "2015-04-22 19:52:06", "user": 982, "id": 95315836}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95317838", "text": ":+1: \n", "created_at": "2015-04-22 19:58:11", "user": 357237, "id": 95317838}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95359540", "text": "What happens if there are blank lines in the here doc (not necessarily with leading whitespace) ? \n", "created_at": "2015-04-22 22:51:14", "user": 52120, "id": 95359540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95360303", "text": "@Fryguy currently those would be considered lines with no indentation, so they would cause the entire heredoc to be flush left. That means that the documentation I just pushed is incorrect, but before I fix it, do you think it's better to ignore blank lines, or treat them as lines with no indentation?\n", "created_at": "2015-04-22 22:57:05", "user": 3877651, "id": 95360303}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95362851", "text": "I was originally thinking ignore them for the purposes of figuring out the strip size.  As a user of the method, my least surprise would be with this:\n\n``` ruby\nclass FancyHello\n  def self.hello\n    puts <<~README.inspect\n      Hello\n\n        World!\n    README\n  end\nend\n\nFancyHello.hello # => \"Hello\\n\\n  World!\\n\"\n```\n\nNot 100% sure though...what do others think? @avdi?\n", "created_at": "2015-04-22 23:09:06", "user": 52120, "id": 95362851}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95372690", "text": "With this last commit, lines which are blank (empty or consisting only of tabs and spaces) will not be used to find the base indentation level. On a blank line, any amount of indentation less than the heredoc's base indentation level will be ignored, while any additional indentation will be preserved.\n", "created_at": "2015-04-23 00:11:19", "user": 3877651, "id": 95372690}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95381529", "text": "I expect that literally written spaces/tabs would be stripped, but not escaped ones, such as `\\`, `\\s`, `\\t`, `\\040`, `\\x09`, and so on.\nIf we use your approach, `line_indent` should be counted at parsing each lines, but not after the whole here doc, I think.\n", "created_at": "2015-04-23 01:22:19", "user": 16700, "id": 95381529}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95486359", "text": "@nobu `\\` (backslash space) is now preserved when it appears at the start of a line (other escape sequences should be the same). To achieve this, I moved the counting of `line_indent` inside `parser_tokadd_string`. Is this more or less what you had in mind?\n", "created_at": "2015-04-23 08:14:46", "user": 3877651, "id": 95486359}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95734394", "text": "I've thought about this a lot, and I've ended up with two options that I would find acceptable:\n\n#1. Indent is based on shortest-indented _non-whitespace_ line. So: \n\n``` ruby\nclass FancyHello\n  def self.hello\n    puts <<~README.inspect\n      Hello\n\n        World!\n    README\n  end\nend\n```\n\noutputs:\n\n```\nHello\n\n  World!\n```\n\n#2. Final indent is based on the indent level of the closing marker (`README`, in this example). Output would be: \n\n```\n  Hello\n\n    World!\n```\n\nOf the two, I suspect #1 is less likely to surprise people. In both cases, blank lines are ignored for the purpose of indent.\n", "created_at": "2015-04-23 22:20:48", "user": 982, "id": 95734394}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95746943", "text": "@avdi Seems like we're all leaning toward #1, that's the behavior implemented in this PR.\n", "created_at": "2015-04-23 23:31:06", "user": 3877651, "id": 95746943}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/96323675", "text": "Escaped spaces seem fine.\nStill not working well with string interpolation, `#{}`.\nYou'll need to reset `heredoc_indent` at the beginning of a heredoc but not for each fragments, as well as `lex_strterm`, and dedent them at the rule `string1`.\nAlso, `heredoc_indent` needs to be saved/restored around `compstmt` in `string_content`.\n", "created_at": "2015-04-26 05:08:30", "user": 16700, "id": 96323675}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/96323793", "text": "BTW, it's better to adopt the existing coding style (indent, braces, etc.) to send patches, even if it is far from your favorites.\nThis is not MUST and won't be the only reason to reject for ruby usually, but recommended in general.\n", "created_at": "2015-04-26 05:14:02", "user": 16700, "id": 96323793}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/96421706", "text": "@nobu I definitely didn't intend to introduce style inconsistencies! I guess you specifically meant where I was using just spaces for indentation, instead of tabs and then spaces ... if so, I think I have fixed it with this last commit. I'll work on the other issues later this week. Thanks for all the feedback!\n", "created_at": "2015-04-26 19:13:22", "user": 3877651, "id": 96421706}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98568144", "text": "@nobu With the changes you mentioned above, interpolation seems to be working now. I also updated ripper to provide the dedented string and added support for backticks.\n", "created_at": "2015-05-04 02:16:33", "user": 3877651, "id": 98568144}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/121659349", "text": ":+1: This would solve a long-time annoyance I (and presumably many others) have had with the heredoc syntax. Rails has had [a solution to this](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/strip.rb) for a while, but for non-rails code the need to remove indentation from heredoc strings has been rather irritating.\n", "created_at": "2015-07-15 15:53:22", "user": 1876931, "id": 121659349}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153817829", "text": "Hi! I'm guessing this would need a rebase if it was to be merged, but... is it still being considered? I would personally find it very handy to have it in core.\n", "created_at": "2015-11-04 18:21:04", "user": 2887858, "id": 153817829}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158951990", "text": "@bjmllr thank you so much for implementing this patch. I gave up a while back since I don't know C and lexer so well and couldn't finish the patch.\n\nPer @avdi's [comment](https://github.com/ruby/ruby/pull/878#issuecomment-95734394), the original intention is to have the output as example `#1` as well. I'm glad that this is being adopted.\n", "created_at": "2015-11-23 14:32:35", "user": 4912, "id": 158951990}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/160236227", "text": "I rebased this branch and made a first attempt at @matz 's [request regarding the handling of hard tabs](https://bugs.ruby-lang.org/issues/9098#note-13). It should now do something sensible for any indentation other than spaces followed by tabs on a single line.\n\nThe build error seems to be unrelated, something in `test_fork.rb`?\n", "created_at": "2015-11-28 01:36:49", "user": 3877651, "id": 160236227}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/160242983", "text": "@bjmllr I re-runned Travis CI. \n", "created_at": "2015-11-28 03:07:21", "user": 12301, "id": 160242983}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/160243089", "text": "I'm confused. Why are tabs being treated as equivalent to spaces at all? E.g. If I write:\n\n``` ruby\ndef hello\n  puts <<~README.inspect\n<tab>Hello\n\n<space><space><space><space><space><space><space><space>World!\n    README\n  end\nend\n```\n\nAre you saying that should be accepted by the compiler? Why? Why should that be any less invalid than:\n\n``` ruby\ndef hello\n  puts <<~README.inspect\n<tab>Hello\n\n<space><space><space><space>World!\n    README\n  end\nend\n```\n\nor\n\n``` ruby\ndef hello\n  puts <<~README.inspect\n<space><space><space><space>Hello\n\n<space><space>World!\n    README\n  end\nend\n```\n\nShouldn't we just throw an error in all of those cases? Is there ever a legitimate reason why you'd want to allow inconsistent indentation in one of these blocks? What happens when someone has their editor set to display tabs as 4 spaces, and writes:\n\n``` ruby\ndef hello\n  puts <<~README.inspect\n<space><space><space><space>Hello\n\n<tab>World!\n    README\n  end\nend\n```\n\nWhy should that result in:\n\n``` ruby\nhello #=> \"    Hello\\n\\n\\tWorld!\"\n```\n\nI certainly wouldn't expect that result intuitively. In such a case, wouldn't a well-written error message explaining that I'm mixing tabs and spaces be much more helpful for me as a developer?\n", "created_at": "2015-11-28 03:12:09", "user": 1876931, "id": 160243089}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162841873", "text": "Closing this since the feature was added in https://github.com/ruby/ruby/commit/9a28a29b870b5f45d370bc8f16c431b435f0bbb3\n", "created_at": "2015-12-08 10:26:08", "user": 3877651, "id": 162841873}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This method first tries to call `to_ary`.\nSo add test checking this behavior.\n", "labels": [], "number": 879, "updated_at": "2015-04-22 03:55:40", "user": 5356517, "closed_at": "2015-04-22 03:49:38", "id": 69834830, "title": "Add a test case to Kernel#Array", "url": "https://api.github.com/repos/ruby/ruby/issues/879", "created_at": "2015-04-21 12:34:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95019549", "text": "@yui-knk thanks!\n", "created_at": "2015-04-22 03:50:40", "user": 5266933, "id": 95019549}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95020331", "text": ":)\n", "created_at": "2015-04-22 03:55:40", "user": 5356517, "id": 95020331}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This method first tries to call `to_str`.\nSo add test checking this behavior.\n", "labels": [], "number": 880, "updated_at": "2015-04-22 03:49:38", "user": 5356517, "closed_at": "2015-04-22 03:49:38", "id": 69990018, "title": "Add a test case to Kernel#String", "url": "https://api.github.com/repos/ruby/ruby/issues/880", "created_at": "2015-04-22 00:57:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's just a tiny change for the sentence to make sense.\n", "labels": [], "number": 881, "updated_at": "2015-04-23 01:02:46", "user": 645514, "closed_at": "2015-04-23 01:02:46", "id": 70174064, "title": "Fix typo in Delegator documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/881", "created_at": "2015-04-22 16:28:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This adds support for Bitrig (a BSD Unix forked from OpenBSD) to rubygems.\n", "labels": [], "number": 882, "updated_at": "2015-04-23 12:47:39", "user": 768163, "closed_at": "2015-04-23 00:51:06", "id": 70271488, "title": "Add Bitrig to rubygems platforms.", "url": "https://api.github.com/repos/ruby/ruby/issues/882", "created_at": "2015-04-23 00:45:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95377628", "text": "Please open pull request to upstream repository https://github.com/rubygems/rubygems\n", "created_at": "2015-04-23 00:51:06", "user": 12301, "id": 95377628}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95378247", "text": "Will do.  Didn't realize there was a seperate repo for that.\n", "created_at": "2015-04-23 00:57:00", "user": 768163, "id": 95378247}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change it to match symbol after `#{mid}`\n", "labels": [], "number": 883, "updated_at": "2015-04-25 00:18:23", "user": 668524, "closed_at": "2015-04-24 15:40:12", "id": 70715909, "title": "Change quote symbol in expection 'NoMethodError'", "url": "https://api.github.com/repos/ruby/ruby/issues/883", "created_at": "2015-04-24 15:15:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95970228", "text": "Thanks for the PR, but I'm afraid that this is the standard error message, is it not?\n\n```\n> ruby -e \"42.foo\"\n-e:1:in `<main>': undefined method `foo' for 42:Fixnum (NoMethodError)\n```\n\nIt is meant as an opening single quote.\n", "created_at": "2015-04-24 15:40:12", "user": 33770, "id": 95970228}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95971463", "text": "Oh, sorry. I see now, that same syntax used in many places. But I cannot understand why quotes not paired\n", "created_at": "2015-04-24 15:45:01", "user": 668524, "id": 95971463}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95988617", "text": "I think it's a poor man's replacement for ‘ and ’\nThe fact that ASCII only had one single and one double quote, instead of an opening and closing pair for each is a tragedy that will plague us till the end of time.\n", "created_at": "2015-04-24 16:44:53", "user": 33770, "id": 95988617}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/95995717", "text": "Isn't ruby use UTF-8 for default since Ruby-2.0 (or so). Are we really should consider ASCII symbols to end of time?\n", "created_at": "2015-04-24 17:13:31", "user": 668524, "id": 95995717}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/96107456", "text": "External encoding is not always UTF-8.\n", "created_at": "2015-04-25 00:18:23", "user": 16700, "id": 96107456}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is not intended to merge but show a workaround.\n\nAdditionally how hard shadowing __pioinfo is for cruby.\n\nhttps://bugs.ruby-lang.org/issues/11118\n", "labels": [], "number": 884, "updated_at": "2016-11-05 09:57:46", "user": 13423, "closed_at": "2016-11-05 09:57:46", "id": 70816808, "title": "workaround for MSVC14", "url": "https://api.github.com/repos/ruby/ruby/issues/884", "created_at": "2015-04-24 23:09:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Bug #11075](https://bugs.ruby-lang.org/issues/11075) mentioned that the rational literal was undocumented. This is my first PR to Ruby so please let me know if I am not following any conventions.\n", "labels": [], "number": 885, "updated_at": "2015-04-30 08:03:14", "user": 9510845, "closed_at": "2015-04-30 08:03:14", "id": 70900663, "title": "[DOC] Added documentation for rational literal", "url": "https://api.github.com/repos/ruby/ruby/issues/885", "created_at": "2015-04-25 12:08:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On SimpleCov we just [bumped into the unexpected naming](https://github.com/colszowka/simplecov/pull/385) of `English.rb` in the standard library. I think it is a pretty common assumption that requiring in ruby always is lowercase, and at least the STDLIB does adhere to this, and in that PR we even had the case that on one operating system this worked because it was not considering `English` and `english` to be different files, while on travis the build failed...\n\nI would like to propose this change to bring `require 'english'` in line with common behaviour and the principle of least surprise. A placeholder `English.rb` is provided that will require the renamed, original file.\n", "labels": [], "number": 886, "updated_at": "2016-08-17 11:36:23", "user": 13972, "closed_at": "2016-08-17 11:36:23", "id": 71594724, "title": "Renames stdlib/English to english to keep naming conventions", "url": "https://api.github.com/repos/ruby/ruby/issues/886", "created_at": "2015-04-28 13:45:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97069449", "text": "Disclaimer: Maybe this is a really silly idea, if this is not worth merging I am perfectly fine with that, but I bumped into it and it seemed easy enough to resolve quickly :)\n", "created_at": "2015-04-28 13:46:23", "user": 13972, "id": 97069449}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97106439", "text": "I understand your sentiment.  We experience this kind of problem from time to time thanks to the consumer industry where most popular consumer OS's are shipped with case insensitive filesystems by default.\n\nWhile your suggestion has a point, I think English.rb is considered to be a thing of the past when use of global variables is discouraged even in the human readable English forms.  Most of them either have better alternatives as documented (= better than $FANCY_ENGLISH_NAME) or are of no use except for one-liners, so I'd suggest you avoid use of them.\n", "created_at": "2015-04-28 15:31:27", "user": 10236, "id": 97106439}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is really missing in the `CGI::Cookie`.\n\nhttps://www.owasp.org/index.php/HttpOnly\n\nIn a follow-up PR I would like to add the flag to the cookies generated by `CGI::Session`.\n", "labels": [], "number": 887, "updated_at": "2015-05-14 23:28:07", "user": 51095, "closed_at": "2015-05-14 23:28:07", "id": 71826853, "title": "Implement HttpOnly flag for cookies.", "url": "https://api.github.com/repos/ruby/ruby/issues/887", "created_at": "2015-04-29 09:30:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98050512", "text": "Rebased.\n", "created_at": "2015-05-01 05:48:54", "user": 51095, "id": 98050512}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98479473", "text": "@xibbar Can you review this?\n", "created_at": "2015-05-03 13:13:54", "user": 12301, "id": 98479473}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/99730050", "text": "Please wait few days.\n", "created_at": "2015-05-07 05:55:17", "user": 25030, "id": 99730050}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/99753709", "text": "No problem, can wait, rebase, whatever is needed to get this in ;-)\n", "created_at": "2015-05-07 07:24:45", "user": 51095, "id": 99753709}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102079105", "text": "@xibbar : shall I do the changes you suggest and rebase? Is there anything else I can do to get this in? Thx!\n", "created_at": "2015-05-14 15:46:20", "user": 51095, "id": 102079105}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102197490", "text": "Thank you. but I will rebase and commit.\nI'm waiting what other committer say.\nJust I think to wait sufficientlly.\nPlease wait for my commit.\n", "created_at": "2015-05-14 23:21:12", "user": 25030, "id": 102197490}], "assignees": [25030, 25030], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 888, "updated_at": "2017-11-15 08:52:16", "user": 37493, "closed_at": "2015-05-08 06:07:13", "id": 71935964, "title": "missing \" a \"", "url": "https://api.github.com/repos/ruby/ruby/issues/888", "created_at": "2015-04-29 17:23:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97546691", "text": ":question: an expression :question: \n", "created_at": "2015-04-29 19:10:43", "user": 193936, "id": 97546691}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97547071", "text": ":+1: \n", "created_at": "2015-04-29 19:11:53", "user": 217273, "id": 97547071}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97666708", "text": "I think \"an expression\" but this is \"a rarely used expression\", the word next to \"a\" doesn't start with a vowel so no \"n\". I'm not a native speaker though :)\n", "created_at": "2015-04-30 05:34:05", "user": 37493, "id": 97666708}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97677354", "text": "@riffraff you are correct. The patch is OK as-is\n", "created_at": "2015-04-30 06:27:43", "user": 9831, "id": 97677354}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Even thought this warning makes sense at first sight, there are actually\nvalid use cases for private attributes. So much so that Sandi Metz\nadvocates for it in her \"Practical Object-Oriented Design in Ruby\".\n\nI'm not advocating for or against the usage of private accessors, but I\ndon't think we should raise a warning when someone uses them.\n", "labels": [], "number": 889, "updated_at": "2015-04-30 23:12:55", "user": 166304, "closed_at": "2015-04-30 22:17:09", "id": 72229383, "title": "Remove warning for private attributes", "url": "https://api.github.com/repos/ruby/ruby/issues/889", "created_at": "2015-04-30 17:35:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97894474", "text": "This warning triggers only with `ruby -w`.\n\nThis warning only triggers following private scope:\n\n```\n$ ruby -we 'class C; private; attr :foo; end'\n-e:1: warning: private attribute?\n```\n\nBut not when made explicitly private:\n\n```\n$ ruby -we 'class C; attr :foo; private :foo; end'\n```\n\nI think the reasoning behind this behavior is to prevent you from accidentally making an attribute private. I don't think the warning is meant to discourage private attributes.\n\nSo I think it is an OK warning to have.\n\nThe warning message could be improved, though, since the intention of the warning is unclear.\n", "created_at": "2015-04-30 17:43:52", "user": 9831, "id": 97894474}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97896472", "text": "I actually triggered it by activating the warnings on `Rake::TestTask`, which will call `ruby -w` behind the scenes.\n\nI did not know about the second syntax, but even though it seems more verbose, I get what you're saying. \n\nSo, would you want me to rework de warning, or is this to much of an edge case to matter?\n", "created_at": "2015-04-30 17:49:35", "user": 166304, "id": 97896472}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97905995", "text": "This is a duplicate of #849 and also reported here https://bugs.ruby-lang.org/issues/10967\n\n@drbrain I understand what you said, but what if you did that on purpose?, in that case you can't use that style without warnings.\n\nDo I need to do this ...\n\n``` ruby\n  attr_accessor :a, :b, :c\n\n  private :a, :a=, :b, :b=, :c, :c=\n```\n\nDoesn't sound like a great idea to me.\n", "created_at": "2015-04-30 18:20:18", "user": 52642, "id": 97905995}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97907109", "text": "I'm not the person who decides, I mainly wanted to illustrate a possible reason for creating the warning (it seems to match [bug 10967](https://bugs.ruby-lang.org/issues/10967)).\n\nUnfortunately you also can't `private attr_accessor :a, :b`\n", "created_at": "2015-04-30 18:23:06", "user": 9831, "id": 97907109}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97907774", "text": "@drbrain maybe is better to move the discussion to [bug 10967](https://bugs.ruby-lang.org/issues/10967)\n", "created_at": "2015-04-30 18:24:29", "user": 52642, "id": 97907774}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97986229", "text": "@drbrain @spastorino Should I close this in favor of that bug report, then?\n", "created_at": "2015-04-30 22:15:44", "user": 166304, "id": 97986229}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97987082", "text": "Closing in favor of #849.\n", "created_at": "2015-04-30 22:17:09", "user": 166304, "id": 97987082}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/97996959", "text": "@zamith :+1:\n", "created_at": "2015-04-30 23:12:55", "user": 52642, "id": 97996959}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 890, "updated_at": "2015-05-03 13:13:33", "user": 529516, "closed_at": "2015-05-03 13:01:01", "id": 72802211, "title": "Fix typo in doc [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/890", "created_at": "2015-05-03 12:57:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98478248", "text": "Thanks!\n", "created_at": "2015-05-03 13:08:57", "user": 529516, "id": 98478248}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/98479375", "text": "Thanks too! \n", "created_at": "2015-05-03 13:13:33", "user": 12301, "id": 98479375}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change phases out <code>Prime::OldCompatibility</code> module and <code>Prime::new</code> which were in place to extend compatibility to Ruby 1.8 and are obsolete now. \n", "labels": [], "number": 891, "updated_at": "2015-05-22 15:40:08", "user": 4642242, "closed_at": "2015-05-22 13:37:56", "id": 73043708, "title": "remove support for obsolete Prime.new", "url": "https://api.github.com/repos/ruby/ruby/issues/891", "created_at": "2015-05-04 15:02:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103289095", "text": "Please add description of this pull request.\n", "created_at": "2015-05-19 01:12:46", "user": 12301, "id": 103289095}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103292769", "text": "It's true the description could be more explicit, but it's actually clear what's going on. I'll clean it up.\n", "created_at": "2015-05-19 01:25:29", "user": 33770, "id": 103292769}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103292946", "text": "@marcandre :+1: \n\nrubyspec is already fixed at https://github.com/ruby/rubyspec/pull/63\n", "created_at": "2015-05-19 01:26:47", "user": 12301, "id": 103292946}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/104694172", "text": "Thanks @Nullset14 and @hsbt \n", "created_at": "2015-05-22 15:40:08", "user": 33770, "id": 104694172}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 892, "updated_at": "2015-05-10 11:15:11", "user": 1147484, "closed_at": "2015-05-10 03:01:56", "id": 73068455, "title": "Fix typo in 'indicies' word", "url": "https://api.github.com/repos/ruby/ruby/issues/892", "created_at": "2015-05-04 16:43:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/100625195", "text": "thanks!\n", "created_at": "2015-05-10 11:15:10", "user": 1147484, "id": 100625195}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This was mentioned in:\n\nhttps://bugs.ruby-lang.org/issues/9424#note-64\n\nThis change will set the defaults of a new SSLContext to those defined in `DEFAULT_PARAMS`. \n\nClients such as `Net::SMTP` call `default_ssl_context`, which initializes a `SSLContext`. If `set_params` is not called, all the values will remain nil, and OpenSSL may not set them at all to anything. This can lead to issues with certificate stores not being set properly.\n", "labels": [], "number": 893, "updated_at": "2015-11-13 05:36:21", "user": 963826, "closed_at": "2015-11-13 05:36:20", "id": 73227297, "title": "Set SSLContext default parameters to the Ruby defaults", "url": "https://api.github.com/repos/ruby/ruby/issues/893", "created_at": "2015-05-05 06:46:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156328024", "text": "This was originally fixed by d8225d9f048e0df232cde5f17941b8e06d621d0b\n", "created_at": "2015-11-13 05:36:20", "user": 277819, "id": 156328024}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The key difference between `Array#reject!` and `Array#delete_if` (apart from mutating `self`) is the return value when the given block always evaluates `false`.\n\nAlso, leading the documentation with \"Equivalent to Array#delete_if\" was distracting and perhaps redundant with the \"See also\" section.\n", "labels": [], "number": 894, "updated_at": "2015-11-06 14:19:15", "user": 8948573, "closed_at": "2015-11-06 14:02:25", "id": 73733467, "title": "Clarifies Array#reject! documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/894", "created_at": "2015-05-06 20:49:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154419974", "text": "@GxSplinter Thanks!\n", "created_at": "2015-11-06 14:19:15", "user": 5266933, "id": 154419974}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed a parsing issue with body_ext_mpart -  as can be observed from RFC 3501\n\n```\nbody-ext-mpart  = body-fld-param [SP body-fld-dsp [SP body-fld-lang\n                  [SP body-fld-loc *(SP body-extension)]]]\n                    ; MUST NOT be returned on non-extensible\n                    ; \"BODY\" fetch\n```\n\nwhich means `body-fld-param SP body-fld-dsp` should be an acceptable form.\n\nthe current implementation is actually\n\n```\nbody-ext-mpart  = body-fld-param [SP body-fld-dsp SP body-fld-lang\n                  [SP body-fld-loc *(SP body-extension)]]\n                    ; MUST NOT be returned on non-extensible\n                    ; \"BODY\" fetch\n```\n\nsee [issue 11128](https://bugs.ruby-lang.org/issues/11128)\n", "labels": [], "number": 895, "updated_at": "2015-05-10 13:45:15", "user": 6547034, "closed_at": "2015-05-10 13:45:15", "id": 74150536, "title": "Erroneous parsing of body_ext_mpart", "url": "https://api.github.com/repos/ruby/ruby/issues/895", "created_at": "2015-05-07 22:34:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/100643272", "text": "merged at f954f0d8404059b2be73d382e3166ecc1076a3c0\n", "created_at": "2015-05-10 13:45:14", "user": 12301, "id": 100643272}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Formatting `Time` objects by `%(TIMEFMT)T`.\n[ruby-list:50128]\n", "labels": [], "number": 896, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 74256775, "title": "sprintf.c: TIMEFMT", "url": "https://api.github.com/repos/ruby/ruby/issues/896", "created_at": "2015-05-08 06:48:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 897, "updated_at": "2015-05-08 20:39:25", "user": 3800237, "closed_at": "2015-05-08 13:58:31", "id": 74366914, "title": "Refactor test on Matrix#determinant", "url": "https://api.github.com/repos/ruby/ruby/issues/897", "created_at": "2015-05-08 13:36:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/100356314", "text": "Thank you!\n", "created_at": "2015-05-08 20:39:25", "user": 3800237, "id": 100356314}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "An un-blocking function passed to `rb_thread_call_without_gvl()` is involuntarily fired when a sub-thread exits and the main thread become only live thread.\nThis causes accidental interruption in native extension libraries.\n\nThis pull request fixes the issue and is tested by the test code in https://github.com/kubo/ruby-oci8/issues/74#issuecomment-100638168.\n", "labels": [], "number": 898, "updated_at": "2015-06-14 22:54:21", "user": 43904, "closed_at": "2015-06-14 22:54:21", "id": 75583583, "title": "Don't interrupt the living main thread when a last sub-thread exits.", "url": "https://api.github.com/repos/ruby/ruby/issues/898", "created_at": "2015-05-12 12:22:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This changes the ssl connection to use a non-blocking connect + `IO.select` so that we can eliminate another place where timeouts are used.\n\nWhat do you think? /cc @nurse\n", "labels": [], "number": 899, "updated_at": "2015-06-15 02:13:57", "user": 3124, "closed_at": "2015-06-15 02:13:57", "id": 75732485, "title": "convert timeout to use `connect_nonblock`", "url": "https://api.github.com/repos/ruby/ruby/issues/899", "created_at": "2015-05-12 20:43:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added some documentation for the String#sub behaviour pointed out in Bug #11132 on the ruby-trunk issue tracker.\n", "labels": [], "number": 900, "updated_at": "2015-05-16 12:42:09", "user": 9510845, "closed_at": "2015-05-16 12:42:09", "id": 76979484, "title": "Doc patch for Bug #11132", "url": "https://api.github.com/repos/ruby/ruby/issues/900", "created_at": "2015-05-16 08:18:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@sorah plz have a look :eyeglasses: \n", "labels": [], "number": 901, "updated_at": "2015-05-16 12:43:27", "user": 69755, "closed_at": "2015-05-16 12:39:28", "id": 77021150, "title": "Fix sample code of Enumerable#grep_v [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/901", "created_at": "2015-05-16 11:48:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102623684", "text": "@hsbt thanks\n", "created_at": "2015-05-16 12:41:55", "user": 69755, "id": 102623684}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/102623738", "text": "@eagletmt :+1: \n", "created_at": "2015-05-16 12:43:27", "user": 12301, "id": 102623738}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":cat: \n", "labels": [], "number": 902, "updated_at": "2015-07-29 15:22:00", "user": 1147484, "closed_at": "2015-05-19 01:09:11", "id": 77556533, "title": "Fix typo (wich -> which) in ccan/list/list.h [skip ci]", "url": "https://api.github.com/repos/ruby/ruby/issues/902", "created_at": "2015-05-18 08:20:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103287414", "text": "ccan is external library. It's not maintain by Ruby core team.\n\nPlease report ccan upstream.\n", "created_at": "2015-05-19 01:09:07", "user": 12301, "id": 103287414}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103348843", "text": "Okay, thanks for review :)\n", "created_at": "2015-05-19 05:58:17", "user": 1147484, "id": 103348843}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 903, "updated_at": "2015-05-20 14:12:46", "user": 1147484, "closed_at": "2015-05-19 08:16:21", "id": 77595356, "title": "Update Benchmark documentation [skip ci]", "url": "https://api.github.com/repos/ruby/ruby/issues/903", "created_at": "2015-05-18 10:14:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103349087", "text": "Oh, sorry you're right \n", "created_at": "2015-05-19 05:59:37", "user": 1147484, "id": 103349087}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103542417", "text": "@hsbt you are forgot add reference to me in changelog :'(\n", "created_at": "2015-05-19 15:13:07", "user": 1147484, "id": 103542417}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a grammar fix. It should read 'Returns a two element array', like line 1979 of the same file.\n", "labels": [], "number": 904, "updated_at": "2015-06-01 05:45:46", "user": 2782858, "closed_at": "2015-06-01 05:39:46", "id": 77871685, "title": "Fix typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/904", "created_at": "2015-05-19 00:46:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/107315903", "text": "@jwworth thanks!\n", "created_at": "2015-06-01 05:45:46", "user": 5266933, "id": 107315903}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 905, "updated_at": "2015-05-20 14:28:28", "user": 1147484, "closed_at": "2015-05-20 14:26:03", "id": 78223756, "title": "Fix formatting for padding argument in Base64#urlsafe_encode64", "url": "https://api.github.com/repos/ruby/ruby/issues/905", "created_at": "2015-05-19 19:37:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103899671", "text": "Looks good to me.  I'd like to import the pull request to Ruby SVN trunk, but I don't know the workflow to do so.  Any one could tell me?\n", "created_at": "2015-05-20 14:06:34", "user": 21557, "id": 103899671}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103902346", "text": "@mame I don't know too :sweat:\nBut I think that you need pull my commit and after that push this to ruby svn `trunk` branch like [this](https://github.com/ruby/ruby/commit/0c14c3ab0b1bbf3f2a5b2c0accb2a53528635e44)\n", "created_at": "2015-05-20 14:16:18", "user": 1147484, "id": 103902346}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103903428", "text": "So I am sure that @zzak or @hsbt will help :smiley: \n", "created_at": "2015-05-20 14:20:24", "user": 1147484, "id": 103903428}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103903671", "text": "Thanks, actually @hsbt is now helping me on IRC :-)\n", "created_at": "2015-05-20 14:21:30", "user": 21557, "id": 103903671}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103904002", "text": "super! :clap:\n", "created_at": "2015-05-20 14:22:58", "user": 1147484, "id": 103904002}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103905334", "text": "Great.  Thank you @davydovanton !\n", "created_at": "2015-05-20 14:28:17", "user": 21557, "id": 103905334}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/103905360", "text": "thanks! :star2:\n", "created_at": "2015-05-20 14:28:26", "user": 1147484, "id": 103905360}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 906, "updated_at": "2015-05-21 01:53:19", "user": 2782858, "closed_at": "2015-05-21 01:53:19", "id": 78643707, "title": "Fixes for grammar and style [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/906", "created_at": "2015-05-20 18:46:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 907, "updated_at": "2015-06-01 05:45:34", "user": 1074708, "closed_at": "2015-06-01 05:36:50", "id": 79154048, "title": "Update csv.rb, fix typo in doc", "url": "https://api.github.com/repos/ruby/ruby/issues/907", "created_at": "2015-05-21 20:42:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/107315835", "text": "@will-b thanks!\n", "created_at": "2015-06-01 05:45:34", "user": 5266933, "id": 107315835}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 908, "updated_at": "2015-05-25 01:48:00", "user": 5356517, "closed_at": "2015-05-25 00:36:42", "id": 79812925, "title": "[ci skip] Fix call-seq of Numeric#negative?", "url": "https://api.github.com/repos/ruby/ruby/issues/908", "created_at": "2015-05-23 10:52:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105028818", "text": "I merged your pull request, but the automatic synchronization between SVN and the Git repository did not update this repository yet.\n@hsbt How does it work nowadays? Should I push to ruby/ruby?\n", "created_at": "2015-05-24 15:57:06", "user": 168854, "id": 105028818}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105081488", "text": "@eregon   I see Revision 50634, thank you!\n", "created_at": "2015-05-25 00:30:26", "user": 5356517, "id": 105081488}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105088336", "text": "@eregon SVN to Git sync is very fragile. If you have this issue, Please ping me. \n", "created_at": "2015-05-25 01:48:00", "user": 12301, "id": 105088336}], "assignees": [168854, 168854], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\nI was [created issue](https://bugs.ruby-lang.org/issues/11162) in redmine, but I think that here this changes will be faster to merge :sweat:\n", "labels": [], "number": 909, "updated_at": "2015-06-07 13:29:29", "user": 1147484, "closed_at": "2015-06-06 22:11:58", "id": 80301323, "title": "Update documentation for CMath library", "url": "https://api.github.com/repos/ruby/ruby/issues/909", "created_at": "2015-05-24 23:12:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108518540", "text": "@davydovanton Hi! Good proposal.\nThe things I have to say are:\n1. We should mention complex number itslef at `Complex` rather than `CMath`.\n2. `3 + 2i`(Ruby>=2.1) can also represent complex number.\n3. `CMath.cos(Complex(1, 1))` is little bit better than `CMath.cos(Complex(Math::PI))` for example(I can take care of it.)\n\nthanks!\n", "created_at": "2015-06-03 16:43:27", "user": 5266933, "id": 108518540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108520476", "text": "@gogotanaka wow! thanks for reply! :star2: \n1. I think I can update documentation for `Complex` class too.\n2. wow, I don't know about this, thanks!\n3. okay, I will fix this later\n", "created_at": "2015-06-03 16:49:30", "user": 1147484, "id": 108520476}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109280473", "text": "@gogotanaka I change example to `1 + 1i`. Also I think that I need update `Complex` documentation in  the next PR. What do you think, it's normal for you?\n", "created_at": "2015-06-05 12:31:07", "user": 1147484, "id": 109280473}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109487158", "text": "@gogotanaka so, I did replaced `Brief overview` to `Complex` class, it's normal for you?\n", "created_at": "2015-06-06 00:11:46", "user": 1147484, "id": 109487158}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109493501", "text": "I will let you know \n", "created_at": "2015-06-06 01:08:02", "user": 7481436, "id": 109493501}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109518670", "text": "ok\n", "created_at": "2015-06-06 04:05:11", "user": 1147484, "id": 109518670}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109647517", "text": "@davydovanton Merged :star: thanks!\nnote: Since the documentation you've add to `complex.c` is duplication of existing one, I don't commit it for now.\nBut if you wanna improve it more, please feel free to open another ticket :D\n", "created_at": "2015-06-06 20:45:13", "user": 5266933, "id": 109647517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109756411", "text": "@gogotanaka thanks for review :star2: \n", "created_at": "2015-06-07 13:29:26", "user": 1147484, "id": 109756411}], "assignees": [5266933, 5266933], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a **line directive** to Ruby\n\n```\n  #line {nn} [\"filename\"]\n```\n\nThis is done by creating a array of filenames and using the upper bits of the line_number to determine the current filename.  The original filename is in position 0.\n\nAn extra node is added by the parser that informs the compiler of the filenames so the backtrace code can follow it.\n\nThe **__LINE__** and **__FILE__** _constants_ are updated and compile time warnings are also effected.\n", "labels": [], "number": 910, "updated_at": "2015-05-26 14:53:33", "user": 99491, "closed_at": "2015-05-26 14:53:01", "id": 80826533, "title": "Ld 2 2", "url": "https://api.github.com/repos/ruby/ruby/issues/910", "created_at": "2015-05-26 06:54:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105551957", "text": "see https://github.com/ruby/ruby/pull/911\n", "created_at": "2015-05-26 14:53:33", "user": 99491, "id": 105551957}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a **line directive** to Ruby\n\n```\n  # -*- line: [filename] {line}  -*-\n```\n\nThe filename is parsed by the _standard_ magic comment code.  if only one argument is passes it is assumed to be a line number.  If there is a parse error or the line number evaluates to 0, the directive is ignored.\n\nThis is done by creating a array of filenames and using the upper bits of the line_number to determine the current filename.  The original filename is in position 0.\n\nAn extra node is added by the parser that informs the compiler of the filenames so the backtrace code can follow it.\n\nThe **__LINE__** and **__FILE__** _constants_ are updated and compile time warnings are also effected.\n\nhttps://bugs.ruby-lang.org/issues/11181\n", "labels": [], "number": 911, "updated_at": "2018-02-23 03:06:54", "user": 99491, "closed_at": "None", "id": 80998519, "title": "Line Directive Patch", "url": "https://api.github.com/repos/ruby/ruby/issues/911", "created_at": "2015-05-26 14:52:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105558767", "text": "I don't think it's a good choice for Ruby to have a _directives_.\n\nYou can implement your own preprocessor for these needs (piggybacking on `eval` capabilities) without touching an interpreter:\n\n``` ruby\neval <<-RUBY, line, filename\n  # ...\nRUBY\n```\n\n Ruby is an interpreter and virtual machine but not your literate programming framework.\n", "created_at": "2015-05-26 15:11:18", "user": 3194530, "id": 105558767}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105604795", "text": "@marshall-lee Agreed.\n", "created_at": "2015-05-26 17:06:38", "user": 168854, "id": 105604795}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105668907", "text": "The problem is that my input file looks like\n\n```\nfile: alice\n<alice>=\n   puts \"'#{__FILE__} #{__LINE__}'\"  # alice line 2\n   <bob>\n   puts \"'#{__FILE__} #{__LINE__}'\"  # alice line 4\n\nfile: bob\n<bob>=\n   puts \"'#{__FILE__} #{__LINE__}'\"  # bob line 2\n   <charlie>\n   puts \"'#{__FILE__} #{__LINE__}'\"  # bob line 4\n\nfile: charly\n<charlie>=\n   puts \"'#{__FILE__} #{__LINE__}'\"  # charlie line 2\n```\n\nSome buildy thingy is run on this that reads all three files and used ''<alice>' as the start and generate something like:\n\n```\neval <<-'RUBY', nil, 'alice', 1\n  puts \"'#{__FILE__} #{__LINE__}' = 'alice 2'\"\n  eval <<-'RUBY2', nil, 'bob', 1\nputs \"'#{__FILE__} #{__LINE__}' = 'bob 2'\"\neval <<-'RUBY3', nil, 'charlie', 1\n  puts \"'#{__FILE__} #{__LINE__}' = 'charlie 2'\"\nRUBY3\nputs \"'#{__FILE__} #{__LINE__}' != 'bob 4'\"  # ERROR: displays as 'bob 5'\n  RUBY2\n  puts \"'#{__FILE__} #{__LINE__}' != 'alice 4'\"   # ERROR: displays as 'alice 9'\nRUBY\n```\n\nThen there is the less likeley case where you have non-complete 'code blocks'.  This would be where\nwe (for some odd reseason)  wanted to have the start of a block in one file and the end in another:\n\n```\n file a = \"class Bob\"\n file b = \"end # class Bob\"\n\n  #line 1 \"a\"\n  class bob\n  #line 1 \"b\"\n  end # class Bob\n```\n", "created_at": "2015-05-26 21:23:22", "user": 99491, "id": 105668907}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105675667", "text": "It does not have to be a _directive_, but I think that this is the cleanest approach.\nAs the _dirctive_ sets the `__LINE__` and `__FILE__` constants at parse time.\nOther syntax I have thought about implie that they can be changed at run time.\n\nAlso note that Ruby already has a directive\n\n```\n# -*- coding: UTF-8 -*-\n```\n", "created_at": "2015-05-26 21:45:55", "user": 99491, "id": 105675667}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105931781", "text": "> Then there is the less likeley case where you have non-complete 'code blocks'.\n\nWhat the problem in preprocessing the code smarter? Group all these chunks by file name, concatenate them and pass to eval.\n", "created_at": "2015-05-27 14:29:47", "user": 3194530, "id": 105931781}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/106123033", "text": "It does not have to be a _directive_, but I think that this is the cleanest approach.\nAs the _dirctive_ sets the **LINE** and **FILE** constants at parse time.\nOther syntax I have thought about implie that they can be changed at run time.\n\nAlso note that Ruby already has a directive\n\n```\n# -*- coding: UTF-8 -*-\n```\n", "created_at": "2015-05-28 00:30:12", "user": 99491, "id": 106123033}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "When the configuration options --program-prefix and --program-suffix\nare used, the shebang line is of the format `Gem.default_exec_format`.\n", "labels": [], "number": 912, "updated_at": "2015-05-27 03:05:36", "user": 2838876, "closed_at": "2015-05-27 01:31:04", "id": 81018184, "title": "Fix tests when configured with different program prefix and suffix.", "url": "https://api.github.com/repos/ruby/ruby/issues/912", "created_at": "2015-05-26 15:40:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105571651", "text": "Got it 😊 \n", "created_at": "2015-05-26 15:42:52", "user": 7481436, "id": 105571651}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105597189", "text": "Looks like the gcc mac build stalled (others were okay):\n\nhttps://travis-ci.org/ruby/ruby/jobs/64113907#L1820\n\n```\nNo output has been received in the last ... minutes, this potentially indicates a stalled build or something wrong with the build itself\n```\n\nIs this a known issue? If someone with access could please restart the build. I do not have access.\n\nThanks\n", "created_at": "2015-05-26 16:39:04", "user": 2838876, "id": 105597189}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105713354", "text": "Thanks your patch, but this repository is not rubygems upstream. Please submit this patch to https://github.com/rubygems/rubygems\n", "created_at": "2015-05-27 01:30:57", "user": 12301, "id": 105713354}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105734881", "text": "Ah, got it. I'll post there :)\n\nThx\n\nEdit: https://github.com/rubygems/rubygems/pull/1258\n", "created_at": "2015-05-27 02:43:24", "user": 2838876, "id": 105734881}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105740673", "text": "Can be closed: https://bugs.ruby-lang.org/issues/11184\n", "created_at": "2015-05-27 03:05:36", "user": 2838876, "id": 105740673}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 913, "updated_at": "2015-05-27 08:41:47", "user": 1147484, "closed_at": "2015-05-27 00:39:07", "id": 81179849, "title": "Fix tipo in ossl_asn1.c documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/913", "created_at": "2015-05-26 23:17:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/105825321", "text": "thanks @nobu :smiley: \n", "created_at": "2015-05-27 08:41:46", "user": 1147484, "id": 105825321}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We're running into an occasional segfault in Shopify production on Ruby 2.1.6 with the following stack trace:\n\n```\n(gdb) where\n#0  rb_vm_bugreport () at vm_dump.c:775\n#1  0x00007f31db6b0553 in report_bug (file=file@entry=0x0, line=<optimized out>, fmt=fmt@entry=0x7f31db8b1ccc \"Segmentation fault at %p\", args=args@entry=0x7f31dcaa5848) at error.c:312\n#2  0x00007f31db6b1733 in rb_bug (fmt=fmt@entry=0x7f31db8b1ccc \"Segmentation fault at %p\") at error.c:339\n#3  0x00007f31db79f51e in sigsegv (sig=<optimized out>, info=0x7f31dcaa5ab0, ctx=0x7f31dcaa5980) at signal.c:828\n#4  <signal handler called>\n#5  0x00007f31db84568f in cont_free (ptr=0x7f31a0001730) at cont.c:244\n#6  fiber_free (ptr=0x7f31a0001730) at cont.c:348\n#7  0x00007f31db6d7dc7 in obj_free (obj=139852186770800, objspace=0x7f31dca379a0) at gc.c:1580\n#8  gc_page_sweep (sweep_page=0x7f31dfe788e0, heap=0x7f31dca379b0, objspace=0x7f31dca379a0) at gc.c:2747\n#9  gc_heap_lazy_sweep (objspace=objspace@entry=0x7f31dca379a0, heap=heap@entry=0x7f31dca379b0) at gc.c:3018\n#10 0x00007f31db6d87f3 in gc_heap_rest_sweep (heap=0x7f31dca379b0, objspace=0x7f31dca379a0) at gc.c:3043\n#11 gc_rest_sweep (objspace=objspace@entry=0x7f31dca379a0) at gc.c:3053\n#12 rb_objspace_free (objspace=objspace@entry=0x7f31dca379a0) at gc.c:892\n#13 0x00007f31db82c961 in ruby_vm_destruct (vm=0x7f31dca36f20) at vm.c:1840\n#14 0x00007f31db6ba1d6 in ruby_cleanup (ex=0) at eval.c:236\n#15 0x00007f31db6ba414 in ruby_run_node (n=<optimized out>) at eval.c:310\n#16 0x00007f31db659c6b in main (argc=3, argv=0x7fffdefe18b8) at main.c:36\n```\n\nThe root cause in cont.c: https://github.com/Shopify/ruby/blob/v2_1_6_shopify2/cont.c#L244\n\nThe problem is that `ruby_current_thread` is being dereferenced here, but is `NULL` (relevant assembly):\n\n```\n(gdb) disas\nDump of assembler code for function fiber_free:\n<...snip...>\n   0x00007f31db845681 <+113>:   lea    0x2ceb28(%rip),%rdx        # 0x7f31dbb141b0 <ruby_current_thread>\n   0x00007f31db845688 <+120>:   mov    0x8(%rbx),%rcx\n   0x00007f31db84568c <+124>:   mov    (%rdx),%rdx\n=> 0x00007f31db84568f <+127>:   cmp    %rcx,0x2f0(%rdx)\n<...snip...>\n(gdb) p $rdx\n$7 = 0\n```\n\nI suspect what's happening here is a `rb_thread_t` is being freed before a fiber, and `ruby_current_thread` is set to `NULL`. Then, when the fiber is later freed, we run into the segmentation fault.\n\nMy fix is very naive - it just checks that `ruby_current_thread` is not `NULL` before trying to access the `fiber` member. It gets the job done, but there may be a better fix.\n\n/cc: @camilo, @methodmissing \n", "labels": [], "number": 914, "updated_at": "2015-05-30 00:56:24", "user": 4303686, "closed_at": "2015-05-30 00:16:06", "id": 81184754, "title": "Check ruby_current_thread in cont_free", "url": "https://api.github.com/repos/ruby/ruby/issues/914", "created_at": "2015-05-26 23:33:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/106968672", "text": "This is a duplicate of https://bugs.ruby-lang.org/issues/10768 and should already have been fixed on trunk.\n", "created_at": "2015-05-30 00:56:24", "user": 2567, "id": 106968672}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's a temporary branch for review.\n", "labels": [], "number": 915, "updated_at": "2015-07-09 10:21:46", "user": 12301, "closed_at": "2015-07-09 10:21:44", "id": 81241683, "title": "Merge rubygems upstream(65ab980)", "url": "https://api.github.com/repos/ruby/ruby/issues/915", "created_at": "2015-05-27 02:46:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 916, "updated_at": "2015-05-27 22:06:29", "user": 1147484, "closed_at": "2015-05-27 22:00:27", "id": 81630313, "title": "Fix typo in samples for tk ext", "url": "https://api.github.com/repos/ruby/ruby/issues/916", "created_at": "2015-05-27 21:21:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/106092226", "text": "thanks @nobu :green_heart: \n", "created_at": "2015-05-27 22:06:27", "user": 1147484, "id": 106092226}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix dtrace documentation discrepancy introduced when `function-entry` was renamed to `method-entry` in 4bdd9095183666d515635946085becc66a418b16\n", "labels": [], "number": 917, "updated_at": "2015-05-30 02:04:45", "user": 32618, "closed_at": "2015-05-30 02:04:45", "id": 82111777, "title": "change lingering dtrace probe documentation from function- to method-", "url": "https://api.github.com/repos/ruby/ruby/issues/917", "created_at": "2015-05-28 20:31:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/106974413", "text": "Thanks! I've merged this in.\n", "created_at": "2015-05-30 02:04:45", "user": 3124, "id": 106974413}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Eliminates some branches from `rb_feature_p`, `load_lock`, and `ruby_init_ext`.\n\nIt seems like we call `load_lock` very early in the Ruby boot process.  If we eagerly allocate the `loading_table` hash, then we can delete some branches.\n\n@nobu what do you think?\n\nHere's the backtrace from the first place we hit `load_lock()`:\n\n```\n[aaron@TC ruby (trunk)]$ lldb `rbenv which ruby`\n(lldb) target create \"/Users/aaron/.rbenv/versions/ruby-trunk/bin/ruby\"\nCurrent executable set to '/Users/aaron/.rbenv/versions/ruby-trunk/bin/ruby' (x86_64).\n(lldb) b load_lock\nBreakpoint 1: where = ruby`load_lock + 12 at load.c:717, address = 0x000000010007547c\n(lldb) r -e'puts \"hello\"'\nProcess 64415 launched: '/Users/aaron/.rbenv/versions/ruby-trunk/bin/ruby' (x86_64)\nProcess 64415 stopped\n* thread #1: tid = 0x1dfdd0, 0x000000010007547c ruby`load_lock(ftptr=0x0000000101900340) + 12 at load.c:717, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n    frame #0: 0x000000010007547c ruby`load_lock(ftptr=0x0000000101900340) + 12 at load.c:717\n   714  load_lock(const char *ftptr)\n   715  {\n   716      st_data_t data;\n-> 717      st_table *loading_tbl = get_loading_table();\n   718  \n   719      if (!loading_tbl || !st_lookup(loading_tbl, (st_data_t)ftptr, &data)) {\n   720      /* loading ruby library should be serialized. */\n(lldb) bt\n* thread #1: tid = 0x1dfdd0, 0x000000010007547c ruby`load_lock(ftptr=0x0000000101900340) + 12 at load.c:717, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1\n  * frame #0: 0x000000010007547c ruby`load_lock(ftptr=0x0000000101900340) + 12 at load.c:717\n    frame #1: 0x0000000100074b42 ruby`rb_require_internal(fname=4312369800, safe=0) + 722 at load.c:993\n    frame #2: 0x0000000100075993 ruby`ruby_require_internal(fname=0x0000000100288e87, len=12) + 51 at load.c:1042\n    frame #3: 0x0000000100001599 ruby`Init_enc + 25 at dmyenc.c:7\n    frame #4: 0x00000001001995fc ruby`process_options(argc=0, argv=0x00007fff5fbffb50, opt=0x00007fff5fbff970) + 1372 at ruby.c:1389\n    frame #5: 0x000000010019907d ruby`ruby_process_options(argc=2, argv=0x00007fff5fbffb40) + 205 at ruby.c:1988\n    frame #6: 0x000000010006d63b ruby`ruby_options(argc=2, argv=0x00007fff5fbffb40) + 219 at eval.c:105\n    frame #7: 0x0000000100001557 ruby`main(argc=2, argv=0x00007fff5fbffb40) + 87 at main.c:36\n    frame #8: 0x00007fff8af205c9 libdyld.dylib`start + 1\n(lldb) \n```\n\nSince `load_lock` will allocate the table, and we always seem to call `load_lock`, I think we could eagerly allocate the table.\n", "labels": [], "number": 918, "updated_at": "2015-06-03 07:23:04", "user": 3124, "closed_at": "2015-06-03 07:22:26", "id": 82661016, "title": "eagerly allocate `loading_table`", "url": "https://api.github.com/repos/ruby/ruby/issues/918", "created_at": "2015-05-30 01:54:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108227908", "text": "Merged in r50746\n", "created_at": "2015-06-03 07:22:26", "user": 3124, "id": 108227908}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just a minor typo that may lead to `uninitialized constant Resolv::DNS::Requester::Erron` in case of the `rescue` block gets executed.\n", "labels": [], "number": 919, "updated_at": "2015-06-01 14:33:19", "user": 2141507, "closed_at": "2015-06-01 14:33:19", "id": 83465638, "title": "Fixes minor bug introduced by typo in backport of [#10712]", "url": "https://api.github.com/repos/ruby/ruby/issues/919", "created_at": "2015-06-01 12:21:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/107527576", "text": "we don't use github for backport issue. Please submit https://bugs.ruby-lang.org/projects/ruby-200/issues .\n", "created_at": "2015-06-01 14:33:19", "user": 12301, "id": 107527576}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When String is subclassed, the :+ method\nwould result in a String instance instead\nof an instance of the subclass.\n\nThis commit uses rb_str_new_with_class()\nto ensure that it returns an instance of\nthis subclass.\n\nSee #10845.\n", "labels": [], "number": 920, "updated_at": "2015-06-12 06:51:01", "user": 4401925, "closed_at": "2015-06-12 06:51:01", "id": 84039561, "title": "Fix String#+ when subclassed", "url": "https://api.github.com/repos/ruby/ruby/issues/920", "created_at": "2015-06-02 14:05:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111382554", "text": "when two (or more) objects operate (e.g. concatenation of two strings), Ruby does not honor subclass.  It's a design choice. I don't recommend subclassing fundamental classes.\n\nMatz.\n", "created_at": "2015-06-12 06:48:39", "user": 30733, "id": 111382554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111382948", "text": "Cool. Thanks for the review!\n", "created_at": "2015-06-12 06:51:01", "user": 4401925, "id": 111382948}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Instead of pre-computing, storing and accessing the offsets from an Array, they can be computed on the fly, saving space and time.\n", "labels": [], "number": 921, "updated_at": "2016-02-09 20:28:00", "user": 4642242, "closed_at": "2015-06-09 02:46:35", "id": 84224083, "title": "calculate offsets in EratosthenesSieve on the fly", "url": "https://api.github.com/repos/ruby/ruby/issues/921", "created_at": "2015-06-02 21:41:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/110829368", "text": "Indeed!\nThanks for the PR.\nI simplified the code even a bit further, since `primes[index]` is just `prime`.\nI used the same idea to get rid of `sieving_primes` also.\nSo all in all code is leaner and faster.\n", "created_at": "2015-06-10 16:47:04", "user": 33770, "id": 110829368}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/110842260", "text": "Thank you for reviewing and making the change! \n", "created_at": "2015-06-10 17:19:19", "user": 4642242, "id": 110842260}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There was an small spelling mistake at array.c, written `reentered` which should be `re-entered`. \n", "labels": [], "number": 922, "updated_at": "2016-01-19 11:35:59", "user": 988558, "closed_at": "2016-01-19 11:35:42", "id": 84443680, "title": "fix a typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/922", "created_at": "2015-06-03 08:54:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172824711", "text": "It's correct spell. I close this.\n", "created_at": "2016-01-19 11:35:59", "user": 12301, "id": 172824711}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":octocat: \n", "labels": [], "number": 923, "updated_at": "2015-06-04 08:35:46", "user": 1147484, "closed_at": "2015-06-04 02:54:25", "id": 84773123, "title": "Fix some typos in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/923", "created_at": "2015-06-03 21:13:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108785744", "text": "@hsbt thanks :green_heart: \n", "created_at": "2015-06-04 08:35:43", "user": 1147484, "id": 108785744}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This particular piece of code in the resolv library seem to be using a very strange approach when trying to figure out which platform it is on. In stead of using a normal `if` it appears to be using `begin-raise-rescue`. This is a small patch to improve it. \n\nI ran all the tests on the code, and it does not appear to have introduced any new errors.\n", "labels": [], "number": 924, "updated_at": "2018-02-23 03:06:55", "user": 2276383, "closed_at": "None", "id": 84948819, "title": "Better handling setting DefaultFileName in resolv.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/924", "created_at": "2015-06-04 06:52:34", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\n/\\Ablock_given\\?\\z|iterator\\?\\z|\\A__.*__\\z/ =~ 'foo_iterator?' #=> 4\n\n/\\A(?:block_given\\?|iterator\\?|__.*__)\\z/ =~ 'foo_iterator?'   #=> nil\n```\n", "labels": [], "number": 925, "updated_at": "2018-02-23 03:06:56", "user": 1180335, "closed_at": "None", "id": 85138566, "title": "lib/delegate.rb: More strictly regexp", "url": "https://api.github.com/repos/ruby/ruby/issues/925", "created_at": "2015-06-04 15:06:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108946600", "text": "Do we have a test for this?\n", "created_at": "2015-06-04 15:58:23", "user": 277819, "id": 108946600}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/108972500", "text": "@zzak Hmmm, I don't know how to write tests for this.\n\n``` ruby\nmodule Kernel\n  private\n\n  def my_iterator?\n  end\nend\n\nrequire 'delegate'\n\np SimpleDelegator.new(Object.new).private_methods.include?(:my_iterator?) #=> true, expected: false\n```\n", "created_at": "2015-06-04 17:02:30", "user": 1180335, "id": 108972500}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Is this intended behavior?\n\n``` shell\n# ruby -v\nruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]\n```\n\n``` ruby\nrequire 'delegate'\n\nclass Parent\n  def parent_public; end\n\n  protected\n\n  def parent_protected; end\nend\n\nclass Child < Parent\nend\n\nclass DelegatorChild < DelegateClass(Parent)\nend\n\nclass Parent\n  def parent_public_added; end\n\n  protected\n\n  def parent_protected_added; end\nend\n\nignores = Object.public_instance_methods | Delegator.public_instance_methods\n\np(Child.public_instance_methods - ignores)                 #=> [:parent_public, :parent_public_added]\np(Child.new.public_methods - ignores)                      #=> [:parent_public, :parent_public_added]\n\np(DelegatorChild.public_instance_methods - ignores)        #=> [:parent_public]\np(DelegatorChild.new(Parent.new).public_methods - ignores) #=> [:parent_public, :parent_public_added, :parent_protected]\n```\n", "labels": [], "number": 926, "updated_at": "2018-02-23 03:06:57", "user": 1180335, "closed_at": "None", "id": 85139464, "title": "lib/delegate.rb (.#DelegateClass): Separate delegator visibility on some reflections", "url": "https://api.github.com/repos/ruby/ruby/issues/926", "created_at": "2015-06-04 15:09:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/138239964", "text": "You should open a bug on https://bugs.ruby-lang.org/ for this if it is not already the case.\n", "created_at": "2015-09-07 08:48:12", "user": 168854, "id": 138239964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/138341005", "text": "@eregon Thanks! I've made a [ticket](https://bugs.ruby-lang.org/issues/11512) for this.\n", "created_at": "2015-09-07 17:04:02", "user": 1180335, "id": 138341005}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 927, "updated_at": "2015-06-12 12:27:36", "user": 1147484, "closed_at": "2015-06-12 12:21:46", "id": 85307241, "title": "Fix typos in sample folder", "url": "https://api.github.com/repos/ruby/ruby/issues/927", "created_at": "2015-06-04 22:33:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/109978934", "text": "@bryndyment nice catch, thanks!\n", "created_at": "2015-06-08 12:37:27", "user": 1147484, "id": 109978934}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111475182", "text": "Fixed at https://github.com/ruby/ruby/commit/a45972f2a89d4b8c2b6c346a547140e8c3a4218d and https://github.com/ruby/ruby/commit/d6b8acacf60ac497815f3c8f33e10a189b00a34a\n", "created_at": "2015-06-12 12:21:46", "user": 12301, "id": 111475182}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111475961", "text": "@hsbt thanks! :star2:\n", "created_at": "2015-06-12 12:27:32", "user": 1147484, "id": 111475961}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 928, "updated_at": "2015-06-11 08:43:22", "user": 1147484, "closed_at": "2015-06-11 01:36:04", "id": 86355906, "title": "Fix little typos in lib folder", "url": "https://api.github.com/repos/ruby/ruby/issues/928", "created_at": "2015-06-08 22:29:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111002512", "text": "@davydovanton thanks :sparkles: \n", "created_at": "2015-06-11 05:37:08", "user": 5266933, "id": 111002512}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111043820", "text": "@gogotanaka thanks for review :+1: \n", "created_at": "2015-06-11 08:43:19", "user": 1147484, "id": 111043820}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The .rb files under the lib directory will never get on the load path with the currently specified require paths, hence if someone installed the gem from RubyGems, only the binary extension would get loaded, but the original bundled Ruby files will be used instead of the new ones. This patches should narrow the situation.\n", "labels": [], "number": 929, "updated_at": "2015-06-13 02:36:33", "user": 14406, "closed_at": "2015-06-13 02:36:33", "id": 87244625, "title": "Fix gems require paths", "url": "https://api.github.com/repos/ruby/ruby/issues/929", "created_at": "2015-06-11 07:30:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\nruby cgi.rb doesn't seem to handle PUT requests. In Perl the raw data of a PUT request is available in the params-hash as 'PUTDATA'. This patch implements the same for ruby.\n", "labels": [], "number": 930, "updated_at": "2015-06-16 13:56:09", "user": 1566306, "closed_at": "2015-06-15 02:32:10", "id": 87285863, "title": "Handle PUT requests similar to Perl CGI", "url": "https://api.github.com/repos/ruby/ruby/issues/930", "created_at": "2015-06-11 09:52:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111415773", "text": "@xibbar Can you review this?\n", "created_at": "2015-06-12 08:42:41", "user": 12301, "id": 111415773}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111903967", "text": "'PUT' is not CGI's specification. see https://www.ietf.org/rfc/rfc3875\nIf you need PUT request, please use rack.\n", "created_at": "2015-06-15 02:32:10", "user": 25030, "id": 111903967}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111955933", "text": "RFC 3875 says we may implement PUT, but I agree this pull request should be closed because `PUTDATA` is not part of the RFC.\n\n@xibbar would it be OK to implement PUT the same as POST?\n\nRelevant sections of the RFC:\n\n```\n4.1.12.  REQUEST_METHOD\n\n   The REQUEST_METHOD meta-variable MUST be set to the method which\n   should be used by the script to process the request, as described in\n   section 4.3.\n\n      REQUEST_METHOD   = method\n      method           = \"GET\" | \"POST\" | \"HEAD\" | extension-method\n      extension-method = \"PUT\" | \"DELETE\" | token\n\n   The method is case sensitive.  The HTTP methods are described in\n   section 5.1.1 of the HTTP/1.0 specification [1] and section 5.1.1 of\n   the HTTP/1.1 specification [4].\n```\n\nand\n\n```\n4.3.4.  Protocol-Specific Methods\n\n   The script MAY implement any protocol-specific method, such as\n   HTTP/1.1 PUT and DELETE; it SHOULD check the value of SERVER_PROTOCOL\n   when doing so.\n\n   The server MAY decide that some methods are not appropriate or\n   permitted for a script, and may handle the methods itself or return\n   an error to the client.\n```\n", "created_at": "2015-06-15 06:58:54", "user": 9831, "id": 111955933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111970560", "text": "Hi, the PUTDATA-thing was the simplest possible solution I could think of. What I need is a way to access the raw data which is JSON-encoded in my case. The same would be nice for POST-requests, too. \nWhat about adding an additional property in parallel to @params?\n", "created_at": "2015-06-15 07:54:08", "user": 1566306, "id": 111970560}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112062285", "text": "@noradtux Why do you and you try to use the cgi rather than the rack?\n\n@drbrain I think PUT specification is same as POST. And do you think DELETE request ?\nNow, PR is only PUT implement. I want both request if merge. don't you ?\n\nThis library and CGI is very legacy. If you want to do a new things, I recommend to use a rack.\n", "created_at": "2015-06-15 13:03:06", "user": 25030, "id": 112062285}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112115231", "text": "@xibbar Frankly, I didn't know rack until you mentioned it. Though looking at it it seems to use the very same calls to handle FastCGI, so I guess it suffers the same problem. FastCGI is a req\n", "created_at": "2015-06-15 15:46:28", "user": 1566306, "id": 112115231}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112115844", "text": "@xibbar Frankly, I didn't know rack until you mentioned it. Though looking at it it seems to use the very same calls to handle FastCGI, so I guess it suffers the same problem. FastCGI is a requirement for my project. Also I plan to convert some existing Perl projects to Ruby which would be pretty straight forward using CGI.\n", "created_at": "2015-06-15 15:48:44", "user": 1566306, "id": 112115844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112237872", "text": "@noradtux You can use rack with FCGI. see https://github.com/rack/rack\nAnd if you use cgi library, you will probably struggle.\nBecause in ruby world, no one use cgi library in new project.\n\nMay be, sinatra will be happy you.\nplease see http://www.sinatrarb.com/\n", "created_at": "2015-06-15 23:35:17", "user": 25030, "id": 112237872}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112441129", "text": "Hi, first of all, thank you for bringing up those alternatives, they look interesting.\nBut for the sake of completeness, what about this simple change:\nhttps://github.com/noradtux/ruby/commit/c82134346caa7c0146f3301c0f97f088e124e1c0\nWould help people used to \"the old ways\" like me ;)\n", "created_at": "2015-06-16 13:56:09", "user": 1566306, "id": 112441129}], "assignees": [25030, 25030], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ruby 2.3.0dev (2015-06-12 trunk 50846) [x86_64-linux]\n\n``` ruby\nrequire 'set'\n\nset = Set.new [2, 4, 6]\np set.map.size  #=> 3\np set.each.size #=> nil, expected: 3\n```\n\n``` ruby\nrequire 'prime'\n\np Prime.each_with_index.size #=> nil, expected: Infinity\n```\n", "labels": [], "number": 931, "updated_at": "2015-06-15 06:08:34", "user": 1180335, "closed_at": "2015-06-15 05:40:58", "id": 87679294, "title": "Set and Prime should set Enumerator#size", "url": "https://api.github.com/repos/ruby/ruby/issues/931", "created_at": "2015-06-12 10:08:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111516209", "text": "Indeed. I'll commit the `Prime` part, @knu is maintainer for `Set` IIRC.\n", "created_at": "2015-06-12 14:46:12", "user": 33770, "id": 111516209}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111533282", "text": "Committed for `prime`. Thanks for the patch!\n", "created_at": "2015-06-12 15:50:47", "user": 33770, "id": 111533282}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111539591", "text": "@marcandre Thanks to merge the patch! :)\n", "created_at": "2015-06-12 16:12:03", "user": 1180335, "id": 111539591}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111933503", "text": "Thanks for your contribution!\n", "created_at": "2015-06-15 05:40:58", "user": 10236, "id": 111933503}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111937156", "text": "@knu Thanks to merge! :)\n", "created_at": "2015-06-15 06:08:32", "user": 1180335, "id": 111937156}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The OCSP standard specifies 3 possible values for a certificates status:\n- 0: good\n- 1: revoked\n- 2: unknown\n\nThis change updates the documentation to correctly reflect these values.\nPreviously, the documentation suggested in one case that a 0 value could\nrepresent a revoked certificate.\n\nSee https://www.ietf.org/rfc/rfc2560.txt for more details on the standard.\n", "labels": [], "number": 932, "updated_at": "2015-06-13 02:39:41", "user": 799295, "closed_at": "2015-06-13 02:39:41", "id": 87768635, "title": "fix documentation on ocsp response cert status", "url": "https://api.github.com/repos/ruby/ruby/issues/932", "created_at": "2015-06-12 15:49:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 933, "updated_at": "2015-06-13 02:41:24", "user": 645514, "closed_at": "2015-06-13 02:41:24", "id": 87784259, "title": "Fix typo comment typo in lib/tempfile.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/933", "created_at": "2015-06-12 16:42:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 934, "updated_at": "2015-06-17 14:13:53", "user": 1147484, "closed_at": "2015-06-14 01:14:24", "id": 88070727, "title": "Fix typos in rexml library", "url": "https://api.github.com/repos/ruby/ruby/issues/934", "created_at": "2015-06-13 21:46:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/111766912", "text": "Thanks for your pull request!\nI've merged your change.\n", "created_at": "2015-06-14 01:14:59", "user": 27350, "id": 111766912}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112819061", "text": "thanks for review :smiley: \n", "created_at": "2015-06-17 14:13:52", "user": 1147484, "id": 112819061}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [1695630, 53027], "heart": [53027], "+1": [1695630, 53027]}, "text": "c.f. https://bugs.ruby-lang.org/issues/6284\n\nAllow `Proc`s and `Method`s to be [composed](https://en.wikipedia.org/wiki/Function_composition_%28computer_science%29) together with `*`.\n\n``` ruby\nf = proc { |x| x * 2 }\ng = proc { |x, y| x + y }\nh = f * g\n\nh.call(1, 2) #=> 6\n```\n\nSupport composition with any object that has a `call` method, e.g.\n\n``` ruby\nclass Foo\n  def call(x, y)\n    x + y\n  end\nend\n\nf = proc { |x| x * 2 }\ng = f * Foo.new\n\ng.call(1, 2) #=> 6\n```\n\nThis implementation should be largely equivalent to the following Ruby (excepting that the `lambda?` property is preserved):\n\n``` ruby\nclass Proc\n  def *(g)\n    proc { |*args, &blk| call(g.call(*args, &blk)) }\n  end\nend\n```\n", "labels": [], "number": 935, "updated_at": "2018-02-23 03:06:57", "user": 287, "closed_at": "None", "id": 88211577, "title": "Implement Proc#* and Method#* for Proc and Method composition", "url": "https://api.github.com/repos/ruby/ruby/issues/935", "created_at": "2015-06-14 16:35:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/178469863", "text": "I, for one, would love to see this merged! :)\n", "created_at": "2016-02-02 09:20:52", "user": 140724, "id": 178469863}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181186744", "text": "I like the idea of functional composition but I don't like the implementation here.\n\nFirst of all, I don't like naming it `*`. Any special reason why use a star symbol? For example [`dry-pipeline` gem](https://github.com/dryrb/dry-pipeline) implements a _pipeline operator_ `>>`. Of course, both operators have their numeric analogues (multiplication and bitwise right shift accordingly) and it's confusing but `>>` is used less often so it's a better option IMO.\n\nAnd the second problem that it does not deal well with custom callable objects. I mean:\n\n``` ruby\nmodule Increment\n  def self.call(x)\n    x + 1\n  end\nend\n\nmultiply_two = proc { |x| x * 2 }\n\n(multiply_two * Increment).call(1) # => 4\n(Increment * multiply_two).call(1) # => NoMethodError\n```\n\nSo, I like the concept of mixin with composition operator more like it's done in `dry-pipeline` gem. Something llike:\n\n``` ruby\nmodule Increment\n  extend PipelineOperator\n  def self.call(x)\n    x + 1\n  end\nend\n```\n", "created_at": "2016-02-08 04:04:24", "user": 3194530, "id": 181186744}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256947756", "text": "FWIW I am pro `*`, and used it in my [C extension](https://github.com/mooreniemi/proc_compose).  I'd argue it has some mindshare from: https://www.youtube.com/watch?v=seVSlKazsNk\n", "created_at": "2016-10-28 15:13:50", "user": 1695630, "id": 256947756}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 936, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 88656689, "title": "Date parse refine", "url": "https://api.github.com/repos/ruby/ruby/issues/936", "created_at": "2015-06-16 08:30:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 937, "updated_at": "2015-06-24 10:06:16", "user": 1147484, "closed_at": "2015-06-24 03:22:42", "id": 88808538, "title": "Update documentation for Regexp class", "url": "https://api.github.com/repos/ruby/ruby/issues/937", "created_at": "2015-06-16 18:51:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/114757758", "text": "Thanks :star2:\n", "created_at": "2015-06-24 07:16:13", "user": 1147484, "id": 114757758}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change rephrases the duplicate key warning from this:\n\n```\n/Users/andre/bug.rb:4: warning: duplicated key at line 5 ignored: :max_instances\n```\n\nwhich causes some confusion, to:\n\n```\n/Users/andre/bug.rb:4: warning: key :max_instances is duplicated and overwritten on line 5\n```\n\n/cc @ko1 @tenderlove @rafaelfranca\n", "labels": [], "number": 938, "updated_at": "2015-07-09 00:28:20", "user": 9689, "closed_at": "2015-07-09 00:28:20", "id": 89139137, "title": "Improve duplicate key warning.", "url": "https://api.github.com/repos/ruby/ruby/issues/938", "created_at": "2015-06-17 22:10:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112970924", "text": "Your message adds \"clobber\" which isn't used anywhere else in the core library.  I think we should avoid adding new words in errors and warnings to make ruby easier to use for non-english speakers.\n\nWhat about `key :max_instances is duplicated on line 5`\n", "created_at": "2015-06-17 22:34:03", "user": 9831, "id": 112970924}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112971313", "text": "Agreed, although I'd also like to convey that it overwrites the previous value.\n", "created_at": "2015-06-17 22:37:04", "user": 9689, "id": 112971313}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112972864", "text": "Alright, changed it so that it informs that the key is duplicated _AND_ that it gets overwritten.\n", "created_at": "2015-06-17 22:42:16", "user": 9689, "id": 112972864}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112973216", "text": "I like the updated message.\n", "created_at": "2015-06-17 22:44:50", "user": 9831, "id": 112973216}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112973495", "text": ":shipit: :smile: \n", "created_at": "2015-06-17 22:47:04", "user": 9689, "id": 112973495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/112980569", "text": "I :heart: this change. I've recently seen this warning and had to read it a few times to decipher it.  The new warning is easier for me to understand. \n", "created_at": "2015-06-17 23:39:14", "user": 19339, "id": 112980569}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When resuming a SSL Session, the SNI was missing in the Client Hello packet. \n\nSee https://bugs.ruby-lang.org/issues/10533 for details\n", "labels": [], "number": 940, "updated_at": "2015-07-10 08:13:46", "user": 5757465, "closed_at": "2015-07-10 08:13:46", "id": 89236579, "title": "Net::Http: Fixed missing SNI in Client Hello packet when resuming a SSL session.", "url": "https://api.github.com/repos/ruby/ruby/issues/940", "created_at": "2015-06-18 08:50:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "make r50502 (80e0ef3a8167dddc8434e981a5df5925e667919e) more generic.\n", "labels": [], "number": 941, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 89442112, "title": "range.c: include_range?", "url": "https://api.github.com/repos/ruby/ruby/issues/941", "created_at": "2015-06-19 01:42:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ruby 2.3.0dev (2015-06-20 trunk 50978) [x86_64-linux]\n\n``` ruby\nrequire 'ipaddr'\n\nIPAddr.new \"[2001:200:300::] INVALID\" #=> IPAddr::InvalidAddressError: invalid address\nIPAddr.new \"192.168.0.1/32 INVALID\"  #=> IPAddr::InvalidAddressError: invalid address\nIPAddr.new \"[2001:200:300::]\\nINVALID\" #=> #<IPAddr: IPv6:2001:0200:0300:0000:0000:0000:0000:0000/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff>, expected: IPAddr::InvalidAddressError\nIPAddr.new \"192.168.0.1/32\\nINVALID\"  #=> #<IPAddr: IPv4:192.168.0.1/255.255.255.255>, expected: IPAddr::InvalidAddressError or IPAddr::InvalidPrefixError\n```\n", "labels": [], "number": 942, "updated_at": "2015-10-23 07:39:56", "user": 1180335, "closed_at": "2015-10-23 07:36:00", "id": 89723613, "title": "IPAddr should reject invalid format with EOL", "url": "https://api.github.com/repos/ruby/ruby/issues/942", "created_at": "2015-06-20 05:58:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/138342434", "text": "[Ticket](https://bugs.ruby-lang.org/issues/11513)\n", "created_at": "2015-09-07 17:14:10", "user": 1180335, "id": 138342434}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150498074", "text": "Thanks to merge!\n", "created_at": "2015-10-23 07:37:05", "user": 1180335, "id": 150498074}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150498492", "text": "Sorry, late response. Your patch is reasonable to me :octocat: \n", "created_at": "2015-10-23 07:39:56", "user": 12301, "id": 150498492}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 943, "updated_at": "2015-06-21 02:17:42", "user": 69755, "closed_at": "2015-06-20 20:51:29", "id": 89786405, "title": "Check SPECIAL_CONST_P before RBASIC_CLASS to avoid SEGV", "url": "https://api.github.com/repos/ruby/ruby/issues/943", "created_at": "2015-06-20 16:03:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/113789893", "text": "Only rubyspec tests are failing.\nIt seems to be caused by rubyspec's change.\n", "created_at": "2015-06-20 17:01:00", "user": 69755, "id": 113789893}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/113818694", "text": ":eyes: https://bugs.ruby-lang.org/issues/11291\n", "created_at": "2015-06-20 20:46:44", "user": 29440, "id": 113818694}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/113818875", "text": "Committed at r50982 cc77375d2dabff398500bf4ee6c7d37087159155 with some modification. Thank you!\n", "created_at": "2015-06-20 20:51:29", "user": 29440, "id": 113818875}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/113853389", "text": ":star: \n", "created_at": "2015-06-21 02:17:42", "user": 69755, "id": 113853389}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is cosmetic changes.\nI replaced the tabs to spaces.\n", "labels": [], "number": 944, "updated_at": "2015-06-25 09:38:49", "user": 3800237, "closed_at": "2015-06-25 02:05:06", "id": 90720341, "title": "Make cosmetic changes", "url": "https://api.github.com/repos/ruby/ruby/issues/944", "created_at": "2015-06-24 16:05:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/115070879", "text": "Thanks for the PR.\nAs much as I dislike that, I'm afraid the Ruby source code is full of these tabs that are worth 8 spaces.\n", "created_at": "2015-06-25 02:05:06", "user": 33770, "id": 115070879}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/115186907", "text": "I see. Thank you for your comment.\n", "created_at": "2015-06-25 09:38:49", "user": 3800237, "id": 115186907}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "just some light style tweaks\n", "labels": [], "number": 945, "updated_at": "2015-06-29 03:10:29", "user": 7953560, "closed_at": "2015-06-29 03:10:29", "id": 90922718, "title": "Update README.md", "url": "https://api.github.com/repos/ruby/ruby/issues/945", "created_at": "2015-06-25 10:26:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use Array#concat in CSV::Table#to_a.\n\nThis significantly impacts performance of large CSV files being converted to arrays and should avoid any side-effects since the array is constructed and modified only within the `#to_a` method.\n", "labels": [], "number": 946, "updated_at": "2017-08-25 08:14:31", "user": 967, "closed_at": "2017-08-25 08:14:31", "id": 91276113, "title": "Use Array#concat in CSV::Table#to_a.", "url": "https://api.github.com/repos/ruby/ruby/issues/946", "created_at": "2015-06-26 15:14:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/115748816", "text": ":+1: \n", "created_at": "2015-06-26 16:38:30", "user": 3194530, "id": 115748816}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/118215495", "text": "Can you show details of performance improvement like benchmark score? \n", "created_at": "2015-07-03 02:51:56", "user": 12301, "id": 118215495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/318269341", "text": "`array.push(row.fields)` would be better.", "created_at": "2017-07-27 06:17:03", "user": 315008, "id": 318269341}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/318289272", "text": "I believe the following could be faster by using each instead of inject:\r\n```Ruby\r\narray = [headers]\r\n@table.each {|row| array.push(row.fields) unless row.header_row?}\r\n```\r\n\r\nThe same could be applied to **CSV::Table#to_csv**, [Line 897](https://github.com/ruby/ruby/blob/52c6acda38561f84d4ec46b46c3c45d054c43080/lib/csv.rb#L897).\r\n\r\n**Edit: just noticed that this pull request is very similar to #1168.**", "created_at": "2017-07-27 08:02:03", "user": 11094484, "id": 318289272}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [2222374, 812886]}, "text": "This is my first patch, so please be gentle! ;)\n", "labels": [], "number": 947, "updated_at": "2015-07-07 07:10:50", "user": 113440, "closed_at": "2015-07-07 07:10:42", "id": 91441260, "title": "Introduce Numeric#clamp [Bug #10594]", "url": "https://api.github.com/repos/ruby/ruby/issues/947", "created_at": "2015-06-27 09:52:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/116115123", "text": ":+1: Yes please.  I opened this on on [ruby-lang](https://bugs.ruby-lang.org/issues/10594#change-50386).  Would love to see this in Ruby core.\n", "created_at": "2015-06-27 18:43:03", "user": 1185, "id": 116115123}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Added a nil check in the method initialize_http_header in Net::HTTPHeader\n\nThis is a patch for this bug in the issue tracker - https://bugs.ruby-lang.org/issues/11281\n\nIf the value for a key in the headers hash is nil, a NoMethodError is thrown.  A nil check was added that assigns a blank string in case the value is nil.\n", "labels": [], "number": 948, "updated_at": "2015-09-14 04:20:51", "user": 9510845, "closed_at": "2015-09-14 04:20:51", "id": 91563590, "title": "Added a nil check in Net::HTTPHeader#initialize_http_header for keys …", "url": "https://api.github.com/repos/ruby/ruby/issues/948", "created_at": "2015-06-28 07:11:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/116437647", "text": "Skipping the headers with a nil value now.\n", "created_at": "2015-06-29 05:11:08", "user": 9510845, "id": 116437647}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/116439032", "text": "love to hear the answer to https://bugs.ruby-lang.org/issues/11281#note-1\n", "created_at": "2015-06-29 05:23:27", "user": 16700, "id": 116439032}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/116754890", "text": "I mentioned my opinion on that issue. I'm pasting it here too\n\n> > I think if the user wants to send a blank header, then the user should do that explicitly like\n> > `Net::HTTP::Get.new('http://any.url', {'header' => \"\"})`\n> > Converting a nil value to a blank string is not so obvious behaviour as there is an implicit conversion involved. So I am OK with skipping `nil` values.\n", "created_at": "2015-06-29 16:40:49", "user": 9510845, "id": 116754890}], "assignees": [], "state": "closed", "is-pull-request": true}
