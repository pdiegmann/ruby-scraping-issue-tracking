{"reactions": {}, "text": "Net::HTTP raises an error when making a PUT request with the \"Expect: 100-continue\" header if the server responses with ANY non 100-continue response. The current implementation works fine for POST request, but raises the following error for PUT request:\n\n```\nConn close because of error undefined method `closed?' for\nnil:NilClass\n/Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http/response.rb:329:in\n`stream_check': undefined method `closed?' for nil:NilClass\n(NoMethodError)\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http/response.rb:199:in `read_body'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http/response.rb:226:in `body'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:1473:in `end_transport'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:1443:in `transport_request'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:1384:in `request'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:1377:in `block in request'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:853:in `start'\n  from /Users/trevrowe/.rbenv/versions/2.2.2/lib/ruby/2.2.0/net/http.rb:1375:in `request'\n  from client-3.rb:15:in `<main>'\n```\n\nThis bug dates back to when the feature was added in Ruby 1.9.3. This commit resolves the above issue and adds a test to watch for regressions.\n\nI've created a sample gist with a minimal server and client that demonstrates the bug.\n\nhttps://gist.github.com/trevorrowe/c2353ab959c6852a2bd7\n", "labels": [], "number": 949, "updated_at": "2015-11-20 06:03:37", "user": 27863, "closed_at": "2015-11-20 06:03:37", "id": 91909624, "title": "Resolve issue with Net::HTTP::PUT and Expect-100 continue.", "url": "https://api.github.com/repos/ruby/ruby/issues/949", "created_at": "2015-06-29 21:04:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/116846374", "text": "I should also add that I've been applying this patch at Runtime in the [AWS SDK for Ruby](github.com/aws/aws-sdk-ruby) for quite a while without issue. This issue becomes very apparent when working with Amazon S3 which relies heavily on Expect 100 continue.\n", "created_at": "2015-06-29 21:06:03", "user": 27863, "id": 116846374}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/117316194", "text": "Three of the four travis builds passed. The failing build seems to be a transient issue with travis, not an issue with the commit: https://travis-ci.org/ruby/ruby/jobs/68877237\n", "created_at": "2015-06-30 19:40:23", "user": 27863, "id": 117316194}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158291949", "text": "Sorry, my late response. I merged at https://github.com/ruby/ruby/commit/f0002bd5a21bf091dfd0482fb7b0147b7d3703fb .\n\nThank you for your patch.\n", "created_at": "2015-11-20 06:03:32", "user": 12301, "id": 158291949}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without block and some elements of the collection is not falsy case.\n", "labels": [], "number": 950, "updated_at": "2015-07-01 01:55:54", "user": 5356517, "closed_at": "2015-07-01 01:55:54", "id": 92073257, "title": "Add test for `none?`", "url": "https://api.github.com/repos/ruby/ruby/issues/950", "created_at": "2015-06-30 11:55:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Net::HTTP retries networking errors for idempotent http requests. This feature was added back in version 2.0. Retrying idempotent HTTP requests based on their HTTP method, e.g. GET, PUT, etc, has introduced 2 issues. This pull request addresses these two issues and adds a facility to disable retries on a per-request basis.\n## Issue 1: PUT requests with body stream not rewound\n\nWhen making a PUT request with a `#body_stream` it is possible for some bytes to be read from the stream and then to encounter a networking error. Net::HTTP retries this attempt without\nfirst rewinding the body stream. This causes the follow-up request to send fewer than all of the bytes.\n## Fix 1: Rewind #body_stream\n\nThis commit causes Net::HTTP to attempt to rewind the `#body_stream` before resending the request. If the body does not respond to `#rewind` then the request will not be retried and the original\nerror is raised.\n## Issue 2: GET requests with block and #read_body\n\nWhen making a GET request you may pass a block so that you can stream data from the response with a `#read_body` block. For example:\n\n```\n# stream a large file straight to disk\nFile.open('target', 'wb') do |file|\n  http = Net::HTTP.new(hostname, port)\n  http.request(Net::HTTP::Get.new('/')) do |resp|\n    resp.read_body do |chunk|\n      file.write(chunk)\n    end\n  end\nend\n```\n\nIf half of the response is downloaded and then a networking error occurs, Net::HTTP will retry the request, yielding to the request block a second time. In the example above, the resultant\nfile will contain the first half of the file followed by the full file.\n\nCurrently the only way to avoid this is a bit of a hack:\n\n```\nFile.open('target', 'wb') do |file|\n\n  attempts = 0\n  http = Net::HTTP.new(hostname, port)\n  http.request(Net::HTTP::Get.new('/')) do |resp|\n    if attempts == 0\n      attempts += 1\n    else\n      raise 'yielding twice, bad download'\n    end\n    resp.read_body do |chunk|\n      file.write(chunk)\n    end\n  end\n\nend\n```\n\nThis is undesirable because it is no longer to get at the original error that has been swallowed by Net::HTTP.\n## Fix 2: Disable retries when a request block is given\n\nTo avoid scenarios where the user is un-aware that their block is being yielded to twice, idempotent retries are disabled if a block is given.\n## Fix 3: Disabling retries per request\n\nIn addition to the above bug fixes for the default retry logic, a new attribute has been added to Net::HTTPGenericRequest called `#retry_networking_errors`. This is a boolean attribute which\ndefaults to true for all idempotent http methods, e.g. GET, PUT, etc. It is disabled when setting a non-rewindable `#body_stream` and when passing a request read block.\n\n```\n# request has side-effects, should not be retried\nreq = Net::HTTP::Get.new('/something/dangerous')\nreq.retry_networking_errors = false\nhttp.request(req)\n```\n\nThis is excellent for scenarios where the remote end has performed some destructive or expensive operation but the error occurred while receiving the response. Simply retrying on the state of the HTTP\nverb is not granular enough.\n", "labels": [], "number": 951, "updated_at": "2018-02-23 03:06:59", "user": 27863, "closed_at": "None", "id": 92179629, "title": "Fix for two Net::HTTP retry bugs.", "url": "https://api.github.com/repos/ruby/ruby/issues/951", "created_at": "2015-06-30 19:30:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/140473425", "text": "Looks solid to me :+1: \n", "created_at": "2015-09-15 17:27:47", "user": 2316989, "id": 140473425}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/140478632", "text": "A Ruby tracker issue for this PR can be found here: https://bugs.ruby-lang.org/issues/11526\n", "created_at": "2015-09-15 17:42:57", "user": 2316989, "id": 140478632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/140492165", "text": "@trevorrowe I made a [branch of your PR rebased against current trunk](https://github.com/tdg5/ruby/tree/trowe-net-http-idempotent-retry-fix). I was going to submit a PR to your fork, but GitHub kept timing out. Should be simple enough for you to update your branch though.\n\nThat said you may be interested in [a couple of test fixes I added](https://github.com/tdg5/ruby/commit/cf05909003a5780bad79364e63d92f7a0bb32876). Seems like a couple of file descriptors were leaking because of the sockets orphaned by exception conditions and `assert_raises` requires an argument of one or more exceptions. Also the [HTTP KeepAlive test](https://github.com/tdg5/ruby/commit/b0976481f43a362c67cd23575969091489a22051#diff-8dcde066076c815d14344c2f441b9efdR883) used a block in the test which with your change would prevent it from auto-retrying, so I removed the block there.\n", "created_at": "2015-09-15 18:32:14", "user": 2316989, "id": 140492165}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 952, "updated_at": "2016-01-29 01:45:31", "user": 4419636, "closed_at": "2016-01-29 01:45:31", "id": 92624396, "title": "warning for nil HTTP header instead of error", "url": "https://api.github.com/repos/ruby/ruby/issues/952", "created_at": "2015-07-02 12:31:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119365517", "text": "What's test/csv/test_headers.rb changes?\n", "created_at": "2015-07-07 22:46:12", "user": 12301, "id": 119365517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119830841", "text": "I have added  case for null header in tests\n", "created_at": "2015-07-09 06:07:22", "user": 4419636, "id": 119830841}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119944059", "text": "Please fix to failing tests\n", "created_at": "2015-07-09 12:28:50", "user": 12301, "id": 119944059}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119997049", "text": "I forced rebase my branch, now all tests are passed\n", "created_at": "2015-07-09 14:15:21", "user": 4419636, "id": 119997049}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123250943", "text": "I wonder advantage of this pull request. What's usecase or scenario with this changes?\n", "created_at": "2015-07-21 10:15:30", "user": 12301, "id": 123250943}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123486990", "text": "Is useful for debugging, with, to say the header:\n\n``` ruby\n{\nAuthorization: nil\n}\n```\n\nnow  you'll get the error  `undefined method 'strip' for nil:NilClass`, I think `net/http: warning: nil HTTP header: Authorization` it's more relevant\n", "created_at": "2015-07-21 21:47:16", "user": 4419636, "id": 123486990}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added link HowToReport bugs\n", "labels": [], "number": 953, "updated_at": "2015-07-05 05:57:11", "user": 7439590, "closed_at": "2015-07-05 03:57:44", "id": 92803783, "title": "Update README.md", "url": "https://api.github.com/repos/ruby/ruby/issues/953", "created_at": "2015-07-03 06:29:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/118584013", "text": "I made a commit fixing a typo. https://github.com/ruby/ruby/commit/cd56fbdf12a81c782f5665143048a4af97183ce1\nThank you @raoulvdberge for your pointing out.\n", "created_at": "2015-07-05 05:57:11", "user": 21976, "id": 118584013}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 954, "updated_at": "2015-07-04 10:40:34", "user": 5356517, "closed_at": "2015-07-04 10:40:34", "id": 92982371, "title": "Add test for `Enumerable#sort` with block", "url": "https://api.github.com/repos/ruby/ruby/issues/954", "created_at": "2015-07-04 07:14:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Test case for if the enumerable is empty and arg is passed,\n`first` returns an empty array.\n", "labels": [], "number": 955, "updated_at": "2015-07-04 10:44:32", "user": 5356517, "closed_at": "2015-07-04 10:44:32", "id": 92999640, "title": "Add test for `first`", "url": "https://api.github.com/repos/ruby/ruby/issues/955", "created_at": "2015-07-04 10:26:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 956, "updated_at": "2015-07-05 20:21:32", "user": 1257116, "closed_at": "2015-07-05 14:55:21", "id": 93117263, "title": "Fix typo in optparse library [skip ci]", "url": "https://api.github.com/repos/ruby/ruby/issues/956", "created_at": "2015-07-05 14:47:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/118664448", "text": "Thank you!\n", "created_at": "2015-07-05 20:21:27", "user": 1257116, "id": 118664448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current symbol converter for CSV headers strips the string, then removes punctuation.\nInstead, it should remove punctuation first, to avoid trailing or multiple adjacent underscores.\n\n|  | \"Full $ Amounts\" | Full Amounts ($) |\n| --- | --- | --- |\n| Without this patch | :full__amounts | :full_amounts_ |\n| With this patch | :full_amounts | :full_amounts |\n\nWithout this patch:\n1. Strips it\n2. Converts spaces to underscores\n3. Removes punctuation characters\n\nWith this patch:\n1. Removes punctuation characters\n2. Strips it\n3. Converts spaces to underscores\n\nThis is notable because `CSV.table(...)` is an alias to `CSV.read(...)` with this option set.\n", "labels": [], "number": 957, "updated_at": "2017-05-16 09:33:27", "user": 632942, "closed_at": "2017-05-16 09:33:27", "id": 93126545, "title": "Strip punctuation from CSV headers in symbol converter", "url": "https://api.github.com/repos/ruby/ruby/issues/957", "created_at": "2015-07-05 17:02:20", "comments": [], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 958, "updated_at": "2015-07-08 06:15:05", "user": 216, "closed_at": "2015-07-07 22:44:22", "id": 93128438, "title": "csv.rb doc typo", "url": "https://api.github.com/repos/ruby/ruby/issues/958", "created_at": "2015-07-05 17:33:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/119450749", "text": "@hsbt: Thank you!\n", "created_at": "2015-07-08 06:15:05", "user": 216, "id": 119450749}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 959, "updated_at": "2015-07-22 08:52:04", "user": 6443532, "closed_at": "2015-07-22 08:52:04", "id": 93143475, "title": "Update eigenvalue_decomposition.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/959", "created_at": "2015-07-05 20:18:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 960, "updated_at": "2015-07-23 18:10:11", "user": 1147484, "closed_at": "2015-07-23 18:10:09", "id": 93609680, "title": "Update documentation examples for Enumerable#cycle", "url": "https://api.github.com/repos/ruby/ruby/issues/960", "created_at": "2015-07-07 19:31:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123413860", "text": "@hsbt ping :smiley: \n", "created_at": "2015-07-21 17:47:56", "user": 1147484, "id": 123413860}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/123617604", "text": "There is no enhancement for me. \n", "created_at": "2015-07-22 08:36:31", "user": 12301, "id": 123617604}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/124190608", "text": "okay, i'll close PR. Thanks for review :green_heart: \n", "created_at": "2015-07-23 18:10:09", "user": 1147484, "id": 124190608}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It was missed in #638\n", "labels": [], "number": 961, "updated_at": "2015-07-09 08:14:32", "user": 905772, "closed_at": "2015-07-09 01:20:11", "id": 93796124, "title": "Added 308 status to CODE_TO_OBJ list", "url": "https://api.github.com/repos/ruby/ruby/issues/961", "created_at": "2015-07-08 13:57:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 962, "updated_at": "2017-02-21 08:25:39", "user": 113440, "closed_at": "2017-02-21 08:25:09", "id": 94145018, "title": "Introduce Comparable#clamp [Bug #10594]", "url": "https://api.github.com/repos/ruby/ruby/issues/962", "created_at": "2015-07-09 20:26:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158240727", "text": "I'm considering a PR to Rails for this functionality. Is there any update regarding this PR and the likelihood it will be merged?\n", "created_at": "2015-11-20 00:15:16", "user": 3099915, "id": 158240727}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158260367", "text": "I believe this is too late for Ruby 2.3.\n\nAlso, #<=> typically returns -1, 0, or 1, so what value does this add?\n\n```\n$ ruby -e 'p -5 <=> 5'\n-1\n```\n", "created_at": "2015-11-20 02:22:31", "user": 9831, "id": 158260367}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158307626", "text": "I still hope this will be merged some day. It's been around for months but sadly I'm getting no answer to my question here: https://bugs.ruby-lang.org/issues/10594\n\n@drbrain I don't quite understand your question. The PR does not change `#<=>` at all, but only adds a new method `#clamp` on anything that implements `#<=>`.\n", "created_at": "2015-11-20 07:22:04", "user": 113440, "id": 158307626}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159098170", "text": "Ah, I misread the documentation. I understand now.\n\nI think you still need to provide an answer for the behavior for `\"good\".clamp \"morning\", \"evening\"`\n", "created_at": "2015-11-23 23:16:23", "user": 9831, "id": 159098170}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281275744", "text": "For the record: This has been merged in https://github.com/ruby/ruby/commit/d5a0b8e3cc48632d0cb99553a7aaf233b22a1eac", "created_at": "2017-02-21 08:25:09", "user": 113440, "id": 281275744}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281275846", "text": "It's part of Ruby 2.4.0", "created_at": "2017-02-21 08:25:39", "user": 113440, "id": 281275846}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`OBJ_TAINTED` macro seems only flag check.\n\n```\n#define OBJ_TAINTED(x) (!!FL_TEST((x), FL_TAINT))\n```\n\nI think this statement is not need.\n\nref: https://github.com/ruby/ruby/commit/1f828497d1e8df2b7b68ac2a093ab4439585d88a#diff-bbe6b0bc1cf60b1f4369362b4fb4899c\n", "labels": [], "number": 963, "updated_at": "2015-07-10 02:09:34", "user": 935310, "closed_at": "2015-07-10 01:46:44", "id": 94180047, "title": "stringio.c(writable): remove unnecessary check", "url": "https://api.github.com/repos/ruby/ruby/issues/963", "created_at": "2015-07-10 00:15:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://bugs.ruby-lang.org/issues/11401\n\nNet::Http calls `s.session=` (C-method `ossl_ssl_set_session`), which calls C-method `ossl_ssl_setup`, which only sets up the ssl client (`ssl`) once due to \"if(!ssl){\". The problem is that the hostname setting (the call to `SSL_set_tlsext_host_name`) is done within that \"if(!ssl){\" block.\n\nWhen later Net::Http calls `s.connect` (C-method `ossl_ssl_connect`), `ossl_ssl_setup` is called a second time, but it does not set up the hostname.\n\nPlacing `s.hostname=` above `s.session=` handles this correctly.\n", "labels": [], "number": 964, "updated_at": "2015-11-20 05:42:13", "user": 5757465, "closed_at": "2015-11-20 05:41:02", "id": 94246958, "title": "Net::Http: Fixed missing SNI in Client Hello packet when resuming a SSL session.", "url": "https://api.github.com/repos/ruby/ruby/issues/964", "created_at": "2015-07-10 08:17:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/142515468", "text": "Any progress on this?\n", "created_at": "2015-09-23 07:00:00", "user": 703298, "id": 142515468}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145748819", "text": "Waiting for a ruby developer to pick this up. \n", "created_at": "2015-10-06 05:54:52", "user": 5757465, "id": 145748819}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158284579", "text": "@mkarnebeek Sorry, too late response. Your description is fine to me. I merged.\n", "created_at": "2015-11-20 05:42:13", "user": 12301, "id": 158284579}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "StringIO#puts should be set \"\\n\" at last\n", "labels": [], "number": 965, "updated_at": "2015-07-11 12:25:34", "user": 935310, "closed_at": "2015-07-11 12:17:50", "id": 94453135, "title": "Fix an example doc for StringIO class", "url": "https://api.github.com/repos/ruby/ruby/issues/965", "created_at": "2015-07-11 08:32:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I tried to write simple testing for `StringIO#sysread` because there was no test.\n", "labels": [], "number": 966, "updated_at": "2015-07-12 23:40:06", "user": 935310, "closed_at": "2015-07-11 21:47:33", "id": 94457090, "title": "Simple testing for StringIO#sysread", "url": "https://api.github.com/repos/ruby/ruby/issues/966", "created_at": "2015-07-11 09:44:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 967, "updated_at": "2015-07-13 14:59:00", "user": 207754, "closed_at": "2015-07-13 14:59:00", "id": 94736698, "title": "fix typos in debugger statements", "url": "https://api.github.com/repos/ruby/ruby/issues/967", "created_at": "2015-07-13 14:39:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 968, "updated_at": "2015-07-22 06:50:17", "user": 5356517, "closed_at": "2015-07-22 06:50:17", "id": 95578613, "title": "Add test case for `Range#end` with exclude_end true case", "url": "https://api.github.com/repos/ruby/ruby/issues/968", "created_at": "2015-07-17 03:47:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- when `begin`, `end` and `exclude_end` are same, `Range#hash` is same\n- when `begin`, `end` are same but `exclude_end` is not same,\n  `Range#hash` is not same\n", "labels": [], "number": 969, "updated_at": "2015-07-21 11:33:36", "user": 5356517, "closed_at": "2015-07-21 11:33:36", "id": 95578621, "title": "Add test for `Range#hash`", "url": "https://api.github.com/repos/ruby/ruby/issues/969", "created_at": "2015-07-17 03:47:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 970, "updated_at": "2015-07-17 06:38:07", "user": 5356517, "closed_at": "2015-07-17 06:38:07", "id": 95578752, "title": "Add test `Range#last` with exclude_end true case", "url": "https://api.github.com/repos/ruby/ruby/issues/970", "created_at": "2015-07-17 03:49:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 971, "updated_at": "2015-07-17 06:38:07", "user": 5356517, "closed_at": "2015-07-17 06:38:07", "id": 95579776, "title": "Add tests for `Range.new`", "url": "https://api.github.com/repos/ruby/ruby/issues/971", "created_at": "2015-07-17 03:57:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 972, "updated_at": "2015-07-19 05:30:43", "user": 45995, "closed_at": "2015-07-19 05:30:43", "id": 95884511, "title": "Document-class: PTY typo", "url": "https://api.github.com/repos/ruby/ruby/issues/972", "created_at": "2015-07-19 04:30:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 973, "updated_at": "2015-07-21 05:02:19", "user": 987638, "closed_at": "2015-07-21 04:38:07", "id": 96046368, "title": "fix typo in OptionParser#complete docs [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/973", "created_at": "2015-07-20 11:42:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 974, "updated_at": "2015-07-22 00:46:14", "user": 5707198, "closed_at": "2015-07-22 00:46:14", "id": 96411593, "title": "fix doc for Numeric#coerce", "url": "https://api.github.com/repos/ruby/ruby/issues/974", "created_at": "2015-07-21 20:40:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 975, "updated_at": "2015-10-23 07:07:05", "user": 5356517, "closed_at": "2015-10-23 07:04:23", "id": 96700316, "title": "Fix indent", "url": "https://api.github.com/repos/ruby/ruby/issues/975", "created_at": "2015-07-23 00:52:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This will help users of ObjectSpace.define_finalizer avoid bugs caused by\npassing a method or lambda which does not accept the correct number of\narguments.\n", "labels": [], "number": 976, "updated_at": "2015-07-29 01:45:56", "user": 1067359, "closed_at": "2015-07-29 01:45:56", "id": 96769353, "title": "* gc.c (define_final): [DOC] document argument passed to finalizer proc", "url": "https://api.github.com/repos/ruby/ruby/issues/976", "created_at": "2015-07-23 09:20:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/124031124", "text": "I hope this qualifies as a \"tiny fix\"! It would have helped me avoid a very tricky bug in some code which uses `ObjectSpace.define_finalizer`.\n", "created_at": "2015-07-23 09:21:41", "user": 1067359, "id": 124031124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR replace tab with spaces.\nI know c file in ruby, we use tab and space.\nBut maybe in comment, tab is rarely used, so I replace tab with spaces.\n", "labels": [], "number": 977, "updated_at": "2015-10-23 07:06:47", "user": 5356517, "closed_at": "2015-10-23 07:04:23", "id": 96937474, "title": "[ci skip] Fix indent of comment", "url": "https://api.github.com/repos/ruby/ruby/issues/977", "created_at": "2015-07-24 00:58:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- path starts with dot ('.a.rb')\n- path includes dir name ('a/b/d/test.rb')\n- path includes dir name and dir name starts with dot ('.a/b/d/test.rb')\n", "labels": [], "number": 978, "updated_at": "2015-07-24 07:37:46", "user": 5356517, "closed_at": "2015-07-24 07:37:46", "id": 96962587, "title": "Add tests for `File.extname`", "url": "https://api.github.com/repos/ruby/ruby/issues/978", "created_at": "2015-07-24 04:24:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactor xhtml method\n", "labels": [], "number": 979, "updated_at": "2015-12-21 10:08:22", "user": 2887620, "closed_at": "2015-12-21 10:08:22", "id": 97747205, "title": "Update atom.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/979", "created_at": "2015-07-28 16:24:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/166258593", "text": "There is no advantage to me.\n", "created_at": "2015-12-21 10:08:22", "user": 12301, "id": 166258593}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactor proxy_address and proxy_port methods\n", "labels": [], "number": 980, "updated_at": "2015-07-29 01:10:40", "user": 2887620, "closed_at": "2015-07-29 01:10:40", "id": 97747692, "title": "Update http.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/980", "created_at": "2015-07-28 16:27:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/125795132", "text": "There is no advantage for me\n", "created_at": "2015-07-29 01:10:40", "user": 12301, "id": 125795132}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The current documentation is usually (:stuck_out_tongue_winking_eye:) incomplete or even incorrect.\n\nAlso, the whitespace after `*` is either one space, two spaces, or one tab here. I didn't correct this. Should I?\n", "labels": [], "number": 981, "updated_at": "2018-02-23 03:07:00", "user": 212792, "closed_at": "None", "id": 97902296, "title": "[DOC] fix description of various Float constants", "url": "https://api.github.com/repos/ruby/ruby/issues/981", "created_at": "2015-07-29 10:02:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/125912583", "text": "Oh, I forgot to say that it doesn't mention the precision anymore. I think it's redundant as [the synopsis of the Float class already mentions it](https://github.com/cremno/ruby/blob/50189dc84116ee921cda3659a136e1982755d764/numeric.c#L692-L693). Plus some other Ruby implementation might choose a different precision.\n", "created_at": "2015-07-29 10:21:06", "user": 212792, "id": 125912583}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "DO NOT MERGE.  I'm just testing the CI.\n", "labels": [], "number": 982, "updated_at": "2015-08-03 15:57:50", "user": 3124, "closed_at": "2015-07-31 14:37:22", "id": 98226959, "title": "skip unless there is a cipher available", "url": "https://api.github.com/repos/ruby/ruby/issues/982", "created_at": "2015-07-30 17:58:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updated outdated hash syntax to 1.9 standards for code and style consistency. \n", "labels": [], "number": 983, "updated_at": "2015-07-31 13:49:56", "user": 3062663, "closed_at": "2015-07-31 09:45:17", "id": 98348414, "title": "updated hash syntax to 1.9", "url": "https://api.github.com/repos/ruby/ruby/issues/983", "created_at": "2015-07-31 09:08:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/126623005", "text": "> +5,391 −5,391\n> 574 files changed\n\nWas it a `sed` or `awk`?\n", "created_at": "2015-07-31 09:37:18", "user": 3194530, "id": 126623005}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/126624288", "text": "At least you should fix broken tests.\n", "created_at": "2015-07-31 09:41:14", "user": 12301, "id": 126624288}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/126674629", "text": "I tend to disagree with this kind of global migration of a large codebase with a rich history.  It would break the `svn/git blame` history for no real benefits.  I'd prefer updating portions of the code as they are touched.\n", "created_at": "2015-07-31 12:25:30", "user": 10236, "id": 126674629}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/126674895", "text": "Fair enough, sorry guys I was just trying to help :+1: \n", "created_at": "2015-07-31 12:26:53", "user": 3062663, "id": 126674895}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/126696807", "text": "> I'd prefer updating portions of the code as they are touched.\n\n:+1: for this!\n", "created_at": "2015-07-31 13:49:56", "user": 3194530, "id": 126696807}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 984, "updated_at": "2015-10-24 13:55:33", "user": 100110, "closed_at": "2015-10-24 13:52:21", "id": 98454795, "title": "Get ruby compiling again under Haiku.", "url": "https://api.github.com/repos/ruby/ruby/issues/984", "created_at": "2015-07-31 19:21:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150491670", "text": "@kallisti5 Sorry, too late reply. I don't have `Haiku` environment. Can you confirm to build with this patch at Haiku?\n", "created_at": "2015-10-23 06:53:38", "user": 12301, "id": 150491670}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150601960", "text": "Good morning!\nI can confirm this compiles on Haiku.\n\nThanks!\n\n -- Alex\n", "created_at": "2015-10-23 15:06:48", "user": 100110, "id": 150601960}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150813526", "text": "I merged this. Thank you for your contribution.\n", "created_at": "2015-10-24 13:55:33", "user": 12301, "id": 150813526}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- zip with block code example (doc)\n- args is longer than receiver case (test)\n- assert zip call with block returns nil (test)\n", "labels": [], "number": 985, "updated_at": "2015-08-11 01:49:04", "user": 5356517, "closed_at": "2015-08-11 01:49:04", "id": 98546809, "title": "Add tests and docs to `Enumerable#zip`", "url": "https://api.github.com/repos/ruby/ruby/issues/985", "created_at": "2015-08-01 16:01:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm sure we have \"test_flatten_level0\" already.\nBut I think \"test_flatten_level0\" is the special case of level so added level1 case :)\n", "labels": [], "number": 986, "updated_at": "2015-08-11 01:52:06", "user": 5356517, "closed_at": "2015-08-11 01:52:06", "id": 98597191, "title": "Add test for `Array#flatten` with level 1", "url": "https://api.github.com/repos/ruby/ruby/issues/986", "created_at": "2015-08-02 09:41:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 987, "updated_at": "2015-08-04 00:36:51", "user": 1909242, "closed_at": "2015-08-04 00:36:51", "id": 98610888, "title": "Removing duplicate `be` in UnboundMethod docs", "url": "https://api.github.com/repos/ruby/ruby/issues/987", "created_at": "2015-08-02 14:04:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Checking only for `Qfalse` misses the `Qnil` that might end up in this\nfunction as a result of `instance_eval(&:foo)`, which leads to `Qnil`\nbeing dereferenced and causing the interpreter to segfault. [Bug #11409]\n", "labels": [], "number": 988, "updated_at": "2015-08-11 01:50:20", "user": 11608949, "closed_at": "2015-08-11 01:49:20", "id": 98672900, "title": "vm_insnhelper.c (check_cref): check for nil", "url": "https://api.github.com/repos/ruby/ruby/issues/988", "created_at": "2015-08-03 05:08:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/129670449", "text": "See [Bug #11409]\n", "created_at": "2015-08-11 01:50:20", "user": 9558, "id": 129670449}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On OS X you must give an absolute path to the prefix or you get an error\n\n```\n$ ../configure --prefix=~/.rubies/ruby-trunk\nconfigure: error: expected an absolute directory name for --prefix: ~/.rubies/ruby-trunk\n```\n\nI believe this shell substitution should work on most systems.\n", "labels": [], "number": 989, "updated_at": "2015-08-05 07:28:51", "user": 59744, "closed_at": "2015-08-04 00:23:55", "id": 98850215, "title": "Update contributing.rdoc", "url": "https://api.github.com/repos/ruby/ruby/issues/989", "created_at": "2015-08-03 22:30:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127441972", "text": ":rocket: thanks\n", "created_at": "2015-08-04 00:39:01", "user": 59744, "id": 127441972}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127498415", "text": "I haven't seen that syntax, what shell do you use?\n\nAnd seems it makes a target under the current directory.\n\n```\n$ ls \\$\\(~/\n).rubies/\n```\n", "created_at": "2015-08-04 06:44:16", "user": 16700, "id": 127498415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127656429", "text": "Sorry, I tried this locally but must have worked because of a previous build. You're right it creates a directory in the current directory called `$(` for me. \n\nI was able to get it to work with:\n\n```\n../configure --prefix=$(echo ~/).rubies/ruby-trunk\n```\n\nNo quotes and adding an `echo`. Thank you for the double check. \n\n```\n$ ls $(echo ~/).rubies\njruby-1.7.16    rbx-2.4.1   ruby-2.2.2  ruby-trunk\n```\n", "created_at": "2015-08-04 15:51:01", "user": 59744, "id": 127656429}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127742938", "text": "How about ${HOME} environment variable? I think it is more common.\n", "created_at": "2015-08-04 20:13:28", "user": 21976, "id": 127742938}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127751067", "text": "That works as well\n\n```\n$ ls ${HOME}/.rubies\njruby-1.7.16    rbx-2.4.1   ruby-2.2.2  ruby-trunk\n```\n\nWhen used with --configure\n\n```\ninstalling extension scripts: /Users/richardschneeman/.rubies/.rubies/ruby-trunk/lib/ruby/site_ruby/2.3.0\ninstalling extension scripts: /Users/richardschneeman/.rubies/.rubies/ruby-trunk/lib/ruby/vendor_ruby/2.3.0\ninstalling extension headers: /Users/richardschneeman/.rubies/.rubies/ruby-trunk/include/ruby-2.3.0/ruby\ninstalling default gems:      /Users/richardschneeman/.rubies/.rubies/ruby-trunk/lib/ruby/gems/2.3.0 (build_info, cache, doc, extensions, gems, specifications)\n                              bigdecimal 1.2.7\n                              io-console 0.4.3\n                              json 1.8.2\n                              psych 2.0.13\n                              rdoc 4.2.0\ninstalling bundle gems:       /Users/richardschneeman/.rubies/.rubies/ruby-trunk/lib/ruby/gems/2.3.0 (build_info, cache, doc, extensions, gems, specifications)\ninstalling rdoc:              /Users/richardschneeman/.rubies/.rubies/ruby-trunk/share/ri/2.3.0/system\ninstalling capi-docs:         /Users/richardschneeman/.rubies/.rubies/ruby-trunk/share/doc/ruby\n```\n", "created_at": "2015-08-04 20:31:11", "user": 59744, "id": 127751067}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/127811212", "text": "`$HOME` and `${HOME}` are equivalent unless it is followed by an alphanumeric or an underscore, `{}` is necessary to separate the variable in that case.\n", "created_at": "2015-08-05 01:20:09", "user": 16700, "id": 127811212}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "…rted family.\n", "labels": [], "number": 990, "updated_at": "2015-11-20 03:48:52", "user": 435791, "closed_at": "2015-11-20 03:48:52", "id": 99287694, "title": "[DOC] remove mention of :UNIX in getaddrinfo() docs - typically not a suppo…", "url": "https://api.github.com/repos/ruby/ruby/issues/990", "created_at": "2015-08-05 20:04:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 991, "updated_at": "2015-11-04 06:51:41", "user": 1180335, "closed_at": "2015-11-04 06:46:39", "id": 99495831, "title": "[DOC] Update exception of rb_define_class{_id}_under [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/991", "created_at": "2015-08-06 18:21:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153604952", "text": "Thanks!\n", "created_at": "2015-11-04 06:51:40", "user": 1180335, "id": 153604952}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request adds documentations for `String#end_with?`.\n\nPut `String#start_with?` documentations here for reviewer's reference:\n\n``` c\n...\n/*\n *  call-seq:\n *     str.start_with?([prefixes]+)   -> true or false\n *\n *  Returns true if +str+ starts with one of the +prefixes+ given.\n *\n *    \"hello\".start_with?(\"hell\")               #=> true\n *\n *    # returns true if one of the prefixes matches.\n *    \"hello\".start_with?(\"heaven\", \"hell\")     #=> true\n *    \"hello\".start_with?(\"heaven\", \"paradise\") #=> false\n */\n\nstatic VALUE\nrb_str_start_with(int argc, VALUE *argv, VALUE str)\n...\n```\n## \n\n[Ruby 2.2.2's `#start_with?` documentation](http://ruby-doc.org/core-2.2.2/String.html#method-i-start_with-3F)\n[Ruby 2.2.2's `#end_with?` documentation](http://ruby-doc.org/core-2.2.2/String.html#method-i-end_with-3F)\n", "labels": [], "number": 992, "updated_at": "2015-08-11 02:48:59", "user": 1000669, "closed_at": "2015-08-11 01:59:35", "id": 99643121, "title": "* string.c: [DOC] Make #end_with? example doc symmetry with #start_with?", "url": "https://api.github.com/repos/ruby/ruby/issues/992", "created_at": "2015-08-07 13:00:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/129684502", "text": "Yay! :heart: Thanks!\n", "created_at": "2015-08-11 02:45:54", "user": 1000669, "id": 129684502}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tab completion  considered harmful?\n", "labels": [], "number": 993, "updated_at": "2015-08-11 01:34:41", "user": 11608949, "closed_at": "2015-08-11 01:34:41", "id": 99729645, "title": "refiend -> refined", "url": "https://api.github.com/repos/ruby/ruby/issues/993", "created_at": "2015-08-07 20:59:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- string.c (str_upto_each): special handling of strings which\n  consist of common prefix and numeric suffixes.\n  [ruby-core:70176] [Bug #11406]\n", "labels": [], "number": 994, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 99857877, "title": "string.c: upto numeric suffixes", "url": "https://api.github.com/repos/ruby/ruby/issues/994", "created_at": "2015-08-09 03:36:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These make it easier to build debug and retail side by side, and use with a static lib.\n", "labels": [], "number": 995, "updated_at": "2015-08-11 02:09:54", "user": 276285, "closed_at": "2015-08-11 02:09:54", "id": 100120233, "title": "Add a few enhancements to win32 build", "url": "https://api.github.com/repos/ruby/ruby/issues/995", "created_at": "2015-08-10 17:18:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/129677334", "text": "Separate build directories for each purposes.\n", "created_at": "2015-08-11 02:09:54", "user": 16700, "id": 129677334}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Why: Saves ~ 1M string allocations on every request\n\nFrom benchmarking one of my rails app, I found this line allocating\n\nmany string objects.\n\n1050056  /Users/Juan/.rubies/ruby-2.2.2/lib/ruby/2.2.0/timeout.rb:80\n\nBefore this patch\n\n```\n   2828765  activerecord-4.2.3\n   2695930  ruby-2.2.2/lib\n   1057453  activesupport-4.2.3\n```\n\nAfter this patch\n\n```\nallocated memory by gem\n-----------------------------------\n   2828765  activerecord-4.2.3\n   1627551  ruby-2.2.2/lib\n   1057213  activesupport-4.2.3\n```\n\nI use derailed_benchmarks gem to benchmark my Rails app, the exact command is\n\n```\nbundle exec derailed exec perf:objects\n```\n", "labels": [], "number": 996, "updated_at": "2015-08-13 15:38:38", "user": 1000669, "closed_at": "2015-08-13 13:51:04", "id": 100733164, "title": "* lib/timeout.rb: freeze a string message", "url": "https://api.github.com/repos/ruby/ruby/issues/996", "created_at": "2015-08-13 10:23:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/130732552", "text": "Thanks! :bow: \n", "created_at": "2015-08-13 15:38:38", "user": 1000669, "id": 130732552}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When /etc/resolv.conf contains the following entry:\n\n``` sh\noptions timeout:3\n```\n\nThis is ignored by Resolv::DNS when it loads the file. This patch resolves this by setting the timeout variable to that found in the configuration file.\n", "labels": [], "number": 997, "updated_at": "2017-01-06 03:04:32", "user": 2901882, "closed_at": "2017-01-06 03:04:32", "id": 101005064, "title": "allow Resolv::DNS to parse resolv.conf timeout option", "url": "https://api.github.com/repos/ruby/ruby/issues/997", "created_at": "2015-08-14 12:55:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131100480", "text": "Absolutely.\n", "created_at": "2015-08-14 13:09:50", "user": 7693065, "id": 131100480}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\"include\" iterates over the range while \"cover\" does check inclusion using boundaries which is much more efficient.\n", "labels": [], "number": 998, "updated_at": "2015-08-14 21:07:19", "user": 747819, "closed_at": "2015-08-14 21:07:19", "id": 101103105, "title": "Update range.c", "url": "https://api.github.com/repos/ruby/ruby/issues/998", "created_at": "2015-08-14 21:03:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\"include\" iterates over the range to check inclusion while \"cover\" does the same using range boundaries which is much more faster.\n", "labels": [], "number": 999, "updated_at": "2015-08-14 21:18:02", "user": 747819, "closed_at": "2015-08-14 21:18:02", "id": 101103981, "title": "Optimize range_eqq", "url": "https://api.github.com/repos/ruby/ruby/issues/999", "created_at": "2015-08-14 21:10:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`include` iterates over the range to check inclusion while `cover` does the same using range boundaries which is much more faster.\n", "labels": [], "number": 1000, "updated_at": "2015-08-15 02:52:47", "user": 747819, "closed_at": "2015-08-14 21:53:05", "id": 101105020, "title": "Optimize range_eqq", "url": "https://api.github.com/repos/ruby/ruby/issues/1000", "created_at": "2015-08-14 21:19:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131282033", "text": "You don't have to submit pull-requests for each saves.\n", "created_at": "2015-08-15 02:52:46", "user": 16700, "id": 131282033}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- math.c (math_hypot): extend to arbitrary number of arguments.\n", "labels": [], "number": 1001, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 101132969, "title": "math.c: hypot", "url": "https://api.github.com/repos/ruby/ruby/issues/1001", "created_at": "2015-08-15 02:45:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134141247", "text": "It is better to avoid overflow for big arguments if the final result can be represented in double type.\nFor example, current implementation overflows if an argument is bigger than sqrt(DBL_MAX).\n\nSUSv4 explains overflow of hypot() function as follows.\n\"These functions take precautions against overflow during intermediate steps of the computation.\"\n\nECMAScript 6, which has hypot() function with any number of arguments, explains as follows.\n\"Implementations should take care to avoid the loss of precision from overflows and underflows that are prone to occur in naive implementations when this function is called with two or more arguments.\"\nhttp://www.ecma-international.org/ecma-262/6.0/\n", "created_at": "2015-08-24 10:36:24", "user": 10538, "id": 134141247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134422182", "text": "Interesting.\n\n``` ruby\nx=(Float::MAX/Math.sqrt(2.0))\nMath.hypot(x, x) #=> 1.7976931348623155e+308\nMath.hypot(x, x, 0) #=> Infinity\n```\n\nHow does `hypot(3m)` avoid overflow?\n", "created_at": "2015-08-25 00:15:20", "user": 16700, "id": 134422182}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134426771", "text": "It seems NetBSD's hypot() and its original, fdlibm's hypot() scales\ntoo big numbers by `2**-600` and too small numbers by `2**600`.\n\nhttp://cvsweb.netbsd.org/cgi-bin/cvsweb.cgi/src/lib/libm/src/e_hypot.c?rev=1.13&content-type=text/x-cvsweb-markup\nhttp://www.netlib.org/fdlibm/e_hypot.c\n", "created_at": "2015-08-25 00:40:06", "user": 10538, "id": 134426771}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While rending a basic rails page using [Let it Go](https://github.com/schneems/let_it_go) I received some interesting output:\n\n```\n00:32:44 web.1    |   6) /Users/BenAMorgan/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/base64.rb\n00:32:44 web.1    |     - 3) String#unpack on line 73\n00:32:44 web.1    |     - 2) String#unpack on line 73\n00:32:44 web.1    |     - 1) String#unpack on line 73\n00:32:44 web.1    |   2) /Users/BenAMorgan/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/fileutils.rb\n00:32:44 web.1    |     - 1) String#chomp on line 160\n00:32:44 web.1    |     - 1) String#chomp on line 160\n00:32:44 web.1    |   2) /Users/BenAMorgan/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/securerandom.rb\n00:32:44 web.1    |     - 1) String#unpack on line 173\n00:32:44 web.1    |     - 1) String#unpack on line 288\n00:32:44 web.1    |   1) /Users/BenAMorgan/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/ipaddr.rb\n00:32:44 web.1    |     - 1) String#split on line 480\n```\n\nI decided to take the time and freeze these strings as to help lower the heap allocations inside of rails. I did not proceed to freeze any other strings, but my guess is is that there's lots of places inside of ruby to help lower the amount of sting allocations.\n\nI hope that overtime this gem allows me, and other developers, to create PRs to ruby to help with its performance.\n", "labels": [], "number": 1002, "updated_at": "2015-11-16 18:23:32", "user": 3117356, "closed_at": "2015-11-14 00:27:02", "id": 101240539, "title": "freeze some hotspots in ruby", "url": "https://api.github.com/repos/ruby/ruby/issues/1002", "created_at": "2015-08-16 07:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131519677", "text": "Does your changes really help? Have you measured it? It's interesting to see the benchmark.\n\nWould it be better to extract these literals to constants?\n", "created_at": "2015-08-16 10:09:40", "user": 3194530, "id": 131519677}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131523681", "text": "@marshall-lee after going through more code, they're still popping up and I might have more to contribute.\n\nI'd love to see the benchmark too, but not sure how to go about it.\n\nI know that @schneems made this technique popular when he used it to improve Racks performance by 2-4% (https://github.com/rack/rack/pull/737) and Rails by 11.9% (https://github.com/rails/rails/pull/21057).\n\n> Does your changes really help?\n\nFor you and me, probably not. But for others? Not too sure. I would like to think that this is going to impact users a lot. It might not and it might not change the performance at all. I know Liquid may have received zilch performance improvements when they used it; see https://github.com/Shopify/liquid/pull/297.\n\n> Would it be better to extract these literals to constants?\n\nI think you're right in that we should use a constant to store the strings.\n\n---\n\nOverall: They are portions of ruby that can receive optimizations. I may just do a simple look through and use `#freeze` when possible. I'll get back with a benchmark of what happens when a constant is used.\n", "created_at": "2015-08-16 10:55:12", "user": 3117356, "id": 131523681}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131524911", "text": "Test:\n\n``` ruby\nrequire 'benchmark/ips'\n\nFOO = 'foo'.freeze\n\nBenchmark.ips do |x|\n  x.report('simple string') { 'foo' }\n  x.report('frozen string') { 'foo'.freeze }\n  x.report('constant string') { FOO }\nend\n```\n\nResults:\n\n```\nCalculating -------------------------------------\n       simple string   134.324k i/100ms\n       frozen string   151.103k i/100ms\n     constant string   150.686k i/100ms\n-------------------------------------------------\n       simple string      6.281M (± 6.0%) i/s -     31.297M\n       frozen string     10.539M (± 5.7%) i/s -     52.584M\n     constant string     10.591M (± 6.8%) i/s -     52.740M\n\nCalculating -------------------------------------\n       simple string   126.960k i/100ms\n       frozen string   145.664k i/100ms\n     constant string   139.659k i/100ms\n-------------------------------------------------\n       simple string      6.314M (± 5.6%) i/s -     31.486M\n       frozen string     10.534M (± 6.9%) i/s -     52.439M\n     constant string     10.700M (± 6.0%) i/s -     53.350M\n```\n", "created_at": "2015-08-16 11:02:18", "user": 3117356, "id": 131524911}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/131525256", "text": "I don't think a constant is going to help much. It appears it does provide a gentle increase, but _wow_ on the change from a `String.new` to a `String.new#freeze`.\n\nA constant may also be in error, given its standard deviation.\n", "created_at": "2015-08-16 11:07:46", "user": 3117356, "id": 131525256}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/132328207", "text": "Here's a relevant conversation: https://bugs.ruby-lang.org/issues/11375#change-53662\n", "created_at": "2015-08-18 19:37:45", "user": 59744, "id": 132328207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/132923856", "text": ":+1: \n", "created_at": "2015-08-20 07:57:47", "user": 106795, "id": 132923856}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/132942562", "text": "ok, i vote for this too!\n", "created_at": "2015-08-20 08:50:35", "user": 3194530, "id": 132942562}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156598264", "text": "We will introduce [Frozen String Literal Pragma](https://www.ruby-lang.org/en/news/2015/11/11/ruby-2-3-0-preview1-released/) at Ruby 2.3.0. So, We will not add `String#frozen` to standard libraries. \n", "created_at": "2015-11-14 00:27:02", "user": 12301, "id": 156598264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157126595", "text": "@hsbt :+1:\n", "created_at": "2015-11-16 18:23:16", "user": 3117356, "id": 157126595}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1003, "updated_at": "2015-08-17 11:59:26", "user": 16700, "closed_at": "2015-08-17 11:59:26", "id": 101403134, "title": "Bug#10653 block after cond", "url": "https://api.github.com/repos/ruby/ruby/issues/1003", "created_at": "2015-08-17 11:43:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "git-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_2@51637 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\n", "labels": [], "number": 1004, "updated_at": "2015-08-20 22:03:35", "user": 1656385, "closed_at": "2015-08-20 22:03:35", "id": 102242104, "title": "Ruby 2 2", "url": "https://api.github.com/repos/ruby/ruby/issues/1004", "created_at": "2015-08-20 21:30:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I implemented a solution for this bug:\nhttps://bugs.ruby-lang.org/issues/11471\n", "labels": [], "number": 1005, "updated_at": "2018-02-23 03:07:01", "user": 2981969, "closed_at": "None", "id": 102272648, "title": "enum.c: fix limit choice in nmin_filter", "url": "https://api.github.com/repos/ruby/ruby/issues/1005", "created_at": "2015-08-21 01:14:43", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1006, "updated_at": "2015-08-28 02:18:00", "user": 13093040, "closed_at": "2015-08-28 02:18:00", "id": 102317629, "title": "lib/net/http/generic_request.rb: remove no-need then", "url": "https://api.github.com/repos/ruby/ruby/issues/1006", "created_at": "2015-08-21 07:38:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/133539630", "text": "Patch is good, but filename in commit message isn't.\n", "created_at": "2015-08-21 19:39:59", "user": 33770, "id": 133539630}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/133976852", "text": "Thanks for your comment, and what should I change?  Change the filename to lib/matrix/lup-decomposition.rb and re-create PR?\n", "created_at": "2015-08-24 00:54:26", "user": 13093040, "id": 133976852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134419855", "text": "Not sure I understand your suggestion, but you could amend your commit and force push to your branch.\n", "created_at": "2015-08-25 00:00:39", "user": 33770, "id": 134419855}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134434441", "text": "OK, changed commit log.\n", "created_at": "2015-08-25 01:08:32", "user": 13093040, "id": 134434441}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134436654", "text": "Your changes are made on `lib/net/http/generic_request.rb` and have nothing to do with the matrix lib...\n", "created_at": "2015-08-25 01:20:51", "user": 33770, "id": 134436654}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/134441150", "text": "Very sorry！！\n", "created_at": "2015-08-25 01:38:51", "user": 13093040, "id": 134441150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1007, "updated_at": "2015-09-12 07:15:07", "user": 435791, "closed_at": "2015-09-12 07:15:07", "id": 102476443, "title": "[DOC] access()/eaccess() wrapping methods check more than just uid", "url": "https://api.github.com/repos/ruby/ruby/issues/1007", "created_at": "2015-08-21 22:57:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Be more specific regarding \"other values\" by having \"non-zero positive integers\"\nAdd nil, the default value, as a possible value and what it means.\n\nTry to use more consistent language.\n\nI saw the \"Other values\" in the documentation and had to read it a few times to understand what it meant.\nI hope the change below help clarify this for others.\n", "labels": [], "number": 1008, "updated_at": "2015-09-11 21:36:54", "user": 19339, "closed_at": "2015-09-10 13:17:02", "id": 102904137, "title": "Clarify spawn pgroup documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1008", "created_at": "2015-08-24 22:22:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136882878", "text": "@zzak I see you added some documentation around spawn, could you please review when you get a chance and let me know what you think of this doc change?  Thanks in advance!  :heart:\n", "created_at": "2015-09-01 22:37:05", "user": 19339, "id": 136882878}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139315849", "text": "Thank you @nobu :smile: \n", "created_at": "2015-09-10 17:18:27", "user": 19339, "id": 139315849}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139667014", "text": "@jrafanie LGTM, thank you! ^^\n", "created_at": "2015-09-11 21:35:18", "user": 277819, "id": 139667014}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139667265", "text": "Thanks @zzak !!!  :bow:  I appreciate it!\n", "created_at": "2015-09-11 21:36:54", "user": 19339, "id": 139667265}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previous code wasn't entirely valid. See https://github.com/ruby/ruby/pull/989 for more context\n", "labels": [], "number": 1009, "updated_at": "2015-09-04 10:02:45", "user": 59744, "closed_at": "2015-09-04 08:47:33", "id": 103363326, "title": "Fix shell script", "url": "https://api.github.com/repos/ruby/ruby/issues/1009", "created_at": "2015-08-26 21:02:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/137694583", "text": "It doesn't change anything.\n", "created_at": "2015-09-04 10:02:45", "user": 16700, "id": 137694583}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's always caturday somewhere.\n", "labels": [], "number": 1010, "updated_at": "2015-08-27 15:14:01", "user": 12412789, "closed_at": "2015-08-27 15:14:01", "id": 103531987, "title": "Update time.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1010", "created_at": "2015-08-27 15:10:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1011, "updated_at": "2015-09-02 08:19:53", "user": 6119, "closed_at": "2015-09-02 08:19:53", "id": 103794612, "title": "Fix typo in Process.detatch documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1011", "created_at": "2015-08-28 20:58:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1012, "updated_at": "2015-08-31 03:27:40", "user": 3536457, "closed_at": "2015-08-31 01:48:14", "id": 103945039, "title": "sort #methods by default", "url": "https://api.github.com/repos/ruby/ruby/issues/1012", "created_at": "2015-08-30 20:37:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136231750", "text": "What's the rationale?\n", "created_at": "2015-08-31 01:48:14", "user": 16700, "id": 136231750}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136236869", "text": "when you want to see the methods available to an object you nearly always want to see an alphabetically sorted result \n", "created_at": "2015-08-31 02:34:31", "user": 3536457, "id": 136236869}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136240397", "text": "When debugging you mean?\n", "created_at": "2015-08-31 03:05:52", "user": 33770, "id": 136240397}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136241163", "text": "@marcandre yes... maybe there are usages of #methods I am not considering where the computational overhead of #sort is too much a burden to bear?\n", "created_at": "2015-08-31 03:12:58", "user": 3536457, "id": 136241163}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136242084", "text": "For debugging, I'd recommend `pry`. It gives you a very nice way to inspect an object:\n\n```\n$ pry\n[1] pry(main)> cd 42\n[2] pry(42):1> ls\nComparable#methods: between?\nNumeric#methods: \n  +@    angle  coerce  conjugate  i     imaginary  phase  pretty_print        quo   real?  rectangular  singleton_method_added  to_c\n  abs2  arg    conj    eql?       imag  nonzero?   polar  pretty_print_cycle  real  rect   remainder    step                  \nInteger#methods: \n  ceil  denominator  floor  gcdlcm    lcm   numerator  pred         round  to_i    to_r      upto\n  chr   downto       gcd    integer?  next  ord        rationalize  times  to_int  truncate\nFixnum#methods: \n  %  *   +  -@  <   <=   ==   >   >>  ^        abs         div     even?  inspect    modulo  size  to_f  zero?  ~\n  &  **  -  /   <<  <=>  ===  >=  []  __pry__  bit_length  divmod  fdiv   magnitude  odd?    succ  to_s  |    \nlocals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_\n```\n\nAlternatively, you could edit your `.irbrc` to prepend a homemade module for `methods` that calls `super.sort`if you prefer.\n\nSince `methods` is a method that can be used for many things, it's best to keep it optimized.\n", "created_at": "2015-08-31 03:25:06", "user": 33770, "id": 136242084}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/136242294", "text": "cool, thanks for helping me understand\n", "created_at": "2015-08-31 03:27:40", "user": 3536457, "id": 136242294}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think it's a bit cryptic and misleading. [Few people](https://www.google.pl/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=ruby+no+id+given) got confused what exactly this error message mean\n\nI'm suggesting to change it for something more obvious.\n", "labels": [], "number": 1013, "updated_at": "2015-09-03 07:16:05", "user": 4388676, "closed_at": "2015-09-03 01:09:10", "id": 104561800, "title": "Fix error message for argument error", "url": "https://api.github.com/repos/ruby/ruby/issues/1013", "created_at": "2015-09-02 20:11:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/137230419", "text": "https://www.omniref.com/ruby/2.2.0/symbols/BasicObject/method_missing?#annotation=4439641\n", "created_at": "2015-09-02 20:14:04", "user": 4388676, "id": 137230419}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": null, "labels": [], "number": 1014, "updated_at": "2015-12-21 02:11:14", "user": 1051, "closed_at": "2015-12-21 02:11:14", "id": 105272169, "title": "BSDL: update copyright notice for 2015.", "url": "https://api.github.com/repos/ruby/ruby/issues/1014", "created_at": "2015-09-07 22:18:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/138402735", "text": "It is enough with only this file?\n", "created_at": "2015-09-08 01:26:26", "user": 16700, "id": 138402735}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/138439942", "text": "The previous change to the file has this plus an entry in the changelog. \n", "created_at": "2015-09-08 05:39:19", "user": 1051, "id": 138439942}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/166176575", "text": "`1993-` is better rather than `1993-2015`. We shouldn't update these file every year.\n", "created_at": "2015-12-21 02:11:14", "user": 12301, "id": 166176575}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "enhance the specified word with quota, to improve the readable\n", "labels": [], "number": 1015, "updated_at": "2015-09-17 11:18:35", "user": 9990676, "closed_at": "2015-09-12 07:07:46", "id": 105869155, "title": "enhance deploy readme", "url": "https://api.github.com/repos/ruby/ruby/issues/1015", "created_at": "2015-09-10 18:27:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1016, "updated_at": "2015-09-14 08:11:38", "user": 1147484, "closed_at": "2015-09-14 02:13:05", "id": 106235076, "title": "Fix typo in racc english documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1016", "created_at": "2015-09-13 19:21:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/139992464", "text": "thanks, @nobu :star2: \n", "created_at": "2015-09-14 08:11:37", "user": 1147484, "id": 139992464}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Patch for [Bug#11450](https://bugs.ruby-lang.org/issues/11450)\n", "labels": [], "number": 1017, "updated_at": "2015-09-14 04:08:35", "user": 9510845, "closed_at": "2015-09-14 04:08:35", "id": 106267636, "title": "Content range patch", "url": "https://api.github.com/repos/ruby/ruby/issues/1017", "created_at": "2015-09-14 04:01:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Patch for [Bug #11450](https://bugs.ruby-lang.org/issues/11450). Returning nil instead of raising an error when the content-range unit is not in bytes.\n", "labels": [], "number": 1018, "updated_at": "2018-02-23 03:07:01", "user": 9510845, "closed_at": "None", "id": 106268594, "title": "Content range patch", "url": "https://api.github.com/repos/ruby/ruby/issues/1018", "created_at": "2015-09-14 04:17:45", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hello!\n\nA colleague of mine ran into an issue today where he discovered that streaming HTTP requests made with Net::HTTP would retry some types of errors without giving any indication that an error had occurred and the request stream had been rewound. This ultimately resulted in a response body that contained an incomplete response followed by the complete response body.\n\nI think when the request is being streamed it cannot be considered idempotent because there's no telling what sort of side effects might occur in the block that the response chunk is yielded to.\n\n**I've also created an issue [here](https://bugs.ruby-lang.org/issues/11526) as I suspect this change warrants further discussion.**\n\nWe are not the first to run into this issue. One of the developers of the aws-sdk gem ran into this same issue in the last 6 months and chose to handle the issue by clearing out the IDEMPOTENT_METHODS_ collection such that no requests would automatically retry. This seems like overkill to me, but makes sense for a minimally evasive monkeypatch.\n\nThe author of that patch, Trevor Rowe, suggested that he would create an issue here, but I have been unable to find such an issue.\n\nThe related aws-sdk GitHub issue: https://github.com/aws/aws-sdk-ruby/pull/799\nThe related aws-sdk GitHub commit: https://github.com/aws/aws-sdk-ruby/commit/5a005974afcda0ec0c8e9332bed4c70a78443500\n\nIf I can provide any further information on this matter, please let me know.\n\nThanks in advance for any and all help!\n", "labels": [], "number": 1019, "updated_at": "2015-09-15 17:32:09", "user": 2316989, "closed_at": "2015-09-15 17:32:09", "id": 106409861, "title": "Don't retry streaming idempotent HTTP methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1019", "created_at": "2015-09-14 19:17:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/140474401", "text": "I have opted to close this PR in favor of @trevorrowe's https://github.com/ruby/ruby/pull/951.\n", "created_at": "2015-09-15 17:32:06", "user": 2316989, "id": 140474401}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "And also fix up the grammar a bit.\n", "labels": [], "number": 1020, "updated_at": "2015-09-15 03:49:39", "user": 583995, "closed_at": "2015-09-15 03:49:39", "id": 106421070, "title": "Correct description of array sort block return values", "url": "https://api.github.com/repos/ruby/ruby/issues/1020", "created_at": "2015-09-14 20:26:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This reverts commit a20929cb723088b14e7498ced867a93e32072885.\n", "labels": [], "number": 1021, "updated_at": "2015-09-25 01:04:04", "user": 13423, "closed_at": "2015-09-25 01:04:04", "id": 106712028, "title": "Revert \"Revert \"try to run travis without sudo to run in container\"\"", "url": "https://api.github.com/repos/ruby/ruby/issues/1021", "created_at": "2015-09-16 06:59:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1022, "updated_at": "2015-09-25 16:40:29", "user": 1068531, "closed_at": "2015-09-25 01:08:25", "id": 107064194, "title": "Net::Http: remove unused variable", "url": "https://api.github.com/repos/ruby/ruby/issues/1022", "created_at": "2015-09-17 20:08:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143272466", "text": "@nkondratyev :+1: \n", "created_at": "2015-09-25 16:40:29", "user": 920053, "id": 143272466}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1023, "updated_at": "2015-10-23 06:47:14", "user": 419699, "closed_at": "2015-10-23 06:47:14", "id": 107064896, "title": "Update String#gsub! method signatures to include hash form", "url": "https://api.github.com/repos/ruby/ruby/issues/1023", "created_at": "2015-09-17 20:12:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1024, "updated_at": "2015-12-21 06:42:39", "user": 3395349, "closed_at": "2015-12-21 06:42:39", "id": 107175830, "title": "irb: Change from for syntax to each syntax", "url": "https://api.github.com/repos/ruby/ruby/issues/1024", "created_at": "2015-09-18 10:20:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/166215941", "text": "We didn't approve to only syntax changes. If you hope to fix this, Please contact irb maintainer named keiju-san on bugs.ruby-lang.org\n", "created_at": "2015-12-21 06:42:39", "user": 12301, "id": 166215941}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1025, "updated_at": "2015-09-21 14:50:53", "user": 4787509, "closed_at": "2015-09-21 14:36:39", "id": 107339617, "title": "fix typo. swbemsink_avairable? => swbemsink_available?", "url": "https://api.github.com/repos/ruby/ruby/issues/1025", "created_at": "2015-09-19 15:33:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1026, "updated_at": "2015-09-20 08:52:28", "user": 1147484, "closed_at": "2015-09-20 01:08:49", "id": 107360717, "title": "Update continuations documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1026", "created_at": "2015-09-19 23:18:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/141759087", "text": "Thanks, @nobu! :star2:\n", "created_at": "2015-09-20 08:52:28", "user": 1147484, "id": 141759087}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When the localhost is not explicitly specified, the Rinda/DRb binds\nexplicitly to hostname. Unfortunately, the hostname ports might not be\naccessible due to firewall restrictions, while the loop back always\nworks.\n", "labels": [], "number": 1027, "updated_at": "2015-09-21 19:29:21", "user": 14406, "closed_at": "2015-09-21 19:29:21", "id": 107491336, "title": "Run Rinda/DRb tests on localhost.", "url": "https://api.github.com/repos/ruby/ruby/issues/1027", "created_at": "2015-09-21 11:24:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/141949641", "text": "https://bugs.ruby-lang.org/issues/11543\n", "created_at": "2015-09-21 11:44:37", "user": 14406, "id": 141949641}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "… blocks, not arrays [skip ci]\n", "labels": [], "number": 1028, "updated_at": "2015-11-20 03:54:08", "user": 441543, "closed_at": "2015-11-20 03:54:08", "id": 107900057, "title": "[DOC] clarify docs - take_while and drop_while pass elements to their…", "url": "https://api.github.com/repos/ruby/ruby/issues/1028", "created_at": "2015-09-23 11:30:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request fixes a bug in CYGWIN.\n\nThe processes created with `Process#exec` not receive environment variables specified in the parameter `env`. Related methods (`Process#spawn`, `Kernel#exec`, `Kernel#spawn`, ... ) are also affected.\n\nThis sentence:\n`ruby -e 'Process.exec( {\"MYVAR\" => \"42\"}, \"echo MYVAR: $MYVAR\" )'`\nshould prints:\n`MYVAR: 42`\nbut it prints:\n`MYVAR:`\n", "labels": [], "number": 1029, "updated_at": "2015-09-24 06:20:47", "user": 1894063, "closed_at": "None", "id": 107956748, "title": "env for Process#exec in CYGWIN", "url": "https://api.github.com/repos/ruby/ruby/issues/1029", "created_at": "2015-09-23 16:23:59", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Webrick HTTP Status class has no metod `to_i` (unlike instance).  \n", "labels": [], "number": 1030, "updated_at": "2017-10-22 01:14:51", "user": 1942143, "closed_at": "2017-10-22 01:14:51", "id": 107961465, "title": "Missing method", "url": "https://api.github.com/repos/ruby/ruby/issues/1030", "created_at": "2015-09-23 16:53:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338443418", "text": "Can you address this patch to https://bugs.ruby-lang.org/projects/ruby-trunk/issues ?\r\n\r\nWebrick is only handled on our redmine tracker. Thanks.", "created_at": "2017-10-22 01:14:51", "user": 12301, "id": 338443418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":cat:\n", "labels": [], "number": 1031, "updated_at": "2015-09-25 09:34:00", "user": 1147484, "closed_at": "2015-09-25 00:48:13", "id": 107977756, "title": "Fix code comment in FOREACH_LAST()", "url": "https://api.github.com/repos/ruby/ruby/issues/1031", "created_at": "2015-09-23 18:23:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143170317", "text": "thanks, @hsbt ! :purple_heart: \n", "created_at": "2015-09-25 09:33:59", "user": 1147484, "id": 143170317}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1032, "updated_at": "2015-10-06 09:27:34", "user": 1147484, "closed_at": "2015-10-06 04:49:11", "id": 108349187, "title": "Fix typo in method.h", "url": "https://api.github.com/repos/ruby/ruby/issues/1032", "created_at": "2015-09-25 15:37:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145796792", "text": "thanks!\n", "created_at": "2015-10-06 09:27:34", "user": 1147484, "id": 145796792}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Instead of defining two methods—a reader and writer—for each OpenStruct attribute when it is initialized, define them lazily, the first time either one is called. This adheres to the principle of “pay for use”: methods that are never accessed are never defined. This optimization makes initialization an order of magnitude faster for objects with 100 attributes. In the worst-case scenario, where every attribute is accessed, performance is no worse than it is today.\n## Benchmark\n\n``` ruby\nrequire 'benchmark/ips'\nrequire 'ostruct'\n\nN = 100\nATTRS = (:aa..:zz).take(N)\nHASH = Hash[ATTRS.map { |x| [x, x] }]\n\ndef ostruct\n  OpenStruct.new(HASH)\nend\n\nBenchmark.ips do |x|\n  x.report('ostruct') { ostruct }\nend\n```\n\n```\n-------------------------------------------------\n   before       2.279k (± 8.8%) i/s -     11.395k\n   after       24.702k (±12.8%) i/s -    122.600k\n-------------------------------------------------\n```\n", "labels": [], "number": 1033, "updated_at": "2015-12-31 06:01:55", "user": 10308, "closed_at": "2015-09-26 23:17:34", "id": 108477330, "title": "Define OpenStruct attributes lazily", "url": "https://api.github.com/repos/ruby/ruby/issues/1033", "created_at": "2015-09-26 15:59:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143467854", "text": ":+1: \n", "created_at": "2015-09-26 16:18:47", "user": 164718, "id": 143467854}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143472294", "text": "> In the worst-case scenario, where every attribute is accessed, performance is no worse than it is today.\n\nCan you show the benchmark for the worst case scenario?\n\nI just want to chime in for those who frequently use small `OpenStruct`s where a high (often 100) percent of the attributes are used, so I worry if delegating to `method_missing` is indeed as fast as defining them upon initialization.\n", "created_at": "2015-09-26 17:28:58", "user": 23479, "id": 143472294}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143503714", "text": "This causes CI failures.\n", "created_at": "2015-09-26 23:12:56", "user": 16700, "id": 143503714}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143505691", "text": "cool thing! :dolphin: \n", "created_at": "2015-09-26 23:45:44", "user": 3194530, "id": 143505691}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143523904", "text": "Wow cool and thanks @nobu for fixing CI failures!\n", "created_at": "2015-09-27 06:34:27", "user": 1000669, "id": 143523904}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143660156", "text": "How about the other places, where the `new_ostruct_member` is also being called - like `marshal_load` and `initialize_copy`?\n", "created_at": "2015-09-28 07:30:03", "user": 76288, "id": 143660156}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143693241", "text": "@Arsen7 That’s a good point. I think those calls can also be removed. I’ll open up a new pull request to do that.\n", "created_at": "2015-09-28 09:46:14", "user": 10308, "id": 143693241}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145315772", "text": "This caused a regression in `OpenStruct#respond_to?`:\n\n``` ruby\n>> o=OpenStruct.new(to_ary: true)\n=> #<OpenStruct to_ary=true>\n>> o.respond_to?(:to_ary)\n=> false\n>> o.to_ary\n=> true\n>> o.respond_to?(:to_ary)\n=> false\n```\n", "created_at": "2015-10-04 04:01:12", "user": 199, "id": 145315772}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145317558", "text": "Implement `OpenStruct#respond_to_missing?` to fix: #1041\n", "created_at": "2015-10-04 04:38:55", "user": 199, "id": 145317558}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145317689", "text": "Looks like #1037 fixes the regression also.\n", "created_at": "2015-10-04 04:46:09", "user": 199, "id": 145317689}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156477152", "text": "> Can you show the benchmark for the worst case scenario?\n\n``` ruby\nrequire 'benchmark/ips'\nrequire 'ostruct'\n\nN = 100\nATTRS = (:aa..:zz).take(N)\nHASH = Hash[ATTRS.map { |x| [x, x] }]\n\ndef ostruct\n  o = OpenStruct.new(HASH)\n  o.each_pair do |x, _|\n    o.public_send(x)\n  end\nend\n\nBenchmark.ips do |x|\n  x.report('ostruct') { ostruct }\nend\n```\n\n```\n-------------------------------------------------\n   before      1.386k (±18.3%) i/s -      6.624k\n   after       4.277k (±20.2%) i/s -     20.416k\n-------------------------------------------------\n```\n\n@codeodor: In the worst-case scenario, it’s still 3X faster. :smiley: \n", "created_at": "2015-11-13 16:17:27", "user": 10308, "id": 156477152}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156479602", "text": "@sferik :+1: :+1: \n\nThat is the best kind of worst case scenario. \n", "created_at": "2015-11-13 16:27:09", "user": 23479, "id": 156479602}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159435112", "text": "@sferik :heart_eyes: \n", "created_at": "2015-11-24 23:09:59", "user": 4727, "id": 159435112}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165794270", "text": "This patch does cause a change in behavior in one weird corner case:\n\n``` ruby\nmodule A\n  def foo\n    \"in module\"\n  end\nend\n\nos = OpenStruct.new(foo: \"in hash\")\nos.extend(A)\nos.foo\n```\n\nBefore this patch, this results in `\"in hash\"`, after it results in `\"in module\"`.\n\nThis isn't a complaint, I think the performance improvement is worth it, just wanted to share the results of my morning debugging session in case it saves anyone else time in the future.\n", "created_at": "2015-12-18 14:46:12", "user": 833326, "id": 165794270}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167712325", "text": "I love this change! Awesome work. The only thing now is that when the `method_missing` runs, it no longer defines the method, as it uses `respond_to?` to see if it's already defined, which check `@table` and so will always be true. For example:\n\n``` ruby\nos = OpenStruct.new(:foo => 'bar')\nos.foo # will call through to method missing and should define os#foo\nos.respond_to?(:foo) #=> true\nos.methods.include?(:foo) #=> false\n```\n\nThis is going to hurt the performance when accessing the same accessor multiple times and we should be able to fix it to avoid having to run `method_missing` multiple times.\n\nSurprisingly when running a setter everything works fine as the `respond_to?` call will return false for the setter, even though it's returning true for our getter.\n\n``` ruby\nos = OpenStruct.new(:foo => 'bar')\nos.methods.grep /foo/ # => []\nos.foo = 'bar2'\nos.methods.grep /foo/ # => [:foo, :foo=] \n```\n\nI'm not sure if there's a way we can detect if the method has already been set as `respond_to?` isn't useful here. Perhaps we could have an array which includes names of methods that have had a setter/getter method set?\n\nThoughts @zzak  + @sferik \n", "created_at": "2015-12-29 03:52:02", "user": 112153, "id": 167712325}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167714378", "text": "Seems the bug was introduced into #1037 when `respond_to_missing?` was defined.\n", "created_at": "2015-12-29 03:55:27", "user": 112153, "id": 167714378}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168122852", "text": "> Surprisingly when running a setter everything works fine as the respond_to? call will return false for the setter, even though it's returning true for our getter.\n\nNot sure what you mean... `OpenStruct.new(foo: 42).respond_to?(:foo=) # => true`\n\n> I'm not sure if there's a way we can detect if the method has already been set\n\nSure, check the lists of `method`s:  `OpenStruct.new(foo: 42).methods.include?(:foo=) # => false`. Not sure why you'd want to do that though\n", "created_at": "2015-12-31 04:19:13", "user": 33770, "id": 168122852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168123860", "text": "@marcandre ah sorry, I was mistaken on the first part, a new method is created for an accessor only when they aren't already defined during initialisation. So calling `open_struct.some_new_accessor` after init would cause a getter/setter to be defined.\n\n> Sure, check the lists of methods: OpenStruct.new(foo: 42).methods.include?(:foo=) # => false. Not sure why you'd want to do that though\n\nCurrently when checking if we should define a method for the accessor, we are using `respond_to?` to ensure we don't re-define the method if it already exists, but because `respond_to_missing?` is defined, we're incorrectly inferring that we've already defined the method when we haven't.\n\nCan see that here: https://github.com/ruby/ruby/blob/99894e6c82054c893e6c9f5bccc181b97b8120ee/lib/ostruct.rb#L171\n\nUsing `method` or `methods` would make the check accurate and allow us to lazily define getter/setter methods to speed up future value lookups. I'm not sure if time taken to check if the method is defined then define those methods is quicker though.\n\nIf we don't get any speed benefit from defining the methods then we could always remove that code entirely. I'm not sure why it should be any different for attributes defined at initialization vs after the fact.\n", "created_at": "2015-12-31 04:32:29", "user": 112153, "id": 168123860}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168127847", "text": "If we fix the class so that it starts to lazily define getters and setters it will loose some performance as defining the two methods takes as long as running through method missing 2-3 times. Although it does protect us against quite poor performance when attributes are accessed many times.\n\nHere in the example i'm benchmarking the old/new open struct as well as a version that I patched that has a fix so that it defines accessors lazily. It's hitting a single attribute 100 times which is an extreme case, but you can see the new version is quite a lot slower due to always running through method missing.\n\n``` ruby\n  o = OpenStruct.new(:foo => 'bar')\n  o.each_pair do |x, _|\n    100.times do\n      o.foo\n    end\n  end\n```\n\nBenchmarking old and new gives me:\n\n```\nComparison:\n          OpenStruct:    31243.8 i/s\n2_3_OpenStructPatched:    24329.2 i/s - 1.28x slower\n      2_3_OpenStruct:     3060.0 i/s - 10.21x slower\n```\n\nIf we only access the attribute one time (instead of 100) the patched version is slower due to the method definition time:\n\n```\nComparison:\n      2_3_OpenStruct:   117387.1 i/s\n          OpenStruct:    94495.5 i/s - 1.24x slower\n2_3_OpenStructPatched:    55037.8 i/s - 2.13x slower\n```\n\nHere is the patched version i'm using: https://gist.github.com/mariovisic/3e4655a2fd3ce0fa8493/revisions\n", "created_at": "2015-12-31 05:35:25", "user": 112153, "id": 168127847}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168128189", "text": "Oh, right. This is same as https://bugs.ruby-lang.org/issues/11901\n\nIndeed, the test in `new_ostruct_member` was incorrect now that `respond_to_missing?` has been changed. I used `singleton_class.method_defined?(mid)` which should be safer and faster than using a set.\n", "created_at": "2015-12-31 05:42:51", "user": 33770, "id": 168128189}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168129170", "text": "Great, thanks for the link, i'll follow along on the ruby bug tracker, cheers :)\n", "created_at": "2015-12-31 06:01:55", "user": 112153, "id": 168129170}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "DON'T MERGE\n", "labels": [], "number": 1034, "updated_at": "2015-10-06 03:23:00", "user": 16700, "closed_at": "2015-10-06 03:23:00", "id": 108481751, "title": "Travis ci failures", "url": "https://api.github.com/repos/ruby/ruby/issues/1034", "created_at": "2015-09-26 17:27:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Does `lib/forwardable` have tests in other file?\n", "labels": [], "number": 1035, "updated_at": "2015-09-28 01:35:29", "user": 1180335, "closed_at": "2015-09-28 01:33:58", "id": 108489778, "title": "Write basic tests for lib/forwardable", "url": "https://api.github.com/repos/ruby/ruby/issues/1035", "created_at": "2015-09-26 19:40:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143613811", "text": "> Does lib/forwardable have tests in other file?\n\nNothing :octocat: \n\nThank you for your test case. I will merge this.\n", "created_at": "2015-09-28 01:30:13", "user": 12301, "id": 143613811}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143614362", "text": "Thanks to merge! :smile: \n", "created_at": "2015-09-28 01:35:27", "user": 1180335, "id": 143614362}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For improve consistency with Module#define_method and Module#alias_method.\n\nticket: https://bugs.ruby-lang.org/issues/11554\n", "labels": [], "number": 1036, "updated_at": "2018-02-23 03:07:03", "user": 1180335, "closed_at": "None", "id": 108492183, "title": "Privatize {Single}Forwardable API", "url": "https://api.github.com/repos/ruby/ruby/issues/1036", "created_at": "2015-09-26 19:59:06", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This commit is an addendum to https://github.com/ruby/ruby/pull/1033.\n\nIt:\n1. lazily defines attribute accessors for copied and marshaled objects,\n2. returns `nil` when an attribute reader is not defined, and\n3. defines `respond_to_missing?` to maintain the same `respond_to?` behavior.\n\ncc: @zzak @Arsen7\n", "labels": [], "number": 1037, "updated_at": "2015-11-13 16:06:06", "user": 10308, "closed_at": "2015-10-15 01:22:06", "id": 108630968, "title": "Finish defining OpenStruct attributes lazily", "url": "https://api.github.com/repos/ruby/ruby/issues/1037", "created_at": "2015-09-28 10:39:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143816538", "text": "Would be good to get some test coverage here as well\n", "created_at": "2015-09-28 17:40:58", "user": 277819, "id": 143816538}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143879264", "text": "@zzak There are already quite comprehensive specs here: https://github.com/ruby/rubyspec/tree/master/library/openstruct\n", "created_at": "2015-09-28 21:27:20", "user": 10308, "id": 143879264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/143887201", "text": "I think Zachary was indicating a desire to know how much of the code is exercised by those specs - a quantitative figure.\n\nL\n\n This email crafted from materials gathered from across the cosmos.\n\n> On 29 Sep 2015, at 7:27, Erik Michaels-Ober notifications@github.com wrote:\n> \n> @zzak There are already quite comprehensive specs here: https://github.com/ruby/rubyspec/tree/master/library/openstruct\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2015-09-28 22:05:46", "user": 441543, "id": 143887201}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145317643", "text": "Hit this also: #1041 \n", "created_at": "2015-10-04 04:44:14", "user": 199, "id": 145317643}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147541148", "text": "@sferik apparently your patch doesn't make the rubyspec tests pass. Can you take a look?\n", "created_at": "2015-10-12 22:37:39", "user": 3124, "id": 147541148}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147639374", "text": "Arguably, the spec is too precise and testing implementation details. Therefore I fixed some part of it and the build is now likely to pass.\n\nI would like to remove the new_ostruct_member spec entirely.\nHowever, both new_ostruct_member and modifiable are `protected` (while it seems they should really be `private`) and documented at the user level so it does not look completely like an internal API either: http://ruby-doc.org/stdlib-2.2.3/libdoc/ostruct/rdoc/OpenStruct.html#method-i-new_ostruct_member\n", "created_at": "2015-10-13 08:08:07", "user": 168854, "id": 147639374}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147654690", "text": "@sferik, @tenderlove The CI passes now.\n", "created_at": "2015-10-13 09:06:17", "user": 168854, "id": 147654690}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147705559", "text": "@zzak @tenderlove: I’ve added @jeremy’s tests from https://github.com/ruby/ruby/pull/1041. These tests plus RubySpec should be passing now. Please let me know if there’s anything else you’d like me to do before this is merged.\n", "created_at": "2015-10-13 12:51:00", "user": 10308, "id": 147705559}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147706215", "text": "@eregon Do you think I should change `#modifiable` and `#new_ostruct_member` to be `private` (instead of `protected`) or is that changing too much?\n", "created_at": "2015-10-13 12:53:32", "user": 10308, "id": 147706215}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147843366", "text": "@sferik I think it is better to do that in another change as it might involve compatibility issues.\nI already opened an issue for it: https://bugs.ruby-lang.org/issues/11587\n", "created_at": "2015-10-13 20:31:04", "user": 168854, "id": 147843366}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147850948", "text": "@eregon Sounds good.\n\nIs there anything else holding this up?\n", "created_at": "2015-10-13 20:55:10", "user": 10308, "id": 147850948}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148111791", "text": "I'll merge it.\n", "created_at": "2015-10-14 16:41:49", "user": 168854, "id": 148111791}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148123015", "text": "There seems to be some problem with the Subversion to Git integration, I'll look tomorrow.\n\n@hsbt Do you know about this? The current state of the SVN is strange (date revision + both of my revisions squashed)\n", "created_at": "2015-10-14 17:16:03", "user": 168854, "id": 148123015}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148239932", "text": "@eregon I fixed it. ( git and svn sync scripts are always fragile :( )\n", "created_at": "2015-10-15 00:25:02", "user": 12301, "id": 148239932}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148249154", "text": "@sferik Thank you!!\n", "created_at": "2015-10-15 01:22:11", "user": 277819, "id": 148249154}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148358954", "text": "@hsbt Thanks!\n", "created_at": "2015-10-15 11:24:30", "user": 168854, "id": 148358954}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156474346", "text": "Thanks everyone!\n", "created_at": "2015-11-13 16:06:06", "user": 10308, "id": 156474346}], "assignees": [168854, 168854], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I happened to notice this while doing a regex search.\n", "labels": [], "number": 1038, "updated_at": "2015-09-29 13:31:50", "user": 20318, "closed_at": "2015-09-29 13:31:05", "id": 108848276, "title": "Fix minor typo.", "url": "https://api.github.com/repos/ruby/ruby/issues/1038", "created_at": "2015-09-29 11:13:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/144059407", "text": "Thank you!\n", "created_at": "2015-09-29 13:31:50", "user": 168854, "id": 144059407}], "assignees": [168854, 168854], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Of course the tests in place have not been modified. So go red green refactor and think about it.\nWhy did I change just one number? The results that I have been getting from `DateTime.jd`(any good `ajd` with some time in it) is off by 12 or half a day short. Maybe I don't know what I'm doing but it's in that method somewhere and my install of the trunk gives me better results. Make check did fail there though but then so did so many other tests that by that time I didn't care because my old piece of junk laptop has been spitting up chunks and I end up having to reload the system anyway. So I installed Ruby in root not a user. It defaults to `/usr/local/bin` and so does not mess up my system install of 1.9.1 from Debian of old behind the times wheezy kali dragon that never did any metasploitation for any reason because it's selfish and just wants to hoard the treasure. ;-D\n", "labels": [], "number": 1039, "updated_at": "2015-10-05 01:03:38", "user": 887598, "closed_at": "None", "id": 109223437, "title": "Update date_core.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1039", "created_at": "2015-10-01 03:33:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145406834", "text": ">  The results that I have been getting from `DateTime.jd`(any good `ajd` with some time in it) is off by 12 or half a day short.\n\nPlease elaborate the difference and your expectation, (with code preferably).\n", "created_at": "2015-10-05 01:03:38", "user": 16700, "id": 145406834}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1040, "updated_at": "2018-02-23 03:07:04", "user": 8188636, "closed_at": "None", "id": 109249508, "title": "Just a little refactoring", "url": "https://api.github.com/repos/ruby/ruby/issues/1040", "created_at": "2015-10-01 08:06:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/144766650", "text": "After `vm_pop_frame()`, `*reg_cfp` may be invalid.\nIt must be like:\n\n``` c\n    finished = VM_FRAME_TYPE_FINISH_P(GET_CFP());\n    vm_pop_frame(th);\n    if (UNLIKELY(finished)) {\n```\n\nI'm afraid the current code is simple enough.\n", "created_at": "2015-10-01 15:43:14", "user": 16700, "id": 144766650}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "https://github.com/ruby/ruby/pull/1033#issuecomment-145315772\n\nAfter #1033:\n\n``` ruby\n>> OpenStruct.new(a: true).respond_to?(:a)\n=> false\n```\n\nBefore #1033 and with this fix:\n\n``` ruby\n>> OpenStruct.new(a: true).respond_to?(:a)\n=> true\n```\n", "labels": [], "number": 1041, "updated_at": "2015-10-15 11:19:50", "user": 199, "closed_at": "2015-10-04 04:44:48", "id": 109662790, "title": "Fix `OpenStruct#respond_to?` with lazy-get initializer", "url": "https://api.github.com/repos/ruby/ruby/issues/1041", "created_at": "2015-10-04 04:38:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145317655", "text": "Looks like #1037 already covers this.\n", "created_at": "2015-10-04 04:44:48", "user": 199, "id": 145317655}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145348618", "text": "@jeremy Thank you! I'd like to merge these tests as well /cc @sferik\n", "created_at": "2015-10-04 12:58:08", "user": 277819, "id": 145348618}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147703824", "text": "@zzak I’ll add @jeremy’s tests to my PR.\n", "created_at": "2015-10-13 12:41:23", "user": 10308, "id": 147703824}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148357410", "text": "@jeremy Thanks for the tests!\n", "created_at": "2015-10-15 11:19:50", "user": 168854, "id": 148357410}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "allow percent strings to be labels.\n[Bug #10653] [Bug #11456]\n", "labels": [], "number": 1042, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 109939120, "title": "parse.y: label with percent", "url": "https://api.github.com/repos/ruby/ruby/issues/1042", "created_at": "2015-10-06 05:43:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- compile.c (iseq_compile_each): stop execution of the current source\n  by toplevel return.  [ruby-core:36785] [Feature #4840]\n", "labels": [], "number": 1043, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 109947239, "title": "compile.c: toplevel return", "url": "https://api.github.com/repos/ruby/ruby/issues/1043", "created_at": "2015-10-06 07:01:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- dir.c (rb_dir_s_empty_p): add Dir.empty? method, which tells the\n  argument is the name of an empty directory.  [Feature #10121]\n", "labels": [], "number": 1044, "updated_at": "2016-02-22 07:02:41", "user": 16700, "closed_at": "2016-02-16 09:02:36", "id": 109949827, "title": "dir.c: Dir.empty?", "url": "https://api.github.com/repos/ruby/ruby/issues/1044", "created_at": "2015-10-06 07:27:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/145876831", "text": ":+1: \n", "created_at": "2015-10-06 14:39:04", "user": 1180335, "id": 145876831}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184585630", "text": "Merged at https://github.com/ruby/ruby/commit/135a171ce11dc56d037bfc9c5c50b006042621c4\n", "created_at": "2016-02-16 09:02:36", "user": 12301, "id": 184585630}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- string.c (sym_inspect): support anonymous Symbols.\n- symbol.c (rb_sym_s_generate): add Symbol#gen method.\n", "labels": [], "number": 1045, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 109950341, "title": "symbol.c: Symbol#gen", "url": "https://api.github.com/repos/ruby/ruby/issues/1045", "created_at": "2015-10-06 07:31:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1046, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 109952122, "title": "Feature/socket#reverse lookup", "url": "https://api.github.com/repos/ruby/ruby/issues/1046", "created_at": "2015-10-06 07:45:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR corrects the grammar on the `respond_to?` warning message. Notably, it also changes the wording from 'old fashion' to 'deprecated,' which I assume is the intended meaning. I couldn't find documentation that this was necessarily officially deprecated, but it didn't seem like there would be a warning otherwise. If this is not the case, then I can change the correction to read 'old fashioned,' which would be correct grammar.\n\nI thought it might also help the user to let them know that they could add `include_all=false` as the second method parameter to git rid of the warnings, but I didn't add that yet.\n\nThis is my first commit to Ruby. I read the \"How to Contribute\" wiki as thoroughly as I could before submitting this patch. Please let me know if anything needs to be updated.\n", "labels": [], "number": 1047, "updated_at": "2016-01-19 00:38:57", "user": 702327, "closed_at": "2016-01-19 00:38:57", "id": 110152399, "title": "[ci skip] Fix grammar on `respond_to?` warning message", "url": "https://api.github.com/repos/ruby/ruby/issues/1047", "created_at": "2015-10-07 04:59:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There are early returns, so `return ans` is not reachable\n", "labels": [], "number": 1048, "updated_at": "2015-10-07 17:51:19", "user": 1909242, "closed_at": "2015-10-07 17:51:19", "id": 110280457, "title": "Removed unreachable code `return ans`", "url": "https://api.github.com/repos/ruby/ruby/issues/1048", "created_at": "2015-10-07 17:48:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146276090", "text": "These files are generated by [kpeg](https://github.com/evanphx/kpeg) so you'll need to update kpeg first [over here](https://github.com/evanphx/kpeg/blob/5fabf796f64e2154b70e6f10f7cd7076bc9c0c81/lib/kpeg/compiled_parser.rb#L269)\n", "created_at": "2015-10-07 17:51:19", "user": 9831, "id": 146276090}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR optimizes the `gc_page_sweep` function.\n\nConsider the case of sweeping a string.\n\nIn case of trunk, the code path is: switch -> call obj_free -> switch -> switch -> call rb_str_free (note that obj_free does not get inlined even though it is marked as such).\nThis PR changes the code path to: call obj_free_string (via table lookup) -> jmp rb_str_free.\n\nOn my MacBook Pro using GCC 5.1.0, the following synthetic benchmark went from 7.57 sec. (trunk) to 7.21 sec (this PR).\n\n```\nrequire \"benchmark\"\nN = 100_000_000\nGC.start; GC.start # magic\nBenchmark.bm{|bm|\n  bm.report{N.times{str = \"a\"}}\n}\n```\n\nThe number of GC benchmarks changed as follows:\n\n| benchmark | trunk (user time / gc time) | this PR (user time / gc time) |\n| --- | --: | --: |\n| gcbench-rdoc | 97.5 / 5.27 | 95.0 / 5.15 |\n| gcbench-aobench | 72.3 / 4.15 | 69.3 / 3.98 |\n\nPlease take with a grain of salt when looking at the changes in user time; there were some variation between repetitive runs, and I am not sure why the numbers changed - does the incremental GC of ruby refer to some timer (in which case reduced number of sweep runs (as its faster) would lead to better CPU cache usage explaining the gain), or if not, it could be due to better use of branch prediction unit.\nOTOH the gc time numbers observed were mostly consistent.\n", "labels": [], "number": 1049, "updated_at": "2018-02-23 03:07:04", "user": 41567, "closed_at": "None", "id": 110376011, "title": "optimize gc sweep", "url": "https://api.github.com/repos/ruby/ruby/issues/1049", "created_at": "2015-10-08 05:27:50", "comments": [{"reactions": {"+1": [41567]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/258613459", "text": "We'll need to employ this technique. Please give me a time for a while.\nSorry for waiting.\n", "created_at": "2016-11-05 14:01:44", "user": 9558, "id": 258613459}], "assignees": [9558, 9558], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Thank you for applying the proposed approach in e2cabc2.\n\nUnfortunately, there were issues in the commit (and other related commits) that failed to gain the maximum from the division of fast and slow passes.  This PR addresses the issue.\n\nThe numbers I see when running the code below is as follows:\n\n| compiler | trunk | this PR |\n| --- | --: | --: |\n| gcc 4.8.2 (linux) | 1.31 | 1.27 |\n| gcc 5.1.0 (OS X) | 1.49 | 1.42 |\n| clang-600.0.56 (OS X) | 1.58 | 1.51 |\n\nbenchmark code:\n\n```\nrequire \"benchmark\"\nN = 20_000_000\nGC.start; GC.start # magic\nBenchmark.bm{|bm|\n  bm.report{N.times{str = \"a\"}}\n}\n```\n", "labels": [], "number": 1050, "updated_at": "2015-10-10 06:41:34", "user": 41567, "closed_at": "2015-10-10 06:41:34", "id": 110390171, "title": "optimize performance of  `rb_str_resurrect`", "url": "https://api.github.com/repos/ruby/ruby/issues/1050", "created_at": "2015-10-08 07:38:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147046535", "text": "merged.\n", "created_at": "2015-10-10 06:41:34", "user": 9558, "id": 147046535}], "assignees": [9558, 9558], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "method to test if a given number is probably prime\nor composite using Miller-Rabin Test\n", "labels": [], "number": 1051, "updated_at": "2015-12-10 16:25:08", "user": 75975, "closed_at": "2015-12-10 16:25:08", "id": 110583000, "title": "Add Prime.probably_prime?", "url": "https://api.github.com/repos/ruby/ruby/issues/1051", "created_at": "2015-10-09 03:45:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146808142", "text": "How about a test for the method returning `false`?\n", "created_at": "2015-10-09 09:11:05", "user": 76288, "id": 146808142}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146885590", "text": "@Arsen7  Added tests for checking some large composites. Please review.\n", "created_at": "2015-10-09 14:22:46", "user": 75975, "id": 146885590}, {"reactions": {"+1": [6170077]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146903722", "text": "Nice work @chaitanyav! :+1: \n\nBut I have some style comments:\n1. I think that `if` will be petty in single-line style ([link](https://github.com/bbatsov/ruby-style-guide#if-as-a-modifier))\n2. You have unnecessary `return` calls in end of method ([example link](https://github.com/ruby/ruby/pull/1051/files#diff-cb376f8d9ff85c3dbf97cd71a7463898R188), [style guide link](https://github.com/bbatsov/ruby-style-guide#no-explicit-return))\n\nThanks :star2: \n", "created_at": "2015-10-09 15:28:42", "user": 1147484, "id": 146903722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/146911510", "text": "@davydovanton Fixed the style issues.\n", "created_at": "2015-10-09 16:02:00", "user": 75975, "id": 146911510}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147308698", "text": "@chaitanyav :thumbsup:\n", "created_at": "2015-10-12 07:15:32", "user": 76288, "id": 147308698}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163677081", "text": "Rehearsal ---------------------------------------------------------------\nProbably prime               11.990000   0.060000  12.050000 ( 12.054223)\nOpenSSL::BN.prime_fasttest?   0.020000   0.000000   0.020000 (  0.024519)\n----------------------------------------------------- total: 12.070000sec\n\n```\n                              user     system      total        real\n```\n\nProbably prime               12.090000   0.050000  12.140000 ( 12.147566)\nOpenSSL::BN.prime_fasttest?   0.020000   0.000000   0.020000 (  0.021217)\n\nclosing PR. \n", "created_at": "2015-12-10 16:25:06", "user": 75975, "id": 163677081}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While running strace, I noticed that a ruby script sending a UDP datagram to localhost would call `sendto` twice. The first `sendto` used an IPv6 address, and would fail, and the second `sendto` used an IPv4 address and would succeed.\n\nThe issue seems to be that sockets are created with a domain of PF_INET by default, but hostname lookups (`getaddrinfo`) are done with no address family hint. I have attempted to fix this here.\n\nHere is a short script that illustrates the problem.\n\n```\nrequire 'socket'\nsocket = UDPSocket.new\nsocket.send(\"123\", 0, \"localhost\", 5556)\n```\n\nHere is the strace output, before my patch:\n\n```\n$ strace ~/ruby-master/bin/ruby ~/udp.rb 2>&1 | grep INET | egrep '(send|socket)'\nsocket(PF_INET, SOCK_DGRAM|SOCK_CLOEXEC, IPPROTO_IP) = 7\nsocket(PF_INET, SOCK_DGRAM, IPPROTO_IP) = 8\nsocket(PF_INET6, SOCK_DGRAM, IPPROTO_IP) = 8\nsendto(7, \"123\", 3, 0, {sa_family=AF_INET6, sin6_port=htons(5556), inet_pton(AF_INET6, \"::1\", &sin6_addr), sin6_flowinfo=0, sin6_scope_id=0}, 28) = -1 EAFNOSUPPORT (Address family not supported by protocol)\nsendto(7, \"123\", 3, 0, {sa_family=AF_INET, sin_port=htons(5556), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = 3\n```\n\nAnd after my patch:\n\n```\n$ strace ~/ruby-fix-getaddrinfo/bin/ruby ~/udp.rb 2>&1 | grep INET | egrep '(send|socket)'\nsocket(PF_INET, SOCK_DGRAM|SOCK_CLOEXEC, IPPROTO_IP) = 7\nsocket(PF_INET, SOCK_DGRAM, IPPROTO_IP) = 8\nsendto(7, \"123\", 3, 0, {sa_family=AF_INET, sin_port=htons(5556), sin_addr=inet_addr(\"127.0.0.1\")}, 16) = 3\n```\n", "labels": [], "number": 1052, "updated_at": "2015-10-13 03:15:17", "user": 5143005, "closed_at": "2015-10-13 03:15:17", "id": 110748346, "title": "rsock_addrinfo: specify address family", "url": "https://api.github.com/repos/ruby/ruby/issues/1052", "created_at": "2015-10-09 22:47:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147133076", "text": "tests now pass.\n", "created_at": "2015-10-10 22:48:58", "user": 5143005, "id": 147133076}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[![image](https://cloud.githubusercontent.com/assets/9990676/10391918/dfa00fe8-6eb4-11e5-8e7f-21f040278ebe.png)](http://ruby-doc.org/core-2.2.2/_lib/racc/rdoc/grammar_en_rdoc.html#label-Class+Block)\n\n[http://ruby-doc.org/core-2.2.2/_lib/racc/rdoc/grammar_en_rdoc.html#label-Class+Block](http://ruby-doc.org/core-2.2.2/_lib/racc/rdoc/grammar_en_rdoc.html#label-Class+Block)\n", "labels": [], "number": 1053, "updated_at": "2015-11-24 16:58:01", "user": 9990676, "closed_at": "2015-10-14 04:38:54", "id": 110788404, "title": "fix spell error", "url": "https://api.github.com/repos/ruby/ruby/issues/1053", "created_at": "2015-10-10 11:21:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "follow up r52087\n", "labels": [], "number": 1054, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 110899193, "title": "Unfreeze dstr", "url": "https://api.github.com/repos/ruby/ruby/issues/1054", "created_at": "2015-10-12 02:22:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Access path from `RVALUE` to the bit vectors used for GC always go through `heap_page_header::page` located at 16kb boundary.\n\nThe access causes cache contention.  Most (if not all) CPUs implement set-associative caches.  In case of modern Intel architectures, 32KB, 8 way set-associative cache are used, which means that only 8 elements of `heap_page_header::page` can be stored in L1 cache at one time (note: L2 cache is 256KB, 8 way set-associative, meaning that it is capable of storing at most another 16 entries).\nref: http://www.7-cpu.com/cpu/Haswell.html\n\nThis PR addresses the issue by doing two things:\n\nCommit a9fc59a is a single line change increasing the heap page size from 16K to 128K.  With the change, the number of heap page becomes 1/8 of the original, which in turn means that the cache contention is reduced by about the same factor.\n\nCommit dc1de03 goes one step further.  When page size becomes as large as 128K, there is not need to split heap page header and body to get along with CoW.  The header can simply be stored within the body, occupying a page by itself.  When the header is touched, the page containing the header will be CoWed, but the rest of the heap will remain shared.\n\nWith these changes, GC time spent for aobench went down from 4.31 seconds to 3.59 seconds (17% decrease) (though it should be noted that GC count went down as well in this benchmark).\n", "labels": [], "number": 1055, "updated_at": "2016-11-05 13:28:36", "user": 41567, "closed_at": "2016-11-05 13:28:36", "id": 111102379, "title": "reduce cache contention", "url": "https://api.github.com/repos/ruby/ruby/issues/1055", "created_at": "2015-10-13 04:29:29", "comments": [{"reactions": {"+1": [41567]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/258611545", "text": "Thank you for your proposal and sorry for late response.\nThe reason of 16KB page size is to release pages aggressively, so it is difficult to apply.\n", "created_at": "2016-11-05 13:28:32", "user": 9558, "id": 258611545}], "assignees": [9558, 9558], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please see https://bugs.ruby-lang.org/issues/11589 for a description.\n", "labels": [], "number": 1056, "updated_at": "2015-10-14 05:12:29", "user": 15037886, "closed_at": "2015-10-14 05:12:29", "id": 111284402, "title": "Kwargs", "url": "https://api.github.com/repos/ruby/ruby/issues/1056", "created_at": "2015-10-13 22:25:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using net-http to create a request, we can set the content-type like this:\n\n`request.content_type = 'application/json;  charset=utf-8'`\n\nBut, when trying to get the content-type back, it omits the charset information:\n\n```\nrequest.content_type\n=> \"application/json\"\n```\n\nAnd using direct header access, it works like expected:\n\n```\nrequest['Content-Type']\n=> \"application/json; charset=utf-8\"\n```\n\nThis pull request is to avoid this inconsistency. I don't know if it's something planned, so sorry if I missed something.\n", "labels": [], "number": 1057, "updated_at": "2015-10-14 04:55:18", "user": 1922115, "closed_at": "2015-10-14 04:55:18", "id": 111309390, "title": "Return encoding in content_type", "url": "https://api.github.com/repos/ruby/ruby/issues/1057", "created_at": "2015-10-14 02:38:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/147934778", "text": "I think the current behavior is intended, in order to dispatch to handlers regardless the encoding.\n", "created_at": "2015-10-14 04:55:18", "user": 16700, "id": 147934778}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1058, "updated_at": "2015-10-17 09:00:58", "user": 6726985, "closed_at": "2015-10-17 09:00:58", "id": 111951459, "title": "Remove unnecessary 'ubygems.rb' file", "url": "https://api.github.com/repos/ruby/ruby/issues/1058", "created_at": "2015-10-17 08:46:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/148896668", "text": "https://github.com/rubygems/rubygems is the upstream.\n", "created_at": "2015-10-17 09:00:58", "user": 16700, "id": 148896668}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I run tests of byebug gem with this patch https://github.com/deivid-rodriguez/byebug/pull/160, I've encountered random SEGV. The crash report is here: https://gist.github.com/k0kubun/86fd9fbff32423bd4974\n\nI noticed that [clean_hooks](https://gist.github.com/k0kubun/3d8e15c12200553a1ec4#file-clean_hooks_backtrace-log-L25) is executed inside [exec_hooks_body](https://gist.github.com/k0kubun/3d8e15c12200553a1ec4#file-clean_hooks_backtrace-log-L44). The hooks of `list->hooks` can be `xfree`d during `exec_hooks_body`. That's because `th->vm->trace_running` is not incremented for `exec_hooks_unprotected`.\n\nSo I fixed `rb_threadptr_exec_event_hooks_orig` to count `exec_hooks_unprotected` as `th->vm->trace_running` too. With this patch, the tests have never crashed.\n", "labels": [], "number": 1059, "updated_at": "2015-11-07 01:27:47", "user": 3138447, "closed_at": "2015-11-07 00:56:14", "id": 112145576, "title": "Count trace_running for internal event", "url": "https://api.github.com/repos/ruby/ruby/issues/1059", "created_at": "2015-10-19 13:35:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/149508511", "text": ":link: https://bugs.ruby-lang.org/issues/11603\n", "created_at": "2015-10-20 10:08:09", "user": 29440, "id": 149508511}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154591122", "text": "merged at https://github.com/ruby/ruby/commit/2d4bc584eef5dcd11dbae4c92fe8b404f054ff46\n", "created_at": "2015-11-07 00:56:29", "user": 12301, "id": 154591122}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154592593", "text": "Thank you!\n", "created_at": "2015-11-07 01:03:47", "user": 3138447, "id": 154592593}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154594859", "text": "マージが遅くなって済みません。\n", "created_at": "2015-11-07 01:24:06", "user": 9558, "id": 154594859}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154595201", "text": "いえ、取り込んでいただきありがとうございました!\n", "created_at": "2015-11-07 01:27:33", "user": 3138447, "id": 154595201}], "assignees": [9558, 9558], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since we can't get a reference to the anonymous splat, I think we can\neliminate allocations when calling one.\n\nHere is a sample program:\n\n``` ruby\nrequire 'allocation_tracer'\n\nclass A\n  def foo(*)\n  end\nend\n\nclass B < A\n  def foo(*)\n    super\n  end\nend\n\nObjectSpace::AllocationTracer.setup %i{ type }\n\np ObjectSpace::AllocationTracer.trace {\n  A.new.foo\n}\n\np ObjectSpace::AllocationTracer.trace {\n  B.new.foo\n}\n```\n\nBefore this patch:\n\n```\n[aaron@TC ruby (trunk)]$ ./ruby test3.rb\n{[:T_OBJECT]=>[1, 0, 0, 0, 0, 0], [:T_ARRAY]=>[1, 0, 0, 0, 0, 0]}\n{[:T_OBJECT]=>[1, 0, 0, 0, 0, 0], [:T_ARRAY]=>[3, 0, 0, 0, 0, 0]}\n```\n\nAfter this patch:\n\n```\n[aaron@TC ruby (anonysplat)]$ ./ruby test3.rb\n{[:T_OBJECT]=>[1, 0, 0, 0, 0, 0]}\n{[:T_OBJECT]=>[1, 0, 0, 0, 0, 0], [:T_ARRAY]=>[1, 0, 0, 0, 0, 0]}\n```\n\nI'm not really happy with the function names `args_rest_array2`.  I could just put it in the body of `anon_args_setup_rest_parameter`.\n\n/cc @ko1 @nobu\n", "labels": [], "number": 1060, "updated_at": "2015-10-20 22:10:15", "user": 3124, "closed_at": "2015-10-20 22:10:15", "id": 112227824, "title": "drop array allocations on anonymous splat args", "url": "https://api.github.com/repos/ruby/ruby/issues/1060", "created_at": "2015-10-19 20:37:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/149592329", "text": "Honestly speaking, I don't like this change. This change is too complex compare with the benefit.\n", "created_at": "2015-10-20 14:55:57", "user": 9558, "id": 149592329}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/149593396", "text": "@ko1 ok! Is there any way I can make the change more easily? I'm seeing allocations in Rails because it uses this pattern to ignore arguments.  I can change the method signatures in Rails to avoid the allocations, but it seems like an implementation detail.\n", "created_at": "2015-10-20 14:59:30", "user": 3124, "id": 149593396}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When there are  closing braces '}' before a open brace '{' it must be ignored and considered as literal otherwise the brace expansion won't work properly.\nThis make the brace expansion more robust since it make the brace expansion work with files that starts with closing braces.\n\nI hope to cover all the cases. I'm not sure if i should put a test case for the File.fnmatch with the File::FNM_EXTGLOB option and if there are more side effects than File.fnmatch.\n", "labels": [], "number": 1061, "updated_at": "2015-10-22 04:16:50", "user": 19025, "closed_at": "2015-10-22 04:16:50", "id": 112707969, "title": "Brace expansion possible edge case fix", "url": "https://api.github.com/repos/ruby/ruby/issues/1061", "created_at": "2015-10-22 00:55:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1062, "updated_at": "2015-10-22 15:20:16", "user": 5356517, "closed_at": "2015-10-22 15:20:16", "id": 112731246, "title": "[ci skip] Fix space of code example (`Array#map`)", "url": "https://api.github.com/repos/ruby/ruby/issues/1062", "created_at": "2015-10-22 05:00:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## before:\n\n![screenshot- domain date time 1](https://cloud.githubusercontent.com/assets/193936/10668110/f05fc2b2-78da-11e5-82db-c5030df557af.png)\n## after:\n\n![screenshot- domain date time](https://cloud.githubusercontent.com/assets/193936/10668111/f0667daa-78da-11e5-9630-4a880b4dff72.png)\n", "labels": [], "number": 1063, "updated_at": "2015-10-22 15:32:50", "user": 193936, "closed_at": "2015-10-22 15:23:22", "id": 112816765, "title": "Escape backslash in String#tr documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1063", "created_at": "2015-10-22 14:36:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Validate:\n- can assign an attribute which is `nil`\n- can \"or assign\" an attribute which is `nil`\n", "labels": [], "number": 1064, "updated_at": "2015-10-23 04:52:04", "user": 5356517, "closed_at": "2015-10-23 04:52:04", "id": 112915778, "title": "Add test cases for safe navigation operator assignment", "url": "https://api.github.com/repos/ruby/ruby/issues/1064", "created_at": "2015-10-23 00:01:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1065, "updated_at": "2015-10-23 16:02:50", "user": 39571, "closed_at": "2015-10-23 16:01:45", "id": 113049535, "title": "test_http: added test for keep alive post request", "url": "https://api.github.com/repos/ruby/ruby/issues/1065", "created_at": "2015-10-23 16:01:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/150618724", "text": "Sorry, I pressed the wrong button. My code isn't ready yet.\n", "created_at": "2015-10-23 16:02:50", "user": 39571, "id": 150618724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit is follows up of r52251.\nValidate safe call syntax evaluating arguments only if method call is made.\n", "labels": [], "number": 1066, "updated_at": "2015-10-30 03:56:41", "user": 5356517, "closed_at": "2015-10-30 03:56:41", "id": 113133181, "title": "Add test case for new safe call syntax about arguments evaluation", "url": "https://api.github.com/repos/ruby/ruby/issues/1066", "created_at": "2015-10-24 03:48:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These methods accept string as argument, so add string argument cases.\n", "labels": [], "number": 1067, "updated_at": "2015-10-27 04:54:10", "user": 5356517, "closed_at": "2015-10-26 13:44:07", "id": 113230579, "title": "Add test cases for `public/protected/private _method_defined?`", "url": "https://api.github.com/repos/ruby/ruby/issues/1067", "created_at": "2015-10-25 14:58:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1068, "updated_at": "2015-10-26 13:44:03", "user": 5356517, "closed_at": "2015-10-26 13:44:03", "id": 113230749, "title": "Replace tab with 8 spaces", "url": "https://api.github.com/repos/ruby/ruby/issues/1068", "created_at": "2015-10-25 15:02:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1069, "updated_at": "2015-10-26 10:01:00", "user": 5356517, "closed_at": "2015-10-26 09:39:17", "id": 113313777, "title": "[ci skip] Remove a needless space from comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1069", "created_at": "2015-10-26 09:21:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/151079466", "text": "Thanks :+1: :sparkles:\n", "created_at": "2015-10-26 09:39:29", "user": 29440, "id": 151079466}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/151087506", "text": "You're welcome :smile: \n", "created_at": "2015-10-26 10:00:58", "user": 5356517, "id": 151087506}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Grammatical errors fixed.\n", "labels": [], "number": 1070, "updated_at": "2015-10-26 13:24:42", "user": 11687224, "closed_at": "2015-10-26 13:24:42", "id": 113352035, "title": "Grammatical fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/1070", "created_at": "2015-10-26 13:12:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Check if `method_defined?` returns true if protected method name\n  is given\n- Check if `method_defined?` returns false if protected method name\n  is given\n- Check if `method_defined?` returns same results if string arguments\n  are given\n", "labels": [], "number": 1071, "updated_at": "2015-10-30 03:36:58", "user": 5356517, "closed_at": "2015-10-30 03:36:58", "id": 113506950, "title": "Update a test case for `method_defined?`", "url": "https://api.github.com/repos/ruby/ruby/issues/1071", "created_at": "2015-10-27 04:57:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add examples which shows\n- If protected method name is given, `method_defined?` returns true\n- If private method name is given, `method_defined?` returns false\n", "labels": [], "number": 1072, "updated_at": "2015-10-30 03:36:58", "user": 5356517, "closed_at": "2015-10-30 03:36:58", "id": 113558124, "title": "[ci skip] Add code examples for `method_defined?`", "url": "https://api.github.com/repos/ruby/ruby/issues/1072", "created_at": "2015-10-27 11:02:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/151464688", "text": "nice, @yui-knk :+1: \n", "created_at": "2015-10-27 11:42:41", "user": 1147484, "id": 151464688}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "gethostname() returns a null-terminated string, so the second parameter passed\nmust be sized for the max hostname length + space for the null terminator.\nBy specifying the sizeof buf as RUBY_MAX_HOST_NAME_LEN the call to\ngethostname() will fail if the hostname length is equal to\nRUBY_MAX_HOST_NAME_LEN.\n\nThis can be seen on Linux which has a 64 character limit on hostnames:\n\nSetting a 65 character hostname:\n\n```\n# hostname abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz012\nhostname: name too long\n```\n\nSetting a 64 character hostname:\n\n```\n# hostname abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01\n# hostname\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01\n# irb\nirb(main):001:0> require 'socket'\n=> true\nirb(main):002:0> Socket.gethostname\nErrno::ENAMETOOLONG: File name too long - gethostname\n    from (irb):2:in `gethostname'\n    from (irb):2\n    from /usr/local/bin/irb:12:in `<main>'\n```\n\nSetting a 63 character hostname:\n\n```\n# hostname abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0\n# hostname\nabcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0\n# irb\nirb(main):001:0> require 'socket'\n=> true\nirb(main):002:0> Socket.gethostname\n=> \"abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz0\"\nirb(main):003:0> Socket.gethostname.length\n=> 63\n```\n", "labels": [], "number": 1073, "updated_at": "2016-06-07 18:39:15", "user": 422772, "closed_at": "2016-06-07 18:39:15", "id": 113573819, "title": "Allow gethostname to succeed when hostname length == RUBY_MAX_HOST_NAME_LEN", "url": "https://api.github.com/repos/ruby/ruby/issues/1073", "created_at": "2015-10-27 12:39:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1074, "updated_at": "2016-11-08 19:56:49", "user": 11664034, "closed_at": "2016-11-08 19:56:49", "id": 113584341, "title": "Fix grammar errors", "url": "https://api.github.com/repos/ruby/ruby/issues/1074", "created_at": "2015-10-27 13:33:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165664402", "text": "Anyone proofreading this?\n", "created_at": "2015-12-18 03:53:09", "user": 12301, "id": 165664402}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## Problem\n- Commenting out code is not an easy workflow feature in ERB as it is in other languages.\n- ERB elements are cleverly designed to look like a special kind of html element so it makes programmers unhappy and surprised when commenting the HTML does not affect the ruby elements nested inside.\n- This makes it certain workflows particularly difficult e.g. sketching out a view to aide with iteratively developing its underlying model.\n## Solution\n\nThis proposes a new set of ERB commenting tokens - currently for use with HTML only.\nThey take the form of an HTML comment combined with a Ruby comment. \nLooks like this:\n\n`<#--\nNone of this will be outputted: <%= my_ruby_var %>\nand neither will this\n--#>`\n## Implementation\n\nThis takes a cautious approach. Legacy ERB files may contain typos which happen to match a single, orphan ERB comment token. These are invalid HTML but may have been tolerated and simply printed out in the displayed webpage. For this reason the implementation ignores the ERB comment tokens unless they are properly closed off. This greatly reduces the likelihood of any legacy issues existing.\n## Personal note\n\nI realise I'm a new to ruby and can't suggest anything that hasn't been thought of already. I realise that the main reason this hasn't already been implemented is likely because ERB is not just for HTML is. However, it may be that a pair of tokens can be found and proven to be compatible with at least JS and CSS. \n\nThousands of people have clearly wanted this for years and the hackiness of the accepted answers here shows how those who don't want it anymore have just gotten used to it the hard way.\n\nhttp://stackoverflow.com/questions/3426671/how-does-one-comment-in-an-erb-template\nhttp://stackoverflow.com/questions/3127644/block-comments-in-html-erb-templates-in-rails\nhttp://stackoverflow.com/questions/3901619/how-to-comment-lines-in-rails-html-erb-files\n\nI'd just really like to see this solved even if none of my code is considered good enough to do it.\n\n_N.B I'll also post this through redmines._\n", "labels": [], "number": 1075, "updated_at": "2017-05-25 14:11:19", "user": 9261192, "closed_at": "2017-05-25 14:11:19", "id": 113619167, "title": "Add ERB comment functionality safely", "url": "https://api.github.com/repos/ruby/ruby/issues/1075", "created_at": "2015-10-27 16:03:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304019702", "text": "As explained in https://bugs.ruby-lang.org/issues/11624, I reject this for now and recommend you to use https://github.com/k0kubun/erb-comment instead.", "created_at": "2017-05-25 14:11:18", "user": 3138447, "id": 304019702}], "assignees": [33682, 33682, 3138447], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":cat:\n", "labels": [], "number": 1076, "updated_at": "2015-11-04 09:54:49", "user": 1147484, "closed_at": "2015-11-04 06:41:27", "id": 114147777, "title": "Fix typo in method.h", "url": "https://api.github.com/repos/ruby/ruby/issues/1076", "created_at": "2015-10-29 21:09:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/153664851", "text": "@hsbt thanks for merge! (^ᴗ^)\n", "created_at": "2015-11-04 09:54:49", "user": 1147484, "id": 153664851}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Before this commit `ArgumentError: malformed format string - %$`\nwas raised when `NameError#message` is called.\n", "labels": [], "number": 1077, "updated_at": "2015-10-31 01:23:32", "user": 5356517, "closed_at": "2015-10-31 01:23:32", "id": 114301921, "title": "Fix a format of `NameError#message`", "url": "https://api.github.com/repos/ruby/ruby/issues/1077", "created_at": "2015-10-30 16:16:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Same as `rb_print_inaccessible`, change `rb_print_undef` to use\n`rb_method_visibility_t`.\n", "labels": [], "number": 1078, "updated_at": "2016-01-03 05:00:10", "user": 5356517, "closed_at": "2016-01-03 05:00:10", "id": 114737841, "title": "Use `rb_method_visibility_t` instead of `int` in `rb_print_undef`", "url": "https://api.github.com/repos/ruby/ruby/issues/1078", "created_at": "2015-11-03 04:02:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156681062", "text": ":eyes:  https://bugs.ruby-lang.org/issues/11649\n", "created_at": "2015-11-14 10:13:13", "user": 5356517, "id": 156681062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1079, "updated_at": "2015-11-04 06:40:35", "user": 1849162, "closed_at": "2015-11-04 06:40:35", "id": 114747483, "title": "Grammar correction in Hash#rehash documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1079", "created_at": "2015-11-03 05:52:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a double word 'for' and a typo ('give' vs. 'given').\n", "labels": [], "number": 1080, "updated_at": "2015-11-04 02:38:54", "user": 2782858, "closed_at": "2015-11-04 02:38:54", "id": 114835634, "title": "Fix double word 'for' and typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1080", "created_at": "2015-11-03 15:01:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Explain the purpose of mkconfig.rb and rbconfig.rb and specify from where mkconfig.rb gets its input.\n\nBeing new to Ruby and tasked with cross-compiling gems, some comments along the lines of these would have saved me a lot of effort, so they might be helpful to others too.\n", "labels": [], "number": 1081, "updated_at": "2015-11-16 07:17:25", "user": 154768, "closed_at": "2015-11-16 07:17:25", "id": 115325765, "title": "mkconfig.rb: add some high-level documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1081", "created_at": "2015-11-05 16:48:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1082, "updated_at": "2015-11-08 05:25:20", "user": 45995, "closed_at": "2015-11-08 05:25:20", "id": 115552456, "title": "method.h: suppress a warning", "url": "https://api.github.com/repos/ruby/ruby/issues/1082", "created_at": "2015-11-06 17:37:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154776384", "text": "What's your compiler?\n", "created_at": "2015-11-08 05:16:00", "user": 16700, "id": 154776384}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Replace setting `user` and `password` logic to separate method.\n- Replace getting `directories` logic to separate method.\n- Remove unnecessary `if` code.\n- Change `{...}` to `do...end` multi-line blocks.\n\nP.S.: if it necessary I can create issue  on http://bugs.ruby-lang.org\n", "labels": [], "number": 1083, "updated_at": "2016-02-10 14:56:42", "user": 1147484, "closed_at": "2016-02-10 14:56:39", "id": 115571032, "title": "Simple refactoring URI::FTP#buffer_open", "url": "https://api.github.com/repos/ruby/ruby/issues/1083", "created_at": "2015-11-06 19:27:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1084, "updated_at": "2015-11-08 01:39:11", "user": 45995, "closed_at": "2015-11-08 01:39:11", "id": 115628423, "title": "URI::FTP.build typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1084", "created_at": "2015-11-07 03:02:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "reference to https://bugs.ruby-lang.org/issues/11417\n", "labels": [], "number": 1085, "updated_at": "2015-11-08 10:01:27", "user": 1147484, "closed_at": "2015-11-08 01:55:54", "id": 115687462, "title": "Update IO#gets doc for characters more than 1 byte", "url": "https://api.github.com/repos/ruby/ruby/issues/1085", "created_at": "2015-11-07 19:34:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154796852", "text": "thanks for merge, @nobu :+1: \n", "created_at": "2015-11-08 10:01:27", "user": 1147484, "id": 154796852}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "add multiply, avg, and median array methods\nrefactor sum method\n", "labels": [], "number": 1086, "updated_at": "2016-01-31 08:53:06", "user": 5302071, "closed_at": "2016-01-31 03:33:45", "id": 115711791, "title": "add additional math operations", "url": "https://api.github.com/repos/ruby/ruby/issues/1086", "created_at": "2015-11-08 06:25:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/154883900", "text": "You probably want the multiply function to inject the \\* operator, not the + :)\n", "created_at": "2015-11-08 22:53:17", "user": 6978188, "id": 154883900}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/177375949", "text": "@hsbt @nobu why was this closed?\n", "created_at": "2016-01-31 03:41:24", "user": 5302071, "id": 177375949}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/177439631", "text": "it has been merged.\n", "created_at": "2016-01-31 08:53:06", "user": 16700, "id": 177439631}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR is in reference to [this issue I filed](https://bugs.ruby-lang.org/issues/11661) where the rationale is explained.\n\nIn this PR, calling `sprintf` using hash substitution no longer causes a `KeyError`:\n\n``` ruby\nmy_hash = Hash.new('world')\n\n# Before\nputs \"hello %{location}\" % my_hash\n# > KeyError: key{location} not found\n\n# After\nputs \"hello %{location}\" % my_hash\n# > hello world\n```\n", "labels": [], "number": 1087, "updated_at": "2015-11-11 00:10:42", "user": 1082806, "closed_at": "2015-11-11 00:10:42", "id": 115713732, "title": "sprintf.c: hash substitution using the default hash value", "url": "https://api.github.com/repos/ruby/ruby/issues/1087", "created_at": "2015-11-08 07:01:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/155609150", "text": "Closing, this issue was fixed in f8cd219 by @nobu :+1: \n", "created_at": "2015-11-11 00:10:42", "user": 1082806, "id": 155609150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The Resolv::MessageEncoder can deduplicate labels by encoding\nreferences to earlier labels. Currently it tries to encode any offset\neven if it doesn't fit in the 14 bit field. This patch stops it from\nsaving the offset if it's too wide.\n\nFix for https://bugs.ruby-lang.org/issues/11632\n", "labels": [], "number": 1088, "updated_at": "2015-11-12 08:55:00", "user": 143148, "closed_at": "2015-11-12 08:55:00", "id": 115836454, "title": "resolv.rb: don't compress labels beyond offset 0x4000", "url": "https://api.github.com/repos/ruby/ruby/issues/1088", "created_at": "2015-11-09 09:18:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156036828", "text": "Closed by https://bugs.ruby-lang.org/issues/11632#note-3\n", "created_at": "2015-11-12 08:55:00", "user": 143148, "id": 156036828}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR fixes a problem in `Net::HTTP`: When attempting a POST request on a keep-alive-connection, `Net::HTTP` will sometimes raise an unnecessary `EOFError`. \n\nMost HTTP servers close keep-alive connections after an idle timeout or when reaching some internal limit. For the HTTP client, this leads to the TCP socket reaching EOF (End-Of-File). Currently, `Net::HTTP` does not check this before using the socket, causing `EOFError`.\n\nFor idempotent requests (for example GET) `Net::HTTP` simply [retries the request](https://github.com/ruby/ruby/blob/3563d50c7af77b80ac12c0ff2506eb353c734a1a/lib/net/http.rb#L1449-L1458). But this does not work for requests that aren't idempotent like POST, so `HTTP#post` will raise an `EOFError`.\n\nThis PR fixes this by checking if the connection is healthy before attempting the request, using a non-blocking read on the socket. If an error is detected, `Net::HTTP` simply closes and reconnects before sending the request.\n\nA unit test is included that checks if `HTTP#post` succeeds on a keep-alive connection that has been closed by the server.\n\nSee also: https://bugs.ruby-lang.org/issues/11671\n", "labels": [], "number": 1089, "updated_at": "2015-11-27 14:08:49", "user": 39571, "closed_at": "2015-11-27 14:08:49", "id": 115911472, "title": "net/http: detect closed connection to avoid EOFError", "url": "https://api.github.com/repos/ruby/ruby/issues/1089", "created_at": "2015-11-09 16:21:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159858608", "text": "Windows don't have IO#read_nonblock.\n", "created_at": "2015-11-26 09:36:12", "user": 13423, "id": 159858608}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159878003", "text": "Others already faced problems with `IO#read_nonblock` on windows, e.g. https://github.com/net-ssh/net-ssh/issues/168 . Their solution is to use `IO#sysread` on windows instead (see https://github.com/net-ssh/net-ssh/pull/169 ). I'm not sure, if this is the right way to go.\n", "created_at": "2015-11-26 10:54:13", "user": 86275, "id": 159878003}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Switch internal/token name to reflect current form of safe-call operator\n\n/cc @nobu\n", "labels": [], "number": 1090, "updated_at": "2015-11-10 10:00:19", "user": 2079110, "closed_at": "2015-11-10 09:43:38", "id": 115976301, "title": "Rename DOTQ to ANDDOT", "url": "https://api.github.com/repos/ruby/ruby/issues/1090", "created_at": "2015-11-09 21:56:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/155319316", "text": "looks good, travis fails are unrelated failures with this pull requests.\n\n@nobu Do you think about this?\n", "created_at": "2015-11-10 06:37:13", "user": 12301, "id": 155319316}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/155361212", "text": "Rebased against latest `trunk`. After [couple](https://travis-ci.org/ruby/ruby/builds/90190612) [of](https://travis-ci.org/ruby/ruby/builds/90255526) [tries](https://travis-ci.org/ruby/ruby/builds/90256699), build finally have succeeded.\n", "created_at": "2015-11-10 08:54:52", "user": 2079110, "id": 155361212}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/155369525", "text": "I've thought about the name in these days, ADOT, ANDOT, ANDDOT, QDOT, etc.\nANDDOT may be good enough.\n", "created_at": "2015-11-10 09:36:27", "user": 16700, "id": 155369525}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a typo, double 'means'.\n", "labels": [], "number": 1091, "updated_at": "2015-11-11 05:15:09", "user": 2782858, "closed_at": "2015-11-11 05:15:09", "id": 116169262, "title": "Fix typo, double 'means'", "url": "https://api.github.com/repos/ruby/ruby/issues/1091", "created_at": "2015-11-10 18:15:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "9443203ee829622ae44e2722df0e14dfeeec2ee3\napplied a patch that optimizes k_if and modifier_if for trivial conditions. This patch applies the same optimizations to k_unless and modifier_unless.\n", "labels": [], "number": 1092, "updated_at": "2015-11-13 01:37:12", "user": 328950, "closed_at": "2015-11-13 01:37:12", "id": 116553840, "title": "Optimize condition for unless", "url": "https://api.github.com/repos/ruby/ruby/issues/1092", "created_at": "2015-11-12 14:01:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "micro refactoring of _WEBrick::HTTPServlet_ and _WEBrick::HTTPAuth_ modules\n", "labels": [], "number": 1093, "updated_at": "2015-11-13 11:39:37", "user": 13833537, "closed_at": "2015-11-13 10:57:05", "id": 116680419, "title": "micro refactoring of webrick's httpauth and httpservlet modules", "url": "https://api.github.com/repos/ruby/ruby/issues/1093", "created_at": "2015-11-13 01:31:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156398933", "text": "Why closed?\n", "created_at": "2015-11-13 11:06:27", "user": 13315, "id": 156398933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156404648", "text": "@pmq20, build was failed. I don't have a possibility to remove this pull request, so just close it. \nI will create new pull request with more changes tomorrow. Need a time to setup local test environment. My new commit will contain more logical and understandable commit messages. Sorry.\n", "created_at": "2015-11-13 11:39:37", "user": 13833537, "id": 156404648}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1094, "updated_at": "2015-11-16 07:02:20", "user": 5356517, "closed_at": "2015-11-16 07:02:20", "id": 116968934, "title": "[ci skip] Add call-seq of `Method#super_method`", "url": "https://api.github.com/repos/ruby/ruby/issues/1094", "created_at": "2015-11-15 02:58:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1095, "updated_at": "2015-11-16 07:00:55", "user": 1180335, "closed_at": "2015-11-16 06:59:45", "id": 116968994, "title": "[Doc] Standardize a method signature of Struct#[]= [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1095", "created_at": "2015-11-15 02:59:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156941202", "text": "Thanks  to merge! :bow: \n", "created_at": "2015-11-16 07:00:54", "user": 1180335, "id": 156941202}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1096, "updated_at": "2015-11-15 14:24:17", "user": 1180335, "closed_at": "2015-11-15 09:29:45", "id": 116969801, "title": "Method visibility changers should check the frozen", "url": "https://api.github.com/repos/ruby/ruby/issues/1096", "created_at": "2015-11-15 03:19:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156775515", "text": "ticket: https://redmine.ruby-lang.org/issues/11687\n", "created_at": "2015-11-15 03:20:08", "user": 1180335, "id": 156775515}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156814696", "text": "Thanks to merge! :smile: \n", "created_at": "2015-11-15 14:24:15", "user": 1180335, "id": 156814696}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1097, "updated_at": "2015-12-13 01:42:13", "user": 1180335, "closed_at": "2015-11-20 03:18:13", "id": 116970057, "title": "Struct and OpenStruct will be able to chain the Hash#dig, Array#dig", "url": "https://api.github.com/repos/ruby/ruby/issues/1097", "created_at": "2015-11-15 03:29:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156775766", "text": "ticket: https://redmine.ruby-lang.org/issues/11688\n", "created_at": "2015-11-15 03:30:38", "user": 1180335, "id": 156775766}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158267228", "text": "merged at 482530680c18ea2e44c3300c6f323fabc3bd55f7\n", "created_at": "2015-11-20 03:18:11", "user": 12301, "id": 158267228}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164110039", "text": "Thanks to merge and improvements!\n", "created_at": "2015-12-12 04:38:35", "user": 1180335, "id": 164110039}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164195820", "text": "FYI, I changed the behavior in 13d8bb03859255049dd for arguments that are not symbol-like, as per https://bugs.ruby-lang.org/issues/11762\n", "created_at": "2015-12-12 21:43:00", "user": 33770, "id": 164195820}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164196094", "text": "Thank you, I've forgot it.\n", "created_at": "2015-12-12 21:45:31", "user": 16700, "id": 164196094}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164209397", "text": "@marcandre :memo: :bow: \n", "created_at": "2015-12-13 01:42:13", "user": 1180335, "id": 164209397}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These method allow us to get visibility from `Method` and\n`UnboundMethod` object.\n", "labels": [], "number": 1098, "updated_at": "2018-02-23 03:07:05", "user": 5356517, "closed_at": "None", "id": 116971941, "title": "Add `Method#visibility` and `UnboundMethod#visibility`", "url": "https://api.github.com/repos/ruby/ruby/issues/1098", "created_at": "2015-11-15 04:20:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156780363", "text": "ticket https://redmine.ruby-lang.org/issues/11689\n", "created_at": "2015-11-15 04:53:59", "user": 5356517, "id": 156780363}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This fixes two similar double word typos.\n", "labels": [], "number": 1099, "updated_at": "2015-11-16 03:12:14", "user": 2782858, "closed_at": "2015-11-16 03:12:14", "id": 117001734, "title": "Fix two similar double word typos", "url": "https://api.github.com/repos/ruby/ruby/issues/1099", "created_at": "2015-11-15 16:23:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "a proposal of small for tabulation, initialization and readability changes of WEBrick modules\n", "labels": [], "number": 1100, "updated_at": "2015-12-18 03:49:28", "user": 13833537, "closed_at": "2015-12-18 03:49:28", "id": 117033423, "title": "micro refactoring of WEBrick modules", "url": "https://api.github.com/repos/ruby/ruby/issues/1100", "created_at": "2015-11-16 01:14:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165663067", "text": "It's not +micro+ refactoring :innocent: \n\nPlease separate `syntax changes`, `condition changes` and more each pull requests.\n", "created_at": "2015-12-18 03:49:28", "user": 12301, "id": 165663067}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@nalsh @nahi ( cc: @frsyuki )\n\nAdded `Logger#level=:symbol` and `Logger#level=string` as we talked at https://twitter.com/frsyuki/status/664862229490089984. \n\nThis is useful especially when we configure log_level with yaml (typically, on rails application) like\n\nsettings.yml\n\n```\nlog_level: DEBUG\n```\n\nand\n\n```\nlogger.level = Settings.log_level\n```\n", "labels": [], "number": 1101, "updated_at": "2015-11-18 13:50:16", "user": 2290461, "closed_at": "2015-11-17 14:16:22", "id": 117057757, "title": "lib/logger.rb: support symbol and string log level setting", "url": "https://api.github.com/repos/ruby/ruby/issues/1101", "created_at": "2015-11-16 06:08:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156928635", "text": "The patch itself looks good.\nAdd NEWS and ChangeLog, get commit bit from matz, and you can commit it!\n", "created_at": "2015-11-16 06:19:10", "user": 13423, "id": 156928635}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156929127", "text": "Really nice!\n", "created_at": "2015-11-16 06:20:28", "user": 40720, "id": 156929127}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156937211", "text": "Updated NEWS and ChangeLog. I am now waiting approval of @matz to be a committer (maintainer of Logger). \n", "created_at": "2015-11-16 06:42:37", "user": 2290461, "id": 156937211}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156938636", "text": "@sonots Can you submit this issue to bugs.r-l.o? \n", "created_at": "2015-11-16 06:48:12", "user": 12301, "id": 156938636}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/156940537", "text": "@hsbt submitted https://bugs.ruby-lang.org/issues/11695\n", "created_at": "2015-11-16 06:54:23", "user": 2290461, "id": 156940537}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@nalsh @nahi ( cc: @frsyuki )\n\nAdded `Logger#reopen`as we talked at https://twitter.com/frsyuki/status/664862229490089984. \n\nThis enables to reopen another log file (or same log file) without creating a new Logger instance. This is useful when an application is passing a logger instance everywhere inside it, but want to change log file as https://github.com/fluent/serverengine does on config reloading. \n", "labels": [], "number": 1102, "updated_at": "2015-11-17 14:09:50", "user": 2290461, "closed_at": "2015-11-17 14:09:45", "id": 117101909, "title": "lib/logger.rb: Add Logger#reopen", "url": "https://api.github.com/repos/ruby/ruby/issues/1102", "created_at": "2015-11-16 11:11:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157130573", "text": "Nice :+1:\n", "created_at": "2015-11-16 18:38:15", "user": 40720, "id": 157130573}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157263047", "text": "Fixed based on review\n", "created_at": "2015-11-17 04:10:43", "user": 2290461, "id": 157263047}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157379553", "text": "Merged via https://github.com/ruby/ruby/commit/f952570bddc07e87b7c5a3f62dd5fbe390b7fe48\n", "created_at": "2015-11-17 14:09:45", "user": 2290461, "id": 157379553}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I thought the commented descriptions for `Array#dig` and `Hash#dig` sounded a little unnatural so I have updated the wording slightly.\n", "labels": [], "number": 1103, "updated_at": "2015-11-17 02:29:25", "user": 6726985, "closed_at": "2015-11-17 02:29:25", "id": 117184695, "title": "Update comments describing dig methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1103", "created_at": "2015-11-16 18:08:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "linux socket send method is this:\nssize_t\n     send(int socket, const void *buffer, size_t length, int flags);\n\nand ruby send or write method have no size_t length argument.\n\nsome server have no reaction for send message end with \"\\r\\n\" or socket.flush() method\nit must be socket.close_write to finish the write.\nbut if socket closed , it can not write again. \n", "labels": [], "number": 1104, "updated_at": "2015-11-18 13:03:21", "user": 7079521, "closed_at": "2015-11-18 12:58:53", "id": 117576807, "title": "the socket send method is not same as linux socket send", "url": "https://api.github.com/repos/ruby/ruby/issues/1104", "created_at": "2015-11-18 12:31:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157704339", "text": "This is not a valid pull request, it merges two branches together that are maintained separately.\n\nThe ruby `send` method for sockets [here](https://github.com/ruby/ruby/blob/afe142997b61f7a06563e3a7d7203c2546c7675a/ext/socket/init.c#L94-L95) is called with a length.  That length is determined from the length of your input string.\n\nHave you tried setting the `TCP_NODELAY` option? Since ruby can only follow the socket API your issue is likely not a ruby bug.\n\nIf you are filing an issue you will need to create one by following [these instructions](https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport).\n", "created_at": "2015-11-18 12:59:02", "user": 9831, "id": 157704339}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/157705964", "text": "@drbrain Thank you explained to instruction.\n", "created_at": "2015-11-18 13:03:21", "user": 12301, "id": 157705964}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1105, "updated_at": "2015-11-20 06:29:22", "user": 1147484, "closed_at": "2015-11-20 03:45:20", "id": 117594510, "title": "Add nodoc marker for private #validate_sy_updatePeriod", "url": "https://api.github.com/repos/ruby/ruby/issues/1105", "created_at": "2015-11-18 14:09:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158294546", "text": "thanks, @hsbt!\n", "created_at": "2015-11-20 06:29:22", "user": 1147484, "id": 158294546}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Code of conduct from https://github.com/lolazaza/Code_of_Conduct. The purpose of this CoC is to protect all potential contributors while not infringing on peoples free expression outside of the project space. The purpose in adapting the language used in several well known CoC's was to make a less caustic CoC that won't negatively impact the community while protecting those who are less privileged.\n", "labels": [], "number": 1106, "updated_at": "2015-11-25 22:27:01", "user": 15933205, "closed_at": "2015-11-25 22:14:04", "id": 117928926, "title": "Create code_of_conduct.md", "url": "https://api.github.com/repos/ruby/ruby/issues/1106", "created_at": "2015-11-19 23:03:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159566271", "text": ":-1: \n", "created_at": "2015-11-25 10:36:07", "user": 153388, "id": 159566271}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159696608", "text": "Why this version and not [the original Contributor Covenant](http://contributor-covenant.org) that Rails, Bundler, RubyGems, RSpec, ruby-community, [etc.](http://contributor-covenant.org/#who) use?\n", "created_at": "2015-11-25 18:36:59", "user": 9831, "id": 159696608}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159697617", "text": "I'm still a little confused why some kind of this document should be part of the source code. It will be much better to update https://www.ruby-lang.org/en/community/ page if you think that will help somehow (I don't think so). :-1:\n", "created_at": "2015-11-25 18:41:47", "user": 193936, "id": 159697617}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159716165", "text": "> Why this version and not the original Contributor Covenant that Rails, Bundler, RubyGems, RSpec, ruby-community, etc. use?\n\nBecause that CoC is overreaching and contains language that shuts down free speech and the free exchange of ideas outside of the project space. The phrase \"This code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community\" is broad, subjective and over reaching. \n\nBy this definition Matz would have to be removed from the project according to the CoC creator. \n\n> In the Ruby world, we insist that “Matz Is Nice And So We Are Nice,” ignoring the sexist statements he has made with regard to diversity outreach efforts. (https://modelviewculture.com/pieces/the-dehumanizing-myth-of-the-meritocracy)\n\nIt is simply not acceptable behavior to police the entire internet in order to punish ideas we don't agree with. It's heavy handed and frightening.\n\n> regardless of level of experience\n> Is also language I chose to leave it as it feels vague and interpretive. \n\nFurthermore, the use of phrases like \"Cult of meritocracy\" in that CoC landing page are an emotional plea and red herring designed, once again, to shut down unpopular speech. I am where I am today thanks to meritocracy. I thank god every day that the color of my skin, my gender, my faith and marriage status have played no part in my success. \n\nJust when I thought we had made strides I feel the need to hide behind an avatar or risk losing my status on several projects for not adhering to group thought. I am not alone, I have spoken to Christians, Muslims, People of Color, Gender Fluid (non binary) individuals, Feminists and many many members of the LGB community who are uncomfortable posting to social media sites or taking part in public converstions due to the risk of losing status on a project. It's not just a hobby, for many it is a means to a career and experience.\n\nI don't want to see this happen to Ruby as well.\n\n> I'm still a little confused why some kind of this document should be part of the source code. It will be much better to update https://www.ruby-lang.org/en/community/ page if you think that will help somehow (I don't think so). :-1:\n\nBecause WITHIN the project space a welcoming message of inclusiveness is needed. Having a CoC shows a commitment to protecting all members equally regardless of Gender, Age, Race or other factors.\n\nMany projects are adopting CoC's and it is becoming the new normal. We can as a community adopt one with less restrictive language that respects all people or one that seeks to undermine the very free speech and expression that has made the internet what it is.\n\nWe can choose a CoC that protects the integrity of the project by giving the maintainers the discretion to make decisions that best benefit the project.\n\n> People that violate our code may be sanctioned or removed from the project at the discretion of the Project maintainers. (This PR)\n\nOr we can later have a CoC that binds the project and its maintainers to harmful, vague language that can destroy rather than build communities\n\n> Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. (Contributor Code of Conduct)\n\nIn the end do we want to create a space where everyone can contribute code or a space where we check everyones twitter status before approving a PR?\n", "created_at": "2015-11-25 19:58:22", "user": 15933205, "id": 159716165}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159716663", "text": "I think \"space where everyone can contribute code\" is the current situation.\n", "created_at": "2015-11-25 20:00:44", "user": 193936, "id": 159716663}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159722316", "text": "The problems addressed by codes of conduct are not so simple that one person can solve them with an afternoon's thought. Existing codes of conduct reflect a lot of work (and real-world experience) on the part of people usually marginalized in tech. You ignore them at your own risk.\n", "created_at": "2015-11-25 20:21:36", "user": 22284, "id": 159722316}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159723290", "text": "1. Doesn't meet the minimum requirements to be a valid code of conduct (http://www.ashedryden.com/blog/codes-of-conduct-101-faq).\n2. Intent isn't magic. One can harass someone else without it being their intent AND without being aware of it.\n3. There is nothing wrong with the current code of conduct that this PR fixes.\n", "created_at": "2015-11-25 20:25:47", "user": 381411, "id": 159723290}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159729075", "text": "> The problems addressed by codes of conduct are not a problem that one person can solve with an afternoon's thought. Existing codes of conduct reflect a lot of work (and real-world experience) \n\nNeither was this, it is the sum of 2 CoC's lovely brought together by a group of Women who are tired of being misrepresented. Women who fearful of losing their jobs, positions in the community and projects if they speak out. Public discourse and dissent is being trampled by fear and threats and we want protection too.\n\nWe are aware that this version will need some refinement in the future. It was important to us that we submitted our PR before you did. Your boyfriend runs his mouth when he drinks and hinted of your upcoming PR so we had little time. (Sorry Adam)\n\n> (and real-world experience) on the part of people usually marginalized in tech.  \n> This is laughable! I spent the last 15 years of my career as what you would call marginalized. I couldn't change it, I lived it both as a person of color and a Woman. I don't think it's appropriate for you to make this argument. \n> \n> You ignore them at your own risk.\n\nRed herring, https://en.wikipedia.org/wiki/Red_herring\n", "created_at": "2015-11-25 20:52:50", "user": 15933205, "id": 159729075}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159730668", "text": "> I thank god every day that the color of my skin, my gender, my faith and marriage status have played no part in my success.\n\nInsubstantial, and likely unsubstantiable. Identifying the contributing factors to success is at best a fledgeling field of study.\n\n> I am not alone, I have spoken to Christians, Muslims, People of Color, Gender Fluid (non binary) individuals, Feminists and many many members of the LGB community who are uncomfortable posting to social media sites or taking part in public converstions due to the risk of losing status on a project. It's not just a hobby, for many it is a means to a career and experience.\n> \n> I don't want to see this happen to Ruby as well.\n\nThis is agreeable, though I don't feel like it is an argument for either CoC as much as for some CoC.\n", "created_at": "2015-11-25 21:01:34", "user": 6333434, "id": 159730668}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159732655", "text": "> This is agreeable, though I don't feel like it is an argument for either CoC as much as for some CoC.\n\nI personally would support any CoC that does not operate outside of the project space. Just as a conference CoC should not be applicable to the legal actions inside of your home. Provided of course that it is not filled with subjective language and seeks to protect everyone.\n\n> Insubstantial, and likely unsubstantiable. Identifying the contributing factors to success is at best a fledgeling field of study.\n\nI am guilty of the same type of emotional plea I am so concerned with. You are correct that within the context in which it is made it is a meaningless statement. I am afraid I am not willing to divulge further information as it could reveal my identity so I withdrawal that as a public statement.\n", "created_at": "2015-11-25 21:13:21", "user": 15933205, "id": 159732655}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159733236", "text": "Contributor Covenant 1.2.0 does not contain the language regarding behavior outside of project spaces. You may find it less disagreeable although it is weaker than the current version and should be published along with contact information for reporting violations.\n\nhttp://contributor-covenant.org/version/1/2/0/\n", "created_at": "2015-11-25 21:16:43", "user": 22284, "id": 159733236}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159733806", "text": "Anyway I think this is not good place where to discuss this topic. I vote for closing this issue. It will be better to use [maillist](https://www.ruby-lang.org/en/community/mailing-lists/) or [issue tracker](https://bugs.ruby-lang.org/) IMHO.\n", "created_at": "2015-11-25 21:19:55", "user": 193936, "id": 159733806}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159743528", "text": "> Your boyfriend runs his mouth when he drinks and hinted of your upcoming PR so we had little time.\n\n@lolazaza you've violated the first sentence of your proposed CoC, so I don't believe we should take your proposal seriously.\n", "created_at": "2015-11-25 22:14:04", "user": 9831, "id": 159743528}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`brew prefix` doesn't exist, the right command is brew --prefix\n\ncc @hsbt @sonots\n", "labels": [], "number": 1107, "updated_at": "2015-11-22 22:26:45", "user": 833383, "closed_at": "2015-11-22 22:26:42", "id": 117975493, "title": "fix brew command doc", "url": "https://api.github.com/repos/ruby/ruby/issues/1107", "created_at": "2015-11-20 06:41:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158298930", "text": "also cc @zzak \n", "created_at": "2015-11-20 06:57:06", "user": 833383, "id": 158298930}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158808976", "text": "merged by https://github.com/ruby/ruby/commit/81a6bd50c264b390c023564261d1fd535a2feda4.\nthanks\n", "created_at": "2015-11-22 22:26:24", "user": 833383, "id": 158808976}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes two double-word typos in the installer.\n", "labels": [], "number": 1108, "updated_at": "2015-11-24 01:00:49", "user": 2782858, "closed_at": "2015-11-24 01:00:49", "id": 118126254, "title": "Fix two double-word typos", "url": "https://api.github.com/repos/ruby/ruby/issues/1108", "created_at": "2015-11-20 21:09:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ruby tests now run successfully under Haiku without fault / crash\n\nPASS all 1010 tests\n", "labels": [], "number": 1109, "updated_at": "2015-11-23 03:55:26", "user": 100110, "closed_at": "2015-11-23 03:55:26", "id": 118277406, "title": "Fix ruby crashes under Haiku", "url": "https://api.github.com/repos/ruby/ruby/issues/1109", "created_at": "2015-11-22 17:53:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158819455", "text": "Thank you, seems great.\n\nA few questions:\n- from what version of Haiku do these patches work?\n- do older versions work without these patches?\n- are older versions obsolete already?\n", "created_at": "2015-11-22 23:51:07", "user": 16700, "id": 158819455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158821289", "text": "- from what version of Haiku do these patches work?\n  Latest nightly os images.\n- Do older versions work without these patches?\n  Ruby ran without these patches, however had multiple crashes as it couldn't find the end of the stack.\n- are older versions obsolete already?\n  Haiku's previous Alpha release (4) is pretty outdated and not generally used in the community.  We _really_ need a new release. Alpha 4 didn't even include all of our new package management.\n\nThe nice part of these patches is we're removing a lot of `ifdef __HAIKU__` statements making the code more maintainable with less upkeep from the ruby devs.\n", "created_at": "2015-11-23 00:10:40", "user": 100110, "id": 158821289}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158823209", "text": "OK, then could you mention it at the end of the `NEWS` file, “Implementation changes” section?\n", "created_at": "2015-11-23 00:41:34", "user": 16700, "id": 158823209}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/158824590", "text": "done.  I used the words \"best effort\" for now.\n", "created_at": "2015-11-23 01:09:14", "user": 100110, "id": 158824590}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This Pull Request fixes an issue number typo in NEWS file.\n\n`Struct#dig` Should be Feature #11688: https://bugs.ruby-lang.org/issues/11688\n", "labels": [], "number": 1110, "updated_at": "2015-11-24 07:21:21", "user": 1000669, "closed_at": "2015-11-23 23:30:40", "id": 118348343, "title": "Fix the number of Struct#dig issue number [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1110", "created_at": "2015-11-23 09:54:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/159181348", "text": "Thanks! \n", "created_at": "2015-11-24 07:21:21", "user": 1000669, "id": 159181348}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Otherwise the sentence in ruby-doc is confusing, because it reads like\nthis:\n\n\"(...) associated with class IO File includes the methods of (...)\"\n\ninstead of\n\n\"(...) associated with class IO. File includes the methods of (...)\"\n", "labels": [], "number": 1111, "updated_at": "2015-11-24 00:05:06", "user": 2887858, "closed_at": "2015-11-24 00:05:06", "id": 118404821, "title": "Add missing punctuation to File docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1111", "created_at": "2015-11-23 15:28:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As a developer of Haiku, I can say the chances of BeOS (gcc2) still compiling are minimal. Given Haiku offers binary compatibility, more modern hardware support (BeOS won't run on hardware over Pentium I without binary patching) , and is open source.. lets finally lay BeOS to rest.\n", "labels": [], "number": 1112, "updated_at": "2015-11-24 00:17:42", "user": 100110, "closed_at": "2015-11-24 00:17:42", "id": 118445429, "title": "beos: Drop support for BeOS now that Haiku is stable", "url": "https://api.github.com/repos/ruby/ruby/issues/1112", "created_at": "2015-11-23 18:46:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See the ticket here: https://bugs.ruby-lang.org/issues/11735\n\n---\n\nThis is a port of methods that are part of Active Support[[1](http://api.rubyonrails.org/v4.2.5/classes/String.html#method-i-squish)]. Both of\nthese methods are useful when you are dealing with heredoc and would\nlike to ignore all the whitespaces before, after, and in-between the\nstring.\n\nExample:\n\n```\nsql = <<-SQL.squish\n  SELECT *\n  FROM users\n  WHERE users.username = 'sikachu'\nSQL\n#=> \"SELECT * FROM users WHERE users.username='sikachu'\"\n```\n", "labels": [], "number": 1113, "updated_at": "2016-04-29 13:59:24", "user": 4912, "closed_at": "2016-04-29 13:59:24", "id": 118687011, "title": "[Feature #11735] Porting String#squish and String#squish! from Ruby on Rails' Active Support", "url": "https://api.github.com/repos/ruby/ruby/issues/1113", "created_at": "2015-11-24 19:37:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/161817173", "text": "+1, this would be a very neat feature\n", "created_at": "2015-12-03 23:03:35", "user": 6978188, "id": 161817173}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/161927743", "text": "seems not working with ASCII incompatible encodings.\n", "created_at": "2015-12-04 10:06:11", "user": 16700, "id": 161927743}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/215724262", "text": "Closing this in favor of new patch provided in tracker.\n", "created_at": "2016-04-29 13:59:23", "user": 4912, "id": 215724262}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reviving #873 since I think there was some confusion in the original PR.\n- `:ssl_version` maps to the `SSL_METHOD` param that is passed into `SSL_CTX_new()`. \n  - https://www.openssl.org/docs/manmaster/ssl/SSL_CTX_new.html\n- The naming of `SSLv23_method` is disingenuous. It has the effect of enabling SSLv3 and _newer_.\n- `SSLv3_method`,  `TLSv1_method`, `TLSv1_1_method`, `TLSv1_2_method` pin the SSL/TLS to a _specific version_, which seem like a poor default.\n- `SSLv23_method` is being renamed to `TLS_method` in OpenSSL 1.1.0, which is a better reflection of its usage. `SSLv23_method` becomes an alias for `TLS_method` and is deprecated. Ruby should use `TLS_method` by default on OpenSSL 1.1.0 or later and retain `SSLv23_method` as the default with previous versions.\n\nIf there is consensus that we don't want to remove support for client TLSv1, I think the next step should be to break `DEFAULT_PARAMS` into separate client and server settings. Shipping a TLS server with badly configured defaults is definitely harmful. \n", "labels": ["OpenSSL"], "number": 1114, "updated_at": "2016-10-23 12:07:08", "user": 15869, "closed_at": "2016-10-23 12:07:08", "id": 118798255, "title": "Remove TLSv1 support from DEFAULT_PARAMS", "url": "https://api.github.com/repos/ruby/ruby/issues/1114", "created_at": "2015-11-25 09:51:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225384215", "text": "I still don't see why Ruby should prohibit TLS 1.0 now. Anyway I can't do this until we completely drop OpenSSL 0.9.8 (i.e. RHEL/CentOS 5).\n\nOn the other hand, I agree SSLSocket#ssl_version= is not useful. It is not usual that a specific version is required. In most cases, what we need is \"TLS 1.0 or newer\" or \"TLS 1.2 or newer\".\nI'm thinking about adding something to set protocol version bound, like SSLContext#ssl_version_{min,max}=.\n", "created_at": "2016-06-11 18:49:06", "user": 1033740, "id": 225384215}], "assignees": [1033740, 1033740], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Various grammar corrections and clarifications to increase readability. \n", "labels": [], "number": 1115, "updated_at": "2015-11-29 05:18:13", "user": 5351125, "closed_at": "2015-11-29 00:14:10", "id": 119321593, "title": "Corrected grammar errors", "url": "https://api.github.com/repos/ruby/ruby/issues/1115", "created_at": "2015-11-28 22:23:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/160346168", "text": "Is \"you'll\" less readable?\n", "created_at": "2015-11-28 23:48:52", "user": 16700, "id": 160346168}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/160354049", "text": "Expanded contractions are generally expected for technical writing.\n", "created_at": "2015-11-29 01:35:35", "user": 5351125, "id": 160354049}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1116, "updated_at": "2015-12-02 02:23:43", "user": 3194530, "closed_at": "2015-12-02 02:23:43", "id": 119398448, "title": "lib/csv.rb: Enable frozen_string_literal.", "url": "https://api.github.com/repos/ruby/ruby/issues/1116", "created_at": "2015-11-30 00:16:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backport https://github.com/ruby/ruby/commit/bab5bf0c79ba310eb2606c079315de417a3cccc9 to Ruby 2.1.\n\nTime.new is used instead of `Process.clock_gettime` in order of being\nconsistent with https://github.com/ruby/ruby/blob/v2_1_7/lib/net/http.rb#L918.\n\nAlso, the code was rewritten to use exceptions instead of return value,\nbecause Ruby < 2.3 does not support passing options to `connect_nonblock`.\n", "labels": [], "number": 1117, "updated_at": "2015-12-02 01:37:58", "user": 109216, "closed_at": "2015-12-02 01:37:16", "id": 119497521, "title": "Backport nonblocking connect in net/http to Ruby 2.1", "url": "https://api.github.com/repos/ruby/ruby/issues/1117", "created_at": "2015-11-30 13:59:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/161152005", "text": "see https://github.com/ruby/ruby/pull/1118#issuecomment-161151939\n", "created_at": "2015-12-02 01:37:58", "user": 12301, "id": 161152005}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backport https://github.com/ruby/ruby/commit/bab5bf0c79ba310eb2606c079315de417a3cccc9 to Ruby 2.2.\n\nThe code was rewritten to use exceptions instead of return value,\nbecause Ruby < 2.3 does not support passing options to `connect_nonblock`.\n", "labels": [], "number": 1118, "updated_at": "2015-12-02 01:37:49", "user": 109216, "closed_at": "2015-12-02 01:37:13", "id": 119498485, "title": "Backport nonblocking connect in net/http to Ruby 2.2", "url": "https://api.github.com/repos/ruby/ruby/issues/1118", "created_at": "2015-11-30 14:04:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/161151939", "text": "Please submit backport request to https://bugs.ruby-lang.org/projects/ruby-trunk\n", "created_at": "2015-12-02 01:37:49", "user": 12301, "id": 161151939}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change is about OptionParser.getopts method's return.\n\nWhen same name options that allowed to receive value are specified like this\nlist = [\"--foo\", \"value1\", \"--foo\", \"value2\"]\np OptionParser.getopts(list, \"\", \"foo:\");\nNow will return this {\"foo\"=>\"value2\"},\nOnly last value is accepted.\n\nBut, I think that it's better to return {\"foo\"=>[\"value1\", \"value2\"]}\n", "labels": [], "number": 1119, "updated_at": "2018-02-23 03:07:06", "user": 5457651, "closed_at": "None", "id": 119545178, "title": "save values when same name options that allowed value are given.", "url": "https://api.github.com/repos/ruby/ruby/issues/1119", "created_at": "2015-11-30 17:54:16", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a double word typo 'must'.\n", "labels": [], "number": 1120, "updated_at": "2015-12-02 01:37:00", "user": 2782858, "closed_at": "2015-12-02 01:37:00", "id": 119558466, "title": "Fix double word typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1120", "created_at": "2015-11-30 19:06:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/161151711", "text": "Thank you always :gem: \n", "created_at": "2015-12-02 01:36:38", "user": 12301, "id": 161151711}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1121, "updated_at": "2015-12-18 03:40:17", "user": 5351125, "closed_at": "2015-12-18 03:40:17", "id": 119815867, "title": "Fixed grammar errors", "url": "https://api.github.com/repos/ruby/ruby/issues/1121", "created_at": "2015-12-01 21:50:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1122, "updated_at": "2015-12-03 10:09:43", "user": 1147484, "closed_at": "2015-12-03 06:38:30", "id": 120035181, "title": "Fix typos in tests", "url": "https://api.github.com/repos/ruby/ruby/issues/1122", "created_at": "2015-12-02 21:03:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a double word typo 'use'.\n", "labels": [], "number": 1123, "updated_at": "2015-12-04 12:11:21", "user": 2782858, "closed_at": "2015-12-03 06:39:55", "id": 120060448, "title": "Fix double word typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1123", "created_at": "2015-12-02 23:35:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's useful to know:\n- If they're pure ruby or compiled\n- Where they can be found\n- If their own website says \"just use rexml\" (NQXML)\n\nFinally, we should make it clear that the 'xmlparser' gem is the one\nyou want if a pure ruby solution is too slow or consumes too much\nmemory. Some users may not realize the 'xmlparser' gem is needed to\nuse the suggested XMLParser::XMLStreamParser class.\n", "labels": [], "number": 1124, "updated_at": "2015-12-14 20:07:38", "user": 19339, "closed_at": "2015-12-14 05:34:44", "id": 120461478, "title": "Clarify documentation on xmlrpc xml parsers", "url": "https://api.github.com/repos/ruby/ruby/issues/1124", "created_at": "2015-12-04 18:46:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162048693", "text": "@zzak Please review.  :bow:\n", "created_at": "2015-12-04 18:47:26", "user": 19339, "id": 162048693}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162054194", "text": "Thanks @simi, fixed\n", "created_at": "2015-12-04 19:05:04", "user": 19339, "id": 162054194}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164544665", "text": "Thanks @hsbt :bow: \n", "created_at": "2015-12-14 20:07:34", "user": 19339, "id": 164544665}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[rake-compiler-dock](https://github.com/rake-compiler/rake-compiler-dock) makes use of the cross build capability of ruby to provide a build environment targeting to the Windows-RubyInstaller. Unfortunately ruby-2.3.0-preview1 doesn't cross build because of two issues. These are addressed in the attached commits.\n", "labels": [], "number": 1125, "updated_at": "2015-12-05 08:53:57", "user": 176234, "closed_at": "2015-12-05 08:49:00", "id": 120479199, "title": "Fix cross build", "url": "https://api.github.com/repos/ruby/ruby/issues/1125", "created_at": "2015-12-04 20:24:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162105991", "text": "@nobu Please review this\n", "created_at": "2015-12-04 23:05:00", "user": 12301, "id": 162105991}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162158451", "text": "Does \"outside of builddir\" mean an absolute path?\n`nmake` does not have `-j` option, does it?\n", "created_at": "2015-12-05 07:36:04", "user": 16700, "id": 162158451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162160801", "text": "> Does \"outside of builddir\" mean an absolute path?\n\nYes, rake-compiler extracts the tar file to `~/.rake-compiler/sources/` but the build runs in `~/.rake-compiler/builds/` . That works with ruby-1.8.7 to 2.2, but not with 2.3.0-preview1.\n\n> nmake does not have -j option, does it?\n\nThere is no -j for nmake, but a cross build can be done with gnu make and `-j` . Using parallel workers for cross build runs fine for ruby-2.0 to 2.2, but not yet for 2.3.0-preview1. \n", "created_at": "2015-12-05 08:29:32", "user": 176234, "id": 162160801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162161277", "text": "`win32/Makefile.sub` is only for `nmake`.\nGNU make never and cannot read it.\n", "created_at": "2015-12-05 08:33:09", "user": 16700, "id": 162161277}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162161816", "text": "> win32/Makefile.sub is only for nmake.\n\nSince the dependency is there, it's best to declare it in `Makefile.sub` as well, even if it's implicit resolved by the build order of nmake. However I did not test with nmake, but with gnu make only.\n", "created_at": "2015-12-05 08:41:20", "user": 176234, "id": 162161816}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162162054", "text": "Merged with keeping a relative path relative.\n", "created_at": "2015-12-05 08:49:05", "user": 16700, "id": 162162054}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162162229", "text": "OK, thank you @nobu !\n", "created_at": "2015-12-05 08:53:57", "user": 176234, "id": 162162229}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a double word typo, 'in'.\n", "labels": [], "number": 1126, "updated_at": "2015-12-08 01:19:59", "user": 2782858, "closed_at": "2015-12-08 01:19:59", "id": 120836541, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1126", "created_at": "2015-12-07 18:24:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## Expected\n\n```\n$ irb\n> RUBY_VERSION\n=> \"2.3.0\"\n> RUBY_RELEASE_DATE\n=> \"2015-12-08\"\n> expected_result = <<~SQUIGGLY_HEREDOC\n\"   This would contain specially formatted text.\n\"\n\"   That might span many lines\n\" SQUIGGLY_HEREDOC\n=> \"This would contain specially formatted text.\\n\\nThat might span many lines\\n\"\n```\n## Actual\n\n```\n$ irb\n> RUBY_VERSION\n=> \"2.3.0\"\n> RUBY_RELEASE_DATE\n=> \"2015-12-08\"\n> expected_result = <<~SQUIGGLY_HEREDOC\nSyntaxError: (irb):3: can't find string \"SQUIGGLY_HEREDOC\" anywhere before EOF\n(irb):3: syntax error, unexpected end-of-input, expecting tSTRING_CONTENT or tSTRING_DBEG or tSTRING_DVAR or tSTRING_END\n        from /Users/koic/.rbenv/versions/2.3.0-dev/bin/irb:11:in `<main>'\n```\n\nI have little confidence in my codes...\n", "labels": [], "number": 1127, "updated_at": "2015-12-18 01:36:06", "user": 13203, "closed_at": "2015-12-18 01:25:37", "id": 120837109, "title": "Error happened when using \"indented heredoc\" on irb", "url": "https://api.github.com/repos/ruby/ruby/issues/1127", "created_at": "2015-12-07 18:28:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162626330", "text": "@koic We can also ask Keiju-san this week at RubyKaigi!\n", "created_at": "2015-12-07 19:06:44", "user": 277819, "id": 162626330}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/162756767", "text": "@zzak I see it and I appreciate it :pray: \n", "created_at": "2015-12-08 04:20:18", "user": 13203, "id": 162756767}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165058233", "text": "@zzak I'm sorry. I couldn't ask Keiju-san at RubyKaigi :bow: Did you ask it?\n\nThis problem has not been fixed yet. I think going to close this issue and report to https://bugs.ruby-lang.org/issues anew.\n\nHow you do you feel about it?\n", "created_at": "2015-12-16 10:24:01", "user": 13203, "id": 165058233}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165631682", "text": "@koic I confirmed this issue and your patch is works. I will merge this for Ruby 2.3.0 release.\n", "created_at": "2015-12-18 01:23:48", "user": 12301, "id": 165631682}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165633242", "text": "@hsbt Thank you for merging.\n", "created_at": "2015-12-18 01:36:04", "user": 13203, "id": 165633242}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1128, "updated_at": "2016-02-21 01:00:16", "user": 33736, "closed_at": "2016-02-21 01:00:16", "id": 121040218, "title": "lib/erb.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1128", "created_at": "2015-12-08 16:07:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163086623", "text": "@deepj https://github.com/deepj/ruby/blob/freeze-erb/lib/erb.rb#L564 this line is broken by frozen string literal\n", "created_at": "2015-12-09 02:26:41", "user": 12301, "id": 163086623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163089189", "text": "@hsbt Are you sure? I haven't notice anywhere it causes any kind of problem.\n\nMotivation why I'm doing this, is make `rack` compatible with enabled string frozen literals (almost is done--just two errors in tests left on rack side )\n", "created_at": "2015-12-09 02:48:03", "user": 33736, "id": 163089189}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164440431", "text": "These 2 comment lines probably need to be updated as well:\n- https://github.com/deepj/ruby/blob/v2_3_0_preview1/lib/erb.rb#L282\n- https://github.com/deepj/ruby/blob/v2_3_0_preview1/lib/erb.rb#L293\n", "created_at": "2015-12-14 13:37:45", "user": 22333, "id": 164440431}], "assignees": [33682, 33682], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This was discussed in https://github.com/rails/sprockets/pull/197. The behavior and results of setting mtime via this method were unclear. This document should help clarify the behavior.\n", "labels": [], "number": 1129, "updated_at": "2016-02-09 15:22:07", "user": 59744, "closed_at": "2016-02-09 05:34:24", "id": 121077059, "title": "[ci skip] Document mtime header behavior", "url": "https://api.github.com/repos/ruby/ruby/issues/1129", "created_at": "2015-12-08 19:09:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181716787", "text": "@schneems Committed, thanks <3\n", "created_at": "2016-02-09 05:34:24", "user": 277819, "id": 181716787}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181912196", "text": "Thanks :heart: \n", "created_at": "2016-02-09 15:22:07", "user": 59744, "id": 181912196}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1130, "updated_at": "2015-12-18 02:50:55", "user": 4277403, "closed_at": "2015-12-18 02:50:54", "id": 121085924, "title": "add test case for empty strings in lib/abbrev", "url": "https://api.github.com/repos/ruby/ruby/issues/1130", "created_at": "2015-12-08 19:56:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165654945", "text": "It contains behavior changes. Please separate pull request each issues.\n", "created_at": "2015-12-18 02:50:54", "user": 12301, "id": 165654945}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1131, "updated_at": "2016-02-21 01:00:04", "user": 33736, "closed_at": "2016-02-21 01:00:04", "id": 121158749, "title": "lib/uri/rfc2396_parser.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1131", "created_at": "2015-12-09 04:34:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1132, "updated_at": "2016-02-21 00:59:52", "user": 33736, "closed_at": "2016-02-21 00:59:52", "id": 121161125, "title": "lib/webrick/log.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1132", "created_at": "2015-12-09 05:06:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1133, "updated_at": "2016-02-21 00:59:41", "user": 33736, "closed_at": "2016-02-21 00:59:41", "id": 121161139, "title": "lib/net/http/generic_request.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1133", "created_at": "2015-12-09 05:06:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1134, "updated_at": "2015-12-09 15:49:53", "user": 28908, "closed_at": "2015-12-09 15:12:21", "id": 121180608, "title": "Fix typo in doc for iseq#to_binary_format", "url": "https://api.github.com/repos/ruby/ruby/issues/1134", "created_at": "2015-12-09 07:40:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163288573", "text": "Thank you :bow:\n", "created_at": "2015-12-09 15:21:59", "user": 28908, "id": 163288573}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163299264", "text": "Thank you too!\n", "created_at": "2015-12-09 15:49:53", "user": 9558, "id": 163299264}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1135, "updated_at": "2015-12-10 01:05:59", "user": 33736, "closed_at": "2015-12-10 00:37:51", "id": 121290002, "title": "lib/shellwords.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1135", "created_at": "2015-12-09 16:50:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163347019", "text": "@nobu Hello there, is it possible to find some time to review my PRs about frozen string literals? I'm working on patching some projects with enabled and it would be fine to have some fixes in Ruby 2.3. Thank you\n", "created_at": "2015-12-09 18:16:52", "user": 33736, "id": 163347019}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163448108", "text": "We avoid to frozn_string_literal at shellwords.rb. see. https://github.com/ruby/ruby/commit/01c432169f53bfc83a001baac91a890dfbf5af35\n", "created_at": "2015-12-10 00:37:51", "user": 12301, "id": 163448108}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163454036", "text": "@hsbt If there is a simple fix of the problem, I guess, it'd be accepted.\n", "created_at": "2015-12-10 01:05:58", "user": 33736, "id": 163454036}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1136, "updated_at": "2015-12-09 23:01:28", "user": 1946610, "closed_at": "2015-12-09 18:22:28", "id": 121308289, "title": "[mkconfig] Ensure that frozen string literals can be enabled", "url": "https://api.github.com/repos/ruby/ruby/issues/1136", "created_at": "2015-12-09 18:20:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1137, "updated_at": "2016-02-21 00:59:27", "user": 33736, "closed_at": "2016-02-21 00:59:27", "id": 121355642, "title": "lib/webrick/httpresponse.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1137", "created_at": "2015-12-09 22:29:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1138, "updated_at": "2016-02-09 05:36:29", "user": 33736, "closed_at": "2016-02-09 05:36:29", "id": 121356678, "title": "ext/openssl/lib/openssl/buffering.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1138", "created_at": "2015-12-09 22:34:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181716970", "text": "I believe we don't want to enable the literal for this file, see c4fdfabcc8ea3f6186d1560f7756211fce125be3\n", "created_at": "2016-02-09 05:36:29", "user": 277819, "id": 181716970}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1139, "updated_at": "2016-02-21 00:59:10", "user": 33736, "closed_at": "2016-02-21 00:59:10", "id": 121366457, "title": "lib/webrick/httprequest.rb: Enable frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1139", "created_at": "2015-12-09 23:33:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163447902", "text": "@deepj you MUST describe answer of \"why enable frozen_string_literal to stdlib?\". We have no plan to enable frozen_string_literal at stdlib yet.\n", "created_at": "2015-12-10 00:36:23", "user": 12301, "id": 163447902}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163452933", "text": "@hsbt OK, I haven't noticed anyone else doing that. So OK. For me, already some stuff having it in stlib. Of course, it is not required by me to have explicit `# frozen_string_literal: true`. I'm just respect here what have been done before me => https://github.com/ruby/ruby/search?utf8=%E2%9C%93&q=frozen_string_literal%3A+true+path%3Alib&type=Code\n\nIt would be fine not having broken Ruby when someone want to try this _experimental_ feature. Now it isn't possible to try it because there are many problems with enabled frozen string literal here. I also don't think disabling explicitly frozen string literal is a way. Just my 2c...\n", "created_at": "2015-12-10 00:59:25", "user": 33736, "id": 163452933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163461737", "text": "@hsbt True, I might would clarify my intentions with these PRs are to make Ruby unbroken when frozen string literal feature is enabled. Rather than making them enabled by default. Sorry for confusing by me!\n", "created_at": "2015-12-10 01:55:26", "user": 33736, "id": 163461737}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Found few typos in code comments, fixed 'em.\n", "labels": [], "number": 1140, "updated_at": "2015-12-14 03:09:15", "user": 1277553, "closed_at": "2015-12-14 02:51:01", "id": 121551720, "title": "Bugfix - Typos in comments", "url": "https://api.github.com/repos/ruby/ruby/issues/1140", "created_at": "2015-12-10 18:45:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164330465", "text": "@jutaz Thank you for your patches. Please separate patches to each pull request at next time.\n", "created_at": "2015-12-14 03:09:15", "user": 12301, "id": 164330465}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Did this using a regex, so not all changes might preserve semantics.\n", "labels": [], "number": 1141, "updated_at": "2015-12-11 15:05:03", "user": 2575714, "closed_at": "2015-12-11 13:36:29", "id": 121619826, "title": "Use safe navigation operator where possible", "url": "https://api.github.com/repos/ruby/ruby/issues/1141", "created_at": "2015-12-11 02:09:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163816440", "text": "rubygems and rdoc should be supported before Ruby 2.3. Can you avoid their?\n", "created_at": "2015-12-11 02:23:55", "user": 12301, "id": 163816440}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/163937558", "text": "@mlarraz Your pull request has a lot of typo and mistake. Please separate patchs and test for your changes at least.\n", "created_at": "2015-12-11 13:36:29", "user": 12301, "id": 163937558}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Took feedback from https://github.com/ruby/ruby/pull/1141 and pared the changes down to be more conservative.\n\nAvoids any comparisons, collection accessors, and basically anything other than a method call. Also doesn't affect RubyGems or RDoc.\n\nAgain, I think this should just work, but I may well have missed something, so would appreciate a closer look.\n", "labels": [], "number": 1142, "updated_at": "2015-12-14 18:31:17", "user": 2575714, "closed_at": "2015-12-14 08:05:46", "id": 121750059, "title": "Use safe navigation operator", "url": "https://api.github.com/repos/ruby/ruby/issues/1142", "created_at": "2015-12-11 16:58:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164359279", "text": "I replaced `dup.force_encoding('ASCII-8BIT')` in the test.\nPlease rebase.\n", "created_at": "2015-12-14 06:44:55", "user": 16700, "id": 164359279}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164363201", "text": "Done\n", "created_at": "2015-12-14 07:03:17", "user": 2575714, "id": 164363201}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164373481", "text": "Thank you for your work! I merged this.\n", "created_at": "2015-12-14 08:07:12", "user": 12301, "id": 164373481}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164519055", "text": "@hsbt, @eregon: Good \"catch\" on `e_error_bytes&.dup.force_encoding`. I was also expecting that to be working and strongly believe it should. I opened https://bugs.ruby-lang.org/issues/11816\n", "created_at": "2015-12-14 18:31:17", "user": 33770, "id": 164519055}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I changed a buffer of erb from String to Array.\nI guess calling `Array#join` once is faster than calling `#to_s` N times.\n## before\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      4.365\n```\n## after\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      4.269\n```\n", "labels": [], "number": 1143, "updated_at": "2015-12-20 06:41:19", "user": 3138447, "closed_at": "2015-12-15 07:21:13", "id": 121912819, "title": "Render erb with array buffer", "url": "https://api.github.com/repos/ruby/ruby/issues/1143", "created_at": "2015-12-13 10:51:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164251661", "text": "I got approvement of seki. I will merge this after testing.\n", "created_at": "2015-12-13 11:50:42", "user": 12301, "id": 164251661}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164251701", "text": "@k0kubun Our travis is sometimes fragile. If you got build failure with another reason on travis. Please ping me. I will restart build process. Thanks.\n", "created_at": "2015-12-13 11:51:57", "user": 12301, "id": 164251701}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164251743", "text": "I see. I'll ping you next time.\n", "created_at": "2015-12-13 11:53:03", "user": 3138447, "id": 164251743}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164253384", "text": "@hsbt Build failed only for gcc on linux.\n", "created_at": "2015-12-13 12:24:10", "user": 3138447, "id": 164253384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164669419", "text": "I confirmed to recover travis status. I merged this. Thank you!\n", "created_at": "2015-12-15 07:23:38", "user": 12301, "id": 164669419}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164673804", "text": "Thank you for merging!\n", "created_at": "2015-12-15 07:36:29", "user": 3138447, "id": 164673804}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/166070969", "text": "this pull request is reverted at https://github.com/ruby/ruby/commit/0516a3378f03e8563350b8c4fe94ac3f9e9c9f75\n", "created_at": "2015-12-20 06:41:19", "user": 12301, "id": 166070969}], "assignees": [33682, 33682], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I fixed regexp of scanner in erb for performance.\n## before\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      4.381\n```\n## after\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      4.177\n```\n", "labels": [], "number": 1144, "updated_at": "2015-12-15 03:24:43", "user": 3138447, "closed_at": "2015-12-15 03:21:07", "id": 121913033, "title": "Simplify regexp to optimize erb scanner", "url": "https://api.github.com/repos/ruby/ruby/issues/1144", "created_at": "2015-12-13 10:59:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164251632", "text": "Thank you for your optimization suggestion. I got approvement from seki. I will merge this :octocat: \n", "created_at": "2015-12-13 11:50:14", "user": 12301, "id": 164251632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164251714", "text": "Thank you! :octocat: \n", "created_at": "2015-12-13 11:52:12", "user": 3138447, "id": 164251714}], "assignees": [33682, 33682], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://twitter.com/knu/status/676009662655934465\n", "labels": [], "number": 1145, "updated_at": "2015-12-13 14:51:23", "user": 16700, "closed_at": "2015-12-13 14:51:22", "id": 121916444, "title": "Feature/string valid encoding encoding", "url": "https://api.github.com/repos/ruby/ruby/issues/1145", "created_at": "2015-12-13 12:24:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is much faster version of https://github.com/ruby/ruby/pull/1144.\nWith this patch, you can reduce number of times to call `StringScanner#scan`.\n## before\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      0.955\n```\n## after\n\n```\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      0.911\n```\n", "labels": [], "number": 1146, "updated_at": "2017-05-25 12:25:20", "user": 3138447, "closed_at": "2017-05-25 12:25:13", "id": 121922570, "title": "Scan from start to end in erb scanner", "url": "https://api.github.com/repos/ruby/ruby/issues/1146", "created_at": "2015-12-13 14:37:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303997966", "text": "On current trunk, effects are following:\r\n\r\n### before\r\n```\r\napp_erb 0.717\r\n```\r\n\r\n### after\r\n```\r\napp_erb 0.701\r\n```\r\n\r\nI don't think it's worth merging considering maintenance cost. I reject this by myself.", "created_at": "2017-05-25 12:25:13", "user": 3138447, "id": 303997966}], "assignees": [33682, 33682, 3138447], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since compiled script has magic comment for encoding, `ERB#result` will have valid encoding without calling `force_encoding`.\n## before\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      0.891\n```\n## after\n\n```\n$ make benchmark-each COMPARE_RUBY= ITEM=bm_app_erb\nbenchmark results:\nExecution time (sec)\nname    built-ruby\napp_erb      0.863\n```\n", "labels": [], "number": 1147, "updated_at": "2017-05-26 12:13:11", "user": 3138447, "closed_at": "2017-05-26 12:13:03", "id": 121953291, "title": "Skip force_encoding in compiled code of erb", "url": "https://api.github.com/repos/ruby/ruby/issues/1147", "created_at": "2015-12-13 23:48:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164314546", "text": "@k0kubun Travis fail is another issue probably. see http://rubyci.s3.amazonaws.com/osx1011/ruby-trunk/log/20151213T234500Z.fail.html.gz\n\nI will notice you when `test_option.rb` is fixed. Please rebase trunk branch at it time.\n", "created_at": "2015-12-14 00:33:11", "user": 12301, "id": 164314546}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/164315203", "text": "> Travis fail is another issue probably.\n\nI see.\n\n> I will notice you when test_option.rb is fixed. Please rebase trunk branch at it time.\n\nI'll rebase after the fix and your notice.\n", "created_at": "2015-12-14 00:43:11", "user": 3138447, "id": 164315203}], "assignees": [33682, 33682, 3138447], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In spite of `proxy_uri.userinfo` has username and password for authenticated proxy, `open_http` method of `open-uri.rb` ignores it. Actually, lots of softwares expect this value as a credential for authenticated proxy.\n", "labels": [], "number": 1148, "updated_at": "2016-03-30 00:46:40", "user": 15647722, "closed_at": "2016-03-30 00:46:40", "id": 122076148, "title": "Use  `userinfo` for authenticated proxy", "url": "https://api.github.com/repos/ruby/ruby/issues/1148", "created_at": "2015-12-14 16:18:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/200847407", "text": "+1 how can we get this merged?\n", "created_at": "2016-03-24 13:56:35", "user": 12317, "id": 200847407}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/200864144", "text": "@SokichiFujita Can you add testcase of this change?\n", "created_at": "2016-03-24 14:34:01", "user": 12301, "id": 200864144}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1149, "updated_at": "2015-12-15 02:56:23", "user": 3209502, "closed_at": "2015-12-15 02:56:23", "id": 122096118, "title": "Fixed typo in zlib", "url": "https://api.github.com/repos/ruby/ruby/issues/1149", "created_at": "2015-12-14 17:58:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While trying to find the exact default regexp for `URI.escape`, I was unable to find the constant mentioned in the documentation. \n\nAfter some digging, I found that the default is actually set via `URI::DEFAULT_PARSER.regexp[:UNSAFE]` which is then set as a higher level constant, `URI::UNSAFE`. \n\nThere does not appear to be a `URI::REGEXP::UNSAFE` anymore. \n", "labels": [], "number": 1150, "updated_at": "2015-12-14 22:16:33", "user": 575489, "closed_at": "2015-12-14 22:16:33", "id": 122128469, "title": "Update comment about default constant", "url": "https://api.github.com/repos/ruby/ruby/issues/1150", "created_at": "2015-12-14 20:50:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While trying to find the exact default regexp for `URI.escape`, I was unable to find the constant mentioned in the documentation. \n\nAfter some digging, I found that the default is actually set via `URI::DEFAULT_PARSER.regexp[:UNSAFE]` which is then set as a higher level constant, `URI::UNSAFE`. \n\nThere does not appear to be a `URI::REGEXP::UNSAFE` anymore. \n\nEDIT: Closed / reopened to trigger Travis build. There were errors the first time.\n", "labels": [], "number": 1151, "updated_at": "2016-11-08 19:18:29", "user": 575489, "closed_at": "2016-11-08 11:57:51", "id": 122144511, "title": "Update comment about default constant", "url": "https://api.github.com/repos/ruby/ruby/issues/1151", "created_at": "2015-12-14 22:18:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/259231903", "text": "@dtakahas Confirmed. Thanks!\n", "created_at": "2016-11-08 19:18:29", "user": 11493, "id": 259231903}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1152, "updated_at": "2015-12-15 17:54:39", "user": 1507561, "closed_at": "2015-12-15 02:57:15", "id": 122174203, "title": "fix code block on URI::decode_www_form example", "url": "https://api.github.com/repos/ruby/ruby/issues/1152", "created_at": "2015-12-15 01:52:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a double word typo, 'in'.\n", "labels": [], "number": 1153, "updated_at": "2015-12-15 15:40:35", "user": 2782858, "closed_at": "2015-12-15 15:40:35", "id": 122276314, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1153", "created_at": "2015-12-15 13:49:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Woops was by mistake.\n", "labels": [], "number": 1154, "updated_at": "2015-12-16 09:19:49", "user": 1622878, "closed_at": "2015-12-16 09:18:20", "id": 122460434, "title": "pull request by mistake", "url": "https://api.github.com/repos/ruby/ruby/issues/1154", "created_at": "2015-12-16 09:18:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\nSet['a','b','c'].collect!(&:upcase) => #<Set: {\"A\", \"B\", \"C\"}>\nSet['a','b','c'].collect(&:upcase) => [\"A\", \"B\", \"C\"]\n```\n\nThis pull request fixes inconsistency, so `Set#collect` method returns `Set` \n\n``` ruby\nSet['a','b','c'].collect(&:upcase) => #<Set: {\"A\", \"B\", \"C\"}>\n```\n", "labels": [], "number": 1155, "updated_at": "2015-12-18 08:05:01", "user": 991265, "closed_at": "2015-12-18 08:05:01", "id": 122519461, "title": "Implement Set#collect method, so it return Set instead of Array", "url": "https://api.github.com/repos/ruby/ruby/issues/1155", "created_at": "2015-12-16 14:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165140748", "text": "I really wish we had one of `map` and `collect` be covariant (i.e. return the type of the receiver when possible), but only `Matrix` does that and Matz [doesn't like it](https://bugs.ruby-lang.org/issues/2832)\n", "created_at": "2015-12-16 15:24:36", "user": 33770, "id": 165140748}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165376449", "text": "Could you clarify `Set#collect!` returns `Set` but `Set#collect` returns `Array` and this is by design?\n", "created_at": "2015-12-17 07:54:40", "user": 991265, "id": 165376449}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165385697", "text": "@bolshakov \n\n`collect` is `Enumerable`'s method which always returns `Array` intsance, it's stated in docs.\n`collect!` is a collection-specific method so it returns collection's class instance. we've got `Array#collect!` which returns an `Array` and `Set#collect!` which returns a `Set`.\n\nSo where's inconcistency? I understand your concern but changing `Enumerable`'s method behavior is inconsistency as it is.\n", "created_at": "2015-12-17 08:47:41", "user": 3194530, "id": 165385697}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From example description it's not obvious that `\"hello\"` object should be the same(meaning the same `object_id`). When I first saw this example I dumped `[\"hello\", \"hello\"]` and got different stream. \nI think that it would make sense to clarify that \"hello\" object should be the same.  \n", "labels": [], "number": 1156, "updated_at": "2016-01-05 17:35:35", "user": 1541059, "closed_at": "2016-01-05 02:47:51", "id": 122558348, "title": "[ci skip] Clarify object references example", "url": "https://api.github.com/repos/ruby/ruby/issues/1156", "created_at": "2015-12-16 17:17:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a double word typo, 'that'.\n", "labels": [], "number": 1157, "updated_at": "2015-12-18 00:45:23", "user": 2782858, "closed_at": "2015-12-18 00:45:23", "id": 122645433, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1157", "created_at": "2015-12-17 02:06:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165626017", "text": "Thanks always!\n", "created_at": "2015-12-18 00:45:01", "user": 12301, "id": 165626017}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1158, "updated_at": "2015-12-17 09:42:04", "user": 1928523, "closed_at": "2015-12-17 09:41:59", "id": 122697691, "title": "Fix typos", "url": "https://api.github.com/repos/ruby/ruby/issues/1158", "created_at": "2015-12-17 09:41:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1159, "updated_at": "2015-12-18 00:43:16", "user": 1928523, "closed_at": "2015-12-18 00:43:16", "id": 122698012, "title": "[ci skip] Fix typos", "url": "https://api.github.com/repos/ruby/ruby/issues/1159", "created_at": "2015-12-17 09:43:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This option allows for parsing some CSV input which contains unescaped double quotes within fields, in violation of RFC 4180. The option is off by default.\n", "labels": [], "number": 1160, "updated_at": "2016-01-01 12:46:47", "user": 1455427, "closed_at": "2016-01-01 12:46:47", "id": 122854212, "title": "CSV: liberal_parsing option", "url": "https://api.github.com/repos/ruby/ruby/issues/1160", "created_at": "2015-12-18 00:49:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165630224", "text": "It doesn't look to me like the `TestSocket#test_accept_loop_with_unix` failures are related to my commit.\n", "created_at": "2015-12-18 01:13:19", "user": 1455427, "id": 165630224}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168304643", "text": "merged at https://github.com/ruby/ruby/commit/f18f940802752fb8997164d4440c488fb1396f35\n", "created_at": "2016-01-01 12:46:44", "user": 12301, "id": 168304643}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a double word typo, 'at'.\n", "labels": [], "number": 1161, "updated_at": "2015-12-19 05:24:21", "user": 2782858, "closed_at": "2015-12-19 05:24:21", "id": 123021800, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1161", "created_at": "2015-12-18 20:34:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a typo, replacing 'with with' with 'with the'.\n", "labels": [], "number": 1162, "updated_at": "2015-12-19 05:28:24", "user": 2782858, "closed_at": "2015-12-19 05:28:24", "id": 123051451, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1162", "created_at": "2015-12-19 01:16:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/165946804", "text": "LGTM\n", "created_at": "2015-12-19 04:33:16", "user": 13315, "id": 165946804}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/webrick/utils.rb (WEBrick::Utils::TimeoutHandler#watcher):\n  make watcher thread restartable.\n- lib/webrick/utils.rb (WEBrick::Utils::TimeoutHandler#terminate):\n  new method to terminate watcher thread.\n- test/lib/leakchecker.rb (LeakChecker#find_threads): revert\n  r46941.\n", "labels": [], "number": 1163, "updated_at": "2016-01-05 06:09:40", "user": 16700, "closed_at": "2016-01-05 06:09:40", "id": 123083732, "title": "leakchecker.rb: remove temporary measure", "url": "https://api.github.com/repos/ruby/ruby/issues/1163", "created_at": "2015-12-19 12:41:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As commented in https://github.com/ruby/ruby/pull/156#issuecomment-7680054, I rewrote `CGI.escapeHTML` in C, which is used by `ERB::Util#html_escape`.\nSince escaping HTML is expensive in rendering a template, I want it to be faster.\nFor now, I optimized it only for strings whose encoding is ASCII-compatible.\n\nWith this benchmark https://gist.github.com/k0kubun/b6af6062bc876190e280, it's about 7 times faster than original implementation in escaping html.\n\n```\n$ ruby bench_escape_html.rb\nCalculating -------------------------------------\n              before    11.448k i/100ms\n               after    31.189k i/100ms\n-------------------------------------------------\n              before    216.403k (± 7.0%) i/s -      2.152M\n               after      1.637M (±10.0%) i/s -     16.125M\n\nComparison:\n               after:  1637408.5 i/s\n              before:   216403.5 i/s - 7.57x slower\n```\n", "labels": [], "number": 1164, "updated_at": "2015-12-24 16:33:22", "user": 3138447, "closed_at": "2015-12-20 11:55:53", "id": 123153750, "title": "Optimize CGI.escapeHTML for ASCII-compatible encodings", "url": "https://api.github.com/repos/ruby/ruby/issues/1164", "created_at": "2015-12-20 10:45:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167119306", "text": "How much is the final performance gain after fixing the return value not being duped when no replacement takes place?\n", "created_at": "2015-12-24 14:39:42", "user": 10236, "id": 167119306}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167128115", "text": "You can check performance gain with this benchmark https://gist.github.com/k0kubun/8e1c7efb1e29991e1382.\n\nThis is the result of ruby compiled from latest revision https://github.com/ruby/ruby/commit/b58b970db5156766d6e19606d79afc68e4c2df7c.\n\n```\n$ ruby bench_escape.rb \"'&\\\"<>\"\nEscape: '&\"<>\nCalculating -------------------------------------\n              before    15.457k i/100ms\n               after    63.931k i/100ms\n-------------------------------------------------\n              before    199.975k (± 5.1%) i/s -      1.005M\n               after      1.453M (± 5.8%) i/s -      7.288M\n\nComparison:\n               after:  1453098.6 i/s\n              before:   199974.8 i/s - 7.27x slower\n\n$ ruby bench_escape.rb \"hello world\"\nEscape: hello world\nCalculating -------------------------------------\n              before    56.973k i/100ms\n               after   100.344k i/100ms\n-------------------------------------------------\n              before      1.474M (± 6.1%) i/s -      7.350M\n               after      4.419M (± 7.3%) i/s -     21.975M\n\nComparison:\n               after:  4419281.2 i/s\n              before:  1473860.3 i/s - 3.00x slower\n```\n", "created_at": "2015-12-24 15:46:04", "user": 3138447, "id": 167128115}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167133488", "text": "Thanks.  So, the new implementation is 3x faster even in the worst cases.  Great job!\n", "created_at": "2015-12-24 16:33:21", "user": 10236, "id": 167133488}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix NotImplementedError typo\n", "labels": [], "number": 1165, "updated_at": "2015-12-21 01:19:21", "user": 45967, "closed_at": "2015-12-21 01:19:21", "id": 123166836, "title": "NotImplementedError typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1165", "created_at": "2015-12-20 15:24:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I fixed `CGI.escapeHTML` https://github.com/ruby/ruby/pull/1164 to preserve original state of `tainted?` and `frozen?`.\n\nref: https://bugs.ruby-lang.org/issues/11855\n", "labels": [], "number": 1166, "updated_at": "2015-12-21 23:08:09", "user": 3138447, "closed_at": "2015-12-21 20:40:52", "id": 123293335, "title": "Preserve original state for tainted and frozen", "url": "https://api.github.com/repos/ruby/ruby/issues/1166", "created_at": "2015-12-21 14:55:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added HTTP 451 Status Code.\nMore details in https://en.wikipedia.org/wiki/HTTP_451\n", "labels": [], "number": 1167, "updated_at": "2015-12-31 03:50:18", "user": 6417144, "closed_at": "2015-12-30 11:46:19", "id": 123465203, "title": "Add HTTP 451 Status Code", "url": "https://api.github.com/repos/ruby/ruby/issues/1167", "created_at": "2015-12-22 11:34:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Simplifies code, removes redundant allocations.\n", "labels": [], "number": 1168, "updated_at": "2017-08-28 07:55:05", "user": 3194530, "closed_at": "2017-08-28 07:55:05", "id": 123488252, "title": "lib/csv.rb: simplify & optimize reducing operations.", "url": "https://api.github.com/repos/ruby/ruby/issues/1168", "created_at": "2015-12-22 14:14:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172691380", "text": "Can you show benchmark results?\n", "created_at": "2016-01-19 00:25:50", "user": 12301, "id": 172691380}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes a typo, 'here'.\n", "labels": [], "number": 1169, "updated_at": "2015-12-22 17:19:30", "user": 2782858, "closed_at": "2015-12-22 17:19:30", "id": 123521209, "title": "Fix typo in contributing docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1169", "created_at": "2015-12-22 17:15:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "More detail here https://bugs.ruby-lang.org/issues/11865\n", "labels": [], "number": 1170, "updated_at": "2017-05-16 09:18:11", "user": 363292, "closed_at": "2017-05-16 09:18:11", "id": 123612781, "title": "Issue #11865, lib/csv.rb Added attribute @line.", "url": "https://api.github.com/repos/ruby/ruby/issues/1170", "created_at": "2015-12-23 07:16:18", "comments": [], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1171, "updated_at": "2016-01-13 02:04:33", "user": 16700, "closed_at": "2016-01-13 02:04:33", "id": 123626836, "title": "get rid of unknown error on travis-ci", "url": "https://api.github.com/repos/ruby/ruby/issues/1171", "created_at": "2015-12-23 09:25:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[![2015-12-27 04 00 22](https://cloud.githubusercontent.com/assets/9990676/12007768/740e288c-ac4e-11e5-9415-7dc01615943c.png)](https://github.com/ruby/ruby/blob/trunk/addr2line.c#LC643)\n\nI found many place use `NUL` instead of `nul` in some annotation, `NUL` is more straightforward\n", "labels": [], "number": 1172, "updated_at": "2015-12-28 18:06:12", "user": 9990676, "closed_at": "2015-12-27 00:35:47", "id": 123945858, "title": "`nul` should be uppercase.", "url": "https://api.github.com/repos/ruby/ruby/issues/1172", "created_at": "2015-12-26 20:03:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test cases are used by string.c comments as a reference.\n", "labels": [], "number": 1173, "updated_at": "2015-12-27 02:48:22", "user": 22629, "closed_at": "2015-12-27 02:48:22", "id": 123956021, "title": "Add test for String#insert.", "url": "https://api.github.com/repos/ruby/ruby/issues/1173", "created_at": "2015-12-27 01:38:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test cases are used from string.c ruby-doc comments.\n", "labels": [], "number": 1174, "updated_at": "2015-12-27 02:51:26", "user": 22629, "closed_at": "2015-12-27 02:51:26", "id": 123956862, "title": "Add tests for String#lstrip and rstrip.", "url": "https://api.github.com/repos/ruby/ruby/issues/1174", "created_at": "2015-12-27 02:21:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It looks like dropped bang.\n", "labels": [], "number": 1175, "updated_at": "2015-12-27 09:08:48", "user": 22629, "closed_at": "2015-12-27 09:08:48", "id": 123957886, "title": "Fix ruby-doc comments for String#rstrip, lstrip", "url": "https://api.github.com/repos/ruby/ruby/issues/1175", "created_at": "2015-12-27 03:16:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Referred to tests for String#rstrip, lstrip and rdoc.\n", "labels": [], "number": 1176, "updated_at": "2015-12-28 00:19:46", "user": 22629, "closed_at": "2015-12-28 00:19:46", "id": 124001117, "title": "Add test for String#rstrip! and String#lstrip!", "url": "https://api.github.com/repos/ruby/ruby/issues/1176", "created_at": "2015-12-27 23:38:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1177, "updated_at": "2015-12-28 18:00:24", "user": 9990676, "closed_at": "2015-12-28 18:00:24", "id": 124099323, "title": "Add some assert to test_string.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1177", "created_at": "2015-12-28 17:58:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1178, "updated_at": "2016-01-18 03:05:08", "user": 9990676, "closed_at": "2016-01-18 03:05:08", "id": 124099505, "title": "Add some assert to test_string.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1178", "created_at": "2015-12-28 17:59:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://ruby-doc.org/core-2.3.0/String.html#method-i-chr\n", "labels": [], "number": 1179, "updated_at": "2016-01-05 12:45:06", "user": 22629, "closed_at": "2016-01-05 12:45:06", "id": 124143465, "title": "Add test for String#chr", "url": "https://api.github.com/repos/ruby/ruby/issues/1179", "created_at": "2015-12-29 00:05:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1180, "updated_at": "2015-12-30 07:47:05", "user": 11696134, "closed_at": "2015-12-30 07:38:57", "id": 124187934, "title": "format error", "url": "https://api.github.com/repos/ruby/ruby/issues/1180", "created_at": "2015-12-29 09:44:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167951629", "text": "It seems **breaking** the indentation.\n", "created_at": "2015-12-30 07:38:57", "user": 16700, "id": 167951629}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167953201", "text": "See https://github.com/ruby/ruby/blob/trunk/.editorconfig\n", "created_at": "2015-12-30 07:47:05", "user": 16700, "id": 167953201}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "http://ruby-doc.org/core-2.3.0/String.html#method-i-ord\n", "labels": [], "number": 1181, "updated_at": "2015-12-30 07:43:53", "user": 22629, "closed_at": "2015-12-30 07:43:53", "id": 124307621, "title": "Add test for String#ord", "url": "https://api.github.com/repos/ruby/ruby/issues/1181", "created_at": "2015-12-30 05:55:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `.?` syntax was changed to `&.` (the lonely operator) for the 2.3.0 final release.\n", "labels": [], "number": 1182, "updated_at": "2015-12-30 11:27:06", "user": 252295, "closed_at": "2015-12-30 11:26:40", "id": 124322224, "title": "Fix syntax for safe navigation operator documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1182", "created_at": "2015-12-30 09:06:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/167982685", "text": "Thank you for your patch. I merged and request backports.\n", "created_at": "2015-12-30 11:27:06", "user": 12301, "id": 167982685}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1183, "updated_at": "2016-01-01 12:45:52", "user": 33111, "closed_at": "2016-01-01 12:45:52", "id": 124355644, "title": "Fix a typo in doc/NEWS-2.3.0", "url": "https://api.github.com/repos/ruby/ruby/issues/1183", "created_at": "2015-12-30 14:32:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168304618", "text": "fixed at https://github.com/ruby/ruby/commit/b8057a5cda397886daea6398d0f4a035c2807a26\n", "created_at": "2016-01-01 12:45:48", "user": 12301, "id": 168304618}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello all,\n\nThis is my first time attempting to contribute to ruby, so apologies in advance if I've gotten anything wrong. \n\nI'm raising this PR against https://bugs.ruby-lang.org/issues/11818\n\nI understand that it has not been agreed / signed off to implement, but it looked like a good issue for me to get started with, and I can't imagine any downsides - implementing this Active Support extension natively will only do good things for performance in Rail's apps and any code that utilises this functionality.\n\nEdit: add some benchmarks.\n\nhttps://gist.github.com/dwfait/3909fe354d1e1d93c487\n\nThis contains the current active support implementation of these methods, against ruby compiled off this commit. Results:\n\n```\nCalculating -------------------------------------\n              before    54.946k i/100ms\n               after    82.690k i/100ms\n-------------------------------------------------\n              before    819.908k (± 7.0%) i/s -      4.121M\n               after      1.511M (± 5.3%) i/s -      7.607M\n\nComparison:\n               after:  1510890.7 i/s\n              before:   819907.8 i/s - 1.84x slower\n\nCalculating -------------------------------------\n             before!    96.747k i/100ms\n              after!   140.366k i/100ms\n-------------------------------------------------\n             before!      2.396M (± 3.8%) i/s -     11.997M\n              after!      7.170M (± 6.0%) i/s -     35.793M\n\nComparison:\n              after!:  7169815.8 i/s\n             before!:  2396031.5 i/s - 2.99x slower\n```\n", "labels": [], "number": 1184, "updated_at": "2016-11-08 19:29:44", "user": 1858956, "closed_at": "2016-11-08 19:26:16", "id": 124628069, "title": "hash.c: add compact and compact! methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1184", "created_at": "2016-01-03 04:33:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/259233941", "text": "@dwfait This feature was implemented as bbd58fa2b956a33c035dbddc83e9efbe07ee7276, and so will be available in 2.4. We're so sorry that we couldn't take your version, but we appreciate you contribution!\n", "created_at": "2016-11-08 19:26:16", "user": 11493, "id": 259233941}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Mutex#exclusive_unlock was deleted in 1.9.1\n", "labels": [], "number": 1185, "updated_at": "2016-01-20 02:23:41", "user": 60238, "closed_at": "2016-01-19 02:03:36", "id": 124645114, "title": "Remove Shell.debug_output_exclusive_unlock because Mutex#exclusive_unlock was already deleted.", "url": "https://api.github.com/repos/ruby/ruby/issues/1185", "created_at": "2016-01-03 12:01:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/168881494", "text": ":+1: Please commit yourself\n", "created_at": "2016-01-05 03:20:30", "user": 12301, "id": 168881494}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172697009", "text": ":+1: okay\n", "created_at": "2016-01-19 01:13:12", "user": 60238, "id": 172697009}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Enumerator::Lazy#chunk_while does not exist.\n", "labels": [], "number": 1186, "updated_at": "2016-11-05 15:47:37", "user": 60238, "closed_at": "2016-11-05 15:47:37", "id": 124652346, "title": "Add Enumerator::Lazy#chunk_while like Enumerator::Lazy#slice_when.", "url": "https://api.github.com/repos/ruby/ruby/issues/1186", "created_at": "2016-01-03 14:57:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Numeric#nonzero?\nhttp://ruby-doc.org/core-2.3.0/Numeric.html#method-i-nonzero-3F\n", "labels": [], "number": 1187, "updated_at": "2016-01-05 12:46:53", "user": 22629, "closed_at": "2016-01-05 12:32:55", "id": 124676372, "title": "Add test for Numeric#nonzero?", "url": "https://api.github.com/repos/ruby/ruby/issues/1187", "created_at": "2016-01-03 22:55:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is this intentionally changed?\n## Ruby 2.2.4\n\n``` ruby\n> require 'uri'; URI::Generic.build(host: 'localhost').to_s.encoding.to_s\n=> \"UTF-8\"\n```\n## Ruby 2.3.0\n\n``` ruby\n> require 'uri'; URI::Generic.build(host: 'localhost').to_s.encoding.to_s\n=> \"ASCII-8BIT\"\n```\n\nThis patch is compatible with Ruby 2.2.\n\nThanks.\n", "labels": [], "number": 1188, "updated_at": "2016-01-14 12:40:38", "user": 13203, "closed_at": "2016-01-14 11:20:20", "id": 125103492, "title": "URI::Generic#to_s encoding incompatible", "url": "https://api.github.com/repos/ruby/ruby/issues/1188", "created_at": "2016-01-06 03:32:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/169521386", "text": "What problem do you have by this difference?\n", "created_at": "2016-01-07 01:54:34", "user": 16700, "id": 169521386}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/169924140", "text": "Thank you for your reply. \n\nIn the deprecated method `URI.decode`, multi-byte characters will NOT be able to decode.\n\n## Example Code\n\nI expect that multi-byte characters ('日本語') will be decoded.\n\n``` ruby\nrequire 'uri'\n\np RUBY_VERSION\n\nstr = URI::Generic.build(scheme: 'http', host: 'localhost', path: '/test', query: 'language=日本語').to_s\n\np URI.decode(str)\n```\n\n### Run with Ruby 2.2.4\n\nIt's just as I expected.\n\n``` ruby\n\"2.2.4\"\n\"http://localhost/test?language=日本語\"\n```\n\n### Run with Ruby 2.3.0\n\nI did not expect this.\n\n``` ruby\n\"2.3.0\"\n\"http://localhost/test?language=\\xE6\\x97\\xA5\\xE6\\x9C\\xAC\\xE8\\xAA\\x9E\"\n```\n\nI prefer to use non-deprecated method, for example `CGI.unescape`, and so on.\n\nOn the one hand, I think the problem with this change is incompatibility with existing libraries.\n(e.g. https://github.com/carrierwaveuploader/carrierwave/blob/0.10-stable/lib/carrierwave/storage/fog.rb#L342)\n\nThanks.\n", "created_at": "2016-01-08 07:53:42", "user": 13203, "id": 169924140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/171128997", "text": "The encoding of escaped URI should be US-ASCII, and maybe URI.decode should set the resulted encoding as UTF-8. Is this solve the issue?\n\nAnyway fog uses the resulted string as filename. What your purpose of the decoded string?\n", "created_at": "2016-01-13 01:59:51", "user": 13423, "id": 171128997}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/171223881", "text": "That makes sense. It will be no problem if URI.decode should set the resulted encoding as UTF-8.\n", "created_at": "2016-01-13 09:15:25", "user": 13203, "id": 171223881}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/171492297", "text": "@nurse May I close this PR?\n", "created_at": "2016-01-14 01:20:36", "user": 13203, "id": 171492297}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/171619338", "text": "After some additional thought, I merged it to backport 2.3.\ntrunk will be changed described above.\n", "created_at": "2016-01-14 11:36:12", "user": 13423, "id": 171619338}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/171633494", "text": "Appreciate it, many thanks.\n", "created_at": "2016-01-14 12:40:33", "user": 13203, "id": 171633494}], "assignees": [13423, 13423], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[ci skip]\n", "labels": [], "number": 1189, "updated_at": "2016-01-09 16:25:10", "user": 3020626, "closed_at": "2016-01-09 14:15:55", "id": 125712362, "title": "Add missing variables to documentation examples", "url": "https://api.github.com/repos/ruby/ruby/issues/1189", "created_at": "2016-01-08 23:02:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170151486", "text": "cc @zzak \n", "created_at": "2016-01-08 23:02:46", "user": 3020626, "id": 170151486}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The test cases are referred from ruby-doc comments.\nhttp://ruby-doc.org/core-2.3.0/Hash.html#method-c-try_convert \n", "labels": [], "number": 1190, "updated_at": "2016-01-09 14:19:42", "user": 22629, "closed_at": "2016-01-09 14:19:42", "id": 125743602, "title": "Add test for Hash.try_convert", "url": "https://api.github.com/repos/ruby/ruby/issues/1190", "created_at": "2016-01-09 07:20:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- compile.c (compile_massign_lhs): move splat flag in massign lhs.\n- vm_args.c (vm_caller_setup_arg_splat): splat lhs before rhs for\n  aset.  [ruby-core:72777] [Bug #11970]\n", "labels": [], "number": 1191, "updated_at": "2016-01-10 12:00:19", "user": 16700, "closed_at": "2016-01-10 12:00:19", "id": 125761234, "title": "fix lhs splat in massign", "url": "https://api.github.com/repos/ruby/ruby/issues/1191", "created_at": "2016-01-09 14:20:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Revision 53493 on trunk should be backported into ruby_2_3 branch.\n", "labels": [], "number": 1192, "updated_at": "2016-01-10 16:35:36", "user": 3959, "closed_at": "2016-01-10 16:35:36", "id": 125829717, "title": "Backport 53493", "url": "https://api.github.com/repos/ruby/ruby/issues/1192", "created_at": "2016-01-10 16:35:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170365757", "text": "Oh, I've took a mistake to create this pull-request.\n", "created_at": "2016-01-10 16:35:36", "user": 3959, "id": 170365757}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Revision 53493 on trunk should be backported into ruby_2_3 branch.\n", "labels": [], "number": 1193, "updated_at": "2016-01-12 08:27:10", "user": 3959, "closed_at": "2016-01-12 08:27:06", "id": 125830090, "title": "Backport 53493", "url": "https://api.github.com/repos/ruby/ruby/issues/1193", "created_at": "2016-01-10 16:42:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170835990", "text": "This is fixed in r53502.\n", "created_at": "2016-01-12 08:27:06", "user": 3959, "id": 170835990}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes typo. repeated English article(s).\n", "labels": [], "number": 1194, "updated_at": "2016-01-12 17:47:37", "user": 3052342, "closed_at": "2016-01-12 15:37:41", "id": 126118890, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1194", "created_at": "2016-01-12 07:46:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170954788", "text": "Please report the typo in rubygems to the upstream.\n", "created_at": "2016-01-12 15:52:43", "user": 16700, "id": 170954788}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170989664", "text": "I got it.  :smile: Thanks!\n", "created_at": "2016-01-12 17:47:37", "user": 3052342, "id": 170989664}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "experimental\n", "labels": [], "number": 1195, "updated_at": "2016-01-13 09:29:57", "user": 13423, "closed_at": "2016-01-13 09:29:54", "id": 126228356, "title": "try sudo:false on travis", "url": "https://api.github.com/repos/ruby/ruby/issues/1195", "created_at": "2016-01-12 17:19:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "512-bit DH keys are severely weak and have been implicated in recent attacks:\n\nhttps://weakdh.org/\n", "labels": [], "number": 1196, "updated_at": "2016-01-14 06:09:16", "user": 797, "closed_at": "2016-01-14 06:09:16", "id": 126230542, "title": "Remove 512-bit DH group", "url": "https://api.github.com/repos/ruby/ruby/issues/1196", "created_at": "2016-01-12 17:30:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170984083", "text": "Redmine issue here:\n\nhttps://bugs.ruby-lang.org/issues/11968\n", "created_at": "2016-01-12 17:31:49", "user": 797, "id": 170984083}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Run travis for ruby/openssl#44 on ruby/ruby\n", "labels": [], "number": 1197, "updated_at": "2016-01-12 18:01:17", "user": 277819, "closed_at": "2016-01-12 18:01:09", "id": 126235653, "title": "Remove 512-bit DH group from OpenSSL", "url": "https://api.github.com/repos/ruby/ruby/issues/1197", "created_at": "2016-01-12 17:52:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/170995501", "text": "Whoops!\n", "created_at": "2016-01-12 18:01:15", "user": 277819, "id": 170995501}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The values are in fact key/value pairs. The values alone are not very useful...\n", "labels": [], "number": 1198, "updated_at": "2016-09-25 09:51:04", "user": 1246544, "closed_at": "2016-09-25 09:51:03", "id": 126413797, "title": "Win32::Registry#values: Return hash instead of array", "url": "https://api.github.com/repos/ruby/ruby/issues/1198", "created_at": "2016-01-13 13:04:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172179616", "text": "Doesn't it make a hash from `key` to `type`, not `value`?\nIt doesn't feel a good idea since not only backward compatibility, also that your `values` differs from `values` methods of other classes.\nDon't you have any other candidates?\n", "created_at": "2016-01-16 10:18:40", "user": 16700, "id": 172179616}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172299349", "text": "Oops, it still returns types.\n", "created_at": "2016-01-17 08:06:08", "user": 1246544, "id": 172299349}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- string.c (sym_match_m): delegate to String#match but not\n  String#=~.  [ruby-core:72864] [Bug #11991]\n", "labels": [], "number": 1199, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 126815852, "title": "string.c: Symbol#match", "url": "https://api.github.com/repos/ruby/ruby/issues/1199", "created_at": "2016-01-15 06:32:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that for arrays of literals, `.eql?` was about 37 times slower than `==`. After some digging, I noticed that `==` on an array used an exit-early optimisation comparing the elements as `VALUE`s first before dropping into invoking `==` on each element.\n\nBenchmark for array of fixnums (with a build with both old and this new implementation):\nhttps://gist.github.com/dwfait/c1f211c0d9201d087cc3\n\nFor arrays of objects, we get a tiny performance increase because of the pointer arithmetic way of element lookup (which is how `==` is implemented), and storing length instead of accessing the array struct for it each iteration. Small enough to possible be standard deviation, but seems to be consistently faster.\n\nBenchmark with objects:\nhttps://gist.github.com/dwfait/780e34f4916dd0aa5aeb\n\nIf anyone would like me to provide any other benchmarks, I'd happily provide them as soon as I get time. \n\nEdit:\nAnother (quite interesting) benchmark: https://gist.github.com/dwfait/4f4c4517dc0d0701e164\n\n`.eql?` on an array of literals is now quite a bit faster than calling `==`. I know the semantics aren't quite the same, but can be used for the same effect in most use cases.\n", "labels": [], "number": 1200, "updated_at": "2016-01-16 10:42:53", "user": 1858956, "closed_at": "2016-01-16 02:56:02", "id": 126920830, "title": "Optimise Array#eql?", "url": "https://api.github.com/repos/ruby/ruby/issues/1200", "created_at": "2016-01-15 17:41:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172149324", "text": "This makes `[Float::NAN].eql?([Float::NAN])` `true`.\n", "created_at": "2016-01-16 02:56:02", "user": 16700, "id": 172149324}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172151998", "text": "@nobu Shouldn't there be a test for that?  When this PR passed the CI build, it would be barely possible to notice the change might break anything.\n", "created_at": "2016-01-16 03:46:22", "user": 10236, "id": 172151998}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172178686", "text": "@nobu, I'd like to discuss this a bit further if at all possible considering the following code:\n\n```\nFloat::NAN == Float::NAN\n=> false\n\n[Float::NAN] == [Float::NAN]\n=> true\n```\n\nThere seems to be currently inconsistent behaviour between the array equality checkers, and this PR seems to bring them more in line. \n\nIf this is a bug in the `==` method on Array, I could look at possibly fixing it by removing the opitmisation that causes this from `==`?\n", "created_at": "2016-01-16 10:03:29", "user": 1858956, "id": 172178686}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172181140", "text": "I've been pointed to: https://bugs.ruby-lang.org/issues/7676.\n\nThere's also a response from Matz in https://bugs.ruby-lang.org/issues/1720 regarding the treatment by the system of 'NAN' to be undefined, which would allow optimisations like this, and this would be a documentation update issue rather than a bug. \n\nI could update the documentation for `eql?` to say that it does an object identity comparison first?\n", "created_at": "2016-01-16 10:25:55", "user": 1858956, "id": 172181140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172182002", "text": "OK, let's discuss this there.\n", "created_at": "2016-01-16 10:35:45", "user": 16700, "id": 172182002}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172182224", "text": "@nobu thanks. \n\nI've updated the documentation for rb_ary_eql in my branch: https://github.com/ruby/ruby/compare/trunk...dwfait:array_eql_optim?expand=1\n\nThis appears to be the agreed upon action for `==` as well for this optimisation if my interpretation of the tickets are correct.\n\nAre there any other edge cases you feel this PR would cause trouble with?\n", "created_at": "2016-01-16 10:42:52", "user": 1858956, "id": 172182224}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Extract test code for ENV#delete_if from ENV#reject_bang\n- Add a test case for ENV#reject_bang,delete_if\n- Extract test code for ENV#keep_if from ENV#select_bang\n- Add a test case for ENV#select_bang,keep_if\n", "labels": [], "number": 1201, "updated_at": "2016-01-17 05:42:53", "user": 22629, "closed_at": "2016-01-17 05:42:53", "id": 127073905, "title": "Add test cases for ENV#reject!, select!", "url": "https://api.github.com/repos/ruby/ruby/issues/1201", "created_at": "2016-01-17 04:29:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix the typo for single quote empty string `` ‘` in http://ruby-doc.org/core-2.3.0/String.html#method-i-split\n", "labels": [], "number": 1202, "updated_at": "2016-01-20 01:17:04", "user": 4976854, "closed_at": "2016-01-18 02:48:14", "id": 127140477, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1202", "created_at": "2016-01-18 01:59:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1203, "updated_at": "2016-01-18 03:21:18", "user": 829526, "closed_at": "2016-01-18 03:19:54", "id": 127146451, "title": "Update license year range to 2016", "url": "https://api.github.com/repos/ruby/ruby/issues/1203", "created_at": "2016-01-18 03:16:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/172415883", "text": "It's not necessary action for Convention de Berne.\n", "created_at": "2016-01-18 03:21:18", "user": 12301, "id": 172415883}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1204, "updated_at": "2016-01-21 08:35:45", "user": 44209, "closed_at": "2016-01-21 08:35:45", "id": 127158488, "title": "honor Marshal.load post proc value for TYPE_LINK", "url": "https://api.github.com/repos/ruby/ruby/issues/1204", "created_at": "2016-01-18 05:52:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes the whole thing where exceptions with more than 16 frames in their backtraces cause the irb prompt to appear on the same line as the last line of the backtrace.\n", "labels": [], "number": 1205, "updated_at": "2016-02-26 01:57:41", "user": 874635, "closed_at": "2016-02-26 01:57:41", "id": 127293819, "title": "lib/irb.rb: include trailing newline when >16 backtrace levels", "url": "https://api.github.com/repos/ruby/ruby/issues/1205", "created_at": "2016-01-18 19:19:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189000222", "text": "Ping... Any word on this?\n", "created_at": "2016-02-25 21:44:43", "user": 874635, "id": 189000222}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [592985, 191664]}, "text": "I previously opened this: https://github.com/ruby/ruby/pull/1200\n\nThis PR introduces similar performance improvements for 'immediate' (Fixnum, floats, etc..) values, whilst not changing behaviour for `Float::NAN` or objects with redefined `eql?` methods.\n\n_caveat:_ This does change behaviour if you monkey patch the `eql?` method for an immedate value class, but if you're doing that, I imagine Array#eql? is going to be low down on your list of problems.\n## Benchmarks\n\nMarked improvement for arrays of immediate values: https://gist.github.com/dwfait/da225dcc4687dcaff2a5\n\nNo apparent degradation of performance for arrays of objects / non-immediate values: https://gist.github.com/dwfait/9add4b6442897d68a2cd\n## Float::NAN\n\nAs mentioned, in this PR treatment of Float::NAN is as before:\n\n```\nirb(main):001:0> [Float::NAN].eql? [Float::NAN]\n=> false\n```\n\nHowever, I did not create a test for this, because Matz has stated comparison of NaN to NaN is undefined: https://bugs.ruby-lang.org/issues/1720\n\nI have however included a test which I believe addresses the core of that issue - of objects where `eql?` will return false, even to itself.\n", "labels": [], "number": 1206, "updated_at": "2018-02-23 03:07:06", "user": 1858956, "closed_at": "None", "id": 127297218, "title": "array.c: eql? identity check if immediate value", "url": "https://api.github.com/repos/ruby/ruby/issues/1206", "created_at": "2016-01-18 19:42:25", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "LoadError#path's rdoc is parsed as `rb_intern_const(\"path\")`.\n- http://docs.ruby-lang.org/en/2.3.0/LoadError.html\n", "labels": [], "number": 1207, "updated_at": "2016-01-21 07:54:54", "user": 60238, "closed_at": "2016-01-21 07:34:54", "id": 127856469, "title": "* lib/rdoc/parser/c.rb (RDoc#handle_attr): parse rb_intern_const correctly.", "url": "https://api.github.com/repos/ruby/ruby/issues/1207", "created_at": "2016-01-21 06:32:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173483800", "text": "The upstream is https://github.com/rdoc/rdoc.\n", "created_at": "2016-01-21 07:34:54", "user": 16700, "id": 173483800}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173485801", "text": "Whoops! I will make PR to upstream.\n", "created_at": "2016-01-21 07:46:29", "user": 60238, "id": 173485801}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "dump stack trace when assertion failed like as `rb_bug`.\n", "labels": [], "number": 1208, "updated_at": "2016-01-22 10:13:18", "user": 16700, "closed_at": "2016-01-22 10:13:18", "id": 127866609, "title": "Ruby assert", "url": "https://api.github.com/repos/ruby/ruby/issues/1208", "created_at": "2016-01-21 07:56:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add the test case when the '' and \" \" of next,next!,succ and succ!\n", "labels": [], "number": 1209, "updated_at": "2016-01-22 13:57:46", "user": 13010913, "closed_at": "2016-01-22 13:57:46", "id": 128133450, "title": "Add test case for String#next and String#succ.", "url": "https://api.github.com/repos/ruby/ruby/issues/1209", "created_at": "2016-01-22 11:09:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173917720", "text": "@K0mAtoru Thank you! Can you rebase this pull request with current master? We fixed appveyor configuration. Your test fail is caused by our miss configuration.\n", "created_at": "2016-01-22 13:17:23", "user": 12301, "id": 173917720}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173927355", "text": "@hsbt i see.\n", "created_at": "2016-01-22 13:57:38", "user": 13010913, "id": 173927355}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- common.mk (probes.dmyh): separate the dependency and the\n  command, get rid of weird VPATH behavior of nmake.\n", "labels": [], "number": 1210, "updated_at": "2016-01-22 13:26:18", "user": 16700, "closed_at": "2016-01-22 13:15:57", "id": 128134711, "title": "common.mk: probes.dmyh for nmake", "url": "https://api.github.com/repos/ruby/ruby/issues/1210", "created_at": "2016-01-22 11:17:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173917508", "text": "committed at 184c7e660d10055b599d596f48fb5e600a04bc35\n", "created_at": "2016-01-22 13:15:57", "user": 12301, "id": 173917508}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- common.mk (ext/rbconfig/sizeof/sizes.c): separate the dependency\n  with VPATH and the command, get rid of weird VPATH behavior of\n  nmake.\n", "labels": [], "number": 1211, "updated_at": "2016-01-22 12:30:17", "user": 16700, "closed_at": "2016-01-22 12:30:17", "id": 128144008, "title": "common.mk: source dependency for nmake", "url": "https://api.github.com/repos/ruby/ruby/issues/1211", "created_at": "2016-01-22 12:11:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- win32/configure.bat: add --with-libdir option for basename of\n  libdir.  on Windows it must be placed under exec_prefix always.\n", "labels": [], "number": 1212, "updated_at": "2016-01-22 14:28:06", "user": 16700, "closed_at": "2016-01-22 14:28:06", "id": 128159313, "title": "configure.bat: --with-libdir", "url": "https://api.github.com/repos/ruby/ruby/issues/1212", "created_at": "2016-01-22 13:43:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add the test case when the '' and \" \" of next, next!, succ and succ!\n", "labels": [], "number": 1213, "updated_at": "2016-01-25 00:39:01", "user": 13010913, "closed_at": "2016-01-25 00:39:01", "id": 128167095, "title": "Add test case for String#next and String#succ.", "url": "https://api.github.com/repos/ruby/ruby/issues/1213", "created_at": "2016-01-22 14:28:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173935755", "text": "You could re-run CI for #1209 by just `git push -f`.\n", "created_at": "2016-01-22 14:31:52", "user": 16700, "id": 173935755}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174098869", "text": "@nobu \noh, I get it.\nFrom the next it will do.\nThank you for your teaching :)\n", "created_at": "2016-01-23 00:40:22", "user": 13010913, "id": 174098869}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174193197", "text": "@hsbt \nThank you for your teaching.\nI fixed your poinig out.\n", "created_at": "2016-01-23 15:19:47", "user": 13010913, "id": 174193197}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After this commit the README shows Travis' badge in higher resolution (SVG).\n\nSee the screenshots below.\n## Before\n\n![ruby-badge-lowres](https://cloud.githubusercontent.com/assets/28908/12514731/094fc9ec-c125-11e5-8498-edb53bf1da0d.png)\n## After\n\n![ruby-badge-hires](https://cloud.githubusercontent.com/assets/28908/12514732/0a3b53da-c125-11e5-861e-e309e45d6d3b.png)\n\nNote the \"build passing\".\n", "labels": [], "number": 1214, "updated_at": "2016-01-23 02:43:13", "user": 28908, "closed_at": "2016-01-23 02:43:13", "id": 128180133, "title": "Show hires Travis badge on README", "url": "https://api.github.com/repos/ruby/ruby/issues/1214", "created_at": "2016-01-22 15:32:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A change has been introduced in \nhttps://github.com/ruby/ruby/pull/575 that was not\nproperly reflected in the doc.\n", "labels": [], "number": 1215, "updated_at": "2016-01-23 03:57:56", "user": 16653, "closed_at": "2016-01-23 02:29:46", "id": 128184041, "title": "Update documentation of CSV header converter", "url": "https://api.github.com/repos/ruby/ruby/issues/1215", "created_at": "2016-01-22 15:48:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/173984234", "text": "@jeg2 The change introduced in https://github.com/ruby/ruby/pull/575 made our CSV parsing fail for Ruby 2.2.X.\nI've updated the doc.\n", "created_at": "2016-01-22 17:24:02", "user": 16653, "id": 173984234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174022274", "text": "I approve of this change but am having trouble getting Subversion to work at the moment.  Could anyone with commit access please commit this for me?\n", "created_at": "2016-01-22 19:38:18", "user": 5639, "id": 174022274}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174126839", "text": "Thank you!\n", "created_at": "2016-01-23 03:57:56", "user": 5639, "id": 174126839}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The previous one was an old version that has since been update for better quality and devise support.\n\nHere's the diff:\n\n![image](https://cloud.githubusercontent.com/assets/65950/12525589/545cb216-c133-11e5-951f-edfd2611eeee.png)\n", "labels": [], "number": 1216, "updated_at": "2016-01-23 02:43:13", "user": 65950, "closed_at": "2016-01-23 02:43:13", "id": 128267707, "title": "Use SVG Travis badge over PNG", "url": "https://api.github.com/repos/ruby/ruby/issues/1216", "created_at": "2016-01-22 23:09:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- use same opt dir for libressl and zlib\n- without dbm, gdbm, tk\n", "labels": [], "number": 1217, "updated_at": "2016-01-23 13:27:17", "user": 16700, "closed_at": "2016-01-23 13:27:17", "id": 128288634, "title": "simplify appveyor.yml", "url": "https://api.github.com/repos/ruby/ruby/issues/1217", "created_at": "2016-01-23 03:01:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "dividing Array#keep_if test from Array#select! test.\n", "labels": [], "number": 1218, "updated_at": "2016-01-23 13:31:28", "user": 13010913, "closed_at": "2016-01-23 13:31:28", "id": 128328223, "title": "Add test for Array#keep_if", "url": "https://api.github.com/repos/ruby/ruby/issues/1218", "created_at": "2016-01-23 13:23:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The example was broken.\n\nBefore: `WEBrick::FileHandler`.\n\nAfter: `WEBrick::HTTPServlet::FileHandler`.\n", "labels": [], "number": 1219, "updated_at": "2016-01-25 00:32:56", "user": 586813, "closed_at": "2016-01-25 00:32:56", "id": 128390386, "title": "Fix documentation on WEBrick FileHandler", "url": "https://api.github.com/repos/ruby/ruby/issues/1219", "created_at": "2016-01-24 11:34:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y: `do` after cmdarg in parentheses should be `do_block`\n  and bound to the outer method.  [ruby-core:72482] [Bug #11873]\n", "labels": [], "number": 1220, "updated_at": "2016-09-21 04:48:46", "user": 16700, "closed_at": "2016-09-21 04:48:46", "id": 128486325, "title": "parse.y: do after cmdarg in paren", "url": "https://api.github.com/repos/ruby/ruby/issues/1220", "created_at": "2016-01-25 08:27:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I guess this never broke anything because there is a local variable page where it gets used.\n", "labels": [], "number": 1221, "updated_at": "2016-01-25 22:58:11", "user": 12464281, "closed_at": "2016-01-25 22:58:11", "id": 128549874, "title": "gc.c: Macro typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1221", "created_at": "2016-01-25 14:39:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1222, "updated_at": "2016-01-26 10:36:50", "user": 1211471, "closed_at": "2016-01-26 10:36:50", "id": 128603319, "title": "array: Substitute indexes -> indices in documentation for consistency", "url": "https://api.github.com/repos/ruby/ruby/issues/1222", "created_at": "2016-01-25 18:17:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174715728", "text": "Isn't word \"indices\" for mathematics or economics?\n", "created_at": "2016-01-25 22:59:16", "user": 16700, "id": 174715728}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174724242", "text": "@nobu I thought it was the plural for index, i.e. indices = { index, index } just like vertices = { vertex, vertex}.\n", "created_at": "2016-01-25 23:16:10", "user": 6254332, "id": 174724242}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/174875148", "text": "@nobu I've seen the term `indices` used widely in computer science, so I believe not. Also, this term is widely used in Ruby's documentation too.\n", "created_at": "2016-01-26 07:38:52", "user": 1211471, "id": 174875148}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- signal.c (rb_f_kill): should immediately deliver reserved\n  signals SIGILL and SIGFPE, ont only SIGSEGV and SIGBUS.\n", "labels": [], "number": 1223, "updated_at": "2016-01-26 04:09:12", "user": 16700, "closed_at": "2016-01-26 04:09:12", "id": 128711921, "title": "signal.c: reserved signals", "url": "https://api.github.com/repos/ruby/ruby/issues/1223", "created_at": "2016-01-26 03:19:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It Looks like different error.\n", "labels": [], "number": 1224, "updated_at": "2016-01-27 07:26:44", "user": 13203, "closed_at": "2016-01-27 07:26:23", "id": 128831197, "title": "[ci skip] Fix a Ruby-Doc comment for Array#dig", "url": "https://api.github.com/repos/ruby/ruby/issues/1224", "created_at": "2016-01-26 14:13:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[GH-523](https://github.com/ruby/ruby/pull/523) added default `basename` parameter, but didn't update the doc. This will fix the doc to be consistent with the code change.\n", "labels": [], "number": 1225, "updated_at": "2016-02-02 23:27:22", "user": 4976854, "closed_at": "2016-01-27 07:35:04", "id": 128966424, "title": "Fix doc with default value to be consistent with code change in GH-523", "url": "https://api.github.com/repos/ruby/ruby/issues/1225", "created_at": "2016-01-26 22:40:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The Enumerable methods drop_while and take_while uses 'arr' as the block parameter name.\n\n```\nenum.drop_while { |arr| block } -> array\nenum.take_while { |arr| block } -> array\n```\n\nThis gives the false impression that the block will receive some kind of array as argument, which is false unless the iteration is over an array of arrays or something like that. The simpler alternatives are 'obj', 'elt', or 'item'. I changed it to 'obj' because that's the one with more occurrences in the Enumerable documentation.\n\nPlease review, thank you.\n", "labels": [], "number": 1226, "updated_at": "2016-01-29 07:17:39", "user": 42930, "closed_at": "2016-01-29 07:17:39", "id": 129266783, "title": "Rename drop_while/take_while block parameter to obj", "url": "https://api.github.com/repos/ruby/ruby/issues/1226", "created_at": "2016-01-27 21:00:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is just a very simple cleanup to maintain consistency across the repository.\n\nBasically, there were two different code styles in class declarations with inheritance.\n\nFirst, **with** spaces between subclass and class:\n\n``` ruby\nclass A < B\nend\n```\n\nSecond, **without** spaces between subclass and class:\n\n``` ruby\nclass A<B\nend\n```\n\nThis pull request makes these declarations uniform with the first code style.\n", "labels": [], "number": 1227, "updated_at": "2016-10-07 05:19:50", "user": 15863692, "closed_at": "2016-10-07 05:19:50", "id": 129306835, "title": "Adjust spaces in class declarations with inheritance", "url": "https://api.github.com/repos/ruby/ruby/issues/1227", "created_at": "2016-01-28 00:00:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/socket/socket.c (sock_gethostname): support unlimited size\n  hostname.\n", "labels": [], "number": 1228, "updated_at": "2016-01-28 15:54:52", "user": 16700, "closed_at": "2016-01-28 15:54:51", "id": 129376176, "title": "socket.c: unlimited size hostname", "url": "https://api.github.com/repos/ruby/ruby/issues/1228", "created_at": "2016-01-28 08:19:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/erb.rb (ERB#def_method): insert def line just before the\n  first non-comment and non-empty line, not to leave duplicated\n  and stale magic comments.\n", "labels": [], "number": 1229, "updated_at": "2016-01-29 05:13:58", "user": 16700, "closed_at": "2016-01-29 05:13:58", "id": 129654571, "title": "erb.rb: improvement about magic comments", "url": "https://api.github.com/repos/ruby/ruby/issues/1229", "created_at": "2016-01-29 03:24:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Spelling mistakes - \noutputing > outputting\npublich > publish\n", "labels": [], "number": 1230, "updated_at": "2016-01-31 03:16:03", "user": 829526, "closed_at": "2016-01-31 03:16:03", "id": 130025970, "title": "* doc/standard_library.rdoc: fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1230", "created_at": "2016-01-30 19:10:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add lacking test for File#lstat.\n", "labels": [], "number": 1231, "updated_at": "2016-01-31 03:19:45", "user": 22629, "closed_at": "2016-01-31 03:19:45", "id": 130061367, "title": "Add lacking test for File#lstat.", "url": "https://api.github.com/repos/ruby/ruby/issues/1231", "created_at": "2016-01-31 01:29:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there,\n\nAn instance of `NullSocket` is stored in a `@sock` variable of a new `Net::FTP`, it also has a `#close` method (that obviously does nothing), but it is never called, because a wrapping `Net::FTP#close` checks that `@sock and not @sock.closed?` which crashes with `FTPConnectionError` because there is no method `#closed?` on `NullSocket`. This PR adds it and a test to verify that it works.\n\nBelow is the way to reproduce the error in the IRB. As you can see it's quite confusing, you'd expect `#closed?` not to raise an error, but return `true` instead.\n\n```\n>> ftp = Net::FTP.new\n=> #<Net::FTP:0x007f90c38075e0 @mon_owner=nil, @mon_count=0, @mon_mutex=#<Thread::Mutex:0x007f90c3807590>, @binary=true, @passive=true, @debug_mode=false, @resume=false, @sock=#<Net::FTP::NullSocket:0x007f90c3807568>, @logged_in=false, @open_timeout=nil, @read_timeout=60>\n>> ftp.close\nNet::FTPConnectionError: not connected\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/net/ftp.rb:1277:in `method_missing'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/net/ftp.rb:1168:in `close'\n    from (irb):6\n    from /usr/local/var/rbenv/versions/2.3.0/bin/irb:11:in `<main>'\n>> ftp.closed?\nNet::FTPConnectionError: not connected\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/net/ftp.rb:1277:in `method_missing'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/net/ftp.rb:1184:in `closed?'\n    from (irb):7\n    from /usr/local/var/rbenv/versions/2.3.0/bin/irb:11:in `<main>'\n```\n", "labels": [], "number": 1232, "updated_at": "2016-02-12 02:50:20", "user": 118353, "closed_at": "2016-02-12 02:50:20", "id": 130508969, "title": "net/ftp.rb: add NullSocket#closed? to fix closing not opened connection", "url": "https://api.github.com/repos/ruby/ruby/issues/1232", "created_at": "2016-02-01 22:45:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/178240528", "text": "Here's the tracker issue corresponding to this PR — https://bugs.ruby-lang.org/issues/12044\n", "created_at": "2016-02-01 22:53:17", "user": 118353, "id": 178240528}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- win32/win32.c (open_dir_handle): reuse the fullpath buffer\n  instead of allocating another buffer for copy.\n", "labels": [], "number": 1233, "updated_at": "2016-02-02 05:44:03", "user": 16700, "closed_at": "2016-02-02 05:44:03", "id": 130574284, "title": "win32.c: reuse fullpath buffer", "url": "https://api.github.com/repos/ruby/ruby/issues/1233", "created_at": "2016-02-02 04:50:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ripper.lex raises error for squiggly heredoc.\n\nreproduce code:\n\n``` console\n% ruby -v -rripper -e 'Ripper.lex(\"<<~EOS\\n  hi\\nEOS\")'\nruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]\n/usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:70:in `block in on_heredoc_dedent': undefined method `event' for #<Array:0x007fef29875238> (NoMethodError)\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:69:in `each'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:69:in `on_heredoc_dedent'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:61:in `parse'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:61:in `parse'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:55:in `lex'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:44:in `lex'\n    from -e:1:in `<main>'\n```\n", "labels": [], "number": 1234, "updated_at": "2016-02-03 00:27:18", "user": 167012, "closed_at": "2016-02-02 23:22:06", "id": 130767449, "title": "Fix Ripper.lex error in dedenting squiggly heredoc", "url": "https://api.github.com/repos/ruby/ruby/issues/1234", "created_at": "2016-02-02 18:11:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/178753512", "text": "Some libraries using `Ripper.lex`.\n\nFor example, rspec use `Ripper.lex`.\nhttps://github.com/rspec/rspec-core/blob/abecd1bc544e59c6c9c3d0ae1a09521582735ca2/lib/rspec/core/source.rb#L38\n\nfollowing RSpec spec exit without message, because of `Ripper.lex`.\n\n``` rb\ndescribe 'squiggly heredoc in spec' do\n  specify do\n    foo.\n    bar\n  end\n\n  BAR = <<~EOS\n    test\n  EOS\nend\n```\n\n```\nrspec foo_spec.rb\nF\n\n/usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:70:in `block in on_heredoc_dedent': undefined method `event' for #<Array:0x007fef5320a4c8> (NoMethodError)\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:69:in `each'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:69:in `on_heredoc_dedent'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:61:in `parse'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:61:in `parse'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:55:in `lex'\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/2.3.0/ripper/lexer.rb:44:in `lex'\n(略)\n    from /usr/local/var/rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/rspec-core-3.4.2/exe/rspec:4:in `<top (required)>'\n    from /usr/local/var/rbenv/versions/2.3.0/bin/rspec:23:in `load'\n    from /usr/local/var/rbenv/versions/2.3.0/bin/rspec:23:in `<main>'\n```\n", "created_at": "2016-02-02 18:48:48", "user": 167012, "id": 178753512}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1235, "updated_at": "2016-02-02 23:26:34", "user": 4976854, "closed_at": "2016-02-02 23:26:10", "id": 130850915, "title": "[ci skip] Fix typo on OpenSSL::PKey doc", "url": "https://api.github.com/repos/ruby/ruby/issues/1235", "created_at": "2016-02-02 23:20:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1236, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 130919706, "title": "Feature/12041 name error#initialize recevier", "url": "https://api.github.com/repos/ruby/ruby/issues/1236", "created_at": "2016-02-03 05:43:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- error.c (nometh_err_initialize): add private_call? parameter.\n- error.c (nometh_err_private_call_p): add private_call? method,\n  to tell if the exception raised in private form FCALL or VCALL.\n  [Feature #12043]\n- vm_eval.c (make_no_method_exception): append private_call?\n  argument.\n- vm_insnhelper.c (ci_missing_reason): copy FCALL flag.\n", "labels": [], "number": 1237, "updated_at": "2016-02-28 04:47:29", "user": 16700, "closed_at": "2016-02-28 04:46:34", "id": 130941377, "title": "NoMethodError#private_call?", "url": "https://api.github.com/repos/ruby/ruby/issues/1237", "created_at": "2016-02-03 07:39:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch makes `CGI.escape` 7x - 8x faster than current.\n\n`CGI.escape` is used by url helper of Rails.\nIf `CGI.escape` becomes faster, HTML rendering of Rails applications becomes faster.\n## Benchmark\n### before\n\nCGI.escape\n\n```\nirb(main):001:0> Benchmark.ips do |x|\nirb(main):002:1*     x.config(time: 15, warmup: 5)\nirb(main):003:1>   x.report(\"cgi_escape\")  { CGI.escape(\"'Stop!' said~Fred\") }\nirb(main):004:1>   end\nCalculating -------------------------------------\n          cgi_escape     8.791k i/100ms\n-------------------------------------------------\n          cgi_escape     96.828k (± 4.4%) i/s -      1.451M\n```\n\nRails url helper\n\n```\nirb(main):005:0> Benchmark.ips do |x|\nirb(main):006:1*     x.config(time: 15, warmup: 5)\nirb(main):007:1>   x.report(\"url_for\")  { app.users_path(foo: \"bar\", page: 1, per_page: 20, tags: [\"hoge\", \"fuga\"]) }\nirb(main):008:1>   end\nCalculating -------------------------------------\n             url_for     1.163k i/100ms\n-------------------------------------------------\n             url_for     11.879k (± 9.4%) i/s -    176.776k\n```\n### after\n\nCGI.escape\n\n```\nirb(main):004:0> Benchmark.ips do |x|\nirb(main):005:1*     x.config(time: 15, warmup: 5)\nirb(main):006:1>   x.report(\"cgi_escape\")  { CGI.escape(\"'Stop!' said~Fred\") }\nirb(main):007:1>   end\nCalculating -------------------------------------\n          cgi_escape    40.977k i/100ms\n-------------------------------------------------\n          cgi_escape    661.480k (± 5.9%) i/s -      9.916M\n```\n\nRails url helper\n\n```\nirb(main):008:0> Benchmark.ips do |x|\nirb(main):009:1*     x.config(time: 15, warmup: 5)\nirb(main):010:1>   x.report(\"url_for\")  { app.users_path(foo: \"bar\", page: 1, per_page: 20, tags: [\"hoge\", \"fuga\"]) }\nirb(main):011:1>   end\nCalculating -------------------------------------\n             url_for     1.586k i/100ms\n-------------------------------------------------\n             url_for     16.786k (± 5.8%) i/s -    252.174k\n```\n", "labels": [], "number": 1238, "updated_at": "2016-02-04 08:22:32", "user": 116996, "closed_at": "2016-02-04 03:39:39", "id": 131150857, "title": "Optimize CGI.escape performance by C ext", "url": "https://api.github.com/repos/ruby/ruby/issues/1238", "created_at": "2016-02-03 20:59:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179641630", "text": "You should probably document that `CGI.escape` (along with `CGI.escapeHTML`) now accepts a non-string object that responds to `to_str`, since while that is an improvement it is at the same time an incompatibility. For example, it (silently) affects Liquid: https://github.com/Shopify/liquid/blob/v3.0.6/lib/liquid/standardfilters.rb#L37 / https://github.com/Shopify/liquid/blob/v3.0.6/lib/liquid/standardfilters.rb#L46\n", "created_at": "2016-02-04 04:59:01", "user": 10236, "id": 179641630}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179649381", "text": "Should reject non-string object?\n", "created_at": "2016-02-04 05:30:58", "user": 16700, "id": 179649381}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179666069", "text": "This change makes the incompatibility,\nbut current version `CGI.escape`, `CGI.escapeHTML` accept non-string object.\nIn almost case, object which responds to `gsub`, `encoding`, or `b` is only String.\n\nAfter this change, these methods accept implicit convertable object (to String).\nit is easy to understand for me.\n", "created_at": "2016-02-04 06:17:55", "user": 116996, "id": 179666069}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/179705364", "text": "Well, I'm talking about documentation and a certain tricky case affected by this change I happen to know of.\n\n@nobu I personally think this is a common gap between C and Ruby, so it would suffice to just document it in NEWS.  Once this is official, I'll file a PR on Shopify/liquid -- I know very well the backward compatibility is what counts most for them (Shopify).\n", "created_at": "2016-02-04 08:21:08", "user": 10236, "id": 179705364}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/cgi/util.rb (escapeHTML, unescapeHTML): consider\n  ASCII-incompatible encodings.\n\nFix GH-333\n", "labels": [], "number": 1239, "updated_at": "2016-02-06 13:31:29", "user": 16700, "closed_at": "2016-02-06 13:31:29", "id": 131556680, "title": "ASCII-incompatible escape", "url": "https://api.github.com/repos/ruby/ruby/issues/1239", "created_at": "2016-02-05 05:05:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180204211", "text": "Thanks @nobu, please merge and close.\n", "created_at": "2016-02-05 05:25:07", "user": 25030, "id": 180204211}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As per [#12054](https://bugs.ruby-lang.org/issues/12054)\n\nLogger add (lib/logger.rb) takes as arguments severity, message, progname and &block\n\nThe method runs the block through yield. In this case, we can just omit the argument and we'd be saving the instantiation of a new proc object (see http://mudge.name/2011/01/26/passing-blocks-in-ruby-without-block.html)\n", "labels": [], "number": 1240, "updated_at": "2016-02-09 14:52:06", "user": 598891, "closed_at": "2016-02-09 07:42:08", "id": 131629476, "title": "Remove block from Logger.add as it's not needed", "url": "https://api.github.com/repos/ruby/ruby/issues/1240", "created_at": "2016-02-05 12:20:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180408178", "text": "nice :+1: \n", "created_at": "2016-02-05 15:42:37", "user": 1147484, "id": 180408178}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180479412", "text": "Wow, did you benchmark this? That explicit block can be very expensive considering even debug messages at info level would pay that penalty. \n", "created_at": "2016-02-05 18:16:15", "user": 19339, "id": 180479412}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/180479477", "text": "Nice find. \n", "created_at": "2016-02-05 18:16:33", "user": 19339, "id": 180479477}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181671305", "text": "@jrafanie \n\n> That explicit block can be very expensive considering even debug messages at info level would pay that penalty\n\nAnyway, nobody uses `Logger#add`, because there are convenient `Logger#debug`, `Logger#info`, etc which capture the `&block` argument too. And it's quite ironic but these methods pass this `&block` argument right to `Logger#add` :) It's also ironic that in practice the best and recommended way to optimize logging is... to pass a block.\n\nThere are some related benchmarks https://gist.github.com/marshall-lee/85ae3cbc1ccca61355fb. But I think this numbers should not be so dramatic on a real logger that writes to file.\n", "created_at": "2016-02-09 02:11:57", "user": 3194530, "id": 181671305}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181748234", "text": "This change should not be so dramatic, but right, `&block` is not necessary. \nMerged, thanks.\n", "created_at": "2016-02-09 07:43:22", "user": 2290461, "id": 181748234}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/181900289", "text": ">  It's also ironic that in practice the best and recommended way to optimize logging is... to pass a block.\n\nYes, I've seen the `log.debug(some expensive operation)` vs. `log.debug { some expensive operation }`... it's quite amazing that even with a closure, the latter is faster for expensive operations.\n\n:clap: Great... thanks!  :bow:  Every little change helps!\n", "created_at": "2016-02-09 14:52:06", "user": 19339, "id": 181900289}], "assignees": [2290461, 2290461], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- defs/keywords (break, next, return): enable keyword arguments.\n", "labels": [], "number": 1241, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 131854437, "title": "enable kwargs after return", "url": "https://api.github.com/repos/ruby/ruby/issues/1241", "created_at": "2016-02-06 13:04:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1242, "updated_at": "2016-02-21 04:57:28", "user": 16700, "closed_at": "2016-02-21 04:57:28", "id": 131861737, "title": "Optimize CGI.unescapeHTML", "url": "https://api.github.com/repos/ruby/ruby/issues/1242", "created_at": "2016-02-06 14:41:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/185625668", "text": "With this benchmark https://gist.github.com/skunkworker/8f6cbeeaa4c1ec8f9eec\nI'm showing about a 17-18x improvement. Nice job.\n\n```\n$ ruby bench_unescape_html.rb \nUnescaping escaped data from url:'https://en.wikipedia.org/wiki/Succession_to_the_British_throne'\nWarming up --------------------------------------\n                 old     6.000  i/100ms\n                 new   103.000  i/100ms\nCalculating -------------------------------------\n                 old     60.969  (± 3.3%) i/s -    306.000 \n                 new      1.038k (± 3.3%) i/s -      5.253k\n\nComparison:\n                 new:     1038.4 i/s\n                 old:       61.0 i/s - 17.03x slower\n```\n", "created_at": "2016-02-18 09:31:35", "user": 2637951, "id": 185625668}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1243, "updated_at": "2017-07-23 20:54:06", "user": 6443532, "closed_at": "2016-02-12 02:18:15", "id": 132809594, "title": "Update re.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1243", "created_at": "2016-02-10 20:28:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/uri/generic.rb (URI::Generic#find_proxy): support CIDR in\n  no_proxy.  [ruby-core:73769] [Feature#12062]\n", "labels": [], "number": 1244, "updated_at": "2016-02-13 09:10:41", "user": 16700, "closed_at": "2016-02-13 09:10:27", "id": 132959109, "title": "CIDR in no_proxy", "url": "https://api.github.com/repos/ruby/ruby/issues/1244", "created_at": "2016-02-11 12:23:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There is no gem for this library, the sourceforge page shows this library hasn't been updated for almost 12 years, and the official page has the following line on the main page: \"Ruby 1.8 now ships with REXML, an excellent XML parser for Ruby by Sean Russell. It includes XPath support. You should probably use that instead of NQXML.\"\n\nAlso see https://bugs.ruby-lang.org/issues/9371\n", "labels": [], "number": 1245, "updated_at": "2016-02-26 08:23:42", "user": 2010013, "closed_at": "2016-02-26 02:25:23", "id": 132995406, "title": "Removed references to NQXML in xmlrpc", "url": "https://api.github.com/repos/ruby/ruby/issues/1245", "created_at": "2016-02-11 15:01:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`$CPPFLAGS`, `$CFLAGS` and `$LDFLAGS` are modified per `<<`, so strings should be dup'ed before.\n\nThis failed especially when the calling extconf.rb has frozen-string-literal enabled.\n", "labels": [], "number": 1246, "updated_at": "2016-02-14 10:44:04", "user": 176234, "closed_at": "2016-02-14 08:32:21", "id": 133476522, "title": "mkmf.rb: Do not modify caller strings.", "url": "https://api.github.com/repos/ruby/ruby/issues/1246", "created_at": "2016-02-13 21:42:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/183783608", "text": "Why extconf.rb needs frozen-string-literal?\n", "created_at": "2016-02-14 01:10:11", "user": 16700, "id": 183783608}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/183847803", "text": "@nobu There is no _need_ only the _wish_ . It's OK that mkmf.rb internally disables frozen-string-literals. However it should not implicit force external libraries to disable it as well.\n", "created_at": "2016-02-14 08:33:17", "user": 176234, "id": 183847803}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/183864878", "text": "Thanks for merging. Can you please backport this to ruby-2.3.1?\n", "created_at": "2016-02-14 10:05:21", "user": 176234, "id": 183864878}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- eval.c (setup_exception): set the cause only if it is explicitly\n  given or not set yet.  [Bug #12068]\n", "labels": [], "number": 1247, "updated_at": "2016-02-14 07:20:24", "user": 16700, "closed_at": "2016-02-14 07:19:57", "id": 133505252, "title": "not overwrite cause", "url": "https://api.github.com/repos/ruby/ruby/issues/1247", "created_at": "2016-02-14 04:47:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The variable used as a counter in the loop was being initialized with the result of `numberof(conv_method_names)` just to be referenced once on line 2559, so I replaced the use of `i` on that line with a direct call to the function.\n", "labels": [], "number": 1248, "updated_at": "2016-02-15 04:18:43", "user": 882822, "closed_at": "2016-02-15 02:18:46", "id": 133555001, "title": "object.c: Fix misuse of counter variable.", "url": "https://api.github.com/repos/ruby/ruby/issues/1248", "created_at": "2016-02-14 16:52:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184029653", "text": "It's wrong.\n`i` is the index of `conv_method_names` corresponds to `method`, and is the initial value when nothing is matched.\n", "created_at": "2016-02-15 02:18:46", "user": 16700, "id": 184029653}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184033983", "text": "@nobu Oh it that case sorry for the mistake, but on what line number is it used as an initial value?\nbesides on line `2559`? \n", "created_at": "2016-02-15 02:35:51", "user": 882822, "id": 184033983}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184042455", "text": "When `strncmp()` in https://github.com/ruby/ruby/blob/trunk/object.c#L2545 does not match.\n", "created_at": "2016-02-15 03:03:07", "user": 16700, "id": 184042455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184049087", "text": "what does the counter variable have to do with that line?\nWhy not just call `numberof(conv_method_names)` directly?\nOtherwise intent is not clear, and `numberof(conv_method_names)` is called additional times for nothing. \n", "created_at": "2016-02-15 03:31:28", "user": 882822, "id": 184049087}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/184060338", "text": "It's just a simple linear-search code.\n", "created_at": "2016-02-15 04:18:43", "user": 16700, "id": 184060338}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (parse_ident): allow keyword arguments just after a\n  method where the same name local variable is defined.\n  [ruby-core:73816] [Bug#12073]\n", "labels": [], "number": 1249, "updated_at": "2016-02-15 06:45:30", "user": 16700, "closed_at": "2016-02-15 06:44:24", "id": 133631842, "title": "parse.y: kwarg to method with same name variable", "url": "https://api.github.com/repos/ruby/ruby/issues/1249", "created_at": "2016-02-15 06:21:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- cgi/escape/escape.c: Optimize CGI.unescape performance by C ext\n  for ASCII-compatible encodings.\n", "labels": [], "number": 1250, "updated_at": "2016-02-21 04:57:48", "user": 16700, "closed_at": "2016-02-21 04:57:48", "id": 133649612, "title": "cgi/escape: Optimize CGI.unescape", "url": "https://api.github.com/repos/ruby/ruby/issues/1250", "created_at": "2016-02-15 08:15:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/185613238", "text": "I made a comparison between the old and the new unescape methods.\nhttps://gist.github.com/skunkworker/2a69e337f6e35628736d\n\nIt's looking like a nice 10-20x improvement, nice work.\n\n```\n$ ruby bench_unescape.rb \nUnescaping escaped url:'https://en.wikipedia.org/wiki/Succession_to_the_British_throne?param=foobar&hello=arr#somethinghere'\nWarming up --------------------------------------\n                 old     3.727k i/100ms\n                 new    41.699k i/100ms\nCalculating -------------------------------------\n                 old     39.810k (± 6.8%) i/s -    201.258k\n                 new    715.395k (± 8.7%) i/s -      3.586M\n\nComparison:\n                 new:   715395.4 i/s\n                 old:    39809.7 i/s - 17.97x slower\n```\n", "created_at": "2016-02-18 09:12:00", "user": 2637951, "id": 185613238}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is an implementation for [[Feature #12063]](https://bugs.ruby-lang.org/issues/12063)\n", "labels": [], "number": 1251, "updated_at": "2017-09-19 04:14:08", "user": 935310, "closed_at": "2017-09-18 12:31:02", "id": 134002084, "title": "KeyError#receiver and KeyError#key", "url": "https://api.github.com/repos/ruby/ruby/issues/1251", "created_at": "2016-02-16 14:55:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290908927", "text": "Matz approved this feature, but this PR has conflicts now.\r\n@ksss Could you resolve conflicts?", "created_at": "2017-04-01 09:34:54", "user": 11857, "id": 290908927}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290967280", "text": "@znz Thank you for the notice.\r\nI rebased branch.", "created_at": "2017-04-02 06:15:06", "user": 935310, "id": 290967280}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330205033", "text": "Applied at https://github.com/ruby/ruby/commit/13f5dcb9f25cf07ef22baa5aded490395700b283", "created_at": "2017-09-18 12:31:02", "user": 12301, "id": 330205033}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1252, "updated_at": "2016-02-26 02:10:57", "user": 4128547, "closed_at": "2016-02-26 02:10:57", "id": 134024943, "title": "Unify tmpdir method definition", "url": "https://api.github.com/repos/ruby/ruby/issues/1252", "created_at": "2016-02-16 16:20:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/11286\n\nI've refrained from adding an entry to the Changelog since this is largely @nobu's work. Opening a PR here for increased visibility.\n", "labels": [], "number": 1253, "updated_at": "2018-02-23 03:07:07", "user": 11608949, "closed_at": "None", "id": 134182435, "title": "enum.c: add #grep-like behavior to #any? and friends.", "url": "https://api.github.com/repos/ruby/ruby/issues/1253", "created_at": "2016-02-17 05:23:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/185038946", "text": "Whoops! RubySpec doesn't like this change, but I'd be happy to fix that with some assurance that it'd be worthwhile.\n", "created_at": "2016-02-17 05:49:24", "user": 11608949, "id": 185038946}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- defs/id.def (predefined): add idLASTLINE and idBACKREF for $~\n  and $_ respectively.\n- parse.y: use idLASTLINE and idBACKREF instead of rb_intern.\n", "labels": [], "number": 1254, "updated_at": "2016-02-17 12:42:30", "user": 16700, "closed_at": "2016-02-17 12:41:51", "id": 134263337, "title": "id.def: $~ and $_", "url": "https://api.github.com/repos/ruby/ruby/issues/1254", "created_at": "2016-02-17 12:13:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To adjust the indent.\n", "labels": [], "number": 1255, "updated_at": "2016-02-17 15:57:26", "user": 13010913, "closed_at": "2016-02-17 15:57:26", "id": 134309870, "title": "string.c:To adjust the indent", "url": "https://api.github.com/repos/ruby/ruby/issues/1255", "created_at": "2016-02-17 15:24:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1256, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 134436018, "title": "some debug options", "url": "https://api.github.com/repos/ruby/ruby/issues/1256", "created_at": "2016-02-17 23:47:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- proc.c (bind_local_variable_get, bind_local_variable_set): deal\n  with special method-local variables, `$_` and `$~`.\n  [Feature #12083]\n", "labels": [], "number": 1257, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 134479889, "title": "proc.c: Binding svar", "url": "https://api.github.com/repos/ruby/ruby/issues/1257", "created_at": "2016-02-18 04:37:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change adds more information when viewing the generated rdoc html output.\n\nPlease review, thank you.\n", "labels": [], "number": 1258, "updated_at": "2016-02-20 05:44:46", "user": 42930, "closed_at": "2016-02-20 05:44:46", "id": 134917094, "title": "Fix documentation signature for Module#module_eval", "url": "https://api.github.com/repos/ruby/ruby/issues/1258", "created_at": "2016-02-19 17:02:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit makes a few grammatical changes to the main Ruby README.md.\nA couple sentences were updated and the term Ruby has been capitalized\nfor consistency.\n", "labels": [], "number": 1259, "updated_at": "2016-02-20 05:41:15", "user": 470201, "closed_at": "2016-02-20 05:41:15", "id": 134978283, "title": "Update README.md", "url": "https://api.github.com/repos/ruby/ruby/issues/1259", "created_at": "2016-02-19 21:24:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/186515343", "text": "`Ruby` means the language, `ruby` means the command.\n", "created_at": "2016-02-20 05:38:28", "user": 16700, "id": 186515343}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Avoid the generic \"DRb::DRbConnError\" which gives very little information and make errors hard to debug.\n\nWhen I stared using DRuby, I kept getting a strange and cryptic error message `DRb::DRbConnError 'connection closed'`. Turns out it was due to some silly mistake on the server side of the relationship. It took hours to figure out. The only way I was able to do it was to patch ruby drb after closely studying the source.\n\nOthers have had the same issues:\n\nhttp://stackoverflow.com/questions/27293817/ruby-connection-closed-drbdrbconnerror\nhttps://www.ruby-forum.com/topic/193984\nhttps://github.com/Mon-Ouie/pry-remote/issues/8\n\nHere is an example where this makes a difference: \n\n``` ruby\n# drb_server.rb\nrequire 'drb'\n\nclass FrontObject\n  def foo\n    # generates Runtime Exception of Insecure Operation\n    result = `ls -l`\n  end\nend\n\nDRb.start_service(\"druby://localhost:8787\", FrontObject.new, safe_level: 3)\nDRb.thread.join\n```\n\n``` ruby\n# drb_client.rb\nrequire 'drb'\n\nobject = DRbObject.new_with_uri(\"druby://localhost:8787\")\nputs object.foo\n```\n\nOutput before patch is applied:\n\n```\n$ ruby drb_server.rb\n```\n\n```\n$ ruby drb_client.rb\n/Users/mike/.rbenv/versions/2.2.3/lib/ruby/2.2.0/drb/drb.rb:578:in `load': connection closed (DRb::DRbConnError)\n```\n\nOutput after patch is applied:\n\n```\n$ ruby drb_server.rb\nInsecure operation ``' at level 3\n```\n\n```\n$ ruby drb_client.rb\n/Users/mike/.rbenv/versions/2.2.3/lib/ruby/2.2.0/drb/drb.rb:578:in `load': connection closed (DRb::DRbConnError)\n```\n", "labels": [], "number": 1260, "updated_at": "2016-05-07 04:06:42", "user": 1386966, "closed_at": "2016-05-07 04:06:42", "id": 135137258, "title": "Add verbose failure messages and avoid infamous DRb::DRbConnError", "url": "https://api.github.com/repos/ruby/ruby/issues/1260", "created_at": "2016-02-21 00:17:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187063493", "text": "I'm not sure why the exception in that call is ignored, maybe just remove `rescue`?\nAnyway, please file a feature request at https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new.\n", "created_at": "2016-02-22 08:10:59", "user": 16700, "id": 187063493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187100854", "text": "DRb.primary_server.verbose = true\nor\nDRb.start_service(\"druby://localhost:8787\", FrontObject.new, safe_level: 3, verbose: true)\n", "created_at": "2016-02-22 09:52:53", "user": 33682, "id": 187100854}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187275974", "text": "@seki verbose makes no difference. There is an exception that is always caught and simply ignored, no details are captured.\n\n@nobu I'll open an issue there. Looking at the code again you are right, we might be able to do something like the code below. I tried just removing the rescue, but there is another `begin..ensure` block around it that makes sure the client connection is closed and some cleanup.\n\n``` ruby\n        loop do\n          begin\n            succ = false\n            invoke_method = InvokeMethod.new(self, client)\n            succ, result = invoke_method.perform\n            if !succ && verbose\n              p result\n              result.backtrace.each do |x|\n                puts x\n              end\n            end\n\n            client.send_reply(succ, result)\n          rescue Exception => e\n            puts e\n          ensure\n            client.close unless succ\n            if Thread.current['DRb']['stop_service']\n              Thread.new { stop_service }\n            end\n            break unless succ\n          end\n        end\n```\n", "created_at": "2016-02-22 17:18:50", "user": 1386966, "id": 187275974}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187278871", "text": "New issue reference: https://bugs.ruby-lang.org/issues/12101\n", "created_at": "2016-02-22 17:25:53", "user": 1386966, "id": 187278871}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187302716", "text": "``` ruby\n# drb_server.rb\nrequire 'drb'\n\nclass FrontObject\n  def foo\n    # generates Runtime Exception of Insecure Operation\n    result = `ls -l`\n  end\nend\n\nDRb.start_service(\"druby://localhost:8787\", FrontObject.new, safe_level: 3, verbose: true)\nDRb.thread.join\n\n```\n\n```\n% ruby drb_server.rb \n#<ArgumentError: $SAFE=2 to 4 are obsolete>\n/usr/local/lib/ruby/2.4.0/drb/drb.rb:1576:in `block in perform'\n```\n", "created_at": "2016-02-22 18:17:45", "user": 33682, "id": 187302716}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187330024", "text": "@seki tested it with Ruby 2.3. I guess SAFE levels are not supported there 2.4 and up now.\n\nThis might be another discussion, but it how do you prevent a user from shelling out and running system commands?\n\nWe were trying to create a sandbox think something like: https://repl.it/. DRB was perfect for calling eval on a different process in a different box. But what prevents someone from doing something like `rm -rf ./` which deletes all the eval server source? (yes, you can set different user permissions on the files and even start it with a different execution directory).\n", "created_at": "2016-02-22 19:23:42", "user": 1386966, "id": 187330024}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187332767", "text": "You'll have a difficult time preventing users from doing things you don't want with DRb.  See [drb-worm](https://github.com/drbrain/drb-worm/blob/master/lib/drb/worm/victim.rb) for ideas.\n\nUse unix tools like chroot to protect your server if it needs to be accessible to untrusted parties.  Use DRb over SSL with client and server certificates to protect communication if it needs to go over the internet.\n", "created_at": "2016-02-22 19:27:32", "user": 9831, "id": 187332767}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187362802", "text": "@drbrain thanks for the comment. Looks like CodeSchool go with the approach of undefining kernel methods something like as well:\n\n``` ruby\nmodule Kernel\n  def `(cmd)\n    puts \"Ah ah ah! You didn't say the magic word!\"\n  end\nend\n\nputs `cd ../.. && ls -l`\n```\n", "created_at": "2016-02-22 20:07:14", "user": 1386966, "id": 187362802}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187587528", "text": "That's far from sufficient.  With some work you can send specially crafted objects that when loaded have malicious content (there was a Rails vulnerability with this some time ago).  Or send code that performs a denial of service (`99999999999999**700000`)\n", "created_at": "2016-02-23 07:48:32", "user": 9831, "id": 187587528}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187829595", "text": "@drbrain totally agree. Great points. So you recommend also going on the DevOps side of things and making sure the process memory is capped, cpu usage is limited and runs under a very limited user.\n\nAny good references you can point me to?\n\nThis article was a great resource for $SAFE level: http://phrogz.net/programmingruby/taint.html. But most of it is no longer supported. I understand there was a discussion about it being very difficult to maintain this code. Are there any other recommended approaches for sandboxing ruby execution with eval?\n", "created_at": "2016-02-23 18:25:05", "user": 1386966, "id": 187829595}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/217605192", "text": "Fixed at 018f081233944ab97b4d7accf6c04ce386681f8e\n", "created_at": "2016-05-07 04:06:42", "user": 12301, "id": 217605192}], "assignees": [33682, 33682], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1261, "updated_at": "2016-03-05 01:33:58", "user": 16700, "closed_at": "2016-03-05 01:33:19", "id": 135345166, "title": "Optimize `negate_lit`", "url": "https://api.github.com/repos/ruby/ruby/issues/1261", "created_at": "2016-02-22 07:57:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes [bug 12100](https://bugs.ruby-lang.org/issues/12100)\n\nCSV#parse (and others) throw an ArgumentError when passing a single argument Proc as a converter because of a performance optimization check that assumes Proc#arity is always positive. Lambdas with one argument work fine as do Procs and lambdas with two arguments. The documentation suggests to me that either should work. Supporting the Proc variant is trivial and allows to_proc and to_proc shortcut syntax to be used eliminating the surprising behavior and uninformative error message. Illustration of the problem is below and a patch with tests is attached.\n\nEDIT: It looks like this might actually stem from Symbol#to_proc returning a Proc with unspecified number of arguments, but I think the fix is still valid.\n\n``` ruby\nrequire 'csv'\nputs CSV.parse(\"  foo  ,  bar  \", converters: -> f { f.strip }).inspect\nputs CSV.parse(\"  foo  ,  bar  \", converters: :strip.to_proc).inspect\n\n# Without patch this outputs:\n# [[\"foo\", \"bar\"]]\n# /home/mdaubert/.rbenv/versions/2.3.0/lib/ruby/2.3.0/csv.rb:2205:in `strip': wrong number of arguments (given 1, expected 0) (ArgumentError)\n\n# With patch this outputs:\n# [[\"foo\", \"bar\"]]\n# [[\"foo\", \"bar\"]]\n```\n", "labels": [], "number": 1262, "updated_at": "2016-02-22 17:21:25", "user": 127900, "closed_at": "2016-02-22 17:21:25", "id": 135464669, "title": "Allow using Procs for single argument CSV converters", "url": "https://api.github.com/repos/ruby/ruby/issues/1262", "created_at": "2016-02-22 16:17:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/187276703", "text": "This would cause existing code to break, for example:\n\n``` ruby\nparser.convert do |*args|\n  field, info = *args\n  # do things and return\nend\n```\n\nI don't think there's a way to fix this without causing a regression so I'm closing.\n", "created_at": "2016-02-22 17:21:25", "user": 127900, "id": 187276703}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1263, "updated_at": "2016-02-23 08:48:24", "user": 16757866, "closed_at": "2016-02-23 08:48:24", "id": 135673490, "title": "Ruby 2 3", "url": "https://api.github.com/repos/ruby/ruby/issues/1263", "created_at": "2016-02-23 08:47:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "  This code implements Ruby hash tables with open addressing for a better code locality.  The implementation overview is described in the top comment of file `st.c`.  This implementation improves Ruby hash table performance in average by 50% on Ruby hash tables benchmarks.  Here are the results of `make benchmark-each ITEM=bm_hash OPTS='-r 3 -v' COMPARE_RUBY='<trunk ruby>'` on 4.2GHz Intel i7-4790K (Haswell) under x86-64 FC21 Linux.\n\n```\nhash_aref_dsym       1.094\nhash_aref_dsym_long          1.383\nhash_aref_fix        1.048\nhash_aref_flo        1.860\nhash_aref_miss       1.107\nhash_aref_str        1.107\nhash_aref_sym        1.191\nhash_aref_sym_long           1.113\nhash_flatten         1.258\nhash_ident_flo       1.627\nhash_ident_num       1.045\nhash_ident_obj       1.143\nhash_ident_str       1.127\nhash_ident_sym       1.152\nhash_keys            2.714\nhash_shift           2.209\nhash_shift_u16       1.442\nhash_shift_u24       1.413\nhash_shift_u32       1.396\nhash_to_proc         2.831\nhash_values          2.701\n```\n\n```\n* include/ruby/st.h (MAX_ST_INDEX_VAL, st_table_element): New.\n(st_entry_t): New.\n(struct st_table): Remove num_bins, entries_packed, num_entries,\nand as.  Add num_elements, deleted_entries, allocated_entries,\nallocated_elements, rebuilds_num, hash_mask, entries,\nelements_start, elements_bound, and elements.\n(st_reverse_foreach): Remove.\n* st.c: Don't include ccan/list/list.h.  Include <assert.h> and\n<stdlib.h>.\n(ATTRIBUTE_UNUSED): New.\n(st_table_entry, st_packed_entry): Remove.\n(st_table_element): New.\n(STATIC_ASSERT, ST_DEFAULT_MAX_DENSITY): Remove.\n(ST_DEFAULT_INIT_TABLE_SIZE, ST_DEFAULT_PACKED_TABLE_SIZE): Ditto.\n(PACKED_UNIT, MAX_PACKED_HASH): Ditto.\n(rehash): Remove.\n(EQUAL): Rewrite.\n(do_hash): Make it inline function.\n(hash_pos): Remove.\n(PTR_EQUAL): New.\n(st_alloc_entry, st_free_entry, st_alloc_table, st_dealloc_table):\nRemove.\n(st_alloc_bins, st_free_bins, st_realloc_bins): Remove.\n(MAX_POWER2): New.\n(bins, real_entries, PACKED_BINS, PACKED_ENT, PKEY, PVAL): Remove.\n(PHASH, PKEY_SET, PVAL_SET, PHASH_SET): Ditto.\n(remove_packed_entry, remove_safe_packed_entry): Ditto.\n(next_pow2, new_size): Ditto.\n(get_power2): New.\n(EMPTY_ENTRY, DELETED_ENTRY, MARK_ENTRY_EMPTY): New.\n(MARK_ENTRY_DELETED): New.\n(EMPTY_ENTRY_P, DELETED_ENTRY_P, EMPTY_OR_DELETED_ENTRY_P): New.\n(EMPTY_ENTRY_PTR_P, DELETED_ENTRY_PTR_P): New.\n(EMPTY_OR_DELETED_ENTRY_PTR_P, MARK_ELEMENT_DELETED): New.\n(DELETED_ELEMENT_P, initialize_entries, make_tab_empty): New.\n(st_head, FIND_ENTRY): Remove.\n(st_init_table_with_size, st_clear, st_free_table, st_memsize):\nRewrite.\n(rebuild_entries): New.\n(find_entry, find_packed_index_from, find_packed_index): Remove.\n(rebuild_table, hash_entry): New.\n(collision_check): Define it as 1 and move it before definition of\nCOLLISION.\n(secondary_hash, find_table_entry, find_table_entry_ptr): New.\n(find_table_entry_ptr_and_reserve): New.\n(new_entry, add_direct, unpack_entries, add_packed_direct):\nRemove.\n(st_lookup, st_insert, st_insert2, st_get_key, st_add_direct):\nRewrite.\n(st_copy, st_delete, st_delete_safe, st_shift, st_cleanup_safe): Rewrite.\n(st_update): Rewrite.\n(st_general_delete): New.\n(remove_entry, get_keys, get_values): Remove.\n(st_general_foreach, st_general_keys, st_general_values): New.\n(st_foreach_check, st_foreach, st_keys_check): Rewrite.\n(st_values, st_values_check): Rewrite.\n(st_reverse_foreach_check, st_reverse_foreach): Remove.\n* compile.c (ibf_table_index, ibf_dump_id_list): Use\nnum_elements instead of num_entries.\n* encoding.c (rb_enc_name_list): Ditto.\n* gc.c (rb_objspace_call_finalizer, mark_tbl): Ditto.\n(allrefs_dump, wmap_size): Ditto.\n* hash.c (rb_hash_rehash, rb_hash_reject_bang): Ditto.\n(rb_hash_select_bang, rb_hash_clear): Ditto.\n(rb_hash_initialize_copy): Ditto.\n* internal.h (RHASH_SIZE): Ditto.\n* marshal.c (w_symbol, hash_each, w_object, r_entry): Ditto.\n(r_prepare, r_symreal): Ditto.\n* regparse.c (onig_number_of_names): Ditto.\n* symbol.c (symbols_i): Ditto.\n* transcode.c (rb_econv_asciicompat_encoding): Ditto.\n* variable.c (iv_index_tbl_newsize): Ditto.\n(iv_index_tbl_extend, rb_ivar_count, autoload_delete): Ditto.\n(rb_const_list, cvar_list): Ditto.\n* ext/-test-/st/numhash/numhash.c (numhash_size): Ditto.\n* ext/-test-/st/foreach/foreach.c (force_unpack_check): Remove\ncheck on packed and unpacked entries.\n(unp_fec, unp_fe): Ditto.\n```\n", "labels": [], "number": 1264, "updated_at": "2016-08-29 17:08:23", "user": 9855671, "closed_at": "2016-08-29 17:08:23", "id": 135832710, "title": "Hash tables with open addressing", "url": "https://api.github.com/repos/ruby/ruby/issues/1264", "created_at": "2016-02-23 19:11:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189077138", "text": "@vnmakarov Please update title to meaningful sentence. \n", "created_at": "2016-02-26 01:59:27", "user": 12301, "id": 189077138}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189109158", "text": "   Sorry, the title was auto generated.  I am a novice to Ruby community and never did a pull request before.  I am going to upload the patch to the bug tracker on the next week.  I follow the procedure described in\n\nhttp://docs.ruby-lang.org/en/2.1.0/contributing_rdoc.html\n", "created_at": "2016-02-26 04:25:48", "user": 9855671, "id": 189109158}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update readme.md add links\n", "labels": [], "number": 1265, "updated_at": "2016-02-26 07:18:08", "user": 1780909, "closed_at": "2016-02-26 07:18:08", "id": 135867823, "title": "Update readme.md add links", "url": "https://api.github.com/repos/ruby/ruby/issues/1265", "created_at": "2016-02-23 21:16:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- compile.c (iseq_compile_each), parse.y (yycompile0): pass\n  coverage array via the option hash, without thread context.\n", "labels": [], "number": 1266, "updated_at": "2016-12-10 18:00:19", "user": 16700, "closed_at": "2016-12-10 18:00:19", "id": 135950866, "title": "coverage w/o thread context ", "url": "https://api.github.com/repos/ruby/ruby/issues/1266", "created_at": "2016-02-24 04:27:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- numeric.c (num_step_scan_args): comparison String with Numeric\n  should raise TypeError. it is an invalid type, but not a\n  mismatch the number of arguments.  [ruby-core:62430] [Bug #9810]\n", "labels": [], "number": 1267, "updated_at": "2016-02-26 05:42:08", "user": 16700, "closed_at": "2016-02-26 05:41:49", "id": 136598089, "title": "numeric.c: wrong type step should raise TypeError", "url": "https://api.github.com/repos/ruby/ruby/issues/1267", "created_at": "2016-02-26 04:57:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1268, "updated_at": "2016-12-10 18:00:08", "user": 16700, "closed_at": "2016-12-10 18:00:08", "id": 136617730, "title": "object.c: Kernel#not", "url": "https://api.github.com/repos/ruby/ruby/issues/1268", "created_at": "2016-02-26 07:20:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [2010013, 1730364, 76716]}, "text": "https://bugs.ruby-lang.org/issues/11210\n\nSince there is not a single way to write a netmask for an IP address (e.g 192.168.1.2/24 is equal to 192.168.1.2/255.255.255.0), return an object instead, so the caller can get the kind of output he desires.\n", "labels": [], "number": 1269, "updated_at": "2018-03-12 20:39:11", "user": 1250153, "closed_at": "2018-03-12 20:39:07", "id": 136813642, "title": "IPAddr has no public method to get the current subnet mask", "url": "https://api.github.com/repos/ruby/ruby/issues/1269", "created_at": "2016-02-26 21:00:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189496883", "text": "Fixes https://bugs.ruby-lang.org/issues/11527 as well\n", "created_at": "2016-02-26 21:53:38", "user": 1250153, "id": 189496883}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189504614", "text": "A point of discussion here would be wether the subnet should be used in `IPAddr#include?`. With a statement like `IPAddr.new('10.0.0.0/24').include?('10.0.0.0/16')` I guess the return value should be false, because we clearly try to match the subnets here (currently it returns true). I'm not completely sure what to expect with a statement like `IPAddr.new('10.0.0.0/24').include?('10.0.0.1/16')`, it does indeed include that IP address, but not the given subnet.\nMaybe it would be clearer to only accept IP addresses with a full netmask (`/32` on IPv4, `/128` on IPv6) in `IPAddr#include?`, and create a separate method that also requires the subnet does fit in our callee\n\nAlso, I've got no idea what the logical behaviour would be when comparing IP addresses with different subnet masks. Would `192.168.0.1/24` be equal to`192.168.0.1/32`, smaller, or maybe bigger? Maybe the best action here would be to just return `nil` if the subnets don't match.\n", "created_at": "2016-02-26 22:11:21", "user": 1250153, "id": 189504614}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189689351", "text": "The build errors on Travis appear to be caused by the rubyspec tests. They include a few tests very similar to those in the unit tests:\n\n```\n  it \"tests for equality\" do\n    @a.should == IPAddr.new(\"3ffe:505:2::\")\n    @a.should_not == IPAddr.new(\"3ffe:505:3::\")\n  end\n```\n\nAnd since `@a` is a /48 address, this not fails. I would recommend changing these spec tests to:\n\n```\n  it \"tests for equality\" do\n    @a.should == IPAddr.new(\"3ffe:505:2::/48\")\n    @a.should_not == IPAddr.new(\"3ffe:505:2::\")\n    @a.should_not == IPAddr.new(\"3ffe:505:3::/48\")\n    @a.should_not == IPAddr.new(\"3ffe:505:3::\")\n  end\n```\n\nbut since they live in a separate repository, I can't include that with this pull request.\n", "created_at": "2016-02-27 17:43:52", "user": 1250153, "id": 189689351}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/190139530", "text": "@herwinw I'll be happy to update the specs if this is accepted or to review a PR on ruby/spec.\nIt's probably better to know if this is accepted first though.\n", "created_at": "2016-02-29 10:13:15", "user": 168854, "id": 190139530}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/190877029", "text": "@eregon Any idea what the preferred method of getting things like this accepted is?\n", "created_at": "2016-03-01 19:55:48", "user": 1250153, "id": 190877029}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/191214482", "text": "@herwinw It must be discussed and decided on the Ruby bug tracker.\nI updated https://bugs.ruby-lang.org/issues/11210 with a link to this PR.\n", "created_at": "2016-03-02 12:13:09", "user": 168854, "id": 191214482}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/209287043", "text": "Nice work!\n", "created_at": "2016-04-13 07:47:09", "user": 10236, "id": 209287043}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/210785506", "text": "@knu I updated the equality-check, now the travis checks pass again.\n", "created_at": "2016-04-16 10:19:06", "user": 1250153, "id": 210785506}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/319696610", "text": "Any updates on this?", "created_at": "2017-08-02 14:51:49", "user": 22137700, "id": 319696610}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322844966", "text": "@fly3110 I believe all review comments have been addressed, so I guess it's up to the Ruby team", "created_at": "2017-08-16 17:36:20", "user": 1250153, "id": 322844966}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/372454560", "text": "https://github.com/ruby/ipaddr/commit/293ad5ac6ed704f91d418ecaf24ae58156a587e7\r\n\r\nThis has been fixed in the `ipaddr` gem, no more need for this pull request", "created_at": "2018-03-12 20:39:07", "user": 1250153, "id": 372454560}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\\c @indirect @hsbt \n", "labels": [], "number": 1270, "updated_at": "2016-03-04 00:30:13", "user": 1946610, "closed_at": "2016-03-04 00:30:13", "id": 136814651, "title": "* lib/rubygems.rb, lib/rubygems/*, test/rubygems/*: Update rubygems-2.6.1", "url": "https://api.github.com/repos/ruby/ruby/issues/1270", "created_at": "2016-02-26 21:05:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189540982", "text": "@segiddins Thank you for your preparation. I will merge this into Ruby trunk.\n", "created_at": "2016-02-27 00:45:11", "user": 12301, "id": 189540982}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189797788", "text": "Updated to now be 2.6.1\n", "created_at": "2016-02-28 06:37:13", "user": 1946610, "id": 189797788}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1271, "updated_at": "2016-03-02 18:57:43", "user": 1250153, "closed_at": "2016-03-02 06:13:26", "id": 136821994, "title": "Remove broken xmlrpc parser backends", "url": "https://api.github.com/repos/ruby/ruby/issues/1271", "created_at": "2016-02-26 21:43:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189541200", "text": "@herwinw Can you describe what broken status with these parsers. I agree to remove broken parsers.\n", "created_at": "2016-02-27 00:46:19", "user": 12301, "id": 189541200}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189612523", "text": "There are links to the bug reports in the commit messages. Short recap (to save everybody from clicking)\n- XMLTreeParser: Throws an assertion directly ([bugtracker](https://bugs.ruby-lang.org/issues/9370)), and the required gem didn't compile on newer Ruby versions (hasn't been updated since 2012)\n- XMLScanStreamParser: Arity errors ([bugtracker](https://bugs.ruby-lang.org/issues/9369)), every time I tried to fix that a next error popped up.\n", "created_at": "2016-02-27 09:36:07", "user": 1250153, "id": 189612523}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/191086950", "text": "@herwinw Thank you. It's reasonable. I removed broken parsers.\n", "created_at": "2016-03-02 06:27:43", "user": 12301, "id": 191086950}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "# Rationale\n\nTo me, integer-without-limit is one of the greatest features of Ruby.  I am currently working on my own implementation of arbitrary precision number system (https://github.com/dankogai/swift-pons) and ruby has been my sensei.\n\nThat is why I am disappointed to find `prime.rb` is pretty darn impractical, even for such \"small\" numbers below the 64-bit boundary.  Consider this:\n\n``` shell\nruby -rprime -e 'p (2**61-1).prime?' # hello, anybody home?\n```\n\nM61 is well below an ordinary, fixed, 64-bit integer can hold.\n\nThis patch makes `prime.rb` a little more practical by:\n- making `.prime?` base upon Miller-Rabin primarity test\n  - but unlike other patch proposals (like https://bugs.ruby-lang.org/issues/11578 ), this one is deterministic up to 318665857834031151167461, well over `uint64_t` max.\n- adding `.next_prime` and `.prev_prime` which returns the (next|previous) prime.\n- adding `Prime::NextPrimeGenerator` which makes use of `.next_prime`.\n# vs. OpenSSL::BN\n\nLike current `prime.rb`, this patch is by no means to replace `OpenSSL::BN.prime?`.  For very large numbers `OpenSSL::BN` is still faster.  But for numbers below 32-bit limit this patch is faster.  And for numbers between 32-bit limit and 64-bit limit, its performance is okay.\n\n``` ruby\n# coding: utf-8\nrequire 'benchmark'\nrequire 'prime'\nrequire 'openssl'\n\ncount = 10000\n\n[\n  2147483647,                # int32 max == M31\n  1<<61 - 1,                 # M61\n  2147483647*2147483629,     # M31 * M31.prev_prime\n  18446744073709551427,      # the largest prime uint64_t can handle\n  318665857834031151167461,  # A014233_11\n  # found at:\n  # https://rosettacode.org/wiki/Miller–Rabin_primality_test\n  4547337172376300111955330758342147474062293202868155909489, # prime\n  4547337172376300111955330758342147474062293202868155909393  # composite\n].each do |n|\n  primerbsays   = n.prime?\n  opensslbnsays = OpenSSL::BN.new(n.to_s).prime?\n  puts \"#{n}.prime? => #{primerbsays}\"\n  puts \"OpenSSL::BN.new(#{n}.to_s).prime? => #{opensslbnsays}\"\n  puts \"Do they agree? #{primerbsays == opensslbnsays}\"\n  Benchmark.bm do |x|\n    x.report(\"OpenSSL::BN\") {\n      count.times { OpenSSL::BN.new(n.to_s).prime? }\n    }\n    x.report(\"prime.rb\") {\n      count.times { n.prime? }\n    }\n  end\nend\n```\n\n```\n2147483647.prime? => true\nOpenSSL::BN.new(2147483647.to_s).prime? => true\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  1.190000   0.010000   1.200000 (  1.216361)\nprime.rb  0.180000   0.000000   0.180000 (  0.190299)\n1152921504606846976.prime? => false\nOpenSSL::BN.new(1152921504606846976.to_s).prime? => false\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  0.010000   0.000000   0.010000 (  0.009166)\nprime.rb  0.000000   0.000000   0.000000 (  0.000847)\n4611685975477714963.prime? => false\nOpenSSL::BN.new(4611685975477714963.to_s).prime? => false\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  0.120000   0.010000   0.130000 (  0.123623)\nprime.rb  0.300000   0.000000   0.300000 (  0.308675)\n18446744073709551427.prime? => true\nOpenSSL::BN.new(18446744073709551427.to_s).prime? => true\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  1.980000   0.020000   2.000000 (  2.023935)\nprime.rb  4.330000   0.020000   4.350000 (  4.390414)\n318665857834031151167461.prime? => false\nOpenSSL::BN.new(318665857834031151167461.to_s).prime? => false\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  0.100000   0.010000   0.110000 (  0.105193)\nprime.rb  4.320000   0.010000   4.330000 (  4.346966)\n4547337172376300111955330758342147474062293202868155909489.prime? => true\nOpenSSL::BN.new(4547337172376300111955330758342147474062293202868155909489.to_s).prime? => true\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  1.790000   0.000000   1.790000 (  1.799558)\nprime.rb 27.270000   0.260000  27.530000 ( 28.073170)\n4547337172376300111955330758342147474062293202868155909393.prime? => false\nOpenSSL::BN.new(4547337172376300111955330758342147474062293202868155909393.to_s).prime? => false\nDo they agree? true\n       user     system      total        real\nOpenSSL::BN  0.170000   0.000000   0.170000 (  0.168822)\nprime.rb  2.020000   0.010000   2.030000 (  2.054712)\n```\n# Conclusion\n\nIMHO the gap between `prime.rb` and `OpenSSL::BN` is now unacceptably too large.  It was acceptable when native integers were only 32-bit wide.  But it is 2016 and even your phone may be using 64-bit int.\n`.prime?` should return instantly at least within 64-bit range.\n\nDan the Amateur Rubyist\n", "labels": [], "number": 1272, "updated_at": "2018-02-23 03:07:09", "user": 68812, "closed_at": "None", "id": 136920866, "title": "next_prime for lib/prime.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1272", "created_at": "2016-02-27 13:44:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237008214", "text": "When I was in bed I also realized I could do `self == 41 || miller_rabin_test(41)`,\nso yeh, good catch.\n\nActually, your suggestions for `prime1?` undoes the reasons for doing it that way.\n\nFirst, my initial modifications of `miller_rabin_test` and `prime?` was to just\nimprove the coding implementation of the pull requester's design. I followed what\nhe proposed but just coded the same functionality faster and more efficiently.\n\nWith `prime1?` I wanted to redesign the implementation to a more `functional programming`\n(FP) style, with the deliberate goal to allow it to be performed efficiently in parallel.\nThe ultimate purpose for doing this is to create a design that can perform optimally.\n\nSo I separated out the distinct functional steps so they can be performed independently.\nFinding the appropriate range for the input number is a separate process.\nThen finding the witnesses for the range is a separate process.\nFinally, performing the `miller-rabin` tests with the proper witnesses is a separate process.\n\nThe goal of `prime1?` was to get to `prime2?`. The `miller-rabin` are independent tests,\nand don't share any memory, so they can inherently be done in parallel. So the only change\nto `prime1?` to allow the `miller-rabin` tests be done in parallel is to use the\n`Parallel.each(witnesses)..` method from the `parallel` gem.  The timing results tell all.\nWhen CRuby (3.0 ?) supports parallelization, this can be replaced by its native method(s).\n\nAh, but we can do better.\n\nThe original design has some unnecessary dependencies we can eliminate to make the code \neasier to update and mathematically modify.\n\nThe design uses a specific set of ranges/witnesses to provide deterministic results over those \nranges. See such as https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test for the\nmathematical details.\n\nThe way the Prime::A014233 hash is constructed, each larger range is dependent on all the\nsmaller ranges keys to determine its witnesses.  This forces us to find (code) a way to\ndetermine the correct set of witnesses for each range. For this particular design, it's\npretty straight forward to do this. But what would have to happen if the mathemeticians\nfind a better set of ranges/witnesses that don't follow this particular scheme?\n\nThe fix is to create the hash so that the keys are the ranges whose values are arrays of\nall their witnesses. Now, the ranges are independent, and new ranges can be added/modified\nwithout worry of affecting another range. `Prime::A014233NEW` below shows this. Now, finding \nthe appropriate range automatically provides the appropriate witnesses.\n\nIn the code for `prime3?` one line now finds the appropriate witnesses for a range.\n`wits = Prime::A014233NEW.sort.detect {|range, wits| range > self}`.\n\nLet's break this down.\n\n```\nwits = Prime::A014233NEW.sort.              # make sure for old/new Rubys' the keys are sorted\n       detect {|range, wits| range > self}` # find first [range, [wits]] pair where range > self\n                                            # if no range > self then wits =  nil\n```\n\nThen we do `wits && wits[1] || witnesses` to determine the array of witnesses for testing with.\nIf `wits` is `nil` then `wits && wits` is `false` and we use the default `witnesses` array.\nOtherwise `wits && wits[1]` returns `wits[1]` to be the witnesses array for the identified range.\n\nIn `prime3?` every line is an independent functional entity, and new `range => [wits]` pairs can be\nadded to Prime::A014233NEW independently (without regard to their position in the hash).\n\nBut I can even make `prime3?` a little bit more (mathematically) efficient, as shown in `prime4?`.\n\nSince I'm creating an array of consecutive `witnesses` primes, I might as well use it to check\nfor small primes, instead of creating a smaller array of small primes.  And I also might as\nwell use this modulus for these Prime Generator primes as my `non-primality` test.\n\nSo `m = witnesses.reduce(:*)` is 304,250,263,527,210,\nand the `non-primality` test `m.gcd(self) == 1` will eliminate 85.5% of all integers\nfrom consideration to being prime, instead of the 77% eliminated by `210.gcd(self) == 1`. \n(see Primes-Utils Handbook for details).\n\nThus, I think `prime4?` represents the most mathematically efficient/optimally performant \ndesign/code for doing this.\n\n```\nclass Integer\n  ...\n  ...\n\n  def prime3?    # perform miller-rabin tests in parallel\n    return true if [2, 3, 5, 7].include? self\n    return false unless self > 1 and 210.gcd(self) == 1\n    witnesses = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    wits = Prime::A014233NEW.sort.detect {|range, wits| range > self} # [range, [wits]] or nil\n    Parallel.each(wits && wits[1] || witnesses) { |p| return false unless miller_rabin_test(p) }\n    true\n  end\n\n  def prime4?    # perform miller-rabin tests in parallel\n    witnesses = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    return true if witnesses.include? self\n    m = witnesses.reduce(:*)                           # modulus for P41 Prime Generator\n    return false unless self > 1 and m.gcd(self) == 1  # non-primality test for P41\n    wits = Prime::A014233NEW.sort.detect {|range, wits| range > self} # [range, [wit_prms]] or nil\n    Parallel.each(wits && wits[1] || witnesses) { |p| return false unless miller_rabin_test(p) }\n    true\n  end\nend\n\nclass Prime\n  # https://oeis.org/A014233\n  #\n  # Smallest odd number for which Miller-Rabin primality test\n  # on bases <= n-th prime does not reveal compositeness.\n  #\n  A014233 = {\n    2  => 2_047,\n    3  => 1_373_653,\n    5  => 25_326_001,\n    7  => 3_215_031_751,\n    11 => 2_152_302_898_747,\n    13 => 3_474_749_660_383,\n    17 => 341_550_071_728_321,\n    19 => 341_550_071_728_321,\n    23 => 3_825_123_056_546_413_051,\n    29 => 3_825_123_056_546_413_051,\n    31 => 3_825_123_056_546_413_051,\n    37 => 318_665_857_834_031_151_167_461\n  }\n\n  A014233NEW = {\n    2_047 => [2],\n    1_373_653 => [2, 3],\n    25_326_001 => [2, 3, 5],\n    3_215_031_751 => [2, 3, 5, 7],\n    2_152_302_898_747 => [2, 3, 5, 7, 11],\n    3_474_749_660_383 => [2, 3, 5, 7, 11, 13],\n    341_550_071_728_321 => [2, 3, 5, 7, 11, 13, 17],\n    3_825_123_056_546_413_051 => [2, 3, 5, 7, 11, 13, 17, 19, 23],\n    318_665_857_834_031_151_167_461 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  }\nend\n```\n", "created_at": "2016-08-02 19:02:01", "user": 69856, "id": 237008214}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237090982", "text": "I am glad that I could help in minor details and eventually motivated this discussion.\nAnd you really flipped the key values, I thought this was just a crazy idea but wrote anyway.\nNow I understand that your goal is to fully parallelize the process.\nI would still use `sort!` instead of `sort` to avoid GC calls, but that would make no difference in a small benchmark.\nIt seems like you achieved the best solution, have you seen the tests?\n5 tests were failing in the original request, 4 of them because 41 was missing and 1 because of timeout.\n", "created_at": "2016-08-03 00:16:54", "user": 11094484, "id": 237090982}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/238981308", "text": "Been busy, couldn't respond immediately.\n\nRegarding test passing, all my versions of `primex?` pass the tests I run to\nverify their accuracy. As you noted, the original pull request code gave a\nfalse negative to 41 because of the architecural structure, as I elaborated on.\n\nBut the crux of the pull request is to improve the performance of the `prime.rb`\nstd lib methods.  That goal, and also to provide more enhanced methods, is why\nI create the `primes-utils` gem.\n\nFortunately, the current method for `prime?` in `prime.rb` uses the math from\n`primes-utils` (see https://www.scribd.com/doc/266461408/Primes-Utils-Handbook)\nmaking it significatntly faster than its previous implementation, i.e. before its\ninclusion in Ruby 2.3.0 (released Christmas 2015, 2015/12/25).\n\nHowever, this version, which uses the P3 Strictly-Prime Prime Generator (SP PG),\ncan be made much faster by using the next higher SP PG, i.e. P5, as with `primep5?`.\nThis allows it to be used with bigger numbers with much better performance.\n\n```\nclass Integer\n\n  def prime?     # version now used in prime.rb since MRI 2.3.0\n    return self >= 2 if self <= 3\n    return false if self % 2 == 0 or self % 3 == 0\n    # return false unless 6.gcd(self) == 1              # simplification\n    (5..(self**0.5).floor).step(6).each do |i|\n      if self % i == 0 || self % (i + 2) == 0\n        return false\n      end\n    end\n    true\n  end\n\n  def primep5?   # Uses P5 Strictly-Prime PG\n    return false unless self > 1 and 30.gcd(self) == 1 or [2,3,5].include? self\n    (7..Math.sqrt(self).to_i).step(30) do |p|\n      return false if \n        self%(p)    == 0 or self%(p+4)  == 0 or self%(p+6)  == 0 or self%(p+10) == 0 or\n        self%(p+12) == 0 or self%(p+16) == 0 or self%(p+22) == 0 or self%(p+24) == 0\n    end\n    true\n  end\n\nend\n```\n\nThe P7 SP PG is even faster (for increasing numbers) but the code is not as compact.\nIn fact, I just submitted using `primep5?` to the Ruby issues tracker as an easy/simple \nimprovement to `prime?` in `prime.rb`. https://bugs.ruby-lang.org/issues/12665\n\nBelow are some timing comparisions for 3 progressively larger primes for 2.3.1.\nSystem: System76 3.5GHz I7 cpu laptop, Linux 64-bit OS\n\n```\nn1 =   100_000_000_000_000_003\nn2 =   200_000_000_000_000_003\nn3 = 1_000_000_000_000_000_003\n\n               n1         n2         n3\nprime?        4.1        5.7        12.9\nprimep5?      2.5        3.6         7.9\n\ndef tm; s = Time.now; yield; Time.now - s end\n\nirb(main):028:0> n = 100_000_000_000_000_003; tm{ n.prime? }\n=> 4.127392644\nirb(main):029:0> n = 100_000_000_000_000_003; tm{ n.primep5? }\n=> 2.539485672\nirb(main):030:0> n = 200_000_000_000_000_003; tm{ n.prime? }\n=> 5.721895509\nirb(main):031:0> n = 200_000_000_000_000_003; tm{ n.primep5? }\n=> 3.56925564\nirb(main):032:0> n = 1_000_000_000_000_000_003; tm{ n.prime? }\n=> 12.940908142\nirb(main):033:0> n = 1_000_000_000_000_000_003; tm{ n.primep5? }\n=> 7.920408959\n```\n\nSo, just making this minor change to `prime?` creates major performance benefits,\nwhile using a mathematical technique that is totally deterministic.\n\nThis pull request uses the Miller-Rabin (MR) test for `prime?`, with the minimum set of\nprime witnesses to supposedly make the MR tests deterministic over specific number ranges.\nHowever, for 'small' numbers, I see the code producing random false negatives results.\n\nRepeatedly run this test below (for small numbers) with `prime?` using MR, and then with `prime?`\nfrom `prime.rb`. The answer to `s.size` should be 78498.\n\n```\n2.3.1 :029 > s = []; 1000000.times{|i| s << i if i.prime?}\n => 1000000 \n2.3.1 :030 > s.size    # should be 78498\n```\n\nFrom my testing, using SP PGs are faster than MR for 'small' numbers, and 100% accurate,\nwhile MR shines for larger numbers (for speed).  In `primes-utils` I provide and use a \nrandomized MR version that is probablistic. I can incorporate the code here for MR to make \nit determinsitic over its (larger) deterministic ranges. I think the key for the devs to\nconsider is first accuracy, and then speed. Getting wrong results fast is not the goal.\n\nThis suggests that if you want the best of both worlds (100% accuracy and speed) in one\nmethod combining the use of PGs and MR may be the way to go.  Something to consider.\n\nBelow are additional simplifications to the methods `next_prime` and `prev_prime` in\nthe pull request code.\n\n```\nclass Integer\n\ndef next_prime                           def next_prime\n  return 2 if self < 2                     return 2 if self < 2\n  n = self\n  n += if n & 1 == 0 then 1 else 2 end     n = self + 1 | 1          # 1st odd number > self\n  while !n.prime?                          n += 2 until n.prime?     # do until n is prime\n    n += 2\n  end\n  return n                                 n\nend                                      end\n\ndef prev_prime                           def prev_prime\n  return nil if self <= 2                  return nil if self <= 2\n  return   2 if self == 3                  return   2 if self == 3\n  n = self\n  n -= if n & 1 == 0 then 1 else 2 end     n = self - 2 | 1          # 1st odd number < self\n  while !n.prime?                          n -= 2 until n.prime?     # do until n is prime\n    n -= 2\n  end\n  return n                                 n\nend                                      end\n```\n\nHere are all my modifications to the pull requester's code.\nThe code is now much shorter, more readable, and (hopefully) should pass every test.\n\n```\nrequire 'openssl'\n\nclass Integer\n\n  # Returns true if +self+ passes Miller-Rabin Test on +b+\n  def miller_rabin_test(b)             # b is a witness to test with\n    return self >= 2 if self <= 3 \n    return false unless 6.gcd(self) == 1\n    n = d = self - 1\n    d >>= 1 while d.even?\n    y = b.to_bn.mod_exp(d, self)       # y = (b**d) mod self\n    while d != n && y != n && y != 1\n      y = y.to_bn.mod_exp(2, self)     # y = (y**2) mod self\n      d <<= 1\n    end\n    y == n || d.odd?\n  end\n\n  # Returns true if +self+ is a prime number, else returns false.\n  def prime?\n    witnesses = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n    return true if witnesses.include? self\n    return false unless self > 1 and witnesses.reduce(:*).gcd(self) == 1\n    wits = Prime::A014233NEW.sort.detect {|range, wits| range > self} # [range, [wit_prms]] or nil\n    witnesses = wits && wits[1] || witnesses\n    witnesses.each { |p| return false unless miller_rabin_test(p) }\n    true\n  end\n\n  # Returns the smallest prime number which is greater than +self+\n  def next_prime\n    return 2 if self < 2\n    n = self + 1 | 1          # first odd number > self\n    n += 2 until n.prime?     # find first prime > self\n    n\n  end\n\n  # Returns the largest prime number which is smaller than +self+\n  # or +nil+ if +self+ <= 2\n  def prev_prime\n    return nil if self <= 2\n    return   2 if self == 3\n    n = self - 2 | 1          # first odd number < self\n    n -= 2 until n.prime?     # find first prime < self\n    n\n  end\n\nend\n\nclass Prime\n\n  # https://oeis.org/A014233\n  #\n  # Smallest odd number for which Miller-Rabin primality test\n  # on bases <= n-th prime does not reveal compositeness.\n  #\n  A014233NEW = {\n    2_047 => [2],\n    1_373_653 => [2, 3],\n    25_326_001 => [2, 3, 5],\n    3_215_031_751 => [2, 3, 5, 7],\n    2_152_302_898_747 => [2, 3, 5, 7, 11],\n    3_474_749_660_383 => [2, 3, 5, 7, 11, 13],\n    341_550_071_728_321 => [2, 3, 5, 7, 11, 13, 17],\n    3_825_123_056_546_413_051 => [2, 3, 5, 7, 11, 13, 17, 19, 23],\n    318_665_857_834_031_151_167_461 => [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  }\nend\n```\n\nNow you can do, very fast, and for very large numbers, things like:\n\n```\n> 11111111111118349843942143.prime?     => false\n> 11111111111118349843942143.next_prime => 11111111111118349843942147\n> 11111111111118349843942143.prev_prime => 11111111111118349843942109\n> (2**64).prev_prime   => 18446744073709551557\n> (2**128).preve_prime => 340282366920938463463374607431768211297\n```\n\nThere are still code and performance improvements that can be made to the other \nmethods in `prime.rb`, especially `prime_division`, which I replaced with `factors`\nin `prime-utils`.  Actually, I would love to see the devs take everything from \n`primes-utils` and incorporate its techniques into the std lib, which would make \nRuby much more useful, flexible, and performant, for all things prime.\n", "created_at": "2016-08-10 19:43:41", "user": 69856, "id": 238981308}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/312269763", "text": "This page shows numbers up to 71.\r\nhttp://mathworld.wolfram.com/StrongPseudoprime.html\r\n\r\nψ20 meaning [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71 ] base numbers.\r\n\r\nPrime::A014233 can extend \r\n~~~\r\n  41 => 3_317_044_064_679_887_385_961_981,\r\n  43 => 6_003_094_289_670_105_800_312_596_501,\r\n  47 => 59_276_361_075_595_573_263_446_330_101,\r\n  53 => 564_132_928_021_909_221_014_087_501_701,\r\n  59 => 564_132_928_021_909_221_014_087_501_701,\r\n  61 => 1_543_267_864_443_420_616_877_677_640_751_301,\r\n  67 => 1_543_267_864_443_420_616_877_677_640_751_301,\r\n  71 => 10 ** 36,\r\n~~~\r\n", "created_at": "2017-06-30 13:40:00", "user": 1475814, "id": 312269763}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "#### Set Intersection\n- Most know what intersection means, but saying the operation\n  excludes duplicates could be misleading ([1] & [1], duplicates\n  excluded, might mean a result of []).\n- Instead, saying intersection returns the unique elements common to both\n  arrays is more concise and less ambiguous.\n\nResulting intersection doc:\n\n```\n/*\n *  call-seq:\n *     ary & other_ary      -> new_ary\n *\n *  Set Intersection --- Returns a new array containing unique elements common to the\n *  two arrays. The order is preserved from the original array.\n *\n *  It compares elements using their #hash and #eql? methods for efficiency.\n *\n *     [ 1, 1, 3, 5 ] & [ 3, 2, 1 ]                 #=> [ 1, 3 ]\n *     [ 'a', 'b', 'b', 'z' ] & [ 'a', 'b', 'c' ]   #=> [ 'a', 'b' ]\n *\n *  See also Array#uniq.\n */\n```\n#### Set Union\n- The set union's documentation was incomplete in its describing\n  preservation of order. Saying union preserves the order of the\n  original array neglects the idea that the order of the elements\n  in both arrays, as given, will be preserved.\n- Instead, saying set union preserves the order from the given arrays (and\n  adding an example) fully demonstrates the idea.\n\nResulting union doc:\n\n```\n/*\n *  call-seq:\n *     ary | other_ary     -> new_ary\n *\n *  Set Union --- Returns a new array by joining +ary+ with +other_ary+,\n *  excluding any duplicates and preserving the order from the given arrays.\n *\n *  It compares elements using their #hash and #eql? methods for efficiency.\n *\n *     [ \"a\", \"b\", \"c\" ] | [ \"c\", \"d\", \"a\" ]    #=> [ \"a\", \"b\", \"c\", \"d\" ]\n *     [ \"c\", \"d\", \"a\" ] | [ \"a\", \"b\", \"c\" ]    #=> [ \"c\", \"d\", \"a\", \"b\" ]\n *\n *  See also Array#uniq.\n */\n```\n\nRedmine ticket for discussion: https://bugs.ruby-lang.org/issues/12122\n", "labels": [], "number": 1273, "updated_at": "2016-02-28 01:20:22", "user": 708692, "closed_at": "2016-02-28 01:20:22", "id": 136968205, "title": "Clarify set intersection and union documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1273", "created_at": "2016-02-27 21:09:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "commit 4107fe00aff781148f2e127be31f6d3528063aa5\nAuthor: C.J. Collier cjcollier@linuxfoundation.org\nDate:   Sat Feb 27 18:00:39 2016 -0800\n\n```\nAdd summary to configure output\n\nrenamed configure.in (deprecated) to configure.ac\ngenerate test_system.rb with a pre-install ruby path so that tests pass prior to installation\nupdate files which refer to configure.in to point at configure.ac\n```\n", "labels": [], "number": 1274, "updated_at": "2016-02-28 04:58:46", "user": 53074, "closed_at": "2016-02-28 02:10:55", "id": 136993866, "title": "Ruby 1 8 7", "url": "https://api.github.com/repos/ruby/ruby/issues/1274", "created_at": "2016-02-28 02:03:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189764670", "text": "@cjac Please create your patch from trunk branch.\n", "created_at": "2016-02-28 02:10:55", "user": 12301, "id": 189764670}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189783855", "text": "ok.\n", "created_at": "2016-02-28 04:58:46", "user": 53074, "id": 189783855}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These data are printed after the end of the ./configure run:\n\n```\n\n---\nConfiguration summary for ruby version 2.4.0\n\n   * Installation prefix: /usr/local\n   * exec prefix:         ${prefix}\n   * arch:                x86_64-linux\n   * site arch:           ${arch}\n   * RUBY_BASE_NAME:      ruby\n   * ruby lib prefix:     ${libdir}/${RUBY_BASE_NAME}\n   * site libraries path: ${rubylibprefix}/${sitearch}\n   * vendor path:         ${rubylibprefix}/vendor_ruby\n   * target OS:           linux\n   * compiler:            gcc\n   * with pthread:        yes\n   * enable shared libs:  no\n   * dynamic library ext: so\n   * CFLAGS:              -O3 -fno-fast-math -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Werror=pointer-arith -Werror=write-strings -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=deprecated-declarations -Wno-packed-bitfield-compat -Wno-maybe-uninitialized\n   * LDFLAGS:             -L. -fstack-protector -rdynamic -Wl,-export-dynamic\n   * strip command:       strip -S -x\n   * install doc:         yes\n   * man page type:       doc\n\n---\n\n```\n", "labels": [], "number": 1275, "updated_at": "2016-03-01 11:42:27", "user": 53074, "closed_at": "2016-02-28 08:18:13", "id": 137008149, "title": "Add summary to end of configure output", "url": "https://api.github.com/repos/ruby/ruby/issues/1275", "created_at": "2016-02-28 05:08:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/189818561", "text": "Seems breaking mswin build.\n", "created_at": "2016-02-28 08:18:13", "user": 16700, "id": 189818561}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/190307109", "text": "yeah, sorry.  I only tested with autoconf.  Can you point me to some docs on standing up a mswin build environment?  I hate relying on the CI system to tell me when things break.\n", "created_at": "2016-02-29 17:47:38", "user": 53074, "id": 190307109}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/190684188", "text": "I think you should not contain another feature like rename files in this pull request.\n", "created_at": "2016-03-01 11:42:27", "user": 12301, "id": 190684188}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/delegate.rb (Delegator#method_missing): allow to call\n  private methods if called function form.  [Feature #12113]\n", "labels": [], "number": 1276, "updated_at": "2016-12-10 18:00:08", "user": 16700, "closed_at": "2016-12-10 18:00:08", "id": 137008548, "title": "Delegator private method", "url": "https://api.github.com/repos/ruby/ruby/issues/1276", "created_at": "2016-02-28 05:15:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/12124\n\nJust opened a redmine ticket to track and discuss.\n", "labels": [], "number": 1277, "updated_at": "2016-02-28 14:14:19", "user": 53074, "closed_at": "2016-02-28 14:14:19", "id": 137025701, "title": "Use Automake", "url": "https://api.github.com/repos/ruby/ruby/issues/1277", "created_at": "2016-02-28 08:25:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [602226]}, "text": "Raised `ArgumentError, \"no host component for URI\"` if `uri.hostname` is `nil`.\n\nIt used to raise `TypeError: can't dup NilClass` which can be pretty vague for some developers.\n", "labels": [], "number": 1278, "updated_at": "2018-03-08 16:09:13", "user": 6284234, "closed_at": "2018-03-08 16:09:13", "id": 137037578, "title": "Raise ArgumentError if host component is nil", "url": "https://api.github.com/repos/ruby/ruby/issues/1278", "created_at": "2016-02-28 10:44:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "other Array examples doesn't put trailing comma.\n", "labels": [], "number": 1279, "updated_at": "2016-02-29 07:51:51", "user": 167012, "closed_at": "2016-02-29 07:50:53", "id": 137175641, "title": "[DOC] Remove trailing comma from Array#push example", "url": "https://api.github.com/repos/ruby/ruby/issues/1279", "created_at": "2016-02-29 07:43:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1280, "updated_at": "2016-03-01 02:50:06", "user": 16700, "closed_at": "2016-03-01 02:50:06", "id": 137175774, "title": "Fileutils refactor", "url": "https://api.github.com/repos/ruby/ruby/issues/1280", "created_at": "2016-02-29 07:44:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (parser_params): turn `last_cr_line` into `cr_seen` flag.\n  reduce the struct size\n", "labels": [], "number": 1281, "updated_at": "2016-03-03 07:45:47", "user": 16700, "closed_at": "2016-03-03 07:43:35", "id": 138096373, "title": "parse.y: cr_seen flag", "url": "https://api.github.com/repos/ruby/ruby/issues/1281", "created_at": "2016-03-03 07:14:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (parser_nextline, parser_cr): split less frequent paths\n  from parser_nextc.\n", "labels": [], "number": 1282, "updated_at": "2016-03-03 12:06:57", "user": 16700, "closed_at": "2016-03-03 08:31:43", "id": 138106928, "title": "parse.y: split nextc", "url": "https://api.github.com/repos/ruby/ruby/issues/1282", "created_at": "2016-03-03 08:06:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ruby.c (load_file_internal): warn if shebang line ends with a\n  carriage return.\n", "labels": [], "number": 1283, "updated_at": "2016-03-04 13:29:48", "user": 16700, "closed_at": "2016-03-04 13:27:49", "id": 138384728, "title": "ruby.c: warn_cr_in_shebang", "url": "https://api.github.com/repos/ruby/ruby/issues/1283", "created_at": "2016-03-04 05:45:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1284, "updated_at": "2016-03-09 01:10:38", "user": 15961106, "closed_at": "2016-03-09 01:10:22", "id": 138837177, "title": "Update README.MD", "url": "https://api.github.com/repos/ruby/ruby/issues/1284", "created_at": "2016-03-06 20:57:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/194052353", "text": "It's not necessary.\n", "created_at": "2016-03-09 01:10:38", "user": 12301, "id": 194052353}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- iseq.c (prepare_iseq_build): enable coverage by coverage_enabled\n  option, not by parse_in_eval flag in the thread context.\n- iseq.h (rb_compile_option_struct): add coverage_enabled flag.\n- parse.y (yycompile0): set coverage_enabled flag if coverage\n  array is made.\n", "labels": [], "number": 1285, "updated_at": "2016-03-10 08:34:50", "user": 16700, "closed_at": "2016-03-10 08:34:35", "id": 139811455, "title": "iseq.h: coverage_enabled flag", "url": "https://api.github.com/repos/ruby/ruby/issues/1285", "created_at": "2016-03-10 07:37:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The existing documentation for `Encoding.default_external=` contained some typos (`., instead`), which this update fixes. I also updated the text to be clearer (in my humble opinion) about why using this method should be avoided.\n", "labels": [], "number": 1286, "updated_at": "2016-05-05 08:12:14", "user": 7736, "closed_at": "2016-05-05 08:12:14", "id": 139858122, "title": "Fix documentation for `Encoding.default_external=`", "url": "https://api.github.com/repos/ruby/ruby/issues/1286", "created_at": "2016-03-10 11:17:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- numeric.c (rb_fix2str): fix edge case, accidentally generated\n  wrong Fixnum from LONG_MIN.\n", "labels": [], "number": 1287, "updated_at": "2016-03-13 00:16:20", "user": 16700, "closed_at": "2016-03-13 00:16:15", "id": 140428665, "title": "numeric.c: fix edge case", "url": "https://api.github.com/repos/ruby/ruby/issues/1287", "created_at": "2016-03-12 23:48:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- file.c (ruby_is_fd_loadable): now return -1 if loadable but\n  may block.\n- ruby.c (open_load_file): wait to read by the result of\n  ruby_is_fd_loadable, without fstat.\n", "labels": [], "number": 1288, "updated_at": "2016-03-14 07:04:22", "user": 16700, "closed_at": "2016-03-14 07:04:06", "id": 140499317, "title": "ruby.c: reduce fstat", "url": "https://api.github.com/repos/ruby/ruby/issues/1288", "created_at": "2016-03-13 15:57:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- compile.c (compile_named_capture_assign): optimize named capture\n  assignments, by replacing repeating global variable accesses\n  with dup, and by returning the matched result instead of\n  re-getting it from the MatchData.\n- parse.y (reg_named_capture_assign_gen): build just assignment\n  nodes for the optimization.\n\nex. `/(?<x>.)/ =~ \"bar\"`\n- old\n  \n  ```\n  0000 putstring        \"bar\"\n  0002 opt_regexpmatch1 /(?<x>.)/\n  0004 pop\n  0005 getglobal        $~\n  0007 branchunless     25\n  0009 getglobal        $~\n  0011 putobject        :x\n  0013 opt_aref         <callinfo!mid:[], argc:1, ARGS_SIMPLE>\n  0016 setlocal_OP__WC__0 2\n  0018 getglobal        $~\n  0020 putobject_OP_INT2FIX_O_0_C_\n  0021 opt_send_without_block <callinfo!mid:begin, argc:1, ARGS_SIMPLE>\n  0024 leave\n  0025 putobject        nil\n  0027 setlocal_OP__WC__0 2\n  0029 putobject        nil\n  0031 leave\n  ```\n- new\n  \n  ```\n  0000 putstring        \"bar\"\n  0002 opt_regexpmatch1 /(?<x>.)/\n  0004 getglobal        $~\n  0006 dup\n  0007 branchunless     14\n  0009 putobject        :x\n  0011 opt_aref         <callinfo!mid:[], argc:1, ARGS_SIMPLE>\n  0014 setlocal_OP__WC__0 2\n  0016 leave\n  ```\n", "labels": [], "number": 1289, "updated_at": "2016-03-14 07:54:16", "user": 16700, "closed_at": "2016-03-14 07:53:47", "id": 140594146, "title": "optimize named capture assignment", "url": "https://api.github.com/repos/ruby/ruby/issues/1289", "created_at": "2016-03-14 07:12:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There was a slight typo that I noticed while looking at through the Time documentation.\n", "labels": [], "number": 1290, "updated_at": "2016-03-15 00:57:15", "user": 68729, "closed_at": "2016-03-15 00:57:15", "id": 140722589, "title": "Minor typo in Time#dst? documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1290", "created_at": "2016-03-14 16:20:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This gives a little performance improvement\n\n```\n    user     system      total        real\n```\n\nBefore: 20.870000   0.000000  20.870000 ( 20.893959)\nAfter:  20.720000   0.000000  20.720000 ( 20.733970)\n\nSigned-off-by: Dinar Valeev dvaleev@suse.com\n", "labels": [], "number": 1291, "updated_at": "2016-03-17 08:15:29", "user": 1101460, "closed_at": "2016-03-17 08:15:29", "id": 140821578, "title": "GC: Use __builtin_ppc_get_timebase for POWER arch", "url": "https://api.github.com/repos/ruby/ruby/issues/1291", "created_at": "2016-03-14 23:07:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @gogotanaka\n", "labels": [], "number": 1292, "updated_at": "2016-03-17 08:22:39", "user": 1147484, "closed_at": "2016-03-17 08:21:05", "id": 141408678, "title": "Update documentation for Queue class description", "url": "https://api.github.com/repos/ruby/ruby/issues/1292", "created_at": "2016-03-16 21:34:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/197755669", "text": "Thanks @nobu, @hsbt :+1:\n", "created_at": "2016-03-17 08:22:39", "user": 1147484, "id": 197755669}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- the definition of RB_GC_GUARD_PTR needs to be moved into the block\n  which is MSC-specific since in the non-MSC/non-GCC codepath here we\n  do not have any rb_gc_guarded_ptr defined.\n- i alised RB_GC_GUARD_PTR to RB_GC_GUARD which i think is how people\n  are intending to use this macro?\n- people are in fact using this macro as a public API even though\n  there is the comment in the code not to.\n", "labels": [], "number": 1293, "updated_at": "2016-03-17 11:57:34", "user": 454857, "closed_at": "2016-03-17 11:57:34", "id": 141440038, "title": "fix RB_GC_GUARD_PTR on non-GCC/non-MSC builds", "url": "https://api.github.com/repos/ruby/ruby/issues/1293", "created_at": "2016-03-17 00:20:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/197620993", "text": "See ffi/ffi#489\n\nOn AIX using ruby compiled with xlc and trying to use the ffi gem (which uses RB_GUARD_PTR) i get:\n\n```\nexec(): 0509-036 Cannot load program ruby because of the following errors:\nrtld: 0712-001 Symbol rb_gc_guarded_ptr was referenced\n      from module /opt/chef/embedded/lib/ruby/gems/2.2.0/gems/ffi-1.9.10/lib/ffi_c.so(), but a runtime definition\n      of the symbol was not found.\nrtld: 0712-002 fatal error: exiting.\n```\n\nThe error is accurate because in non-GGC/non-Windows codepaths rb_gc_guarded_ptr is referenced from the RB_GC_GUARD_PTR macro but never defined.\n\nAt least the RB_GC_GUARD_PTR macro should be itself undefined to move this error to compile time rather than link type and make it a bit more obvious.\n", "created_at": "2016-03-17 00:25:37", "user": 454857, "id": 197620993}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/197846376", "text": "ffi/ffi#490 is correct.\n", "created_at": "2016-03-17 11:57:34", "user": 16700, "id": 197846376}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [1033740]}, "text": "- compile.c (iseq_optimize): disable tail call optimization in\n  rescued, rescue, and ensure blocks.\n  [ruby-core:73871] [Bug #12082]\n", "labels": [], "number": 1294, "updated_at": "2016-04-11 11:36:38", "user": 16700, "closed_at": "2016-04-11 11:36:38", "id": 141504827, "title": "compile.c: disable tco with rescue", "url": "https://api.github.com/repos/ruby/ruby/issues/1294", "created_at": "2016-03-17 07:45:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/date/date_core.c (datetime_to_time): preserve timezone info  [Bug #12189]\n", "labels": [], "number": 1295, "updated_at": "2016-03-18 01:26:46", "user": 2290461, "closed_at": "2016-03-18 01:26:46", "id": 141610513, "title": "Fix DateTime#to_time to preserve timezone info", "url": "https://api.github.com/repos/ruby/ruby/issues/1295", "created_at": "2016-03-17 15:05:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/197924390", "text": "I am not sure whether it is okay to change this behavior, but I am sure preserving timezone information makes be more useful. \n", "created_at": "2016-03-17 15:06:28", "user": 2290461, "id": 197924390}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/198152318", "text": "I considers this is a kind of a bug, I am going to merge. \n", "created_at": "2016-03-18 01:22:47", "user": 2290461, "id": 198152318}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix for the following bug:\n\nhttps://bugs.ruby-lang.org/issues/12192\n", "labels": [], "number": 1296, "updated_at": "2016-03-18 07:22:59", "user": 328950, "closed_at": "2016-03-18 07:22:59", "id": 141617267, "title": "Fix for nth_ref_max", "url": "https://api.github.com/repos/ruby/ruby/issues/1296", "created_at": "2016-03-17 15:30:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/time.rb (parse, strptime): Fix Time.parse/strptime does not have compatibility with DateTime.parse/strptime in terms of parsing timezone [Bug #12190] [Fix GH-1297]\n", "labels": [], "number": 1297, "updated_at": "2016-03-17 17:46:57", "user": 2290461, "closed_at": "2016-03-17 17:46:57", "id": 141637549, "title": "Fix Time.parse/strptime to utilize timezone :offset", "url": "https://api.github.com/repos/ruby/ruby/issues/1297", "created_at": "2016-03-17 16:38:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- file.c (rb_file_dirname_n): chomp N level of base names.\n", "labels": [], "number": 1298, "updated_at": "2016-12-10 18:00:08", "user": 16700, "closed_at": "2016-12-10 18:00:08", "id": 141796538, "title": "dirname optional level", "url": "https://api.github.com/repos/ruby/ruby/issues/1298", "created_at": "2016-03-18 07:43:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- iseq.c (rb_iseq_compile_with_option): make the parser in mild\n  error.\n- load.c (rb_load_internal0): ditto.\n- parse.y (yycompile0): return the error message within the error\n  to be raised.  [Feature #11951]\n- parse.y (parser_compile_error): accumulate error messages in the\n  error_buffer.\n", "labels": [], "number": 1299, "updated_at": "2016-03-19 05:46:55", "user": 16700, "closed_at": "2016-03-19 05:46:52", "id": 142021511, "title": "SyntaxError message at iseq compile", "url": "https://api.github.com/repos/ruby/ruby/issues/1299", "created_at": "2016-03-19 03:02:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1300, "updated_at": "2016-03-22 07:24:27", "user": 15961106, "closed_at": "2016-03-22 07:24:27", "id": 142436451, "title": "Edit links to the same style [Readme.MD]", "url": "https://api.github.com/repos/ruby/ruby/issues/1300", "created_at": "2016-03-21 18:46:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/199676463", "text": "It's no improvements for me.\n", "created_at": "2016-03-22 07:24:27", "user": 12301, "id": 199676463}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added some documentation for the Module#constants behaviour pointed out in Bug [#12121](https://bugs.ruby-lang.org/issues/12121) on the Ruby trunk issue tracker.\n", "labels": [], "number": 1301, "updated_at": "2016-03-23 01:40:20", "user": 13203, "closed_at": "2016-03-23 01:40:20", "id": 142552565, "title": "Fix a Ruby-Doc comment for Module#constants", "url": "https://api.github.com/repos/ruby/ruby/issues/1301", "created_at": "2016-03-22 05:30:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `signed char` type is unconditionally used elsewhere:\n- various files under enc/, ext/fiddle/\n- util.c (ruby_digit36_to_number_table)\n- pack.c (b64_xtable)\n\nAlso it's 2016 and every relevant C compiler implements C89.\n", "labels": [], "number": 1302, "updated_at": "2016-03-23 02:45:28", "user": 212792, "closed_at": "2016-03-23 02:45:28", "id": 142665548, "title": "remove SIGN_EXTEND_CHAR macro", "url": "https://api.github.com/repos/ruby/ruby/issues/1302", "created_at": "2016-03-22 14:24:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1303, "updated_at": "2016-03-23 01:35:40", "user": 15961106, "closed_at": "2016-03-23 01:35:40", "id": 142779622, "title": "Upate node.h", "url": "https://api.github.com/repos/ruby/ruby/issues/1303", "created_at": "2016-03-22 21:03:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/200118522", "text": "At least, You need to describe about pull request.\n", "created_at": "2016-03-23 01:35:38", "user": 12301, "id": 200118522}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fix potential GC problems by dangling pointers.\n", "labels": [], "number": 1304, "updated_at": "2016-03-24 03:44:04", "user": 16700, "closed_at": "2016-03-24 03:44:04", "id": 143134792, "title": "Bug/date strftime", "url": "https://api.github.com/repos/ruby/ruby/issues/1304", "created_at": "2016-03-24 03:03:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On Windows, it is actually valid to surround individual PATH directory\nentries with double quotes. Remove these before joining the path as\notherwise the literal quotes would become part of the path, resulting in\nthe executable not to be found.\n", "labels": [], "number": 1305, "updated_at": "2016-03-24 16:11:17", "user": 349154, "closed_at": "2016-03-24 16:11:17", "id": 143270514, "title": "mkmf: Unquote directory strings in find_executable0", "url": "https://api.github.com/repos/ruby/ruby/issues/1305", "created_at": "2016-03-24 15:03:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1306, "updated_at": "2016-03-26 01:55:21", "user": 16700, "closed_at": "2016-03-26 01:55:21", "id": 143644902, "title": "Refactor/generic integer arith", "url": "https://api.github.com/repos/ruby/ruby/issues/1306", "created_at": "2016-03-26 01:19:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This allow to override the body more easily.\nCheers\n", "labels": [], "number": 1307, "updated_at": "2016-03-29 03:46:06", "user": 98590, "closed_at": "2016-03-29 03:46:06", "id": 143692405, "title": "WEBrick::HTTPResponse: move error_body to method", "url": "https://api.github.com/repos/ruby/ruby/issues/1307", "created_at": "2016-03-26 11:26:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- sprintf.c (rb_str_format): convert Rational to floating point\n  format by using gereric Integer functions, not by methods which\n  can be overwritten.\n", "labels": [], "number": 1308, "updated_at": "2016-03-27 03:14:32", "user": 16700, "closed_at": "2016-03-27 03:14:32", "id": 143770867, "title": "sprintf.c: Rational f by generic Integer functions", "url": "https://api.github.com/repos/ruby/ruby/issues/1308", "created_at": "2016-03-27 02:51:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From pull #1148 \n\nIn spite of proxy_uri.userinfo has username and password for authenticated proxy, open_http method of open-uri.rb ignores it. Actually, lots of softwares expect this value as a credential for authenticated proxy.\n\nI have retained his original change & added a unit test for it.  cc/ @hsbt \n", "labels": [], "number": 1309, "updated_at": "2016-03-30 00:46:40", "user": 12317, "closed_at": "2016-03-30 00:46:40", "id": 144019394, "title": "Use `userinfo` for authenticated proxy ", "url": "https://api.github.com/repos/ruby/ruby/issues/1309", "created_at": "2016-03-28 16:29:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/202601181", "text": "What about simply:\n\n``` diff\n@@ -270,6 +270,9 @@\n     if URI::HTTP === target\n       # HTTP or HTTPS\n       if proxy\n+        unless proxy_user && proxy_pass\n+          proxy_user, proxy_pass = proxy_uri.userinfo&.split(':', 2)\n+        end\n         if proxy_user && proxy_pass\n           klass = Net::HTTP::Proxy(proxy_uri.hostname, proxy_uri.port, proxy_user, proxy_pass)\n         else\n```\n", "created_at": "2016-03-28 22:14:19", "user": 16700, "id": 202601181}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/202890985", "text": "agreed, i'll simplify the original change\n", "created_at": "2016-03-29 13:22:22", "user": 12317, "id": 202890985}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/202892620", "text": "@jdamick Thank you for your test. I'll merge after test passes.\n", "created_at": "2016-03-29 13:28:16", "user": 12301, "id": 202892620}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/202922226", "text": "all set, thanks!\n", "created_at": "2016-03-29 14:31:30", "user": 12317, "id": 202922226}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1310, "updated_at": "2016-03-28 23:49:38", "user": 16700, "closed_at": "2016-03-28 23:49:38", "id": 144090872, "title": "No parse in eval", "url": "https://api.github.com/repos/ruby/ruby/issues/1310", "created_at": "2016-03-28 21:42:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "the exception backtrace by eval seems just too verbose.\n", "labels": [], "number": 1311, "updated_at": "2016-12-10 18:00:08", "user": 16700, "closed_at": "2016-12-10 18:00:08", "id": 144097777, "title": "simplify eval backtrace", "url": "https://api.github.com/repos/ruby/ruby/issues/1311", "created_at": "2016-03-28 22:20:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/openssl/ossl_ssl.c (ossl_ssl_setup): Only add SNI to TLS requests\n  if hostname string length is > 0 (0-length SNI values violate spec).\n", "labels": ["OpenSSL"], "number": 1312, "updated_at": "2016-10-23 12:07:16", "user": 6841619, "closed_at": "2016-10-23 12:07:16", "id": 145292270, "title": "ossl_ssl.c: Fix for empty SNI to TLS requests", "url": "https://api.github.com/repos/ruby/ruby/issues/1312", "created_at": "2016-04-01 21:45:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204624219", "text": "@jconroy77 Can you show me in the spec where this is required?\n\nIf so, we should add a test for it too.\n", "created_at": "2016-04-02 01:34:51", "user": 277819, "id": 204624219}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204662728", "text": "http://tools.ietf.org/html/rfc4366#section-3.1\n\nHostName<1..2^16-1>\n\nThough reading a bit further into it, they also specifically exclude IPv4 and IPv6 addresses from being used as well.\n\nMy issue had been related to a dev that used an empty hostname string when calling HTTP.new() to do requests against localhost, which then failed while negotiating the TLS session.\n", "created_at": "2016-04-02 07:08:28", "user": 6841619, "id": 204662728}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204671485", "text": "As far as IDNA verification, the hostname is required to be ASCII only on connect, I'm not sure about during a request.\n\nAre you `post_connection_check` is getting called?\n", "created_at": "2016-04-02 08:21:01", "user": 277819, "id": 204671485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204675307", "text": "Not sure I follow.\n\nThis addresses an issue with an HTTPS request done against a local Apache instance (both Ruby and Apache built against the same version of OpenSSL).  During the TLS negotiation with Apache's mod_ssl, mod_ssl would always return a failure to decode when the SNI field used an empty (0 length) string which appears to violate the spec for that TLS extension.\n", "created_at": "2016-04-02 08:40:37", "user": 6841619, "id": 204675307}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205161112", "text": "@jconroy77 How did you initiate the connection?\n", "created_at": "2016-04-04 06:53:44", "user": 277819, "id": 205161112}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205419675", "text": "The developer was doing the following which does successfully do a local HTTPS request if not using TLS where SNI comes into play.\n\n```\n      http = Net::HTTP.new('', ((Rails.configuration.force_ssl == true) ? 443 : 80) )\n      http.use_ssl = true if Rails.configuration.force_ssl\n      http.ssl_version = :SSLv3\n      http.verify_mode = OpenSSL::SSL::VERIFY_NONE if http.use_ssl?\n```\n\nOnce the above was patched to support TLS (the \"ssl_version = :SSLv3\" line was removed so that it would use the default of SSLv23), it would fail while negotiating TLS (when including the empty SNI extension field).\n", "created_at": "2016-04-04 17:59:36", "user": 6841619, "id": 205419675}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225380798", "text": "Since r55191 (ruby/openssl@998d66712a78c623977db37fc8c6f95502b71d3c), SSLSocket#hostname= should raise an exception for an invalid input.\n\nThe example also causes the Host HTTP header to be empty. RFC 7230 says Host may be empty in some certain cases but I'm not sure this is the case. If so, this should be fixed in net/http so that it doesn't set hostname.\nhttps://tools.ietf.org/html/rfc7230#section-5.4\n", "created_at": "2016-06-11 18:03:08", "user": 1033740, "id": 225380798}], "assignees": [1033740, 1033740], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Feature #12245]\n", "labels": [], "number": 1313, "updated_at": "2016-04-13 07:07:42", "user": 16700, "closed_at": "2016-04-13 07:07:42", "id": 145385233, "title": "Feature/integer#floor ndigits", "url": "https://api.github.com/repos/ruby/ruby/issues/1313", "created_at": "2016-04-02 15:35:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Feature #12245]\n", "labels": [], "number": 1314, "updated_at": "2016-04-13 07:07:45", "user": 16700, "closed_at": "2016-04-13 07:07:45", "id": 145385253, "title": "Feature/integer#ceil ndigits", "url": "https://api.github.com/repos/ruby/ruby/issues/1314", "created_at": "2016-04-02 15:35:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Feature #12245]\n", "labels": [], "number": 1315, "updated_at": "2016-04-13 07:07:48", "user": 16700, "closed_at": "2016-04-13 07:07:48", "id": 145385266, "title": "Feature/float#floor ndigits", "url": "https://api.github.com/repos/ruby/ruby/issues/1315", "created_at": "2016-04-02 15:35:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Feature #12245]\n", "labels": [], "number": 1316, "updated_at": "2016-04-13 07:07:52", "user": 16700, "closed_at": "2016-04-13 07:07:52", "id": 145385280, "title": "Feature/float#ceil ndigits", "url": "https://api.github.com/repos/ruby/ruby/issues/1316", "created_at": "2016-04-02 15:35:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Enumerable's `include?` calls `each` until a matching value is found. This means `Prime.include?` will not terminate for composite arguments. The solution is override `Prime.include?` to alias the existing `Prime.prime?`, to better implement the Enumerable interface.\n", "labels": [], "number": 1317, "updated_at": "2018-02-23 03:07:11", "user": 1191970, "closed_at": "None", "id": 145398930, "title": "Override Prime.include? to avoid nontermination", "url": "https://api.github.com/repos/ruby/ruby/issues/1317", "created_at": "2016-04-02 18:00:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204770092", "text": "Related bug report: [Prime#include?(mod) hangs up](https://bugs.ruby-lang.org/issues/10167)\n", "created_at": "2016-04-02 18:23:27", "user": 212792, "id": 204770092}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/204770922", "text": "Related, but `include?` to detect an included module is not standard. Use `self.class.included_modules.include?` instead. In this patch, `Prime.include? Enumerable` results in an `ArgumentError`, which is fine. It's also a one-liner.\n", "created_at": "2016-04-02 18:36:50", "user": 1191970, "id": 204770922}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nHere is a small patch to have access to ephemeral session key in case of forward secrecy cipher.\nOnly available since [OpenSSL 1.0.2](https://marc.info/?l=openssl-cvs&m=135653902602326&w=2).\n\nRegards,\n", "labels": ["OpenSSL"], "number": 1318, "updated_at": "2016-04-05 00:39:02", "user": 51246, "closed_at": "2016-04-04 15:07:19", "id": 145481409, "title": "Access to ephemeral TLS session key", "url": "https://api.github.com/repos/ruby/ruby/issues/1318", "created_at": "2016-04-03 11:06:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205101264", "text": "I think you should:\n- check if the function is available in extconf.rb,\n  for the compatibility with libressl\n- conditions of `ossl_ssl_tmp_key` do not match;\n  defined regardless `defined(OPENSSL_NO_SOCK)` but used only if `!defined(OPENSSL_NO_SOCK)`\n- adjust the indent with the rest\n", "created_at": "2016-04-04 01:43:51", "user": 16700, "id": 205101264}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205160925", "text": "Would also like to see a test for new features\n", "created_at": "2016-04-04 06:52:14", "user": 277819, "id": 205160925}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205324897", "text": "Here the requested changes :)\n", "created_at": "2016-04-04 14:36:16", "user": 51246, "id": 205324897}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205561049", "text": ":+1: \n", "created_at": "2016-04-05 00:39:02", "user": 12301, "id": 205561049}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1319, "updated_at": "2016-04-05 05:16:13", "user": 1147484, "closed_at": "2016-04-05 05:16:13", "id": 145814148, "title": "Simple refactoring for Logger class", "url": "https://api.github.com/repos/ruby/ruby/issues/1319", "created_at": "2016-04-04 21:47:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/205647406", "text": "This change broke tests.\n", "created_at": "2016-04-05 05:16:13", "user": 12301, "id": 205647406}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A new method, Integer#mod_pow.\n\nx.mod_pow(a, m) -> (x**a) % m\n", "labels": [], "number": 1320, "updated_at": "2017-12-04 02:36:50", "user": 231367, "closed_at": "2017-12-04 02:36:50", "id": 145909428, "title": "Mod pow spike", "url": "https://api.github.com/repos/ruby/ruby/issues/1320", "created_at": "2016-04-05 07:10:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281593261", "text": "@metanest Could you write tests for the new feature?", "created_at": "2017-02-22 07:42:55", "user": 3959, "id": 281593261}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/337317341", "text": "mod pow often used for crypto, so may be it's better to use mpz_powm_sec?", "created_at": "2017-10-17 18:05:18", "user": 69933, "id": 337317341}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348434230", "text": "MEMO: The corresponding issue is https://bugs.ruby-lang.org/issues/12508", "created_at": "2017-12-01 08:34:00", "user": 3959, "id": 348434230}], "assignees": [3959, 3959], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add SSLCiphers option to webrick ssl.rb to allow specifying a cipher suite to be used\n", "labels": [], "number": 1321, "updated_at": "2016-04-22 01:51:49", "user": 7580747, "closed_at": "2016-04-22 01:51:49", "id": 146015568, "title": "Add SSLCiphers option to webrick ssl.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1321", "created_at": "2016-04-05 14:57:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1322, "updated_at": "2016-04-08 17:36:12", "user": 16700, "closed_at": "2016-04-08 17:36:12", "id": 146858771, "title": "Bignum rb cstr parse inum", "url": "https://api.github.com/repos/ruby/ruby/issues/1322", "created_at": "2016-04-08 08:34:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "i did some patch at memory bugs here win32/file.c\nmemory leak...\n\nCheers !\n", "labels": [], "number": 1323, "updated_at": "2016-04-10 07:08:46", "user": 732101, "closed_at": "2016-04-10 07:08:46", "id": 147194212, "title": "Fix memory bugs ", "url": "https://api.github.com/repos/ruby/ruby/issues/1323", "created_at": "2016-04-10 05:03:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1324, "updated_at": "2016-04-10 21:59:32", "user": 16700, "closed_at": "2016-04-10 21:59:08", "id": 147217235, "title": "Refine apply2files", "url": "https://api.github.com/repos/ruby/ruby/issues/1324", "created_at": "2016-04-10 11:36:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Remove redundant `==` check from docs\n- Add a note about making HTTPS GET requests\n\nMaking get request to HTTPS URIs has been fixed ever since v2.0.0 [#5545](https://bugs.ruby-lang.org/issues/5545). This commit documents the fix.\n", "labels": [], "number": 1325, "updated_at": "2016-04-22 02:27:40", "user": 1090020, "closed_at": "2016-04-22 02:27:40", "id": 147666577, "title": "Improve documentation for HTTPS GET requests", "url": "https://api.github.com/repos/ruby/ruby/issues/1325", "created_at": "2016-04-12 08:01:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1326, "updated_at": "2016-04-16 15:09:34", "user": 16700, "closed_at": "2016-04-16 15:09:34", "id": 147933994, "title": "Int round zero p", "url": "https://api.github.com/repos/ruby/ruby/issues/1326", "created_at": "2016-04-13 03:09:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Safe level 4 is obsolete since 2.1.\n", "labels": [], "number": 1327, "updated_at": "2016-04-22 01:44:01", "user": 212792, "closed_at": "2016-04-22 01:44:01", "id": 148511448, "title": "remove obsolete safe level checks", "url": "https://api.github.com/repos/ruby/ruby/issues/1327", "created_at": "2016-04-14 23:31:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A somewhat larger patch this time - especially the last two commits. Let me know if I should create an issue on the bug tracker.\n\nAlso: no new test-all failures/errors with VC6 and VC10 on WinXP SP3.\n", "labels": [], "number": 1328, "updated_at": "2016-05-01 11:43:15", "user": 212792, "closed_at": "2016-05-01 11:43:15", "id": 148512978, "title": "cleanup some Win9x/ME/NT4 support leftovers", "url": "https://api.github.com/repos/ruby/ruby/issues/1328", "created_at": "2016-04-14 23:41:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change to allow SSLCertName param to be entered on rackup command line. Then serve rails app https://localhost:3430/ with:\n\nrackup -p 3430 -r openssl -r webrick/https -O SSLEnable -O SSLCertName='CN=localhost'\n", "labels": [], "number": 1329, "updated_at": "2016-05-07 13:37:48", "user": 871958, "closed_at": "2016-05-07 13:37:48", "id": 148679262, "title": "Update ssl.rb to run https from command line", "url": "https://api.github.com/repos/ruby/ruby/issues/1329", "created_at": "2016-04-15 14:43:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found the bad article.\r\n", "labels": [], "number": 1330, "updated_at": "2017-10-06 00:16:58", "user": 3052342, "closed_at": "2016-04-22 01:02:33", "id": 149047224, "title": "Fix typo [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1330", "created_at": "2016-04-18 05:35:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [882822]}, "text": "- error.c (rb_exc_new, rb_exc_new_str): instantiate exception\n  object directly without Exception.new method call.\n\nRedefinition of class method `new` is outdated style, and\ninternal exception should not be affected by it.\n", "labels": [], "number": 1331, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 149657824, "title": "error.c: bypass Exception.new", "url": "https://api.github.com/repos/ruby/ruby/issues/1331", "created_at": "2016-04-20 04:45:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- error.c (rb_syntax_error_append): append each errors with\n  locations to the given SyntaxError instance.\n- error.c (syntax_error_failures): new method SyntaxError#failures\n  which returns each errors with locations.  [Feature #11868]\n", "labels": [], "number": 1332, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 149678538, "title": "SyntaxError location", "url": "https://api.github.com/repos/ruby/ruby/issues/1332", "created_at": "2016-04-20 07:04:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix allow to use URI with pipe marks inside\n", "labels": [], "number": 1333, "updated_at": "2016-04-24 18:55:01", "user": 8066152, "closed_at": "2016-04-24 18:55:01", "id": 150690318, "title": "New reserved char at URI regex", "url": "https://api.github.com/repos/ruby/ruby/issues/1333", "created_at": "2016-04-24 18:53:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix allow to use URI with pipe marks inside\n", "labels": [], "number": 1334, "updated_at": "2016-12-10 18:25:31", "user": 8066152, "closed_at": "2016-12-10 18:25:31", "id": 150690517, "title": "New reserved char at URI regex", "url": "https://api.github.com/repos/ruby/ruby/issues/1334", "created_at": "2016-04-24 18:56:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/214081068", "text": "Where is evidence to reserve `|` character? I can't found in https://www.ietf.org/rfc/rfc2732.txt\n", "created_at": "2016-04-25 01:14:41", "user": 12301, "id": 214081068}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use linear search with SSE2.\nhttp://labs.cybozu.co.jp/blog/mitsunari/20080416.FSIJ.pdf\n\nvm2_struct_big_href_hi and vm2_struct_big_href_lo looks 1.1x faster,\nbut there's not enough benchmarks...\n", "labels": [], "number": 1335, "updated_at": "2016-12-10 18:06:44", "user": 13423, "closed_at": "2016-12-10 18:06:44", "id": 150936109, "title": "[WIP] Use SSE2 for list_ids_bsearch", "url": "https://api.github.com/repos/ruby/ruby/issues/1335", "created_at": "2016-04-25 17:48:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1336, "updated_at": "2016-04-26 14:38:31", "user": 16700, "closed_at": "2016-04-26 14:38:31", "id": 151121555, "title": "Bug/11900 win32 -e encoding", "url": "https://api.github.com/repos/ruby/ruby/issues/1336", "created_at": "2016-04-26 12:32:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1337, "updated_at": "2016-04-28 06:55:35", "user": 16700, "closed_at": "2016-04-28 06:55:35", "id": 151560114, "title": "Win32 fix realloc threshold", "url": "https://api.github.com/repos/ruby/ruby/issues/1337", "created_at": "2016-04-28 06:32:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Dry up update hash code. \n", "labels": [], "number": 1338, "updated_at": "2016-04-28 08:03:50", "user": 882822, "closed_at": "2016-04-28 08:03:50", "id": 151571458, "title": "hash.c dry up hash update callback code", "url": "https://api.github.com/repos/ruby/ruby/issues/1338", "created_at": "2016-04-28 07:50:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The most recent version affected by this is 3.5 and was released in 2000.\n\nhttps://www.freebsd.org/releases/3.5R/announce.html\nhttps://en.wikipedia.org/wiki/History_of_FreeBSD#Version_history\n", "labels": [], "number": 1339, "updated_at": "2017-03-04 09:35:28", "user": 212792, "closed_at": "2016-05-14 01:08:09", "id": 152538754, "title": "drop FreeBSD < 4 support", "url": "https://api.github.com/repos/ruby/ruby/issues/1339", "created_at": "2016-05-02 11:51:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/216409372", "text": "Should we drop the support of older FreeBSD first?\n", "created_at": "2016-05-03 01:09:06", "user": 16700, "id": 216409372}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/216536434", "text": "@nobu: What do you mean? Maybe the title is misleading and I should have written `for FreeBSD < 4`?\n", "created_at": "2016-05-03 13:59:51", "user": 212792, "id": 216536434}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/217211598", "text": "Removing these lines causes test failures.\nThat is we do not support the older versions anymore.\n", "created_at": "2016-05-05 17:03:55", "user": 16700, "id": 217211598}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/217221526", "text": "@nobu Can you point us to the exact test failures this would cause?  I think `defined(__FreeBSD__) && __FreeBSD__ < 4` is always false when it's been over a decade since FreeBSD 3 reached its EOL.\n", "created_at": "2016-05-05 17:39:11", "user": 10236, "id": 217221526}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/217232163", "text": "I've updated the title and added a NEWS entry. Hopefully my intent is more clear now. If these changes causes tests to fail, I'll fix them. But I believe @knu is correct.\n", "created_at": "2016-05-05 18:19:08", "user": 212792, "id": 217232163}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/217317271", "text": "No specific tests may exist.\n\nOnly I found is the ChangeLog for 1.4.0:\n\n```\nSun Feb 14 12:47:48 1999  EGUCHI Osamu  <eguchi@shizuokanet.ne.jp>\n\n       * numeric.c (Init_Numeric): allow divide by zero on FreeBSD.\n```\n", "created_at": "2016-05-06 00:26:32", "user": 16700, "id": 217317271}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation shows two examples that if not read carefully it makes\nit look like that `detect` returns nil when find returns 35, because the\nformer has a range from 1 to 10 and the later from 1 to 100.\n\nHopefully you will agree that this will be more readable.\n", "labels": [], "number": 1340, "updated_at": "2016-05-05 23:17:02", "user": 136777, "closed_at": "2016-05-05 23:17:02", "id": 153195565, "title": "Adds more examples to the documentation of Enumerable#detect", "url": "https://api.github.com/repos/ruby/ruby/issues/1340", "created_at": "2016-05-05 09:13:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1341, "updated_at": "2016-05-08 10:27:11", "user": 16700, "closed_at": "2016-05-08 10:27:11", "id": 153276356, "title": "Random refactor", "url": "https://api.github.com/repos/ruby/ruby/issues/1341", "created_at": "2016-05-05 17:05:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1930]}, "text": "- lib/drb/timeridconv.rb: Provide a way to shutdown the timer thread.\n- test/drb/test_timeridconv.rb: Test for above\n\nFixes: https://bugs.ruby-lang.org/issues/12342\n\nTimerIdConv.new creates a Thread that never ends.\n\nPreviously, a client could would have do this to kill this thread:\n\n``` ruby\ntimer = DRb::TimerIdConv.new\n\n... # other DRb code\n\nthread = timer.instance_variable_get('@holder').instance_variable_get('@keeper')\nthread.kill\nThread.pass while thread.alive?\n```\n\nNow, we can do this:\n\n``` ruby\ntimer = DRb::TimerIdConv.new\n\n... # other DRb code\n\ntimer.shutdown\n```\n", "labels": [], "number": 1342, "updated_at": "2017-04-05 17:37:41", "user": 19339, "closed_at": "2017-04-05 17:37:36", "id": 153320040, "title": "lib/drb/timeridconv.rb: Provide a way to shutdown the timer thread.", "url": "https://api.github.com/repos/ruby/ruby/issues/1342", "created_at": "2016-05-05 20:37:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/291938489", "text": "This was fixed by removing the timer keeper in https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/55008 for https://bugs.ruby-lang.org/issues/12342", "created_at": "2017-04-05 17:37:36", "user": 19339, "id": 291938489}], "assignees": [33682, 33682], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For securerandom.rb.\n", "labels": [], "number": 1343, "updated_at": "2016-05-06 08:57:03", "user": 16700, "closed_at": "2016-05-06 08:57:03", "id": 153399259, "title": "Random.gen_random", "url": "https://api.github.com/repos/ruby/ruby/issues/1343", "created_at": "2016-05-06 08:04:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Let `Random#initialize` accept a `String` not only an `Integer`, so that `Random.raw_seed` works as well as `Random.new_seed`.\n", "labels": [], "number": 1344, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 153630469, "title": "random.c: initialize with string", "url": "https://api.github.com/repos/ruby/ruby/issues/1344", "created_at": "2016-05-08 02:25:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1345, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 153648275, "title": "Random.gen_random", "url": "https://api.github.com/repos/ruby/ruby/issues/1345", "created_at": "2016-05-08 10:29:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/webrick/httpservlet/cgihandler.rb (CGIRunner): make the\n  command an array without shell escapes, to get rid of potential\n  command execution injection.\n", "labels": [], "number": 1346, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 153685491, "title": "cgihandler.rb: array CGIRunner", "url": "https://api.github.com/repos/ruby/ruby/issues/1346", "created_at": "2016-05-09 00:18:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- `_filbuf`, `_flsbuf`, `enough_to_get()`,  `enough_to_put()` are unused since c15a74f3d0b31133c01a64334c6a660ad70fb442 / r50381\n- including `<stdio.h>` is unnecessary as `printf()`, etc. are not used\n", "labels": [], "number": 1347, "updated_at": "2018-02-23 03:07:11", "user": 212792, "closed_at": "None", "id": 153778913, "title": "remove unnecessary preprocessor directives (Windows)", "url": "https://api.github.com/repos/ruby/ruby/issues/1347", "created_at": "2016-05-09 13:42:12", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "(from COPYING)\n", "labels": [], "number": 1348, "updated_at": "2016-05-11 01:34:04", "user": 1112299, "closed_at": "2016-05-11 01:34:04", "id": 153925933, "title": "Remove trailing whitespace", "url": "https://api.github.com/repos/ruby/ruby/issues/1348", "created_at": "2016-05-10 05:21:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1349, "updated_at": "2016-05-21 02:19:19", "user": 94284, "closed_at": "2016-05-21 02:19:19", "id": 153978154, "title": "ipaddr: fix documentation of IN6MASK to mention IPv6", "url": "https://api.github.com/repos/ruby/ruby/issues/1349", "created_at": "2016-05-10 10:54:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I doubt [Atari ST](https://en.wikipedia.org/wiki/Atari_ST) support actually works or is wanted. It was discontinued more than two decades ago.\n", "labels": [], "number": 1350, "updated_at": "2017-03-04 09:31:52", "user": 212792, "closed_at": "2016-05-28 01:47:02", "id": 154072555, "title": "drop Atari ST support", "url": "https://api.github.com/repos/ruby/ruby/issues/1350", "created_at": "2016-05-10 18:17:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- util.c (ruby_qsort): use qsort_s if available, for Microsoft\n  Visual Studio 2005 (msvcr80.dll) and mingw.\n", "labels": [], "number": 1351, "updated_at": "2016-05-11 08:23:00", "user": 16700, "closed_at": "2016-05-11 08:23:00", "id": 154181214, "title": "use qsort_s if available", "url": "https://api.github.com/repos/ruby/ruby/issues/1351", "created_at": "2016-05-11 07:52:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Insure has a different meaning than ensure and we mean the latter in\nthis case.\n\n---\n\n_Ensure_ is to do or have what is necessary for success.\nExample: These blankets ensure that you’ll be warm enough.\n\n_Insure_ is to cover with an insurance policy.\nExample: I will insure my home with additional fire and flood policies.\n", "labels": [], "number": 1352, "updated_at": "2016-11-08 19:38:51", "user": 645514, "closed_at": "2016-11-08 19:38:51", "id": 154209735, "title": "Fix typo in code doc of proc.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1352", "created_at": "2016-05-11 10:24:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- random.c (random_s_seed): add an optionam parameter for least\n  precision to Random.new_seed with precision.  [Feature #12378]\n", "labels": [], "number": 1353, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 154754931, "title": "random.c: Random.new_seed with precision", "url": "https://api.github.com/repos/ruby/ruby/issues/1353", "created_at": "2016-05-13 16:47:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1354, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 154832034, "title": "extensible Random", "url": "https://api.github.com/repos/ruby/ruby/issues/1354", "created_at": "2016-05-14 03:35:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/219201261", "text": "I want to know the way to write an extension gem library using this new interface and supporting Ruby < 2.4.  What is the recommended way?\n\nAnd should I use `rb_path2class` to get Random::Base?\n", "created_at": "2016-05-14 05:10:39", "user": 3959, "id": 219201261}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/219257763", "text": "See `ext/random/chacha`, as an example.\n`rb_random_interface_t` is for the performance of `rb_random_ulong_limited` and so on.\nYou can make a `Random`-like class in the usual way, unless you mind the performance of `Array#shuffle` and `Array#sample` severely.\n", "created_at": "2016-05-14 23:43:57", "user": 16700, "id": 219257763}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1355, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 154832046, "title": "SecureRandom::ForkDetector", "url": "https://api.github.com/repos/ruby/ruby/issues/1355", "created_at": "2016-05-14 03:35:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1356, "updated_at": "2016-05-21 02:08:08", "user": 11257791, "closed_at": "2016-05-21 02:08:08", "id": 155039199, "title": "doc/syntax/methods.rdoc: add proper closing tag", "url": "https://api.github.com/repos/ruby/ruby/issues/1356", "created_at": "2016-05-16 14:19:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- thread.c (thread_start_func_2): report raised exception if\n  report_on_exception flag is set.  [Feature #6647]\n", "labels": [], "number": 1357, "updated_at": "2016-06-06 00:27:46", "user": 16700, "closed_at": "2016-06-06 00:27:46", "id": 155317362, "title": "Thread.report_on_exception", "url": "https://api.github.com/repos/ruby/ruby/issues/1357", "created_at": "2016-05-17 17:32:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/219812770", "text": "👍  Looks good!\n", "created_at": "2016-05-17 18:37:57", "user": 168854, "id": 219812770}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Versions of Ruby more recent than 1.9.3 appear to not generate documentation for ARGF.\n\nChanging a reference from `\"ARGF.class\"` to `\"ARGF\"` seems to restore rdoc’s ability to generate ARGF documentation.\n", "labels": [], "number": 1358, "updated_at": "2016-05-21 02:13:32", "user": 1063575, "closed_at": "2016-05-21 02:13:32", "id": 155628052, "title": "Restore documentation of ARGF", "url": "https://api.github.com/repos/ruby/ruby/issues/1358", "created_at": "2016-05-19 00:03:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/220332642", "text": "stop\n\nOn Wed, May 18, 2016 at 8:04 PM, Dan Martinez notifications@github.com\nwrote:\n\n> Version of Ruby more recent than 1.9.3 appear to not generate\n> documentation for ARGF.\n> \n> Changing a reference from \"ARGF.class\" to \"ARGF\" seems to restore rdoc’s\n> \n> ## ability to generate ARGF documentation.\n> \n> You can view, comment on, or merge this pull request online at:\n> \n>   https://github.com/ruby/ruby/pull/1358\n> Commit Summary\n> - Restore documentation of ARGF\n> \n> File Changes\n> - _M_ io.c https://github.com/ruby/ruby/pull/1358/files#diff-0 (2)\n> \n> Patch Links:\n> - https://github.com/ruby/ruby/pull/1358.patch\n> - https://github.com/ruby/ruby/pull/1358.diff\n> \n> —\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/ruby/ruby/pull/1358\n", "created_at": "2016-05-19 13:59:40", "user": 15209572, "id": 220332642}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [508128]}, "text": "This allows for:\n\n``` ruby\nirb(main)> {a: 1} + {b: 2} + {c: 3}\n=> {:a=>1, :b=>2, :c=>3}\n```\n\nThis is very useful when composing a bigger hash, i.e.: mapping an object.\n", "labels": [], "number": 1359, "updated_at": "2018-02-23 03:07:12", "user": 8156, "closed_at": "None", "id": 155776165, "title": "Add `+` operator to Hash as merge alias", "url": "https://api.github.com/repos/ruby/ruby/issues/1359", "created_at": "2016-05-19 16:10:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/220375840", "text": "Is there any particular reason for not having a `+` operator with that semantics in a Hash? It actually feels very natural to me to expect such behavior... Take an Array for instance:\n\n```\n[1, 2] + [3, 4]\n=> [1, 2, 3, 4]\n```\n", "created_at": "2016-05-19 16:17:43", "user": 508128, "id": 220375840}, {"reactions": {"+1": [8156, 9497, 7096667, 9787009, 4822049]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/220439914", "text": "I am neither a maintainer nor any other kind of authority, so feel free to disregard the following, but I suspect the reason is that a merge is not always an addition.\n\nIf I want to add a second array to an existing array, and the two have a non-empty intersection of elements, the result is well-defined:\n\n``` ruby\n[1, 2, 3] + [3, 4, 5]\n=> [1, 2, 3, 3, 4, 5]\n```\n\nWith two hashes whose intersection of keys is not empty, things aren’t so clear-cut. What should the following produce?\n\n``` ruby\n{a: 1, b: 2} + {b: 3, c: 4}\n```\n\nThe default, in `merge`, is for the second instance of `:b` to clobber the former, so:\n\n``` ruby\n=> {:a =>1, :b => 3, :c => 4 }\n```\n\nThat’s fine, but it means that the result isn’t really an addition. I think that preserving the distinction between addition and merging is useful, especially since an explicit `merge` lets you provide a block with which to resolve collisions as circumstances warrant. YMMV, of course.\n", "created_at": "2016-05-19 20:18:08", "user": 1063575, "id": 220439914}, {"reactions": {"+1": [8156]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/220450130", "text": "Very good points @hivehand. On a second thought addition and merge are indeed two distinct operations.\n", "created_at": "2016-05-19 20:58:16", "user": 508128, "id": 220450130}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222283006", "text": "Please submit your proposal to our tracker ( https://bugs.ruby-lang.org/issues/ ) for new feature.  We need to matz approval.\n", "created_at": "2016-05-28 01:28:40", "user": 12301, "id": 222283006}, {"reactions": {"hooray": [508128]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222290120", "text": "I believe there's already a feature request for this behavior\n", "created_at": "2016-05-28 04:50:40", "user": 277819, "id": 222290120}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228263857", "text": "@zzak No, We need to get approve from Matz on redmine tracker.\n", "created_at": "2016-06-24 05:53:45", "user": 12301, "id": 228263857}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228287532", "text": "@hsbt I mean, there is already a ticket for this right?\n", "created_at": "2016-06-24 08:28:18", "user": 277819, "id": 228287532}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228380597", "text": "This is the feature request. Other operators are discussed there: https://bugs.ruby-lang.org/issues/6225\n", "created_at": "2016-06-24 15:42:29", "user": 8156, "id": 228380597}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228577577", "text": "@zzak We only accept feature request of core class like `Hash` on redmine tracker. not github's one.\n\n@xjunior Please create issue ticket to redmine tracker, if you hope to add this function to ruby core. We never merge this without Matz approval.\n", "created_at": "2016-06-26 00:33:29", "user": 12301, "id": 228577577}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228578540", "text": "Would that work if I link this PR to that issue or does it have to be a new\none?\nOn Sat, Jun 25, 2016 at 9:34 PM SHIBATA Hiroshi notifications@github.com\nwrote:\n\n> @zzak https://github.com/zzak We only accept feature request of core\n> class like Hash on redmine tracker. not github's one.\n> \n> @xjunior https://github.com/xjunior Please create issue ticket to\n> redmine tracker, if you hope to add this function to ruby core. We never\n> merge this without Matz approval.\n> \n> —\n> You are receiving this because you were mentioned.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/ruby/ruby/pull/1359#issuecomment-228577577, or mute\n> the thread\n> https://github.com/notifications/unsubscribe/AAAf3EUlKnKUHAPdF6JLFaLvDrNr7AEYks5qPckAgaJpZM4IibIB\n> .\n", "created_at": "2016-06-26 01:06:55", "user": 8156, "id": 228578540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228582218", "text": "@hsbt Ahh yeah, I meant [this ticket](https://bugs.ruby-lang.org/issues/6225) that @xjunior mentioned.\n\nIt looks like matz already rejected this request, so we should close this one?\n\nIf they want to try to change matz mind they should propose a new ticket which resolves his concerns about hash collision.\n", "created_at": "2016-06-26 03:29:07", "user": 277819, "id": 228582218}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262256596", "text": "Do you think that throwing an exception if there's a collision would be a good solution to implement so it would be accepted ?", "created_at": "2016-11-22 14:36:44", "user": 4608579, "id": 262256596}, {"reactions": {"+1": [4608579, 509611]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262331361", "text": "You will need to propose it to matz on the redmine tracker", "created_at": "2016-11-22 18:56:05", "user": 9831, "id": 262331361}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Two minor typo fixes in the documentation for Date.\n", "labels": [], "number": 1360, "updated_at": "2016-05-20 13:22:34", "user": 3889656, "closed_at": "2016-05-20 13:22:34", "id": 155861260, "title": "Minor typo fixes in documentation for date_core", "url": "https://api.github.com/repos/ruby/ruby/issues/1360", "created_at": "2016-05-20 00:00:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "---\n\nbenchmark results:\nExecution time (sec)\n\n| name | normal | opt |\n| --- | --: | --: |\n| regexp_match_p_match_empty | 0.141 | 0.111 |\n| regexp_match_p_match_long | 3.941 | 3.864 |\n| regexp_match_p_match_short | 0.138 | 0.099 |\n| regexp_match_p_unmatch_long | 3.848 | 3.837 |\n| regexp_match_p_unmatch_short | 0.103 | 0.079 |\n\nSpeedup ratio: compare with the result of `normal' (greater is better)\n\n| name | opt |\n| --- | --: |\n| regexp_match_p_match_empty | 1.266 |\n| regexp_match_p_match_long | 1.020 |\n| regexp_match_p_match_short | 1.388 |\n| regexp_match_p_unmatch_long | 1.003 |\n| regexp_match_p_unmatch_short | 1.306 |\n", "labels": [], "number": 1361, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 155955272, "title": "[Feature #12403] optimize Regexp#match?", "url": "https://api.github.com/repos/ruby/ruby/issues/1361", "created_at": "2016-05-20 12:46:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- internal.h (rb_scan_args): inline for simple, only mandatory and\n  optional parameters.\n", "labels": [], "number": 1362, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 156131247, "title": "inline rb_scan_args", "url": "https://api.github.com/repos/ruby/ruby/issues/1362", "created_at": "2016-05-22 02:25:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "escapeHTML also escapes the single quote character (since Ruby 2.0)\n", "labels": [], "number": 1363, "updated_at": "2016-05-28 01:26:57", "user": 405202, "closed_at": "2016-05-28 01:26:57", "id": 156823804, "title": "Correct documentation of CGI::Util::escapeHTML", "url": "https://api.github.com/repos/ruby/ruby/issues/1363", "created_at": "2016-05-25 18:52:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix should make opening a TCP connection in Net::HTTP#connect more efficient since we won't have to spin up a `Timeout.timeout` thread each time we open a connection. Also, we avoid the race conditions inherent in the use of Timeout.timeout, as detailed by @headius at http://blog.headius.com/2008/02/ruby-threadraise-threadkill-timeoutrb.html\n", "labels": [], "number": 1364, "updated_at": "2016-05-31 18:13:13", "user": 1011417, "closed_at": "2016-05-28 18:28:46", "id": 156928825, "title": "Use connect_nonblock to open TCP connections in Net::HTTP#connect", "url": "https://api.github.com/repos/ruby/ruby/issues/1364", "created_at": "2016-05-26 08:16:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222322736", "text": "been dogfooding this fix in production, it has a couple issues, I'll open another pull request with the fixes and an issue on redmine this time\n", "created_at": "2016-05-28 18:28:46", "user": 1011417, "id": 222322736}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222737019", "text": "FWIW, JRuby currently does not spin up a timeout thread for each timeout call; instead, it inserts a job into a worker pool, scheduled to execute at the timeout time. If the timeout never fires, no thread ever picks up the job to run it.\n\nI will look forward to your further experiments, though :-) Reducing this overhead more would be worthwhile.\n", "created_at": "2016-05-31 16:06:09", "user": 10135, "id": 222737019}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222773079", "text": "Well that's good to know:) I've actually been running a very similar version of this code in production (with JRuby) since late January without any issues. The only issue in this pull request was that I had tried to clean up my code to make it match the style used to do nonblocking timeouts for SSL sockets later in the same method, and made a couple silly mistakes in doing so. I fixed those and have been running [https://github.com/ruby/ruby/pull/1369](https://github.com/ruby/ruby/pull/1369) in production since and that's been fine. \n\nBut, then I realized that on MRI Ruby I could call `connect_nonblock` with `exception: false` and handle things more efficiently, so I opened [https://github.com/ruby/ruby/pull/1370](https://github.com/ruby/ruby/pull/1370) and opened [this issue on redmine](https://bugs.ruby-lang.org/issues/12435). Unfortunately that code doesn't work on JRuby, I was planning on filing a bug report for that if my pull request gets accepted.\n", "created_at": "2016-05-31 18:13:13", "user": 1011417, "id": 222773079}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [264788]}, "text": "", "labels": [], "number": 1365, "updated_at": "2016-06-03 06:36:20", "user": 222942, "closed_at": "2016-06-03 06:36:20", "id": 156929817, "title": "configure: use PKG_PROG_PKG_CONFIG", "url": "https://api.github.com/repos/ruby/ruby/issues/1365", "created_at": "2016-05-26 08:23:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222360499", "text": "Thanks\n", "created_at": "2016-05-29 13:25:15", "user": 19619081, "id": 222360499}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223502177", "text": "We use `$PKG_CONFIG` to create `ruby.pc` on the build system, so don't want `$ac_tool_prefix`.\nAlso, we need `--print-errors` option but don't want to mind the exact minimum version.\n", "created_at": "2016-06-03 06:36:20", "user": 16700, "id": 223502177}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, `Marshal.dump` dumps numbers between 1073741824 and 4294967295 and between -4294967296 and -1073741825 as `Bignum` in environment where sizeof long is 8.\n\n```\nirb(main):001:0> Marshal.load(\"\\x04\\bi\\x04\\x00\\x00\\x00\\x40\")\n=> 1073741824\nirb(main):002:0> Marshal.dump(1073741824)\n=> \"\\x04\\bl+\\a\\x00\\x00\\x00@\"\nirb(main):003:0> Marshal.load(\"\\x04\\bi\\xfc\\x00\\x00\\x00\\x00\")\n=> -4294967296\nirb(main):004:0> Marshal.dump(-4294967296)\n=> \"\\x04\\bl-\\b\\x00\\x00\\x00\\x00\\x01\\x00\"\n```\n\nThis patch fixes to dump as `Fixnum`.\n\n```\nirb(main):001:0> Marshal.dump(1073741824)\n=> \"\\x04\\bi\\x04\\x00\\x00\\x00@\"\nirb(main):002:0> Marshal.dump(-4294967296)\n=> \"\\x04\\bi\\xfc\\x00\\x00\\x00\\x00\"\n```\n", "labels": [], "number": 1366, "updated_at": "2016-05-29 00:14:39", "user": 34205, "closed_at": "2016-05-29 00:14:39", "id": 157198803, "title": "Fix Marshal.dump to dump some numbers as Fixnum", "url": "https://api.github.com/repos/ruby/ruby/issues/1366", "created_at": "2016-05-27 12:45:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222335617", "text": "https://bugs.ruby-lang.org/issues/12434#change-58892\n\nhttps://github.com/ruby/spec/blob/master/core/marshal/dump_spec.rb#L40-L48\n", "created_at": "2016-05-29 00:14:38", "user": 34205, "id": 222335617}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without sorting the list explicitely, its order is indeterministic,\nbecause readdir() is also not deterministic.\nWhen the list of object files varies between builds, they are linked\nin a different order, which results in an unreproducible build.\n", "labels": [], "number": 1367, "updated_at": "2016-06-03 17:26:05", "user": 3106950, "closed_at": "2016-06-03 08:45:11", "id": 157285262, "title": "lib/mkmf.rb: sort list of object files in generated Makefile", "url": "https://api.github.com/repos/ruby/ruby/issues/1367", "created_at": "2016-05-27 20:30:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222357677", "text": "Can this fix please also be backported to the 2.3 branch?\n", "created_at": "2016-05-29 12:19:19", "user": 3106950, "id": 222357677}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223502486", "text": "What do you mean by \"an unreproducible build\"?\n", "created_at": "2016-06-03 06:38:22", "user": 16700, "id": 223502486}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223639555", "text": "@nobu I mean that the resulting binaries will not be bit-identical on different build runs, when the objects are not sorted.\nSee also https://reproducible-builds.org/ for more details.\n\nThis patch was already backported to Debian's ruby 2.3.\nThis change alone helped building about 40 additional packages reproducibly:\nSee the jump in the graph on 2016-05-30: https://tests.reproducible-builds.org/unstable/i386/stats_meta_pkg_state_maint_pkg-ruby-extras-maintainers.png\n", "created_at": "2016-06-03 17:20:55", "user": 3106950, "id": 223639555}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- test/ruby/test_file_exhaustive.rb (test_flock): add assertions\n  for the blocking cases.\n", "labels": [], "number": 1368, "updated_at": "2016-05-29 00:54:41", "user": 16700, "closed_at": "2016-05-29 00:54:41", "id": 157322869, "title": "test_file_exhaustive.rb: blocking flock", "url": "https://api.github.com/repos/ruby/ruby/issues/1368", "created_at": "2016-05-28 05:55:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix should make opening a TCP connection in Net::HTTP#connect more efficient since we won't have to spin up a Timeout.timeout thread each time we open a connection. Also, we avoid the race conditions inherent in the use of Timeout.timeout, as detailed at http://blog.headius.com/2008/02/ruby-threadraise-threadkill-timeoutrb.html\n", "labels": [], "number": 1369, "updated_at": "2016-05-28 19:34:56", "user": 1011417, "closed_at": "2016-05-28 19:34:56", "id": 157351522, "title": "Use connect_nonblock to open TCP connections in Net::HTTP#connect", "url": "https://api.github.com/repos/ruby/ruby/issues/1369", "created_at": "2016-05-28 18:36:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222325901", "text": "goddammit, found a better way, closing this and then implementing a better fix\n", "created_at": "2016-05-28 19:34:56", "user": 1011417, "id": 222325901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix should make opening a TCP connection in Net::HTTP#connect more efficient since we won't have to spin up a Timeout.timeout thread each time we open a connection. Also, we avoid the race conditions inherent in the use of Timeout.timeout, as detailed at http://blog.headius.com/2008/02/ruby-threadraise-threadkill-timeoutrb.html\n", "labels": [], "number": 1370, "updated_at": "2018-02-23 03:07:13", "user": 1011417, "closed_at": "None", "id": 157354013, "title": "Use connect_nonblock to open TCP connections in Net::HTTP#connect", "url": "https://api.github.com/repos/ruby/ruby/issues/1370", "created_at": "2016-05-28 19:40:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223731485", "text": "@nurse @tenderlove I did the same thing as PR https://github.com/ruby/ruby/pull/899 but for connecting the TCP socket, does this PR look ok to you guys? Works fine as far as I can tell\n\n(oh and fyi I opened an issue on redmine in case this needs discussion: https://bugs.ruby-lang.org/issues/12435)\n", "created_at": "2016-06-04 02:36:49", "user": 1011417, "id": 223731485}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This commit only yields the block if a block was given. The method already returns the path, but it is not possible to use without a block currently. This changes the function to be usable like this:\n\n``` ruby\npath = Dir::Tmpname.create(\"my-tmp-name)\n```\n\nCurrently the behavior is:\n\n``` ruby\npath = Dir::Tmpname.create(\"my-tmp-name\") {}\n```\n", "labels": [], "number": 1371, "updated_at": "2016-05-31 01:37:22", "user": 408570, "closed_at": "2016-05-30 17:39:17", "id": 157356501, "title": "Dir::Tmpname.create: Only yield if a block was given", "url": "https://api.github.com/repos/ruby/ruby/issues/1371", "created_at": "2016-05-28 20:54:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222329373", "text": "I think this falls under the \"small enough to be a GitHub PR\" /cc @zzak \n", "created_at": "2016-05-28 20:58:58", "user": 408570, "id": 222329373}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222343744", "text": "`Dir::Tmpname` is an undocumented feature.\nWhy do you want to use it?\n", "created_at": "2016-05-29 05:31:40", "user": 16700, "id": 222343744}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222374999", "text": "Hi @nobu,\n\nIt's useful when you want to create a persistent file that won't be GCed like Tempfile. This is especially useful on long-running processes or when shelling out to a subprocess. For example:\n1. Ruby renders a file\n2. Ruby spawns a subprocess that reads from that path\n\nWhen using Tempfile, unless you push the tempfile onto an unnecessary instance variable so it isn't GCed, it's possible that a GC will remove the tempfile before or while the subprocess is running.\n", "created_at": "2016-05-29 18:23:25", "user": 408570, "id": 222374999}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222501597", "text": "I'm worried that even this small behavior change could affect existing applicaitons, or specs, although I couldn't find any: https://github.com/ruby/spec/search?utf8=%E2%9C%93&q=tmpname\n\nThis is probably because, like nobu was saying, it's essentially private.\n\nIf this change doesn't break any specs then I think it should be fine.\n\nOne question, since this change technically makes it easier to keep a reference to tempfiles: Should we be worried about user accidentally leaking tempfiles assuming they will get GCed?\n\nWorking-around (by assigning to instance variable) could actually be worse since GC treats locals differently (assuming they are GCed first) while instance variables may live for 1 or 2 generations.\n\nIn that case, maybe this patch is better?\n", "created_at": "2016-05-30 14:15:21", "user": 277819, "id": 222501597}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222507495", "text": "You can use `Tempfile.create` **without** a block.\n", "created_at": "2016-05-30 14:46:14", "user": 16700, "id": 222507495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222508708", "text": "And, `Dir::Tmpname` does not guarantee the generated file is unique, but the block should.\nYour patch skips the check and may not create a unique file.\nI don't think it is useful even in your use case.\n", "created_at": "2016-05-30 14:52:54", "user": 16700, "id": 222508708}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222509462", "text": "Hi @nobu \n\nYou can't use `Tempfile.new` _with_ a block - the only way to create it is without a block (it throws a warning):\n\n``` ruby\n[2] pry(main)> Tempfile.new(\"foo\") do |f|\n[2] pry(main)*   f.write(\"hi\")\n[2] pry(main)* end\nTempfile.new doesn't call the given block.\n=> #<File:/var/folders/hq/mnms8w455qxgfvbcw7thydm40000gn/T/foo20160530-27629-8j2vdu>\n```\n\nEven if you use the Tempfile without a block, in our testing, that file is still GCed. Only `File.open` is preventing the file from being GCed.\n\n> And, `Dir::tmpname` does not guarantee the generated file is unique\n\nThank you for your reply, but I'm not sure I agree in reading the code. The `begin..rescue` block as a retry value. `path` is set outside of the call to yield, and then `path` is returned at the very end, so it goes through the same flow as if the block is given. There is a possible race condition where two simultaneous calls to `Tmpname.create` generate the same filename - yes, but I think that race exists with our without the block in this method, because this method doesn't actually create a file at that path. I don't think suppressing the block behavior changes the underlying functionality.\n", "created_at": "2016-05-30 14:57:04", "user": 408570, "id": 222509462}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222515318", "text": "I meant `Tempfile.create`, not `Tempfile.new`.\n", "created_at": "2016-05-30 15:29:40", "user": 16700, "id": 222515318}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222532626", "text": "Okay,\n\nSorry, but I don't really have time to argue about why I think this is a good change. If this is a private API, I would recommend documenting it as so. Thanks! 😄 \n", "created_at": "2016-05-30 17:39:16", "user": 408570, "id": 222532626}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/222574568", "text": "So it is marked as `:nodoc:`.\n", "created_at": "2016-05-31 01:37:22", "user": 16700, "id": 222574568}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request adds the `squiggly heredoc' syntax to ruby-mode.el of Emacs.\n\nThat syntax is supported at Ruby 2.3 but it doesn't seem to be support in currently ruby-mode.el of Emacs.\n", "labels": [], "number": 1372, "updated_at": "2016-06-03 09:37:51", "user": 13203, "closed_at": "2016-06-02 07:52:17", "id": 157930220, "title": "Support for `squiggly heredoc' syntax in ruby-mode.el", "url": "https://api.github.com/repos/ruby/ruby/issues/1372", "created_at": "2016-06-01 15:02:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223220693", "text": "Thank you, could you send the patch to Emacs upstream too?\n", "created_at": "2016-06-02 07:52:41", "user": 16700, "id": 223220693}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223261448", "text": "Unfortunately, I don't know how to send a patch to Emacs upstream. Would you please take care of it?\n", "created_at": "2016-06-02 11:07:31", "user": 13203, "id": 223261448}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223496122", "text": "Seems already fixed.\nhttp://git.savannah.gnu.org/cgit/emacs.git/commit/lisp/progmodes/ruby-mode.el?id=6a9399f7fd3ea6f4eaa0c6ceee92308553fadd39\n", "created_at": "2016-06-03 05:48:35", "user": 16700, "id": 223496122}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223535412", "text": "Thank you for your kindness.\nIt is a good opportunity to get to know Emacs upstream. Many Thanks.\n", "created_at": "2016-06-03 09:37:51", "user": 13203, "id": 223535412}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ruby.c (ruby_init_loadpath_safe): remove MAXPATHLEN restriction\n  for Windows 10.\n", "labels": [], "number": 1373, "updated_at": "2016-06-02 12:20:13", "user": 16700, "closed_at": "2016-06-02 12:20:13", "id": 158078040, "title": "ruby.c: no MAXPATHLEN for loadpath", "url": "https://api.github.com/repos/ruby/ruby/issues/1373", "created_at": "2016-06-02 07:42:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1374, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 158269878, "title": "Feature/win32 no maxpath", "url": "https://api.github.com/repos/ruby/ruby/issues/1374", "created_at": "2016-06-03 00:46:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removed unreachable pointer that was causing a used after free compiler warning.\n", "labels": [], "number": 1375, "updated_at": "2017-01-12 05:45:44", "user": 230310, "closed_at": "2017-01-12 05:45:27", "id": 158457481, "title": "Removed unreachable pointer", "url": "https://api.github.com/repos/ruby/ruby/issues/1375", "created_at": "2016-06-03 21:23:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223734543", "text": "What compiler?\n", "created_at": "2016-06-04 03:57:14", "user": 16700, "id": 223734543}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223757808", "text": "Clang. One of about 100 warnings. This one was an easy fix.\n", "created_at": "2016-06-04 14:12:40", "user": 230310, "id": 223757808}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223763745", "text": "I haven't seen them with clang \"4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)\", [\"Apple LLVM version 7.0.2 (clang-700.1.81)\"](http://rubyci.s3.amazonaws.com/osx1011/ruby-trunk/log/20160604T154501Z.log.html.gz#miniruby), and [\"FreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512\"](http://rubyci.s3.amazonaws.com/freebsd82-64/ruby-trunk/log/20160604T150301Z.log.html.gz#cc-version).\nDo you add any other options?\n", "created_at": "2016-06-04 16:09:38", "user": 16700, "id": 223763745}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223780507", "text": "I'm running a custom Clang build with all the alpha warnings enabled. It's going to be a C/C++ engine for CodeClimate. \n", "created_at": "2016-06-04 21:57:48", "user": 230310, "id": 223780507}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223784882", "text": "Could you show an actual warning?\n\nAnd what about this patch?\n\n``` diff\ndiff --git a/gc.c b/gc.c\nindex ebfb037..2c7e5be 100644\n--- a/gc.c\n+++ b/gc.c\n@@ -7666,8 +7666,23 @@ objspace_malloc_gc_stress(rb_objspace_t *objspace)\n     }\n }\n\n+#if RGENGC_CHECK_MODE >= 5\n+static void\n+objspace_malloc_increase_report(rb_objspace_t *objspace, void *mem, size_t new_size, size_t old_size, enum memop_type type)\n+{\n+    fprintf(stderr, \"increase - ptr: %p, type: %s, new_size: %d, old_size: %d\\n\",\n+       mem,\n+       type == MEMOP_TYPE_MALLOC  ? \"malloc\" :\n+       type == MEMOP_TYPE_FREE    ? \"free  \" :\n+       type == MEMOP_TYPE_REALLOC ? \"realloc\": \"error\",\n+       (int)new_size, (int)old_size);\n+}\n+#else\n+# define objspace_malloc_increase_report(objspace, mem, new_size, old_size, type) ((void)0)\n+#endif\n+\n static void\n-objspace_malloc_increase(rb_objspace_t *objspace, void *mem, size_t new_size, size_t old_size, enum memop_type type)\n+objspace_malloc_increase(rb_objspace_t *objspace, size_t new_size, size_t old_size, enum memop_type type)\n {\n     if (new_size > old_size) {\n    ATOMIC_SIZE_ADD(malloc_increase, new_size - old_size);\n@@ -7709,13 +7724,6 @@ objspace_malloc_increase(rb_objspace_t *objspace, void *mem, size_t new_size, si\n    atomic_sub_nounderflow(&objspace->malloc_params.allocated_size, dec_size);\n     }\n\n-    if (0) fprintf(stderr, \"increase - ptr: %p, type: %s, new_size: %d, old_size: %d\\n\",\n-          mem,\n-          type == MEMOP_TYPE_MALLOC  ? \"malloc\" :\n-          type == MEMOP_TYPE_FREE    ? \"free  \" :\n-          type == MEMOP_TYPE_REALLOC ? \"realloc\": \"error\",\n-          (int)new_size, (int)old_size);\n-\n     switch (type) {\n       case MEMOP_TYPE_MALLOC:\n    ATOMIC_SIZE_INC(objspace->malloc_params.allocations);\n@@ -7738,6 +7746,12 @@ objspace_malloc_increase(rb_objspace_t *objspace, void *mem, size_t new_size, si\n #endif\n }\n\n+#define MALLOC_INCREASE(mem, new_size, old_size, type, doit) do { \\\n+   objspace_malloc_increase_report(objspace, mem, new_size, old_size, type); \\\n+   doit; \\\n+   objspace_malloc_increase(objspace, new_size, old_size, type); \\\n+    } while (0)\n+\n static inline size_t\n objspace_malloc_prepare(rb_objspace_t *objspace, size_t size)\n {\n@@ -7781,7 +7795,7 @@ objspace_xmalloc0(rb_objspace_t *objspace, size_t size)\n     size = objspace_malloc_prepare(objspace, size);\n     TRY_WITH_GC(mem = malloc(size));\n     size = objspace_malloc_size(objspace, mem, size);\n-    objspace_malloc_increase(objspace, mem, size, 0, MEMOP_TYPE_MALLOC);\n+    MALLOC_INCREASE(mem, size, 0, MEMOP_TYPE_MALLOC, {});\n     return objspace_malloc_fixup(objspace, mem, size);\n }\n\n@@ -7842,7 +7856,7 @@ objspace_xrealloc(rb_objspace_t *objspace, void *ptr, size_t new_size, size_t ol\n     mem = (size_t *)mem + 1;\n #endif\n\n-    objspace_malloc_increase(objspace, mem, new_size, old_size, MEMOP_TYPE_REALLOC);\n+    MALLOC_INCREASE(mem, new_size, old_size, MEMOP_TYPE_REALLOC, {});\n\n     return mem;\n }\n@@ -7856,9 +7870,7 @@ objspace_xfree(rb_objspace_t *objspace, void *ptr, size_t old_size)\n #endif\n     old_size = objspace_malloc_size(objspace, ptr, old_size);\n\n-    free(ptr);\n-\n-    objspace_malloc_increase(objspace, ptr, 0, old_size, MEMOP_TYPE_FREE);\n+    MALLOC_INCREASE(ptr, 0, old_size, MEMOP_TYPE_FREE, free(ptr));\n }\n\n static void *\n@@ -7898,7 +7910,7 @@ objspace_xcalloc(rb_objspace_t *objspace, size_t count, size_t elsize)\n\n     TRY_WITH_GC(mem = calloc(1, size));\n     size = objspace_malloc_size(objspace, mem, size);\n-    objspace_malloc_increase(objspace, mem, size, 0, MEMOP_TYPE_MALLOC);\n+    MALLOC_INCREASE(mem, size, 0, MEMOP_TYPE_MALLOC, {});\n     return objspace_malloc_fixup(objspace, mem, size);\n }\n\n```\n", "created_at": "2016-06-04 23:55:49", "user": 16700, "id": 223784882}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223790219", "text": "I just suggested removing some dead code. That patch no longer calls \"free(ptr);\". \n\nApparently there is some undefined behavior in various C compilers with regards to realloc: http://www.open-std.org/jtc1/sc22/wg14/www/docs/dr_400.htm\n\nI would be cautious in changing the behavior without knowing the consequences on AIX and BSD. \n", "created_at": "2016-06-05 02:56:30", "user": 230310, "id": 223790219}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223802384", "text": "It's not a dead code, but for debugging.\nAnd it calls `free(ptr)`.\n\nAs for `realloc`, I don't get your point.\n`objspace_xrealloc()` never call `realloc()` if `ptr` is `NULL` or `new_size` is 0.\n", "created_at": "2016-06-05 09:34:26", "user": 16700, "id": 223802384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223802528", "text": "This is the expanded code by `clang -E`.\n\n``` C\nstatic void\nobjspace_xfree(rb_objspace_t *objspace, void *ptr, size_t old_size)\n{\n\n    old_size = objspace_malloc_size(objspace, ptr, old_size);\n\n    do { ((void)0); free(ptr); objspace_malloc_increase(objspace, 0, old_size, MEMOP_TYPE_FREE); } while (0);\n}\n```\n", "created_at": "2016-06-05 09:38:23", "user": 16700, "id": 223802528}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223803649", "text": "First of all, since the code uses the pointer value itself, but does not dereference it, that warning is false positive.\n", "created_at": "2016-06-05 10:08:21", "user": 16700, "id": 223803649}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/223977408", "text": "Ah, sorry I didn't notice the free(ptr) as the last argument to MALLOC_INCREASE().\n\nCorrect. The code doesn't reference ptr after it is free, it just prints the memory address held by it.\n\nMacro to eliminate the dead code works. Also, expanding the memory address of ptr into a string then passing the string would eliminate the use after free warning.\n\n``` C\n\n#if RGENGC_CHECK_MODE >= 5\n char debug_prefix[50];\n sprintf(debug_prefix, \"increase - ptr: %p, \", ptr)\n#else\n char debug_prefix[1];\n debug_prefix[0]='\\0';\n#endif\n```\n", "created_at": "2016-06-06 14:34:36", "user": 230310, "id": 223977408}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/272081537", "text": "Might as well close.", "created_at": "2017-01-12 05:45:27", "user": 230310, "id": 272081537}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (reg_named_capture_assign_iter): remove named capture\n  conflict warnings.  it is just annoying rather than useful.\n  [ruby-core:75416] [Bug #12359]\n", "labels": [], "number": 1376, "updated_at": "2016-06-13 11:50:49", "user": 16700, "closed_at": "2016-06-13 11:50:47", "id": 158844641, "title": "parse.y: no named capture conflict warnings", "url": "https://api.github.com/repos/ruby/ruby/issues/1376", "created_at": "2016-06-07 05:55:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\nTime.parse(\"2016-06-31T00:00:00+0900\")\n#=> 2016-07-01 00:00:00 +0900\n```\n\nIs this intentional? I expect this to raise `ArgumentError` since the argument date is invalid.\n", "labels": [], "number": 1377, "updated_at": "2016-06-08 12:43:25", "user": 3138447, "closed_at": "2016-06-08 12:42:36", "id": 158977291, "title": "Validate year and days correctly", "url": "https://api.github.com/repos/ruby/ruby/issues/1377", "created_at": "2016-06-07 17:16:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/224489742", "text": "This is a breaking change that requires some research on existing code and the impact, and I think this is a duplicate of what was proposed in https://bugs.ruby-lang.org/issues/9549.\n", "created_at": "2016-06-08 05:15:21", "user": 10236, "id": 224489742}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/224576943", "text": ">  I think this is a duplicate of what was proposed in https://bugs.ruby-lang.org/issues/9549.\n\nThat was true. I understood why this was kept like this. Thank you for your comment!\n", "created_at": "2016-06-08 12:42:36", "user": 3138447, "id": 224576943}], "assignees": [10538, 10538], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1378, "updated_at": "2016-10-05 15:05:04", "user": 59744, "closed_at": "2016-10-05 03:58:20", "id": 159219921, "title": "Add proper require for example to work", "url": "https://api.github.com/repos/ruby/ruby/issues/1378", "created_at": "2016-06-08 17:02:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225339240", "text": "Other examples (e.g., `UDPSocket.new`) don't seem having `require` too.\n", "created_at": "2016-06-11 06:00:53", "user": 16700, "id": 225339240}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/225605367", "text": "Updated with all the classes I could find, let me know if there are more that you think need the require.\n", "created_at": "2016-06-13 14:54:05", "user": 59744, "id": 225605367}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251702031", "text": "🚀  thanks!\n", "created_at": "2016-10-05 15:05:04", "user": 59744, "id": 251702031}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "hornored -> honored\n", "labels": [], "number": 1379, "updated_at": "2016-06-11 06:03:23", "user": 2488, "closed_at": "2016-06-11 06:03:23", "id": 159220417, "title": "Fix typo in string.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1379", "created_at": "2016-06-08 17:03:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`http://www.ruby-lang.org/ja/man/html/net_smtp.html` is dead link.\n", "labels": [], "number": 1380, "updated_at": "2016-06-11 06:20:17", "user": 3800237, "closed_at": "2016-06-11 06:20:17", "id": 159443103, "title": "Remove dead link on documentation for Japanese of SMTP", "url": "https://api.github.com/repos/ruby/ruby/issues/1380", "created_at": "2016-06-09 15:51:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR is for detailed and additional information about https://bugs.ruby-lang.org/issues/12484.\n", "labels": [], "number": 1381, "updated_at": "2016-11-13 10:06:08", "user": 243698, "closed_at": "2016-11-12 16:45:04", "id": 159829120, "title": "Optimizing Rational", "url": "https://api.github.com/repos/ruby/ruby/issues/1381", "created_at": "2016-06-12 14:04:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/239605247", "text": "Rebased and resolved conflict.\n", "created_at": "2016-08-13 06:23:45", "user": 243698, "id": 239605247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260132956", "text": "I've merged all of the commits in this PR into trunk with some modifications.\nThe commits exist between c05cfe37391e9fbe1d6825f893f9cd9c50403633 and b5be78c6bf27c668f174a90dd26a59eb11a5918f.\n", "created_at": "2016-11-12 16:45:04", "user": 3959, "id": 260132956}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260176867", "text": "Thank you very much!\n", "created_at": "2016-11-13 10:06:08", "user": 243698, "id": 260176867}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- include/ruby/backward.h (rb_cFixnum, rb_cBignum): remove the\n  backward compatibility macros, to fail incompatible extension\n  libraries earily.  [Bug #12427]\n", "labels": [], "number": 1382, "updated_at": "2016-06-14 14:44:58", "user": 16700, "closed_at": "2016-06-14 14:44:58", "id": 160086715, "title": "remove backward macros", "url": "https://api.github.com/repos/ruby/ruby/issues/1382", "created_at": "2016-06-14 02:51:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- thread.c (debug_deadlock_check): fix format specifier for\n  thread_id, which may not be a pointer, nor even a scalar value.\n", "labels": [], "number": 1383, "updated_at": "2016-06-15 01:47:41", "user": 16700, "closed_at": "2016-06-15 01:47:41", "id": 160245881, "title": "thread.c: fix thread_id formatting", "url": "https://api.github.com/repos/ruby/ruby/issues/1383", "created_at": "2016-06-14 18:03:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- include/ruby/ruby.h (T_INTEGER, RB_TYPE_P): add pseudo value\n  type for Integer.\n- error.c (rb_check_type): ditto.\n", "labels": [], "number": 1384, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 160835534, "title": "Add T_INTEGER for Integer", "url": "https://api.github.com/repos/ruby/ruby/issues/1384", "created_at": "2016-06-17 08:18:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "New `Check_Type_Of` macro similar to `Check_Type` macro, with the variable name in the error message.\n", "labels": [], "number": 1385, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 160835774, "title": "Check_Type_Of", "url": "https://api.github.com/repos/ruby/ruby/issues/1385", "created_at": "2016-06-17 08:20:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For HTTP requests that contain an `X-Forwarded-Proto` header with multiple values (i.e. https, http), webrick responds with a 400 error (**bad URI `/'.**),  since it is trying parse a URI when the scheme was set to the entire value of that header.  \n\nFor example:\n\n```\n $ ruby -run -e httpd . -p 8080\n```\n\n```\n$ curl localhost:8080 -H \"X-Forwarded-Proto: http, https\"\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n<HTML>\n  <HEAD><TITLE>Bad Request</TITLE></HEAD>\n  <BODY>\n    <H1>Bad Request</H1>\n    bad URI `/'.\n    <HR>\n    <ADDRESS>\n     WEBrick/1.3.1 (Ruby/2.3.1/2016-04-26) at\n     evilcorp.local:8080\n    </ADDRESS>\n  </BODY>\n</HTML>\n\n```\n\nThis PR is a small fix to use the first value in `X-Forwarded-Proto`, if header contains multiple values.\n", "labels": [], "number": 1386, "updated_at": "2016-06-21 10:33:09", "user": 405082, "closed_at": "2016-06-21 10:33:09", "id": 161000914, "title": "Fix webrick handling of X-Forwarded-Proto header with multiple values", "url": "https://api.github.com/repos/ruby/ruby/issues/1386", "created_at": "2016-06-18 01:42:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/227050949", "text": "Are multiple values allowed in `X-Forwarded-Proto`?\nAnd, isn't [RFC7239](http://tools.ietf.org/html/rfc7239) preferred now?\nhttps://github.com/ruby/ruby/compare/trunk...nobu:feature/webrick-rfc7239\n", "created_at": "2016-06-20 05:03:24", "user": 16700, "id": 227050949}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/227056864", "text": "Hi @nobu \nFrom what I have seen in practice, I have encountered cases where load balancers (AWS ELBs), proxy servers can \"add\" to the list. \n\nI have also seen (although anecdotely) other issues in Github related to the topic:\nhttps://github.com/aspnet/BasicMiddleware/issues/18\nhttps://github.com/deis/deis/issues/4997\n\nUnfortunately these X-Forwarded-\\* headers are experimental and just defacto, not in an RFC.  I agree that a standard should be preferred, however X-Forwarded-\\* is still unfortunately widely used.\n\nIn my actual use-case with Cloud Foundry and the \"route services\" feature we implemented, \nwe have cases where a request comes in through AWS ELB, into our reverse proxy,then we may route the request to a \"route service\" before routing to the original app.\nIn this scenario the request will go through our ELB twice, and the X-Forward-Proto has multiple comma separated values.\n\nCheers\n", "created_at": "2016-06-20 06:03:48", "user": 405082, "id": 227056864}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1387, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 161117449, "title": "Support RFC 7239", "url": "https://api.github.com/repos/ruby/ruby/issues/1387", "created_at": "2016-06-20 05:04:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1388, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 161360188, "title": "win32 F_GETFL", "url": "https://api.github.com/repos/ruby/ruby/issues/1388", "created_at": "2016-06-21 06:41:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228611722", "text": "Is this practically removing magic numbers?\n", "created_at": "2016-06-26 17:17:11", "user": 9064062, "id": 228611722}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228613151", "text": "What \"magic numbers\"?\n", "created_at": "2016-06-26 17:48:11", "user": 16700, "id": 228613151}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Update #2\n", "labels": [], "number": 1389, "updated_at": "2016-06-21 13:39:54", "user": 16410361, "closed_at": "2016-06-21 13:39:54", "id": 161437744, "title": "Merge pull request #2 from ruby/trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/1389", "created_at": "2016-06-21 13:32:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/227442499", "text": "Sorry wrong pull request\n", "created_at": "2016-06-21 13:39:51", "user": 16410361, "id": 227442499}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In `bin/erb` there are times a char (`'n'` for example) is represented as `?n` and othertimes as `'n'`. I changed all occurrences to `?n` for consistency. \n", "labels": [], "number": 1390, "updated_at": "2016-06-26 17:15:53", "user": 9064062, "closed_at": "2016-06-24 05:25:22", "id": 161523400, "title": "In bin/erb keeping 'c' vs. ?c consistent", "url": "https://api.github.com/repos/ruby/ruby/issues/1390", "created_at": "2016-06-21 19:47:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228260885", "text": "It seems no advantage for me.\n", "created_at": "2016-06-24 05:25:22", "user": 12301, "id": 228260885}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228611653", "text": "I just don't love inconsistency in code but it's not a real big issue. \n", "created_at": "2016-06-26 17:15:53", "user": 9064062, "id": 228611653}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1391, "updated_at": "2016-06-24 05:25:02", "user": 464687, "closed_at": "2016-06-24 05:25:02", "id": 161832124, "title": "Add quirks mode documentation for JSON.parse", "url": "https://api.github.com/repos/ruby/ruby/issues/1391", "created_at": "2016-06-23 03:19:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/228260837", "text": "Please submit upstream repository https://github.com/flori/json at first.\n", "created_at": "2016-06-24 05:25:01", "user": 12301, "id": 228260837}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1392, "updated_at": "2016-06-26 07:43:55", "user": 778015, "closed_at": "2016-06-26 07:43:55", "id": 162316715, "title": "Ruby 2 2", "url": "https://api.github.com/repos/ruby/ruby/issues/1392", "created_at": "2016-06-26 07:43:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1147484]}, "text": "", "labels": [], "number": 1393, "updated_at": "2016-06-28 00:57:11", "user": 28232, "closed_at": "2016-06-28 00:57:11", "id": 162442980, "title": "Fix typo in RDoc", "url": "https://api.github.com/repos/ruby/ruby/issues/1393", "created_at": "2016-06-27 12:43:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- lib/pstore.rb (PStore::CHECKSUM_ALGO): find available hashing\n  algorithm for checksum.  [Feature #6943]\n", "labels": [], "number": 1394, "updated_at": "2016-09-28 14:15:09", "user": 16700, "closed_at": "2016-09-28 14:15:09", "id": 162694242, "title": "PStore: select checksum algorithm", "url": "https://api.github.com/repos/ruby/ruby/issues/1394", "created_at": "2016-06-28 14:05:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ref. https://bugs.ruby-lang.org/issues/12542\n", "labels": [], "number": 1395, "updated_at": "2016-07-05 11:50:22", "user": 12301, "closed_at": "2016-07-05 11:50:22", "id": 163517983, "title": "Bump version to json-2.0.1", "url": "https://api.github.com/repos/ruby/ruby/issues/1395", "created_at": "2016-07-02 13:12:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- numeric.c (flo_round): [EXPERIMENTAL] adjust the case that the\n  receiver is close to the exact but unrepresentable middle value\n  of two values in the given precision.\n  http://d.hatena.ne.jp/hnw/20160702\n", "labels": [], "number": 1398, "updated_at": "2016-07-07 08:28:56", "user": 16700, "closed_at": "2016-07-07 08:28:55", "id": 164208495, "title": "numeric.c: round nearly middle value", "url": "https://api.github.com/repos/ruby/ruby/issues/1398", "created_at": "2016-07-07 01:08:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "PR for https://bugs.ruby-lang.org/issues/12573\n", "labels": [], "number": 1399, "updated_at": "2018-02-23 03:07:14", "user": 1298231, "closed_at": "None", "id": 164423293, "title": "Create Process.exists? #12573", "url": "https://api.github.com/repos/ruby/ruby/issues/1399", "created_at": "2016-07-07 22:40:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/231248444", "text": "- What happens when we pass zero to it?\n- What about negative numbers?\n", "created_at": "2016-07-08 00:49:00", "user": 15377, "id": 231248444}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/231367737", "text": "Thank you very much for the feedback! I'll work on it and come back for the next round of comments.\n", "created_at": "2016-07-08 14:03:53", "user": 1298231, "id": 231367737}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/231376032", "text": "@shyouhei: It should behave the same as if the 0 or negative pid were passed to `Process.kill 0, pid` directly. Slightly modifying the docs for kill, the current behavior would be specified as:\n\n> Checks the existence of the specified process id if pid is positive. If pid is zero, all processes whose group ID is equal to the group ID of the process are checked.\n\nThe behavior for a negative number is defined by the Unix kill docs as:\n\n> If pid is -1, sig shall be sent to all processes (excluding an unspecified set of system processes) for which the process has permission to send that signal.\n> If pid is negative, but not -1, sig shall be sent to all processes (excluding an unspecified set of system processes) whose process group ID is equal to the absolute value of pid, and for which the process has permission to send a signal.\n\nWe can define an out of range type error if 0 or negative, since this doesn't really make sense in the case of `exist?`. I'm not sure what the right decision is here, please let me know what you think.\n", "created_at": "2016-07-08 14:35:08", "user": 1298231, "id": 231376032}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/231384900", "text": "I've updated the PR to fix this round of comments. If there are more comments, I'll address them, otherwise, what else should I do to get this decided upon?\n\nThanks!\n", "created_at": "2016-07-08 15:07:41", "user": 1298231, "id": 231384900}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/231531594", "text": "I've updated the code per your latest comments. Thanks!\n", "created_at": "2016-07-09 12:15:20", "user": 1298231, "id": 231531594}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/292985749", "text": "The `kill` method currently does not check whether the process you are signaling is defunct or not, this follows the behavior of the c lib and kill application to succeed on signaling defunct processes.\r\n\r\nLetting `exists?` return `true` for defunct processes however seems dangerous to me, nothing about the process is in existence except its entry in the process table. Using it to check if monitored processes are still alive would fail to restart defunct processes. \r\n\r\nWe suspect that this actually is the reason why the daemons gem (which uses the `kill(0, pid)` idiom) fails to gracefully restart job workers for us, but we are still investigating.", "created_at": "2017-04-10 15:30:25", "user": 123905, "id": 292985749}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1400, "updated_at": "2016-10-06 01:54:04", "user": 789577, "closed_at": "2016-10-06 01:54:04", "id": 164924661, "title": "Add reduce/inject alias note to enum.c docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1400", "created_at": "2016-07-11 20:18:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Set method `Object#is_a?` as alias for `Object#kind_of?`\n", "labels": [], "number": 1401, "updated_at": "2018-02-17 23:33:07", "user": 6443532, "closed_at": "2018-02-17 23:33:04", "id": 166871886, "title": "Object#is_a? as alias for Object#kind_of?", "url": "https://api.github.com/repos/ruby/ruby/issues/1401", "created_at": "2016-07-21 17:15:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- gc.c (run_finalizer): report error occurred in finalizer.\n", "labels": [], "number": 1402, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 166926351, "title": "gc.c: error in finalizer", "url": "https://api.github.com/repos/ruby/ruby/issues/1402", "created_at": "2016-07-21 21:51:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [3117356]}, "text": "", "labels": [], "number": 1403, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 167504624, "title": "[Feature #12624] !== operator", "url": "https://api.github.com/repos/ruby/ruby/issues/1403", "created_at": "2016-07-26 01:56:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- ext/win32/resolv/resolv.c (get_dns_server_list): [Win32] get DNS\n  servers only for connected network devices by GetNetworkParams\n  API.  [Bug #12604]\n", "labels": [], "number": 1404, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 168010263, "title": "win32/resolv: get_dns_server_list", "url": "https://api.github.com/repos/ruby/ruby/issues/1404", "created_at": "2016-07-28 04:11:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rename all old rb_funcall2  to rb_funcallv. Got a better clean code.\n", "labels": [], "number": 1405, "updated_at": "2016-08-16 01:03:39", "user": 1732373, "closed_at": "2016-08-16 01:03:39", "id": 168256509, "title": "rename all rb_funcall2 to rb_funcallv", "url": "https://api.github.com/repos/ruby/ruby/issues/1405", "created_at": "2016-07-29 06:00:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/236103802", "text": "![screenshot from 2016-07-29 14 21 08](https://cloud.githubusercontent.com/assets/1732373/17239590/cfbc297a-5597-11e6-8a05-75d8a7afabf3.png)\nThis failed because the test gem use the rb_funcall2. \n", "created_at": "2016-07-29 06:21:42", "user": 1732373, "id": 236103802}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/239974385", "text": "This is duplicated issue with https://github.com/ruby/ruby/pull/1406\n", "created_at": "2016-08-16 01:03:39", "user": 12301, "id": 239974385}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rename all old rb_funcall2 to rb_funcallv. Got a better clean code.\nHas some gem c code userb_funcall2. keep the rb_funcall2 marco define.\n", "labels": [], "number": 1406, "updated_at": "2016-07-29 11:57:58", "user": 1732373, "closed_at": "2016-07-29 11:57:58", "id": 168260582, "title": "rename all rb_funcall2 to rb_funcallv", "url": "https://api.github.com/repos/ruby/ruby/issues/1406", "created_at": "2016-07-29 06:40:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [193936, 17576855, 1147484]}, "text": "Just modified `a HTML` to `an HTML` .\n", "labels": [], "number": 1407, "updated_at": "2016-08-16 02:19:36", "user": 13203, "closed_at": "2016-08-16 02:19:36", "id": 168845458, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1407", "created_at": "2016-08-02 09:59:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- enum.c (enum_sort_by): add optional argument for order.\n  [Feature #12648]\n", "labels": [], "number": 1408, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 169027789, "title": "enum.c: sort_by order", "url": "https://api.github.com/repos/ruby/ruby/issues/1408", "created_at": "2016-08-03 01:36:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Provide a value to use in the event a field does not exist in your OpenStruct.\n\n``` ruby\nrequire 'ostruct' \n\nperson = OpenStruct.new('name' => 'John Smith', 'age' => 70)\n\nperson.delete_field('number') { 8675_309 } \n# => 8675309\n```\n", "labels": [], "number": 1409, "updated_at": "2018-02-23 03:07:14", "user": 5303827, "closed_at": "None", "id": 169495803, "title": "Fallback value to OpenStruct delete_field", "url": "https://api.github.com/repos/ruby/ruby/issues/1409", "created_at": "2016-08-04 23:18:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237717141", "text": "I'm not against it, but I'm wondering if there's a particular use case (compared to `delete_field('foo') || value`)?\n", "created_at": "2016-08-04 23:34:45", "user": 33770, "id": 237717141}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237723140", "text": "With a bit more thought, given the nature of `OpenStruct`, I'm not sure that it's a good idea to make a difference between a member being defined and `nil` and one not being defined. In particular, there is no method `fetch` on `OpenStruct`, so I really wonder why `delete_field` would give access to that distinction.\n", "created_at": "2016-08-05 00:14:39", "user": 33770, "id": 237723140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237725369", "text": "`delete_field('foo') || value` won't work. The current handling of a missing field is to rescue NameError and then re-raise NameError with a custom message. To recover you would also have to rescue. This, seems to me, provides a cleaner solution, if desired.\n", "created_at": "2016-08-05 00:30:45", "user": 5303827, "id": 237725369}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237756490", "text": "Oh, right, my bad. So I guess the equivalent would be\n\n```\nresult = person['number'] ||= 8675_309\nperson.delete_field 'number'\n```\n\nStill, the question remains, what is the use case?\n", "created_at": "2016-08-05 05:09:10", "user": 33770, "id": 237756490}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237922009", "text": "I currently use it in conjunction with `optparse`.  \n\nOptionParser does not have a mechanism for required parameter.\n\n``` ruby\nopts.on(\"-r\", \"--required\", \"This is required with no way to enforce it\") { |o| options.required = o }\n```\n\nSo, what I might currently have to do is this:\n\n``` ruby\nbegin \n  required = options.delete_field(:required)\nrescue NameError \n  raise MyCustomErrorClass, \"You failed to supply required information\"\nend \n```\n\nSince the `NameError` has already been rescued in the `delete_field` method, by supplying a block I can skip rescuing OpenStructs customized NameError and just raise my own. \n\n``` ruby\nrequired = options.delete_field(:required) do \n  raise MyCustomErrorClass, \"You failed to supply required information\"\nend\n```\n\nAlso, if there is no field set for some information that you can supply a basic value for, this:\n\n``` ruby\nfoo = options.delete_field(:foo) { 'some foo value' }\n```\n\nis much more convenient than this:\n\n```\nfoo = if options.respond_to?(:foo) \n            options.delete_field(:foo)\n          else\n            'some foo value'\n          end \n```\n\nor \n\n``` ruby\nfoo = options.foo ||= 'some foo value' \noptions.delete_field(:foo)\n```\n\nI should point out that if a field is set, this change will not affect it, even if the value for the field is nil. \n\n``` ruby\nperson = OpenStruct.new('name' => 'John Smith', 'age' => 70, 'address' => nil)\n\naddress = person.delete_field(:address) { '1600 Pennsylvania Ave' }\n# => nil \n```\n\nSo it is not equivalent to the example above,  `nil` might be an acceptable result.\n\n``` ruby\naddress = person['address'] ||= '1600 Pennsylvania Ave'\n# => '1600 Pennsylvania Ave' \n```\n\nObviously there are already ways to deal with the situations I am presenting, but, I feel, with this change it provides a simpler, more efficient means to achieve that result with no negative impact.\n", "created_at": "2016-08-05 18:09:25", "user": 5303827, "id": 237922009}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237933179", "text": "Thanks for the examples. Why do you need to call `delete_field`? The first example could simply be\n\n```\noptions[:required] ||  raise MyCustomErrorClass, \"You failed to supply required information\"\n```\n\nAnd why is options an `OpenStruct` instead of a `Hash`?\n", "created_at": "2016-08-05 18:52:29", "user": 33770, "id": 237933179}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/237954213", "text": "I'm using an `OpenStruct` instead of a `Hash` because I prefer the dot notation. \n\n``` ruby\noptions.thing   = true \noptions[:thing] = true\n```\n\nI need to use `delete_field` because if the information does exist it needs to be removed from the structure. Eventually it will be turned into a `Hash` and shoved into a database. \n\n``` ruby\nrequired = options.delete_field(:required) do \n  raise MyCustomErrorClass, \"You failed to supply required information\"\nend\n\nthings = options.delete_field(:thing) { 'value' } \n\noptions.table_data ||= \"some table data\"\n\n# delete more fields/manipulate data...\n\nmy_database_thing = MyDatabaseThing.create(options.to_h)\n```\n\nI initially expected `OpenStruct` to behave more like a `Hash`. \n\n``` ruby\nhash_options = Hash.new\n\nrequired = hash_options.delete(:required) do \n  raise MyCustomErrorClass, \"You failed to supply required information\"\nend\n# => MyCustomErrorClass: You failed to supply required information\n\n# OpenStruct current implementation\nrequired = options.delete_field(:required) do \n  raise MyCustomErrorClass, \"You failed to supply required information\"\nend\n# => NameError: no field `required' in #<OpenStruct>\n\n\nfoo = hash_options.delete(:foo) { 'some foo value' }\n# => \"some foo value\"\n```\n\nArrays behave in this same fashion. \n\n``` ruby\na = Array.new \n\nfoo = a.delete(:foo) { 'some foo value' }\n# => \"some foo value\"\n\nfoo = a.delete(:foo) do |value|\n  raise MyCustomErrorClass, \"no such value #{value} in array\"\nend \n# => MyCustomErrorClass: no such value foo in array\n```\n\nThus, the proposed change brings `OpenStruct` more inline with what is common for other basic Ruby data structures. Taking it a step further and not raising a `NameError` and returning `nil` would make it even more uniform.\n", "created_at": "2016-08-05 20:25:47", "user": 5303827, "id": 237954213}], "assignees": [33770, 33770], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (command_asgn, arg): fix syntax errors with chained\n  assignment with op assign.  [Bug #12669]\n", "labels": [], "number": 1410, "updated_at": "2016-08-13 02:13:07", "user": 16700, "closed_at": "2016-08-13 02:13:07", "id": 170605348, "title": "parse.y: chained assignments", "url": "https://api.github.com/repos/ruby/ruby/issues/1410", "created_at": "2016-08-11 09:35:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "tiny suggestion\n", "labels": [], "number": 1411, "updated_at": "2016-10-05 09:03:45", "user": 20273188, "closed_at": "2016-10-05 09:03:45", "id": 171575426, "title": "Improve document readability", "url": "https://api.github.com/repos/ruby/ruby/issues/1411", "created_at": "2016-08-17 05:10:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- parse.y (primary): allow parenthesised statement as a method\n  argument.  [Feature #12686]\n", "labels": [], "number": 1412, "updated_at": "2016-08-19 02:41:26", "user": 16700, "closed_at": "2016-08-19 02:41:26", "id": 171826230, "title": "parse.y: lparen_arg statement", "url": "https://api.github.com/repos/ruby/ruby/issues/1412", "created_at": "2016-08-18 06:21:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "…ory, original pointer is lost. Consider assigning realloc() to a temporary pointer.\n\nDetails: http://www.viva64.com/en/examples/V701/\n", "labels": [], "number": 1413, "updated_at": "2017-02-21 23:02:33", "user": 112516, "closed_at": "2016-08-18 16:44:14", "id": 171905085, "title": "V701. realloc() possible leak: when realloc() fails in allocating mem…", "url": "https://api.github.com/repos/ruby/ruby/issues/1413", "created_at": "2016-08-18 13:47:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/240783634", "text": "Really is not error, just code style.\n", "created_at": "2016-08-18 16:44:31", "user": 112516, "id": 240783634}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "…ullptr.\n\nDetails: http://www.viva64.com/en/b/0414/#ID0EQ1CI\n", "labels": [], "number": 1414, "updated_at": "2018-02-23 03:07:15", "user": 112516, "closed_at": "None", "id": 171947267, "title": "V595 The 'bind' pointer was utilized before it was verified against n…", "url": "https://api.github.com/repos/ruby/ruby/issues/1414", "created_at": "2016-08-18 16:42:42", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- string.c (rb_fs_setter): check and convert $; value at assignment.\n", "labels": [], "number": 1415, "updated_at": "2016-08-23 01:16:41", "user": 16700, "closed_at": "2016-08-23 01:16:41", "id": 172493686, "title": "string.c: rb_fs_setter", "url": "https://api.github.com/repos/ruby/ruby/issues/1415", "created_at": "2016-08-22 16:15:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- test/rubygems/test_gem_remote_fetcher.rb (new_fetcher): fix FD\n  leak.  close unused fetcher before creating new instance.\n", "labels": [], "number": 1416, "updated_at": "2016-12-10 18:00:09", "user": 16700, "closed_at": "2016-12-10 18:00:09", "id": 172607601, "title": "test_gem_remote_fetcher.rb: fix FD leak", "url": "https://api.github.com/repos/ruby/ruby/issues/1416", "created_at": "2016-08-23 04:00:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While there is a heredoc for `` there is no heredoc for //.\n\nFor consistency sake I have added heredoc support for `<</HEREDOC/flags`.\n\nThere are very few tests for `<<\\`HEREDOC`` and so I did not add many tests for the regexp version.\n", "labels": [], "number": 1417, "updated_at": "2016-08-24 08:06:41", "user": 99491, "closed_at": "2016-08-24 08:06:41", "id": 172655086, "title": "Add regex heredoc for consistency.", "url": "https://api.github.com/repos/ruby/ruby/issues/1417", "created_at": "2016-08-23 09:42:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/241705523", "text": "Please file a feature request at https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new\n", "created_at": "2016-08-23 11:43:25", "user": 16700, "id": 241705523}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There is a feature request open at: https://bugs.ruby-lang.org/issues/12700\n\nThis pull request adds regular expression heredocs to Ruby.\n\n``` ruby\nso /match\\s # first \nthese\\s       #second\nwords         # last\n/x\n```\n\ncan be replaced with\n\n```\n<</HEREDOC/x\nmatch\\s # first \nthese\\s       #second\nwords         # last\nHEREDOC\n\nthe '-' and '~' indentation works and switches can be applied.\n\nThe 'x' switch should be used in most cases.  There is a trailing `\\n` applied as in the string heredoc.\n\n```\n", "labels": [], "number": 1418, "updated_at": "2018-02-23 03:07:16", "user": 99491, "closed_at": "None", "id": 173261400, "title": "Add Regexp Heredoc support", "url": "https://api.github.com/repos/ruby/ruby/issues/1418", "created_at": "2016-08-25 17:19:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242875842", "text": "Please rebase.\nI wish it would be simpler now.\n", "created_at": "2016-08-26 23:29:49", "user": 16700, "id": 242875842}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242976845", "text": "I have simplified the code, added new tests, removed a bug, and made the documentation more generic.\n", "created_at": "2016-08-28 14:09:14", "user": 99491, "id": 242976845}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"hooray": [990485, 576701, 6765108, 1566689, 1395527, 2716710, 10476921, 541058, 129149, 1043908, 1333960, 3206, 646665, 278727, 1244026, 616813, 1809170, 868879, 7039523, 5931418, 1000669, 224141, 645203, 207362, 5091, 2871879, 2481552, 6109217, 470201, 392754, 418878, 4956034, 887984, 5289700, 1448539, 1548210, 5681082, 3313, 8162268, 424326, 71083, 39306, 1864, 2137369, 448282, 809410, 6921765, 199018, 41740, 199, 1702808, 1059480, 48936, 2840, 2476690, 3239252, 4011729, 386234, 2723477, 24455], "heart": [29440, 3959, 2290461, 1544172, 17790, 738566, 2320, 1930730, 168854, 341094, 567626, 1254163, 1242610, 8417720, 365783, 3144140, 1695630, 4325027, 61285, 3124, 349175, 9248917, 54017, 59744, 1628430, 704204, 101501, 4191734, 379758, 1538066, 76071, 105376, 31713, 6695, 5332171, 1907408, 204231, 11493, 576701, 1446224, 1655218, 1529387, 70491, 1566689, 22532, 4841820, 1312687, 50124, 1585424, 208647, 3955701, 170124, 628429, 973872, 4111538, 979321, 193744, 990485, 4118389, 242532, 1059480, 959128, 7086808, 2181584, 6765108, 41963, 13972, 22486, 109903, 2716710, 10476921, 541058, 2906003, 302011, 3527363, 681942, 129149, 119434, 580567, 1043908, 1738169, 791770, 722544, 7348605, 646665, 706049, 161972, 126202, 805144, 616813, 1153190, 610374, 7190090, 7119729, 980000, 6308109, 2965623, 1012014, 1059797, 52384, 1361776, 378214, 77495, 232617, 5931418, 1000669, 66650, 1357608, 68106, 13833537, 224141, 44290, 3859158, 645203, 2412834, 1487546, 207362, 9576, 35228, 5091, 47004, 10755, 2871879, 2057878, 6109217, 39306, 4277, 2362370, 470201, 9436, 392754, 418878, 2141406, 56606, 957419, 3491815, 925941, 887984, 6074297, 5289700, 1448539, 5681082, 675705, 1674393, 243846, 3313, 143687, 8162268, 544935, 424326, 984857, 71083, 1864, 2137369, 13301027, 252023, 539454, 448282, 809410, 7419215, 1147484, 6921765, 199018, 10788, 41740, 828837, 238505, 551790, 2623565, 498866, 33736, 9379317, 3454297, 48936, 2476690, 4217826, 1702808, 386234, 5131277, 2723477, 24455, 13060190, 150547, 10411827], "+1": [576701, 349175, 1312687, 990485, 50499, 4118389, 6765108, 1566689, 869453, 22486, 10476921, 541058, 1618488, 3336134, 129149, 119434, 1043908, 1333960, 581884, 9421, 13504101, 6184, 14322, 192247, 272143, 830679, 51754, 15161849, 126202, 138621, 616813, 610374, 494012, 7119729, 1227992, 103584, 5265188, 583842, 182020, 601770, 1562035, 868879, 7039523, 1514370, 5931418, 16015, 1000669, 5968117, 66650, 248440, 6569177, 1023347, 224141, 5603121, 4843541, 645203, 431165, 1487546, 207362, 9576, 5091, 47004, 2871879, 6109217, 1264913, 4277, 2162735, 832802, 470201, 41740, 392754, 418878, 66961, 3491815, 887984, 3776894, 1448539, 5134113, 176055, 5681082, 220115, 1674393, 243846, 3313, 8162268, 3520174, 424326, 289949, 71083, 39306, 25447, 19025, 27893, 866273, 131461, 1131536, 46027, 93578, 2725148, 448282, 359381, 410080, 2420363, 31591, 809410, 4525500, 6078076, 12285, 2627961, 748949, 1147484, 5623501, 489607, 6921765, 18746, 199018, 47639, 1170806, 183649, 828837, 2623565, 4, 3859158, 37493, 1196822, 6074297, 683590, 2311539, 1210262, 1059480, 48936, 4217826, 1702808, 777034, 969118, 386234, 802339, 2723477, 24455]}, "text": "### Abstract\n\n![](https://cloud.githubusercontent.com/assets/15377/17991607/1c2a3024-6b7b-11e6-88cf-da2b0cfba503.png)\n\nImplemented a way to optimize ruby's executions and to revert them.  The strategy is restricted so that any VM states like program counter(s) would not be affected by the modifications.  This restriction makes deoptimize much lightweight.  Experiments show optimizations on this mechanism speeds up micro benchmarks, yet has no significant overheads for pitfall-ish activities, like eval.\n### Introduction\n\n<details>\n<summary>\n\nRuby is said to be slow[[1](https://www.google.co.jp/search?q=ruby%20is%20slow)].  While there can be arguments on this, experiments show that it is at least not the fastest language to execute[[2](http://benchmarksgame.alioth.debian.org/u64q/which-programs-are-fastest.html)]. …\n</summary>\n\n\n\nThe reason behind this is fingered as its GC being slow, or its GVL, or its dynamic nature.  But the author would like to point out the most important thing that Ruby lacks; it does not even try to optimize its execution.  We believe this is the root cause of the slowness we suffer.\n\nWe wrote \"try to\" above.  This is the essential concept of this pull request.  Why Ruby did not optimize so far was that its execution might be different on occasions.  For instance a `1 + 2` might not always be `3`, because the `+` can be redefined on-the-fly.  So the interpreter does not constant-fold the expression and looks for `Integer#+` every time.\n\nThis redefinition however, rarely happens.  Almost every time when `1 + 2` is evaluated, its value is arguably `3`.  Given this empirical assessment, it makes sense for Ruby to first try `3` and if `Integer#+` was redefined for any reason, fall back to that. It should be much faster for vast majority of normal (not redefined) cases, while it does not break redefinition with some overheads.\n\nThis sort of technique is called deoptimization[[3](http://dl.acm.org/citation.cfm?id=143114)].  Deoptimization is done more or less on other languages / implementations.  Notably JVM related projects has many research in this area. For instance JRuby+Truffle already has rich application of this technique[[4](http://chrisseaton.com/rubytruffle/deoptimizing/)].\n\nWhat is pull-requested here is not the direct C translation of JRuby+Truffle's.  Let me describe what is going on.\n### The deoptimization strategy\n\nSince 1.9, Ruby's interpreter equips a language VM (visible as `::RubyVM` from inside ruby scripts).  It first generates sequences (\"iseq\"s hereafter) of VM instructions (\"insn\"s hereafter), and executes them in series.  The key structure of this mechanism is called `struct rb_iseq_constant_body`.\n\n``` C\nstruct rb_iseq_constant_body {\n    (…snip…)\n\n    unsigned int iseq_size;\n    const VALUE *iseq_encoded; /* encoded iseq (insn addr and operands) */\n\n    (…snip…)\n};\n```\n\nThe `iseq_encoded` field is what VM scans to execute.  This is where we want to optimize.  Prior to do any modifications, we hold a backup of it using `memcpy`.  In case of deoptimization event,  we just overwrite this memory region with backed-up sequence using `memcpy` to revert whatever optimizations that might have been applied to it.\n\nThe upside of this strategy is that it is fairly simple.  Because everything is written in pure C code we have no portability concerns.  Also it is so simple that the deoptimization does not involve the VM states at all, including program counters.  This has advantage when execution of instructions recurs; if we had to update program counters, we must scan the whole VM stacks to keep consistencies between before / after deoptimization process.\n\nThe downside of this strategy is that it restricts what can be optimized.  For instance we cannot reorder instructions, because exceptions might raise inside of reordered sequences.  We cannot change the length of iseq, because the underlying memory region cannot be reallocated.\n\nHowever, even with the given restriction, we can do something.\n### Implemented optimizations\n\nWe have following optimizations in this pull request.\n#### Constant folding\n\nFor instance a `1 + 2` is optimized into `3` like this.\n\n``` diff\n--- /dev/shm/xj79gt      2016-08-17 17:09:31.000000000 +0900\n+++ /dev/shm/1gaaeo      2016-08-17 17:09:31.000000000 +0900\n@@ -20,8 +20,10 @@ local table (size: 2, argc: 0 [opts: 0,\n |------------------------------------------------------------------------\n 0000 trace            256                                             (   7)\n 0002 trace            1                                               (   8)\n-0004 putobject_OP_INT2FIX_O_1_C_\n-0005 putobject        2\n-0007 opt_plus         <callinfo!mid:+, argc:1, ARGS_SIMPLE>, <callcache>\n+0004 putobject        3\n+0006 nop\n+0007 nop\n+0008 nop\n+0009 nop\n 0010 trace            512                                             (   9)\n 0012 leave                                                            (   8)\n```\n\nThe `nop`s are introduced to meet \"no PC modification\" restriction.  In order to implement this, the `opt_plus` instruction is modified to detect a `putobject`-`putobject`-`opt-plus` sequence.  Then it calculates the computation as usual, and overwrites itself with the sequence like above diff.\n\nRuby-level constants (like `::Object`) are also subject to fold.  They are resolved and replaced to `putobject` with the identical value.\n#### `send` elimination\n\nTypical ruby script consists of many method invocations.  They are represented in `send` or its variant instructions in an iseq.  If they are optimized, the effect should not be marginal.  The problem is a method call is not always optimizable.  We have to determine whether we can skip calling.\n\nIn order to do so a method is called as usual for the first time, and checked whether it has any side effects or not.  If a method does not contain any side effects, it (more precisely, its underlying iseq) is marked as being \"pure\".  Next time when the same method is called, we can consider eliminating the call to it.\n\nHowever a method that is not pure is not always NG to optimize.  A method can of course call another method.  A method that is not pure can be simply not checked yet.  So a method has 3 states namely \"pure\", \"not pure\", and \"unpredictable\".  Every methods start their life as being unpredictable.  Once its calling methods are all predicted to be pure, and itself has no side-effects, the state is updated to be pure.\n\n``` C\nenum insn_purity {\n    insn_is_pure          = Qtrue,\n    insn_is_not_pure      = Qfalse,\n    insn_is_unpredictable = Qnil,\n};\n```\n\nSide effect that we care includes:\n- Writes to variables other than local ones,\n- Definition of classes,\n- Call of methods that are not pure,\n- Call of C functions,\n  - C functions are unable to check so we think they are all NG.\n- Yielding blocks.\n\nOnce we know a method is pure, it is safe to eliminate a call to that method which immediately discards its return value(s).  Note however, that even on such situations, evaluations of method arguments are not always eligible to be eliminated.  They can have their own side effects.  We just eliminate the `send` variant instruction and not its caller site setup, like following diff:\n\n``` diff\n--- /dev/shm/165rrgd     2016-08-17 10:44:10.000000000 +0900\n+++ /dev/shm/jd0rcj      2016-08-17 10:44:10.000000000 +0900\n@@ -23,8 +23,10 @@ local table (size: 2, argc: 0 [opts: 0,\n 0004 putself\n 0005 putself\n 0006 opt_send_without_block <callinfo!mid:n, argc:0, FCALL|VCALL|ARGS_SIMPLE>, <callcache>\n-0009 opt_send_without_block <callinfo!mid:m, argc:1, FCALL|ARGS_SIMPLE>, <callcache>\n-0012 adjuststack      1\n+0009 adjuststack      2\n+0011 nop\n+0012 nop\n+0013 nop\n 0014 trace            1                                               (  16)\n 0016 putnil\n 0017 trace            512                                             (  17)\n```\n\nThis is how a `m(n())` is optimized, where method `m` is pure but `n` is not.\n#### Elimination of variable assignments\n\nAs we see, method calls can not be eliminated when its return value is used.  In order to relax this we would like to skip assignments of variables if possible.\n\nHowever this is not easy to do precisely.  A variable's liveness shall be analyzed.  All types of variables except local ones are almost unable to analyze.  Also because we have restriction on what is allowed here due to deoptimization process, massive iseq rearrangements like SSA conversion is not doable.\n\nIn this pull request a very limited version of variable liveness analysis is implemented.  Only\nlocal variables which are never referenced (assigned then made garbage immediately) are detected, then eliminated if possible.  This is not the only thing that could be done theoretically, but practically the easiest to detect so we do this as a bridgehead to further optimizations.\n\nNote we have to check iseqs recursively; because local variables are reachable from inside of a block, and a block is represented in a separate iseq, which means we have to check all possible iseqs that can reach a local variable to ensure no references to it exists.\n\nAfter checking for usages, a useless assignment can be eliminated like this:\n\n``` diff\n--- /dev/shm/1p1dusf     2016-08-25 18:06:58.000000000 +0900\n+++ /dev/shm/1kpw0qe     2016-08-25 18:06:58.000000000 +0900\n@@ -17,10 +17,14 @@ local table (size: 3, argc: 1 [opts: 0,\n [ 3] i<Arg>     [ 2] x\n 0000 trace            256                                             (  12)\n 0002 trace            1                                               (  13)\n-0004 putself\n-0005 getlocal_OP__WC__0 3\n-0007 opt_send_without_block <callinfo!mid:m, argc:1, FCALL|ARGS_SIMPLE>, <callcache>\n-0010 setlocal_OP__WC__0 2\n+0004 nop\n+0005 nop\n+0006 nop\n+0007 nop\n+0008 nop\n+0009 nop\n+0010 nop\n+0011 nop\n 0012 trace            1                                               (  14)\n 0014 putnil\n 0015 trace            512                                             (  15)\n```\n### Experiments\n\nTo determine effectiveness of this approach we took experiments on my environment.  This machine equips `Intel(R) Core(TM)2 Duo CPU T7700` CPU and runs Ubuntu 16.04.  The image below is a `make benchmark` result against ruby 2.4.0dev.\n\n![](https://cloud.githubusercontent.com/assets/15377/17991527/6edc3642-6b7a-11e6-9ac6-75262128c043.png)\n\nLooking at the benchmark, the result is (generally speaking) similar to 2.4, with several exceptional cases which speeds up.  The most improved `vm2_bigarray*` got huge speedup because generation of a big array is eliminated at all.  Other improved benchmarks shows optimizations described above works quite well.\n\nIt is worth noting that the `vm2_eval*` result is 0.933 i.e. `eval` is only 2.7% slow compared to no optimization.  This can be considered as deoptimization preparation cost, and it means overhead is quite small.\n### Conclusions\n\nImplemented a deoptimization engine for ruby and several optimizations on top of it.  The proposed deoptimization strategy is lightweight so that activities like `eval` works without huge overheads.\n\nThe author is not willing to argue this is the only best optimization technique that we know.  Rather, even if it is suboptimal, the benchmark results show that the optimizations proposed here gains considerable amount of speed up.  This is why ruby is said to be slow; it is not optimized at all.  Any trivial optimizations should significantly impact it.\n\nWe believe ruby should have optimizations implemented.\n### Future works\n\nMore optimizations can be thought on top of this deoptimization engine.  For instance branches with constant expressions could be relaxed to unconditional jumps.  More analysis on variable liveness could eliminate more of them.  Perversely, we could think of adding new local variables, like to eliminate common subexpressions.\n\nThe deoptimization strategy is subject to be improved.  If we can suffer more slowdown of `eval`, more fine-grained setup like three-address code could be thought of.  In order to do so a deoptimization engine should be able to revert IR conversion.\n\n</details>\n", "labels": [], "number": 1419, "updated_at": "2018-02-23 03:07:16", "user": 15377, "closed_at": "None", "id": 173351229, "title": "Deoptimization Engine", "url": "https://api.github.com/repos/ruby/ruby/issues/1419", "created_at": "2016-08-26 01:52:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242865730", "text": "I read through this a bit and have a question: can it deopt during a method body? If I'm reading it right, the deopt can only occur immediately before entry into the method, which means off-thread changes won't be seen until you re-enter the optimized method again. Is that correct?\n", "created_at": "2016-08-26 22:19:58", "user": 10135, "id": 242865730}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242890774", "text": "@headius very good point.  My answer is yes and no.  On this patch deoptimizations can occur at two points:\n- at the very beginning of a method, during construction of stack frame: https://github.com/ruby/ruby/pull/1419/commits/523120808bed6a54ced3cd8f17d1cf6a065678bf#diff-347392b62c9edab3c8ab5fb0d71a012fR196\n  - This is expected to purge a stale optimized sequence.\n- right after a method call returns. https://github.com/ruby/ruby/pull/1419/commits/523120808bed6a54ced3cd8f17d1cf6a065678bf#diff-d52fa5b396928e0544140fd48f329543R126\n  - Redefinitions ultimately happen inside of some C functions defined elsewhere.  From a ruby script's point of view calling a C function is done via calling a method.  So every time we call a method, there are chances for redefinitions.  We have to make sure.\n\nIn short, inter-thread method tampering is not checked explicitly.  There are chances for deoptimizations during a method execution, but not immediately when another thread changed something.\n\nI think we can detect off-thread changes.  For now we have GVL so luckily we only need to check it right after when we acquire GVL.  That should suffice for now.  If we decide to give up GVL, we need to introduce some sort of thread checkpoint instead.\n", "created_at": "2016-08-27 02:37:51", "user": 15377, "id": 242890774}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242894300", "text": "pushed https://github.com/ruby/ruby/pull/1419/commits/2f7bfbfdfc21f988525c6be276e8847384a5fbe9.  It checks for VM timestamp every time context switch hapens.\n", "created_at": "2016-08-27 04:02:28", "user": 15377, "id": 242894300}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242950532", "text": "Another option could be to have any operation which will cause deoptimisation to do the work to deoptimise the effected methods itself, before it transfers control back to them by releasing the GVL. Then the fast path (optimised methods) doesn't have to do a check. If they're still running, then they didn't have to deoptimise.\n\nThis is an advantage of the GVL. You shouldn't have to _ever_ check if a method should deoptimise, if whoever causes the deoptimisation does the deoptimisation work itself. It only gets slightly more complicated with parallel threads, where you need to stop the world first.\n", "created_at": "2016-08-28 01:30:41", "user": 341094, "id": 242950532}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/242956843", "text": "@chrisseaton true.\n\nHowever we now don't manage which method is optimized in which way so we have to start managing that part.  Because methods are subject to be GCed, management structure (if any) needs to have some sort of weak reference.  I think this is a bit too large to include in this pull request.\n\nThere is another possible way to know which one to deopt; scan all methods every time deoptimization is requested.  I doubt if this can be done in a timely fashion.\n", "created_at": "2016-08-28 05:15:23", "user": 15377, "id": 242956843}, {"reactions": {"heart": [272143]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/243186830", "text": "@shyouhei Oh indeed, it should not be difficult to detect that there's been a deoptimization event across threads. The tricky bit will be deoptimizing the currently-executing iseqs without losing ipc, stack state, etc. I don't think that part exists yet, correct?\n", "created_at": "2016-08-29 17:06:48", "user": 10135, "id": 243186830}, {"reactions": {"+1": [10135]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/243284409", "text": "@headius no.  I mean, you are correct.  That (avoiding to touch VM states) is why we don't see considerable deopt overheads in above benchmarks.  @ko1 commented in-person that I would need to juggle VM states sooner or later I continue to develop, but not yet in this pull request.  It is still just patching iseqs.\n", "created_at": "2016-08-29 23:06:01", "user": 15377, "id": 243284409}, {"reactions": {"+1": [82408]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/248992140", "text": "Is there anything holding this back atm?\n", "created_at": "2016-09-22 18:44:04", "user": 199018, "id": 248992140}, {"reactions": {"heart": [15377]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249024275", "text": "Builds on `Apple LLVM version 8.0.0 (clang-800.0.40)` with a small change (else bus error on `memcpy`):\n\n``` diff\ndiff --git a/optimize.c b/optimize.c\nindex c0fee33..c9e666f 100644\n--- a/optimize.c\n+++ b/optimize.c\n@@ -637,7 +637,7 @@ iseq_analyze(rb_iseq_t *iseq)\n     }\n }\n\n-static const VALUE wipeout_pattern[8]; /* maybe 5+2==7 should suffice? */\n+static VALUE wipeout_pattern[8]; /* maybe 5+2==7 should suffice? */\n static VALUE adjuststack;\n static VALUE nop;\n static VALUE putobject;\n\n```\n", "created_at": "2016-09-22 20:51:38", "user": 199, "id": 249024275}, {"reactions": {"+1": [199018, 1059480, 2723477]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249905980", "text": "Is this moving forward? Is there anything we can do to help?\n", "created_at": "2016-09-27 15:45:29", "user": 82408, "id": 249905980}, {"reactions": {"+1": [50499, 969118, 679198, 1059480, 1702808]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249946474", "text": "> Is there anything we can do to help?\n\nSome suggestions:\n1. Try to run it with your own app or other software.\n2. Try to break it, causing a crash or incorrect behavior.\n3. Benchmark it.\n4. Review and critique the idea and implementation.\n", "created_at": "2016-09-27 18:01:39", "user": 199, "id": 249946474}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253207146", "text": "I'm seeing errors when running rake's test suite:\n[rake_tests_output.txt](https://github.com/ruby/ruby/files/524533/rake_tests_output.txt)\n\nand errors when running `bundle` for rails:\n[rails_bundle_output.txt](https://github.com/ruby/ruby/files/524542/rails_bundle_output.txt)\n", "created_at": "2016-10-12 13:02:54", "user": 4067, "id": 253207146}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253918112", "text": "I get a different error on \"make\". I'm building with CLang on Mac.\n\n[deopt_make_errors.txt](https://github.com/ruby/ruby/files/530447/deopt_make_errors.txt)\n", "created_at": "2016-10-14 21:00:45", "user": 82408, "id": 253918112}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/254024342", "text": "Thank you.  I'm looking at the logs.\n", "created_at": "2016-10-16 03:02:06", "user": 15377, "id": 254024342}, {"reactions": {"hooray": [199], "+1": [349175, 704204, 199018, 1566689, 2085622]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256302846", "text": "OK, after close inspection I found several bugs and fixed them all.  It now bundles and runs Rails 5.0.0.1, at least for me.\n", "created_at": "2016-10-26 10:00:18", "user": 15377, "id": 256302846}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256345843", "text": "how come the appveyor test results aren't public?\n", "created_at": "2016-10-26 13:23:29", "user": 199018, "id": 256345843}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256492515", "text": "Still doesn't compile on Mac with CLang. I have changes locally that allow it to build but segfault. I've attached the \"git diff\". I'll try to get it to build and run successfully.\n[deopt_mac_patch.txt](https://github.com/ruby/ruby/files/554536/deopt_mac_patch.txt)\n", "created_at": "2016-10-26 22:11:33", "user": 82408, "id": 256492515}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256522826", "text": "Hmm.  Thank you.  I've not tested this against clang so far.  Will take a look.\n", "created_at": "2016-10-27 01:29:19", "user": 15377, "id": 256522826}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265815043", "text": "[Here](https://gist.github.com/rye/b413a74530be8ae59d674830d53ac5dc) is the Make output when I compile using `clang`.\r\n\r\nEDIT: Link to gist rather than dump all the output into here.", "created_at": "2016-12-08 18:25:14", "user": 1566689, "id": 265815043}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310867427", "text": "any status with this one? Is almost one year old :)", "created_at": "2017-06-24 21:39:47", "user": 969118, "id": 310867427}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310979711", "text": "Interested in this one as well. Any news?", "created_at": "2017-06-26 07:06:05", "user": 392754, "id": 310979711}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310988908", "text": "Me also.", "created_at": "2017-06-26 07:56:36", "user": 150547, "id": 310988908}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311011411", "text": "@pedroaliens @shyouhei any update on this issue? ", "created_at": "2017-06-26 09:38:52", "user": 7430071, "id": 311011411}, {"reactions": {"+1": [8417720, 386234, 50499]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311012005", "text": "Folks, piling on doesn't help expedite an issue.", "created_at": "2017-06-26 09:41:29", "user": 41963, "id": 311012005}, {"reactions": {"heart": [50499, 2276631, 802339, 1702808, 199018, 969118, 392754, 50975, 9436]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311021115", "text": "Hi, quick update is that it's still work in progress.  I got comments from other core-devs including @ko1 , so I think I need his review to merge this, once after I finished on peaceful update.\r\n\r\nThank you for your interest!", "created_at": "2017-06-26 10:23:23", "user": 15377, "id": 311021115}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/320290036", "text": "I successfully made and installed this, but when I tried running bundle install, I got a segfault:\r\n```\r\n$ sudo bundle install # happens with and without sudo, though\r\nDon't run Bundler as root. Bundler can ask for sudo if it is needed, and installing your\r\nbundle as root will break this application for all non-root users on this machine.\r\nFetching gem metadata from https://rubygems.org/./usr/local/lib/ruby/2.4.0/net/http.rb:939: [BUG] Segmentation fault at 0x00000000000010\r\nruby 2.4.0dev (2016-07-22 deoptimization 55727) [x86_64-linux]\r\n\r\n-- Control frame information -----------------------------------------------\r\nc:0023 p:---- s:0138 e:000137 CFUNC  :wait_readable\r\nc:0022 p:0701 s:0134 E:002290 METHOD /usr/local/lib/ruby/2.4.0/net/http.rb:939\r\nc:0021 p:0008 s:0121 e:000120 METHOD /usr/local/lib/ruby/2.4.0/net/http.rb:869\r\nc:0020 p:0076 s:0118 e:000117 METHOD /usr/local/lib/ruby/2.4.0/net/http.rb:864\r\nc:0019 p:0045 s:0115 e:000114 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/vendor/net-http-persistent/lib/net/http/persistent.rb:702\r\nc:0018 p:0530 s:0110 E:001a50 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/vendor/net-http-persistent/lib/net/http/persistent.rb:633\r\nc:0017 p:0041 s:0097 e:000096 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/vendor/net-http-persistent/lib/net/http/persistent.rb:996\r\nc:0016 p:0148 s:0084 e:000083 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/fetcher/downloader.rb:50\r\nc:0015 p:0048 s:0075 e:000074 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/fetcher/downloader.rb:16\r\nc:0014 p:0028 s:0067 e:000066 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/fetcher/compact_index.rb:116\r\nc:0013 p:0161 s:0061 e:000060 BLOCK  /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/compact_index_client/updater.rb:50\r\nc:0012 p:0048 s:0054 e:000053 METHOD /usr/local/lib/ruby/2.4.0/tmpdir.rb:89\r\nc:0011 p:0026 s:0047 e:000046 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/compact_index_client/updater.rb:30\r\nc:0010 p:0068 s:0040 e:000039 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/compact_index_client.rb:81\r\nc:0009 p:0151 s:0035 e:000034 METHOD /usr/local/lib/ruby/gems/2.4.0/gems/bundler-1.15.3/lib/bundler/compact_index_client.rb:97\r\n```", "created_at": "2017-08-04 16:15:03", "user": 199018, "id": 320290036}], "assignees": [15377, 15377], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- include/ruby/util.h (setenv): remove POSIX-noncompliant\n  definition with 2 arguments.\n", "labels": [], "number": 1420, "updated_at": "2016-12-10 18:00:10", "user": 16700, "closed_at": "2016-12-10 18:00:10", "id": 173582066, "title": "util.h: POSIX-noncompliant setenv", "url": "https://api.github.com/repos/ruby/ruby/issues/1420", "created_at": "2016-08-27 06:55:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1421, "updated_at": "2016-08-30 01:21:24", "user": 181194, "closed_at": "2016-08-30 01:21:24", "id": 173797625, "title": "Correct documentation of OpenStruct.json_create", "url": "https://api.github.com/repos/ruby/ruby/issues/1421", "created_at": "2016-08-29 15:10:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/243305888", "text": "Please submit upstream repository https://github.com/flori/json\n", "created_at": "2016-08-30 01:21:24", "user": 12301, "id": 243305888}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Instead, look for instance methods of Kernel.\nOtherwise, instance methods of Module (which are methods of Kernel\nitself) are mistakenly believed to exist, and it fails when calling\nKernel.instance_method().\n\n@nobu \n", "labels": [], "number": 1422, "updated_at": "2018-02-23 03:07:17", "user": 3535, "closed_at": "None", "id": 174090130, "title": "delegate.rb: don't look for methods on Kernel", "url": "https://api.github.com/repos/ruby/ruby/issues/1422", "created_at": "2016-08-30 18:25:04", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"heart": [193936, 424326]}, "text": "Windows Nano does not support apartment theaded concurrency in its COM libraries. However, multi threaded concurrency is supported. The technical preview of nano available at the time of this submission (TP5), contains a hack in its win32ole.dll forwarder that causes calls to `OleInitialize` which normally call `CoInitializeEx` with `STA` to use `MTA` instead. This hack will be removed from the final RTM Windows nano and cause all calls to `require 'win32ole'` to fail\n\n@alexpilotti, on behalf of microsoft,  suggested a change to https://github.com/ruby/ruby/blob/32674b167bddc0d737c38f84722986b0f228b44b/ext/win32ole/win32ole.c#L820-L830:\n\n```\n       hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);\n        if(FAILED(hr)) {\n            ole_raise(hr, rb_eRuntimeError, \"fail: OLE initialize\");\n        }\n        g_ole_initialized_set(TRUE);\n```\n\nI have confirmed that this does work with the TP5 hack removed.\n\nI have added a check to determine if ruby is running on nano so that the above code will only be used on nano. I anticipate the vast majority of usages of win32ole would be fine with this implementation and only certain multithreaded scenarios might experience unexpected results. However it seems best to preserve the current behavior for all non nano environments.\n\nNote that I am not a c++ developer but I have done my best to comply with the conventions of the win32ole.c code. I have added static flags to prevent registry lookups on every call. If there is a cleaner approach, I'd be happy to tweak accordingly.\n", "labels": [], "number": 1423, "updated_at": "2017-05-25 03:34:51", "user": 655165, "closed_at": "2017-04-26 16:54:40", "id": 174164169, "title": "Add support for Windows Nano Server", "url": "https://api.github.com/repos/ruby/ruby/issues/1423", "created_at": "2016-08-31 01:31:38", "comments": [{"reactions": {"+1": [193936]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/243791310", "text": "@nobu and @simi I have made changes based on your comments including successfully building and then testing to nano.\n", "created_at": "2016-08-31 14:57:06", "user": 655165, "id": 243791310}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/243982948", "text": "Yes if `Init_win32ole` is guaranteed to be called first it makes sense to put the nano check there. I have made that change @nobu. \n", "created_at": "2016-09-01 05:53:04", "user": 655165, "id": 243982948}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/244077106", "text": "Rebased against trunk and builds are green now.\n", "created_at": "2016-09-01 13:24:01", "user": 655165, "id": 244077106}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276210747", "text": "@nobu have you had a chance to look at the latest pull request?\r\n\r\nThe original ticket is filed at https://bugs.ruby-lang.org/issues/12371", "created_at": "2017-01-30 22:21:31", "user": 394081, "id": 276210747}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276217923", "text": "FWIW: We have been building ruby with this patch for chef windows releases for the past several months without issue.", "created_at": "2017-01-30 22:52:03", "user": 655165, "id": 276217923}, {"reactions": {"+1": [655165]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/297468416", "text": "@mwrock looks like this landed in https://github.com/ruby/ruby/commit/8feb9779182bd4285f3881029fe850dac188c1ac and this PR can be closed now I think", "created_at": "2017-04-26 16:33:59", "user": 394081, "id": 297468416}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/297468986", "text": "@nobu this is on trunk only - will it be merged into the 2.4 branch as a fix as well?", "created_at": "2017-04-26 16:35:57", "user": 394081, "id": 297468986}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303816294", "text": "@nobu it appears the patch in https://github.com/ruby/ruby/commit/8feb9779182bd4285f3881029fe850dac188c1ac may have been misapplied. Note [line 827](https://github.com/ruby/ruby/blob/trunk/ext/win32ole/win32ole.c#L827) keeps `hr = OleInitialize(NULL)` instead of removing it and only referencing `hr` from the conditional added in @mwrock's original patch, https://github.com/ruby/ruby/pull/1423/files. This means we will still always call `OleInitialize(NULL)` regardless of platform.", "created_at": "2017-05-24 18:46:58", "user": 819133, "id": 303816294}, {"reactions": {"+1": [819133]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303913449", "text": "Nice catch @MosesMendoza! I just submitted https://github.com/ruby/ruby/pull/1629 to correct this.", "created_at": "2017-05-25 03:34:51", "user": 655165, "id": 303913449}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\nstr = nil\nURI.escape(str) \n=>  NoMethodError: undefined method `gsub' for nil:NilClass\n```\n", "labels": [], "number": 1424, "updated_at": "2016-09-07 02:44:18", "user": 27893, "closed_at": "2016-09-07 02:13:31", "id": 175199602, "title": "Update rfc2396_parser.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1424", "created_at": "2016-09-06 09:21:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/244907866", "text": "`nil` is not a `String`, why do you want to escape it?\n", "created_at": "2016-09-06 10:11:39", "user": 16700, "id": 244907866}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/244955292", "text": "@nobu\n\nin fact, i don't want to do so.\n\nIn the actual development, the exception be raised when encode value is nil. It's very boring.\n\nso i will... \n", "created_at": "2016-09-06 13:48:13", "user": 27893, "id": 244955292}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/244990210", "text": "I think if we can pass `nil` as an argument, why can't we pass `Fixnum`, `Float`... That might be doing too much.\n", "created_at": "2016-09-06 15:32:47", "user": 1210262, "id": 244990210}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/245158859", "text": "@nobu \n\nI got it wrong. \nclosed!\n", "created_at": "2016-09-07 02:42:41", "user": 27893, "id": 245158859}, {"reactions": {"laugh": [1210262]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/245159073", "text": "@ShallmentMo you're right!  \n", "created_at": "2016-09-07 02:44:18", "user": 27893, "id": 245159073}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`FileUtils.cp_r` does not detect copying a directory to itself if either the source or destination contains a dot (`.`). Depending on order and platform, this can cause different errors like `File name too long` or `unknown file type` or just stack overflow.\n\nThis patch changes the current dynamic regex approach to comparing absolute paths.\n\nThe test commands in the Travis CI config did not show test failure for me, but `make test-all TESTOPTS=\"-q -- test/fileutils/test_fileutils.rb\"` with the new tests but without the changes to `descendant_directory?` shows the failure clearly.\n\nExample of not detecting same directory:\n<details>\n  <summary>\n\nClick for example</summary>\n\n\n\n```\n2.3.1 :001 > require 'fileutils'\n => true \n2.3.1 :002 > FileUtils.cp_r 'test_rec', './test_rec'\nErrno::ENAMETOOLONG: File name too long @ dir_s_mkdir - ./test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec/test_rec\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1366:in `mkdir'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1366:in `copy'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:472:in `block in copy_entry'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1498:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n... 1339 levels...\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1501:in `block in wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `each'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1500:in `wrap_traverse'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:469:in `copy_entry'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:444:in `block in cp_r'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1571:in `block in fu_each_src_dest'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1585:in `fu_each_src_dest0'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:1569:in `fu_each_src_dest'\n    from /home/justin/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/fileutils.rb:443:in `cp_r'\n    from (irb):2\n    from /home/justin/.rvm/rubies/ruby-2.3.1/bin/irb:11:in `<main>'\n```\n\n</details>\n", "labels": [], "number": 1425, "updated_at": "2018-02-23 03:07:18", "user": 75613, "closed_at": "None", "id": 176234661, "title": "Improve same directory detection in FileUtils", "url": "https://api.github.com/repos/ruby/ruby/issues/1425", "created_at": "2016-09-11 09:26:41", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [1032291]}, "text": "Reference to https://bugs.ruby-lang.org/issues/12750 issue\n### Trunk\n\n![screenshot 2016-09-11 18 49 17](https://cloud.githubusercontent.com/assets/1147484/18418533/6335eb62-7859-11e6-8b57-eb5176850d5e.jpg)\n### Current patch\n\n![screenshot 2016-09-11 18 49 24](https://cloud.githubusercontent.com/assets/1147484/18418535/68ca08b0-7859-11e6-949b-dac1c2a97165.jpg)\n", "labels": [], "number": 1426, "updated_at": "2016-09-12 09:04:34", "user": 1147484, "closed_at": "2016-09-12 04:50:13", "id": 176250336, "title": "Increase test coverage for URI::MailTo", "url": "https://api.github.com/repos/ruby/ruby/issues/1426", "created_at": "2016-09-11 15:53:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/246246529", "text": "I've committed at https://github.com/ruby/ruby/commit/52f9d387e6963d6ffe37ebebcced2dc1c993d891 \n", "created_at": "2016-09-12 04:50:13", "user": 12301, "id": 246246529}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/246289395", "text": "@hsbt thanks for merge! :star2:\n", "created_at": "2016-09-12 09:04:34", "user": 1147484, "id": 246289395}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reference to https://bugs.ruby-lang.org/issues/12756\n### Coverage before\n\n![screenshot 2016-09-13 00 06 40](https://cloud.githubusercontent.com/assets/1147484/18453172/12fb30b6-794f-11e6-86a6-a639fd8b8356.jpg)\n### Coverage after\n\n![screenshot 2016-09-13 00 06 45](https://cloud.githubusercontent.com/assets/1147484/18453175/1897beb8-794f-11e6-9550-cd9778f0c6d0.jpg)\n", "labels": [], "number": 1427, "updated_at": "2016-09-30 13:05:29", "user": 1147484, "closed_at": "2016-09-30 10:07:13", "id": 176485928, "title": "Add test and stylistic changes URI::HTTP library", "url": "https://api.github.com/repos/ruby/ruby/issues/1427", "created_at": "2016-09-12 21:11:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249365430", "text": "It seems ok. I will commit after Euruko. (You know :octocat: )\n", "created_at": "2016-09-24 13:40:24", "user": 12301, "id": 249365430}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/250739363", "text": "@hsbt thanks ❤️ \n", "created_at": "2016-09-30 13:05:29", "user": 1147484, "id": 250739363}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR adds a secondary heap to `objspace`.  It's currently called the \"tclass heap\" since we're only allocating TCLASS objects in to that heap, but there's no reason we couldn't allocate other objects in.\n\nRationale:\n\nWe know that TCLASS objects are likely to become old and stick around.  In fact they are [already pre-tenured](https://github.com/ruby/ruby/blob/trunk/class.c#L165) (they only have to make it through 1 GC before they are considered \"old\").  Objects are allocated using a [bump pointer](https://github.com/ruby/ruby/blob/trunk/gc.c#L1906) technique, and we end up with \"probably old\" objects mixed with \"probably new\" objects on a page.  Since objects aren't moved in our GC, the new objects die and we end up with holes on a page (fragmentation).  Fragmentation isn't great because it ensures poor locality (where related objects are close to each other in memory), and also fragmentation will lead to poor CoW performance.  Since holes in the pages are eventually re-used, the heap pages will get copied to child processes.\n\nThis PR allocates class objects to a separate heap for two benefits: 1) better CoW performance and 2) possibly better locality.  We'll get better CoW performance because the pages should have less fragmentation since we know the objects allocated to this heap will likely not be collected.  We _may_ see better locality since subclasses should be allocated more closely to their superclasses.\n\nThings I need to do:\n- [ ] Measure fragmentation\n- [ ] Check CoW improvement\n- [ ] Check locality improvements (if any)\n", "labels": [], "number": 1428, "updated_at": "2016-09-14 22:26:40", "user": 3124, "closed_at": "2016-09-14 21:13:22", "id": 177021019, "title": "Add a secondary heap", "url": "https://api.github.com/repos/ruby/ruby/issues/1428", "created_at": "2016-09-14 21:06:02", "comments": [{"reactions": {"heart": [199, 12301, 3959, 357288]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/247176327", "text": "Sorry, I meant to send this to github/ruby until I've finished testing\n", "created_at": "2016-09-14 22:26:40", "user": 3124, "id": 247176327}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`IO#write` returns the number of bytes written, whereas `Object#display` always returns `nil`.\n", "labels": [], "number": 1429, "updated_at": "2016-10-05 02:48:12", "user": 28232, "closed_at": "2016-10-05 02:48:12", "id": 177182280, "title": "Update documentation for `Object#display`", "url": "https://api.github.com/repos/ruby/ruby/issues/1429", "created_at": "2016-09-15 13:49:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updates to the Hash of encoding mappings used by `URI.decode_www_form`:\n- fix the documented command (`https` instead of `http`, `ruby` instead of `rb`, and downcase the now-uppercase `\"name\"` field that's returned)\n- update the mapping (that was introduced [here](https://github.com/ruby/ruby/commit/4a50d447d9618b2e3df126e159aa1d735e429a70)) that is used to map encodings with two new mappings: `\"koi8-ru\", \"ms932\"`\n", "labels": [], "number": 1430, "updated_at": "2016-10-06 02:10:52", "user": 5054, "closed_at": "2016-10-06 02:10:52", "id": 177192501, "title": "URI.decode_www_form: update URI WEB_ENCODINGS_ hash", "url": "https://api.github.com/repos/ruby/ruby/issues/1430", "created_at": "2016-09-15 14:28:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251850012", "text": "Merged at 48f9118253859969d0f300dcb13b84a99c2f5bd4 and a566bc0a38d103baf4598b73ed94bcfe021f6216\n", "created_at": "2016-10-06 02:10:52", "user": 12301, "id": 251850012}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Handy method if you are bored of rescuing from bad uris\n\n`URI.try_parse \"a b c d\" # => nil`\n", "labels": [], "number": 1431, "updated_at": "2018-03-08 16:11:53", "user": 4539497, "closed_at": "2018-03-08 16:11:53", "id": 177563269, "title": "URI.try_parse - returns nil instead of raising InvalidURIError", "url": "https://api.github.com/repos/ruby/ruby/issues/1431", "created_at": "2016-09-17 08:10:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249365361", "text": "It seems no advantage in standard library. Can you show me usecase in real world? \n", "created_at": "2016-09-24 13:38:37", "user": 12301, "id": 249365361}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249831765", "text": "You would use it in cases similar to `String#try_convert`\n\nFrom URI itself: https://github.com/ruby/ruby/blob/trunk/lib/uri/common.rb#L713\n\n`String#try_convert` source: http://apidock.com/ruby/String/try_convert/class\n\nSay you have an object that `responds_to? :referer`\n\n```\nif uri = URI.try_parse(my_obj.referer)\n  do_something\nend\n```\n\nor in validation...\n\n```\ndef validate_referer(referer)\n  !!URI.try_parse(referer)\nend\n```\n\nIt's probably best to use the method name `#try_convert` to be in keeping with String/Array etc.\n", "created_at": "2016-09-27 10:52:48", "user": 4539497, "id": 249831765}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371535430", "text": "Use rescue instead.", "created_at": "2018-03-08 16:11:52", "user": 13423, "id": 371535430}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1432, "updated_at": "2016-09-17 13:46:53", "user": 13203, "closed_at": "2016-09-17 13:46:53", "id": 177567539, "title": "vm_insnhelper.c (vm_throw_start): Remove too much \";\"", "url": "https://api.github.com/repos/ruby/ruby/issues/1432", "created_at": "2016-09-17 10:04:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`(4…4).min => nil` is the expected behavior, but this isn’t mentioned in the doc and it ~~could be~~ was surprising.\n", "labels": [], "number": 1433, "updated_at": "2016-10-05 05:28:28", "user": 29762, "closed_at": "2016-10-05 05:28:28", "id": 177667818, "title": "Add docs for max/min behavior with exclusive range", "url": "https://api.github.com/repos/ruby/ruby/issues/1433", "created_at": "2016-09-18 18:28:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1434, "updated_at": "2016-09-19 01:38:46", "user": 16700, "closed_at": "2016-09-19 01:38:46", "id": 177690118, "title": "Lazy enumerator improvement", "url": "https://api.github.com/repos/ruby/ruby/issues/1434", "created_at": "2016-09-19 01:17:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently the IPAddr class throws an exception if you test for equality against an object that cannot be converted into an IPAddr object.\n\nThis causes fatal errors when trying to delete an IPAddr from an array that contains non-compatible objects (such as a Range).\n\nThis patch causes the equality test to correctly return false.\n\nThis is my first contribution to Ruby (I hope that this is right!) - do you need me to raise an issue ticket or something to associate with this?\n", "labels": [], "number": 1435, "updated_at": "2016-11-05 14:10:31", "user": 3447784, "closed_at": "2016-11-05 14:10:31", "id": 178060815, "title": "lib/ipaddr.rb : Return false instead of throwing an exception in == test", "url": "https://api.github.com/repos/ruby/ruby/issues/1435", "created_at": "2016-09-20 13:33:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/248514896", "text": "It might cause a backward incompatibility.\nPlease file a ticket at https://bugs.ruby-lang.org, because knu, the maintainer of ipaddr.rb, may not watch here.\n", "created_at": "2016-09-21 05:25:18", "user": 16700, "id": 248514896}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/248556433", "text": "OK, filed the ticket\nhttps://bugs.ruby-lang.org/issues/12779\n", "created_at": "2016-09-21 09:17:19", "user": 3447784, "id": 248556433}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/250825005", "text": "Ruby ticket changed to\nhttps://bugs.ruby-lang.org/issues/12799\n", "created_at": "2016-09-30 18:56:40", "user": 3447784, "id": 250825005}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/258613970", "text": "Committed, thanks!\n", "created_at": "2016-11-05 14:10:31", "user": 10236, "id": 258613970}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1436, "updated_at": "2016-12-10 17:59:08", "user": 16700, "closed_at": "2016-12-10 17:59:08", "id": 178277927, "title": "[Feature #12521] kwarg in option", "url": "https://api.github.com/repos/ruby/ruby/issues/1436", "created_at": "2016-09-21 08:20:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Try build and install zlib in the build process.\n", "labels": [], "number": 1437, "updated_at": "2016-09-24 13:28:31", "user": 16700, "closed_at": "2016-09-24 13:28:31", "id": 179003113, "title": "Zlib install", "url": "https://api.github.com/repos/ruby/ruby/issues/1437", "created_at": "2016-09-24 01:23:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just modified `a Integer` to `an Integer` .\n", "labels": [], "number": 1438, "updated_at": "2016-09-24 02:29:13", "user": 13203, "closed_at": "2016-09-24 02:29:13", "id": 179004253, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1438", "created_at": "2016-09-24 01:50:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Description\n\nDefines a `String#casecmp?` convenience method.  Essentially calls `str1.casecmp(str2).zero?`.\n\nSince `String#casecmp` is essentially String's (case-insensitive) version of `#<=>`, I was aiming for congruence with `Fixnum`'s `#<=>` & `#equal?` methods.\n### Thoughts on method naming\n- New method: `#casecmp?`\n  - **PROS:** Nice symmetry with `Fixnum`'s `#<=>` & `#equal?` methods. 'casecmp' seems to imply case-insensitivity (see `String#casecmp` or C's `strcasecmp`)\n  - **CONS:** `String#casecmp` returns 0 for case-insensitive matches, which while not falsey, seems less truthy than 1 or -1.\n\n``` ruby\n# Proposed implementation\n> 'abc'.casecmp?('abc') # true\n> 'abc'.casecmp?('ABC') # false\n> 'abc'.casecmp?('DEF') # false\n> 'abc'.casecmp?(:abc)  # TypeError\n```\n- New method: `#case_equal?`, `#case_insensitive_equal?`, `#insensitive_equal?`, `#iequal?`\n  - **PROS:** More expressive method name.\n  - **CONS:** New method to learn. Method names without some flavor of 'insensitive' may be unintuitive.\n\n``` ruby\n# Proposed implementation\n> 'abc'.case_equal?('abc') # true\n> 'abc'.case_equal?('ABC') # false\n> 'abc'.case_equal?('DEF') # false\n> 'abc'.case_equal?(:abc)  # false\n```\n- Repurpose `#eql?`. Per the string.c method description: \"Two strings are equal if they have the same length and content\". Is 'content' case-insensitive?\n  - **PROS:** Seems to align with the description of the method. `#eql?` is currently redundant with `#==`.\n  - **CONS:** New context to learn. Backwards incompatible.\n\n``` ruby\n# Current implementation (Using ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15])\n> 'abc'.eql?('abc') # true\n> 'abc'.eql?('ABC') # false\n> 'abc'.eql?('DEF') # false\n> 'abc'.eql?(:abc)  # false\n\n> 'abc' == 'abc'    # true\n> 'abc' == 'ABC'    # false\n> 'abc' == 'DEF'    # false\n> 'abc' == :abc     # false\n\n# Proposed implemntation\n> 'abc'.eql?('abc') # true\n> 'abc'.eql?('ABC') # true\n> 'abc'.eql?('DEF') # false\n> 'abc'.eql?(:abc)  # false\n```\n\nI currently like `#casecmp?` or `#eql?` but am willing to be convinced otherwise.\n### References\n\n[Feature #12786](https://bugs.ruby-lang.org/issues/12786) on the Ruby issue tracker.\n", "labels": [], "number": 1439, "updated_at": "2016-11-29 03:57:15", "user": 1390064, "closed_at": "2016-11-29 03:57:15", "id": 179006145, "title": "[Feature #12786] Define String#casecmp?", "url": "https://api.github.com/repos/ruby/ruby/issues/1439", "created_at": "2016-09-24 02:38:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249341495", "text": "Why not have a new method to check case-insensitive equality instead of inequality?\nAnd the place for discussing new features is https://bugs.ruby-lang.org/, so please file an issue there citing this PR.  Thanks.\n", "created_at": "2016-09-24 03:05:46", "user": 10236, "id": 249341495}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249341650", "text": "Oh I misread it, but I suspect the name `casecmp?` would be confusing if it meant `casecmp.zero?` because we all know zero is the false value in C.\n", "created_at": "2016-09-24 03:09:23", "user": 10236, "id": 249341650}, {"reactions": {"+1": [920053]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249343008", "text": "Agree with knu on the name.\nI'd prefer `String#case_equal?`, `String#caseeql?`, or something.\n", "created_at": "2016-09-24 03:46:38", "user": 16700, "id": 249343008}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249343114", "text": "> @knu: Oh I misread it, but I suspect the name `casecmp?` would be confusing if it meant `casecmp.zero?` because we all know zero is the false value in C.\n\nI agree that `#casecmp`'s semantics are... interesting. Since `String#casecmp` is essentially String's (case-insensitive) version of `#<=>`, I was aiming for congruence with Fixnum's `#<=>` & `#equal?` methods.\n\nBut if you guys are open to a new method name, maybe this is an opportunity to provide a more intention-revealing name.\n", "created_at": "2016-09-24 03:49:34", "user": 1390064, "id": 249343114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Try build and install zlib in the build process.\n", "labels": [], "number": 1440, "updated_at": "2016-09-24 11:14:56", "user": 16700, "closed_at": "2016-09-24 11:08:52", "id": 179018221, "title": "appveyor.yml: download problem", "url": "https://api.github.com/repos/ruby/ruby/issues/1440", "created_at": "2016-09-24 08:09:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1441, "updated_at": "2016-09-24 11:26:51", "user": 16700, "closed_at": "2016-09-24 11:26:51", "id": 179025280, "title": "Zlib dl", "url": "https://api.github.com/repos/ruby/ruby/issues/1441", "created_at": "2016-09-24 11:16:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- appveyor.yml (install): use pre-installed OpenSSL-Win64.\n", "labels": [], "number": 1442, "updated_at": "2016-09-24 12:09:17", "user": 16700, "closed_at": "2016-09-24 12:09:17", "id": 179025742, "title": "use OpenSSL-Win64", "url": "https://api.github.com/repos/ruby/ruby/issues/1442", "created_at": "2016-09-24 11:28:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- appveyor.yml (install): use AppVeyor command-line utility to\n  download files, instead of Start-FileDownload cmdlet which no\n  longer works more than once.\n", "labels": [], "number": 1443, "updated_at": "2017-05-21 15:25:39", "user": 16700, "closed_at": "2016-09-24 11:55:28", "id": 179026069, "title": "Download by AppVeyor", "url": "https://api.github.com/repos/ruby/ruby/issues/1443", "created_at": "2016-09-24 11:38:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- appveyor.yml (install): use pre-installed OpenSSL-Win64.\n", "labels": [], "number": 1444, "updated_at": "2016-09-24 12:52:16", "user": 16700, "closed_at": "2016-09-24 12:52:16", "id": 179027351, "title": "use OpenSSL-Win64", "url": "https://api.github.com/repos/ruby/ruby/issues/1444", "created_at": "2016-09-24 12:15:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `:stag` accessor has already been available because it is defined in parent `Scanner` class.\n", "labels": [], "number": 1445, "updated_at": "2016-09-25 13:48:54", "user": 309329, "closed_at": "2016-09-25 13:48:54", "id": 179044897, "title": "remove unnecessary :stag accessor", "url": "https://api.github.com/repos/ruby/ruby/issues/1445", "created_at": "2016-09-24 18:33:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Support compact output for the Transitive formatter.\n", "labels": [], "number": 1446, "updated_at": "2016-09-30 14:35:21", "user": 1246544, "closed_at": "2016-09-30 14:35:21", "id": 179078064, "title": "REXML Transitive formatter fixes + compact output", "url": "https://api.github.com/repos/ruby/ruby/issues/1446", "created_at": "2016-09-25 09:54:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249420465", "text": "Is there any difference between `Default` formatter and `compact` version `Transitive` formatter?\n", "created_at": "2016-09-25 12:57:34", "user": 27350, "id": 249420465}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249420576", "text": "Yes. One change I've noticed is that the default formatter reorders attributes.\n", "created_at": "2016-09-25 12:59:54", "user": 1246544, "id": 249420576}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249583469", "text": "Is it important? Could you show us what output do you want?\n", "created_at": "2016-09-26 14:20:47", "user": 27350, "id": 249583469}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249593780", "text": "```\n#!/usr/bin/env ruby\n\nrequire 'rexml/document'\nrequire 'rexml/formatters/default'\nrequire 'rexml/formatters/transitive'\n\ndef test_formatter(type, doc, compact = false)\n  puts \"Output for #{type} with compact=#{compact}\"\n  formatter = type.new\n  formatter.compact = compact if formatter.respond_to? :compact=\n  formatter.write(doc, $stdout)\n  puts\nend\n\ndoc = REXML::Document.new(%q{\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <node>\n    <property   foo=\"42\"      bar=\"44\"  >  text  </property>\n    <property      goo='44'   gar='42'    >other text</property>\n  </node>\n</root>\n})\ntest_formatter(REXML::Formatters::Default, doc)\ntest_formatter(REXML::Formatters::Transitive, doc, false)\ntest_formatter(REXML::Formatters::Transitive, doc, true)\n```\n\nThe output is:\n\n```\nOutput for REXML::Formatters::Default with compact=false\n<?xml version='1.0' encoding='UTF-8'?>\n\n<root>\n  <node>\n    <property bar='44' foo='42'>  text  </property>\n    <property gar='42' goo='44'>other text</property>\n  </node>\n</root>\n\nOutput for REXML::Formatters::Transitive with compact=false\n<?xml version='1.0' encoding='UTF-8'?>\n\n<root\n>\n  <node\n  >\n    <property foo='42' bar='44'\n    >  text  </property\n    >\n    <property goo='44' gar='42'\n    >other text</property\n    >\n  </node\n  >\n</root\n>\n\nOutput for REXML::Formatters::Transitive with compact=true\n<?xml version='1.0' encoding='UTF-8'?>\n\n<root>\n  <node>\n    <property foo='42' bar='44'>  text  </property>\n    <property goo='44' gar='42'>other text</property>\n  </node>\n</root>\n```\n\nNotice that both of them transform double quotes into single ones, and condense whitespace between attributes.\n\nDefault sorts the attributes, while Transitive doesn't.\n\nTransitive (by default) adds a newline on each tag ending, which looks really bad, and makes the output hard to read. The introduced compact attribute addresses that.\n", "created_at": "2016-09-26 14:53:58", "user": 1246544, "id": 249593780}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249597306", "text": "> Default sorts the attributes, while Transitive doesn't.\n\nAgain. Is it important?\n", "created_at": "2016-09-26 15:05:25", "user": 27350, "id": 249597306}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249598207", "text": "Sorry, I thought you referred to the change itself.\n\nWell, it shouldn't be important on most platforms, but I'd expect that Transitive keeps the original form, rather than adding whitespace trash.\n\nThe fact that Default can be used instead of Transitive doesn't make Transitive correct as it is.\n", "created_at": "2016-09-26 15:08:27", "user": 1246544, "id": 249598207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249614300", "text": "> The fact that Default can be used instead of Transitive doesn't make Transitive correct as it is.\n\nIt's not a Transitive problem. Because Transitive is created to implement the indent style.\n", "created_at": "2016-09-26 16:01:31", "user": 27350, "id": 249614300}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/250760593", "text": "Think about this case for Transitive use case:\n\n``` ruby\n#!/usr/bin/env ruby\n\nrequire 'rexml/document'\nrequire 'rexml/formatters/default'\nrequire 'rexml/formatters/transitive'\n\ndef test_formatter(type, doc)\n  puts \"Output for #{type}\"\n  formatter = type.new\n  formatter.write(doc, $stdout)\n  puts\nend\n\ndoc = REXML::Document.new(%q{<?xml version=\"1.0\" encoding=\"UTF-8\"?><root><node><property foo=\"42\" bar=\"44\">text</property><property goo='44' gar='42'>other text</property></node></root>})\ntest_formatter(REXML::Formatters::Default, doc)\ntest_formatter(REXML::Formatters::Transitive, doc)\n```\n\nOutput:\n\n``` text\nOutput for REXML::Formatters::Default\n<?xml version='1.0' encoding='UTF-8'?><root><node><property bar='44' foo='42'>text</property><property gar='42' goo='44'>other text</property></node></root>\nOutput for REXML::Formatters::Transitive\n<?xml version='1.0' encoding='UTF-8'?><root\n><node\n  ><property foo='42' bar='44'\n    >text</property\n    ><property goo='44' gar='42'\n    >other text</property\n    ></node\n  ></root\n>\n```\n", "created_at": "2016-09-30 14:35:21", "user": 27350, "id": 250760593}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Take this script for example:\n\n``` ruby\nGC.disable\n\nclass Foo\n  def exists?; end\n  def empty?; end\nend\n\ndef main\n  foo = Foo.new\n  puts foo.inspect\n  foo.exists?\nend\n\nmain\n\nGC.enable\nGC.start(full_mark: true, immediate_sweep: true)\n\nrequire 'objspace'\nputs ObjectSpace.each_object(Foo).to_a.first.inspect\n```\n\nExpected output:\n\n```\n#<Foo:0x00563762229c10>\nnil\n```\n\nActual output:\n\n```\n#<Foo:0x00563762229c10>\n#<Foo:0x00563762229c10>\n```\n\nBecause calling `empty?` is translated into a specific instruction (`opt_empty_p`), the receiver `foo` can still be referenced on the machine stack through `calling.recv`, assuming all calls happen in a single `vm_exec_core` call. That's why calling `exists?` instead of `empty?` works as expected because it's translated into the generic instruction `opt_send_without_block`, so calling `GC.start` or `GC.enable`) should override the value of `calling.recv`.\n", "labels": [], "number": 1447, "updated_at": "2018-02-23 03:07:19", "user": 1060507, "closed_at": "None", "id": 179106775, "title": "Clear calling.recv after method calling to avoid marking it as accessible from machine context", "url": "https://api.github.com/repos/ruby/ruby/issues/1447", "created_at": "2016-09-25 20:22:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249450431", "text": "Interesting. The problem of this patch is 0-clear cost for every calling. Did you check it?\n", "created_at": "2016-09-25 22:22:02", "user": 9558, "id": 249450431}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/249644981", "text": "@ko1 I ran this benchmark: `make benchmark OPTS=\"--pattern=vm2_method\" COMPARE_RUBY=\"ruby-without-fix::/opt/ruby-custom/bin/ruby\"` and this was the [output](https://gist.github.com/ahmadsherif/839cfdf706911192c55fa2253677968c).\n", "created_at": "2016-09-26 17:52:47", "user": 1060507, "id": 249644981}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1448, "updated_at": "2016-09-30 09:44:15", "user": 1090020, "closed_at": "2016-09-30 09:44:15", "id": 179411744, "title": "Add missing 'as'", "url": "https://api.github.com/repos/ruby/ruby/issues/1448", "created_at": "2016-09-27 06:59:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Signal.signame return nil if argument is an invalid signal number from v2.3.0.\nchange commit: https://github.com/ruby/ruby/commit/76d1d5269f72e72e8fb39877bb1850aca823158d\n", "labels": [], "number": 1449, "updated_at": "2016-09-28 04:01:11", "user": 935310, "closed_at": "2016-09-28 04:01:11", "id": 179663927, "title": "Add documentation in the case of return nil", "url": "https://api.github.com/repos/ruby/ruby/issues/1449", "created_at": "2016-09-28 02:12:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These comments were being up by rdoc as documentation, so that, for example, Queue#size says it is an alias for #pop: https://ruby-doc.org/core-2.3.1/Queue.html#method-i-size\n\nI asked @drbrain about the correct way to fix this and he suggested just removing the comments.\n", "labels": [], "number": 1450, "updated_at": "2016-09-29 10:21:55", "user": 22962, "closed_at": "2016-09-29 10:21:55", "id": 179964703, "title": "Remove confusing doc comments from Queue and SizedQueue.", "url": "https://api.github.com/repos/ruby/ruby/issues/1450", "created_at": "2016-09-29 06:39:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ThreadError was inconsistently documented in a few places in Queue and SizedQueue. Sometimes it was referred to by name, other times it was mentioned as \"an exception\". This patch makes it so it is consistently referred to by name.\n", "labels": [], "number": 1451, "updated_at": "2016-09-29 10:35:11", "user": 22962, "closed_at": "2016-09-29 10:35:11", "id": 179965756, "title": "Document exception types raised by Queue and SizedQueue.", "url": "https://api.github.com/repos/ruby/ruby/issues/1451", "created_at": "2016-09-29 06:47:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Show the given message when a deprecated constant is referred.\n", "labels": [], "number": 1452, "updated_at": "2016-12-10 17:59:14", "user": 16700, "closed_at": "2016-12-10 17:59:14", "id": 180016665, "title": "Module#deprecate_constant with message", "url": "https://api.github.com/repos/ruby/ruby/issues/1452", "created_at": "2016-09-29 10:56:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The previous error phrase wasn't correct English.  This change updates the wording to make it clear that neither package was found.\n", "labels": [], "number": 1453, "updated_at": "2016-10-06 02:39:07", "user": 115515, "closed_at": "2016-10-06 02:39:07", "id": 180031796, "title": "Update error message in readline", "url": "https://api.github.com/repos/ruby/ruby/issues/1453", "created_at": "2016-09-29 12:12:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1454, "updated_at": "2016-10-05 02:37:22", "user": 6443532, "closed_at": "2016-10-05 02:37:22", "id": 180506182, "title": "Add missing spaces in lib/delegate.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1454", "created_at": "2016-10-02 10:39:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems that this error message was changed by [Integer unification](https://bugs.ruby-lang.org/issues/12005).\n\n``` ruby\nRUBY_VERSION #=> \"2.4.0\"\n[[1, [2, 3]]].dig(0, 0, 0) #=> TypeError: Integer does not have #dig method\n```\n", "labels": [], "number": 1455, "updated_at": "2016-10-04 04:00:34", "user": 13203, "closed_at": "2016-10-04 04:00:34", "id": 180628644, "title": " Fix a Ruby-Doc comment for Array#dig", "url": "https://api.github.com/repos/ruby/ruby/issues/1455", "created_at": "2016-10-03 12:30:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This exposes Coverage.result in a slightly more writeable way and allows coverage analysis to reset to a baseline in a safe way.\n\nNote, I wasn't able to figure out how to invalidate the cached pointers in the VM bytecode, so this does `rb_ary_replace` across all the arrays instead. I'd love to see this improved so it were cleaner.\n\nThis is ongoing work to improve the current state of code coverage analysis. I'll be giving a talk on this at rubyconf 2016.\n\nI should also add, this applies cleanly to 2.3 as well.\n\nAlso reported here: https://bugs.ruby-lang.org/issues/12812\n", "labels": [], "number": 1456, "updated_at": "2018-02-23 03:07:20", "user": 9832, "closed_at": "None", "id": 181297014, "title": "Added Coverage.result=", "url": "https://api.github.com/repos/ruby/ruby/issues/1456", "created_at": "2016-10-06 00:16:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251838081", "text": "Why do you need to overwrite it, not subtracting older values?\n", "created_at": "2016-10-06 00:34:44", "user": 16700, "id": 251838081}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251838589", "text": "@nobu thanks for the feedback! Working on it now.\n\n> Why do you need to overwrite it, not subtracting older values?\n\nI'm actually trying to keep the older (baseline) values and reject newer values. This is for a new tool I'm working on (https://github.com/seattlerb/minitest-coverage) that reduces false positives by only recording the coverage for the class under test.\n", "created_at": "2016-10-06 00:39:01", "user": 9832, "id": 251838589}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251838638", "text": "@nobu `rb_check_hash_type` to check? \n", "created_at": "2016-10-06 00:39:28", "user": 9832, "id": 251838638}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251839038", "text": "@nobu. done and thanks.\n", "created_at": "2016-10-06 00:42:14", "user": 9832, "id": 251839038}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251901466", "text": "@zenspider \n\n> I'm actually trying to keep the older (baseline) values and reject newer values. This is for a new tool I'm working on (https://github.com/seattlerb/minitest-coverage) that reduces false positives by only recording the coverage for the class under test.\n\nWhy does Coverage.peek_result not work for your use-case?\n", "created_at": "2016-10-06 08:41:29", "user": 168854, "id": 251901466}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251907347", "text": "@eregon simply doesn't do what I want... It let's me access the results w/o wiping them... But if I can't reset results, I can't get accurate data. This patch let's me do that.\n\nCome to my talk at rubyconf.\n", "created_at": "2016-10-06 09:08:01", "user": 9832, "id": 251907347}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251923336", "text": "@nobu If you'd like, when you're happy with this, I'll flatten and push back a clean diff.\n", "created_at": "2016-10-06 10:23:32", "user": 9832, "id": 251923336}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/251953540", "text": "> @eregon simply doesn't do what I want... It let's me access the results w/o wiping them... But if I can't reset results, I can't get accurate data. This patch let's me do that.\n\nBut doing a diff between two `peek_result` would allow that, no?\nIs it because computing the diff is inconvenient?\nWhat do you mean by `accurate`? Only new coverage from a given point?\n\n> Come to my talk at rubyconf.\n\nSorry, I can't go this year.\n", "created_at": "2016-10-06 12:57:48", "user": 168854, "id": 251953540}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252062206", "text": "@eregon because it isn't between two `peek_result` collections. It's between all of them because what you're getting is cumulative. It just gets messy and hard to manage. Taking a baseline (ie, JUST loading the files and storing that off) and then resetting to that between test classes/methods completely changes the game.\n", "created_at": "2016-10-06 19:20:04", "user": 9832, "id": 252062206}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252062296", "text": "Sucks that you can't go. Sorry. 😦\n", "created_at": "2016-10-06 19:20:22", "user": 9832, "id": 252062296}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252077388", "text": "@nobu cleaned and flattened.\n", "created_at": "2016-10-06 20:22:18", "user": 9832, "id": 252077388}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252186091", "text": "@zenspider could you show any short example to demonstrate that the current API makes the result inaccurate?  I (and maybe, @eregon) can't see the problem.\n\nI won't go to rubyconf, but if you are not in a hurry, I can wait for the slides or the movie of your presentation.  (Let me know when it is published.)\n", "created_at": "2016-10-07 08:48:42", "user": 21557, "id": 252186091}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252209773", "text": "@mame I'd prefer to be able to announce at the talk that the patch is in ruby and going into the next release if at all possible.\n\n@mame / @eregon I haven't figured out how to write tests for this thing yet, but I can try to come up with a hypothetical example here:\n\n``` ruby\nclass X\n  def x\n    Y.new.y\n  end\nend\n\nclass Y\n  def y\n    Z.new.z\n  end\nend\n\nclass Z\n  def z\n    # something complex\n  end\nend\n\nrequire \"minitest/autorun\"\n\nclass TestX < Minitest::Test\n  def test_x\n    assert_nil X.new.x\n  end\nend\n```\n\nAssume these are all in appropriately different files and you run this with coverage:\n\n```\nruby -Ilib -rcoverage/start -rcoverage/pruner -e \"require './bad_example.rb'\"\n```\n\nThe coverage on this file is:\n\n```\n[1, 1, 1, null, null, null, 1, 1, 1, null, null, null, 1, 1, null, null, null, null, 1, null, 1, 1, 1, null, null]\n```\n\nor, 100%. And you didn't test the other two classes for correctness. If you then DID want to check them for full coverage, you wouldn't even know where to start. That's false positives.\n\nBut, since `Coverage` currently doesn't allow for resetting the baseline, and clearing (or getting `results`) effectively stops coverage for the rest of the run, you _can't_ do anything to nullify those false positives. It gets way too messy too fast.\n\nOr, I preload everything without any tests running and save off a baseline. Then I run my tests, one test class at a time, and record off the coverage for the class under test (CUT). Every test class I reset to baseline and I merge the actual coverage at report time.\n\nIt is prone to false negatives as it requires good mappings from the test class to the CUT, but I find that vastly preferable (and easily correctable) to false positives.\n", "created_at": "2016-10-07 10:27:48", "user": 9832, "id": 252209773}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252248516", "text": "Thank you.  Indeed, we easily forget to write a test for a common helper function because another test indirectly executes it.  You call this false-positive, don't you?  Though I have no idea that it is really a matter, I understand.\n\nHowever, I cannot understand how this patch addresses your problem.  Even if we can reset the coverage status, we cannot avoid a fact that a common helper function are accidentally executed by another test.\n\nAlso, @tenderlove introduced `Coverage.peek_result` for capturing \"per-test\" coverage information.  See [this ticket](https://bugs.ruby-lang.org/issues/10816).  I think you can use it to capture \"per-class\" coverage.  I admit the API is not so easy to use (we need to calculate difference between two sets of captured coverage information).  I'd like to hear @tenderlove's opinion.\n", "created_at": "2016-10-07 13:13:30", "user": 21557, "id": 252248516}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252371383", "text": "> However, I cannot understand how this patch addresses your problem. Even if we can reset the coverage status, we cannot avoid a fact that a common helper function are accidentally executed by another test.\n\nCan you explain the confusion further?\n\nResetting back to a baseline per test class allows me to negate the false positives. If we then run a `TestY`, we'll start with zeros again and any tests that hit `Y`will be recorded accurately.\n\n`peek_result` doesn't help this situation. It gives you monotonically increasing coverage numbers that involves a lot of extra (error-prone) work to try to figure out what was actually walked over.\n", "created_at": "2016-10-07 21:59:34", "user": 9832, "id": 252371383}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252376796", "text": "> > However, I cannot understand how this patch addresses your problem. Even if we can reset the coverage status, we cannot avoid a fact that a common helper function are accidentally executed by another test.\n> \n> Can you explain the confusion further?\n\nI think what @mame is trying to say is: how does resetting the coverage information eliminate the \"false positives\" from your test?  The example program you show will still show that `Y#y` and `Z#z` were executed even though the class under test is `X`.\n\nMaybe showing the coverage that you _want_ for that test case would be helpful?\n", "created_at": "2016-10-07 22:32:46", "user": 3124, "id": 252376796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252377274", "text": "> The example program you show will still show that Y#y and Z#z were executed even though the class under test is X.\n\nNo, that's what `peek_result` would show. My baseline (coverage after load, but w/o tests) would reset it back to as if it had just loaded. That way `X#x`, `Y#y`, and `Z#z` would all be back at zero. Then if `Z` or `Y` were actually tested, their numbers would speak for themselves. Repeat for all tests. The only thing I'm stuck with doing is trying to map TC to CUT.\n", "created_at": "2016-10-07 22:36:08", "user": 9832, "id": 252377274}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252378380", "text": "> No, that's what peek_result would show. My baseline (coverage after load, but w/o tests) would reset it back to as if it had just loaded.\n\nDoes this happen before `test_x` is run?\n\n> That way X#x, Y#y, and Z#z would all be back at zero. Then if Z or Y were actually tested, their numbers would speak for themselves.\n\nI guess I don't understand.  `X#x` calls `Y#y` which calls `Z#z`.  When `test_x` is run, how does \"resetting to 0\" avoid showing coverage for `Y#y` and `Z#z`?  Coverage counters for those lines will be increased (since they are executed).\n", "created_at": "2016-10-07 22:43:59", "user": 3124, "id": 252378380}, {"reactions": {"+1": [168854]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252388354", "text": "If I understand this patch correctly, I think it could be implemented in terms of `peek_result` [like this](https://gist.github.com/tenderlove/9d8fb0a5a37c559236237b6e00b0d3a9). (Please note that I'm not saying my code is great, I'm trying to understand the situation)\n", "created_at": "2016-10-08 00:11:25", "user": 3124, "id": 252388354}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253668961", "text": "> I guess I don't understand. X#x calls Y#y which calls Z#z. When test_x is run, how does \"resetting to 0\" avoid showing coverage for Y#y and Z#z? Coverage counters for those lines will be increased (since they are executed).\n\nThey will be increased... and then on the next test they'll be thrown away when I reset to the baseline. I'll only record off the coverage for `X` when I'm running `TestX`. With `peek_result` (not resetting baseline) you'd keep getting monotonically increasing numbers, which are false positives.\n\nWith your patch, (I assume, I have yet to run it), you're subtracting `n - o`, which results in zeros for any lines that were covered in the baseline, resulting in false negatives. You could then take it a step further and record off YET ANOTHER thing to add back in... thus proving my argument that managing it myself it overly complex without much benefit.\n\nThis patch cleans stuff up on the client side dramatically and it _makes sense_. I'm simply resetting to baseline.\n", "created_at": "2016-10-13 23:27:40", "user": 9832, "id": 253668961}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253669217", "text": "I'm still in the proof-of-concept/prototype phase on my project, but I'm fairly certain this is the right way to do coverage analysis to avoid false positives.\n\nIt seems like I'm being challenged to have everything flushed out despite @mame's tweet:\n\n> @the_zenspider Will do the weekend. I think the API be minimal, but I'm not particular about the principle if that is really useful for you.\n\nThis is really useful to me. I've passed @nobu's scrutiny (THANK YOU @nobu, you always find things so quickly). Why is there this much pushback?\n\nIs there something I can better do to get this accepted?\n", "created_at": "2016-10-13 23:29:18", "user": 9832, "id": 253669217}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253756358", "text": "> With your patch, (I assume, I have yet to run it), you're subtracting n - o, which results in zeros for any lines that were covered in the baseline, resulting in false negatives. You could then take it a step further and record off YET ANOTHER thing to add back in... thus proving my argument that managing it myself it overly complex without much benefit.\n\nSo we agree that this could be implemented with `peek_result` it would just be not fun.\n\n> Is there something I can better do to get this accepted?\n\nI think a practical example (and a test) would go a long way.  It's hard to understand _why_ this is necessary, or _why_ using `peek_result` is hard without real code to experiment with.  I would like to _attack the problem_ but it's hard to understand the problem without code.\n\nThe only other concern I would have is:\n1. Do we care if two libraries are using `Coverage` at the same time? Mutating coverage info could mess up other tools\n2. Do we need to validate the input on `result=`? This patch lets you set arrays with arbitrary objects inside.\n\nMaybe we could wrap up the recording / diff logic in a new class and leave the monotonic, non-mutable implementation intact.\n", "created_at": "2016-10-14 09:47:14", "user": 3124, "id": 253756358}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253764987", "text": "> On Oct 14, 2016, at 02:47, Aaron Patterson notifications@github.com wrote:\n> \n> Maybe we could wrap up the recording / diff logic in a new class and leave the monotonic, non-mutable implementation intact.\n\nOr address the side-effect that this is really trying to bypass: that calling `result` effectively shuts down the whole thing permanently.\n", "created_at": "2016-10-14 10:28:41", "user": 9832, "id": 253764987}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253781735", "text": "> It seems like I'm being challenged to have everything flushed out despite @mame's tweet: [...]\n\nI think it's good to have something well fleshed-out for a new API. Because once it is in, it becomes incompatible to change it and might limit other usages.\n\nFor instance, changing `Coverage.result` is most likely unacceptable.\n\n> Why is there this much pushback?\n\nWe just want to understand what you need and the use case.\nIf `Coverage.result=` is a convenience method over `Coverage.peek_result`, it's of course reasonable to ask for inclusion, but it's not \"something that was not possible before\" as you present it on `minitest-coverage`:\n\n> Worse, the tracing facilities currently make it impossible to get truly accurate numbers.\n", "created_at": "2016-10-14 12:03:41", "user": 168854, "id": 253781735}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253807596", "text": "Thank you all for discussing this.\n\n> I'll only record off the coverage for X when I'm running TestX.\n\nYou mean that you will discard the coverage for Y and Z when you run TestX by using the naming convention or by using any external information from Coverage library?  If so, it makes sense.  (I don't know if it is a good idea, though.)\n\n> We just want to understand what you need and the use case.\n\nI agree with @eregon.  I'm okay if this proposal is actually useful for any reasonable use case, but we want to understand what use case it is useful for and how it is useful.\n\n> managing it myself it overly complex without much benefit.\n\nPlease note that Coverage is not a normal Ruby library.  Coverage API focuses on providing a minimal feature set to measure coverage information.  Keeping Coverage small is benefit (for me).  Usability is of secondary importance.\n\nI think you are creating a program to extract X's coverage for TestX.  I think it will involve a naming convention resolver (or external configuration file that maps from testing classes to tested classes) to identify what class is actually tested, and a Ruby parser to identify which lines of code belong to the tested class.  It looks a massive project.  Isn't calculating the difference of two `peek_result`s relatively easy?\n\nAlso, what I worry about the most is, that `Coverage.result=` is too strong just for the use case.  Is assigning arbitrary array to it really needed?  Are APIs like `Coverage.checkpoint` and `restore` enough?\n\n```\nCoverage.checkpoint # instead of: baseline = Coverage.peek_result\n....\nCoverage.restore    # instead of: Coverage.result = baseline\n```\n\nI have no confidence if this is good enough, but at least, it requires no validation (@tenderlove's Problem 2).  \n\nBTW, I personally don't care Problem 1 since `Coverage.result` won't work well in the situation.  I believe a sane person won't use multiple coverage measurement tools simultaneously.\n", "created_at": "2016-10-14 14:00:31", "user": 21557, "id": 253807596}, {"reactions": {"laugh": [3124, 8162268]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253821919", "text": "> I believe a sane person won't use multiple coverage measurement tools simultaneously\n\nChallenge… accepted\n", "created_at": "2016-10-14 14:49:47", "user": 199, "id": 253821919}], "assignees": [21557, 21557], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "merge\n", "labels": [], "number": 1457, "updated_at": "2016-10-06 08:54:10", "user": 12760794, "closed_at": "2016-10-06 08:54:10", "id": 181357038, "title": "Merge pull request #1 from ruby/trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/1457", "created_at": "2016-10-06 08:50:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With DST the month of october can actually last more than 31 days.\nIt can last 31 days plus 1 hour. So during october, `t` used to be\nequal to \"2016-10-31 23:00:00\" instead of \"2016-11-01 00:00:00\".\nThis was then normalized to \"2016-10-01 00:00:00\" which lead every\nsingle line of log during october to rotate the log file.\nThis fix ensure that next_rotate_time(now, 'monthly') always return\nthe first day of next month in every situation.\n", "labels": [], "number": 1458, "updated_at": "2016-10-08 00:07:48", "user": 5606653, "closed_at": "2016-10-08 00:07:48", "id": 181775854, "title": "logger: fix monthly log rotate during october when DST is applied", "url": "https://api.github.com/repos/ruby/ruby/issues/1458", "created_at": "2016-10-07 21:55:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- As Fixnum and Bignum are now unified into Integer and direct usage is deprecated.\n", "labels": [], "number": 1459, "updated_at": "2016-10-09 14:40:05", "user": 621238, "closed_at": "2016-10-09 14:06:44", "id": 181888096, "title": "Fixed documentation where Fixnum was referred directly to use Integer", "url": "https://api.github.com/repos/ruby/ruby/issues/1459", "created_at": "2016-10-09 13:54:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/252490225", "text": "Thanks\n", "created_at": "2016-10-09 14:40:05", "user": 621238, "id": 252490225}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Replace \"You can defined hooked variables\" with \"You can define hooked variables\"\n", "labels": [], "number": 1460, "updated_at": "2016-10-14 07:54:53", "user": 1335661, "closed_at": "2016-10-14 07:54:53", "id": 182291174, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1460", "created_at": "2016-10-11 15:10:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/253733682", "text": "Fixed at caa9083451da43af979f842f9c2625942395b1df\n", "created_at": "2016-10-14 07:54:53", "user": 12301, "id": 253733682}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [12615679]}, "text": "'backlash' should read 'backslash'\n", "labels": [], "number": 1461, "updated_at": "2016-10-21 02:35:22", "user": 1636122, "closed_at": "2016-10-21 02:35:22", "id": 182983008, "title": "Fixed typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1461", "created_at": "2016-10-14 07:38:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi!\n\nI added a DTrace probe on the constant cache clear, it's basically the same thing @tmm1 did for the method cache.\nThis helped me to debug some apps, consider a merge if it's interesting!\n\nCheers\n", "labels": [], "number": 1462, "updated_at": "2018-02-23 03:07:20", "user": 557414, "closed_at": "None", "id": 183351071, "title": "vm_method.c: add new ruby::constant-cache-clear dtrace probe", "url": "https://api.github.com/repos/ruby/ruby/issues/1462", "created_at": "2016-10-17 08:09:31", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [345018, 5677536, 131620, 583428]}, "text": "The iso 8601 spec allows for omission of the 'day' part of a date\nrepresentation. However, because it also allows omission of the month in\nthe case of `YYYY-DDD` (where `DDD` represents the day-of-year), there\nis some abiguity.\n\nIf there are only two components, a four-digit year,\nfollowed by a dash (`-`) followed by another series of digits, the\ndisambiguation is as follows:\n- If there are two digits in the second component, that component\n  represents the month.\n- If there are three digits in the second component, that component\n  represents the day-of-year.\n\nThe existing implementation has affordances for many things that are not\nconsistent with iso 8601. Rather than make a large,\nbackwards-incompatible change, I thought it best to fix this one edge\ncase.\n\nhttps://bugs.ruby-lang.org/issues/12833\n", "labels": [], "number": 1463, "updated_at": "2018-02-23 03:07:21", "user": 2222374, "closed_at": "None", "id": 184121508, "title": "Add support for iso8601 `YYYY-MM` format", "url": "https://api.github.com/repos/ruby/ruby/issues/1463", "created_at": "2016-10-20 02:38:40", "comments": [{"reactions": {"+1": [2222374, 131620]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/254996920", "text": "It looks like there was a network error in AppVeyor when attempting to download zlib 1.2.8 from sourceforge. Someone with the correct permissions probably needs to run AppVeyor again, since the failure appears to be non-deterministic.\n\n```\nappveyor DownloadFile http://downloads.sourceforge.net/project/libpng/zlib/1.2.8/zlib128.zip\nError downloading remote file: One or more errors occurred.\nInner Exception: Unable to connect to the remote server\nCommand exited with code 2\n```\n\n![image](https://cloud.githubusercontent.com/assets/345018/19544806/28d7d3d4-9647-11e6-9fd8-ae13179b5b35.png)\n", "created_at": "2016-10-20 03:00:46", "user": 345018, "id": 254996920}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/255123361", "text": "👍 I am always for stricter adherence to standards. Tests pass on Travis and the code looks good to me.\n", "created_at": "2016-10-20 14:33:59", "user": 131620, "id": 255123361}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/255537935", "text": "This might be frowned upon, but a rebase to latest `trunk` and `push -f` triggered a successful (re-) build.\n", "created_at": "2016-10-22 16:23:24", "user": 2222374, "id": 255537935}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/278962973", "text": "FWIW, https://github.com/arnau/ISO8601/blob/master/docs/date-time.md provides what I need. It would be slightly better if that gem allowed for monkey-patching the core `date` module to 'repair' it.", "created_at": "2017-02-10 14:51:18", "user": 2222374, "id": 278962973}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- include/ruby/process.h: split from internal.h to export\n  rb_execarg stuff.\n", "labels": [], "number": 1464, "updated_at": "2016-12-10 17:59:45", "user": 16700, "closed_at": "2016-12-10 17:59:45", "id": 184668051, "title": "ruby/process.h", "url": "https://api.github.com/repos/ruby/ruby/issues/1464", "created_at": "2016-10-23 02:54:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "How about adding UnboundMethod to class suggestion?\n\n``` rb\nmodule A\n  def foo\n  end\nend\np A.instance_method(:foo) #=> #<UnboundMethod: A#foo>\ndefine_method(:bar, A.instance_method(:foo))\n```\n", "labels": [], "number": 1465, "updated_at": "2018-02-23 03:07:22", "user": 935310, "closed_at": "None", "id": 184738323, "title": "Module#define_method: Add UnboundMethod to expected classes", "url": "https://api.github.com/repos/ruby/ruby/issues/1465", "created_at": "2016-10-24 02:53:09", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Minor rdoc documentations fixes.\n", "labels": [], "number": 1466, "updated_at": "2016-12-10 17:58:30", "user": 93578, "closed_at": "2016-12-10 17:58:30", "id": 184926995, "title": "Documentation fixes", "url": "https://api.github.com/repos/ruby/ruby/issues/1466", "created_at": "2016-10-24 19:05:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/258879218", "text": "`iff` is not a typo. `iff` means `if and only if`.\n", "created_at": "2016-11-07 16:10:28", "user": 11857, "id": 258879218}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR fixes the following ruby make compile error to be able to compile newer version of ruby on distros where 1.8 BASERUBY is installed:\r\n\r\n```\r\nroot@narinemdogfood  # make\r\n        CC = gcc\r\n        LD = ld\r\n        LDSHARED = gcc -shared\r\n        CFLAGS = -O3 -fno-fast-math -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wunused-variable -Wpointer-arith -Wwrite-strings -Wdeclaration-after-statement -Wimplicit-function-declaration -Wdeprecated-declarations -std=iso9899:1999\r\n        XCFLAGS = -D_FORTIFY_SOURCE=2 -fstack-protector -fvisibility=hidden -DRUBY_EXPORT -fPIE\r\n        CPPFLAGS =   -I. -I.ext/include/x86_64-linux -I./include -I.\r\n        DLDFLAGS = -fstack-protector -pie\r\n        SOLIBS =\r\nUsing built-in specs.\r\nTarget: x86_64-redhat-linux\r\nConfigured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-libgcj-multifile --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --enable-plugin --with-java-home=/usr/lib/jvm/java-1.4.2-gcj-1.4.2.0/jre --with-cpu=generic --host=x86_64-redhat-linux\r\nThread model: posix\r\ngcc version 4.1.1 20070105 (Red Hat 4.1.1-52)\r\ngenerating id.h\r\n./tool/generic_erb.rb:27: syntax error\r\n  if (/\\A\\e\\[.*m\\z/ =~ IO.popen(\"tput smso\", \"r\", err: IO::NULL, &:read) rescue nil)\r\n                                                      ^\r\n./tool/generic_erb.rb:27: syntax error\r\n  if (/\\A\\e\\[.*m\\z/ =~ IO.popen(\"tput smso\", \"r\", err: IO::NULL, &:read) rescue nil)\r\n                                                                  ^\r\n./tool/generic_erb.rb:27: syntax error\r\n  if (/\\A\\e\\[.*m\\z/ =~ IO.popen(\"tput smso\", \"r\", err: IO::NULL, &:read) rescue nil)\r\n                                                                               ^\r\n./tool/generic_erb.rb:34: syntax error\r\nmake: *** [id.h] Error 1\r\n```\r\n", "labels": [], "number": 1467, "updated_at": "2017-01-07 00:03:00", "user": 12664837, "closed_at": "2016-10-25 18:17:28", "id": 185025461, "title": "generic_erb.rb compile error fix", "url": "https://api.github.com/repos/ruby/ruby/issues/1467", "created_at": "2016-10-25 05:56:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256097066", "text": "Weird.\nWhat version of ruby do you use as `BASERUBY`?\n", "created_at": "2016-10-25 17:05:17", "user": 16700, "id": 256097066}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256104396", "text": "I tried sources 2.3.1(downloaded from ruby download page), 2.3.2 from GitHub branch ruby_2_3, I get same compile error on CentOS5 which runs BASERUBY 1.8. Looking at this code, it seems wrong to call into API using this syntax.\r\n", "created_at": "2016-10-25 17:32:33", "user": 12664837, "id": 256104396}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256112334", "text": "`BASERUBY` is the already installed ruby, which is used to generate some files, including `id.h`, when installing from the repository.\n\n```\n$ grep ^BASERUBY Makefile\nBASERUBY = /opt/local/bin/ruby --disable=gems\n$ /opt/local/bin/ruby -v\nruby 2.4.0dev (2016-10-24 trunk 56484) [universal.x86_64-darwin15]\n```\n\nYour system seems very old, and I suspect it is 1.8.\nIt is not supported already.\n", "created_at": "2016-10-25 18:02:00", "user": 16700, "id": 256112334}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256119180", "text": "Try \"Stable Snapshot\" in https://www.ruby-lang.org/en/downloads/\n", "created_at": "2016-10-25 18:17:28", "user": 16700, "id": 256119180}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256125090", "text": "@nobu \nyes, it is 1.8:\n\nroot@narinemdogfood  # grep ^BASERUBY Makefile\nBASERUBY = /usr/bin/ruby\n\n/home/narinem/Build-OMS-Agent-for-Linux/omsagent/source/ext/ruby\nroot@narinemdogfood  # /usr/bin/ruby -v\nruby 1.8.5 (2006-08-25) [x86_64-linux]\n\nWe are building ruby from GitHub repository which is linked to ruby GitHub\ncan you advise me how to get 2_3 ruby branch compiled on CentOS 5? Should I update the /usr/bin/ruby first? I am not sure how that will solve the syntax error issue?\n", "created_at": "2016-10-25 18:24:51", "user": 12664837, "id": 256125090}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256126720", "text": "snapshort tarballs contain auto generated files, so you shouldn't need installed ruby at all.\n", "created_at": "2016-10-25 18:26:44", "user": 16700, "id": 256126720}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256128589", "text": "which branch you would recommend me to use that is stable and also has GlobalSignRootCA.pem cert fix? I looked at 2.3.1 from  https://www.ruby-lang.org/en/downloads/ , the SSL fix is not there.\n", "created_at": "2016-10-25 18:30:11", "user": 12664837, "id": 256128589}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256135949", "text": "Overwriting the source tree with a snapshot tarball would work.\nAnd seems that GlobalSignRootCA.pem has been committed to 2.2 and 2.3 branches.\n\nSince this has been off-topic from the original PR, you may want to go to ask other places, bugs.ruby-lang.org, ruby-talk ML, stackoverflow, or somewhere.\n", "created_at": "2016-10-25 18:46:17", "user": 16700, "id": 256135949}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256172556", "text": "@nobu \nThanks for your response. I am still not clear on exact steps on how to update my system to be able to build ruby_2_3 branch. Note that overwriting ruby source content I get from GitHub is not an option for me.\n\nCan you correct me if I got anything wrong?\n1.Update 1.8 version of BASERUBY (under /usr/bin/ruby) to be latest using the snapshot tarball from https://www.ruby-lang.org/en/downloads/\n2. Clone ruby_2_3 from GitHub \n\nAt this point I should not be seeing the compile error? Can you explain why this fix is not needed? Because looking at the ./tool/generic_erb.rb:27:  it seems a syntax error. \n", "created_at": "2016-10-25 20:53:57", "user": 12664837, "id": 256172556}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256223971", "text": "> Note that overwriting ruby source content I get from GitHub is not an option for me.\n\nWhy? 2.3 branch isn't updated frequently, and you can see if something has been modified unintentionally, by `git status`.\n\n> 1.Update 1.8 version of BASERUBY (under /usr/bin/ruby) \n\nYou don't have to overwrite the system ruby.\nInstall new one under /usr/local/bin, ~/bin, or anywhere you like, and add the path to `$PATH`.\n\n> At this point I should not be seeing the compile error? Can you explain why this fix is not needed? Because looking at the ./tool/generic_erb.rb:27: it seems a syntax error. \n\nJust because 1.8 doesn't support that (relatively) new syntax.\n", "created_at": "2016-10-26 01:17:44", "user": 16700, "id": 256223971}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256228404", "text": "And you may need to update bison, autoconf, and etc, too.\nI don't know old CentOS 5 well.\n", "created_at": "2016-10-26 01:51:25", "user": 16700, "id": 256228404}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256239993", "text": "@nobu \r\nYou mentioned that BASERUBY is used to generate some files. What if my system did not have any ruby? would I be able to compile the ruby I got from GitHub or not? If I delete the BASERUBY from my system, would thay solve the issue  I am having or I would not be able to compile the new ruby at all?  \r\n", "created_at": "2016-10-26 03:23:37", "user": 12664837, "id": 256239993}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256241355", "text": "I am able to compile and install ruby 2.3 from branch ruby_2_3 on my system just fine after making this change to .tool/generic_erb.rb . This syntax seems in C code, for which the compiler has not changed for long time. If the new ruby understands this syntax, then fixing it in this particular file will help to fix 1.8 compatibility issue and would not require any system upgrade other than autoconf. At least that is what worked for me.\n", "created_at": "2016-10-26 03:36:18", "user": 12664837, "id": 256241355}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256243589", "text": "You can't build ruby directly from the repository (svn.ruby-lang.org or GitHub) without BASERUBY.\nThe snapshot tarballs contain generated files.\n", "created_at": "2016-10-26 03:58:10", "user": 16700, "id": 256243589}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256243624", "text": "And your patch does change **nothing**, compare this PR and your local file carefully.\n", "created_at": "2016-10-26 03:58:25", "user": 16700, "id": 256243624}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256245541", "text": "I have never heard about single colon syntax with space when calling into a namespace or API. If this patch is not changing anything, then how would it solve the compile error I was getting? Are you may be using a different char set ? The double colon symbol is not visible in my system. In my system I only see one colon and then a space. \r\n", "created_at": "2016-10-26 04:17:49", "user": 12664837, "id": 256245541}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256245968", "text": "This is what I see in my system : err: IO::NULL\r\n\r\nThere is a space following err: . That does not seem right. \r\n", "created_at": "2016-10-26 04:22:16", "user": 12664837, "id": 256245968}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256248201", "text": "If I update the BASERUBY with 2.3.1 snapshot tarball, then clone 2.4 ruby from GitHub, will I be able to compile 2.4 (from trunk branch for example) and install just fine?\n", "created_at": "2016-10-26 04:44:13", "user": 12664837, "id": 256248201}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256254358", "text": "It's a syntax for symbol key hash, since 1.9, and the space lets it parsed as\n`err(:IO :: NULL)`.\n\n```\n$ ~/ruby/1.8/bin/ruby -v -e 'p(err:IO::NULL)'\nruby 1.8.7 (2013-06-27 patchlevel 374) [i686-darwin11.4.0]\n-e:1: IO is not a class/module (TypeError)\nbash: exit 1\n```\n\nIt avoids the syntax error but does not work.\n", "created_at": "2016-10-26 05:39:16", "user": 16700, "id": 256254358}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256254546", "text": "Yes, 2.3.1 should work as BASERUBY, but 2.4 is under development.\n", "created_at": "2016-10-26 05:40:49", "user": 16700, "id": 256254546}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/256256538", "text": "@nobu \nThank you, let me try that.\n", "created_at": "2016-10-26 05:57:28", "user": 12664837, "id": 256256538}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://bugs.ruby-lang.org/issues/11925\n", "labels": [], "number": 1468, "updated_at": "2017-12-12 10:20:49", "user": 1250153, "closed_at": "2017-12-12 10:20:44", "id": 185198031, "title": "Add Struct.new_from_kwargs", "url": "https://api.github.com/repos/ruby/ruby/issues/1468", "created_at": "2016-10-25 18:33:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351008371", "text": "Obsolete, see https://bugs.ruby-lang.org/issues/11925, https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/61137 and #1771 ", "created_at": "2017-12-12 10:20:44", "user": 1250153, "id": 351008371}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm happy to make changes or improve this.\n\nI think this change improves merge function. It removes need for merge0 which was not a very useful function.\n\nhttps://bugs.ruby-lang.org/issues/12886\n", "labels": [], "number": 1469, "updated_at": "2017-04-17 06:04:57", "user": 30030, "closed_at": "2017-04-17 06:04:57", "id": 186173932, "title": "Tidy up merge, fixes https://bugs.ruby-lang.org/issues/12886", "url": "https://api.github.com/repos/ruby/ruby/issues/1469", "created_at": "2016-10-30 23:38:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/257190114", "text": "I feel that the ruby gems code needs to be fixed somewhere but I'm not sure where. Perhaps someone can help who is more familiar with the code base.\n", "created_at": "2016-10-30 23:59:27", "user": 30030, "id": 257190114}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/257193022", "text": "Okay so now Rubyspec is failing..\n\n1)\nURI#+ raises a URI::BadURIError when adding two relative URIs FAILED\nExpected URI::BadURIError\nbut no exception was raised (#<URI::Generic a/b/d> was returned)\n/home/travis/build/ruby/ruby/spec/rubyspec/library/uri/plus_spec.rb:39:in `block (2 levels) in <top (required)>'\n/home/travis/build/ruby/ruby/spec/rubyspec/library/uri/plus_spec.rb:5:in`<top (required)>'\n\nI'll fix this if I can get some positive forward movement from a core ruby dev.\n", "created_at": "2016-10-31 00:49:22", "user": 30030, "id": 257193022}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/257193806", "text": "I can't seem to comment on the bug report so I'll just add here:\n\nMatthew, thanks for providing some additional details.\n\nI agree with your points, sticking to the definition of the [RFC](https://tools.ietf.org/html/rfc3986#section-4.2) makes sense. Then, according to the RFC, this implementation is wrong in many ways. For example, `URI(\"a/b\")` should not parse and raise an error. Because it doesn't, it causes confusion.\n\nEither the API should completely support working with both URIs and relative references, or it shouldn't. Otherwise, it's confusing when some things work and others don't.\n\nWhat might make more sense, is to add URI#relative_reference? and have URI handle this case. I can expand the [PR I made here](https://github.com/ruby/ruby/pull/1469) to add that.\n", "created_at": "2016-10-31 01:00:03", "user": 30030, "id": 257193806}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/257206707", "text": "@nobu @hsbt I've rebased the PR since part of it was merged :) Thanks.\n\nCan we discuss removing the `unless self.absolute?` check?\n", "created_at": "2016-10-31 03:25:31", "user": 30030, "id": 257206707}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/286420403", "text": "Will we ever make progress on this issue, or is it not important?", "created_at": "2017-03-14 13:28:26", "user": 30030, "id": 286420403}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/286970905", "text": "Maintainer of `URI` is not active in 2017. We will triage this issue next developer meeting.", "created_at": "2017-03-16 06:40:40", "user": 12301, "id": 286970905}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/287594068", "text": "Awesome, thanks. Looking forward to an update :)", "created_at": "2017-03-19 04:42:07", "user": 30030, "id": 287594068}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/294412359", "text": "https://bugs.ruby-lang.org/issues/12886#note-5", "created_at": "2017-04-17 06:04:57", "user": 12301, "id": 294412359}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1470, "updated_at": "2016-11-06 05:43:40", "user": 43500, "closed_at": "2016-11-06 05:43:40", "id": 186524596, "title": "include and prepend check no args", "url": "https://api.github.com/repos/ruby/ruby/issues/1470", "created_at": "2016-11-01 12:40:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* set ANYARGS as arguments for func1 and func2\r\n\r\n* mention the exception object which is passed to func2 as\r\n  the second argument\r\n\r\nTo make it easier for review:\r\n\r\n - [rb_rescue: signature](https://github.com/ruby/ruby/blob/trunk/eval.c#L855-L857)\r\n - [rb_rescue2: invocation of func2 (r_proc)](https://github.com/ruby/ruby/blob/trunk/eval.c#L841-L843)", "labels": [], "number": 1471, "updated_at": "2016-11-02 07:19:19", "user": 6417870, "closed_at": "2016-11-01 23:46:44", "id": 186637821, "title": "doc/extension.rdoc: update rb_rescue description", "url": "https://api.github.com/repos/ruby/ruby/issues/1471", "created_at": "2016-11-01 20:28:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/257790189", "text": "Thanks 👍 \n", "created_at": "2016-11-02 07:19:19", "user": 6417870, "id": 257790189}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The sentence `Negative values of +index+ count from the end of the array.` can be interpreted that it only holds if a block is given. Clarify it.", "labels": [], "number": 1472, "updated_at": "2016-11-08 19:44:51", "user": 326935, "closed_at": "2016-11-08 19:44:51", "id": 186887979, "title": "Update documentation of fetch", "url": "https://api.github.com/repos/ruby/ruby/issues/1472", "created_at": "2016-11-02 18:46:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`doc/extension.rdoc`\r\n\r\nSet `ANYARGS` as arguments to the underlying functions of:\r\n\r\n - `rb_define_method`\r\n - `rb_define_singleton_method`\r\n - `rb_define_private_method`\r\n - `rb_define_protected_method`\r\n - `rb_define_module_function`\r\n - `rb_define_global_function`", "labels": [], "number": 1473, "updated_at": "2016-12-08 14:08:36", "user": 6417870, "closed_at": "2016-12-08 12:59:26", "id": 186910984, "title": "extension.rdoc: add ANYARGS to method definitions", "url": "https://api.github.com/repos/ruby/ruby/issues/1473", "created_at": "2016-11-02 20:27:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265747902", "text": "Thanks!", "created_at": "2016-12-08 14:08:36", "user": 6417870, "id": 265747902}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1009309, 3873515]}, "text": "If you want to configure SMTP for sending emails with SMTP Auth in Rails or directly via Net::SMTP you need to define the accepted auth type of the smtp server (which is complicated and need some experience to find out what you need to enter). Most SMTP servers work with \"plain\" (currently the default auth type of Net::SMTP) but for exchange (also Office365) you need to use \"login\". \r\n\r\nTo make the config easier this pull request adds auto detection of supported auth types for SMTP server and use first working auth type.\r\n\r\n -=> So no auth type option need to be set in Rails / Net::SMTP unless you really want to use a certain auth type.", "labels": [], "number": 1474, "updated_at": "2018-03-12 05:54:15", "user": 110226, "closed_at": "None", "id": 187555015, "title": "Added auto detected of authentication type based on smtp server capabilities.", "url": "https://api.github.com/repos/ruby/ruby/issues/1474", "created_at": "2016-11-06 11:06:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/258795292", "text": "Nice! Actually it would be interesting in which order the checks should get performed. Imho the most secure one should be the one first tried and so on...\n", "created_at": "2016-11-07 10:10:03", "user": 3873515, "id": 258795292}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/372200870", "text": "Doesn’t look like this was ever merged?", "created_at": "2018-03-12 05:54:15", "user": 16469772, "id": 372200870}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [27387, 17025349, 10838302]}, "text": "As stated in this PR https://github.com/ruby/ruby/pull/782 and HTTP RFC https://tools.ietf.org/html/rfc1945#section-6.1 reason phrase is optional in status line, thus `@message` variable can be nil and `error!` method can throw error because we try to call `dump` on nil. I think we can simply avoid this just checking it straightforward.", "labels": [], "number": 1475, "updated_at": "2016-11-08 20:55:48", "user": 414803, "closed_at": "2016-11-08 20:26:32", "id": 188071752, "title": "Fix undefined method 'dump' for nil:NilClass (NoMethodError)", "url": "https://api.github.com/repos/ruby/ruby/issues/1475", "created_at": "2016-11-08 18:45:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/259250953", "text": "@route Thank you!\n", "created_at": "2016-11-08 20:32:05", "user": 11493, "id": 259250953}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/259256947", "text": "@amatsuda  thanks to you!\n", "created_at": "2016-11-08 20:55:48", "user": 414803, "id": 259256947}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use socket's `connect_nonblock` and `IO.select` to tigger connecting timeout for net/http and net/pop.\r\n\r\n`Timeout.timeout` is bad for performance. It will create and kill one thread every time.\r\nUse socket's connecting timeout is better than `Timeout.timeout`.\r\n", "labels": [], "number": 1476, "updated_at": "2016-11-09 16:46:11", "user": 778284, "closed_at": "2016-11-09 16:46:11", "id": 188290677, "title": "Fast and safe connect timeout for net", "url": "https://api.github.com/repos/ruby/ruby/issues/1476", "created_at": "2016-11-09 16:30:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "DO NOT MERGE THIS\r\n\r\nThis pull request is investigation of appveyor configuration.", "labels": [], "number": 1477, "updated_at": "2016-11-10 06:34:30", "user": 12301, "closed_at": "2016-11-10 06:34:30", "id": 188427413, "title": "Improve appveyor configuration", "url": "https://api.github.com/repos/ruby/ruby/issues/1477", "created_at": "2016-11-10 06:07:29", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "net/ftp: raw ftp command stat can also be used to get path status (file and dir)\r\nadded that functinality to ftp.rb", "labels": [], "number": 1478, "updated_at": "2016-11-24 01:08:56", "user": 103052, "closed_at": "2016-11-23 00:04:13", "id": 188639648, "title": "added support for path stat in ftp", "url": "https://api.github.com/repos/ruby/ruby/issues/1478", "created_at": "2016-11-10 22:47:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261309953", "text": "i thought it was worth adding since the standard does support it and it would be a more complete implementation , it is an optional parameter and the default behavior stays the same , so there will be no breakage.\n\np.s\nmaybe i should add another method since the stat on a path is more of an alternative to list that uses the control plane of the protocol. \nwhat do you think?\n", "created_at": "2016-11-17 17:20:56", "user": 103052, "id": 261309953}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262429368", "text": "@hsbot @nobu  it looks like shugo just copy pasted my stuff and added a line in the news text.\r\ncould you please attribute those commits to me?\r\n\r\nor at least mention me here:\r\nhttps://bugs.ruby-lang.org/projects/ruby/wiki/Contributors\r\n", "created_at": "2016-11-23 03:46:53", "user": 103052, "id": 262429368}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262457210", "text": "see https://github.com/ruby/ruby/commit/e50266f299758a49d8933f4023803470c5f09943\r\n\r\nWe didn't use git directly. We couldn't use your commit on git.", "created_at": "2016-11-23 08:33:39", "user": 12301, "id": 262457210}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262458637", "text": "I added you to https://bugs.ruby-lang.org/projects/ruby/wiki/Contributors", "created_at": "2016-11-23 08:42:39", "user": 12301, "id": 262458637}, {"reactions": {"+1": [103052]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262666948", "text": "We can't change the author of the SVN commit log, so I've added credit to NEWS in 94ca443 instead.\r\nThanks for your contribution.\r\n", "created_at": "2016-11-24 01:08:56", "user": 34552, "id": 262666948}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When you copy a sym proc, the copy keeps a pointer to the environment of the original sym_proc.\r\nThe problem is that when a sym_proc frees its memory, it also frees the environment because its part of the same struct.\r\nSo duplicated sym procs ends up pointing to corrupted memory. If after that, this position of memory is filled with random data, the process stops with a SEG FAULT.\r\n\r\nFor more information please see this:\r\nhttps://bugs.ruby-lang.org/issues/12927", "labels": [], "number": 1479, "updated_at": "2016-11-19 07:49:59", "user": 1465872, "closed_at": "2016-11-19 07:49:59", "id": 188938370, "title": "proc.c: Fix proc_dup to avoid duplicated sym_procs.", "url": "https://api.github.com/repos/ruby/ruby/issues/1479", "created_at": "2016-11-12 22:23:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261694797", "text": "Merged at r56841. Thank you!\n", "created_at": "2016-11-19 05:26:56", "user": 21976, "id": 261694797}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "net/http, net/pop, net/smtp and net/ftp use `Timeout.timeout` to calculate connect_timeout.\r\nTimeout.timeout is slow. It creates and destroys a thread every time.\r\nTimeout.timeout is also dangerous. see [Timeout: Ruby's Most Dangerous API](http://www.mikeperham.com/2015/05/08/timeout-rubys-most-dangerous-api/)\r\n\r\nIt is more effective and safe to use socket timeout to accomplish that. \r\nFollow is the changes need to do.\r\n1. Replace `TCPSocket.open` with `Socket.tcp`\r\n2. Create `TCPSocket` with `TCPSocket.for_fd`\r\n\r\nredmine issue is here:\r\n[Use socket timeout for net/http and net/pop for open_timeout](https://bugs.ruby-lang.org/issues/12928)", "labels": [], "number": 1480, "updated_at": "2018-02-23 03:07:23", "user": 778284, "closed_at": "None", "id": 188963271, "title": "Fast and safe connect timeout for net", "url": "https://api.github.com/repos/ruby/ruby/issues/1480", "created_at": "2016-11-13 10:30:54", "comments": [{"reactions": {"+1": [778284]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260292115", "text": "Maybe what you need is `Socket.tcp` but returns `TCPSocket` instead of `Socket`.\n", "created_at": "2016-11-14 09:51:36", "user": 16700, "id": 260292115}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260294257", "text": "Good idea. I don't know `Socket.tcp` supports connect_timeout before. I will change it. Thank you.\n", "created_at": "2016-11-14 10:01:09", "user": 778284, "id": 260294257}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260397517", "text": "I use `Socket.tcp` now. `Socket.tcp` returns `Socket` instance. So I need to convert it to `TCPSocket` instance using `TCPSocket.for_fd`. And I apply it for net/smtp and net/ftp also.\nThank you for your advice. @nobu \n", "created_at": "2016-11-14 17:12:09", "user": 778284, "id": 260397517}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260553623", "text": "Socket.tcp is designed to replace TCPSocket, so it's better to use Socket itself.\n", "created_at": "2016-11-15 05:50:03", "user": 34552, "id": 260553623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260557672", "text": "Replaced `addr` and `peeraddr` with modern `Addrinfo` interfaces, and all tests would pass without `for_fd` hack.\n", "created_at": "2016-11-15 06:21:10", "user": 16700, "id": 260557672}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260716523", "text": "I changed the codes. Removed TCPSocket.for_fd and used socket directly now.\n", "created_at": "2016-11-15 17:58:23", "user": 778284, "id": 260716523}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260718580", "text": "Eric Wong Post:\n\n>  I agree with eliminating Timeout, but I don't think your\n> solution is enough because it does not cover timeouts for\n> DNS resolution (getaddrinfo(3) calls).\n> \n> For timeouts, we would need to use resolv.rb instead of getaddrinfo(3)\n> provided by libc to do timeouts without a separate thread. I started\n> adding timeouts to resolv.rb last year but can't remember how far I got...\n> I'm not sure if resolv.rb supports all the features of a modern\n> getaddrinfo(3), either, AFAIK, not many people use resolv.rb.\n\nI need to fix it.\n", "created_at": "2016-11-15 18:06:15", "user": 778284, "id": 260718580}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "There is no problem, but I just noticed it's redundant.", "labels": [], "number": 1481, "updated_at": "2016-11-14 02:41:18", "user": 2661835, "closed_at": "2016-11-14 02:41:18", "id": 188974298, "title": "array.c: remove redundant modify check", "url": "https://api.github.com/repos/ruby/ruby/issues/1481", "created_at": "2016-11-13 14:54:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/260236124", "text": "Ah, I see why it is needed.\n", "created_at": "2016-11-14 02:41:18", "user": 2661835, "id": 260236124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We were missing a `:nodoc:` magic comment that was making automated tools show\r\nthat this method was missing documentation, when it really didn't need to be\r\ndocumented.", "labels": [], "number": 1482, "updated_at": "2016-12-10 18:24:12", "user": 8422484, "closed_at": "2016-12-10 18:24:12", "id": 188978503, "title": "Add missing :nodoc: comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1482", "created_at": "2016-11-13 16:15:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The behaviour equals that of Regexp#match? It was requested as Feature 12898 (https://bugs.ruby-lang.org/issues/12898)", "labels": [], "number": 1483, "updated_at": "2016-12-12 02:56:50", "user": 1250153, "closed_at": "2016-12-12 02:56:50", "id": 189395527, "title": "Implemented String#match?", "url": "https://api.github.com/repos/ruby/ruby/issues/1483", "created_at": "2016-11-15 13:45:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/266301243", "text": "The tests here have been copied from test_regex.rb, with the callee and the argument swapped. This results in a warning for the following line:\r\n\r\n```ruby\r\nassert_equal(true, (\"\\u3042\" + '\\x').match?(/../n, 1))\r\n```\r\n\r\nThis is because we construct a unicode string, and try to match it with a `/n` Regex (which expects ASCII-8BIT). There's an easy fix for it: either remove the `n` or replace it with a `u`. Or just remove this particular testcase: if we see these tests as whitebox tests, we know that `String#match?` simply forwards the call to `Regex#match?`, so there's no need to repeat all the tests of `Regex#match?` (but a test with a String as argument would be a good idea, to see if it converts the string to a regex.", "created_at": "2016-12-11 19:19:52", "user": 1250153, "id": 266301243}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\r\nirb(main):001:0> name = Resolv::DNS::Name.create('example.local')\r\n=> #<Resolv::DNS::Name: example.local>\r\nirb(main):002:0> name.to_a.last == 'local'\r\n=> false\r\nirb(main):003:0> name.to_a.last.to_s == 'local'\r\n=> true\r\n```\r\n\r\nResolv::DNS::Label::Str cannot direct compare with string.\r\nI add `to_s` and let it work.", "labels": [], "number": 1484, "updated_at": "2017-10-21 13:59:33", "user": 887984, "closed_at": "2017-10-21 13:59:33", "id": 189571505, "title": "Resolv::MDNS#each_address not work", "url": "https://api.github.com/repos/ruby/ruby/issues/1484", "created_at": "2016-11-16 03:14:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261386459", "text": "Can you add a test?\n", "created_at": "2016-11-17 22:12:30", "user": 3124, "id": 261386459}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262479098", "text": "@tenderlove I am not sure this test is ok to others. The `each_address` will ask DNS server to resolve address, but I didn't found any way to mock it or choose a MDNS services for each os default builtin with it.", "created_at": "2016-11-23 10:30:56", "user": 887984, "id": 262479098}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Compiling legacy Ruby 1.9.3 on alpine linux 3.4 fails with the following error:\r\n\r\n```\r\nlinking miniruby\r\nio.o: In function `linux_iocparm_len':\r\n/usr/src/ruby/io.c:8086: undefined reference to `_IOC_SIZE'\r\ncollect2: error: ld returned 1 exit status\r\nMakefile:165: recipe for target 'miniruby' failed\r\nmake: *** [miniruby] Error 1\r\n\r\n```\r\n\r\nScreenshot:\r\n![image](https://cloud.githubusercontent.com/assets/14018885/20359163/9f9b93d2-abfc-11e6-9758-e637a31df4c6.png)\r\n\r\nI backported the same check for _IOC_SIZE located on `io.c` that is found on the latest version of Ruby (whatever is on master branch, I believe).\r\n\r\nAfter applying fix compilation and install purrs like a kitten. Following usual install procedures `./configure && make && make install`.\r\n\r\nI realize this might never get pulled in, but just publicly documenting it just in case anyone else runs into this, for example, http://stackoverflow.com/questions/39769271/trying-to-install-ruby-1-9-3-on-alpine-3-4-fails.\r\n\r\nThanks.\r\n", "labels": [], "number": 1485, "updated_at": "2016-11-17 03:47:57", "user": 14018885, "closed_at": "2016-11-17 03:47:57", "id": 189793073, "title": "Ruby 1.9.3 does not compile on Alpine Linux", "url": "https://api.github.com/repos/ruby/ruby/issues/1485", "created_at": "2016-11-16 18:05:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261147872", "text": "1.9 has reached the EOL already, and it's been fixed since 2.1.\n", "created_at": "2016-11-17 03:47:57", "user": 16700, "id": 261147872}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`travis-rubies` now uses 3 Mac jobs to create archives for various OS\r\nreleases.\r\n\r\nThis is a bit wasteful if multiple builds pass in a short period.\r\n\r\nInstead, Travis CI is now running a nightly build of ruby-head\r\n(around 22:30 UTC). This will happen regardless of the state of the\r\nmaster branch.", "labels": [], "number": 1486, "updated_at": "2016-11-17 13:10:07", "user": 25666, "closed_at": "2016-11-17 13:07:28", "id": 189898164, "title": "Remove webhook notification to Travis CI [skip ci]", "url": "https://api.github.com/repos/ruby/ruby/issues/1486", "created_at": "2016-11-17 00:40:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261242072", "text": "@BanzaiMan Thank you. I committed at https://github.com/ruby/ruby/commit/53ca8de37f96de5928ed7aff27019930da51994d\n", "created_at": "2016-11-17 13:07:25", "user": 12301, "id": 261242072}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261242176", "text": "Note: I forgot add `[fix GH-1486]` to commit message 🙇 \n", "created_at": "2016-11-17 13:07:54", "user": 12301, "id": 261242176}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261242553", "text": "お疲れ様です。\n", "created_at": "2016-11-17 13:10:07", "user": 25666, "id": 261242553}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The main reason why I absolutely appreciate Ruby programming language is because operators are ubiquitous among the syntax. That's why I think that be able to merge hashes with the + operator would be extremely cool.\r\n\r\nI thought to contribute that patch while doing something I thought was not homogenous throught the syntax. It this case it was a Redmine plugin. For instance :\r\n\r\n```ruby\r\ndef self.fetch_and_summation(scope, extra_conditional)\r\n\r\n    in_trackers = {:tracker => {:is_closed => false}}\r\n    in_scope = {(scope.class.name.downcase.to_sym) => scope}\r\n    # [...] Many more others conditionals similar to those\r\n\r\n    stuff[:estimated_hours] = Issue.where(in_trackers.merge(in_scope).[...]).group(:category).sum([...])[...]\r\n    # [...] Many more others queries similar to this\r\n\r\n    return stuff;\r\n\r\nend\r\n```\r\nUsing `k1.merge(k2).merge(k3)` seems very scary compared to the rest of source code.\r\n\r\nWith that patch it would look like more like this :\r\n```ruby\r\nstuff[:estimated_hours] = Issue.where(in_tracker + in_scope + extra_conditional + [...])\r\n```\r\n\r\nIt is ultra sexy isn't it ? It works directly from an alias of the blessed core Hash.merge method.", "labels": [], "number": 1487, "updated_at": "2018-02-23 03:07:24", "user": 4608579, "closed_at": "None", "id": 190452156, "title": "Permit \"+\" operator as an alias to merge hashes", "url": "https://api.github.com/repos/ruby/ruby/issues/1487", "created_at": "2016-11-19 00:15:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261926807", "text": "Rails 3.0 only had `#&` alias for `#merge`, but removed. http://apidock.com/rails/v3.0.9/ActiveRecord/SpawnMethods/%26", "created_at": "2016-11-21 12:42:39", "user": 11857, "id": 261926807}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261958296", "text": "Interesting, why they removed such a functionality ? That patch is meant for the Ruby Lang; Rails was used for example purposes.", "created_at": "2016-11-21 14:50:35", "user": 4608579, "id": 261958296}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/261997671", "text": "I don't know why removed, because [removed commit](https://github.com/rails/rails/commit/fbd917f50a6046d02dd6a64ccfb1aed0cbce68d8) and [deprecated commit](https://github.com/rails/rails/commit/66003f596452aba927312c4218dfc8d408166d54) have no references.", "created_at": "2016-11-21 16:56:04", "user": 11857, "id": 261997671}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/262208346", "text": "It looks pretty much like a duplicate of  #1359 to me", "created_at": "2016-11-22 10:48:35", "user": 2010013, "id": 262208346}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- Contains less code\r\n- Easier to understand Observable logic\r\n- No performance downgrade\r\n\r\nhttps://bugs.ruby-lang.org/issues/12971", "labels": [], "number": 1489, "updated_at": "2016-11-22 19:20:36", "user": 786577, "closed_at": "2016-11-22 19:20:36", "id": 191073403, "title": "12971 Remove `defined?` checks from observer.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1489", "created_at": "2016-11-22 17:30:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This option allows a user to redirect command's stderr\r\nto the stdout and then to the stdin of the next command in a\r\npipeline. It's a very common use case to capture both\r\nstreams.", "labels": [], "number": 1490, "updated_at": "2018-02-23 03:07:24", "user": 1746846, "closed_at": "None", "id": 191364743, "title": "Add :err => :out option for the open3 pipeline", "url": "https://api.github.com/repos/ruby/ruby/issues/1490", "created_at": "2016-11-23 19:46:33", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The same code is used for has_value? and value?, but according to\r\nhttp://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/43765\r\nhas_value is deprecated. Use the non-deprecated syntax in the examples.", "labels": [], "number": 1491, "updated_at": "2016-12-10 18:34:47", "user": 1250153, "closed_at": "2016-12-10 18:34:47", "id": 191563603, "title": "Updated documentation examples for Hash#value?", "url": "https://api.github.com/repos/ruby/ruby/issues/1491", "created_at": "2016-11-24 16:53:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Alway add a space between a comma and the next element. These spaces\r\nwere there sometimes, but not always. This keeps to code consistent.", "labels": [], "number": 1492, "updated_at": "2016-12-10 17:55:44", "user": 1250153, "closed_at": "2016-12-10 17:55:44", "id": 191564089, "title": "Cleanup ruby method definitions in hash.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1492", "created_at": "2016-11-24 16:56:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1493, "updated_at": "2016-11-26 11:12:27", "user": 16700, "closed_at": "2016-11-26 11:12:27", "id": 191638020, "title": "Feature/12695 homedir", "url": "https://api.github.com/repos/ruby/ruby/issues/1493", "created_at": "2016-11-25 07:11:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/10912\r\n\r\nI also want a method to determine whether an address is link-local.\r\nIt seemed that nobody responded, so I tried implementing `IPAddr#link_local?`.\r\n\r\nIn addition, I implemented `IPAddr#loopback?` and `IPAddr#multicast?`.\r\nThe reason for choosing these is because these addresses are clearly defined in RFC for both IPv4 and IPv6.\r\n\r\n|Address Type| RFC |\r\n|---|---|\r\n|Loopback(IPv4)|RFC 6890|\r\n|Link-Local(IPv4)|RFC 3927, RFC 6890|\r\n|Multicast(IPv4) | RFC 5771, RFC 6890|\r\n|Loopback(IPv6) | RFC 4291 2.5.3 |\r\n|Link-Local(IPv6) | RFC 4291 2.5.6|\r\n|Multicast(IPv6)|RFC 4291 2.7|\r\n\r\nPlease tell me if there is a reason not to implement them.", "labels": [], "number": 1494, "updated_at": "2017-12-05 11:13:57", "user": 2253692, "closed_at": "2017-12-05 11:13:57", "id": 191841201, "title": "Add IPAddr#link_local?, loopback?, multicast?", "url": "https://api.github.com/repos/ruby/ruby/issues/1494", "created_at": "2016-11-27 04:09:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/263726971", "text": "I think you have to suggest this on the https://bugs.ruby-lang.org/ tracker.\r\n\r\nIt may be better to actually split loopback? and multicast? out of the\r\nlink_local? suggestion; the latter may be via .private? but again, I think\r\nit may be best to just have the discussion on https://bugs.ruby-lang.org/\r\n\r\nWhen matz gives the thumb up then it will be surely quickly added but\r\nsometimes it can take quite some time before all suggestions are \r\nchecked (just my experience so far).", "created_at": "2016-11-29 22:54:48", "user": 13723, "id": 263726971}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/263745901", "text": "@shevegen \r\nI wrote the comment to https://bugs.ruby-lang.org/issues/10912, but nobody comments.\r\nI will try writing again.\r\nThanks!\r\n", "created_at": "2016-11-30 00:32:16", "user": 2253692, "id": 263745901}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `compatibility_version` should have an API version and the `current_version` should have a program version of Ruby, but they have been reversed and the binary compatibility has never worked.", "labels": [], "number": 1495, "updated_at": "2016-11-27 10:22:41", "user": 10236, "closed_at": "2016-11-27 10:18:23", "id": 191843427, "title": "Reverse compatibility_version and current_version for Darwin", "url": "https://api.github.com/repos/ruby/ruby/issues/1495", "created_at": "2016-11-27 05:29:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/263114110", "text": "Merged as r56905 (673a6ad9).", "created_at": "2016-11-27 10:22:41", "user": 10236, "id": 263114110}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This example explains when writing a value greater than 65536,\r\nso the value specify must be greater than 65536.\r\n    \r\nThis seems to be wrong in cee7f69", "labels": [], "number": 1496, "updated_at": "2016-12-07 15:31:09", "user": 987638, "closed_at": "2016-12-07 15:31:09", "id": 192789990, "title": "fix typo in `IO#write_nonblock` example [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1496", "created_at": "2016-12-01 09:10:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed formatting in few places.", "labels": [], "number": 1497, "updated_at": "2016-12-06 15:34:44", "user": 790463, "closed_at": "2016-12-06 15:34:44", "id": 193180883, "title": "Fixed formatting", "url": "https://api.github.com/repos/ruby/ruby/issues/1497", "created_at": "2016-12-02 18:07:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Replace `poped` with `popped`.", "labels": [], "number": 1498, "updated_at": "2016-12-06 12:50:41", "user": 13203, "closed_at": "2016-12-06 12:50:41", "id": 193572888, "title": "Fix typos", "url": "https://api.github.com/repos/ruby/ruby/issues/1498", "created_at": "2016-12-05 18:22:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1499, "updated_at": "2016-12-07 00:17:52", "user": 5165324, "closed_at": "2016-12-07 00:17:52", "id": 193856553, "title": "asn1: handle GENERALIZEDTIME without seconds", "url": "https://api.github.com/repos/ruby/ruby/issues/1499", "created_at": "2016-12-06 19:03:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265316173", "text": "duplicates https://github.com/ruby/openssl/pull/88", "created_at": "2016-12-07 00:17:52", "user": 12301, "id": 265316173}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/12684\r\n\r\nAdded Delegate#eql? method which alias of Delegate#==\r\n\r\nwdyt?", "labels": [], "number": 1500, "updated_at": "2016-12-08 00:41:14", "user": 6443461, "closed_at": "2016-12-08 00:41:14", "id": 194093260, "title": "Add Delegate#eql?", "url": "https://api.github.com/repos/ruby/ruby/issues/1500", "created_at": "2016-12-07 16:14:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "SipHash13 is secure enough to be used in hash-tables,\r\nand SipHash's author confirms that.\r\nRust already considered switch to SipHash13:\r\n  https://github.com/rust-lang/rust/issues/29754#issue-116174313\r\nJean-Philippe Aumasson confirmation:\r\n  https://github.com/rust-lang/rust/issues/29754#issuecomment-156073946\r\nMerged pull request:\r\n  https://github.com/rust-lang/rust/pull/33940", "labels": [], "number": 1501, "updated_at": "2017-12-14 05:17:46", "user": 249427, "closed_at": "2017-12-14 05:17:46", "id": 194397864, "title": "switch SipHash from SipHash24 to SipHash13 variant", "url": "https://api.github.com/repos/ruby/ruby/issues/1501", "created_at": "2016-12-08 17:35:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265803183", "text": "https://bugs.ruby-lang.org/issues/13017", "created_at": "2016-12-08 17:37:17", "user": 249427, "id": 265803183}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351611463", "text": "Applied at https://github.com/ruby/ruby/commit/04c94f95d1a1c6a12f5412228a2bcdc00f5de3b2", "created_at": "2017-12-14 05:17:45", "user": 12301, "id": 351611463}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Replace `A EngineError` with `An EngineError`.", "labels": [], "number": 1502, "updated_at": "2016-12-09 08:03:19", "user": 13203, "closed_at": "2016-12-09 07:55:29", "id": 194534166, "title": "Fix a typo in ossl_engine.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1502", "created_at": "2016-12-09 07:53:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265954863", "text": "Could you make PR to https://github.com/ruby/openssl so that I can merge directly?", "created_at": "2016-12-09 07:55:29", "user": 1033740, "id": 265954863}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/265955555", "text": "Thanks for your advice. I'll open a PR to https://github.com/ruby/openssl .", "created_at": "2016-12-09 08:00:10", "user": 13203, "id": 265955555}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previous implementation had an issues:\r\n- macros murmur1 assumes murmur_step takes rotation value\r\n  as a second argument\r\n- but murmur_step second argument is \"next block\"\r\n- this makes st_hash_uint and st_hash_end to not mix high bits of\r\n  hash value into lower bits\r\n- this leads to pure hash behavior on doubles and mixing hashes using\r\n  st_hash_uint.\r\n  It didn't matter when bins amount were prime numbers, but it hurts\r\n  when bins are powers of two.\r\n\r\nMistake were created cause of attempt to co-exist Murmur1 and Murmur2\r\nin a same code.\r\n\r\nChange it to single hash-function implementation.\r\n- block function is in a spirit of Murmur functions,\r\n  but handles inter-block dependency a bit better (imho).\r\n- final block is read in bit more optimal way on CPU with unaligned word access,\r\n- final block is mixed in simple way,\r\n- finalizer is taken from MurmurHash3 (it makes most of magic :) )\r\n  (64bit finalizer is taken from\r\n  http://zimbry.blogspot.ru/2011/09/better-bit-mixing-improving-on.html)\r\n\r\nAlso remove ST_USE_FNV1: it lacks implementation of many functions,\r\nand looks to be abandoned", "labels": [], "number": 1503, "updated_at": "2018-02-23 03:07:26", "user": 249427, "closed_at": "None", "id": 194603363, "title": "st.c: fix st_hash* functions", "url": "https://api.github.com/repos/ruby/ruby/issues/1503", "created_at": "2016-12-09 14:00:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/266021961", "text": "https://bugs.ruby-lang.org/issues/13019", "created_at": "2016-12-09 14:08:41", "user": 249427, "id": 266021961}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [1147484]}, "text": "Maybe  a typo in logger comment.\r\n", "labels": [], "number": 1504, "updated_at": "2016-12-22 00:16:00", "user": 5292508, "closed_at": "2016-12-22 00:16:00", "id": 196953581, "title": "fix a typo in logger comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1504", "created_at": "2016-12-21 15:01:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268682326", "text": "\"iff\" = \"if and only if\".", "created_at": "2016-12-22 00:16:00", "user": 16700, "id": 268682326}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I stumbled upon this as I was looking up the API reference of `File.delete` to check which error cases I should catch. Unfortunately the existing docs led me to run irb and try out a bunch of different scenarios to figure out what I should actually catch. Hopefully this makes it a bit better for the next person.", "labels": [], "number": 1505, "updated_at": "2017-10-21 13:50:39", "user": 68183, "closed_at": "2017-10-21 13:50:39", "id": 197213246, "title": "improve docs for `File.delete` exceptions", "url": "https://api.github.com/repos/ruby/ruby/issues/1505", "created_at": "2016-12-22 16:31:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268838753", "text": "The current proposed language doesn't make it clear that it doesn't ~~return~~ raise anything else. Are you not sure if it returns anything else or was that overlooked?", "created_at": "2016-12-22 16:41:11", "user": 1441704, "id": 268838753}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268839523", "text": "I'm not sure it raises anything else. I've only gotten that Exception in my testing, but I'm happy to try again.", "created_at": "2016-12-22 16:44:46", "user": 68183, "id": 268839523}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268840852", "text": "It's ok. A better way might be looking at the code, but it's not immediately obvious if you're not very well versed in C and in their codebase. I think the way they raise is using `rb_raise` so I'll grep a bit and get back to you: https://github.com/ruby/ruby/blob/v2_3_3/file.c", "created_at": "2016-12-22 16:50:48", "user": 1441704, "id": 268840852}, {"reactions": {"+1": [1441704]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268852561", "text": "Since deletion is implemented by a system call (`unlink(2)`) the ruby wrapper for it will use `rb_sys_fail()`.  You'll could see all the errors from the `unlink(2)` man page so it may be best to mention or link to an unlink man page.  ", "created_at": "2016-12-22 17:47:27", "user": 9831, "id": 268852561}, {"reactions": {"+1": [1441704]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268856346", "text": "@drbrain oh that's good to know! I tried to understand the C code but didn't get super far (as I'm unfamiliar with the codebase). I'll update the docs with that to make it more clear.", "created_at": "2016-12-22 18:05:33", "user": 68183, "id": 268856346}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268858725", "text": "That's great info! That means my job here is done. Goodbye! ![captain obvious flies away](http://i.giphy.com/LK4nSGvl6rhgQ.gif)", "created_at": "2016-12-22 18:18:11", "user": 1441704, "id": 268858725}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/268860236", "text": "@drbrain I updated the docs and ran it through `rdoc -o tmpdoc file.c` to make sure it looks ok. Let me know if there are any additional things I should do. And thanks for reviewing this!", "created_at": "2016-12-22 18:26:21", "user": 68183, "id": 268860236}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* ticket: https://bugs.ruby-lang.org/issues/13083\r\n* spec: https://github.com/ruby/spec/pull/380", "labels": [], "number": 1506, "updated_at": "2018-02-23 03:07:26", "user": 1180335, "closed_at": "None", "id": 197896876, "title": "[WIP] {String|Symbol}#match{?} with nil returns falsy as Regexp#match{?}", "url": "https://api.github.com/repos/ruby/ruby/issues/1506", "created_at": "2016-12-28 18:34:04", "comments": [{"reactions": {"+1": [1180335]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354314909", "text": "@kachick Could you update based on matz's feedback in https://bugs.ruby-lang.org/issues/13083?\r\nSo `Regexp#match` and `Regexp#match?` should raise TypeError when passed `nil`.\r\nBTW, you can change specs directly in this PR.", "created_at": "2017-12-28 16:25:27", "user": 168854, "id": 354314909}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354317989", "text": "Sorry for 1 year pending to update.... :bow: :bow:", "created_at": "2017-12-28 16:44:32", "user": 1180335, "id": 354317989}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "I wanted to add this function to Range because I thought it would be useful.\r\n\r\nThis is basically how it works:\r\n```ruby\r\nrng = (11..20)\r\nrng.shift(10)  #=> 21..30\r\nrng.shift(5)   #=> 16..25\r\nrng.shift(-10) #=> 1..10\r\nrng.shift(-5)  #=> 6..15\r\n```\r\n\r\nPlease let me know what you think!\r\nThank you! :smile:", "labels": [], "number": 1507, "updated_at": "2017-01-14 05:46:36", "user": 10546292, "closed_at": "2017-01-14 05:46:36", "id": 198055100, "title": "Range#shift", "url": "https://api.github.com/repos/ruby/ruby/issues/1507", "created_at": "2016-12-29 19:16:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is an accurate (as possible) fdiv implementation for Fixnum and Bignum.", "labels": [], "number": 1508, "updated_at": "2018-02-23 03:07:27", "user": 231367, "closed_at": "None", "id": 198140885, "title": "accurate (as possible) fdiv for Fixnum and Bignum", "url": "https://api.github.com/repos/ruby/ruby/issues/1508", "created_at": "2016-12-30 12:16:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/269937609", "text": "Do you have an example that the result changes, or a test case in other words?", "created_at": "2017-01-02 06:24:34", "user": 16700, "id": 269937609}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/269945852", "text": "A Fixnum example is,\r\n~~~\r\n  $ ruby24 --disable=gems -e 'print \"%a\\n\" % [2319276427521816828.fdiv(3325853508004318597)]'\r\n  0x1.650ac352d9ccp-1\r\n  $ ./miniruby -v --disable=gems -e 'print \"%a\\n\" % [2319276427521816828.fdiv(3325853508004318597)]'\r\n  ruby 2.5.0dev (2016-12-30) [x86_64-freebsd10.3]  <== (my patched version)\r\n  0x1.650ac352d9cc1p-1\r\n~~~\r\n（due to 2319276427521816828/3325853508004318597r is irreducible, this pattern didn't affect by reducing ）", "created_at": "2017-01-02 08:49:50", "user": 231367, "id": 269945852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/270068534", "text": "Current trunk is:\r\n\r\n```\r\n$ ruby -v -e 'x=2319276427521816828; y=3325853508004318597; z=x.fdiv(y)*y; p z, z-x'\r\nruby 2.5.0dev (2017-01-01 trunk 57245) [universal.x86_64-darwin15]\r\n2.3192764275218166e+18\r\n0.0\r\n```\r\n\r\nbut yours is:\r\n\r\n```\r\n$ ./ruby -e 'x=2319276427521816828; y=3325853508004318597; z=x.fdiv(y)*y; p z, z-x'\r\n2.319276427521817e+18\r\n512.0\r\n```", "created_at": "2017-01-03 08:31:16", "user": 16700, "id": 270068534}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/270072944", "text": "HMM, but it is correctly rounded value as below. I'm thinking more better demonstration...\r\n~~~\r\n$ cat sample.rb\r\nx=2319276427521816828\r\ny=3325853508004318597\r\nprint \"%a\\n\" % [2319276427521816828.fdiv(y)]\r\nprint \"%x\\n\" % [(x<<57)/y]\r\n$ ./miniruby sample.rb (this miniruby is my version)\r\n0x1.650ac352d9cc1p-1\r\n1650ac352d9cc0a\r\n~~~", "created_at": "2017-01-03 09:06:41", "user": 231367, "id": 270072944}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/272083890", "text": "I've found more demonstrable edge case.\r\n~~~\r\n$ cat fdiv_edgecase.rb\r\n#\r\nrequire 'bigdecimal'\r\n\r\nstrx = '66767141308812624791109361755796'\r\nstry = '17022200380664065'\r\n\r\nbdx = BigDecimal(strx)\r\nbdy = BigDecimal(stry)\r\nprint \"#{(bdx/bdy).to_s('f')}\\n\"\r\n\r\nx = strx.to_i\r\ny = stry.to_i\r\nprint \"%f\\n\" % [x.fdiv(y)]\r\n\r\n$ ../ruby-trunk -v fdiv_edgecase.rb\r\nruby 2.5.0dev (2017-01-11 trunk 57302) [x86_64-freebsd10.3]\r\n3922356676323412.249999999999999985313297082086923792468241814443649323\r\n3922356676323412.500000\r\n\r\n$ ../ruby fdiv_edgecase.rb # (mine)\r\n3922356676323412.249999999999999985313297082086923792468241814443649323\r\n3922356676323412.000000\r\n~~~\r\nHow is this ?", "created_at": "2017-01-12 06:04:09", "user": 231367, "id": 272083890}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/275887729", "text": "Also in that case, `x.fdiv(y)*y` will not equal to `x` while currently does.\r\nMaybe related to denormalization?", "created_at": "2017-01-29 01:38:34", "user": 16700, "id": 275887729}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Why not?\r\n\r\nI think `Enumerable#each_cons` and `Enumerable#each_slice` are extensions of `each` method, so to return a receiver looks a natural behavior.", "labels": [], "number": 1509, "updated_at": "2018-02-23 03:07:28", "user": 6679325, "closed_at": "None", "id": 198270407, "title": "Fix Enumerable#each_cons and each_slice to return a receiver", "url": "https://api.github.com/repos/ruby/ruby/issues/1509", "created_at": "2017-01-01 15:10:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/270592855", "text": "What should I make [CI successful](https://travis-ci.org/ruby/ruby/builds/188136640) for?", "created_at": "2017-01-05 08:48:50", "user": 6679325, "id": 270592855}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/270624470", "text": "Make a branch with version guards and send a pull request to https://github.com/ruby/spec.\r\nThen check out that branch before `make update-rubyspec` at the end of `before_script` section in `.travis.yml` file.", "created_at": "2017-01-05 11:34:05", "user": 16700, "id": 270624470}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "There are 4 options for file utils. So that would make 3 obvious things since `:noop` is explained. I'll submit a followup PR that lists out what all 4 options do, incase it isn't obvious to a dev.", "labels": [], "number": 1510, "updated_at": "2017-01-19 07:08:02", "user": 757518, "closed_at": "2017-01-19 07:08:02", "id": 199934520, "title": "Update fileutils.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1510", "created_at": "2017-01-10 21:10:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "So it can report them to the top in more informative way as DecodeError.\r\n\r\nAdded test on Resolv::DNS::Message.decode\r\n\r\nIt was not reflecting on errors of data and thus breaking. Client code expects `DecodeError` and knows how to handle broken messages.\r\n\r\nrubygems/rubygems#1626", "labels": [], "number": 1511, "updated_at": "2017-01-16 10:19:52", "user": 1164751, "closed_at": "2017-01-14 02:27:30", "id": 200413487, "title": "Made #decode_rdata client to catch errors", "url": "https://api.github.com/repos/ruby/ruby/issues/1511", "created_at": "2017-01-12 16:26:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/272823073", "text": "Thanks, @nobu ", "created_at": "2017-01-16 10:19:52", "user": 1164751, "id": 272823073}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [12301]}, "text": "As defined in [ruby.h](https://github.com/ruby/ruby/blob/c2ebf056efb44204d465d65680e52705610d7c0f/include/ruby/ruby.h#L570).", "labels": [], "number": 1512, "updated_at": "2017-01-16 04:33:46", "user": 101800, "closed_at": "2017-01-15 13:45:55", "id": 200868950, "title": "Fix a typo in extension.rdoc: s/SaveStringValue/SafeStringValue/", "url": "https://api.github.com/repos/ruby/ruby/issues/1512", "created_at": "2017-01-15 13:32:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/272696618", "text": "@gfx Thank you!", "created_at": "2017-01-15 13:54:49", "user": 11493, "id": 272696618}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/272772021", "text": "😄 ", "created_at": "2017-01-16 04:33:46", "user": 101800, "id": 272772021}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I think ruby 2.4.0 and later versions (including edge version) have this bug.\r\nIf you need more information or something, please let me know.\r\n\r\n# Bug\r\n\r\n```ruby\r\n# The name of this file is bug.rb\r\nrequire 'uri'\r\nENV['http_proxy']='http://127.0.0.1'\r\nENV['no_proxy']='192.0.2.2'\r\nURI(\"http://example.org/\").find_proxy\r\n```\r\n\r\n```sh\r\n$ ruby bug.rb\r\n/home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/ipaddr.rb:563:in `in6_addr': invalid address (IPAddr::InvalidAddressError)\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/ipaddr.rb:500:in `initialize'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/ipaddr.rb:518:in `new'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/ipaddr.rb:518:in `coerce_other'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/ipaddr.rb:174:in `include?'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/uri/generic.rb:1541:in `block in find_proxy'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/uri/generic.rb:1530:in `scan'\r\n        from /home/m/.rbenv/versions/2.4.0/lib/ruby/2.4.0/uri/generic.rb:1530:in `find_proxy'\r\n        from bug.rb:4:in `<main>'\r\n```\r\n\r\nor you can check it out with this command.\r\n\r\n```sh\r\n$ http_proxy=http://127.0.0.1 no_proxy=192.0.2.2 ruby -ropen-uri -e 'open(\"http://example.org\")'\r\n```\r\n\r\n# Analysis\r\n\r\nI found this line https://github.com/ruby/ruby/commit/1ee9cad027e910b36bd4191ef2339d02e6711a32#diff-66cc3d0ae5a8886f51f0d2e670324bf3R1560 runs like that:\r\n\r\n```ruby\r\nIPAddr.new(host).include?(self.host)\r\n```\r\n\r\nIn this code, self.host is the `string` and #include? tries converting self.host to IPAddr and IPAddr.new(self.host) will be called. But IPAddr.new with a string argument raises an IPAddr::InvalidAddressError exception and there is no guard for that exception.\r\n\r\n# Solution\r\n\r\nApply this pull request.\r\n\r\n# Environment and Information\r\n\r\nI found this bug on `ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux]` and 1ee9cad027e910b36bd4191ef2339d02e6711a32 makes it and it have not been fixed on trunk yet.", "labels": [], "number": 1513, "updated_at": "2017-01-17 12:55:20", "user": 86162, "closed_at": "2017-01-17 12:55:20", "id": 201251045, "title": "URI.Generic#find_proxy with IP format proxy and domain format uri raises an exception", "url": "https://api.github.com/repos/ruby/ruby/issues/1513", "created_at": "2017-01-17 11:23:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ENV#fetch` is documented as raising an `IndexError`, which is incorrect; it raises a `KeyError,` like `Hash#fetch` does.", "labels": [], "number": 1514, "updated_at": "2017-01-19 06:40:26", "user": 780485, "closed_at": "2017-01-19 06:40:26", "id": 201748583, "title": "ENV#fetch: fix documentation of raised exception", "url": "https://api.github.com/repos/ruby/ruby/issues/1514", "created_at": "2017-01-19 02:25:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1515, "updated_at": "2017-01-22 03:07:04", "user": 2768870, "closed_at": "2017-01-22 03:07:04", "id": 202276602, "title": "Hash#fetch: fix grammar in documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1515", "created_at": "2017-01-21 00:46:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The change can fix https://github.com/sickill/rainbow/issues/48", "labels": [], "number": 1516, "updated_at": "2017-01-21 14:49:27", "user": 4361134, "closed_at": "2017-01-21 14:47:45", "id": 202319333, "title": "Fix for frozen_string_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1516", "created_at": "2017-01-21 14:44:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/274266155", "text": "Sorry, it has been fixed already. https://github.com/rubygems/rubygems/commit/4c3b8326fdee07228198ae86ad5eb836b8bca4ce", "created_at": "2017-01-21 14:49:27", "user": 4361134, "id": 274266155}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems like the documentation still references an old behavior where `Exception` would define `to_str`, which is not the case anymore\r\n\r\n```c\r\n2.3.1 :004 > \"foo\" + Exception.new(\"bar\")\r\nTypeError: no implicit conversion of Exception into String\r\n```\r\n\r\nLooking at the 1.8.7 documentation in `error.c` we see the current wording with a definition of `exc_to_str`:\r\n\r\n```C\r\n/*\r\n * call-seq:\r\n *   exception.message   =>  string\r\n *   exception.to_str    =>  string\r\n *\r\n * Returns the result of invoking <code>exception.to_s</code>.\r\n * Normally this returns the exception's message or name. By\r\n * supplying a to_str method, exceptions are agreeing to\r\n * be used where Strings are expected.\r\n */\r\n\r\nstatic VALUE\r\nexc_to_str(exc)\r\n\tVALUE exc;\r\n{\r\n\treturn rb_funcall(exc, rb_intern(\"to_s\"), 0, 0);\r\n}\r\n```\r\n\r\nNowadays in trunk there is to definition of `to_str`, but the wording \"By supplying a to_str method, exceptions are agreeing to be used where Strings are expected.\" is still present and used for `exc_message`.\r\n\r\nThis PR fixes that.", "labels": [], "number": 1517, "updated_at": "2017-01-23 04:50:03", "user": 127343, "closed_at": "2017-01-23 04:50:03", "id": 202342214, "title": "error.c: fixed doc regarding the presence of to_str", "url": "https://api.github.com/repos/ruby/ruby/issues/1517", "created_at": "2017-01-21 21:54:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1518, "updated_at": "2018-02-23 03:07:28", "user": 236550, "closed_at": "None", "id": 202353330, "title": "Make prettyprint’s cycle detection aware of Delegator instances. Fixes #13144.", "url": "https://api.github.com/repos/ruby/ruby/issues/1518", "created_at": "2017-01-22 01:56:24", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Because following dbm's example uses `TypedData_Make_Struct`.", "labels": [], "number": 1519, "updated_at": "2017-01-26 07:10:47", "user": 987638, "closed_at": "2017-01-26 07:10:47", "id": 203248492, "title": "fix function name [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1519", "created_at": "2017-01-25 23:01:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added documentation for RSS::Atom; mainly information about the installed attributes and references to the the Atom specification.", "labels": [], "number": 1520, "updated_at": "2017-01-26 12:48:52", "user": 5399330, "closed_at": "2017-01-26 12:48:38", "id": 203291663, "title": "  Adding documentaion for lib/rss/atom.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1520", "created_at": "2017-01-26 04:44:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/275380735", "text": "Thanks!\r\nI've merged with some modifications.", "created_at": "2017-01-26 12:48:52", "user": 27350, "id": 275380735}], "assignees": [27350, 27350], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [363800, 19741040]}, "text": "https://bugs.ruby-lang.org/issues/13172\r\n\r\nInstead of `#yield_self` from https://bugs.ruby-lang.org/issues/12760\r\n\r\nJust to see if it fits", "labels": [], "number": 1521, "updated_at": "2017-05-02 04:37:56", "user": 2451896, "closed_at": "2017-05-02 04:37:56", "id": 204201387, "title": "add Object#pass method", "url": "https://api.github.com/repos/ruby/ruby/issues/1521", "created_at": "2017-01-31 04:14:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276274210", "text": "```ruby\r\n$ irb\r\n>> Time.now.pass { |t| t.sunday? ? 'Yay!' : ':(' }\r\n==> \":(\"\r\n```", "created_at": "2017-01-31 04:47:02", "user": 2451896, "id": 276274210}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/283610414", "text": "I don't see a real reason to have such method because \r\n```\r\nTime.now.sunday? ? 'Yay!' : ':('\r\n```\r\ngives the same result. Maybe, could you provide more explicit example where it will add cool syntactic sugar or better code efficiency?", "created_at": "2017-03-02 10:03:57", "user": 971976, "id": 283610414}, {"reactions": {"+1": [971976, 310475]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/283619372", "text": "@DmitryDrobotov I've given 2 links to Redmine. Help yourself, please:)\r\nPeople want it.\r\n\r\nIn the simplest case it helps handle long-name variables:\r\n\r\n```ruby\r\nif application_default_user.male?\r\n  \"Mr. #{application_default_user.name}\"\r\nelse\r\n  \"Ms. #{application_default_user.name}\"\r\nend\r\n\r\n# vs\r\napplication_default_user.pass { |u| u.male? ? \"Mr. #{u.name}\" : \"Ms. #{u.name}\" }\r\n# or \r\napplication_default_user.yield_self { |u| u.male? ? \"Mr. #{u.name}\" : \"Ms. #{u.name}\" }\r\n```\r\n\r\nOf course, you can have complicated logic in a multiline block with many temporary variables (and they will exist only in block scope!) so it should help very much.\r\n\r\nP.S. `application_default_user` isn't longest name by the way.\r\n  ", "created_at": "2017-03-02 10:43:23", "user": 2451896, "id": 283619372}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/298478440", "text": "This pull request can close, because [yield_self](https://bugs.ruby-lang.org/issues/6721) added.\r\n\r\n(I don't have permission to close.)", "created_at": "2017-05-02 01:54:56", "user": 11857, "id": 298478440}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1522, "updated_at": "2017-02-01 10:36:04", "user": 17634080, "closed_at": "2017-02-01 10:36:04", "id": 204539993, "title": "Ruby 2 3", "url": "https://api.github.com/repos/ruby/ruby/issues/1522", "created_at": "2017-02-01 09:58:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"-1": [2480, 193936, 14068, 1147484, 920053, 2903027, 2451896, 142875, 6726985, 12160875]}, "text": "add to_i method to TrueClass and FalseClass object\r\n\r\n", "labels": [], "number": 1523, "updated_at": "2018-02-23 03:07:29", "user": 48430, "closed_at": "None", "id": 204585556, "title": "add to_i method to TrueClass and FalseClass object", "url": "https://api.github.com/repos/ruby/ruby/issues/1523", "created_at": "2017-02-01 13:37:30", "comments": [{"reactions": {"+1": [10193979], "laugh": [10193979]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276659444", "text": "Maybe we could set the constants in a separate header file ?", "created_at": "2017-02-01 13:41:10", "user": 2952153, "id": 276659444}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276659902", "text": "Could you please justify this?", "created_at": "2017-02-01 13:43:13", "user": 14068, "id": 276659902}, {"reactions": {"+1": [2480, 205357, 319081]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276701600", "text": "I only recently began following this repository. I am accustomed to changes being discussed at https://bugs.ruby-lang.org, so please excuse my ignorance of the process here.\r\n\r\nhttps://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute says:\r\n> Pull request to https://github.com/ruby/ruby is acceptable for tiny fixes. But pull requests which need discussions will be simply ignored.\r\n\r\nI suspect the Ruby maintainers would want to discuss whether `true` and `false` have a `to_i` method. I also think adding that method requires some justification. (Ruby has been ok for a long time without it.)", "created_at": "2017-02-01 16:16:49", "user": 14068, "id": 276701600}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276732125", "text": "This seems like bloat to me, solving a very specific problem in a very general way. You're assuming `true` means `1` for any Ruby code. If `true` means `1` for your project, define such a mapping in that particular project. And definitely not at the boolean-class level (`{True,False}Class#to_i`) but rather something like a simple Hash (`{true => 1, false => 0}`) more or less global (constant > ivar > local) depending on the scope.", "created_at": "2017-02-01 18:02:00", "user": 2480, "id": 276732125}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276737809", "text": "Here's another technique:\r\n\r\n```ruby\r\npry> BOOL = [false, true].freeze\r\n[\r\n    [0] false,\r\n    [1] true\r\n]\r\npry> BOOL.index(false)\r\n0\r\npry> BOOL.index(true)\r\n1\r\n```", "created_at": "2017-02-01 18:23:10", "user": 14068, "id": 276737809}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276740188", "text": "You'll need to address the conflict this pull request has with the existing behavior:\r\n\r\n```\r\n$ ruby -e 'if 0 then puts true else puts false end'\r\ntrue\r\n$ ruby -e 'if 1 then puts true else puts false end'\r\ntrue\r\n```\r\n\r\nIn your https://bugs.ruby-lang.org feature request.", "created_at": "2017-02-01 18:32:00", "user": 9831, "id": 276740188}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276751630", "text": "@drbrain Don't see any behaviour conflict there:\r\n> `$ ruby -e 'if 0 then puts true else puts false end'`\r\n\r\nYou seem to imply that any value returned by a method of `false` should also evaluate to false to avoid confusion 🤔\r\n\r\nEven if this PR was merged, the fact that zero still evaluates to true (being non-nil, non-false) seems natural to me.\r\n\r\nJust like `false.to_s` evaluates to true:\r\n```ruby\r\nif false.to_s then p :ok end   # prints :ok\r\n```", "created_at": "2017-02-01 19:13:52", "user": 2480, "id": 276751630}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276752822", "text": "Haha. I’m honored by the attention of this commit! \r\n\r\nMany times in my work I was calling for such conversion because I need to insert a boolean equation in an integer calculation for sorting collection or naming element.\r\n\r\nFurthermore, this conversion strictly follows the theory of Boolean algebra. \r\n\r\nI want to thank you all for your kindness and your participation", "created_at": "2017-02-01 19:18:04", "user": 48430, "id": 276752822}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276754518", "text": "@mikegee : Ruby is full of stuff that merely improves on readability. I love that about the language. I'd rather read .to_i after a boolean variable than anything else. It's opiniated. I confess ", "created_at": "2017-02-01 19:23:57", "user": 48430, "id": 276754518}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276759585", "text": "@tracyloisel \r\n\r\n> Ruby is full of stuff that merely improves on readability\r\n\r\nSyntactic sugar in Ruby such as `unless` and `size` + `length`, are fully application-agnostic, they don't assume anything about your usage: `unless` in one script can only have the same meaning in any other script. `size` on an Array can only have the same meaning as `size` and `length` on another Array. If you find this is not true, then you're not dealing with an Array and you should subclass/wrap it.\r\n\r\nThe same thing about application-agnosticism cannot be said of some global mapping of core constants to arbitrary values. This mapping only has its place as a library at best. Like a boolean algebra library.", "created_at": "2017-02-01 19:41:19", "user": 2480, "id": 276759585}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276767322", "text": "Gosh, the PR was missing rb_define_method instructions... Does anyone here really read the files changed ???? tsss", "created_at": "2017-02-01 20:09:02", "user": 48430, "id": 276767322}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/276770105", "text": "@tracyloisel please note @mikegee said:\r\n\r\n> https://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute says:\r\n>\r\n>> Pull request to https://github.com/ruby/ruby is acceptable for tiny fixes. But pull requests which need discussions will be simply ignored.\r\n\r\nSo no, we don't check.", "created_at": "2017-02-01 20:19:40", "user": 9831, "id": 276770105}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281794109", "text": ">  It's opiniated. I confess\r\n\r\nI do not think that the opinion or being opinioated is the problem.\r\n\r\nUltimately any proposals have to convince matz primarily and the\r\ndiscussions happen on https://bugs.ruby-lang.org/projects/ruby-trunk \r\nalthough I also understand github discussion, they are very convenient.\r\n\r\nTo the topic at hand, I think that .to_i on true or false is a bit strange\r\nlargely because Ruby follows its own internal philosophy rather than\r\nC customs, e. g. \"0 being false and all else being true\" or actually\r\nthe reverse ... see, I can't even remember it, \"true\" and \"false\" are\r\nso much simpler than numbers. I always try to use 42, then I win\r\nif I return that number right? And, by the way, I can understand the\r\nproposal as well to some extent. I once also wanted something\r\nthat turns \"true\" into a real true value and \"false\" into a real false\r\nvalue, and my idea was to add a .bool or .to_bool method to \r\nruby ... :)\r\n\r\nIn LPC, a language that is largely C but used for some oldschool\r\nMUDs, they follow method invocation styles where, if a method\r\ndoes not exist, it does not crash the program or end it, it just\r\nassumes that the result will be wrong. Like:\r\n\r\n  object tp; tp = this_player();\r\n  sword->move(tp);\r\n\r\nOr something like that; and if the method move() does not exist,\r\nthings just continue but of course without the sword being relocated\r\nto the player object. There are pros and cons with that approach.\r\n(I mention it specifically because I once wanted to write a MUD in\r\nruby. I am still not even sure about which semantics to use... so \r\nI guess I may write two different engines where the behaviour\r\ncan be LPC-specific, or also ruby-specific).\r\n\r\nIn general ruby being so dynamic, one can just modify all the\r\nbehaviour as you want to. But I understand why you want to\r\nhave certain behaviour in the main language. :)\r\n\r\nWhile I personally am mildly against the proposal, it's nothing\r\nthat has me fret about it. But I think there are many somewhat\r\nsimilar suggestions here and there; it would be nice if there\r\ncould be an additional \"evil\" branch of ruby that may be as\r\nopinionated, where people can just pull in crazy stuff that \r\nmodifies how ruby behaves. Like in the above example,\r\nsomething like:\r\n\r\n  require 'bool_on_steroids'\r\n\r\nAnd similar requires that are available by default. :D\r\n\r\nThen people could specifically enable things like the\r\nabove, just with one extra require note.\r\n\r\n(Or if you want to denote that it is evil, you could have\r\nthe require be:\r\n\r\nrequire 'evil/bool_on_steroids'\r\n\r\nand group similar behaviour all into the evil namespace.\r\nThere used to be evil.rb, it was cool! Run-time change\r\nof classes to shapechange into other classes, I liked\r\nthe idea. Or to have a generic Button class, that, depending\r\non the GUI toolkit at hand, would be a Tk Button or a GTK\r\nButton or a QT button - you get the idea. Sorry for the \r\ndigression, I was just having too many ideas!)", "created_at": "2017-02-22 20:33:03", "user": 13723, "id": 281794109}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "it seems a typo", "labels": [], "number": 1524, "updated_at": "2017-02-04 04:51:55", "user": 118465, "closed_at": "2017-02-04 02:25:07", "id": 205315162, "title": "typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1524", "created_at": "2017-02-04 02:13:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/277411527", "text": "\"iff\" is not a typo.", "created_at": "2017-02-04 02:25:07", "user": 16700, "id": 277411527}, {"reactions": {"+1": [118465, 11857]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/277419101", "text": "\"if and only if\" may be better than \"iff\" to avoid this FAQ.\r\n", "created_at": "2017-02-04 04:51:55", "user": 34552, "id": 277419101}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [543405]}, "text": "On Windows, when passing parameters to ruby.exe, say \"ruby.exe -I./lib\", the line `curr->str = rb_w32_wstr_to_mbstr` will create a string \"-I./lib\" from a newly allocated memory of size `7` instead of `8`. That is to say, `NULL` is not appended at the end of `curr->str`.\r\n\r\nThat is fine as long as `curr->str` is not treated as a NULL-terminated string. However that's not the case. Later in the same function, `strlcpy` is called upon `curr->str`. By reading the source code of `strlcpy` in `missing/strlcpy.c`, we can observe that `strlcpy` is definitely expecting a NULL-terminated string. So a buffer over-read is spotted.\r\n\r\nThis patch fixes this buffer over-read.", "labels": [], "number": 1525, "updated_at": "2017-02-16 02:57:27", "user": 13315, "closed_at": "2017-02-16 02:57:27", "id": 207786826, "title": "win32/win32.c: fix a buffer over-read", "url": "https://api.github.com/repos/ruby/ruby/issues/1525", "created_at": "2017-02-15 12:10:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/280202848", "text": "`strlcpy`, in `missing/strlcpy.c` at least, stops *before* copying `dsize`.", "created_at": "2017-02-16 01:41:30", "user": 16700, "id": 280202848}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/280212326", "text": "@nobu It does. But the the problem occurs _after_ it stops, at the line `while (*src++)`. Note that `src`, in this case `curr->str`, contains no terminating zero. So I believe this is a buffer over-read.", "created_at": "2017-02-16 02:33:56", "user": 13315, "id": 280212326}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/280216306", "text": "Thank you, then it's wrong to use `strlcpy` on unterminated source.\r\nNow use `memcpy` instead of `strlcpy` at 9019934c64c723e0f09e5cfe30e87d44ee116391", "created_at": "2017-02-16 02:57:27", "user": 16700, "id": 280216306}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without this small change, the license looks weird if tabs do not align exactly with 4 spaces.", "labels": [], "number": 1526, "updated_at": "2017-02-18 22:39:21", "user": 675997, "closed_at": "2017-02-18 22:39:21", "id": 208436043, "title": "Replace tabs with spaces for proper formatting", "url": "https://api.github.com/repos/ruby/ruby/issues/1526", "created_at": "2017-02-17 13:04:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/280831249", "text": "8 spaces?", "created_at": "2017-02-18 08:30:15", "user": 16700, "id": 280831249}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/280869526", "text": "@nobu correct. There are just a few odd tabs lost in that file and rest if using spaces for formatting. Which makes the text look weird if your tab does not expand to 8 spaces not 4. This makes the formatting consistent with the rest of the file using spaces only.", "created_at": "2017-02-18 19:38:28", "user": 675997, "id": 280869526}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that this aspect of `exception: false` was undocumented.\r\n", "labels": [], "number": 1527, "updated_at": "2017-02-23 03:36:36", "user": 551404, "closed_at": "2017-02-23 01:16:11", "id": 209610581, "title": "Update docs to reflect EOF behavior change when using `exception: false`", "url": "https://api.github.com/repos/ruby/ruby/issues/1527", "created_at": "2017-02-22 23:06:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281867551", "text": "EOFError is not raised by *_nonblock methods other than read_nonblock.", "created_at": "2017-02-23 02:00:23", "user": 1033740, "id": 281867551}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281875749", "text": "Reverted at r57694 (c9447082ecbcab5dab9dcbcaa93686648008d8f8).\r\n\r\nBTW, uses of `_var_` and `+code+` seem inverted in extp/openssl.", "created_at": "2017-02-23 02:43:27", "user": 16700, "id": 281875749}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/281884965", "text": "@nobu Thanks, didn't know the distinction - `+str+` is currently used for emphasizing both code pieces and arguments/variables.", "created_at": "2017-02-23 03:36:36", "user": 1033740, "id": 281884965}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\r\nary[1] &&= foo\r\n```\r\n\r\nold:\r\n```\r\n# @ NODE_SCOPE (line: 1)\r\n# +- nd_tbl: (empty)\r\n# +- nd_args:\r\n# |   (null node)\r\n# +- nd_body:\r\n#     @ NODE_PRELUDE (line: 1)\r\n#     +- nd_head:\r\n#     |   (null node)\r\n#     +- nd_body:\r\n#     |   @ NODE_OP_ASGN1 (line: 1)\r\n#     |   +- nd_recv:\r\n#     |   |   @ NODE_VCALL (line: 1)\r\n#     |   |   +- nd_mid: :ary\r\n#     |   +- nd_vid: (internal variable)\r\n#     |   +- nd_args->nd_body:\r\n#     |   |   @ NODE_VCALL (line: 1)\r\n#     |   |   +- nd_mid: :foo\r\n#     |   +- nd_args->nd_head:\r\n#     |       @ NODE_ARRAY (line: 1)\r\n#     |       +- nd_alen: 1\r\n#     |       +- nd_head:\r\n#     |       |   @ NODE_LIT (line: 1)\r\n#     |       |   +- nd_lit: 1\r\n#     |       +- nd_next:\r\n#     |           (null node)\r\n#     +- nd_compile_option: false\r\n```\r\n\r\nnd_vid: (internal variable), It should use nd_mid\r\n\r\n\r\nnew:\r\n```\r\n# @ NODE_SCOPE (line: 1)\r\n# +- nd_tbl: (empty)\r\n# +- nd_args:\r\n# |   (null node)\r\n# +- nd_body:\r\n#     @ NODE_PRELUDE (line: 1)\r\n#     +- nd_head:\r\n#     |   (null node)\r\n#     +- nd_body:\r\n#     |   @ NODE_OP_ASGN1 (line: 1)\r\n#     |   +- nd_recv:\r\n#     |   |   @ NODE_VCALL (line: 1)\r\n#     |   |   +- nd_mid: :ary\r\n#     |   +- nd_mid: 1 (&&)\r\n#     |   +- nd_args->nd_head:\r\n#     |   |   @ NODE_ARRAY (line: 1)\r\n#     |   |   +- nd_alen: 1\r\n#     |   |   +- nd_head:\r\n#     |   |   |   @ NODE_LIT (line: 1)\r\n#     |   |   |   +- nd_lit: 1\r\n#     |   |   +- nd_next:\r\n#     |   |       (null node)\r\n#     |   +- nd_args->nd_body:\r\n#     |       @ NODE_VCALL (line: 1)\r\n#     |       +- nd_mid: :foo\r\n#     +- nd_compile_option: false\r\n```", "labels": [], "number": 1528, "updated_at": "2017-02-26 09:33:57", "user": 6829628, "closed_at": "2017-02-26 09:33:57", "id": 210299708, "title": "node.c: fix NODE_OP_ASGN1 operator", "url": "https://api.github.com/repos/ruby/ruby/issues/1528", "created_at": "2017-02-26 08:44:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```ruby\r\ndef foo1(a: 1, **kwrest)\r\nend\r\n```\r\n\r\nold:\r\n```\r\n# @ NODE_SCOPE (line: 2)\r\n# +- nd_tbl: (empty)\r\n# +- nd_args:\r\n# |   (null node)\r\n# +- nd_body:\r\n#     @ NODE_PRELUDE (line: 2)\r\n#     +- nd_head:\r\n#     |   (null node)\r\n#     +- nd_body:\r\n#     |   @ NODE_DEFN (line: 1)\r\n#     |   +- nd_mid: :foo1\r\n#     |   +- nd_defn:\r\n#     |       @ NODE_SCOPE (line: 2)\r\n#     |       +- nd_tbl: :a,(internal variable),:kwrest\r\n#     |       +- nd_args:\r\n#     |       |   @ NODE_ARGS (line: 1)\r\n#     |       |   +- nd_ainfo->pre_args_num: 0\r\n#     |       |   +- nd_ainfo->pre_init:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->post_args_num: 0\r\n#     |       |   +- nd_ainfo->post_init:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->first_post_arg: (null)\r\n#     |       |   +- nd_ainfo->rest_arg: (null)\r\n#     |       |   +- nd_ainfo->block_arg: (null)\r\n#     |       |   +- nd_ainfo->opt_args:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->kw_args:\r\n#     |       |       @ NODE_KW_ARG (line: 1)\r\n#     |       |       +- nd_body:\r\n#     |       |       |   @ NODE_LASGN (line: 1)\r\n#     |       |       |   +- nd_vid: :a\r\n#     |       |       |   +- nd_value:\r\n#     |       |       |       @ NODE_LIT (line: 1)\r\n#     |       |       |       +- nd_lit: 1\r\n#     |       |       +- nd_next:\r\n#     |       |           (null node)\r\n#     |       |   +- nd_ainfo->kw_rest_arg:\r\n#     |       |       @ NODE_DVAR (line: 1)\r\n#     |       |       +- nd_vid: (internal variable)\r\n#     |       +- nd_body:\r\n#     |           (null node)\r\n#     +- nd_compile_option: false\r\n```\r\n\r\nif nd_ainfo->kw_args is not null, It should use nd_cflag\r\n\r\nnew\r\n```\r\n# @ NODE_SCOPE (line: 2)\r\n# +- nd_tbl: (empty)\r\n# +- nd_args:\r\n# |   (null node)\r\n# +- nd_body:\r\n#     @ NODE_PRELUDE (line: 2)\r\n#     +- nd_head:\r\n#     |   (null node)\r\n#     +- nd_body:\r\n#     |   @ NODE_DEFN (line: 1)\r\n#     |   +- nd_mid: :foo1\r\n#     |   +- nd_defn:\r\n#     |       @ NODE_SCOPE (line: 2)\r\n#     |       +- nd_tbl: :a,(internal variable),:kwrest\r\n#     |       +- nd_args:\r\n#     |       |   @ NODE_ARGS (line: 1)\r\n#     |       |   +- nd_ainfo->pre_args_num: 0\r\n#     |       |   +- nd_ainfo->pre_init:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->post_args_num: 0\r\n#     |       |   +- nd_ainfo->post_init:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->first_post_arg: (null)\r\n#     |       |   +- nd_ainfo->rest_arg: (null)\r\n#     |       |   +- nd_ainfo->block_arg: (null)\r\n#     |       |   +- nd_ainfo->opt_args:\r\n#     |       |   |   (null node)\r\n#     |       |   +- nd_ainfo->kw_args:\r\n#     |       |   |   @ NODE_KW_ARG (line: 1)\r\n#     |       |   |   +- nd_body:\r\n#     |       |   |   |   @ NODE_LASGN (line: 1)\r\n#     |       |   |   |   +- nd_vid: :a\r\n#     |       |   |   |   +- nd_value:\r\n#     |       |   |   |       @ NODE_LIT (line: 1)\r\n#     |       |   |   |       +- nd_lit: 1\r\n#     |       |   |   +- nd_next:\r\n#     |       |   |       (null node)\r\n#     |       |   +- nd_ainfo->kw_rest_arg->nd_cflag: :kwrest\r\n#     |       +- nd_body:\r\n#     |           (null node)\r\n#     +- nd_compile_option: false\r\n```", "labels": [], "number": 1529, "updated_at": "2017-02-27 13:54:45", "user": 6829628, "closed_at": "2017-02-27 13:52:44", "id": 210453699, "title": "node.c: fix nd_ainfo->kw_rest_arg", "url": "https://api.github.com/repos/ruby/ruby/issues/1529", "created_at": "2017-02-27 11:09:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/282725632", "text": "Oops, I missed the comment in 6d3654d59b4550f3c88d8403f164caf8b767afd7!", "created_at": "2017-02-27 13:54:45", "user": 16700, "id": 282725632}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This introduce shortcut to call Array#== and Hash#== then improve these methods performance around 5%.\r\n\r\n### Before\r\n```\r\n               user     system      total        real\r\nHash#==    0.850000   0.000000   0.850000 (  0.853143)\r\nArray#==   0.650000   0.010000   0.660000 (  0.654546)\r\n```\r\n\r\n### After\r\n```\r\nHash#==    0.800000   0.000000   0.800000 (  0.803759)\r\nArray#==   0.610000   0.000000   0.610000 (  0.606047)\r\n```\r\n\r\n### Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  $hash1 = {}\r\n  1000.times { |i| $hash1[i.to_s] = i }\r\n  $hash2 = {}\r\n  1000.times { |i| $hash2[(i*2).to_s] = i*2 }\r\n\r\n  x.report \"Hash#==\" do\r\n    2000000.times do\r\n      $hash1 == $hash2\r\n    end\r\n  end\r\n\r\n  $ary1 = []\r\n  1000.times { |i| $ary1 << i }\r\n  $ary2 = []\r\n  1000.times { |i| $ary2 << i*2 }\r\n\r\n  x.report \"Array#==\" do\r\n    2000000.times do\r\n      $ary1 == $ary2\r\n    end\r\n  end\r\nend\r\n```", "labels": [], "number": 1530, "updated_at": "2018-02-23 03:07:30", "user": 199156, "closed_at": "None", "id": 211955123, "title": "Improve Array#== and Hash#== performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1530", "created_at": "2017-03-05 14:11:28", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1531, "updated_at": "2017-03-28 11:45:18", "user": 4524, "closed_at": "2017-03-07 13:06:06", "id": 212013509, "title": "string.c: [DOC] Fix a typo in String#dump", "url": "https://api.github.com/repos/ruby/ruby/issues/1531", "created_at": "2017-03-06 03:08:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Time#== will be faster around 40%.\r\n\r\n* Before\r\n```\r\n              user     system      total        real\r\nTime#==   1.940000   0.000000   1.940000 (  1.950250)\r\n```\r\n\r\n* After\r\n```\r\n              user     system      total        real\r\nTime#==   1.340000   0.010000   1.350000 (  1.348283)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report \"Time#==\" do\r\n    t = Time.now\r\n    2000000.times do\r\n      t == Time.now\r\n    end\r\n  end\r\nend\r\n```\r\n", "labels": [], "number": 1532, "updated_at": "2018-02-23 03:07:30", "user": 199156, "closed_at": "None", "id": 212039857, "title": "Improve Time#== performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1532", "created_at": "2017-03-06 07:03:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284320129", "text": "build fail of appveyor is not related this pull request. After it fixed, I will re-run appveyor build.", "created_at": "2017-03-06 07:18:50", "user": 12301, "id": 284320129}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284320710", "text": "Why not overriding `Time#==`?\r\nWhy should `Comparable` take care of `Time` only?", "created_at": "2017-03-06 07:22:39", "user": 16700, "id": 284320710}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284322958", "text": "Users can override Time#<=> and then the behavior of Time#== should follow its method, I guess.\r\nSo, I didn't override Time#==.\r\n\r\nIf there is way to detect recursive check, It should be used in here. Sorry, I didn't know that. \r\n", "created_at": "2017-03-06 07:37:33", "user": 199156, "id": 284322958}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284323672", "text": "@Watson1978 Can you rebase to https://github.com/ruby/ruby/commit/5e62a1bd2988529490baaff3149f12d812a6a5ea ?", "created_at": "2017-03-06 07:41:44", "user": 12301, "id": 284323672}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302716220", "text": "How about overriding `Time#==` which checks `Time#<=>` is override or not.", "created_at": "2017-05-19 14:22:18", "user": 13423, "id": 302716220}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [1381503, 1254163, 2741725, 769964, 4083992]}, "text": "Hash#merge will be faster around 60%.\r\n\r\n* Before\r\n```\r\n                 user     system      total        real\r\nHash#merge   0.160000   0.020000   0.180000 (  0.182357)\r\n```\r\n\r\n* After\r\n```\r\n                 user     system      total        real\r\nHash#merge   0.110000   0.010000   0.120000 (  0.114404)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  hash1 = {}\r\n  100.times { |i| hash1[i.to_s] = i }\r\n  hash2 = {}\r\n  100.times { |i| hash2[(i*2).to_s] = i*2 }\r\n\r\n  x.report \"Hash#merge\" do\r\n    10000.times do\r\n      hash1.merge(hash2)\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13343", "labels": [], "number": 1533, "updated_at": "2017-10-14 12:40:05", "user": 199156, "closed_at": "2017-05-20 09:24:39", "id": 212329967, "title": "Improve Hash#merge performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1533", "created_at": "2017-03-07 04:49:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Array#sort will be faster around 5%.\r\nThis patch remove dupliated rb_ary_modify() calling in Array#sort.\r\nSeems that it is enough to call rb_ary_modify() once on top of rb_ary_sort_bang().\r\n\r\n* Before\r\n```\r\n                 user     system      total        real\r\nArray#sort   1.850000   0.000000   1.850000 (  1.851303)\r\n```\r\n\r\n* After\r\n```\r\n                 user     system      total        real\r\nArray#sort   1.740000   0.010000   1.750000 (  1.751054)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  ary = []\r\n  100.times { |i| ary << Random.rand(500) }\r\n\r\n  x.report \"Array#sort\" do\r\n    300000.times do\r\n      ary.sort\r\n    end\r\n  end\r\n\r\nend\r\n```", "labels": [], "number": 1534, "updated_at": "2017-03-08 03:59:19", "user": 199156, "closed_at": "2017-03-08 00:58:53", "id": 212459743, "title": "Improve Array#sort performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1534", "created_at": "2017-03-07 15:07:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284911707", "text": "`rb_yield_values` and `rb_funcallv` may call ruby script, and the original array can be frozen there.", "created_at": "2017-03-08 00:58:53", "user": 16700, "id": 284911707}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [2723477, 1147484]}, "text": "The yielding block will be faster around 9%.\r\nThis patch ensures that expand to inline codes in where invoke yielding block.\r\n\r\n* Environment\r\n  - macOS 10.12.3\r\n  - clang 8.0.0 in Xcode 8.2\r\n\r\n* Before\r\n```\r\n                    user     system      total        real\r\nInteger#times   0.930000   0.000000   0.930000 (  0.932125)\r\nArray#each      0.950000   0.000000   0.950000 (  0.957962)\r\nArray#map       1.220000   0.030000   1.250000 (  1.249174)\r\n```\r\n\r\n* After\r\n```\r\n                    user     system      total        real\r\nInteger#times   0.850000   0.000000   0.850000 (  0.853202)\r\nArray#each      0.860000   0.010000   0.870000 (  0.865507)\r\nArray#map       1.120000   0.020000   1.140000 (  1.149939)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  ary = (1..10000).to_a\r\n\r\n  x.report \"Integer#times\" do\r\n    20000000.times do\r\n    end\r\n  end\r\n\r\n  x.report \"Array#each\" do\r\n    2000.times do\r\n      ary.each { |x| }\r\n    end\r\n  end\r\n\r\n  x.report \"Array#map\" do\r\n    2000.times do\r\n      ary.map { |x| }\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13342", "labels": [], "number": 1535, "updated_at": "2018-02-23 03:07:31", "user": 199156, "closed_at": "None", "id": 212640599, "title": "Improve yielding block performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1535", "created_at": "2017-03-08 05:21:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284974062", "text": "Use `ALWAYS_INLINE` macro.", "created_at": "2017-03-08 08:06:08", "user": 16700, "id": 284974062}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/284977556", "text": "@nobu Thank you for your review. Updated the code with your suggestion.", "created_at": "2017-03-08 08:24:41", "user": 199156, "id": 284977556}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304207852", "text": "I think this pull request is related to https://bugs.ruby-lang.org/issues/12599\r\nThis affects the performance if compiled with clang\r\n\r\nIf `inline-threshold` compile flag would be adjusted, I guess this might be unnecessary.\r\n", "created_at": "2017-05-26 07:00:00", "user": 199156, "id": 304207852}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304335575", "text": "If some functions which is expected to be inlined like `vm_getivar`, which has some constant argument and when it is inlined the content is significantly optimized, are not optimized by clang with default `inline-threshold`, and they are inlined if `inline-threshold` is set as specific size, it sounds reasonable.", "created_at": "2017-05-26 17:02:17", "user": 13423, "id": 304335575}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"heart": [199, 13723, 1275643, 249209], "+1": [2042399]}, "text": "This pull request is PoC of bundler integration for ruby core. ", "labels": [], "number": 1536, "updated_at": "2017-09-08 08:51:47", "user": 12301, "closed_at": "2017-09-08 08:51:44", "id": 213678998, "title": "[EXPERIMENTAL] Bundler integration", "url": "https://api.github.com/repos/ruby/ruby/issues/1536", "created_at": "2017-03-13 05:44:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/328044053", "text": "Applied at https://github.com/ruby/ruby/commit/8598f8c2dc78c6d1ae87cb6ae19c34ba2cb29241", "created_at": "2017-09-08 08:51:44", "user": 12301, "id": 328044053}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "At least, Array#flatten will be faster around 20%.\r\nSeems that strncmp() & strcmp() in convert_type() are slightly heavy to look up the method's id for type conversion.\r\n(https://github.com/ruby/ruby/blob/4f2db15b42d7b8eb5b304a92ba2296632dba3edf/object.c#L2634-L2643)\r\n\r\nThis patch will use known method's id directly.\r\n\r\n* Before\r\n```\r\n                                             user     system      total        real\r\nArray#flatten (rb_check_convert_type2)   1.000000   0.000000   1.000000 (  1.001917)\r\nArray#+ (rb_convert_type2)               1.010000   0.000000   1.010000 (  1.006383)\r\n```\r\n\r\n* After\r\n```\r\n                                             user     system      total        real\r\nArray#flatten (rb_check_convert_type2)   0.830000   0.000000   0.830000 (  0.833411)\r\nArray#+ (rb_convert_type2)               0.950000   0.000000   0.950000 (  0.953832)\r\n```\r\n\r\n* Test Code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  ary = []\r\n  100.times { |i| ary << i }\r\n  array = [ary]\r\n\r\n  x.report \"Array#flatten (rb_check_convert_type2)\"do\r\n    100000.times do\r\n      array.flatten\r\n    end\r\n  end\r\n\r\n  x.report \"Array#+ (rb_convert_type2)\"do\r\n    class Foo\r\n      def to_ary\r\n        [1,2,3]\r\n      end\r\n    end\r\n    obj = Foo.new\r\n\r\n    2000000.times do\r\n      array + obj\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13341", "labels": [], "number": 1537, "updated_at": "2017-10-14 12:39:47", "user": 199156, "closed_at": "2017-05-31 12:31:47", "id": 213686042, "title": "Improve performance of implicit type conversion", "url": "https://api.github.com/repos/ruby/ruby/issues/1537", "created_at": "2017-03-13 06:48:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305127461", "text": "Rebased to HEAD (cc50ed4a5044133ef1ef79d31aa7d850bf3ca83b) in trunk branch", "created_at": "2017-05-31 08:51:13", "user": 199156, "id": 305127461}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pull request updates some plain text in the main project `README` to be a relative link to the mentioned file.", "labels": [], "number": 1538, "updated_at": "2017-03-21 00:12:32", "user": 2362668, "closed_at": "2017-03-21 00:12:32", "id": 213762502, "title": "Link to README.win32 instead of mentioning it in plain text", "url": "https://api.github.com/repos/ruby/ruby/issues/1538", "created_at": "2017-03-13 13:13:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [26195, 3959]}, "text": "Array#sort with float elements will be over 2 times faster.\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   5.650000   0.020000   5.670000 (  5.661151)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   2.410000   0.010000   2.420000 (  2.427718)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  ary = []\r\n  1000.times { |i| ary << Random.rand }\r\n\r\n  x.report do\r\n\r\n    10000.times do\r\n      ary.sort\r\n    end\r\n\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13340", "labels": [], "number": 1539, "updated_at": "2017-10-14 12:39:29", "user": 199156, "closed_at": "2017-04-13 07:23:22", "id": 214898584, "title": "Improve performance of Array#sort with float elements", "url": "https://api.github.com/repos/ruby/ruby/issues/1539", "created_at": "2017-03-17 03:29:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/287345292", "text": "@nobu Thank you for your review. Updated the code.", "created_at": "2017-03-17 12:49:05", "user": 199156, "id": 287345292}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [2685976, 23086569, 128200, 13301027, 490502, 10308, 5091, 818249, 4289625, 1542781]}, "text": "Resolves https://bugs.ruby-lang.org/issues/13330", "labels": [], "number": 1540, "updated_at": "2017-05-26 05:27:50", "user": 3019458, "closed_at": "2017-05-26 05:27:50", "id": 215257248, "title": "fixed Array.include? performance for symbols", "url": "https://api.github.com/repos/ruby/ruby/issues/1540", "created_at": "2017-03-19 11:19:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [2642545]}, "text": "This PR improves documentation for `Float#round`. Most notably, to better highlight the `half` keyword that was added in **Ruby 2.4.0**.\r\n\r\nWhen I first learned about changes to `round` in this newest Ruby version, I went to check out the official docs on the web to see what keywords were supported. I was able to find the information I was looking for, but it was buried into the last paragraph of the function's documentation. For a user checking out these docs but not aware of the new functionality in Ruby 2.4.0 like I am, support for specifying a rounding method may not be apparent because:\r\n\r\n* The keyword was not provided in the function's contract\r\n* There were no code examples for the keyword's values\r\n\r\nThis PR hopefully makes this documentation more clear for Ruby developers.\r\n\r\n**NOTE:** I am not entirely sure if my edit to the function's contract, to highlight the optional `half` argument, follow existing guidelines. I had trouble finding another method in Ruby core or stdlib to use as an example. Please feel free to suggest a change to this line.", "labels": [], "number": 1541, "updated_at": "2017-03-28 03:42:13", "user": 1844664, "closed_at": "2017-03-28 02:16:43", "id": 215298809, "title": "improves Float#round documentation to better highlight the half keyword", "url": "https://api.github.com/repos/ruby/ruby/issues/1541", "created_at": "2017-03-19 21:58:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/287876818", "text": "Note that the CI check has failed, but apparently due to a networking issue. Can someone please re-trigger that job?", "created_at": "2017-03-20 19:49:01", "user": 1844664, "id": 287876818}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288008102", "text": "@ecbrodie appveyor job is failing status now caused to fetch external data file. ", "created_at": "2017-03-21 08:28:23", "user": 12301, "id": 288008102}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288060900", "text": "@hsbt sorry, I don't fully follow. Are you saying that the job is failing due to my change or due to some other external problem? Are you or anyone from the *ruby* team able to rerun this failing job? Is my PR okay to merge even with the job failing due to external reasons?\r\n\r\nThank you.", "created_at": "2017-03-21 12:16:21", "user": 1844664, "id": 288060900}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288067140", "text": "@ecbrodie Your change is not related CI job failing. It's external reasons :octocat: ", "created_at": "2017-03-21 12:44:44", "user": 12301, "id": 288067140}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289508390", "text": "@hsbt Is there anything else that needs to get done to ensure that this PR gets merged in? Do I need to file an issue on the official Ruby Issue Tracking system? Do I need to request that the failing AppVeyor build gets retriggered? Thank you.", "created_at": "2017-03-27 16:31:26", "user": 1844664, "id": 289508390}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289654203", "text": "Thank you @hsbt @nobu ;)", "created_at": "2017-03-28 03:42:13", "user": 1844664, "id": 289654203}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`mathn/complex` and `mathn/rational` is deprecated from 2008. We should remove it before Ruby 3.0 release.\r\n", "labels": [], "number": 1542, "updated_at": "2017-04-20 07:17:29", "user": 12301, "closed_at": "2017-04-20 07:17:27", "id": 215341314, "title": "Removed deprecated mathn extensions.", "url": "https://api.github.com/repos/ruby/ruby/issues/1542", "created_at": "2017-03-20 06:51:48", "comments": [], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`enc` is the name of the variable used in the example, not the name of the\r\nkeyword argument: `encoding`.\r\n\r\nThe documentation used to wrongly suggest that the keyword argument name was\r\n\"enc\" which could cause people try try to call `Dir.open(\"thing\", enc: \"utf-8\")`\r\n\r\nI don't know if this is a strange convention in Ruby documentation where we somehow use the name of the example variable (`enc` in this example) in the method call examples.\r\n\r\n/cc @zzak ", "labels": [], "number": 1543, "updated_at": "2017-05-04 12:34:30", "user": 65950, "closed_at": "2017-05-04 08:59:49", "id": 215504070, "title": "Dir.c: properly refer to keyword argument by its actual name", "url": "https://api.github.com/repos/ruby/ruby/issues/1543", "created_at": "2017-03-20 17:54:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/299131619", "text": "Thanks, I've merged.\r\nSorry for late response.\r\n", "created_at": "2017-05-04 09:01:46", "user": 32117, "id": 299131619}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/299172099", "text": "I agree that this is an improvement, but I disagree with the statement '`The documentation used to wrongly suggest that the keyword argument name was \"enc\"`'. The docs usually refer to provided argument values via the variable name in the call-seq, the previous version followed this well-established convention.", "created_at": "2017-05-04 12:34:30", "user": 1112299, "id": 299172099}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Array#sort with block will be ~10% faster.\r\nSeems that a performance was reduced at\r\nhttps://github.com/ruby/ruby/blob/976becf7eb18aa1592c703ac4d86a2cf9dfa701e/vm_eval.c#L1042-L1046\r\nSo by this patch, a small argument will be given directly into rb_yield_values2()\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   0.860000   0.000000   0.860000 (  0.869366)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   0.790000   0.000000   0.790000 (  0.791408)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  ary = []\r\n  1000.times { |i| ary << Random.rand(1000) }\r\n\r\n  x.report do\r\n\r\n    1000.times do\r\n      ary.sort{ |a,b| a<=>b}\r\n    end\r\n\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13344", "labels": [], "number": 1544, "updated_at": "2017-10-14 12:39:10", "user": 199156, "closed_at": "2017-04-13 09:26:26", "id": 215615052, "title": "Improve performance of Array#sort with block", "url": "https://api.github.com/repos/ruby/ruby/issues/1544", "created_at": "2017-03-21 02:58:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/287966084", "text": "@nobu Thank you for your review. I fixed initialization.", "created_at": "2017-03-21 03:24:12", "user": 199156, "id": 287966084}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [63991]}, "text": "Before this patch `gem list --exact` fails with the following error:\r\n\r\n    > gem list --exact aws-sdk\r\n\r\n    *** LOCAL GEMS ***\r\n\r\n    ERROR:  While executing gem ... (TypeError)\r\n        type mismatch: String given\r\n\r\n---\r\n\r\nI have also verified that this fails on ruby 2.3.3 and ruby 2.4.0, and if possible would like it to be backported.", "labels": [], "number": 1545, "updated_at": "2017-03-22 23:20:54", "user": 52120, "closed_at": "2017-03-22 16:23:14", "id": 215948480, "title": "Fix broken --exact parameter to gem command", "url": "https://api.github.com/repos/ruby/ruby/issues/1545", "created_at": "2017-03-22 04:17:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288445135", "text": "Shouldn't this be opened on RubyGems?", "created_at": "2017-03-22 15:54:00", "user": 2430490, "id": 288445135}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288447632", "text": "Gah, I forgot rubygems was separate even though it's part of Ruby 😕 ", "created_at": "2017-03-22 16:01:03", "user": 52120, "id": 288447632}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288455074", "text": "Moved to rubygems repo: https://github.com/rubygems/rubygems/pull/1873", "created_at": "2017-03-22 16:23:14", "user": 52120, "id": 288455074}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/288569853", "text": "@Fryguy I will merge it into ruby core after rubygems accepted.", "created_at": "2017-03-22 23:20:54", "user": 12301, "id": 288569853}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Time#<=> will be faster around 60%.\r\nIf internal values would have Fixnum,\r\noptimized function improves performance.\r\n(https://github.com/ruby/ruby/blob/9b69e9fafc329aaa540d5adeb55124f020abfe3c/time.c#L57-L67)\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   1.410000   0.000000   1.410000 (  1.407848)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   0.880000   0.000000   0.880000 (  0.886662)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  x.report do\r\n    t1 = Time.now\r\n    t2 = Time.now\r\n    10000000.times do\r\n      t1 <=> t2\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13354", "labels": [], "number": 1546, "updated_at": "2017-10-14 12:38:57", "user": 199156, "closed_at": "2017-05-21 03:37:21", "id": 216114439, "title": "Improve Time#<=> performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1546", "created_at": "2017-03-22 15:53:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Time#+ & Time#- will be faster around 15%.\r\nIf internal values would have Fixnum,\r\noptimized function (add() & sub()) improves performance.\r\n\r\n* Before\r\n```\r\n             user     system      total        real\r\nTime#+   0.820000   0.000000   0.820000 (  0.818081)\r\nTime#-   0.810000   0.000000   0.810000 (  0.813835)\r\n```\r\n\r\n* After\r\n```\r\n             user     system      total        real\r\nTime#+   0.710000   0.000000   0.710000 (  0.710241)\r\nTime#-   0.710000   0.010000   0.720000 (  0.714151)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  x.report \"Time#+\" do\r\n    t = Time.now\r\n    2000000.times do\r\n      t + 1\r\n    end\r\n  end\r\n\r\n  x.report \"Time#-\" do\r\n    t = Time.now\r\n    2000000.times do\r\n      t - 1\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13357", "labels": [], "number": 1547, "updated_at": "2017-10-14 12:38:46", "user": 199156, "closed_at": "2017-05-21 03:37:22", "id": 216391615, "title": "Improve Time#+ & Time#- performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1547", "created_at": "2017-03-23 11:06:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The idea with this is to add a flag to pages which tells a child process to not write into empty slots in these pages. For a child, writing into any page shared from the parent which is not completely empty is less efficient than just allocating a new page.", "labels": [], "number": 1548, "updated_at": "2017-03-23 17:36:50", "user": 10411827, "closed_at": "2017-03-23 17:36:41", "id": 216511630, "title": "CoW Barrier", "url": "https://api.github.com/repos/ruby/ruby/issues/1548", "created_at": "2017-03-23 17:33:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add SO_REUSEADDR socket option for lib/drb/drb.rb. We had an issue with Fluentd (https://github.com/fluent/fluentd/blob/335d3b2b709ad368da6655636e8ab401b116ae4b/lib/fluent/plugin/in_debug_agent.rb#L55), which throws with error:\r\n\r\n```\r\n2017-03-20 07:18:45 +0000 [info]: listening dRuby uri=\"druby://127.0.0.1:24230\" object=\"Engine\"\r\n2017-03-20 07:18:45 +0000 [error]: unexpected error error_class=Errno::EADDRINUSE error=#<Errno::EADDRINUSE: Address already in use - bind(2) for \"127.0.0.1\" port 24230>\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:879:in `initialize'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:879:in `open'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:879:in `open_server'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:764:in `block in open_server'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:762:in `each'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:762:in `open_server'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/2.1.0/drb/drb.rb:1373:in `initialize'\r\n  2017-03-20 07:18:45 +0000 [error]: /opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.12.31/lib/fluent/plugin/in_debug_agent.rb:53:in `new'\r\n```\r\n\r\n```\r\n# ss -an | grep 24230\r\nTIME-WAIT  0      0                 127.0.0.1:24230            127.0.0.1:6380\r\n```\r\n\r\nWhen this is set on socket, TIME_WAIT socket can be ignored and reused, no need to wait until socket is cleaned up. ", "labels": [], "number": 1549, "updated_at": "2018-02-23 03:07:31", "user": 3352707, "closed_at": "None", "id": 216549485, "title": "Add SO_REUSEADDR socket option for lib/drb/drb.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1549", "created_at": "2017-03-23 19:41:42", "comments": [], "assignees": [33682, 33682], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1550, "updated_at": "2017-03-24 12:59:51", "user": 2521090, "closed_at": "2017-03-24 12:59:51", "id": 216568903, "title": "Fix typo in http.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1550", "created_at": "2017-03-23 20:51:13", "comments": [{"reactions": {"+1": [2521090]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289014928", "text": "That's probably not a typo. https://en.wikipedia.org/wiki/If_and_only_if", "created_at": "2017-03-24 12:53:57", "user": 14068, "id": 289014928}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Resolv::DNS::Name.create(str)` does not make any validation.\r\nAnd it returns false positive results for queries like\r\n\r\n`Resolv::DNS.new.getresources('.gmail....com', Resolv::DNS::Resource::IN::MX)`\r\n\r\nI added basic RFC validations in `Resolv::DNS::Label.split` to get ArgumentError with messages similar to host and dig commands.", "labels": [], "number": 1551, "updated_at": "2018-02-23 03:07:32", "user": 5870040, "closed_at": "None", "id": 216819749, "title": "Make Resolv::DNS::Name validation similar to host and dig commands.", "url": "https://api.github.com/repos/ruby/ruby/issues/1551", "created_at": "2017-03-24 15:26:43", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "rb_equal() is been using in many places to compare the object.\r\n\r\nIf objects are special constants,\r\n\"if (obj1 == obj2) return Qtrue;\" can check whether objects are equal or not.\r\n(https://github.com/ruby/ruby/blob/0b1f6aed9414a4d7714910e61db08fdb2ac3ecd1/object.c#L90)\r\nSo, it can skip rb_funcall() calling to comfirm that special constant objects are not equal.\r\n\r\nAt least, Time#eql? will be faster around 60%.\r\nTime object might have Finuxm (special constant) value internally on 64 bit environment.\r\n\r\n* Before\r\n```\r\n                              user     system      total        real\r\nTime#eql? with receiver   0.890000   0.000000   0.890000 (  0.891377)\r\nTime#eql? with other      1.430000   0.000000   1.430000 (  1.429047)\r\n```\r\n\r\n* After\r\n```\r\n                              user     system      total        real\r\nTime#eql? with receiver   0.890000   0.000000   0.890000 (  0.890050)\r\nTime#eql? with other      0.900000   0.000000   0.900000 (  0.905941)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  t1 = Time.now\r\n  t2 = Time.now\r\n\r\n  x.report \"Time#eql? with receiver\" do\r\n    10000000.times do\r\n      t1.eql?(t1)\r\n    end\r\n  end\r\n\r\n  x.report \"Time#eql? with other\" do\r\n    10000000.times do\r\n      t1.eql?(t2)\r\n    end\r\n  end\r\n\r\nend\r\n```", "labels": [], "number": 1552, "updated_at": "2017-10-14 12:38:32", "user": 199156, "closed_at": "2017-05-25 05:37:28", "id": 217027137, "title": "Improve performance of rb_equal()", "url": "https://api.github.com/repos/ruby/ruby/issues/1552", "created_at": "2017-03-26 04:45:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302718542", "text": "Did you confirm `rb_ary_index` is not degraded performance?", "created_at": "2017-05-19 14:30:46", "user": 13423, "id": 302718542}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302720224", "text": "I confirmed the performance which described in last patch (https://github.com/Watson1978/ruby/commit/28d0ea40357cfb14f72ab7a355d0c560e6feaaaf)", "created_at": "2017-05-19 14:36:50", "user": 199156, "id": 302720224}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See [RubyGems / rubygems issue 1875](https://github.com/rubygems/rubygems/issues/1875) and [Ruby trunk issue 13367](https://bugs.ruby-lang.org/issues/13367)", "labels": [], "number": 1553, "updated_at": "2017-05-01 13:01:27", "user": 15081176, "closed_at": "2017-05-01 13:01:22", "id": 217069545, "title": "Fix issue for MinGW / MSYS2 builds and testing", "url": "https://api.github.com/repos/ruby/ruby/issues/1553", "created_at": "2017-03-26 17:41:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290054485", "text": "I will pick this after 2.6 branch of rubygems/rubygems fixed.", "created_at": "2017-03-29 10:52:35", "user": 12301, "id": 290054485}, {"reactions": {"heart": [12301]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/294976257", "text": "@hsbt Gentle reminder.  Also, please close [Ruby bug 13367](https://bugs.ruby-lang.org/issues/13367).\r\n\r\nThanks for your help.", "created_at": "2017-04-18 20:44:45", "user": 15081176, "id": 294976257}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/298330068", "text": "@hsbt Thank you for the RubyGems update.\r\n\r\nThis PR was included in [Merge rubygems-2.6.12 from rubygems/rubygems 58530 708a10d](https://github.com/ruby/ruby/commit/708a10d35bf7d34da574ca3f2ae6be4bfffd5267), and hence, can be closed.", "created_at": "2017-05-01 13:01:22", "user": 15081176, "id": 298330068}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The declaration of local variable in loop, it will initialize local variable for each run of the loop with clang generated code.\r\nSo, it shouldn't declare the local variable in heavy loop.\r\n\r\nArray#sum with float elements will be faster around 30%.\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   3.320000   0.010000   3.330000 (  3.336088)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   2.590000   0.010000   2.600000 (  2.602399)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  ary = []\r\n  10000.times { ary << Random.rand }\r\n\r\n  x.report do\r\n    50000.times do\r\n      ary.sum\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13368", "labels": [], "number": 1555, "updated_at": "2018-02-23 03:07:32", "user": 199156, "closed_at": "None", "id": 217129668, "title": "Improve performance of Array#sum with float elements", "url": "https://api.github.com/repos/ruby/ruby/issues/1555", "created_at": "2017-03-27 03:49:14", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [118150]}, "text": "Seems that LIKELY() introduces some penalties at branching.\r\n\r\n* Ruby 2.4.1\r\n```\r\n$ ruby -v ~/tmp/bench.rb\r\nruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]\r\n       user     system      total        real\r\n   1.460000   0.010000   1.470000 (  1.462540)\r\n```\r\n\r\n* Ruby trunk without patch\r\n```\r\n$ ./miniruby -v -Ilib ~/tmp/bench.rb\r\nruby 2.5.0dev (2017-03-28 trunk 58156) [x86_64-darwin16]\r\n       user     system      total        real\r\n   1.580000   0.000000   1.580000 (  1.579428)\r\n```\r\n\r\n* Ruby trunk with patch\r\n```\r\n$ ./miniruby -v -Ilib ~/tmp/bench.rb\r\nruby 2.5.0dev (2017-03-28 trunk 58156) [x86_64-darwin16]\r\n       user     system      total        real\r\n   1.510000   0.000000   1.510000 (  1.505948)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bm do |x|\r\n  ary = [1,2,3]\r\n\r\n  x.report do\r\n    20000000.times do\r\n      ary.at(2)\r\n    end\r\n  end\r\n\r\nend\r\n```", "labels": [], "number": 1556, "updated_at": "2018-02-23 03:07:32", "user": 199156, "closed_at": "None", "id": 217484352, "title": "Fix one of performance regressions in method calling", "url": "https://api.github.com/repos/ruby/ruby/issues/1556", "created_at": "2017-03-28 08:29:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290611970", "text": "Looks like that a lot of `nop` instructions also are invoked around `ruby_th_dtrace_setup()` with clang's generated binary when run same test codes.\r\n![](https://d3uepj124s5rcx.cloudfront.net/items/17023U0q290W1G0F1V1B/170331-0001.png?v=38690013)\r\n", "created_at": "2017-03-31 04:19:25", "user": 199156, "id": 290611970}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/291378857", "text": "Every time, Ruby checks whether DTrace's probe is enabled when it would call a method.\r\nHowever, DTrace's probe would not provided with dynamically, it is detected to provide at only compilation time.\r\n\r\n![](https://d3uepj124s5rcx.cloudfront.net/items/303c370C090f2v0t2V1V/170404-0001.png?v=ba555267)", "created_at": "2017-04-04 02:44:43", "user": 199156, "id": 291378857}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/291407077", "text": "Just a minor nit, but I think you mean probe, not prove.", "created_at": "2017-04-04 06:36:13", "user": 10236, "id": 291407077}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/291407971", "text": "@knu You're right. It was just typo. Thank you.", "created_at": "2017-04-04 06:41:02", "user": 199156, "id": 291407971}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302724174", "text": "This cannot disable probe once it is enabled.", "created_at": "2017-05-19 14:51:30", "user": 13423, "id": 302724174}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302858873", "text": "Looks for me that DTrace's probe will be enabled/disabled with `configure` script.\r\n\r\n1. If the system has `dtrace` command, `configure` will mark DTrace is availed.\r\n2. If DTrace is availed, DTrace's probe will be generated with `tool/gen_dummy_probes.rb` at `make` process.\r\n\r\nAnd there is no way to enable/disable DTrace's probe at runtime.\r\n\r\nHmm, I wonder If I missed something.", "created_at": "2017-05-20 08:15:16", "user": 199156, "id": 302858873}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302884207", "text": "There were some detailed documents about this mechanism before, but I couldn't find good document now. Therefore following are abstract of dtrace probes mechanism...\r\n\r\n* Whether probes are inserted into the binary or not is statically decided.\r\n  * It depends on the existence of `dtrace` command and configure as you wrote.\r\n  * Those probe is disabled by default (exist in the binary but don't fire event; many `NOP`s you saw are disabled probes) \r\n* Whether probes fire the event is dynamically decided\r\n  * Users can enable those probes by dtrace command. It dynamically replaces the `NOP`s in the memory with the related probe instructions.", "created_at": "2017-05-20 16:38:30", "user": 13423, "id": 302884207}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302910353", "text": "Thank you for replying.\r\nIt is very interesting mechanism and it sounds my changing is too bad.", "created_at": "2017-05-21 02:12:02", "user": 199156, "id": 302910353}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302920629", "text": "This still gain performance improvement?\r\nOn my environment it doesn't show significant change.", "created_at": "2017-05-21 07:36:00", "user": 13423, "id": 302920629}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302936771", "text": "It contains two modifications.\r\nCould you separate them?\r\n\r\nMethod calling is common operation so that we need to care about them.\r\nPlease make your benchmarks more carefully.\r\n\r\n", "created_at": "2017-05-21 13:29:39", "user": 9558, "id": 302936771}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303115845", "text": "```ruby\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n\r\n  x.report \"while\" do |iter|\r\n    ary = [1, 2, 3, 4, 5]\r\n    i = 0\r\n    while i < iter do\r\n      ary.at(2)\r\n      i += 1\r\n    end\r\n  end\r\n\r\n  x.report \"Integer#times\" do |iter|\r\n    ary = [1, 2, 3, 4, 5]\r\n    iter.times do\r\n      ary.at(2)\r\n    end\r\n  end\r\n\r\nend\r\n```", "created_at": "2017-05-22 14:26:16", "user": 199156, "id": 303115845}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303116233", "text": "## Benchmark result\r\nUsing Apple LLVM version 8.1.0 (clang-802.0.41)\r\n\r\n### Ruby 2.4.1\r\n```\r\n               while     20.988M (± 2.5%) i/s -    104.955M in   5.004269s\r\n       Integer#times     14.062M (± 3.0%) i/s -     70.306M in   5.004882s\r\n```\r\n\r\n### Before (r58192)\r\n```\r\n               while     20.937M (± 2.5%) i/s -    104.668M in   5.002974s\r\n       Integer#times     13.040M (± 1.9%) i/s -     65.238M in   5.005069s\r\n```\r\n\r\n* Result : ruby 2.4.1 vs r58192\r\n```\r\nwhile         -> 0.27 % down\r\nInteger#times -> 7.76 % down\r\n```\r\n\r\n### After (r58192 + patches)\r\n```\r\n               while     21.409M (± 3.0%) i/s -    107.055M in   5.005548s\r\n       Integer#times     13.159M (± 2.6%) i/s -     65.822M in   5.005854s\r\n```\r\n\r\n* Result : r58192 vs r58192 + patchs\r\n```\r\nwhile         -> 2.28 % up\r\nInteger#times -> 0.90 % up\r\n```", "created_at": "2017-05-22 14:27:36", "user": 199156, "id": 303116233}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303116525", "text": "## Benchmark result\r\nUsing gcc-7 (Homebrew GCC 7.1.0) 7.1.0\r\n\r\n### Ruby 2.4.1\r\n```\r\n               while     22.672M (± 2.3%) i/s -    113.292M in   5.000184s\r\n             16.818M (± 1.9%) i/s -     84.169M in   5.006644s\r\n```\r\n\r\n### Before (r58192)\r\n```\r\n               while     22.439M (± 2.0%) i/s -    112.208M in   5.002965s\r\n       Integer#times     16.613M (± 3.2%) i/s -     83.029M in   5.003500s\r\n```\r\n\r\n* Result : ruby 2.4.1 vs r58192\r\n```\r\nwhile         -> 0.97 % down\r\nInteger#times -> 1.37 % down\r\n```\r\n\r\n\r\n### After (r58192 + patches)\r\n```\r\n               while     22.893M (± 1.7%) i/s -    114.492M in   5.002894s\r\n       Integer#times     16.853M (± 1.8%) i/s -     84.302M in   5.004057s\r\n```\r\n\r\n* Result : r58192 vs r58192 + patchs\r\n```\r\nwhile         -> 2.04 % up\r\nInteger#times -> 1.53 % up\r\n```\r\n", "created_at": "2017-05-22 14:28:37", "user": 199156, "id": 303116525}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303116583", "text": "Updated benchmark script and result in above.\r\n\r\nI found,\r\n\r\n1. the regression is occurred in clang + Integer#times combination.\r\n2. The patches in this pull request increase performance very slightly.\r\n\r\nSo, I guess we need to focus on yield performance such as https://github.com/ruby/ruby/pull/1535", "created_at": "2017-05-22 14:28:53", "user": 199156, "id": 303116583}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303120485", "text": "This improvement is small but this simplifies code.\r\n(whether a patch should be merged or not depends the trade off between improvement and code complexity)\r\nIf this is also true on Linux+gcc, I'm positive to merge.\r\nHow do you think @ko1?", "created_at": "2017-05-22 14:42:10", "user": 13423, "id": 303120485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303144269", "text": "(1) Please explain your environment. You only show your compiler, but you need to show your CPU arch (and OS if it is matter). On this case, \"LIKELY\" affects branch prediction and CPU arch is a matter (of course, compiler version are also matter). dtrace (systemtap) enable/disable is also matter.\r\n(2) Please show results in a table form. It is easy to compare.\r\n(3) (advanced) Please write the reason why these fix are affect your benchmark results. I'm not sure why such performance changing. I need to understand \"why\" to approve this PR.\r\n(4) Please explain why you change the benchmark. Benchmark should have the purpose and please make clear what is measured. Additionally, on this case, loop overhead is more matter so you need to measure only method call overhead. This is what I wrote \" Please make your benchmarks more carefully.\" in above message.\r\n\r\nThanks,\r\nKoichi", "created_at": "2017-05-22 16:03:03", "user": 9558, "id": 303144269}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303144604", "text": "> I need to understand \"why\" to approve this PR.\r\n\r\nIn other words, I'll check the reason sometime if nobody explains.", "created_at": "2017-05-22 16:04:18", "user": 9558, "id": 303144604}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303146171", "text": "I forgot one point.\r\n\r\n(5) (related to (3)) It contains two modification. Please separate and show which is matter for performance. I'm not sure about dtrace, but method caching seems good point to use `LIKELY`.\r\n", "created_at": "2017-05-22 16:09:37", "user": 9558, "id": 303146171}, {"reactions": {"+1": [1563960, 357288, 969118]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303349720", "text": "### 1. Environment\r\n* Hardware : MacBook Pro (Retina, 15-inch, Late 2013)\r\n* CPU : 2.6 GHz Intel Core i7 (Haswell)\r\n* OS : macOS 10.12.5\r\n* dtrace : macOS bundled `dtrace` command by default.\r\n* compiler\r\n    * clang 802.0.4 (in Xcode 8.3.1, maybe it is same with LLVM 3.9.1)\r\n    * gcc 7.1.0\r\n* Other : https://github.com/rugarciap/Turbo-Boost-Switcher to disable Turbo Boost feature in CPU\r\n\r\n### 2. Result\r\n* With clang\r\n\r\n|  | Ruby 2.4.1 | r58192 | Ruby 2.4.1 vs r58192 |  | Ruby 2.4.1 | r58192 + patches | Ruby 2.4.1 vs r58192 + patches |\r\n| --- | --- | --- | --- | --- | --- | --- | --- |\r\n| while | 104.955M | 104.668M | 0.27% down |  | 104.955M | 107.055M | 2.00% up |\r\n| Integer#times | 70.306M | 65.238M | 7.76% down |  | 70.306M | 65.822M | 6.81% down |\r\n\r\n* With gcc\r\n\r\n|  | Ruby 2.4.1 | r58192 | Ruby 2.4.1 vs r58192 |  | Ruby 2.4.1 | r58192 + patches | Ruby 2.4.1 vs r58192 + patches |\r\n| --- | --- | --- | --- | --- | --- | --- | --- |\r\n| while | 113.292M | 112.208M | 0.97% down |  | 113.292M | 114.492M | 1.06% up |\r\n| Integer#times | 84.169M | 83.029M | 1.37% down |  | 84.169M | 84.302M | 0.2% up |\r\n\r\n### 3. Explain the patch\r\nI've used `Instruments` which is developer tool contained in Xcode to measure the performace for each improvements.\r\n\r\nI was guessing that there is regression in method dispatching when I created the patches, and I investigated there.\r\n`Instruments` indicated `vm_exec -> vm_exec_core -> vm_call_cfunc -> Array#at` as function call graph for method dispathing.\r\n\r\n![](https://d2ppvlu71ri8gs.cloudfront.net/items/0H3K1e1n2K0o0h190r1Y/function_call_graph.png)\r\n\r\nEspecially, `vm_exec_core()` spent 4244 msec and `vm_call_cfunc()` spent 1179 msec in 6412 msec execution time and\r\nI thought they have the hotspots for method dispatching.\r\n\r\nNext, I investigate `vm_exec_core()` and `vm_call_cfunc()`. In `vm_exec_core()`, the largest hotspot is calling `vm_call_cfunc()` which spent `29.71%` of invoking `vm_exec_core()` (4244 msec). The second hotspot is around `UNLIKELY` which I changed in second patch.\r\n![](https://d2ppvlu71ri8gs.cloudfront.net/items/10082U0b2V1a3b433d0i/170523-0001.png)\r\n\r\nIf I removed `UNLIKELY`, it remove the second hotspot from `Instruments`.\r\n\r\nBy same way, I created a first patch for improving `vm_call_cfunc()`.\r\n\r\n\r\n### 4. Why change the benchmark\r\nThe first benchmark script uses Integer#times calling which has huge overhead.\r\nIn order to clarify whether really method dispatch has regression, I changed to use `while` loop.\r\n\r\n### 5. Separate and show which is matter for performance.\r\nI will try to do later, sorry.", "created_at": "2017-05-23 09:54:01", "user": 199156, "id": 303349720}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303354402", "text": "### 3. Explain the patch (additional)\r\nUnder macOS, it has bundled `dtrace` command by default.\r\n\r\nI think the condition whether `dtrace` is enabled always returns `true`.\r\nSo, I guess `UNLIKELY` inserts some penalty in condition and then I removed.", "created_at": "2017-05-23 10:13:24", "user": 199156, "id": 303354402}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/13379", "labels": [], "number": 1557, "updated_at": "2017-10-11 10:01:24", "user": 9540855, "closed_at": "2017-05-03 16:14:39", "id": 217713997, "title": "net/imap: handle timeouts", "url": "https://api.github.com/repos/ruby/ruby/issues/1557", "created_at": "2017-03-28 22:40:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/335760468", "text": "what is wrong with it? is there any workaround? ", "created_at": "2017-10-11 10:01:24", "user": 14885572, "id": 335760468}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Init_frozen_strings definition is removed in r51511.\r\nhttps://bugs.ruby-lang.org/issues/11423", "labels": [], "number": 1558, "updated_at": "2017-03-29 05:01:17", "user": 69755, "closed_at": "2017-03-29 04:32:42", "id": 217751914, "title": "Remove unused Init_frozen_strings declaration", "url": "https://api.github.com/repos/ruby/ruby/issues/1558", "created_at": "2017-03-29 03:07:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289979425", "text": "ref https://bugs.ruby-lang.org/issues/13380", "created_at": "2017-03-29 04:32:21", "user": 29440, "id": 289979425}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289979454", "text": "Merged at https://github.com/ruby/ruby/commit/7dab0e07eb2ea73db4cae97be291cb3dd18800b3", "created_at": "2017-03-29 04:32:42", "user": 29440, "id": 289979454}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, C extensions cannot use fstrings. I'd like to use\r\nrb_fstring_cstr instead of rb_str_new_cstr for static strings in C\r\nextensions.", "labels": [], "number": 1559, "updated_at": "2018-02-23 03:07:32", "user": 69755, "closed_at": "None", "id": 217766654, "title": "Expose rb_fstring and its family to C extensions", "url": "https://api.github.com/repos/ruby/ruby/issues/1559", "created_at": "2017-03-29 05:12:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/289995022", "text": "I've created a ticket for this PR.\r\nhttps://bugs.ruby-lang.org/issues/13381", "created_at": "2017-03-29 06:25:07", "user": 69755, "id": 289995022}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Make ruby's `printf` raise an `ArgumentError` when format string is incomplete.\r\n\r\nhttps://bugs.ruby-lang.org/issues/13315\r\n\r\nIn C language, `printf(\"%\")` shows warning as follow.\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main(void)\r\n{\r\n  printf(\"%\");\r\n  return 0;\r\n}\r\n```\r\n\r\n```\r\n5:11: warning: incomplete format specifier [-Wformat]\r\n  printf(\"%\");\r\n          ^\r\n1 warning generated.\r\n```\r\n\r\nI think it's nice to notify that incomplete format is invalid for developer in ruby too.\r\nSince this change will drop displayed `\"%\"` silently, Raising an error is better than showing a warning.\r\n\r\n", "labels": [], "number": 1560, "updated_at": "2017-05-26 13:26:40", "user": 5616899, "closed_at": "2017-05-25 15:34:26", "id": 217790108, "title": "Skip incomplete format specifier", "url": "https://api.github.com/repos/ruby/ruby/issues/1560", "created_at": "2017-03-29 07:40:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290014503", "text": "Please add a test to confirm a warning is shown.", "created_at": "2017-03-29 08:03:52", "user": 29440, "id": 290014503}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290019365", "text": "How about making this as an error?", "created_at": "2017-03-29 08:25:13", "user": 29440, "id": 290019365}, {"reactions": {"+1": [1413408, 168854]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290028117", "text": "ruby/spec also needs update.", "created_at": "2017-03-29 09:00:57", "user": 16700, "id": 290028117}], "assignees": [168854, 168854], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I will create a new ticket and write details to it.", "labels": [], "number": 1561, "updated_at": "2017-12-04 06:25:55", "user": 2684231, "closed_at": "2017-12-04 06:25:49", "id": 217800834, "title": "Options for FTP PORT command", "url": "https://api.github.com/repos/ruby/ruby/issues/1561", "created_at": "2017-03-29 08:27:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290030655", "text": "Changed method `transfercmd` is private method and it has no test.", "created_at": "2017-03-29 09:11:17", "user": 2684231, "id": 290030655}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290031654", "text": "https://bugs.ruby-lang.org/issues/13382", "created_at": "2017-03-29 09:15:25", "user": 2684231, "id": 290031654}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Run this code (named as `test.rb`):\n```\nmodule Hoge\nend\n\nclass Foobar\nend\n\np Hoge.source_location\np Foobar.source_location\n```\n\nYou should got:\n```\n[\"./test.rb\", 1]\n[\"./test.rb\", 4]\n```\n\nPlease some comments.", "labels": [], "number": 1562, "updated_at": "2018-02-23 03:07:33", "user": 239637, "closed_at": "None", "id": 217802122, "title": "Module#source_location, Class#source_location", "url": "https://api.github.com/repos/ruby/ruby/issues/1562", "created_at": "2017-03-29 08:33:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290318963", "text": "Corresponds with this ticket: https://bugs.ruby-lang.org/issues/13383", "created_at": "2017-03-30 06:52:23", "user": 239637, "id": 290318963}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "- Fix error when running `make clean` just after `configure`\r\n- Suppress error message when rubyspec files isn't present", "labels": [], "number": 1563, "updated_at": "2017-03-29 09:25:47", "user": 69755, "closed_at": "2017-03-29 09:25:25", "id": 217806118, "title": "Fix `make clean` errors", "url": "https://api.github.com/repos/ruby/ruby/issues/1563", "created_at": "2017-03-29 08:48:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290025701", "text": "Looks good?", "created_at": "2017-03-29 08:51:10", "user": 29440, "id": 290025701}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290031013", "text": "https://bugs.ruby-lang.org/issues/13384", "created_at": "2017-03-29 09:12:39", "user": 69755, "id": 290031013}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290034184", "text": "Committed at r58207 https://github.com/ruby/ruby/commit/225435514ca588287ad4d06408deea9fabda4013", "created_at": "2017-03-29 09:25:23", "user": 29440, "id": 290034184}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related issue : https://bugs.ruby-lang.org/issues/12684\r\n\r\n## Context\r\n\r\nIn the current implementation, `Delegator#eql?` is delegated to the inner object.\r\nSo it is failed to compare with itself.\r\n\r\n```\r\n2.3.1 :001 > s = 'test'\r\n=> \"test\" \r\n2.3.1 :002 > d = SimpleDelegator.new(s)\r\n=> \"test\" \r\n2.3.1 :003 > d.eql?(d)\r\n=> false \r\n2.3.1 :004 > d == d\r\n=> true \r\n2.3.1 :005 > d.hash == d.hash\r\n=> true\r\n```\r\n\r\n```\r\n2.3.1 :001 > s = 'test'\r\n=> \"test\" \r\n2.3.1 :002 > a = [SimpleDelegator.new(s), SimpleDelegator.new(s)]\r\n=> [\"test\", \"test\"] \r\n2.3.1 :003 > a[0] == a[1]\r\n=> true \r\n2.3.1 :004 > a.uniq()\r\n=> [\"test\", \"test\"]\r\n2.3.1 :005 > a[0].hash == a[1].hash\r\n=> true\r\n```\r\n\r\n## This patch\r\n\r\nThis patch make `eql?` to be alias to `==`. And I added tests for its behavior.\r\n\r\n```\r\n2.5.0-dev :001 > s = 'test'\r\n=> \"test\" \r\n2.5.0-dev :002 > d = SimpleDelegator.new(s)\r\n=> \"test\" \r\n2.5.0-dev :003 > d.eql?(d)\r\n=> true\r\n2.5.0-dev :004 > d == d\r\n=> true \r\n2.5.0-dev :005 > d.hash == d.hash\r\n=> true\r\n```\r\n\r\n```\r\n2.5.0-dev :001 > s = 'test'\r\n=> \"test\" \r\n2.5.0-dev :002 > a = [SimpleDelegator.new(s), SimpleDelegator.new(s)]\r\n=> [\"test\", \"test\"] \r\n2.5.0-dev :003 > a[0] == a[1]\r\n=> true \r\n2.5.0-dev :004 > a.uniq()\r\n=> [\"test\"]\r\n2.5.0-dev :005 > a[0].hash == a[1].hash\r\n=> true\r\n```", "labels": [], "number": 1564, "updated_at": "2017-06-24 03:36:21", "user": 147051, "closed_at": "2017-06-24 03:36:21", "id": 217809095, "title": "Fix Delegator#eql? is missing", "url": "https://api.github.com/repos/ruby/ruby/issues/1564", "created_at": "2017-03-29 09:00:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "related: https://bugs.ruby-lang.org/issues/13231\r\n\r\nDateTime.strftime(\"%Z\") does not return time zone abbreviation, returns hour and minute offset from UTC with colon.\r\n\r\nBut it looks tough to change the spec of DateTime.strftime(\"%Z\").\r\nSo, for the moment, I changed the documentation to conform its implementation.", "labels": [], "number": 1565, "updated_at": "2017-05-09 18:57:29", "user": 19585777, "closed_at": "2017-05-09 18:57:29", "id": 217810390, "title": "Change date_strgtime documentation of %Z format", "url": "https://api.github.com/repos/ruby/ruby/issues/1565", "created_at": "2017-03-29 09:05:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290702428", "text": "I'd suggest\r\n\r\n```\r\n%Z - Equivalent to %:z (e.g. +09:00)\r\n```", "created_at": "2017-03-31 12:46:22", "user": 1112299, "id": 290702428}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found an issue [Date#rfc2822 and Time#rfc2822 don't return the same format](https://bugs.ruby-lang.org/issues/13101) .\r\n\r\nI think  it is more natural that outputs of `rfc2822` methods are same in `Time`, `Date`, `DateTime`.\r\n\r\nI used following sample code,\r\n\r\n```ruby\r\nrequire 'time'\r\n\r\ntime = Time.new(2017, 4, 7, 15, 23, 32)\r\ndate = Date.new(2017, 4, 7)\r\ndatetime = DateTime.new(2017, 4, 7, 15, 23, 32)\r\n\r\nputs time.rfc2822\r\nputs date.rfc2822\r\nputs time.utc.rfc2822\r\nputs datetime.rfc2822\r\n```\r\n\r\nBefore output is,\r\n\r\n```\r\n> make runruby\r\n./miniruby -I../ruby/lib -I. -I.ext/common  ../ruby/tool/runruby.rb --extout=.ext  -- --disable-gems ../ruby/test.rb\r\nFri, 07 Apr 2017 15:23:32 +0900\r\nFri, 7 Apr 2017 00:00:00 +0000\r\nFri, 07 Apr 2017 06:23:32 -0000\r\nFri, 7 Apr 2017 15:23:32 +0000\r\n```\r\n\r\nAfter this patch is applied,\r\n\r\n```\r\n> make runruby\r\n./miniruby -I../ruby/lib -I. -I.ext/common  ../ruby/tool/runruby.rb --extout=.ext  -- --disable-gems ../ruby/test.rb\r\nFri, 7 Apr 2017 15:23:32 +0900\r\nFri, 7 Apr 2017 00:00:00 +0000\r\nFri, 7 Apr 2017 06:23:32 +0000\r\nFri, 7 Apr 2017 15:23:32 +0000\r\n```", "labels": [], "number": 1566, "updated_at": "2018-02-23 03:07:33", "user": 1119006, "closed_at": "None", "id": 217814246, "title": "Match the behavior of rfc2822 methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1566", "created_at": "2017-03-29 09:20:06", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`Process::CLOCK_*` has no RDoc comment.\r\nhttps://docs.ruby-lang.org/en/trunk/Process.html\r\n\r\nThis PR add `Process::CLOCK_*` RDoc description.\r\n\r\nReleted ticket: https://bugs.ruby-lang.org/issues/13386\r\n\r\nBefore\r\n<img src=\"https://cloud.githubusercontent.com/assets/50920/24447477/17cff86c-14ac-11e7-97a3-708a6f9a6626.png\" width=\"300px\" />\r\n\r\nAfter\r\n<img src=\"https://cloud.githubusercontent.com/assets/50920/24447450/f79c3c68-14ab-11e7-8733-78c1bde5486c.png\" width=\"300px\" />\r\n", "labels": [], "number": 1567, "updated_at": "2017-03-29 09:33:39", "user": 50920, "closed_at": "2017-03-29 09:33:28", "id": 217814586, "title": "Improve Process::CLOCK_* RDoc", "url": "https://api.github.com/repos/ruby/ruby/issues/1567", "created_at": "2017-03-29 09:21:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290036268", "text": "Committed at r58208 https://github.com/ruby/ruby/commit/af4b7c8e862e8d70b0bba09fb4e19d962ff7bad4", "created_at": "2017-03-29 09:33:28", "user": 29440, "id": 290036268}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch fixes a bug which is reported as: https://bugs.ruby-lang.org/issues/12410\r\n\r\nBy this patch, it raises `ArgumentError` when setting invalid UID in my environment (macOS 10.12.3):\r\n\r\n```ruby\r\n> Process.uid = -1      # ArgumentError: can't find user for uid -1\r\n> Process.uid = -2      # => -2 (uid \"-2\" exists in macOS, named \"nobody\")\r\n> Process.uid = 99999   # ArgumentError: can't find user for uid 99999\r\n```\r\n\r\nNote that \"nobody\" user in macOS seems to have two UIDs 4294967294 and -2.\r\n\r\n```\r\n$ id -u nobody\r\n4294967294\r\n$ id -un 4294967294\r\nnobody\r\n$ id -un -- -2\r\nnobody\r\n```", "labels": [], "number": 1568, "updated_at": "2017-03-29 10:53:54", "user": 20384, "closed_at": "2017-03-29 09:59:42", "id": 217815388, "title": "Validate UID at `Process#.uid=` using getpwuid_r(3) (Bug #12410)", "url": "https://api.github.com/repos/ruby/ruby/issues/1568", "created_at": "2017-03-29 09:24:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290042890", "text": "As follows, it looks because BSD's id(1) handles the uid argument as 32bit integer.\r\n```sh\r\n% id -un -- -4294967296\r\nroot\r\n```\r\nTherefore this behavior is considered as unexpected behavior and Ruby shouldn't follow it.", "created_at": "2017-03-29 09:59:42", "user": 13423, "id": 290042890}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In my environments, `make test-all TESTS='../ruby/test/rubygems/test_gem.rb'` cause the following failure.\r\n\r\nThis error comes from:\r\n\r\n- the order of files\r\n- Stored variables in `$LOAD_PATH`\r\n    - Unexpected paths are added in `$LOAD_PATH` between L495 and L526.\r\n    - So, I stored the path in a local variable.\r\n\r\n\r\n## after\r\n\r\n```\r\n$ make test-all TESTS='../ruby/test/rubygems/test_gem.rb'\r\n\r\n....\r\n\r\n# Running tests:\r\n\r\nFinished tests in 2.146005s, 54.9859 tests/s, 108.1079 assertions/s.\r\n118 tests, 232 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\n## before\r\n\r\n```\r\n$ make test-all TESTS='../ruby/test/rubygems/test_gem.rb'\r\n\r\n....\r\n\r\n[ 6279/17079] TestGem#test_self_find_files_with_gemfile = 0.07 s\r\n  1) Failure:\r\nTestGem#test_self_find_files_with_gemfile [/Users/kazuaki-matsuo/Documents/github/hackaride/ruby/test/rubygems/test_gem.rb:526]:\r\n--- expected\r\n+++ actual\r\n@@ -1 +1 @@\r\n-\"/Users/kazu/Documents/github/hackaride/ruby/test/rubygems\"\r\n+\"/private/var/folders/45/rztq_0190zv17z9z32t6msp00000gp/T/test_rubygems_98901/gemhome/gems/sff-1/lib\"\r\n```", "labels": [], "number": 1569, "updated_at": "2017-03-29 10:24:39", "user": 5511591, "closed_at": "2017-03-29 10:19:57", "id": 217816209, "title": "fix tesself_find_files_with_gemfile since it depends on local environments", "url": "https://api.github.com/repos/ruby/ruby/issues/1569", "created_at": "2017-03-29 09:27:40", "comments": [{"reactions": {"+1": [6869903]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290038493", "text": "AFAIK test/rubygems is coming from rubygems repo (upstream). Could you check upstream repo and send a patch there?", "created_at": "2017-03-29 09:42:07", "user": 29440, "id": 290038493}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290043241", "text": "https://github.com/rubygems/rubygems/pull/1878", "created_at": "2017-03-29 10:01:14", "user": 6869903, "id": 290043241}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290048509", "text": "I will pick this after upstream fixed.\r\n\r\n", "created_at": "2017-03-29 10:24:39", "user": 12301, "id": 290048509}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix some warnings when compiling string.c.\r\n\r\nWhen editing string.c and execute `make run` command, show below warnings.\r\nFixed this warnings using showing note.\r\n\r\n```\r\n$ make run\r\n../ruby/string.c:6142:41: warning: '&&' within '||' [-Wlogical-op-parentheses]\r\n  ...(flags&ONIGENC_CASE_ASCII_ONLY) && (enc==rb_utf8_encoding() || rb_enc_mbmaxlen(enc)==1)\r\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n../ruby/string.c:6142:41: note: place parentheses around the '&&' expression to\r\n      silence this warning\r\n  ...(flags&ONIGENC_CASE_ASCII_ONLY) && (enc==rb_utf8_encoding() || rb_enc_mbmaxlen(enc)==1)\r\n                                     ^\r\n     (                                                                                      )\r\n../ruby/string.c:6208:41: warning: '&&' within '||' [-Wlogical-op-parentheses]\r\n  ...(flags&ONIGENC_CASE_ASCII_ONLY) && (enc==rb_utf8_encoding() || rb_enc_mbmaxlen(enc)==1)\r\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n../ruby/string.c:6208:41: note: place parentheses around the '&&' expression to\r\n      silence this warning\r\n  ...(flags&ONIGENC_CASE_ASCII_ONLY) && (enc==rb_utf8_encoding() || rb_enc_mbmaxlen(enc)==1)\r\n                                     ^\r\n     (                                                                                      )\r\n```", "labels": [], "number": 1570, "updated_at": "2017-03-29 12:10:25", "user": 6662768, "closed_at": "2017-03-29 11:34:27", "id": 217819470, "title": "Add parenthesis to fix warning point", "url": "https://api.github.com/repos/ruby/ruby/issues/1570", "created_at": "2017-03-29 09:39:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290039977", "text": "I reported issue:\r\nhttps://bugs.ruby-lang.org/issues/13387", "created_at": "2017-03-29 09:48:05", "user": 6662768, "id": 290039977}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290062918", "text": "Committed at r58211 https://github.com/ruby/ruby/commit/31a755e4f2f09a4925d7dfe427559d5452744119, thanks!", "created_at": "2017-03-29 11:34:27", "user": 29440, "id": 290062918}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Clarify the behaviour of IO.write without offset in write mode. There is an explanation as follows.\r\n\r\n>If offset is not given, the file is truncated. Otherwise, it is not truncated.\r\n\r\nBut when we use appending mode without offset, the file is not  truncated. Truncating files are occurred in write mode only. So it seems that we should just add the behaviour in write mode rather than adding behaviour in append mode.\r\n\r\n## investigation\r\n\r\n```\r\n>ruby -v\r\nruby 2.2.4p230 (2015-12-16 revision 53155) [x86_64-darwin15]\r\n\r\n>cat check_behaviour_of_io_write_in_a_mode\r\nFile.write('/tmp/io_write_without_offset_in_appeding_mode.txt', 'hello', mode: 'a')\r\nputs(File.open(\"/tmp/io_write_without_offset_in_appeding_mode.txt\").read)\r\n\r\nFile.write('/tmp/io_write_without_offset_in_appeding_mode.txt', 'hello', mode: 'a')\r\nputs(File.open(\"/tmp/io_write_without_offset_in_appeding_mode.txt\").read)\r\n\r\n> ruby check_behaviour_of_io_write_in_a_mode\r\nhello\r\nhellohello\r\n```\r\n\r\n## Redmine original ticket\r\n* https://bugs.ruby-lang.org/issues/11638", "labels": [], "number": 1571, "updated_at": "2017-10-21 15:17:55", "user": 5056295, "closed_at": "2017-10-21 15:17:55", "id": 217823651, "title": "Clarify the behavior of IO.write without offset in write mode", "url": "https://api.github.com/repos/ruby/ruby/issues/1571", "created_at": "2017-03-29 09:55:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These methods are for inspecting and modifying MRI's GC parameters. It may be\r\nuseful for realtime parameter tuning with GC.stat, user requests and so on.\r\n\r\nThis work is done by Tomohiro Moro (@slightair) and me (@makimoto).", "labels": [], "number": 1572, "updated_at": "2018-02-23 03:07:33", "user": 34493, "closed_at": "None", "id": 217824389, "title": "gc.c: Add GC.get_parameters and .set_parameters", "url": "https://api.github.com/repos/ruby/ruby/issues/1572", "created_at": "2017-03-29 09:58:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290043024", "text": "Please file an issue in bugs.ruby-lang.org, which is our canonical bug tracker and link this PR to the ticket, and vice versa.", "created_at": "2017-03-29 10:00:16", "user": 29440, "id": 290043024}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/290044252", "text": "@sorah done in https://bugs.ruby-lang.org/issues/13388 ", "created_at": "2017-03-29 10:05:16", "user": 34493, "id": 290044252}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"hooray": [211]}, "text": "https://bugs.ruby-lang.org/issues/13389", "labels": [], "number": 1573, "updated_at": "2017-07-25 00:40:40", "user": 9540855, "closed_at": "2017-07-25 00:40:40", "id": 217976477, "title": "ssl_socket_connect for pop", "url": "https://api.github.com/repos/ruby/ruby/issues/1573", "created_at": "2017-03-29 19:00:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/12746", "labels": [], "number": 1574, "updated_at": "2017-04-01 07:39:04", "user": 5009837, "closed_at": "2017-04-01 07:39:04", "id": 218404206, "title": "Alias Array's Push and Unshift with Append and Prepend", "url": "https://api.github.com/repos/ruby/ruby/issues/1574", "created_at": "2017-03-31 05:49:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [5091, 273688, 522155, 207902, 959128]}, "text": "Patch for https://bugs.ruby-lang.org/issues/13396\r\n\r\n`Net::HTTP` currently has no way to timeout whatsoever while sending the HTTP request, if the server accept the TCP connection but never reads inside the socket, `Net::HTTP` can stay blocked forever.\r\n\r\nThis patch introduced a new `write_timeout` configuration, and change `BufferedIO#write` to use non-blocking IO.\r\n\r\nAs for chunked requests, since they use `IO.copy_stream`, I couldn't find another solution than to wrap it inside a `Timeout.timeout` block.\r\n", "labels": [], "number": 1575, "updated_at": "2018-02-23 03:07:34", "user": 19192189, "closed_at": "None", "id": 219194487, "title": "Allow Net::HTTP to timeout if the remote server doesn't read the request fast enough", "url": "https://api.github.com/repos/ruby/ruby/issues/1575", "created_at": "2017-04-04 09:44:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/291459739", "text": "The build fails because of RubySpec, I've opened another PR here: https://github.com/ruby/spec/pull/415", "created_at": "2017-04-04 10:29:25", "user": 19192189, "id": 291459739}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302051981", "text": "@hsbt @sorah it would be great to know your opinion about HTTP write timeout.", "created_at": "2017-05-17 10:34:51", "user": 522155, "id": 302051981}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Time#to_i will be faster around 80%.\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   2.840000   0.000000   2.840000 (  2.847238)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   1.600000   0.000000   1.600000 (  1.598911)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report do\r\n    t = Time.now\r\n    20000000.times do\r\n      t.to_i\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13418", "labels": [], "number": 1576, "updated_at": "2017-10-14 12:38:14", "user": 199156, "closed_at": "2017-04-11 12:49:24", "id": 220589365, "title": "Improve Time#to_i performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1576", "created_at": "2017-04-10 09:39:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/293249587", "text": "Seems this PR was merged at https://github.com/ruby/ruby/commit/5d3fac0db9b2756d630abc9844a7a1450a8fdcba\r\n\r\nThanks.", "created_at": "2017-04-11 12:49:24", "user": 199156, "id": 293249587}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The documentation had the signature as\r\n\r\n```ruby\r\nrb_enc_str_new_literal(const char *ptr)\r\n```\r\n\r\nbut in the code it is effectively (i.e. through a macro)\r\n\r\n```ruby\r\nrb_enc_str_new_literal(const char *ptr, rb_encoding *enc)\r\n```", "labels": [], "number": 1577, "updated_at": "2017-04-10 15:27:37", "user": 954402, "closed_at": "2017-04-10 15:27:37", "id": 220644133, "title": "doc/extension.rdoc: Add missing enc arg to rb_enc_str_new_literal", "url": "https://api.github.com/repos/ruby/ruby/issues/1577", "created_at": "2017-04-10 13:27:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is the same code that RubyGems are using:\r\n\r\nhttps://github.com/rubygems/rubygems/commit/a1a5ab55cb1501cbfeee29131a56cfa2e763174f", "labels": [], "number": 1578, "updated_at": "2017-04-10 15:27:37", "user": 14406, "closed_at": "2017-04-10 15:27:37", "id": 220672436, "title": "Make .gemspec slimmer.", "url": "https://api.github.com/repos/ruby/ruby/issues/1578", "created_at": "2017-04-10 14:58:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This line should not be needed (at least) since #1578. The file list should be included in the original .gemspec anyway.", "labels": [], "number": 1579, "updated_at": "2017-04-11 12:21:04", "user": 14406, "closed_at": "2017-04-11 12:21:04", "id": 220696643, "title": "Spec#files are not used anymore.", "url": "https://api.github.com/repos/ruby/ruby/issues/1579", "created_at": "2017-04-10 16:18:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The idea is, that only files referenced by .gemspec should be installed. It doesn't make sense to install files which are not in the gem. This should help avoid issues such as https://bugs.ruby-lang.org/issues/13417", "labels": [], "number": 1580, "updated_at": "2017-04-11 12:34:34", "user": 14406, "closed_at": "2017-04-11 12:29:36", "id": 220920550, "title": "Install only files explicitly referenced by bundled gems.", "url": "https://api.github.com/repos/ruby/ruby/issues/1580", "created_at": "2017-04-11 11:28:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes AppVeyor in #1580", "labels": [], "number": 1581, "updated_at": "2017-04-11 12:19:50", "user": 14406, "closed_at": "2017-04-11 12:19:50", "id": 220923429, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1581", "created_at": "2017-04-11 11:41:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/293233303", "text": "@hsbt you probably want to merge this ;)", "created_at": "2017-04-11 11:50:57", "user": 14406, "id": 293233303}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/293242658", "text": "@voxik Exactly, Thanks!", "created_at": "2017-04-11 12:19:18", "user": 12301, "id": 293242658}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [225553]}, "text": "This patch will improve performance in implicit type conversion using #to_r\r\nAt least, Integer#quo will be faster around 40%.\r\nAnd, this will improve some Time methods which calling quov() internally.\r\n\r\n* Before\r\n```\r\n                   user     system      total        real\r\nInteger#quo    2.030000   0.010000   2.040000 (  2.031988)\r\nTime#subsec    2.410000   0.000000   2.410000 (  2.412172)\r\n```\r\n\r\n* After\r\n```\r\n                  user     system      total        real\r\nInteger#quo   1.460000   0.000000   1.460000 (  1.463345)\r\nTime#subsec   2.050000   0.010000   2.060000 (  2.056003)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report \"Integer#quo\" do\r\n    5000000.times do\r\n      42.quo(3)\r\n    end\r\n  end\r\n\r\n  x.report \"Time#subsec\" do\r\n    t = Time.now\r\n    4000000.times do\r\n      t.subsec\r\n    end\r\n  end\r\n\r\nend\r\n```", "labels": [], "number": 1582, "updated_at": "2017-10-14 12:37:58", "user": 199156, "closed_at": "2017-04-14 05:19:58", "id": 221253485, "title": "Improve performance of implicit type conversion using #to_r", "url": "https://api.github.com/repos/ruby/ruby/issues/1582", "created_at": "2017-04-12 12:57:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6322484]}, "text": "Array#<=> will be ~7.5 times faster with Fixnum elements.\r\n\r\n* Before\r\n```\r\n               user     system      total        real\r\nFixnum     2.020000   0.010000   2.030000 (  2.022351)\r\nString     2.290000   0.000000   2.290000 (  2.289221)\r\n```\r\n\r\n* After\r\n```\r\n               user     system      total        real\r\nFixnum     0.260000   0.000000   0.260000 (  0.266339)\r\nString     0.520000   0.000000   0.520000 (  0.529152)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  x.report \"Fixnum\" do\r\n    ary1 = Array.new(1000) { rand(1000) }\r\n    ary2 = ary1.dup\r\n\r\n    50000.times do\r\n      ary1 <=> ary2\r\n    end\r\n  end\r\n\r\n  x.report \"String\" do\r\n    ary1 = Array.new(1000) { rand(1000).to_s }\r\n    ary2 = ary1.dup\r\n\r\n    50000.times do\r\n      ary1 <=> ary2\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13436", "labels": [], "number": 1583, "updated_at": "2018-02-23 03:07:34", "user": 199156, "closed_at": "None", "id": 221820284, "title": "Improve performance of Array#<=> with Fixnum/String elements", "url": "https://api.github.com/repos/ruby/ruby/issues/1583", "created_at": "2017-04-14 14:31:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302722770", "text": "I don't know this affects real world application's performance.", "created_at": "2017-05-19 14:46:32", "user": 13423, "id": 302722770}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "* Before\r\n```\r\n                user     system      total        real\r\nsort_by     1.810000   0.010000   1.820000 (  1.824355)\r\nmin_by(n)   2.530000   0.000000   2.530000 (  2.534154)\r\nmin_by      2.450000   0.000000   2.450000 (  2.456396)\r\nmax_by(n)   3.240000   0.000000   3.240000 (  3.238680)\r\nmax_by      2.440000   0.010000   2.450000 (  2.444972)\r\nminmax_by   3.080000   0.000000   3.080000 (  3.083867)\r\n```\r\n\r\n* After\r\n```\r\n                user     system      total        real\r\nsort_by     1.100000   0.020000   1.120000 (  1.122831)\r\nmin_by(n)   1.650000   0.000000   1.650000 (  1.657220)\r\nmin_by      1.600000   0.010000   1.610000 (  1.625084)\r\nmax_by(n)   1.930000   0.010000   1.940000 (  1.953623)\r\nmax_by      1.630000   0.010000   1.640000 (  1.639236)\r\nminmax_by   1.760000   0.000000   1.760000 (  1.759928)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  enum = (1..1000).to_a.each\r\n\r\n  x.report \"sort_by\" do\r\n    10000.times do\r\n      enum.sort_by { |a| a }\r\n    end\r\n  end\r\n\r\n  x.report \"min_by(n)\" do\r\n    20000.times do\r\n      enum.min_by(2) { |a| a }\r\n    end\r\n  end\r\n\r\n  x.report \"min_by\" do\r\n    20000.times do\r\n      enum.min_by { |a| a }\r\n    end\r\n  end\r\n\r\n  x.report \"max_by(n)\" do\r\n    10000.times do\r\n      enum.max_by(2) { |a| a }\r\n    end\r\n  end\r\n\r\n  x.report \"max_by\" do\r\n    20000.times do\r\n      enum.max_by { |a| a }\r\n    end\r\n  end\r\n\r\n  x.report \"minmax_by\" do\r\n    20000.times do\r\n      enum.minmax_by { |a| a }\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13437", "labels": [], "number": 1584, "updated_at": "2017-10-14 12:37:38", "user": 199156, "closed_at": "2017-05-30 09:01:57", "id": 221849439, "title": "Improve performance of Enumerable#{sort_by,min_by,max_by,minmax_by}", "url": "https://api.github.com/repos/ruby/ruby/issues/1584", "created_at": "2017-04-14 17:10:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Range#{min,max} will be faster around 30%.\r\nThis is similar with https://github.com/ruby/ruby/pull/1584\r\n\r\n* Before\r\n```\r\n                user     system      total        real\r\nRange#min   1.270000   0.010000   1.280000 (  1.279449)\r\nRange#max   1.300000   0.000000   1.300000 (  1.310150)\r\n```\r\n\r\n* After\r\n```\r\n                user     system      total        real\r\nRange#min   0.940000   0.010000   0.950000 (  0.967873)\r\nRange#max   0.960000   0.010000   0.970000 (  0.983417)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n\r\n  x.report \"Range#min\" do\r\n    10000000.times do\r\n      (1..100).min\r\n    end\r\n  end\r\n\r\n  x.report \"Range#max\" do\r\n    10000000.times do\r\n      (1..100).max\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13443", "labels": [], "number": 1585, "updated_at": "2017-10-14 12:37:21", "user": 199156, "closed_at": "2017-05-30 02:58:27", "id": 222068656, "title": "Improve performance of Range#{min,max}", "url": "https://api.github.com/repos/ruby/ruby/issues/1585", "created_at": "2017-04-17 05:29:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Heading updated to be bold and sized.", "labels": [], "number": 1586, "updated_at": "2017-04-24 16:17:26", "user": 418747, "closed_at": "2017-04-18 11:56:38", "id": 222151809, "title": "fix heading", "url": "https://api.github.com/repos/ruby/ruby/issues/1586", "created_at": "2017-04-17 15:11:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See [Bug #13445](https://bugs.ruby-lang.org/issues/13445)", "labels": [], "number": 1587, "updated_at": "2017-04-18 03:39:27", "user": 15081176, "closed_at": "2017-04-18 03:39:18", "id": 222239270, "title": "MinGW - Adds GIT to path in vcs.rb when defined", "url": "https://api.github.com/repos/ruby/ruby/issues/1587", "created_at": "2017-04-17 21:39:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/294666920", "text": "@nobu Thank you.\r\n\r\nSee [commit 2103197](https://github.com/ruby/ruby/commit/2103197ccebe4f6efea1e4160d46471396507d6b)", "created_at": "2017-04-18 03:39:18", "user": 15081176, "id": 294666920}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14850816]}, "text": "This matches the documentation for `Enumerable::inject` and `Enumerable::reduce` which are also aliases.", "labels": [], "number": 1588, "updated_at": "2018-02-23 03:07:34", "user": 416575, "closed_at": "None", "id": 222243412, "title": "Indicate `find_all` and `select` methods are aliases.", "url": "https://api.github.com/repos/ruby/ruby/issues/1588", "created_at": "2017-04-17 21:59:01", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This is similar with https://github.com/ruby/ruby/pull/1552\r\nAt least, Array#eql? will be faster around 30% with following test code.\r\n\r\n* Before\r\n```\r\n       user     system      total        real\r\n   1.740000   0.000000   1.740000 (  1.738344)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   1.300000   0.000000   1.300000 (  1.303624)\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  ary1 = Array.new(1000) { rand(1000) }\r\n  ary2 = Array.new(1000) { rand(1000) }\r\n\r\n  x.report do\r\n    5000000.times do\r\n      ary1.eql?(ary2)\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13447", "labels": [], "number": 1589, "updated_at": "2017-10-14 12:37:02", "user": 199156, "closed_at": "2017-05-25 05:37:49", "id": 222330677, "title": "Improve performance of rb_eql()", "url": "https://api.github.com/repos/ruby/ruby/issues/1589", "created_at": "2017-04-18 07:48:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [14850816, 6508705, 306253, 7910967, 5131277, 2149035]}, "text": "\"set instance variable\" will be faster around 14%.\r\n\r\n## macOS 10.12 + clang-802.0.41\r\n* Before\r\n```\r\n       user     system      total        real\r\n   1.550000   0.000000   1.550000 (  1.555161)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   1.400000   0.000000   1.400000 (  1.398825)\r\n```\r\n\r\n## macOS 10.12 + gcc 6.3.0_1\r\n* Before\r\n```\r\n       user     system      total        real\r\n   1.660000   0.000000   1.660000 (  1.659721)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   1.450000   0.000000   1.450000 (  1.454589)\r\n```\r\n\r\n## Ubuntu 16.04 + gcc 5.4.0\r\n* Before\r\n```\r\n       user     system      total        real\r\n   0.890000   0.000000   0.890000 (  0.891217)\r\n```\r\n\r\n* After\r\n```\r\n       user     system      total        real\r\n   0.790000   0.000000   0.790000 (  0.783157)\r\n```\r\n\r\n## Test code\r\n```\r\nrequire 'benchmark'\r\n\r\nBenchmark.bmbm do |x|\r\n  x.report do\r\n    i = 0\r\n    while (i < 50000000)\r\n      @obj = 42\r\n      i+=1\r\n    end\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13482", "labels": [], "number": 1590, "updated_at": "2018-02-23 03:07:34", "user": 199156, "closed_at": "None", "id": 222614969, "title": "Improve performance of \"set instance variable\"", "url": "https://api.github.com/repos/ruby/ruby/issues/1590", "created_at": "2017-04-19 04:29:48", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The return value is implicit type casted from 'long double' to 'double', currently.\r\nThis causes a gcc warning like this:\r\n\r\n```\r\nIn file included from\r\nC:\\Ruby24-x64\\include\\ruby-2.4.0/ruby/defines.h:243:0,\r\n                 from C:\\Ruby24-x64\\include\\ruby-2.4.0/ruby/ruby.h:36,\r\n\t\t                  from C:\\Ruby24-x64\\include\\ruby-2.4.0/ruby.h:33,\r\n\t\t\t\t                   from conftest.c:1:\r\n\t\t\t\t\t\t   C:\\Ruby24-x64\\include\\ruby-2.4.0/ruby/win32.h:\r\n\t\t\t\t\t\t   In function 'rb_w32_pow':\r\n\t\t\t\t\t\t   C:\\Ruby24-x64\\include\\ruby-2.4.0/ruby/win32.h:786:12:\r\n\t\t\t\t\t\t   warning: conversion to 'double' from 'long double' may alter its value [-Wfloat-conversion]\r\n\t\t\t\t\t\t        return powl(x, y);\r\n\t\t\t\t\t\t\t        ^~~~~~~~~~\r\n```\r\n\r\nThis is fixed by the attached explicit type cast.\r\n\r\nMoreover when CFLAGS is set to '-Wconversion', it prevents the compiler from\r\nbuilding. This is the case at the nokogiri gem.\r\n\r\nThe original issue arose at RubyInstaller2: https://github.com/oneclick/rubyinstaller2/commit/576a0eb70aa9348b366c3ecfe83c67811b7bcb9b", "labels": [], "number": 1591, "updated_at": "2017-04-21 00:12:44", "user": 176234, "closed_at": "2017-04-21 00:12:44", "id": 223019660, "title": "Fix a warning in ruby/win32.h which can cause failures with mkmf", "url": "https://api.github.com/repos/ruby/ruby/issues/1591", "created_at": "2017-04-20 10:24:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The changelogs are almost 7 MBytes large, so that the ri or rdoc output is even bigger. Therefore the changelogs take almost half of the size of the entire output. However the changelog is not really valuable as part of ri or rdoc, IMHO. It may also slows down searches in rdoc.\r\n\r\nThis issue arose originally at [RubyInstaller2](https://github.com/oneclick/rubyinstaller2) and is patched there: https://github.com/oneclick/rubyinstaller2/commit/ca359aa3d827a3cbba6c715dcaeca0b03b717d62", "labels": [], "number": 1592, "updated_at": "2017-09-02 07:00:34", "user": 176234, "closed_at": "2017-09-02 07:00:34", "id": 223026272, "title": "Exclude Changelog files from documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1592", "created_at": "2017-04-20 10:50:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326726997", "text": "Merged in commit https://github.com/ruby/ruby/commit/99d64640c4d2f20aabe6115f95dab1a63d6f143f", "created_at": "2017-09-02 06:59:59", "user": 176234, "id": 326726997}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In reference to Feature [#13108](https://bugs.ruby-lang.org/issues/13108), I explicitly documented `Enumerable#sum` for Integer Ranges as it is a different and significant difference. ", "labels": [], "number": 1593, "updated_at": "2018-02-23 03:07:35", "user": 9064062, "closed_at": "None", "id": 223263042, "title": "Add explicit documentation for Integer Range Summation", "url": "https://api.github.com/repos/ruby/ruby/issues/1593", "created_at": "2017-04-21 03:13:42", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Typo in RDoc\r\n\r\n![screenshot_4_21_17__5_48_pm](https://cloud.githubusercontent.com/assets/30538/25274688/79498e34-26bb-11e7-9707-ad3dd995dbfb.png)\r\n\r\n\r\n\"after after having fed the entire plaintext...\" is changed to\r\n\"after having fed the entire plaintext...\"", "labels": [], "number": 1594, "updated_at": "2017-04-21 11:32:53", "user": 30538, "closed_at": "2017-04-21 11:32:53", "id": 223349702, "title": "Fix documentation for OpenSSL::Cipher#final", "url": "https://api.github.com/repos/ruby/ruby/issues/1594", "created_at": "2017-04-21 10:55:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/296167572", "text": "Applied at https://github.com/ruby/openssl/commit/e3929aa5481b2d5bedfdfef75865b2ea49938852. Thanks!", "created_at": "2017-04-21 11:32:53", "user": 1033740, "id": 296167572}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change allows MinGW builds to pass the newly added (58400) test\r\n`TestSocket_BasicSocket#test_read_write_nonblock`", "labels": [], "number": 1595, "updated_at": "2017-04-21 21:03:19", "user": 15081176, "closed_at": "2017-04-21 21:03:15", "id": 223413887, "title": "MinGW test_basicsocket update", "url": "https://api.github.com/repos/ruby/ruby/issues/1595", "created_at": "2017-04-21 15:14:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/296231933", "text": "All tests failed due to problems with libffi-3.2.1.tar.gz  at  ftp://sourceware.org/pub/libffi/", "created_at": "2017-04-21 16:02:39", "user": 15081176, "id": 296231933}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/296305124", "text": "A better fix by Eric at [e79ecc5](https://github.com/ruby/ruby/commit/e79ecc540f267b338056414b85edeb4a10e8ab4c) or 58437.", "created_at": "2017-04-21 21:03:15", "user": 15081176, "id": 296305124}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [225553, 378214]}, "text": "Some Time methods will call internal quov() function.\r\nquov() calls Rational#quo -> f_muldiv() -> i_gcd() in rational.c\r\ni_gcd() will calculate GCD using Euclidean's Algorithm and it lose a long time in modulo method (ie \"x = y % x;\").\r\n\r\nThis patch will replace i_gcd() with Stein's algorithm which is faster algorithm for GCD.\r\n(https://en.wikipedia.org/wiki/Binary_GCD_algorithm)\r\n\r\nSome Rational methods also call i_gcd().\r\n\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n         Time#subsec      2.017M (± 8.6%) i/s -     10.052M in   5.020331s\r\n              Time#-      4.246M (± 1.1%) i/s -     21.259M in   5.006968s\r\n          Time#round    402.944k (±11.0%) i/s -      1.996M in   5.014424s\r\n           Time#to_f      5.627M (± 1.3%) i/s -     28.195M in   5.011366s\r\n           Time#to_r      1.927M (± 8.2%) i/s -      9.590M in   5.009198s\r\n          Rational#+      3.894M (± 1.0%) i/s -     19.545M in   5.019923s\r\n          Rational#-      3.811M (± 1.0%) i/s -     19.125M in   5.018842s\r\n          Rational#*      5.148M (± 1.1%) i/s -     25.858M in   5.023586s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n         Time#subsec      2.648M (± 3.0%) i/s -     13.257M in   5.010600s\r\n              Time#-      4.265M (± 1.4%) i/s -     21.372M in   5.012480s\r\n          Time#round    393.309k (±12.5%) i/s -      1.934M in   5.000319s\r\n           Time#to_f      5.638M (± 2.0%) i/s -     28.223M in   5.008422s\r\n           Time#to_r      2.313M (± 5.2%) i/s -     11.568M in   5.015379s\r\n          Rational#+      4.366M (± 1.6%) i/s -     21.846M in   5.004487s\r\n          Rational#-      4.443M (± 1.2%) i/s -     22.255M in   5.009509s\r\n          Rational#*      5.776M (± 1.1%) i/s -     28.888M in   5.002322s\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Time#subsec\" do |t|\r\n    time = Time.now\r\n    t.times { time.subsec }\r\n  end\r\n\r\n  x.report \"Time#-\" do |t|\r\n    time1 = Time.now\r\n    time2 = Time.now\r\n    t.times { time1 - time2 }\r\n  end\r\n\r\n  x.report \"Time#round\" do |t|\r\n    time = Time.now\r\n    t.times { time.round }\r\n  end\r\n\r\n  x.report \"Time#to_f\" do |t|\r\n    time = Time.now\r\n    t.times { time.to_f }\r\n  end\r\n\r\n  x.report \"Time#to_r\" do |t|\r\n    time = Time.now\r\n    t.times { time.to_r }\r\n  end\r\n\r\n  x.report \"Rational#+\" do |t|\r\n    rat1 = 1/2r\r\n    rat2 = 1/3r\r\n    t.times { rat1 + rat2 }\r\n  end\r\n\r\n  x.report \"Rational#-\" do |t|\r\n    rat1 = 1/3r\r\n    rat2 = 1/2r\r\n    t.times { rat1 - rat2 }\r\n  end\r\n\r\n  x.report \"Rational#*\" do |t|\r\n    rat1 = 1/3r\r\n    rat2 = 1/2r\r\n    t.times { rat1 * rat2 }\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13503", "labels": [], "number": 1596, "updated_at": "2017-10-14 12:36:51", "user": 199156, "closed_at": "2017-05-27 07:19:40", "id": 223742239, "title": "Improve performance of some Time & Rational methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1596", "created_at": "2017-04-24 08:35:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/298018227", "text": "@tadd what do you think?", "created_at": "2017-04-28 14:47:38", "user": 15377, "id": 298018227}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "At the internal calculation in Complex methods,\r\nit will just call Ruby #{+,-,*,/} methods via rb_funcall().\r\n\r\nThis patch will provide the optimization path for calculation\r\nusing #{+,-,/,*} methods for internal Fixnum objects.\r\n\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n           Complex#+      5.186M (± 4.9%) i/s -     25.937M in   5.013851s\r\n           Complex#-      5.209M (± 5.9%) i/s -     26.038M in   5.017972s\r\n           Complex#*      3.211M (± 5.2%) i/s -     16.170M in   5.051605s\r\n           Complex#/    537.251k (± 3.9%) i/s -      2.691M in   5.017513s\r\n          Complex#**      1.540M (± 3.0%) i/s -      7.726M in   5.019918s\r\n        Complex#abs2      7.050M (± 7.9%) i/s -     35.047M in   5.009324s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n           Complex#+      7.265M (± 4.6%) i/s -     36.341M in   5.013803s\r\n           Complex#-      7.310M (± 4.5%) i/s -     36.540M in   5.009521s\r\n           Complex#*      6.402M (± 4.0%) i/s -     32.060M in   5.016835s\r\n           Complex#/    541.564k (± 3.3%) i/s -      2.744M in   5.072620s\r\n          Complex#**      1.490M (± 4.0%) i/s -      7.506M in   5.046460s\r\n        Complex#abs2     17.799M (± 6.6%) i/s -     88.688M in   5.007732s\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  c1 = Complex(2, 3)\r\n  c2 = Complex(2, 3)\r\n\r\n  x.report \"Complex#+\" do |t|\r\n    t.times { c1 + c2 }\r\n  end\r\n\r\n  x.report \"Complex#-\" do |t|\r\n    t.times { c1 - c2 }\r\n  end\r\n\r\n  x.report \"Complex#*\" do |t|\r\n    t.times { c1 * c2 }\r\n  end\r\n\r\n  x.report \"Complex#/\" do |t|\r\n    t.times { c1 / c2 }\r\n  end\r\n\r\n  x.report \"Complex#**\" do |t|\r\n    t.times { c1 ** c2 }\r\n  end\r\n\r\n  x.report \"Complex#abs2\" do |t|\r\n    t.times { c1.abs2 }\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13506", "labels": [], "number": 1597, "updated_at": "2018-02-23 03:07:35", "user": 199156, "closed_at": "None", "id": 224024721, "title": "Improve performance of Complex#{+,-,*,/,**,abs2}", "url": "https://api.github.com/repos/ruby/ruby/issues/1597", "created_at": "2017-04-25 05:23:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302726463", "text": "I don't know complex's performance improvement is worth increasing code complexity.", "created_at": "2017-05-19 14:59:55", "user": 13423, "id": 302726463}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [225553]}, "text": "…internally\r\n\r\nSome Complex methods call Numeric#real? at f_real_p() using rb_funcall().\r\nThis patch will provide optimization in f_real_p() when Integer/Float is given as internal objects.\r\n\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n           Complex#+      5.226M (± 3.9%) i/s -     26.145M in   5.011147s\r\n           Complex#-      5.274M (± 4.4%) i/s -     26.321M in   5.001267s\r\n           Complex#*      3.217M (± 4.7%) i/s -     16.092M in   5.013429s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n           Complex#+      6.925M (± 5.4%) i/s -     34.559M in   5.006583s\r\n           Complex#-      7.124M (± 4.8%) i/s -     35.652M in   5.017364s\r\n           Complex#*      3.880M (± 4.1%) i/s -     19.363M in   5.000170s\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  c1 = Complex(2, 3)\r\n  c2 = Complex(2, 3)\r\n\r\n  x.report \"Complex#+\" do |t|\r\n    t.times { c1 + c2 }\r\n  end\r\n\r\n  x.report \"Complex#-\" do |t|\r\n    t.times { c1 - c2 }\r\n  end\r\n\r\n  x.report \"Complex#*\" do |t|\r\n    t.times { c1 * c2 }\r\n  end\r\n\r\nend\r\n```\r\n", "labels": [], "number": 1598, "updated_at": "2018-02-23 03:07:35", "user": 199156, "closed_at": "None", "id": 224044046, "title": "Improve performance of some Complex methods where call Numeric#real? …", "url": "https://api.github.com/repos/ruby/ruby/issues/1598", "created_at": "2017-04-25 07:19:27", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The sentence below from the `IO#popen` documentation contains a typo:\r\n\r\n> The array can contains a hash at first for environments and a hash at last for options similar to `spawn`.\r\n\r\nThis PR fixes this by replacing `contains` with `contain`.", "labels": [], "number": 1599, "updated_at": "2017-05-26 11:48:43", "user": 8338057, "closed_at": "2017-05-01 02:43:15", "id": 224186444, "title": "Fix typo in documentation [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1599", "created_at": "2017-04-25 15:51:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* st.c (rb_hash_bulk_insert): new API to bulk insert entries\r\n  into a hash. Given arguments are first inserted into the\r\n  table at once, then reindexed. This is faster than inserting\r\n  things using rb_hash_aset() one by one.\r\n\r\n  This arrangement (rb_ prefixed function placed in st.c) is\r\n  unavoidable because it both touches table internal and write\r\n  barrier at once.\r\n\r\n* internal.h: delcare the new function.\r\n\r\n* hash.c (rb_hash_s_create): use the new function.\r\n\r\n* vm.c (core_hash_merge): ditto.\r\n\r\n* insns.def (newhash): ditto.\r\n\r\n```\r\n-----------------------------------------------------------\r\nbenchmark results:\r\nminimum results in each 7 measurements.\r\nExecution time (sec)\r\nname    before  after\r\nloop_whileloop2  0.136  0.137\r\nvm2_bighash*     1.249  0.623\r\n\r\nSpeedup ratio: compare with the result of `before' (greater is better)\r\nname    after\r\nloop_whileloop2 0.996\r\nvm2_bighash*    2.004\r\n```", "labels": [], "number": 1600, "updated_at": "2017-04-27 04:41:00", "user": 15377, "closed_at": "2017-04-27 04:21:52", "id": 224330304, "title": "refactor newhash (revision 58463 another try)", "url": "https://api.github.com/repos/ruby/ruby/issues/1600", "created_at": "2017-04-26 03:03:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/297323288", "text": "@vnmakarov I would like to merge this hash bulk insert feature.  Can you take a look at st.c diff?", "created_at": "2017-04-26 09:45:00", "user": 15377, "id": 297323288}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/297556957", "text": "Shyouhei, thank you for asking my opinion.  About half year ago I thought about this too to improve vm2_bighash and overall hash tables benchmark score.  To be honest I did not expect such big improvement of vm2_bighash which you reported here.\r\n\r\nThat time my approach would be simply using st_insert2 with providing its inlining.  Basically it would  be analog of your rb_hash_bulk_insert with st_insert2 (more accurately a static inline function which could be used in st_insert2 too) inside rb_hash_bulk loop.  Your implementation is probably faster as it has more specialized code although I don't know how much faster it is.\r\n\r\nI have no time and hardly will have time to work on hash tables more.  So I am really glad that you implemented it.\r\n\r\nI've read your code.  It looks OK for me.  If you need my support to put your changes into st.c.  I gladly give it to you.\r\n", "created_at": "2017-04-26 22:14:45", "user": 9855671, "id": 297556957}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/297590519", "text": "Thank you for reviewing.  Will merge this.\r\n\r\nFYI, although reverted due to random bugs, I tried using st_insert before (cf: https://github.com/ruby/ruby/commit/4ee09d914db903cb6f4cf50c4bb03c163694b465).  It was a bit slower than what is proposed in this pull request (1.8 times faster then versus 2.0 times faster here).", "created_at": "2017-04-27 02:02:23", "user": 15377, "id": 297590519}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is related to https://github.com/ruby/ruby/pull/1596\r\n\r\nSome Time methods will call internal quov() function and\r\nquov() calls Numeric#quo -> Rational#quo -> ...\r\n\r\nThis patch will add rb_numeric_quo() as internal C API to call Numeric#quo directly.\r\nAnd this will use rb_numeric_quo() instead of rb_funcall() for Numeric#quo to internal objects.\r\n\r\nTime#- will be faster around 15%.\r\n\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n         Time#subsec      2.029M (± 8.6%) i/s -     10.078M in   5.003036s\r\n              Time#-      4.225M (± 2.1%) i/s -     21.130M in   5.003600s\r\n           Time#to_f      5.580M (± 2.1%) i/s -     27.955M in   5.011881s\r\n           Time#to_r      1.862M (± 9.8%) i/s -      9.253M in   5.016749s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n         Time#subsec      2.196M (±10.7%) i/s -     10.879M in   5.010285s\r\n              Time#-      4.991M (± 2.2%) i/s -     24.966M in   5.005041s\r\n           Time#to_f      6.809M (±13.5%) i/s -     32.204M in   5.005536s\r\n           Time#to_r      1.980M (± 9.6%) i/s -      9.854M in   5.020879s\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Time#subsec\" do |t|\r\n    time = Time.now\r\n    t.times { time.subsec }\r\n  end\r\n\r\n  x.report \"Time#-\" do |t|\r\n    time1 = Time.now\r\n    time2 = Time.now\r\n    t.times { time1 - time2 }\r\n  end\r\n\r\n  x.report \"Time#to_f\" do |t|\r\n    time = Time.now\r\n    t.times { time.to_f }\r\n  end\r\n\r\n  x.report \"Time#to_r\" do |t|\r\n    time = Time.now\r\n    t.times { time.to_r }\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13519", "labels": [], "number": 1601, "updated_at": "2017-10-14 12:36:37", "user": 199156, "closed_at": "2017-05-27 05:41:47", "id": 224980758, "title": "Improve performance of some Time methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1601", "created_at": "2017-04-28 05:05:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "use SOURCE_DATE_EPOCH instead of current time in created.rid top line\r\nto enable reproducible builds of ruby docs\r\n\r\nSee https://reproducible-builds.org/ for why this is good\r\nand https://reproducible-builds.org/specs/source-date-epoch/\r\nfor the definition of this variable.", "labels": [], "number": 1602, "updated_at": "2018-03-07 12:26:42", "user": 637990, "closed_at": "2017-12-14 04:54:07", "id": 226539030, "title": "created.rid: use SOURCE_DATE_EPOCH", "url": "https://api.github.com/repos/ruby/ruby/issues/1602", "created_at": "2017-05-05 10:56:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351608661", "text": "@bmwiedemann Can you file this issue to the upstream repository (https://github.com/ruby/rdoc)?\r\n\r\nThanks.", "created_at": "2017-12-14 04:54:07", "user": 12301, "id": 351608661}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351736603", "text": "filed https://github.com/ruby/rdoc/pull/570", "created_at": "2017-12-14 15:05:26", "user": 637990, "id": 351736603}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "to enable reproducible builds of rdoc\r\n\r\nNormally, 0 would be the preferred value to indicate \"no date\"\r\nbut that value is handled differently in Zlib::GzipWriter\r\nto put in the current time", "labels": [], "number": 1603, "updated_at": "2018-03-07 12:26:34", "user": 637990, "closed_at": "2017-12-14 05:47:16", "id": 226559718, "title": "rdoc: do not store current timestamps in gz headers", "url": "https://api.github.com/repos/ruby/ruby/issues/1603", "created_at": "2017-05-05 12:36:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351615174", "text": "@bmwiedemann Can you file this issue to the upstream repository (https://github.com/ruby/rdoc)?", "created_at": "2017-12-14 05:47:16", "user": 12301, "id": 351615174}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351663202", "text": "filed https://github.com/ruby/rdoc/pull/569", "created_at": "2017-12-14 09:57:04", "user": 637990, "id": 351663202}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1604, "updated_at": "2017-05-10 19:10:16", "user": 2768870, "closed_at": "2017-05-10 19:04:09", "id": 226571323, "title": "Fix typos in URI comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1604", "created_at": "2017-05-05 13:21:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/300582381", "text": "Thanks!", "created_at": "2017-05-10 19:05:35", "user": 1112299, "id": 300582381}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Before:\r\n\r\n```ruby\r\nGem::Version.correct?(\"5.1\") # => 0\r\nGem::Version.correct?(\"an incorrect version\") # => nil\r\n```\r\n\r\nAfter:\r\n\r\n```ruby\r\nGem::Version.correct?(\"5.1\") # => true\r\nGem::Version.correct?(\"an incorrect version\") # => false\r\n```", "labels": [], "number": 1605, "updated_at": "2017-10-21 15:05:29", "user": 5486854, "closed_at": "2017-10-21 15:05:29", "id": 226830940, "title": "Modify the return value of Gem::Version.correct?", "url": "https://api.github.com/repos/ruby/ruby/issues/1605", "created_at": "2017-05-07 05:47:11", "comments": [{"reactions": {"heart": [12301, 3435373]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/299689943", "text": "Oh, I understand. I'll send this patch to the upstream, rubygems/rubygems.", "created_at": "2017-05-07 08:19:45", "user": 5486854, "id": 299689943}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338408841", "text": "@ttanimichi Thanks to your pull request.\r\n\r\nOur current trunk branch has already merged rubygems master. It contains  https://github.com/rubygems/rubygems/pull/1916 .", "created_at": "2017-10-21 15:05:29", "user": 12301, "id": 338408841}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[ci skip]", "labels": [], "number": 1606, "updated_at": "2017-05-12 05:29:17", "user": 935310, "closed_at": "2017-05-11 18:57:31", "id": 226831187, "title": "[DOC] Symbol#match/#match? support pos argument", "url": "https://api.github.com/repos/ruby/ruby/issues/1606", "created_at": "2017-05-07 05:53:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/300886834", "text": "Thanks!", "created_at": "2017-05-11 19:04:46", "user": 1112299, "id": 300886834}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [5213, 12301], "+1": [1575923]}, "text": "## Summary:\r\n\r\nThis pull request significantly reduces the number of allocations made when parsing CSV files using the `csv` standard library. The performance improvement is particularly marked when the CSV data is quoted.\r\n\r\nThree related changes were made to the so-called \"hot path\", that I've left (for now) as separate commits on this branch.\r\n\r\nThere are no regressions in the test suite:\r\n\r\n```\r\n$ make test-all TESTS=csv/ts_all.rb\r\n[...]\r\n# Running tests:\r\n\r\nFinished tests in 1.079541s, 311.2434 tests/s, 7875.5693 assertions/s.\r\n336 tests, 8502 assertions, 0 failures, 0 errors, 0 skips\r\n\r\nruby -v: ruby 2.5.0dev (2017-05-07 trunk 58601) [x86_64-darwin16]\r\n```\r\n\r\n## Benchmarking:\r\n\r\nI have benchmarked both IPS and object allocations, using CSV data with 100 rows and 100 columns, where each cell has the value `\"cell, value\"`.\r\n\r\nFull scripts and output can be found in this Gist:\r\nhttps://gist.github.com/joshpencheon/e9a930c4cd88d3abbd280d76228b02f6\r\n\r\n**Allocations:**\r\n\r\nUsing @SamSaffron's `memory_profiler`:\r\n\r\n```\r\n                Without Patch                    |                  With Patch\r\n-------------------------------------------------+-------------------------------------------------\r\n                                                 |\r\nGit revision: fd6853a2292a4d                     | Git revision: 17ba724422f0f\r\n                                                 |\r\nTotal allocated: 55349270 bytes (906503 objects) | Total allocated: 22561210 bytes (406624 objects)\r\nTotal retained:  0 bytes (0 objects)             | Total retained:  0 bytes (0 objects)\r\n                                                 |\r\nallocated memory by class                        | allocated memory by class\r\n-----------------------------------              | -----------------------------------\r\n  47548090  String                               |   18753090  String\r\n   7454320  Array                                |    3456320  Array\r\n    294000  MatchData                            |     294000  MatchData\r\n     37340  Regexp                               |      42280  Regexp\r\n      9600  Hash                                 |       9600  Hash\r\n      2240  CSV                                  |       2240  CSV\r\n      1600  Proc                                 |       1600  Proc\r\n      1280  Method                               |       1280  Method\r\n       800  StringIO                             |        800  StringIO\r\n                                                 |\r\nallocated objects by class                       | allocated objects by class\r\n-----------------------------------              | -----------------------------------\r\n    802813  String                               |     402874  String\r\n    102480  Array                                |       2530  Array\r\n      1050  MatchData                            |       1050  MatchData\r\n        70  Regexp                               |         80  Regexp\r\n        30  Hash                                 |         30  Hash\r\n        20  Method                               |         20  Method\r\n        20  Proc                                 |         20  Proc\r\n        10  CSV                                  |         10  CSV\r\n        10  StringIO                             |         10  StringIO\r\n```\r\n\r\n**Iterations per second:**\r\n\r\n```\r\nCalculating:\r\n  without patch    24.304  (± 8.2%) i/s -     1.450k in  60.017254s\r\n     with patch    38.916  (± 2.6%) i/s -     2.334k in  60.066885s\r\n   \r\nComparison:\r\n     with patch    38.916 i/s\r\n  without patch    24.304 i/s - 1.60x slower\r\n```\r\n\r\nSo for the non-trivial sample data generated, performance with the patch show a >50% improvement, along with ~60% reduction in allocations.\r\n\r\nWith unquoted CSV data, allocations are still avoided per cell, but the improvements are not as marked.\r\n\r\nPlease let me know if there's anything else I can do.\r\n\r\nThanks,\r\nJosh\r\n", "labels": [], "number": 1607, "updated_at": "2017-05-18 02:43:15", "user": 30904, "closed_at": "2017-05-18 02:43:15", "id": 226875727, "title": "Significant CSV parsing performance improvement", "url": "https://api.github.com/repos/ruby/ruby/issues/1607", "created_at": "2017-05-07 17:00:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/299758930", "text": "You can also see https://bugs.ruby-lang.org/issues/12373", "created_at": "2017-05-08 02:35:41", "user": 935310, "id": 299758930}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/299910104", "text": "Thanks @ksss. @jeg2, is this something I can help with? I think this patch goes a little further than the linked ruby-lang issue, which hasn't seen any progress for a year.", "created_at": "2017-05-08 16:00:16", "user": 30904, "id": 299910104}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301714483", "text": "@joshpencheon Thank you for your patch. I'm ok to merge your pull request.\r\n\r\nBut ksss's patch was the first time, I will review your patch after applying it first. ", "created_at": "2017-05-16 08:37:55", "user": 12301, "id": 301714483}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301729370", "text": "Of course @hsbt - I think that the commit https://github.com/ruby/ruby/pull/1607/commits/e8d67b6bde in this PR will complement the work of @ksss.", "created_at": "2017-05-16 09:38:36", "user": 30904, "id": 301729370}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301953349", "text": "@joshpencheon Got it. I'll mention you after merging @ksss 's patch.", "created_at": "2017-05-17 00:43:06", "user": 12301, "id": 301953349}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301980169", "text": "@joneslee85 @hsbt Thank you for advancing about this issue.\r\nI replied to https://bugs.ruby-lang.org/issues/12373", "created_at": "2017-05-17 04:10:11", "user": 935310, "id": 301980169}, {"reactions": {"hooray": [30904]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302024599", "text": "@joshpencheon Can you rebase and re-consider this pull request from https://github.com/ruby/ruby/commit/15cb9817a234d8b67ae412c8eabda91d46a8ef2c ?\r\n\r\nThank you.", "created_at": "2017-05-17 08:38:35", "user": 12301, "id": 302024599}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302042724", "text": "Thanks @hsbt , I've rebased and updated the PR. This will avoid the allocation of temporary arrays, and a new `#join`'d string per cell.", "created_at": "2017-05-17 09:52:18", "user": 30904, "id": 302042724}, {"reactions": {"heart": [30904]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302282421", "text": "@joshpencheon I confirmed to benchmark results with your patch. It seems ok to me.\r\n\r\n#### benchmark-ips results\r\n\r\n```\r\ntrunk:\r\nWarming up --------------------------------------\r\n                         4.000  i/100ms\r\nCalculating -------------------------------------\r\n                         39.661  (±10.1%) i/s -      2.352k in  60.034781s\r\nwith-patch:\r\nWarming up --------------------------------------\r\n                         5.000  i/100ms\r\nCalculating -------------------------------------\r\n                         60.521  (± 9.9%) i/s -      3.595k in  60.047157s\r\n```\r\n\r\n#### memory_profiler resuts\r\n\r\n```\r\ntrunk:\r\nallocated memory by class\r\n-----------------------------------\r\n  35588490  String\r\n   7454320  Array\r\n    294000  MatchData\r\n     37340  Regexp\r\n     11840  Hash\r\n      2400  CSV\r\n      1600  Proc\r\n      1280  Method\r\n       800  StringIO\r\nwith-patch:\r\nallocated memory by class\r\n-----------------------------------\r\n  18788490  String\r\n   3454320  Array\r\n    294000  MatchData\r\n     37340  Regexp\r\n     11840  Hash\r\n      2400  CSV\r\n      1600  Proc\r\n      1280  Method\r\n       800  StringIO\r\n```\r\n", "created_at": "2017-05-18 02:21:09", "user": 12301, "id": 302282421}], "assignees": [12301, 12301], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1608, "updated_at": "2017-05-08 23:13:35", "user": 3138447, "closed_at": "2017-05-08 14:15:48", "id": 226937184, "title": "Translate @j comment for opt_send_without_block", "url": "https://api.github.com/repos/ruby/ruby/issues/1608", "created_at": "2017-05-08 04:51:51", "comments": [{"reactions": {"laugh": [3138447]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/300016590", "text": "@k0kubun Thanks always!", "created_at": "2017-05-08 23:13:35", "user": 12301, "id": 300016590}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "…object\r\n\r\nrb_ary_modify() has the codes for shared Array object.\r\nIn here, it has condition branch for shared / non shared Array object and\r\nit can use rb_ary_modify_check() which is smaller function than rb_ary_modify()\r\nfor non shared object.\r\n\r\nrb_ary_modify_check() will be expand as inline function.\r\nIf it will compile with GCC, Array#<< will be faster around 8%.\r\n\r\n## Clang 802.0.42\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n            Array#<<      9.353M (± 1.7%) i/s -     46.787M in   5.004123s\r\n          Array#push      7.702M (± 1.1%) i/s -     38.577M in   5.009338s\r\n     Array#values_at      6.133M (± 1.9%) i/s -     30.699M in   5.007772s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n            Array#<<      9.458M (± 2.0%) i/s -     47.357M in   5.009069s\r\n          Array#push      7.921M (± 1.8%) i/s -     39.665M in   5.009151s\r\n     Array#values_at      6.377M (± 2.3%) i/s -     31.881M in   5.001888s\r\n```\r\n\r\n* Result\r\n```\r\nArray#<<        -> 1.2% faster\r\nArray#push      -> 2.8% faster\r\nArray#values_at -> 3.9% faster\r\n```\r\n\r\n## GCC 7.1.0\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n            Array#<<     10.497M (± 1.1%) i/s -     52.665M in   5.017601s\r\n          Array#push      8.527M (± 1.6%) i/s -     42.777M in   5.018003s\r\n     Array#values_at      7.621M (± 1.7%) i/s -     38.152M in   5.007910s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n            Array#<<     11.403M (± 1.3%) i/s -     57.028M in   5.001849s\r\n          Array#push      8.924M (± 1.3%) i/s -     44.609M in   4.999940s\r\n     Array#values_at      8.291M (± 1.4%) i/s -     41.487M in   5.004727s\r\n```\r\n\r\n* Result\r\n```\r\nArray#<<        -> 8.3% faster\r\nArray#push      -> 4.3% faster\r\nArray#values_at -> 8.7% faster\r\n```\r\n\r\n## Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n\r\n  x.report \"Array#<<\" do |i|\r\n    i.times { [1,2] << 3 }\r\n  end\r\n\r\n  x.report \"Array#push\" do |i|\r\n    i.times { [1,2].push(3) }\r\n  end\r\n\r\n  x.report \"Array#values_at\" do |i|\r\n    ary = [1, 2, 3, 4, 5]\r\n    i.times { ary.values_at(0, 2, 4) }\r\n  end\r\n\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13553", "labels": [], "number": 1609, "updated_at": "2017-10-14 12:36:25", "user": 199156, "closed_at": "2017-05-24 06:58:01", "id": 227551361, "title": " Improve performance in where push the element into non shared Array …", "url": "https://api.github.com/repos/ruby/ruby/issues/1609", "created_at": "2017-05-10 02:36:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Formatting updates, including double spaces, capitalization of \"Ruby\" and the referencing of OS X as masOS.", "labels": [], "number": 1610, "updated_at": "2017-10-21 15:03:23", "user": 25190522, "closed_at": "2017-10-21 15:03:23", "id": 228013297, "title": "formatting updates", "url": "https://api.github.com/repos/ruby/ruby/issues/1610", "created_at": "2017-05-11 14:35:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\"locale encoding\" is misleading since it doesn't mean Encoding.find(\"locale\")\r\nbut the encoding used to interpret the script file. It's therefore better to\r\ncall it \"script encoding\" as in the paragraphs above.", "labels": [], "number": 1611, "updated_at": "2018-02-23 03:07:35", "user": 176234, "closed_at": "None", "id": 228084406, "title": "Better wording for __ENCODING__", "url": "https://api.github.com/repos/ruby/ruby/issues/1611", "created_at": "2017-05-11 18:41:25", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"hooray": [935310]}, "text": "Using `opt_ltlt` instruction instead of `opt_send_without_block` for `#concat`, we can bypass method call and use `rb_str_concat` directly. So I changed ERB to generate `#<<`.\r\n\r\n## Benchmark\r\nWith [trunk ruby](https://github.com/ruby/ruby/commit/b7ff46b7a4690974e98d090e3e4de89ef73e533a) and [compiled result of bm_app_erb.rb's erb template](https://github.com/ruby/ruby/blob/v2_4_1/benchmark/bm_app_erb.rb#L18-L26) like this,\r\n\r\n```rb\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  title = \"hello world!\"\r\n  content = \"hello world!\\n\" * 10\r\n\r\n  x.report('concat') do\r\n    _erbout = String.new; _erbout.concat \"<html>\\n  <head> \"\r\n    ; _erbout.concat(( title ).to_s); _erbout.concat \" </head>\\n  <body>\\n    <h1> \"\r\n    ; _erbout.concat(( title ).to_s); _erbout.concat \" </h1>\\n    <p>\\n      \"\r\n    ; _erbout.concat(( content ).to_s); _erbout.concat \"\\n    </p>\\n  </body>\\n</html>\\n\"\r\n    ; _erbout.force_encoding(__ENCODING__)\r\n  end\r\n  x.report('<<') do\r\n    _erbout = String.new; _erbout.<< \"<html>\\n  <head> \"\r\n    ; _erbout.<<(( title ).to_s); _erbout.<< \" </head>\\n  <body>\\n    <h1> \"\r\n    ; _erbout.<<(( title ).to_s); _erbout.<< \" </h1>\\n    <p>\\n      \"\r\n    ; _erbout.<<(( content ).to_s); _erbout.<< \"\\n    </p>\\n  </body>\\n</html>\\n\"\r\n    ; _erbout.force_encoding(__ENCODING__)\r\n  end\r\n  x.compare!\r\nend\r\n```\r\n\r\nthe rendering performance benchmark result is:\r\n\r\n```\r\nCalculating -------------------------------------\r\n              concat    301.067k (± 9.1%) i/s -      1.510M in   5.056566s\r\n                  <<    533.025k (±11.3%) i/s -      2.654M in   5.042675s\r\n\r\nComparison:\r\n                  <<:   533024.6 i/s\r\n              concat:   301066.7 i/s - 1.77x  slower\r\n```", "labels": [], "number": 1612, "updated_at": "2017-05-15 13:44:50", "user": 3138447, "closed_at": "2017-05-15 13:39:06", "id": 228463837, "title": "Optimize ERB string concat using opt_ltlt", "url": "https://api.github.com/repos/ruby/ruby/issues/1612", "created_at": "2017-05-13 10:16:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\r\n\r\nI propose Hash#choice method.\r\n\r\nIt pick up key and value pairs in Hash like a below code.\r\n\r\n```ruby\r\n{ :a => 1, 2 => \"2\", \"c\" => true }.choice(:a, 2) # => { :a => 1, 2 => \"2\" }\r\n{ :a => 1, 2 => \"2\", \"c\" => true }.choice(\"c\", 10000) # => { \"c\" => true, 10000 => nil }\r\n```\r\n\r\nThis method is useful when Hash have many keys, but programer need few key's.\r\n\r\nFor instance, it pick up personal data in ActiveRecord model's data, and migrate to new device.\r\n\r\n```ruby\r\nfeature_phone_user = User.find(params[:src_user_id])\r\nprofile = feature_phone_user.attributes.choice(*%i[nickname email sex birthday prefecture])\r\nsmart_phone_user   = User.new\r\nsmart_phone_user.attributes = profile\r\n```\r\n\r\nIn other case, it pick up latest log from http request parameter.\r\n\r\n```ruby\r\ncondition = params.to_h.choice(\"user_id\", \"service_id\")\r\nlatest_payment_log = PaymentLog.find_by(condition).last\r\n```\r\n\r\nIf this method exist, I guess that many cases change to comfortable just a little.\r\n\r\nPlease think about it.\r\n", "labels": [], "number": 1613, "updated_at": "2018-02-23 03:07:35", "user": 854188, "closed_at": "None", "id": 228479009, "title": "Implement Hash#choice method.", "url": "https://api.github.com/repos/ruby/ruby/issues/1613", "created_at": "2017-05-13 15:06:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301254442", "text": "Please file a feature request at https://bugs.ruby-lang.org", "created_at": "2017-05-13 15:14:28", "user": 16700, "id": 301254442}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Split String#<< and String#concat docs to reflect single and multiple\r\narguments", "labels": [], "number": 1614, "updated_at": "2017-10-21 23:50:33", "user": 15081176, "closed_at": "2017-10-21 23:50:33", "id": 228484470, "title": "[DOC] Split String#<< and String#concat [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1614", "created_at": "2017-05-13 16:36:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301263048", "text": "I'm not sure... why is splitting this up (and duplicating the docs) an improvement?", "created_at": "2017-05-13 17:40:34", "user": 1112299, "id": 301263048}, {"reactions": {"+1": [848483, 1112299]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/301266426", "text": "@stomar\r\n\r\nI believe that call-seq's and doc's should only be shared when one of two conditions are met:\r\n\r\n1. The methods call the same function\r\n2. One (or more) methods are aliased to another\r\n\r\n`String#concat` and `String#<<` fail both. I'm aware that `concat` simply splits its arguments then calls the `<<` function.\r\n\r\nThe only exception to this would be some cases of read/write attributes.\r\n\r\nAdditionally, consideration should always be given to non-native english speakers, and combining methods that are not identical in a call-seq listing might be confusing.  I made small changes that removed any indication that `<<` could take more than one argument in the example.\r\n\r\nAs an aside, the doc site I have is based on a plugin for YARD.  Much of the code is for parsing RubyDoc directives so that it parses Ruby Core and Std-Lib correctly.  Hence, I've reviewed a lot of code doc, and I don't recall instances similar to `concat` and `<<`.  They are similar, but yet different enough...", "created_at": "2017-05-13 18:35:10", "user": 15081176, "id": 301266426}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The #yield_self Enumerator instance always has a #count of `1`.\r\nThis provides a lazy #size of `1` to match the count instead of `nil`.", "labels": [], "number": 1615, "updated_at": "2017-05-14 11:45:51", "user": 378214, "closed_at": "2017-05-14 11:45:51", "id": 228522988, "title": "object.c: use a sized enumerator with #yield_self", "url": "https://api.github.com/repos/ruby/ruby/issues/1615", "created_at": "2017-05-14 06:53:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Current Test fails on Windows/MinGW.  The assert shells out to ruby, on windows, ENV['PATH'] must still include ruby/bin.  Also, both variables are now normally arrays, so tests check split/enumerate.", "labels": [], "number": 1616, "updated_at": "2017-09-13 18:56:14", "user": 15081176, "closed_at": "2017-09-13 17:08:20", "id": 228751311, "title": "Windows - TestRubyOptions#test_search - append to paths instead of replacing", "url": "https://api.github.com/repos/ruby/ruby/issues/1616", "created_at": "2017-05-15 15:23:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [15377]}, "text": "Usage: `./configure --enable-gcov && make && make exam && make gcov`", "labels": [], "number": 1617, "updated_at": "2017-05-21 03:51:54", "user": 21557, "closed_at": "2017-05-21 03:51:44", "id": 229374655, "title": "Add coverage measurement with gcov", "url": "https://api.github.com/repos/ruby/ruby/issues/1617", "created_at": "2017-05-17 14:36:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302111168", "text": "@nobu Could you review this?  I'm unsure about build scripts.  I don't know the difference of `cflags` and `CFLAGS`.", "created_at": "2017-05-17 14:37:42", "user": 21557, "id": 302111168}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302476280", "text": "@nobu thank you!  I applied your comments.  I'll commit this later.", "created_at": "2017-05-18 17:09:15", "user": 21557, "id": 302476280}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302913367", "text": "Committed at r58817.", "created_at": "2017-05-21 03:51:44", "user": 21557, "id": 302913367}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My proposal for https://bugs.ruby-lang.org/issues/8631.", "labels": [], "number": 1618, "updated_at": "2017-05-19 16:30:18", "user": 3138447, "closed_at": "2017-05-19 16:30:14", "id": 229679495, "title": "erb.rb: Add locals option to set local variables to `ERB#result` method", "url": "https://api.github.com/repos/ruby/ruby/issues/1618", "created_at": "2017-05-18 13:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302458566", "text": "This will modify the locals inside the passed binding. That seems to be a surprising side-effect; if the caller intended to do that, they could've just used `local_variable_set` for themselves... accepting the hash here suggests that the extra variables will only be seen inside the template.\r\n\r\n```ruby\r\nx = 1\r\nERB.new(\"<%= x %>\").result(binding, locals: { x: 5 }) # => \"5\" ✅\r\nx # => 5 😯\r\n```", "created_at": "2017-05-18 16:14:20", "user": 1034, "id": 302458566}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302470334", "text": "> This will modify the locals inside the passed binding. That seems to be a surprising side-effect; if the caller intended to do that, they could've just used local_variable_set for themselves...\r\n\r\nGood catch. I'm thinking about how to fix this... ~~I want to do the same thing as https://github.com/ruby/ruby/pull/1618/commits/ce213d2c64f4b43551cd5ec4f56d22c80dd81299 with proper API. (Of course this commit doesn't work for some cases...)~~\r\n\r\nI managed to find a way to implement it https://github.com/ruby/ruby/pull/1618/commits/ed1c1e520eec6cb96f1eae88bef2fa4ac54a3e6c.", "created_at": "2017-05-18 16:56:40", "user": 3138447, "id": 302470334}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302741996", "text": "I wrote my feeling for this on https://bugs.ruby-lang.org/issues/8631 and want your comments.", "created_at": "2017-05-19 15:57:15", "user": 3138447, "id": 302741996}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302750187", "text": "Closing in favor of https://github.com/ruby/ruby/pull/1623.", "created_at": "2017-05-19 16:30:14", "user": 3138447, "id": 302750187}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Explicitly says that the methods return a new hash rather than just\r\nstating it return a new \"something\" we don't know about.", "labels": [], "number": 1619, "updated_at": "2017-05-21 07:14:00", "user": 25862, "closed_at": "2017-05-21 07:14:00", "id": 229699179, "title": "Add missing word in transform_values method descriptions", "url": "https://api.github.com/repos/ruby/ruby/issues/1619", "created_at": "2017-05-18 14:47:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "key? doesn't propagate the value up the stack so it has less stack / memory\r\nimpact.", "labels": [], "number": 1620, "updated_at": "2017-05-31 18:10:24", "user": 5470, "closed_at": "2017-05-24 21:59:15", "id": 229822145, "title": "Use #key? to test for Set#include?", "url": "https://api.github.com/repos/ruby/ruby/issues/1620", "created_at": "2017-05-18 22:26:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302566269", "text": "What do you mean by \"stack / memory impact\"?\r\nA value is a value.", "created_at": "2017-05-18 23:13:48", "user": 16700, "id": 302566269}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302569916", "text": "Ok so I looked again and I can't promise this will deliver any performance / memory wins - it avoids moving some values around on the stack which may or may not be optimized out or be negligible. It would simplify the semantics of the calls, though.", "created_at": "2017-05-18 23:38:29", "user": 5470, "id": 302569916}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302575240", "text": "Do you have numbers?  The line is the result of optimization. ([Misc #10754](https://bugs.ruby-lang.org/issues/10754), 709e0ecb)", "created_at": "2017-05-19 00:17:07", "user": 10236, "id": 302575240}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302582660", "text": "Sounds good, I'll run some numbers. Thanks for the context!", "created_at": "2017-05-19 01:16:00", "user": 5470, "id": 302582660}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303469567", "text": "> it avoids moving some values around on the stack which may or may not be optimized out or be negligible\r\n\r\nWhat values? (The value of `@hash[o]` is either `true` or `false`, same for `@hash.key?(o)`.)", "created_at": "2017-05-23 17:11:55", "user": 1112299, "id": 303469567}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303863724", "text": "I'm just talking about the `st_lookup` data propagation. Anyway this is not the win I thought it might be, so I'm happy to close.", "created_at": "2017-05-24 21:59:15", "user": 5470, "id": 303863724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a stylistic question, but it seems the simpler construct is\r\npreferable here. E.g. there is no multiple-value testing.", "labels": [], "number": 1621, "updated_at": "2017-05-19 08:59:51", "user": 5470, "closed_at": "2017-05-19 07:40:35", "id": 229822174, "title": "Prefer if/elsif over valueless case in set.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1621", "created_at": "2017-05-18 22:27:01", "comments": [{"reactions": {"+1": [5470, 11493]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/302632596", "text": "As a maintainer, I don't accept these kinds of style changes unless there's a clear and obvious benefit beyond a matter of taste.  This is a historical project and there are various styles of code written by various people all mixed in one source tree here, so I'd rather try not to ask for style wars.  Thanks for wanting to contribute, though!", "created_at": "2017-05-19 07:40:35", "user": 10236, "id": 302632596}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The st_is_member DEFINE has simpler semantics, for more readable code.", "labels": [], "number": 1622, "updated_at": "2018-02-23 03:07:36", "user": 5470, "closed_at": "None", "id": 229827966, "title": "Prefer st_is_member over st_lookup with 0", "url": "https://api.github.com/repos/ruby/ruby/issues/1622", "created_at": "2017-05-18 23:01:43", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "My second proposal for https://bugs.ruby-lang.org/issues/8631 instead of https://github.com/ruby/ruby/pull/1618.", "labels": [], "number": 1623, "updated_at": "2017-05-25 15:39:39", "user": 3138447, "closed_at": "2017-05-25 15:39:25", "id": 230025731, "title": "erb.rb: Add ERB#result_with_hash", "url": "https://api.github.com/repos/ruby/ruby/issues/1623", "created_at": "2017-05-19 16:29:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1624, "updated_at": "2017-05-20 14:55:51", "user": 3138447, "closed_at": "2017-05-20 14:55:49", "id": 230155906, "title": "Try to remove SimpleScanner from ERB", "url": "https://api.github.com/repos/ruby/ruby/issues/1624", "created_at": "2017-05-20 14:12:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The crash in ./miniruby looks like that:\r\n\r\n```\r\n  Program received signal SIGSEGV, Segmentation fault.\r\n  mark_locations_array (objspace=0x6000000000045db0, x=0x0, n=864692227966763116) at gc.c:3297\r\n  3297            v = *x;\r\n  (gdb) bt\r\n  #0  mark_locations_array (objspace=0x6000000000045db0, x=0x0, n=864692227966763116) at gc.c:3297\r\n  #1  0x400000000014a040 in gc_mark_locations (objspace=0x6000000000045db0, start=0x0, end=0x6000080000000368) at gc.c:3310\r\n  #2  0x400000000014b3a0 in mark_current_machine_context (objspace=0x6000000000045db0, th=0x60000000000455b0) at gc.c:3500\r\n  #3  0x400000000014dfe0 in gc_mark_roots (objspace=0x6000000000045db0, full_mark=0, categoryp=0x0) at gc.c:4105\r\n  #4  0x400000000014e6b0 in gc_marks_body (objspace=0x6000000000045db0, full_mark=0) at gc.c:4164\r\n  #5  0x400000000014f260 in gc_marks (objspace=0x6000000000045db0, full_mark=0) at gc.c:4526\r\n  #6  0x40000000001525c0 in garbage_collect_body (objspace=0x6000000000045db0, full_mark=0, immediate_sweep=0, reason=256) at gc.c:5024\r\n  #7  0x400000000013c010 in heap_prepare_freepage (objspace=0x6000000000045db0, heap=0x6000000000045dc0) at gc.c:1219\r\n  #8  0x400000000013c140 in heap_get_freeobj_from_next_freepage (objspace=0x6000000000045db0, heap=0x6000000000045dc0) at gc.c:1237\r\n  #9  0x400000000013c360 in heap_get_freeobj (objspace=0x6000000000045db0, heap=0x6000000000045dc0) at gc.c:1259\r\n  #10 0x400000000013c950 in newobj_of (klass=0, flags=40, v1=0, v2=0, v3=0) at gc.c:1303\r\n  #11 0x400000000013ccc0 in rb_newobj_of (klass=0, flags=40) at gc.c:1356\r\n  #12 0x4000000000163740 in hash_alloc (klass=0) at hash.c:289\r\n  #13 0x4000000000163860 in rb_hash_new () at hash.c:309\r\n  #14 0x400000000050e420 in Init_BareVM () at vm.c:2822\r\n  #15 0x40000000000f6b60 in ruby_setup () at eval.c:54\r\n  #16 0x40000000000f6f50 in ruby_init () at eval.c:75\r\n  #17 0x400000000001b010 in main (argc=9, argv=0x60000fffffffb1d8) at main.c:35\r\n```\r\n\r\nThe problem here is in call\r\n\r\n```\r\n    gc_mark_locations (objspace=0x6000000000045db0, start=0x0, end=0x6000080000000368) at gc.c:3310\r\n```\r\n\r\nwhere 'start' (native_main_thread.register_stack_start)\r\nis supposed to be stack start but it's not initialized.\r\n\r\nThe initialization of 'native_main_thread.register_stack_start'\r\nis supposed to be done in 'ruby_init_stack()'.\r\n\r\nBut code under 'MAINSTACKADDR_AVAILABLE' exits early.\r\nThe fix is to move 'register_stack_start' earlier.\r\n\r\nTested on the following branches: ruby-2.1, ruby-2.4, trunk.\r\n\r\nReported-by: Émeric Maschino\r\nBug: https://bugs.gentoo.org/561780\r\nSigned-off-by: Sergei Trofimovich <slyfox@gentoo.org>", "labels": [], "number": 1625, "updated_at": "2017-07-10 07:03:26", "user": 226650, "closed_at": "2017-07-10 06:58:46", "id": 230157968, "title": "ia64: fix crash on register stack mark/sweep pass", "url": "https://api.github.com/repos/ruby/ruby/issues/1625", "created_at": "2017-05-20 14:47:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311180426", "text": "Ping. Picking @tenderlove as the possible reviewer :)", "created_at": "2017-06-26 21:00:05", "user": 226650, "id": 311180426}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311253806", "text": "@trofi Nice to meet you, I am TAKANO Mitsuhiro a.k.a. @takano32 of Ruby committer, but now I have not been able to contribute much because I do not have much time. I am an architect maintainer of IA64.\r\nApproximately, your argument is right and I think that it is probably LGTM with that modification.\r\nI will merge this Pull Request contents for trunk if I can verify with some time, such as whether the problem is actually solved.\r\nThank you for a nice Pull Request. 👍 ", "created_at": "2017-06-27 05:03:24", "user": 16088, "id": 311253806}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/314022541", "text": "@trofi I've been checking in trunk.\r\nsee also. https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/59307/diff/thread_pthread.c", "created_at": "2017-07-10 07:03:26", "user": 16088, "id": 314022541}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch will add pre-allocation in string interpolation.\r\nBy this, unnecessary capacity resizing is avoided.\r\n\r\nFor small strings, optimized `rb_str_resurrect` operation is faster, so pre-allocation is done only when concatenated strings are large.\r\n`MIN_PRE_ALLOC_SIZE` was decided by experimenting with my local machine (x86_64-apple-darwin 16.5.0, Apple LLVM version 8.1.0 (clang - 802.0.42)).\r\n\r\nString interpolation will be faster around **72%** when large string is created.\r\n\r\n* Before\r\n\r\n```\r\nCalculating -------------------------------------\r\nLarge string interpolation\r\n                          1.276M (± 5.9%) i/s -      6.358M in   5.002022s\r\nSmall string interpolation\r\n                          5.156M (± 5.5%) i/s -     25.728M in   5.005731s\r\n```\r\n\r\n* After\r\n\r\n```\r\nCalculating -------------------------------------\r\nLarge string interpolation\r\n                          2.201M (± 5.8%) i/s -     11.063M in   5.043724s   <- 72% faster!!\r\nSmall string interpolation\r\n                          5.192M (± 5.7%) i/s -     25.971M in   5.020516s   <- no degradation\r\n```\r\n\r\n* Test code\r\n\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Large string interpolation\" do |t|\r\n    a = \"Hellooooooooooooooooooooooooooooooooooooooooooooooooooo\"\r\n    b = \"Wooooooooooooooooooooooooooooooooooooooooooooooooooorld\"\r\n\r\n    t.times do\r\n      \"#{a}, #{b}!\"\r\n    end\r\n  end\r\n\r\n  x.report \"Small string interpolation\" do |t|\r\n    a = \"Hello\"\r\n    b = \"World\"\r\n\r\n    t.times do\r\n      \"#{a}, #{b}!\"\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nIssue\r\nhttps://bugs.ruby-lang.org/issues/13587", "labels": [], "number": 1626, "updated_at": "2017-10-21 23:22:04", "user": 2713881, "closed_at": "2017-10-21 23:22:04", "id": 230229118, "title": "Improve performance of string interpolation", "url": "https://api.github.com/repos/ruby/ruby/issues/1626", "created_at": "2017-05-21 15:43:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/318208196", "text": "@nobu I fixed coding style! 😄 ", "created_at": "2017-07-26 23:03:18", "user": 2713881, "id": 318208196}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/328252649", "text": "@rhenium ping", "created_at": "2017-09-09 04:04:38", "user": 2713881, "id": 328252649}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1627, "updated_at": "2017-05-23 15:39:31", "user": 15081176, "closed_at": "2017-05-23 14:48:46", "id": 230722045, "title": "spec/rubyspec/core/time/zone_spec - Windows does not support ENV['TZ']", "url": "https://api.github.com/repos/ruby/ruby/issues/1627", "created_at": "2017-05-23 14:12:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For better understanding, the block documentation should use `x` and `y`\r\n(not `a` and `b`) to match the example given bellow.", "labels": [], "number": 1628, "updated_at": "2017-06-05 12:15:08", "user": 1685896, "closed_at": "2017-06-03 20:17:54", "id": 230784621, "title": "Fix docs for Array#sort and Array#sort! [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1628", "created_at": "2017-05-23 17:22:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303473162", "text": "Can you make `call-seq`, text, and example all match?\r\n\r\nPreviously `call-seq` and text matched, with your current change text and example match.", "created_at": "2017-05-23 17:25:08", "user": 9831, "id": 303473162}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303474656", "text": "@drbrain Sorry, it should all match now. Thanks for catching it.", "created_at": "2017-05-23 17:30:41", "user": 1685896, "id": 303474656}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/303490070", "text": "Using `|a, b|` is very common for similar methods in various classes. So I think it would be definitely better (and simpler) to change x, y in the example to a, b.\r\n\r\n(Personally, I don't think the example necessarily has to match the call-seq and text---in Ruby the block variables can be named arbitrarily of course---but it wouldn't hurt if they do.)", "created_at": "2017-05-23 18:27:20", "user": 1112299, "id": 303490070}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305991193", "text": "@repinel If you want to provide an updated commit I'll apply it.", "created_at": "2017-06-03 17:57:34", "user": 1112299, "id": 305991193}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305993081", "text": "@stomar What do you think of change?", "created_at": "2017-06-03 18:29:55", "user": 1685896, "id": 305993081}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305999237", "text": "Thanks for the update; the variables where switched, though, but I fixed it in the commit.", "created_at": "2017-06-03 20:22:13", "user": 1112299, "id": 305999237}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/306173457", "text": "Thanks", "created_at": "2017-06-05 12:15:06", "user": 1685896, "id": 306173457}], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[As observed](https://github.com/ruby/ruby/pull/1423#issuecomment-303816294) by @MosesMendoza, my previous PR #1423 was misapplied in https://github.com/ruby/ruby/commit/8feb9779182bd4285f3881029fe850dac188c1ac. This corrects the extra OleInitialize call.\r\n\r\nSigned-off-by: Matt Wrock <matt@mattwrock.com>", "labels": [], "number": 1629, "updated_at": "2017-05-26 09:50:19", "user": 655165, "closed_at": "2017-05-26 09:50:19", "id": 231231040, "title": "remove extra call to OleInitialize", "url": "https://api.github.com/repos/ruby/ruby/issues/1629", "created_at": "2017-05-25 03:30:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304093297", "text": "thanks @mwrock!  👍 ", "created_at": "2017-05-25 18:54:37", "user": 819133, "id": 304093297}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [13203]}, "text": "Just like https://github.com/sonots/ruby/blob/c433a1822d24cc026ff453dbcca569ba38f3f07a/lib/uri/common.rb#L84-L86", "labels": [], "number": 1630, "updated_at": "2017-05-26 06:44:02", "user": 2290461, "closed_at": "2017-05-26 06:43:00", "id": 231268992, "title": "[DOC] Add rdoc to describe URI.unescape is obsolete", "url": "https://api.github.com/repos/ruby/ruby/issues/1630", "created_at": "2017-05-25 08:04:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch optimizes performance drawbacks introduced in https://github.com/ruby/ruby/commit/9387ff7315b498a6e7c8ab2a4b1582fd6c717524.\r\n\r\n## Benchmark (i7-4790K @ 4.00GH, x86_64 GNU/Linux)\r\n\r\n```rb\r\nBenchmark.ips do |x|\r\n  x.report(\"String#concat (1)\") { \"a\".concat(\"b\") }\r\n  x.report(\"String#concat (2)\") { \"a\".concat(\"b\", \"c\") }\r\nend\r\n```\r\n\r\n### Before\r\n\r\n```\r\nCalculating -------------------------------------\r\n   String#concat (1)      4.458M (± 8.9%) i/s -     22.298M in   5.058084s\r\n   String#concat (2)      3.660M (± 5.6%) i/s -     18.314M in   5.020527s\r\n```\r\n\r\n### After\r\n\r\n```\r\nCalculating -------------------------------------\r\n   String#concat (1)      6.448M (± 5.2%) i/s -     32.215M in   5.010833s\r\n   String#concat (2)      3.633M (± 9.0%) i/s -     18.056M in   5.022603s\r\n```\r\n\r\n\"String#concat (1)\" became 1.44x faster without \"String#concat (2)\" regression.", "labels": [], "number": 1631, "updated_at": "2017-05-25 11:15:46", "user": 3138447, "closed_at": "2017-05-25 11:15:36", "id": 231302634, "title": "string.c: Optimize String#concat when argc is 1", "url": "https://api.github.com/repos/ruby/ruby/issues/1631", "created_at": "2017-05-25 10:33:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix https://bugs.ruby-lang.org/issues/12694", "labels": [], "number": 1632, "updated_at": "2017-06-21 07:45:31", "user": 2290461, "closed_at": "2017-06-21 07:44:28", "id": 231324670, "title": "string.c: Add String#delete_prefix to remove leading substr", "url": "https://api.github.com/repos/ruby/ruby/issues/1632", "created_at": "2017-05-25 12:22:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/308944405", "text": "I want to get reviewed before merging. @nobu could you review my codes?", "created_at": "2017-06-16 06:27:38", "user": 2290461, "id": 308944405}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/308951146", "text": "```\r\n$ ./ruby -v -e 'class NilClass; alias to_str to_s; end' -e '\"abc\".delete_prefix(nil)'\r\nruby 2.5.0dev (2017-06-16 trunk 59100) [x86_64-darwin15]\r\nlast_commit=string.c: add String#delete_prefix and String#delete_prefix! to remove leading substr [Feature #12694]\r\n-e:2: [BUG] Segmentation fault at 0x0000000000000008\r\n```\r\n\r\n`rb_str_start_with` converts arguments to `String`, you should reuse the string in these methods.", "created_at": "2017-06-16 07:08:15", "user": 16700, "id": 308951146}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309014665", "text": "@knu `String#delete_suffix` can be achieved by `String#chomp`. But, do you think we should have it for symmetry with `delete_prefix`? I am neutral on this.", "created_at": "2017-06-16 12:33:00", "user": 2290461, "id": 309014665}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309014751", "text": "Thank you for reviews. I will try to fix.", "created_at": "2017-06-16 12:33:32", "user": 2290461, "id": 309014751}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309020638", "text": "Yeah, so the names really matter in Ruby and we need some research for compelling reasons to pick particular names.  What do other languages and libraries say about the names for those operations?", "created_at": "2017-06-16 13:03:01", "user": 10236, "id": 309020638}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309025016", "text": "I've researched other languages at https://bugs.ruby-lang.org/issues/12694#note-12, and golang has similar methods named `TrimPrefix` and `TrimSuffix`.\r\nBecause matz decided the name as `delete_prefix` https://bugs.ruby-lang.org/issues/12694#note-18, I think the suffix version should become `delete_suffix`.\r\nMy concern is whether we should add the suffix version although we can do similar operations with `String#chomp`. So, you think we should add it? I can submit to bugs.ruby-lang.org.\r\n", "created_at": "2017-06-16 13:23:00", "user": 2290461, "id": 309025016}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309038070", "text": "Aww my bad, I wasn't following that.  Never mind, better discussed there.", "created_at": "2017-06-16 14:18:16", "user": 10236, "id": 309038070}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309054965", "text": "@rhenium @nobu Fixed for argument of a broken string, and of non-string object. Could you review again?", "created_at": "2017-06-16 15:21:03", "user": 2290461, "id": 309054965}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309160342", "text": "@nobu thank you for reviews. fixed.", "created_at": "2017-06-16 23:19:04", "user": 2290461, "id": 309160342}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309256430", "text": "I've fixed a bug in `chomp!` at f5052d45be, and this `delete_prefix!` has same bug too.", "created_at": "2017-06-18 04:40:13", "user": 16700, "id": 309256430}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309257319", "text": "Sorry, `delete_prefix!` raises a `RuntimError` properly, as it uses `rb_str_drop_bytes`.\r\nJust `str_modify_keep_cr(str)` can be replaced with `str_modifiable(str)` not to make shared string unnecessarily.", "created_at": "2017-06-18 05:15:29", "user": 16700, "id": 309257319}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309278972", "text": "Thank you for letting me know. I've added same tests for `test_delete_prefix_bang` anyway.", "created_at": "2017-06-18 13:52:07", "user": 2290461, "id": 309278972}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309323763", "text": "If there is no more comment for a day, I will squash and merge into trunk.", "created_at": "2017-06-19 02:26:12", "user": 2290461, "id": 309323763}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309386065", "text": "Please also add a entry to the `NEWS` file when you commit this.", "created_at": "2017-06-19 09:23:26", "user": 168854, "id": 309386065}, {"reactions": {"+1": [168854]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309389637", "text": "I will make `NEWS` before merging since it often conflicts...", "created_at": "2017-06-19 09:38:28", "user": 2290461, "id": 309389637}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1633, "updated_at": "2017-05-26 01:35:21", "user": 16329784, "closed_at": "2017-05-26 01:35:21", "id": 231501923, "title": "Ruby 1 6", "url": "https://api.github.com/repos/ruby/ruby/issues/1633", "created_at": "2017-05-26 01:23:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is very similar with https://github.com/ruby/ruby/pull/1631\r\nIf only one argument is given, this will concatenate the array without\r\ngenerating temporary Array object.\r\n\r\nArray#concat will be faster around 19%\r\n\r\n* Before\r\n```\r\nCalculating -------------------------------------\r\n        Array#concat      2.187M (± 3.5%) i/s -     10.926M in   5.002829s\r\n```\r\n\r\n* After\r\n```\r\nCalculating -------------------------------------\r\n        Array#concat      2.598M (± 1.8%) i/s -     13.008M in   5.008201s\r\n```\r\n\r\n* Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Array#concat\" do |i|\r\n    other = [4]\r\n    i.times { [1, 2, 3].concat(other) }\r\n  end\r\nend\r\n```", "labels": [], "number": 1634, "updated_at": "2017-10-14 12:36:10", "user": 199156, "closed_at": "2017-05-26 17:10:54", "id": 231680588, "title": "Improve Array#concat performance if only one argument is given", "url": "https://api.github.com/repos/ruby/ruby/issues/1634", "created_at": "2017-05-26 16:53:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changing the code example for consistency: from `each` to `each_line`.", "labels": [], "number": 1635, "updated_at": "2017-05-29 23:20:19", "user": 16832997, "closed_at": "2017-05-29 23:20:19", "id": 231751768, "title": "[DOC]: Minor amendment to IO#each_line", "url": "https://api.github.com/repos/ruby/ruby/issues/1635", "created_at": "2017-05-26 22:55:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304407589", "text": "Why is this more consistent? Note that this description and example is used both for IO#each and IO#each_line, which are aliases.", "created_at": "2017-05-26 23:23:13", "user": 1112299, "id": 304407589}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304410052", "text": "I see your point. I was looking at [IO#each_line](http://ruby-doc.org/core-2.4.1/IO.html#method-i-each_line) in the docs, where the code example directly underneath has `each` rather than `each_line`.\r\n![rubydoc](https://cloud.githubusercontent.com/assets/16832997/26515633/b11c2c82-42d0-11e7-8a7c-8dfdfdc1f5af.png)\r\nI realise that they are aliases, but I forgot that the example should apply for both.\r\nTherefore, I guess it should stay as is.", "created_at": "2017-05-26 23:47:25", "user": 16832997, "id": 304410052}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I had to implement the following for some nicer methods in another instance where I'm using the code. It's my first Ruby PR so please let me know if I've messed anything up!\r\n\r\n```ruby\r\n  def get_ip\r\n    self.inspect.split(/[\\/:]/).slice(2)\r\n  end\r\n\r\n  def get_subnet\r\n    self.inspect.split(/[\\/:>]/).slice(3)\r\n  end\r\n```", "labels": [], "number": 1636, "updated_at": "2018-02-23 03:07:36", "user": 182765, "closed_at": "None", "id": 231892870, "title": "IPAddr add helper commands get_ip and get_subnet", "url": "https://api.github.com/repos/ruby/ruby/issues/1636", "created_at": "2017-05-28 20:39:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304544007", "text": "I'm a bit confused as to why the first CI build is failing, on my own machine it returns success:\r\n\r\n```travis\r\n$ make -s $JOBS test-rubyspec MSPECOPT=-j\r\ngenerating x86_64-linux-fake.rb\r\nIn file included from /usr/include/bits/libc-header-start.h:33:0,\r\n                 from /usr/include/stdio.h:28,\r\n                 from ../include/ruby/defines.h:101,\r\n                 from ../include/ruby/ruby.h:36,\r\n                 from ../version.c:12:\r\n/usr/include/features.h:373:4: warning: #warning _FORTIFY_SOURCE requires compiling with optimization (-O) [-Wcpp]\r\n #  warning _FORTIFY_SOURCE requires compiling with optimization (-O)\r\n    ^~~~~~~\r\ncc1: warning: unrecognized command line option ‘-Wno-self-assign’\r\ncc1: warning: unrecognized command line option ‘-Wno-constant-logical-operand’\r\ncc1: warning: unrecognized command line option ‘-Wno-parentheses-equality’\r\nx86_64-linux-fake.rb updated\r\nruby 2.5.0dev (2017-05-29 ipaddr-get-sub.. 58948) [x86_64-linux]\r\n[- | ==================100%================== | 00:00:00]      0F      0E \r\n\r\nFinished in 20.919751 seconds\r\n\r\n3569 files, 26409 examples, 200760 expectations, 0 failures, 0 errors, 0 tagged\r\n```\r\n\r\nIf somebody could point me in the right direction I'd be grateful!", "created_at": "2017-05-28 22:19:44", "user": 182765, "id": 304544007}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304548360", "text": "@x89 Can you rebase from our latest master?", "created_at": "2017-05-28 23:55:35", "user": 12301, "id": 304548360}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304590983", "text": "@hsbt this was from the `trunk` branch, should I be using the `2.4` branch instead?", "created_at": "2017-05-29 07:20:52", "user": 182765, "id": 304590983}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304644454", "text": "Okay it seems to have worked now, I created a bug report (feature request) as well https://bugs.ruby-lang.org/issues/13610", "created_at": "2017-05-29 12:00:04", "user": 182765, "id": 304644454}], "assignees": [10236, 10236], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [168854, 1147484]}, "text": "Improve `Kernel#yield_self` docs example.\r\n\r\nThe intention of `Kernel#yield_self` might not be obvious from the current example, because\r\n\r\n```ruby\r\n'my string'.yield_self {|s|s.upcase}\r\n```\r\n\r\nCan be simply replaced with \r\n\r\n```ruby\r\n'my string'.upcase\r\n```", "labels": [], "number": 1637, "updated_at": "2017-05-31 12:19:19", "user": 123158, "closed_at": "2017-05-30 18:19:16", "id": 231968060, "title": "[DOC] Improve Kernel#yield_self docs example", "url": "https://api.github.com/repos/ruby/ruby/issues/1637", "created_at": "2017-05-29 09:12:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304696224", "text": "I haven't noticed this kind of coding style in the Ruby docs before, how about\r\n\r\n```\r\nrequire \"ostruct\"\r\nperson = OpenStruct.new(firstname: \"John\", lastname: \"Doe\")\r\nperson.yield_self {|p| \"#{p.firstname} #{p.lastname}\" }   #=> \"John Doe\"\r\n```\r\n", "created_at": "2017-05-29 16:24:07", "user": 1112299, "id": 304696224}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304720418", "text": "@stomar \r\nJust updated the changes and got rid of `user` variable. You can see it here in outdated changes https://github.com/ruby/ruby/pull/1637#pullrequestreview-40741334\r\n\r\nRegarding spaces between `{` and `}` , there are plenty of examples using spaces between `{` and `|` even in docs for `Object`. I might be wrong, but I can see them in [Objectl#CSV](https://docs.ruby-lang.org/en/trunk/Object.html#method-i-CSV), [Object#enum_for](https://docs.ruby-lang.org/en/trunk/Object.html#method-i-enum_for) and [Object#to_enum](https://docs.ruby-lang.org/en/trunk/Object.html#method-i-to_enum).", "created_at": "2017-05-29 19:38:24", "user": 123158, "id": 304720418}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304732051", "text": "Sorry, I only looked at the final commit.\r\n\r\nActually, I doubt the current version is more illustrative or useful than your original version or the existing docs. Since the created struct cannot be reused, a better way to write the current version would simply be a literal `\"John Doe\"`... :smile:\r\n\r\nIMO a good example is still lacking; the PR in the current form is rather bloated compared to the existing docs, but doesn't provide a convincing use case, either.\r\n\r\n(The spaces I don't mind--there is no consistent style throughout the docs.)", "created_at": "2017-05-29 21:14:53", "user": 1112299, "id": 304732051}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304793135", "text": "@stomar no problem\r\n\r\nI guess we (or I) already violated [Contribution Rules](https://bugs.ruby-lang.org/projects/ruby/wiki/HowToContribute) here by starting discussion in GitHub PR =)\r\nBased on that this PR should be ignored", "created_at": "2017-05-30 07:09:01", "user": 123158, "id": 304793135}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304814157", "text": "@stomar The problem with the current example and the one you proposed above is they are really simpler and even shorter without `yield_self` and just using a local variable.\r\nI think the values in the OpenStruct example are illustrative, so it's easy to imagine they might not be just literals.\r\n\r\n@ck3g I believe it is OK to discuss a patch on a PR (rather this rule applies to new API, compatibility implications, etc), but indeed it could be interesting to move this discussion to the tracker to have more opinions.", "created_at": "2017-05-30 08:46:34", "user": 168854, "id": 304814157}, {"reactions": {"+1": [16700]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304921799", "text": "@ck3g @eregon \r\n\r\nWhat's your opinion on this:\r\n\r\n```\r\n3.next.yield_self {|x| x**x }.to_s   #=> \"256\"\r\n```\r\n\r\nIt's short, doesn't require additional libraries, and illustrates the chaining.", "created_at": "2017-05-30 15:47:53", "user": 1112299, "id": 304921799}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304925668", "text": "@stomar Looks good to me!", "created_at": "2017-05-30 16:00:32", "user": 168854, "id": 304925668}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/304968280", "text": "@stomar \r\n\r\n```ruby\r\n4**4 #=> 256\r\n```\r\n\r\nFine for me btw =)", "created_at": "2017-05-30 18:34:10", "user": 123158, "id": 304968280}], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This pr makes Ruby programmers can build zlib binding without zlib-devel packages. You can build zlib binding with `--enable-bundled-zlib` option.", "labels": [], "number": 1638, "updated_at": "2018-02-23 03:07:36", "user": 12301, "closed_at": "None", "id": 233140878, "title": "[EXPERIMENTAL] static link helper of zlib", "url": "https://api.github.com/repos/ruby/ruby/issues/1638", "created_at": "2017-06-02 10:25:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305972724", "text": "appveyor needs `--enable-bundled-zlib`.", "created_at": "2017-06-03 12:40:36", "user": 16700, "id": 305972724}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "In our codebase we have a few instances where we need, for a variety of reasons, to monkey patch a class. With the advent of `Module#prepend`, this is now much cleaner and safer than the days of `alias_method_chain` from Rails or carefully aliasing and calling the original in plain ruby. \r\n\r\nWe have a pattern when we do these kinds of things that look like this:\r\n\r\n```ruby\r\nModule.new do\r\n  def some_original_method\r\n    do_something_else\r\n    super\r\n  end\r\nend.tap { |mod| OriginalClass.prepend(mod) }\r\n```\r\n\r\nThis works great, but it's not the nicest syntax. It would be really nice if you could just pass a block directly to `Module#prepend` that's what this PR does. This would allow one to rewrite the snippet above more like this:\r\n\r\n```ruby\r\nOriginalClass.prepend do\r\n  def some_original_method\r\n    do_something_else\r\n    super\r\n  end\r\nend\r\n```", "labels": [], "number": 1639, "updated_at": "2018-02-23 03:07:36", "user": 242, "closed_at": "None", "id": 233316810, "title": "Make Module#prepend take a block", "url": "https://api.github.com/repos/ruby/ruby/issues/1639", "created_at": "2017-06-02 22:22:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305935380", "text": "You can write the former without `tap`.\r\n\r\n```ruby\r\nOriginalClass.prepend Module.new {\r\n  def some_original_method\r\n    do_something_else\r\n    super\r\n  end\r\n}\r\n```", "created_at": "2017-06-03 00:09:00", "user": 16700, "id": 305935380}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "* lib/mkmf.rb (create_makefile): sort lists of source and object\r\n  files in generated Makefile, unless given by extconf.rb.\r\n  [Fix GH-1367]\r\n\r\nWithout sorting the list of object files explicitely, its order is\r\nindeterministic, because readdir() is also not deterministic.\r\nWhen the list of object files varies between builds, they are\r\nlinked in a different order, which results in an unreproducible\r\nbuild.\r\n\r\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@55265 b2dd03c8-39d4-4d8f-98ff-823fe69b080e\r\n\r\nCherry-picked from trunk commit 15dba481a28", "labels": [], "number": 1640, "updated_at": "2017-12-14 05:15:44", "user": 637990, "closed_at": "2017-12-14 05:15:44", "id": 233341811, "title": "mkmf.rb: sort lists of source and object files", "url": "https://api.github.com/repos/ruby/ruby/issues/1640", "created_at": "2017-06-03 03:41:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351611248", "text": "I filed this to our tracker. https://bugs.ruby-lang.org/issues/14182", "created_at": "2017-12-14 05:15:44", "user": 12301, "id": 351611248}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ary_memcpy0() has calculated the cache line size every time when copy array elements.\r\nThis patch will replace it with pre calculated value of cache line size.\r\n\r\nArray#+ will be faster around 2%.\r\n\r\n### Before\r\n```\r\n      Array#+(other)      5.167M (± 0.1%) i/s -     25.928M in   5.017629s\r\n```\r\n\r\n### After\r\n```\r\n      Array#+(other)      5.256M (± 0.2%) i/s -     26.410M in   5.025261s\r\n```\r\n\r\n### Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Array#+(other)\" do |loop|\r\n    ary1 = [1, 2, 3]\r\n    ary2 = [4, 5]\r\n    i = 0\r\n    while i < loop\r\n      ary1 + ary2\r\n      i += 1\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13629", "labels": [], "number": 1641, "updated_at": "2017-10-14 12:35:58", "user": 199156, "closed_at": "2017-06-03 12:10:17", "id": 233359391, "title": "Improve performance in where copy array elements", "url": "https://api.github.com/repos/ruby/ruby/issues/1641", "created_at": "2017-06-03 09:52:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305970600", "text": "Seems nothing changed actually.\r\n", "created_at": "2017-06-03 11:59:33", "user": 16700, "id": 305970600}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/305971115", "text": "Sorry, same assembly code were generated even if apply this.", "created_at": "2017-06-03 12:10:17", "user": 199156, "id": 305971115}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/306022610", "text": "Yes. Today's compilers evaluate constant expressions at compile time.", "created_at": "2017-06-04 07:01:05", "user": 815565, "id": 306022610}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Temporarily enhancing PATH for MSYS/MINGW...\r\nBuilding native extensions.  This could take a while...\r\nERROR:  Error installing fast-stemmer:\r\n        ERROR: Failed to build gem native extension.\r\n\r\n    current directory: C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/fast-stemmer-1.0.2/ext\r\nC:/Ruby24-x64/bin/ruby.exe -r ./siteconf20170605-5712-7v16e5.rb extconf.rb\r\ncreating Makefile\r\n\r\ncurrent directory: C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/fast-stemmer-1.0.2/ext\r\nmake \"DESTDIR=\" clean\r\n\"make\" no se reconoce como un comando interno o externo,\r\nprograma o archivo por lotes ejecutable.\r\n\r\ncurrent directory: C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/fast-stemmer-1.0.2/ext\r\nmake \"DESTDIR=\"\r\n\"make\" no se reconoce como un comando interno o externo,\r\nprograma o archivo por lotes ejecutable.\r\n\r\nmake failed, exit code 1\r\n\r\nGem files will remain installed in C:/Ruby24-x64/lib/ruby/gems/2.4.0/gems/fast-stemmer-1.0.2 for inspection.\r\nResults logged to C:/Ruby24-x64/lib/ruby/gems/2.4.0/extensions/x64-mingw32/2.4.0/fast-stemmer-1.0.2/gem_make.out", "labels": [], "number": 1642, "updated_at": "2017-06-07 00:02:57", "user": 19982776, "closed_at": "2017-06-05 05:10:18", "id": 233495187, "title": "problema para instalar fast-stemmer-1.0.2", "url": "https://api.github.com/repos/ruby/ruby/issues/1642", "created_at": "2017-06-05 05:05:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/306175415", "text": "1. We don't merge maintenance branches to the trunk.\r\n2. Pull requests are to merge branches, not to ask questions.\r\n3. Probably you haven't install `make` tool.", "created_at": "2017-06-05 12:26:55", "user": 16700, "id": 306175415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/306647966", "text": "thanks you and i'm sorry.  ;)", "created_at": "2017-06-07 00:02:57", "user": 19982776, "id": 306647966}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1643, "updated_at": "2017-06-09 01:32:29", "user": 2575390, "closed_at": "2017-06-09 01:32:29", "id": 234639558, "title": "Fix typo in i18n comment.", "url": "https://api.github.com/repos/ruby/ruby/issues/1643", "created_at": "2017-06-08 19:59:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`OpenSSL::OPENSSL_FIPS` causes confusion as the doc states it returns a boolean based on if FIPS is 'enabled' which isn't true. It is dependent on whether the openssl installed was built with FOM (fips object module). If it was then it will always returns true (even when `fips_mode = false`), thus it is more accurate to say FIPS-capable.\r\n\r\nAdding `OpenSSL.fips_mode` to return whether or not fips_mode is currently set. This allows for better handling around fips mode.", "labels": [], "number": 1644, "updated_at": "2017-06-09 11:08:24", "user": 1335199, "closed_at": "2017-06-09 10:11:48", "id": 234727610, "title": "Add fips_mode_get to return if fips_mode is currently enabled", "url": "https://api.github.com/repos/ruby/ruby/issues/1644", "created_at": "2017-06-09 05:49:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307351476", "text": "Can you open a Pull Request at https://github.com/ruby/openssl instead of here? Thanks!", "created_at": "2017-06-09 10:11:48", "user": 1033740, "id": 307351476}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307361536", "text": "Thanks @rhenium, done https://github.com/ruby/openssl/pull/125", "created_at": "2017-06-09 11:08:24", "user": 1335199, "id": 307361536}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Some versions of windows do not support setting Time.now without elevated privileges / permissions,\r\n\r\nSee [Issue 13644](https://bugs.ruby-lang.org/issues/13644)", "labels": [], "number": 1645, "updated_at": "2017-06-11 00:29:30", "user": 15081176, "closed_at": "2017-06-11 00:29:30", "id": 234946384, "title": "test/logger/test_logdevice.rb - skip for Time.now= is undefined", "url": "https://api.github.com/repos/ruby/ruby/issues/1645", "created_at": "2017-06-09 21:46:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307511864", "text": "Re tests, this PR changes a file used in `test-all`, which passes on both appveyor and travis.\r\n\r\nSpec tests failed on appveyor with a failure that I have intermittently seen on MinGW builds.", "created_at": "2017-06-09 22:12:02", "user": 15081176, "id": 307511864}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307598136", "text": "Problem is actually with mtime on MinGW", "created_at": "2017-06-11 00:29:30", "user": 15081176, "id": 307598136}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "nice to meet you!\r\nI felt something wrong with the sample code of the `<<` \r\n in the array.c, so I sent you a PR.\r\n\r\nCurrently, the description of `<<` is as follows.\r\n\r\n```\r\nAppend---Pushes the given object on to the end of this array. This\r\nexpression returns the array itself, so several appends\r\nmay be chained together.\r\n```\r\n\r\nHowever, we can get this result without updating the receiver.\r\nFor example, this result can be obtained also when writing code as follows.\r\n\r\n\r\n```ruby\r\nclass Array\r\n  def <<(other)\r\n    self + [other]\r\n  end\r\nend\r\n```\r\n\r\nSo, I will suggest another sample code\r\n\r\n```\r\na = [1, 2]\r\na << \"c\" << \"d\" << [ 3, 4 ]\r\na #=> [1, 2, \"c\", \"d\", [3, 4]]\r\n```\r\n\r\nPlease consider this proposal.", "labels": [], "number": 1646, "updated_at": "2017-06-12 11:12:44", "user": 1563239, "closed_at": "2017-06-12 11:10:04", "id": 235120832, "title": "fix sample code of Array#<<", "url": "https://api.github.com/repos/ruby/ruby/issues/1646", "created_at": "2017-06-12 04:07:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307686559", "text": "Of course you can return the same result without updating receiver. But \"this expression returns the array itself, so several appends may be chained together\" doesn't deny \"we can get this result without updating the receiver\".\r\n\r\nThe previous code isn't broken and the changed code calls the same method. So it didn't make sense to me. Could you rephrase why you \"felt something wrong with the sample\"? Please provide the source code in which the sample is broken. With `Array#<<` definition you provided, `[ 1, 2 ] << \"c\" << \"d\" << [ 3, 4 ]` works.", "created_at": "2017-06-12 04:17:17", "user": 3138447, "id": 307686559}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307704086", "text": "Thank you for commenting to my PR :grin: \r\nAnd I'm sorry that my English makes you misunderstood :sweat_smile: \r\n\r\nWith the current sample code, I think that it can not fully \r\ndescribe \"This expression returns the array itself\".\r\n\r\nThe current sample code describes \"chained togeter\" \r\nby `[1, 2] << \"c\" << ....` but it doesn't describe \r\nthe `[1, 2]` array is changed.\r\n\r\nThe proposed sample code also describes `[1, 2]` is changed. \r\nI think that it describes \"This expression returns the array itself\".\r\n\r\nHow about it?", "created_at": "2017-06-12 06:47:44", "user": 1563239, "id": 307704086}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307708537", "text": "It made sense. You want to make it clear that `a` is modified. \r\n\r\nThen, since your code doesn't explain `<<` \"expression returns the array itself\", how about this? (This version is similar to Array#push's one)\r\n\r\n```rb\r\n     a = [ 1, 2 ]\r\n     a << \"c\" << \"d\" << [ 3, 4 ]\r\n             #=>  [ 1, 2, \"c\", \"d\", [ 3, 4 ] ]\r\n     a\r\n             #=>  [ 1, 2, \"c\", \"d\", [ 3, 4 ] ]\r\n```", "created_at": "2017-06-12 07:15:19", "user": 3138447, "id": 307708537}, {"reactions": {"+1": [3138447]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307757503", "text": "> your code doesn't explain << \"expression returns the array itself\", how about this? (This version is similar to Array#push's one)\r\n\r\nSurely!\r\nI fixed sample code as you taught me.\r\nWhat about you?", "created_at": "2017-06-12 10:58:31", "user": 1563239, "id": 307757503}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backports 0827a7e52ba3d957a634b063bf5a391239b9ffee to 2.3\r\n\r\n* lib/net/smtp.rb (getok, get_response): raise an ArgumentError when\r\nCR or LF is included in a line, because they are not allowed in\r\nRFC5321.\r\n\r\nhttps://hackerone.com/reports/137631\r\n\r\n/cc @unak ", "labels": [], "number": 1647, "updated_at": "2017-09-15 04:59:50", "user": 199, "closed_at": "2017-09-15 04:59:46", "id": 235126668, "title": "CVE-2015-9096: backport SMTP injection fix to 2.3", "url": "https://api.github.com/repos/ruby/ruby/issues/1647", "created_at": "2017-06-12 05:14:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307695276", "text": "ack\r\nThanks to notice me, @jeremy ", "created_at": "2017-06-12 05:49:28", "user": 17790, "id": 307695276}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/329681730", "text": "This was backported to ruby_2_3 @ 1b5f534487e25b7a34b69247261a69ed6dc6d413", "created_at": "2017-09-15 04:59:46", "user": 199, "id": 329681730}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backports 0827a7e52ba3d957a634b063bf5a391239b9ffee to 2.2\r\n\r\n* lib/net/smtp.rb (getok, get_response): raise an ArgumentError when\r\nCR or LF is included in a line, because they are not allowed in\r\nRFC5321.\r\n\r\nhttps://hackerone.com/reports/137631\r\n\r\n/cc @unak ", "labels": [], "number": 1648, "updated_at": "2017-09-21 01:40:26", "user": 199, "closed_at": "2017-09-21 01:32:38", "id": 235126804, "title": "CVE-2015-9096: backport SMTP injection fix to 2.2", "url": "https://api.github.com/repos/ruby/ruby/issues/1648", "created_at": "2017-06-12 05:16:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/307699405", "text": "[Build failure](https://travis-ci.org/ruby/ruby/builds/241899740#L5333) is unrelated:\r\n```\r\n1)\r\nProcessing RUBYOPT prints the version number for '-v' FAILED\r\nExpected \"ruby 2.2.8p471 (2017-03-29 revision 58199) [x86_64-linux]\"\r\nto equal \"ruby 2.2.8 (@RUBY_RELEASE_DATE@) [x86_64-linux]\"\r\n```", "created_at": "2017-06-12 06:23:03", "user": 199, "id": 307699405}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/312304570", "text": "Ack.\r\nI would like you to wait a while longer.", "created_at": "2017-06-30 15:52:35", "user": 17790, "id": 312304570}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/329682026", "text": "Not backported for [2.2.8 security release](https://www.ruby-lang.org/en/news/2017/09/14/ruby-2-2-8-released/)", "created_at": "2017-09-15 05:02:18", "user": 199, "id": 329682026}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331025629", "text": "@jeremy We decided to not handle this issue as a vulnerability for Ruby 2.2.", "created_at": "2017-09-21 01:32:38", "user": 12301, "id": 331025629}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* [Feature #13570] [ruby-core:81199]\r\n* For CI.", "labels": [], "number": 1649, "updated_at": "2017-06-15 13:37:47", "user": 168854, "closed_at": "2017-06-15 13:37:43", "id": 235584597, "title": "Use mkmf in to build C-API specs", "url": "https://api.github.com/repos/ruby/ruby/issues/1649", "created_at": "2017-06-13 14:59:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/308731474", "text": "Fixed in ed1910095eade0d3fb33cb3362da1a773f00439f", "created_at": "2017-06-15 13:37:43", "user": 168854, "id": 308731474}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added the method canonicalize which returns the canonical form of input regarding the base uri according to the RFC 1630", "labels": [], "number": 1650, "updated_at": "2018-03-08 16:13:58", "user": 25178954, "closed_at": "2018-03-08 16:13:57", "id": 236201798, "title": "New method canonicalize", "url": "https://api.github.com/repos/ruby/ruby/issues/1650", "created_at": "2017-06-15 14:00:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371536128", "text": "URI#+ already behaves as you suggest\r\n```\r\n% irb\r\nirb(main):001:0> u=URI(\"http://my.example.com/some_path\") + \"/dir/../dar/./dor/file.txt\"\r\n=> #<URI::HTTP http://my.example.com/dar/dor/file.txt>\r\nirb(main):002:0> u.to_s\r\n=> \"http://my.example.com/dar/dor/file.txt\"\r\n```", "created_at": "2018-03-08 16:13:57", "user": 13423, "id": 371536128}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Allow Hash#delete to delete multiple keys at once, as in:\r\n\r\n    { a: 'a', b: 'b', c: 'c' }.delete(:a, :b)\r\n\r\nIn reference to https://bugs.ruby-lang.org/issues/13211#change-64570", "labels": [], "number": 1651, "updated_at": "2017-07-24 19:01:38", "user": 5093358, "closed_at": "2017-07-24 19:01:35", "id": 236324085, "title": "Hash delete multiple keys", "url": "https://api.github.com/repos/ruby/ruby/issues/1651", "created_at": "2017-06-15 21:49:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/308947883", "text": "Please issue a feature request at https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new", "created_at": "2017-06-16 06:49:03", "user": 16700, "id": 308947883}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309025760", "text": "@nobu Sorry not sure if I did this right or not. I opened an issue here: https://bugs.ruby-lang.org/issues/13211 but it didn't get much attention so I opened the PR here as well. Let me know how to proceed. Thanks!", "created_at": "2017-06-16 13:26:19", "user": 5093358, "id": 309025760}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309268244", "text": "Have you read the comment by Urabe-san?", "created_at": "2017-06-18 10:12:34", "user": 16700, "id": 309268244}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309281709", "text": "I did - I added the patch file to clarify things. It's much more important to get the multiple delete than the return value, which I'm happy to make into anything that makes sense.", "created_at": "2017-06-18 14:42:52", "user": 5093358, "id": 309281709}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309313384", "text": "> It's much more important to get the multiple delete than the return value\r\n\r\nMay I ask you the reason why?", "created_at": "2017-06-19 00:31:38", "user": 15377, "id": 309313384}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309526826", "text": "Sorry I should've been more clear, I meant that the actual feature request is to delete multiple keys from the hash. I'd be happy to change the name of the method to `delete_many` or something to that effect if that would be more clear?", "created_at": "2017-06-19 18:32:02", "user": 5093358, "id": 309526826}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309608543", "text": "@kddeisz Thank you. I want to know why you need to delete multiple keys at once. To say more directly, we need your use case of this proposed method. New method of no use would make no happy.", "created_at": "2017-06-20 00:18:46", "user": 15377, "id": 309608543}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310698844", "text": "Oh sorry I see. The biggest use case for me is when you have some kind of global configuration hash that may come from some external source (an API or a configuration file, etc.) and you want to configure nested objects. For example, if we have an `Account` that has a child `User` object, then this:\r\n\r\n```ruby\r\nclass Account\r\n  def initialize(config)\r\n    config.delete(:a, :b, :c)\r\n    @user = User.new(config)\r\n  end\r\nend\r\n\r\nclass User\r\n  def initialize(config)\r\n    ...\r\n  end\r\nend\r\n```\r\n\r\nis an example. You would be deleting the hash keys that are specific to account so that unnecessary configuration isn't going into the user class (especially if they have overlapping keys). ", "created_at": "2017-06-23 15:37:00", "user": 5093358, "id": 310698844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310715327", "text": "Just an idea, I think you can write it by keyword arguments.\r\n\r\n```ruby\r\nclass Account\r\n  def initialize(a: nil, b: nil, c: nil, **user_config)\r\n    @user = User.new(**user_config)\r\n  end\r\nend\r\n```", "created_at": "2017-06-23 16:43:03", "user": 16700, "id": 310715327}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310722299", "text": "That is a good solution, I hadn't thought of that.", "created_at": "2017-06-23 17:12:09", "user": 5093358, "id": 310722299}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I create PR, because there is something that I am worried about in the document of `merge!` method in hash class.\r\n\r\nThe purpose of this PR is to make clear that `h1` is modified.\r\nThe current sample code is below.\r\n\r\n```\r\n     h1 = { \"a\" => 100, \"b\" => 200 }\r\n     h2 = { \"b\" => 254, \"c\" => 300 }\r\n     h1.merge!(h2)   #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}\r\n```\r\n\r\nThe description says \"Adds the contents of other_hash to hsh.\".\r\nThe current sample code describes \"Returns a hash containing the contents of other_hash and the contents of hsh.\" by `h1.merge!(h2)   #=> {\"a\"=>100, \"b\"=>254, \"c\"=>300}` but it doesn't describe the `h1` hash is clearly modified. \r\n\r\nThe proposed sample code also describes `h1` hash is modified.\r\nI think that it describes \"Adds the contents of other_hash to hsh.\".\r\n\r\nHow about it?", "labels": [], "number": 1652, "updated_at": "2017-10-21 13:41:11", "user": 1563239, "closed_at": "2017-10-21 13:41:11", "id": 236361869, "title": "fix sample code of merge! method in hash.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1652", "created_at": "2017-06-16 02:15:46", "comments": [], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [10110737, 11613517, 535718, 969118], "+1": [10110737, 613943, 11613517, 535718, 1636026, 165359, 16811723, 969118]}, "text": "I would like to let `Delegator` dump itself instead of the delegated object. Let's consider the following scenario.\r\n\r\n```\r\nrequire \"delegate\"\r\n\r\nclass Foo < Delegator\r\n  def initialize(the_obj)\r\n    @the_obj = the_obj\r\n  end\r\n\r\n  def __getobj__\r\n    @the_obj\r\n  end\r\nend\r\n\r\nfoo = Foo.new(nil)\r\nfoo.inspect\r\n# nil\r\n```\r\n\r\nThis dump message might cause confusion because `foo` object itself is not `nil`. Why don't we be clear and have a dump message like \"foo is an Foo class with `nil` as the delegated object\"?", "labels": [], "number": 1653, "updated_at": "2018-02-23 03:07:37", "user": 5930347, "closed_at": "None", "id": 236645552, "title": "Dump Delegator itself instead of the delegated", "url": "https://api.github.com/repos/ruby/ruby/issues/1653", "created_at": "2017-06-17 07:34:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309655219", "text": "Polite ping :), any ideas on this PR?", "created_at": "2017-06-20 06:15:05", "user": 5930347, "id": 309655219}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313845224", "text": "Another polite ping! Hello Captain!!!", "created_at": "2017-07-08 09:26:24", "user": 5930347, "id": 313845224}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313845529", "text": "Could you file a feature request to https://bugs.ruby-lang.org first?", "created_at": "2017-07-08 09:34:29", "user": 3138447, "id": 313845529}, {"reactions": {"+1": [3138447, 3312462, 969118]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/313845865", "text": "@k0kubun thanks, I have submitted a ticket at https://bugs.ruby-lang.org/issues/13733?", "created_at": "2017-07-08 09:43:17", "user": 5930347, "id": 313845865}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [1537039]}, "text": "Implements https://bugs.ruby-lang.org/issues/10674", "labels": [], "number": 1654, "updated_at": "2017-09-26 14:01:27", "user": 179534, "closed_at": "2017-09-26 14:01:27", "id": 237027406, "title": "Make retries for Net::HTTP configurable", "url": "https://api.github.com/repos/ruby/ruby/issues/1654", "created_at": "2017-06-19 21:20:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/311358399", "text": "Another note (not connected to the PR): In ruby 2.3 it throwed `Net::ReadTimeout` but in ruby 2.4 it throws `IOError`", "created_at": "2017-06-27 13:30:22", "user": 179534, "id": 311358399}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1655, "updated_at": "2017-06-20 12:30:22", "user": 12434833, "closed_at": "2017-06-20 12:30:22", "id": 237169564, "title": "Fix a bunch of misprints", "url": "https://api.github.com/repos/ruby/ruby/issues/1655", "created_at": "2017-06-20 10:54:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309738128", "text": "https://en.oxforddictionaries.com/definition/iff", "created_at": "2017-06-20 12:30:21", "user": 16700, "id": 309738128}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For CI.", "labels": [], "number": 1656, "updated_at": "2017-06-20 14:37:04", "user": 168854, "closed_at": "2017-06-20 14:37:01", "id": 237184327, "title": "Try to use echo instead of a sub ruby in Process.spawn specs", "url": "https://api.github.com/repos/ruby/ruby/issues/1656", "created_at": "2017-06-20 11:54:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Before\r\n---\r\n\r\n```shell\r\nruby -v #=> ruby 2.5.0dev (2017-06-20 trunk 59122) [x86_64-darwin16]\r\n```\r\n\r\n```ruby\r\nrequire 'shell'\r\n\r\nshell = Shell.new\r\nshell.system 'echo', 42\r\n```\r\n\r\nThe error\r\n```\r\n/Users/kachick/.rubies/ruby-2.5.0dev.8ae9de372a/lib/ruby/2.5.0/shell/system-command.rb:19:in `initialize': uninitialized constant Shell::Error::TypeError (NameError)\r\n```\r\n\r\nAfter\r\n---\r\n\r\nThe error\r\n```\r\n/Users/kachick/.rubies/ruby-2.5.0dev.8ae9de372a/lib/ruby/2.5.0/shell/system-command.rb:19:in `initialize': wrong argument type Integer (expected String) (TypeError)\r\n```", "labels": [], "number": 1657, "updated_at": "2017-06-22 10:58:59", "user": 1180335, "closed_at": "2017-06-22 10:57:52", "id": 237208164, "title": "Fix an error handling in `shell` library", "url": "https://api.github.com/repos/ruby/ruby/issues/1657", "created_at": "2017-06-20 13:24:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310347329", "text": "Thank you! 🐚 ", "created_at": "2017-06-22 10:58:57", "user": 1180335, "id": 310347329}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ticket: https://bugs.ruby-lang.org/issues/13669\r\n\r\n```\r\nruby -v: ruby 2.5.0dev (2017-06-20 trunk 59122) [x86_64-darwin16]\r\n```\r\n\r\n```ruby\r\nenum = Object.new.to_enum\r\nclass << enum\r\n  def each\r\n    yield\r\n    yield nil\r\n    yield 0\r\n    yield 1\r\n    yield 0, :LABEL\r\n    yield [0, :LABEL]\r\n    yield 1, :LABEL\r\n    yield 1, :LABEL\r\n    yield 1, :DIFFERENT\r\n  end\r\nend\r\n\r\np enum.uniq\r\n```\r\n\r\nBefore\r\n---\r\n\r\n```ruby\r\n[nil, 0, 1, [0, :LABEL]]\r\n```\r\n\r\nIs this intentional?\r\n\r\nAfter this PR\r\n---\r\n\r\n```ruby\r\n[nil, 0, 1, [0, :LABEL], [1, :LABEL], [1, :DIFFERENT]]\r\n```", "labels": [], "number": 1658, "updated_at": "2017-06-21 04:56:24", "user": 1180335, "closed_at": "2017-06-21 02:26:27", "id": 237311932, "title": "Enumerable#uniq with non single yield arguments", "url": "https://api.github.com/repos/ruby/ruby/issues/1658", "created_at": "2017-06-20 19:01:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/309963115", "text": "Thank you!", "created_at": "2017-06-21 04:56:20", "user": 1180335, "id": 309963115}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- mentions to `fixnum` changed to `integer` and `Integer` to `Numeric` [a/c to this release note for 2.4.0](https://www.ruby-lang.org/en/news/2016/12/25/ruby-2-4-0-released/).\r\n- Code highlighting improved\r\n- sentences improved", "labels": [], "number": 1659, "updated_at": "2017-06-23 10:27:25", "user": 8004593, "closed_at": "2017-06-23 00:30:46", "id": 237942929, "title": "[doc] /syntax/refinements.rdoc updated", "url": "https://api.github.com/repos/ruby/ruby/issues/1659", "created_at": "2017-06-22 19:04:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310569094", "text": "hey @nobu, how can I contribute to Ruby so that my commits will appear in the Repo?", "created_at": "2017-06-23 04:36:43", "user": 8004593, "id": 310569094}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310606802", "text": "We use subversion for canonical repo. Unfortunately, You can not contribute your \"commit\" in our repo.", "created_at": "2017-06-23 08:35:02", "user": 12301, "id": 310606802}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/310631058", "text": "Your name and e-mail will appear in ChangeLog file at the next release.", "created_at": "2017-06-23 10:27:25", "user": 16700, "id": 310631058}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Forwardable._valid_method?` warns about useless operator when it is received an operator such as `*` and `+`.\r\n\r\n```bash\r\n$ RUBYOPT='-w' ruby -rforwardable -e 'Forwardable._valid_method?(:*)'\r\n<compiled>: warning: possibly useless use of * in void context\r\n```\r\n\r\nThis behavior is problematic when a delegator is defined for an operator.\r\nFor example:\r\n\r\n```ruby\r\nrequire 'forwardable'\r\n\r\nclass A\r\n  extend Forwardable\r\n\r\n  def s\r\n    's'\r\n  end\r\n\r\n  def_delegator :s, :* # <compiled>: warning: possibly useless use of * in void context\r\nend\r\n\r\np(A.new * 10) # => \"ssssssssss\"\r\n```", "labels": [], "number": 1660, "updated_at": "2017-06-23 12:29:10", "user": 4361134, "closed_at": "2017-06-23 11:57:44", "id": 238038297, "title": "Fix useless operator warnings", "url": "https://api.github.com/repos/ruby/ruby/issues/1660", "created_at": "2017-06-23 04:31:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix https://bugs.ruby-lang.org/issues/13665", "labels": [], "number": 1661, "updated_at": "2017-07-20 16:30:20", "user": 2290461, "closed_at": "2017-07-20 16:30:20", "id": 238441285, "title": "string.c: add String#delete_suffix and String#delete_suffix! to remove trailing suffix", "url": "https://api.github.com/repos/ruby/ruby/issues/1661", "created_at": "2017-06-26 04:54:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As far as I can tell, this is not true:\r\n\r\n```\r\n[14] pry(main)> require 'delegate'                                                                                                                                                           \r\n=> false                                       \r\n[15] pry(main)> names = SimpleDelegator.new([1,2,3])                                          \r\n=> [1, 2, 3]                                   \r\n[16] pry(main)> names.first                    \r\n=> 1                                           \r\n[17] pry(main)> class C                        \r\n[17] pry(main)*   def foo                      \r\n[17] pry(main)*     :foo                       \r\n[17] pry(main)*   end                          \r\n[17] pry(main)* end                            \r\n=> :foo                                        \r\n[18] pry(main)> names.__setobj__(C.new)        \r\n=> #<C:0x00000004a97b18>                       \r\n[19] pry(main)> names.foo                      \r\n=> :foo                                        \r\n[20] pry(main)> names.first                    \r\nNoMethodError: undefined method `first' for #<C:0x00000004a97b18>                             \r\nfrom /home/tim/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/delegate.rb:87:in `method_missing'       \r\n[21] pry(main)>                                \r\n```", "labels": [], "number": 1662, "updated_at": "2018-02-23 03:07:37", "user": 3360080, "closed_at": "None", "id": 239545577, "title": "Updated documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1662", "created_at": "2017-06-29 16:52:21", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [685742, 14068]}, "text": "Array(arg) does more than just call to_ary or to_a on the argument. It also falls back to returning [arg] if neither method is available. This patch extends the description and adds a few examples of how it handles common types of arguments, including an integer (which does not implement to_ary or to_a).", "labels": ["Doc"], "number": 1663, "updated_at": "2017-10-21 23:45:16", "user": 848483, "closed_at": "2017-10-21 23:45:16", "id": 239671888, "title": "[DOC] Improve documentation of Kernel#Array", "url": "https://api.github.com/repos/ruby/ruby/issues/1663", "created_at": "2017-06-30 04:01:55", "comments": [{"reactions": {"+1": [848483]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324583247", "text": "It might also be worth noting that `Array()` raises a `TypeError` if `to_ary` or `to_a` don't return an array.", "created_at": "2017-08-24 09:26:40", "user": 28232, "id": 324583247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324759524", "text": "@sos4nt Good idea. Done.", "created_at": "2017-08-24 21:14:08", "user": 848483, "id": 324759524}], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1664, "updated_at": "2017-07-04 07:10:43", "user": 778015, "closed_at": "2017-07-04 07:10:40", "id": 240331198, "title": "Update README.md", "url": "https://api.github.com/repos/ruby/ruby/issues/1664", "created_at": "2017-07-04 07:10:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This bug has been reported redmine: https://bugs.ruby-lang.org/issues/13722\r\n\r\nPreviously if the input started with a '0' then it will be converted as octal even though it has been specified as a decimal. This commit forces the number to be interpreted as a decimal", "labels": [], "number": 1665, "updated_at": "2017-07-06 11:49:59", "user": 16605145, "closed_at": "2017-07-06 11:49:59", "id": 240907820, "title": "Fix DecimalInteger converting to octal bug", "url": "https://api.github.com/repos/ruby/ruby/issues/1665", "created_at": "2017-07-06 10:09:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adding require 'fiddle/import' in all Fiddle::CParser usage examples.\r\n\r\nThis is just a detail, I think it would help to have the require in all examples so people don't spend time wondering where is the Fiddle::CParser defined.\r\n\r\nCheers,", "labels": [], "number": 1666, "updated_at": "2017-10-21 14:56:21", "user": 19025, "closed_at": "2017-10-21 14:56:21", "id": 242669525, "title": "cparser.rb: Adding require to examples", "url": "https://api.github.com/repos/ruby/ruby/issues/1666", "created_at": "2017-07-13 11:26:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because progname was memoized with `||=` a logger call that involved\r\noutputting `false` would be `nil`. Example code:\r\n\r\n```ruby\r\n  logger = Logger.new(STDOUT)\r\n  logger.info(false)  # => nil\r\n```\r\n\r\nPerform an explicit `nil` check instead of `||=` so that `false` will be output.", "labels": [], "number": 1667, "updated_at": "2017-07-20 16:48:28", "user": 452161, "closed_at": "2017-07-20 16:48:19", "id": 243197755, "title": "Fix memoization in logger", "url": "https://api.github.com/repos/ruby/ruby/issues/1667", "created_at": "2017-07-15 20:19:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/316763902", "text": "I've merged, thanks.", "created_at": "2017-07-20 16:48:28", "user": 2290461, "id": 316763902}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "…ring\r\n\r\nI think String#casecmp and String#casecmp? are similar methods.\r\nBut they have different performance on ASCII string.\r\n\r\nSeems that String#casecmp handles ASCII string only,\r\nhowever it is faster than String#casecmp?.\r\nBecause String#casecmp? duplicates object at `rb_str_downcase()` every time.\r\n\r\nThis patch will use the code of String#casecmp with ASCII string on String#casecmp?.\r\nBut, this patch will introduce a few penalties for UTF8 string in where detect ASCII/UTF8 string.\r\n\r\n```\r\nString#casecmp? ASCII -> 61.3 % up\r\nString#casecmp? UTF8  ->  1.3 % down\r\nSymbol#casecmp? ASCII -> 80.0 % up\r\nSymbol#casecmp? UTF8  ->  4.0 % down\r\n```\r\n\r\n### Before\r\n```\r\nCalculating -------------------------------------\r\n      String#casecmp      5.961M (± 3.8%) i/s -     29.838M in   5.017907s\r\nString#casecmp? ASCII\r\n                          3.530M (± 8.6%) i/s -     17.554M in   5.034848s\r\nString#casecmp? UTF8      1.252M (± 7.4%) i/s -      6.213M in   5.012168s\r\n      Symbol#casecmp      8.555M (± 2.4%) i/s -     42.822M in   5.009280s\r\nSymbol#casecmp? ASCII\r\n                          4.235M (± 9.7%) i/s -     20.824M in   5.001368s\r\nSymbol#casecmp? UTF8      1.329M (± 0.1%) i/s -      6.704M in   5.043725s\r\n```\r\n\r\n### After\r\n```\r\nCalculating -------------------------------------\r\n      String#casecmp      5.984M (± 6.4%) i/s -     29.829M in   5.020331s\r\nString#casecmp? ASCII\r\n                          5.658M (± 1.5%) i/s -     28.308M in   5.004547s\r\nString#casecmp? UTF8      1.215M (± 4.3%) i/s -      6.132M in   5.060292s\r\n      Symbol#casecmp      8.651M (± 0.9%) i/s -     43.313M in   5.007215s\r\nSymbol#casecmp? ASCII\r\n                          7.462M (± 0.5%) i/s -     37.489M in   5.023892s\r\nSymbol#casecmp? UTF8      1.275M (± 0.2%) i/s -      6.444M in   5.052743s\r\n```\r\n\r\n### Test code\r\n```ruby\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"String#casecmp\" do |loop|\r\n    loop.times { \"aBcDeF\".casecmp(\"abcdefg\") }\r\n  end\r\n  x.report \"String#casecmp? ASCII\" do |loop|\r\n    loop.times { \"aBcDeF\".casecmp?(\"abcdefg\") }\r\n  end\r\n  x.report \"String#casecmp? UTF8\" do |loop|\r\n    loop.times { \"\\u{e4 f6 fc}\".casecmp?(\"\\u{c4 d6 dc}\") }\r\n  end\r\n\r\n  x.report \"Symbol#casecmp\" do |loop|\r\n    loop.times { :aBcDeF.casecmp(:abcdefg) }\r\n  end\r\n  x.report \"Symbol#casecmp? ASCII\" do |loop|\r\n    loop.times { :aBcDeF.casecmp?(:abcdefg) }\r\n  end\r\n  x.report \"Symbol#casecmp? UTF8\" do |loop|\r\n    loop.times { :\"\\u{e4 f6 fc}\".casecmp?(:\"\\u{c4 d6 dc}\") }\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13750", "labels": ["Performance"], "number": 1668, "updated_at": "2018-02-23 03:07:37", "user": 199156, "closed_at": "None", "id": 243305764, "title": "Improve String#casecmp? and Symbol#casecmp? performance with ASCII st…", "url": "https://api.github.com/repos/ruby/ruby/issues/1668", "created_at": "2017-07-17 06:28:47", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/13167", "labels": [], "number": 1669, "updated_at": "2017-08-27 16:35:51", "user": 9540855, "closed_at": "2017-07-31 18:52:10", "id": 245370558, "title": "WIP: glob speed", "url": "https://api.github.com/repos/ruby/ruby/issues/1669", "created_at": "2017-07-25 11:28:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [3138447]}, "text": "This is very similar with https://github.com/ruby/ruby/pull/1634\r\nIf only one argument is given, this will prepend the string without\r\ngenerating temporary object.\r\n\r\n```\r\nString#prepend -> 47.5 % up\r\n```\r\n\r\n### Before\r\n```\r\n      String#prepend      1.517M (± 1.8%) i/s -      7.614M in   5.019819s\r\n```\r\n\r\n### After\r\n```\r\n      String#prepend      2.236M (± 3.4%) i/s -     11.234M in   5.029716s\r\n```\r\n\r\n### Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"String#prepend\" do |loop|\r\n    loop.times { \"!\".prepend(\"hello\") }\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/13773", "labels": ["Performance"], "number": 1670, "updated_at": "2017-10-27 14:57:23", "user": 199156, "closed_at": "2017-10-27 14:56:01", "id": 245954593, "title": "Improve String#prepend performance if only one argument is given", "url": "https://api.github.com/repos/ruby/ruby/issues/1670", "created_at": "2017-07-27 07:48:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/320415709", "text": "Seems reasonable.", "created_at": "2017-08-05 06:09:29", "user": 16700, "id": 320415709}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/325286191", "text": "+1", "created_at": "2017-08-28 07:55:58", "user": 315008, "id": 325286191}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "useful documentation should be added there", "labels": [], "number": 1671, "updated_at": "2017-07-28 14:17:17", "user": 12998362, "closed_at": "2017-07-28 14:17:17", "id": 246328750, "title": "Removed swearing from REXML::Entity documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1671", "created_at": "2017-07-28 12:06:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/318662730", "text": "The docs for `#initialize` end with \"The best thing to do is dump the stupid DTDs and use XMLSchema instead.\" That sentence isn't adding much value.", "created_at": "2017-07-28 14:13:15", "user": 14068, "id": 318662730}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As per Feature [#13784](https://bugs.ruby-lang.org/issues/13784).", "labels": [], "number": 1672, "updated_at": "2017-12-29 15:26:35", "user": 22453855, "closed_at": "2017-12-29 15:26:28", "id": 248204685, "title": "Added 'filter' alias for find_all and select.", "url": "https://api.github.com/repos/ruby/ruby/issues/1672", "created_at": "2017-08-05 19:31:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/320470619", "text": "Not sure, but I think there should be an update to the specs too.\r\n\r\n```\r\nrequire File.expand_path('../../../spec_helper', __FILE__)\r\nrequire File.expand_path('../fixtures/classes', __FILE__)\r\nrequire File.expand_path('../shared/find_all', __FILE__)\r\n\r\ndescribe \"Enumerable#filter\" do\r\n  it_behaves_like(:enumerable_find_all , :filter)\r\nend\r\n```", "created_at": "2017-08-05 21:10:32", "user": 1002893, "id": 320470619}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/320482416", "text": "Added the spec, thanks.\r\nI also added filter to enumerator.c.\r\n\r\nFunctionality after make && make install:\r\n```\r\n[1,2,3,4,5].filter { |num| num.even? } #=> [2, 4]\r\nlazy_filter = (0..Float::INFINITY).lazy.filter(&:odd?) #=> #<Enumerator::Lazy: 0..Infinity>:filter>\r\nlazy_filter.next #=> 1\r\nlazy_filter.next #=> 3\r\nlazy_filter.next #=> 5\r\n```", "created_at": "2017-08-06 02:59:39", "user": 22453855, "id": 320482416}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1593860]}, "text": "Implement case equality for Set, per [Feature 13801](https://bugs.ruby-lang.org/issues/13801).", "labels": [], "number": 1673, "updated_at": "2017-09-20 22:46:46", "user": 1002893, "closed_at": "2017-09-19 08:46:13", "id": 249535825, "title": "Implement Set#===", "url": "https://api.github.com/repos/ruby/ruby/issues/1673", "created_at": "2017-08-11 04:20:17", "comments": [{"reactions": {"+1": [1002893]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330474886", "text": "I've merged this after changing the method to an alias and adding a test to `test/test_set.rb`.\r\nThanks!", "created_at": "2017-09-19 08:55:50", "user": 10236, "id": 330474886}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1002893]}, "text": "This references https://bugs.ruby-lang.org/issues/13795\r\n\r\nEssentially, Hash#select and Hash#reject are currently inconsistent with the behavior of other Hash and Enumerable methods, returning Hashes instead of Arrays.", "labels": [], "number": 1674, "updated_at": "2017-08-12 14:30:18", "user": 22453855, "closed_at": "2017-08-12 14:30:18", "id": 249630246, "title": "Made Hash#select and Hash#reject return an Array instead of a Hash.", "url": "https://api.github.com/repos/ruby/ruby/issues/1674", "created_at": "2017-08-11 13:06:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there,\r\n\r\ntry this in your current ruby env:\r\n\r\n```ruby\r\nrequire 'tempfile'\r\nrequire 'open-uri'\r\n\r\ntemp_file = Tempfile.new\r\nopen(temp_file, 'a')\r\n```\r\n\r\nGet this:\r\n```\r\n/Users/~/.rvm/rubies/ruby-2.4.1/lib/ruby/2.4.0/tempfile.rb:142:in `open': wrong number of arguments (given 1, expected 0) (ArgumentError)\r\n  from /Users/~/.rvm/rubies/ruby-2.4.1/lib/ruby/2.4.0/open-uri.rb:31:in `open'\r\n  from debug.rb:5:in `<main>'\r\n```\r\n\r\nGreetings.", "labels": [], "number": 1675, "updated_at": "2017-08-22 08:17:50", "user": 3873515, "closed_at": "2017-08-22 08:17:50", "id": 250306094, "title": "Fixed bug: Using 'open-uri' with 'tempfile' causes an exception.", "url": "https://api.github.com/repos/ruby/ruby/issues/1675", "created_at": "2017-08-15 12:54:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323345370", "text": "As we don't accept patches on maintenance branches directly, please rebase on the trunk, and file an issue at https://bugs.ruby-lang.org/projects/ruby-trunk/issues/new.\r\n\r\nAnd, I'm uncertain if it's better to check by the arity of `open` method.\r\nAnother idea is to check by `to_io` before `open`.\r\n\r\n```diff\r\ndiff --git i/lib/open-uri.rb w/lib/open-uri.rb\r\nindex ce608a9296..b445b7bca5 100644\r\n--- i/lib/open-uri.rb\r\n+++ w/lib/open-uri.rb\r\n@@ -27,7 +27,18 @@\r\n   # We can accept URIs and strings that begin with http://, https:// and\r\n   # ftp://. In these cases, the opened file object is extended by OpenURI::Meta.\r\n   def open(name, *rest, &block) # :doc:\r\n-    if name.respond_to?(:open) && !name.method(:open).parameters.empty?\r\n+    if name.respond_to?(:to_io)\r\n+      io = name.to_io.dup\r\n+      if block\r\n+        begin\r\n+          yield io\r\n+        ensure\r\n+          io.close\r\n+        end\r\n+      else\r\n+        io\r\n+      end\r\n+    elsif name.respond_to?(:open)\r\n       name.open(*rest, &block)\r\n     elsif name.respond_to?(:to_str) &&\r\n           %r{\\A[A-Za-z][A-Za-z0-9+\\-\\.]*://} =~ name &&\r\n```\r\n", "created_at": "2017-08-18 12:52:50", "user": 16700, "id": 323345370}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323953846", "text": "Closing. Applied changed and feedback in #1680 .", "created_at": "2017-08-22 08:17:50", "user": 3873515, "id": 323953846}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "Improve performance of `Base64.urlsafe_encode64` by avoiding unnecessary memory allocations\r\n\r\nhttps://bugs.ruby-lang.org/issues/13827", "labels": ["Performance"], "number": 1676, "updated_at": "2018-02-23 03:07:37", "user": 1593860, "closed_at": "None", "id": 250346394, "title": "Improve performance of Base64.urlsafe_encode64", "url": "https://api.github.com/repos/ruby/ruby/issues/1676", "created_at": "2017-08-15 15:18:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322512505", "text": "@soylent Thank you for your PR. While this change will reduce string allocations for sure, I'm not sure how much this would help improve performance in a real-world application. Do you have any realistic benchmark script?", "created_at": "2017-08-15 16:09:18", "user": 386234, "id": 322512505}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322528036", "text": "I've been profiling a web service that I'm working on, and this patch makes a noticible improvement. Here are excerpts from the profiler reports.\r\n\r\nBefore\r\n\r\n```\r\nallocated memory by file\r\n-----------------------------------\r\n     13036  /Users/x/.rbenv/versions/2.4.0/lib/ruby/2.4.0/base64.rb\r\n...\r\n```\r\n\r\nAfter\r\n\r\n```\r\nallocated memory by file\r\n-----------------------------------\r\n      9152  /Users/x/.rbenv/versions/2.4.0/lib/ruby/2.4.0/base64.rb\r\n```\r\n\r\n30 % improvement", "created_at": "2017-08-15 17:09:22", "user": 1593860, "id": 322528036}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322529687", "text": "Could you share the entire benchmark script? It's impossible to judge without looking at actual benchmark scripts since that 30% improvement could only be 0.1% (or even less) of the whole memory allocation for a typical web operation.", "created_at": "2017-08-15 17:15:52", "user": 386234, "id": 322529687}, {"reactions": {"+1": [323891, 13723, 4083992]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322724789", "text": "In case of the web service I am working on this patch reduces the overall amount of memory allocated per request by 1.8 %. There are about 0.5-1M such requests every day. Unfortunately, I cannot share the source code of the service, and not sure what a typical web operation is.\r\n\r\nBut my point is to avoid creating garbage objects and reduce the GC time. Here is a simple benchmark\r\n\r\n```ruby\r\nrequire 'benchmark/ips'\r\nrequire 'base64'\r\nrequire 'securerandom'\r\n\r\nBenchmark.ips do |x|\r\n  string = SecureRandom.bytes(128)\r\n\r\n  x.report 'Base64.urlsafe_encode64' do |t|\r\n    t.times { Base64.urlsafe_encode64(string) }\r\n  end\r\nend\r\n```\r\n\r\nBefore\r\n\r\n```\r\nCalculating -------------------------------------                                         \r\nBase64.urlsafe_encode64                                                                   \r\n                        559.355k (± 3.2%) i/s -      2.805M in   5.019239s                \r\n```\r\n\r\nAfter\r\n\r\n```                      \r\nCalculating -------------------------------------\r\nBase64.urlsafe_encode64\r\n                        736.211k (± 2.5%) i/s -      3.721M in   5.057606s\r\n```\r\n\r\nI think, the results are good for such easy and trivial change.", "created_at": "2017-08-16 10:04:47", "user": 1593860, "id": 322724789}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322811602", "text": "Thanks for explaining, I'm convinced.\r\n\r\n@ko1 @nobu do you have any objections?", "created_at": "2017-08-16 15:37:05", "user": 386234, "id": 322811602}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322847066", "text": "It may help to also file an issue at https://bugs.ruby-lang.org/projects/ruby-trunk/issues?set_filter=1&tracker_id=2 or similar; it makes tracking easier and I think nobu likes to keep numbers assigned to changes to the ruby source via the official tracker at bugs.ruby-lang.org.", "created_at": "2017-08-16 17:44:27", "user": 13723, "id": 322847066}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323324947", "text": "@shevegen Thanks, I've added a link to the issue in Redmine in the description.", "created_at": "2017-08-18 11:01:50", "user": 1593860, "id": 323324947}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323810191", "text": "Let me briefly +1 the need for this improvement: Web applications are converging on base64url for moving binary data in JSON (e.g., see JWT), so this is increasingly performance-relevant.\r\n", "created_at": "2017-08-21 17:56:57", "user": 23118, "id": 323810191}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323813928", "text": "Please don't +1. We are aware of this request and going to merge this before the release of 2.5.0. Thanks for your patience!", "created_at": "2017-08-21 18:10:03", "user": 386234, "id": 323813928}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323919324", "text": "This could be even better.  Same-ish when padding is true, ~1.50x faster when padding is false.\r\n```ruby\r\n       if padding\r\n         str.tr!(\"+/\", \"-_\")\r\n       else\r\n         str.tr!(\"+/=\", \"-_\")\r\n       end\r\n```", "created_at": "2017-08-22 04:58:23", "user": 10236, "id": 323919324}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323929329", "text": "Oops, I was misunderstanding something, and didn't notice this issue was locked.  Please ignore my previous bogus comment.", "created_at": "2017-08-22 06:13:54", "user": 10236, "id": 323929329}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/323930509", "text": "> This could be even better. Same-ish when padding is true, ~1.50x faster when padding is false.\r\n\r\n❤️ ", "created_at": "2017-08-22 06:20:36", "user": 11493, "id": 323930509}], "assignees": [386234, 386234], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "In the \"Metacharacters and Escapes\" section of regexp.rdoc, it said that to match a backslash literally, it must be backslash-escaped, but the [rendered HTML](http://ruby-doc.org/core-2.4.1/doc/regexp_rdoc.html) showed three backslashes (`\\\\\\`). There should only be two backslashes (`\\\\`).\r\n\r\nThe backslashes in the example had to be escaped, so to be clear, the example code is:\r\n\r\n```\r\n/a\\\\b/.match('a\\\\b')\r\n```\r\n\r\nNote: These changes render correctly using RDoc 5.0.0.  They do *not* render correctly using RDoc 4.0.0 which erroneously renders the two backslashes in the paragraph as `<tt>\\</tt>`.", "labels": ["Doc"], "number": 1677, "updated_at": "2017-10-21 23:39:17", "user": 959381, "closed_at": "2017-10-21 23:39:17", "id": 250706706, "title": "In regexp doc, two backslashes match one literally", "url": "https://api.github.com/repos/ruby/ruby/issues/1677", "created_at": "2017-08-16 17:46:35", "comments": [], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "Fix two places in [regexp.rdoc](http://ruby-doc.org/core-2.4.1/doc/regexp_rdoc.html) where syntax highlighting wasn't occurring.", "labels": ["Doc"], "number": 1678, "updated_at": "2017-10-21 23:37:54", "user": 959381, "closed_at": "2017-10-21 23:37:54", "id": 250715781, "title": "Fix regexp doc syntax highlighting", "url": "https://api.github.com/repos/ruby/ruby/issues/1678", "created_at": "2017-08-16 18:19:58", "comments": [], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": ["Doc"], "number": 1679, "updated_at": "2017-10-21 23:36:40", "user": 959381, "closed_at": "2017-10-21 23:36:40", "id": 250719835, "title": "Remove errant \"the\" in gsub documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1679", "created_at": "2017-08-16 18:35:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/322963182", "text": "@jlmuir Thanks for all these awesome corrections! It may take time to merge all your PRs since this repository is actually a copy of the main svn repository. But I think we'll be able to merge them in a few days. Thanks!", "created_at": "2017-08-17 04:03:22", "user": 386234, "id": 322963182}], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is the successor of #1675 with the feedback of @nobu applied.\r\n\r\nTicket: https://bugs.ruby-lang.org/issues/13835", "labels": ["Bug"], "number": 1680, "updated_at": "2018-02-23 03:07:38", "user": 3873515, "closed_at": "None", "id": 251873905, "title": "Fixed bug: Using 'open-uri' with 'tempfile' causes an exception.", "url": "https://api.github.com/repos/ruby/ruby/issues/1680", "created_at": "2017-08-22 08:17:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324094612", "text": "Also, next time you open a PR, you can just rebase and force-push rather than creating a new PR. By doing so we can keep all the comments/reviews in one place, which makes it easier for others to track the discussion later.", "created_at": "2017-08-22 17:21:29", "user": 386234, "id": 324094612}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324111665", "text": "Sorry - first time contributor. I'm still learning. I wasn't aware that I can rebase cross branches but will definitely try this approach next time. ", "created_at": "2017-08-22 18:25:14", "user": 3873515, "id": 324111665}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324134175", "text": "@thorsteneckel not a problem at all! Feel free to ask any question here if you have any.", "created_at": "2017-08-22 19:55:56", "user": 386234, "id": 324134175}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324238625", "text": "Thanks @yuki24 ! Actually I have one - which is a bit off topic. To avoid the confusion for contributors and organizational overhead for maintainers we use the [GitHub templates](https://github.com/blog/2111-issue-and-pull-request-templates) in our project. We ask some basic questions and provide information (like e.g. use the trunk branch for PR etc.). This can be added as a comment block and won't be visible in the final PR / doesn't need to get removed. Do you think I should create a pull request with the points I've already learned? Just a thought 💡 ", "created_at": "2017-08-23 06:54:24", "user": 3873515, "id": 324238625}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324240975", "text": "Sie gehen heute per Post\n\nSent from my Windows 10 phone\n\nFrom: Thorsten\nSent: mercredi, 23 août 2017 08:54\nTo: ruby/ruby\nCc: Subscribed\nSubject: Re: [ruby/ruby] Fixed bug: Using 'open-uri' with 'tempfile' causes anexception. (#1680)\n\nThanks @yuki24 ! Actually I have one - which is a bit off topic. To avoid the confusion for contributors and organizational overhead for maintainers we use the GitHub templates in our project. We ask some basic questions and provide information (like e.g. use the trunk branch for PR etc.). This can be added as a comment block and won't be visible in the final PR / doesn't need to get removed. Do you think I should create a pull request with the points I've already learned? Just a thought 💡\n—\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n", "created_at": "2017-08-23 07:06:29", "user": 47452, "id": 324240975}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324485415", "text": "@thorsteneckel thanks for your suggestion! I'm not sure if we have ever discussed adding issue templates - I'll bring that up to other committers. But as you mentioned, this is off topic, so feel free to make a new issue.", "created_at": "2017-08-23 22:55:37", "user": 386234, "id": 324485415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324583592", "text": "The current behavior is documented as:\r\n\r\n> If the first argument responds to the 'open' method, 'open' is called on\r\n> it with the rest of the arguments.\r\n\r\nand checking the arity seems so ad-hoc to me. I would prefer another way if we are making changes.\r\n\r\nThe original `Kernel#open` (implementation is in `io.c`, `rb_f_open()`) first of all checks whether the first argument responds to `to_open` or not, and redirects to that if it does. How about making open-uri's `open` handle `to_open` and then implementing `Tempfile#to_open` that directly calls File.open?\r\n\r\nIn any case, the doc has to be updated as well.", "created_at": "2017-08-24 09:28:05", "user": 1033740, "id": 324583592}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": ["Doc"], "number": 1681, "updated_at": "2017-10-21 23:39:05", "user": 176234, "closed_at": "2017-10-21 23:38:40", "id": 251950362, "title": "Fix typo in comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1681", "created_at": "2017-08-22 13:06:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/329840881", "text": "@yuki24 You can commit such a clear fix", "created_at": "2017-09-15 17:04:11", "user": 13423, "id": 329840881}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338440045", "text": "thanks!", "created_at": "2017-10-21 23:39:05", "user": 2290461, "id": 338440045}], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1682, "updated_at": "2017-11-10 14:15:51", "user": 28232, "closed_at": "2017-10-21 15:20:46", "id": 252526310, "title": "Clarify return value for assignment methods", "url": "https://api.github.com/repos/ruby/ruby/issues/1682", "created_at": "2017-08-24 08:33:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Hash#include?` is 10% faster than `Hash#[]` because of the default value requires some checks. This is a micro optimization but somewhat useful because `Set#include?` is the most important method in `Set`\r\n\r\n---\r\n\r\nbenchmark program:\r\n\r\n```ruby\r\nrequire 'benchmark'\r\n\r\nhash = Hash.new(false)\r\n\r\nBenchmark.bm(10) do |x|\r\n  x.report('include?') do\r\n    10000000.times { hash[:foo] }\r\n  end\r\n\r\n  x.report('aref') do\r\n    10000000.times { hash.include?(:foo) }\r\n  end\r\nend\r\n```\r\n\r\nresults (Ruby v2.4.1):\r\n\r\n```\r\n                 user     system      total        real\r\ninclude?     0.640000   0.010000   0.650000 (  0.650482)\r\naref         0.760000   0.010000   0.770000 (  0.856820)\r\n```\r\n\r\n", "labels": [], "number": 1683, "updated_at": "2017-08-25 06:18:34", "user": 101800, "closed_at": "2017-08-25 06:18:28", "id": 252785047, "title": "optimize Set#include? not to use Hash#[]", "url": "https://api.github.com/repos/ruby/ruby/issues/1683", "created_at": "2017-08-25 02:55:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324827937", "text": "Actually, the current implementation is a result of micro optimization.\r\n\r\nhttps://bugs.ruby-lang.org/issues/10754\r\nhttps://gist.github.com/ismaelga/68bb3ea51b4742f65699\r\n\r\nSo, things have changed in the last couple of years?", "created_at": "2017-08-25 05:33:54", "user": 10236, "id": 324827937}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324832532", "text": "Interesting.\r\n\r\nAs of Ruby v2.4.1, `rb_hash_aref` does some extra work (calling `rb_hash_default_value()`) compared with `rb_hash_has_key`:\r\n\r\nhttps://github.com/ruby/ruby/blob/v2_4_1/hash.c\r\n\r\n```c\r\nVALUE\r\nrb_hash_aref(VALUE hash, VALUE key)\r\n{\r\n    st_data_t val;\r\n\r\n    if (!RHASH(hash)->ntbl || !st_lookup(RHASH(hash)->ntbl, key, &val)) {\r\n\treturn rb_hash_default_value(hash, key); // this is an extra work!\r\n    }\r\n    return (VALUE)val;\r\n}\r\n\r\nVALUE\r\nrb_hash_has_key(VALUE hash, VALUE key)\r\n{\r\n    if (!RHASH(hash)->ntbl)\r\n        return Qfalse;\r\n    if (st_lookup(RHASH(hash)->ntbl, key, 0)) {\r\n\treturn Qtrue;\r\n    }\r\n    return Qfalse;\r\n}\r\n```\r\n\r\nThis is true since v2.0.0, so `[]` should never faster than `#include?` (or `#has_key?`).\r\n\r\nI have run https://gist.github.com/ismaelga/68bb3ea51b4742f65699 and see that the result is not stable; when I swapped the order of Set and NewSet, the result might be changed.", "created_at": "2017-08-25 06:11:38", "user": 101800, "id": 324832532}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/324833471", "text": "Anyway, I think it is too small to consider. Thanks.", "created_at": "2017-08-25 06:18:25", "user": 101800, "id": 324833471}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This test is the only failure I'm seeing when running RubyGems/RubyGems tests on MinGW 2.4 and trunk.  It is not included in the Ruby test suite.\r\n\r\nDoes it fail on mswin?", "labels": [], "number": 1684, "updated_at": "2017-08-28 13:29:06", "user": 15081176, "closed_at": "2017-08-28 13:28:57", "id": 253055486, "title": "RubyGems test fail on windows", "url": "https://api.github.com/repos/ruby/ruby/issues/1684", "created_at": "2017-08-26 02:39:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/13167", "labels": [], "number": 1685, "updated_at": "2017-08-29 20:50:27", "user": 9540855, "closed_at": "2017-08-29 20:50:27", "id": 253172476, "title": "WIP: glob performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1685", "created_at": "2017-08-27 15:58:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "This fixes a head scratcher for me where calling `Net::HTTP.post` would silently throw away query parameters in the URL I was passing it", "labels": ["Feature", "Reviewed"], "number": 1686, "updated_at": "2017-09-20 04:13:25", "user": 1946610, "closed_at": "2017-09-15 16:54:58", "id": 253215606, "title": "lib/net/http.rb: include query parameters in Net::HTTP.post", "url": "https://api.github.com/repos/ruby/ruby/issues/1686", "created_at": "2017-08-28 03:08:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/325356624", "text": "I don't think the Windows failure is related, as I haven't changed any compiled files?", "created_at": "2017-08-28 13:42:13", "user": 1946610, "id": 325356624}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326721607", "text": "This should be good to merge 👍 Thanks!", "created_at": "2017-09-02 04:41:33", "user": 386234, "id": 326721607}], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1687, "updated_at": "2017-08-30 04:24:01", "user": 18634, "closed_at": "2017-08-30 04:20:45", "id": 253873919, "title": "[rhc] version.h : change version string", "url": "https://api.github.com/repos/ruby/ruby/issues/1687", "created_at": "2017-08-30 04:19:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/13849\r\n", "labels": [], "number": 1688, "updated_at": "2017-09-20 05:03:31", "user": 2290461, "closed_at": "2017-09-20 05:03:31", "id": 254193204, "title": "Show help messages of --dump", "url": "https://api.github.com/repos/ruby/ruby/issues/1688", "created_at": "2017-08-31 02:39:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326197961", "text": "> I've removed old --dump=help and --dump=usage, and changed --dump=help to show help messages of --dump.\r\n\r\n@nobu could you check this change is okay?", "created_at": "2017-08-31 05:59:53", "user": 2290461, "id": 326197961}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326309090", "text": "i want to get code reviews", "created_at": "2017-08-31 14:16:34", "user": 2290461, "id": 326309090}, {"reactions": {"+1": [13723]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326318545", "text": "This would be a great step forward for potential developers! 👍 ", "created_at": "2017-08-31 14:46:13", "user": 10236, "id": 326318545}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326478152", "text": "Based on a discussion at https://bugs.ruby-lang.org/issues/13849#note-17, I modified help message as below. So, no more `--help=dump`.\r\n\r\n```\r\n$ ruby --help\r\nUsage: ruby [switches] [--] [programfile] [arguments]\r\n  -0[octal]       specify record separator (\\0, if no argument)\r\n  -a              autosplit mode with -n or -p (splits $_ into $F)\r\n  -c              check syntax only\r\n  -Cdirectory     cd to directory before executing your script\r\n  -d, --debug     set debugging flags (set $DEBUG to true)\r\n  -e 'command'    one line of script. Several -e's allowed. Omit [programfile]\r\n  -Eex[:in], --encoding=ex[:in]\r\n                  specify the default external and internal character encodings\r\n  -Fpattern       split() pattern for autosplit (-a)\r\n  -i[extension]   edit ARGV files in place (make backup if extension supplied)\r\n  -Idirectory     specify $LOAD_PATH directory (may be used more than once)\r\n  -l              enable line ending processing\r\n  -n              assume 'while gets(); ... end' loop around your script\r\n  -p              assume loop like -n but print line also like sed\r\n  -rlibrary       require the library before executing your script\r\n  -s              enable some switch parsing for switches after script name\r\n  -S              look for the script using PATH environment variable\r\n  -T[level=1]     turn on tainting checks\r\n  -v, --verbose   print version number, then turn on verbose mode\r\n  -w              turn warnings on for your script\r\n  -W[level=2]     set warning level; 0=silence, 1=medium, 2=verbose\r\n  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\r\n  --copyright     print the copyright\r\n  --dump={insns|parsetree|...}[,...]\r\n                  dump debug information. see below for available dump list\r\n  --enable={gems|rubyopt|...}[,...], --disable={gems|rubyopt|...}[,...]\r\n                  enable or disable features. see below for available features\r\n  --external-encoding=encoding, --internal-encoding=encoding\r\n                  specify the default external or internal character encoding\r\n  --version       print the version\r\n  --help          show this message, -h for short message\r\nDump List:\r\n  insns           instruction sequences\r\n  yydebug         yydebug of yacc parser generator\r\n  parsetree       AST\r\n  parsetree_with_comment\r\n                  AST with comments \r\nFeatures:\r\n  gems            rubygems (default: enabled)\r\n  did_you_mean    did_you_mean (default: enabled)\r\n  rubyopt         RUBYOPT environment variable (default: enabled)\r\n  frozen-string-literal\r\n                  freeze all string literals (default: disabled)\r\n```", "created_at": "2017-09-01 03:27:58", "user": 2290461, "id": 326478152}, {"reactions": {"+1": [10236]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330745966", "text": "fixed via https://github.com/ruby/ruby/commit/c18503c25ab1d765603bee36d7683ef7a6085c65", "created_at": "2017-09-20 05:03:31", "user": 2290461, "id": 330745966}], "assignees": [16700, 16700], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Issue\r\n\r\n- String#scanf(\"%a\") incorrectly requires a sign on the (binary) exponent.\r\nhttps://bugs.ruby-lang.org/issues/13833\r\n\r\n### Implementation\r\n\r\n- When we use String#scanf(\"%a\"), it doesn't require a sign on the (binary) exponent similar to `Float` class.\r\n\r\nBefore : \r\n```\r\n>> \"0x1p+9\".scanf(\"%a\")\r\n=> [512.0]\r\n>> \"0x1p9\".scanf(\"%a\")\r\n=> [0.0]  \r\n```\r\n\r\nAfter :\r\n```\r\n>> \"0x1p+9\".scanf(\"%a\")\r\n=> [512.0]\r\n>> \"0x1p9\".scanf(\"%a\")\r\n=> [512.0]  \r\n```", "labels": [], "number": 1689, "updated_at": "2017-10-21 12:35:14", "user": 21029411, "closed_at": "2017-10-21 12:35:14", "id": 254234599, "title": "Fix Bug#13833 String#scanf(\"%a\") incorrectly requires a sign on the (binary) exponent", "url": "https://api.github.com/repos/ruby/ruby/issues/1689", "created_at": "2017-08-31 07:02:05", "comments": [{"reactions": {"+1": [21029411]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326216310", "text": "It looks like (decimal-)exponent-part shares the same bug. Would you mind fixing this as well?\r\n\r\n~~~\r\n$ ruby -rscanf -e'p \"1.e+10\".scanf(\"%a\")'\r\n[10000000000.0]\r\n$ ruby -rscanf -e'p \"1.e10\".scanf(\"%a\")'\r\n[1.0]\r\n~~~", "created_at": "2017-08-31 07:40:08", "user": 1033740, "id": 326216310}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326232099", "text": "I would fix (decimal-) exponent-part.\r\n\r\n```\r\n$ ruby -rscanf -e'p \"1.0e+10\".scanf(\"%a\")'\r\n[10000000000.0]\r\n$ ruby -rscanf -e'p \"1.0e10\".scanf(\"%a\")'\r\n[10000000000.0]\r\n```\r\n\r\n but it failed this test : \r\n\r\n```\r\nTestIOScanf#test_\"12.e23 45 string\"(\"%f %*d %s\") [/ruby/test/scanf/test_scanf.rb:303]:\r\n<[12.0, \"string\"]> expected but was\r\n<[1.2e+24, \"string\"]>.\r\n```\r\n\r\nThis failure happens in `/test/scanf/test_scanf.rb:225` : \r\n\r\n```[ \"%f %*d %s\", \"12.e23 45 string\", [\"12.e23\".to_f, \"string\"] ],```\r\n\r\nI think this cause is `String#to_f` : \r\n\r\n```\r\nirb(main):001:0> \"12.e23\".to_f\r\n=> 12.0\r\nirb(main):002:0> \"12.0e23\".to_f\r\n=> 1.2e+24\r\n```\r\n\r\nI think this behavior is not expected, so I fixed `test_scanf.rb` as below : \r\n\r\nBefore : \r\n\r\n```[ \"%f %*d %s\", \"12.e23 45 string\", [\"12.e23\".to_f, \"string\"] ]```\r\n\r\nAfter : \r\n\r\n``` [ \"%f %*d %s\", \"12.0e23 45 string\", [\"12.0e23\".to_f, \"string\"] ] ```", "created_at": "2017-08-31 08:48:27", "user": 21029411, "id": 326232099}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326503944", "text": "I discussed with @matz and ruby committers directly about this problem.\r\n\r\nThis includes two problems.\r\n\r\n1. String#scanf(\"%a\") (decimal-) exponent-part incorrectly requires a sign on the (binary) exponent.\r\n\r\nlike below : \r\n\r\n```\r\n$ ruby -rscanf -e'p \"1.e+10\".scanf(\"%a\")'\r\n[10000000000.0]\r\n$ ruby -rscanf -e'p \"1.e10\".scanf(\"%a\")'\r\n[1.0]\r\n```\r\n\r\n2. String#to_f parses `.e~~` as a method.\r\n\r\nlike below : \r\n\r\n```\r\nirb(main):001:0> \"12.e23\".to_f\r\n=> 12.0\r\nirb(main):002:0> \"12.0e23\".to_f\r\n=> 1.2e+24\r\n```\r\n\r\nI think this problem should be created as new issues.\r\n\r\nAfter the second problem is fixed, then the first problem should be fixed I think.\r\n\r\nSo I revert the change about only (decimal-) exponent-part, and I'll create new issues after merge this PR.", "created_at": "2017-09-01 06:48:21", "user": 21029411, "id": 326503944}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixed compilation error with VMDEBUG=3.\r\n\r\n```\r\n../ruby/vm_dump.c:292:12: error: no member named 'stack' in 'struct rb_thread_struct'\r\n        if ((th)->stack + (th)->stack_size > (VALUE *)(cfp + 1)) {\r\n            ~~~~  ^\r\n../ruby/vm_dump.c:292:26: error: no member named 'stack_size' in 'struct rb_thread_struct'\r\n        if ((th)->stack + (th)->stack_size > (VALUE *)(cfp + 1)) {\r\n                          ~~~~  ^\r\n2 errors generated.\r\nmake: *** [vm_dump.o] Error 1\r\n```", "labels": [], "number": 1690, "updated_at": "2017-09-06 03:54:22", "user": 5970737, "closed_at": "2017-09-06 03:54:22", "id": 254238371, "title": "Fix compilation error with VMDEBUG=3", "url": "https://api.github.com/repos/ruby/ruby/issues/1690", "created_at": "2017-08-31 07:16:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326261178", "text": "What's your environment?", "created_at": "2017-08-31 10:54:28", "user": 12301, "id": 326261178}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326317478", "text": "@hsbt These are some information about my environment.\r\n\r\nmacOS Sierra Version 10.12.6\r\n\r\n```\r\n$ uname -a\r\nDarwin MacBook-Pro.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n```\r\n\r\n```\r\n$ ./miniruby -v\r\nruby 2.5.0dev (2017-08-31) [x86_64-darwin16]\r\n```", "created_at": "2017-08-31 14:42:54", "user": 5970737, "id": 326317478}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/327365997", "text": "Thanks. I can reproduce this error with `./configure debugflags=\"-DVMDEBUG=3\"` on Arch linux and Ubuntu 16.04.", "created_at": "2017-09-06 03:43:05", "user": 12301, "id": 327365997}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My team (hackers.mu) have been working on a patch for tls 1.3 support in Ruby.\r\n \r\nCurrently this patch works for draft-18 of tls 1.3\r\n\r\nAttached are 2 files that have been part of my test scenario:\r\nrubytls13test.txt - can be run by ruby as a .rb - just specify the url and protocol. If it works, a tls 1.3 response will be received.\r\nresponse.txt - sample results  that I received.\r\n\r\nopenssl version - 1.1.1 dev\r\nruby version - trunk \r\n\r\nWe will keep working on the patch for draft 21, until tls 1.3 is finalised.\r\n\r\n[response.txt](https://github.com/ruby/ruby/files/1267745/response.txt)\r\n[rubytls13test.txt](https://github.com/ruby/ruby/files/1267751/rubytls13test.txt)\r\n", "labels": [], "number": 1691, "updated_at": "2017-08-31 16:29:55", "user": 4686416, "closed_at": "2017-08-31 16:29:55", "id": 254392376, "title": "Added support for TLS 1.3", "url": "https://api.github.com/repos/ruby/ruby/issues/1691", "created_at": "2017-08-31 16:21:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326350774", "text": "ext/openssl's master branch lives here: https://github.com/ruby/openssl", "created_at": "2017-08-31 16:29:46", "user": 29440, "id": 326350774}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326350804", "text": "ext/openssl is now developed at https://github.com/ruby/openssl. See https://github.com/ruby/openssl/pull/138 and https://github.com/ruby/openssl/pull/142 for related works.", "created_at": "2017-08-31 16:29:54", "user": 1033740, "id": 326350804}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": [], "number": 1692, "updated_at": "2017-09-02 01:09:25", "user": 42930, "closed_at": "2017-09-02 01:09:25", "id": 254398198, "title": "Update Hash#compact! documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1692", "created_at": "2017-08-31 16:42:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": [], "number": 1693, "updated_at": "2017-09-02 01:42:14", "user": 167012, "closed_at": "2017-09-02 01:42:14", "id": 254753275, "title": "Add Method#original_name code example", "url": "https://api.github.com/repos/ruby/ruby/issues/1693", "created_at": "2017-09-01 21:15:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently CRuby warns \"regexp literal in condition\" for the following code.\r\n\r\n```ruby\r\nif /re/\r\nend\r\n\r\nif /#{x}re/\r\nend\r\n```\r\n\r\n```bash\r\n$ ruby -cw test.rb\r\ntest.rb:1: warning: regex literal in condition\r\ntest.rb:3: warning: regex literal in condition\r\nSyntax OK\r\n```\r\n\r\nHowever, CRuby does not warn for the following code.\r\n\r\n```ruby\r\n!/re/\r\n!/#{x}re/\r\n```\r\n\r\n```bash\r\n$ ruby -cw test.rb\r\nSyntax OK\r\n```\r\n\r\nI guess that this reason is that `!` can be redefined.\r\nHowever, the meaning of `!/re/` does not change with redefining.\r\n\r\n```ruby\r\n$_ = 're'\r\n\r\np(!/re/)\r\n\r\nclass Regexp\r\n  def !\r\n    p('redefined!')\r\n  end\r\nend\r\n\r\np(!/re/)\r\n```\r\n\r\n```bash\r\n$ ruby test.rb\r\nfalse\r\nfalse\r\n```\r\n\r\nSo, CRuby should warn for `!/re/`.", "labels": [], "number": 1694, "updated_at": "2018-02-23 03:07:38", "user": 4361134, "closed_at": "None", "id": 254855763, "title": "Warn `!/re/`", "url": "https://api.github.com/repos/ruby/ruby/issues/1694", "created_at": "2017-09-03 05:57:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326787049", "text": "`p(!/re/)` is not equivalent to `p(/re/.!)`. The code you showed calls Integer#!.\r\n\r\n~~~\r\n$ ruby --dump=i -e'p(!//)'\r\n== disasm: #<ISeq:<main>@-e>============================================\r\n0000 trace            1                                               (   1)\r\n0002 putself          \r\n0003 putobject        //\r\n0005 getspecial       0, 0\r\n0008 opt_regexpmatch2 <callinfo!mid:=~, argc:1, ARGS_SIMPLE>, <callcache>\r\n0011 opt_not          <callinfo!mid:!, argc:0, ARGS_SIMPLE>, <callcache>\r\n0014 opt_send_without_block <callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE>, <callcache>\r\n0017 leave            \r\n$ ruby --dump=i -e'p(//.!)'\r\n== disasm: #<ISeq:<main>@-e>============================================\r\n0000 trace            1                                               (   1)\r\n0002 putself          \r\n0003 putobject        //\r\n0005 opt_not          <callinfo!mid:!, argc:0, ARGS_SIMPLE>, <callcache>\r\n0008 opt_send_without_block <callinfo!mid:p, argc:1, FCALL|ARGS_SIMPLE>, <callcache>\r\n0011 leave            \r\n~~~", "created_at": "2017-09-03 06:25:44", "user": 1033740, "id": 326787049}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326787473", "text": "> p(!/re/) is not equivalent to p(/re/.!). The code you showed calls Integer#!.\r\n\r\n\r\nYes, so i think CRuby should warns about `!/re/`, but it should not warn about `/re/.!`. And this change does not make it to warn about `/re/.!`.\r\n\r\n\r\n```ruby\r\n!/re/\r\n/re/.!\r\n```\r\n\r\n\r\n```bash\r\n$ ruby -W test.rb\r\ntest.rb:1: warning: regex literal in condition\r\n```", "created_at": "2017-09-03 06:40:23", "user": 4361134, "id": 326787473}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326789273", "text": "I wanted to show that the fact `p(!/re/)` won't call Regexp#! doesn't immediately mean it can be folded into `false` at compile-time. Given that String#=~ and Integer#! can still be redefined, I don't think it makes sense to show such a warning.", "created_at": "2017-09-03 07:33:49", "user": 1033740, "id": 326789273}, {"reactions": {"laugh": [4361134]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/326789285", "text": "Ah, I was misunderstanding. The intention of the warning 'regex literal in condition' was to warn users of the implicit matching against $_. Sorry for the noise.", "created_at": "2017-09-03 07:34:05", "user": 1033740, "id": 326789285}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331715633", "text": "I updated this pull-request. 1ca50fc\r\nThe commit changes warning message.\r\nbefore: \"regex literal in condition\"\r\nafter: \"the regex literal matches $_ implicitly\"\r\n\r\nBecause the warning message is hard to understand. ", "created_at": "2017-09-24 15:00:53", "user": 4361134, "id": 331715633}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331715666", "text": "@nobu ping", "created_at": "2017-09-24 15:01:21", "user": 4361134, "id": 331715666}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331761774", "text": "It seems reasonable to add a warning against `!/re/` expression, as an regexp literal in a boolean context.\r\nHowever, ruby/spec is backported to the upstream, so it should take care about previous versions.", "created_at": "2017-09-25 02:27:06", "user": 16700, "id": 331761774}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332106944", "text": "> However, ruby/spec is backported to the upstream, so it should take care about previous versions.\r\n\r\nI updated the spec to use `ruby_version_is` to check RUBY_VERSION in 6c55bb4eb56931a674fb38405d8e34821efbdf93 .", "created_at": "2017-09-26 07:09:16", "user": 4361134, "id": 332106944}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [167012, 29440, 3433835, 1020921]}, "text": "Insert __AFL_INIT() so that AFL can defer snapshotting process image.\r\nThis speeds up AFL from 75.57 exec/sec to 1225 exec/sec on my machine.\r\n\r\nAs of writing you need to compile using afl-clang-fast compiler\r\nfrontend, and run ruby with afl-fuzz.  Consult [AFL's document](https://github.com/mirrorer/afl/blob/master/llvm_mode/README.llvm) for more\r\ninfo.", "labels": [], "number": 1695, "updated_at": "2018-02-23 03:07:38", "user": 15377, "closed_at": "None", "id": 256157865, "title": "Support American Fuzzy Lop", "url": "https://api.github.com/repos/ruby/ruby/issues/1695", "created_at": "2017-09-08 06:55:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338830777", "text": "@shyouhei I tried to use your solution, but I don't seem to gain any speed. \r\nI get good speed improvements by using this modified version of `main.c`: \r\nhttps://gist.github.com/clod81/6f1b9f3e23ac2d8200fd2139503ce5d9\r\n\r\nTo be specific, I tried to compile Ruby version 2.4.2 with the change you suggested, as per: https://gist.github.com/clod81/531eda153b06eb3f75510e42a86f3166 , but again, no speed improvement there.", "created_at": "2017-10-24 00:00:57", "user": 1020921, "id": 338830777}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340389062", "text": "@clod81 Thank you.\r\n\r\nHowever your proposed `main.c` seems inappropriate because `ruby_options()` can run arbitrary ruby script including threads and/or child process creations, IO operations, and timer manipulations.  They are prohibited by the AFL document I mentioned above.  `__AFL_INIT();` must be inserted much earlier.\r\n\r\nAnd I guess that relates to the reason your test does not gain speed up; perhaps you specified some heavay-lifting command line options like `-r rails` ?", "created_at": "2017-10-30 09:28:59", "user": 15377, "id": 340389062}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340550844", "text": "@shyouhei no, I was just trying `ruby` alone. For example, when calling Marshal.load, with my setup it on my machine it was running with around 500 execs per sec, with this setup, around 10 or 20 (I will need to double check that). I will try to setup a docker image later today with your proposed setup, and we can try it out.", "created_at": "2017-10-30 19:03:12", "user": 1020921, "id": 340550844}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340565006", "text": "@shirosaki \r\n\r\nHere a docker image with the setup you suggested:\r\n- https://hub.docker.com/r/clod81/afl-ruby-2.4.2-persist-in-ruby.c\r\n\r\nThis one with my attempt:\r\n- https://hub.docker.com/r/clod81/afl-ruby2.4.2\r\n\r\nI've been using my setup to fuzz a few gems with C extensions, and I didn't have any issue with it\r\n", "created_at": "2017-10-30 19:55:38", "user": 1020921, "id": 340565006}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "## Before \r\n```ruby\r\nrequire 'kconv'\r\n\r\n@euc_str = \"\\\r\n\\xa5\\xaa\\xa5\\xd6\\xa5\\xb8\\xa5\\xa7\\xa5\\xaf\\xa5\\xc8\\xbb\\xd8\\xb8\\xfe\\\r\n\\xa5\\xd7\\xa5\\xed\\xa5\\xb0\\xa5\\xe9\\xa5\\xdf\\xa5\\xf3\\xa5\\xb0\\xb8\\xc0\\xb8\\xec\r\n\\x52\\x75\\x62\\x79\".force_encoding('EUC-JP')\r\n\r\n@utf8_str = \"\\\r\n\\xe3\\x82\\xaa\\xe3\\x83\\x96\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\\r\n\\xe3\\x82\\xaf\\xe3\\x83\\x88\\xe6\\x8c\\x87\\xe5\\x90\\x91\\\r\n\\xe3\\x83\\x97\\xe3\\x83\\xad\\xe3\\x82\\xb0\\xe3\\x83\\xa9\\xe3\\x83\\x9f\\\r\n\\xe3\\x83\\xb3\\xe3\\x82\\xb0\\xe8\\xa8\\x80\\xe8\\xaa\\x9e\r\n\\x52\\x75\\x62\\x79\".force_encoding('UTF-8')\r\n\r\n@sjis_str = \"\\\r\n\\x83\\x49\\x83\\x75\\x83\\x57\\x83\\x46\\x83\\x4e\\x83\\x67\\x8e\\x77\\x8c\\xfc\\\r\n\\x83\\x76\\x83\\x8d\\x83\\x4f\\x83\\x89\\x83\\x7e\\x83\\x93\\x83\\x4f\\x8c\\xbe\\x8c\\xea\r\n\\x52\\x75\\x62\\x79\".force_encoding('Shift_JIS')\r\n\r\n@jis_str = \"\\\r\n\\x1b\\x24\\x42\\x25\\x2a\\x25\\x56\\x25\\x38\\x25\\x27\\x25\\x2f\\x25\\x48\\x3b\\x58\\x38\\x7e\\\r\n\\x25\\x57\\x25\\x6d\\x25\\x30\\x25\\x69\\x25\\x5f\\x25\\x73\\x25\\x30\\x38\\x40\\x38\\x6c\\x1b\\x28\\x42\r\n\\x52\\x75\\x62\\x79\".force_encoding('ISO-2022-JP')\r\n\r\nputs @euc_str.encode(\"UTF-8\")\r\nputs @utf8_str\r\nputs @sjis_str.encode(\"UTF-8\")\r\nputs @jis_str.encode(\"UTF-8\")\r\n```\r\n\r\n* result\r\n\r\n```\r\nオブジェクト指向プログラミング言語\r\nRuby\r\nオブジェクト指向プログラミング言語\r\nRuby\r\nオブジェクト指向プログラミング言語\r\nRuby\r\nオブジェクト指向プログラミング言語\r\nRuby\r\n```\r\n\r\n## After \r\n```ruby\r\nrequire 'kconv'\r\n\r\n@euc_str = \"\\\r\n\\xa5\\xaa\\xa5\\xd6\\xa5\\xb8\\xa5\\xa7\\xa5\\xaf\\xa5\\xc8\\xbb\\xd8\\xb8\\xfe\\\r\n\\xa5\\xd7\\xa5\\xed\\xa5\\xb0\\xa5\\xe9\\xa5\\xdf\\xa5\\xf3\\xa5\\xb0\\xb8\\xc0\\xb8\\xec\\\r\n\\x52\\x75\\x62\\x79\".force_encoding('EUC-JP')\r\n\r\n@utf8_str = \"\\\r\n\\xe3\\x82\\xaa\\xe3\\x83\\x96\\xe3\\x82\\xb8\\xe3\\x82\\xa7\\\r\n\\xe3\\x82\\xaf\\xe3\\x83\\x88\\xe6\\x8c\\x87\\xe5\\x90\\x91\\\r\n\\xe3\\x83\\x97\\xe3\\x83\\xad\\xe3\\x82\\xb0\\xe3\\x83\\xa9\\xe3\\x83\\x9f\\\r\n\\xe3\\x83\\xb3\\xe3\\x82\\xb0\\xe8\\xa8\\x80\\xe8\\xaa\\x9e\\\r\n\\x52\\x75\\x62\\x79\".force_encoding('UTF-8')\r\n\r\n@sjis_str = \"\\\r\n\\x83\\x49\\x83\\x75\\x83\\x57\\x83\\x46\\x83\\x4e\\x83\\x67\\x8e\\x77\\x8c\\xfc\\\r\n\\x83\\x76\\x83\\x8d\\x83\\x4f\\x83\\x89\\x83\\x7e\\x83\\x93\\x83\\x4f\\x8c\\xbe\\x8c\\xea\\\r\n\\x52\\x75\\x62\\x79\".force_encoding('Shift_JIS')\r\n\r\n@jis_str = \"\\\r\n\\x1b\\x24\\x42\\x25\\x2a\\x25\\x56\\x25\\x38\\x25\\x27\\x25\\x2f\\x25\\x48\\x3b\\x58\\x38\\x7e\\\r\n\\x25\\x57\\x25\\x6d\\x25\\x30\\x25\\x69\\x25\\x5f\\x25\\x73\\x25\\x30\\x38\\x40\\x38\\x6c\\x1b\\x28\\x42\\\r\n\\x52\\x75\\x62\\x79\".force_encoding('ISO-2022-JP')\r\n\r\nputs @euc_str.encode(\"UTF-8\")\r\nputs @utf8_str\r\nputs @sjis_str.encode(\"UTF-8\")\r\nputs @jis_str.encode(\"UTF-8\")\r\n```\r\n\r\n* result\r\n\r\n```\r\nオブジェクト指向プログラミング言語Ruby\r\nオブジェクト指向プログラミング言語Ruby\r\nオブジェクト指向プログラミング言語Ruby\r\nオブジェクト指向プログラミング言語Ruby\r\n```\r\n\r\nref - https://github.com/rurema/doctree/pull/562#issuecomment-328822134\r\n\r\n## ref\r\nhttps://github.com/rurema/doctree/pull/562#issuecomment-328822134", "labels": [], "number": 1696, "updated_at": "2017-09-15 16:57:18", "user": 4787509, "closed_at": "2017-09-15 16:57:18", "id": 257495301, "title": "Fix test code of kconv", "url": "https://api.github.com/repos/ruby/ruby/issues/1696", "created_at": "2017-09-13 19:32:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Dir.children is available since Feature #11302. Find.find can\r\nuse of the new list (having no '.' neither '..' entries), making\r\nnow superflous an if statement.\r\n\r\nThis change can improve the performance of Find.find when the path\r\nhas lots of entries (thousands?).\r\n\r\nhttps://bugs.ruby-lang.org/issues/11302", "labels": [], "number": 1697, "updated_at": "2017-10-10 00:56:58", "user": 1037088, "closed_at": "2017-09-15 17:01:48", "id": 257602229, "title": "Find.find -> Use Dir.children instead of Dir.entries", "url": "https://api.github.com/repos/ruby/ruby/issues/1697", "created_at": "2017-09-14 05:45:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [16928]}, "text": "This feature is required for cases like below:\r\n\r\n```ruby\r\n    queue = Queue.new\r\n\r\n    10.times do\r\n      Thread.new do\r\n        queue << Task.new(at: Time.now + 30)\r\n      end\r\n    end\r\n\r\n    Thread.new do # executor\r\n      while true\r\n        if queue.peek.to_be_fired?(Time.now)\r\n          task = queue.pop\r\n          # processing...\r\n        end\r\n        sleep INTERVAL\r\n      end\r\n    end\r\n```\r\n\r\nI have many use cases to enqueue tasks, which have conditions to be fetched or not. `Queue#peek` provides possibility to handle such requirement.", "labels": [], "number": 1698, "updated_at": "2018-02-23 03:07:38", "user": 230654, "closed_at": "None", "id": 258368509, "title": "Add Queue#peek to fetch the head object in queue, without removing it.", "url": "https://api.github.com/repos/ruby/ruby/issues/1698", "created_at": "2017-09-18 04:32:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330145484", "text": "What if another thread `pop`s the `peek`’d object and the condition is invalid? I think this is only safe for a single consumer so the documentation should have a note", "created_at": "2017-09-18 07:25:04", "user": 9831, "id": 330145484}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330402857", "text": "@drbrain Correct - it's just for a single consumer.\r\n\r\nBut right now, I have another idea to get a solution for my problem by adding block argument to `Queue#pop`, instead of adding `Queue#peek`:\r\n\r\n```ruby\r\nThread.new do # executor\r\n  while true\r\n    if task = queue.pop{|task| task.to_be_fired?(Time.now) } # block is evaluated in mutex lock\r\n      # processing...\r\n    end\r\n    sleep INTERVAL\r\n  end\r\nend\r\n```\r\n\r\nThis idea can be applied for the case of multiple consumers.\r\nBut this fix requires to add mutex synchronization everywhere in code of `Queue`... Hmm.", "created_at": "2017-09-19 01:38:56", "user": 230654, "id": 330402857}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332087506", "text": "The approach to accept block (to pop items) requires too large patch (to rewrite almost entire `Queue`), so it looks unacceptable.\r\nI pushed another commit on this pull-request to add thread unsafe.\r\n\r\nWhat do you think about it?", "created_at": "2017-09-26 05:06:13", "user": 230654, "id": 332087506}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332124514", "text": "IMO that makes it sound *too* unsafe... by itself, it's no more \"unsafe\" than something like `q.pop unless q.empty?`\r\n\r\nThe above example is indeed unsafe for multiple consumers, but that's not being included in the documentation. (And could be fixed by the caller adding a separate consumer-only mutex around the peek-check-pop.)", "created_at": "2017-09-26 08:24:34", "user": 1034, "id": 332124514}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332140044", "text": "Isn't the non-block version `Queue.pop(true)` enough for this?\r\nThen you immediately get an exception if the queue was empty, or its pops an element if there was one available.", "created_at": "2017-09-26 09:24:05", "user": 168854, "id": 332140044}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332140442", "text": "We could also have a blocking version of `Queue#pop` with a timeout, that's easy to implement and safer.", "created_at": "2017-09-26 09:25:42", "user": 168854, "id": 332140442}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332158784", "text": "@eregon that doesn't put the item back onto the head of the queue if the condition is false\r\n\r\n(a timeout on `Queue#pop` would certainly be nice -- but it seems unrelated to this use case)", "created_at": "2017-09-26 10:40:53", "user": 1034, "id": 332158784}, {"reactions": {"+1": [3461316]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332173121", "text": "Right, I missed that part.\r\n\r\nIn such a case which only works with one consumer, maybe the simplest is just to use a custom class using an Array and a Mutex, which synchronizes push and pop:\r\n```ruby\r\ndef push(e)\r\n  @mutex.synchronize do\r\n    @array.push(e)\r\n  end\r\nend\r\n\r\ndef pop\r\n  @mutex.synchronize do\r\n    unless @array.empty?\r\n      if yield @array.first\r\n        @array.shift\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\nThat seems better than adding a method to Queue that would only make sense when there is only one consumer.", "created_at": "2017-09-26 11:46:01", "user": 168854, "id": 332173121}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`Mutex` has `#locked?` and `#owned?`, but `MonitorMixin` (and `Monitor`) doesn't have it.\r\nThese methods make easy to write code to unlock monitors only when it's needed, or to log states of objects.\r\n\r\n```ruby\r\n    def prepare\r\n      @buffers = @ids.map{|id| storage.get(id) }\r\n      @buffers.sort!\r\n      @buffers.each do |buffer|\r\n        buffer.try_mon_enter # buffer includes MonitorMixin\r\n      end\r\n    end\r\n\r\n    def free\r\n      @buffers.reverse.each do |buffer|\r\n        buffer.mon_exit if buffer.mon_owned?\r\n      end\r\n    end\r\n\r\n    log.info(\"inconsistent buffer state\", locked: buffer.locked?, owned: buffer.owned?)\r\n```\r\n", "labels": [], "number": 1699, "updated_at": "2017-09-20 01:41:52", "user": 230654, "closed_at": "2017-09-20 01:41:52", "id": 258373844, "title": "Add MonitorMinx#mon_locked? and #mon_owned? to check states of objects", "url": "https://api.github.com/repos/ruby/ruby/issues/1699", "created_at": "2017-09-18 05:33:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Prefer 'Class.new' over 'Class::new' in documentation.", "labels": [], "number": 1700, "updated_at": "2017-09-25 08:54:00", "user": 1250153, "closed_at": "2017-09-25 06:07:01", "id": 258490674, "title": "Updated docs of ThreadGroup", "url": "https://api.github.com/repos/ruby/ruby/issues/1700", "created_at": "2017-09-18 14:01:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330818891", "text": "https://bugs.ruby-lang.org/issues/13915", "created_at": "2017-09-20 11:03:48", "user": 1250153, "id": 330818891}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`BasicObject` instances do not respond to `respond_to?` or `method`, there is no point in implementing `respond_to_missing?`.\r\n", "labels": [], "number": 1701, "updated_at": "2017-10-06 21:40:04", "user": 3387, "closed_at": "2017-09-18 19:20:51", "id": 258497841, "title": "Remove respond_to_missing? from BasicObject docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1701", "created_at": "2017-09-18 14:20:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330328672", "text": "`respond_to_missing?` is called by the interpreter prior to `method_missing`.", "created_at": "2017-09-18 19:20:51", "user": 16700, "id": 330328672}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330333531", "text": "@nobu then maybe there are docs missing for it?\r\n\r\nI tried this\r\n\r\n```ruby\r\nclass C < BasicObject\r\n  def method_missing(*)\r\n    1\r\n  end\r\n\r\n  def respond_to_missing?(*)\r\n    $stdout.puts :called\r\n    true\r\n  end\r\nend\r\n\r\np C.new.foo\r\n```\r\n\r\nand do not see the trace:\r\n\r\n```\r\n$ ruby foo.rb\r\n1\r\n```\r\n\r\nHow can I see it being invoked?", "created_at": "2017-09-18 19:39:54", "user": 3387, "id": 330333531}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/330447486", "text": "Hi again @nobu! I have read the test suite and have done tests, and they seem to match the rationale for the patch.\r\n\r\nAs far as I can see `respond_to_missing?` is called on `Object` instances according to these rules:\r\n\r\n* When calling `respond_to?`, provided `respond_to?` is not overridden.\r\n* When calling `method`, regardless of whether `respond_to?` or `method_missing` are overridden.\r\n\r\nIn particular, invoking a method that triggers `method_missing`, overridden or not, does not seem to trigger any of the two `respond_*` predicates. Also double-checked in `BasicObject`.\r\n\r\nNow, `BasicObject` instances do not respond to `respond_to?` or `method`, that is the point of the patch.\r\n\r\nDo you see any code path missing in the list above and that explains needing to implement `respond_to_missing?` in subclasses of `BasicObject` like the one in the patched docs?\r\n", "created_at": "2017-09-19 06:56:33", "user": 3387, "id": 330447486}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/334796289", "text": "Hey @nobu! I replied while RubyKaigi was happening and maybe you missed those remarks. Let me comment just in case. Of course if it was not missing or you cannot address them yet is fine, any time will be good.", "created_at": "2017-10-06 15:56:19", "user": 3387, "id": 334796289}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/334827559", "text": "@fxn `defined? C.new.foo`", "created_at": "2017-10-06 17:59:17", "user": 1034, "id": 334827559}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/334849667", "text": "@matthewd can't see it called, could you share the entire script?", "created_at": "2017-10-06 19:33:30", "user": 3387, "id": 334849667}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/334868859", "text": "```ruby\r\nclass C < BasicObject\r\n  def method_missing(*)\r\n    1\r\n  end\r\n\r\n  def respond_to_missing?(*)\r\n    $stdout.puts :called\r\n    true\r\n  end\r\nend\r\n\r\np defined?(C.new.foo)\r\n```\r\n\r\n```\r\n% ruby foo.rb\r\ncalled\r\n\"method\"\r\n```", "created_at": "2017-10-06 21:00:19", "user": 1034, "id": 334868859}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/334876796", "text": "@matthewd yes thanks. It's interesting that if `respond_to?` is defined, it is also called in addition to `respond_to_missing?`:\r\n\r\n```ruby\r\nclass C < BasicObject\r\n  def method_missing(*)\r\n    $stdout.puts :method_missing\r\n  end\r\n\r\n  def respond_to?(*)\r\n    $stdout.puts :respond_to?\r\n    true\r\n  end\r\n  \r\n  def respond_to_missing?(*args)\r\n    $stdout.puts :respond_to_missing?\r\n    true\r\n  end\r\nend\r\n\r\np defined? C.new.foo\r\n\r\n__END__\r\nrespond_to?\r\nrespond_to_missing?\r\n\"method\"\r\n```\r\n\r\nI wonder if those calls are intentional or maybe `defined?` is not specialized for `BasicObject` as an overlook, since the rest of the use cases are not present (again, AFAICT).\r\n", "created_at": "2017-10-06 21:40:04", "user": 3387, "id": 334876796}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Switch Appveyor to use ruby 2.4 for initial ruby scripts", "labels": [], "number": 1702, "updated_at": "2017-09-25 17:39:43", "user": 15081176, "closed_at": "2017-09-25 17:39:43", "id": 258680345, "title": "Switch appveyor.yml to use 2.4", "url": "https://api.github.com/repos/ruby/ruby/issues/1702", "created_at": "2017-09-19 02:55:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\r\n\r\nAt the RubyKaigi nobu notified me that sample/trick2013/yhara is broken in ruby trunk.\r\nWith this patch, sample/trick2013/yhara/entry.rb works with ruby trunk too.", "labels": [], "number": 1703, "updated_at": "2017-09-22 11:22:39", "user": 12285, "closed_at": "2017-09-22 11:22:39", "id": 259763483, "title": "Update trick2013/yhara for Ruby 2.5", "url": "https://api.github.com/repos/ruby/ruby/issues/1703", "created_at": "2017-09-22 09:56:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "nucomp_abs never returns negative value.", "labels": [], "number": 1704, "updated_at": "2017-10-04 10:04:36", "user": 60238, "closed_at": "2017-09-29 15:10:32", "id": 259972403, "title": "Fix Complex#infinite? return value", "url": "https://api.github.com/repos/ruby/ruby/issues/1704", "created_at": "2017-09-23 01:20:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331606109", "text": "Adding a test would help understand how the current implementation is wrong.", "created_at": "2017-09-23 02:57:57", "user": 10236, "id": 331606109}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331612225", "text": "Maybe, existing tests will already enough. Both real part and imaginary part have finite positive, finite negative, infinite positive, infinite negative pattern.\r\n\r\n* https://github.com/ruby/ruby/blob/v2_4_2/test/ruby/test_complex.rb#L837-L850\r\n\r\nI only removed f < 0 case that will be never run. Because nucomp_abs(Complex#abs) is never taken negative value. The root of Complex#real ** 2 + Complex#imag **2 will always positive.\r\n\r\n* https://en.wikipedia.org/wiki/Complex_number#Absolute_value_and_argument\r\n", "created_at": "2017-09-23 05:34:10", "user": 60238, "id": 331612225}, {"reactions": {"heart": [60238]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/331613219", "text": "I agree with @sho-h, no test will cover this change since it is based on a path that is never taken.", "created_at": "2017-09-23 06:00:23", "user": 11094484, "id": 331613219}, {"reactions": {"heart": [60238]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/333153386", "text": "fixed via https://github.com/ruby/ruby/commit/ea5e91b51fd7b2957fd4febc57be1d61f6ca318f", "created_at": "2017-09-29 15:10:32", "user": 2290461, "id": 333153386}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ticket: https://bugs.ruby-lang.org/issues/13925", "labels": [], "number": 1705, "updated_at": "2017-09-23 14:24:46", "user": 167012, "closed_at": "2017-09-23 07:26:05", "id": 259988066, "title": "Dup String #parittion/#rpartition/#split return value", "url": "https://api.github.com/repos/ruby/ruby/issues/1705", "created_at": "2017-09-23 06:43:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When reading `doc/extension.ja.rdoc`, readers will prefer a reference of itself.", "labels": [], "number": 1706, "updated_at": "2017-09-26 20:54:51", "user": 11524757, "closed_at": "2017-09-26 20:49:06", "id": 260763865, "title": "[DOC]Improve documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1706", "created_at": "2017-09-26 20:44:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332331178", "text": "I'm sorry, Appendix D is not fully translated into Japanese.\r\nSo `doc/extension.rdoc` is preferred.", "created_at": "2017-09-26 20:49:06", "user": 11524757, "id": 332331178}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "> rb_data_type_t is defined like this. \r\n\r\nThe snippet needs `typedef` declaration, because \"this\" is a definition of `rb_data_type_struct`, not `rb_data_type_t`.", "labels": [], "number": 1707, "updated_at": "2017-09-26 23:29:11", "user": 11524757, "closed_at": "2017-09-26 23:29:11", "id": 260773770, "title": "[DOC] Show rb_data_type_t definition", "url": "https://api.github.com/repos/ruby/ruby/issues/1707", "created_at": "2017-09-26 21:19:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1708, "updated_at": "2017-09-27 22:55:08", "user": 15081176, "closed_at": "2017-09-27 21:56:43", "id": 260986472, "title": "Appveyor.yml - Remove & replace DevKit path, change zlib link", "url": "https://api.github.com/repos/ruby/ruby/issues/1708", "created_at": "2017-09-27 14:03:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1192122]}, "text": "https://bugs.ruby-lang.org/issues/13884\r\n\r\nVery often, arrays are used to filter parameters and to select interesting items from 2 collections and very often these collections are small enough, for example:\r\n\r\n```ruby\r\nSAFE_COLUMNS = [:id, :title, :created_at]\r\n\r\ndef columns\r\n  @all_columns & SAFE_COLUMNS\r\nend\r\n```\r\n\r\nIn this patch, I got rid of unnecessary memory allocations for small arrays when \"and\", \"or\" and \"diff\" operations are performed.\r\n\r\nResults\r\n\r\n```\r\n$ SMALL_ARRAY_MIN=1 SMALL_ARRAY_MAX=8 SMALL_ARRAY_ITERATIONS=10000 ./ruby benchmark/driver.rb --pattern='array_small' --executables='HEAD\r\n::../ruby_dest/bin/ruby; PATCH::./ruby;' -r 10\r\n\r\n-----------------------------------------------------------\r\nbenchmark results:\r\nExecution time (sec)\r\nname    HEAD    PATCH\r\narray_small_and 0.615   0.263\r\narray_small_diff        0.676   0.282\r\narray_small_or  0.953   0.463\r\n\r\nSpeedup ratio: compare with the result of `HEAD' (greater is better)\r\nname    PATCH\r\narray_small_and 2.343\r\narray_small_diff        2.392\r\narray_small_or  2.056\r\n\r\nLog file: bmlog-20170911-205052.26491.tsv\r\n```\r\n\r\n```\r\n$ SMALL_ARRAY_MIN=9 SMALL_ARRAY_MAX=16 SMALL_ARRAY_ITERATIONS=10000 ./ruby benchmark/driver.rb --pattern='array_small' --executables='HEA\r\nD::../ruby_dest/bin/ruby; PATCH::./ruby;' -r 10\r\n\r\n-----------------------------------------------------------\r\nbenchmark results:\r\nExecution time (sec)\r\nname    HEAD    PATCH\r\narray_small_and 1.429   1.005\r\narray_small_diff        1.493   0.878\r\narray_small_or  1.672   1.152\r\n\r\nSpeedup ratio: compare with the result of `HEAD' (greater is better)\r\nname    PATCH\r\narray_small_and 1.422\r\narray_small_diff        1.700\r\narray_small_or  1.452\r\n\r\nLog file: bmlog-20170911-205459.26568.tsv\r\n```", "labels": [], "number": 1709, "updated_at": "2017-09-29 09:49:09", "user": 1196822, "closed_at": "2017-09-29 09:49:09", "id": 261361761, "title": "Reduce number of memory allocations for \"and\", \"or\" and \"diff\" operations on small arrays", "url": "https://api.github.com/repos/ruby/ruby/issues/1709", "created_at": "2017-09-28 15:27:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332876678", "text": "fixing test", "created_at": "2017-09-28 15:39:45", "user": 1196822, "id": 332876678}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/332901607", "text": "There are specs failed that check that hash called on an element, should I fix that?", "created_at": "2017-09-28 17:07:37", "user": 1196822, "id": 332901607}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/333083341", "text": "Closed by https://github.com/ruby/ruby/commit/9bc73cd81f29ab9d8fb6e7bbae0322110ecd3faa", "created_at": "2017-09-29 09:49:09", "user": 1196822, "id": 333083341}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With bundler gem as standard library, `bundle gem` command fails because these files are absent.\r\n\r\n* newgem/README.md.tt\r\n* newgem/.travis.yml.tt\r\n\r\n```\r\n~/s/github.com ❯❯❯ ruby -v\r\nruby 2.5.0dev (2017-10-05 trunk 60120) [x86_64-darwin16]\r\n```\r\n\r\n```\r\n~/s/github.com ❯❯❯ bundle gem test\r\nThe latest bundler is 1.16.0.pre.2, but you are currently running 1.15.4.\r\nTo update, run `gem install bundler --pre`\r\nCreating gem 'test'...\r\n      create  test/Gemfile\r\n      create  test/lib/test.rb\r\n      create  test/lib/test/version.rb\r\n      create  test/test.gemspec\r\n      create  test/Rakefile\r\nCould not find \"newgem/README.md.tt\" in any of your source paths. Your current source paths are:\r\n/Users/gyugyu/.rbenv/versions/2.5.0-dev/lib/ruby/2.5.0/bundler/templates\r\n```\r\n\r\nTo avoid this, this pull request contains following changes.\r\n\r\n* remove `README*` entry from `no_install` that there is no `README*` files except `README.md.tt`\r\n* rename `.travis.yml.tt` to `travis.yml.tt` like `gitignore.tt`", "labels": [], "number": 1710, "updated_at": "2017-10-05 08:33:03", "user": 1888328, "closed_at": "2017-10-05 08:33:03", "id": 263006450, "title": "Fix bundle gem command", "url": "https://api.github.com/repos/ruby/ruby/issues/1710", "created_at": "2017-10-05 05:11:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Came across this when working on adding Appveyor to a gem.", "labels": [], "number": 1711, "updated_at": "2017-10-06 01:30:14", "user": 15081176, "closed_at": "2017-10-06 00:16:05", "id": 263118246, "title": "No more ubygems in trunk", "url": "https://api.github.com/repos/ruby/ruby/issues/1711", "created_at": "2017-10-05 13:05:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because it's the same version of Rubygems bundles. But If users update rubygems like 2.8.0, It probably broke bundled bundler. I have no solution yet when it happened.", "labels": [], "number": 1712, "updated_at": "2017-12-06 01:49:37", "user": 12301, "closed_at": "2017-12-06 01:49:34", "id": 263402657, "title": "[WIP] Removed duplicated Molinillo-0.5.7", "url": "https://api.github.com/repos/ruby/ruby/issues/1712", "created_at": "2017-10-06 10:32:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1713, "updated_at": "2017-10-21 23:52:28", "user": 987638, "closed_at": "2017-10-21 14:12:10", "id": 264133287, "title": "Removed obsoleted safe level checks", "url": "https://api.github.com/repos/ruby/ruby/issues/1713", "created_at": "2017-10-10 08:03:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1147484, 14068, 10487528]}, "text": "OpenStruct need minimal changes to switch to # frozen_string_literal: true\r\nThe only method with mutable strings is `inspect`.\r\n\r\nBug #14000: https://bugs.ruby-lang.org/issues/14000", "labels": [], "number": 1714, "updated_at": "2018-02-14 08:59:45", "user": 1037088, "closed_at": "2017-10-24 18:19:20", "id": 264510168, "title": "OpenStruct: support for frozen string", "url": "https://api.github.com/repos/ruby/ruby/issues/1714", "created_at": "2017-10-11 09:09:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/335827426", "text": "There was one `\"=\"` that will now be frozen with this change. This also introduces a `','` which will be frozen.", "created_at": "2017-10-11 14:23:07", "user": 14068, "id": 335827426}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/339084058", "text": "Thanks for the PR!\r\n\r\nIt is now merged. I adapted it a bit to avoid returning a frozen string. I highly doubt there's anyone calling `to_s` or `inspect` on an `OpenStruct` and then mutating the result but better be safe than sorry. I think the resulting code is quite readable :smile:\r\n\r\nLet me know if I've missed anything.", "created_at": "2017-10-24 18:19:20", "user": 33770, "id": 339084058}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Per the iTunes spec: https://help.apple.com/itc/podcasts_connect/#/itcb54353390\r\n>If you specify `yes`, `explicit`, or `true`, indicating the presence of explicit content, the iTunes Store displays an Explicit parental advisory graphic for your podcast.\r\n\r\n>If you specify `clean`, `no`, or `false`, indicating that none of your podcast episodes contain explicit language or adult content, the iTunes Store displays a Clean parental advisory graphic for your podcast.\r\n\r\nCurrently the parser only handles the values of `true` or `yes` for explicit and `false` or `clean` for clean.", "labels": [], "number": 1715, "updated_at": "2017-10-22 16:10:55", "user": 5439589, "closed_at": "2017-10-22 16:10:55", "id": 265457748, "title": "Properly parse all allowed iTunes RSS explicit field values", "url": "https://api.github.com/repos/ruby/ruby/issues/1715", "created_at": "2017-10-14 02:27:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338489046", "text": "Ah, sorry. I missed this.\r\nI fixed this with other implementation. The spec says `yes`, `explicit`, `true`, `clean`, `no` and `false` are valid values but your change supports only `explicit`, `yes`, `clean` and `no`.\r\n\r\nThanks for your report. I didn't notice it when I added `<itunes:>` support.", "created_at": "2017-10-22 16:10:55", "user": 27350, "id": 338489046}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "RDoc doesn't understand an asterisk inside the plus markers. Moving them\r\nout of the markers looks better.", "labels": [], "number": 1716, "updated_at": "2017-10-17 05:42:18", "user": 1250153, "closed_at": "2017-10-16 23:12:47", "id": 265735215, "title": "Layout fixes in rdoc of lib/tempfile.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1716", "created_at": "2017-10-16 11:24:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/336858546", "text": "https://bugs.ruby-lang.org/issues/14019", "created_at": "2017-10-16 11:26:34", "user": 1250153, "id": 336858546}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/336895859", "text": "I think it should be `<code>...</code>` instead of moving out.", "created_at": "2017-10-16 14:00:14", "user": 16700, "id": 336895859}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/336911618", "text": "Yes, that looks better, updated the PR (couldn't find that on the rdoc info page)", "created_at": "2017-10-16 14:51:40", "user": 1250153, "id": 336911618}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I wrote documentation for `chomp` option for some methods.\r\nIt already implemented to some methods from https://github.com/ruby/ruby/commit/a2144bd72aad7c25e160cf283f957d59fe7c90b2 , But documentation is nothing.", "labels": [], "number": 1717, "updated_at": "2017-10-23 01:38:09", "user": 935310, "closed_at": "2017-10-21 16:13:00", "id": 266035727, "title": "Add documentation for `chomp` option", "url": "https://api.github.com/repos/ruby/ruby/issues/1717", "created_at": "2017-10-17 08:29:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tested locally on MinGW, passes.  Check for Travis & and Appveyor mswin", "labels": [], "number": 1718, "updated_at": "2017-10-19 01:02:04", "user": 15081176, "closed_at": "2017-10-19 01:02:04", "id": 266606286, "title": "Webrick server SSL patch", "url": "https://api.github.com/repos/ruby/ruby/issues/1718", "created_at": "2017-10-18 19:02:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/337769655", "text": "See cda27e1", "created_at": "2017-10-19 01:02:04", "user": 15081176, "id": 337769655}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### What does this PR do?\r\n \r\n  URI uses minimal representation for file, eg:\r\n  URI(\"file:///etc/hosts\").to_s == \"file:/etc/hosts\"\r\n  instead of the traditional one.\r\n  This patch introduces a class for the file:// scheme\r\n  which adopts the traditional URI file representation.", "labels": [], "number": 1719, "updated_at": "2018-03-15 16:52:44", "user": 1140844, "closed_at": "2018-03-15 16:52:44", "id": 267236722, "title": "Fixes #14035 URI::File use traditional representation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1719", "created_at": "2017-10-20 16:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338487699", "text": "@yui-knk It seems that one appveyor gate is broken (I didn't modify that file).\r\nIs that a temporary error?\r\n```\r\n        1 file(s) copied.\r\ncompiling parse.c\r\nparse.c\r\n../parse.y(9450) : error C2059: syntax error : '='\r\n../parse.y(9451) : warning C4003: not enough actual parameters for macro 'RNODE'\r\n../parse.y(9451) : error C2059: syntax error : ')'\r\n../parse.y(9452) : warning C4033: 'new_cdecl_gen' must return a value\r\n../parse.y(9455) : error C2143: syntax error : missing '{' before '*'\r\n../parse.y(9457) : error C2371: 'new_scope_gen' : redefinition; different basic types\r\n        ../parse.y(524) : see declaration of 'new_scope_gen'\r\n../parse.y(9460) : warning C4133: 'return' : incompatible types - from 'NODE *' to 'int *'\r\nNMAKE : fatal error U1077: '\"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\BIN\\amd64\\cl.EXE\"' : return code '0x2'\r\nStop.\r\nCommand exited with code 2\r\n```", "created_at": "2017-10-22 15:52:18", "user": 1140844, "id": 338487699}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "All changes are for reducing changes required to introduce JIT compiler. This patch would reduce risk of its introduction and conflicts on rebase against upstream.\r\n\r\nUnlike functions that can be inlined by header, those variables must be shared with JIT-ed code in the future.", "labels": [], "number": 1720, "updated_at": "2017-10-21 06:35:43", "user": 3138447, "closed_at": "2017-10-21 06:23:42", "id": 267352778, "title": "Export symbols of shared variables in VM", "url": "https://api.github.com/repos/ruby/ruby/issues/1720", "created_at": "2017-10-21 05:38:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change is for future JIT compiler introduction.\r\nIts purpose is the same as https://github.com/ruby/ruby/pull/1720.", "labels": [], "number": 1721, "updated_at": "2017-10-21 07:35:19", "user": 3138447, "closed_at": "2017-10-21 06:58:05", "id": 267355552, "title": "vm.c, vm_insnhelper.h: export symbols of VM serials", "url": "https://api.github.com/repos/ruby/ruby/issues/1721", "created_at": "2017-10-21 06:40:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I often feel that C API documents are lacked in C source codes, especially for static functions.\r\n\r\nWith https://bugs.ruby-lang.org/issues/904, make install-capi target was introduced to generate c api documents using Doxygen.\r\nHowever, I feel that it is not utilized among C Ruby developers.\r\n\r\nI propose to turn EXTRACT_STATIC = YES flag of Doxygen to YES, and write document comments for static functions as much as possible.\r\n\r\nFor https://bugs.ruby-lang.org/issues/14037", "labels": [], "number": 1722, "updated_at": "2018-02-23 03:07:39", "user": 2290461, "closed_at": "None", "id": 267359519, "title": "Doxyfile: EXTRACT_STATIC: YES", "url": "https://api.github.com/repos/ruby/ruby/issues/1722", "created_at": "2017-10-21 07:46:55", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1723, "updated_at": "2018-02-23 03:07:39", "user": 2290461, "closed_at": "None", "id": 267379565, "title": "vm_core.h: add doxygen document comments", "url": "https://api.github.com/repos/ruby/ruby/issues/1723", "created_at": "2017-10-21 13:19:01", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [12301]}, "text": "## Usage\r\nWith this change, for following usage,\r\n\r\n```\r\nruby ./benchmark/driver.rb -e \"trunk::/Users/k0kubun/.rbenv/versions/trunk/bin/ruby;2.4.2::/Users/k0kubun/.rbenv/versions/2.4.2/bin/ruby\" -p app_erb\r\n```\r\n\r\nwe can simply write as:\r\n\r\n```\r\nruby ./benchmark/driver.rb --rbenv \"trunk;2.4.2\" -p app_erb\r\n```", "labels": [], "number": 1724, "updated_at": "2017-10-21 15:46:30", "user": 3138447, "closed_at": "2017-10-21 15:40:34", "id": 267388963, "title": "driver.rb: add option to specify target with rbenv", "url": "https://api.github.com/repos/ruby/ruby/issues/1724", "created_at": "2017-10-21 15:17:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338409841", "text": "BTW you don't need to specify `-d`.", "created_at": "2017-10-21 15:21:11", "user": 9558, "id": 338409841}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338409876", "text": "Ah I got it", "created_at": "2017-10-21 15:21:54", "user": 3138447, "id": 338409876}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338410247", "text": "I don't have any objection for this feature.\r\n\r\nNow we use `-e` or `--executables [EXECS]` to specify executables.\r\nI'm afraid that `--rbenv` option specifier is ambiguous.\r\nHow about to use rbenv if path is not given?\r\nlike: `./benchmark/driver.rb -e 2.4.1 -e trunk`", "created_at": "2017-10-21 15:27:32", "user": 9558, "id": 338410247}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/338411019", "text": "I talked with ko1 in person, and I answered the behavior is a little complicated. So we introduce `--rbenv` for now.", "created_at": "2017-10-21 15:38:52", "user": 3138447, "id": 338411019}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ref: https://github.com/ruby/ruby/blob/a25a39f91841312f3f2bf7b11cf0e7e6b9dd309b/ext/socket/lib/socket.rb#L325", "labels": [], "number": 1725, "updated_at": "2017-10-22 06:03:54", "user": 987638, "closed_at": "2017-10-22 06:02:04", "id": 267438189, "title": "Add missing `buf` parameter to `recv_nonblock` doc [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1725", "created_at": "2017-10-22 05:47:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [11857]}, "text": "nacl (native client) is already sunset status.\r\n\r\nsee https://www.infoq.com/jp/news/2017/06/pnacl-webassembly-google (only Japanese is available)\r\n\r\nWe should remove its support. ", "labels": [], "number": 1726, "updated_at": "2017-10-23 05:57:56", "user": 12301, "closed_at": "2017-10-23 05:57:22", "id": 267450302, "title": "Removed nacl support", "url": "https://api.github.com/repos/ruby/ruby/issues/1726", "created_at": "2017-10-22 09:37:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [2572486], "heart": [2572486], "+1": [2572486], "laugh": [2572486]}, "text": "Invalid documentation. If _enabled?_ returns `true` than _disable_ also returns `true` the first time.", "labels": [], "number": 1727, "updated_at": "2017-10-30 10:26:09", "user": 1522964, "closed_at": "2017-10-28 01:06:16", "id": 267780156, "title": "Invalid TracePoint#disable example (without block)", "url": "https://api.github.com/repos/ruby/ruby/issues/1727", "created_at": "2017-10-23 19:00:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1728, "updated_at": "2017-10-26 07:35:40", "user": 8858472, "closed_at": "2017-10-26 07:33:29", "id": 268648261, "title": " reduce observer pattern lib code", "url": "https://api.github.com/repos/ruby/ruby/issues/1728", "created_at": "2017-10-26 06:55:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/339577964", "text": "Thank you for your work, but we do not accept cosmetic changes here because such changes just make `git blame` hard.\r\nThank you for understanding.", "created_at": "2017-10-26 07:33:29", "user": 11493, "id": 339577964}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/339578418", "text": "@amatsuda OK, Thank you very much. I have removed the branch.", "created_at": "2017-10-26 07:35:28", "user": 8858472, "id": 339578418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1729, "updated_at": "2017-10-27 03:56:03", "user": 1458041, "closed_at": "2017-10-27 03:56:03", "id": 268977169, "title": "Fix typo", "url": "https://api.github.com/repos/ruby/ruby/issues/1729", "created_at": "2017-10-27 03:25:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add two methods (“antisymmetric?” and “reflexive?”) determine if the\nmatrix is reflexive, antisymmetric or not.", "labels": [], "number": 1730, "updated_at": "2018-02-23 03:07:39", "user": 5194080, "closed_at": "None", "id": 269141424, "title": "Add Matrix#antisymmetric? and Matrix#reflexive?", "url": "https://api.github.com/repos/ruby/ruby/issues/1730", "created_at": "2017-10-27 15:14:34", "comments": [{"reactions": {"+1": [5194080]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351625474", "text": "Thanks for the PR.\r\nThese look like valid additions to the library.\r\nThe PR some issues though:\r\n\r\n* needs specs, ideally in `ruby/spec/library/matrix/\r\n* the code for antisymmetric looks wrong\r\n* would probably be nicer to use `all?` instead of the `return true/false`\r\n\r\nWould you like to amend your PR?", "created_at": "2017-12-14 06:59:07", "user": 33770, "id": 351625474}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354118805", "text": "and: antisymmetric_spec.rb is not in the correct directory", "created_at": "2017-12-27 14:07:13", "user": 1112299, "id": 354118805}], "assignees": [33770, 33770], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "`TracePoint` doesn't have the `line` method.\r\nTherefore, this example will raise `NoMethodError`.\r\nBut since it does not seem to be the intended error, use the existing `lineno` method instead.", "labels": [], "number": 1731, "updated_at": "2017-10-28 12:48:53", "user": 987638, "closed_at": "2017-10-28 06:50:48", "id": 269285282, "title": "Fix example that trace method is called outside block [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1731", "created_at": "2017-10-28 05:34:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Introduce CAA RR DNS record on `Resolv`, defined in [RFC 6844](https://tools.ietf.org/html/rfc6844).\r\n\r\nChanges on the way `Resource::decode_rdata` works because CAA needs to know the\r\noverall RR length, which was previously swallowed.", "labels": [], "number": 1732, "updated_at": "2018-02-23 03:07:39", "user": 51246, "closed_at": "None", "id": 269398664, "title": "CAA DNS RR", "url": "https://api.github.com/repos/ruby/ruby/issues/1732", "created_at": "2017-10-29 13:20:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340262283", "text": "I open [issue 14066](https://bugs.ruby-lang.org/issues/14066) on Redmine for that PR", "created_at": "2017-10-29 13:26:03", "user": 51246, "id": 340262283}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Support for fallback SCSV [RFC 7507](https://tools.ietf.org/html/rfc7507).\r\n\r\nExpected behaviour is to refuse connection if the client signals a protocol with\r\nthe fallback flag but the server supports a better one (downgrade attack detection).", "labels": [], "number": 1733, "updated_at": "2017-10-29 14:36:54", "user": 51246, "closed_at": "2017-10-29 14:36:54", "id": 269403351, "title": "TLS Fallback Signaling Cipher Suite Value", "url": "https://api.github.com/repos/ruby/ruby/issues/1733", "created_at": "2017-10-29 14:28:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340266458", "text": "Redmine issue : [14067](https://bugs.ruby-lang.org/issues/14067)", "created_at": "2017-10-29 14:30:06", "user": 51246, "id": 340266458}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340266880", "text": "Please open a PR at https://github.com/ruby/openssl instead.", "created_at": "2017-10-29 14:36:54", "user": 1033740, "id": 340266880}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This allow to serve both RSA & ECDSA in same time on a single TLS server\r\nCompatibility is kept for single cert & key configuration.", "labels": [], "number": 1734, "updated_at": "2017-10-30 01:04:53", "user": 51246, "closed_at": "2017-10-30 01:04:52", "id": 269418257, "title": "Allow multiple certs & keys for SSLContext", "url": "https://api.github.com/repos/ruby/ruby/issues/1734", "created_at": "2017-10-29 17:34:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340318627", "text": "Duplicates https://github.com/ruby/openssl/pull/166", "created_at": "2017-10-30 01:04:52", "user": 12301, "id": 340318627}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6567687]}, "text": "Pull Request updates Method#arity documentation to match with that of [Proc#arity](https://ruby-doc.org/core-2.4.2/Proc.html#method-i-arity).\r\n\r\nAnd updates Proc#arity docs to be more consistent in argument naming", "labels": [], "number": 1735, "updated_at": "2017-11-02 20:21:10", "user": 8058230, "closed_at": "2017-11-02 20:21:10", "id": 269545722, "title": "Improve Method#arity and Proc#arity documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1735", "created_at": "2017-10-30 10:18:09", "comments": [{"reactions": {"+1": [8058230]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340592753", "text": "I think this is good; I'll wait a couple of days in case anyone wants to object, then I'll apply the patch.\r\n\r\n(While I am at it I will also fix some grammar and other things.)", "created_at": "2017-10-30 21:38:33", "user": 1112299, "id": 340592753}], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Any objections to me removing this comment from the REXML::Entity.new documentation:\r\n_\"The best thing to do is dump the stupid DTDs and use XMLSchema instead.\"_ ?\r\n\r\nIt doesn't seem very helpful.\r\n\r\n(This was reported by @mikegee in a comment to #1671.)", "labels": [], "number": 1736, "updated_at": "2017-11-02 21:36:47", "user": 1112299, "closed_at": "2017-11-02 20:07:44", "id": 269777967, "title": "lib/rexml/entity.rb: [DOC] drop pointless comment", "url": "https://api.github.com/repos/ruby/ruby/issues/1736", "created_at": "2017-10-30 22:41:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/340639725", "text": "You can commit it.", "created_at": "2017-10-31 02:16:57", "user": 27350, "id": 340639725}], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@hsbt\r\n\r\nI think the update to the new major release should be mentioned in the NEWS (and maybe also in the release notes?).\r\n\r\nI guess there are some bigger changes that should be mentioned explicitly, but I have no idea which ones should be considered \"outstanding\".", "labels": [], "number": 1737, "updated_at": "2017-11-02 21:42:50", "user": 1112299, "closed_at": "2017-11-02 20:27:01", "id": 270296890, "title": "NEWS: add entry for Psych", "url": "https://api.github.com/repos/ruby/ruby/issues/1737", "created_at": "2017-11-01 12:44:26", "comments": [{"reactions": {"+1": [1112299]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/341096717", "text": "Your suggestion is reasonable. I forgot to add this entry NEWS file.\r\n\r\nCan you commit this?", "created_at": "2017-11-01 12:47:26", "user": 12301, "id": 341096717}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/341547709", "text": "Closed via b3467b7e1fac456d332bcc9bbccafba5936a34e4.", "created_at": "2017-11-02 20:27:01", "user": 1112299, "id": 341547709}], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From https://bugs.ruby-lang.org/issues/12534 and https://github.com/ruby/ruby/commit/a463ab1f0536e24c72b700945203ef4685406f55\r\n\r\nThis change fixes the docs to reflect that refinements are now allowed on modules\r\n\r\n", "labels": [], "number": 1738, "updated_at": "2018-01-30 07:10:07", "user": 1507561, "closed_at": "2018-01-30 07:10:07", "id": 270434759, "title": "[DOC] Refinements on modules are allowed", "url": "https://api.github.com/repos/ruby/ruby/issues/1738", "created_at": "2017-11-01 20:06:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361497140", "text": "Good catch. Thank you.\r\n\r\nFixed at https://github.com/ruby/ruby/commit/b0d1586fa79ff9123db07daf838aee67bc452cf5", "created_at": "2018-01-30 07:10:07", "user": 12301, "id": 361497140}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When running test-all with a `-j` option, duplicate class names intermittently cause incorrect test results.\r\n\r\nThis should result in a higher and more stable test count for the mswin build.  'Underscore' style renames followed style used in `TestString`.\r\n\r\nSee [Ruby Issue 14064](https://bugs.ruby-lang.org/issues/14064?next_issue_id=14062&prev_issue_id=14066#note-1)", "labels": [], "number": 1739, "updated_at": "2017-11-08 00:19:27", "user": 15081176, "closed_at": "2017-11-08 00:16:08", "id": 271131609, "title": "test-all class renames for parallel testing", "url": "https://api.github.com/repos/ruby/ruby/issues/1739", "created_at": "2017-11-03 22:07:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "sprintf has a very useful feature whereby arguments can be provided in a Hash, like this:\r\n\r\n    sprintf 'format %{arg1} %{arg2}', {arg1: 1, arg2: 2}\r\n    => format 1 2\r\n    sprintf 'format %{arg1}', {arg1: 1}\r\n    => format 1\r\n\r\nBut, when Ruby is run with -w, there is an inconsistency:\r\n\r\n    sprintf 'format', {}\r\n    => warning: too many arguments for format string\r\n    => format\r\n\r\nWhen arguments are being provided in a Hash, passing an empty Hash is equivalent to passing no arguments at all. So there is no need to print a warning in that case.\r\n\r\nTherefore, suppress this warning. At the same time, add tests to check whether the warning is printed when expected.", "labels": [], "number": 1740, "updated_at": "2017-12-11 20:08:44", "user": 1067359, "closed_at": "2017-12-11 20:08:44", "id": 271279470, "title": "sprintf.c: suppress 'too many arguments' warning if sole argument is a Hash", "url": "https://api.github.com/repos/ruby/ruby/issues/1740", "created_at": "2017-11-05 14:06:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/342609490", "text": "The build failure on Travis doesn't have anything to do with the content of this PR; some tests related to SMTP and HTTP are failing with an error stating \"Cannot assign requested address\". I'll try to trigger another build.", "created_at": "2017-11-07 20:19:51", "user": 1067359, "id": 342609490}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found spell miss. So I modified it.\r\nRuning -> Running", "labels": [], "number": 1741, "updated_at": "2017-11-05 15:11:40", "user": 25253108, "closed_at": "2017-11-05 15:11:40", "id": 271283590, "title": "Modify spell miss.", "url": "https://api.github.com/repos/ruby/ruby/issues/1741", "created_at": "2017-11-05 14:53:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is this an intentional behavior?\r\n\r\n```\r\nruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin16]\r\n```\r\n\r\n```ruby\r\np([].cycle.size) #=> 0\r\np({}.cycle.size) #=> Infinity \r\n```\r\n\r\nArray#cycle already special handled empty arrays. So similar behavior in Enumerable#cycle with the #size sounds reasonable to me.\r\n\r\n( The CI 🔴 failures around Net tests looks an known issue in trunk )", "labels": [], "number": 1742, "updated_at": "2017-11-05 22:29:34", "user": 1180335, "closed_at": "2017-11-05 22:18:14", "id": 271295733, "title": "Fix size on Enumerable#cycle when the size is 0", "url": "https://api.github.com/repos/ruby/ruby/issues/1742", "created_at": "2017-11-05 17:00:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/341988353", "text": "ref: https://bugs.ruby-lang.org/issues/14082", "created_at": "2017-11-05 17:05:50", "user": 1180335, "id": 341988353}, {"reactions": {"heart": [1180335]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/342010512", "text": "Thanks a lot for the great PR 😸 \r\nMerged as dcb8a22", "created_at": "2017-11-05 22:18:14", "user": 33770, "id": 342010512}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/342011281", "text": "Thanks for your fast ⚡️  review! 🙇 ", "created_at": "2017-11-05 22:29:29", "user": 1180335, "id": 342011281}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "While reviewing test-all results, several skips were listed from the test/date files.  A few years ago, @nobu commited [svn 34739](https://github.com/ruby/ruby/commit/b67bc8d722e9351b34e68ac77d397aead29961cc#diff-b9dd4c7779e6e659753c9eea9c365135), which was reverted (possibly due to rdoc changes?).\r\n\r\nThis PR uses just the date specific patches.  Old methods and require 'calendar'...\r\n\r\nSee https://bugs.ruby-lang.org/issues/14088", "labels": [], "number": 1743, "updated_at": "2017-11-10 13:15:39", "user": 15081176, "closed_at": "2017-11-10 06:32:25", "id": 271558958, "title": "Remove unneeded test-all skips, based on 34739 by nobu", "url": "https://api.github.com/repos/ruby/ruby/issues/1743", "created_at": "2017-11-06 17:34:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`enable` and `disable` are instance methods.", "labels": [], "number": 1744, "updated_at": "2017-11-08 20:55:59", "user": 987638, "closed_at": "2017-11-08 16:44:24", "id": 272073539, "title": "Fix typo in doc [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1744", "created_at": "2017-11-08 04:46:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch will reduce count of allocating heap areas for st_table.\r\nTo improve, this patch will reduce the count by allocating unified area for st_table and st_table_entry.\r\n\r\nAbout idea of this implementation, you can see in\r\nhttp://rubykaigi.org/2017/presentations/watson1978.html\r\n\r\n\tPerformance of creating Hash literal -> 1.52 times faster.\r\n\r\n### Before\r\n```\r\n$ ./miniruby -v -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nruby 2.5.0dev (2017-11-08 trunk 60500) [x86_64-darwin17]\r\nWarming up --------------------------------------\r\n        Hash literal    36.454k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal    619.244k (± 3.9%) i/s -      3.099M in   5.011459s\r\n```\r\n\r\n### After\r\n```\r\n$ ./miniruby -v -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nruby 2.5.0dev (2017-11-08 trunk 60500) [x86_64-darwin17]\r\nWarming up --------------------------------------\r\n        Hash literal    43.297k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal    938.802k (± 2.8%) i/s -      4.719M in   5.030934s\r\n```\r\n\r\n### Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Hash literal\" do |loop|\r\n    count = 0\r\n    while count < loop\r\n      hash = {foo: 12, bar: 34, baz: 56}\r\n\r\n      count += 1\r\n    end\r\n  end\r\nend\r\n```", "labels": [], "number": 1745, "updated_at": "2017-11-30 14:38:58", "user": 199156, "closed_at": "2017-11-30 14:38:57", "id": 272164181, "title": "Improve performance of creating Hash object", "url": "https://api.github.com/repos/ruby/ruby/issues/1745", "created_at": "2017-11-08 11:25:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348206647", "text": "I updated this patch with #1766", "created_at": "2017-11-30 14:38:57", "user": 199156, "id": 348206647}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Commits to address #674 and https://bugs.ruby-lang.org/issues/10903 : \r\n\r\nAny comments before I merge in trunk?", "labels": [], "number": 1746, "updated_at": "2017-11-20 02:20:04", "user": 33770, "closed_at": "2017-11-20 02:19:56", "id": 272747464, "title": "Matrix combine", "url": "https://api.github.com/repos/ruby/ruby/issues/1746", "created_at": "2017-11-09 22:23:41", "comments": [], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [10487528, 14850816]}, "text": "I introduce a `union` method equivalent to the `|` operator, but which accept more than one array as argument. This improved readability, and it is also coherent with the `+` operator, which has a similar `concat` method. The method doesn't modify the original object and return a new object instead. :smile: I plan to send a PR for the `union!` method as well. :wink: \r\n\r\nTests are included, although there is no documentation (or I didn't find it) about how Ruby is tested, so I am not sure if I need to test this somewhere else or/and in any other way.\r\n\r\nI also didn't find any documentation regarding how the changelog is created, how the project is documented and the style that the code follows. Is there any documentation? Should I modify something? :thinking: \r\n\r\nThis solves partially https://bugs.ruby-lang.org/issues/14097", "labels": [], "number": 1747, "updated_at": "2018-02-23 03:07:40", "user": 16052290, "closed_at": "None", "id": 272929976, "title": "Add union method to Array", "url": "https://api.github.com/repos/ruby/ruby/issues/1747", "created_at": "2017-11-10 13:19:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/343880430", "text": "@nobu thanks for your comments. :blush:\r\n\r\nI am not pretty sure what you mean with this: 🤔 \r\n\r\n \r\n>>``` Ruby\r\n>>for (i = 0; i < argc; i++) sum += RARRAY_LEN(argv[i]);\r\n>>```\r\n> Non array argument causes a segfault.\r\n\r\n", "created_at": "2017-11-13 10:42:11", "user": 16052290, "id": 343880430}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/343926441", "text": "I added this to NEWS, I hope it is the way the CHANGELOG is managed. 😉 ", "created_at": "2017-11-13 13:58:25", "user": 16052290, "id": 343926441}, {"reactions": {"+1": [16052290]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/344122097", "text": "> I am not pretty sure what you mean with this: 🤔\r\n\r\nFor instance, `[].union(nil)` segfaults.\r\nArguments should be converted by `to_ary()`.", "created_at": "2017-11-14 02:04:48", "user": 16700, "id": 344122097}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/344212892", "text": "@nobu changes made! thanks!\r\n\r\nAnother thing, I wrote similar tests for `union` as for `|`, but there are two tests for `|` (`test_OR_in_order` and `test_OR_big_in_order` that I am not sure why are needed, so I didn't replicate them. What are these two test testing?", "created_at": "2017-11-14 10:24:03", "user": 16052290, "id": 344212892}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/344906079", "text": "@nobu do I need to change something else? 🤔 ", "created_at": "2017-11-16 12:16:31", "user": 16052290, "id": 344906079}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "It is now possible to add just the subdomains for proxy bypass.\r\nIn a setting where the main domain needs to go through proxy while\r\nthe subdomains don't, it is now possible to just add the subdomains\r\nto the no_proxy list.\r\n\r\nThe assumption that both subdomains and the parent domain should\r\nbehave the same wrt no_proxy has been removed.\r\n\r\neg: Adding .example.com in no_proxy would allow example.com\r\nto go through the proxy.\r\n\r\n Addresses: https://bugs.ruby-lang.org/issues/14345", "labels": [], "number": 1748, "updated_at": "2018-03-21 01:59:52", "user": 1289830, "closed_at": "None", "id": 273322298, "title": "URI::Generic: Respect no_proxy for both parent domain and subdomains", "url": "https://api.github.com/repos/ruby/ruby/issues/1748", "created_at": "2017-11-13 06:23:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/344822986", "text": "Do I need a reviewer here?\r\n", "created_at": "2017-11-16 05:49:47", "user": 1289830, "id": 344822986}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345235190", "text": "Please submit a new issue to our \"official\" tracker: https://bugs.ruby-lang.org/\r\n\r\nWe didn't handle new feature on GitHub.", "created_at": "2017-11-17 12:48:07", "user": 12301, "id": 345235190}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363530027", "text": "Hi, Any update on this?", "created_at": "2018-02-06 19:05:24", "user": 1289830, "id": 363530027}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/364338796", "text": "@hsbt ", "created_at": "2018-02-09 05:25:53", "user": 1289830, "id": 364338796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/364341099", "text": "No update. I'm not maintainer of `URI` library.", "created_at": "2018-02-09 05:44:00", "user": 12301, "id": 364341099}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/374752483", "text": "@matz Could you suggest how we take this forward?", "created_at": "2018-03-20 20:52:47", "user": 1289830, "id": 374752483}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/374814816", "text": "@harsimranmaan Current `URI` maintainer is not active. So, I'm going to ask this feature request at next developer meeting. Please no rush and wait a few months.", "created_at": "2018-03-21 01:59:52", "user": 12301, "id": 374814816}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [14068, 13723]}, "text": "Hi.\r\nI think `::` for call methods may cause confusion. In this pr `::` call notation changed to `.` dot call. \r\nMaybe it makes sense only for documentation.", "labels": [], "number": 1749, "updated_at": "2018-02-23 03:07:40", "user": 1192122, "closed_at": "None", "id": 273368365, "title": "change call CGI methods from :: to .", "url": "https://api.github.com/repos/ruby/ruby/issues/1749", "created_at": "2017-11-13 09:52:58", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [14068, 10107725]}, "text": "The adverb usually refers to what typically or normally happens and because of that it should be used in present tense and not in future. :bowtie: \r\n\r\nReference:\r\nhttps://dictionary.cambridge.org/es/gramatica/gramatica-britanica/usually", "labels": [], "number": 1750, "updated_at": "2018-02-23 03:07:40", "user": 16052290, "closed_at": "None", "id": 273448216, "title": "Correct grammar mistake in README", "url": "https://api.github.com/repos/ruby/ruby/issues/1750", "created_at": "2017-11-13 14:28:35", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "For future JIT introduction, those functions are useful for abstracting native threads and I want their signatures to be unified in upstream to avoid conflict. \r\n\r\nAs their return values are not used, I want to drop return values of win32 version.", "labels": [], "number": 1751, "updated_at": "2017-11-16 10:03:57", "user": 3138447, "closed_at": "2017-11-16 10:03:07", "id": 273576450, "title": "thread_win32.c: unify signature with pthread's one", "url": "https://api.github.com/repos/ruby/ruby/issues/1751", "created_at": "2017-11-13 21:02:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [14068, 20088320]}, "text": "Most of the methods of the `Set` class do not provide examples. Examples helps to read the documentation and the chances that people use more and better the `Set` class and its methods. :bowtie: \r\n\r\nI added documentation for some for the method, although there are some of them still undocumented. 😢 It may be complicate to review if I add everything at once. 😉 ", "labels": [], "number": 1752, "updated_at": "2018-02-13 10:28:51", "user": 16052290, "closed_at": "2017-11-17 09:49:49", "id": 273781852, "title": "Add examples in Set documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1752", "created_at": "2017-11-14 12:53:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345178021", "text": "@knu do I need to change something?", "created_at": "2017-11-17 08:30:29", "user": 16052290, "id": 345178021}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345186606", "text": "@Ana06 No, you don't, well done!  Unfortunately, I can't merge this here because Ruby's master repository is in Subversion.  It'll be closed this after committing this change and I can only give you credit in the commit message, but please don't feel bad about this.  Thanks for your contribution!", "created_at": "2017-11-17 09:10:29", "user": 10236, "id": 345186606}, {"reactions": {"+1": [229240]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345233236", "text": "@knu thanks for you answer! 😉 \r\n\r\nI have to admit that I don't really like how you incorporate contributors code to the project. Some suggestions:\r\n\r\n- It would be great that you change the author in Subversion, because currently I appear in the commit message, but that has no visibility at all, as I do not appear in the [contributors page](https://github.com/ruby/ruby/graphs/contributors) and it is also not possible to track the contributions I made. It is possible to change the author in the commit of Subversion and I could appear as author even if you commit it.\r\n\r\n- Another idea is to do something similar to what Rubocop does. In the [CHANGELOG](https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md) they add next to every change the Github nickname of the person who actually did the change. That people fell they are valued in the project may be the reason why they have 432 contributors.\r\n\r\n- Stop using Subversion, it is really old. Github es much modern and the most important part everybody knows how to use it. This will encourage more people to get involved to Ruby development and I guess help is always good in such a big project like this. It would also save you time, as to integrate contributors code you can just click merge. The subversions commits are already integrated in Github so it shouldn't be a big deal to move here. The best in my opinion, but it is just my opinion as probably it doesn't work for you as you would have to change the way you work.\r\n\r\nI heard @matz saying several times that _Ruby is not now his project but our/a community project_. **I think it is really important to recognise the work of the community and make them felling that they are a valuable part of the project. Recognising code authors in the most visible ways plays an important role for that.** 😄 ", "created_at": "2017-11-17 12:37:57", "user": 16052290, "id": 345233236}, {"reactions": {"+1": [12301]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345269033", "text": "> It would be great that you change the author in Subversion\r\n\r\nSubversion handles the author as \"account\". Therefore it won't be what you expect.\r\n\r\n`git-svn`, which ruby's repo uses to sync subversion to git repo, has [`--use-log-author`](https://www.kernel.org/pub/software/scm/git/docs/git-svn.html).\r\nIt can solve your point, GitHub recognizes the commit as yours.\r\nBut if sync tool add the option, current all git-svn users of ruby need to add the option at the same timing.\r\nHandling migration and write a document is required.\r\n\r\n> Another idea is to do something similar to what Rubocop does.\r\n\r\nWe did the same thing until last year as files exist in [doc/](https://github.com/ruby/ruby/tree/trunk/doc).\r\nBut ChangeLog file heavily causes merge conflict during branch maintenance.\r\n\r\nA best system to associate a commit and an author is commit log.\r\nA lack of it is tarball doesn't include repository.\r\nTherefore tarball has `ChangeLog` file generated from commit logs.\r\n\r\n> Stop using Subversion\r\n\r\nIt is long discussed topic.\r\nThrough the discussion, some technical issues and tools which needs migration is pointed.\r\n\r\nNow I believe most of technical issues are resolved through the age.\r\nBut tools are still waiting to be fixed and no one handles actual migration process.\r\n\r\n> I heard @matz saying several times that Ruby is not now his project but our/a community project.\r\n\r\nI believe community will handle organize actual migration issues and handle the migration in the future.", "created_at": "2017-11-17 15:08:18", "user": 13423, "id": 345269033}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345935029", "text": "@nurse \r\n\r\n> > It would be great that you change the author in Subversion\r\n> \r\n> Subversion handles the author as \"account\". Therefore it won't be what you expect.\r\n> \r\n> git-svn, which ruby's repo uses to sync subversion to git repo, has --use-log-author.\r\n> It can solve your point, GitHub recognizes the commit as yours.\r\n> But if sync tool add the option, current all git-svn users of ruby need to add the option at the same timing.\r\n> Handling migration and write a document is required.\r\n\r\nBut you can change the commit author: https://blog.tinned-software.net/change-author-of-last-svn-commit why wouldn't that work? 😕 \r\n\r\n> > Stop using Subversion\r\n> It is long discussed topic.\r\n> Through the discussion, some technical issues and tools which needs migration is pointed.\r\n> \r\n> Now I believe most of technical issues are resolved through the age.\r\n> But tools are still waiting to be fixed and no one handles actual migration process.\r\n\r\nIf I understood correctly, it is already decided that you want to move to Github, but there is some work to do. What is exactly missed? Is help needed? I would be really willing to help to see that happening soon. ", "created_at": "2017-11-21 07:00:26", "user": 16052290, "id": 345935029}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365211299", "text": "@nurse @knu @nobu with the new [_Commit together with co-authors_ Github feature](https://github.com/blog/2496-commit-together-with-co-authors) the problem of giving attribution to contributors could be easily solved.\r\n\r\nIf in the commit message, instead of \r\n\r\n`Submitted by: @Ana06 <anamma06@gmail.com>`\r\n\r\nyou write\r\n\r\n`Co-authored-by: Ana María Martínez Gómez <anamma06@gmail.com>`\r\n\r\nGithub will show the contribution as well.\r\n\r\nWhat do you think? Would you be up to use it? I think it would be a really easy way to give contributors more visibility. 😉 ", "created_at": "2018-02-13 09:52:52", "user": 16052290, "id": 365211299}, {"reactions": {"+1": [16052290]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365217912", "text": "@Ana06, At some point I also comment this over the internets...\r\n\r\nhttps://twitter.com/esparta/status/958204932779261952\r\n\r\nBut I think a _formal_ proposal on https://bugs.ruby-lang.org should be the way to go. What do you think?", "created_at": "2018-02-13 10:17:23", "user": 1037088, "id": 365217912}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365220977", "text": "@esparta \r\n\r\n> But I think a formal proposal on https://bugs.ruby-lang.org should be the way to go. What do you think?\r\n\r\nCreated! 👍\r\n\r\nhttps://bugs.ruby-lang.org/issues/14470", "created_at": "2018-02-13 10:28:51", "user": 16052290, "id": 365220977}], "assignees": [10236, 10236], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068, 14850816, 75156]}, "text": "The `^` operator in `Set` is commonly known as _ exclusive or_ and _XOR_ in mathematics, hardware and other programming languages. Adding _xor_ as an alias makes it much more readable and explicit and that is what we love of Ruby. ❤️\r\n\r\nI also added to the documentation of `^`. \r\n\r\n\r\n", "labels": [], "number": 1753, "updated_at": "2018-02-23 03:07:40", "user": 16052290, "closed_at": "None", "id": 273792147, "title": "Set#^ is XOR", "url": "https://api.github.com/repos/ruby/ruby/issues/1753", "created_at": "2017-11-14 13:28:09", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "Feature [#14109](https://bugs.ruby-lang.org/issues/14109)\r\n\r\nDir.children is available since Feature [#11302](https://bugs.ruby-lang.org/issues/11302).\r\nFileUtils uses Dir.each on an internal method encapsulated on a private class `Entry_#entry`, having no '.' neither '..' entries would make now superfluous a chained reject filtering.\r\n\r\nThis change can improve the performance of these `FileUtils` methods when the provided path covers thousands of files or directories:\r\n\r\n- chmod_R\r\n- chown_R\r\n- remove_entry\r\n- remove_entry_secure\r\n- rm_r\r\n- remove_dir\r\n- copy_entry\r\n\r\nRelated: Feature #[13896](https://bugs.ruby-lang.org/issues/13896) ", "labels": [], "number": 1754, "updated_at": "2018-02-23 03:07:41", "user": 1037088, "closed_at": "None", "id": 274050632, "title": "FileUtils : Use Dir.children instead of Dir.entries", "url": "https://api.github.com/repos/ruby/ruby/issues/1754", "created_at": "2017-11-15 06:41:07", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hi, I've changed a `Temfile.create` interface a little. I believe the one with keyword is more obvious and intuitive that way. Here is an extract from [related issue ](https://bugs.ruby-lang.org/issues/14092)\r\n\r\n>I don't work with Tempfile often, but every time I do, I get surprised by an obscure way to pass an extension to file name.\r\nYou have to pass array, where first element is a file name and a second is a file extension (starting with a dot), which is quite a unique (not in a good way) and unusual interface for ruby.\r\nI think a much better interface would be to use a separate key word for this...\r\n\r\n\r\nI haven't deprecated an ability to pass arrays as first argument in this pr, by the way. The same interface is used in `Dir. mktmpdir `. Not sure if it's useful, though.\r\n\r\n\r\n---\r\n\r\nAnother option would be explicit keyword argument `:suffix`. In both `Dir. mktmpdir` and `Tempfile.create`", "labels": [], "number": 1755, "updated_at": "2017-11-26 14:12:01", "user": 8058230, "closed_at": "2017-11-26 14:12:01", "id": 274126348, "title": "Add extension keyword argument to Tempfile.create", "url": "https://api.github.com/repos/ruby/ruby/issues/1755", "created_at": "2017-11-15 11:40:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1037088, 3876790, 1196822, 3946116]}, "text": "When doing the difference of a small array with a big one it is not efficient in both time and memory to convert the second one to a hash. It seems that the cost in both memory and time is not worthwhile if it is going to be used for too less elements.\r\n\r\nFor example, with the old code in my computer:\r\n\r\n```\r\nirb(main):001:0> def time(&block) puts Benchmark.measure(&block) end\r\n=> :time\r\n\r\nirb(main):002:0> time { a - (3..70000000).to_a }\r\n 11.108770   0.719122  11.827892 ( 11.892380)\r\n=> nil\r\nirb(main):003:0> time { a - (3..70000000).to_a }\r\n 11.429472   1.054554  12.484026 ( 12.522132)\r\n=> nil\r\n```\r\n\r\nwith the new one:\r\n\r\n```\r\nirb(main):004:0> time { a - (3..70000000).to_a }\r\n  1.523477   0.059862   1.583339 (  1.648743)\r\n=> nil\r\nirb(main):005:0> time { a - (3..70000000).to_a }\r\n  1.504628   0.067984   1.572612 (  1.629012)\r\n=> nil\r\n\r\n```\r\nand even this one, which with the old version break my computer as it fulls the memory, works now:\r\n\r\n```\r\nirb(main):006:0> time { a - (3..100000000).to_a }\r\n  2.161596   0.067738   2.229334 (  2.230705)\r\n=> nil\r\n```\r\n\r\n\r\nThis may be a very specific case, but it is an improvement anyway. :bowtie: ", "labels": [], "number": 1756, "updated_at": "2017-12-19 01:09:58", "user": 16052290, "closed_at": "2017-12-19 01:09:58", "id": 274175316, "title": "Improve Array#- efficiency ", "url": "https://api.github.com/repos/ruby/ruby/issues/1756", "created_at": "2017-11-15 14:28:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Another version of https://github.com/ruby/ruby/pull/1751", "labels": [], "number": 1757, "updated_at": "2017-11-16 10:04:12", "user": 3138447, "closed_at": "2017-11-16 10:04:08", "id": 274446986, "title": "thread_win32.c: remove static and unify signature with pthread's one", "url": "https://api.github.com/repos/ruby/ruby/issues/1757", "created_at": "2017-11-16 09:26:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I introduce a `difference` method equivalent to the `-` operator, but which accept more than array as argument. This improved readability, and it is also coherent with the `+` operator, which has a similar `concat` method. The method doesn't modify the original object and return a new object instead. I plan to introduce a `difference!` method as well. 😄 \r\n\r\nTests and documentation are included. :bowtie: I also corrected a small mistake in the `Array#-` documentation and link the new method from there. \r\n\r\nIt solves partially https://bugs.ruby-lang.org/issues/14097", "labels": [], "number": 1758, "updated_at": "2018-02-23 03:07:41", "user": 16052290, "closed_at": "None", "id": 274466061, "title": " Add difference method to Array", "url": "https://api.github.com/repos/ruby/ruby/issues/1758", "created_at": "2017-11-16 10:29:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/344905474", "text": "I am not sure if `difference` is the best name. `a`.diference `b` is what for sets is commonly called in logic _relative complement_ or _theoretic difference_ of a in b, which is defined as ![equation](http://latex.codecogs.com/gif.latex?b%20%5Ccap%20a%5E%5Ccomplement). And this is usually written with the `\\` operator.\r\n\r\nIn the Set class we already called this `-` and `difference`, which it is ok but not really accurate because of the previous explanation, but probably not worthwhile to change it.\r\n\r\nAnd all this is for Set, this concept is not usually define in Arrays. I decided to use the same name to keep the consistence with the Set class and because it was also written like that in the Array code. But I was thinking that maybe `exclude` could be more explicit. `minus` could be another option, but it has the same problem as `-`, which in Sets is ok (inaccurate thought), but in an Array I would have expected to be the difference of every component of two arrays of the same length.\r\n\r\nIntroducing alias doesn't work in my opinion, I think it is better to think what the best option is than having many options for the same.\r\n\r\nAny thoughts on this or do just I keep it as `difference`?", "created_at": "2017-11-16 12:13:39", "user": 16052290, "id": 344905474}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [16052290, 12770108]}, "text": "Rubocop prefers `empty?` over `length == 0` and `size == 0`, which is great for String, Array, Hash, etc. It would be nice if more classes implemented `#empty?` for consistency.\r\n\r\nSee related discussion at https://github.com/bbatsov/rubocop/issues/2841\r\n\r\nhttps://bugs.ruby-lang.org/issues/14136", "labels": [], "number": 1759, "updated_at": "2018-02-23 03:07:41", "user": 14068, "closed_at": "None", "id": 274679826, "title": "Add #empty? to Tempfile, StringIO, File::Stat", "url": "https://api.github.com/repos/ruby/ruby/issues/1759", "created_at": "2017-11-16 22:03:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345080564", "text": "I couldn't find where to add tests for `File::Stat#empty?`, but that one just an alias. Maybe it isn't valuable enough to test it. ¯\\\\\\_(ツ)_/¯", "created_at": "2017-11-16 22:16:23", "user": 14068, "id": 345080564}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1760, "updated_at": "2017-11-17 23:12:15", "user": 987638, "closed_at": "2017-11-17 15:09:05", "id": 274835322, "title": "Fix typo in `Timeout` doc [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1760", "created_at": "2017-11-17 11:27:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Thank you for looking at my pull request!\r\n\r\nI saw #644 from a couple of years ago, but I think it may be time to revisit adding the Tau constant to Ruby. Here is my reasoning:\r\n\r\n* Comparable languages (such as Python) have [added it](https://tauday.com/state-of-the-tau)\r\n* Tau simplifies many mathematical expressions (_e.g._ circumference can be expressed as τ * r instead of 2 * π * r)\r\n* Ruby makes us happy and I think [Tau day](https://tauday.com/) can too 🙂\r\n\r\nPlease let me know if you have any questions or if there's anything else I can add to this pull request.", "labels": [], "number": 1761, "updated_at": "2018-03-02 21:45:08", "user": 2340111, "closed_at": "2018-03-02 21:45:05", "id": 275006261, "title": "Add Tau as a constant to math.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1761", "created_at": "2017-11-17 21:47:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345478939", "text": "I guess this is not meant as a joke? Some concerns: there are other uses of tau in Mathematics that are more widely acknowledged, e.g. for the golden ratio; and \"many mathematical expressions\" are simpler to write using pi.", "created_at": "2017-11-18 23:23:14", "user": 1112299, "id": 345478939}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345762716", "text": "@stomar Nope! This is not a joke (although I understand this change does look trivial). It's not my intention to clutter the core language, but after chatting with @mhartl during RubyConf this year & having read through the [prior discussion](https://github.com/ruby/ruby/pull/644) on this topic, I think there are both existing reasons to add Tau (as mentioned in that discussion) and some new ones (_e.g._ Python and Julia now include it).\r\n\r\nAs for this concern: \"there are other uses of tau in Mathematics that are more widely acknowledged, e.g. for the golden ratio.\" This is the first time I had heard of Tau being used for the ratio (rather than Phi), and the [Wikipedia article notes that Tau is not as common in terms of notation](https://en.wikipedia.org/wiki/Golden_ratio#History). I'll do some research this week to see how prevalent this usage is. Thanks for mentioning it!", "created_at": "2017-11-20 17:10:48", "user": 2340111, "id": 345762716}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345808083", "text": "Regarding the golden ratio (which was only an example): tau may not be as commonly used as phi, but I'm pretty sure tau is currently much more commonly used for the golden ratio than as a circle constant throughout the literature.\r\n\r\nHowever, the important point is: tau has **many** uses, in mathematics and also in physics, and the use as alternative circle constant is not even the most commonly known and acknowledged one. (In addition, there are conflicting propositions for its value, 2 pi vs. pi/2.)\r\n\r\nAdding a constant is easy but deprecating and removing it later is much harder. I'm not very comfortable with adding this, only because a rather small group of people pushes this use of tau.\r\n\r\nWell, that's my 2 cents.\r\n\r\n(BTW, there is at least one gem that provides tau as 2 pi, one could simply use that).", "created_at": "2017-11-20 19:45:35", "user": 1112299, "id": 345808083}, {"reactions": {"+1": [2340111]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/346784773", "text": "If you think that this is useful and you are sure about it, you should also register at the official ruby tracker; most discussions happen there. I have no pro or con opinion about the suggestion so I won't comment - you only have to convince matz in the end, mostly, anyway. :)", "created_at": "2017-11-24 09:38:20", "user": 13723, "id": 346784773}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368312554", "text": "@ericqweinstein Show me the following evidences that indicate we should introduce `Math::TAU` as 2*pi.\r\n\r\n- how many mathematicians use such the tau in their academic papers\r\n- how many academic papers in which such the tau is used have been published\r\n\r\nIf you cannot show them, close this issue.", "created_at": "2018-02-25 14:14:45", "user": 3959, "id": 368312554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368337638", "text": "Hi @mrkn,\r\n\r\nSure thing. Please give me a few days to put together this research. Thank you for your patience!", "created_at": "2018-02-25 19:35:46", "user": 2340111, "id": 368337638}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368359719", "text": "@ericqweinstein\r\nBTW, you said Julia has already introduce tau as 2*pi, but it's not truth.\r\n\r\nJulia doesn't have `tau` constant in its core.\r\nInstead, there is `Tau.jl` library that introduces `tau` constant.\r\nYou can install `Tau.jl` by `Pkg.add(\"Tau\")` and use it by `using Tau`.\r\n\r\nIn Ruby, we already have [math-tau.gem](https://rubygems.org/gems/math-tau).\r\nThe situation is same as Julia.\r\n", "created_at": "2018-02-26 00:25:54", "user": 3959, "id": 368359719}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368624746", "text": "Ah, I see. Apologies for my error and thank you for the correction!", "created_at": "2018-02-26 19:42:24", "user": 2340111, "id": 368624746}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/370061440", "text": "@mrkn I've found a handful of papers that use tau rather than pi, but the search is a bit slow-going given the high incidence of tau in academic literature (apart from its definition of circumference/radius). I'm a bit swamped with work and school, so I'll close this PR for now; thank you for your patience and attention.", "created_at": "2018-03-02 21:44:44", "user": 2340111, "id": 370061440}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [16052290], "+1": [16052290]}, "text": "I prepared a pull request that includes exponentiate method which results in returning a new matrix with each element being an exponent of the number e. This is used e.g in machine learning and other types of calculations. [#14116](https://bugs.ruby-lang.org/issues/14116)", "labels": [], "number": 1762, "updated_at": "2017-12-06 18:50:01", "user": 17675583, "closed_at": "2017-12-06 18:50:01", "id": 275185378, "title": "Add Matrix#exponentiate method as Matlab's exp method", "url": "https://api.github.com/repos/ruby/ruby/issues/1762", "created_at": "2017-11-19 19:36:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/345707563", "text": "@Ana06  Thanks for support! 😃  I've made changes according to what you pointed out. The name of the method was proposed at Ruby Redmine and I simply adopted it but if you've got better name I can change it.", "created_at": "2017-11-20 14:15:42", "user": 17675583, "id": 345707563}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "test-all reports widely varying test counts from build to build. This seems to be due to duplicate class names in the test suite.  This stabilizes the count.  See [Ruby Issue 14121](https://bugs.ruby-lang.org/issues/14121)", "labels": [], "number": 1763, "updated_at": "2018-03-13 06:30:12", "user": 15081176, "closed_at": "2018-03-13 06:30:12", "id": 275415267, "title": "Rename test classes to allow stable test count when running test-all -j", "url": "https://api.github.com/repos/ruby/ruby/issues/1763", "created_at": "2017-11-20 16:25:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1192122, 243698]}, "text": "https://bugs.ruby-lang.org/issues/14124 (in Japanese)\r\n\r\nI want to show source around binding.irb.\r\n\r\n### Example\r\n\r\n```\r\n$ cat /tmp/test.rb\r\ndef test\r\n  binding.irb\r\nend\r\n\r\ntest\r\n$ ruby /tmp/test.rb\r\n\r\nFrom: /tmp/test.rb @ line 2 :\r\n\r\n    1: def test\r\n => 2:   binding.irb\r\n    3: end\r\n    4:\r\n    5: test\r\n\r\nirb(main):001:0>\r\n```", "labels": [], "number": 1764, "updated_at": "2017-11-24 03:54:47", "user": 3138447, "closed_at": "2017-11-24 03:54:33", "id": 275809416, "title": "irb.rb: show source around binding.irb on start", "url": "https://api.github.com/repos/ruby/ruby/issues/1764", "created_at": "2017-11-21 18:08:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR is for additional information about https://bugs.ruby-lang.org/issues/12275.", "labels": [], "number": 1765, "updated_at": "2017-12-14 08:52:20", "user": 243698, "closed_at": "2017-12-14 08:48:20", "id": 277146752, "title": "Implement String#undump", "url": "https://api.github.com/repos/ruby/ruby/issues/1765", "created_at": "2017-11-27 19:52:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351017887", "text": "This failes compile with clang\r\n```\r\nstring.c:6215:12: error: implicit conversion loses integer precision: 'unsigned long' to\r\n      'unsigned int' [-Werror,-Wshorten-64-to-32]\r\n            hex = ruby_scan_hex(hexstr, pos, &hexlen);\r\n                ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nstring.c:6231:25: error: implicit conversion loses integer precision: 'unsigned long' to\r\n      'unsigned int' [-Werror,-Wshorten-64-to-32]\r\n            unsigned int hex = ruby_scan_hex(s+1, 4, &hexlen);\r\n                         ~~~   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nstring.c:6245:7: error: implicit conversion loses integer precision: 'unsigned long' to\r\n      'unsigned int' [-Werror,-Wshorten-64-to-32]\r\n        c2 = ruby_scan_hex(s+1, 2, &hexlen);\r\n           ~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n3 errors generated.\r\n```", "created_at": "2017-12-12 10:59:40", "user": 13423, "id": 351017887}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351434225", "text": "I'll rebase and resolve conflict after fixing the points that pointed out by nurse.", "created_at": "2017-12-13 15:57:02", "user": 243698, "id": 351434225}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351492415", "text": "nurse, thanks for your accurate comments.\r\n\r\n> This failes compile with clang\r\n\r\nI confirmed failure with my local clang-3.9.  I fixed this with 55f066bb3f.\r\n\r\n> dumped string contains only US-ASCII strings. Therefore it is always single byte optimizable. \r\n\r\nHmmm... that's true.  I'll try optimizing in next year...\r\n\r\nBTW, I added non-ASCII character check in 1f0d0d8838.  I think this check is needed for \r\n\r\n* to make the specification clear to the user\r\n* to leave room for optimization\r\n\r\nPlease let me know if this is overkill.\r\n\r\n> current implementation doesn't check double quotes for example %[\"\"\"\"].undump\r\n\r\nOops, good catch.  I added the check in 0df3dabe1.\r\n\r\n> more tests about escapes and invalid strings is required\r\n\r\nActually, I also wanted to do so.  To be honest, I was trying to match the custom of\r\ntest/ruby/test_*.rb without thinking deeply.\r\n\r\nI added more tests in 0cdf95bcd.", "created_at": "2017-12-13 19:14:03", "user": 243698, "id": 351492415}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351492829", "text": "OK, I'll try to rebase and resolve conflict now...", "created_at": "2017-12-13 19:15:32", "user": 243698, "id": 351492829}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351508994", "text": "I added 3 commits after resolving conflict:\r\n\r\n* 670ad3a: unescaped character expression is adjusted as same as parse.y.\r\n    * This was advised by @mame. Thanks!\r\n* ee2059c: reject input string if it contained NUL `\\0` byte. (`dump`-ed string won't contain that)\r\n    * This is a continuation of 1f0d0d8.\r\n    * I believe \"narrow entrance\" is better but might be overkill..?\r\n* 5091b01174f: needless (duplicated) `const` keyword removed\r\n\r\nThen, I'll begin to create v3.patch to attach to the issue page.", "created_at": "2017-12-13 20:14:51", "user": 243698, "id": 351508994}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When generate Hash object, the heap area of st_table will be always allocated in internally\r\nand seems it take a time.\r\n\r\nTo improve performance of creating Hash object,\r\nthis patch will reduce count of allocating heap areas for st_table by reuse them.\r\n\r\n\tPerformance of creating Hash literal -> 1.53 times faster.\r\n\r\n### Environment\r\n\r\n* OS : macOS 10.13.1\r\n* CPU : 1.4 GHz Intel Core i7\r\n* Compiler : Apple LLVM version 9.0.0 (clang-900.0.39)\r\n\r\n### Before\r\n```\r\n$ ./miniruby -v -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nruby 2.5.0dev (2017-11-28 hash 60926) [x86_64-darwin17]\r\nWarming up --------------------------------------\r\n        Hash literal    51.544k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal    869.132k (± 1.1%) i/s -      4.381M in   5.041574s\r\n```\r\n\r\n### After\r\n```\r\n$ ./miniruby -v -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nruby 2.5.0dev (2017-11-28 hash 60926) [x86_64-darwin17]\r\nWarming up --------------------------------------\r\n        Hash literal    63.068k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      1.328M (± 2.3%) i/s -      6.685M in   5.037861s\r\n```\r\n\r\n### Test code\r\n```\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"Hash literal\" do |loop|\r\n    count = 0\r\n    while count < loop\r\n      hash = {foo: 12, bar: 34, baz: 56}\r\n\r\n      count += 1\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/14146", "labels": [], "number": 1766, "updated_at": "2017-12-18 02:00:41", "user": 199156, "closed_at": "2017-12-18 01:50:34", "id": 278142129, "title": "Improve performance of creating Hash object", "url": "https://api.github.com/repos/ruby/ruby/issues/1766", "created_at": "2017-11-30 14:38:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/348787373", "text": "    On Linux -> 1.27 times faster\r\n\r\n### Enviroment\r\n\r\n* OS : Ubuntu 17.10\r\n* CPU : Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz\r\n* Compiler : gcc version 7.2.0\r\n\r\n### Before\r\n```\r\n$ ./miniruby -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal   137.004k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      3.050M (± 0.5%) i/s -     15.344M in   5.030443s\r\n```\r\n\r\n### After\r\n```\r\n$ ./miniruby -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal   159.540k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      3.882M (± 0.6%) i/s -     19.464M in   5.013813s\r\n```", "created_at": "2017-12-03 15:55:32", "user": 199156, "id": 348787373}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/350553062", "text": "This is benchmark result with/without jemalloc.\r\n\r\n\tmacOS  -> 38.5% up\r\n\tUbuntu -> 29.0% up\r\n\r\n## macOS\r\n### Before\r\n```\r\n$ ./miniruby -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal    65.472k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      1.407M (± 1.6%) i/s -      7.071M in   5.026698s\r\n```\r\n\r\n### After\r\n```\r\n$ ./miniruby -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal    78.338k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      1.958M (± 1.9%) i/s -      9.792M in   5.002829s\r\n```\r\n\r\n\r\n## Ubuntu\r\n### Before\r\n```\r\n$ ./miniruby -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal   129.587k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      3.055M (± 0.1%) i/s -     15.291M in   5.005374s\r\n```\r\n\r\n### After\r\n```\r\n$ ./miniruby -I. -I../benchmark-ips/lib ~/tmp/bench/literal.rb\r\nWarming up --------------------------------------\r\n        Hash literal   146.119k i/100ms\r\nCalculating -------------------------------------\r\n        Hash literal      3.918M (± 0.1%) i/s -     19.726M in   5.034367s\r\n```\r\n", "created_at": "2017-12-10 14:43:28", "user": 199156, "id": 350553062}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently we are not able to grab the correct end/top of the stack on\r\npowerpc64 due to the fact that it uses the fallback function.\r\n\r\nThe fallback function does not return the correct top of the stack\r\nbecause it adds a new frame and the returned top of the stack contains\r\nthis frame overhead that could be something around 112 bytes on\r\nPowerpc64.\r\n\r\nThis patch simply gets the correct top of the stack pointer, which is\r\nalways on r1 register according to both ABI v1 and ABI v2 (Little\r\nendian).\r\n\r\nSigned-off-by: Breno Leitao <leitao@debian.org>", "labels": [], "number": 1767, "updated_at": "2018-02-23 03:07:42", "user": 148379, "closed_at": "None", "id": 278520265, "title": "gc.h: Add SET_MACHINE_STACK_END specific for Powerpc64", "url": "https://api.github.com/repos/ruby/ruby/issues/1767", "created_at": "2017-12-01 16:25:43", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Currently the Fiber stack size is small for powerpc64 and it causes\r\ntest/ruby/test_backtrace.rb test to break, since it is using a 8kb stack\r\nsize.\r\n\r\nIt breaks on powerpc64 due to the fact that a frame in the stack is\r\nusually 50% bigger on powerpc64 compared to Intel, due to some\r\nconsiderations:\r\n\r\n * The powerpc64 minimum frame is 2x bigger than on Intel\r\n * Powerpc has more registers that might be saved in the frame compared\r\n   to Intel.\r\n\r\nI ran the same ruby test that is failing on both Intel and Powerpc, and\r\neach Fiber frame is ~50% bigger on powerpc64 for every single lambda\r\nfunction, thus, we need to increase the stack size on powerpc64 to\r\naccomodate the same tests/applications.\r\n\r\nThis fixes bug#13757.\r\n\r\nSigned-off-by: Breno Leitao <leitao@debian.org>", "labels": [], "number": 1768, "updated_at": "2017-12-05 01:17:04", "user": 148379, "closed_at": "2017-12-05 01:17:04", "id": 279108870, "title": "vm_core.h: Increase the Fiber stack size on powerpc64", "url": "https://api.github.com/repos/ruby/ruby/issues/1768", "created_at": "2017-12-04 18:58:16", "comments": [{"reactions": {"+1": [148379]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/349156447", "text": "approved.", "created_at": "2017-12-05 00:41:44", "user": 9558, "id": 349156447}, {"reactions": {"+1": [148379]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/349162814", "text": "@leitao Thanks for your work. I committed this instead of ko1 at https://github.com/ruby/ruby/commit/b2047f79cce41695b3a3f84d88afd1b586680f29", "created_at": "2017-12-05 01:17:03", "user": 12301, "id": 349162814}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To address this issue [#14151](https://bugs.ruby-lang.org/issues/14151)", "labels": [], "number": 1769, "updated_at": "2018-03-18 13:28:26", "user": 17675583, "closed_at": "None", "id": 279868971, "title": "Make Matrix#[]= public method", "url": "https://api.github.com/repos/ruby/ruby/issues/1769", "created_at": "2017-12-06 19:02:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/350393481", "text": "@marcandre Ping", "created_at": "2017-12-08 22:59:56", "user": 17675583, "id": 350393481}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/350771408", "text": "As is, this PR is not acceptable. Here's the todo list for this PR to be make Matrix mutable in an acceptable way:\r\n\r\n1) deal with indices as ranges\r\n\r\n`m[1..2, 1..2] = 42` #  => Sets the 4 entries to 42. Must accept small negative ranges too\r\n`m[1..2, 1..2] = matrix` # => Sets the 4 entries from the entries of the given 2x2 matrix\r\nSame with  `m[1, 1..2] = 42 / vector / matrix` and `m[1..2, 1]=...`\r\n\r\nNote: it's acceptable to use `is_a?(Range)` to recognize ranges. For ints, there's already  `coerce_to_int`.\r\n\r\n2) Define `map!`, which should accept a parameter `:diagonal`, etc.\r\n\r\n3) Handle `freeze` correctly.\r\n`m.freeze.[...]= ...` must raise, same with `map!`\r\n\r\n4) `dup` probably needs to be defined\r\n\r\n5) specs for all of these, ideally in `ruby/spec`\r\n\r\nLet me know if you're up to update your PR or not...", "created_at": "2017-12-11 16:11:13", "user": 33770, "id": 350771408}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/350853263", "text": "@marcandre Thanks for your update and feedback. At the moment I'm unable to update my PR to meet all of the things you mentioned.(work and school related) But I'll be able to do it in the near future unless there is some specific schedule or anybody else wants to do it.", "created_at": "2017-12-11 20:48:01", "user": 17675583, "id": 350853263}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353869716", "text": "@marcandre I took care of the first point you mentioned. I'd be grateful if you or somebody could provide some feedback about my code so I could fix or simplify it. Shortly, I'll create commits with regard to the rest of points.", "created_at": "2017-12-25 13:29:17", "user": 17675583, "id": 353869716}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353897045", "text": "You could replace ``is_subrange?(row_range, i)`` with an optimized ``in_row_range?(i)`` that avoids creating a temporary Range, the same could be done for ``column_range``.\r\nThe current method ``is_subrange?`` looks like a good candidate for a Range method.\r\nMaybe renamed to ``subrange?`` or ``between?`` if moved to Range, to match ``cover?`` and ``include?``.\r\n\r\nThe calls to ``row_range.cover?(i)`` and ``column_range.cover?(j)`` could be replaced by ``i.between?(-row, row-1)`` or just ``-row <= i and i < row``, as they are used only once each.\r\nI don't see the need for ``row_range`` and ``column_range`` as temporary ``-x...x`` range creators.\r\n\r\n", "created_at": "2017-12-26 00:11:19", "user": 11094484, "id": 353897045}, {"reactions": {"+1": [11094484]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353974738", "text": "@Maumagnaguagno Thanks a lot for your feedback. I made changes according to it.", "created_at": "2017-12-26 14:31:18", "user": 17675583, "id": 353974738}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353978928", "text": "Hey @greggzst, I noticed you fixed the last commit with a ``range.to_a`` to fix exclude end Ranges.\r\nThis works, but I believe it is slow, as it creates an array with every element in range.\r\nInstead you could just use ``range.max`` to pick the last element in range.", "created_at": "2017-12-26 15:15:26", "user": 11094484, "id": 353978928}, {"reactions": {"+1": [11094484]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354000200", "text": "@Maumagnaguagno Thanks! Fixed that!", "created_at": "2017-12-26 18:46:58", "user": 17675583, "id": 354000200}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354174791", "text": "Lots of good work in there.\r\n\r\nI notice right away a few things:\r\n- there are some `range.to_a` left. You shouldn't ever have to call `to_a`.\r\n- Use `i = coerce_to_int(i)` (i.e. use the result). If you were writing ruby-spec style instead of tests, this would have been more easier to catch.\r\n- `IndexError` is the more precise exception class to raise for bad indices\r\n- It's great you have tests; could you split them a bit? It's hard to follow what's tested (and what might be missing)", "created_at": "2017-12-27 20:41:43", "user": 33770, "id": 354174791}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354279787", "text": "@marcandre Thanks a lot I addressed every point but `range.to_a`. Is it acceptable to use `each_with_index` on range to get the appropriate index from it?\r\n\r\n```\r\nv.each_with_index do |e, row, col|\r\n  r = nil\r\n  i.each_with_index do |i , index|\r\n    if index == row\r\n      r = i\r\n      break\r\n    end\r\n  end\r\n  c = nil\r\n  j.each_with_index do |j , index|\r\n    if index == col\r\n      c = j\r\n      break\r\n    end\r\n  end\r\n  @rows[r][c] = e\r\nend\r\n```\r\nI can't come up with any other idea and couldn't find any method in `Range` that returns element at specific index.", "created_at": "2017-12-28 12:17:38", "user": 17675583, "id": 354279787}, {"reactions": {"+1": [17675583]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354282157", "text": "Maybe ``r = i.first + row``?", "created_at": "2017-12-28 12:37:42", "user": 11094484, "id": 354282157}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354450554", "text": "I definied `map!` and `freeze` any feedback about these two?", "created_at": "2017-12-29 14:10:07", "user": 17675583, "id": 354450554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354484732", "text": "Implemented all things for `Vector` as well but there is no `IndexError` defined. Should I define it?", "created_at": "2017-12-29 18:44:56", "user": 17675583, "id": 354484732}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354535623", "text": "All done, anything else I should do? What should I do about this `IndexError` in `Vector` class?", "created_at": "2017-12-30 09:09:27", "user": 17675583, "id": 354535623}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354680305", "text": "The message associated with `FrozenError` is wrong and it says `can't modify frozen Array` is there any way to override it? ", "created_at": "2018-01-01 22:00:24", "user": 17675583, "id": 354680305}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/354834244", "text": "I think that the way `clone` method was implemented both in `Matrix` and `Vector` is actually the way `dup` should be implemented because both of them disregard state of the object. So I renamed them to `dup` and defined proper `map` for `Matrix` which accepts parameters through `which` as other methods.", "created_at": "2018-01-02 18:06:50", "user": 17675583, "id": 354834244}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357272451", "text": "@marcandre Any feedback on `map` implementation? What about the message produced by `FrozenError`? It's currently wrong as I mentioned it earlier.", "created_at": "2018-01-12 15:42:35", "user": 17675583, "id": 357272451}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/358139801", "text": "@marcandre ping", "created_at": "2018-01-16 23:15:21", "user": 17675583, "id": 358139801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/358839225", "text": "Sorry, I'm travelling right now.\r\n\r\n`map!` looks pretty good at first sight. It's probably worth it to use `@rows[row_index][col_index] = ...` instead of `self[row_index, col_index] = ...`, though. Less method calls, range checking, etc.\r\n\r\nAlso, should raise an error on empty matrices (like `[].map!{}` does). Good opportunity to fix the message?", "created_at": "2018-01-19 01:33:45", "user": 33770, "id": 358839225}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/358899788", "text": "I'm using `@rows` right now. `[].map!{}` doesn't actually raise any error(checked it in IRB and it returns `[]`) so I didn't change it for matrices. When it comes to `FrozenError` I still don't know how to fix the message but I think the main issue is that it is invoked when `@rows[row][col] = ...` is called and that's the reason why the message says `can't modify frozen Array` instead of `can't modify frozen Matrix`. Any suggestions on that? Also I fixed conflict on this branch by creating a new one from recent `trunk` and `cherry-picking` my commits.", "created_at": "2018-01-19 08:33:34", "user": 17675583, "id": 358899788}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/359115024", "text": "Sorry, I meant `[].freeze.map!{}`, which does raise.", "created_at": "2018-01-19 23:07:49", "user": 33770, "id": 359115024}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/359166582", "text": "Okay now I see but I can't get my head around this I mean I don't know how to fix it for know because with empty matrix it never gets to the inner `each_with_index` where `yield` gets called and that's why the `FrozenError` isn't raised. I'll try to figure it out later on but if you've got any tips on that let me know. I mean I could just raise the error in `map!` when matrix is empty and frozen but I don't think it's a good idea.\r\n\r\nI think we don't have to care about `FrozenError` message anymore I checked `Set` and its `FrozenError` messages say `can't modify frozen Hash` so I guess its fine.", "created_at": "2018-01-20 12:02:44", "user": 17675583, "id": 359166582}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/359206999", "text": "Indeed. You'll need to add an explicit `raise .... if frozen?`", "created_at": "2018-01-20 22:26:28", "user": 33770, "id": 359206999}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/359208133", "text": "Done. Anything else I should do?", "created_at": "2018-01-20 22:47:10", "user": 17675583, "id": 359208133}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360544455", "text": "I introduced some refactoring and optimizations I came up with. I benchmarked most of them as well using this code:\r\n```\r\nrequire 'benchmark/ips'\r\nrequire 'matrix'\r\n\r\na = Array.new(1000){ Array.new(1000){ rand(25..1250) } }\r\ni = 50..980\r\nj = 20..700\r\n\r\nBenchmark.ips do |x|\r\n  x.report('set_row_and_col - double each') do\r\n    i.each do |i|\r\n      j.each do |j|\r\n        a[i][j] = 5\r\n      end\r\n    end\r\n  end\r\n\r\n  x.report('set_row_and_col - one each and range - Array.new') do\r\n    set_value = Array.new(j.size, 5)\r\n    i.each do |i|\r\n      a[i][j] = set_value\r\n    end\r\n  end\r\n\r\n  x.report('set_row_and_col - one each and range - map!') do\r\n    i.each do |i|\r\n      a[i][j].map!{ 5 }\r\n    end\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\ni = 200\r\nj = 20..800\r\n\r\nBenchmark.ips do |x|\r\n  x.report('set_col_range - each') do\r\n    j.each do |j|\r\n      a[i][j] = 34\r\n    end\r\n  end\r\n\r\n  x.report('set_col_range - no each - Array.new') do\r\n    a[i][j] = Array.new(j.size, 34)\r\n  end\r\n\r\n\r\n  x.report('set_col_range - map!') do\r\n    a[i][j].map!{ 34 }\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\ni = 1..800\r\nj = 6\r\n\r\nBenchmark.ips do |x|\r\n  x.report('set_row_range - each row') do\r\n    a[i].each do |i|\r\n      i[j] = 34\r\n    end\r\n  end\r\n\r\n  x.report('set_row_range - no each - map') do\r\n    a[i].map!{|e| e[j] = 34}\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\nm = Matrix[[1,2,3,5,6]]\r\nv = [4,5,6,7,8,9,10,11,12,13,34]\r\ni = 0...5\r\n\r\nBenchmark.ips do |x|\r\n  x.report('set_range - matrix - each') do\r\n    m.each_with_index do |e, row, col|\r\n      r = i.first + col\r\n      v[r] = e\r\n    end\r\n  end\r\n\r\n  x.report('set_range - matrix - to_a') do\r\n    v[i] = m.to_a[0]\r\n  end\r\n\r\n  x.compare!\r\nend\r\n\r\nm = Matrix.build(0,1000){ |row, col| (row - col) * -13 }\r\nrows = Array.new(1000) { Array.new(2000) { rand(12..1567) }}\r\ni = 0..700\r\nj = 1000\r\n\r\nBenchmark.ips do |x|\r\n  x.report('set_row_range to column matrix - each_with_index') do\r\n    m.each_with_index do |e, row, col|\r\n      r = i.first + row\r\n      rows[r][j] = e\r\n    end\r\n  end\r\n\r\n  x.report('set_row_range to column matrix - map!') do\r\n    index = i.first\r\n    mat = m.column(0).to_a\r\n    rows[i].map!{|e| e[j] = mat[index]; index = index + 1 }\r\n  end\r\n\r\n  x.compare!\r\nend\r\n```\r\n\r\nThese are the outcomes:\r\n```\r\nComparison:\r\nset_row_and_col - one each and range - Array.new:     1475.0 i/s\r\nset_row_and_col - one each and range - map!:       26.0 i/s - 56.83x  slower\r\nset_row_and_col - double each:       19.9 i/s - 73.94x  slower\r\n\r\nComparison:\r\nset_col_range - no each - Array.new:   462402.6 i/s\r\nset_col_range - map!:    21274.2 i/s - 21.74x  slower\r\nset_col_range - each:    14141.7 i/s - 32.70x  slower\r\n\r\nComparison:\r\nset_row_range - each row:    14547.4 i/s\r\nset_row_range - no each - map:    13354.5 i/s - same-ish: difference falls within error\r\n\r\nComparison:\r\nset_range - matrix - to_a:  1260172.4 i/s\r\nset_range - matrix - each:   501323.9 i/s - 2.51x  slower\r\n\r\nComparison:\r\nset_row_range to column matrix - each_with_index:  1713121.2 i/s\r\nset_row_range to column matrix - map!:    12714.0 i/s - 134.74x  slower\r\n```", "created_at": "2018-01-25 17:47:02", "user": 17675583, "id": 360544455}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360930337", "text": "@marcandre @Maumagnaguagno  any feedback on changes I've made?", "created_at": "2018-01-26 23:10:03", "user": 17675583, "id": 360930337}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360944401", "text": "Good work.\r\n\r\nOne thing I notice: ranges like 2..-1 should be supported.\r\n\r\nStyle-wise, I'm not super enthusiastic at having so many private methods. For normal gems, I tend to do this, but standard lib style is usually \"simpler\" (for example with all the code in the same file) and I'd rather have the minimum number of private methods possible. If you want to keep the `raise_...` methods, they have to be renamed to something that describes better what they are doing (e.g. `check_...` or `insure_...`)", "created_at": "2018-01-27 00:47:47", "user": 33770, "id": 360944401}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361101156", "text": "I can't seem to understand how these ranges are supposed to work. I mean when I call `size` on `2..-1` I get `0` so I prepared my own way of getting the size of these ranges but I see it's wrong because `2..-1` doesn't correspond to array like this `[2, 1, 0, -1]`.  My example:\r\n```\r\na = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \r\n=> [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \r\ni = 2..-1\r\n=> 2..-1\r\na[1][2..-1]\r\n=> [6]\r\n```\r\n@marcandre could you explain how these ranges work and how I should tackle them?", "created_at": "2018-01-28 22:15:41", "user": 17675583, "id": 361101156}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361166579", "text": "You'll probably have to call `.begin`, `.end` and `.exclude_end?`", "created_at": "2018-01-29 07:59:41", "user": 33770, "id": 361166579}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361172339", "text": "I know that but the way I'm calculating size is wrong and I don't really understand how this should work. That's my current code:\r\n```\r\ndef range_size(range)\r\n    first = range.first\r\n    last = range.last\r\n    if first > last\r\n      if range.exclude_end?\r\n        first - (last + 1) + 1\r\n      else\r\n        first - last + 1\r\n      end\r\n    else\r\n      range.size\r\n    end\r\n  end\r\n```\r\nand when I execute this code:\r\n```\r\nm11 = Matrix[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\nm11[1, 2..-1] = 78\r\nMatrix[[1, 2, 3], [78, 78, 6], [7, 8, 9]] == m11\r\n```\r\nI get false because m11 becomes `Matrix[[1, 2, 3], [4, 5, 78, 78, 78, 78], [7, 8, 9]]` which is wrong because as I said I don't really know how these ranges work and why `2..-1` isn't equal to `2,1,0,-1` but only to `2,-1` or something? Could you at least shed some light on that? Is size just `begin/first + end/last` or what? ", "created_at": "2018-01-29 08:27:27", "user": 17675583, "id": 361172339}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361175483", "text": "`(a .. -2) <=> (a .. (size - 2) )`, so use `size + end - begin (+1?)`", "created_at": "2018-01-29 08:41:51", "user": 33770, "id": 361175483}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361596706", "text": "@marcandre done! I'm using `convert_range` to handle these ranges which doesn't require fixing every each and so on. I changed one thing in `set_row_and_col_range` because I noticed a mistake with setting matrices so I used the previous code fragment that works 100%.", "created_at": "2018-01-30 13:43:00", "user": 17675583, "id": 361596706}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361694103", "text": "Both methods `` range_within_count?`` and ``range_within_vector_range?`` use ``max <= (var - 1)`` which is equivalent to ``max < var``.", "created_at": "2018-01-30 18:47:02", "user": 11094484, "id": 361694103}, {"reactions": {"laugh": [11094484]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361704867", "text": "Thanks! Already corrected.", "created_at": "2018-01-30 19:22:43", "user": 17675583, "id": 361704867}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362092864", "text": "@marcandre any thoughts or feedback? I reckon everything is fine and ready for merge. ", "created_at": "2018-01-31 22:29:41", "user": 17675583, "id": 362092864}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362853915", "text": "@marcandre ping", "created_at": "2018-02-03 20:59:54", "user": 17675583, "id": 362853915}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/364204690", "text": "@marcandre I think is all done now", "created_at": "2018-02-08 18:28:28", "user": 17675583, "id": 364204690}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/364700339", "text": "@marcandre any feedback? After all these fixes it's probably ready to be merged.", "created_at": "2018-02-10 22:20:20", "user": 17675583, "id": 364700339}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365049917", "text": "@marcandre ping", "created_at": "2018-02-12 20:22:04", "user": 17675583, "id": 365049917}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/366357539", "text": "@marcandre ping", "created_at": "2018-02-16 21:03:34", "user": 17675583, "id": 366357539}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367399223", "text": "Sorry I haven't had time to look at it. Still in my todo list!", "created_at": "2018-02-21 17:10:55", "user": 33770, "id": 367399223}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367425618", "text": "Okay, no worries. I just wanted to remind you.", "created_at": "2018-02-21 18:35:10", "user": 17675583, "id": 367425618}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/372051317", "text": "@marcandre Have you had time to take a look? ", "created_at": "2018-03-10 18:12:51", "user": 17675583, "id": 372051317}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373509815", "text": "@marcandre ping", "created_at": "2018-03-15 20:20:11", "user": 17675583, "id": 373509815}, {"reactions": {"+1": [827143]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373999191", "text": "@marcandre I really want to make sure my code is okay and ready to be merged so as to serve other matrix lovers. So if you've had a chance to look at it just let me know.", "created_at": "2018-03-18 13:28:26", "user": 17675583, "id": 373999191}], "assignees": [33770, 33770], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/14162", "labels": [], "number": 1770, "updated_at": "2017-12-12 11:27:03", "user": 3138447, "closed_at": "2017-12-12 11:26:21", "id": 280781004, "title": "irb.rb: preserve ARGV on binding.irb", "url": "https://api.github.com/repos/ruby/ruby/issues/1770", "created_at": "2017-12-10 04:19:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1250153, 1180335, 167012, 15371677, 1830471, 239637, 17289963, 1796864, 4361134]}, "text": "Patch for: https://bugs.ruby-lang.org/issues/11925#note-11\r\n\r\n```rb\r\nFoo = Struct.new(:a, :b, keyword_init: true)\r\nFoo.new(a: 1, b: 2) #=> #<struct Foo a=1, b=2>\r\n```", "labels": [], "number": 1771, "updated_at": "2017-12-12 08:17:15", "user": 3138447, "closed_at": "2017-12-12 08:13:46", "id": 280787835, "title": "struct.c: add keyword_init option to Struct.new", "url": "https://api.github.com/repos/ruby/ruby/issues/1771", "created_at": "2017-12-10 06:45:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [12301]}, "text": "The previous git clone command is not work, the protocol in URL should be https", "labels": [], "number": 1772, "updated_at": "2017-12-13 02:44:43", "user": 7357597, "closed_at": "2017-12-13 02:44:43", "id": 280886185, "title": "Modify git clone command", "url": "https://api.github.com/repos/ruby/ruby/issues/1772", "created_at": "2017-12-11 03:50:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [11857, 167012]}, "text": "This follows up https://github.com/ruby/ruby/pull/1771. \r\n\r\nThis feature is suggested by @znz.", "labels": [], "number": 1773, "updated_at": "2017-12-12 15:11:15", "user": 3138447, "closed_at": "2017-12-12 15:04:52", "id": 281411390, "title": "struct.c: show keyword_init: true on inspect", "url": "https://api.github.com/repos/ruby/ruby/issues/1773", "created_at": "2017-12-12 14:50:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* file.c\r\n  * function **replace_wchar**\r\n  * function **user_length_in_path**\r\n\r\nI put in useful comments. In function **replace_wchar** I changed a identifier. ", "labels": [], "number": 1774, "updated_at": "2017-12-14 04:29:10", "user": 23243382, "closed_at": "2017-12-14 04:29:09", "id": 281828404, "title": "small beautification and documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1774", "created_at": "2017-12-13 17:14:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/351605741", "text": "We didn't handle stylistic changes via pull request.", "created_at": "2017-12-14 04:29:09", "user": 12301, "id": 351605741}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Followup of https://bugs.ruby-lang.org/issues/14123", "labels": [], "number": 1775, "updated_at": "2018-01-30 05:25:13", "user": 621238, "closed_at": "2018-01-30 05:25:13", "id": 282150929, "title": "Requiring pp is not required now [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1775", "created_at": "2017-12-14 16:02:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361481005", "text": "Already applied by a531c579f85d06868432c02495ec23098fe4da5b", "created_at": "2018-01-30 05:25:13", "user": 12301, "id": 361481005}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This way, if a process already has a reserved `SIG_IGN` handler\r\nthe same will be respected, restored and return backed when an\r\nattempt is being made to restored the same signal for a different\r\nhandler.\r\n\r\nIssue at: https://bugs.ruby-lang.org/issues/14196", "labels": [], "number": 1776, "updated_at": "2017-12-18 06:15:53", "user": 1100970, "closed_at": "2017-12-18 06:15:51", "id": 282769618, "title": "Restore signal if previous/old signal was intructed to be ignored", "url": "https://api.github.com/repos/ruby/ruby/issues/1776", "created_at": "2017-12-18 05:39:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Command Injection in Hosts::new() by use of Kernel#open", "labels": [], "number": 1777, "updated_at": "2018-01-29 18:14:03", "user": 20831187, "closed_at": "2017-12-20 04:19:36", "id": 283169205, "title": "Fixed command Injection", "url": "https://api.github.com/repos/ruby/ruby/issues/1777", "created_at": "2017-12-19 10:05:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/352698648", "text": "Here is the PoC of command injection\r\n```ruby\r\nrequire 'resolv'\r\na = Resolv::Hosts::new(\"|echo 1 > /tmp/rce\")\r\na.getaddress(\"lol\")\r\n```", "created_at": "2017-12-19 10:12:13", "user": 20831187, "id": 352698648}, {"reactions": {"+1": [13723]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/352731453", "text": "What situation is that an external input is fed to `Resolv::Hosts`?", "created_at": "2017-12-19 12:09:07", "user": 16700, "id": 352731453}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/352958462", "text": "Well actually kinda never. That is why I made a pr instead of reporting it to the security email.", "created_at": "2017-12-20 03:58:21", "user": 20831187, "id": 352958462}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361335337", "text": "@matzbot \r\n\r\nThere is a CVE with a score of 7.5 against this: https://www.cvedetails.com/cve/CVE-2017-17790/\r\n\r\nI don't see a code merge entry for this pull request.  Has this CVE been resolved through a separate channel?  If so please document by linking to that.", "created_at": "2018-01-29 18:13:24", "user": 28901899, "id": 361335337}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When trying to install some native gems in a ruby-25-rc1 compiled using 4.8.5 (Centos 7 or Ubuntu 14.04) you get this error related to new functions in `ruby.h`\r\n\r\n```\r\ngem install nokogiri\r\nBuilding native extensions. This could take a while...\r\nERROR:  Error installing nokogiri:\r\n        ERROR: Failed to build gem native extension.\r\n    current directory: /bitnami/rubystackDev-linux-x64/output/ruby/lib/ruby/gems/2.5.0/gems/nokogiri-1.8.1/ext/nokogiri\r\n/bitnami/rubystackDev-linux-x64/output/ruby/bin/ruby -r ./siteconf20171218-47665-bs04dc.rb extconf.rb\r\nchecking if the C compiler accepts -fPIC -I/bitnami/rubystackDev-linux-x64/output/common/include -fPIC -I/bitnami/rubystackDev-linux-x64/output/common/include -I/bitnami/rubystackDe\r\nv-linux-x64/output/common/include -fPIC -m64 -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/ImageMagick-6 -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/\r\nImageMagick-6/wand/ -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/ImageMagick-6/MagickCore/ -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/ImageMagick-6\r\n -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/ImageMagick-6/wand/ -I/bitnami/rubystackDev-linux-x64/output/ImageMagick/include/ImageMagick-6/MagickCore/... yes\r\nBuilding nokogiri using system libraries.\r\nchecking for xmlParseDoc() in libxml/parser.h... yes\r\nchecking for xsltParseStylesheetDoc() in libxslt/xslt.h... yes\r\nchecking for exsltFuncRegister() in libexslt/exslt.h... yes\r\nchecking for xmlHasFeature()... yes\r\nchecking for xmlFirstElementChild()... yes\r\nchecking for xmlRelaxNGSetParserStructuredErrors()... yes\r\nchecking for xmlRelaxNGSetParserStructuredErrors()... yes\r\nchecking for xmlRelaxNGSetValidStructuredErrors()... yes\r\nchecking for xmlSchemaSetValidStructuredErrors()... yes\r\nchecking for xmlSchemaSetParserStructuredErrors()... yes\r\ncreating Makefile\r\ncurrent directory: /bitnami/rubystackDev-linux-x64/output/ruby/lib/ruby/gems/2.5.0/gems/nokogiri-1.8.1/ext/nokogiri\r\nmake \"DESTDIR=\" clean\r\ncurrent directory: /bitnami/rubystackDev-linux-x64/output/ruby/lib/ruby/gems/2.5.0/gems/nokogiri-1.8.1/ext/nokogiri\r\nmake \"DESTDIR=\"\r\ncompiling html_document.c\r\nIn file included from /bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby.h:33:0,\r\n                 from ./nokogiri.h:33,\r\n                 from ./html_document.h:4,\r\n                 from html_document.c:1:\r\nhtml_document.c: In function ‘new’:\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:2222:12: warning: conversion to ‘int’ from ‘long unsigned int’ may alter its value [-Wconversion]\r\n     ((varc)/(rb_scan_args_count(fmt, varc)))\r\n            ^\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:2230:11: note: in expansion of macro ‘rb_scan_args_verify_count’\r\n  verify = rb_scan_args_verify_count(fmt, varc); \\\r\n           ^\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:2345:9: note: in expansion of macro ‘rb_scan_args_verify’\r\n        (rb_scan_args_verify(fmt, varc), vars))\r\n         ^\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:2172:9: note: in expansion of macro ‘rb_scan_args0’\r\n         rb_scan_args0(argc,argvp,fmt,\\\r\n         ^\r\nhtml_document.c:16:3: note: in expansion of macro ‘rb_scan_args’\r\n   rb_scan_args(argc, argv, \"0*\", &rest);\r\n   ^\r\nIn file included from /bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby.h:33:0,\r\n                 from ./nokogiri.h:33,\r\n                 from ./html_document.h:4,\r\n                 from html_document.c:1:\r\nhtml_document.c: In function ‘read_io’:\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:1767:5: error: first argument to ‘__builtin_choose_expr’ not a constant\r\n     __builtin_choose_expr(__builtin_constant_p(argc), \\\r\n     ^\r\n/bitnami/rubystackDev-linux-x64/output/ruby/include/ruby-2.5.0/ruby/ruby.h:2464:6: note: in expansion of macro ‘rb_varargs_argc_check’\r\n      rb_varargs_argc_check(rb_funcall_argc, rb_funcall_nargs), \\\r\n      ^\r\nhtml_document.c:66:28: note: in expansion of macro ‘rb_funcall’\r\n     VALUE encoding_found = rb_funcall(io, id_encoding_found, 0);\r\n                            ^\r\nmake: *** [html_document.o] Error 1\r\nmake failed, exit code 2\r\nGem files will remain installed in /bitnami/rubystackDev-linux-x64/output/ruby/lib/ruby/gems/2.5.0/gems/nokogiri-1.8.1 for inspection.\r\nResults logged to /bitnami/rubystackDev-linux-x64/output/ruby/lib/ruby/gems/2.5.0/extensions/x86_64-linux/2.5.0-static/nokogiri-1.8.1/gem_make.out\r\n```\r\n\r\nThis patch just check GCC version and `undef` the conflicting part.\r\n", "labels": [], "number": 1778, "updated_at": "2017-12-23 16:19:53", "user": 10630390, "closed_at": "2017-12-23 16:19:53", "id": 283960975, "title": "Fix ruby.h behaviour in old compilers: __builtin_choose_expr is different before 4.8.5", "url": "https://api.github.com/repos/ruby/ruby/issues/1778", "created_at": "2017-12-21 18:04:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353499699", "text": "Not tested but seemingly related GCC bug that was fixed in 4.9.\r\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=19449", "created_at": "2017-12-22 01:30:06", "user": 15377, "id": 353499699}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353509815", "text": "@silviofdez Can you file this issue with [our tracker](https://bugs.ruby-lang.org)?", "created_at": "2017-12-22 02:51:57", "user": 12301, "id": 353509815}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353542129", "text": "I don't reproduce this with `gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16)`.\r\nhttps://rubyci.org/logs/rubyci.s3.amazonaws.com/centos7/ruby-trunk/log/20171222T050003Z.log.html.gz\r\n\r\nMaybe yum update gcc can solve this.", "created_at": "2017-12-22 07:46:54", "user": 13423, "id": 353542129}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353574721", "text": "Ticket open on Redmine: https://bugs.ruby-lang.org/issues/14221 @hsbt \r\nI tested it on Centos 7.3 with gcc 4.8.5-11, testing with 7.4 and gcc 4.8.5-16 to check same environments.", "created_at": "2017-12-22 10:57:04", "user": 10630390, "id": 353574721}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353587545", "text": "@nurse I update our environment to Centos 7.4 and gcc 4.8.5-16 and still getting the same error. Both systems and gcc are affected by @shyouhei bug\r\nGiven the following code:\r\n\r\n```\r\n#define SHIFTLEFT(a,b) __builtin_choose_expr(__builtin_constant_p(b), \\\r\n      ((a) << (b)), \\\r\n      ((a) << (MIN(31,MAX(-31,(b))))))\r\n\r\nint foo(int a, int b) { return SHIFTLEFT (a, b); }\r\n```\r\nthe compiler will error:\r\n```\r\ngcc -O4 gcctest.c \r\ngcctest.c: In function `foo':\r\ngcctest.c:5: error: first argument to __builtin_choose_expr not a constant\r\n ```", "created_at": "2017-12-22 12:18:47", "user": 10630390, "id": 353587545}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353730222", "text": "I understand this issue is because the compiler which is used to build ruby (and config.h) is different from gcc 4.8.x which is now using to build nokogiri.\r\nHow to avoid this issue is under consideration...", "created_at": "2017-12-23 14:56:06", "user": 13423, "id": 353730222}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/353734771", "text": "https://github.com/ruby/ruby/commit/98bddfefc1773dc9a0f3771eb65224c26ee66281 fixes this issue", "created_at": "2017-12-23 16:19:53", "user": 13423, "id": 353734771}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [10411827, 386234, 1147484, 392754, 306253]}, "text": "By carefully arranging PC and SP manipulations, this changeset reduces the binary size of vm_exec_core from 37,040 bytes to 28,304 bytes on my machine.\r\n\r\nFor instance, instruction `opt_plus` changes like this (indentation modified):\r\n\r\n```diff\r\n--- trunk/vm.inc:opt_plus\t2017-12-22 16:07:21.000000000 +0900\r\n+++ ours/vm.inc:opt_plus\t2017-12-22 16:07:18.000000000 +0900\r\n@@ -1,32 +1,30 @@\r\n INSN_ENTRY(opt_plus){\r\n+    MAYBE_UNUSED(CALL_CACHE) cc;\r\n+    MAYBE_UNUSED(CALL_INFO) ci;\r\n+    MAYBE_UNUSED(VALUE) obj, recv, val;\r\n+\r\n     START_OF_ORIGINAL_INSN(opt_plus);\r\n-    {\r\n-    VALUE val;\r\n-    CALL_CACHE cc = (CALL_CACHE)GET_OPERAND(2);\r\n-    CALL_INFO ci = (CALL_INFO)GET_OPERAND(1);\r\n-    VALUE recv = TOPN(1);\r\n-    VALUE obj = TOPN(0);\r\n+    ci = (CALL_INFO)GET_OPERAND(1);\r\n+    cc = (CALL_CACHE)GET_OPERAND(2);\r\n+    recv = TOPN(1);\r\n+    obj = TOPN(0);\r\n     DEBUG_ENTER_INSN(\"opt_plus\");\r\n-    ADD_PC(1+2);\r\n-    PREFETCH(GET_PC());\r\n-    POPN(2);\r\n     COLLECT_USAGE_INSN(BIN(opt_plus));\r\n     COLLECT_USAGE_OPERAND(BIN(opt_plus), 0, ci);\r\n     COLLECT_USAGE_OPERAND(BIN(opt_plus), 1, cc);\r\n     {\r\n #line nnnn \"insns.def\"\r\n     val = vm_opt_plus(recv, obj);\r\n \r\n     if (val == Qundef) {\r\n-        /* other */\r\n-        PUSH(recv);\r\n-        PUSH(obj);\r\n-        CALL_SIMPLE_METHOD(recv);\r\n+        DISPATCH_ORIGINAL_INSN(opt_send_without_block);\r\n     }\r\n #line nnnn \"vm.inc\"\r\n     }\r\n+    ADD_PC(3);\r\n+    PREFETCH(GET_PC());\r\n+    ADJ_SP(-1);\r\n+    TOPN(0) = val;\r\n     CHECK_VM_STACK_OVERFLOW_FOR_INSN(VM_REG_CFP, 1);\r\n-    PUSH(val);\r\n     END_INSN(opt_plus);\r\n-    }\r\n }\r\n```\r\n\r\nHere you can see the `ADD_PC` and `POPN` / `INC_SP` macros moved from the prelude of the instruction to the finale.  This makes it possible to replace `CALL_SIMPLE_METHOD(recv)` with `DISPATCH_ORIGINAL_INSN(opt_send_without_block)`.  These two macros differ in size very much and results in this big difference in compiled binary size.\r\n\r\nAnd here you are the benchmark results:\r\n\r\n![screen shot 2017-12-22 at 14 10 53](https://user-images.githubusercontent.com/15377/34289337-63f4921e-e735-11e7-9964-8440f53f2568.png)\r\n\r\n<details>\r\n```\r\nElapsed time: 347.98301 (sec)\r\n-----------------------------------------------------------\r\nbenchmark results:\r\nminimum results in each 3 measurements.\r\nExecution time (sec)\r\nname\t2.4\ttrunk\tours\r\nso_ackermann\t0.521\t0.479\t0.475\r\nso_array\t0.843\t0.952\t0.810\r\nso_binary_trees\t6.277\t6.304\t5.971\r\nso_concatenate\t4.758\t4.475\t3.752\r\nso_count_words\t0.171\t0.171\t0.172\r\nso_exception\t0.303\t0.269\t0.265\r\nso_fannkuch\t1.153\t1.103\t1.078\r\nso_fasta\t1.712\t1.655\t1.596\r\nso_k_nucleotide\t1.312\t1.311\t1.316\r\nso_lists\t0.534\t0.506\t0.520\r\nso_mandelbrot\t2.661\t2.851\t2.412\r\nso_matrix\t0.556\t0.579\t0.491\r\nso_meteor_contest\t3.263\t3.318\t3.126\r\nso_nbody\t1.470\t1.537\t1.561\r\nso_nested_loop\t1.310\t1.370\t1.151\r\nso_nsieve\t1.782\t1.804\t1.771\r\nso_nsieve_bits\t2.427\t2.425\t2.343\r\nso_object\t0.806\t0.755\t0.753\r\nso_partial_sums\t1.867\t2.064\t2.054\r\nso_pidigits\t1.192\t1.179\t1.175\r\nso_random\t0.420\t0.409\t0.388\r\nso_reverse_complement\t0.609\t0.610\t0.578\r\nso_sieve\t0.501\t0.514\t0.522\r\nso_spectralnorm\t1.876\t1.984\t1.812\r\n\r\nSpeedup ratio: compare with the result of `2.4' (greater is better)\r\nname\ttrunk\tours\r\nso_ackermann\t1.087\t1.097\r\nso_array\t0.886\t1.041\r\nso_binary_trees\t0.996\t1.051\r\nso_concatenate\t1.063\t1.268\r\nso_count_words\t0.999\t0.992\r\nso_exception\t1.128\t1.142\r\nso_fannkuch\t1.046\t1.069\r\nso_fasta\t1.035\t1.073\r\nso_k_nucleotide\t1.000\t0.997\r\nso_lists\t1.054\t1.027\r\nso_mandelbrot\t0.933\t1.103\r\nso_matrix\t0.960\t1.131\r\nso_meteor_contest\t0.983\t1.044\r\nso_nbody\t0.957\t0.942\r\nso_nested_loop\t0.957\t1.138\r\nso_nsieve\t0.988\t1.006\r\nso_nsieve_bits\t1.001\t1.036\r\nso_object\t1.067\t1.070\r\nso_partial_sums\t0.905\t0.909\r\nso_pidigits\t1.011\t1.015\r\nso_random\t1.029\t1.083\r\nso_reverse_complement\t1.000\t1.055\r\nso_sieve\t0.974\t0.960\r\nso_spectralnorm\t0.945\t1.035\r\n```\r\n</details>\r\n", "labels": [], "number": 1779, "updated_at": "2018-01-31 06:11:14", "user": 15377, "closed_at": "2018-01-29 07:16:21", "id": 284092728, "title": "24% reduction of compiled vm_exec_core function", "url": "https://api.github.com/repos/ruby/ruby/issues/1779", "created_at": "2017-12-22 07:31:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/359346898", "text": "First half of this request was split into #1783 then merged.  I had to rebase this branch to the recent trunk.", "created_at": "2018-01-22 07:42:40", "user": 15377, "id": 359346898}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361139710", "text": "https://github.com/ruby/ruby/commit/3234245ae3240fd2018d8d33de998d0573914111 is (was) also a part of this pull request that was cherry-picked.  Rebased again.", "created_at": "2018-01-29 04:49:57", "user": 15377, "id": 361139710}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361834334", "text": "This is a part of #1419 (not a straight cherry-pick, through).", "created_at": "2018-01-31 06:11:10", "user": 15377, "id": 361834334}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`RUBY_PATCHNAME` will return:\r\n\r\n- p{level}\r\n- dev\r\n- rc/preview labels\r\n\r\nThis is especially helpful when ruby is in\r\nrc/preview and `RUBY_PATCHLEVEL` is set to `-1`.\r\n\r\n`RUBY_PATCHNAME` is only a proposal name for the constant :)\r\nFeature request at https://bugs.ruby-lang.org/issues/14217", "labels": [], "number": 1780, "updated_at": "2018-02-23 03:07:42", "user": 1100970, "closed_at": "None", "id": 284321901, "title": "Introduce RUBY_PATCHNAME constant", "url": "https://api.github.com/repos/ruby/ruby/issues/1780", "created_at": "2017-12-23 19:10:33", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Current check for __uint128_t in hash.c is not valid, since it ignores\r\ncompilers other than gcc. We hit this on lcc on e2k platform.\r\n\r\nConfigure script properly checks from 128-bit data types support and\r\nsets HAVE_UINT128_T accordingly. This approach is already used within\r\nruby at bignum.c, random.c, etc.\r\n\r\nProbably hash.c is an overlooked remnant of old days. This patch fixes\r\nthis.", "labels": [], "number": 1781, "updated_at": "2017-12-25 12:33:14", "user": 2441945, "closed_at": "2017-12-25 12:33:14", "id": 284436203, "title": "Use UINT128_T support flag from configure", "url": "https://api.github.com/repos/ruby/ruby/issues/1781", "created_at": "2017-12-25 10:52:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [1444763, 1264305, 1406220, 117877, 10869046, 122018, 41246, 4083992, 33282399, 2637951, 17336201, 826420, 822237, 576701, 2729095, 1760771, 2039384, 2481552, 1809170, 4132009, 1655218, 8143124, 1206395, 37493, 451815, 10099, 7119729, 531650, 14142, 5091851], "heart": [167012, 7338443, 881478, 591247, 1703556, 12642, 59744, 82408, 22009, 590063, 681496, 2303500, 424277, 230654, 18273, 281076, 147351, 22629, 1452950, 535718, 14996977, 73962, 248093, 802339, 1147484, 1323588, 378214, 96157, 1296641, 4689898, 150547, 50499, 990485, 15087995, 357288, 959128, 918975, 1264305, 969118, 1501100, 294616, 1196822, 4784, 5853222, 12146546, 10141, 349175, 117877, 4304764, 11767933, 122018, 7563228, 41246, 4083992, 33282399, 471559, 3124, 1730156, 2637951, 17336201, 66961, 11302907, 8066888, 822237, 1395527, 4139284, 293672, 3582970, 31591, 2598096, 8162268, 198547, 4132009, 1728948, 1655218, 675705, 8143124, 1371190, 1191305, 1206395, 176234, 12610, 451815, 10099, 7119729, 531650, 722544, 4437], "+1": [13723, 20381374, 50499, 990485, 918975, 1264305, 1624302, 969118, 1196822, 61285, 2341756, 10141, 117877, 5271382, 122018, 868879, 182082, 41246, 37484, 700826, 4083992, 33282399, 9107011, 8066888, 683590, 17336201, 1730156, 8319689, 4023108, 1975119, 11302907, 822237, 312873, 576701, 31591, 2729095, 12276, 8162268, 198547, 631534, 19505, 150648, 1164751, 1728948, 1655218, 8143124, 1371190, 1724136, 1206395, 451815, 52836, 2135820, 10099, 18601, 657395, 92928, 531650, 14142, 5091851], "laugh": [12301, 1264305, 117877, 17336201, 4132009, 1206395, 451815, 10099]}, "text": "https://bugs.ruby-lang.org/issues/14235\r\n\r\n## Background\r\n\r\nIn [Feature#12589](https://bugs.ruby-lang.org/issues/12589), Vladimir Makarov proposed to improve VM performance by replacing VM instructions\r\nto RTL and introduce method JIT compiler based on those instructions.\r\n\r\nWhile his approach for JIT (write C code to local file system, let C compiler executable\r\nto compile it to shared object file and load it dynamically) was great and proven to work,\r\nreplacing all VM instructions may change the behavior of all Ruby programs and we can't turn off\r\nsuch changes once it's released, even if we find a problem. So it's a little risky unlike optional JIT enablement.\r\n\r\nThen I developed a JIT compiler called YARV-MJIT, which does not require any VM instruction changes.\r\nAfter it, I heard Vladimir started to work on another approach to compile from current YARV instructions and\r\nuse RTL as IR for JIT compilation, but it's not published yet as far as I know.\r\n\r\n## Problems\r\n\r\n* We're developing the same JIT infrastructure independently, which can be shared for both implementations\r\n  * it's definitely a waste of time, unlike seeking different optimization approaches\r\n* If we continue to develop JIT in a big feature branch,\r\n  * affected places will be big too, and thus it'll be a dangerous release\r\n  * all of us will continue to waste our time by day-to-day conflict resolution against trunk\r\n  * many valuable commit logs will be lost when we maintain the branch for rebase or squash commits on merge\r\n\r\n## Solution\r\n\r\n* **Proposal:** Merge MJIT infrastructure from Vladimir's patch with a conservative JIT compiler in early 2.6 development.\r\n  * MJIT infrastructure means: JIT worker thread, profiler, gcc/clang compiler support, loading function from shared object file, some hooks to ensure JIT does not cause SEGV, etc...\r\n\r\n### What's the \"conservative JIT compiler\"?\r\n\r\n* Based on my YARV-MJIT, but this drops some problematic optimizations and is slower\r\n* Pass `make test`, `make test-all`, `make test-spec` with and without JIT https://travis-ci.org/ruby/ruby/builds/321589821\r\n* Unlike MJIT on RTL, we can play optcarrot (not just for benchmark, but on GUI) and run Rails application stably (not tested on production yet though)\r\n\r\n### Notes\r\n\r\n* As YARV-MJIT implementation improved MJIT infrastructure too, pthread was already ported to Windows native threads and it can be compiled with Visual Studio.\r\n  * That's exactly why we should develop this in cooperation\r\n* Visual Sudio is not supported as C compiler for JIT compilation. I did some experiments and had some ideas to support cl.exe, but I didn't want to add extra complexity to initial merge.\r\n  * But it's perfectly working on MinGW and this will be available on Windows if a user uses RubyInstaller2.\r\n\r\n### Optcarrot\r\nBenchmarked with: Intel 4.0GHz i7-4790K with 16GB memory under x86-64 Ubuntu 8 Cores\r\n\r\n**Note: result was changed when it's commited. See https://github.com/ruby/ruby/commit/ed935aa5be0e5e6b8d53c3e7d76a9ce395dfa18b.**\r\n\r\n|              |2.0.0      |2.5.0      |JIT off    |JIT on     |\r\n|:-------------|:----------|:----------|:----------|:----------|\r\n|optcarrot fps |35.05      |46.75      |46.05      |63.06      |\r\n|vs 2.0.0      |1.00x      |1.33x      |1.31x      |1.80x      |\r\n\r\n* 2.0.0: Ruby 2.0.0-p0\r\n* 2.5.0: Ruby 2.5.0 (r61468)\r\n* JIT off: Patched Ruby (based on r61475), JIT disabled\r\n* JIT on: Patched Ruby (based on r61475), JIT enabled w/ gcc 5.4.0\r\n\r\n\r\nDisclaimer: This JIT compiler performs better with gcc compared to clang for now, so it may be slow on macOS (clang).\r\n\r\n### Micro benchmarks\r\n\r\nI used Vladimir's benchmark set which I modified for my convenience https://github.com/benchmark-driver/mjit-benchmarks.\r\n\r\n**Note: result was changed when it's commited. See https://github.com/ruby/ruby/commit/ed935aa5be0e5e6b8d53c3e7d76a9ce395dfa18b.**\r\n\r\n|           |2.0.0-p0   |2.5.0      |JIT off     |JIT on      |\r\n|:----------|:----------|:----------|:----------|:----------|\r\n|aread      |1.00       |1.01       |0.97       |2.33       |\r\n|aref       |1.00       |0.96       |0.96       |3.01       |\r\n|aset       |1.00       |1.39       |1.37       |3.70       |\r\n|awrite     |1.00       |1.07       |1.03       |2.54       |\r\n|call       |1.00       |1.25       |1.22       |3.39       |\r\n|const      |1.00       |0.96       |0.96       |4.00       |\r\n|const2     |1.00       |0.96       |0.96       |3.97       |\r\n|fannk      |1.00       |0.98       |1.02       |1.00       |\r\n|fib        |1.00       |1.16       |1.24       |3.19       |\r\n|ivread     |1.00       |0.94       |0.93       |4.96       |\r\n|ivwrite    |1.00       |1.09       |1.09       |3.32       |\r\n|mandelbrot |1.00       |0.98       |0.98       |1.27       |\r\n|meteor     |1.00       |3.02       |2.85       |3.16       |\r\n|nbody      |1.00       |1.02       |0.99       |1.47       |\r\n|nest-ntimes|1.00       |1.05       |1.01       |1.31       |\r\n|nest-while |1.00       |0.96       |0.96       |1.63       |\r\n|norm       |1.00       |1.06       |1.07       |1.26       |\r\n|nsvb       |1.00       |0.98       |0.88       |0.88       |\r\n|red-black  |1.00       |1.03       |1.02       |1.54       |\r\n|sieve      |1.00       |1.22       |1.22       |1.75       |\r\n|trees      |1.00       |1.07       |1.08       |1.32       |\r\n|while      |1.00       |0.96       |0.96       |5.13       |\r\n\r\n## Interface details\r\n\r\nIf the proposal is accepted, I'm going to add following CLI options:\r\n\r\n```\r\n  -j, --jit       use MJIT with default options\r\n  -j:option, --jit:option\r\n                  use MJIT with an option\r\n\r\nMJIT options:\r\n  c, cc           C compiler to generate native code (gcc, clang)\r\n  s, save-temps   Save MJIT temporary files in $TMP or /tmp\r\n  w, warnings     Enable printing MJIT warnings\r\n  d, debug        Enable MJIT debugging (very slow)\r\n  v=num, verbose=num\r\n                  Print MJIT logs of level num or less to stderr\r\n  n=num, num-cache=num\r\n                  Maximum number of JIT codes in a cache\r\n```\r\n\r\nNote that `-j:l`/`--jit:llvm` are changed to `-j:c`/`--jit:cc` so that we can support cl.exe (Visual Studio) in the future.\r\n\r\nAlso, for testing, I would like to have following module and method.\r\n\r\n```rb\r\nMJIT.enabled? #=> true / false\r\n```\r\n\r\nSee the commit log for details.", "labels": [], "number": 1782, "updated_at": "2018-02-04 14:49:01", "user": 3138447, "closed_at": "2018-02-04 14:47:32", "id": 284474017, "title": "Merge MJIT infrastructure with conservative JIT compiler", "url": "https://api.github.com/repos/ruby/ruby/issues/1782", "created_at": "2017-12-25 23:43:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355274900", "text": "Where I should report issues related to mjit? I did some performance tests and I would like to share my results and observations with you.", "created_at": "2018-01-04 12:52:58", "user": 4495, "id": 355274900}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355492754", "text": "@radarek \r\ndev repositories\r\nhttps://github.com/k0kubun/ruby\r\nhttps://github.com/k0kubun/yarv-mjit\r\n  ", "created_at": "2018-01-05 07:47:59", "user": 4083992, "id": 355492754}, {"reactions": {"heart": [4083992]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355493796", "text": "Thank you for your comments. Final results should be written to https://bugs.ruby-lang.org/issues/14235 for easy tracking, but at this moment here or https://github.com/k0kubun/yarv-mjit/issues is better.\r\n\r\nThat's because the result may be changed before merge. To remove all bugs, I'm going to add some guards and the benchmark score will be a little worse after that.", "created_at": "2018-01-05 07:55:10", "user": 3138447, "id": 355493796}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355813135", "text": "I added some guards to let all tests pass with AOT compilation, and removed some optimizations to omit SEGV by race condition (which should be fixed and added later). \r\n\r\nThen unfortunately performance is made worse as follows :disappointed:, but now it's probably ready to merge.\r\n\r\n## Optcarrot\r\n| | ~JIT ([before fix](https://github.com/ruby/ruby/pull/1782/commits/db6e3e4f2759f17b302805f8d193b3cc1c2a5f74))~ | JIT ([after fix](https://github.com/ruby/ruby/pull/1782/commits/7efca52e7b24fca33b812eeef32aa0403f65ac1f)) | 2.6.0 | 2.0.0 |\r\n|:---|:-------|:-------|:------|:----|\r\n| optcarrot fps | ~60.96~ | 52.72 | 45.50 | 34.74 |\r\n| vs 2.0.0 | ~1.75x~ | 1.51x | 1.31x | 1.00x |\r\n\r\n## Micro benchmarks (revised)\r\nUsed https://github.com/benchmark-driver/mjit-benchmarks\r\n\r\n|           |2.0.0-p0   |2.5.0      |JIT off     |JIT on      |\r\n|:----------|:----------|:----------|:----------|:----------|\r\n|aread      |1.00       |1.07       |1.04       |2.25       |\r\n|aref       |1.00       |0.96       |0.96       |2.44       |\r\n|aset       |1.00       |1.37       |1.34       |3.13       |\r\n|awrite     |1.00       |1.05       |1.05       |2.22       |\r\n|call       |1.00       |1.25       |1.22       |2.41       |\r\n|const      |1.00       |0.96       |0.98       |2.31       |\r\n|const2     |1.00       |0.97       |0.98       |2.31       |\r\n|fannk      |1.00       |0.98       |0.99       |0.98       |\r\n|fib        |1.00       |1.27       |1.23       |2.01       |\r\n|ivread     |1.00       |0.94       |0.94       |3.14       |\r\n|ivwrite    |1.00       |1.09       |1.08       |2.79       |\r\n|mandelbrot |1.00       |0.93       |0.95       |1.18       |\r\n|meteor     |1.00       |2.97       |2.95       |3.19       |\r\n|nbody      |1.00       |1.03       |1.00       |1.43       |\r\n|nest-ntimes|1.00       |1.05       |1.08       |1.26       |\r\n|nest-while |1.00       |0.95       |0.95       |1.55       |\r\n|norm       |1.00       |1.06       |1.02       |1.18       |\r\n|nsvb       |1.00       |1.07       |1.07       |1.07       |\r\n|red-black  |1.00       |1.03       |0.97       |1.01       |\r\n|sieve      |1.00       |1.22       |1.25       |1.59       |\r\n|trees      |1.00       |1.17       |1.18       |1.29       |\r\n|while      |1.00       |0.96       |0.96       |3.23       |\r\n  \r\n## Discourse v1.8.7\r\n### Without JIT\r\n```\r\nYour Results: (note for timings- percentile is first, duration is second in millisecs)\r\n---\r\ncategories_admin:\r\n  50: 12\r\n  75: 13\r\n  90: 15\r\n  99: 23\r\nhome_admin:\r\n  50: 12\r\n  75: 12\r\n  90: 12\r\n  99: 19\r\ntopic_admin:\r\n  50: 12\r\n  75: 12\r\n  90: 13\r\n  99: 19\r\ncategories:\r\n  50: 16\r\n  75: 17\r\n  90: 18\r\n  99: 25\r\nhome:\r\n  50: 3\r\n  75: 3\r\n  90: 4\r\n  99: 9\r\ntopic:\r\n  50: 10\r\n  75: 10\r\n  90: 11\r\n  99: 19\r\ntimings:\r\n  load_rails: 1229\r\nruby-version: 2.6.0-p-1\r\nrss_kb: 201528\r\npss_kb: 133763\r\nkernelversion: 4.4.0\r\nvirtual: physical\r\nphysicalprocessorcount: 1\r\narchitecture: amd64\r\noperatingsystem: Ubuntu\r\nprocessor0: Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz\r\nmemorysize: 15.37 GB\r\nrss_kb_19439: 297812\r\npss_kb_19439: 228245\r\nrss_kb_19517: 297072\r\npss_kb_19517: 227262\r\nrss_kb_19622: 297448\r\npss_kb_19622: 227615\r\n```\r\n\r\n### With JIT (`-j:n=10000`)\r\nWith JIT, somehow things become worse :cry:. I haven't researched the reason yet, but probably speculation of JIT is not met and JIT execution is frequently canceled... We should improve this.\r\n\r\n```\r\nYour Results: (note for timings- percentile is first, duration is second in millisecs)\r\n---\r\ncategories_admin:\r\n  50: 13\r\n  75: 15\r\n  90: 18\r\n  99: 27\r\nhome_admin:\r\n  50: 13\r\n  75: 14\r\n  90: 16\r\n  99: 22\r\ntopic_admin:\r\n  50: 13\r\n  75: 14\r\n  90: 16\r\n  99: 21\r\ncategories:\r\n  50: 18\r\n  75: 20\r\n  90: 24\r\n  99: 28\r\nhome:\r\n  50: 4\r\n  75: 4\r\n  90: 5\r\n  99: 9\r\ntopic:\r\n  50: 11\r\n  75: 12\r\n  90: 13\r\n  99: 19\r\ntimings:\r\n  load_rails: 1215\r\nruby-version: 2.6.0-p-1\r\nrss_kb: 218600\r\npss_kb: 151622\r\nkernelversion: 4.4.0\r\nvirtual: physical\r\nphysicalprocessorcount: 1\r\narchitecture: amd64\r\noperatingsystem: Ubuntu\r\nprocessor0: Intel(R) Core(TM) i7-4790K CPU @ 4.00GHz\r\nmemorysize: 15.37 GB\r\nrss_kb_2030: 303228\r\npss_kb_2030: 233047\r\nrss_kb_2397: 305372\r\npss_kb_2397: 235033\r\nrss_kb_2560: 303944\r\npss_kb_2560: 233322\r\n```\r\n  ", "created_at": "2018-01-07 10:34:43", "user": 3138447, "id": 355813135}, {"reactions": {"hooray": [6302494, 2637951], "heart": [4083992, 1264305, 1024162, 2162735, 2836167, 19505, 2481552, 1196822, 4132009, 795266, 1655218, 675705, 1809973, 75613, 925271, 182119, 10411827, 576701, 1729299, 1371190, 1606574, 4926278, 1487546, 378214, 142254, 7119729], "+1": [1371190, 92928]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/356296451", "text": "## Current status\r\nI got some ideas to improve above performance to original proposal's one. \r\n\r\nUntil Jan 24th (next Ruby developers meeting at Tokyo), I'll work on it, try to figure out why it becomes worse with Rails, and create a script that generates `compile_insn` from insns.def for maintainability. \r\n\r\nIf things go well, hepefully this (or part of this) will be merged on that day.\r\n  \r\n(edit) I'm building JIT compiler generator to decrease maintenance cost before merging.", "created_at": "2018-01-09 14:19:21", "user": 3138447, "id": 356296451}, {"reactions": {"hooray": [2637951, 10411827, 14354821, 18376110], "+1": [8066888, 531650, 2637951, 10411827, 52836]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362911866", "text": "While current trunk's performance is worse than my original benchmark and I have some uncommitted ideas to fix it, most of this work is merged in https://github.com/ruby/ruby/commit/0af44e72611583963220e40215fc36f31fa80185, https://github.com/ruby/ruby/commit/fd44a5777fbca386a78cccff9aa02eca155b0752 and https://github.com/ruby/ruby/commit/ed935aa5be0e5e6b8d53c3e7d76a9ce395dfa18b.\r\n\r\nThere are still a lot of things to be done, but it's time to close this PR.", "created_at": "2018-02-04 14:47:32", "user": 3138447, "id": 362911866}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@k0kubun @ko1 @mame here you are.  No optimizations, passes test-all on my machine.", "labels": [], "number": 1783, "updated_at": "2018-02-01 01:32:58", "user": 15377, "closed_at": "2018-01-15 05:31:44", "id": 284654041, "title": "Rewrite VM generator", "url": "https://api.github.com/repos/ruby/ruby/issues/1783", "created_at": "2017-12-27 05:54:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355831316", "text": "Is there any blocker to merge this? As I'm going to touch around insns.def for https://github.com/ruby/ruby/pull/1782, I would be happy if this is merged to trunk first.", "created_at": "2018-01-07 15:42:42", "user": 3138447, "id": 355831316}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355898721", "text": "@shyouhei I've noticed you're using `gsub` to replace strings while this talk: [https://youtu.be/fGFM_UrSp70?t=1630](https://youtu.be/fGFM_UrSp70?t=1630) says `sub` is actually faster.(I linked to the actual time when it is discussed)\r\n\r\nEDIT: I forgot to mention that I mean some cases where you can use `sub` and `gsub` interchangeably.", "created_at": "2018-01-08 07:35:22", "user": 17675583, "id": 355898721}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/356146431", "text": "@greggzst \r\n> you're using `gsub` to replace strings while this talk (snip) says `sub` is actually faster.\r\n\r\nYes.  This is true.  However,\r\n\r\n>  I mean some cases where you can use `sub` and `gsub` interchangeably.\r\n\r\nI fail to see the actual `gsub` usage in the pull request that is interchangeable with `sub`.  Can you point one?", "created_at": "2018-01-09 01:01:53", "user": 15377, "id": 356146431}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/356242970", "text": "At first I thought I found a spot but after thorough examination of your code I think I must've made a mistake. Sorry about that.", "created_at": "2018-01-09 10:23:56", "user": 17675583, "id": 356242970}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357586589", "text": "forgot to mention in the commit log but this pull request was merged already ✨   Closing.", "created_at": "2018-01-15 05:31:44", "user": 15377, "id": 357586589}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362129041", "text": "related: #1419, #1779 ", "created_at": "2018-02-01 01:32:58", "user": 15377, "id": 362129041}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is for [Feature #13784](https://bugs.ruby-lang.org/issues/13784).\r\n\r\nIt makes `filter` behave like `find_all` and `select`, and `filter!` behave like `select!`:\r\n```ruby\r\n[1,2,3,4,5].filter { |num| num.even? }\r\n=> [2, 4]\r\n{a: 2, b: 3}.filter! { |k,v| v.even? }\r\n=> {:a=>2}\r\n```\r\n\r\nThere is an older pull request for this [here](https://github.com/ruby/ruby/pull/1672/). I'm sorry for opening a new one -- I accidentally pushed commits from `git fetch upstream` to the old PR, and wasn't sure how to undo it. This new PR has fixes for several merge conflicts that have appeared since August.", "labels": [], "number": 1784, "updated_at": "2018-02-25 13:54:44", "user": 22453855, "closed_at": "2018-02-25 13:54:44", "id": 285127208, "title": "Added 'filter' alias for 'find_all' and 'select'", "url": "https://api.github.com/repos/ruby/ruby/issues/1784", "created_at": "2017-12-29 17:22:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368255250", "text": "Is there anything else I can do?", "created_at": "2018-02-24 19:57:16", "user": 22453855, "id": 368255250}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368266688", "text": "@adp90 I am sorry, I forgot about this pull request. I will take a look tomorrow.", "created_at": "2018-02-24 22:52:32", "user": 168854, "id": 368266688}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368311193", "text": "Merged in b1a8c64483b5ba5e4a391aa68234e7bde6355034 with a few tweaks for the specs and adding it to the `NEWS` file, thanks for the PR!", "created_at": "2018-02-25 13:54:44", "user": 168854, "id": 368311193}], "assignees": [168854, 168854], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": [], "number": 1785, "updated_at": "2018-01-04 00:45:42", "user": 645514, "closed_at": "2018-01-04 00:45:42", "id": 285562471, "title": "Fix doc typo in Symbol#to_proc", "url": "https://api.github.com/repos/ruby/ruby/issues/1785", "created_at": "2018-01-02 23:11:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**Add a faster Prime:prime? algorithm**\r\nI worked the other day on a problem from the Euler Project and found myself using Prime:prime? to iterate over a large set of numbers. While doing that I noticed that the Prime:prime? method was a little slow. I swapped it with another algorithm I found on [SO](https://stackoverflow.com/questions/1801391/what-is-the-best-algorithm-for-checking-if-a-number-is-prime). The result was incredible:\r\n```bash\r\n$ (Prime:prime?) Time to complete (10 million): 205.742023\r\n$ (Prime:prime?) 664579 prime numbers found\r\n\r\n$ (new_prime?) Time to complete (10 million): 50.634685\r\n$ (new_prime?) 664579 prime numbers found\r\n```\r\nAs you can see iterating over 10 million numbers, the new algorithm is able to find the same prime numbers 4 times faster. I ran the tests locally and everything seems to work fine.\r\nCould you double check ?\r\n  ", "labels": [], "number": 1786, "updated_at": "2018-02-23 03:07:43", "user": 11302907, "closed_at": "None", "id": 285843278, "title": "Improve Prime:prime? algorithm up to 4 times faster", "url": "https://api.github.com/repos/ruby/ruby/issues/1786", "created_at": "2018-01-03 23:46:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355179285", "text": "sorry, I ran the `spec` tests at first and didn't notice the `test` folder which is why I had to push 2 fixes.", "created_at": "2018-01-04 01:57:48", "user": 11302907, "id": 355179285}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/356767956", "text": "I ran the proposed method, and did see a *slight* (20%) improvement, but no where near the 400% speedup claimed. I'd be curious to see the actual test ran, rather than just the result @Mycroft1891 ?\r\n\r\nHere is my *complete* benchmarking code, with results:\r\n\r\n```\r\nclass Integer\r\n  def prime_orig?\r\n    return self >= 2 if self <= 3\r\n    return true if self == 5\r\n    return false unless 30.gcd(self) == 1\r\n    (7..Integer.sqrt(self)).step(30) do |p|\r\n      return false if\r\n        self%(p)    == 0 || self%(p+4)  == 0 || self%(p+6)  == 0 || self%(p+10) == 0 ||\r\n        self%(p+12) == 0 || self%(p+16) == 0 || self%(p+22) == 0 || self%(p+24) == 0\r\n    end\r\n    true\r\n  end\r\n\r\n  def prime_new?\r\n    return false if self <= 1\r\n    return true  if self == 2 || self == 3\r\n    return false if self % 2 == 0 || self % 3 == 0\r\n    i = 5\r\n    w = 2\r\n    while i * i <= self\r\n      return false if self % i == 0\r\n      i += w\r\n      w = 6 - w\r\n    end\r\n    true\r\n  end\r\nend\r\n\r\nrequire 'benchmark'\r\niterations = 100_000\r\nnumbers = (-100..1_000).to_a\r\n\r\nBenchmark.bmbm(20) do |bm|\r\n  bm.report('Original method') do\r\n    iterations.times do\r\n      numbers.select(&:prime_orig?)\r\n    end\r\n  end\r\n\r\n  bm.report('New method') do\r\n    iterations.times do\r\n      numbers.select(&:prime_new?)\r\n    end\r\n  end\r\nend\r\n\r\nRehearsal --------------------------------------------------------\r\nOriginal method       31.264767   0.097343  31.362110 ( 31.447996)\r\nNew method            24.547395   0.131066  24.678461 ( 24.687701)\r\n---------------------------------------------- total: 56.040571sec\r\n\r\n                           user     system      total        real\r\nOriginal method       31.111096   0.040542  31.151638 ( 31.177937)\r\nNew method            24.643408   0.160427  24.803835 ( 24.895586)\r\n```\r\n\r\nNote that real world usage of `Integer#prime?` may differ from the above test case, so this is by no means a definitive result.\r\n\r\nEdit: In fact, after a little more experimentation, on my machine I found that the new method is increasingly **slower** for integers greater than about `10_000`. For example, for integers in the ballpark of `20_000_000`, this new method is roughly *half* the speed of the original.", "created_at": "2018-01-10 23:06:47", "user": 7573396, "id": 356767956}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357006554", "text": "My test was much simpler, I will try out yours a little later.\r\nFor now here is my test:\r\n\r\n```\r\nrequire('prime')\r\nclass Integer\r\n\r\n  def prime_new?\r\n    return false if self <= 1\r\n    return true  if self == 2 || self == 3\r\n    return false if self % 2 == 0 || self % 3 == 0\r\n    i = 5\r\n    w = 2\r\n    while i * i <= self\r\n      return false if self % i == 0\r\n      i += w\r\n      w = 6 - w\r\n    end\r\n    true\r\n  end\r\nend\r\n\r\n\r\nruby_prime = []\r\nmy_prime = []\r\n\r\nt = Time.now\r\n10_000_000.times do |i|\r\n  ruby_prime.push(i) if Prime.prime?(i)\r\nend\r\nputs \"(Prime) Time to complete (100k): #{Time.now - t}\"\r\nputs \"(Prime) #{ruby_prime.count} prime numbers found\\n\\n\"\r\n\r\nb = Time.now\r\n10_000_000.times do |i|\r\n  my_prime.push(i) if i.isprime?\r\nend\r\n\r\nputs \"(isprime?) Time to complete (100k): #{Time.now - b}\"\r\nputs \"(isprime?) #{my_prime.count} prime numbers found\\n\"\r\n```\r\n\r\nAs you increase the number of times, the time difference becomes greater. I put the integer class extension in a different file and imported it like Prime actually at the top to make it a little more fair.", "created_at": "2018-01-11 17:48:23", "user": 11302907, "id": 357006554}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357013801", "text": "@Mycroft1891 Could you re-write the script to use `Benchmark` or [`benchmark-ips`](https://github.com/evanphx/benchmark-ips) like @tom-lord did? Also it would be great if you could share comparisons for multiple cases (e.g. each for negative number, 0, 1, 2, 3, small prime number, small non-prime number, large prime number, large non-prime number, etc)", "created_at": "2018-01-11 18:13:26", "user": 386234, "id": 357013801}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357021981", "text": "@yuki24 Sure here is the same test using Benchmark:\r\n\r\n```\r\nrequire 'benchmark'\r\nrequire 'prime'\r\nrequire './my_prime'\r\n\r\niterations = 1_000_000\r\n\r\nruby_prime = []\r\nmy_prime = []\r\n\r\nBenchmark.bm do |bm|\r\n  bm.report do\r\n    iterations.times do |i|\r\n      ruby_prime.push(i) if Prime.prime?(i)\r\n    end\r\n  end\r\n\r\n  bm.report do\r\n    iterations.times do |i|\r\n      my_prime.push(i) if isprime?(i)\r\n    end\r\n  end\r\nend\r\n```", "created_at": "2018-01-11 18:41:53", "user": 11302907, "id": 357021981}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357026546", "text": "@Mycroft1891 Thanks for the script. I have a few more comments:\r\n\r\n * Inline the `./my_prime` so anyone can run your script\r\n * Remove the use of the `push` method. It'd just add some overhead to the benchmark result\r\n * As I mentioned above, benchmark more cases. At least with a negative number, 0, 1, 2, 3, small prime number, small non-prime number, large prime number, large non-prime number. The `prime?` method has a lot of conditionals and it is important to understand what's significantly faster and what's slightly faster.", "created_at": "2018-01-11 18:58:23", "user": 386234, "id": 357026546}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357214910", "text": "@yuki24 @tom-lord I found out why I saw such a big difference. If you run the test using `Prime.prime?(n)` the performance drops by a lot while when you use `n.prime?` it is much faster as @tom-lord noted.\r\nI created a `my_prime.rb` file this is inside it:\r\n\r\n```\r\n# my_prime.rb\r\nclass Prime\r\n  def isprime?(n)\r\n    return false if n <= 1\r\n    return true  if n == 2 || n == 3\r\n    return false if n % 2 == 0 || n % 3 == 0\r\n    i = 5\r\n    w = 2\r\n    while i * i <= n\r\n      return false if n % i == 0\r\n      i += w\r\n      w = 6 - w\r\n    end\r\n    true\r\n  end\r\nend\r\n\r\nclass Integer\r\n  def isprime?\r\n    return false if self <= 1\r\n    return true  if self == 2 || self == 3\r\n    return false if self % 2 == 0 || self % 3 == 0\r\n    i = 5\r\n    w = 2\r\n    while i * i <= self\r\n        return false if self % i == 0\r\n        i += w\r\n        w = 6 - w\r\n    end\r\n    true\r\n  end\r\nend\r\n\r\n```\r\n\r\nAs you can see I extended both the Integer and the Prime class just to make it similar.\r\n\r\nI created a new benchmark covering:\r\n- negative number (-100..1000)\r\n- small prime numbers (first 2000)\r\n- small non prime numbers (any non prime smaller than 1000)\r\n- large prime numbers (primes in this range 10_999_000..11_000_000)\r\n- large non prime numbers (non primes in this range 10_999_000..11_000_000)\r\n\r\nIn the first test, I run it comparing `n.prime?` vs. `n.isprime?` the second is the new prime algorithm.\r\n\r\n```\r\nrequire 'benchmark'\r\nrequire 'prime'\r\nrequire './my_prime'\r\n\r\none_million      = 1_000_000\r\nten_thousand     = 10_000\r\nthousand         = 1_000\r\n\r\nwith_negative    = (-100..1_000).to_a\r\nsmall_non_primes = (0..1_000).reject {|n| Prime.prime?(n) }\r\nsmall_primes     = Prime.take(2000)\r\nlarge_non_primes = (10_999_000..11_000_000).reject {|n| Prime.prime?(n) }\r\nlarge_primes     = (10_999_000..11_000_000).select {|n| Prime.prime?(n) }\r\n\r\nBenchmark.bmbm(20) do |bm|\r\n  bm.report('Old: 1_000_000 * prime?') do\r\n    one_million.times do |i|\r\n      i.prime?\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000_000 * prime?') do\r\n    one_million.times do |i|\r\n      i.isprime?\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 10_000 * -100 to 1_000') do\r\n    ten_thousand.times do |i|\r\n      with_negative.select(&:prime?)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 10_000 * -100 to 1_000') do\r\n    ten_thousand.times do |i|\r\n      with_negative.select(&:isprime?)\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * small non primes') do\r\n    thousand.times do |i|\r\n      small_non_primes.select(&:prime?)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * small non primes') do\r\n    thousand.times do |i|\r\n      small_non_primes.select(&:isprime?)\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * small primes') do\r\n    thousand.times do |i|\r\n      small_primes.select(&:prime?)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * small primes') do\r\n    thousand.times do |i|\r\n      small_primes.select(&:isprime?)\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * large primes') do\r\n    thousand.times do |i|\r\n      large_primes.select(&:prime?)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * large primes') do\r\n    thousand.times do |i|\r\n      large_primes.select(&:isprime?)\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * large non primes') do\r\n    thousand.times do |i|\r\n      large_non_primes.select(&:prime?)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * large non primes') do\r\n    thousand.times do |i|\r\n      large_non_primes.select(&:isprime?)\r\n    end\r\n  end\r\nend\r\n```\r\nThe results are almost the same, sometimes the new algorithm is faster while most of the times the old one is faster: \r\n\r\n```\r\nRehearsal -----------------------------------------------------------------\r\nOld: 1_000_000 * prime?         1.405529   0.007792   1.413321 (  1.428931)\r\nNew: 1_000_000 * prime?         2.073816   0.012818   2.086634 (  2.131261)\r\nOld: 10_000 * -100 to 1_000     4.592670   0.025376   4.618046 (  4.672404)\r\nNew: 10_000 * -100 to 1_000     3.636590   0.052335   3.688925 (  3.743397)\r\nOld: 1_000 * small non primes   0.286702   0.002224   0.288926 (  0.291118)\r\nNew: 1_000 * small non primes   0.204080   0.001687   0.205767 (  0.207332)\r\nOld: 1_000 * small primes       3.848818   0.022083   3.870901 (  3.911539)\r\nNew: 1_000 * small primes       5.210528   0.035932   5.246460 (  5.318403)\r\nOld: 1_000 * large primes       3.175398   0.018349   3.193747 (  3.244483)\r\nNew: 1_000 * large primes       5.894557   0.031974   5.926531 (  5.989830)\r\nOld: 1_000 * large non primes   1.273114   0.007360   1.280474 (  1.298590)\r\nNew: 1_000 * large non primes   1.761014   0.010536   1.771550 (  1.803974)\r\n------------------------------------------------------- total: 33.591282sec\r\n\r\n                                    user     system      total        real\r\nOld: 1_000_000 * prime?         1.442458   0.008244   1.450702 (  1.471786)\r\nNew: 1_000_000 * prime?         2.097896   0.012572   2.110468 (  2.142132)\r\nOld: 10_000 * -100 to 1_000     4.709277   0.026490   4.735767 (  4.794737)\r\nNew: 10_000 * -100 to 1_000     3.574214   0.027443   3.601657 (  3.657275)\r\nOld: 1_000 * small non primes   0.279802   0.002282   0.282084 (  0.286573)\r\nNew: 1_000 * small non primes   0.222431   0.001646   0.224077 (  0.227809)\r\nOld: 1_000 * small primes       3.824703   0.024839   3.849542 (  3.891357)\r\nNew: 1_000 * small primes       5.274420   0.030545   5.304965 (  5.372510)\r\nOld: 1_000 * large primes       3.062497   0.016671   3.079168 (  3.110922)\r\nNew: 1_000 * large primes       5.765497   0.030927   5.796424 (  5.870993)\r\nOld: 1_000 * large non primes   1.225203   0.007635   1.232838 (  1.254354)\r\nNew: 1_000 * large non primes   1.758376   0.008997   1.767373 (  1.790090)\r\n```\r\n\r\nEverything changes when you compare `Prime.prime?(n)` vs. `Prime.isprime?(n)` once again the second one is the new prime method.\r\n\r\n```\r\nrequire 'benchmark'\r\nrequire 'prime'\r\nrequire './my_prime'\r\n\r\none_million      = 1_000_000\r\nten_thousand     = 10_000\r\nthousand         = 1_000\r\n\r\nwith_negative    = (-100..1_000).to_a\r\nsmall_non_primes = (0..1_000).reject {|n| Prime.prime?(n) }\r\nsmall_primes     = Prime.take(2000)\r\nlarge_non_primes = (10_999_000..11_000_000).reject {|n| Prime.prime?(n) }\r\nlarge_primes     = (10_999_000..11_000_000).select {|n| Prime.prime?(n) }\r\n\r\nBenchmark.bmbm(20) do |bm|\r\n  bm.report('Old: 1_000_000 * prime?') do\r\n    one_million.times do |i|\r\n      Prime.prime?(i)\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000_000 * prime?') do\r\n    one_million.times do |i|\r\n      i.isprime?\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 10_000 * -100 to 1_000') do\r\n    ten_thousand.times do |i|\r\n      with_negative.select { |n| Prime.prime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('New: 10_000 * -100 to 1_000') do\r\n    ten_thousand.times do |i|\r\n      with_negative.select { |n| Prime.isprime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * small non primes') do\r\n    thousand.times do |i|\r\n      small_non_primes.select { |n| Prime.prime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * small non primes') do\r\n    thousand.times do |i|\r\n      small_non_primes.select { |n| Prime.isprime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * small primes') do\r\n    thousand.times do |i|\r\n      small_primes.select { |n| Prime.prime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * small primes') do\r\n    thousand.times do |i|\r\n      small_primes.select { |n| Prime.isprime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * large primes') do\r\n    thousand.times do |i|\r\n      large_primes.select { |n| Prime.prime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * large primes') do\r\n    thousand.times do |i|\r\n      large_primes.select { |n| Prime.isprime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('Old: 1_000 * large non primes') do\r\n    thousand.times do |i|\r\n      large_non_primes.select { |n| Prime.prime?(n) }\r\n    end\r\n  end\r\n\r\n  bm.report('New: 1_000 * large non primes') do\r\n    thousand.times do |i|\r\n      large_non_primes.select { |n| Prime.isprime?(n) }\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nThese are the results I saw when I tested it:\r\n\r\n```\r\nRehearsal -----------------------------------------------------------------\r\nOld: 1_000_000 * prime?         9.707928   0.056095   9.764023 (  9.884189)\r\nNew: 1_000_000 * prime?         2.068627   0.005823   2.074450 (  2.088193)\r\nOld: 10_000 * -100 to 1_000    27.125947   0.105004  27.230951 ( 27.481636)\r\nNew: 10_000 * -100 to 1_000     7.366718   0.038283   7.405001 (  7.492338)\r\nOld: 1_000 * small non primes   1.822184   0.013414   1.835598 (  1.863551)\r\nNew: 1_000 * small non primes   0.495780   0.002681   0.498461 (  0.503347)\r\nOld: 1_000 * small primes      23.748546   0.115993  23.864539 ( 24.070753)\r\nNew: 1_000 * small primes       6.046003   0.032608   6.078611 (  6.144513)\r\nOld: 1_000 * large primes      23.265469   0.096873  23.362342 ( 23.591089)\r\nNew: 1_000 * large primes       5.896811   0.034694   5.931505 (  6.014809)\r\nOld: 1_000 * large non primes   8.249851   0.045913   8.295764 (  8.376780)\r\nNew: 1_000 * large non primes   2.080070   0.011458   2.091528 (  2.110891)\r\n------------------------------------------------------ total: 118.432773sec\r\n\r\n                                    user     system      total        real\r\nOld: 1_000_000 * prime?         9.740492   0.054909   9.795401 (  9.903361)\r\nNew: 1_000_000 * prime?         2.052631   0.011364   2.063995 (  2.087338)\r\nOld: 10_000 * -100 to 1_000    26.913940   0.099397  27.013337 ( 27.217281)\r\nNew: 10_000 * -100 to 1_000     7.545237   0.044933   7.590170 (  7.685570)\r\nOld: 1_000 * small non primes   1.792154   0.010089   1.802243 (  1.821959)\r\nNew: 1_000 * small non primes   0.492120   0.009264   0.501384 (  0.511246)\r\nOld: 1_000 * small primes      23.592904   0.096804  23.689708 ( 23.948073)\r\nNew: 1_000 * small primes       5.971981   0.033575   6.005556 (  6.079808)\r\nOld: 1_000 * large primes      23.149618   0.102074  23.251692 ( 23.496745)\r\nNew: 1_000 * large primes       5.896328   0.029026   5.925354 (  5.996483)\r\nOld: 1_000 * large non primes   8.138648   0.046656   8.185304 (  8.269999)\r\nNew: 1_000 * large non primes   2.098734   0.011617   2.110351 (  2.137368)\r\n```\r\n\r\nBasically `Integer.prime?` is much much faster than `Prime.prime?(n)` \r\n以上です", "created_at": "2018-01-12 11:28:46", "user": 11302907, "id": 357214910}, {"reactions": {"+1": [11302907]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357217793", "text": "So the original comparison was between apples and oranges; you'd compared `Prime.prime?` with `Integer#prime?` 😄\r\n \r\n(I thought it was a bit of odd that this PR is titled `Improve Prime:prime? ...` when you didn't actually touch that method!)\r\n\r\nBased on those performance figures, I don't think there's sufficient justification for changing the implementation. For larger values (where performance is more critical!), the new method performs significantly slower.", "created_at": "2018-01-12 11:43:24", "user": 7573396, "id": 357217793}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357224822", "text": "@tom-lord Yes, my error. `Integer.prime?` and `Prime.prime?(n)` confused me thus I changed the wrong method. My only question is why do we have 2 ways of checking primes ? I couldn't find in the docs anything about why `Prime.prime?(n)` is so much slower except that it takes an optional generator. Wouldn't it be better to point our that is performs much worse than `Integer.prime?`", "created_at": "2018-01-12 12:20:53", "user": 11302907, "id": 357224822}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "… unless GCC is broken. \r\n\r\nI'll merge this once https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83696 is fixed.", "labels": [], "number": 1787, "updated_at": "2018-02-23 03:07:43", "user": 15377, "closed_at": "None", "id": 286242031, "title": "Use -Wimplicit-fallthrough", "url": "https://api.github.com/repos/ruby/ruby/issues/1787", "created_at": "2018-01-05 09:58:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/355658181", "text": "* Wait at least it works on an implementation.\r\n* regparse.c has another upstream and it's periodically overwritten by upstream's one; the change can be merged in upstream\r\n* Apple clang supports -Wimplicit-fallthrough but doesn't work too? I couldn't see warnings...", "created_at": "2018-01-05 20:32:52", "user": 13423, "id": 355658181}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [5194080]}, "text": "@marcandre \r\n\r\nIMO `antisymmetric?` (as proposed in #1730) is a valid addition to the `Matrix` library, but the implementation provided there is still logically wrong, and it seemed more productive to me to provide a working implementation instead of reviewing again. This patch also provides better test coverage.\r\n\r\nIf you approve I can commit to SVN.\r\n\r\n_BTW. I do not care very much about `reflexive?`, and it is not related, so I would let this be another changeset. And regarding the style (returning true/false): this was adopted from `symmetric?` and various other existing methods; when you prefer a different style that also should be handled in another changeset, IMO._\r\n", "labels": [], "number": 1788, "updated_at": "2018-01-11 19:42:34", "user": 1112299, "closed_at": "2018-01-11 19:37:37", "id": 287568256, "title": "Add Matrix#antisymmetric?", "url": "https://api.github.com/repos/ruby/ruby/issues/1788", "created_at": "2018-01-10 20:33:47", "comments": [{"reactions": {"+1": [5194080]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357007485", "text": ":tada: Perfect PR :+1:", "created_at": "2018-01-11 17:51:42", "user": 33770, "id": 357007485}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357017222", "text": "I‘ll commit later. Should I also add a NEWS entry? (_done in 1baf970fdbae7a30cf245292962c26fce1f5deb6_)", "created_at": "2018-01-11 18:25:34", "user": 1112299, "id": 357017222}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/357028216", "text": "> Should I also add a NEWS entry?\r\n\r\nYes please, thank you!", "created_at": "2018-01-11 19:04:03", "user": 33770, "id": 357028216}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "", "labels": [], "number": 1789, "updated_at": "2018-01-29 13:22:09", "user": 9477868, "closed_at": "2018-01-29 13:21:59", "id": 287965771, "title": "Fix minor typos in sprintf documentation.", "url": "https://api.github.com/repos/ruby/ruby/issues/1789", "created_at": "2018-01-11 23:58:26", "comments": [], "assignees": [1112299, 1112299], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[Feature #13884](https://bugs.ruby-lang.org/issues/13884) added some improvements to `and`, `or` and `diff` operations, and also new assertions grouped on their own namespace, some of those assertions needed to be removed from `test_MINUS` since are already on `test_MINUS_big_array`:\r\nhttps://github.com/ruby/ruby/blob/42bb73cf64bc4a122b80eb2262f5b9c47381a024/test/ruby/test_array.rb#L260-L264\r\n\r\nhttps://github.com/ruby/ruby/blob/42bb73cf64bc4a122b80eb2262f5b9c47381a024/test/ruby/test_array.rb#L275-L279\r\n", "labels": [], "number": 1790, "updated_at": "2018-02-23 03:07:43", "user": 1037088, "closed_at": "None", "id": 289191092, "title": "Removing duplicated assertions on test_array.rb - MINUS method", "url": "https://api.github.com/repos/ruby/ruby/issues/1790", "created_at": "2018-01-17 09:12:34", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Win32 may not have a hosts file, in which case it is `nil`.\n\nhttps://bugs.ruby-lang.org/issues/14369", "labels": [], "number": 1791, "updated_at": "2018-01-18 03:10:44", "user": 40799, "closed_at": "2018-01-18 03:10:44", "id": 289360704, "title": "resolv: not all systems have a hosts file", "url": "https://api.github.com/repos/ruby/ruby/issues/1791", "created_at": "2018-01-17 18:04:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This change follows commit 837fd5e494731d7d44786f29e7d6e8c27029806f\nin '#ifdef __ia64' branches.\n\nNoticed as a build failure by John Paul Adrian Glaubitz:\n\n```\n  cont.c:502:50: error: 'rb_thread_t {aka struct rb_thread_struct}'\n    has no member named 'machine'\n       size = cont->machine.register_stack_size =\n           th->machine.register_stack_end - th->machine.register_stack_start;\n               ^~\n```\n\nThe change is trivial: update 'th->machine' usage to 'th->ec->machine'.\nSigned-off-by: Sergei Trofimovich <slyfox@gentoo.org>", "labels": [], "number": 1792, "updated_at": "2018-01-30 05:44:56", "user": 226650, "closed_at": "2018-01-30 05:44:56", "id": 289803836, "title": "ia64: update ia64-specific code to use execution context", "url": "https://api.github.com/repos/ruby/ruby/issues/1792", "created_at": "2018-01-18 22:51:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/358809217", "text": "@ko1 : `make check` reports mostly healthy ruby: `FAIL 8/1197 tests failed`.", "created_at": "2018-01-18 22:54:27", "user": 226650, "id": 358809217}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361483716", "text": "@trofi Thank you for your patch. I've commited at https://github.com/ruby/ruby/commit/5af43b1ec2674e9f86090790bc61abdb96be14ff", "created_at": "2018-01-30 05:44:56", "user": 12301, "id": 361483716}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Our configure.ac is too big.  Let's split into some.\r\n\r\nIt's still too big after the split but, smaller than before at least.\r\n\r\nI have confirmed the generated configure script is the exact same as before, except deletion of several blank lines which are never serious.", "labels": [], "number": 1793, "updated_at": "2018-01-20 07:06:33", "user": 15377, "closed_at": "2018-01-20 07:06:33", "id": 290157014, "title": "split configure.ac into files", "url": "https://api.github.com/repos/ruby/ruby/issues/1793", "created_at": "2018-01-20 02:22:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://bugs.ruby-lang.org/issues/14349", "labels": [], "number": 1794, "updated_at": "2018-02-03 20:03:06", "user": 3893573, "closed_at": "2018-02-03 20:03:02", "id": 290272290, "title": "Fix documentation for HTTP connection reuse", "url": "https://api.github.com/repos/ruby/ruby/issues/1794", "created_at": "2018-01-21 13:20:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362849899", "text": "Merged, closing", "created_at": "2018-02-03 20:03:02", "user": 3893573, "id": 362849899}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```rb\r\nsystem('bundle check || bundle install')\r\n# The following gems are missing\r\n# (snip)\r\n# Install missing gems with `bundle install`\r\n# Could not reach host index.rubygems.org. Check your network connection and try again.\r\n# => false\r\n\r\nsystem('bundle check || bundle install', exception: true)\r\n# The following gems are missing\r\n# (snip)\r\n# Install missing gems with `bundle install`\r\n# Could not reach host index.rubygems.org. Check your network connection and try again.\r\n# => RuntimeError: Command failed with status (17): bundle check || bundle install\r\n\r\nsystem('bundler2', exception: true)\r\n# => Errno::ENOENT: No such file or directory - bundler2\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/14386", "labels": [], "number": 1795, "updated_at": "2018-01-24 22:20:15", "user": 3138447, "closed_at": "2018-01-24 14:18:35", "id": 291128568, "title": "process.c: add :exception option to Kernel.#system", "url": "https://api.github.com/repos/ruby/ruby/issues/1795", "created_at": "2018-01-24 08:54:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360148513", "text": "Looks nice :+1: \r\n\r\n*If you would like*, you can write specs directly under `spec/ruby` for the new feature.\r\nSpecs can be done instead of tests under test/ruby ([Feature #13666](https://bugs.ruby-lang.org/issues/13666)).\r\nI think specs would clarify what is being tested and what is the expected behavior.", "created_at": "2018-01-24 14:15:36", "user": 168854, "id": 360148513}, {"reactions": {"+1": [168854]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360149297", "text": "> If you would like, you can write specs directly under spec/ruby for the new feature.\r\n\r\nOh, I didn't know that. I appreciate your work on merging two upstreams.\r\n\r\n> I think specs would clarify what is being tested and what is the expected behavior.\r\n\r\n:+1: I've just committed immediately before your comment, but I'll try that next time!", "created_at": "2018-01-24 14:18:12", "user": 3138447, "id": 360149297}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360149398", "text": "Merged in https://github.com/ruby/ruby/commit/fb29cffab05cb5446c1e6cd68035c39143b02763", "created_at": "2018-01-24 14:18:35", "user": 3138447, "id": 360149398}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360153579", "text": "I added specs describing this feature at https://github.com/ruby/ruby/commit/c50220619be5c1d83768611a41d27442dd2056de.", "created_at": "2018-01-24 14:32:22", "user": 3138447, "id": 360153579}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360293302", "text": "Thanks!", "created_at": "2018-01-24 22:20:15", "user": 168854, "id": 360293302}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```c\r\nossl_pkey_dh.c:265:20: warning: '&&' within '||' [-Wlogical-op-parentheses]\r\n        if (!pub2 || priv && !priv2) {\r\n                  ~~ ~~~~~^~~~~~~~~\r\nossl_pkey_dh.c:265:20: note: place parentheses around the '&&' expression to silence this warning\r\n        if (!pub2 || priv && !priv2) {\r\n                          ^\r\n                     (             )\r\n1 warning generated.\r\n```", "labels": [], "number": 1796, "updated_at": "2018-01-26 19:46:15", "user": 6567687, "closed_at": "2018-01-26 19:46:15", "id": 291265932, "title": "silence warning in ossl_pkey_dh.c", "url": "https://api.github.com/repos/ruby/ruby/issues/1796", "created_at": "2018-01-24 16:10:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360367899", "text": "I don't reproduce with clang 5.0.0. Ruby's configure script adds -Wno-parentheses to CFLAGS whenever it is accepted by the compiler, and as far as I know, it implies -Wno-logical-op-parentheses.", "created_at": "2018-01-25 05:49:16", "user": 1033740, "id": 360367899}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[r61950](https://github.com/ruby/ruby/commit/de9d264026c870afd79a8843764ccbf60367bb0e) changes `mode_t` to `unsigned short` on MinGW32.\r\n\r\nSpecs therefore fail with `RangeError (integer -1073741824 too small to convert to unsigned short)`\r\n\r\nIn contrary `mode_t` is not defined by MSVC but in `ruby.h` as `int`. This is why the platform specifier is set to `:mingw32` instead of `:windows` .\r\n\r\nWould be nice, if this could be merged soon, because it [blockes rubyinstaller-head](https://ci.appveyor.com/project/larskanis/rubyinstaller2-hbuor/branch/master) currently.", "labels": [], "number": 1797, "updated_at": "2018-01-25 11:19:41", "user": 176234, "closed_at": "2018-01-25 09:52:08", "id": 291355013, "title": "Fix chmod specs on mingw32 where mode_t is ushort", "url": "https://api.github.com/repos/ruby/ruby/issues/1797", "created_at": "2018-01-24 20:50:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360313313", "text": "@eregon Can you review this?", "created_at": "2018-01-24 23:48:43", "user": 12301, "id": 360313313}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360411014", "text": "This is the same or very similar problem as https://bugs.ruby-lang.org/issues/14375.\r\nI will remove those specs.\r\nIt makes no sense to me to try arbitrary values for chmod & umask.", "created_at": "2018-01-25 09:31:12", "user": 168854, "id": 360411014}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360416504", "text": "Fixed by 7dc0bdb6e58d4bffd3f44e56fe63ca9f79adb3f8, thank you for the report!", "created_at": "2018-01-25 09:52:08", "user": 168854, "id": 360416504}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360438150", "text": "Makes sense - thank you!", "created_at": "2018-01-25 11:19:41", "user": 176234, "id": 360438150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This greatly improves completion performance in the full scan case (when IRB doesn't know the type of the call target).\r\n\r\nIt's particularly noticeable in large projects. Here's how to emulate one:\r\n\r\n```rb\r\nN = 40000\r\n\r\n# Save the references to avoid GC.\r\nmodules = (1..N).map do |i|\r\n  Module.new do\r\n    module_eval <<-DEF\r\n      def foo#{i}\r\n      end\r\nDEF\r\n  end\r\nend; nil\r\n```\r\n\r\nIn such an environment, this branch brings completion time from ~1 second to almost instantaneous. This code (or close enough) has already been added to Pry and released in version 0.11.0. Here's the relevant report there: https://github.com/pry/pry/issues/1540", "labels": [], "number": 1798, "updated_at": "2018-03-13 11:39:00", "user": 271877, "closed_at": "2018-03-13 01:29:37", "id": 291762964, "title": "Speed up full scan completion in IRB", "url": "https://api.github.com/repos/ruby/ruby/issues/1798", "created_at": "2018-01-26 00:27:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360805393", "text": "@dgutov Thanks for your pull request. Could you write a benchmark script using [the Benchmark class](https://ruby-doc.org/stdlib-2.5.0/libdoc/benchmark/rdoc/Benchmark.html) or the [`benchmark-ips`](https://github.com/evanphx/benchmark-ips) and share with us?", "created_at": "2018-01-26 14:53:44", "user": 386234, "id": 360805393}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360810472", "text": "@yuki24 Any suggestions for how to invoke completion programmatically?", "created_at": "2018-01-26 15:11:33", "user": 271877, "id": 360810472}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360820120", "text": "I'm not familiar with IRB but I think you may be able to use the `IRB::InputCompletor::CompletionProc` directly.", "created_at": "2018-01-26 15:44:25", "user": 386234, "id": 360820120}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360949043", "text": "@yuki24 Yup, it was easier than I expected. I'll take out a commit I'm unsure about now and post the resulting comparison.", "created_at": "2018-01-27 01:34:44", "user": 271877, "id": 360949043}, {"reactions": {"hooray": [908365]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360950379", "text": "Here's the benchmark:\r\n\r\n```rb\r\nrequire 'irb/completion'\r\nrequire 'benchmark'\r\n\r\nN = 40000\r\n\r\n# Save the references to avoid GC.\r\nmodules = (1..N).map do |i|\r\n  Module.new do\r\n    module_eval <<-DEF\r\n      def foo#{i}\r\n      end\r\nDEF\r\n  end\r\nend; nil\r\n\r\nputs Benchmark.measure {\r\n  IRB::InputCompletor::CompletionProc.call('foo.bar.')\r\n}\r\n```\r\n\r\nAnd here are the results:\r\n\r\n|      |N 20000 |N 40000 |\r\n|------|--------|--------|\r\n|trunk |  0.586|  1.105 |\r\n|this patch | 0.079  | 0.138  |\r\n\r\nThe difference is smaller than with older rubies I've tested this before, but still very significant.", "created_at": "2018-01-27 01:50:35", "user": 271877, "id": 360950379}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363017454", "text": "@yuki24 Is this something you can review?", "created_at": "2018-02-05 08:47:38", "user": 271877, "id": 363017454}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363108917", "text": "The benchmark looks feasible, but I don't have a final say to this. Let's see how other maintainers think of this.", "created_at": "2018-02-05 14:57:37", "user": 386234, "id": 363108917}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363465184", "text": "@dgutov Please squash your commits into a single commit when appropriate. This simplifies future cherry picks and keeps the git log clean.", "created_at": "2018-02-06 15:50:19", "user": 386234, "id": 363465184}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363467649", "text": "@yuki24 I believe your last comment is meant for @dgutov, I have no commits in this pull request.", "created_at": "2018-02-06 15:57:23", "user": 11094484, "id": 363467649}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363469762", "text": "@Maumagnaguagno My apologies. Yes, that was meant to @dgutov.", "created_at": "2018-02-06 16:03:19", "user": 386234, "id": 363469762}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363472594", "text": "I'll merge this PR once the commits are squash into a single commit.", "created_at": "2018-02-06 16:10:23", "user": 386234, "id": 363472594}, {"reactions": {"hooray": [271877], "+1": [386234]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363533086", "text": "@yuki24 Squashed and force-pushed.", "created_at": "2018-02-06 19:15:31", "user": 271877, "id": 363533086}], "assignees": [386234, 386234], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "  Revert r61209, r61210", "labels": [], "number": 1799, "updated_at": "2018-01-26 06:01:48", "user": 12301, "closed_at": "2018-01-26 06:01:45", "id": 291771047, "title": "Removed workaround Travis CI.", "url": "https://api.github.com/repos/ruby/ruby/issues/1799", "created_at": "2018-01-26 01:18:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Attempts to fix https://bugs.ruby-lang.org/issues/14407\r\n\r\n", "labels": [], "number": 1800, "updated_at": "2018-01-29 16:54:28", "user": 456459, "closed_at": "2018-01-27 06:13:14", "id": 292082917, "title": "defined? should return nil for toplevel constant referenced with scope for ruby 2.5.0", "url": "https://api.github.com/repos/ruby/ruby/issues/1800", "created_at": "2018-01-27 02:37:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reduce allocations in uri/common.rb\r\n\r\nOpening a ticket on redmine to discuss", "labels": [], "number": 1801, "updated_at": "2018-01-29 06:06:57", "user": 5213, "closed_at": "2018-01-29 06:06:57", "id": 292099783, "title": "Reduce allocations and retained memory in uri/common.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1801", "created_at": "2018-01-27 07:20:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360967907", "text": "The failing test should be fixed.", "created_at": "2018-01-27 07:54:09", "user": 3138447, "id": 360967907}, {"reactions": {"+1": [3138447, 334273]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/360969629", "text": "OK, made a ticket in redmine here: https://bugs.ruby-lang.org/issues/14410\r\n\r\nI think I corrected both issues @k0kubun \r\n\r\n", "created_at": "2018-01-27 08:28:36", "user": 5213, "id": 360969629}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361148786", "text": "merged at 26b3dc49226011469bfe29af0f882b06215388a5", "created_at": "2018-01-29 06:06:57", "user": 12301, "id": 361148786}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* ruby.c (f_executed_p): returns true when file is executed directly.\r\nreturns false when file is required file. [Feature #4824]\r\n\r\nrefs\r\n--\r\nFeature #4824: Provide method Kernel#executed? - Ruby trunk - Ruby Issue Tracking System https://bugs.ruby-lang.org/issues/4824", "labels": [], "number": 1802, "updated_at": "2018-02-23 03:07:43", "user": 15604014, "closed_at": "None", "id": 292288323, "title": "[Feature #4824]ruby.c: implement Kernel#executed?", "url": "https://api.github.com/repos/ruby/ruby/issues/1802", "created_at": "2018-01-29 05:28:14", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [70792, 196569, 23256836, 19917581, 5562931, 11351274, 1050427]}, "text": "Vector#angle_with sometimes raises error with linearly dependent vectors:\r\n\r\n```\r\nrequire 'matrix'\r\nVector[6, 6].angle_with(Vector[7, 7]) # => Math::DomainError (Numerical argument is out of domain - \"acos\")\r\n```\r\n\r\nThis is due to rounding errors:\r\n\r\n```\r\nprod = magnitude * v.magnitude # =>  8.48528137423857 * 9.899494936611665 -> 83.99999999999999\r\nMath.acos(inner_product(v) / prod) # => Math.acos(84 / 83.99) -> Math.acos(1.0000000000000002)\r\n```\r\n\r\nThis patch explicitly return zero/Math::PI for linearly dependent vectors.", "labels": [], "number": 1803, "updated_at": "2018-02-23 03:07:44", "user": 9009981, "closed_at": "None", "id": 292549691, "title": "Fix bug: Vector#angle_with with linearly dependent vectors", "url": "https://api.github.com/repos/ruby/ruby/issues/1803", "created_at": "2018-01-29 20:30:51", "comments": [{"reactions": {"+1": [23256836, 1050427]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361876285", "text": "👍 \r\n\r\n@Saugardas please fix code style", "created_at": "2018-01-31 09:37:54", "user": 70792, "id": 361876285}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361891680", "text": "👍", "created_at": "2018-01-31 10:34:54", "user": 1050427, "id": 361891680}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This variable is expected to be an integer type which can be incremented\r\natomically.  Expected to be used where certain object's \"freshness\" is\r\nvital, e.g. when invalidating a cache.", "labels": [], "number": 1804, "updated_at": "2018-02-23 03:07:44", "user": 15377, "closed_at": "None", "id": 293038159, "title": "new VM timestamp variable", "url": "https://api.github.com/repos/ruby/ruby/issues/1804", "created_at": "2018-01-31 05:44:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361833402", "text": "It is hard to justify this patch is acceptable or not without usecases.", "created_at": "2018-01-31 06:04:50", "user": 9558, "id": 361833402}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/361834202", "text": "This is a part of #1419.  Optimized instruction sequences are cached, then invalidated according to this variable.  For instance see https://github.com/ruby/ruby/pull/1419/commits/523120808bed6a54ced3cd8f17d1cf6a065678bf#diff-d52fa5b396928e0544140fd48f329543R126", "created_at": "2018-01-31 06:10:09", "user": 15377, "id": 361834202}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "If you are using GCC you can tell it which part of a function is more / less likely to be executed.  Specifying this info does yield better locality of the generated machine binary.\r\n\r\nHowever this does not change the speed of execution at all.  Contemporary CPUs are much smarter than mare mortals like us.", "labels": [], "number": 1805, "updated_at": "2018-02-01 06:54:03", "user": 15377, "closed_at": "2018-02-01 06:54:03", "id": 293422269, "title": "(failed) new attribute hotspot_p", "url": "https://api.github.com/repos/ruby/ruby/issues/1805", "created_at": "2018-02-01 06:53:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362175425", "text": "This pull request is a JFYI for my followers.", "created_at": "2018-02-01 06:54:03", "user": 15377, "id": 362175425}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Instead of wrapping TCPSocket.open with a Timeout.timeout, we rely on the kernel's socket connect timeout, avoiding a temporary thread just for the timeout.", "labels": [], "number": 1806, "updated_at": "2018-02-23 03:07:44", "user": 180046, "closed_at": "None", "id": 293518879, "title": "net/http: use connect_timeout in Socket.tcp", "url": "https://api.github.com/repos/ruby/ruby/issues/1806", "created_at": "2018-02-01 12:51:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/362256821", "text": "https://bugs.ruby-lang.org/issues/14430", "created_at": "2018-02-01 12:52:11", "user": 180046, "id": 362256821}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1807, "updated_at": "2018-02-02 02:20:44", "user": 36033408, "closed_at": "2018-02-02 02:20:44", "id": 293751169, "title": "ruby", "url": "https://api.github.com/repos/ruby/ruby/issues/1807", "created_at": "2018-02-02 02:18:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [167012, 13203, 11524757]}, "text": "In other classes, `FrozenError` will be raised if change the frozen object.\r\nIn order to match the behavior, I think that `FrozenError` should use in `OpenStruct`.", "labels": [], "number": 1808, "updated_at": "2018-02-07 00:59:47", "user": 987638, "closed_at": "2018-02-06 23:53:07", "id": 293796108, "title": "Use `FrozenError` in `OpenStruct`", "url": "https://api.github.com/repos/ruby/ruby/issues/1808", "created_at": "2018-02-02 07:23:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363606708", "text": "Good catch 👍 \r\n\r\nMerged, thanks!", "created_at": "2018-02-06 23:53:07", "user": 33770, "id": 363606708}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363619299", "text": "Thanks!", "created_at": "2018-02-07 00:59:43", "user": 987638, "id": 363619299}], "assignees": [33770, 33770], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "for instance opt_aset_with is changed like this:\r\n\r\n```diff\r\n@@ -3690,10 +3630,9 @@ vm_opt_aref_with(VALUE recv, VALUE key)\r\n }\r\n\r\n static VALUE\r\n-vm_opt_aset_with(VALUE recv, VALUE key, VALUE val)\r\n+vm_opt_aset_with(VALUE recv, VALUE key, VALUE val, CALL_CACHE cc)\r\n {\r\n-    if (!SPECIAL_CONST_P(recv) && RBASIC_CLASS(recv) == rb_cHash &&\r\n-       BASIC_OP_UNREDEFINED_P(BOP_ASET, HASH_REDEFINED_OP_FLAG) &&\r\n+    if ((vm_method_cfunc(cc, recv) == rb_hash_aset) &&\r\n        rb_hash_compare_by_id_p(recv) == Qfalse) {\r\n        return rb_hash_aset(recv, key, val);\r\n     }\r\n```\r\n\r\nSeveral macro checks are replaced with vm_method_cfunc(), which returns the function pointer stored in the call cache.\r\n\r\nI thought it should reduce memory reads.  However it turned out to be slower than the original.", "labels": [], "number": 1809, "updated_at": "2018-02-05 08:06:04", "user": 15377, "closed_at": "2018-02-05 08:06:04", "id": 294303593, "title": "check CALL_CACHE instead of BASIC_OP_UNREDEFINED_P", "url": "https://api.github.com/repos/ruby/ruby/issues/1809", "created_at": "2018-02-05 08:06:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR is based of the Ruby 2.3 branch. Ruby trunk behaves differently and does not look like it needs fixing.\r\n\r\nCurrently `ext/openssl/extconf.rb` detects OpenSSL by checking for a bunch of functions in the OpenSSL headers. This fails with some builds of OpenSSL 1.1.0, since some functions (namely `OpenSSL_add_all_digests()` and `SSL_library_init()`) have been deprecated in 1.1.0 and are not declared any more without OpenSSL's compatibility layer.\r\n\r\nThis PR extends the checks to also look for OpenSSL 1.1.0-specific functions.\r\n\r\nNote that I have *not* tested the branch where `pkg_config(\"openssl\")` fails and manual detection is attempted.", "labels": [], "number": 1810, "updated_at": "2018-02-06 22:50:07", "user": 2384790, "closed_at": "2018-02-06 22:50:03", "id": 294659098, "title": "Fix ruby-2.3 OpenSSL 1.1.0 detection", "url": "https://api.github.com/repos/ruby/ruby/issues/1810", "created_at": "2018-02-06 07:35:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363342091", "text": "Ruby 2.3's ext/openssl won't compile with OpenSSL 1.1 headers with and without this patch applied.", "created_at": "2018-02-06 08:05:55", "user": 1033740, "id": 363342091}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/363592275", "text": "Sorry, my bad: indeed the build completely failed, but somehow it did so silently, so I thought it passed. :(\r\n\r\nBackporting the changes from Ruby 2.4 or 2.5 would take more time than I can invest, so I'm closing this PR. Sorry for the noise.", "created_at": "2018-02-06 22:50:03", "user": 2384790, "id": 363592275}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Variable and label definition are necessary in both cases. Usually USE_SENDFILE is defined whenever USE_COPY_FILE_RANGE is, but if not it fails to compile.\r\n\r\nUSE_COPY_FILE_RANGE was introduced in commit 0686d5f4eb4. So this might be backported to ruby-2.5.\r\n", "labels": [], "number": 1811, "updated_at": "2018-02-12 19:42:38", "user": 176234, "closed_at": "2018-02-12 19:42:17", "id": 294848005, "title": "Fix compile error when USE_COPY_FILE_RANGE is defined but not USE_SENDFILE", "url": "https://api.github.com/repos/ruby/ruby/issues/1811", "created_at": "2018-02-06 17:34:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365038651", "text": "Merged as commit 472d910a26ec93ba47764ba08577337e8e8ea81f", "created_at": "2018-02-12 19:42:17", "user": 176234, "id": 365038651}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1812, "updated_at": "2018-02-23 03:07:44", "user": 740289, "closed_at": "None", "id": 296001226, "title": "[Docs] Show alphanumeric example in module docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1812", "created_at": "2018-02-09 20:26:20", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\r\n\r\nI just noticed Exception class documentation [1] doesn't mention the new class FrozenError introduced in 2.5 [2].\r\n\r\nIf my PR is correct, this should be very straightforward to fix.\r\n\r\nThanks for your feedback.\r\n\r\n1. https://ruby-doc.org/core-2.5.0/Exception.html\r\n2. https://github.com/ruby/ruby/commit/b57915eddc91ce0369ae8bcf82d8c4364f42ea05", "labels": [], "number": 1813, "updated_at": "2018-02-14 00:18:12", "user": 79817, "closed_at": "2018-02-14 00:18:12", "id": 296116938, "title": "Add missing class FrozenError to Exception subclasses list documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1813", "created_at": "2018-02-10 17:18:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365389657", "text": "BTW, is the right approach to propose this PR against ruby_2_5 branch or should I submit it first against trunk and request a backport later? Just wondering, it's a trivial change anyway.", "created_at": "2018-02-13 20:13:10", "user": 79817, "id": 365389657}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/365451448", "text": "@nomadium It's the wrong approach for us. \r\n\r\n>should I submit it first against trunk and request a backport later?\r\n\r\nPlease above step as first, Thanks.", "created_at": "2018-02-14 00:18:12", "user": 12301, "id": 365451448}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `private def` keywords for methods above `.alphanumeric` appear to have caused rdoc generation to not output anything for the method. See http://ruby-doc.org/stdlib-2.5.0/libdoc/securerandom/rdoc/SecureRandom.html\r\n\r\nSpeaking with one of the ruby-doc maintainers, he was the one who suggested this was the root cause of the missing entry.", "labels": [], "number": 1814, "updated_at": "2018-03-17 12:49:01", "user": 740289, "closed_at": "2018-03-17 12:49:01", "id": 296127188, "title": "Re-arrange public .alphanumeric method to fix docs", "url": "https://api.github.com/repos/ruby/ruby/issues/1814", "created_at": "2018-02-10 19:37:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Ruby 2.4 fails to build with OpenSSL 1.1.0 on my machine, without any compat layer/API enabled in OpenSSL (`--api=1.0.0` passed to OpenSSL's _configure_, no `OPENSSL_API_COMPAT` defined when building Ruby's OpenSSL extension).\r\n\r\nThis PR attempts to fix this by:\r\n* adding a few missing headers\r\n* checking for some additional functions\r\n* refraining from calling some functions that were completely removed in OpenSSL 1.1.0\r\n\r\nAt least on my machine, with these changes Ruby 2.4 builds fine against OpenSSL 1.1.0g, and seems to run fine.\r\n\r\nPlease review! :)", "labels": [], "number": 1815, "updated_at": "2018-02-10 23:07:56", "user": 2384790, "closed_at": "None", "id": 296134177, "title": "Improve compatibility with OpenSSL 1.1.0", "url": "https://api.github.com/repos/ruby/ruby/issues/1815", "created_at": "2018-02-10 21:10:22", "comments": [], "assignees": [1033740, 1033740], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This will fix the formatting shown on `detect`|`find` and `revese_arch`\r\ngenerated by RDoc.\r\n\r\n## Find examples\r\n### Before\r\n![find_before](https://user-images.githubusercontent.com/1037088/36076245-6b21e144-0f0e-11e8-9078-72d57f7fd3c3.png)\r\n### After\r\n\r\n![find_after](https://user-images.githubusercontent.com/1037088/36076246-6e72bed6-0f0e-11e8-9703-b6a91014c787.png)\r\n\r\n## reverse_each example code\r\n### Before\r\n![reverse_each_before](https://user-images.githubusercontent.com/1037088/36076259-9fa39336-0f0e-11e8-8ed6-2803ebc98d7a.png)\r\n### After\r\n![reverse_each_after](https://user-images.githubusercontent.com/1037088/36076261-a2041920-0f0e-11e8-80f2-88fbe026bb73.png)\r\n", "labels": [], "number": 1816, "updated_at": "2018-02-13 13:31:13", "user": 1037088, "closed_at": "2018-02-13 13:31:13", "id": 296208654, "title": "Fixing some minimal formating on enum.c examples", "url": "https://api.github.com/repos/ruby/ruby/issues/1816", "created_at": "2018-02-11 17:38:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a very rough cut that is yet to be merged.\r\nI am just creating a pull request beforehand.", "labels": [], "number": 1817, "updated_at": "2018-02-23 03:07:45", "user": 15377, "closed_at": "None", "id": 296971622, "title": "C preprocessor written in pure Ruby.", "url": "https://api.github.com/repos/ruby/ruby/issues/1817", "created_at": "2018-02-14 04:25:00", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\r\n\r\nI just noticed Exception class documentation [1] doesn't mention the new class FrozenError introduced in 2.5 [2].\r\n\r\nIf my PR is correct, this should be very straightforward to fix.\r\n\r\nThanks for your feedback.\r\n\r\n1. https://ruby-doc.org/core-2.5.0/Exception.html\r\n2. https://github.com/ruby/ruby/commit/b57915eddc91ce0369ae8bcf82d8c4364f42ea05", "labels": [], "number": 1818, "updated_at": "2018-03-13 19:35:57", "user": 79817, "closed_at": "2018-03-13 02:01:52", "id": 297197536, "title": "[Docs] Add missing class FrozenError to Exception subclasses list documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1818", "created_at": "2018-02-14 18:24:04", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If MINIRUBY had arguments, which is the case of cross compiling\r\nthey wouldn't be parsed correctly and compiling would fail as a RUBY\r\nwithout arguments would then be present in the Makefile's in ext/*", "labels": [], "number": 1819, "updated_at": "2018-02-19 01:46:29", "user": 180046, "closed_at": "2018-02-19 01:46:29", "id": 298044252, "title": "Escape MINIRUBY in --make-flags to extmk.rb", "url": "https://api.github.com/repos/ruby/ruby/issues/1819", "created_at": "2018-02-17 23:10:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently\r\n\r\n\t2.5.0-preview1 :001 > arr = (0..100).lazy.uniq{|i| i % 10}\r\n\t => #<Enumerator::Lazy: #<Enumerator::Lazy: 0..100>:uniq>\r\n\t2.5.0-preview1 :002 > arr.to_a\r\n\t => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n\t2.5.0-preview1 :003 > arr.to_a\r\n\t => []\r\n\r\n\r\nExpected\r\n\r\narr.to_a to always return same output\r\n\r\nFixes https://bugs.ruby-lang.org/issues/14495", "labels": [], "number": 1820, "updated_at": "2018-03-13 01:01:40", "user": 20597323, "closed_at": "2018-03-13 01:01:40", "id": 298266587, "title": "Bug Fix Enumerator::Lazy#uniq state for multiple call", "url": "https://api.github.com/repos/ruby/ruby/issues/1820", "created_at": "2018-02-19 12:57:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello!\r\n\r\nThis is for this suggestion:\r\nhttps://bugs.ruby-lang.org/issues/14498\r\n\r\n```\r\nclass Dog\r\n  attr_reader :name\r\n\r\n  def initialize(name)\r\n    @name = name\r\n  end\r\nend\r\n\r\nnames = %w[Lucky Pluto Balto]\r\nnames.map(&Dog)\r\n```\r\n\r\n\r\nI am pretty sure there's a better way to create instances (without `rb_funcallv`).\r\nAnd I am not sure if I should've let using only one argument", "labels": [], "number": 1821, "updated_at": "2018-02-21 06:21:11", "user": 2451896, "closed_at": "2018-02-21 06:20:41", "id": 298626696, "title": "create Class#to_proc method", "url": "https://api.github.com/repos/ruby/ruby/issues/1821", "created_at": "2018-02-20 15:03:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367019344", "text": "Basically this is equal to monkeypatch\r\n\r\n```ruby\r\nclass Class\r\n  def to_proc\r\n    proc { |*args| new(*args) }\r\n  end\r\nend\r\n```", "created_at": "2018-02-20 15:44:40", "user": 2451896, "id": 367019344}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367225580", "text": "An issue of bugs.r-l.o was rejected.", "created_at": "2018-02-21 06:21:02", "user": 12301, "id": 367225580}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found some files which are generated on in-place building and are not ignored.", "labels": [], "number": 1822, "updated_at": "2018-02-22 07:38:12", "user": 11524757, "closed_at": "2018-02-22 07:35:57", "id": 298904557, "title": "Ignore files generated on building", "url": "https://api.github.com/repos/ruby/ruby/issues/1822", "created_at": "2018-02-21 09:55:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes https://bugs.ruby-lang.org/issues/14506", "labels": [], "number": 1823, "updated_at": "2018-02-22 12:56:18", "user": 1265492, "closed_at": "2018-02-22 12:52:58", "id": 299169902, "title": "Fix CMDARG manipulation. Use CMDARG_P to identify keyword_do/keyword_do_block.", "url": "https://api.github.com/repos/ruby/ruby/issues/1823", "created_at": "2018-02-21 23:36:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367529252", "text": "@nobu Could you take a look please?", "created_at": "2018-02-22 00:47:29", "user": 1265492, "id": 367529252}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/367672232", "text": "@nobu Thanks a lot!", "created_at": "2018-02-22 12:56:16", "user": 1265492, "id": 367672232}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[ci skip]", "labels": [], "number": 1824, "updated_at": "2018-02-25 13:58:47", "user": 11524757, "closed_at": "2018-02-24 01:04:10", "id": 299700013, "title": "Fix typo in vm_exec comments", "url": "https://api.github.com/repos/ruby/ruby/issues/1824", "created_at": "2018-02-23 12:44:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/368311447", "text": "I linked by mistake to this PR in b1a8c64, but it should link to #1784 instead.", "created_at": "2018-02-25 13:58:47", "user": 168854, "id": 368311447}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "# Summary\r\nWhile I was reading the documentation of `Array#sample` and I saw that I could provide `random: rng`, my first though was that I could provide a `Range`. To avoid this confusion I decided to document this optional extra parameter as the `Array#shuffle` method.\r\n\r\nSo, this patch:\r\n* Adds examples for the use of the optional parameter random in `Array#sample`\r\n* Unifies the style with the documentation of `Array#shuffle`. This means, documentation has been added in the same fashion of already existing methods like `Array#shuffle`\r\n\r\nMany thanks", "labels": [], "number": 1825, "updated_at": "2018-02-24 01:14:03", "user": 671550, "closed_at": "2018-02-24 01:14:03", "id": 299795511, "title": "[Docs] Improve Array#sample with random optional parameter documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1825", "created_at": "2018-02-23 17:48:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I can not `make` trunk (62585) without this patch.\r\nLog:\r\n\r\n```\r\n$ make -j4 && make install\r\n        BASERUBY = /home/pocke/.rbenv/shims/ruby --disable=gems\r\n        CC = gcc\r\n        LD = ld\r\n        LDSHARED = gcc -shared\r\n        CFLAGS = -O3 -ggdb3 -Wall -Wextra -Wno-unused-parameter -Wno-parentheses -Wno-long-long -Wno-missing-field-initializers -Wno-tautological-compare -Wno-parentheses-equality -Wno-constant-logical-operand -Wno-self-assign -Wunused-variable -Werror=implicit-int -Werror=pointer-arith -Werror=write-strings -Werror=declaration-after-statement -Werror=implicit-function-declaration -Werror=deprecated-declarations -Werror=misleading-indentation -Wno-overlength-strings -Wno-packed-bitfield-compat -Wsuggest-attribute=noreturn -Wsuggest-attribute=format -Wmissing-noreturn -Wimplicit-fallthrough=0 -Werror=duplicated-cond -Werror=restrict -std=gnu99  -fPIC\r\n        XCFLAGS = -D_FORTIFY_SOURCE=2 -fstack-protector -fno-strict-overflow -DRUBY_DEVEL=1 -fvisibility=hidden -fexcess-precision=standard -DRUBY_EXPORT\r\n        CPPFLAGS =   -I. -I.ext/include/x86_64-linux -I./include -I. -I./enc/unicode/10.0.0\r\n        DLDFLAGS = -Wl,--compress-debug-sections=zlib -Wl,-soname,libruby.so.2.6  -fstack-protector\r\n        SOLIBS = -lpthread -lgmp -ldl -lcrypt -lm\r\n        LANG = en_GB.UTF-8\r\n        LC_ALL =\r\n        LC_CTYPE =\r\ngcc (GCC) 7.3.0\r\nCopyright (C) 2017 Free Software Foundation, Inc.\r\nThis is free software; see the source for copying conditions.  There is NO\r\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\ngenerating opt_sc.inc\r\ngenerating optunifs.inc\r\ngenerating insns.inc\r\ngenerating insns_info.inc\r\nTraceback (most recent call last):\r\n        6: from ./tool/insns2vm.rb:9:in `<main>'\r\n        5: from ./tool/insns2vm.rb:9:in `each'\r\n        4: from ./tool/insns2vm.rb:10:in `block in <main>'\r\n        3: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:98:in `generate'\r\n        2: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:76:in `do_render'\r\n        1: from /home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:873:in `result'\r\n/home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:869:in `block in result': no implicit conversion of Hash into Integer (TypeError)\r\nmake: *** [Makefile:534: opt_sc.inc] Error 1\r\nmake: *** Waiting for unfinished jobs....\r\nTraceback (most recent call last):\r\n        6: from ./tool/insns2vm.rb:9:in `<main>'\r\n        5: from ./tool/insns2vm.rb:9:in `each'\r\n        4: from ./tool/insns2vm.rb:10:in `block in <main>'\r\n        3: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:98:in `generate'\r\n        2: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:76:in `do_render'\r\n        1: from /home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:873:in `result'\r\n/home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:869:in `block in result': no implicit conversion of Hash into Integer (TypeError)\r\nmake: *** [Makefile:534: optunifs.inc] Error 1\r\nTraceback (most recent call last):\r\n        6: from ./tool/insns2vm.rb:9:in `<main>'\r\n        5: from ./tool/insns2vm.rb:9:in `each'\r\n        4: from ./tool/insns2vm.rb:10:in `block in <main>'\r\n        3: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:98:in `generate'\r\n        2: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:76:in `do_render'\r\n        1: from /home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:873:in `result'\r\n/home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:869:in `block in result': no implicit conversion of Hash into Integer (TypeError)\r\nTraceback (most recent call last):\r\n        6: from ./tool/insns2vm.rb:9:in `<main>'\r\n        5: from ./tool/insns2vm.rb:9:in `each'\r\n        4: from ./tool/insns2vm.rb:10:in `block in <main>'\r\n        3: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:98:in `generate'\r\n        2: from /home/pocke/ghq/github.com/ruby/ruby/tool/ruby_vm/helpers/dumper.rb:76:in `do_render'\r\n        1: from /home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:873:in `result'\r\n/home/pocke/.rbenv/versions/trunk/lib/ruby/2.6.0/erb.rb:869:in `block in result': no implicit conversion of Hash into Integer (TypeError)\r\nmake: *** [Makefile:534: insns.inc] Error 1\r\nmake: *** [Makefile:534: insns_info.inc] Error 1\r\n```\r\n\r\nI guess this issue is same as https://bugs.ruby-lang.org/projects/ruby-trunk/repository/revisions/62531\r\nSo I applied the same change to tool/ruby_vm/helpers/dumper.rb also.\r\n\r\nI'm not sure the cause. What do you think this patch? @k0kubun ", "labels": [], "number": 1826, "updated_at": "2018-02-26 14:47:34", "user": 4361134, "closed_at": "2018-02-26 14:43:53", "id": 300261180, "title": "tool/ruby_vm/helpers/dumper.rb: check ERB version", "url": "https://api.github.com/repos/ruby/ruby/issues/1826", "created_at": "2018-02-26 14:35:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [14068]}, "text": "Making it so that email addresses in the readme md look like:\r\n[matz@ruby-lang.org](mailto:matz@ruby-lang.org)\r\n\r\nInstead of:\r\n\r\n<mailto:matz@ruby-lang.org>", "labels": [], "number": 1827, "updated_at": "2018-03-05 07:25:50", "user": 14823528, "closed_at": "2018-03-05 07:23:10", "id": 301051003, "title": "Cleaner looking email adresses in readme.md", "url": "https://api.github.com/repos/ruby/ruby/issues/1827", "created_at": "2018-02-28 14:46:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/370330631", "text": "It doesn't look cleaner to repeat same content in brackets and parentheses, to me.\r\nIsn't there a simple way to make the link to a relative path?", "created_at": "2018-03-05 07:21:15", "user": 16700, "id": 370330631}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/370331428", "text": "I meant such as `[COPYING](COPYING)`.", "created_at": "2018-03-05 07:25:50", "user": 16700, "id": 370331428}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This optimization was originally a part of https://github.com/ruby/ruby/pull/1782. But as it was buggy at the moment, this was removed on its merge.\r\n\r\nI succeeded to remove bugs in it, so I merge this as a part of https://bugs.ruby-lang.org/issues/14235.\r\n\r\n## Benchmark\r\n\r\n```\r\nbefore: ruby 2.6.0dev (2018-03-04 trunk 62652) [x86_64-linux]\r\nbefore+JIT: ruby 2.6.0dev (2018-03-04 trunk 62652) +JIT [x86_64-linux]\r\nafter: ruby 2.6.0dev (2018-03-04 local-variable.. 62652) [x86_64-linux]\r\nlast_commit=mjit_compile.c: use local variables for stack\r\nafter+JIT: ruby 2.6.0dev (2018-03-04 local-variable.. 62652) +JIT [x86_64-linux]\r\nlast_commit=mjit_compile.c: use local variables for stack\r\nCalculating -------------------------------------\r\n                         before  before+JIT       after   after+JIT\r\n           optcarrot     53.552      59.680      53.697      63.358 fps\r\n\r\nComparison:\r\n                        optcarrot\r\n           after+JIT:        63.4 fps\r\n          before+JIT:        59.7 fps - 1.06x  slower\r\n               after:        53.7 fps - 1.18x  slower\r\n              before:        53.6 fps - 1.18x  slower\r\n```", "labels": [], "number": 1828, "updated_at": "2018-03-04 07:06:10", "user": 3138447, "closed_at": "2018-03-04 07:05:40", "id": 302061227, "title": "Use local variables for stack on JIT-ed method", "url": "https://api.github.com/repos/ruby/ruby/issues/1828", "created_at": "2018-03-04 06:19:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The previous logic would overwrite the error message, replacing the message with the `fd` number.\r\n\r\nThis tiny update will print the message in full.\r\n\r\n(I'm trying to debug an issue with the timer thread on my machine and the lack of error messages makes it really hard).", "labels": [], "number": 1829, "updated_at": "2018-03-05 06:57:32", "user": 870622, "closed_at": "2018-03-05 06:57:32", "id": 302106302, "title": "Tiny Fix for ASYNC BUG error message copying", "url": "https://api.github.com/repos/ruby/ruby/issues/1829", "created_at": "2018-03-04 17:58:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1830, "updated_at": "2018-03-05 07:10:57", "user": 37030801, "closed_at": "2018-03-05 07:10:57", "id": 302167709, "title": "Revised the documentation", "url": "https://api.github.com/repos/ruby/ruby/issues/1830", "created_at": "2018-03-05 04:24:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/370328017", "text": "That file is used by a test.\r\nAnd please report it to https://github.com/ruby/rdoc.", "created_at": "2018-03-05 07:05:38", "user": 16700, "id": 370328017}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In compliance with WHATWG/URL specification, set to nil if each given values for query and fragment is an empty string.\r\n\r\nFixes: https://bugs.ruby-lang.org/issues/11149\r\n\r\n---\r\nHere are the referenced points from the [spec](https://url.spec.whatwg.org/).\r\n```\r\n**The search attribute’s setter must run these steps:**\r\n...\r\nIf the given value is the empty string, set url’s query to null, empty context object’s query object’s list, and then return.\r\n...\r\n\r\n**The hash attribute’s getter must run these steps:**\r\n...\r\nIf the given value is the empty string, then set context object’s url’s fragment to null and return.\r\n...\r\n```\r\n\r\nThanks.", "labels": [], "number": 1831, "updated_at": "2018-03-07 07:17:33", "user": 1716463, "closed_at": "2018-03-07 07:17:33", "id": 302570933, "title": "uri: do not keep ? and # if given value is empty", "url": "https://api.github.com/repos/ruby/ruby/issues/1831", "created_at": "2018-03-06 05:41:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371046388", "text": "I will continue considering a way to validate the input only in an assignment but close for now.", "created_at": "2018-03-07 07:17:33", "user": 1716463, "id": 371046388}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As file URLs cannot have username/password/port, we should not keep them when scheme is changed to file.\r\n\r\nRefs: https://github.com/whatwg/url/issues/259", "labels": [], "number": 1832, "updated_at": "2018-03-09 14:06:23", "user": 1716463, "closed_at": "None", "id": 303393934, "title": "uri: restrict setting protocol to file scheme", "url": "https://api.github.com/repos/ruby/ruby/issues/1832", "created_at": "2018-03-08 08:23:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371431537", "text": "Isn’t this dangerous? Allowing from another scheme to `file://` and keeping the path? IMO this should fail with a `SecurityError`. \r\n\r\nWhat’s the use case?", "created_at": "2018-03-08 09:30:36", "user": 8876, "id": 371431537}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371439359", "text": "@paddor That's the current behaviour as you can try and this patch doesn't touch it.\r\n```ruby\r\nurl = URI.parse('http://user:pass@example.com')\r\nurl.scheme = 'file'\r\nputs url.to_s\r\n# => file://user:pass@example.com\r\n```\r\n\r\nFile URL can not have username, password and port, and this patch is just about how we handle it. It is possible to raise an error when `arg_check = true` at `_check` methods, but this change might be the smallest impact.", "created_at": "2018-03-08 09:59:55", "user": 1716463, "id": 371439359}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371766158", "text": "I'm just wondering, what's the use case? With or without this patch, setting the scheme to `file` while keeping the path seems dangerous to me.", "created_at": "2018-03-09 09:52:35", "user": 8876, "id": 371766158}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371787244", "text": "For example, it can use the path as file names when caching contents. If we specify the base URL, it is not dangerous so far.  I'm also interested in discussing how the path should be handled between `http` and `file`, but I think it should happen at `whatwg/url` instead since this behaviour is what is assumed by the spec.", "created_at": "2018-03-09 11:25:48", "user": 1716463, "id": 371787244}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371787886", "text": "// We might also be possible to open a new issue for it on the tracker :)", "created_at": "2018-03-09 11:28:49", "user": 1716463, "id": 371787886}, {"reactions": {"+1": [1716463]}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371804091", "text": "This seems much safer and intuitive to me (path sanitizing not included):\r\n\r\n```\r\n[1] pry(main)> http_uri = URI 'http://example.com:8080/path/to/file.pdf'\r\n=> #<URI::HTTP http://example.com:8080/path/to/file.pdf>\r\n[2] pry(main)> file_uri = URI \"file://#{http_uri.path}\"\r\n=> #<URI::Generic file:///path/to/file.pdf>\r\n```\r\n\r\nI do think it's dangerous, because the path could contain `../../` and cause your cache to serve some other, possibly sensitive file, if you don't properly sanitize the path of the HTTP URI.", "created_at": "2018-03-09 12:51:07", "user": 8876, "id": 371804091}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371818221", "text": "In my understanding, that `../../ ` will be ignored if it's trying to go to the shallower directory than the base path, so it will not be that critical imo.\r\n\r\ne.g.\r\n```js\r\nnew URL('http://example.com/../../../foo/bar')\r\n// => http://example.com/foo/bar\r\n```\r\n\r\nEither way, that seems reasonable to ask at the specification repository about what properties the parser should keep when the scheme is changed between file and http. I'm also curious what @nurse think on this since he seems to work hard on the parser of URI.", "created_at": "2018-03-09 13:54:41", "user": 1716463, "id": 371818221}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371819570", "text": "It doesn't seem that way:\r\n\r\n```\r\n[1] pry(main)> URI 'http://example.com/../../../foo/bar'\r\n=> #<URI::HTTP http://example.com/../../../foo/bar>\r\n```", "created_at": "2018-03-09 14:00:06", "user": 8876, "id": 371819570}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/371821196", "text": "Wow really... Then I agree with you. Not a critical in a real world because of fewer use cases, but might not make sense to keep the path when the scheme is updated to file from http/https if we do not manage the relative path that can be shallower than the base path.", "created_at": "2018-03-09 14:06:23", "user": 1716463, "id": 371821196}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "# Summary\r\nI came to this while reading `Hash` documentation.\r\n\r\nBoth methods `Hash#length` and `Hash#size` share the same source code in Ruby, but they also share the same documentation. Now when you look at the documentation of `Hash#size` you only see examples for `Hash#length`, which is confusing.\r\n\r\nThis patch includes `Hash#size` in the examples and also remarks that both methods are equivalent to each other.\r\n\r\nMany thanks.", "labels": [], "number": 1833, "updated_at": "2018-03-14 18:08:50", "user": 671550, "closed_at": "None", "id": 303490597, "title": "[Docs] Include Hash#size in the examples", "url": "https://api.github.com/repos/ruby/ruby/issues/1833", "created_at": "2018-03-08 14:05:17", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Ignore prepended modules when looking for already defined methods on a\r\nclass to set the visibility on.", "labels": [], "number": 1834, "updated_at": "2018-03-12 06:56:05", "user": 954402, "closed_at": "2018-03-12 06:56:05", "id": 303615728, "title": "Fix setting method visibility on method wrapped with prepend", "url": "https://api.github.com/repos/ruby/ruby/issues/1834", "created_at": "2018-03-08 20:12:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A new exception is raised if an URI::HTTP is received and that object doesn't\r\nhave a hostname property.\r\nComplementary to #1278 fix.", "labels": [], "number": 1835, "updated_at": "2018-03-09 11:25:52", "user": 1037088, "closed_at": "None", "id": 303810042, "title": "Adding missing test for Net::HTTPGenericRequest initializer", "url": "https://api.github.com/repos/ruby/ruby/issues/1835", "created_at": "2018-03-09 11:25:52", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "If it will not use special variables (like $1, $&, $`...),\r\nit can improve the performance by using Regexp#match? instead of Regexp#=\\~.\r\nBecause Regexp#=\\~ will generate the objects to special variables by pattern matching.\r\n\r\nThis patch will replace Regexp#=~ without special variables to Regexp#match?.\r\n(Excludes https://github.com/ruby/ruby/blob/trunk/ext/pathname/lib/pathname.rb#L144-L153)\r\n\r\n## Environment\r\n* OS : Ubuntu 17.10\r\n* Compiler : gcc version 7.2.0\r\n* CPU : Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz\r\n* Memory : 16 GB\r\n\r\n## TL;DR\r\n                            | before | after  | Speed up\r\n--------------------------- | ------ | ------ | --------\r\nPathname#absolute?          | 142836 | 198487 | 39.0%\r\nPathname#cleanpath          |  60706 |  79415 | 30.8%\r\nPathname#root?              | 603806 | 759157 | 25.7%\r\nPathname#absolute?          | 142592 | 197859 | 38.8%\r\nPathname#each_filename      | 115600 | 152982 | 32.3%\r\nPathname#ascend             |  50494 |  63606 | 26.0%\r\nPathname#+                  | 100550 | 130372 | 29.7%\r\nPathname#join               |  46673 |  60994 | 30.7%\r\nPathname#relative_path_from |  28362 |  37494 | 32.2%\r\n\r\n## Before\r\n```\r\nCalculating -------------------------------------\r\n  Pathname#absolute?    142.836k (± 0.1%) i/s -    722.304k in   5.056884s\r\n  Pathname#cleanpath     60.706k (± 0.1%) i/s -    306.764k in   5.053305s\r\n      Pathname#root?    603.806k (± 0.3%) i/s -      3.062M in   5.071696s\r\n  Pathname#absolute?    142.592k (± 0.1%) i/s -    720.846k in   5.055301s\r\nPathname#each_filename\r\n                        115.600k (± 0.1%) i/s -    586.818k in   5.076292s\r\n     Pathname#ascend     50.494k (± 0.1%) i/s -    255.301k in   5.056049s\r\n          Pathname#+    100.550k (± 0.1%) i/s -    509.630k in   5.068433s\r\n       Pathname#join     46.673k (± 0.1%) i/s -    236.433k in   5.065696s\r\nPathname#relative_path_from\r\n                         28.362k (± 0.0%) i/s -    143.728k in   5.067640s\r\n```\r\n\r\n## After\r\n```\r\nCalculating -------------------------------------\r\n  Pathname#absolute?    198.487k (± 0.1%) i/s -    995.665k in   5.016272s\r\n  Pathname#cleanpath     79.415k (± 0.1%) i/s -    404.406k in   5.092344s\r\n      Pathname#root?    759.157k (± 0.0%) i/s -      3.800M in   5.005072s\r\n  Pathname#absolute?    197.859k (± 0.1%) i/s -    995.720k in   5.032494s\r\nPathname#each_filename\r\n                        152.982k (± 0.1%) i/s -    775.555k in   5.069607s\r\n     Pathname#ascend     63.606k (± 0.0%) i/s -    320.862k in   5.044560s\r\n          Pathname#+    130.372k (± 0.1%) i/s -    660.856k in   5.068991s\r\n       Pathname#join     60.994k (± 0.1%) i/s -    305.068k in   5.001626s\r\nPathname#relative_path_from\r\n                         37.494k (± 0.4%) i/s -    189.124k in   5.044146s\r\n```\r\n\r\n## Benchmark code\r\n```ruby\r\nrequire 'pathname'\r\nrequire 'benchmark/ips'\r\n\r\nBenchmark.ips do |x|\r\n  root  = Pathname.new('/')\r\n  path1 = Pathname.new('/path/to/some/file1.rb')\r\n  path2 = Pathname.new('/path/to/some/file2.rb')\r\n\r\n  x.report(\"Pathname#absolute?\") do\r\n    path1.absolute?\r\n  end\r\n\r\n  x.report(\"Pathname#cleanpath\") do\r\n    Pathname.new('/path/to/some/file.rb').cleanpath\r\n  end\r\n\r\n  x.report(\"Pathname#root?\") do\r\n    path1.root?\r\n  end\r\n\r\n  x.report(\"Pathname#absolute?\") do\r\n    path1.absolute?\r\n  end\r\n\r\n  x.report(\"Pathname#each_filename\") do\r\n    path1.each_filename { |file| }\r\n  end\r\n\r\n  x.report(\"Pathname#ascend\") do\r\n    path1.ascend { |path| }\r\n  end\r\n\r\n  x.report(\"Pathname#+\") do\r\n    path1 + path2\r\n  end\r\n\r\n  x.report(\"Pathname#join\") do\r\n    path1.join(\"../file3.rb\")\r\n  end\r\n\r\n  x.report(\"Pathname#relative_path_from\") do\r\n    path1.relative_path_from(root)\r\n  end\r\nend\r\n```\r\n\r\nhttps://bugs.ruby-lang.org/issues/14599", "labels": [], "number": 1836, "updated_at": "2018-03-13 09:16:24", "user": 199156, "closed_at": "2018-03-13 09:16:24", "id": 304636916, "title": "Improve Pathname performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1836", "created_at": "2018-03-13 05:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/372588916", "text": " You can commit by yourself a patch which improves performance without increasing complexity.", "created_at": "2018-03-13 08:44:50", "user": 13423, "id": 372588916}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/372593547", "text": "Thanks :)", "created_at": "2018-03-13 09:02:42", "user": 199156, "id": 372593547}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [13203]}, "text": "Currently `Ripper.slice` raises a FrozenError\r\n\r\n```ruby\r\nrequire 'ripper'\r\np Ripper.slice('foo', 'ident')\r\n```\r\n\r\n```\r\n/path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:193:in `concat': can't modify frozen String (FrozenError)\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:193:in `block in compile'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:190:in `scan'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:190:in `compile'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:169:in `initialize'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:151:in `new'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:151:in `token_match'\r\n\tfrom /path/to/g/lib/ruby/2.6.0/ripper/lexer.rb:144:in `slice'\r\n\tfrom /path2/to/test.rb:2:in `<main>'\r\n```\r\n\r\nThis patch will fix the problem.\r\n", "labels": [], "number": 1837, "updated_at": "2018-03-13 14:57:59", "user": 4361134, "closed_at": "2018-03-13 12:57:18", "id": 304712450, "title": "Fix FrozenError on `Ripper.slice`", "url": "https://api.github.com/repos/ruby/ruby/issues/1837", "created_at": "2018-03-13 10:45:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to https://github.com/ruby/ruby/pull/1832, but this patch is just for a case `arg_check=true`.", "labels": [], "number": 1838, "updated_at": "2018-03-13 15:32:33", "user": 1716463, "closed_at": "None", "id": 304815493, "title": "uri: do not use user/password/port with file", "url": "https://api.github.com/repos/ruby/ruby/issues/1838", "created_at": "2018-03-13 15:32:33", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\r\n\r\nThis is a trivial backport (small documentation fix) request for ruby_2_5.\r\n\r\nIt was originally merged in trunk (revision 62734) at: https://github.com/ruby/ruby/commit/175c514a0dd4134b43e613934caeaa1c115aefa8\r\n\r\nCheers,\r\n\r\n1. https://github.com/ruby/ruby/pull/1818", "labels": [], "number": 1839, "updated_at": "2018-03-19 01:00:37", "user": 79817, "closed_at": "2018-03-14 23:37:21", "id": 304906224, "title": "[Docs] Backport 62734 to ruby_2_5", "url": "https://api.github.com/repos/ruby/ruby/issues/1839", "created_at": "2018-03-13 19:35:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373210608", "text": "We didn't handle backport request on GitHub. Please report our official tracker like https://bugs.ruby-lang.org/issues/14604", "created_at": "2018-03-14 23:38:09", "user": 12301, "id": 373210608}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373994488", "text": "Sorry about that, I wasn't familiar with the workflow.\r\n\r\nI just opened an issue in the official tracker: https://bugs.ruby-lang.org/issues/14613", "created_at": "2018-03-18 12:25:57", "user": 79817, "id": 373994488}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/374073331", "text": "No problem. I marked your issue to our backport rules. Thanks ❤️ ", "created_at": "2018-03-19 01:00:37", "user": 12301, "id": 374073331}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes following warning:\r\n\r\n```\r\ntest/logger/test_logger.rb:329: warning: assigned but unused variable - read_read\r\n```", "labels": [], "number": 1840, "updated_at": "2018-03-17 06:46:07", "user": 987638, "closed_at": "2018-03-17 06:42:49", "id": 306127503, "title": "Remove unused variables", "url": "https://api.github.com/repos/ruby/ruby/issues/1840", "created_at": "2018-03-17 04:35:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It can be specified from 2.0. Ref: https://bugs.ruby-lang.org/issues/7103", "labels": [], "number": 1841, "updated_at": "2018-03-17 06:45:55", "user": 987638, "closed_at": "2018-03-17 06:40:32", "id": 306131825, "title": "Add doc for `opt` parameter of IO#reopen [ci skip]", "url": "https://api.github.com/repos/ruby/ruby/issues/1841", "created_at": "2018-03-17 06:08:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If it will not use special variables (like $1, $&, $`...),\r\nit can improve the performance by using Regexp#match? or String#match? instead of Regexp#=~ or String#=~.\r\n\r\nThis patch is same idea as https://github.com/ruby/ruby/pull/1836\r\n\r\n## Environment\r\n* OS : Ubuntu 17.10\r\n* Compiler : gcc version 7.2.0\r\n* CPU : Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz\r\n* Memory : 16 GB\r\n\r\n## TL;DR\r\nMethods     | Before | After  | Speed up\r\n----------- | ------ | ------ | --------\r\nCSV.foreach | 44.825 | 48.201 | 7.5%\r\nCSV#shift   | 45.200 | 49.584 | 9.7%\r\nCSV.read    | 42.968 | 46.853 | 9.0%\r\nCSV.table   | 10.933 | 11.277 | 3.1%\r\n\r\n## Before\r\n```\r\nCalculating -------------------------------------\r\n         CSV.foreach     44.825  (± 0.0%) i/s -    228.000  in   5.086576s\r\n           CSV#shift     45.200  (± 0.0%) i/s -    228.000  in   5.044297s\r\n            CSV.read     42.968  (± 0.0%) i/s -    216.000  in   5.027504s\r\n           CSV.table     10.933  (± 0.0%) i/s -     55.000  in   5.031098s\r\n```\r\n\r\n## After\r\n```\r\nCalculating -------------------------------------\r\n         CSV.foreach     48.201  (± 0.0%) i/s -    244.000  in   5.062256s\r\n           CSV#shift     49.584  (± 0.0%) i/s -    248.000  in   5.001652s\r\n            CSV.read     46.853  (± 0.0%) i/s -    236.000  in   5.037044s\r\n           CSV.table     11.277  (± 0.0%) i/s -     57.000  in   5.054694s\r\n```\r\n\r\n## Benchmark code\r\n```ruby\r\nrequire 'csv'\r\nrequire 'benchmark/ips'\r\n\r\nCSV.open(\"/tmp/file.csv\", \"w\") do |csv|\r\n  csv << [\"player\", \"gameA\", \"gameB\"]\r\n  1000.times do\r\n    csv << ['\"Alice\"', \"84.0\", \"79.5\"]\r\n    csv << ['\"Bob\"', \"20.0\", \"56.5\"]\r\n  end\r\nend\r\n\r\nBenchmark.ips do |x|\r\n  x.report \"CSV.foreach\" do\r\n    CSV.foreach(\"/tmp/file.csv\") do |row|\r\n    end\r\n  end\r\n\r\n  x.report \"CSV#shift\" do\r\n    CSV.open(\"/tmp/file.csv\") do |csv|\r\n      while line = csv.shift\r\n      end\r\n    end\r\n  end\r\n\r\n  x.report \"CSV.read\" do\r\n    CSV.read(\"/tmp/file.csv\")\r\n  end\r\n\r\n  x.report \"CSV.table\" do\r\n    CSV.table(\"/tmp/file.csv\")\r\n  end\r\nend\r\n```", "labels": [], "number": 1842, "updated_at": "2018-03-18 12:17:53", "user": 199156, "closed_at": "2018-03-18 10:30:17", "id": 306162778, "title": "Improve CSV performance", "url": "https://api.github.com/repos/ruby/ruby/issues/1842", "created_at": "2018-03-17 14:56:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373992621", "text": "csv's upstream is https://github.com/ruby/csv .\r\nPlease change csv in upstream instead of the Ruby's repository.", "created_at": "2018-03-18 11:57:43", "user": 27350, "id": 373992621}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/373993953", "text": "ah, sorry. I will send pull request to upstream", "created_at": "2018-03-18 12:17:53", "user": 199156, "id": 373993953}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `proc_binding()` has an outdated comment: passing a proc as the second argument to eval is no longer supported. In Ruby 2.4.1:\r\n\r\n``` ruby\r\ndef fred(param)\r\n  proc {}\r\nend\r\n\r\nb = fred(99)\r\neval(\"param\", b.binding)   #=> 99\r\neval(\"param\", b)           #=> TypeError: wrong argument type proc (expected binding)\r\n```\r\n\r\nThe example for this was [removed in 2008](https://github.com/ruby/ruby/commit/861219ce4a8c91a6d94c0d138c2f2bf2b3c2337e#diff-7425ed078bca65febfb9834a8024f288L1590), so this just cleans up after that. \r\n\r\nThank you!", "labels": [], "number": 1843, "updated_at": "2018-03-21 15:47:32", "user": 5054, "closed_at": "2018-03-21 15:47:32", "id": 306266602, "title": "[Docs] Remove outdated proc.c binding comment.", "url": "https://api.github.com/repos/ruby/ruby/issues/1843", "created_at": "2018-03-18 18:23:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [649130, 108369, 1037088]}, "text": "Hello\r\n\r\nAfter reading https://bugs.ruby-lang.org/issues/14559 I thought it could be a good idea to try to implement this during the RubyHackChallenge at Cookpad office in Bristol. \r\n\r\nHere is my first PR for MRI, feel free to make any comments.\r\nI don't know if I need to add entry changelog somewhere.\r\n\r\nThanks @mame for the help when I was working on.", "labels": [], "number": 1844, "updated_at": "2018-03-21 18:03:25", "user": 8417720, "closed_at": "None", "id": 307223077, "title": "Add slice method to ENV like Hash#slice", "url": "https://api.github.com/repos/ruby/ruby/issues/1844", "created_at": "2018-03-21 12:23:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/374993402", "text": "Could you adjust the indent?", "created_at": "2018-03-21 15:59:21", "user": 16700, "id": 374993402}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/375041017", "text": "Sorry. Is it better now @nobu ?\r\n\r\nThanks for the review", "created_at": "2018-03-21 18:03:25", "user": 8417720, "id": 375041017}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The documentation didn't mention trailing spaces and the\r\nexample only demonstrated the case with leading spaces.", "labels": [], "number": 1845, "updated_at": "2018-03-21 16:03:41", "user": 32246, "closed_at": "2018-03-21 16:03:41", "id": 307259398, "title": "Improve documentation for 'text '.split", "url": "https://api.github.com/repos/ruby/ruby/issues/1845", "created_at": "2018-03-21 14:06:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Improve code coverage and clarify docs for `URI#hierarchical?` based on RFC\r\ntext.", "labels": [], "number": 1846, "updated_at": "2018-03-21 16:05:14", "user": 369527, "closed_at": "2018-03-21 16:05:14", "id": 307279952, "title": "Docs and tests on URI.hierarchical?, URI.absolute?", "url": "https://api.github.com/repos/ruby/ruby/issues/1846", "created_at": "2018-03-21 14:55:36", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR is a first attempt to contribute to MRI, done at the RubyHackChallenge at Cookpad office in Bristol. I apologize in advance for anything that might be missing here, in relation to how this should be approached. \r\n\r\nIt has been started with https://github.com/ko1/rubyhackchallenge/issues/41. After the implementation, me and @skateman had a chart with @matz about the how applicable would it be to have that code merged.\r\n\r\nMatz suggested that a method like this, described afterwards in https://github.com/ko1/rubyhackchallenge/issues/44, would have more applicability and just generally be more useful.", "labels": [], "number": 1847, "updated_at": "2018-03-22 07:51:45", "user": 763630, "closed_at": "None", "id": 307330680, "title": "Implement Hash#path_to_key", "url": "https://api.github.com/repos/ruby/ruby/issues/1847", "created_at": "2018-03-21 16:51:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/375016434", "text": "@skateman This is the implementation I came up with.", "created_at": "2018-03-21 16:56:07", "user": 763630, "id": 375016434}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/375019079", "text": "Where `h = {a: 1}`, both of `h.path_to_key(:a)` and `h.path_to_key(:b)` return `[]`.\r\nIs this intentional?\r\n\r\nFor recursive hash, `h = {}; h[:x] = h`, `h.path_to_key(:a)` returns `[:x]`, but `h` doesn't contain `:a`.", "created_at": "2018-03-21 17:03:06", "user": 16700, "id": 375019079}, {"reactions": {}, "url": "https://api.github.com/repos/ruby/ruby/issues/comments/375023088", "text": "@nobu Interesting comment....\r\nNumber 1 is intentional, yes, although might not be the most ideal way of exposing that the path is unexistent _or_ it's in the first-level (root) of the Hash object.\r\n\r\nAbout number two, I will add a test for this case and fix it.", "created_at": "2018-03-21 17:13:52", "user": 763630, "id": 375023088}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "to state what it really does.\r\n\r\nAccording to the documentation, this would be wrong:\r\n\r\n```\r\nc = Complex(Float::MAX, Float::MAX)\r\n=> (1.7976931348623157e+308+1.7976931348623157e+308i)\r\nc.finite?\r\n=> true\r\nc.magnitude.finite?\r\n=> false\r\nc.magnitude\r\n=> Infinity\r\n```\r\n\r\nSame is true for ``Complex#infinite?``", "labels": [], "number": 1848, "updated_at": "2018-03-22 07:43:41", "user": 3799140, "closed_at": "None", "id": 307535695, "title": "Update Complex#finite? and Complex#infinite? documenation", "url": "https://api.github.com/repos/ruby/ruby/issues/1848", "created_at": "2018-03-22 07:41:48", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [33752]}, "text": "Including the key and value of the invalid header makes it much easier to identify the problem.", "labels": [], "number": 1849, "updated_at": "2018-03-22 17:49:11", "user": 2575714, "closed_at": "None", "id": 307750017, "title": "Improve net/http header error message", "url": "https://api.github.com/repos/ruby/ruby/issues/1849", "created_at": "2018-03-22 17:49:11", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
