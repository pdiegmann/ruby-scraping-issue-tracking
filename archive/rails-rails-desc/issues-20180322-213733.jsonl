{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nSetup `ActiveStorage` with Google Cloud Storage service:\r\n\r\n```yaml\r\n# storage.yaml\r\ngoogle:\r\n  service: GCS\r\n  credentials: <%= ENV['GCS_CREDENTIALS'] %>\r\n  project: \"my-project-id\"\r\n  bucket: \"my-bucket-name\"\r\n```\r\n\r\n```ruby\r\nclass MyModel < ApplicationRecord\r\n    has_one_attached :image\r\nend\r\n```\r\n\r\n### Expected behavior\r\nThe `Cache-Control` header for the uploaded file should be set to a sensible and configurable default. Otherwise, on Google Cloud Storage, the default is particularly problematic (`private,max-age=0`). There is currently no way to set the default on Google Cloud side, making the problem particularly annoying compared to other storage backends.\r\n\r\nIdeally, `ActiveStorage` could read a global default in the `storage.yml` file, maybe with a way to override it for specific cases. Something like:\r\n\r\n```yaml\r\n# Global default on storage.yml\r\ngoogle:\r\n  service: GCS\r\n  credentials: <%= ENV['GCS_CREDENTIALS'] %>\r\n  project: \"my-project-id\"\r\n  bucket: \"my-bucket-name\"\r\n  object_defaults:\r\n    cache-control: \"public, max-age=3600\"\r\n```\r\n\r\n### Actual behavior\r\nNo `Cache-Control` header is set, causing Google Cloud Storage to default to `Cache-Control: private,max-age=0`. This causes files to never be cached by the browser, which can easily become very problematic on pages showing many uploaded files. There is currently no way on Google Cloud Storage to set a default cache control for the whole bucket, therefore the only reasonable way seems to be to set the cache control upon file upload.\r\n\r\n### System configuration\r\n**Rails version**: `5.2.0-rc2`\r\n\r\n**Ruby version**: `2.5.0`\r\n", "labels": [], "number": 32325, "updated_at": "2018-03-22 20:33:46", "user": 225441, "closed_at": "None", "id": 307804243, "title": "ActiveStorage: No Cache-Control header set on GCS, defaulting to \"private,max-age=0\"", "url": "https://api.github.com/repos/rails/rails/issues/32325", "created_at": "2018-03-22 20:33:46", "comments": [], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nEasiest way is to enter the following in Rails console:\r\n\r\n```ruby\r\nActiveRecord::Type.lookup(:integer, array: true)\r\n```\r\n\r\nFrom a model, you can do this:\r\n\r\n```ruby\r\n  attribute :my_int_array, :integer, array: true\r\n```\r\n\r\n### Expected behavior\r\n\r\nAccording to [the documentation of `attribute` method](http://api.rubyonrails.org/classes/ActiveRecord/Attributes/ClassMethods.html#method-i-attribute), it should be possible to specify an attribute that is an array.\r\n\r\n```ruby\r\n  attribute :my_int_array, :integer, array: true\r\n```\r\n\r\n### Actual behavior\r\n\r\nSeeing this error:\r\n\r\n```\r\nArgumentError: unknown keyword: array\r\nfrom /Users/newuser/.rvm/gems/ruby-2.3.3@citiesense/gems/activemodel-5.1.5/lib/active_model/type/value.rb:6:in `initialize'\r\n```\r\n\r\n### System configuration\r\n**Rails version**:\r\n\r\n5.1.5\r\n\r\n**Ruby version**:\r\n\r\n2.3.3", "labels": [], "number": 32324, "updated_at": "2018-03-22 20:31:42", "user": 151600, "closed_at": "None", "id": 307797934, "title": "Unable to create an attribute for an array", "url": "https://api.github.com/repos/rails/rails/issues/32324", "created_at": "2018-03-22 20:14:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375447535", "text": "Could you create a reproduction script with this template https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_master.rb?", "created_at": "2018-03-22 20:31:42", "user": 47848, "id": 375447535}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n1. Use Postgresql as DB.\r\n2. Have a Post model with timestamps.\r\n3. Create a post: `post = Post.create!`\r\n4. Call `post.touch(:updated_at)`\r\n\r\n### Expected behaviour\r\nPost's updated_at should be changed without error.\r\n\r\n### Actual behaviour\r\nError happens: \r\n\r\n> ActiveRecord::StatementInvalid: PG::SyntaxError: ERROR:  multiple assignments to same column \"updated_at\"\r\n> : UPDATE \"posts\" SET \"updated_at\" = $1, \"updated_at\" = $2 WHERE \"posts\".\"id\" = $3\r\n\r\n### Executable test case\r\n\r\nhttps://gist.github.com/khustochka/cab304cfece8752d7d37715013e0cdb8\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.2.0.rc2, master\r\n\r\n**Ruby version**:\r\n2.5.0\r\n\r\n**DB adapter**\r\nPostgresql\r\n\r\n### Notes\r\n* This is also reproduced if you have an associated model with `belongs_to :post, touch: :updated_at`\r\n* This can be bypassed with `touch: true` because `updated_at` is the default column to touch.\r\n* But it worked before, not reproducible in 5.2.0.rc1 and prior versions.", "labels": ["With reproduction steps", "activerecord"], "number": 32323, "updated_at": "2018-03-22 20:32:38", "user": 137464, "closed_at": "None", "id": 307761578, "title": "5.2.0.rc2, master: `touch(:updated_at)` causes multiple assignments to same column in Postgresql", "url": "https://api.github.com/repos/rails/rails/issues/32323", "created_at": "2018-03-22 18:22:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375422880", "text": "If this can help I ran a bisect,  the commit introducing this is https://github.com/rails/rails/commit/37a1dfad39756499305e19620aa97f630d32fc07 \r\n\r\nFYI @kamipo \r\n\r\n", "created_at": "2018-03-22 19:05:07", "user": 8122246, "id": 375422880}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Gem Mysql2 0.5.0 is out and I couldn't find any technical reason for Rails 4.2 not to support it. \r\nI tested it with some large Rails 4.2 apps in homolog, after all tests passed, and all went fine.\r\n\r\nI know Rails 4.2 is near EOL, But it seems that 5.0 has not been updated.\r\n\r\nThanks", "labels": [], "number": 32322, "updated_at": "2018-03-22 16:03:32", "user": 473116, "closed_at": "2018-03-22 16:03:32", "id": 307704102, "title": "Should AR 4.2 and 5.0 support Mysql2 0.5.0??", "url": "https://api.github.com/repos/rails/rails/issues/32322", "created_at": "2018-03-22 15:52:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375360938", "text": "Rails 4.2 is already EOL, and 5.0 is too see http://guides.rubyonrails.org/maintenance_policy.html. They only receive security fixes now.", "created_at": "2018-03-22 16:03:32", "user": 47848, "id": 375360938}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nhas_many :house_histories, :inverse_of => :area\r\n\r\ninverse_of is a scope, options is nil\r\n\r\nPlease revert https://github.com/rails/rails/commit/9b53f74d897d346f44caae7b0cffcd900f986259#diff-5870816b49b90e43340607bb11ed2514\r\n\r\nWe still need \r\n\r\nif scope.is_a?(Hash)\r\n        options = scope\r\n        scope   = nil\r\nend\r\n\r\nat create_reflection(model, name, scope, options, extension = nil)\r\n\r\n\r\n### Expected behavior\r\n\r\nWorking application\r\n\r\n### Actual behavior\r\n\r\nCrash with error\r\n\r\n### System configuration\r\n**Rails version**:5.2.0.rc2\r\n\r\n**Ruby version**:2.3.6\r\n", "labels": [], "number": 32321, "updated_at": "2018-03-22 13:24:07", "user": 3380440, "closed_at": "2018-03-22 13:24:07", "id": 307627103, "title": "Activerecord associations is broken at least with ruby 2.3 (5.2.0.rc2)", "url": "https://api.github.com/repos/rails/rails/issues/32321", "created_at": "2018-03-22 12:43:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375304044", "text": "Sorry it was schema_plus:(", "created_at": "2018-03-22 13:24:07", "user": 3380440, "id": 375304044}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"confused": [720573]}, "text": "Im writing a Application which has following Model Design\r\n\r\n`Model A has_many bs`\r\n`Model B belongs_to a`\r\nb is sigular an bs/BS is plural\r\na is singular and as/AS is plural\r\n and i'm using an Admin-controller to define what the users can do\r\n\r\n`class Admin::BsController < ApplicationController`\r\n`def create`\r\n `  @a = A.find(params[:a_id])`\r\n  ` @b = @a.bs.create(entry_params)`\r\n  `  redirect_to a_path(@a)`\r\n  `end`\r\nThe form in the view is show.html.erb is generated like\r\n`<%= form_with(model: [:admin, @a,B.new ], local: true) do |f| %>`\r\n...\r\n`<%= end %>`\r\n### Expected behavior\r\nTell us what should happen\r\nThe new DB-entry which belongs_to a should be created.\r\n### Actual behavior\r\nTell us what happens instead\r\nI get an error\r\n\r\n`NoMethodError in Admin::EntriesController#create`\r\n`undefined method ``string' for #<B:0x00007f93a8090450> Did you mean? String`\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.1.5\r\n\r\n**Ruby version**: Ruby 2.5.0p0", "labels": [], "number": 32320, "updated_at": "2018-03-22 18:18:56", "user": 720573, "closed_at": "None", "id": 307619177, "title": "undefined method `string' for #<Entry:0x00007f56a005c398> Did you mean? String", "url": "https://api.github.com/repos/rails/rails/issues/32320", "created_at": "2018-03-22 12:17:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375408602", "text": " Can you please provide a sample application that reproduces the error?", "created_at": "2018-03-22 18:18:55", "user": 47848, "id": 375408602}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nRuby 2.6 will not require monkey patched `URI#unescape` since revision 62897 https://github.com/ruby/ruby/commit/234a30459cdae6aa7da6e28a1082d9c11f315696\r\n\r\nI think it is better to handle by checking RUBY_VERSION compare with possibly raising `Encoding::CompatibilityError` exception.\r\n\r\nRelated to #32294", "labels": [], "number": 32319, "updated_at": "2018-03-22 11:53:56", "user": 73684, "closed_at": "None", "id": 307612078, "title": "Ruby 2.6 will not require monkey patched `URI#unescape`", "url": "https://api.github.com/repos/rails/rails/issues/32319", "created_at": "2018-03-22 11:53:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375278137", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-22 11:53:56", "user": 7468109, "id": 375278137}], "assignees": [6321, 6321], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "CI with jruby-head for actionpack has been failing at Travis https://travis-ci.org/rails/rails/jobs/356541503\r\n\r\n### Steps to reproduce\r\n```ruby\r\n$ cd actionpack\r\n$ bundle install\r\n$ bundle exec ruby -Itest test/journey/routes_test.rb\r\n```\r\n\r\nI think this is not specific to `routes_test.rb`. It could reproduce almost every test.\r\n\r\n### Expected behavior\r\nTell us what should happen\r\n\r\n### Actual behavior\r\n```ruby\r\n$ bundle exec ruby -Itest test/journey/routes_test.rb\r\nLoadError: no such file to load -- io/console/size\r\n             require at org/jruby/RubyKernel.java:969\r\n    block in require at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:283\r\n     load_dependency at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:249\r\n             require at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:283\r\n              <main> at /home/yahonda/git/rails/actionpack/lib/action_dispatch/routing/inspector.rb:4\r\n             require at org/jruby/RubyKernel.java:969\r\n     block in (root) at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:1\r\n             require at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:283\r\n     load_dependency at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:249\r\n              <main> at /home/yahonda/git/rails/activesupport/lib/active_support/dependencies.rb:283\r\n     block in (root) at /home/yahonda/git/rails/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:5\r\n              (root) at /home/yahonda/git/rails/actionpack/test/abstract_unit.rb:1\r\n           build_app at /home/yahonda/git/rails/actionpack/test/abstract_unit.rb:105\r\n          initialize at /home/yahonda/git/rails/actionpack/lib/action_dispatch/middleware/stack.rb:47\r\n  <class:initialize> at /home/yahonda/git/rails/actionpack/test/abstract_unit.rb:93\r\n              <main> at /home/yahonda/git/rails/actionpack/test/abstract_unit.rb:103\r\n             require at org/jruby/RubyKernel.java:969\r\n              <main> at /home/yahonda/git/rails/actionpack/test/abstract_unit.rb:115\r\n$\r\n```\r\n\r\n### System configuration\r\n**Rails version**:master branch\r\n\r\n**Ruby version**:jruby 9.2.0.0-SNAPSHOT (2.4.1) 2018-03-15 36b44df Java HotSpot(TM) 64-Bit Server VM 25.161-b12 on 1.8.0_161-b12 [linux-x86_64]", "labels": [], "number": 32318, "updated_at": "2018-03-22 14:18:40", "user": 73684, "closed_at": "None", "id": 307588518, "title": "JRuby 9.2.0 shows `LoadError: no such file to load -- io/console/size`", "url": "https://api.github.com/repos/rails/rails/issues/32318", "created_at": "2018-03-22 10:38:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375258397", "text": "`GEM=am,amo,aj` is also getting the same `LoadError: no such file to load -- io/console/size` https://travis-ci.org/rails/rails/jobs/356541504", "created_at": "2018-03-22 10:40:02", "user": 73684, "id": 375258397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375258505", "text": "cc @headius @enebo", "created_at": "2018-03-22 10:40:34", "user": 73684, "id": 375258505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375322482", "text": "A new addition to the io/console library it seems?", "created_at": "2018-03-22 14:18:40", "user": 10135, "id": 375322482}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nThis is an attempt to fix #32247 by flipping the after_create callbacks to avoid a race condition. Because `after_create_commit` calls it's callbacks in reverse order we should identify the blob before queuing any jobs.\r\n", "labels": [], "number": 32317, "updated_at": "2018-03-22 03:17:26", "user": 1100408, "closed_at": "None", "id": 307491797, "title": " Flip the order of the after_create callbacks", "url": "https://api.github.com/repos/rails/rails/issues/32317", "created_at": "2018-03-22 03:17:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375166261", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @schneems (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-22 03:17:26", "user": 7468109, "id": 375166261}], "assignees": [59744, 59744], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "The rack gem returns PATH_INFO as an ASCII-8BIT encoded string but it was being converted to US-ASCII by the match? method because it was calling Rack::Utils.escape_path. To prevent incompatibile encoding warnings use ASCII-8BIT strings for the root path and let Ruby handle any filename encoding conversion.\r\n\r\nFixes #32294, Closes #32314.", "labels": [], "number": 32316, "updated_at": "2018-03-22 04:24:24", "user": 6321, "closed_at": "None", "id": 307327362, "title": "Use ASCII-8BIT paths in ActionDispatch::Static", "url": "https://api.github.com/repos/rails/rails/issues/32316", "created_at": "2018-03-21 16:43:21", "comments": [{"reactions": {"heart": [73684]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375011989", "text": "@yahonda this fixes the broken tests - I don't think we need the URI monkey patch on Ruby 2.6", "created_at": "2018-03-21 16:44:26", "user": 6321, "id": 375011989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375138222", "text": "Thanks for the fix. I have also validated #32294 has been fixed by this pull request.\r\n\r\nConsidering if it is better to change this condition with `if RUBY_VERSION < \"2.6.0\"` \r\n\r\nhttps://github.com/rails/rails/blob/4c9c3ffc2e80155f31dbcf80591618ed1c858685/activesupport/lib/active_support/core_ext/uri.rb#L14\r\n\r\nand remove them.\r\nhttps://github.com/rails/rails/blob/4c9c3ffc2e80155f31dbcf80591618ed1c858685/activesupport/lib/active_support/core_ext/uri.rb#L7-L12", "created_at": "2018-03-22 00:20:53", "user": 73684, "id": 375138222}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "ref issue: https://github.com/hooopo/second_level_cache/issues/74\r\n\r\n```rb\r\n@cache.with_local_cache do\r\n  @cache.write(\"foo\", \"foo\", raw: true)\r\n  @cache.write(\"bar\", \"bar\", raw: true)\r\n  # Before:\r\n  @cache.read_multi(\"foo\", \"bar\")\r\n  # => { \"foo\" => <ActiveSupport::Cache::Entry>, \"bar\" => <ActiveSupport::Cache::Entry> }\r\n  # After:\r\n  @cache.read_multi(\"foo\", \"bar\")\r\n  # => { \"foo\" => \"foo\", \"bar\" => \"bar\" }\r\nend\r\n```\r\n\r\n<img width=\"1062\" alt=\"2018-03-21 13 34 03\" src=\"https://user-images.githubusercontent.com/5518/37695845-42fe42b2-2d0d-11e8-8118-4b24bf54c6af.png\">\r\n\r\n", "labels": [], "number": 32315, "updated_at": "2018-03-21 06:22:01", "user": 5518, "closed_at": "None", "id": 307127749, "title": "Fix Cache `read_multi` with local_cache bug, should returns raw value, not `ActiveSupport::Cache::Entry` instance.", "url": "https://api.github.com/repos/rails/rails/issues/32315", "created_at": "2018-03-21 05:57:06", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nChange the condition for monkey patching `unescape` method since Ruby 2.6.0  will not raise `Encoding::CompatibilityError` for the mixed unicode and percent escaped strings. \r\n\r\nAddresses #32294 and related to #32210\r\nRefer https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=62695&view=revision\r\n", "labels": [], "number": 32314, "updated_at": "2018-03-22 00:58:23", "user": 73684, "closed_at": "2018-03-22 00:58:23", "id": 307121684, "title": "Change the condition for monkey patching `unescape` method", "url": "https://api.github.com/repos/rails/rails/issues/32314", "created_at": "2018-03-21 05:07:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374835118", "text": "r? @rafaelfranca\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-21 05:07:37", "user": 7468109, "id": 374835118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375143822", "text": "Closing. #32316 provides a better fix.", "created_at": "2018-03-22 00:58:23", "user": 73684, "id": 375143822}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [5573816]}, "text": "### Summary\r\n\r\nAdd ActiveModel::Error, handling the rendering of messages and access of error's details.\r\nUtilize this class in ActiveModel::Errors, changing it from a hash based interface, to an array of Error objects.\r\n\r\n### Introduction\r\n\r\nActiveModel#errors interface is currently not very object oriented. For some complex use cases, this design made it a bit tedious to use. I feel these issues can be remedied by encapsulating each individual error as an object.\r\n\r\nLast year I implemented AdequateErrors gem to do this, and it solved many of my problems. I later found out that back in 2016, @eprothro suggested the [same idea too](https://groups.google.com/forum/#!topic/rubyonrails-core/dRxdSeV4JQE) on the core mailinglist, and Rafael was positive about this. So I made this PR.\r\n\r\nThis interface is by no means final. I don’t know how much change the core team is happy to accept. I do try to find a balance between new flexibility and breaking less stuff. I have also considered many other interfaces, so please discuss and I am happy to change or explain my design rationales.\r\n\r\nWhat’s Rails’ deprecation policy like? As this contains breaking changes, can this go straight into Rails 6.0? Or is some kind of transitioning deprecation needed?\r\n\r\nI will fix other specs/add doc/performance tuning once interface is finalized.\r\n\r\nHere are some benefits of the OO approach:\r\n\r\n#### More flexible query interface such as `where`\r\n\r\nIt’s easy to query one particular object using the `where` clause.\r\n\r\n```ruby\r\nmodel.errors.where(:name, :foo, bar: 3).first\r\n```\r\n\r\n`delete`, `add`, `added?`, `where` all share the same method signature (attribute, type, options). So we are able to delete specific errors now:\r\n\r\n```ruby\r\nmodel.errors.delete(:name, :too_powerful, level: 9000)\r\n```\r\n\r\n#### Testing is more precise and flexible\r\n\r\nWe can now test if “foo” error exists, regardless of its options hash.\r\n\r\n```ruby\r\nmodel.errors.add(:name, :too_powerful, level: 9000)\r\n\r\nmodel.errors.added?(:name, :too_powerful, level: 9000) # returns true\r\nmodel.errors.added?(:name, :too_powerful) # will be false in the past, but be true now.\r\n```\r\n\r\nIn the past, added? works by re-render the message and compare it against current message. Therefore if level is not provided, it will return false. In the PR, `added?` only compare Error's attributes against what's provided, so it can be more general or more specific depending on the needs.\r\n\r\n#### Get message of corresponding details of one particular error\r\n\r\nIf you saw that name attribute has two `foo_error` and one `bar_error`, e.g.:\r\n\r\n```ruby\r\n# model.errors.details\r\n{:name=>[{error: :foo_error, count: 1}, {error: :bar_error}, {error: :foo_error, count: 3}]}\r\n```\r\n\r\nHow do you back track the message on the third particular error? With the current implementation, we have to resort to using array indexes:\r\n\r\n```ruby\r\nmodel.errors.messages[:name][2]\r\n```\r\n\r\nOr we can call `generate_message` to recreate a message from the details, but that's also tedious.\r\n\r\nWith OO, we won't have this problem. Error is represented as an object, message and details are its attributes, so accessing those are straightforward:\r\n\r\n```ruby\r\ne = model.errors.where(:name, :foo_error).last\r\ne.full_message\r\ne.options # similar to details, where meta informations such as `:count` is stored.\r\n```\r\n\r\n#### Lazily evaluating message for internationalization\r\n\r\n[@morgoth](https://github.com/morgoth) mentioned this issue that when you're adding error, it's translated right away.\r\n\r\n```ruby\r\n# actual:\r\nI18n.with_locale(:pl) { user.error.full_messages } # => outputs EN errors always\r\n\r\n# expecting:\r\nI18n.with_locale(:pl) { user.error.full_messages } # => outputs PL errors\r\nI18n.with_locale(:pt) { user.error.full_messages } # => outputs PT errors\r\n```\r\n\r\nThis PR addresses this by lazily evaluating messages only when `message` is called.\r\n\r\n#### Opens possibility to advanced modding\r\n\r\nOnce errors are objects, it’s easy to add functionality on top of them. We can have custom methods to disable global attribute prefix on error’s full messages.\r\n\r\n### List of API changes\r\n\r\n`[]`, `as_json`, `blank?`, `clear`, `count`, `empty?`\r\nunchanged\r\n\r\n`add`\r\nunchanged\r\n\r\n`added?`\r\nmostly unchanged, for the one change see \"Testing is more precise and flexible\"\r\n\r\n`delete`\r\nextended, so we can give more specific condition such as error type or options.\r\n\r\n`each`\r\nNow enumerable of the Error array\r\n\r\n`full_message`\r\nremoved as it is no longer needed.\r\nunchanged ~~Full message is generated in Error.~~\r\n\r\n`full_messages`, `full_messages_for`\r\nunchanged\r\n\r\n`generate_message`\r\nunchanged ~~Moved to Error as message is generated there.~~\r\n\r\n`has_key?` `key?`, `keys`\r\nunchanged ~~Removed as I thought this is no longer a hash.~~\r\n\r\n`include?`, `size`, `to_hash`, `to_xml`, `to_a`\r\nunchanged\r\n\r\n`values` \r\nunchanged ~~removed as it has little value. (how do people use an array of partial message which are without attribute?)~~\r\n\r\n`messages`, `details`\r\nunchanged ~~removed as they are now part of Error object.~~\r\n\r\n### Some questions I have\r\n\r\nI am not sure what's the policy for marshal across versions. `marshal_dump` and `marshal_load` are implemented, but do they have to support marshaling across Rails versions?\r\n\r\nCan we deprecate `to_xml`? I bet is rarely used, and can exists as a gem.", "labels": [], "number": 32313, "updated_at": "2018-03-22 17:15:16", "user": 366910, "closed_at": "None", "id": 307117788, "title": "Model error as object", "url": "https://api.github.com/repos/rails/rails/issues/32313", "created_at": "2018-03-21 04:32:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374913463", "text": "@lulalala is there a reason why you can't emulate the hash-based API?", "created_at": "2018-03-21 11:58:44", "user": 6321, "id": 374913463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374917551", "text": "@pixeltrix for the hash like APIs, my thoughts are:\r\n\r\n1. For enumerable methods such as `each`, I choose to forward them to the error array. Keeping it to enumerate as hash seems to defeat the purpose.\r\n2. For `[]` and `to_hash`, they are emulated.\r\n3. For `values`, I removed it. I feel it was there just so `errors` feels like a hash. It is not useful because having an array of partial error message without knowing each message's respective attribute is useless.", "created_at": "2018-03-21 12:17:06", "user": 366910, "id": 374917551}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375119000", "text": "Everything that was removed needs to be deprecated first. We don't make breaking changes without deprecation, even in major versions.\r\n\r\n> marshal_dump and marshal_load are implemented, but do they have to support marshaling across Rails versions?\r\n\r\nYes, we try very hard to make possible that an old Rails version can read data from the new version and also the opposite. This make possible for applications to slowly rollout new versions to production.", "created_at": "2018-03-21 22:38:33", "user": 47848, "id": 375119000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375151383", "text": "> Everything that was removed needs to be deprecated first. We don't make breaking changes without deprecation, even in major versions.\r\n\r\nCool. I'll add those back then. How about semantic change such as `each`?\r\n\r\n> Yes, we try very hard to make possible that an old Rails version can read data from the new version and also the opposite. This make possible for applications to slowly rollout new versions to production.\r\n\r\nGot it, but I still have a question. When `marshal_load` was added (SHA b3dfd7d16cc37dcaf4298fe42e69a56ab3c6b00e), I don't see it tried to accommodate Rails 3 or 4, or am I wrong?", "created_at": "2018-03-22 01:45:47", "user": 366910, "id": 375151383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375362774", "text": "> Got it, but I still have a question. When marshal_load was added (SHA b3dfd7d), I don't see it tried to accommodate Rails 3 or 4, or am I wrong?\r\n\r\nUsually we only think about backward compatibility between two close release. In that case 5.1 and 5.2. Right now it would be 6.0 and 5.2", "created_at": "2018-03-22 16:08:36", "user": 47848, "id": 375362774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375363008", "text": "> How about semantic change such as each?\r\n\r\nCan we introduce a new method with the new semantic and keep the old method with the previous semantic but with deprecation?", "created_at": "2018-03-22 16:09:20", "user": 47848, "id": 375363008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375385960", "text": "> Can we introduce a new method with the new semantic and keep the old method with the previous semantic but with deprecation?\r\n\r\nI realized there is a better solution. I check arity of the block passed to `each`. If arity is 1, behave the new way. We can put deprecation notice when the old way is triggered. Thoughts?\r\nhttps://github.com/rails/rails/pull/32313/files#diff-fdcf8b65b5fb954372c6fe1ddf284c78R196", "created_at": "2018-03-22 17:14:10", "user": 366910, "id": 375385960}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n\r\nRouting specs on a rails app are failing after upgrade to rails 5.2.0.rc2\r\n\r\n```\r\n  # bundle exec rspec \r\n  1) GroupsController routing routes to #index\r\n     Failure/Error: expect(:get => \"/groups\").to route_to(\"groups#index\")\r\n     \r\n     NoMethodError:\r\n       undefined method `recognize_path_with_request' for #<Array:0x00007fe6a7368590>\r\n     # ./spec/routing/groups_routing_spec.rb:7:in `block (3 levels) in <top (required)>'\r\n```\r\n\r\ncode (by rails generate)\r\n```\r\n    it \"routes to #index\" do\r\n      expect(:get => \"/groups\").to route_to(\"groups#index\")\r\n    end\r\n```\r\n\r\nI am not sure this is the issue with rspec or rspec-rails but error seems to be come from rails 5.2.0.rc2.\r\n\r\n### Expected behavior\r\nNo error\r\n\r\n### Actual behavior\r\nNoMethodError:\r\n       undefined method `recognize_path_with_request' for #<Array:\r\n\r\n### System configuration\r\n**Rails version**:\r\nRails 5.2.0.rc2\r\n\r\n**Ruby version**:\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n", "labels": ["actionpack", "routing"], "number": 32312, "updated_at": "2018-03-21 14:33:24", "user": 1001175, "closed_at": "None", "id": 307112351, "title": "undefined method `recognize_path_with_request' for #<Array:0x...>", "url": "https://api.github.com/repos/rails/rails/issues/32312", "created_at": "2018-03-21 03:49:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374906499", "text": "@S-YOU I can't reproduce this in a test script - can you? Here's a script you can modify that currently passes:\r\n\r\n``` ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n  gem \"rails\", \"5.2.0.rc2\"\r\n  gem \"rspec-rails\"\r\nend\r\n\r\nrequire \"rack/test\"\r\nrequire \"action_controller/railtie\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.root = __dir__\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  secrets.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new(\"/dev/null\")\r\n  Rails.logger  = config.logger\r\n\r\n  routes.draw do\r\n    resources :groups\r\n  end\r\nend\r\n\r\nclass ApplicationController < ActionController::Base\r\n  include Rails.application.routes.url_helpers\r\nend\r\n\r\nclass GroupsController < ApplicationController\r\n  def index\r\n    render plain: \"groups#index\"\r\n  end\r\nend\r\n\r\nrequire \"rspec/rails\"\r\nrequire \"rspec/autorun\"\r\n\r\nRSpec.describe \"/groups\", type: :routing do\r\n  it \"routes to #index\" do\r\n    expect(get: \"/groups\").to route_to(\"groups#index\")\r\n  end\r\nend\r\n```", "created_at": "2018-03-21 11:27:42", "user": 6321, "id": 374906499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374906641", "text": "Also was this an upgrade from RC1 => RC2 or from an earlier Rails version.", "created_at": "2018-03-21 11:28:22", "user": 6321, "id": 374906641}], "assignees": [6321, 6321], "state": "open", "is-pull-request": false}
{"reactions": {"+1": [9349899]}, "text": "### Steps to reproduce\r\n\r\nModel with with a method containing transaction isolation level specified `transaction(:isolation_level => :repeatable_read)`\r\n\r\n```\r\nclass SomeModel < ApplicationRecord\r\n  ...\r\n  def process  \r\n    transaction(:isolation_level => :repeatable_read) do\r\n      lock!\r\n      raise \"Cannot process results when the record has been locked\" if locked_at\r\n\r\n      yield 0, \"Clearing old records\" if block_given?\r\n\r\n      do_somethings\r\n    end\r\n  end\r\n...\r\nend\r\n```\r\n\r\nTest run which calls transaction containing the isolation level\r\n\r\n```\r\nit \"test a thing\" do\r\n  @some_model.update(...)\r\n  @some_model.process\r\n\r\n  expect(no_change)\r\nend\r\n```\r\n\r\n### Expected behavior\r\nWhen tests (rspec) are run they should pass or fail, and not throw errors.\r\n\r\n### Actual behavior\r\n`ActiveRecord::TransactionIsolationError: cannot set transaction isolation in a nested transaction`\r\n\r\n### Additional information\r\nSomeone posted this issue in rspec but it got closed as a probable rails issue\r\nhttps://github.com/rspec/rspec-rails/issues/1855\r\n\r\n### System configuration\r\n**Rails version**: 5.0\r\n\r\n**Ruby version**: 2.4\r\n\r\n### Possible Fix\r\nA colleague of mine has written his own version of `transaction isolation level` which works but we'd rather use rails \"out of the box\" if this gets resolved.\r\n\r\nI'm not smart enough to know the difference, here's the repo link for his version: https://github.com/willbryant/transaction_isolation_level", "labels": [], "number": 32311, "updated_at": "2018-03-21 11:35:03", "user": 8228988, "closed_at": "2018-03-21 11:35:02", "id": 307093153, "title": "Specifying transaction isolation level not working when transactional tests turned on", "url": "https://api.github.com/repos/rails/rails/issues/32311", "created_at": "2018-03-21 01:19:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374908319", "text": "This is a limitation of SQL - as the error message says, you can't set the isolation level in a nested transaction and when transactional tests are turned on then each test (or example for RSpec) is run inside an outer transaction. Either you can disable transactional tests for the example you're writing or use something like the [database_cleaner][1] gem to give you more flexibility in how you clean your database for your specs.\r\n\r\n[1]: https://github.com/DatabaseCleaner/database_cleaner", "created_at": "2018-03-21 11:35:02", "user": 6321, "id": 374908319}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [885841, 8122246, 437470, 4056320]}, "text": "Resolves #31636 following release of mysql2 0.5.0 today.", "labels": [], "number": 32310, "updated_at": "2018-03-22 05:24:45", "user": 39406, "closed_at": "2018-03-21 17:58:58", "id": 307090623, "title": "Support mysql2 0.4.x and 0.5.x", "url": "https://api.github.com/repos/rails/rails/issues/32310", "created_at": "2018-03-21 01:01:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374807476", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-21 01:01:44", "user": 7468109, "id": 374807476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374817180", "text": "You probably want to change this too: https://github.com/rails/rails/blob/89bcca59e91fa9da941de890012872e8288e77b0/railties/lib/rails/generators/app_base.rb#L302\r\n\r\nI guess this diff tells me you at least read my comment, so that's nice 🤷‍♂️ ", "created_at": "2018-03-21 02:20:36", "user": 1034, "id": 374817180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374818885", "text": "Thanks I will add that change, too!\n", "created_at": "2018-03-21 02:35:36", "user": 39406, "id": 374818885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375067337", "text": "Should this be backported to 5-2-stable? Otherwise mysql2 0.5.0 will be only usable on Rails 6.0", "created_at": "2018-03-21 19:28:23", "user": 8122246, "id": 375067337}, {"reactions": {"heart": [8122246]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375067958", "text": "Yeah, I will do that.", "created_at": "2018-03-21 19:30:33", "user": 12642, "id": 375067958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375070608", "text": "And 5-1-stable too", "created_at": "2018-03-21 19:39:54", "user": 47848, "id": 375070608}, {"reactions": {"+1": [199]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375075676", "text": "Backported in 6965f2afeda01f7afe8baffe3e95d52e829259be and 6a11d833ec64ef6662fa17286e521b1c1ba749fc.", "created_at": "2018-03-21 19:57:42", "user": 12642, "id": 375075676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375178643", "text": "@kamipo doesn't 6965f2a need to be in 5-2-stable? It's currently in 5-2-0 only (@rafaelfranca what's the policy here - backport to 5-2-stable and then cherry-pick what we want in 5-2-0 or backport to 5-2-0 and then that'll be merged into 5-2-stable at some point?)", "created_at": "2018-03-22 04:47:36", "user": 6321, "id": 375178643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375182490", "text": "5-2-0 will merge to 5-2-stable on release, so yeah seems fine to backport straight to there if we know it's post-rc-worthy", "created_at": "2018-03-22 05:15:33", "user": 1034, "id": 375182490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375183964", "text": "Yeah, I supposed that 5-2-0 will be merged to 5-2-stable since db7edd81062648281d1e50c8ff9ebfafac5a9c3d is missing in 5-2-stable yet, and I needed the commit to add CHANGELOG entry 3eadd23a8a59e4c88190c2b2c4443b85b11d3724.", "created_at": "2018-03-22 05:24:45", "user": 12642, "id": 375183964}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\nbranch, where i recieve this problem, not yet merged, dont now how exacly to reproduce...\r\nmaybe gemfile will be helpfull?\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.1.5\r\n\r\n**Ruby version**: ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-linux]\r\n\r\nrecently I started getting weird favicon requests from all the paths of my site. no matter where I send, rails or browser makes favicon requests, such as:\r\nStarted GET \"/registry_forms/favicon.ico \":: 1 2018-03-21 00: 36: 13 +0300. \r\nregistry_form - my model  name\r\nFull trace:\r\n```\r\nStarted GET \"/registry_forms/favicon.ico\" for ::1 at 2018-03-21 00:45:13 +0300\r\n  \r\nAbstractController::ActionNotFound (The action 'show' could not be found for RegistryFormsController):\r\n  \r\nactionpack (5.1.5) lib/abstract_controller/base.rb:119:in `process'\r\nactionview (5.1.5) lib/action_view/rendering.rb:30:in `process'\r\nactionpack (5.1.5) lib/action_controller/metal.rb:189:in `dispatch'\r\nactionpack (5.1.5) lib/action_controller/metal.rb:253:in `dispatch'\r\nactionpack (5.1.5) lib/action_dispatch/routing/route_set.rb:49:in `dispatch'\r\nactionpack (5.1.5) lib/action_dispatch/routing/route_set.rb:31:in `serve'\r\nactionpack (5.1.5) lib/action_dispatch/journey/router.rb:50:in `block in serve'\r\nactionpack (5.1.5) lib/action_dispatch/journey/router.rb:33:in `each'\r\nactionpack (5.1.5) lib/action_dispatch/journey/router.rb:33:in `serve'\r\nactionpack (5.1.5) lib/action_dispatch/routing/route_set.rb:844:in `call'\r\nremotipart (1.3.1) lib/remotipart/middleware.rb:32:in `call'\r\nwarden (1.2.7) lib/warden/manager.rb:36:in `block in call'\r\nwarden (1.2.7) lib/warden/manager.rb:35:in `catch'\r\nwarden (1.2.7) lib/warden/manager.rb:35:in `call'\r\nrack (2.0.4) lib/rack/etag.rb:25:in `call'\r\nrack (2.0.4) lib/rack/conditional_get.rb:25:in `call'\r\nrack (2.0.4) lib/rack/head.rb:12:in `call'\r\nrack (2.0.4) lib/rack/session/abstract/id.rb:232:in `context'\r\nrack (2.0.4) lib/rack/session/abstract/id.rb:226:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/cookies.rb:613:in `call'\r\nactiverecord (5.1.5) lib/active_record/migration.rb:556:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/callbacks.rb:26:in `block in call'\r\nactivesupport (5.1.5) lib/active_support/callbacks.rb:97:in `run_callbacks'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/callbacks.rb:24:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:135:in `call_app'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:28:in `block in call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `catch'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:36:in `call_app'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:24:in `block in call'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:26:in `tagged'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:69:in `tagged'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:24:in `call'\r\nsprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/request_id.rb:25:in `call'\r\nrack (2.0.4) lib/rack/method_override.rb:22:in `call'\r\nrack (2.0.4) lib/rack/runtime.rb:22:in `call'\r\nactivesupport (5.1.5) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/static.rb:125:in `call'\r\nrack (2.0.4) lib/rack/sendfile.rb:111:in `call'\r\nrailties (5.1.5) lib/rails/engine.rb:522:in `call'\r\npuma (3.11.2) lib/puma/configuration.rb:225:in `call'\r\npuma (3.11.2) lib/puma/server.rb:624:in `handle_request'\r\npuma (3.11.2) lib/puma/server.rb:438:in `process_client'\r\npuma (3.11.2) lib/puma/server.rb:302:in `block in run'\r\npuma (3.11.2) lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\n```\r\nas you can see, it asked about action 'show'. out of interest, i add this actionn to controller and things changed to:\r\n```\r\nStarted GET \"/registry_forms/favicon.ico\" for ::1 at 2018-03-21 00:47:13 +0300\r\n   (22.9ms)  SELECT \"schema_migrations\".\"version\" FROM \"schema_migrations\" ORDER BY \"schema_migrations\".\"version\" ASC\r\nProcessing by RegistryFormsController#show as \r\n  Parameters: {\"id\"=>\"favicon\"}\r\nNo template found for RegistryFormsController#show, rendering head :no_content\r\nCompleted 204 No Content in 116ms (ActiveRecord: 0.0ms)\r\n```\r\nthis is repeated every 1 minute... help\r\n\r\nwhen i log in, requests changed to: \r\n\r\n```\r\nActionController::RoutingError (No route matches [GET] \"/users/favicon.ico\"):\r\nCompleted 204 No Content in 126ms (ActiveRecord: 0.0ms)\r\n\r\n\r\n  \r\nactionpack (5.1.5) lib/action_dispatch/middleware/debug_exceptions.rb:63:in `call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:135:in `call_app'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:28:in `block in call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `catch'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:36:in `call_app'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:24:in `block in call'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:26:in `tagged'\r\nactivesupport (5.1.5) lib/active_support/tagged_logging.rb:69:in `tagged'\r\nrailties (5.1.5) lib/rails/rack/logger.rb:24:in `call'\r\nsprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/request_id.rb:25:in `call'\r\nrack (2.0.4) lib/rack/method_override.rb:22:in `call'\r\nrack (2.0.4) lib/rack/runtime.rb:22:in `call'\r\nactivesupport (5.1.5) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.5) lib/action_dispatch/middleware/static.rb:125:in `call'\r\nrack (2.0.4) lib/rack/sendfile.rb:111:in `call'\r\nrailties (5.1.5) lib/rails/engine.rb:522:in `call'\r\npuma (3.11.2) lib/puma/configuration.rb:225:in `call'\r\npuma (3.11.2) lib/puma/server.rb:624:in `handle_request'\r\npuma (3.11.2) lib/puma/server.rb:438:in `process_client'\r\npuma (3.11.2) lib/puma/server.rb:302:in `block in run'\r\npuma (3.11.2) lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\n```\r\n", "labels": [], "number": 32309, "updated_at": "2018-03-20 22:36:19", "user": 20141071, "closed_at": "2018-03-20 22:31:26", "id": 307053199, "title": "favicon requests like Started GET \"/my_model_name/favicon.ico\"", "url": "https://api.github.com/repos/rails/rails/issues/32309", "created_at": "2018-03-20 21:55:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374772367", "text": " Can you please provide a sample application that reproduces the error?", "created_at": "2018-03-20 22:02:08", "user": 47848, "id": 374772367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374774082", "text": "actually, all of my applications now provides this requests...\r\n[this is one of them](https://github.com/slim1979/gse)", "created_at": "2018-03-20 22:09:03", "user": 20141071, "id": 374774082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374779631", "text": "It is the browser that does that request. Every browser does it. You can add a favico in your application to tell the browser where to find it.", "created_at": "2018-03-20 22:31:26", "user": 47848, "id": 374779631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374780786", "text": "@rafaelfranca but my app have 2 of them - in assets/images and in public. and, must say, few day ago i didnt see any such requests, like this... do you think, your answer solve my problem?", "created_at": "2018-03-20 22:36:19", "user": 20141071, "id": 374780786}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Sorry if this is a normal behavior for a Rails release but I did not expect it, so I am opening this issue to notify anyone in case this is a mistake. Feel free to close if this is in anyway a misunderstanding on my side.\r\n\r\n### Expected behavior\r\n\r\nBranch `5-2-stable` should contain the last commit of 5.2.0.rc2 : db7edd81062648281d1e50c8ff9ebfafac5a9c3d\r\n\r\n### Actual behavior\r\n\r\nBranch `5-2-stable` does not contain the version 5.2.0.rc2 but instead, there is a new branch `5-2-0` containing the commit.\r\n\r\n---\r\n\r\nThanks for the great work and congratulations on this 5.2.0.rc2 release 🙂 ", "labels": [], "number": 32308, "updated_at": "2018-03-20 21:39:02", "user": 65271, "closed_at": "2018-03-20 21:35:42", "id": 307045719, "title": "Branch 5-2-stable is missing 5.2.0.rc2", "url": "https://api.github.com/repos/rails/rails/issues/32308", "created_at": "2018-03-20 21:29:34", "comments": [{"reactions": {"+1": [65271]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374765095", "text": "Yes, that is the correct behavior. 5-2-stable will be 5.2.1, 5-2-0 will be 5.2.0", "created_at": "2018-03-20 21:35:42", "user": 47848, "id": 374765095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374766017", "text": "Thank you for taking the time to explain 👍 ", "created_at": "2018-03-20 21:39:02", "user": 65271, "id": 374766017}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\n\"my string #{nil}\" results in an additional '' string allocation, I'm\r\nguessing because the nil has to be converted to a string.\r\n\r\n\"my string #{'[]' if multiple}\" results in \"my string #{nil}\" if\r\nmultiple is false. Doing \"my string #{''}\" does not result in an extra\r\nstring allocation.\r\n\r\nThis code mainly seems to be executed during the first page load of an\r\napp. For my app, this saved 3698 allocations of \"\" - around 150 KB of\r\nsavings.\r\n\r\nSee https://github.com/rails/rails/pull/32302\r\n\r\n### Other Information\r\n\r\nBenchmarking results:\r\n```\r\n\r\nresults:\r\n```ruby\r\nmaster_version\r\n{:FREE=>-1981, :T_STRING=>2052}\r\nmaster_version with arg\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nfast_version\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nfast_version with arg\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nWarming up --------------------------------------\r\n      master_version   138.851k i/100ms\r\nmaster_version with arg\r\n                       164.029k i/100ms\r\n        fast_version   165.737k i/100ms\r\nfast_version with arg\r\n                       167.016k i/100ms\r\nCalculating -------------------------------------\r\n      master_version      2.464M (±14.7%) i/s -     11.941M in   5.023307s\r\nmaster_version with arg\r\n                          3.754M (± 8.5%) i/s -     18.699M in   5.021354s\r\n        fast_version      3.449M (±11.7%) i/s -     17.071M in   5.033312s\r\nfast_version with arg\r\n                          3.636M (± 6.9%) i/s -     18.205M in   5.034792s\r\n\r\nComparison:\r\nmaster_version with arg:  3753896.1 i/s\r\nfast_version with arg:  3636094.5 i/s - same-ish: difference falls within error\r\n        fast_version:  3448766.2 i/s - same-ish: difference falls within error\r\n      master_version:  2463857.3 i/s - 1.52x  slower\r\n```\r\n\r\nBenchmarking code:\r\n```ruby\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update\r\n                your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  gem \"benchmark-ips\"\r\n  gem \"rails\"\r\nend\r\n\r\ndef allocate_count\r\n  GC.disable\r\n  before = ObjectSpace.count_objects\r\n  yield\r\n  after = ObjectSpace.count_objects\r\n  after.each { |k,v| after[k] = v - before[k] }\r\n  after[:T_HASH] -= 1 # probe effect - we created the before hash.\r\n  GC.enable\r\n  result = after.reject { |k,v| v == 0 }\r\n  GC.start\r\n  result\r\nend\r\n\r\n@html_options = {}\r\n\r\ndef master_version(multiple=nil)\r\n  \"hi#{\"[]\" if multiple}\"\r\nend\r\n\r\ndef fast_version(multiple=nil)\r\n  str = multiple ? \"[]\" : ''\r\n  \"hi#{str}\"\r\nend\r\n\r\ndef test\r\n  puts \"master_version\"\r\n  puts allocate_count { 1000.times { master_version } }\r\n  puts \"master_version with arg\"\r\n  puts allocate_count { 1000.times { master_version(' there') } }\r\n  puts \"fast_version\"\r\n  puts allocate_count { 1000.times { fast_version } }\r\n  puts \"fast_version with arg\"\r\n  puts allocate_count { 1000.times { fast_version(' there') } }\r\n\r\n  Benchmark.ips do |x|\r\n    x.report(\"master_version\") { master_version }\r\n    x.report(\"master_version with arg\") { master_version(' there') }\r\n    x.report(\"fast_version\")     { fast_version }\r\n    x.report(\"fast_version with arg\")     { fast_version(' there') }\r\n    x.compare!\r\n  end\r\nend\r\n\r\ntest\r\n```", "labels": [], "number": 32307, "updated_at": "2018-03-21 02:06:46", "user": 1635820, "closed_at": "2018-03-21 00:38:57", "id": 306887678, "title": "Interpolate '' instead of nil when multiple is false. Part two!", "url": "https://api.github.com/repos/rails/rails/issues/32307", "created_at": "2018-03-20 14:23:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374804189", "text": "As you noted, this code is not part of the regular request path, so I don't think it's worth bothering with here (or anywhere else similar, that doesn't expect multiple calls per request).\r\n\r\nIt does seem worth looking at upstream, though: have you reported this behaviour to MRI?", "created_at": "2018-03-21 00:38:57", "user": 1034, "id": 374804189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374806362", "text": "I feel like just because it's not part of every rails request doesn't mean it can't be improved. If that was the case then why is bootsnap being added by default in 5.2?\r\n\r\nIf the code after the change is confusing I'm definitely open to tweaking it. \r\n\r\nCan you elaborate on what behavior you're suggesting I report to MRI?\r\n\r\nThanks for the feedback.", "created_at": "2018-03-21 00:53:47", "user": 1635820, "id": 374806362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374815656", "text": "> why is bootsnap being added\r\n\r\nBootsnap makes a measurable difference to app boot time; a literal microbenchmark, which shows allocating two objects is 1.015µs slower than allocating one, is not that.\r\n\r\nWe allocate quite a few objects, especially during boot. Eliminating hotspots is always worthwhile, but chasing individual allocations is not.\r\n\r\n> For my app, this saved 3698 allocations of \"\" - around 150 KB of savings\r\n\r\nIs 3.75ms a notable portion of your application's boot time, or first request time? A real-world demonstration that this actually makes a difference might be more compelling.\r\n\r\nThis is not \"150 KB of savings\" -- that suggests it reduces the total memory requirements of a running application; it's 150 KB of objects the GC doesn't need to allocate and then almost immediately discard. That takes _non-zero_ effort, but it's something the GC is pretty good at.\r\n\r\n> Can you elaborate on what behavior you're suggesting I report to MRI?\r\n\r\nThe fact that `x = nil; \".#{x}.\"` allocates two objects when `NilClass#to_s` has not been redefined.", "created_at": "2018-03-21 02:06:46", "user": 1034, "id": 374815656}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add a prefix option to ActiveRecord::Store.store_accessor and\r\nActiveRecord::Store.store. This option allows stores to have identical keys\r\nwith different accessors.\r\n\r\n### Summary\r\n\r\nI often bump into problems at work when using ActiveRecord::Store because of name collision of \r\naccessors in a store. Consider this snippet of code:\r\n```ruby\r\nclass RequestOff < ApplicationRecord\r\n  store :from, accessors: [:date, :period], coder: JSON\r\n  store :to, accessors: [:date, :period], coder: JSON\r\nend\r\n```\r\nThe accessors above will not work because there are two accessors with the same name. To solve the \r\nproblems I either have to change the keys in the store or write my own accessors. The new prefix option\r\nwill fix the problem above by adding a unique prefix to the accessor without changing the underlying key.\r\nExample:\r\n\r\n```ruby\r\nclass RequestOff < ApplicationRecord\r\n  store :from, accessors: [:date, :period], coder: JSON, prefix: true\r\n  store :to, accessors: [:date, :period], coder: JSON, prefix: :to\r\nend\r\n\r\nro = RequestOff.new\r\nro.from_date = \"2018-11-1\"\r\n```\r\n", "labels": [], "number": 32306, "updated_at": "2018-03-22 04:30:18", "user": 17341000, "closed_at": "None", "id": 306742149, "title": "Add custom prefix to ActiveRecord::Store accessors", "url": "https://api.github.com/repos/rails/rails/issues/32306", "created_at": "2018-03-20 06:20:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374812004", "text": "Fixed", "created_at": "2018-03-21 01:35:21", "user": 17341000, "id": 374812004}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis gets called many times for each virtual_path, creating a new string\r\neach time that `translate` is called. We can memoize this so that it\r\nonly happens once per virtual_path instead.", "labels": [], "number": 32305, "updated_at": "2018-03-20 16:08:31", "user": 1635820, "closed_at": "2018-03-20 15:42:32", "id": 306725667, "title": "Memoize the result of gsubbing @virtual_path", "url": "https://api.github.com/repos/rails/rails/issues/32305", "created_at": "2018-03-20 04:28:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374470692", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-20 04:28:57", "user": 7468109, "id": 374470692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374589359", "text": "@oniofchaos do you have any performance stats to back this change up? There's a lot of work going on to implement the cache and I'm unsure how much you're actually gaining.", "created_at": "2018-03-20 13:03:23", "user": 6321, "id": 374589359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374596858", "text": "In my local testing, I found that this code path got executed twice for each call to `I18n.t` in my view. This PR reduces the `gsub` calls from once per call to once per namespace. \r\n\r\nSome raw benchmarking stats:\r\n```\r\nmaster_version\r\n{:FREE=>-4568, :T_STRING=>2053, :T_MATCH=>2000, :T_IMEMO=>1000}\r\nfast_version\r\n{:FREE=>-1008, :T_STRING=>1003, :T_HASH=>1, :T_MATCH=>2, :T_IMEMO=>1}\r\nWarming up --------------------------------------\r\n      master_version    24.453k i/100ms\r\n        fast_version    97.766k i/100ms\r\nCalculating -------------------------------------\r\n      master_version    283.462k (± 6.3%) i/s -      1.418M in   5.022541s\r\n        fast_version      1.413M (±10.6%) i/s -      7.039M in   5.048207s\r\n\r\nComparison:\r\n        fast_version:  1412516.5 i/s\r\n      master_version:   283462.1 i/s - 4.98x  slower\r\n```\r\n\r\nCode used to generate\r\n```ruby\r\n# frozen_string_literal: true\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update\r\n                your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  gem \"benchmark-ips\"\r\n  gem \"rails\"\r\nend\r\n\r\ndef allocate_count\r\n  GC.disable\r\n  before = ObjectSpace.count_objects\r\n  yield\r\n  after = ObjectSpace.count_objects\r\n  after.each { |k,v| after[k] = v - before[k] }\r\n  after[:T_HASH] -= 1 # probe effect - we created the before hash.\r\n  GC.enable\r\n  result = after.reject { |k,v| v == 0 }\r\n  GC.start\r\n  result\r\nend\r\n\r\ndef master_version(virtual_path, key)\r\n  \"#{virtual_path.gsub(%r{/_?}, \".\")}#{key}\"\r\nend\r\n\r\ndef fast_version(virtual_path, key)\r\n  @_cache ||= {}\r\n  @_cache[virtual_path] ||= \"#{virtual_path.gsub(%r{/_?}, \".\")}#{key}\"\r\n  \"#{@_cache[virtual_path]}#{key}\"\r\nend\r\n\r\ndef test\r\n  puts \"master_version\"\r\n  puts allocate_count { 1000.times { master_version('test/namespace/index', 'cat') } }\r\n  puts \"fast_version\"\r\n  puts allocate_count { 1000.times { fast_version('test/namespace/index', 'cat') } }\r\n\r\n  Benchmark.ips do |x|\r\n    x.report(\"master_version\")  { master_version('test/namespace/index', 'cat') }\r\n    x.report(\"fast_version\")    { fast_version('test/namespace/index', 'cat') }\r\n    x.compare!\r\n  end\r\nend\r\n\r\ntest\r\n```", "created_at": "2018-03-20 13:27:26", "user": 1635820, "id": 374596858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374605421", "text": "Numbers seem good then - my only concern is that `@_scope_cache` is a fairly generic name and might be clobbered (or clobber) an instance variable from an application's helpers. Maybe use `@_i18n_scope` instead?", "created_at": "2018-03-20 13:53:01", "user": 6321, "id": 374605421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374610720", "text": "Yeah good point about the generic name. What do you think about `@_ scope_key_by_partial_cache`? Longer name but even less likely for clobbering.", "created_at": "2018-03-20 14:08:17", "user": 1635820, "id": 374610720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374613750", "text": "@oniofchaos yes, that's fine.", "created_at": "2018-03-20 14:17:02", "user": 6321, "id": 374613750}, {"reactions": {"+1": [6321]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374617129", "text": "Fixed.", "created_at": "2018-03-20 14:26:29", "user": 1635820, "id": 374617129}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis saves up to 5 string allocations per attribute for each call of\r\nthis method: removed 7 string allocations but added 2. \r\n\r\nOn the page in my app I was testing this on, it cut down the string allocations related to the method names by half.", "labels": [], "number": 32304, "updated_at": "2018-03-21 10:30:09", "user": 1635820, "closed_at": "None", "id": 306712261, "title": "Save method names in a variable to reduce string allocations", "url": "https://api.github.com/repos/rails/rails/issues/32304", "created_at": "2018-03-20 03:04:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374478341", "text": "@oniofchaos this is fine but I'm interested in the allocation reduction you're seeing - this is on a first request in development right? Not on the second request or in production? The `class_attribute` method should only be called when we're defining code, e.g. reloading in development or eager loading in production. If we're somehow calling it on every request then we probably need to look to eliminate that if possible.", "created_at": "2018-03-20 05:12:16", "user": 6321, "id": 374478341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374487373", "text": "Yeah I'm reluctant to pay the legibility reduction for a small number of allocations that only happen during boot. \r\n\r\nSee also https://github.com/rails/rails/pull/32003", "created_at": "2018-03-20 06:12:15", "user": 1034, "id": 374487373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374590634", "text": "I'm running locally in production mode and seeing this on every request to my profilng page with `default_url_options`, `default_url_options=`, and `default_url_options?`\r\n\r\nHere is my `config/environments/production.rb`\r\n```ruby\r\n# frozen_string_literal: true\r\nRails.application.configure do\r\n  # Settings specified here will take precedence over those in config/application.rb.\r\n\r\n  # Code is not reloaded between requests.\r\n  config.cache_classes = true\r\n\r\n  # Eager load code on boot. This eager loads most of Rails and\r\n  # your application in memory, allowing both thread web servers\r\n  # and those relying on copy on write to perform better.\r\n  # Rake tasks automatically ignore this option for performance.\r\n  config.eager_load = true\r\n\r\n  # Full error reports are disabled and caching is turned on.\r\n  config.consider_all_requests_local       = false\r\n  config.action_controller.perform_caching = true\r\n\r\n  # Disable serving static files from the `/public` folder by default since\r\n  # Apache or NGINX already handles this.\r\n  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?\r\n\r\n  # Compress JavaScripts and CSS.\r\n  config.assets.js_compressor = Uglifier.new(mangle: false)\r\n  # config.assets.css_compressor = :sass\r\n\r\n  # Do not fallback to assets pipeline if a precompiled asset is missed.\r\n  config.assets.compile = false\r\n\r\n  # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb\r\n\r\n  # Enable serving of images, stylesheets, and JavaScripts from an asset server.\r\n  # config.action_controller.asset_host = 'http://assets.example.com'\r\n\r\n  # Specifies the header that your server uses for sending files.\r\n  # config.action_dispatch.x_sendfile_header = 'X-Sendfile' # for Apache\r\n  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX\r\n\r\n  # Mount Action Cable outside main process or domain\r\n  # config.action_cable.mount_path = nil\r\n  # config.action_cable.url = 'wss://example.com/cable'\r\n  # config.action_cable.allowed_request_origins = [ 'http://example.com', /http:\\/\\/example.*/ ]\r\n\r\n  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\r\n  config.force_ssl = ENV['DISABLE_SSL'] == 'true' ? false : true\r\n\r\n  # Use the lowest log level to ensure availability of diagnostic information\r\n  # when problems arise. Set to :debug to see everything in the log.\r\n  config.log_level = :warn\r\n\r\n  # Prepend all log lines with the following tags.\r\n  config.log_tags = [ :request_id ]\r\n\r\n  # Use a different cache store in production.\r\n  config.cache_store = :redis_store, ENV['REDIS_URL'], { expires_in: 1.month, raise_errors: false }\r\n\r\n  # Use a real queuing backend for Active Job (and separate queues per environment)\r\n  # config.active_job.queue_adapter     = :resque\r\n  config.action_mailer.perform_caching = false\r\n\r\n  # Ignore bad email addresses and do not raise email delivery errors.\r\n  # Set this to true and configure the email server for immediate delivery to raise delivery errors.\r\n  # config.action_mailer.raise_delivery_errors = false\r\n  config.action_mailer.default_url_options = {\r\n    host: ENV['APPLICATION_HOST'], protocol: 'https'\r\n  }\r\n\r\n  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to\r\n  # the I18n.default_locale when a translation can not be found).\r\n  config.i18n.fallbacks = true\r\n\r\n  # Send deprecation notices to registered listeners.\r\n  config.active_support.deprecation = :notify\r\n\r\n  # Use default logging formatter so that PID and timestamp are not suppressed.\r\n  config.log_formatter = ::Logger::Formatter.new\r\n\r\n  # Use a different logger for distributed setups.\r\n  # require 'syslog/logger'\r\n  # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new 'app-name')\r\n\r\n  if ENV[\"RAILS_LOG_TO_STDOUT\"].present?\r\n    logger           = ActiveSupport::Logger.new(STDOUT)\r\n    logger.formatter = config.log_formatter\r\n    config.logger = ActiveSupport::TaggedLogging.new(logger)\r\n  end\r\n\r\n  # Do not dump schema after migrations.\r\n  config.active_record.dump_schema_after_migration = false\r\n\r\n  # Custom middleware in my app\r\n  config.middleware.use BrowserMiddleware\r\n  config.middleware.use LoggingMiddleware\r\n\r\n  # Configure helper for the tmp rout directory\r\n  config.x.tmp_directory = '/data/tmp'\r\nend\r\n```", "created_at": "2018-03-20 13:08:06", "user": 1635820, "id": 374590634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374591649", "text": "Before my change\r\n```ruby\r\n        42  \"default_url_options\"\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:101\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:103\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:104\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:132\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:136\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:98\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:99\r\n\r\n        18  \"default_url_options=\"\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:103\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:104\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:136\r\n\r\n        18  \"default_url_options?\"\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:132\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:98\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:99\r\n```\r\n\r\nafter my change\r\n```ruby\r\n\r\n        18  \"default_url_options\"\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:104\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:95\r\n         6  /Users/dillonwelch/Code/q-centrix/rails/activesupport/lib/active_support/core_ext/class/attribute.rb:96\r\n```", "created_at": "2018-03-20 13:11:21", "user": 1635820, "id": 374591649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374593334", "text": "@matthewd maybe because I'm looking at this too early in the morning but I'm not sure I understand the benefit here for the change in that PR. ", "created_at": "2018-03-20 13:17:02", "user": 1635820, "id": 374593334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374599659", "text": "@oniofchaos is that allocations per request?", "created_at": "2018-03-20 13:36:06", "user": 6321, "id": 374599659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374604001", "text": "Yes, that was on each request - I refreshed the page multiple times and it showed up each time.", "created_at": "2018-03-20 13:48:56", "user": 1635820, "id": 374604001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374607020", "text": "Are you calling `Rails.application.routes.url_helpers.my_url` by any chance? It looks like it's including `ActionDispatch::Routing::UrlFor` and executing this block of code:\r\n\r\n``` ruby\r\n      included do\r\n        unless method_defined?(:default_url_options)\r\n          # Including in a class uses an inheritable hash. Modules get a plain hash.\r\n          if respond_to?(:class_attribute)\r\n            class_attribute :default_url_options\r\n          else\r\n            mattr_writer :default_url_options\r\n          end\r\n\r\n          self.default_url_options = {}\r\n        end\r\n\r\n        include(*_url_for_modules) if respond_to?(:_url_for_modules)\r\n      end\r\n```\r\n\r\nIt used to be the case that `Rails.application.routes.url_helpers` was cached but now creates a new anonymous module on every call.\r\n", "created_at": "2018-03-20 13:57:29", "user": 6321, "id": 374607020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374632758", "text": "Not that I can tell", "created_at": "2018-03-20 15:07:27", "user": 1635820, "id": 374632758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374647193", "text": "@oniofchaos what's in the action/template that you're refreshing - anything engine related? Also what Rails version?", "created_at": "2018-03-20 15:45:30", "user": 6321, "id": 374647193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374656670", "text": "I have engines in my app but not on this view or controller. Rails 5.1.5", "created_at": "2018-03-20 16:09:42", "user": 1635820, "id": 374656670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374657489", "text": "Sorry for the spanish inquisition - are you linking to those engines in that page? e.g. `engine_name.my_path`", "created_at": "2018-03-20 16:11:48", "user": 6321, "id": 374657489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374752062", "text": "I found `include Rails.application.routes.url_helpers` in a class that's used on the page though to show/hide links to various services in the app, some of which are engines. It creates links to the root like so\r\n```ruby\r\n  def active_app_route_set\r\n    active_apps.map { |app| [app, send(\"#{app}_root_path\")] }\r\n  end\r\n```\r\nso it would potentially be calling the root path of an engine.\r\n\r\nP.S. Inquire away. If there's something funky going on either in Rails or in my app, I'm glad to help find out. \r\n![](https://vignette.wikia.nocookie.net/uncyclopedia/images/3/31/Spinquisition.jpg/revision/latest?cb=20060828224102)", "created_at": "2018-03-20 20:51:18", "user": 1635820, "id": 374752062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374892707", "text": "@oniofchaos I've made [this change][1] in 5-1-stable - can you see whether it fixes your issue?\r\n\r\n[1]: https://github.com/rails/rails/commit/8d0db23e31f65994f95aa98984d5e2e7ef47e932", "created_at": "2018-03-21 10:30:08", "user": 6321, "id": 374892707}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nFollowing along #31106, this PR fixes `after_create_commit` being called recursively when the underlying record was saved inside it.\r\n\r\nBefore these changes when the added test was executed, the callback would loop indefinitely, overflowing the stack and erroring it.\r\n\r\nThe fix is done by storing state for whether the current transaction was committed for creation or not, and avoiding further callbacks in subsequent calls.\r\n\r\n### Other Information\r\n\r\nFeedback is very appreciated as I'd like to find a better way to perform this without having to store an instance variable.\r\n\r\nFixes #31104", "labels": [], "number": 32303, "updated_at": "2018-03-20 12:50:45", "user": 347552, "closed_at": "2018-03-20 12:50:30", "id": 306711810, "title": "Fix save inside after_create_commit looping indefinitely", "url": "https://api.github.com/repos/rails/rails/issues/32303", "created_at": "2018-03-20 03:02:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374456772", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-20 03:02:40", "user": 7468109, "id": 374456772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374585637", "text": "The current state is really not ideal, and a dirty hack so far.\r\n\r\nI'll investigate better options for this, but I am afraid that would require a major refactoring on how the callbacks are handled.\r\n\r\nI'll close this PR for now.", "created_at": "2018-03-20 12:50:30", "user": 347552, "id": 374585637}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\n`\"my string #{nil}\"` results in an additional `''` string allocation, I'm\r\nguessing because the nil has to be converted to a string.\r\n\r\n`\"my string #{'[]' if multiple}\"` results in `\"my string #{nil}\"` if\r\nmultiple is false. Doing `\"my string #{''}\"` does not result in an extra\r\nstring allocation. I moved the if multiple logic into a method so I only\r\nhad to make the change once.\r\n\r\n### Other Information\r\n\r\nBenchmarking:\r\n\r\n```ruby\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update\r\n                your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  gem \"benchmark-ips\"\r\n  gem \"rails\"\r\nend\r\n\r\ndef allocate_count\r\n  GC.disable\r\n  before = ObjectSpace.count_objects\r\n  yield\r\n  after = ObjectSpace.count_objects\r\n  after.each { |k,v| after[k] = v - before[k] }\r\n  after[:T_HASH] -= 1 # probe effect - we created the before hash.\r\n  GC.enable\r\n  result = after.reject { |k,v| v == 0 }\r\n  GC.start\r\n  result\r\nend\r\n\r\n@html_options = {}\r\n\r\ndef master_version(multiple=nil)\r\n  \"hi#{\"[]\" if multiple}\"\r\nend\r\n\r\ndef fast_version(multiple=nil)\r\n  str = multiple ? \"[]\" : ''\r\n  \"hi#{str}\"\r\nend\r\n\r\ndef test\r\n  puts \"master_version\"\r\n  puts allocate_count { 1000.times { master_version } }\r\n  puts \"master_version with arg\"\r\n  puts allocate_count { 1000.times { master_version(' there') } }\r\n  puts \"fast_version\"\r\n  puts allocate_count { 1000.times { fast_version } }\r\n  puts \"fast_version with arg\"\r\n  puts allocate_count { 1000.times { fast_version(' there') } }\r\n\r\n  Benchmark.ips do |x|\r\n    x.report(\"master_version\") { master_version }\r\n    x.report(\"master_version with arg\") { master_version(' there') }\r\n    x.report(\"fast_version\")     { fast_version }\r\n    x.report(\"fast_version with arg\")     { fast_version(' there') }\r\n    x.compare!\r\n  end\r\nend\r\n\r\ntest\r\n```\r\n\r\nresults:\r\n```ruby\r\nmaster_version\r\n{:FREE=>-1981, :T_STRING=>2052}\r\nmaster_version with arg\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nfast_version\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nfast_version with arg\r\n{:FREE=>-1001, :T_STRING=>1000}\r\nWarming up --------------------------------------\r\n      master_version   138.851k i/100ms\r\nmaster_version with arg\r\n                       164.029k i/100ms\r\n        fast_version   165.737k i/100ms\r\nfast_version with arg\r\n                       167.016k i/100ms\r\nCalculating -------------------------------------\r\n      master_version      2.464M (±14.7%) i/s -     11.941M in   5.023307s\r\nmaster_version with arg\r\n                          3.754M (± 8.5%) i/s -     18.699M in   5.021354s\r\n        fast_version      3.449M (±11.7%) i/s -     17.071M in   5.033312s\r\nfast_version with arg\r\n                          3.636M (± 6.9%) i/s -     18.205M in   5.034792s\r\n\r\nComparison:\r\nmaster_version with arg:  3753896.1 i/s\r\nfast_version with arg:  3636094.5 i/s - same-ish: difference falls within error\r\n        fast_version:  3448766.2 i/s - same-ish: difference falls within error\r\n      master_version:  2463857.3 i/s - 1.52x  slower\r\n```\r\n", "labels": [], "number": 32302, "updated_at": "2018-03-20 14:18:43", "user": 1635820, "closed_at": "2018-03-20 14:17:36", "id": 306711212, "title": "Interpolate '' instead of nil when multiple is false.", "url": "https://api.github.com/repos/rails/rails/issues/32302", "created_at": "2018-03-20 02:59:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374592058", "text": "I think it'd be fine to use an inline ternary here to save adding an extra method, e.g:\r\n\r\n``` ruby\r\n\"#{sanitized_method_name}#{multiple ? '[]' : ''}\"\r\n```\r\n\r\nit's also shorter than the method call.", "created_at": "2018-03-20 13:12:39", "user": 6321, "id": 374592058}, {"reactions": {"+1": [6321]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374598051", "text": "Fixed", "created_at": "2018-03-20 13:30:54", "user": 1635820, "id": 374598051}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\r\n\r\n`loofah` reported a XSS/Code injection CVE today for all versions prior to `2.2.1`. Rails version `5.1.5` upgrades to `2.2.1` but rails `5.0.6` is still at `2.2.0`. \r\n\r\n### Expected behavior\r\npatch `5.0.x` to use `loofah` `2.2.1`\r\n\r\n", "labels": [], "number": 32301, "updated_at": "2018-03-19 23:33:12", "user": 5127, "closed_at": "2018-03-19 23:33:12", "id": 306656788, "title": "Backport loofah version 2.2.1 to latest 5.0.x", "url": "https://api.github.com/repos/rails/rails/issues/32301", "created_at": "2018-03-19 22:11:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374402347", "text": "Just created an app with 5.0.6 and the bundled version of loofah is 2.2.1:\r\n\r\n```\r\n~/src/loofah-demo % rails -v\r\nRails 5.0.6\r\n~/src/loofah-demo % bundle show loofah\r\n/Users/guillermo-iguaran/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/loofah-2.2.1\r\n```\r\n\r\nMaybe another dependency is preventing the upgrade of loofah in your system?", "created_at": "2018-03-19 22:19:03", "user": 160941, "id": 374402347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374421306", "text": "Hmm... I did a fresh install and it installs `2.2.1` with `5.0.6`. Closing this as I was able to get it working, thanks!", "created_at": "2018-03-19 23:33:12", "user": 5127, "id": 374421306}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\nThis patch removes support for Qu gem.\r\n\r\nReasons are:\r\n1. Qu gem wasn't compatible since Rails 5.1\r\n2. Gem development was stopped in 2014\r\n3. Maintainers have confirmed its demise.\r\n\r\n## Additional information\r\nSee issue #32273\r\n", "labels": [], "number": 32300, "updated_at": "2018-03-19 22:57:44", "user": 671550, "closed_at": "2018-03-19 21:47:23", "id": 306623200, "title": "ActiveJob: Remove support for Qu gem.", "url": "https://api.github.com/repos/rails/rails/issues/32300", "created_at": "2018-03-19 20:30:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374363434", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-19 20:31:03", "user": 7468109, "id": 374363434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374368016", "text": "r? @pixeltrix", "created_at": "2018-03-19 20:42:38", "user": 671550, "id": 374368016}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [2989011]}, "text": "## Background\r\n\r\nWhen dumping the database schema, Rails will dump foreign key names only if those names were not generate by Rails. Currently this is determined by checking if the foreign key name is `fk_rails_` followed by a 10-character hash.\r\n\r\n## Problem\r\n\r\nAt [Cookpad](https://github.com/cookpad), we use [Departure](https://github.com/departurerb/departure) (Percona's pt-online-schema-change runner for ActiveRecord migrations) to run migrations.\r\nOften, `pt-osc` will make a copy of a table in order to run a long migration without blocking it. In this copy process, foreign keys are copied too, but [their name is prefixed with an underscore to prevent name collision](https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html#cmdoption-pt-online-schema-change-alter-foreign-keys-method).\r\n\r\nIn the process described above, we often end up with a development database that contains foreign keys which name starts with `_fk_rails_`.\r\nThat name does not match the ignore pattern, so next time Rails dumps the database schema (eg. when running `rake db:migrate`), our `db/schema.rb` file ends up containing those unwanted foreign key names.\r\nThis also produces an unwanted git diff that we'd prefer not to commit.\r\n\r\n## Suggested solution\r\n\r\nIn this PR, I'd like to suggest a way to expose the foreign key name ignore pattern to the Rails configuration, so that individual projects can decide on a different pattern of foreign keys that will not get their names dumped in `schema.rb`.\r\n\r\nI have confirmed locally that with the following configuration in my Rails application, `_fk_rails_*` foreign key names are not dumped to `schema.rb` anymore:\r\n\r\n```rb\r\nconfig.active_record.fk_ignore_pattern = /^_*#{ActiveRecord::ForeignKeys::PREFIX}_[0-9a-f]{10}$/\r\n```\r\n\r\n## Remaining work\r\n\r\n- [x] Testing\r\n- [x] Documentation\r\n\r\n", "labels": [], "number": 32299, "updated_at": "2018-03-22 10:42:48", "user": 816901, "closed_at": "None", "id": 306564386, "title": "Expose foreign key name ignore pattern in configuration", "url": "https://api.github.com/repos/rails/rails/issues/32299", "created_at": "2018-03-19 17:42:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374302469", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 17:43:03", "user": 7468109, "id": 374302469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374722208", "text": "♻️ This is now ready for review.", "created_at": "2018-03-20 19:14:25", "user": 816901, "id": 374722208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374938139", "text": "Looks like `ForeignKeyTest#test_schema_dumping` is failing on MySQL and `SchemaForeignKeyTest#test_dump_foreign_key_targeting_different_schema` is failing on Postgres, can you check them?", "created_at": "2018-03-21 13:35:31", "user": 160941, "id": 374938139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375248890", "text": "Thanks for taking a look! Hopefully f6e612b looks better. 🤞 ", "created_at": "2018-03-22 10:26:26", "user": 816901, "id": 375248890}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis just adds some documentation that the Rails team is not accepting PRs for new ActiveJob adapters. This will prevent future potential contributors from spending time on PRs that will never have a chance of being accepted.\r\n\r\n### Other Information\r\n\r\nInspired by:\r\n\r\n* https://github.com/rails/rails/pull/32285\r\n* https://github.com/rails/rails/pull/21406#issuecomment-138813484\r\n* https://github.com/rails/rails/issues/23311#issuecomment-176275718", "labels": [], "number": 32298, "updated_at": "2018-03-19 18:46:08", "user": 58702, "closed_at": "2018-03-19 18:46:08", "id": 306504849, "title": "Add documentation about not accepting PRs for new adapters", "url": "https://api.github.com/repos/rails/rails/issues/32298", "created_at": "2018-03-19 15:12:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374247278", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 15:12:35", "user": 7468109, "id": 374247278}, {"reactions": {"+1": [58702]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374323130", "text": "We may in future add an adapter for Faktory by default given it get the same traction as Sidekiq, but for now I agree it is better to keep it in the Faktory gem itself.", "created_at": "2018-03-19 18:46:04", "user": 47848, "id": 374323130}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With Ruby 2.5 format_rerun_snippet can return nil, which crashes the test\r\nsuite, F.e.:\r\n\r\n```\r\n  TestUnitReporterTest#test_outputs_failures_inline:\r\n  NoMethodError: undefined method `sub' for nil:NilClass\r\n      test/test_unit/reporter_test.rb:62:in `block in <class:TestUnitReporterTest>'\r\n  bin/rails test test/test_unit/reporter_test.rb:61\r\n```", "labels": [], "number": 32297, "updated_at": "2018-03-19 23:09:34", "user": 15652483, "closed_at": "None", "id": 306493579, "title": "Check value of result.source_location in test_unit/reporter.rb#format_rerun_snippet", "url": "https://api.github.com/repos/rails/rails/issues/32297", "created_at": "2018-03-19 14:46:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374237751", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 14:46:40", "user": 7468109, "id": 374237751}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374416645", "text": "Thanks for the PR. Do you have more information on this error you're seeing? Is there a way to reproduce it?", "created_at": "2018-03-19 23:09:34", "user": 987638, "id": 374416645}], "assignees": [47848, 47848], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThe patch prevents `Routes#simulator` from failing when the routes are empty (no `anchored_routes`).\r\n\r\nFixes #30578 \r\n\r\n## Other information\r\n\r\nThe error is reproducible with `5.2.0.rc1`. I am creating the PR against `master`. Please let me know if I should do it against `5-2-stable` instead.\r\n\r\nThe culprit seems to be the `RouteSet` inserted automatically by `ActiveStorage`. The code was failing for not having any `anchored_routes`.\r\n\r\n", "labels": [], "number": 32296, "updated_at": "2018-03-19 14:39:12", "user": 129938, "closed_at": "None", "id": 306484103, "title": "Fix: reloading code won't work when eager loading is enabled", "url": "https://api.github.com/repos/rails/rails/issues/32296", "created_at": "2018-03-19 14:23:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374229652", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 14:24:06", "user": 7468109, "id": 374229652}], "assignees": [47848, 47848], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Is there a way via a scope to only select all records with an attachment?\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.5\r\n", "labels": [], "number": 32295, "updated_at": "2018-03-20 07:19:48", "user": 14871530, "closed_at": "2018-03-19 17:48:04", "id": 306481787, "title": "ActiveStorage: select all record with an attachment ", "url": "https://api.github.com/repos/rails/rails/issues/32295", "created_at": "2018-03-19 14:18:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374304126", "text": "Join against the attachment association:\r\n\r\n```ruby\r\n# Assuming a model defined like so:\r\nclass Post < ApplicationRecord\r\n  has_one_attached :image\r\nend\r\n\r\n# ...you can join against :image_attachment to select posts having attached images:\r\nPost.joins(:image_attachment).where('published_at >= ?', Time.now)\r\n```\r\n\r\nIn the future, please ask usage questions on the rubyonrails-talk mailing list or on Stack Overflow. We reserve the issue tracker for bugs. ", "created_at": "2018-03-19 17:48:04", "user": 94129, "id": 374304126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374499122", "text": "Thank you very much, sorry", "created_at": "2018-03-20 07:19:48", "user": 14871530, "id": 374499122}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nRecently `GEM=railties` and `GEM=ap, ac` unit tests are failing with ruby-head.\r\n\r\n* Last successful build https://travis-ci.org/rails/rails/builds/351113824\r\n* First failures since https://travis-ci.org/rails/rails/builds/351204355\r\n\r\nIt does not look like these failures triggered by Rails code change. I'm wondering if these failures are related to changes at Ruby.\r\n\r\n* Ruby version used at the last successful build\r\n```\r\n$ ruby --version\r\nruby 2.6.0dev (2018-03-07 trunk 62693) [x86_64-linux]\r\n```\r\n\r\n* Ruby version used at the first failed build\r\n```\r\n$ ruby --version\r\nruby 2.6.0dev (2018-03-09 trunk 62705) [x86_64-linux]\r\n```\r\n\r\nTaking a look at Ruby differences between `62693` and `62705` I have found [Revision 62695\r\n](https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=62695&view=revision) at Ruby which changes some encoding behavior. \r\n\r\nI understand it is too early to say what causes these failures, then let me provide steps to reproduce with `ruby 2.6.0dev (2018-03-19 trunk 62840) [x86_64-linux]`\r\n\r\n```ruby\r\n$ cd railties\r\n$ bundle exec ruby -Itest test/application/assets_test.rb -n test_precompile_should_handle_utf8_filenames\r\nRun options: -n test_precompile_should_handle_utf8_filenames --seed 26402\r\n\r\n# Running:\r\n\r\nF\r\n\r\nFailure:\r\nApplicationTests::AssetsTest#test_precompile_should_handle_utf8_filenames [test/application/assets_test.rb:334]:\r\nExpected /not\\ an\\ image\\ really/ to match \"Bad Request\\n\".\r\n\r\n\r\nbin/rails test test/application/assets_test.rb:318\r\n\r\n\r\n\r\nFinished in 7.297453s, 0.1370 runs/s, 0.5481 assertions/s.\r\n1 runs, 4 assertions, 1 failures, 0 errors, 0 skips\r\n$\r\n```\r\n\r\n```ruby\r\n$ cd actionpack\r\n$ bundle exec ruby -Itest test/dispatch/static_test.rb -n test_served_static_file_with_non_english_filename\r\nRun options: -n test_served_static_file_with_non_english_filename --seed 54001\r\n\r\n# Running:\r\n\r\nF\r\n\r\nFailure:\r\nStaticTest#test_served_static_file_with_non_english_filename [test/dispatch/static_test.rb:74]:\r\n--- expected\r\n+++ actual\r\n@@ -1,2 +1,2 @@\r\n-\"means hello in Japanese\r\n+\"Bad Request\r\n \"\r\n\r\n\r\n\r\nbin/rails test test/dispatch/static_test.rb:73\r\n\r\nF\r\n\r\nFailure:\r\nStaticEncodingTest#test_served_static_file_with_non_english_filename [test/dispatch/static_test.rb:74]:\r\n--- expected\r\n+++ actual\r\n@@ -1,2 +1,2 @@\r\n-\"means hello in Japanese\r\n+\"Bad Request\r\n \"\r\n\r\n\r\n\r\nbin/rails test test/dispatch/static_test.rb:73\r\n\r\n\r\n\r\nFinished in 0.048943s, 40.8635 runs/s, 40.8635 assertions/s.\r\n2 runs, 2 assertions, 2 failures, 0 errors, 0 skips\r\n$\r\n```\r\n\r\n\r\n### Expected behavior\r\nAll of them should finish successfully as Ruby 2.5.0 does.\r\n\r\n### Actual behavior\r\n3 failures reported above.\r\n\r\n### System configuration\r\n**Rails version**:master branch\r\n\r\n**Ruby version**:ruby 2.6.0dev (2018-03-19 trunk 62840) [x86_64-linux]\r\n", "labels": ["attached PR"], "number": 32294, "updated_at": "2018-03-22 16:44:48", "user": 73684, "closed_at": "None", "id": 306479565, "title": "3 failures with Ruby 2.6.0.dev showing \"Bad Request\"", "url": "https://api.github.com/repos/rails/rails/issues/32294", "created_at": "2018-03-19 14:13:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374271781", "text": "Looks like that change broke the `needs_monkeypatch` check in [core_ext/uri.rb][1].\r\n\r\nHowever looking at the implementation of `unescape` I wonder whether the encoding should be forced to UTF-8 before being passed to it since it sets the encoding back to the original and has done since 1.9.2. Not sure whether that should be done in Rack or Rails.\r\n\r\n[1]: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/uri.rb#L7-L12", "created_at": "2018-03-19 16:19:24", "user": 6321, "id": 374271781}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374276688", "text": "Looks like this changed recently in #32210 (original bug report is #32183).", "created_at": "2018-03-19 16:33:15", "user": 6321, "id": 374276688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374835377", "text": "Thanks for the update and pointing out the useful information.\r\n\r\nsince Ruby 2.6.0 including Revision 62695 https://svn.ruby-lang.org/cgi-bin/viewvc.cgi?revision=62695&view=revision will not raise `Encoding::CompatibilityError (incompatible character encodings: UTF-8 and ASCII-8BIT)` for `parser.unescape(str + parser.escape(str).force_encoding(Encoding::UTF_8))`.\r\n\r\nThen I have opened #32314 to change the condition for monkey patching will address these 3 failures. \r\n\r\nGoing back to the discussion if monkey patched `unescape` encoding should be forced to UTF-8 or not, Actually I do not have a better background for this discussion. Rails 6 nor Ruby 2.6 are not released yet, I think we will have enough time to discuss it between Ruby committers and Rails contributors. let me cc Ruby committer @nurse who committed Revision 62695 to Ruby.", "created_at": "2018-03-21 05:10:20", "user": 73684, "id": 374835377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375269681", "text": "I fixed ruby's URI#unescape as Rails monkeypatched at [r62897](https://github.com/ruby/ruby/commit/234a30459cdae6aa7da6e28a1082d9c11f315696).\r\nIt's also expected to fix this issue.", "created_at": "2018-03-22 11:21:44", "user": 13423, "id": 375269681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375278720", "text": "Thanks for providing a fix for Ruby revision r62897. I have confirmed r62897 also addresses this issue and opened #32319 to change the condition for monkey patching `URI#unescape`.", "created_at": "2018-03-22 11:56:17", "user": 73684, "id": 375278720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375375372", "text": "For non MRI implementations, the current condition of monkey patching seems already fine and better than RUBY_VERSION.", "created_at": "2018-03-22 16:44:47", "user": 13423, "id": 375375372}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nBUG.\r\n\r\nIn some cases, there is happening `Capybara::CapybaraError` which prevents further execution of `super` inside `after_teardown` and that **brakes transactions between tests**. As well that `CapybaraError` sometimes is not seen directly in stacktrace which makes everything even more complicated.", "labels": ["actionpack"], "number": 32293, "updated_at": "2018-03-22 14:54:59", "user": 20628911, "closed_at": "2018-03-21 13:38:53", "id": 306465989, "title": "Fix system tests transactions not closed between examples", "url": "https://api.github.com/repos/rails/rails/issues/32293", "created_at": "2018-03-19 13:38:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374214330", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 13:38:56", "user": 7468109, "id": 374214330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374214716", "text": "Hey @dzirtusss thanks for the PR. Do you have more information on this error you're seeing? Is there a way to reproduce it?\r\n", "created_at": "2018-03-19 13:40:02", "user": 1080678, "id": 374214716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374214808", "text": "Sorry! I accidentally hit close! ", "created_at": "2018-03-19 13:40:18", "user": 1080678, "id": 374214808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374238294", "text": "This one works (`:js` - is Capybara's `selenium_chrome` or `selenium_chrome_headless`):\r\n\r\n```\r\nrequire \"rails_helper\"\r\n\r\nRSpec.describe \"something\", :js, type: :system do\r\n  it \"first\" do\r\n    create(:user)\r\n    visit \"/undefined-route\"\r\n  end\r\n\r\n  it \"second\" do\r\n    pp User.count # here User.count == 1 because transaction was not closed\r\n  end\r\nend\r\n```\r\nproducing\r\n```\r\nFailures:\r\n\r\n  1) something: first\r\n     Failure/Error: raise ActionController::RoutingError, \"No route matches [#{env['REQUEST_METHOD']}] #{env['PATH_INFO'].inspect}\"\r\n     \r\n     ActionController::RoutingError:\r\n       No route matches [GET] \"/undefined-route\"\r\n     \r\n     \r\n     \r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/debug_exceptions.rb:63:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/railties-5.1.5/lib/rails/rack/logger.rb:36:in `call_app'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/railties-5.1.5/lib/rails/rack/logger.rb:24:in `block in call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:26:in `tagged'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:69:in `tagged'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/railties-5.1.5/lib/rails/rack/logger.rb:24:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/request_store-1.4.0/lib/request_store/middleware.rb:19:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/request_id.rb:25:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/method_override.rb:22:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/runtime.rb:22:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/activesupport-5.1.5/lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/executor.rb:12:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/actionpack-5.1.5/lib/action_dispatch/middleware/static.rb:125:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/sendfile.rb:111:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/sentry-raven-2.7.2/lib/raven/integrations/rack.rb:51:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-cors-1.0.2/lib/rack/cors.rb:97:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/railties-5.1.5/lib/rails/engine.rb:522:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/urlmap.rb:68:in `block in call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/urlmap.rb:53:in `each'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/urlmap.rb:53:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/rack-2.0.4/lib/rack/builder.rb:153:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/capybara-2.18.0/lib/capybara/server.rb:44:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/puma-3.11.2/lib/puma/configuration.rb:225:in `call'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/puma-3.11.2/lib/puma/server.rb:624:in `handle_request'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/puma-3.11.2/lib/puma/server.rb:438:in `process_client'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/puma-3.11.2/lib/puma/server.rb:302:in `block in run'\r\n     # /Users/serg/.rvm/gems/ruby-2.4.3/gems/puma-3.11.2/lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\n     # ------------------\r\n     # --- Caused by: ---\r\n     # Capybara::CapybaraError:\r\n     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true\r\n     #   /Users/serg/.rvm/gems/ruby-2.4.3/gems/capybara-2.18.0/lib/capybara/session.rb:145:in `raise_server_error!'\r\n```\r\nthe order of specs is important so need to be called `rspec --order defined`\r\n\r\nWhen you see `test.log` it is seen that transaction is not rollbacked after error in first spec. And it stays in `active_record_savepoint_1` state (with dirty db) until whole specs run.", "created_at": "2018-03-19 14:48:03", "user": 20628911, "id": 374238294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374939337", "text": "Thanks for the explanation @dzirtusss! And congrats on your first Rails PR 🎉 ", "created_at": "2018-03-21 13:39:11", "user": 1080678, "id": 374939337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375297921", "text": "I think we should cherry-pick this to `5-2-0`.\r\nSee https://github.com/rails/rails/pull/32310#issuecomment-375182490\r\n/cc @eileencodes ", "created_at": "2018-03-22 13:05:55", "user": 6443532, "id": 375297921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375305139", "text": "@bogdanvlviv can you provide some more detail of why this is worth overriding the release process?\r\n\r\nI haven't looked closely, but this doesn't sound like a critical release-breaking issue.", "created_at": "2018-03-22 13:27:37", "user": 1034, "id": 375305139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375307842", "text": "@matthewd I have also hit this on a client project using rspec. It makes you doubt what's going on, why the transactions aren't shared, etc. The fix is to use `database_cleaner`, which I'd love to avoid.", "created_at": "2018-03-22 13:35:57", "user": 604618, "id": 375307842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375317161", "text": "Sure, I don't dispute that it's a bug we want to fix, including in the 5.2.x series. I'm asking why it's worth delaying the release of 5.2.0. We have a release process, and we're currently in the \"serious RC; critical fixes only\" phase for 5.2.0 -- that's the whole point of giving it a separate branch -- for most intents and purposes, it's already been cut, and so changes go to 5-2-stable, where they'll eventually appear in 5.2.1. ", "created_at": "2018-03-22 14:03:46", "user": 1034, "id": 375317161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375322323", "text": "@matthewd Thanks for more detail clarifying the role of `5-2-0` branch. It isn't worth delaying the release `5.2.0`. It'll be fixed in `5.2.1`. Sorry for making noise.", "created_at": "2018-03-22 14:18:14", "user": 6443532, "id": 375322323}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375335419", "text": "No worries, thanks for confirming :+1:", "created_at": "2018-03-22 14:54:59", "user": 1034, "id": 375335419}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Move CSP info from 5.2 release notes to guide [ci skip]\r\n\r\ncherry-pick 8647ac0b88d8883e1c638b3b537deb62a40f4b74\r\nr? @eileencodes ", "labels": [], "number": 32292, "updated_at": "2018-03-19 12:52:50", "user": 6443532, "closed_at": "2018-03-19 12:52:05", "id": 306448695, "title": "Backport #32283", "url": "https://api.github.com/repos/rails/rails/issues/32292", "created_at": "2018-03-19 12:49:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374200109", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-03-19 12:49:03", "user": 7468109, "id": 374200109}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\nHABTM (has_and_belongs_to_many) associations do not support the dependent option, while other association types do. Of course not all dependent options make sense for HABTM associations, but some of them do. Suppose we have an Author that has and belongs to many Books (an Author can write multiple Books, a Book could be written by multiple Authors), then we might want to show an error when trying to destroy an Author that is still linked to Books. \r\n\r\nSuppose we have the following model:\r\n\r\n```\r\nclass Author < ApplicationRecord\r\n  has_and_belongs_to_many :books, dependent: :restrict_with_error, foo: :bar\r\nend\r\n```\r\n\r\n### Expected behavior\r\nWhen I call destroy on an Author with books, I would expect the destroy to fail and an error message to be set. Or if the dependent option is intentionally unsupported for HABTM association, then I would at least expect an exception when trying to set the option, as is done for unsupported options for other association types.\r\n\r\nFurthermore I would expect an error to be triggered for the unsupported option `foo` either way: `ArgumentError: Unknown key: :foo. Valid keys are: : ...`\r\n\r\n### Actual behavior\r\nThe destroy on the Author with books is not blocked and no error is triggered. Also I don't get an exception setting unsupported options on HABTM associations, while this does happen for other association types.\r\n\r\n### Questions\r\n1. Is the dependent option intentionally unsupported for HABTM associations?\r\n2. If not, what values would we like to support for dependent on HABTM associations and how should they behave?\r\n3. Do we want to trigger an exception when trying to set unsupported options on HABTM associations?\r\n4. Any advice on how to implement this? I did a quick study of the code and see HABTM associations behave kind of differently from other (e.g. has_many) associations. They are not an association in it self, but instead use has_many and belong_to association on a fake JoinModel. I could just write new code in the [HasAndBelongsToMany builder class](https://github.com/rails/rails/blob/5-2-stable/activerecord/lib/active_record/associations/builder/has_and_belongs_to_many.rb) to implement this, but it would be nicer if we could somehow reuse the functionality already in place for [has_many associations](https://github.com/rails/rails/blob/5-2-stable/activerecord/lib/active_record/associations/has_many_association.rb) and the [association builder base class](https://github.com/rails/rails/blob/5-2-stable/activerecord/lib/active_record/associations/builder/association.rb).\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.4.1\r\n", "labels": [], "number": 32291, "updated_at": "2018-03-19 16:06:53", "user": 3602336, "closed_at": "None", "id": 306420596, "title": "Dependent option support for has_and_belongs_to_many association", "url": "https://api.github.com/repos/rails/rails/issues/32291", "created_at": "2018-03-19 11:15:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374216313", "text": "Hi @kreintjes, yes HABTM intentionally doesn't support dependent options because if that's really needed you should probably be using `has_many :through` with a join model as you're probably missing one from your domain model (FYI, HABTM is a custom HMT association). To take your author/book example, the join model you're missing could be a publishing contract. Even if there's no specific model it's likely that you want to add additional attributes to the join which again you need to use a HMT association for.\r\n\r\nYou're right that we should be raising an exception with invalid options - the reason it doesn't like other association methods is because the builder doesn't inherit from the base association builder - happy to accept a PR that adds an exception for unsupported options.", "created_at": "2018-03-19 13:45:00", "user": 6321, "id": 374216313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374267281", "text": "I have a real world application where we have some HABTM associations where we are currently using a custom before_destroy callback to prevent the destroy if the association is present (i.e. if the thing we want to destroy is used by some other thing). It would be nice if we could just use the dependent option. I know we could if we use a HMT association with a join model, but we (currently) have no other need for the join model except for setting the dependent. It feels a bit tedious to add the join model and split the associations ourselves, just to set the dependent.\r\n\r\nAnyway, thanks for the clarification @pixeltrix! I will try to create a PR for raising an exception on invalid options in the coming days.", "created_at": "2018-03-19 16:06:53", "user": 3602336, "id": 374267281}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Expected behavior\r\nprecompiled assets should get loaded and UI should work perfectly in production\r\n\r\n### Actual behavior\r\nassets are not getting loaded in production and application is not working as expected but locally if I run application it works\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.5\r\n**Ruby version**:\r\n2.4", "labels": [], "number": 32290, "updated_at": "2018-03-20 12:55:45", "user": 30189967, "closed_at": "2018-03-19 13:25:56", "id": 306417218, "title": "assets are not loading in production", "url": "https://api.github.com/repos/rails/rails/issues/32290", "created_at": "2018-03-19 11:04:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374210469", "text": "Hi @anson2590 - this is unlikely to be a bug in Rails but is probably a misconfiguration in your production host(s). Unfortunately you don't give me any details about that but it sounds like you're hitting the puma app server directly. By default we don't serve assets in production unless the environment variable `RAILS_SERVE_STATIC_FILES` is present because it's usually best left to nginx or apache to do that.\r\n\r\nThings are a little different on Heroku where your app server is called directly and isn't proxied behind a web server so they set `RAILS_SERVE_STATIC_FILES` by default. So if you're using them for hosting then you may have deleted it from your config vars.\r\n\r\nThe other possible scenario is that you're just running in production locally in which case just look for the following line in `config/environments/production.rb`:\r\n\r\n``` ruby\r\nconfig.public_file_server.enabled = ENV[\"RAILS_SERVE_STATIC_FILES\"].present?\r\n```\r\n\r\nand change it to:\r\n\r\n``` ruby\r\nconfig.public_file_server.enabled = true\r\n```\r\n\r\nand restart your application.\r\n\r\nI'm going to close this since the likelihood of it being a bug is small - if you really think there's a bug in Rails (for example you've set `config.public_file_server.enabled = true`) then please provide more information about your production setup.", "created_at": "2018-03-19 13:25:55", "user": 6321, "id": 374210469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374476841", "text": "We tried making config.public_file_server.enabled = true but still its not working in production and we are using puma. I have attested production.rb config.\r\n\r\nproduction.rb\r\n    # frozen_string_literal: true\r\n    Rails.application.configure do\r\n      # Settings specified here will take precedence over those in config/application.rb.\r\n    \r\n      # Code is not reloaded between requests.\r\n      config.cache_classes = true\r\n    \r\n      # Eager load code on boot. This eager loads most of Rails and\r\n      # your application in memory, allowing both threaded web servers\r\n      # and those relying on copy on write to perform better.\r\n      # Rake tasks automatically ignore this option for performance.\r\n      config.eager_load = true\r\n    \r\n      # Full error reports are disabled and caching is turned on.\r\n      config.consider_all_requests_local       = false\r\n      config.action_controller.perform_caching = true\r\n    \r\n      # Attempt to read encrypted secrets from `config/secrets.yml.enc`.\r\n      # Requires an encryption key in `ENV[\"RAILS_MASTER_KEY\"]` or\r\n      # `config/secrets.yml.key`.\r\n      config.read_encrypted_secrets = true\r\n    \r\n      # Disable serving static files from the `/public` folder by default since\r\n      # Apache or NGINX already handles this.\r\n      config.serve_static_files = false\r\n    \r\n      config.assets.compress = true\r\n      config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?\r\n    \r\n      # Compress JavaScripts and CSS.\r\n      config.assets.js_compressor = :uglifier\r\n      config.assets.css_compressor = :sass\r\n    \r\n      # Do not fallback to assets pipeline if a precompiled asset is missed.\r\n      config.assets.compile = false\r\n    \r\n      # Asset digests allow you to set far-future HTTP expiration dates on all assets,\r\n      # yet still be able to expire them through the digest params.\r\n      config.assets.digest = true\r\n    \r\n      config.assets.initialize_on_precompile = true\r\n    \r\n      # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb\r\n    \r\n      # Enable serving of images, stylesheets, and JavaScripts from an asset server.\r\n      # config.action_controller.asset_host = 'http://assets.example.com'\r\n    \r\n      # Specifies the header that your server uses for sending files.\r\n      # config.action_dispatch.x_sendfile_header = 'X-Sendfile' # for Apache\r\n      # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX\r\n    \r\n      # Mount Action Cable outside main process or domain\r\n      # config.action_cable.mount_path = nil\r\n      # config.action_cable.url = 'wss://example.com/cable'\r\n      # config.action_cable.allowed_request_origins = [ 'http://example.com', /http:\\/\\/example.*/ ]\r\n    \r\n      # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\r\n      # config.force_ssl = true\r\n    \r\n      # Use the lowest log level to ensure availability of diagnostic information\r\n      # when problems arise.\r\n      config.log_level = :debug\r\n    \r\n      # Prepend all log lines with the following tags.\r\n      config.log_tags = [:subdomain, :uuid]\r\n    \r\n      # Use a different cache store in production.\r\n      # config.cache_store = :mem_cache_store\r\n    \r\n      # Use a real queuing backend for Active Job (and separate queues per environment)\r\n      # config.active_job.queue_adapter     = :resque\r\n      # config.active_job.queue_name_prefix = \"cerberus_admin_#{Rails.env}\"\r\n      config.action_mailer.perform_caching = false\r\n    \r\n      # Ignore bad email addresses and do not raise email delivery errors.\r\n      # Set this to true and configure the email server for immediate delivery to raise delivery errors.\r\n      # config.action_mailer.raise_delivery_errors = false\r\n    \r\n      # Enable locale fallbacks for I18n (makes lookups for any locale fall back to\r\n      # the I18n.default_locale when a translation cannot be found).\r\n      config.i18n.fallbacks = true\r\n    \r\n      # Send deprecation notices to registered listeners.\r\n      config.active_support.deprecation = :notify\r\n    \r\n      # Use default logging formatter so that PID and timestamp are not suppressed.\r\n      config.log_formatter = ::Logger::Formatter.new\r\n    \r\n      # Use a different logger for distributed setups.\r\n      # require 'syslog/logger'\r\n      # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new 'app-name')\r\n    \r\n      if ENV['RAILS_LOG_TO_STDOUT'].present?\r\n        logger           = ActiveSupport::Logger.new(STDOUT)\r\n        logger.formatter = config.log_formatter\r\n        config.logger    = ActiveSupport::TaggedLogging.new(logger)\r\n      end\r\n    \r\n      # Do not dump schema after migrations.\r\n      # config.active_record.dump_schema_after_migration = false\r\n    end", "created_at": "2018-03-20 05:01:18", "user": 30189967, "id": 374476841}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374587104", "text": "@anson2590 I can't help any further - you've not given me any details on your hosting environment so I've no idea whether you're even hitting Rails or not for assets. I suggest you try the mailing list, Stack Overflow or the IRC channel for assistance.", "created_at": "2018-03-20 12:55:45", "user": 6321, "id": 374587104}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The `DidYouMean::Levenshtein.distance` has the same implementation that we\r\nuse. The module is a private API however, this is the first step in the\r\ndirection of eventually using `DidYouMean::SpellChecker.correct` for our\r\nsuggestions.\r\n\r\nUsing `DidYouMean::SpellChecker.correct` would mean changing the\r\nrecommendations to only one. IMO this is fine, as for the options we'd\r\nuse corrections for, if we don't get it right on the first try, we\r\nprobably won't guess it on the second one.", "labels": [], "number": 32289, "updated_at": "2018-03-19 09:00:31", "user": 604618, "closed_at": "None", "id": 306378633, "title": "Use DidYouMean::Levenshtein.distance in our own Spellchecker", "url": "https://api.github.com/repos/rails/rails/issues/32289", "created_at": "2018-03-19 09:00:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374142461", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-19 09:00:31", "user": 7468109, "id": 374142461}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Simplifying create, create! and update activerecord methods, using the Object.tap method.", "labels": [], "number": 32288, "updated_at": "2018-03-19 09:25:51", "user": 8790491, "closed_at": "2018-03-19 09:25:51", "id": 306361344, "title": "Readability improvement of activerecord methods", "url": "https://api.github.com/repos/rails/rails/issues/32288", "created_at": "2018-03-19 07:48:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374126358", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 07:48:29", "user": 7468109, "id": 374126358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374149175", "text": "Thanks, but while they're shorter, I don't think these are more readable.\r\n\r\nAs such differences are often subjective, we generally [don't accept cosmetic changes](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code).", "created_at": "2018-03-19 09:25:51", "user": 1034, "id": 374149175}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nRunning HTML responses through `DOMParser#parseFromString` results in\r\ncomplete `HTMLDocument` instances with unnecessary surrounding tags.\r\n\r\n#### For example\r\n\r\n```js\r\nnew DOMParser().parseFromString('<p>hello</p>', 'text/html')\r\n```\r\n\r\n#### Will output\r\n\r\n```html\r\n<html>\r\n  <head></head>\r\n  <body>\r\n    <p>hello</p>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThis is passed to the `ajax:success` handler as `event.detail[0]`\r\n(`data`), but cannot be used directly without first traversing the\r\ndocument.\r\n\r\nTo resolve this, only XML content is passed through `parseFromString`,\r\nwhile HTML content is treated as plain-text.\r\n\r\nThis matches the behavior of jquery-ujs, which relied on jQuery's\r\nresponse-type inference.", "labels": [], "number": 32287, "updated_at": "2018-03-21 21:18:19", "user": 240770, "closed_at": "None", "id": 306357640, "title": "Pass HTML responses as plain-text in rails-ujs", "url": "https://api.github.com/repos/rails/rails/issues/32287", "created_at": "2018-03-19 07:30:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374123037", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 07:30:37", "user": 7468109, "id": 374123037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375099054", "text": "Failing check is due to the cyclomatic complexity of a function in an unrelated file.\r\n\r\nhttps://github.com/rails/rails/blob/242ae67ebe98685464b8f23f527e2102dfc3df88/actionview/app/assets/javascripts/rails-ujs/features/remote.coffee#L16-L72", "created_at": "2018-03-21 21:18:19", "user": 240770, "id": 375099054}], "assignees": [350807, 350807], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "dismiss", "labels": [], "number": 32286, "updated_at": "2018-03-19 08:00:51", "user": 26132682, "closed_at": "2018-03-19 07:20:57", "id": 306355738, "title": "dismiss", "url": "https://api.github.com/repos/rails/rails/issues/32286", "created_at": "2018-03-19 07:20:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374121362", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 07:21:03", "user": 7468109, "id": 374121362}, {"reactions": {"confused": [26132682]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374122082", "text": "my bad had glitch pulling upstream", "created_at": "2018-03-19 07:25:07", "user": 26132682, "id": 374122082}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [3710958]}, "text": "### Summary\r\n\r\nAdds an `ActiveJob` adapter for [Faktory](http://contribsys.com/faktory/).\r\n\r\n### Other Information\r\n\r\n[Faktory](http://contribsys.com/faktory/) is a language agnostic background job system. `faktory_worker_ruby` (<https://github.com/contribsys/faktory_worker_ruby>) provides a nice API for Ruby that is very similar to [Sidekiq](https://sidekiq.org/).\r\n", "labels": [], "number": 32285, "updated_at": "2018-03-19 13:26:33", "user": 58702, "closed_at": "2018-03-19 12:05:50", "id": 306325410, "title": "Faktory adapter", "url": "https://api.github.com/repos/rails/rails/issues/32285", "created_at": "2018-03-19 03:52:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374093830", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-19 03:52:16", "user": 7468109, "id": 374093830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374097511", "text": "I see that the `aj:integration` tests are failing on Travis. I assume that's because the faktory server isn't running on the Travis instance running the test. I'm not sure how to fix that, but I'd be happy to take a shot if someone can point me in the right direction.", "created_at": "2018-03-19 04:20:46", "user": 58702, "id": 374097511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374100153", "text": "Oh, looks like `.travis.yml` is where I need to look. Trying to figure something out now.", "created_at": "2018-03-19 04:45:30", "user": 58702, "id": 374100153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374106615", "text": "Ok, got it figured out.", "created_at": "2018-03-19 05:39:25", "user": 58702, "id": 374106615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374134649", "text": "I think Faktory is a nice background job system.  \r\n\r\nHowever, we have rejected it when there was a similar proposal about `SQS` before.  \r\nhttps://github.com/rails/rails/pull/21406#issuecomment-138813484 \r\nhttps://github.com/rails/rails/issues/23311#issuecomment-176275718 \r\n\r\nTherefore, instead of putting it in Rails, I think that it is better to add support in adapter(or gem).\r\n", "created_at": "2018-03-19 08:28:52", "user": 987638, "id": 374134649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374189818", "text": "Hey @jagthedrummer thanks for taking the time to open the PR. @y-yagi is right, we don't generally accept new adapters into AJ because it becomes a bigger overhead for us. It's better to add support in the adapter itself rather than into Rails. \r\n\r\nThanks for understanding! ", "created_at": "2018-03-19 12:05:50", "user": 1080678, "id": 374189818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374210656", "text": "Oh, bummer.", "created_at": "2018-03-19 13:26:33", "user": 58702, "id": 374210656}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This test fails in specific time.\r\nExample:\r\n\r\nf run this test on the machine with time 01:00 am UTC+2,\r\nthis test will fail.\r\nChanging representing of 2000-01-01 01:00 am UTC+2 to UTC+0 change\r\nthe day, month and even year in our case,\r\nso substitution `\"2000-01-01 \"` to `\"\"` isn't possible.\r\n\r\n```\r\nFailure:\r\nActiveRecord::ConnectionAdapters::QuotingTest#test_quoted_time_utc\r\nExpected: \"1999-12-31 23:01:27\"\r\n  Actual: \"23:01:27\"\r\n```\r\n\r\nRelated to 7c479cbf\r\nr? @pixeltrix", "labels": [], "number": 32284, "updated_at": "2018-03-19 10:23:32", "user": 6443532, "closed_at": "2018-03-19 10:16:32", "id": 306297210, "title": "Fix failing `QuotingTest#test_quoted_time_utc`", "url": "https://api.github.com/repos/rails/rails/issues/32284", "created_at": "2018-03-18 23:38:22", "comments": [{"reactions": {"heart": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374164946", "text": "@bogdanvlviv thanks! I've backported to all 5.x branches.", "created_at": "2018-03-19 10:23:32", "user": 6321, "id": 374164946}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add mention about \"nonce\".\r\n\r\nRelated to https://github.com/rails/rails/pull/32222#issuecomment-372268157\r\nr? @pixeltrix", "labels": [], "number": 32283, "updated_at": "2018-03-19 13:12:27", "user": 6443532, "closed_at": "2018-03-19 12:06:43", "id": 306283433, "title": "Move CSP info from 5.2 release notes to guide [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32283", "created_at": "2018-03-18 21:17:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374206506", "text": "Backported to `5-2-stable` in 940d0d4e96b3365e1bd02a1f70b10539a2c5ad1d", "created_at": "2018-03-19 13:12:27", "user": 6443532, "id": 374206506}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [193831]}, "text": "Fixes #28503\r\nFollow up to: #25411\r\n", "labels": ["actionview"], "number": 32282, "updated_at": "2018-03-20 17:29:16", "user": 5355, "closed_at": "2018-03-20 11:36:27", "id": 306244044, "title": "Fix digesting templates with mixed formats", "url": "https://api.github.com/repos/rails/rails/issues/32282", "created_at": "2018-03-18 14:17:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374006677", "text": "I've tested this against the repro I created when I reported #28503 and this PR resolves the issue. I've been unable to immediately test this against the production app where I first noticed this issue as the app doesn't play nice with rails master presently. Hopefully this can be backported against 5.1 and 5.2 - which I'm happy to help with.", "created_at": "2018-03-18 15:09:36", "user": 193831, "id": 374006677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374008639", "text": "Having now backported the fix to 5.1 stable I can confirm that this fixes the issue I was experiencing.", "created_at": "2018-03-18 15:34:24", "user": 193831, "id": 374008639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374037538", "text": "I think I've found a better solution that aligns more closely with the behavior of rendering: https://github.com/rails/rails/pull/32282/commits/052a6d51d82ec7fa730ea401648f4cb522f67e56\r\n\r\nBy setting `finder.formats`, we avoid the need to find with a `:formats` option. And when it's set to `[:js]`, we automatically get an `:html` fallback:\r\nhttps://github.com/rails/rails/blob/d9736e50d8d6fc9fad32e16ebdc8dcd0a0a3ec61/actionview/lib/action_view/lookup_context.rb#L245-L255\r\n\r\nRendering a request works similarly: https://github.com/rails/rails/blob/d9736e50d8d6fc9fad32e16ebdc8dcd0a0a3ec61/actionview/lib/action_view/rendering.rb#L106-L111\r\n\r\n@thomasfedb, mind trying once more with my latest commit? If it doesn't pan out I'll use my first approach.\r\n\r\n@kaspth, if you have any other ideas, please do let me know! It's a jungle in there.", "created_at": "2018-03-18 19:30:50", "user": 5355, "id": 374037538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374066703", "text": "@javan would that break if I, for example, tried to render a `.txt` partial inside a `.js` partial? Or some other cross-format combination?", "created_at": "2018-03-18 23:31:49", "user": 193831, "id": 374066703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374162529", "text": "I think that will work, but please do investigate.", "created_at": "2018-03-19 10:14:22", "user": 5355, "id": 374162529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374184059", "text": "@javan I'll give it a try", "created_at": "2018-03-19 11:40:25", "user": 193831, "id": 374184059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374194547", "text": "@javan new fix definitely solves the issue when using HTML partials inside JS views as with the previous fix.\r\n\r\nThere is an issue, however, when you render a partial with a particular format, e.g. `partial: 'partial2', formats: :text, collection: [1], cached: true` which results in a `Couldn't find template for digesting: home/_partial2` message, and a blank cache key is used (and therefore old cache is still used when partial is updated).", "created_at": "2018-03-19 12:26:12", "user": 193831, "id": 374194547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374194711", "text": "The above happens inside both JS and HTML views, as you'd expect.", "created_at": "2018-03-19 12:26:46", "user": 193831, "id": 374194711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374197118", "text": "Sorry, should make it clear that this issue with rendering with specified format appears only to occur with the new fix, and was not a problem with the initial fix.\r\n\r\nWith initial fix:\r\n```\r\nProcessing by HomeController#index as HTML\r\n  Rendering home/index.html.erb within layouts/application\r\nRead fragment views/home/_partial2:140b891b4a188473f1a3d632568d6824/localhost:3000/ (0.0ms)\r\nWrite fragment views/home/_partial2:140b891b4a188473f1a3d632568d6824/localhost:3000/ (0.0ms)\r\n  Rendered collection of home/_partial2.text.erb [0 / 1 cache hits] (1.8ms)\r\n  Rendered home/index.html.erb within layouts/application (14.6ms)\r\nCompleted 200 OK in 1053ms (Views: 1051.9ms | ActiveRecord: 0.0ms)\r\n```\r\n\r\nWith new fix:\r\n```\r\nProcessing by HomeController#index as HTML\r\n  Rendering home/index.html.erb within layouts/application\r\n  Couldn't find template for digesting: home/_partial2\r\nRead fragment views/home/_partial2/localhost:3000/ (0.1ms)\r\nWrite fragment views/home/_partial2/localhost:3000/ (0.1ms)\r\n  Rendered collection of home/_partial2.text.erb [0 / 1 cache hits] (1.6ms)\r\n  Rendered home/index.html.erb within layouts/application (14.4ms)\r\nCompleted 200 OK in 1037ms (Views: 1036.6ms | ActiveRecord: 0.0ms)\r\n```\r\n\r\nLet me know if you need further info @javan ", "created_at": "2018-03-19 12:36:37", "user": 193831, "id": 374197118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374206516", "text": "Thanks @thomasfedb! It looks like [`DependencyTracker`](https://github.com/rails/rails/blob/master/actionview/lib/action_view/dependency_tracker.rb) doesn't parse the `:formats` option currently. So my initial fix happens to work correctly, but would probably fail if you had more than one `_partial2` template. If you had `_partial2.text.erb` and `_partial2.html.erb` it would always digest the `html` template.", "created_at": "2018-03-19 13:12:28", "user": 5355, "id": 374206516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374236241", "text": "@javan right, there was only `_partial2.text.erb` in my test, no other partial called `partial2`. I'd be happy to go with either of your fixes for now, what do you think?", "created_at": "2018-03-19 14:42:32", "user": 193831, "id": 374236241}, {"reactions": {"+1": [350807]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374567366", "text": "Went with the 2nd approach. Thanks for all your help @thomasfedb! ", "created_at": "2018-03-20 11:41:32", "user": 5355, "id": 374567366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374577136", "text": "Backported to 5-2 0b53f5711ac9b26b8bc899caaf35de913ff4905f and 5-1 eb309757459a45128ae358e2bfa3314f04c40795", "created_at": "2018-03-20 12:18:33", "user": 5355, "id": 374577136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374610417", "text": "Thanks @javan, and clue as to when the next 5.1.x will be cut?", "created_at": "2018-03-20 14:07:22", "user": 193831, "id": 374610417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374641721", "text": "I'm not sure about the 5-1 release schedule. Maybe @rafaelfranca knows? You can always point your Gemfile at the Rails branch or sha.", "created_at": "2018-03-20 15:31:57", "user": 5355, "id": 374641721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374645681", "text": "Using the branch now in dev, but would prefer to have an official release before I deploy to prod.", "created_at": "2018-03-20 15:41:45", "user": 193831, "id": 374645681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374686495", "text": "It may takes months. We usually release every 6 weeks, but given 5.2 is going to be the official release, it may take more time.", "created_at": "2018-03-20 17:29:16", "user": 47848, "id": 374686495}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "<details>\r\n  <summary>Summary</summary>\r\n\r\n  - Remove\r\n    ```\r\n    *   Namespace error pages' CSS selectors to stop the styles from bleeding\r\n        into other pages when using Turbolinks.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28814))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 50d5baf7ed15908ce66c39cc62ce80ad99e313c3\r\n    and\r\n    `5-0-stable` by d1c4a39ed796a31efc51901e7e818609fb3cb7ec.\r\n\r\n  - Remove\r\n    ```\r\n    *   Allow irb options to be passed from `rails console` command.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29010))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by e91b48348c9a33447bf1bff6e043c043cf36439f.\r\n\r\n  - Remove\r\n    ```\r\n    *   Load environment file in `dbconsole` command.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29725))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 7f9342877a80bc9a2a283462babf7b829902dc78.\r\n\r\n  - Remove\r\n    ```\r\n    *   Gemfile for new apps: upgrade redis-rb from ~> 3.0 to 4.0.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30748))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix minitest rails plugin.\r\n        The custom reporters are added only if needed.\r\n        This will fix conflicts with others plugins.\r\n        ([Commit](https://github.com/rails/rails/commit/ac99916fcf7bf27bb1519d4f7387c6b4c5f0463d))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by caa76956d396a6a9feae7aa17adce784127e92cc.\r\n\r\n  - Remove\r\n    ```\r\n    *   Add support for compatibility with redis-rb gem for 4.0 version.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30748))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28.\r\n\r\n  - Remove\r\n    ```\r\n    *   Add `action_controller_api` and `action_controller_base` load hooks to be\r\n        called in `ActiveSupport.on_load`.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28402))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by b9a5fd706a821401cbe3ce11d7a18daa8267588f.\r\n\r\n  - Remove\r\n    ```\r\n    *   `driven_by` now registers poltergeist and capybara-webkit.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29315))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by c5dd45119a28fb1c41de6d27d63443480c86894e.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fallback `ActionController::Parameters#to_s` to `Hash#to_s`.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29630))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by c1014e435d26db867b2c15b74c9ef47ccff38edb\r\n    and\r\n    `5-0-stable` by 0e71fc3040edc3c28d12c07300f0162559bbe4e5.\r\n\r\n  - Remove\r\n    ```\r\n    *   Make `take_failed_screenshot` work within engine.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30421))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 595a231029ce402445da33eec62775cbe0da97de.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix optimized url helpers when using relative url root.\r\n        ([Pull Request](https://github.com/rails/rails/pull/31261))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by e9b77953a277a707ce1fb60e1f9963a833df9312.\r\n\r\n  - Remove\r\n    ```\r\n    *   Update `distance_of_time_in_words` helper to display better error messages\r\n        for bad input.\r\n        ([Pull Request](https://github.com/rails/rails/pull/20701))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 2c97fbf6503c9199f3fe5ed06222e7226dc6fcd9.\r\n\r\n  - Remove\r\n    ```\r\n    *   Generate field ids in `collection_check_boxes` and\r\n        `collection_radio_buttons`.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29412))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 2d8c10a7b1066d6a577096b4a86e310f1b0d2c22.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix issues with scopes and engine on `current_page?` method.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29503))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 2135daf0d552bbb2eca4208f8c33fb015cf052ab.\r\n\r\n  - Remove\r\n    ```\r\n    *   Bring back proc with arity of 1 in `ActionMailer::Base.default` proc\r\n        since it was supported in Rails 5.0 but not deprecated.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30391))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by b2bedb149274c8490c782c62dd8ab0bbae6a9730.\r\n\r\n  - Remove\r\n    ```\r\n    *   Add type caster to `RuntimeReflection#alias_name`.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28961))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by f644e7a6fddf1b239dc1af0b0c6be8af9f776918.\r\n\r\n  - Remove\r\n    ```\r\n    *   Loading model schema from database is now thread-safe.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29216))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 02926cfff6a403d28f83903b08ae7375fad8e836.\r\n    and\r\n    `5-0-stable` by 84bcfe5a6a65d3c2998d14b85b9f02560d3f9e98\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix destroying existing object does not work well when optimistic locking\r\n        enabled and `locking_column` is null in the database.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28926))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by e498052c5210e886f46c61deadd161f8ea41666f.\r\n\r\n  - Remove\r\n    ```\r\n    *   `ActiveRecord::Persistence#touch` does not work well\r\n        when optimistic locking enabled and `locking_column`,\r\n        without default value, is null in the database.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28914))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 1e2f63db78b9089fb7011eb954c88136f324e7c0.\r\n\r\n  - Remove\r\n    ```\r\n    *   Previously, when building records using a `has_many :through` association,\r\n        if the child records were deleted before the parent was saved,\r\n        they would still be persisted. Now, if child records are deleted\r\n        before the parent is saved on a `has_many :through` association,\r\n        the child records will not be persisted.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29593))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by a22c39e9cc08c052bb5c828b45533e5a01c896f1.\r\n\r\n  - Remove\r\n    ```\r\n    *   Query cache was unavailable when entering the `ActiveRecord::Base.cache`\r\n        block without being connected.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29609))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by fd6c8cdfe69ed3a0763f0ff1dc41d2d2ee2e8752\r\n    and\r\n    `5-0-stable` by 9f2532bb16b49751fbdda51846b156c3eca09054.\r\n\r\n  - Remove\r\n    ```\r\n    *   `Relation#joins` is no longer affected by the target model's\r\n        `current_scope`, with the exception of `unscoped`.\r\n        ([Commit](https://github.com/rails/rails/commit/5c71000d086cc42516934415b79380c2224e1614))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 3630d6354cab31bb233a1f1d7b1a4d2c24aef54d.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `unscoped(where: [columns])` removing the wrong bind values.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29780))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by d378fcb254462f9da8d921f0fa2e9b9868a7d34e.\r\n\r\n  - Remove\r\n    ```\r\n    *   When a `has_one` association is destroyed by `dependent: destroy`,\r\n        `destroyed_by_association` will now be set to the reflection, matching the\r\n        behaviour of `has_many` associations.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29855))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 8254a8be81c07dbdbc2a281bab72f23f93f6b12f.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `COUNT(DISTINCT ...)` with `ORDER BY` and `LIMIT`\r\n        to keep the existing select list.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29848))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 0e8d4edd56f44b27f33bd214aa03af60cc5d39ae.\r\n\r\n  - Remove\r\n    ```\r\n    *   Ensure `sum` honors `distinct` on `has_many :through` associations.\r\n        ([Commit](https://github.com/rails/rails/commit/566f1fd068711dfe557bef63406f8dd6d41d473d))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by c0a1dc256144b91aee5241fad2121e85e6d8093f.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `COUNT(DISTINCT ...)` for `GROUP BY` with `ORDER BY` and `LIMIT`.\r\n        ([Commit](https://github.com/rails/rails/commit/5668dc6b1863ef43be8f8ef0fb1d5db913085fb3))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 87ca68e76eec68ec61fc0d3d3bf315b4bfe45c42.\r\n\r\n  - Remove\r\n    ```\r\n    *   MySQL: Don't lose `auto_increment: true` in the `db/schema.rb`.\r\n        ([Commit](https://github.com/rails/rails/commit/9493d4553569118b2a85da84fd3a8ba2b5b2de76))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 8b6e694e5febdcb39f72d98ff9d5e7124cc0ca32.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix longer sequence name detection for serial columns.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28339))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by af9c1707ad49eb421cf76c1367da3efbf3c39aea\r\n    and\r\n    `5-0-stable` by 7025b1d8ebf694c288c71878b5229394ba3c0580.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `bin/rails db:setup` and `bin/rails db:test:prepare` create wrong\r\n        ar_internal_metadata's data for a test database.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30579))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by bb67b5f278c2dbca65b9dd03038788a4dbb4a21f\r\n    and\r\n    `5-0-stable` by 60437e6d3c99cbbb95a01f31d44be19f7b63e3eb.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix conflicts `counter_cache` with `touch: true` by optimistic locking.\r\n        ([Pull Request](https://github.com/rails/rails/pull/31405))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 5236ddaf35492513895d4a706435520e74ab723b.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `count(:all)` to correctly work `distinct` with custom SELECT list.\r\n        ([Commit](https://github.com/rails/rails/commit/c6cd9a59f200863ccfe8ad1d9c5a8876c39b9c5c))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 6beb4de7dd5205d9b08ce4eedbe383cb0b18540d.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix to invoke callbacks when using `update_attribute`.\r\n        ([Commit](https://github.com/rails/rails/commit/732aa34b6e6459ad66a3d3ad107cfff75cc45160))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 6346683bc58b79b2745e9305e65a6f1f1a63c288.\r\n\r\n  - Remove\r\n    ```\r\n    *   Use `count(:all)` in `HasManyAssociation#count_records` to prevent invalid\r\n        SQL queries for association counting.\r\n        ([Pull Request](https://github.com/rails/rails/pull/27561))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by eef3c89e3b38c99c79decb1ec5d6854f4ab9ea18.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix `count(:all)` with eager loading and having an order other than\r\n        the driving table.\r\n        ([Commit](https://github.com/rails/rails/commit/ebc09ed9ad9a04338138739226a1a92c7a2707ee))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 6df9b69b2363734175d8869393e83e6ce8b4d7b6.\r\n\r\n  - Remove\r\n    ```\r\n    *   PostgreSQL: Allow pg-1.0 gem to be used with Active Record.\r\n        ([Pull Request](https://github.com/rails/rails/pull/31671))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by a9c06f61d52c7cf03dc413dd50e9a9c5ab580703.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix that after commit callbacks on update does not triggered\r\n        when optimistic locking is enabled.\r\n        ([Commit](https://github.com/rails/rails/commit/7f9bd034c485c2425ae0164ff5d6374834e3aa1d))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by aaee10e6e4fdfbc8bb7dc6169ed9deea3638c5a8.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix regression in numericality validator when comparing Decimal and Float\r\n        input values with more scale than the schema.\r\n        ([Pull Request](https://github.com/rails/rails/pull/28584))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 5b1c3e5a8b02d0078bd2527ca0969b0d89fec433.\r\n    Note that there was incorrect link to PR,\r\n    original PR is https://github.com/rails/rails/pull/29249.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix to working before/after validation callbacks on multiple contexts.\r\n        ([Pull Request](https://github.com/rails/rails/pull/31483))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 0f7046a7f820186fd6fbe19a6142002cb8537fe6.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix implicit coercion calculations with scalars and durations.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29163),\r\n        [Pull Request](https://github.com/rails/rails/pull/29971))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 51ea27c04c60373d97e212389d587821deae6fe0,\r\n                    4d82e2aad98ddf7c1a54e588288dcf1f68ad7af4.\r\n\r\n  - Remove\r\n    ```\r\n    *   Fix modulo operations involving durations.\r\n        ([Commit](https://github.com/rails/rails/commit/a54e13bd2e8fb4d6aa0aebe59271699a2d62567b))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 233fa7eab36e7d6fb515b2e55c699bff9858ea5f.\r\n\r\n  - Remove\r\n    ```\r\n    *   Return all mappings for a timezone identifier in `country_zones`.\r\n        ([Commit](https://github.com/rails/rails/commit/cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 0222ebbe0695fd1fbaf98e64333d9d7b285a54ed.\r\n\r\n  - Remove\r\n    ```\r\n    *   Add support for compatibility with redis-rb gem for 4.0 version.\r\n        ([Pull Request](https://github.com/rails/rails/pull/30748))\r\n    ```\r\n    since it was backported to\r\n    `5-1-stable` by 37895311514a35333e5597018852eb0fe2c9eb28.\r\n    Related to #32252.\r\n</details>\r\n\r\nRelated to #32222, https://github.com/rails/rails/pull/32222#discussion_r174256536.\r\nFollow up a489cc81b6aa1187b169ddccc92f4c077fe0408f.\r\n", "labels": [], "number": 32281, "updated_at": "2018-03-18 16:52:25", "user": 6443532, "closed_at": "2018-03-18 16:48:47", "id": 306240374, "title": "Fix \"Ruby on Rails 5.2 Release Notes\" [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32281", "created_at": "2018-03-18 13:28:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373999203", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-18 13:28:37", "user": 7468109, "id": 373999203}, {"reactions": {"heart": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374015456", "text": "Backported to 5-2-stable in 09a156eb55", "created_at": "2018-03-18 16:52:25", "user": 350807, "id": 374015456}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\n> Randomization helps detect order-dependent tests (aka. crappy tests). Test\r\nmethods have been randomized for a long time; this commit randomizes the\r\norder test suites are run in as well.\r\n\r\nseattlerb/minitest#426 (2014)\r\n\r\nThis commit randomizes the order that Rails components are are run in.\r\n\r\n", "labels": [], "number": 32280, "updated_at": "2018-03-18 09:21:46", "user": 6261109, "closed_at": "2018-03-18 05:46:01", "id": 306194514, "title": "Randomize order of projects testing", "url": "https://api.github.com/repos/rails/rails/issues/32280", "created_at": "2018-03-17 22:06:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373956360", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-17 22:06:21", "user": 7468109, "id": 373956360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373974635", "text": "Thanks, but I don't think this gains us anything. Most people don't run the tests using that task (locally, it's more common to run the suite for the component you're working on; in CI, each component gets a separate container), and there just isn't much room for tests to contaminate each other because they use separate processes anyway.", "created_at": "2018-03-18 05:46:01", "user": 1034, "id": 373974635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373978852", "text": "Thank you for looking at this @matthewd . I understand most of your comment, and would be grateful if you clarify the rest: Is there _no room_ for contimaination, or just _not much room_ for it? In other words: Are we saving resources and taking a small risk by not running the full test suite in the CI, or is it just unnecessary?\r\n\r\nPersonally, I like running the complete test suite, and know some others who do: Are you saying that's a waste of resources?", "created_at": "2018-03-18 07:42:06", "user": 6261109, "id": 373978852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373981286", "text": "I stopped short of saying it's impossible, because the tests are all running out of the same files/filesystem: a sufficiently pathological test could introduce an ordering dependency. But it's not the same level as running multiple tests inside the same ruby process, where they naturally share globals, constants, etc.\r\n\r\nCI runs the full suite -- but it is split up across several containers to run concurrently. \r\n\r\nYou are of course welcome to run as many tests as you like... personally, I find that 99% of the time, the component's tests will identify any issues, so I don't bother with the slow railties tests when I'm making a change to Active Record. That allows me a fast turn-around locally (by running only the AR tests), and then CI will provide the more thorough check before my PR is merged.", "created_at": "2018-03-18 08:33:00", "user": 1034, "id": 373981286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373981914", "text": "Thank you again. Of course one does not want to run the full suite for every edit, but before merging... If I understand your comment (and the code) correctly: We do run all the tests in CI, but not the entire test suit in one FS. I hope the risk in that is much smaller than 1%.", "created_at": "2018-03-18 08:46:11", "user": 6261109, "id": 373981914}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373983121", "text": "I don't understand what risk you're seeing, nor how this change would alleviate it. ", "created_at": "2018-03-18 09:10:40", "user": 1034, "id": 373983121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373983663", "text": "> 99% of the time, the component's tests will identify any issues\r\n\r\nThe risk I see is that we don't rigorously test for issues arising from the components sharing an environment.\r\nThis change would only help make this task more rigorous, it does fall short of alleviating this risk in the CI. I'd be happy to change the CI accordingly, but have a feeling that would not be welcome.", "created_at": "2018-03-18 09:21:46", "user": 6261109, "id": 373983663}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This should be backported to 5-2-stable along with [the other change](https://github.com/rails/rails/commit/8f98054ef96f9335667071c70a7cf7d82ee92b07#diff-034764bc2980815d84b7181e29c961f3) made to these docs.\r\n\r\n### Summary\r\n1. Fix minor grammatical issues & expound on some potentially confusing sections\r\n1. Explain [hiredis](https://github.com/redis/hiredis) support\r\n1. Add basic configuration\r\n1. Update [example production config](http://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-rediscachestore) to fix syntax errors:\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"rails\", \"5.2.0.rc1\"\r\nend\r\n\r\nrequire \"minitest/autorun\"\r\n\r\n# Ensure backward compatibility with Minitest 4\r\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\nRails.application.configure do |config|\r\n  # http://edgeguides.rubyonrails.org/caching_with_rails.html#activesupport-cache-rediscachestore\r\n  cache_servers = %w[ \"redis://cache-01:6379/0\", \"redis://cache-02:6379/0\", … ],\r\n  config.cache_store = :redis_cache_store, url: cache_servers,\r\n\r\n  connect_timeout:    30,  # Defaults to 20 seconds\r\n  read_timeout:       0.2, # Defaults to 1 second\r\n  write_timeout:      0.2, # Defaults to 1 second\r\n  reconnect_attempts: 1,   # Defaults to 0\r\n\r\n  error_handler: -> (method:, returning:, exception:) {\r\n    # Report errors to Sentry as warnings\r\n    Raven.capture_exception exception, level: 'warning\",\r\n      tags: { method: method, returning: returning }\r\n  }\r\nend\r\n```\r\n\r\n```\r\n$ ruby -v\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n$ ruby test.rb  \r\ntest.rb:26: syntax error, unexpected tLABEL\r\n...tore = :redis_cache_store, url: cache_servers,\r\n...                           ^~~~\r\n```", "labels": [], "number": 32279, "updated_at": "2018-03-17 23:37:12", "user": 157270, "closed_at": "2018-03-17 23:09:10", "id": 306188053, "title": "Clarify Redis cache store docs", "url": "https://api.github.com/repos/rails/rails/issues/32279", "created_at": "2018-03-17 20:31:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [157270]}, "text": "The current documentation explicitly mentions only PostgreSQL (hstore/json) for use with `.store_accessor`, making it somewhat confusing what to choose on a MySQL 5.7+ setup (which introduced a json data type).\r\n\r\nThis PR adds explicit mention of MySQL 5.7+, making clear all the cases where `.store_accessor` is the appropriate choice.", "labels": [], "number": 32278, "updated_at": "2018-03-19 12:07:50", "user": 1595356, "closed_at": "2018-03-19 12:07:24", "id": 306176236, "title": "Add MySQL JSON reference to ActiveRecord::Store documentation", "url": "https://api.github.com/repos/rails/rails/issues/32278", "created_at": "2018-03-17 17:51:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373939479", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-17 17:51:29", "user": 7468109, "id": 373939479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374190277", "text": "Thanks for the PR @saveriomiroddi! ", "created_at": "2018-03-19 12:07:49", "user": 1080678, "id": 374190277}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Today there are two common ways for Rails developers to force their\r\napplications to communicate over HTTPS:\r\n\r\n* `config.force_ssl` is a setting in environment configurations that\r\n  enables the `ActionDispatch::SSL` middleware. With this middleware\r\n  enabled, all HTTP communication to your application will be redirected\r\n  to HTTPS. The middleware also takes care of other best practices by\r\n  setting HSTS headers, upgrading all cookies to secure only, etc.\r\n* The `force_ssl` controller method redirects HTTP requests to certain\r\n  controllers to HTTPS.\r\n\r\nAs a consultant, I've seen many applications with misconfigured HTTPS\r\nsetups due to developers adding `force_ssl` to `ApplicationController`\r\nand not enabling `config.force_ssl`. With this configuration, many\r\napplication requests can be served over HTTP such as assets, requests\r\nthat hit mounted engines, etc. In addition, because cookies are not\r\nupgraded to secure only in this configuration and HSTS headers are not\r\nset, it's possible for cookies that are meant to be secure to be sent\r\nover HTTP.\r\n\r\nThe confusion between these two methods of forcing HTTPS is compounded\r\nby the fact that they share an identical name. This makes finding\r\ndocumentation on the \"right\" method confusing.\r\n\r\nHTTPS throughout is quickly becomming table stakes for all web sites.\r\nSites are expected to operate over HTTPS for all communication,\r\nsensitive or otherwise. Let's encourage use of the broader-reaching\r\n`ActionDispatch::SSL` middleware and elminate this source of user\r\nconfusion. If, for some reason, applications need to expose certain\r\nendpoints over HTTP they can do so by properly configuring\r\n`config.ssl_options`.\r\n", "labels": [], "number": 32277, "updated_at": "2018-03-19 14:10:15", "user": 152152, "closed_at": "None", "id": 306169018, "title": "Deprecate controller level force_ssl", "url": "https://api.github.com/repos/rails/rails/issues/32277", "created_at": "2018-03-17 16:18:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373932448", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-17 16:18:56", "user": 7468109, "id": 373932448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374171376", "text": "@derekprior not 100% convinced of the misconfiguration argument - it's not something I've personally seen in the past few years on a variety of Rails apps and there's been one occurrence on a high-profile website I support where adding `config.force_ssl = true` broke other parts of the site due to the domain wide nature of HSTS headers. I think there's a time when this will be appropriate but I'm unsure we want to remove the flexibility that doing it in the controller provides whilst sites are still transitioning to HTTPS.\r\n\r\nHowever it's not a hill I willing to die on if other Rails maintainers feel differently.", "created_at": "2018-03-19 10:48:28", "user": 6321, "id": 374171376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374213865", "text": "@pixeltrix I should have been more specific when I said \"many apps\". I've seen it 4 times that I remember in the last few years of projects (3~6/year). Most recently, I submitted a PR to a project to switch to `config.force_ssl` and was told of incompatibilities in one aspect of the application the last time someone tried this (similar to what you cite). I think the better response to those incompatibilities is proper configuration of `config.ssl_options` until such time the incompatibilities can be remedied.\r\n\r\nThat said, I certainly expected some debate of this PR. I can see your points as well. I just think the expectation is that applications work entirely over HTTPS these days and that Rails should optimize for that. I feel like I'd be less likely to object to the controller-level construct if it wasn't identically named to the middleware level configuration.", "created_at": "2018-03-19 13:37:18", "user": 152152, "id": 374213865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374224516", "text": "> I think the better response to those incompatibilities is proper configuration of config.ssl_options until such time the incompatibilities can be remedied.\r\n\r\nThe problem is that not everything is possible through `config.force_ssl` - we initially tried that in the scenario I cite and then had to drop back down to the controller level.\r\n\r\nMaybe this is fine given the timeframe - it's not going to be removed until 6.1 which will likely be at least 18-24 months away.", "created_at": "2018-03-19 14:09:38", "user": 6321, "id": 374224516}], "assignees": [1529387, 1529387], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n```\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails/rails\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n    create_table :users do |t|\r\n      t.string :email, null: false\r\n\r\n      t.timestamps\r\n    end\r\n\r\n    create_table :accounts do |t|\r\n      t.string :name, null: false\r\n\r\n      t.timestamps\r\n    end\r\n\r\n    create_table :account_users do |t|\r\n      t.references :user, foreign_key: true\r\n      t.references :account, foreign_key: true\r\n\r\n      t.timestamps\r\n    end\r\nend\r\n\r\nclass User < ApplicationRecord\r\n  has_many :account_users\r\n  has_many :accounts, through: :account_users\r\nend\r\n\r\nclass Account < ApplicationRecord\r\n  has_many :account_users\r\n  has_many :users, through: :account_users\r\nend\r\n\r\nclass AccountUser < ApplicationRecord\r\n  belongs_to :user\r\n  belongs_to :account\r\n\r\n  validate :something_goes_wrong\r\n\r\n  def something_goes_wrong\r\n    errors.add(:base, 'error')\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_has_many_through_ids_setter\r\n    user = User.create!(email: 'test@test.com')\r\n    account = Account.create!(name: 'Test')\r\n    assert_equal false, user.update(account_ids: [account.id])\r\n  end\r\nend\r\n```\r\n\r\n### Actual behavior\r\nRaises an exception\r\n```\r\n  Account Load (0.4ms)  SELECT \"accounts\".* FROM \"accounts\" WHERE \"accounts\".\"id\" = 1\r\n  Account Load (0.1ms)  SELECT \"accounts\".* FROM \"accounts\" INNER JOIN \"account_users\" ON \"accounts\".\"id\" = \"account_users\".\"account_id\" WHERE \"account_users\".\"user_id\" = ?  [[\"user_id\", 1]]\r\n   (0.2ms)  rollback transaction\r\nActiveRecord::RecordInvalid: Validation failed: error\r\n\tfrom (irb):6\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.3.1\r\n", "labels": [], "number": 32276, "updated_at": "2018-03-21 18:50:30", "user": 2261869, "closed_at": "None", "id": 306159949, "title": "Has many through _ids setter raises an exception when saving safely.", "url": "https://api.github.com/repos/rails/rails/issues/32276", "created_at": "2018-03-17 14:19:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375055887", "text": "If you have a closer look on stacktrace this is what happening when calling `.update()`:\r\n\r\n1. Update is called [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/persistence.rb#L423-L430).  In the second line it calls `assign_attributes(attributes)` which raises exception\r\n2. Inside assign_attributes method user.accounts_ids = [...] is called\r\n3. This method is provided via collection association, defined [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/collection_association.rb#L54-L71) \r\n4. The problem with this method is it saves it to db via [save_through_record](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/has_many_through_association.rb#L81-L88) method\r\n5. save_through_record calls internally `.save!` which validate associated object (`AccountUser` in your case)\r\n\r\nI can see few approaches to this issue:\r\n1. Is it expected behaviour that [ids_writer](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/collection_association.rb#L54-L71) method saves new value to DB even before explicitly calling .save? \r\n2. Maybe we should wrap `assign_attributes` with rescue block in non-bang `.update` method. If it is validation error then we should return false instead of raising error. IMHO this is the way to go without breaking compatibility\r\n3. It is variation of 2nd point - there should be two versions of assign_attributes - bang and non-bang. This is the tough one as it breaks backward compatibility \r\n\r\nCorrect failing test is below:\r\n\r\n```ruby\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails/rails\"\r\n  gem \"sqlite3\"\r\n  gem \"pry\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :users do |t|\r\n    t.string :email, null: false\r\n\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :accounts do |t|\r\n    t.string :name, null: false\r\n\r\n    t.timestamps\r\n  end\r\n\r\n  create_table :account_users do |t|\r\n    t.references :user, foreign_key: true\r\n    t.references :account, foreign_key: true\r\n\r\n    t.timestamps\r\n  end\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  has_many :account_users\r\n  has_many :accounts, through: :account_users\r\nend\r\n\r\nclass Account < ActiveRecord::Base\r\n  has_many :account_users\r\n  has_many :users, through: :account_users\r\nend\r\n\r\nclass AccountUser < ActiveRecord::Base\r\n  belongs_to :user\r\n  belongs_to :account\r\n\r\n  validate :something_goes_wrong\r\n\r\n  def something_goes_wrong\r\n    errors.add(:base, 'error')\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_has_many_through_ids_setter\r\n    user = User.create!(email: 'test@test.com')\r\n    account = Account.create!(name: 'Test')\r\n    assert_equal false, user.account_ids = [account.id]\r\n  end\r\nend\r\n```\r\n\r\n**System configuration**\r\n\r\nRails version: master\r\n\r\nRuby version: 2.5.0\r\n\r\n/cc @Bartuz ", "created_at": "2018-03-21 18:49:22", "user": 1240505, "id": 375055887}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375056233", "text": "@michaldarda I would also go with 2nd point", "created_at": "2018-03-21 18:50:30", "user": 4388676, "id": 375056233}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nI updated some grammar in the Getting Started with Rails guide.\r\n\r\nThanks!", "labels": [], "number": 32275, "updated_at": "2018-03-16 23:42:39", "user": 7155767, "closed_at": "2018-03-16 23:41:35", "id": 306090193, "title": "Fix grammar in Getting Started with Rails", "url": "https://api.github.com/repos/rails/rails/issues/32275", "created_at": "2018-03-16 22:03:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373857278", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-16 22:04:00", "user": 7468109, "id": 373857278}, {"reactions": {"+1": [7155767]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373873228", "text": "Thanks, Elaine!\r\n\r\nWhen you open future documentation PRs, could you please put \"[ci skip]\" at the end of your commit messages? That’ll keep tests from running unnecessarily.", "created_at": "2018-03-16 23:42:39", "user": 94129, "id": 373873228}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For multi db applications you always had to create your own rake tasks which made setting up multi db a major PITA. This PR is Part 1 of a many that adds the initial underpinning for supporting multiple databases through the rake db commands. I'm doing this in small PR's so that reviewing is easier.\r\n\r\nThis app can be used to test out the features here. Just clone and use the commands below to play with testing re rake tasks for create, migrate, drop, and dump. https://github.com/eileencodes/multiple_databases_demo\r\n\r\nExamples below are assuming a three-tier database.yml like this:\r\n\r\n```yaml\r\ndevelopment:\r\n  primary:\r\n    <<: *default\r\n    database: multiple_databases_development\r\n  animals:\r\n    <<: *default\r\n    database: multiple_databases_development_animals\r\n    migrations_paths: \"db/animals_migrate\"\r\n\r\ntest:\r\n  primary:\r\n    <<: *default\r\n    database: multiple_databases_test\r\n  animals:\r\n    <<: *default\r\n    database: multiple_databases_test_animals\r\n    migrations_paths: \"db/animals_migrate\"\r\n```\r\n\r\n* Creates internal DatabaseConfig objects so it's easier to pass around the configs. We can then ask a DatabaseConfig for it's env or spec or config directly. This will come in handy for a larger refactoring I'm working on.\r\n* Ensures when running `bin/rails db:create`, `bin/rails db:migrate`, `bin/rails db:drop`, and `bin/rails db:schema|structure:dump` that tasks are run for all relevant envs and all databases in that env so given the above config `bin/rails db:create` will create the dev and test dbs for both primary and animals configs.\r\n* Adds new Rails db tasks that can perform create/migrate/drop on a specific database in an environment\r\n  * `bin/rails db:create:primary` or `bin/rails db:create:animals`\r\n  * `bin/rails db:drop:primary` or `bin/rails db:drop:animals`\r\n  * `bin/rails db:migrate:primary` or `bin/rails db:migrate:animals`\r\n\r\nFuture parts of this work will:\r\n* Add more rake task support for multi db as this only does the first 4 major ones\r\n* Add documentation for multi-db three-tier database.yml applications\r\n* Add documentation for the rake tasks\r\n* Refactoring of the connection management to fix the assumption that the config lives directly under development (see https://github.com/rails/rails/pull/32271 for more info there on what I'm talking about).\r\n* Eventually porting these to Rails commands\r\n* Dealing with rw/ro connection setups\r\n\r\ncc/ @matthewd @tenderlove @dhh ", "labels": ["activerecord"], "number": 32274, "updated_at": "2018-03-21 20:54:34", "user": 1080678, "closed_at": "None", "id": 306050758, "title": "Part 1 Easy Multi db in Rails: Add basic rake tasks for multi db setup", "url": "https://api.github.com/repos/rails/rails/issues/32274", "created_at": "2018-03-16 19:29:42", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "# Summary\r\nWhile I was taking a look to `ActiveJob`'s code I found this [TODO](https://github.com/rails/rails/blob/245c1dafa8bab409fbcd780a996c619240df7143/activejob/Rakefile#L5) about the Qu gem. The [Qu gem](https://github.com/bkeepers/qu)'s development seems to be discontinued since its last commit was 4 years ago.\r\n\r\nI propose to definitely remove it from the source code and from the documentation. I have already started a branch to remove it, if you give me the OK I will submit a PR with it.\r\n\r\nMany thanks.", "labels": [], "number": 32273, "updated_at": "2018-03-19 21:47:29", "user": 671550, "closed_at": "2018-03-19 21:47:29", "id": 306016910, "title": "ActiveJob: Remove Qu gem support", "url": "https://api.github.com/repos/rails/rails/issues/32273", "created_at": "2018-03-16 17:36:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374015189", "text": "I pinged a tweet to the maintainers - if they confirm its demise then yes, let's remove it.", "created_at": "2018-03-18 16:50:07", "user": 6321, "id": 374015189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374038709", "text": "@albertoalmagro okay, looks like there's no plans to bring it up to date so go ahead and create a PR, thanks.", "created_at": "2018-03-18 19:48:40", "user": 6321, "id": 374038709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374056412", "text": "Thanks @pixeltrix for pinging them and confirming it. I will let you know when its ready. Thanks!", "created_at": "2018-03-18 22:14:46", "user": 671550, "id": 374056412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374363823", "text": "@pixeltrix PR is ready: #32300\r\n\r\nThanks in advance.", "created_at": "2018-03-19 20:32:04", "user": 671550, "id": 374363823}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I am sending email to you user on account creation. \r\nBut rails is throwing following error:\r\n\r\n```\r\nActionView::Template::Error: undefined method `rstrip' for nil:NilClass\r\n    app/mailers/user_mailer.rb:32:in `new_user'\r\n    app/controllers/users_controller.rb:42:in `block (2 levels) in create'\r\n    app/controllers/users_controller.rb:39:in `create'\r\n```\r\nMy users controller create method: \r\n```\r\n  def create\r\n    @user = User.new(user_params)\r\n    respond_to do |format|\r\n      if @user.save\r\n        #render plain:  params[:user][:password]\r\n        UserMailer.new_user(@user, params[:user][:password]).deliver\r\n        format.html {\r\n          redirect_to users_path, notice: \"Admin was successfully created.\"\r\n        }\r\n      else\r\n        format.html { render :new }\r\n      end\r\n    end\r\n  end\r\n\r\n```\r\nMy users controller new_user method: \r\n```\r\n\r\ndef new_user(user, password)\r\n    @user = user\r\n    mail(to: \"abc@gmail.com\", subject: \"You have been added to fanhub\")\r\n  end\r\nend\r\n```\r\nit is giving me error on mail function. My email template is: \r\n\r\n`this is test`\r\n\r\nAny one can help me that why i am getting this issue and how can i resolve it? ", "labels": [], "number": 32272, "updated_at": "2018-03-16 23:45:04", "user": 5586359, "closed_at": "2018-03-16 23:45:03", "id": 306008928, "title": "ActionView::Template::Error: undefined method `rstrip' for nil:NilClass", "url": "https://api.github.com/repos/rails/rails/issues/32272", "created_at": "2018-03-16 17:11:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373873505", "text": "Please use the mailing list or StackOverflow for questions/help, where a wider community will be able to help you. The issues tracker is reserved for issues relating to Rails core only.", "created_at": "2018-03-16 23:44:46", "user": 2028176, "id": 373873505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373873540", "text": "Please use the [mailing list](https://groups.google.com/forum/#!forum/rubyonrails-talk) or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.", "created_at": "2018-03-16 23:45:03", "user": 987638, "id": 373873540}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"heart": [354185, 6443532]}, "text": "If you had a three-tier config, the `establish_connection` that's called\r\nin the Railtie on load can't figure out how to access the default\r\nconfiguration.\r\n\r\nThis is because Rails assumes that the config is the first value in the\r\nhash and always associated with the key from the environment. With a\r\nthree tier config however we need to go one level deeper.\r\n\r\nThis commit includes 2 changes. 1) removes a line from `resolve_all`\r\nwhich was parsing out the the environment from the config so instead of\r\ngetting\r\n\r\n```\r\n{\r\n  :development => {\r\n    :primary => {\r\n      :database => \"whatever\"\r\n    }\r\n  },\r\n    :animals => {\r\n      :database => \"whatever-animals\"\r\n    }\r\n  },\r\n  etc with test / prod\r\n}\r\n```\r\n\r\nWe'd instead end up with a config that had no attachment to it's\r\nenvioronment.\r\n\r\n```\r\n{\r\n  :primary => {\r\n    :database => \"whatever\"\r\n  }\r\n  :animals => {\r\n    :database => \"whatever-animals\"\r\n  }\r\n  etc - without test and prod\r\n}\r\n```\r\n\r\nNot only did this mean that Active Record didn't know how to establish a\r\nconnection, it didn't have the other necessary configs along with it in\r\nthe configs list.\r\n\r\nSo fix this I removed the line that deletes these configs.\r\n\r\nThe second thing this commit changes is adding this line to\r\n`establish_connection`\r\n\r\n```\r\nspec = spec[spec_name.to_sym] if spec[spec_name.to_sym]\r\n```\r\n\r\nWhen you have a three-tier config and don't pass any hash/symbol/env etc\r\nto `establish_connection` the resolver will automatically return both\r\nthe primary and secondary (in this case animals db) configurations.\r\nWe'll get an `database configuration does not specify adapter` error\r\nbecause AR will try to establish a connection on the `primary` key\r\nrather than the `primary` key's config. It assumes that the\r\n`development` or default env automatically will return a config hash,\r\nbut with a three-tier config we actually get a key and config `primary\r\n=> config`.\r\n\r\nThis fix is a bit of a bandaid because it's not the \"correct\" way to\r\nhandle this situation, but it does solve our immediate problem. The new\r\ncode here is saying \"if the config returned from the resolver (I know\r\nit's called spec in here but we interchange our meanings a LOT and what\r\nis returned is a three-tier config) has a key matching the \"primary\"\r\nspec name, grab the config from the spec and pass that to the\r\nestalbish_connection method\".\r\n\r\nThis works because if we pass `:animals` or a hash, or `:primary` we'll\r\nalready have the correct configuration to connect with.\r\n\r\nThis fixes the case where we want Rail to connect with the default\r\nconnection.\r\n\r\nComing soon is a refactoring that should eliminate the need to do this\r\nbut I need this fix in order to write the multi-db rake tasks that I\r\npromised in my RailsConf submission. `@tenderlove` and I are working on\r\nthe refactoring of the internals for connection management but it won't\r\nbe ready for a few weeks and this issue has been blocking progress.\r\n\r\ncc/ @tenderlove ", "labels": ["activerecord"], "number": 32271, "updated_at": "2018-03-17 16:11:24", "user": 1080678, "closed_at": "2018-03-16 19:18:27", "id": 305981064, "title": "Fix default connection handling with three-tier config", "url": "https://api.github.com/repos/rails/rails/issues/32271", "created_at": "2018-03-16 15:51:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6321, 248174, 327, 94129]}, "text": "### Summary\r\n\r\nAllow the use of the AWS Credentials Provider chain for S3 storage. If an explicit AWS `access_key_id` and `secret_access_key` are not provided in `storage.yml`, attempt to use environment variables, shared credentials, or IAM (instance or task) role credentials. Order of precedence is determined by the AWS SDK.\r\n\r\nAccess key ids and secret keys provided in `storage.yml` take precedence over any other credentials. Therefore, this change will not have any upgrade impact.\r\n\r\n**Thank you for the consideration**", "labels": ["activestorage"], "number": 32270, "updated_at": "2018-03-19 15:29:45", "user": 776994, "closed_at": "2018-03-19 15:25:41", "id": 305969084, "title": "Permit using the AWS Credentials Provider chain for S3 storage", "url": "https://api.github.com/repos/rails/rails/issues/32270", "created_at": "2018-03-16 15:20:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373746785", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @schneems (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-16 15:20:56", "user": 7468109, "id": 373746785}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373769064", "text": "@brianknight10 thanks for this - we should also allow the region to be set from the shared config.", "created_at": "2018-03-16 16:29:28", "user": 6321, "id": 373769064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373794352", "text": "Thanks @pixeltrix - I've added that functionality in another commit. This one is a little trickier because not all shared credentials may have a `region` specified.\r\n\r\nThe code now looks in the following order:\r\n\r\n1. The `region` setting in `storage.yml`\r\n2. The `AWS_REGION` environment variable\r\n3. The `AWS_DEFAULT_REGION` environment variable\r\n4. Uses the `us-east-1` region by default - that is the \"AWS Standard\" region for S3.\r\n\r\nAgain, this should not have any impact on existing users because the `region` setting is required currently.", "created_at": "2018-03-16 17:53:30", "user": 776994, "id": 373794352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374202480", "text": "@brianknight10 I wonder if we're going about this the wrong way - the S3 client will do all of this credential resolution for us if we don't supply the access_key_id, secret_access_key and region options. What if we just change the `initialize` method to this:\r\n\r\n``` ruby\r\ndef initialize(bucket:, upload: {}, **options)\r\n  @client = Aws::S3::Resource.new(**options)\r\n  @bucket = @client.bucket(bucket)\r\n\r\n  @upload_options = upload\r\nend\r\n```\r\n\r\nThis allows you to specify a profile in your storage.yml file then, e.g:\r\n\r\n``` yaml\r\ns3:\r\n service: S3\r\n bucket: \"activestorage\"\r\n profile: \"rails\"\r\n```\r\n\r\nAlso the all the environment vars will work too without us having to think about it. If you still want to explicitly add the access details to the YAML file then that still works too.", "created_at": "2018-03-19 12:58:18", "user": 6321, "id": 374202480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374206709", "text": "@pixeltrix - that certainly is much cleaner. I'll push another commit to make it so.", "created_at": "2018-03-19 13:13:09", "user": 776994, "id": 374206709}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374233025", "text": "Absolutely - these changes have been made (including the Edge guide)", "created_at": "2018-03-19 14:33:32", "user": 776994, "id": 374233025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374253748", "text": "Backported in 2a4a97b96c3a3aa0dfbc2007b06084a50fdf3443", "created_at": "2018-03-19 15:29:45", "user": 6321, "id": 374253748}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "\r\n### Steps to reproduce\r\n\r\n    # config/initializers/session_store.rb\r\n    Rails.application.config.session_store :cookie_store, key: '_project_session', domain: :all, tld_length: 2\r\n    # OR (which apparently is the same, but more restrictive)\r\n    Rails.application.config.session_store :cookie_store, key: '_project_session', domain: '.lvh.me'\r\n\r\n### Expected behavior\r\nSessions should be shared between subdomains and main domain\r\n    \r\n### Actual behavior\r\nWork great between subdomains and from domain to subdomain (`lvh.me -> jp.lvh.me`) but resets session from subdomain to domain (`jp.lvh.me -> lvh.me`)\r\n\r\n### System configuration\r\n**Rails version**: 4.2.10\r\n\r\n**Ruby version**: 2.5.0p0", "labels": [], "number": 32269, "updated_at": "2018-03-21 17:57:44", "user": 237847, "closed_at": "None", "id": 305956320, "title": "Session resets between subdomains", "url": "https://api.github.com/repos/rails/rails/issues/32269", "created_at": "2018-03-16 14:47:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373751766", "text": "@MattiaMalonni can you give some more details? What is the `Set-Cookie` header in the response being set to and what browser(s) are you testing in?", "created_at": "2018-03-16 15:35:58", "user": 6321, "id": 373751766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373756943", "text": "Sure, \r\n\r\n**Browser**: Chrome\r\n\r\n**Set-Cookie:** `lvh.me` _project_session=cFdEa1RqMVNtVWpwK3QzYXh3WWZ6VnNOSE9GRDh3Qm5RTUdGbWUwbWNzbGdVZ0NhN1lqeC82bGNlVm96bk1kOUl5bll3M3lOQTBINE56cHlsTDBXcmZNTXU5YUdJc2RxMXkzaUk0cVpsZXVKOUV1eEVXQjZJVjRNVHRqNmwwL3o1eVFaTzd4b0p0Mjh6VTI5MGF6V1p3PT0tLTFxdmtEa0xMakREUU5IanpEQ0lzUlE9PQ%3D%3D--5ef1acf3708b4fba64d1b51115007d3c213868d0; domain=.lvh.me; path=/; HttpOnly\r\n\r\n**Set-Cookie:** `subdomain.lvh.me` _project_session=cWVoL21NV0RIWkhReGFSc1VOb1pzRGVMREMxOStueTAyMFVXZnRpYklYeWplOUUzc214UTVhSGxSeFUwMWtkUWpVUldldXlHcklkUDBuM09jcHViblBVd05EVmd3VFFTbkdkNndDYys2RE10bERIVWdYVitMK1Z1SlpwQTFobFViTU12QzdEYS84NlZTMGZjK1dtVDZRPT0tLVdIVEJLTlQ1N2ZzaktzbzJha2p6OEE9PQ%3D%3D--09ece9f18ad076d77e29d29458bdfd26b2325220; domain=.lvh.me; path=/; HttpOnly", "created_at": "2018-03-16 15:51:24", "user": 237847, "id": 373756943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373760446", "text": "Just figured out that **Firefox** seems to behave correctly, as well as **Safari** (not tested in IE).\r\nChrome version: 65.0.3325.162", "created_at": "2018-03-16 16:01:41", "user": 237847, "id": 373760446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374908560", "text": "@MattiaMalonni have you tried without the leading '.' in Chrome?", "created_at": "2018-03-21 11:36:12", "user": 6321, "id": 374908560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375039072", "text": "@MattiaMalonni I became the same problem.\r\nHave you write `use ActionDispatch::Session::CookieStore` somewhere?\r\n\r\nIn my case, the contents of `request.session_options` were restored to default in a controller.\r\nSo, I noticed that the rack middleware of session was reloaded.\r\n\r\nI hope this will help.", "created_at": "2018-03-21 17:57:44", "user": 6420854, "id": 375039072}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "To have syntax higlihting in an editor try to preserve original extension of edited file\r\n", "labels": [], "number": 32268, "updated_at": "2018-03-21 09:42:29", "user": 10766, "closed_at": "None", "id": 305902738, "title": "Change temporary file name extension while editing encrypted file.", "url": "https://api.github.com/repos/rails/rails/issues/32268", "created_at": "2018-03-16 12:02:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373693250", "text": "r? @rafaelfranca\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-16 12:02:58", "user": 7468109, "id": 373693250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374880605", "text": "r? @kaspth ", "created_at": "2018-03-21 09:42:28", "user": 10766, "id": 374880605}], "assignees": [350807, 350807], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nRemoving all unnecessary usage of `freeze` on strings.", "labels": [], "number": 32267, "updated_at": "2018-03-16 10:52:51", "user": 12901870, "closed_at": "2018-03-16 10:06:26", "id": 305862417, "title": " Remove all unnecessary `freeze` on strings", "url": "https://api.github.com/repos/rails/rails/issues/32267", "created_at": "2018-03-16 09:49:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373659353", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-16 09:49:13", "user": 7468109, "id": 373659353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373664943", "text": "Hi @M-Sayed - thanks for the PR but even though we're only supporting 2.4+ on master we're not removing the freeze calls yet since it'll make backporting fixes harder while 5.2 is still the main supported version.", "created_at": "2018-03-16 10:06:25", "user": 6321, "id": 373664943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373678008", "text": "Also it's a duplicate of https://github.com/rails/rails/pull/32031", "created_at": "2018-03-16 10:52:50", "user": 6321, "id": 373678008}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n```rb\r\npusher = Pusher.create(scheduled_at: '2017-12-12 12:12:12')\r\nold_time = pusher.scheduled_at\r\n\r\n# here same date with previous date\r\npusher.assign_attributes(scheduled_at: '2017-12-12 12:12:12')\r\nnew_time = pusher.pusher.scheduled_at\r\n\r\np old_time == new_time        # => true\r\npusher.scheduled_at_changed?  # => true\r\n```\r\n\r\n### Expected behavior\r\n\r\n``pusher.scheduled_at_changed?`` should be false, because two time value same.\r\n\r\n### Actual behavior\r\n``pusher.scheduled_at_changed?`` is true.\r\n\r\n### System configuration\r\n**Rails version**:\r\nRails 4.1.16\r\n\r\n**Ruby version**:\r\nRuby 2.3.4\r\n", "labels": ["needs work"], "number": 32266, "updated_at": "2018-03-18 01:10:03", "user": 549126, "closed_at": "2018-03-18 01:10:03", "id": 305791630, "title": "[ActiveRecord] Rails datetime type column changed? method behavior not correct.", "url": "https://api.github.com/repos/rails/rails/issues/32266", "created_at": "2018-03-16 03:34:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373603772", "text": "Are you able to reproduce this with Rails 5.1?", "created_at": "2018-03-16 04:58:37", "user": 47848, "id": 373603772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373696640", "text": "I am not able to reproduce this on either version. @zw963 am I missing something here?\r\n\r\n```rb\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  gem \"rails\", \"5.2.0rc1\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.datetime :scheduled_at\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_changed\r\n    post = Post.create!(scheduled_at: '2017-12-12 12:12:12')\r\n    old_time = post.scheduled_at\r\n\r\n    post.assign_attributes(scheduled_at: '2017-12-12 12:12:12')\r\n    new_time = post.scheduled_at\r\n\r\n    assert old_time == new_time\r\n    assert !post.scheduled_at_changed?\r\n  end\r\nend\r\n```", "created_at": "2018-03-16 12:19:13", "user": 13696143, "id": 373696640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373895753", "text": "@composerinteralia , hi, I change your's config to my exact project rails version, but could not reproduce too.\r\n\r\n```rb\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  gem \"rails\", \"4.1.16\"\r\n  gem \"mysql2\", '0.3.20'\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire 'active_support/testing/time_helpers'\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# Need create test_time_database with mysql console:\r\n# CREATE DATABASE test_time_database DEFAULT CHARACTER SET utf8;\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(\r\n  adapter: \"mysql2\",\r\n  database: \"ikcrm_cms_test\",\r\n  host: '127.0.0.1',\r\n  port: '3306',\r\n  username: 'root',\r\n  password: '123456'\r\n)\r\n\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table \"promotion_pushers\", force: true do |t|\r\n    t.integer  \"promotion_id\"\r\n    t.integer  \"user_id\"\r\n    t.integer  \"expected_corp_count\",           default: 0\r\n    t.integer  \"expected_user_count\",           default: 0\r\n    t.integer  \"product_type\",                  default: 0\r\n    t.integer  \"range_type\",                    default: 0\r\n    t.integer  \"role_type\",                     default: 0\r\n    t.integer  \"pusher_type\",                   default: 0\r\n    t.integer  \"button_link_type\",              default: 0\r\n    t.boolean  \"delayed\",                       default: false\r\n    t.datetime \"scheduled_at\"\r\n    t.datetime \"executed_at\"\r\n    t.string   \"title\"\r\n    t.string   \"description\"\r\n    t.string   \"image_file_name\"\r\n    t.string   \"image_content_type\"\r\n    t.integer  \"image_file_size\"\r\n    t.datetime \"image_updated_at\"\r\n    t.string   \"image_up\"\r\n    t.string   \"button_link\"\r\n    t.string   \"button_text\"\r\n    t.boolean  \"disabled\",                      default: true\r\n    t.integer  \"labelid\"\r\n    t.datetime \"notification_update_pusher_at\"\r\n    t.string   \"crm_api_host\",                                  null: false\r\n    t.datetime \"created_at\"\r\n    t.datetime \"updated_at\"\r\n    t.integer  \"user_not_active_days\"\r\n    t.integer  \"user_no_activity_days\"\r\n  end\r\nend\r\n\r\nclass PromotionPusher < ActiveRecord::Base\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_changed\r\n    @pp = PromotionPusher.create(scheduled_at: '2017-12-12 13:12:12', crm_api_host: 'http://www.example.org')\r\n    assert_equal true, @pp.persisted?\r\n    assert_equal '2017-12-12 13:12:12', @pp.scheduled_at.strftime('%F %T')\r\n\r\n    @pp.assign_attributes(scheduled_at: '2017-12-12 13:12:12')\r\n    assert_equal false, @pp.scheduled_at_changed?\r\n  end\r\nend\r\n```", "created_at": "2018-03-17 05:26:14", "user": 549126, "id": 373895753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373895947", "text": "But, for my corp old project with SAME database(`ikcrm_cms_test`) and almost remove all model methods, still not working ...\r\n\r\n```rb\r\n# model/promotion_pusher.rb\r\n\r\n# == Schema Information\r\n#\r\n# Table name: promotion_pushers\r\n#\r\n#  id                            :integer          not null, primary key\r\n#  promotion_id                  :integer\r\n#  user_id                       :integer\r\n#  expected_corp_count           :integer          default(0)\r\n#  expected_user_count           :integer          default(0)\r\n#  product_type                  :integer          default(0)\r\n#  range_type                    :integer          default(0)\r\n#  role_type                     :integer          default(0)\r\n#  pusher_type                   :integer          default(0)\r\n#  button_link_type              :integer          default(0)\r\n#  delayed                       :boolean          default(FALSE)\r\n#  scheduled_at                  :datetime\r\n#  title                         :string(255)\r\n#  description                   :string(255)\r\n#  image_file_name               :string(255)\r\n#  image_content_type            :string(255)\r\n#  image_file_size               :integer\r\n#  image_updated_at              :datetime\r\n#  image_up                      :string(255)\r\n#  button_link                   :string(255)\r\n#  button_text                   :string(255)\r\n#  disabled                      :boolean          default(TRUE)\r\n#  labelid                       :integer\r\n#  notification_update_pusher_at :datetime\r\n#  crm_api_host                  :string(255)      not null\r\n#  created_at                    :datetime\r\n#  updated_at                    :datetime\r\n#\r\n\r\nclass PromotionPusher < ActiveRecord::Base\r\n  belongs_to :promotion\r\n  belongs_to :user\r\nend\r\n```\r\n\r\n```rb\r\n# spec/models/promotion_pusher_spec.rb\r\n\r\nrequire \"minitest/autorun\"\r\n\r\nENV[\"RAILS_ENV\"] ||= 'test'\r\nrequire File.expand_path(\"../../../config/environment\", __FILE__)\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_changed\r\n    @pp = PromotionPusher.create(scheduled_at: '2017-12-12 13:12:12', crm_api_host: 'http://www.example.org')\r\n    assert_equal true, @pp.persisted?\r\n    assert_equal '2017-12-12 13:12:12', @pp.scheduled_at.strftime('%F %T')\r\n    @pp.assign_attributes(scheduled_at: '2017-12-12 13:12:12')\r\n    assert_equal true, @pp.scheduled_at_changed?\r\n  end\r\nend\r\n```\r\n\r\nI think some very weird things is happen for this project which caused by some gem?", "created_at": "2018-03-17 05:30:53", "user": 549126, "id": 373895947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373921210", "text": "I try to remove most ActiveRecord relative gems, it still happen in this old project ...", "created_at": "2018-03-17 13:45:12", "user": 549126, "id": 373921210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373921335", "text": "BTW: in  my old project test, i try another string column too, but, that behavior work as expect.\r\nwhen assign same string with exist value, `string_column_changed?` method return false, \r\nthis issue only happen on datetime column", "created_at": "2018-03-17 13:47:04", "user": 549126, "id": 373921335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373964911", "text": "Can not reproduce with the executable test case, so I think that this is probably an application specific issue.  \r\nTherefore, I close this. But if you can reproduce with the executable test case, please feel free to reopen. Thanks.\r\n", "created_at": "2018-03-18 01:10:02", "user": 987638, "id": 373964911}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When you assign a regular hash to a key in a HashWithIndifferentAccess, it returns the regular hash but the value stored at the key is a HashWithIndifferentAccess. This is very unexpected.\r\n\r\nThe following code snippets should all return true but the first one does not:\r\n\r\n```ruby\r\nh = {}.with_indifferent_access\r\nval = {}\r\n(h['hi'] = val).object_id == h['hi'].object_id\r\n```\r\n```ruby\r\nh = {}.with_indifferent_access\r\nval = {}.with_indifferent_access\r\n(h['hi'] = val).object_id == h['hi'].object_id\r\n```\r\n```ruby\r\nh = {}.with_indifferent_access\r\nval = []\r\n(h['hi'] = val).object_id == h['hi'].object_id\r\n```", "labels": [], "number": 32265, "updated_at": "2018-03-15 23:27:43", "user": 279781, "closed_at": "2018-03-15 23:27:43", "id": 305750777, "title": "HashWithIndifferentAccess#[]= returns wrong value when assigning a hash", "url": "https://api.github.com/repos/rails/rails/issues/32265", "created_at": "2018-03-15 23:12:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373554735", "text": "This is how ruby works, assignments always return the argument.", "created_at": "2018-03-15 23:27:43", "user": 47848, "id": 373554735}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\nRunning 5.2.0.rc1 with limited gemset, generated a singularly named controller \"DasboardController\" with associated helpers etc, and a corresponding view.  Set root to dashboard#index.\r\n\r\n\r\n### Expected behavior\r\nWould expect to behave as normal, only thing different is the naming style of the controller.\r\n\r\n### Actual behavior\r\nWhile running better_errors, I am able to see that it is failing after running `uninitialized constant DashboardsController`\r\n\r\nIn particular, it is failing on lines 540 and 541 of _activesupport (5.2.0.rc1) lib/active_support/dependencies.rb_\r\n\r\n```\r\n      name_error = NameError.new(\"uninitialized constant #{qualified_name}\", const_name)\r\n\r\n      name_error.set_backtrace(caller.reject { |l| l.starts_with? __FILE__ })\r\n```\r\n\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**:  2.5\r\n\r\nI'd fix submit a PR but am just not good enough to know where it is failing and how to fix it. Would love help working through this though so I can help contribute.\r\n", "labels": [], "number": 32264, "updated_at": "2018-03-16 14:39:56", "user": 11435593, "closed_at": "2018-03-16 14:39:55", "id": 305742937, "title": "Rails 5.2.0.rc1 Active Support Unable hande Singular Named Controllers", "url": "https://api.github.com/repos/rails/rails/issues/32264", "created_at": "2018-03-15 22:35:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373546392", "text": " Can you please provide a sample application that reproduces the error?", "created_at": "2018-03-15 22:43:40", "user": 47848, "id": 373546392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373703472", "text": "Make sure the controller file name is dashboard_controller.rb and not dashboards_controller.rb.\r\nAlso if using resources in routes use:\r\n  resources :dashboard\r\n  root \"dashboard#index\"\r\n\r\nPls tell if this works.", "created_at": "2018-03-16 12:49:48", "user": 9012843, "id": 373703472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373718989", "text": "@rafaelfranca Sure thing, I uploaded a version of it giving me issues here:\r\nhttps://github.com/richjdsmith/for_5.2.0.rc1_debug\r\n\r\n\r\nTo run it just needs `$yarn install` and a credentials/master.key added to config.\r\n\r\nFrom there, running `$rails s` and visiting localhost:3000/dashboard gets you straight to the issue.\r\n\r\n@kabhinav25 I ensured that all controller files and associated files are named singularly, not plural, no luck :/ ", "created_at": "2018-03-16 13:51:12", "user": 11435593, "id": 373718989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373733668", "text": "> ```ruby\r\n>  root 'static_pages#index'\r\n>  resource :dashboard\r\n> ```\r\n\r\nThat's not \"Set root to dashboard#index\".\r\n\r\nPer [the guide](http://guides.rubyonrails.org/routing.html#singular-resources), when using resourceful routing, controllers are always plural:\r\n\r\n> 📔 Because you might want to use the same controller for a singular route (`/account`) and a plural route (`/accounts/45`), singular resources map to plural controllers. So that, for example, `resource :photo` and `resources :photos` creates both singular and plural routes that map to the same controller (`PhotosController`).", "created_at": "2018-03-16 14:39:55", "user": 1034, "id": 373733668}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nUsing gem 'mysql2' for the activerecord adapter\r\n\r\nIn your migration:\r\n\r\n```ruby\r\nclass CreateDepthChartPositions < ActiveRecord::Migration[5.1]\r\n  def change\r\n    create_table :depth_chart_positions do |t|\r\n      t.references :position\r\n    end\r\n\r\n    add_foreign_key :depth_chart_positions, :position, on_delete: :cascade\r\n  end\r\nend\r\n```\r\n\r\nLink to docs http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_foreign_key\r\n\r\n### Expected behavior\r\nIt should set the on delete property on the foreign key\r\n\r\n### Actual behavior\r\nOn delete is not set\r\n\r\n```\r\nCONSTRAINT `fk_rails_c0d08bfee6` FOREIGN KEY (`position_id`) REFERENCES `positions` (`id`)\r\n```\r\n\r\n### System configuration\r\n**Rails version**: ~5.4.1~ 5.1.4\r\n\r\n**Ruby version**: 2.4.0\r\n\r\n**MySQL**: 5.5.5-10.1.14-MariaDB\r\n\r\nI've also tried making the second parameter in `add_foreign_key` to the plural table name `:positions`. Still no luck. Have also tried `t.references :position, foreign_key: { on_delete: :cascade }`\r\n", "labels": ["activerecord"], "number": 32263, "updated_at": "2018-03-16 00:04:31", "user": 2093630, "closed_at": "2018-03-16 00:04:31", "id": 305738352, "title": "Cannot set 'on_delete' in migration with MySQL", "url": "https://api.github.com/repos/rails/rails/issues/32263", "created_at": "2018-03-15 22:16:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373546043", "text": "Which version of Rails are you using? 5.1.4?", "created_at": "2018-03-15 22:42:04", "user": 47848, "id": 373546043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373547610", "text": "Haha yeah that'd be it. Apparently I can't read correctly", "created_at": "2018-03-15 22:49:35", "user": 2093630, "id": 373547610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373556058", "text": "Ah. Didn't know that rails cached schema in `db/schema.rb`. I think that's the issue. Going to test and come back to close if that's the case", "created_at": "2018-03-15 23:35:42", "user": 2093630, "id": 373556058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373561168", "text": "Yeah that was the issue. I dropped the db / fixed a migration / reran the migration and it wasn't updating because the `config/schema.rb` had not changed.\r\n\r\nDoing:\r\n\r\n```\r\nrails db:drop\r\nrails db:create\r\nrails db:schema:dump\r\nrails db:migrate\r\n```\r\n\r\nfixed the issue. (Obviously don't do this on production 😆 )", "created_at": "2018-03-16 00:04:31", "user": 2093630, "id": 373561168}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\nCheck exclude before flagging cookies as secure in ActionDispatch::SSL\r\n\r\nWhen `config.force_ssl = true`, it does three things: \r\n\r\n1. Permanently redirects `http://` requests to `https://`\r\n2. Flags cookies as secure and tells the browser to not send cookies along with `http://` requests \r\n3. Tells the browser to remember the site as TLS-only and automatically redirect non-TLS requests\r\n\r\nWe would typically want all three of these defaults when we enable `config.force_ssl = true`. However, that might not be the case when we want to exclude a request from redirection to an `https://` enabled host.\r\n\r\n```\r\nconfig.force_ssl = true\r\nconfig.ssl_options = {\r\n  redirect: {\r\n    host: ENV[\"APP_HOST\"], \r\n    exclude: -> request { \r\n      request.domain == \"herokuapp.com\" \r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI ran into this issue when trying to migrate Review Apps from Heroku's Public Space to Private Space, where all of Heroku's Review Apps have a default domain `http://<my-pr-app>.herokuapp.com`, and the only way to enable `https` on an app in the Private Space is to give it a custom domain and an SSL cert. Since Review Apps are meant to be spun up temporarily, and torn down, I think adding a custom domain and SSL cert to an app that is meant to be destroyed 24 hours later is a hassle. Heroku recommends in their documentation to exclude redirection to an `https://` enabled site for their default domain `herokuapp.com` in order to access an app without a custom domain in the Private Space.\r\n\r\nWith this setup, I want all requests that don't match the domain `herokuapp.com` to be redirected to an `https://` enabled host, and for all requests that match my example to be excluded from redirection (i.e. `http://<my-pr-app.herokuapp.com`).The problem is, even though I am excluding `herokuapp.com` from redirection, I never get a session cookie because that is automatically set to secure. This means I can never verify the CSRF/authenticity token on any forms I submit. The error I receive when making any `POST`, `PUT`, or `PATCH` request is a status `422 unprocessable entity` and `ActionController::InvalidAuthenticityToken`.\r\n", "labels": [], "number": 32262, "updated_at": "2018-03-15 22:00:45", "user": 19142117, "closed_at": "2018-03-15 21:29:22", "id": 305703474, "title": "Check exclude before flagging cookies as secure in ActionDispatch::SSL", "url": "https://api.github.com/repos/rails/rails/issues/32262", "created_at": "2018-03-15 20:13:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373508160", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-15 20:13:59", "user": 7468109, "id": 373508160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373529830", "text": "Thank you", "created_at": "2018-03-15 21:32:51", "user": 47848, "id": 373529830}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nSimple refactor of shortcut methods to use delegate pattern.", "labels": [], "number": 32261, "updated_at": "2018-03-15 23:03:39", "user": 3427835, "closed_at": "2018-03-15 23:03:39", "id": 305683000, "title": "Refactored UploadedFile shortcut methods to use delegate.", "url": "https://api.github.com/repos/rails/rails/issues/32261", "created_at": "2018-03-15 19:07:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373489667", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-15 19:07:41", "user": 7468109, "id": 373489667}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`it's` -> `its`\r\n", "labels": [], "number": 32260, "updated_at": "2018-03-15 20:55:57", "user": 225802, "closed_at": "2018-03-15 19:32:49", "id": 305672544, "title": "Fix typo in active_job_basics.md", "url": "https://api.github.com/repos/rails/rails/issues/32260", "created_at": "2018-03-15 18:35:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373480186", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @schneems (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-15 18:35:38", "user": 7468109, "id": 373480186}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373496725", "text": "Thanks!", "created_at": "2018-03-15 19:32:55", "user": 350807, "id": 373496725}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There's an open issue in the Dalli repository that has emerged with the release of 2.7.7, but looks like it might be a Rails issue.  The Dalli issue can be found here - https://github.com/petergoldstein/dalli/issues/678\r\n\r\nEssentially the problem is, when using ActionDispatch::Session::MemCacheStore with Dalli 2.7.7, new session creation fails.\r\n\r\n### Steps to reproduce\r\n\r\n1. Add Dalli 2.7.7 to the Gemfile and bundle\r\n2. Start the Rails server with MemCacheStore configured as the session store\r\n3. Access a page\r\n\r\n### Expected behavior\r\n\r\nThe page should render\r\n\r\n### Actual behavior\r\n\r\nAn error is raised - ActionView::Template::Error (nil can't be coerced into Integer)\r\n\r\nThis underlying exception is originally raised in the generate_sid method - https://github.com/rack/rack/blob/b37356ee881c0de4266165dacb8af4efaebaf4ec/lib/rack/session/abstract/id.rb#L254 - in Rack.  The '@sidbits' variable is nil, which causes the error in question.\r\n\r\nThe '@sidbits' variable is nil because of the inclusion of the ActionDispatch::Session::Compatibility module into MemCacheStore.  It's very unclear what this module is supposed to do, and doubly unclear why it's clearing out the '@sidbits' variable.\r\n\r\nDoes anyone on the Rails team have any insight on the above?  I suspect the best fix is to remove the Compatibility inclusion in MemCacheStore, but I don't know enough about its purpose to be sure.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.x\r\n\r\n**Ruby version**: 2.4.x\r\n", "labels": [], "number": 32259, "updated_at": "2018-03-16 11:56:55", "user": 421488, "closed_at": "None", "id": 305599541, "title": "ActionDispatch::Session::MemCacheStore compatibility with Dalli 2.7.7", "url": "https://api.github.com/repos/rails/rails/issues/32259", "created_at": "2018-03-15 15:24:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373432731", "text": "@petergoldstein thanks, we're already aware and there's a PR (#32258) to fix this. I have concerns over the brittleness of the fix though and also whether it has any backward compatibility issues - do you have insights to share? ", "created_at": "2018-03-15 16:12:50", "user": 6321, "id": 373432731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373473136", "text": "@pixeltrix So the fix in #32258 looks odd to me.  I still don't understand the role of the Compatibility module, and the alias just adds more confusion.\r\n\r\nIf this is the behavior we wish to preserve (the generate_sid method from Compatibility), why wouldn't we just pull that into the Rack::Session::Dalli class and eliminate the Compatibility class entirely.  Using yet another method alias seems confusing and (as you note) brittle.\r\n\r\nI can release a 2.7.8 on Dalli as needed to resolve this issue once we decide on the appropriate path forward.", "created_at": "2018-03-15 18:12:55", "user": 421488, "id": 373473136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373692062", "text": "I'm unsure of the exact role that `Compatibility` plays but it's probably to normalize behaviour across versions and variants of the session stores since it affects the session key and id generation.\r\n\r\nThe problem is that `get_session` and `destroy_session` bypass `generate_sid` and call the `generate_sid_with` method instead - understandable since otherwise two clients will be checked out from the pool. If that's the case do you need to override `generate_sid`? Can you not just call the original `generate_sid` from within `generate_sid_with`? AFAICS nothing else calls `generate_sid` directly - I've made a PR with the change here: petergoldstein/dalli#679.", "created_at": "2018-03-16 11:56:55", "user": 6321, "id": 373692062}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "`Session::MemCacheStore` uses its own method to generate the sid so that it does not use the method provided by rack. \r\nHowever, by https://github.com/petergoldstein/dalli/commit/9f9c508afab263a2451f2209c4396daf98d33a1b, an alias is defined for `generate_sid`, and by calling that alias, the method provided by rack is called to generate sid.  \r\nHowever, `generate_sid` was called while initialization was not done correctly, resulting in an error.\r\nhttps://travis-ci.org/rails/rails/jobs/353788947#L1429-L1490 \r\n\r\nIn order to avoid this, `Session::MemCacheStore` also defines the same alias so that `generate_sid` held by `Session::MemCacheStore` is called.\r\n", "labels": [], "number": 32258, "updated_at": "2018-03-16 12:20:01", "user": 987638, "closed_at": "2018-03-16 11:58:31", "id": 305540012, "title": "Make `Session::MemCacheStore` work with Dalli 2.7.7 ", "url": "https://api.github.com/repos/rails/rails/issues/32258", "created_at": "2018-03-15 12:51:20", "comments": [{"reactions": {"+1": [987638]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373692407", "text": "I think we need to fix this in the dalli gem otherwise we need to backport this a long way so that people can update the version of dalli in their app.", "created_at": "2018-03-16 11:58:31", "user": 6321, "id": 373692407}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nIn the spirit of \"convention over configuration\", I think we should allow custom `activestorage` route scope. In order to support this, a new config option `config.active_storage.mount_path` may be introduced. This option currently defaults to `/rails/active_storage` \r\n\r\n### Other Information\r\n\r\nIn order to keep consistency with other rails's parts, I think we should change `/rails/active_storage` scope to just `/storage` like it is `/cable` for `actioncable`.\r\n\r\n### Example\r\n\r\n```ruby\r\nconfig.active_storage.mount_path = \"/storage123\"\r\n```\r\n\r\n```\r\n       rails_service_blob GET    /storage123/blobs/:signed_id/*filename(.:format)                               active_storage/blobs#show\r\nrails_blob_representation GET    /storage123/representations/:signed_blob_id/:variation_key/*filename(.:format) active_storage/representations#show\r\n       rails_disk_service GET    /storage123/disk/:encoded_key/*filename(.:format)                              active_storage/disk#show\r\nupdate_rails_disk_service PUT    /storage123/disk/:encoded_token(.:format)                                      active_storage/disk#update\r\n     rails_direct_uploads POST   /storage123/direct_uploads(.:format)                                           active_storage/direct_uploads#create\r\n```\r\n\r\n\r\nThanks!\r\n", "labels": [], "number": 32257, "updated_at": "2018-03-15 20:13:18", "user": 176610, "closed_at": "2018-03-15 16:17:40", "id": 305495064, "title": "Add config.active_storage.mount_path option", "url": "https://api.github.com/repos/rails/rails/issues/32257", "created_at": "2018-03-15 10:33:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373331421", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-15 10:33:40", "user": 7468109, "id": 373331421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373434501", "text": "> In the spirit of \"convention over configuration\",\r\n\r\nThis is the diametric opposite of convention over configuration. Thanks, but we’re not going to make this configurable without a compelling justification.", "created_at": "2018-03-15 16:17:40", "user": 94129, "id": 373434501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373507959", "text": "My bad. What I meant to say was that I think there has to be meaningful __default__, that __can__ be changed. I don't think people want to see the framework's name all over their links, but that is my personal opinion, and maybe you have more strong argument about that.\r\n\r\nHowever, Thank you for your time!", "created_at": "2018-03-15 20:13:18", "user": 176610, "id": 373507959}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi folks,\r\n\r\nThis looks like a small bug in PostgreSQL connection adapter. Here's how it goes.\r\n\r\nGiven the following index definition, which is valid in PostgreSQL:\r\n\r\n```ruby\r\n# (byebug) inddef\r\n\"CREATE INDEX organizations_on_normalized_name ON organizations USING btree (translate(lower((name)::text), '（）／＋－；“”‘’ \\t\\n\\r'::text, '()/+-;\\\"\\\"'''''::text))\"\r\n```\r\n\r\nThe original code used to parse it is `inddef.scan(/ USING (\\w+?) \\((.+?)\\)(?: WHERE (.+))?\\z/).flatten`.\r\n\r\nThere's a `\\n` in the index expression so the index definition is treated as a two line string. Therefore the original regexp failed to parse it as a whole.\r\n\r\nThe solution is to simply indicate this regexp is ready to parse multiline text by adding the `/m` suffix flag to the regexp.\r\n\r\n```\r\ninddef = \"CREATE INDEX organizations_on_normalized_name ON organizations USING btree (translate(lower((name)::text), '（）／＋－；“”‘’ \\t\\n\\r'::text, '()/+-;\\\"\\\"'''''::text))\"\r\n\r\n## Original code\r\n\r\ninddef.scan(/ USING (\\w+?) \\((.+?)\\)(?: WHERE (.+))?\\z/).flatten\r\n# => []\r\n\r\n## Fixed code\r\ninddef.scan(/ USING (\\w+?) \\((.+?)\\)(?: WHERE (.+))?\\z/m).flatten\r\n# => [\"btree\", \"translate(lower((name)::text), '（）／＋－；“”‘’ \\t\\n\\r'::text, '()/+-;\\\"\\\"'''''::text)\", nil]\r\n```\r\n\r\nThanks!", "labels": [], "number": 32256, "updated_at": "2018-03-16 03:21:25", "user": 526598, "closed_at": "2018-03-16 03:21:25", "id": 305453625, "title": "Fix PostgreSQL index parsing with multiline expression", "url": "https://api.github.com/repos/rails/rails/issues/32256", "created_at": "2018-03-15 08:19:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373552812", "text": "duplicate of https://github.com/rails/rails/pull/31621", "created_at": "2018-03-15 23:17:04", "user": 5657035, "id": 373552812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373591884", "text": "@fatkodima You're right, thanks for pointing out!", "created_at": "2018-03-16 03:21:25", "user": 526598, "id": 373591884}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I setup a self-signed SSL and configured in Puma, was working fine for most things but does not get applied to the disk service url in ActiveStorage.  This occurs for both the original upload files and their variants.  I have not checked this behavior on other services.\r\n\r\nHere is the log revealing the redirect does not apply the SSL (I have truncated the file keys for brevity):\r\n```Log\r\n=> Booting Puma\r\n=> Rails 5.2.0.rc1 application starting in development\r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.11.3 (ruby 2.5.0-p0), codename: Love Song\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on ssl://127.0.0.1:3000?cert=/path/to/cert&key=/path/to/key&verify_mode=none\r\n\r\n...\r\n\r\nStarted GET \"/rails/active_storage/variants/eyJfcmFp...32794.jpg\" for 127.0.0.1 at 2018-03-14 01:57:00 -0400\r\n\r\nProcessing by ActiveStorage::VariantsController#show as JPEG\r\n  Parameters: {\"signed_blob_id\"=>\"eyJfcmFp...c1d1e\", \"variation_key\"=>\"eyJfcmFp...269bb\", \"filename\"=>\"12765b837e699d5a2d9d009128c32794\"}\r\n  ActiveStorage::Blob Load (0.4ms)  SELECT  \"active_storage_blobs\".* FROM \"active_storage_blobs\" WHERE \"active_storage_blobs\".\"id\" = $1 LIMIT $2  [[\"id\", 5], [\"LIMIT\", 1]]\r\n  Disk Storage (0.0ms) Checked if file exists at key: variants/neBLD9bQ...3850b (yes)\r\n  Disk Storage (0.6ms) Generated URL for file at key: variants/neBLD9bQ...3850b (http://localhost:3000/rails/active_storage/disk/eyJfcmFp...32794.jpg?content_type=image%2Fjpeg&disposition=inline%3B+filename%3D%2212765b837e699d5a2d9d009128c32794.jpg%22%3B+filename%2A%3DUTF-8%27%2712765b837e699d5a2d9d009128c32794.jpg)\r\n\r\nRedirected to http://localhost:3000/rails/active_storage/disk/eyJfcmFp...32794.jpg?content_type=image%2Fjpeg&disposition=inline%3B+filename%3D%2212765b837e699d5a2d9d009128c32794.jpg%22%3B+filename%2A%3DUTF-8%27%2712765b837e699d5a2d9d009128c32794.jpg\r\n\r\nCompleted 302 Found in 4ms (ActiveRecord: 0.4ms)\r\n```\r\nI am fairly confident (not 100%) the redirect is occurring [On line ~12 of the Representations_Controller](https://github.com/rails/rails/blob/master/activestorage/app/controllers/active_storage/representations_controller.rb#L12) which is using a URL generated by the [disk_service](https://github.com/rails/rails/blob/master/activestorage/lib/active_storage/service/disk_service.rb#L81) but I lost the trail with the call to `url_helpers.rails_disk_service_path`.  Doing a search for \"rails_disk_service_path\" yields one result, the line in question.  This issue may be a defect in `url_helpers.rails_disk_service_path`, but I cannot find where this method is defined to attempt a patch.\r\n\r\n### Steps to reproduce\r\n\r\n1. Generate and setup a self-signed ssl certificate for localhost and store the paths to your ssl key and ssl certificate in the environment variables LOCALHOST_SSL_KEY and LOCALHOST_SSL_CERT respectively.\r\n2. Add `config.force_ssl = true` to config/environments/development.rb\r\n3. In config/puma.rb, comment out `port ENV.fetch(\"PORT\") { 3000 }` and add this block:\r\n```Ruby\r\nssl_bind '127.0.0.1', 3000, {\r\n  key: ENV.fetch('LOCALHOST_SSL_KEY'),\r\n  cert: ENV.fetch('LOCALHOST_SSL_CERT'),\r\n  verify_mode: 'none'\r\n}\r\n```\r\n4. Run the Rails server\r\n5. Visit a page with an image or variant using Chrome.\r\n\r\n### Expected behavior\r\nPage should load over HTTPS and the image should load over HTTPS.\r\n\r\n### Actual behavior\r\nPage loads as normal, image URLs are redirect from HTTPS to HTTP which will not load locally when running with SSL with disk service storage.\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n**Ruby version**: 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin15]\r\n**Chrome version**: 64.0.3282.186 (Official Build) (64-bit)\r\n**Safari version**: 11.0.3 (11604.5.6.1.1)", "labels": [], "number": 32255, "updated_at": "2018-03-15 07:40:42", "user": 2309469, "closed_at": "2018-03-15 07:38:42", "id": 305419397, "title": "ActiveStorage redirects attachment URLs from HTTPS to HTTP during service.url call", "url": "https://api.github.com/repos/rails/rails/issues/32255", "created_at": "2018-03-15 05:22:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373287626", "text": "Your disk service is configured with an HTTP host (the default is `http://localhost:3000`). Configure it to use HTTPS instead:\r\n\r\n```yaml\r\nlocal:\r\n  service: Disk\r\n  root: <%= Rails.root.join(\"storage\") %>\r\n  host: https://localhost:3000\r\n```\r\n\r\n(The `host` option will be removed in RC2 in favor of automatically detecting the correct host.)", "created_at": "2018-03-15 07:38:42", "user": 94129, "id": 373287626}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When upgrading to Rails 5.2 we're seeing\r\n`ActiveSupport::Cache::Entry#compress` and\r\n`ActiveSupport::Cache::Entry#should_compress?` as the highest usage of\r\nour CPU. At least some part of this is coming from the fact that objects\r\nare being marshaled multiple times. This memoizes the marshaled value to\r\neliminate half the problem.", "labels": [], "number": 32254, "updated_at": "2018-03-14 23:04:25", "user": 1529387, "closed_at": "2018-03-14 20:52:03", "id": 305303346, "title": "Don't marshal ActiveSupport::Cache::Entry objects twice", "url": "https://api.github.com/repos/rails/rails/issues/32254", "created_at": "2018-03-14 19:45:22", "comments": [{"reactions": {"+1": [8122246]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373171825", "text": "Backport to 5-2-stable as well?", "created_at": "2018-03-14 20:56:20", "user": 199, "id": 373171825}, {"reactions": {"heart": [199]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373186235", "text": "Backported in 6bca334c98", "created_at": "2018-03-14 21:48:27", "user": 47848, "id": 373186235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373204117", "text": "Sorry -- I had backported but I guess I forgot `git push` >_>", "created_at": "2018-03-14 23:04:25", "user": 1529387, "id": 373204117}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\nIt is important for users to know that a render or redirect in a \"before\"\r\nfilter causes the action to be cancelled. This was addressed in [the guide](http://guides.rubyonrails.org/action_controller_overview.html#filters),\r\nbut not the API docs.\r\n\r\n[ci skip]", "labels": [], "number": 32253, "updated_at": "2018-03-21 18:08:33", "user": 575602, "closed_at": "2018-03-21 18:03:23", "id": 305296092, "title": "Add cancellation info to before filter docs", "url": "https://api.github.com/repos/rails/rails/issues/32253", "created_at": "2018-03-14 19:22:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373144494", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-14 19:22:22", "user": 7468109, "id": 373144494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374995848", "text": "How can I help move this forward?", "created_at": "2018-03-21 16:06:04", "user": 575602, "id": 374995848}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://github.com/rails/rails/pull/30748 was backported to `5-1-stable`\r\nby 37895311514a35333e5597018852eb0fe2c9eb28.\r\nThis commit adds missing changelog entry and fixes others.", "labels": [], "number": 32252, "updated_at": "2018-03-14 15:19:53", "user": 6443532, "closed_at": "None", "id": 305204669, "title": "Fix changelog entries of `5-1-stable` [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32252", "created_at": "2018-03-14 15:19:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373059684", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-14 15:19:53", "user": 7468109, "id": 373059684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373059685", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-1-stable. Please double check that you specified the right target!", "created_at": "2018-03-14 15:19:53", "user": 7468109, "id": 373059685}], "assignees": [94129, 94129], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "This is not a bug and my apologies in advance for polluting the bug tracker with questions but it's becoming increasingly difficult to find documentation or guidance on such a new feature.\r\n\r\nSo, I was wondering if its possible to use ActiveStorage in conjunction with a third party javascript uploader library like [Uppy](https://uppy.io/) for example.\r\n\r\nHere is my use case: \r\nSay I have a user signup form with the following:\r\n\r\n* Email\r\n* Full Name\r\n* Avatar\r\n\r\nUsing the recommended way of uploading using ActiveStorage and `activestorage.js` (and setting `direct_uploads` to `true`) makes everything work beautifully.\r\n\r\n However if I choose to replace the \"ugly\" file form field with something more elegant like [Uppy](https://uppy.io/) or [Dropzone](http://www.dropzonejs.com/) I can't think of a way to \"programmatically\" use ActiveStorage to handle this.\r\n\r\nPlease note that in such a form my model is not yet created and thus the files need to be uploaded along with the entire form. Any ideas? Thanks. \r\n\r\nMight be related to #32208 .\r\n", "labels": ["activestorage"], "number": 32251, "updated_at": "2018-03-14 21:03:58", "user": 1859806, "closed_at": "2018-03-14 14:54:45", "id": 305151615, "title": "Use ActiveStorage from within third party libs", "url": "https://api.github.com/repos/rails/rails/issues/32251", "created_at": "2018-03-14 13:10:28", "comments": [{"reactions": {"hooray": [1859806], "+1": [1859806]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373050230", "text": "You can use the [`DirectUpload`](https://github.com/rails/rails/blob/master/activestorage/app/javascript/activestorage/direct_upload.js) class for this purpose. Upon receiving a file from your library of choice, instantiate a `DirectUpload` and call its `create` method. `create` takes a callback to invoke when the upload completes:\r\n\r\n```js\r\nimport { DirectUpload } from \"activestorage\"\r\n\r\n// on file selection/drop {\r\n  const url = element.dataset.directUploadUrl\r\n  const upload = new DirectUpload(file, url)\r\n\r\n  upload.create((error, blob) => {\r\n    if (error) {\r\n      // Handle the error\r\n    } else {\r\n      // Add an appropriately-named hidden input to the form with a value of blob.signed_id\r\n    }\r\n  })\r\n// }\r\n```\r\n\r\nThis class is the rare exception to our rule that undocumented APIs are private. We just haven’t gotten around to documenting it yet.", "created_at": "2018-03-14 14:54:45", "user": 94129, "id": 373050230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373069392", "text": "That's awesome! Thanks a lot!", "created_at": "2018-03-14 15:45:44", "user": 1859806, "id": 373069392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373124813", "text": "@georgeclaghorn \r\n\r\nJust  a quick followup...\r\nI took a look at the code here:\r\n\r\nhttps://github.com/rails/rails/blob/b3b193f7d65357970e72711d42db8070dcf92ce4/activestorage/app/javascript/activestorage/direct_upload_controller.js#L4-L10\r\n\r\nand seems that `DirectUpload` needs to be instantiated with a `DirectUploadController` object.\r\n\r\nso in my case, will something along these lines work?\r\n\r\n```javascript\r\nclass MyClass extends DirectUploadController {\r\n  constructor(input, file) {\r\n    super(input, file)\r\n  }\r\n}\r\n```\r\n\r\nThanks again.\r\n\r\n", "created_at": "2018-03-14 18:19:14", "user": 1859806, "id": 373124813}, {"reactions": {"+1": [1859806]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373126770", "text": "The delegate (the third argument to the `DirectUpload` constructor) is optional. You can omit it.", "created_at": "2018-03-14 18:24:57", "user": 94129, "id": 373126770}, {"reactions": {"hooray": [1859806], "+1": [1859806]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373130572", "text": "One example of a situation where you’d want to provide a delegate is displaying a progress bar for the upload. Before storing the file, `DirectUpload` calls the delegate’s `directUploadWillStoreFileWithXHR` method. That method can add a progress listener to the upload request:\r\n\r\n```javascript\r\nimport { DirectUpload } from \"activestorage\"\r\n\r\nclass Foo {\r\n  constructor(file, url) {\r\n    this.upload = new DirectUpload(this.file, this.url, this)\r\n  }\r\n\r\n  upload(file) {\r\n    this.upload.create((error, blob) => {\r\n      if (error) {\r\n        // Handle the error\r\n      } else {\r\n        // Add an appropriately-named hidden input to the form with a value of blob.signed_id\r\n      }\r\n    })\r\n  }\r\n\r\n  directUploadWillStoreFileWithXHR(request) {\r\n    request.upload.addEventListener(\"progress\", event => this.directUploadDidProgress(event))\r\n  }\r\n\r\n  directUploadDidProgress(event) {\r\n    // Use event.loaded and event.total to update the progress bar\r\n  }\r\n}\r\n```", "created_at": "2018-03-14 18:36:32", "user": 94129, "id": 373130572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373131990", "text": "Awesome! Thanks for the detailed examples and the whole guidance.", "created_at": "2018-03-14 18:40:53", "user": 1859806, "id": 373131990}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Add section \"Expiry in signed or encrypted cookie is now embedded in the cookies values\"\r\nto `master` since it should always be in the guides, not only for version 5.2.\r\n\r\nAdd info about `config.action_dispatch.use_authenticated_cookie_encryption`\r\nto the \"Configuring Rails Applications\" guide.\r\n\r\nIt was committed straight  to `5-2-stable` since we don't need this\r\nfunctionality in 6.0. Related to b25fcbc074ea688765af62a163698d5449221a8c.\r\n", "labels": [], "number": 32250, "updated_at": "2018-03-14 14:58:13", "user": 6443532, "closed_at": "2018-03-14 14:56:35", "id": 305125850, "title": "Update \"Upgrading from Rails 5.1 to Rails 5.2\" [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32250", "created_at": "2018-03-14 11:47:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372993713", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-14 11:47:12", "user": 7468109, "id": 372993713}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373050954", "text": "Thanks @bogdanvlviv 👍 ", "created_at": "2018-03-14 14:56:48", "user": 6321, "id": 373050954}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes #32248\r\n", "labels": [], "number": 32249, "updated_at": "2018-03-14 11:28:40", "user": 987638, "closed_at": "2018-03-14 11:22:45", "id": 305117003, "title": "Respect `skip_pipeline` option in `image_submit_tag`", "url": "https://api.github.com/repos/rails/rails/issues/32249", "created_at": "2018-03-14 11:17:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372988356", "text": "Sorry @y-yagi, I literally pushed a fix the same instant that you created this PR - I even double-checked for PRs just before pushing.", "created_at": "2018-03-14 11:24:09", "user": 6321, "id": 372988356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372989485", "text": "Yeah, no problem :) Thanks for your quick fix!\r\n", "created_at": "2018-03-14 11:28:40", "user": 987638, "id": 372989485}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n`image_submit_tag` doesn't skip asset pipeline when I pass `skip_pipeline: true` option.\r\n\r\n```ruby\r\n<%= image_submit_tag(\"foo/bar.jpg\", id: \"submit\", value: \"submit\", name: \"commit\", skip_pipeline: true) %>\r\n```\r\n\r\n### Expected behavior\r\n\r\nI want to skip asset pipeline.\r\n\r\n### Actual behavior\r\n\r\nIt is displayed as follows when I execute minitest.\r\n\r\n```\r\nDEPRECATION WARNING: The asset \"foo/bar.jpg\" is not present in the asset pipeline.Falling back to an asset that may be in the public folder.\r\nThis behavior is deprecated and will be removed.\r\nTo bypass the asset pipeline and preserve this behavior,\r\nuse the `skip_pipeline: true` option.\r\n```\r\n\r\n### System configuration\r\n**Rails version**:\r\nRails v5.1.4\r\n\r\n**Ruby version**:\r\nRuby v2.4.3", "labels": [], "number": 32248, "updated_at": "2018-03-14 11:21:51", "user": 1642474, "closed_at": "2018-03-14 11:21:51", "id": 305098295, "title": "image_submit_tag doesn't support :skip_pipeline option", "url": "https://api.github.com/repos/rails/rails/issues/32248", "created_at": "2018-03-14 10:20:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I think I may have spotted a potential race condition in ActiveStorage with how it identifies and analyzes blobs. I noticed in our application that some blobs will be identified and some will be analysed, but not both. This is curious because a bug was fixed in #31138 which meant that the `AnalyzeJob` should merge it's metadata onto the existing metadata - so blobs should end up being identified and analyzed.\r\n\r\nIn our application our queue is quite short, so I suspected that the `AnalyzeJob` was picking up blobs before they had even been identified. Looking at the attachment code it seemed that the blob was identified inline *before* it was queued to be analzyed. It seemed to be as though it was being queued first - and my queue picked the record up before the identification was complete.\r\n\r\n```\r\nclass ActiveStorage::Attachment < ActiveRecord::Base\r\n  after_create_commit :identify_blob, :analyze_blob_later\r\n\r\n  private\r\n    def identify_blob\r\n      blob.identify\r\n    end\r\n\r\n    def analyze_blob_later\r\n      blob.analyze_later unless blob.analyzed?\r\n    end\r\nend\r\n```\r\n\r\nUpon diving further I came across this line in the documentation: [`In case there are multiple transactional callbacks as seen below, the order is reversed`](http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html). If I'm understanding this correctly, it sounds to me like the `analyze_blob_later` method is being called first. There is another issue #20911 which discusses the inconsistent ordering of callbacks.\r\n\r\nI think that the order of the after create callbacks need to be flipped around so that the `AnalyzeJob` will be able to get a blob after it has been identified and so there is no potential for the identification and analyzing to overwrite each other in a race condition. It would mean each record will be updated correctly with their identification and analyzing result rather than one or the other.", "labels": ["activestorage"], "number": 32247, "updated_at": "2018-03-17 23:15:04", "user": 1100408, "closed_at": "None", "id": 305030564, "title": "Potential race condition for ActiveStorage identification and analyzation", "url": "https://api.github.com/repos/rails/rails/issues/32247", "created_at": "2018-03-14 05:45:04", "comments": [{"reactions": {"+1": [12427222]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373959917", "text": "I'm seeing the same behavior with a custom analyzer. \r\n\r\nThe `analyze_blob_later` callback correctly merges the custom metadata and updates the record, but then the `identify_blob` callback executes and overwrites the metadata with `identified: true`\r\n\r\nAlso, it seems the task of identification is performed twice, once by the client side where the `content_type` is determined, and again by the `identify_blob` callback. Identification happens a second time because the the blob’s metadata is `nil` on creation.\r\n\r\nThanks @dwightwatson, switching the callbacks seems to resolve the execution order", "created_at": "2018-03-17 23:15:04", "user": 716061, "id": 373959917}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "I think this might be a follow-on from #31393 where certain ActiveStorage events would not fire correctly in Firefox. There was a commit referenced - 21417e02e906f6b64f013aafefdc0cb8ea8b5e74 - that appears to have fixed the `direct-upload:initialize` event but I'm still not seeing the other events fire in Firefox.\r\n\r\n### Steps to reproduce\r\nSet up a form that uses the [example direct uploads script from the documentation](http://edgeguides.rubyonrails.org/active_storage_overview.html#example) and run it in Chrome and Firefox. \r\n\r\n### Expected behavior\r\nThe progress indicators will appear and one-by-one fill until all attached files have been processed and the form submits in both browsers.\r\n\r\n### Actual behavior\r\nFirefox will show all the progress indicators but not update as any progress is made. Eventually the form will submit and it will be successful, but the user is left without any loading progress.\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.2.0.rc1\r\n\r\n**Ruby version**: ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n", "labels": ["activestorage"], "number": 32246, "updated_at": "2018-03-22 02:01:37", "user": 1100408, "closed_at": "2018-03-22 02:01:37", "id": 305022319, "title": "ActiveStorage direct upload events other than initialize not working in Firefox", "url": "https://api.github.com/repos/rails/rails/issues/32246", "created_at": "2018-03-14 04:50:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375078796", "text": "I couldn't recreate your issue on Firefox 58.0.2", "created_at": "2018-03-21 20:08:19", "user": 1240505, "id": 375078796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375153978", "text": "Just created a new fresh project and I can't replicate it either. I stripped the original project I noticed this issue on back to literally just ActiveStorage and the problem persists. I don't know what the cause is but it's definitely something on my end.", "created_at": "2018-03-22 02:01:37", "user": 1100408, "id": 375153978}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. rails new\r\n2. add some credentials\r\n3. git add, commit, push repo\r\n4. add master.key content to password manager\r\n5. clone repo\r\n6. vim config/master.key\r\n7. copy/paste from password manager\r\n\r\n### Expected behavior\r\nCopy/pasting content of master.key should work the same as literally copying the master.key (cp) when adding it to a cloned project.\r\n\r\n### Actual behavior\r\nReceive the following error \r\n\r\n    /.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/bundler/gems/rails-bb2fddc3b839/activesupport/lib/active_support/message_encryptor.rb:205:in `rescue in _decrypt': ActiveSupport::MessageEncryptor::InvalidMessage (ActiveSupport::MessageEncryptor::InvalidMessage)\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.5.0p0\r\n", "labels": [], "number": 32245, "updated_at": "2018-03-14 22:13:56", "user": 1342464, "closed_at": "2018-03-14 22:13:56", "id": 304983157, "title": "Cannot copy/paste master.key from password manager", "url": "https://api.github.com/repos/rails/rails/issues/32245", "created_at": "2018-03-14 00:33:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373192761", "text": "This seems to be a issue with your environment. Please check if the value can be copied with password manager. \r\n\r\nAlso, please use [Stack Overflow](https://stackoverflow.com/questions/tagged/ruby-on-rails) or the [rubyonrails-talk](https://groups.google.com/forum/#!forum/rubyonrails-talk) mailing list for questions, where a wider community will be able to help you. We reserve the issue tracker for bugs.\r\n", "created_at": "2018-03-14 22:13:56", "user": 987638, "id": 373192761}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- Remove extra execution of `perform_enqueued_jobs`\r\n  since it performs all enqueued jobs in the duration of the block.\r\n- Fix example of using `assert_emails` without block since we\r\n  can't use enqueued jobs in this case.\r\n\r\nRelated to #32231\r\nr? @rafaelfranca ", "labels": [], "number": 32244, "updated_at": "2018-03-15 20:15:49", "user": 6443532, "closed_at": "2018-03-15 19:36:52", "id": 304972334, "title": "Partly revert #32231", "url": "https://api.github.com/repos/rails/rails/issues/32244", "created_at": "2018-03-13 23:33:08", "comments": [], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://yarnpkg.com/en/docs/cli/install#toc-yarn-install-frozen-lockfile\r\n\r\n### Summary\r\n\r\nI can't imagine a situation in which you'd want to allow a production yarn install to generate a diff in the lockfile. Inevitably _someone_ will have a problem with this, so I imagine it would go behind a flag, but for everyone else, I think this should be the default", "labels": [], "number": 32243, "updated_at": "2018-03-13 20:57:37", "user": 1264305, "closed_at": "None", "id": 304932707, "title": "[Webpack] Raise an error when lockfile diff is generated", "url": "https://api.github.com/repos/rails/rails/issues/32243", "created_at": "2018-03-13 20:57:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372815689", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-13 20:57:08", "user": 7468109, "id": 372815689}], "assignees": [350807, 350807], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [27698968]}, "text": "### Summary\r\n\r\nUpdates the API docs for creating a custom type. Gives the primary example as instantiation of a custom type (making registration and using a symbol an alternative) \r\nbecause this avoids problems with autoloading in development, as\r\npointed out in #27337 and\r\nhttps://christoph.luppri.ch/articles/rails/adding-custom-types-to-your-activerecord-models-with-the-attributes-api/\r\n\r\n### Other information\r\n\r\nAs a side note, I wonder if registration should be marked as part of the \"low-level api\" mentioned under `define_attribute` below, intended more for plugin authors than application code.\r\n", "labels": [], "number": 32242, "updated_at": "2018-03-17 18:28:33", "user": 18395, "closed_at": "None", "id": 304845303, "title": "Update docs for creating custom types for attributes api.", "url": "https://api.github.com/repos/rails/rails/issues/32242", "created_at": "2018-03-13 16:43:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372734076", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-13 16:43:45", "user": 7468109, "id": 372734076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373053193", "text": "That's awesome, thanks @timdiggins!", "created_at": "2018-03-14 15:02:36", "user": 773, "id": 373053193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373942118", "text": "\n    \n\n\n\n\nส่งจากอุปกรณ์ Samsung ส่วนตัว\n\n\n\n-------- ข้อ​ความ​ดั้ง​เดิม --------\nจาก: Ruby on Rails Bot <notifications@github.com> \nวัน​ที่: 13/3/18  23:45  (GMT+07:00) \nถึง: rails/rails <rails@noreply.github.com> \nCc: Subscribed <subscribed@noreply.github.com> \nเรื่อง: Re: [rails/rails] Update docs for creating custom types for\r&nbsp; attributes api. (#32242) \n\nThanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\nThis repository is being automatically checked for code quality issues using Code Climate. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\nPlease see the contribution instructions for more information.\n\n—\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n  \n  \n\n\n\n\n", "created_at": "2018-03-17 18:28:33", "user": 36863616, "id": 373942118}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nIf `enum` is defined as an array of symbols and the type of underlying field is `string`, allow the user to store the value as a plain string.\r\n\r\nSo you can write:\r\n\r\n```ruby\r\n\r\n# If the type of field difficulty is string\r\n# t.column :difficulty, :string, default: \"easy\"\r\nenum difficulty: %i[easy medium hard]\r\n\r\n```\r\nInstead of:\r\n\r\n```ruby\r\n\r\n# If the type of field difficulty is string\r\n# t.column :difficulty, :string, default: \"easy\"\r\nDIFFICULTIES = %i[easy medium hard]\r\nenum difficulty: DIFFICULTIES.zip(DIFFICULTIES.map(&:to_s)).to_h\r\n\r\n```\r\n\r\nOR instead of:\r\n\r\n```ruby\r\n\r\nenum difficulty: { easy: \"easy\", medium: \"medium\", hard: \"hard\" }\r\n\r\n```\r\n\r\n\r\nWhen selecting the difficulty by calling the `#easy!` method, it will be stored as a string \"easy\" if the type of the column is a string. ", "labels": [], "number": 32241, "updated_at": "2018-03-14 08:02:50", "user": 1627048, "closed_at": "None", "id": 304829420, "title": "Enum behaviour improvement for strings", "url": "https://api.github.com/repos/rails/rails/issues/32241", "created_at": "2018-03-13 16:04:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372719814", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-13 16:04:41", "user": 7468109, "id": 372719814}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [803398]}, "text": "* Bump rubocop version to 0.53 to match latest stable version.\r\n* Update .rubocop.yml to fix wrong namespace warning (Lint/EndAlignment -> Layout/EndAlignment)", "labels": [], "number": 32239, "updated_at": "2018-03-15 15:17:41", "user": 1269488, "closed_at": "None", "id": 304784965, "title": "Bump rubocop version to 0.53", "url": "https://api.github.com/repos/rails/rails/issues/32239", "created_at": "2018-03-13 14:22:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372682207", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-13 14:22:22", "user": 7468109, "id": 372682207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372685381", "text": "Issue originated from changes to namespace in the latest stable rubocop version https://github.com/bbatsov/rubocop/issues/4704", "created_at": "2018-03-13 14:31:12", "user": 1269488, "id": 372685381}], "assignees": [6321, 6321], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Dynamically determine the base class for the Active Storage controllers when they're loaded by the application - ActionController::Base for ordinary applications and ActionController::API for API-only applications.\r\n\r\nFixes #32208.", "labels": [], "number": 32238, "updated_at": "2018-03-13 13:18:10", "user": 6321, "closed_at": "None", "id": 304755601, "title": "Make Active Storage work with API-only apps", "url": "https://api.github.com/repos/rails/rails/issues/32238", "created_at": "2018-03-13 13:03:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372658105", "text": "Adding an entry to the test matrix for Active Storage by itself with an API app seems a bit icky but didn't seem to be an obvious solution otherwise - suggested approaches welcome.", "created_at": "2018-03-13 13:05:08", "user": 6321, "id": 372658105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372661806", "text": "We've tried hard to avoid directly checking `api_only` in favour of having it influence other higher-level decisions whenever possible -- people should be able to reproduce \"API only\"-style behaviour in a subset of their application.\r\n\r\nIf we're not relying on non-API features in these controllers, could they just always use ActionController::API?", "created_at": "2018-03-13 13:18:10", "user": 1034, "id": 372661806}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Hello\r\n\r\n### Steps to reproduce\r\n1. create a new rails application\r\n2. add to `config/environments/development.rb`:\r\n```ruby\r\nconfig.after_initialize do\r\n  puts '**************** in config.after_initialize *********************'\r\n  puts \"Rails.application.initialized?: #{Rails.application.initialized?}\"\r\n  puts '*****************************************************************'\r\nend\r\n```\r\n3. cd to app folder\r\n4. run `rake routes`\r\n\r\nHere is a sample app https://github.com/trushkevich/rails-configuration-after-initialize\r\n\r\n### Expected behavior\r\nIt should print\r\n```\r\n**************** in config.after_initialize *********************\r\nRails.application.initialized?: true\r\n*****************************************************************\r\n```\r\n### Actual behavior\r\nIt prints\r\n```\r\n**************** in config.after_initialize *********************\r\nRails.application.initialized?: false\r\n*****************************************************************\r\n```\r\n### System configuration\r\n\r\n#### Rails version: 5.1.5\r\n\r\n#### Ruby version: 2.5.0\r\n\r\nThe docs say\r\n\r\nhttps://apidock.com/rails/Rails/Configuration/after_initialize\r\n\r\n> Adds a block which will be executed after rails has been fully initialized. Useful for per-environment configuration which depends on the framework being fully initialized.\r\n\r\nhttp://guides.rubyonrails.org/configuring.html\r\n\r\n> config.after_initialize takes a block which will be run after Rails has finished initializing the application. That includes the initialization of the framework itself, engines, and all the application's initializers in config/initializers. Note that this block will be run for rake tasks. Useful for configuring values set up by other initializers:\r\n\r\nSo I would expect `Rails.application.initialized?` to be `true` in `config.after_initialize`, but it is obviously not the case. Is it the expected behavior ?\r\n", "labels": [], "number": 32237, "updated_at": "2018-03-14 07:05:39", "user": 1610941, "closed_at": "2018-03-13 22:34:10", "id": 304747522, "title": "Rails application is not initialized in Rails::Configuration after_initialize callback", "url": "https://api.github.com/repos/rails/rails/issues/32237", "created_at": "2018-03-13 12:38:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372841759", "text": "This is intentional behavior. \r\nThe `after_initialize` is called at the end of the whole initialize process, but it is part of the initialize process.  Therefore, even if use in `initialized?`, it returns false. \r\n\r\nNote that apidock.com is not an officially supported doc. Also, the information seems to be old. If you want to check about the API, please see http://api.rubyonrails.org. \r\nRef: http://api.rubyonrails.org/classes/Rails/Railtie/Configuration.html#method-i-after_initialize\r\n", "created_at": "2018-03-13 22:34:10", "user": 987638, "id": 372841759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372879666", "text": "@y-yagi thanks for your answer. \r\n\r\nAccording to http://api.rubyonrails.org/classes/Rails/Railtie/Configuration.html#method-i-after_initialize :\r\n> Last configurable block to run. Called after frameworks initialize.\r\n\r\nIMHO if it is called **after** something - then it should not be considered a part of that something. \r\n\r\nI'm not sure which example is good enough, let's consider this: _After breakfast I take a shower_ - is _taking a shower_ a part of _breakfast_ ? Obviously it is not. I believe the same logic should be applied to rails initialization process and `after_initialize` callback.\r\n\r\n> The after_initialize is called at the end of the whole initialize process\r\n\r\nNeither of the docs says that the callback is run **at the end**, instead all of them say that it is run **after** - there is a significant difference. I would say that the docs are misguiding, but it's not only about that - the callback's name is also confusing in this case. It's all about the word **after** which assumes something to be finished by the moment. And if `Rails.application.initialized?` returns `false` then it literally means that initialization is not finished yet. So on one hand the initialization is finished, and on the other it is not finished - pretty inconsistent.\r\n \r\nI think that despite the behavior of `Rails.application.initialized?` in `config.after_initialize` callback is intentional, the intention itself is not correct.\r\n\r\nupdate.\r\n\r\nOk, I found at https://github.com/rails/rails/commit/9cfeefb637b603ce41d3019c8baa95ea984620d7 the following:\r\n\r\n> * after_initialize: This is run after all of the initializers have run. It is an\r\n>   appropriate place for forking in a preforking setup\r\n\r\nIt explains a bit better the intention of this callback - it is run _after initializers_ - but not _after frameworks initialize_. This should have been placed into the docs. The guides' description of this callback is especially misguiding. Also it means that we in fact do not have a callback to be run after the application completely initializes for real (surely it can be workarounded).", "created_at": "2018-03-14 02:02:03", "user": 1610941, "id": 372879666}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [6442492]}, "text": "I am using active storage to store the files on AWS s3. and override the ActiveStorage::Service.url_expires_in = 24.hours default 300sec.\r\n\r\nSometimes while accessing the file is not loaded due to URL already expired. As I can check while accessing full Expired time is less than server time.\r\n\r\n![screenshot](https://user-images.githubusercontent.com/35395302/37340720-fff4f598-26e4-11e8-8988-7a9d481f594d.png)\r\n\r\n\r\n### Expected behavior\r\nGenerated URL must be accessible every time while accessing.\r\n\r\n### Actual behavior\r\nURL is already expired error message\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0alpha\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": ["activestorage"], "number": 32236, "updated_at": "2018-03-18 07:48:37", "user": 35395302, "closed_at": "None", "id": 304738676, "title": "Activestorage: S3 presigned url get expired before access.", "url": "https://api.github.com/repos/rails/rails/issues/32236", "created_at": "2018-03-13 12:09:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372663009", "text": "@vsingh-cts can you double check your system clock - the time of the request is passed via `X-Amz-Date` parameter and the aws-sigv4 gem handles all of that. It's either that or you're somehow passing a `:time` option into the aws-sigv4 gem's method for building a presigned url.\r\n\r\nLooking at the error it seems as though the `:expires_in` option is correctly set.", "created_at": "2018-03-13 13:22:38", "user": 6321, "id": 372663009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373026414", "text": "Hi @pixeltrix \r\nAs I can check server system clock and S3 are in the same zone.\r\nI think it might be the problem with browser cashing or turbolinks somehow cache the URL generated by \r\n`<%= image_tag(image.variant(resize: \"#{size}x#{size}\") %>`\r\nand it fetch older url.\r\nFor now, I changed it to\r\n`<%= image_tag(image.variant(resize: \"#{size}x#{size}\").try(:service_url) %>`\r\nand  try to reporduce the issue.\r\n\r\nThanks\r\n\r\n", "created_at": "2018-03-14 13:47:58", "user": 35395302, "id": 373026414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373033727", "text": "@vsingh-cts thanks for coming back - I'll have a look to see if the temporary url redirect is setting the the correct cache headers.", "created_at": "2018-03-14 14:09:29", "user": 6321, "id": 373033727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373979150", "text": "Yep, looks like they're being set - when I call the reference URL I get this:\r\n\r\n```\r\nCache-Control: max-age=300, private\r\n```\r\n\r\nWondering whether we need to also set `must-revalidate` - perhaps the browser was using a stale request? WDYT @georgeclaghorn ?", "created_at": "2018-03-18 07:48:37", "user": 6321, "id": 373979150}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {"+1": [5300654]}, "text": "See related: #30267\r\n\r\n### Steps to reproduce\r\n\r\nSee gist here: https://gist.github.com/project-eutopia/16ec1e121f8e676a989b68c006521cc6\r\n\r\nThe basic problem is that `unscoped` with a block does not seem to be removing `default_scope` when using joins.  The above gist has two models defined:\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n  default_scope { where(active: true) }\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n```\r\n\r\nWhen runing a command like `Post.unscoped { Comment.joins(:post) }` it excludes comments which have an inactive post in spite of the `unscoped` on `Post`.\r\n\r\nWhen looking at this problem deeper, the result of `Post.unscoped { Comment.joins(:post).count }` and `Post.unscoped { Comment.joins(:post) }.count` I found to be different:\r\n\r\n```\r\n[2] pry(#<BugTest>)> Post.unscoped { Comment.joins(:post) }.count\r\nD, [2018-03-12T23:23:51.558830 #21161] DEBUG -- :    (0.2ms)  SELECT COUNT(*) FROM \"comments\" INNER JOIN \"posts\" ON \"posts\".\"id\" = \"comments\".\"post_id\" AND \"posts\".\"active\" = ?  [[\"active\", \"t\"]]\r\n=> 1\r\n[3] pry(#<BugTest>)> Post.unscoped { Comment.joins(:post).count }\r\nD, [2018-03-12T23:23:58.246219 #21161] DEBUG -- :    (0.3ms)  SELECT COUNT(*) FROM \"comments\" INNER JOIN \"posts\" ON \"posts\".\"id\" = \"comments\".\"post_id\"\r\n```\r\n\r\nThis leads me to believe that the problem might be due to lazy loading.  For instance, running `Post.unscoped { Comment(:post).to_a }` returns an array of the comments I expect, because I have forced it to do the evaluation inside the block.  This problem arises when trying to do something like the following:\r\n\r\n```ruby\r\ncomments = Post.unscoped { Comment.joins(:post) }\r\ncomments.each do |comment|\r\n  # No comments with inactive posts seem to be present here\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\n`Post.unscoped` should return an association that remembers that `Post` is unscoped for the queries inside of the block.\r\n\r\n### Actual behavior\r\n\r\nThe `default_scope` seems to remain when using the association returned by `unscoped`.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 5.1.4, 5.2.0.rc1, and 6.0.0.alpha\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32235, "updated_at": "2018-03-15 07:27:05", "user": 5336619, "closed_at": "2018-03-13 10:27:50", "id": 304643987, "title": "`unscoped` not remembering `default_scope` for associations", "url": "https://api.github.com/repos/rails/rails/issues/32235", "created_at": "2018-03-13 06:36:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372618241", "text": "@project-eutopia as you've rightly surmised, the point at which you evaluate the scope is important - `unscoped` with a block will only unstop the model for the duration of that block and this is a common  pattern within Rails (e.g. Time.use_zone changes the timezone for the block) and is not a bug.\r\n\r\nA better way of achieving what you want is to add another association, e.g:\r\n\r\n``` ruby\r\nclass Comment < ApplicationRecord\r\n   belongs_to :unscoped_post, -> { unscoped }, class_name: \"Post\"\r\nend\r\n\r\ncomments = Comment.joins(:unscoped_post)\r\ncomments.each do |comment|\r\n  # Comments with inactive posts here\r\nend\r\n```\r\n\r\nGenerally I find it's best to use default_scope sparingly - it's easy to add conditions but much harder to remove them.", "created_at": "2018-03-13 10:27:50", "user": 6321, "id": 372618241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373265925", "text": "@pixeltrix Thank you for your review and clear explanation of the situation.  I agree with the decision made as to the behavior of `unscoped`, and also with your statement that it is better to avoid `default_scope` whenever possible.\r\n\r\nI tried to use your suggestion of using a scope on the `belongs_to` association itself (thanks for teaching me something new about Rails!), but it also seems to be re-applying the `default_scope`:  https://gist.github.com/project-eutopia/e5a4a8448ce7ee7809804af92ca92143.  I hope that this is not due to just another misunderstanding of mine.", "created_at": "2018-03-15 05:33:22", "user": 5336619, "id": 373265925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373282932", "text": "Small follow up: it works as I expect if I change it to\r\n```ruby\r\nbelongs_to :unscoped_post, -> { unscope(where: :active) }, class_name: \"Post\", foreign_key: \"post_id\"\r\n```\r\nI updated the gist to reflect this -- it works with `unscope` but not `unscoped`.", "created_at": "2018-03-15 07:14:36", "user": 5336619, "id": 373282932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373284587", "text": "@project-eutopia sorry, my bad - `unscoped` doesn't work because it'd remove the foreign key condition. You need to `unscope` specific bits like you've discovered.", "created_at": "2018-03-15 07:23:48", "user": 6321, "id": 373284587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373285215", "text": "@pixeltrix Oh I see.  That makes things clear now.  Thanks again and sorry for the misunderstanding :bowing_man:", "created_at": "2018-03-15 07:27:05", "user": 5336619, "id": 373285215}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This adds two assertion methods for asserting logging behaviour.\r\n\r\n### Summary\r\n\r\nWhen working on a gem internally, I found that there are no methods in Rails to check if a message has been logged to the Logger, but that one already existed in one of ActionView's test suite helper: https://github.com/rails/rails/blob/309bb6c4d068b0d480681cf4ef1b90158527dfe5/actionview/test/template/digestor_test.rb#L304-L317 This pulls them up into public API.\r\n\r\n### Questions\r\n\r\n* Are there tests for these methods? I can't find any but am totally willing to write them if they're tested.\r\n", "labels": [], "number": 32234, "updated_at": "2018-03-13 05:13:37", "user": 746519, "closed_at": "None", "id": 304626024, "title": "Add assertion methods for Rails loggers to public API", "url": "https://api.github.com/repos/rails/rails/issues/32234", "created_at": "2018-03-13 04:40:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372544932", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-13 04:40:46", "user": 7468109, "id": 372544932}], "assignees": [94129, 94129], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nFixes a bug in https://github.com/rails/rails/pull/31134\r\n\r\nActiveSupport::Cache::RedisCacheStore should support operating upon a Redis instance given in its initializer (via the `redis` keyword argument). Ref: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/redis_cache_store.rb#L109-L116\r\n\r\nIn actual fact, because `Redis.new.respond_to?(:call)`, `RedisCacheStore` will instead treat a Redis instance like a proc, `call`ing it to populate its `@redis`: https://github.com/rails/rails/blob/master/activesupport/lib/active_support/cache/redis_cache_store.rb#L121-L122\r\n\r\nObviously this doesn't have the correct semantics. The test case added in my first commit fails with a `Redis::TimeoutError` (if indeed a Redis instance is running on `127.0.0.1:6379`).\r\n\r\nWith the fix given in my second commit, `RedisCacheStore#redis` is precisely equal to the Redis instance given to the initializer, if indeed one was given.\r\n\r\n### Other Information\r\n\r\nI'm a first-time contributor 😁 please let me know if I need to update any changelog or open this PR against a branch other than master.", "labels": [], "number": 32233, "updated_at": "2018-03-13 01:47:36", "user": 16654100, "closed_at": "2018-03-13 01:45:56", "id": 304586330, "title": " ActiveSupport::Cache::RedisCacheStore should support Redis instances for `redis` kwarg", "url": "https://api.github.com/repos/rails/rails/issues/32233", "created_at": "2018-03-13 00:21:57", "comments": [{"reactions": {"hooray": [157270]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372518612", "text": "Thanks @as3richa! Backported to 5-2-stable @ 2ebd68b669c3f5d679a9e0fca54ab70aba4f0956", "created_at": "2018-03-13 01:45:56", "user": 199, "id": 372518612}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nCreate a new 5.2.0.rc1 application with webpack enabled:\r\n`rails _5.2.0.rc1_ new webpack_test --webpack`\r\n\r\nAttempt to start the webpack-dev-server:\r\n`cd webpack_test`\r\n`bin/webpack-dev-server`\r\n\r\n### Expected behavior\r\nwebpack-dev-server starts up\r\n\r\n### Actual behavior\r\nErrors out with the following:\r\n\r\n```\r\nThe CLI moved into a separate package: webpack-cli.\r\nPlease install 'webpack-cli' in addition to webpack itself to use the CLI.\r\n-> When using npm: npm install webpack-cli -D\r\n-> When using yarn: yarn add webpack-cli -D\r\nmodule.js:549\r\n    throw err;\r\n    ^\r\n\r\nError: Cannot find module 'webpack-cli/bin/config-yargs'\r\n    at Function.Module._resolveFilename (module.js:547:15)\r\n    at Function.Module._load (module.js:474:25)\r\n    at Module.require (module.js:596:17)\r\n    at require (internal/module.js:11:18)\r\n    at Object.<anonymous> (/home/drh/src/webpack_test/node_modules/webpack-dev-server/bin/webpack-dev-server.js:65:1)\r\n    at Module._compile (module.js:652:30)\r\n    at Object.Module._extensions..js (module.js:663:10)\r\n    at Module.load (module.js:565:32)\r\n    at tryModuleLoad (module.js:505:12)\r\n    at Function.Module._load (module.js:497:3)\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.5.0p0 (2017-12-25 revision 61468) [x86_64-linux]\r\n\r\n### Temporary Solution\r\n\r\nBy manually editing the webpack-dev-server entry within package.json to target versions less than 3.0 e.g.\r\n\r\n```\r\n{\r\n  \"name\": \"webpack_test\",\r\n  \"private\": true,\r\n  \"dependencies\": {\r\n    \"@rails/webpacker\": \"^3.3.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"webpack-dev-server\": \"<3.0.0\"\r\n  }\r\n}\r\n```\r\n", "labels": [], "number": 32232, "updated_at": "2018-03-12 23:55:24", "user": 7468689, "closed_at": "2018-03-12 22:19:47", "id": 304557676, "title": "[Rails 5.2.0.rc1 / Webpack] fresh app, webpack-dev-server fails to start", "url": "https://api.github.com/repos/rails/rails/issues/32232", "created_at": "2018-03-12 22:05:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372481873", "text": "This issue was moved to rails/webpacker#1338", "created_at": "2018-03-12 22:19:46", "user": 47848, "id": 372481873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372500793", "text": "Published a new tiny version that fixes this issue. ", "created_at": "2018-03-12 23:55:24", "user": 771039, "id": 372500793}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"hooray": [124968]}, "text": "### Summary\r\n\r\nCurrently, `ActionMailer`'s test helpers for asserting emails do not perform enqueued mail jobs. With this change, code like:\r\n\r\n```\r\nassert_emails(1) do\r\n  perform_enqueud_jobs(only: ActionMailer::DeliveryJob) do\r\n    SomeMailer.send_mail.deliver_later\r\n  end\r\nend\r\n```\r\n\r\ncan be shortened to:\r\n\r\n```\r\nassert_emails(1) { SomeMailer.send_mail.deliver_later }\r\n```\r\n\r\nAre there any strong feelings against this change? What would be a scenario where this would not be wanted?\r\n\r\n\r\n", "labels": [], "number": 32231, "updated_at": "2018-03-13 19:20:53", "user": 5162312, "closed_at": "2018-03-13 19:20:52", "id": 304517481, "title": "Perform email jobs in #assert_emails", "url": "https://api.github.com/repos/rails/rails/issues/32231", "created_at": "2018-03-12 19:56:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372442184", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-12 19:56:12", "user": 7468109, "id": 372442184}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [28115]}, "text": "It makes to ease to detect a future regression as long as the methods\r\nare covered by this test.", "labels": [], "number": 32230, "updated_at": "2018-03-21 18:12:07", "user": 12642, "closed_at": "2018-03-21 18:12:04", "id": 304497299, "title": "Add `QueryingMethodsDelegationTest` to cover query methods delegation", "url": "https://api.github.com/repos/rails/rails/issues/32230", "created_at": "2018-03-12 18:52:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Digital Ocean's Spaces service is API-compatible with AWS S3 so add an integration test to ensure that it works with the Active Storage S3 service class.\r\n\r\nNot everything is supported, for example server side encryption doesn't work.\r\n", "labels": [], "number": 32229, "updated_at": "2018-03-12 19:02:52", "user": 6321, "closed_at": "None", "id": 304495819, "title": "[WIP] Add a integration test for Digital Ocean spaces", "url": "https://api.github.com/repos/rails/rails/issues/32229", "created_at": "2018-03-12 18:47:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372424503", "text": "Pushing this up for the benefit of the DO Spaces team - was having issues testing this earlier today.\r\n\r\nInstructions for testing:\r\n\r\n```\r\ngit clone https://github.com/rails/rails.git\r\ngit checkout add-spaces-integration-test\r\nbundle install\r\ncp test/service/configurations.example.yml test/service/configurations.yml\r\n$EDITOR test/service/configurations.yml\r\nbin/test test/service/spaces_service_test.rb\r\n```\r\n", "created_at": "2018-03-12 18:56:02", "user": 6321, "id": 372424503}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "I was a little bit wondering... why?\r\n\r\n```ruby\r\n> Boolean(0.0)\r\ntrue\r\n```\r\n\r\nbut if we compare, it will be okay because of type casting, its ok \r\n\r\n```ruby\r\n0.0 == 0\r\ntrue\r\n```\r\n\r\nbut what is 0.0 ? is that zero ? \r\n\r\n```ruby\r\n0.0.zero?\r\ntrue\r\n```\r\nlets see a C code\r\n\r\n```C\r\n    if (RFLOAT_VALUE(num) == 0.0) {\r\n        return Qtrue;\r\n    }\r\n```\r\n\r\nso 0.0 is zero, but \r\n\r\n```ruby\r\n> Boolean(0)\r\nfalse\r\n```\r\n\r\nso if 0.0 is zero it should be casted as 0 and has to be false, right ?\r\n\r\nnow 0.0, 0.0000000, etc will be false\r\n", "labels": [], "number": 32228, "updated_at": "2018-03-12 19:50:43", "user": 21098110, "closed_at": "2018-03-12 19:50:43", "id": 304382650, "title": "fix casting zero-float numbers to boolean", "url": "https://api.github.com/repos/rails/rails/issues/32228", "created_at": "2018-03-12 13:59:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372318968", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-12 13:59:51", "user": 7468109, "id": 372318968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372440675", "text": "0.0 be true make sense. Only the values inside `FALSE_VALUES` are considered false by Active Record. Changing this now can break a lot of applications.\r\n\r\nThank you for the pull request.", "created_at": "2018-03-12 19:50:43", "user": 47848, "id": 372440675}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**Before:**\r\n![https://image.ibb.co/eGOFq7/before.png](https://image.ibb.co/eGOFq7/before.png)\r\n\r\n**After:**\r\n![https://preview.ibb.co/grRMxn/before.png](https://preview.ibb.co/grRMxn/before.png)", "labels": [], "number": 32227, "updated_at": "2018-03-12 13:04:42", "user": 10832262, "closed_at": "2018-03-12 13:02:28", "id": 304341382, "title": "Fix note marks", "url": "https://api.github.com/repos/rails/rails/issues/32227", "created_at": "2018-03-12 11:53:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372284720", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-12 11:53:42", "user": 7468109, "id": 372284720}, {"reactions": {"hooray": [10832262]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372301719", "text": "Thanks @ydakuka!", "created_at": "2018-03-12 13:02:40", "user": 1080678, "id": 372301719}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**Before:**\r\n![https://preview.ibb.co/grRMxn/before.png](https://preview.ibb.co/grRMxn/before.png)\r\n\r\n**After:**\r\n![https://image.ibb.co/fyCuHn/after.png](https://image.ibb.co/fyCuHn/after.png)", "labels": [], "number": 32226, "updated_at": "2018-03-12 11:53:53", "user": 10832262, "closed_at": "2018-03-12 11:51:28", "id": 304340649, "title": "Fix note marks", "url": "https://api.github.com/repos/rails/rails/issues/32226", "created_at": "2018-03-12 11:51:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372284109", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-12 11:51:06", "user": 7468109, "id": 372284109}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello \r\n\r\n### Steps to reproduce\r\n\r\nI followed all the steps described in edgeguides to setup ActiveStorage in combination with an Azure Storage Account \r\n\r\n### Expected behavior\r\nAttaching and uploading of a blob works fine. I can see the uploaded files in my Azure Storage container.\r\nThen I use the url_for to display images stored on Azure.\r\n\r\n### Actual behavior\r\nI got error 500 on requested images, and got this error when I try to open generated uri :\r\n\r\nAzure::Storage::InvalidOptionsError in ActiveStorage::BlobsController#show\r\n\r\ninvalid options {:content_disposition=>\"inline; filename=\"image.png\"; filename*=UTF-8''image.png\", :content_type=>\"image/png\"} provided for SAS token generate\r\n\r\n\r\n`azure-storage (0.15.0.preview) lib/azure/storage/core/auth/shared_access_signature_generator.rb:174:in 'generate_service_sas_token'`\r\n`azure-storage (0.15.0.preview) lib/azure/storage/core/auth/shared_access_signature_generator.rb:340:in 'signed_uri'`\r\n`activestorage (5.2.0.rc1) lib/active_storage/service/azure_storage_service.rb:81:in 'block in url'`\r\n`activesupport (5.2.0.rc1) lib/active_support/notifications.rb:168:in 'block in instrument'`\r\n`activesupport (5.2.0.rc1) lib/active_support/notifications/instrumenter.rb:23:in 'instrument'`\r\n`activesupport (5.2.0.rc1) lib/active_support/notifications.rb:168:in 'instrument'`\r\n`activestorage (5.2.0.rc1) lib/active_storage/service.rb:113:in 'instrument'`\r\n`activestorage (5.2.0.rc1) lib/active_storage/service/azure_storage_service.rb:79:in 'url'`\r\n`activestorage (5.2.0.rc1models) active_storage/blob.rb:113:in 'service_url'`\r\n`activestorage (5.2.0.rc1controllers) active_storage/blobs_controller.rb:12:in 'show'`\r\n\r\nI asked Azure team, they tell me to setup a SAS token. As far I know there's no documentation from Rails about such a setup. \r\n\r\nAre you aware of that problem ? Is there any further configuration I missed ?\r\n\r\nThank you in advance\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.5.0\r\n\r\nusing gem 'azure-storage', 0.15.0.preview\r\n", "labels": ["activestorage"], "number": 32225, "updated_at": "2018-03-13 09:09:16", "user": 9964341, "closed_at": "2018-03-12 17:42:53", "id": 304312942, "title": "ActiveStorage + Azure : invalid options provided for SAS token generate ", "url": "https://api.github.com/repos/rails/rails/issues/32225", "created_at": "2018-03-12 10:21:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372346120", "text": "After much pain in setting up an Azure account I've managed to reproduce this - investigating now.\r\n\r\n@fearcraftor that advice from the Azure team isn't much use - Active Storage is trying to create a signed url so is creating a SAS token for that. If you have to create a SAS token every time a user wanted to download a file it'd be a bit awkward 😄", "created_at": "2018-03-12 15:17:00", "user": 6321, "id": 372346120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372361034", "text": "@fearcraftor what did you set for the `path` option in your Azure config? If you set the primary endpoint of your storage account then it should work as the client uses the URI to determine which service to generate the SAS for, e.g:\r\n\r\n``` yaml\r\nazure:\r\n  service: AzureStorage\r\n  path: \"https://<your-storage-account-name>.blob.core.windows.net\"\r\n  storage_account_name: \"<your-storage-account-name>\"\r\n  storage_access_key: \"<your-storage-account-key>\"\r\n  container: \"<your-container>\"\r\n```\r\n\r\n@georgeclaghorn the config for Azure doesn't seem very clear - we can drop the `path` option and pass the service via an option to `signed_uri` and let the client build the correct host.", "created_at": "2018-03-12 15:56:36", "user": 6321, "id": 372361034}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372367501", "text": "I didn’t originally write the Azure service and don’t know much about it. Feel free to simplify.", "created_at": "2018-03-12 16:14:40", "user": 94129, "id": 372367501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372595319", "text": "Works fine ! Thank you", "created_at": "2018-03-13 09:09:16", "user": 9964341, "id": 372595319}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- Add missing dots.\r\n- Remove reference to itself on GitHub.\r\n  Usually, we add references to fixed issues only in a changelog.\r\n\r\nFollow up #32223\r\n", "labels": [], "number": 32224, "updated_at": "2018-03-12 10:46:58", "user": 6443532, "closed_at": "2018-03-12 10:43:23", "id": 304257279, "title": "Fix CHANGELOGs [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32224", "created_at": "2018-03-12 06:47:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372208339", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-12 06:47:11", "user": 7468109, "id": 372208339}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add missing dots.\r\n- Change example of using `content_security_policy_report_only`\r\n  in controller.\r\n- Remove TODO.\r\n\r\nRelated to #32222", "labels": [], "number": 32223, "updated_at": "2018-03-12 10:47:28", "user": 6443532, "closed_at": "2018-03-12 10:42:50", "id": 304256733, "title": "Fix 5-2-stable's changelogs [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32223", "created_at": "2018-03-12 06:43:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372207824", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-12 06:43:55", "user": 7468109, "id": 372207824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372207826", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-03-12 06:43:55", "user": 7468109, "id": 372207826}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add a description of major features in Rails 5.2.\r\n- Add a reference to Pull Request/Commit to every entry in CHANGELOGs,\r\n  note that some of them combined.\r\n- Add section \"Ruby on Rails Guides\" with notable changes.\r\n- Note that\r\n  - Skipped this since encrypted secrets are already on the way out.\r\n    ```\r\n    *   Add `rails secrets:show` command.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29695))\r\n    ```\r\n  - Skipped this since it was backported all the way to 5-0-stable.\r\n    ```\r\n    *   Make Rails' test runner work better with minitest plugins.\r\n        ([Pull Request](https://github.com/rails/rails/pull/29572))\r\n    ```\r\n\r\n\r\nThanks to everyone who has been working on Rails 5.2! <3", "labels": [], "number": 32222, "updated_at": "2018-03-18 13:13:16", "user": 6443532, "closed_at": "2018-03-13 19:06:53", "id": 304256000, "title": "Update \"Ruby on Rails 5.2 Release Notes\" Guide [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32222", "created_at": "2018-03-12 06:39:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372207164", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-12 06:39:37", "user": 7468109, "id": 372207164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372268157", "text": "@bogdanvlviv all seems good - wondering whether whether we should add a bit on nonce support in the bit about CSP?", "created_at": "2018-03-12 10:52:36", "user": 6321, "id": 372268157}, {"reactions": {"+1": [6321]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372269242", "text": "@pixeltrix I think would be better to extract these examples into our docs and refer to them and also add a bit info about `nonce`.", "created_at": "2018-03-12 10:56:34", "user": 6443532, "id": 372269242}, {"reactions": {"laugh": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372277884", "text": "@bogdanvlviv yes, you're probably right - release notes isn't documentation 😄 ", "created_at": "2018-03-12 11:25:08", "user": 6321, "id": 372277884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372442751", "text": "Dang, forgot to say: this is really great and I thoroughly enjoyed scrolling through all the changes again!", "created_at": "2018-03-12 19:58:10", "user": 350807, "id": 372442751}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using the PredicateBuilder to build the bind\r\nattributes allows Relation::Batches to drop its dependency on\r\nRelation::QueryAttribute and Arel::Nodes::BindParam\r\n\r\nr? @kamipo ", "labels": [], "number": 32221, "updated_at": "2018-03-21 18:35:01", "user": 13696143, "closed_at": "2018-03-21 18:09:47", "id": 304185494, "title": "Use PredicateBuilder for bind params in Relation::Batches", "url": "https://api.github.com/repos/rails/rails/issues/32221", "created_at": "2018-03-11 19:21:17", "comments": [], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6443532, 14128874]}, "text": "* Apply precision when assigning values to time columns (Fixes #30301)\r\n* Fixes issues with time columns not being normalised on sqlite\r\n* Ensures that times with a date component other than 2000-01-01 get stripped when quoting for databases like MySQL and PostgreSQL\r\n\r\nProbably for Rails 6.0 we might want to introduce storing times without the date component via a config option that defaults to true for new apps.\r\n\r\ncc @matthewd @kamipo ", "labels": [], "number": 32220, "updated_at": "2018-03-18 14:11:47", "user": 6321, "closed_at": "2018-03-15 11:59:48", "id": 304182259, "title": "Time column improvements", "url": "https://api.github.com/repos/rails/rails/issues/32220", "created_at": "2018-03-11 18:41:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Firstly, I'm new to Rails, so the mysteries are far and wide. Maybe a good test of the doco?\r\n\r\nAfter installing Rails, my routes.db contains some basic boilerplate code\r\n```\r\nRails.application.routes.draw do\r\n  get 'welcome/index'\r\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\r\nend\r\n```\r\nNone of this construct is mentioned in the guide pointed to by the comment in the code. So one is left wondering whether this default code should be removed and replaced with samples in the guide, or are the examples supposed to be added within the code block (do / end)..or perhaps after it?\r\n\r\nIf the first line (Rails.application.routes...) is supposed to be there, should it not be mentioned in the documentation? Searching the web for examples hasn't shed any light so far, so I guess it's a matter of experimentation.", "labels": [], "number": 32219, "updated_at": "2018-03-12 13:46:05", "user": 15033986, "closed_at": "2018-03-12 13:45:14", "id": 304154746, "title": "routing guide doco", "url": "https://api.github.com/repos/rails/rails/issues/32219", "created_at": "2018-03-11 12:37:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372182667", "text": "Yes, the block `Rails.application.routes.draw do...` has to stay there, it is this block that will initialize all the routes available in your app.\r\n\r\nYou can remove the `get 'welcome/index'` and replace it with your own routes. \r\n\r\nI dont think it is worth a change in the doc since it would feel like over explaining. It is pretty straight forward for anyone who has followed a tutorial. Keep reading rails tutorials and as soon as you run a scaffolding command you should understand.", "created_at": "2018-03-12 03:13:23", "user": 37088, "id": 372182667}, {"reactions": {"+1": [15033986, 221313]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372314476", "text": "I've added a section to the routing guide about config/routes.rb and added a note about not deleting the wrapping block. Thanks for the report @andyrooc 👍 ", "created_at": "2018-03-12 13:46:05", "user": 6321, "id": 372314476}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [15759, 2687, 10867145, 4665414, 543859, 1859806]}, "text": "[Based on this discussion](https://news.ycombinator.com/item?id=16542087), JS _may_ be getting a `smoosh` function. In anticipation of this, Active Support should add one too.\r\n\r\nJS developers who are also using Rails may be confused that Ruby does not have a `Array#smoosh` method. To smooth the transition from JS to Ruby (in Rails), we should have a `smoosh` method too. I really think that JS devs seeing \"undefined method smoosh for Array:...` would be a bad introduction to Rails. We should make it smoother for them! Or... smooshier?\r\n\r\nOmakase and all that.\r\n\r\n(Thanks to @sentience for the inspiration) ", "labels": [], "number": 32218, "updated_at": "2018-03-10 06:39:39", "user": 2687, "closed_at": "2018-03-10 06:09:50", "id": 304042863, "title": "Add Array#smoosh", "url": "https://api.github.com/repos/rails/rails/issues/32218", "created_at": "2018-03-10 05:07:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372003533", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-10 05:07:43", "user": 7468109, "id": 372003533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372003628", "text": "😂", "created_at": "2018-03-10 05:09:35", "user": 3690032, "id": 372003628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372003964", "text": ":+1:", "created_at": "2018-03-10 05:16:32", "user": 3690032, "id": 372003964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372006333", "text": "Cool! Excellent for JS developers that they are getting this method in their language. As for Rails, thanks but no thanks.", "created_at": "2018-03-10 06:09:50", "user": 47848, "id": 372006333}, {"reactions": {"laugh": [400299]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372007730", "text": "Ah that’s a shame. I suspected this would be useful because of what’s outlined in the rails doctrine (rubyonrails.org/doctrine)\r\n\r\n> Another example that required less implementation effort, but triggered almost as much consternation: Array#second through #fifth (and #forty_two for good trolling measure). These alias accessors were deeply offensive to a very vocal constituency who decried the bloat (and near end of civilization, for good measure) of something that could as well be written as Array#[1], Array#[2] (and Array[41]).\r\n\r\nI thought this would make people smile too. Ah well.", "created_at": "2018-03-10 06:39:39", "user": 2687, "id": 372007730}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey all,\r\n\r\nFirst time submitting a bug here, please go easy on me...\r\n\r\nIn some of my gems I override the `def initialize` of an `ActiveRecord::Base` object and use ruby keyword arguments.  This has worked fine for me up until \"5.2.0.rc1\".\r\n\r\nThe following test fails when gem \"activerecord\", \"5.2.0.rc1\", but passes in \"5.2.0.beta2\" and lower.\r\n\r\n### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"5.2.0.rc1\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# Ensure backward compatibility with Minitest 4\r\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n\r\n  def initialize(body, keyword: nil)\r\n    # None of the following code gets run anyway:\r\n    @body = body\r\n    @keyword = keyword\r\n    super()  # Call super with no arguments\r\n  end\r\n\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_association_stuff\r\n    post = Post.new('body', keyword: 'word')\r\n    assert post.present?\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nI should be able to use keyword arguments in `def initialize` on an ActiveRecord::Base class without error.  It should create a `Post` object.\r\n\r\n### Actual behavior\r\n\r\nCalling `Post.new('body', keyword: 'word')` in \"5.2.0.rc1\" raises the following error:\r\n\r\n```\r\nArgumentError: wrong number of arguments (2 for 0..1)\r\n/Users/matt/.rvm/gems/ruby-2.5.0/gems/activerecord-5.2.0.rc1/lib/active_record/inheritance.rb:50:in `new'\r\nactive_record_gem.rb:63:in `test_association_stuff'\r\n\r\n1 runs, 0 assertions, 0 failures, 1 errors, 0 skips\r\n```\r\n\r\n### System configuration\r\n**Rails version**:   This only affects `5.2.0.rc1`\r\n\r\n**Ruby version**:   I have reproduced the bug in ruby 2.3, 2.4, and 2.5.\r\n\r\n### Additional Information\r\n\r\n@kamipo\r\n\r\nI'm 100% sure this commit is the source of the behaviour change:\r\n\r\nhttps://github.com/rails/rails/commit/d4007d5a54b60bd6924eeffb52c126ed32e9f31f#diff-3a78900604b345c3b1fec1156f23f43a\r\n", "labels": [], "number": 32217, "updated_at": "2018-03-12 15:17:36", "user": 954468, "closed_at": "2018-03-12 15:17:36", "id": 304008513, "title": "using keyword arguments in def initialize raises an ArgumentError", "url": "https://api.github.com/repos/rails/rails/issues/32217", "created_at": "2018-03-09 23:06:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372012833", "text": "@matt-riemer out of interest, does your test pass if you define the `initialize` like this?\r\n\r\n``` ruby\r\nclass Post < ActiveRecord::Base\r\n  def initialize(body:, keyword: nil)\r\n  end\r\nend\r\n```\r\n\r\nThe pattern for Active Record is for a hash of attributes to be passed as the first argument. For compatibility I would suggest that you follow that single hash of attributes pattern even if we do decide to go back to `*args`.", "created_at": "2018-03-10 08:24:12", "user": 6321, "id": 372012833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372020672", "text": "Originally `Post.new('body', keyword: 'word')` raises ArgumentError for all stable versions.\r\n\r\nhttps://github.com/rails/rails/blob/38c7ddd4e9f3f22f67d9615dd04a2ae9525824fb/activerecord/lib/active_record/core.rb#L299-L307\r\n\r\nRails does not guarantee that overriding the initialize with imcompatible definition could avoid the error due to the irregular arguments.\r\nPlease use compatible definition or override `new` instead.", "created_at": "2018-03-10 10:46:54", "user": 12642, "id": 372020672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372346372", "text": "Thanks for the tip on overriding `new`\r\n\r\nCheers! :)", "created_at": "2018-03-12 15:17:36", "user": 954468, "id": 372346372}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 32216, "updated_at": "2018-03-15 11:37:57", "user": 1284716, "closed_at": "2018-03-09 21:13:11", "id": 303967208, "title": "update psych gem to 3.2 stable release", "url": "https://api.github.com/repos/rails/rails/issues/32216", "created_at": "2018-03-09 20:16:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371933434", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-09 20:16:39", "user": 7468109, "id": 371933434}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\n- Changing docs for the `polymorphic_path` in `polymorphic_routes.rb`\r\n- The method `polymorphic_path` is not using `polymorphic_url` with `routing_type: :path` anymore in polymorphic_routes.rb\r\n\r\n", "labels": [], "number": 32215, "updated_at": "2018-03-09 16:55:47", "user": 12901870, "closed_at": "2018-03-09 16:55:47", "id": 303904803, "title": "Change doc for \"polymorphic_path\" in polymorphic_routes.rb", "url": "https://api.github.com/repos/rails/rails/issues/32215", "created_at": "2018-03-09 16:46:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371868774", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @schneems (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-09 16:46:11", "user": 7468109, "id": 371868774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371872267", "text": "Thanks!", "created_at": "2018-03-09 16:55:42", "user": 59744, "id": 371872267}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n### Expected behavior\r\nUsing the default local disk service for `config.active_storage` (and all the defaults in `config/storage.yml`), a request to an image source for an attached image (e.g. `<%= image_tag @customer.logo %>`) should get a redirect **to the same domain as the original request**.\r\n\r\nhttp://my.cool.domain/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--28827ae3c6d7539243df1bb174ee713fec40b095/logo.png\r\n\r\nshould get redirected to something like\r\n\r\nhttp://my.cool.domain/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaEpJaDFhYW1kT2QxUnhVRTQxTVdwMWNYUjRha3RJY1ZGSWRGZ0dPZ1pGVkE9PSIsImV4cCI6IjIwMTgtMDMtMDlUMTQ6MzQ6MTEuOTAwWiIsInB1ciI6ImJsb2Jfa2V5In19--7af06b3e84ca9c712835d52b9da7f1fb891e05a9/logo.png?content_type=image%2Fpng&disposition=inline%3B+filename%3D%22logo.png%22%3B+filename%2A%3DUTF-8%27%27logo.png\r\n\r\n### Actual behavior\r\n\r\nInstead, the redirect always goes to\r\n\r\nhttp://localhost:3000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaEpJaDFhYW1kT2QxUnhVRTQxTVdwMWNYUjRha3RJY1ZGSWRGZ0dPZ1pGVkE9PSIsImV4cCI6IjIwMTgtMDMtMDlUMTQ6MzQ6MTEuOTAwWiIsInB1ciI6ImJsb2Jfa2V5In19--7af06b3e84ca9c712835d52b9da7f1fb891e05a9/logo.png?content_type=image%2Fpng&disposition=inline%3B+filename%3D%22logo.png%22%3B+filename%2A%3DUTF-8%27%27logo.png\r\n\r\nThis is environment-independent: Tested on :development and :production and with Puma and Passenger.\r\n\r\n### System configuration\r\n**Rails version**:\r\nrails (5.2.0.rc1)\r\n\r\n**Ruby version**:\r\nruby-2.4.1", "labels": [], "number": 32214, "updated_at": "2018-03-09 14:43:57", "user": 3499909, "closed_at": "2018-03-09 14:38:12", "id": 303861500, "title": "Active Storage: Redirect always go to localhost:3000 for Disk Storage", "url": "https://api.github.com/repos/rails/rails/issues/32214", "created_at": "2018-03-09 14:36:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371829869", "text": "This was fixed in ccac681122db9747fec9512076772bca345e24b9.", "created_at": "2018-03-09 14:38:12", "user": 94129, "id": 371829869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371831545", "text": "Oh, @georgeclaghorn, thanks, you're faster than a :zap: \r\n", "created_at": "2018-03-09 14:43:56", "user": 3499909, "id": 371831545}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This PR adds `delegate :pick, to :all` same as `pluck`.", "labels": [], "number": 32213, "updated_at": "2018-03-12 18:52:50", "user": 1531150, "closed_at": "2018-03-09 08:31:40", "id": 303745488, "title": "Add `delegate :pick, to: :all`", "url": "https://api.github.com/repos/rails/rails/issues/32213", "created_at": "2018-03-09 07:10:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371732146", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-09 07:10:44", "user": 7468109, "id": 371732146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371747088", "text": "Thanks!", "created_at": "2018-03-09 08:31:50", "user": 12642, "id": 371747088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372173789", "text": "Is there a generic test we could add here to detect any similar missing delegations?", "created_at": "2018-03-12 02:04:26", "user": 1034, "id": 372173789}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372423462", "text": "Nothing for now. I've create a PR #32230.", "created_at": "2018-03-12 18:52:50", "user": 12642, "id": 372423462}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes a typo. `job` is an instance which does not have access to `name` method.", "labels": [], "number": 32212, "updated_at": "2018-03-09 08:41:44", "user": 737325, "closed_at": "2018-03-09 08:41:44", "id": 303702982, "title": "Fixes a typo and updates active_job_basics.md", "url": "https://api.github.com/repos/rails/rails/issues/32212", "created_at": "2018-03-09 02:32:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371694047", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-09 02:33:00", "user": 7468109, "id": 371694047}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n - start a server\r\n - move logfile\r\n - make server call `Rails.logger.reopen`\r\n - see that logs still go to old logfile (instead of the newly created lgofile)\r\n\r\nthat is because the logdev does not know what it's filename is:\r\n```\r\nrails runner 'puts Rails.logger.instance_variable_get(:@logdev).instance_variable_get(:@filename)'\r\n```\r\n\r\n### Workaround\r\n\r\n```\r\nRails.logger.reopen Rails.logger.instance_variable_get(:@logdev).dev.path\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32211, "updated_at": "2018-03-14 22:39:22", "user": 11367, "closed_at": "None", "id": 303685695, "title": "Rails.logger.reopen does not work because the @logdev does not know it's @filename", "url": "https://api.github.com/repos/rails/rails/issues/32211", "created_at": "2018-03-09 00:48:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371995187", "text": "When `Rails.logger` makes `Logger`, `File` object is specified to `logdev`. \r\nhttps://github.com/rails/rails/blob/38c7ddd4e9f3f22f67d9615dd04a2ae9525824fb/railties/lib/rails/application/bootstrap.rb#L42-L46\r\n\r\nHowever, when pass `File` object, it seems that `@filename` is not set in `LogDevice#set`. \r\nhttps://github.com/ruby/ruby/blob/af0d504f2df2d6b63ee8ce433216f294c21eb2c4/lib/logger.rb#L732..L740 \r\n\r\nThere seems to be no way to specify `@filename` from outside. Therefore, this seems like a problem with Ruby. \r\nPlease create an issue to https://bugs.ruby-lang.org/issues/ ?\r\n", "created_at": "2018-03-10 02:25:04", "user": 987638, "id": 371995187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371998229", "text": "hmm could avoid that if we don't have to set binmode and sync, but I guess that's hard to revert ...\r\nwhat do you think about using `instance_variable_set` to set the filename ?", "created_at": "2018-03-10 03:12:48", "user": 11367, "id": 371998229}, {"reactions": {"+1": [987638]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371998714", "text": "opened https://bugs.ruby-lang.org/issues/14595 but not expecting any movement there :)", "created_at": "2018-03-10 03:21:55", "user": 11367, "id": 371998714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372017856", "text": "It seems intentional behaviour that `reopen` does not work with `IO`. \r\nhttps://github.com/ruby/ruby/blob/af0d504f2df2d6b63ee8ce433216f294c21eb2c4/lib/logger.rb#L716 \r\n\r\nTherefore, there is no guarantee that it will behave as expected just by giving filename, so I think that it is better not to do it.\r\n", "created_at": "2018-03-10 09:54:27", "user": 987638, "id": 372017856}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372039746", "text": "I think this code is meant to not reopen an IO like StringIO,\nbut even if we make it work for a File then it would change `sync` and\n`binmode` ... so not ideal\nsolutions I can think of are:\n - pass filename, sync, binread to ActiveSupport::Logger and make Logger\nreopen with the settings we want (needs a ruby change ... so hard)\n - pass filename, sync, binread to ActiveSupport::Logger and make it\nre-create a new Logger\n - make ActiveSupport::Logger trick Logger into reopening by setting\n@filename and then re-set previous sync/binread on the new @dev\n - make ActiveSupport::Logger open a new file (with correct sync/binread)\nand create a new Logger with that\n\nany of these sound good to you ?\n\n\nOn Sat, Mar 10, 2018 at 1:55 AM, Yuji Yaginuma <notifications@github.com>\nwrote:\n\n> It seems intentional behaviour that reopen does not work with IO.\n> https://github.com/ruby/ruby/blob/af0d504f2df2d6b63ee8ce433216f2\n> 94c21eb2c4/lib/logger.rb#L716\n>\n> Therefore, there is no guarantee that it will behave as expected just by\n> giving filename, so I think that it is better not to do it.\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/rails/rails/issues/32211#issuecomment-372017856>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAAsZ7posyfAQIBkuidBPxrjlFNaF0vkks5tc6MtgaJpZM4SjlPD>\n> .\n>\n", "created_at": "2018-03-10 15:49:05", "user": 11367, "id": 372039746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373196043", "text": "Another approach: \r\n\r\nI think that it is also a problem that the default log file generation is not made public. \r\nDoes it solve the issue if it becomes possible to get the default log file? \r\n\r\nLike following:\r\n\r\n```diff \r\n--- a/railties/lib/rails/application/bootstrap.rb\r\n+++ b/railties/lib/rails/application/bootstrap.rb\r\n@@ -34,16 +34,7 @@ module Bootstrap\r\n       # Initialize the logger early in the stack in case we need to log some deprecation.\r\n       initializer :initialize_logger, group: :all do\r\n         Rails.logger ||= config.logger || begin\r\n-          path = config.paths[\"log\"].first\r\n-          unless File.exist? File.dirname path\r\n-            FileUtils.mkdir_p File.dirname path\r\n-          end\r\n-\r\n-          f = File.open path, \"a\"\r\n-          f.binmode\r\n-          f.sync = config.autoflush_log # if true make sure every write flushes\r\n-\r\n-          logger = ActiveSupport::Logger.new f\r\n+        logger = ActiveSupport::Logger.new config.default_log_file\r\n           logger.formatter = config.log_formatter\r\n           logger = ActiveSupport::TaggedLogging.new(logger)\r\n           logger\r\ndiff --git a/railties/lib/rails/application/configuration.rb b/railties/lib/rails/application/configuration.rb\r\nindex 912faed..1303493 100644\r\n--- a/railties/lib/rails/application/configuration.rb\r\n+++ b/railties/lib/rails/application/configuration.rb\r\n@@ -252,6 +252,18 @@ def content_security_policy(&block)\r\n         end\r\n       end\r\n \r\n+      def default_log_file\r\n+        path = paths[\"log\"].first\r\n+        unless File.exist? File.dirname path\r\n+          FileUtils.mkdir_p File.dirname path\r\n+        end\r\n+\r\n+        f = File.open path, \"a\"\r\n+        f.binmode\r\n+        f.sync = autoflush_log # if true make sure every write flushes\r\n+        f\r\n+      end \r\n```\r\n\r\n```bash\r\nRails.logger.reopen(Rails.application.config.default_log_file)\r\n```\r\n", "created_at": "2018-03-14 22:27:50", "user": 987638, "id": 373196043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373198771", "text": "that's a pretty clean change, I like it! :)\n(not perfect, but a better then users having to mess with instance vars)\n\nOn Wed, Mar 14, 2018 at 3:28 PM, Yuji Yaginuma <notifications@github.com>\nwrote:\n\n> Another approach:\n>\n> I think that it is also a problem that the default log file generation is\n> not made public.\n> Does it solve the issue if it becomes possible to get the default log file?\n>\n> Like following:\n>\n> --- a/railties/lib/rails/application/bootstrap.rb+++ b/railties/lib/rails/application/bootstrap.rb@@ -34,16 +34,7 @@ module Bootstrap\n>        # Initialize the logger early in the stack in case we need to log some deprecation.\n>        initializer :initialize_logger, group: :all do\n>          Rails.logger ||= config.logger || begin-          path = config.paths[\"log\"].first-          unless File.exist? File.dirname path-            FileUtils.mkdir_p File.dirname path-          end--          f = File.open path, \"a\"-          f.binmode-          f.sync = config.autoflush_log # if true make sure every write flushes--          logger = ActiveSupport::Logger.new f+        logger = ActiveSupport::Logger.new config.default_log_file\n>            logger.formatter = config.log_formatter\n>            logger = ActiveSupport::TaggedLogging.new(logger)\n>            loggerdiff --git a/railties/lib/rails/application/configuration.rb b/railties/lib/rails/application/configuration.rb\n> index 912faed..1303493 100644--- a/railties/lib/rails/application/configuration.rb+++ b/railties/lib/rails/application/configuration.rb@@ -252,6 +252,18 @@ def content_security_policy(&block)\n>          end\n>        end\n>  +      def default_log_file+        path = paths[\"log\"].first+        unless File.exist? File.dirname path+          FileUtils.mkdir_p File.dirname path+        end++        f = File.open path, \"a\"+        f.binmode+        f.sync = autoflush_log # if true make sure every write flushes+        f+      end\n>\n> Rails.logger.reopen(Rails.application.config.default_log_file)\n>\n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/rails/rails/issues/32211#issuecomment-373196043>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAAsZ6garpdOU6XDncm86QAQ62ZL-8fRks5teZmfgaJpZM4SjlPD>\n> .\n>\n", "created_at": "2018-03-14 22:39:22", "user": 11367, "id": 373198771}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "See https://github.com/rails/rails/pull/32183. Commit message included here:\r\n\r\n> We test the failing case we're trying to patch; only if it throws an Exception do we patch.\r\n>\r\n> Currently this will *always* throw, but upstream Ruby has patched this bug: https://git.io/vAxKB\r\n\r\nTested against current Ruby 2.5 (monkey-patch applied, tests pass) and nightly (monkey-patch not applied, tests pass).", "labels": [], "number": 32210, "updated_at": "2018-03-19 16:41:34", "user": 1915, "closed_at": "2018-03-09 01:23:48", "id": 303682922, "title": "Only apply URI.unescape monkey-patch if detected to be required", "url": "https://api.github.com/repos/rails/rails/issues/32210", "created_at": "2018-03-09 00:32:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371673110", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-09 00:32:52", "user": 7468109, "id": 371673110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374279877", "text": "Looks like this broke static file serving with Rack::File because it now returns a 400 Bad Request because the path returned by `unescape` is US-ASCII with UTF-8 characters.\r\n\r\nIt strikes me as odd that the `unescape` method forces the encoding back to the original since a path is going to be US-ASCII by definition but the unescaped version will not be. It has however been this way since 1.9.2 so slightly confused why it's just a problem now (probably because we've been monkey patching forever 😞)\r\n\r\nUnsure whether this needs to be fixed in Rails, Rack or Ruby.", "created_at": "2018-03-19 16:41:34", "user": 6321, "id": 374279877}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This PR fixes #29947. Please see the issue for more details about the bug.\r\n\r\nThis PR adds a check to see if the `request.parameters` is safe to call, and skips showing `params` when it's malformed. There's another PR https://github.com/rails/rails/pull/29948 that allows for refactoring the code added by this PR, but I think it's out of this PR and we can take care of it later.\r\n\r\ncc @xtina-starr ", "labels": [], "number": 32209, "updated_at": "2018-03-09 02:01:50", "user": 386234, "closed_at": "None", "id": 303682750, "title": "Fix a bug where DebugExceptions errors out when malformed query parameters are provided", "url": "https://api.github.com/repos/rails/rails/issues/32209", "created_at": "2018-03-09 00:31:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371672939", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-09 00:31:50", "user": 7468109, "id": 371672939}], "assignees": [6321, 6321], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [68931, 1859806]}, "text": "I have a Rails API serving a React SPA. It works perfect but I had to do a modification to use ActiveStorage's direct uploads.\r\n\r\nThe problem appears when trying to create a direct upload (i.e. a Blob).  `ActiveStorage::DirectUploadsController` will fail with some errors which I believe are expected on a normal app but not on an API controllers. These are the errors:\r\n\r\n- `HTTP Origin header (http://localhost:3001/) didn't match request.base_url (http://localhost:3000)`\r\n- `Can't verify CSRF token authenticity.`\r\n\r\nMy solution has been to change this line:\r\nhttps://github.com/rails/rails/blob/4ec8bf68ff92f35e79232fbd605012ce1f4e1e6e/activestorage/app/controllers/active_storage/direct_uploads_controller.rb#L6\r\n\r\nand make:\r\n`class ActiveStorage::DirectUploadsController < ApplicationController`\r\n\r\nI think the problem is solved because my `ApplicationController` inherits from `ActionController::API`.\r\n\r\nIf my assumptions are correct, shouldn't ActiveStorage controllers inherit from `ActionController::API` or `ActionController::Base` depending on `config.api_only = true`?", "labels": ["activestorage"], "number": 32208, "updated_at": "2018-03-15 12:43:38", "user": 34079, "closed_at": "None", "id": 303653126, "title": "Make ActiveStorage work for API only apps", "url": "https://api.github.com/repos/rails/rails/issues/32208", "created_at": "2018-03-08 22:18:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373024501", "text": "@hector Would you mind sharing how you used ActiveStorage outside of a Form field?", "created_at": "2018-03-14 13:42:02", "user": 1859806, "id": 373024501}, {"reactions": {"hooray": [1859806], "heart": [1859806], "+1": [1859806]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373045417", "text": "Sure, add the attribute `data-direct-upload-url='/rails/active_storage/direct_uploads'` to the file inputs that you want to act as direct uploads.\r\n\r\nRemember you need to import the ActiveStorage javascript as suggested in the readme:\r\n**https://github.com/rails/rails/tree/master/activestorage#direct-upload-installation**\r\n\r\nFor this importing step I had to do a variation since I am using React and ES6 imports, I needed more control over success/failure of the direct uploads and I am using React's controlled components. I extracted the code from `ActiveStorage.start()`. This is the general idea:\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport {DirectUploadsController} from '../../lib/activestorage/direct_uploads_controller';\r\n\r\nclass NewProject extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.project = new Project(); // OptionaI: I store attributes in a Project model\r\n    document.addEventListener('direct-upload:end', this.setDirectUploadAttr);\r\n    // bind methods below here, I do it automatically with a decorator\r\n  }\r\n\r\n  setDirectUploadAttr(event) {\r\n    const fileInput = event.target;\r\n    const hiddenInput = document.querySelector(`input[type=\"hidden\"][name=\"${fileInput.name}\"`);\r\n    // Here you have the value you have to assign to the has_one_attached attribute, \r\n    // do whatever you do assign it to. I have it in a project model\r\n    this.project[fileInput.name] = hiddenInput.value;\r\n  }\r\n\r\n  // You may use promises instead of async/await\r\n  async onFormSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // Upload attached files to external storage service\r\n      const form = event.target;\r\n      const controller = new DirectUploadsController(form);\r\n      const {inputs} = controller;\r\n      if (inputs.length) {\r\n        await new Promise((resolve, reject) => {\r\n          controller.start(error => error? reject(error) : resolve());\r\n        });\r\n      }\r\n\r\n      // Run your submit function. In my case:\r\n      await this.project.save();\r\n\r\n    } catch (error) {\r\n      // Do something with the error. For example:\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    returns (\r\n      <form onSubmit={this.onFormSubmit}>\r\n        <input id=\"video\" name=\"video\" type=\"file\" data-direct-upload-url=\"/rails/active_storage/direct_uploads\" />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n```\r\n\r\nThis would be the original Rails model:\r\n```ruby\r\nclass Project < ApplicationRecord\r\n  has_one_attached :video\r\nend\r\n```\r\n", "created_at": "2018-03-14 14:41:41", "user": 34079, "id": 373045417}, {"reactions": {"+1": [1859806, 34079, 210667]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373122960", "text": "I wrote this package to make it easier to use ActiveStorage in React components,\r\nin case anyone finds it helpful. https://github.com/cbothner/react-activestorage-provider", "created_at": "2018-03-14 18:13:33", "user": 4642599, "id": 373122960}, {"reactions": {"+1": [34079]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373363088", "text": "Thank you @hector !\r\n\r\nThat's very useful!", "created_at": "2018-03-15 12:43:37", "user": 1859806, "id": 373363088}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nThis adds the ability to unregister previously registered observer(s) and interceptor(s).\r\n\r\n### Other Information\r\n\r\nThis changes was re-implemented [this](https://github.com/rails/rails/pull/18446).", "labels": [], "number": 32207, "updated_at": "2018-03-19 14:36:12", "user": 131562, "closed_at": "None", "id": 303649113, "title": "ActionMailer::Base can unregister observer(s) and interceptor(s).", "url": "https://api.github.com/repos/rails/rails/issues/32207", "created_at": "2018-03-08 22:04:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371640236", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 22:04:12", "user": 7468109, "id": 371640236}], "assignees": [1529387, 1529387], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Our team, 4 rails developers with 7-10 years experience each just started a fresh rails app for some rapid prototyping. One of the most surprising issues for us was the default behavior of `config.action_controller.action_on_unpermitted_parameters` to only log. Our long-lived app has had`:raise` set as a development default since `strong_parameters` was merged into rails.\r\n\r\nScenario: \r\n* create a scaffold, migrate, click thru, realize you forgot a field. \r\n* Create a new migration to add a field..... scratch head for a few minutes why it's not working, to realize you haven't added it to `params.permit`.\r\n\r\nThis must cause undue confusion for new developers. I'm sure we're missing a valid use case for only logging these, but we couldn't come up with one, especially in development. If this just raised an exception it would have been totally obvious.", "labels": [], "number": 32206, "updated_at": "2018-03-08 22:57:39", "user": 10403, "closed_at": "None", "id": 303647440, "title": "Default action_on_unpermitted_parameters to :raise in development", "url": "https://api.github.com/repos/rails/rails/issues/32206", "created_at": "2018-03-08 21:58:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371638719", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 21:58:42", "user": 7468109, "id": 371638719}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n##### git clone https://github.com/rails/rails.git\r\n##### gem build activesupport.gemspec\r\n##### sudo gem install activesupport-6.0.0.alpha.gem \r\n```\r\nFetching: concurrent-ruby-1.0.5.gem (100%)\r\nSuccessfully installed concurrent-ruby-1.0.5\r\nFetching: thread_safe-0.3.6.gem (100%)\r\nSuccessfully installed thread_safe-0.3.6\r\nFetching: tzinfo-1.2.5.gem (100%)\r\nSuccessfully installed tzinfo-1.2.5\r\nFetching: i18n-1.0.0.gem (100%)\r\nSuccessfully installed i18n-1.0.0\r\nSuccessfully installed activesupport-6.0.0.alpha\r\n5 gems installed \r\n```\r\n###### gem build actionview.gemspec\r\n###### sudo gem install actionview-6.0.0.alpha.gem\r\n\r\n### Expected behavior\r\nSuccessfully installed\r\n### Actual behavior\r\n```\r\nERROR:  While executing gem ... (Gem::DependencyError)\r\n    Unresolved dependency found during sorting - activesupport (>= 4.2.0) (requested by rails-dom-testing-2.0.3)\r\n```\r\n### System configuration\r\n**Rails version** 6.0.0.alpha:\r\n\r\n**Ruby version** 2.5.0:\r\n", "labels": [], "number": 32205, "updated_at": "2018-03-08 22:06:21", "user": 16918568, "closed_at": "2018-03-08 22:06:21", "id": 303646459, "title": "Unresolved dependency found during sorting", "url": "https://api.github.com/repos/rails/rails/issues/32205", "created_at": "2018-03-08 21:55:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371640837", "text": "Please use the [mailing list](https://groups.google.com/forum/#!forum/rubyonrails-talk) or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.", "created_at": "2018-03-08 22:06:21", "user": 987638, "id": 371640837}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In development I get the following error `Asset was not declared to be precompiled in production.`\r\n<img width=\"1334\" alt=\"screen shot 2018-03-08 at 1 51 01 pm\" src=\"https://user-images.githubusercontent.com/14843767/37173083-a49e18b2-22e0-11e8-94b2-f896e060d7ce.png\">\r\nThe styles for the faq-page are in the assets folder. Is there really a need to modified assets.rb? This would mean to add each asset manually. I tried using `gem 'sprockets-rails', '~> 3.0'` without success.\r\n\r\n### System configuration\r\n**Rails version**:\r\nRails 4.2.6\r\n**Ruby version**:\r\nruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-darwin17]", "labels": [], "number": 32204, "updated_at": "2018-03-08 21:53:01", "user": 14843767, "closed_at": "2018-03-08 21:53:01", "id": 303610806, "title": "Sprockets Asset was not declared to be precompiled in production. error on  Rails 4.2.6 ", "url": "https://api.github.com/repos/rails/rails/issues/32204", "created_at": "2018-03-08 19:56:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371637161", "text": "Rails 4.2 is not supported anymore for anything besides security fixes.\r\nPlease check whether your issue can reproduce with latest Rails. ", "created_at": "2018-03-08 21:53:01", "user": 987638, "id": 371637161}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "# Steps to reproduce\r\n```ruby\r\ncreate_table :parents do |t|\r\n  t.string :type\r\nend\r\n\r\nclass Parent < ActiveRecord::Base\r\nend\r\n\r\nclass Child < Parent\r\nend\r\n```\r\n## Actual:\r\n```ruby\r\nkid = Child.new\r\n#<Child id: nil, type: \"Child\">\r\n>> kid.becomes!(Parent)\r\n#<Parent id: nil, type: nil>\r\n```\r\n## Expected:\r\n```ruby\r\n>> kid.becomes!(Parent)\r\n#<Parent id: nil, type: 'Parent'>\r\n```\r\n\r\naccording to docs - the STI column value should be changed on #becomes!(klass) - http://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-becomes-21\r\n\r\nThe issue appears to be here https://github.com/rails/rails/blob/master/activerecord/lib/active_record/persistence.rb#L393\r\nremoving the negation on the if conditional addresses the issue\r\n\r\n```ruby\r\nmodule ActiveRecord\r\n  module Persistence\r\n    def becomes!(klass)\r\n      became = becomes(klass)\r\n      sti_type = nil\r\n      if klass.descends_from_active_record? # change here - remove bang / negation\r\n        sti_type = klass.sti_name\r\n      end\r\n      became.public_send(\"#{klass.inheritance_column}=\", sti_type)\r\n      became\r\n    end\r\n  end\r\nend\r\n\r\nkid.becomes!(Parent)\r\n#<Parent id: nil, type: \"Parent\">\r\n```\r\nIf this is agreed to be the issue I'll happily put together a pull request to make the change but I wanted to seek confirmation first.\r\n\r\nthank you!\r\n\r\n#  System configuration\r\nRails version: 5.1.4\r\nRuby version: 2.3.4", "labels": [], "number": 32203, "updated_at": "2018-03-10 23:56:20", "user": 10139527, "closed_at": "None", "id": 303607796, "title": "becomes! doesn't set sti type attribute", "url": "https://api.github.com/repos/rails/rails/issues/32203", "created_at": "2018-03-08 19:47:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371629533", "text": "The current behaviour is consistent with:\r\n\r\n```ruby\r\nadult = Parent.new\r\n#<Parent id: nil, type: nil>\r\n```\r\n\r\nThe type attribute isn't set for the base class in the inheritance hierarchy.", "created_at": "2018-03-08 21:25:06", "user": 432189, "id": 371629533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371640293", "text": "I hadn't considered that - very true!\r\n\r\nHowever - (I didn't realize my problem case was using a default until I checked) if a default value was specified the current implementation would trample that default value\r\n\r\nexample:\r\n```ruby\r\ncreate_table :parents do |t|\r\n  t.string :type, default: 'Parent'\r\nend\r\n\r\nadult = Parent.new\r\n#<Parent id: nil, type: 'Parent'>\r\nkid.becomes!(Parent)\r\n#<Parent id: nil, type: nil>\r\n```\r\n\r\nI'd think preserving the default value rather than negating it would be better behavior", "created_at": "2018-03-08 22:04:21", "user": 10139527, "id": 371640293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372077064", "text": "It does seem like [this line](https://github.com/rails/rails/blob/9af6601a46ec6afeafc61597eb10bdc7f175370d/activerecord/lib/active_record/persistence.rb#L392) is making an assumption about the attribute's default value.\r\n\r\nIs there a reason you want the base class's name to be stored, given that Rails' behaviour would be the same either way?", "created_at": "2018-03-10 23:56:19", "user": 432189, "id": 372077064}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "When I do `rake db:reset` it recreates the development and the test db.\r\n\r\nIn the `test database` the `value` of the `ar_internal_metadata` is `development` but it should be `test`\r\n\r\nFor the development database it is fine.\r\n\r\nMaybe it is related to this issue:\r\nhttps://github.com/rails/rails/issues/26731", "labels": [], "number": 32202, "updated_at": "2018-03-08 19:08:05", "user": 160919, "closed_at": "2018-03-08 19:08:05", "id": 303587014, "title": "After rake db:reset the value of the ar_internal_metadata is dev in the test database.", "url": "https://api.github.com/repos/rails/rails/issues/32202", "created_at": "2018-03-08 18:40:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371583174", "text": "@orbanbotond Thanks for the report. Could you provide a version of Rails you use?", "created_at": "2018-03-08 18:43:33", "user": 6443532, "id": 371583174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371585357", "text": "@bogdanvlviv oh...thx for the question. It is `5.1.4`", "created_at": "2018-03-08 18:50:37", "user": 160919, "id": 371585357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371586902", "text": "It was fixed by https://github.com/rails/rails/pull/30579 and backported to `5-1-stable` via https://github.com/rails/rails/commit/bb67b5f278c2dbca65b9dd03038788a4dbb4a21f. Try to upgrade Rails to `5.1.5`.\r\nThank you!", "created_at": "2018-03-08 18:55:47", "user": 6443532, "id": 371586902}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [24225086]}, "text": "### Steps to reproduce\r\n\r\nAs this may be a race condition, this is a issue happening very sparsely and is incredibly difficult to reproduce which is why we can't provide any example application or test this time.\r\n\r\nWe have a simple custom serializer like this in place:\r\n\r\n```ruby\r\nclass CommaSeparatedSerializer\r\n  SEPARATOR = ','.freeze\r\n\r\n  def self.load(value)\r\n    return nil if value.nil?\r\n    return value.split(SEPARATOR)\r\n  end\r\n\r\n  def self.dump(value)\r\n    return nil if value.nil?\r\n    return value.join(SEPARATOR)\r\n  end\r\nend\r\n\r\nclass User\r\n  serialize :languages, CommaSeparatedSerializer\r\nend\r\n\r\n# To test:\r\n\r\nUser.first.languages\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe serializer should only be called once when accessing the respective attribute, even when concurrent requests are happening during startup of the application.\r\n\r\n### Actual behavior\r\n\r\nIn most cases, the above code works well. Sometimes though, when requests are happening to the application while starting it up (in production mode), the serializer seems to be loaded and applied twice. From then on, the application is in this \"damaged\" state and the serializer does not work anymore.\r\n\r\nBy *applied twice* I mean that it is called a first time, and then this result is supplied to the serializer a second time. So with a value of `a,b,c,d`, we're getting `[['a', 'b', 'c']]` instead of `['a', 'b', 'c']` (note that it is wrapped in another array). Of course this is specific to our serializer and may lead to different problems with other ones.\r\n\r\n### System configuration\r\n\r\n**Rails version**: `5.1.4`\r\n\r\n**Ruby version**: `jruby 9.1.14.0 (2.3.3)`, `java 8`\r\n\r\n**Container**: Apache tomcat\r\n\r\n### Conclusion\r\n\r\nWe think this a race-condition or code loading issue in Rails and possibly related to #28589 and / or #27418. We're again that we could not provide a valid sample application or test case and hope that you'll be able to look into nevertheless. Thanks a bunch for your support 👍 ", "labels": ["activerecord"], "number": 32201, "updated_at": "2018-03-12 08:33:54", "user": 109765, "closed_at": "None", "id": 303557862, "title": "ActiveRecord serializer called twice", "url": "https://api.github.com/repos/rails/rails/issues/32201", "created_at": "2018-03-08 17:08:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372163373", "text": "> So with a value of `a,b,c,d`, we're getting `[['a', 'b', 'c']]` instead of `['a', 'b', 'c']`\r\n\r\nI don't see what input could cause `CommaSeparatedSerializer.load` to return such a value", "created_at": "2018-03-12 00:25:46", "user": 1034, "id": 372163373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372229136", "text": "> I don't see what input could cause CommaSeparatedSerializer.load to return such a value\r\n\r\nThe input `a,b,c` does, as Rails defines the method [Array#split](https://apidock.com/rails/Array/split):\r\n\r\n```ruby\r\nresult = CommaSeparatedSerializer.load('a,b,c')\r\n# => [\"a\", \"b\", \"c\"]\r\n\r\nCommaSeparatedSerializer.load(result)\r\n# => [[\"a\", \"b\", \"c\"]]\r\n```", "created_at": "2018-03-12 08:32:51", "user": 109765, "id": 372229136}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n```\r\nrails generate model User name:string\r\nrails generate model Post title:string user:references\r\n```\r\n\r\nUser Model:\r\n\r\n```\r\nhas_one :latest_post, ->{ order(created_at: :desc).limit(1) }, class_name: :Post\r\n```\r\n\r\n### Expected behavior\r\n\r\n```\r\nUser.all.includes(:latest_post).map(&:latest_post).select(&:present?).count\r\nUser.all.map(&:latest_post).select(&:present?).count\r\n```\r\n\r\nBoth should return the same number.  (In my current app, 4.1, they both would produce the same number)\r\n\r\n(I know there are more efficient ways to find the count, this is the easiest way I could think of to demonstrate the problem)\r\n\r\n### Actual behavior\r\n\r\nWhen using `includes`, the `limit(1)` gets applied to the `WHERE ID IN` query.\r\n\r\n```SQL\r\n SELECT \"users\".* FROM \"users\"\r\nSELECT  \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" IN ( ... ) ORDER BY \"posts\".\"created_at\" DESC LIMIT 1  -- SHOULD NOT BE HERE\r\n```\r\n\r\nThis causes `User.all.includes(:latest_post).map(&:latest_post).select(&:present?).count` to always return 1.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.4.3\r\n\r\n### Personal Note\r\n\r\nAfter looking into this, I learned that the `limit(1)` wasn't required, so the immediate problem with my app has been solved.  I feel a good solution would be to raise a warning or error along the lines of \"LIMIT IS NOT REQUIRED/ALLOWED IN HAS_ONE CONDITION\" because it had worked in previous versions of rails.", "labels": [], "number": 32200, "updated_at": "2018-03-11 07:59:07", "user": 11606807, "closed_at": "2018-03-11 07:59:07", "id": 303537947, "title": "limit in has_one condition produces different results Rails 4 -> 5", "url": "https://api.github.com/repos/rails/rails/issues/32200", "created_at": "2018-03-08 16:14:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372096693", "text": "Sorry, posted with noticing the update.\r\n\r\nAs for adding the warning I don't think it's possible to do cleanly without trying to load the source code for the proc or adding the check at runtime on the relation that the proc returns, neither of which sound like good options. Also I'm not entirely sure that `limit` is not useful in some scenarios.", "created_at": "2018-03-11 07:59:07", "user": 6321, "id": 372096693}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nThis PR fixes: \r\nhttps://github.com/rails/rails/issues/32198\r\n", "labels": [], "number": 32199, "updated_at": "2018-03-13 11:55:34", "user": 7910967, "closed_at": "None", "id": 303527698, "title": "Fixes #32198 wrong Session name for Capybara", "url": "https://api.github.com/repos/rails/rails/issues/32199", "created_at": "2018-03-08 15:47:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371527577", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 15:47:23", "user": 7468109, "id": 371527577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371539505", "text": "@eileencodes please review.", "created_at": "2018-03-08 16:24:19", "user": 7910967, "id": 371539505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372640366", "text": "@eileencodes @rafaelfranca  any update on this? :)", "created_at": "2018-03-13 11:55:34", "user": 7910967, "id": 372640366}], "assignees": [47848, 47848], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nCapybara uses default name for session as follows: `Capybara.session_name` = `:default`. This preventing Capybara to recognise multiple sessions and uses only first match.\r\n\r\n```ruby\r\nCapybara.session_name \r\n=> :default\r\n\r\nActionDispatch::SystemTestCase.driven_by :poltergeist\r\n\r\nCapybara.session_name \r\n=> :default\r\n\r\nActionDispatch::SystemTestCase.driven_by :selenium, using: :firefox\r\n\r\nCapybara.session_name \r\n=> :default\r\n```\r\n\r\n### Expected behavior\r\n\r\nWe would like to do things like this:\r\n\r\n```ruby\r\n  RSpec.configure do |config|\r\n     config.around(:each) do |example|\r\n        if example.metadata[:type] == :system \r\n         [:safari_mac_high_sierra, :firefox_mac_high_sierra, :chrome_mac_high_sierra, :chrome_ios_iphone_x].each do |driver|\r\n             ActionDispatch::SystemTestCase.driven_by :selenium, using: driver\r\n             example.run\r\n         end\r\n     else\r\n       example.run\r\n     end\r\n  end\r\n```\r\n### Actual behaviour\r\n\r\nCapybara session name should not always use `:default` as session name preventing sites use multiple combination per test suite.\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.4\r\n\r\n**Ruby version**:\r\n2.5.0p0\r\n", "labels": ["actionpack", "attached PR"], "number": 32198, "updated_at": "2018-03-08 21:53:36", "user": 7910967, "closed_at": "None", "id": 303527139, "title": "System tests - Preventing run multiple sessions for given test", "url": "https://api.github.com/repos/rails/rails/issues/32198", "created_at": "2018-03-08 15:45:48", "comments": [], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nI am using this in my system tests:\r\n\r\n```ruby\r\nchrome_options = Selenium::WebDriver::Chrome::Options.new\r\nchrome_options.add_preference(:download, default_directory: DL_PATH)\r\ndriven_by :selenium, using: :headless_chrome, screen_size: [1600, 1200], options: { options: chrome_options }\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe `download.default_directory` Chrome preference should be set when running the tests\r\nSelenium should be passed a `Selenium::WebDriver::Chrome::Options` instance looking like this:\r\n\r\n```\r\n<Selenium::WebDriver::Chrome::Options:0x00007f9f64e5ee20\r\n  @args=#<Set: {\"--headless\", \"--disable-gpu\"}>,\r\n  @binary=nil,\r\n  @prefs={:download=>{:default_directory=>#<Pathname:/path/tmp/test_downloads>}},\r\n  @extensions=[], @options={}, @emulation={}, @encoded_extensions=[]>\r\n```\r\n\r\n### Actual behavior\r\n\r\n`download.default_directory` is not set.\r\n`Selenium::WebDriver::Chrome` is passed the following options object:\r\n\r\n```\r\n<Selenium::WebDriver::Chrome::Options:0x00007f9f64f85088\r\n  @args=#<Set: {\"--headless\", \"--disable-gpu\"}>,\r\n  @binary=nil,\r\n  @prefs={},\r\n  @extensions=[], @options={}, @emulation={}, @encoded_extensions=[]>\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0-rc1\r\n\r\n\r\n### Workaround\r\n\r\nRegistering a custom driver works fine.\r\n\r\nI tried using this:\r\n```ruby\r\nchrome_profile = Selenium::WebDriver::Chrome::Profile.new\r\nchrome_profile[\"download.default_directory\"] = DL_PATH\r\n\r\ndriven_by :selenium, using: :headless_chrome, screen_size: [1600, 1200], options: {\r\n  profile: chrome_profile\r\n}\r\n```\r\n\r\nIt works (`download.default_directory` is set) but I get a deprecation notice: `WARN Selenium [DEPRECATION] Using Selenium::WebDriver::Chrome::Profile#extensions is deprecated. Use Selenium::WebDriver::Chrome::Options#add_extension instead.`\r\n\r\n### Analysis\r\n\r\nIn https://github.com/SeleniumHQ/selenium/blob/29b5be0a72331df9ab99e36b05b4c29cf7046f30/rb/lib/selenium/webdriver/chrome/driver.rb#L67 it is expected that the driver is getting an `options` key with a proper `Selenium::WebDriver::Chrome::Options` object. The other keys are processed below for backward compatibility, but with a deprecation notice.\r\n\r\nhttps://github.com/rails/rails/blob/190744cd8ed014915803fa805996be04dc750d9d/actionpack/lib/action_dispatch/system_testing/driver.rb#L34-L36\r\n\r\nHere the user-provider options hash has its `options` key overriden by the driver default options, not merged in. Merge will be difficult as `Selenium::WebDriver::Chrome::Options` does not have a `merge` method. `profile` is not merged so my above workaround works.\r\n\r\nTo solve this, I thought about:\r\n- Changing the `driven_by`'s `options` parameter to accept a WebDriver options object (like  `Selenium::WebDriver::Chrome::Options` here), and use this options object when adding default driver options\r\n- or allowing `driven_by` to take a block parameter, with the options object as argument. This would allow something like:\r\n    ```ruby\r\n    driven_by :selenium, using: :headless_chrome, screen_size: [1600, 1200] do |options|\r\n      options.add_preference(:download, default_directory: DL_PATH)\r\n    end\r\n    ```\r\n\r\ncc @eileencodes ", "labels": ["actionpack"], "number": 32197, "updated_at": "2018-03-11 12:37:44", "user": 42070, "closed_at": "None", "id": 303509139, "title": "[ActionDispatch] SystemTesting: custom options are ignored", "url": "https://api.github.com/repos/rails/rails/issues/32197", "created_at": "2018-03-08 14:57:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371871908", "text": "@renchap do you want to work on a PR? I think that option 1 sounds best. Thanks!", "created_at": "2018-03-09 16:54:41", "user": 1080678, "id": 371871908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372028436", "text": "I want to double check - is it only some options or all options that aren't being passed in? I'm wondering if this is a bug in how we're passing the options if it's all options. ", "created_at": "2018-03-10 13:07:06", "user": 1080678, "id": 372028436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372072406", "text": "I know this probably looks confusing, and I did not get it right the first time. The logic is not straightforward and a lot of things are called `options` and `opts`, which does not make it easier :)\r\n\r\nEach Capybara drivers expects an `options` argument as a `Hash`. This is the `driven_by`'s `options` arg.\r\n\r\nThis `options` arg is then passed to the Selenium Webdriver `initialize` call.\r\nFor Chrome (the other drivers may be different), see here: https://github.com/SeleniumHQ/selenium/blob/master/rb/lib/selenium/webdriver/chrome/driver.rb\r\n\r\nSome keys of the `options` arg are used to set specific settings (`:driver_path`, `:url`, …).\r\nOther keys have specific behaviour, like `:args` or `:prefs` (correctly setting it but displaying a deprecation notice).\r\nFor `:profile`, depending on the sub-key, it sets something (`:directory`), or sets something but with a deprecation notice (`:extensions`), or  it is ignored.\r\n\r\nAll of this currently works fine.\r\n\r\nThe problem I encountered is when you want to pass a an `:options` key (so `options[:options]`). This is expected to be a `Selenium::WebDriver::Chrome::Options` (for Chrome) instance.\r\n\r\nhttps://github.com/rails/rails/blob/190744cd8ed014915803fa805996be04dc750d9d/actionpack/lib/action_dispatch/system_testing/driver.rb#L34-L36\r\n\r\nHere `options[:options]` is overriden with `@browser.options`, (which is defined here: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/system_testing/browser.rb#L34)\r\n\r\nThis makes it impossible to have a custom `Selenium::WebDriver::Chrome::Options` object passed to Selenium/Webdriver, thus impossible to set a custom config for the driver.\r\n\r\nThe easiest solution would be to not override `options[:options]`, but allow the user to pass a `Selenium::WebDriver::Chrome::Options` object to `driven_by`, like this:\r\n\r\n```ruby\r\nchrome_options = Selenium::WebDriver::Chrome::Options.new\r\nchrome_options.add_preference(:download, default_directory: DL_PATH)\r\ndriven_by :selenium, using: :headless_chrome, screen_size: [1600, 1200], options: { options: chrome_options }\r\n```\r\n\r\nTo achieve this, `SystemTesting::Driver#browser_options` should take the user-supplied `:options`, and pass it to `SystemTesting::Browser#options` (and then `headless_chrome_browser_options`) which either create a `Selenium::WebDriver::Chrome::Options` if its `nil`, or add the required options to the user-supplied one.\r\n\r\nI do not really like passing this object through this many calls, but I do not see an alternative. I can work on a PR for it, if you are ok with the proposal.", "created_at": "2018-03-10 22:32:50", "user": 42070, "id": 372072406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372111225", "text": "It's hard for me to parse exactly without a PR and right now I don't have the bandwidth to dig into this issue, so your proposal seems fine and if you want to work on a PR I'd really appreciate that 😄 Thanks!", "created_at": "2018-03-11 12:21:42", "user": 1080678, "id": 372111225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372112256", "text": "Sure, I will make a PR next week.", "created_at": "2018-03-11 12:37:44", "user": 42070, "id": 372112256}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Trying to use a scope with `joins()` doesn't include that join in the generated sql, be it directly, via named_scopes or via default_scopes.\r\n\r\nBelow is a minimal example that reproduces this issue.\r\nThis is causing trouble because i need to scope the primary_marking based on an attribute from it's marking_code (there would be a `.where(...)` following the join\r\n\r\n### Steps to reproduce\r\n```rb\r\nclass DamageIncident < ApplicationRecord\r\n  has_one :primary_marking, -> { joins(:marking_code) }\r\nend\r\n\r\nclass PrimaryMarking < ApplicationRecord\r\n  belongs_to :marking_code\r\nend\r\n\r\nirb> DamageIncident.joins(:primary_marking)\r\n```\r\n\r\n### Expected behavior\r\n```sql\r\nSELECT damage_incidents.*\r\nFROM damage_incidents\r\n  INNER JOIN primary_markings\r\n    ON primary_markings.damage_incident_id = damage_incident.id\r\n  INNER JOIN marking_codes\r\n    ON primary_markings.marking_code_id = marking_codes.id\r\n```\r\n\r\n### Actual behavior\r\n```sql\r\nSELECT damage_incidents.*\r\nFROM damage_incidents\r\n  INNER JOIN primary_markings\r\n    ON primary_markings.damage_incident_id = damage_incident.id\r\n```\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.1.4\r\n\r\n**Ruby version**: ruby 2.4.1p111 (2017-03-22 revision 58053) [x86_64-darwin16]\r\n", "labels": [], "number": 32196, "updated_at": "2018-03-08 19:36:39", "user": 6474105, "closed_at": "None", "id": 303489028, "title": "can't use joins in has_one scope block?", "url": "https://api.github.com/repos/rails/rails/issues/32196", "created_at": "2018-03-08 14:00:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371599059", "text": "This should be fixed by #29413.\r\nCan you try to reproduce it on master?", "created_at": "2018-03-08 19:36:39", "user": 12642, "id": 371599059}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "- Removed the if-else and replaced it with ternary to make code shorter and simple.", "labels": [], "number": 32195, "updated_at": "2018-03-08 13:07:22", "user": 35190080, "closed_at": "2018-03-08 12:52:43", "id": 303466172, "title": "Use of Ternary operator.", "url": "https://api.github.com/repos/rails/rails/issues/32195", "created_at": "2018-03-08 12:40:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371475813", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 12:40:59", "user": 7468109, "id": 371475813}, {"reactions": {"+1": [35190080]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371478346", "text": "Thank you for your patch. However, I think this change is considered a cosmetic change as it does not improve the functionality nor testability of the code, and we generally do not accept this type of patch. You can read the [rationale](https://github.com/rails/rails/pull/13771#issuecomment-32746700) behind this rule here.\r\n\r\nI'm going to close this issue. I hope this won't discourage you from contributing to Rails, and looking forward to see your next pull request in the near future.", "created_at": "2018-03-08 12:52:43", "user": 4912, "id": 371478346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371481424", "text": "Thanks!", "created_at": "2018-03-08 13:07:22", "user": 35190080, "id": 371481424}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Use frozen string literal in activestorage migration schema.\r\n- Updated the sentence in base.rb from actioncable.", "labels": [], "number": 32194, "updated_at": "2018-03-08 11:02:55", "user": 35190080, "closed_at": "2018-03-08 10:59:28", "id": 303434983, "title": "Use frozen string literal in activestorage migration schema.", "url": "https://api.github.com/repos/rails/rails/issues/32194", "created_at": "2018-03-08 10:44:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371451155", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 10:44:45", "user": 7468109, "id": 371451155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371454568", "text": "It is expected. See the context #30356.", "created_at": "2018-03-08 10:59:28", "user": 12642, "id": 371454568}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm building a video server with Rails 5.2.0.rc1, and play video in a React Native app, but the app always throws:\r\n\r\n```\r\nDomain=AVFoundationErrorDomain Code=-11850 \"Operation Stopped\"\r\n```\r\n\r\nError description:\r\n\r\n> The HTTP server sending the media resource is not configured as expected. This might mean that the server does not support byte range requests.\r\n\r\n### Steps to reproduce\r\n\r\n`curl -H \"Accept-Ranges: bytes\" -H \"Range: bytes=0-1\" ACTIVE_STORAGE_DOWNLOAD_URL -v`\r\n\r\n### Expected behavior\r\nReturns `206 Partial Content` with `Content-Range` header.\r\n\r\n### Actual behavior\r\nResponse with `200 OK` and without `Content-Range` header.\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.2.0.rc1\r\n\r\n**Ruby version**:\r\n2.4.1", "labels": ["activestorage"], "number": 32193, "updated_at": "2018-03-22 17:13:45", "user": 8459, "closed_at": "None", "id": 303432710, "title": "[ActiveStorage] DiskController doesn't support HTTP range", "url": "https://api.github.com/repos/rails/rails/issues/32193", "created_at": "2018-03-08 10:37:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375088606", "text": "Accept-Ranges is header sent by server, not client\r\n\r\nFrom https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests\r\n\r\n> If sites omit the Accept-Ranges header, they likely don't support for partial requests. Some sites also explicitly send \"none\" as a value, indicating no support. In some apps, download managers disable their pause buttons in that case.If sites omit the Accept-Ranges header, they likely don't support for partial requests. Some sites also explicitly send \"none\" as a value, indicating no support. In some apps, download managers disable their pause buttons in that case.", "created_at": "2018-03-21 20:42:12", "user": 1240505, "id": 375088606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375104760", "text": "FWIW, Shrine implements this logic in its [`rack_response`](https://github.com/shrinerb/shrine/blob/master/lib/shrine/plugins/rack_response.rb) plugin (which is then called in the [`download_endpoint`](https://github.com/shrinerb/shrine/blob/master/lib/shrine/plugins/download_endpoint.rb)), so it might be worth taking a look there when implementing this functionality.", "created_at": "2018-03-21 21:38:51", "user": 795488, "id": 375104760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375385822", "text": "Awesome @janko-m, we are looking forward to implement it with @mdarda", "created_at": "2018-03-22 17:13:45", "user": 4388676, "id": 375385822}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "r? @pixeltrix\r\nRelated to 22777c80b4c6716c120c6c7f4f9221d58a679fad\r\n", "labels": [], "number": 32192, "updated_at": "2018-03-08 12:07:52", "user": 6443532, "closed_at": "2018-03-08 11:58:45", "id": 303430369, "title": "Use quotes to express a returned value of a route helper as a string [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32192", "created_at": "2018-03-08 10:29:37", "comments": [{"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371467132", "text": "They needed to be double quotes so fixed it myself in ed0c8e9577483c31120239bc138952b235f570b3 - sorry not to ask you to change the PR but we're trying to ship rc2 real soon now, thanks 👍 ", "created_at": "2018-03-08 11:58:45", "user": 6321, "id": 371467132}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Moved and rearranged the require statement at the top.", "labels": [], "number": 32191, "updated_at": "2018-03-08 10:18:08", "user": 35190080, "closed_at": "2018-03-08 10:08:06", "id": 303412309, "title": "Rearranged the require statements.", "url": "https://api.github.com/repos/rails/rails/issues/32191", "created_at": "2018-03-08 09:32:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371431917", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-08 09:32:09", "user": 7468109, "id": 371431917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371441617", "text": "It is expected to avoid circular require due to autoload 7a2fd70fc46ea7537a814172677adea86baf3747.", "created_at": "2018-03-08 10:08:06", "user": 12642, "id": 371441617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371442293", "text": "Ahh Got it. Thanks!!!", "created_at": "2018-03-08 10:10:36", "user": 35190080, "id": 371442293}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nAdd `use_year_names` option to date_select tag.\r\nThis option makes it possible to customize year names. Example:\r\n\r\n```ruby\r\n    date_select('user_birthday', '', start_year: 1998, end_year: 2000, use_year_names: [\"Heisei 10\", \"Heisei 11\", \"Heisei 12\"])\r\n```\r\n\r\nThe HTML produced:\r\n\r\n```HTML\r\n    <select id=\"user_birthday__1i\" name=\"user_birthday[(1i)]\">\r\n    <option value=\"1998\">Heisei 10</option>\r\n    <option value=\"1999\">Heisei 11</option>\r\n    <option value=\"2000\">Heisei 12</option>\r\n    </select>\r\n    /* The rest is omitted */\r\n```\r\nP.S.(on March 8)\r\nChanged option name to `labels_for_year_options`. The argument is also changed from Array to Lambda. Example:\r\n\r\n```ruby\r\n    date_select('user_birthday', '', start_year: 1998, end_year: 2000, labels_for_year_options: ->year { \"Heisei #{ year - 1988 }\" })\r\n```\r\nThe same HTML as written above is produced.\r\n\r\nP.S.(on March 9)\r\nChanged option name again to `label_for_year`. Nothing has changed except it and code style since March 8.\r\n\r\nP.S.(on March 15)\r\nChanged option name again to `year_format`. \r\n\r\n### Other Information\r\n\r\nIn Japan, Wareki, the Japanese calender, is used as often as Western Calender. For example, 2000 A.D. is Heisei 12 in Wareki. It is even used in official documents. Therefore, there is a need for date select box with Wareki years. Some other countries like Israel and Thailand also have their own calenders, so I think the number of people who need this `use_year_names` option is not small.\r\n\r\n", "labels": [], "number": 32190, "updated_at": "2018-03-19 03:23:47", "user": 26531068, "closed_at": "None", "id": 303142622, "title": "Add `use_year_names` option to date_select tag", "url": "https://api.github.com/repos/rails/rails/issues/32190", "created_at": "2018-03-07 15:27:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371174945", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-07 15:27:37", "user": 7468109, "id": 371174945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371319601", "text": "I also patched `date_select` to achieve this use case and found `year_format_string: \"Heisei %d\"` is better since we don't have to repeat \"Heisei\" and it is consistent with `month_format_string` option.\r\n\r\n`year_format_string: \"%d年\"` (meaning \"Year %d\") or `year_format_string: \"FY %d\"` is another use case for this feature.", "created_at": "2018-03-07 23:13:42", "user": 5965113, "id": 371319601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371322024", "text": "I agree with @yskkin. But if you need to mix different names it feels like you would be better served with an helper in your application.", "created_at": "2018-03-07 23:25:08", "user": 47848, "id": 371322024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371324098", "text": "Ah, Western calendar and Japanese calendar are different so we can't handle with `%d`...\r\nI was wrong but still feels that `[\"Heisei 10\", \"Heisei 11\", \"Heisei 12\"]` is not a right way.\r\nNow I don't know what is appropriate API...", "created_at": "2018-03-07 23:35:18", "user": 5965113, "id": 371324098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371344535", "text": "Yeah, this is actually going to be tricky for Japanese year 😅\r\n\r\nWith Thai Buddhist calendar, we got a easy way out since at the end of the day it's just a numeric value:\r\n\r\n```\r\n> helper.select_year Date.today.year + 543, start_year: Date.today.year + 533, end_year: Date.today.year + 543\r\n=> \"<select id=\\\"date_year\\\" name=\\\"date[year]\\\">\\n<option value=\\\"2551\\\">2551</option>\\n<option value=\\\"2552\\\">2552</option>\\n<option value=\\\"2553\\\">2553</option>\\n<option value=\\\"2554\\\">2554</option>\\n<option value=\\\"2555\\\">2555</option>\\n<option value=\\\"2556\\\">2556</option>\\n<option value=\\\"2557\\\">2557</option>\\n<option value=\\\"2558\\\">2558</option>\\n<option value=\\\"2559\\\">2559</option>\\n<option value=\\\"2560\\\">2560</option>\\n<option value=\\\"2561\\\" selected=\\\"selected\\\">2561</option>\\n</select>\\n\"\r\n```\r\n\r\nFor Japanese year, I feel like having to pass `use_year_names` still doesn't feel right to me since I would expect things to happen automatically instead (so if you do `select_year Date.today, start_year: 1985` you'd get `[Showa 60, Showa 61, Showa 62, Showa 63, Showa 64/Heisei 1, Heisei 2, ...]` and so on automatically).\r\n\r\nI dug around and actually found a [wareki](https://github.com/sugi/wareki) gem which helps conversion from Gregorian date. I have a feeling that there must be a market in need of, say, `wareki-rails` gem that would aid the date/time conversion. I also think that it's more appropriate to be in a separate gem as it's very Japan-specific feature (otherwise I'd already submit patch for Buddhist year for Thailand 😄)", "created_at": "2018-03-08 01:20:56", "user": 4912, "id": 371344535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371406527", "text": "@yskkin @rafaelfranca @sikachu \r\nThanks for your reviews!\r\nWell, I understand what you say. I don't think that this `use_year_names` option is the best way to achieve this goal, either. So at first I thought about implementing this option using `%d` as  @yskkin says, but I couldn't find a simple way to pass different number in `%d` and value of option tag, so I used array. It's the same way as `use_month_names` option, which already exists.\r\nAnd as @sikachu says, it is true that Wareki is unique problem in Japan. However, I still think that rails needs an option like I proposed (though I don't stick to the format in this PR). In the case of Thai Buddhist calender, to store data properly, the HTML options should be like:\r\n\r\n```HTML\r\n<option value=\"2008\">2551</option>\r\n<option value=\"2009\">2552</option>\r\n<option value=\"2010\">2553</option>\r\n```\r\n\r\nBut now `year` field in date_select doesn't have a way to use different number in option value and what is displayed. Since Western Calender is not the only format of year, I think rails at least needs a way to put different value in these two as in `month` field.\r\n", "created_at": "2018-03-08 07:44:03", "user": 26531068, "id": 371406527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371411418", "text": "Actually, one good way that we can achieve this is maybe letting user pass in a proc?\r\n\r\n```ruby\r\ndate_select('user_birthday', '', start_year: 1998, end_year: 2000, labels_for_year_options: ->{ |year| convert_year_to_wareki(year) })\r\n```", "created_at": "2018-03-08 08:08:25", "user": 4912, "id": 371411418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371412939", "text": "It seems much better for me. I try to revise my codes in this way.", "created_at": "2018-03-08 08:15:58", "user": 26531068, "id": 371412939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371435896", "text": "Adopting @sikachu 's suggestion, I changed my codes and now the option takes Lambda as the argument. If the change is approved, I will squash the commits and change my comment on the commit.", "created_at": "2018-03-08 09:47:16", "user": 26531068, "id": 371435896}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371684105", "text": "@sikachu \r\nI adopted all your suggestion and changed my code style. Thanks for you reviews a lot! As you say, now I wait for some native speakers reviewing my documentation.", "created_at": "2018-03-09 01:35:27", "user": 26531068, "id": 371684105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372173626", "text": "I think there's room to more closely mirror the month handling:\r\n\r\n* I suggest we call the option `:year_format`, similar to the existing `:month_format_string`.\r\n* A `year_name(number)` method can take care of the lambda, and also fall back to `number` -- better to always use one code path instead of sometimes using `build_options`.\r\n\r\nHowever, I'm a bit unsure whether it's worthwhile for us to support this... it's absolutely true that there are a number of other calendar systems, but this only helps the (small?) subset of those that still use Gregorian day/month numbering, and [at least approximately] agree that the year starts on Jan 1.\r\n\r\nOn balance I think it's probably okay -- we do already provide a lot of formatting options on this helper.", "created_at": "2018-03-12 02:03:06", "user": 1034, "id": 372173626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373331639", "text": "Yeah, I feel like it's worthwhile to add support for this as well. And yeah, I agree with calling the option `:year_format`.\r\n\r\n@liwii would you mind updating the PR per @matthewd's request and update your branch? I think it needs a rebase as well due to CHANGELOG conflict. Thanks!", "created_at": "2018-03-15 10:34:36", "user": 4912, "id": 373331639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373404853", "text": "@matthewd \r\nThanks for your review. I agree that your suggestion will make my new option more close to existing month handling. I will adopt your suggestion and update my branch soon.\r\n@sikachu \r\nThanks for making comments a lot of times.  Of course I don't mind adopting @matthewd's request and resolving conflicts. I will commit the change immediately.", "created_at": "2018-03-15 14:56:41", "user": 26531068, "id": 373404853}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373415187", "text": "@matthewd @sikachu \r\nI adopted all your suggestions and squashed all the commits!", "created_at": "2018-03-15 15:24:16", "user": 26531068, "id": 373415187}], "assignees": [350807, 350807], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [672989]}, "text": "We are using nginx + puma and Ruby on Rails on AWS ec2. \r\n\r\nGenerated folders for storage images overwrite insensitive old folders naming like AB become Ab as example.\r\n\r\nThis works fine for insensitive URLs by default on the Mac I’m developing on but when we moved to linux with its case sensitive file system, we have a bunch of broken images. \r\n\r\nAny solution for that?", "labels": ["activestorage"], "number": 32189, "updated_at": "2018-03-08 22:08:48", "user": 22920591, "closed_at": "None", "id": 303099890, "title": "[ActiveStorage] linux with its case sensitive and broken images", "url": "https://api.github.com/repos/rails/rails/issues/32189", "created_at": "2018-03-07 13:33:49", "comments": [], "assignees": [94129, 94129], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Replaced the word \"we\" with \"our\" to make sentence meaningful.", "labels": [], "number": 32188, "updated_at": "2018-03-08 10:18:21", "user": 35190080, "closed_at": "2018-03-07 15:57:01", "id": 303079676, "title": "Fixed the typo in routes_set.rb", "url": "https://api.github.com/repos/rails/rails/issues/32188", "created_at": "2018-03-07 12:29:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371123610", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-07 12:29:57", "user": 7468109, "id": 371123610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371185119", "text": "It's fine as if, thanks!", "created_at": "2018-03-07 15:57:01", "user": 350807, "id": 371185119}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "tl;dr version:\r\n\r\nI'm probably missing something here, but in my setup using ActiveStorage's **local** option with `direct_upload` option set to `true`:\r\n\r\n```erb\r\n<div class=\"form-group\">\r\n  <%= property.label :images %>\r\n  <%= property.file_field :images, multiple: true, direct_upload: true, class: 'form-control' %>\r\n</div>\r\n```\r\n\r\n... I get the following errors:\r\n\r\n```bash\r\nActiveSupport::MessageVerifier::InvalidSignature (ActiveSupport::MessageVerifier::InvalidSignature):\r\n```\r\nand\r\n\r\n```bash\r\nActiveRecord::RecordNotUnique (PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint \"index_active_storage_attachments_uniqueness\"\r\n```\r\n\r\nI tried doing `rails db:reset` but it was no good.\r\n\r\nIs this something to be expected? My goal is to get these nice little progress bars as shown in the [docs](http://edgeguides.rubyonrails.org/active_storage_overview.html#example). Please note that the form works fine if `direct_upload` is set to `false`.\r\n\r\n---\r\n\r\n### Steps to reproduce\r\n\r\nUse ActiveStorage configured to store locally.\r\n\r\n```ruby\r\n# development.rb\r\nconfig.active_storage.service = :local\r\n```\r\n\r\n```yml\r\n# storage.yml\r\nlocal:\r\n  service: Disk\r\n  root: <%= Rails.root.join(\"storage\") %>\r\n  host: \"http://shakalaka.lvh.me:3000\"\r\n\r\ntest:\r\n  service: Disk\r\n  root: <%= Rails.root.join(\"tmp/storage\") %>\r\n\r\namazon:\r\n  service: S3\r\n  access_key_id: \"\"\r\n  secret_access_key: \"\"\r\n```\r\n\r\n```erb\r\n<%#= new.html.erb %>\r\n<div class=\"form-group\">\r\n  <%= property.label :images %>\r\n  <%= property.file_field :images, multiple: true, direct_upload: true, class: 'form-control' %>\r\n</div>\r\n```\r\n\r\n### Expected behavior\r\n\r\nI'd expect active storage to store the files properly on upload. \r\n\r\n### Actual behavior\r\n\r\n```bash\r\nActiveSupport::MessageVerifier::InvalidSignature (ActiveSupport::MessageVerifier::InvalidSignature):\r\n```\r\n...a couple of lines later\r\n\r\n```bash\r\nActiveRecord::RecordNotUnique (PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint \"index_active_storage_attachments_uniqueness\"\r\n```\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.2.0.rc1\r\n**Ruby version**: Ruby 2.5.0", "labels": ["activestorage"], "number": 32187, "updated_at": "2018-03-08 12:10:02", "user": 1859806, "closed_at": "2018-03-08 12:10:02", "id": 302999523, "title": "Direct uploads using ActiveStorage local option don't seem to work", "url": "https://api.github.com/repos/rails/rails/issues/32187", "created_at": "2018-03-07 08:04:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371219464", "text": "Have you [included the JavaScript](http://edgeguides.rubyonrails.org/active_storage_overview.html#direct-upload-installation) and added `images: []` to the list of safe parameters?", "created_at": "2018-03-07 17:38:10", "user": 4206465, "id": 371219464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371232821", "text": "@robertlyall Yes I've done all the steps. The progress bars do render upon form submission and go  all the way up to 100%. However the requests never get through as I get back HTTP 500 and the console says what I wrote in the issue.", "created_at": "2018-03-07 18:18:43", "user": 1859806, "id": 371232821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371351578", "text": "I’m afraid I couldn’t reproduce in a new application using 5.2.0 RC1. Could you please share a minimal sample application that reproduces the issue you’re seeing?", "created_at": "2018-03-08 01:57:09", "user": 94129, "id": 371351578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371409997", "text": "@georgeclaghorn \r\nI eventually managed to find the culprit after your suggestion of creating a sample app. \r\n\r\nIt turns out that I was mistakenly using this in my controller:\r\n\r\n```ruby\r\ndef create\r\n    @post = Post.new(post_params)\r\n    @post.images.attach(post_params[:images]) # !!!\r\n\r\n    respond_to do |format|\r\n      if @post.save\r\n        format.html { redirect_to @post, notice: 'Post was successfully created.' }\r\n        format.json { render :show, status: :created, location: @post }\r\n      else\r\n        format.html { render :new }\r\n        format.json { render json: @post.errors, status: :unprocessable_entity }\r\n      end\r\n    end\r\n  end\r\n```\r\n\r\nBy using `Post.new` **and** `attach` I was basically attaching each file twice which explains both the invalid signature (I think) and the duplicate record errors (even though -for some reason- it was working when using `direct_upload: false`). \r\n\r\nMaybe the docs could have been a little more helpful on this one but it was mostly and mainly my mistake.\r\n\r\nThank you for your prompt response and my apologies for wasting your time on an issue which was not a Rails bug. Please feel free to close this one.", "created_at": "2018-03-08 08:01:15", "user": 1859806, "id": 371409997}, {"reactions": {"+1": [1859806]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371469469", "text": "No worries. Glad you figured it out.", "created_at": "2018-03-08 12:10:02", "user": 94129, "id": 371469469}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Expected behavior\r\nhow to fix it ?\r\n\r\n### Actual behavior\r\ni had error bundler: command not found: spring, after fresh setup\r\n![screenshot 2018-03-07 13 18 38](https://user-images.githubusercontent.com/25195185/37076643-1e4d2900-220a-11e8-9e0b-ae44663d62c4.png)\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.5.0\r\n\r\n**OS**: Ubuntu 16.04\r\n", "labels": [], "number": 32186, "updated_at": "2018-03-10 02:33:20", "user": 25195185, "closed_at": "2018-03-10 02:33:20", "id": 302977791, "title": "bundler: command not found: spring", "url": "https://api.github.com/repos/rails/rails/issues/32186", "created_at": "2018-03-07 06:19:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371036603", "text": "Do you mind posting the whole terminal output and not just the screenshot snippet? ", "created_at": "2018-03-07 06:25:35", "user": 4912, "id": 371036603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371036714", "text": "(Probably just the output after you run `rails new app_name`)", "created_at": "2018-03-07 06:26:12", "user": 4912, "id": 371036714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371045566", "text": "wahyu@jagoanmamah:~$ rails new myapp -d mysql\r\n      create  \r\n      create  README.md\r\n      create  Rakefile\r\n      create  config.ru\r\n      create  .gitignore\r\n      create  Gemfile\r\n         run  git init from \".\"\r\nInitialized empty Git repository in /home/wahyu/myapp/.git/\r\n      create  app\r\n      create  app/assets/config/manifest.js\r\n      create  app/assets/javascripts/application.js\r\n      create  app/assets/javascripts/cable.js\r\n      create  app/assets/stylesheets/application.css\r\n      create  app/channels/application_cable/channel.rb\r\n      create  app/channels/application_cable/connection.rb\r\n      create  app/controllers/application_controller.rb\r\n      create  app/helpers/application_helper.rb\r\n      create  app/jobs/application_job.rb\r\n      create  app/mailers/application_mailer.rb\r\n      create  app/models/application_record.rb\r\n      create  app/views/layouts/application.html.erb\r\n      create  app/views/layouts/mailer.html.erb\r\n      create  app/views/layouts/mailer.text.erb\r\n      create  app/assets/images/.keep\r\n      create  app/assets/javascripts/channels\r\n      create  app/assets/javascripts/channels/.keep\r\n      create  app/controllers/concerns/.keep\r\n      create  app/models/concerns/.keep\r\n      create  bin\r\n      create  bin/bundle\r\n      create  bin/rails\r\n      create  bin/rake\r\n      create  bin/setup\r\n      create  bin/update\r\n      create  bin/yarn\r\n      create  config\r\n      create  config/routes.rb\r\n      create  config/application.rb\r\n      create  config/environment.rb\r\n      create  config/secrets.yml\r\n      create  config/cable.yml\r\n      create  config/puma.rb\r\n      create  config/spring.rb\r\n      create  config/environments\r\n      create  config/environments/development.rb\r\n      create  config/environments/production.rb\r\n      create  config/environments/test.rb\r\n      create  config/initializers\r\n      create  config/initializers/application_controller_renderer.rb\r\n      create  config/initializers/assets.rb\r\n      create  config/initializers/backtrace_silencers.rb\r\n      create  config/initializers/cookies_serializer.rb\r\n      create  config/initializers/cors.rb\r\n      create  config/initializers/filter_parameter_logging.rb\r\n      create  config/initializers/inflections.rb\r\n      create  config/initializers/mime_types.rb\r\n      create  config/initializers/new_framework_defaults_5_1.rb\r\n      create  config/initializers/wrap_parameters.rb\r\n      create  config/locales\r\n      create  config/locales/en.yml\r\n      create  config/boot.rb\r\n      create  config/database.yml\r\n      create  db\r\n      create  db/seeds.rb\r\n      create  lib\r\n      create  lib/tasks\r\n      create  lib/tasks/.keep\r\n      create  lib/assets\r\n      create  lib/assets/.keep\r\n      create  log\r\n      create  log/.keep\r\n      create  public\r\n      create  public/404.html\r\n      create  public/422.html\r\n      create  public/500.html\r\n      create  public/apple-touch-icon-precomposed.png\r\n      create  public/apple-touch-icon.png\r\n      create  public/favicon.ico\r\n      create  public/robots.txt\r\n      create  test/fixtures\r\n      create  test/fixtures/.keep\r\n      create  test/fixtures/files\r\n      create  test/fixtures/files/.keep\r\n      create  test/controllers\r\n      create  test/controllers/.keep\r\n      create  test/mailers\r\n      create  test/mailers/.keep\r\n      create  test/models\r\n      create  test/models/.keep\r\n      create  test/helpers\r\n      create  test/helpers/.keep\r\n      create  test/integration\r\n      create  test/integration/.keep\r\n      create  test/test_helper.rb\r\n      create  test/system\r\n      create  test/system/.keep\r\n      create  test/application_system_test_case.rb\r\n      create  tmp\r\n      create  tmp/.keep\r\n      create  tmp/cache\r\n      create  tmp/cache/assets\r\n      create  vendor\r\n      create  vendor/.keep\r\n      create  package.json\r\n      remove  config/initializers/cors.rb\r\n      remove  config/initializers/new_framework_defaults_5_1.rb\r\n         run  bundle install\r\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.\r\nFetching gem metadata from https://rubygems.org/.........\r\nFetching gem metadata from https://rubygems.org/.\r\nResolving dependencies.....\r\nUsing rake 12.3.0\r\nUsing concurrent-ruby 1.0.5\r\nUsing i18n 0.9.5\r\nUsing minitest 5.11.3\r\nUsing thread_safe 0.3.6\r\nUsing tzinfo 1.2.5\r\nUsing activesupport 5.1.5\r\nUsing builder 3.2.3\r\nUsing erubi 1.7.1\r\nUsing mini_portile2 2.3.0\r\nUsing nokogiri 1.8.2\r\nUsing rails-dom-testing 2.0.3\r\nUsing crass 1.0.3\r\nUsing loofah 2.2.0\r\nUsing rails-html-sanitizer 1.0.3\r\nUsing actionview 5.1.5\r\nUsing rack 2.0.4\r\nUsing rack-test 0.8.3\r\nUsing actionpack 5.1.5\r\nUsing nio4r 2.2.0\r\nUsing websocket-extensions 0.1.3\r\nUsing websocket-driver 0.6.5\r\nUsing actioncable 5.1.5\r\nUsing globalid 0.4.1\r\nUsing activejob 5.1.5\r\nUsing mini_mime 1.0.0\r\nUsing mail 2.7.0\r\nUsing actionmailer 5.1.5\r\nUsing activemodel 5.1.5\r\nUsing arel 8.0.0\r\nUsing activerecord 5.1.5\r\nUsing bundler 1.16.1\r\nUsing coffee-script-source 1.12.2\r\nUsing execjs 2.7.0\r\nUsing coffee-script 2.4.1\r\nUsing method_source 0.9.0\r\nUsing thor 0.20.0\r\nUsing railties 5.1.5\r\nUsing coffee-rails 4.2.2\r\nUsing ffi 1.9.23\r\nUsing multi_json 1.13.1\r\nUsing jbuilder 2.7.0\r\nUsing mysql2 0.4.10\r\nUsing puma 3.11.3\r\nUsing sprockets 3.7.1\r\nUsing sprockets-rails 3.2.1\r\nUsing rails 5.1.5\r\nUsing rb-fsevent 0.10.3\r\nUsing rb-inotify 0.9.10\r\nUsing sass-listen 4.0.0\r\nUsing sass 3.5.5\r\nUsing tilt 2.0.8\r\nUsing sass-rails 5.0.7\r\nUsing turbolinks-source 5.1.0\r\nUsing turbolinks 5.1.0\r\nUsing uglifier 4.1.6\r\nBundle complete! 16 Gemfile dependencies, 56 gems now installed.\r\nGems in the groups development, test and postgresql were not installed.\r\nUse `bundle info [gemname]` to see where a bundled gem is installed.\r\n         run  bundle exec spring binstub --all\r\nbundler: command not found: spring\r\nInstall missing gem executables with `bundle install`\r\n", "created_at": "2018-03-07 07:13:13", "user": 25195185, "id": 371045566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371112475", "text": "> Gems in the groups development, test and postgresql were not installed.\r\n\r\nIt looks like you have Bundler configured to exclude certain groups, which is preventing spring from being installed. Run `bundle config` to see where the configuration is set.", "created_at": "2018-03-07 11:41:24", "user": 432189, "id": 371112475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371136587", "text": "Note that I meant \"running `bundle config` might help you figure out your problem\", not \"paste the output of `bundle config` here and I'll tell you what to do next\" 🙂 \r\n\r\nThis isn't a problem with Rails; please try Stack Overflow if you need help fixing your environment.", "created_at": "2018-03-07 13:22:53", "user": 432189, "id": 371136587}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [22000544, 9379317, 35339514]}, "text": "Equality comparisons between dates and times can take some extra time to comprehend. I tend to think of a date or time as \"before\" or \"after\" another date or time, but I naturally read `<` and `>` as \"less than\" and \"greater than.\" This change seeks to make date/time comparisons more human readable.", "labels": [], "number": 32185, "updated_at": "2018-03-19 16:37:58", "user": 7942714, "closed_at": "None", "id": 302963128, "title": "Add `before?` and `after?` methods to date and time classes", "url": "https://api.github.com/repos/rails/rails/issues/32185", "created_at": "2018-03-07 04:44:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371021226", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-07 04:44:20", "user": 7468109, "id": 371021226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372544899", "text": "Hi, @kamipo! I'd love to hear your thoughts on this PR. Is there any other context I can provide that would be useful, or do you think we should pull anyone else in? Thanks in advance!", "created_at": "2018-03-13 04:40:27", "user": 7942714, "id": 372544899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374278529", "text": "Hi, @kaspth! I noticed that you recently reviewed [another Active Support PR](https://github.com/rails/rails/pull/32268), would you mind taking a look at this one when you have a chance? Sorry if you're not the best person to ask -- let me know if it would be better for me to reach out to someone else. Thanks!", "created_at": "2018-03-19 16:37:58", "user": 7942714, "id": 374278529}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nSee http://api.rubyonrails.org/classes/ActiveSupport.html (scroll down a bit) — there's a bunch of documentation related to JSON extensions appearing on the top-level ActiveSupport module. It's not clear that this is intended for inclusion in the API docs, so we hide it.", "labels": [], "number": 32184, "updated_at": "2018-03-07 03:27:50", "user": 1915, "closed_at": "2018-03-07 03:26:24", "id": 302948957, "title": "Hide internal docs from root ActiveSupport module", "url": "https://api.github.com/repos/rails/rails/issues/32184", "created_at": "2018-03-07 03:09:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371010429", "text": "Thanks @kivikakk!", "created_at": "2018-03-07 03:26:36", "user": 199, "id": 371010429}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis is a fix for a bug @tenderlove and I have been stepping through together.\r\n\r\n`URI.unescape` in Rails 4.2 throws an `Encoding::CompatibilityError` if the (UTF-8 tagged) argument contains actual Unicode characters. ~This doesn't happen on 3.x; compare the monkey-patches:~ Turns out this was a patch made in our own application. Looks like we should be able to just pull this across.\r\n\r\n#### ~3.x~ patched\r\n\r\n```ruby\r\n      def unescape(str, escaped = /%[a-fA-F\\d]{2}/)\r\n        # TODO: Are we actually sure that ASCII == UTF-8?\r\n        # YK: My initial experiments say yes, but let’s be sure please\r\n        enc = str.encoding\r\n        enc = Encoding::UTF_8 if enc == Encoding::US_ASCII\r\n        str.dup.force_encoding(Encoding::ASCII_8BIT).gsub(escaped) { [$&[1, 2].hex].pack(‘C’) }.force_encoding(enc)\r\n      end\r\n```\r\n\r\n#### 4.2\r\n\r\n```ruby\r\n    def unescape(str, escaped = /%[a-fA-F\\d]{2}/)\r\n      # TODO: Are we actually sure that ASCII == UTF-8?\r\n      # YK: My initial experiments say yes, but let’s be sure please\r\n      enc = str.encoding\r\n      enc = Encoding::UTF_8 if enc == Encoding::US_ASCII\r\n      str.gsub(escaped) { [$&[1, 2].hex].pack(‘C’) }.force_encoding(enc)\r\n    end\r\n```\r\n\r\nThe issue is that `[$&[1, 2].hex].pack('C')` returns an ASCII-8BIT tagged string, which we then fail to gsub into `str`. This wasn't a problem in the ~3.x~ patched variant where the string was tagged as ASCII-8BIT anyway.\r\n\r\nThis PR opens by correcting the test; `parser.escape(str)` returns an US-ASCII (!) tagged string, so `parser.unescape` succeeds for similar reasons as why the ~3.x~ patched variant succeeded. This corrects the test to resemble the actual use-case: passing UTF-8 tagged strings into `URI.unescape`.", "labels": [], "number": 32183, "updated_at": "2018-03-09 00:33:02", "user": 1915, "closed_at": "2018-03-07 16:18:55", "id": 302924352, "title": "URI.unescape \"extension\" fails with Unicode input", "url": "https://api.github.com/repos/rails/rails/issues/32183", "created_at": "2018-03-07 00:51:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370988534", "text": "> `str.dup.force_encoding(Encoding::ASCII_8BIT)`\r\n\r\nI can't find that [in 3-2-stable](https://github.com/rails/rails/blob/3-2-stable/activesupport/lib/active_support/core_ext/uri.rb#L18) :confused: ", "created_at": "2018-03-07 01:19:18", "user": 1034, "id": 370988534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370989061", "text": "> I can't find that in 3-2-stable 😕\r\n\r\nUgh, don't tell me this is in one of our own patches to activesupport … investigating.", "created_at": "2018-03-07 01:22:03", "user": 1915, "id": 370989061}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370991007", "text": "Not only is it from a patch in activesupport made in our application, it was *me* who made the change nearly two years ago.  My goodness.\r\n\r\n![capture d ecran 2018-03-07 a 12 31 30](https://user-images.githubusercontent.com/1915/37068584-905664e6-2203-11e8-952b-21ee479441b5.png)\r\n\r\nSo this has been in Rails forever — I think it's a valid bug nonetheless.", "created_at": "2018-03-07 01:32:57", "user": 1915, "id": 370991007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370992197", "text": "Yeah, I agree it sounds like a sensible change.. that's why I tried to blame-chase why it'd gone away 😅 ", "created_at": "2018-03-07 01:39:37", "user": 1034, "id": 370992197}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370992263", "text": "Haha, right? I'll let the latest commit fail CI so we can red–green this properly, then push the fix commit.", "created_at": "2018-03-07 01:40:05", "user": 1915, "id": 370992263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371005312", "text": "This is ready for review. There's two failing builds (one required), but it looks like it's a timeout (and I can't restart it).", "created_at": "2018-03-07 02:54:04", "user": 1915, "id": 371005312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371010666", "text": "Someone reran the failing builds! Thanks! :heart:", "created_at": "2018-03-07 03:28:11", "user": 1915, "id": 371010666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371192896", "text": "Thanks @kivikakk ❤️ ", "created_at": "2018-03-07 16:19:04", "user": 1080678, "id": 371192896}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371211901", "text": "@kivikakk it seems like [this code](https://github.com/rails/rails/blob/6a54932d43da3b24a1a8f41575cfe65c6a18c6bd/activesupport/lib/active_support/core_ext/uri.rb#L16) is almost entirely lifted from [upstream](https://github.com/ruby/ruby/blob/trunk/lib/uri/rfc2396_parser.rb#L331-L333).  Does this seem like something we should upstream so we can rm the monkeypatch in Rails?", "created_at": "2018-03-07 17:15:09", "user": 3124, "id": 371211901}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371214484", "text": "@tenderlove this is Rails 😉 ", "created_at": "2018-03-07 17:22:48", "user": 1080678, "id": 371214484}, {"reactions": {"laugh": [8122246, 13086902]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371216521", "text": "Oh gosh you meant upstream to Ruby. 😳 ", "created_at": "2018-03-07 17:29:00", "user": 1080678, "id": 371216521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371321782", "text": "I dug into it a bit — `URI.unescape` was deprecated in 2009 (lol), see https://github.com/ruby/ruby/commit/238b979f1789f95262a267d8df6239806f2859cc. `CGI.uenscape` is recommended instead, which doesn't have this bug (it calls `string.tr(…).b` before `gsub`. Should we still consider submitting a patch?", "created_at": "2018-03-07 23:23:56", "user": 1915, "id": 371321782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371352380", "text": "Patch opened upstream: https://bugs.ruby-lang.org/issues/14586\r\n\r\nAfter discussion with @tenderlove, it appears the following is the case:\r\n\r\n* This problem exists in upstream Ruby. No-one is currently relying on the behaviour introduced by this PR, since it's always been broken.\r\n* Since we're monkey-patching Ruby itself, we should try to make the fix there instead of monkey-patching.\r\n\r\nSo the best course of action looks like:\r\n\r\n* Back this PR out before anyone comes to rely on the newly-fixed behaviour.\r\n* Try to get the patch across the line in Ruby.\r\n* Once (if) it's in Ruby-next, reintroduce this monkey-patch; this way the following combinations will work: `old Rails, new Ruby`; `new Rails, old Ruby`; `new Rails, new Ruby`. (Only `old Ruby, old Rails` won't work.)\r\n* Keep the monkey-patch in our application. We can remove it if we get a new Rails with the monkey-patch.\r\n\r\nAlternatively, we can just keep this PR in and hope Ruby might take the patch, but keeping the diff of core libraries between Ruby and Rails seems like something to aim for.\r\n\r\nHow does this sound?", "created_at": "2018-03-08 02:01:13", "user": 1915, "id": 371352380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371471883", "text": "> `CGI.unescape` is recommended instead\r\n\r\nDo we call this monkey-patched method internally? If so, should we maybe be using CGI.unescape instead?", "created_at": "2018-03-08 12:21:58", "user": 1034, "id": 371471883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371656796", "text": "> Do we call this monkey-patched method internally? If so, should we maybe be using CGI.unescape instead?\r\n\r\nNope — this is only a convenience patch that our users might be relying on.", "created_at": "2018-03-08 23:10:36", "user": 1915, "id": 371656796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371666558", "text": "This has been patched in Ruby! :tada:\r\n\r\nSo, I think we can keep this PR in.", "created_at": "2018-03-08 23:57:37", "user": 1915, "id": 371666558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371666862", "text": "@kivikakk I think even with the patch in Ruby, [this line](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/uri.rb#L7) will never un-monkeypatch URI because the default encoding is UTF-8, but `parser.escape` will return a US-ASCII string (causing `parser.unescape` to return a wrongly encoded US-ASCII string).  Would you mind fixing that?", "created_at": "2018-03-08 23:59:20", "user": 3124, "id": 371666862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371667179", "text": "Good catch, I'll open a PR shortly. 👍 ", "created_at": "2018-03-09 00:00:51", "user": 1915, "id": 371667179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371673146", "text": "→ #32210", "created_at": "2018-03-09 00:33:02", "user": 1915, "id": 371673146}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The `Globalize::Backend::Static` class no longer exists in the [globalize](https://github.com/globalize/globalize) gem, so far as I can tell. I think this section of the guide is way out of date.", "labels": [], "number": 32182, "updated_at": "2018-03-09 12:38:42", "user": 561827, "closed_at": "2018-03-09 10:51:30", "id": 302922219, "title": "Update some i18n references in guides", "url": "https://api.github.com/repos/rails/rails/issues/32182", "created_at": "2018-03-07 00:40:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370980948", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-07 00:40:23", "user": 7468109, "id": 370980948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370984482", "text": "Summary of changes:\r\n\r\n- Remove reference to `Globalize::Backend::Static` which no longer exists in globalize gem\r\n- Remove reference to [rails-i18n google group](https://groups.google.com/forum/#!forum/rails-i18n), which is no longer maintained (last post in 2014, moderators no longer active)\r\n- Remove confusing reference to Globalize3\r\n- Add section on storing translations, reference top three popular gems for doing this ([Globalize](https://github.com/globalize/globalize), [Mobility](https://github.com/shioyama/mobility), [Traco](https://github.com/barsoom/traco)) (Disclosure: I'm the author of Mobility.)\r\n\r\nI think a lot more could be done to update this guide, just skimming it I found these issues but there are probably more. I think adding a section on translating content is important because it's a topic that comes up a lot, and can be very confusing for people unaware of the distinction with the standard I18n API.\r\n\r\nAlso: I'm aware that technically you *can* store strings in the database with i18n using the ActiveRecord backend, but it's an edge use case and gems like Globalize and Mobility are much more commonly used for this.", "created_at": "2018-03-07 00:57:59", "user": 561827, "id": 370984482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370984865", "text": "@svenfuchs Since you were the original author of this guide, maybe you could comment on the changes? :smile:", "created_at": "2018-03-07 00:59:47", "user": 561827, "id": 370984865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371145964", "text": "There were some formatting issues, fixed them in 5cb14f0.", "created_at": "2018-03-07 13:58:12", "user": 561827, "id": 371145964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371780137", "text": "@shioyama thanks!", "created_at": "2018-03-09 10:51:54", "user": 6321, "id": 371780137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371788005", "text": "Thanks! I don't suppose there's any chance this could get cherry-picked to 5-2-stable as well? Or should I make a PR to that branch for that?", "created_at": "2018-03-09 11:29:34", "user": 561827, "id": 371788005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371795882", "text": "@shioyama cherry-picked to 5-2-stable in 78d47aa4bf0bf33a216cc7d9f1c6eeb182f178f4", "created_at": "2018-03-09 12:09:19", "user": 6321, "id": 371795882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371796287", "text": ":+1: Thanks!", "created_at": "2018-03-09 12:11:27", "user": 561827, "id": 371796287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371800284", "text": "Thanks for all your great work in the I18n space, @shioyama! \r\n\r\n❤️ ", "created_at": "2018-03-09 12:31:51", "user": 2208, "id": 371800284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371801638", "text": ":blush:", "created_at": "2018-03-09 12:38:42", "user": 561827, "id": 371801638}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Recently created new app using Ruby 2.5, Rails 5.1.4\r\n\r\nAdded RSpec, FactoryBot, Capybara gems and configured as per their instructions to run system tests\r\n\r\nCreated basic system test to to assess devise login in spec/system directory using capybara/selenium\r\n\r\n```\r\nRSpec.describe 'PersonLogin' do\r\n  it 'will allow login' do\r\n    user = FactoryBot.create(:user)\r\n    visit new_user_session_path\r\n    fill_in \"Email\", with: user.email\r\n    fill_in \"Password\", with: user.password\r\n    click_on \"Log in\"\r\n    expect(page).to have_content 'Submit my request'\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nNavigating the path by hand with the browser is functioning normally so the tests should pass. \r\n\r\n### Actual behavior\r\nSystem tests fail.  \r\n\r\nAfter much digging, it appears this is due to the Puma configuration. Default Rails configuration spawns no workers and puma runs in single mode. Uncommenting the default code specifying that puma should spawn a minimum of 2 workers causes system tests to fail. \r\n\r\n```\r\n#puma.rb\r\nworkers ENV.fetch(\"WEB_CONCURRENCY\") { 2 }`\r\n```\r\nConfiguring puma to have 0 workers in the test environment and force it to run in single mode solves the problem and tests pass. \r\n\r\n```\r\n#puma.rb\r\n(ENV.fetch(\"RAILS_ENV\") == 'test') ? (workers 0) : (workers ENV.fetch(\"WEB_CONCURRENCY\") { 2 })\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n**Ruby version**: 2.5.0\r\n**Capybara** : 2.18.0\r\n**RSpec** : 3.7.2\r\n**Factory Bot**: 4.8.2\r\n**Puma**: 3.11.0\r\n\r\n", "labels": [], "number": 32181, "updated_at": "2018-03-07 11:44:39", "user": 15062524, "closed_at": "2018-03-07 11:44:39", "id": 302920279, "title": "System tests require Puma single mode configuration", "url": "https://api.github.com/repos/rails/rails/issues/32181", "created_at": "2018-03-07 00:30:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371113222", "text": "Thanks for your issue. \r\nThis issue already fixed by #30638.\r\n", "created_at": "2018-03-07 11:44:38", "user": 987638, "id": 371113222}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  gem \"rails\", \"5.1.4\" #works\r\n  #gem \"rails\", \"5.1.5\" #fail\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n    t.string :name\r\n    t.integer :status\r\n  end\r\n\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  enum status: { inactive: 0, active: 1 }\r\n  validates :status, inclusion: { in: [\"active\"] }, on: :update, if: ->(t) { t.saved_change_to_status? }\r\n  after_create :fail_after_create\r\n  def fail_after_create\r\n    self.update!(name: \"yolo again\")\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_validation\r\n    post = Post.create(status: \"active\", name: \"yolo\")\r\n    assert_equal false, post.update(status: \"inactive\")\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nUpdate should fail because the validation should prevent it.\r\n\r\n### Actual behavior\r\nValidation only works @ 5.1.4\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4 & 5.1.5\r\n\r\n**Ruby version**: 2.5.0\r\n\r\nProbably related #31483", "labels": ["With reproduction steps", "activemodel", "activerecord"], "number": 32180, "updated_at": "2018-03-06 23:06:49", "user": 4867, "closed_at": "2018-03-06 23:06:48", "id": 302776288, "title": "regression: contextual validation not working", "url": "https://api.github.com/repos/rails/rails/issues/32180", "created_at": "2018-03-06 16:42:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370944931", "text": "`git bisect` points to https://github.com/rails/rails/pull/30472 - the behaviour of `saved_change_to_attribute?` changed, not the validation.\r\n\r\nThe new behaviour seems to be intentional: `update!` (in the callback) saves the record again without changing the `status` attribute, so `update` (in the test) doesn't see the attribute as changed.\r\n\r\nThe behaviour is now consistent with what would happen if no callbacks were involved:\r\n\r\n```ruby\r\npost = Post.create(status: \"active\", name: \"yolo\")\r\npost.update!(name: \"yolo again\")\r\npost.update(status: \"inactive\")\r\n```\r\n\r\nCould you explain your actual use case here? Why would you want the validation to conditionally run based on whether an attribute changed in the _last_ save?", "created_at": "2018-03-06 22:03:01", "user": 432189, "id": 370944931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370948038", "text": "the actual use case is more complex, I've just reduced it to the minimum amount of code possible to reproduce. the main purpose of the validation is to ensure the once a entity is created, it never goes back to the original `status`. think as a model that can be `created` and once `activated` should never go back to `created`.", "created_at": "2018-03-06 22:14:03", "user": 4867, "id": 370948038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370954246", "text": "But why are you changing the record itself in a `after_save` callback? Is not better to change it in a `before_save` callback and only save the record in the database once?", "created_at": "2018-03-06 22:36:41", "user": 47848, "id": 370954246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370955507", "text": "@rafaelfranca sure it is better the way you described. I've reported because it changed the behavior (and it could have other consequences), not because I think the test it broke was well written 🤣 ", "created_at": "2018-03-06 22:41:35", "user": 4867, "id": 370955507}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370961774", "text": "The behavior that has changed was a bug so it is expected it change between two bug fix releases. Thanks for reporting.", "created_at": "2018-03-06 23:06:48", "user": 47848, "id": 370961774}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. Create before_action function and run render within it:\r\n\r\n```\r\nclass BeforeController < ApplicationController\r\n  before_action :before_index\r\n\r\n  def index\r\n  end\r\n\r\n  private\r\n  def before_index\r\n    render partial: 'test'\r\n  end\r\nend\r\n```\r\n\r\n2. Create templates for html and js format: `_test.html.erb` and `_test.json.erb`\r\n\r\n3. Open index action url.\r\n\r\n### Expected behavior\r\nRender uses the format specified in the request, so if open `http://localhost:3000/before/index.html` you see _test.html.erb rendered, and if open `http://localhost:3000/before/index.json` you see _test.json.erb rendered.\r\n\r\n### Actual behavior\r\nDefault format (_test.html.erb) is being rendered.\r\nIf make same render execution within index action, format specified in the request is being used.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32179, "updated_at": "2018-03-14 11:49:07", "user": 669306, "closed_at": "None", "id": 302623428, "title": "Render within before_action incorrect format", "url": "https://api.github.com/repos/rails/rails/issues/32179", "created_at": "2018-03-06 09:27:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370739414", "text": "I've found that this is happens because `self.formats` are being set right after `before_` callbacks:\r\n\r\n```\r\nclass BeforeController < ApplicationController\r\n  # before_action :before_index\r\n\r\n  def index\r\n    p 'index action', formats\r\n    render partial: 'test'\r\n  end\r\n\r\n  private\r\n  def before_index\r\n    p 'before_index', formats\r\n    render partial: 'test'\r\n  end\r\nend\r\n```\r\n\r\nConsole logs:\r\n\r\n```\r\nStarted GET \"/before/index.json\" for 127.0.0.1 at 2018-03-06 12:38:22 +0200\r\nProcessing by BeforeController#index as JSON\r\n\"before_index\"\r\n[:html, :text, :js, :css, :ics, :csv, :vcf, :png, :jpeg, :gif, :bmp, :tiff, :svg, :mpeg, :xml, :rss, :atom, :yaml, :multipart_form, :url_encoded_form, :json, :pdf, :zip, :gzip]\r\n  Rendered before/_test.html.erb (0.3ms)\r\nFilter chain halted as :before_index rendered or redirected\r\nCompleted 200 OK in 19ms (Views: 18.7ms)\r\n\r\n\r\nStarted GET \"/before/index.json\" for 127.0.0.1 at 2018-03-06 12:38:35 +0200\r\nProcessing by BeforeController#index as JSON\r\n\"index action\"\r\n[:json]\r\n  Rendered before/_test.json.erb (0.2ms)\r\nCompleted 200 OK in 3ms (Views: 2.2ms)\r\n```\r\n\r\nIMO, formats should be set earlier than `before_` callbacks", "created_at": "2018-03-06 10:40:33", "user": 669306, "id": 370739414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371518938", "text": "Setting formats after the before callbacks have been run has been that way since the first Rails 3.0 beta (possibly earlier - I didn't check). Introducing such a change now could break a lot of apps and prevent manipulation of the formats in a before callback. This seems an incredibly risky thing to do for little benefit - can you explain why the rendering can't happen in the action itself?", "created_at": "2018-03-08 15:20:56", "user": 6321, "id": 371518938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371836630", "text": "@pixeltrix I'm using cancancan for authorization with load_and_authorize_resource and I don't want to redirect when some ajax request isn't authorized so I render toasts with JS. So since load_and_authorize_resource is before action, response is being rendered not in the action.", "created_at": "2018-03-09 14:59:59", "user": 669306, "id": 371836630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372994189", "text": "@r4do sounds like you need to implement a custom before action that replicates what `load_and_authorize_resource` is doing but checks for a XHR request and renders the partial with an explicit `formats: [:json]` option.", "created_at": "2018-03-14 11:49:07", "user": 6321, "id": 372994189}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Expected behavior\r\n\r\n`deep_dup` is used in one place in ActiveModel::Errors to dup details—in `initialize_dup` here: https://github.com/rails/rails/blob/8228d12a43927a22d0ac9bd351d18f473d6a49ae/activemodel/lib/active_model/errors.rb#L82\r\n\r\nSo I'm assuming since details is a hash then `deep_dup` should be used whenever dupping details.\r\n\r\n### Actual behavior\r\n\r\nBut in the `copy` method regular `dup` is used, here: https://github.com/rails/rails/blob/8228d12a43927a22d0ac9bd351d18f473d6a49ae/activemodel/lib/active_model/errors.rb#L95\r\n\r\nThere are specs to do with dup but only 3 and they don't cover deepness.\r\n\r\n### System configuration\r\n**Rails version**: master", "labels": [], "number": 32178, "updated_at": "2018-03-05 22:54:31", "user": 885003, "closed_at": "2018-03-05 22:54:31", "id": 302465913, "title": "ActiveModel::Errors should use deep_dup?", "url": "https://api.github.com/repos/rails/rails/issues/32178", "created_at": "2018-03-05 21:15:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370573916", "text": "Probably, yeah, but `copy!` is private api of the framework and should not used by libraries or applications. If you have a example of how using the public API that `dup` is a problem we can change to use `deep_dup`.", "created_at": "2018-03-05 21:33:54", "user": 47848, "id": 370573916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370597189", "text": "Ah I saw it was a public method but didn't see the `:nodoc:`. I'll close.", "created_at": "2018-03-05 22:54:30", "user": 885003, "id": 370597189}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\nI was using the rollbar gem which has this initializer:\r\n```ruby\r\ninitializer 'rollbar.middleware.rails' do |app|\r\n```\r\nand I tried to hook into it with\r\n```ruby\r\ninitializer('rollbar.user_informer', before: 'rollbar.middleware.rails') do |app|\r\n```\r\nwhich then silently failed because `rollbar.middleware.rails` needed to be a symbol.\r\n\r\nOptions:\r\n - do not allow strings as initializer names\r\n - do not auto-symbolize initializer names\r\n - auto-symbolize hook names from options\r\n - always good: add a `force: true` option that blows up when hook could not be found\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.4\r\n**Ruby version**:\r\n2.5.0", "labels": ["needs work"], "number": 32177, "updated_at": "2018-03-10 02:37:07", "user": 15261525, "closed_at": "None", "id": 302464052, "title": "Hooking into railtie initializer with string name does not work with same string ", "url": "https://api.github.com/repos/rails/rails/issues/32177", "created_at": "2018-03-05 21:09:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371366467", "text": "I don't see anything in [initializable](https://github.com/rails/rails/blob/master/railties/lib/rails/initializable.rb#L88) that would indicate we convert the initializer name to a symbol. Also, we have a [test](https://github.com/rails/rails/blob/master/railties/test/initializable_test.rb#L114) that would indicate strings are just fine for the use case you describe. Can you provide some code to reproduce this bug?", "created_at": "2018-03-08 03:25:06", "user": 13696143, "id": 371366467}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Backport of #32167.", "labels": [], "number": 32176, "updated_at": "2018-03-05 22:07:32", "user": 12642, "closed_at": "2018-03-05 22:07:28", "id": 302444235, "title": "5-1-stable: Fix that after commit callbacks on update does not triggered when optimistic locking is enabled", "url": "https://api.github.com/repos/rails/rails/issues/32176", "created_at": "2018-03-05 20:11:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370548469", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-1-stable. Please double check that you specified the right target!", "created_at": "2018-03-05 20:11:39", "user": 7468109, "id": 370548469}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This method was added by #28462 but marked as private api.\r\nSince `route_for` looks good in pair with `ActionDispatch::Routing::Mapper::CustomUrls#direct`\r\nlet's make it as public api.\r\nWe use it in https://github.com/rails/rails/blob/e83575ff533690db86c92447a539d76b648e9fed/activestorage/config/routes.rb\r\n\r\nCloses #31417\r\n\r\nr? @pixeltrix", "labels": [], "number": 32175, "updated_at": "2018-03-08 10:04:38", "user": 6443532, "closed_at": "2018-03-08 09:49:37", "id": 302433348, "title": "Express `ActionDispatch::Routing::UrlFor#route_for` as public api", "url": "https://api.github.com/repos/rails/rails/issues/32175", "created_at": "2018-03-05 19:39:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371436814", "text": "Not sure why it was marked as private - perhaps I thought it'd be picked up from the one on `RouteSet`? Anyway, thanks @bogdanvlviv.", "created_at": "2018-03-08 09:50:44", "user": 6321, "id": 371436814}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to 6bd33d66dde015a55912af20b469788ba20ddb4e\r\n", "labels": [], "number": 32174, "updated_at": "2018-03-05 16:25:34", "user": 6443532, "closed_at": "2018-03-05 16:23:21", "id": 302295615, "title": "Remove extra arg passed to `Rails::Command::RoutesTest#run_routes_command`", "url": "https://api.github.com/repos/rails/rails/issues/32174", "created_at": "2018-03-05 13:15:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370415313", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-05 13:15:39", "user": 7468109, "id": 370415313}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We use inline style and script for the view held inside rails like welcome page and mailer preview.\r\nTherefore, if inline is prohibited by CSP, they will not work properly. I think that this is not as expected. \r\nThese are views that users can not change, so I think that CSP should be disabled regardless of the setting.\r\n\r\n", "labels": [], "number": 32173, "updated_at": "2018-03-08 12:19:33", "user": 987638, "closed_at": "2018-03-08 12:17:20", "id": 302286117, "title": "Disable content security policy in the internal controllers", "url": "https://api.github.com/repos/rails/rails/issues/32173", "created_at": "2018-03-05 12:44:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370410388", "text": "Is this still a problem with #32018? ", "created_at": "2018-03-05 12:55:45", "user": 1034, "id": 370410388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370412289", "text": "Yes. In #32018 add support for JS, but as inline css is not supported, there is still a problem.", "created_at": "2018-03-05 13:03:11", "user": 987638, "id": 370412289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370412635", "text": "cc @pixeltrix ", "created_at": "2018-03-05 13:04:26", "user": 987638, "id": 370412635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370434851", "text": "Isn't inline CSS enabled by default? Or are you thinking about a situation where it's been disabled in the application", "created_at": "2018-03-05 14:25:15", "user": 6321, "id": 370434851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370646752", "text": "Yes, I am thinking about situations that it is disabled in the application.  \r\n\r\nDeleting comments of CSPs generated by default will result in that situation, so I think there is a possibility of occurrence.\r\nhttps://github.com/rails/rails/blob/a3b7aa66bc81da96ea91019540e8874a76216cd8/railties/lib/rails/generators/rails/app/templates/config/initializers/content_security_policy.rb.tt#L7..L18\r\n\r\n", "created_at": "2018-03-06 03:06:50", "user": 987638, "id": 370646752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370732701", "text": "@y-yagi wouldn't it be better to specify the CSP that we need?", "created_at": "2018-03-06 10:16:03", "user": 6321, "id": 370732701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371124340", "text": "@pixeltrix I tried.  https://github.com/y-yagi/rails/commit/ac5e8e9b7baee80204dfe0dcbdbba5c2d2ffb9bc \r\n\r\nEven if specified CSP, it worked as expected. \r\nHowever, with this approach, it is necessary to check if `content_security_policy_nonce` is defined in the `javascript_tag` method.\r\nhttps://github.com/y-yagi/rails/commit/ac5e8e9b7baee80204dfe0dcbdbba5c2d2ffb9bc#diff-7376daecde59ca0d8c1b787d47b474d0R82 \r\n\r\nI specified `nonce: true` option for JS so that it works when accessing `/rails/info/routes`. \r\nHowever, when this view is used due to routing error, since it is not used via controller, `content_security_policy_nonce` is not defined and it becomes an error, so I added a check to avoid it. \r\nIs there a better approach to solving that problem?\r\n", "created_at": "2018-03-07 12:33:01", "user": 987638, "id": 371124340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371127019", "text": "@y-yagi why do you need the nonce if we're adding `unsafe-inline` ?", "created_at": "2018-03-07 12:44:41", "user": 6321, "id": 371127019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371131008", "text": "@pixeltrix \r\nIf nonce value is specified, \"unsafe-inline\" is ignored. \r\nWith Google Chrome, the following warning is displayed in the console. \r\n\r\n![default](https://user-images.githubusercontent.com/987638/37093527-fa4229a4-2252-11e8-86f4-ce265cb033a8.png)\r\n\r\nAs far as spec, this seems like a specification.\r\nRef: https://www.w3.org/TR/CSP2/#directive-script-src\r\n", "created_at": "2018-03-07 13:01:12", "user": 987638, "id": 371131008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371135040", "text": "What if you do ` request.content_security_policy_nonce_generator = nil`? That should disable the nonce for that request.", "created_at": "2018-03-07 13:17:13", "user": 6321, "id": 371135040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371461928", "text": "It worked as expected.  I have reflected the fix in this PR.\r\n", "created_at": "2018-03-08 11:33:45", "user": 987638, "id": 371461928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371464210", "text": "@y-yagi thanks - was just looking at this. I don't think the error page middleware generates a CSP header even if it's enabled so the inline CSS and JS should be fine there.", "created_at": "2018-03-08 11:44:24", "user": 6321, "id": 371464210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371469232", "text": "@pixeltrix Thanks for your review. Do you have any other concerns? If not, I will merge this.\r\n", "created_at": "2018-03-08 12:08:56", "user": 987638, "id": 371469232}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371470748", "text": "@y-yagi no, please go ahead and merge then backport to 5-2-stable", "created_at": "2018-03-08 12:15:56", "user": 6321, "id": 371470748}, {"reactions": {"+1": [6321]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371471442", "text": "Thanks! Backported 42fc4a55c3ee9c6e42d6f21a9584470a276245e4", "created_at": "2018-03-08 12:19:33", "user": 987638, "id": 371471442}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Change `private: true` to `visiblity: :private` and allow to define protected methods\r\n\r\n```ruby\r\nclass MyClass\r\n  delegate :method1, to: :smth\r\n  delegate :method2, to: :smth, visibility: :public\r\n  delegate :method3, to: :smth, visibility: :private\r\n  delegate :method4, to: :smth, visibility: :protected\r\nend\r\n``` ", "labels": [], "number": 32172, "updated_at": "2018-03-05 15:47:14", "user": 471335, "closed_at": "2018-03-05 10:37:43", "id": 302241692, "title": "Allow to delegate methods as protected", "url": "https://api.github.com/repos/rails/rails/issues/32172", "created_at": "2018-03-05 10:17:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370372887", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-05 10:17:14", "user": 7468109, "id": 370372887}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370378464", "text": "This exact option was considered in #31944.\r\n\r\nIf you'd like to argue that it's useful enough to justify the uglier spelling, please do... but dropping a PR with no explanation seems unlikely to move any conversation forward.", "created_at": "2018-03-05 10:37:43", "user": 1034, "id": 370378464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370380291", "text": "But with `private: true` it is not possible to define protected methods.\r\n\r\nWhat If I add `protected: true`?", "created_at": "2018-03-05 10:44:53", "user": 471335, "id": 370380291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370381385", "text": "> If you'd like to argue that it's useful enough to justify the uglier spelling, please do", "created_at": "2018-03-05 10:49:20", "user": 1034, "id": 370381385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370386823", "text": "Ok. let me try, but I have a feeling that I won't be able to convince you :-)\r\n\r\nSo In order to prevent things like `protected(*delegate(:street, :city, to: :@place))` I think it is useful to handle that with a special flag or option in `delegate` call.\r\n\r\n`private: true` has been added recently but, unfortunately, it is designed only for `private` method so why not to add smth like that for `protected` methods too. `protected` methods are widely used so I think they also deserve smth better than ugly `protected(*delegate(`\r\n\r\nIf this `visibility` option looks such ugly we can try `protected: true`. But with this kind of syntax we can do things like `delegate :smth, to: :smth, protected: true, private: true` which should be probably fine(we can assume that `private` is requested here).\r\n\r\nAnd yes, for sorry for sending the PR without proper explanation, I had it ready(converted from monkey patch) and thought it will be better to submit smth first and then adjust everything that is needed based on feedbacks. ", "created_at": "2018-03-05 11:11:08", "user": 471335, "id": 370386823}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370400945", "text": "Thanks!\r\n\r\n> `protected` methods are widely used\r\n\r\nThis is the part I'm not yet buying / the point I am looking for more support on. My experience is that they're hardly ever used. \r\n\r\nWe sometimes use them inside Rails as a lazy documentation cue, in places where a private method would actually work just as well (or in one recent pattern, to work around a warning on private + attr_reader)... but true use cases are very few.", "created_at": "2018-03-05 12:13:27", "user": 1034, "id": 370400945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370412890", "text": "Despite proposing `visibility: :protected` in #31944, I agree with @mattewd that `protected` ain't that widely used.\r\n\r\n@timsly when do you use it in your apps and how often compared to private and/or public?", "created_at": "2018-03-05 13:05:30", "user": 350807, "id": 370412890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370432230", "text": "To be honest, after checking some places where I use it I can see that it can be replaced with `private` without any problems.\r\nAlso, I should have checked #31944 before submitting this one.\r\nSo sorry guys for all these distractions \r\n\r\n", "created_at": "2018-03-05 14:16:46", "user": 471335, "id": 370432230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370462319", "text": "No problem, glad we got it sorted 👍", "created_at": "2018-03-05 15:47:14", "user": 350807, "id": 370462319}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://github.com/rails/rails/pull/32161#issuecomment-370163322", "labels": [], "number": 32171, "updated_at": "2018-03-05 09:55:38", "user": 1301152, "closed_at": "2018-03-05 09:55:38", "id": 302232248, "title": "Add pg 1.0.0 compatibility to 5.2.0.rc1 Changelog", "url": "https://api.github.com/repos/rails/rails/issues/32171", "created_at": "2018-03-05 09:48:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370365049", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-05 09:48:50", "user": 7468109, "id": 370365049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370365052", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-03-05 09:48:50", "user": 7468109, "id": 370365052}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {"hooray": [199]}, "text": "### Summary\r\n\r\nIn a Rails application using Ruby 2.6.0-dev, when running `bin/rails g migration` with `RUBYOPT=-w`, an ERB deprecation warnings will be displayed.\r\n\r\n```console\r\n% ruby -v\r\nruby 2.6.0dev (2018-03-03 trunk 62644) [x86_64-darwin17]\r\n% bin/rails -v\r\nRails 6.0.0.alpha\r\n% RUBYOPT=-w bin/rails g migration create_foos\r\n\r\n(snip)\r\n\r\n/Users/koic/src/github.com/rails/rails/railties/lib/rails/generators/migration.rb:66:\r\nwarning: Passing safe_level with the 2nd argument of ERB.new is\r\ndeprecated. Do not use it, and specify other arguments as keyword\r\narguments.\r\n/Users/koic/src/github.com/rails/rails/railties/lib/rails/generators/migration.rb:66:\r\nwarning: Passing trim_mode with the 3rd argument of ERB.new is\r\ndeprecated. Use keyword argument like ERB.new(str, trim_mode: ...)\r\ninstead.\r\n/Users/koic/src/github.com/rails/rails/railties/lib/rails/generators/migration.rb:66:\r\nwarning: Passing eoutvar with the 4th argument of ERB.new is\r\ndeprecated. Use keyword argument like ERB.new(str, eoutvar: ...)\r\ninstead.\r\n      create    db/migrate/20180304002144_create_foos.rb\r\n```\r\n\r\nThis PR suppresses the above deprecation warnings in Ruby 2.6.0-dev.\r\n\r\nThis warning is due to the interface of `ERB.new` will change from Ruby 2.6.\r\n\r\n> Add :trim_mode and :eoutvar keyword arguments to ERB.new.\r\n> Now non-keyword arguments other than first one are softly deprecated\r\n> and will be removed when Ruby 2.5 becomes EOL. [Feature #14256]\r\n\r\nhttps://github.com/ruby/ruby/blob/2311087b685e8dc0f21f4a89875f25c22f5c39a9/NEWS#stdlib-updates-outstanding-ones-only\r\n\r\nThe following addresses are related Ruby's commit.\r\nhttps://github.com/ruby/ruby/commit/cc777d0\r\n\r\nAlso this PR will change `ERB.new` used in `tasks/release.rb`.\r\n\r\n### Other Information\r\n\r\nThis PR uses `ERB.version` to switch `ERB.new` interface. Because Rails 6 supports multiple Ruby versions (Ruby 2.4.1 or higher), it need to use the appropriate interface.\r\n\r\nUsing `ERB.version` instead of `RUBY_VERSON` is based on the following patch.\r\nhttps://github.com/ruby/ruby/pull/1826\r\n\r\nThis patch is built into Ruby.\r\nhttps://github.com/ruby/ruby/commit/40db89c0934c23d7464d47946bb682b9035411f9\r\n", "labels": [], "number": 32170, "updated_at": "2018-03-05 12:20:27", "user": 13203, "closed_at": "2018-03-05 12:18:01", "id": 302226083, "title": "Deprecate safe_level of `ERB.new` in Ruby 2.6", "url": "https://api.github.com/repos/rails/rails/issues/32170", "created_at": "2018-03-05 09:29:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370359479", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-05 09:29:31", "user": 7468109, "id": 370359479}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "How do you counter_cache:  active-storage\r\nHow do you make a image as default for your views when using has_many_attached\r\n\r\n### System configuration\r\n**Rails version**:\r\nrails-5.2\r\n**Ruby version**:\r\nruby.2.5.0\r\n", "labels": [], "number": 32169, "updated_at": "2018-03-05 12:45:56", "user": 17260869, "closed_at": "2018-03-05 12:45:56", "id": 302194424, "title": "How do you counter_cache:  active-storage", "url": "https://api.github.com/repos/rails/rails/issues/32169", "created_at": "2018-03-05 07:18:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370408148", "text": "Please use the [mailing list](https://groups.google.com/forum/#!forum/rubyonrails-talk) or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only.", "created_at": "2018-03-05 12:45:56", "user": 987638, "id": 370408148}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"heart": [6765108, 6321]}, "text": "`ActiveSupport::Inflector#ordinal` and `ActiveSupport::Inflector#ordinalize` now support translations through I18n.\r\n\r\n```ruby\r\n        {\r\n          fr: {\r\n            number: {\r\n              nth: {\r\n                ordinals: lambda do |_key, number:, **_options|\r\n                  if number.to_i.abs == 1\r\n                    'er'\r\n                  else\r\n                    'e'\r\n                  end\r\n                end,\r\n\r\n                ordinalized: lambda do |_key, number:, **_options|\r\n                  \"#{number}#{ActiveSupport::Inflector.ordinal(number)}\"\r\n                end\r\n              }\r\n            }\r\n          }\r\n        }\r\n```\r\n\r\n### Summary\r\n\r\nThe current implementation of `ActiveSupport::Inflector#ordinal` and `ActiveSupport::Inflector#ordinalize` only work in English. The `st`, `nd`, and `th` logic is all hardcoded, and obviously doesn't work in other languages. This patch moves that logic to I18n so it can be defined on a per-language basis.\r\n\r\nThis is technically a noop; English should still work as usual, and no other language was added.\r\n\r\n### Other Information\r\n\r\nI found one previous attempt [here](https://github.com/rails/rails/pull/17180), dating back to 2014. Unfortunately, the approach wasn't flexible enough to support most languages.", "labels": [], "number": 32168, "updated_at": "2018-03-05 13:42:05", "user": 596120, "closed_at": "None", "id": 302153433, "title": "`#ordinal` and `#ordinalize` now support I18n", "url": "https://api.github.com/repos/rails/rails/issues/32168", "created_at": "2018-03-05 02:36:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370293593", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-05 02:36:23", "user": 7468109, "id": 370293593}], "assignees": [12642, 12642], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [6443532]}, "text": "This issue is caused by `@_trigger_update_callback` won't be updated due\r\nto `_update_record` in `Locking::Optimistic` doesn't call `super` when\r\noptimistic locking is enabled.\r\n\r\nNow optimistic locking concern when updating is supported by\r\n`_update_row` low level API, therefore overriding `_update_record` is no\r\nlonger necessary.\r\n\r\nRemoving the method just fix the issue.\r\n\r\nCloses #29096.\r\nCloses #29321.\r\nCloses #30823.", "labels": [], "number": 32167, "updated_at": "2018-03-05 17:03:37", "user": 12642, "closed_at": "2018-03-05 17:03:33", "id": 302151504, "title": "Fix that after commit callbacks on update does not triggered when optimistic locking is enabled", "url": "https://api.github.com/repos/rails/rails/issues/32167", "created_at": "2018-03-05 02:21:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On my local environment execution of `cd actionview/ && bin/test` raises error:\r\n\r\n```\r\n(snip)\r\nrails/actionview/test/template/render_test.rb:6:in `<top (required)>': superclass mismatch for class TestController (TypeError)\r\n```\r\n\r\nIn some test files `TestController` inherited from `ActionController::Base`,\r\nbut in `test/actionpack/controller/render_test.rb` file `TestController`\r\ninherited from `ApplicationController`.\r\nThis produces error `superclass mismatch for class TestController (TypeError)`\r\n\r\nStep to reproduce this on any environment:\r\n```\r\ncd actionview/ && bin/test test/template/streaming_render_test.rb test/actionpack/controller/render_test.rb\r\n```", "labels": [], "number": 32166, "updated_at": "2018-03-04 19:37:05", "user": 6443532, "closed_at": "2018-03-04 19:35:43", "id": 302101751, "title": "Fix actionview tests execution", "url": "https://api.github.com/repos/rails/rails/issues/32166", "created_at": "2018-03-04 16:58:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370244695", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-04 16:58:42", "user": 7468109, "id": 370244695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370255280", "text": "That's one of the oddities of the Rails test runner compared to `rake test`. Rake seems to run each test file in isolation, such that errors like these don't happen, and the Rails test runner doesn't. That's ok because it's an esoteric use case that I don't think apps will experience.\r\n\r\nHowever, I don't like that TestController will suddenly overlap with the other TestController when run with `bin/test` and could throw unrelated errors because of that. What do you think of renaming the TestController here to something more specific instead?", "created_at": "2018-03-04 19:14:56", "user": 350807, "id": 370255280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370256675", "text": "Some test fails if rename `TestController` to `AwesomeController`\r\n\r\n```\r\nError:\r\nRenderTest#test_render_xml_with_layouts: ActionView::MissingTemplate: Missing template awesome/hello with {:locale=>[:en], :formats=>[:html], :variants=>[], :handlers=>[:raw, :erb, :html, :buil\r\nder, :ruby]}. Searched in:\r\n  * \"/home/bogdanvlviv/active_projects/rails/actionview/test/fixtures/actionpack\"\r\n```\r\n\r\nIn order to change the name of `TestController` we should apply a lot of changes. Not sure that is what we want. ", "created_at": "2018-03-04 19:33:17", "user": 6443532, "id": 370256675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370256911", "text": "Gotcha, this way it is 👍", "created_at": "2018-03-04 19:35:53", "user": 350807, "id": 370256911}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Related to https://github.com/rails/rails/commit/d4eb0dc89ee6b476e2e10869dc282a96f956c6c7#r27830891\r\n/cc @jeremy ", "labels": [], "number": 32165, "updated_at": "2018-03-04 19:38:34", "user": 6443532, "closed_at": "2018-03-04 19:38:20", "id": 302087007, "title": "Fix occurrences Fixnum|Bignum", "url": "https://api.github.com/repos/rails/rails/issues/32165", "created_at": "2018-03-04 13:46:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370230512", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-04 13:46:15", "user": 7468109, "id": 370230512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370246989", "text": "The `world_population` column can not store 2**62 value.\r\nIt should be changed the column definition as well.\r\n\r\n```diff\r\ndiff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb\r\nindex 3f4fe16678..8b0106dbf0 100644\r\n--- a/activerecord/test/schema/schema.rb\r\n+++ b/activerecord/test/schema/schema.rb\r\n@@ -547,7 +547,7 @@\r\n   create_table :numeric_data, force: true do |t|\r\n     t.decimal :bank_balance, precision: 10, scale: 2\r\n     t.decimal :big_bank_balance, precision: 15, scale: 2\r\n-    t.decimal :world_population, precision: 10, scale: 0\r\n+    t.decimal :world_population, precision: 20, scale: 0\r\n     t.decimal :my_house_population, precision: 2, scale: 0\r\n     t.decimal :decimal_number_with_default, precision: 3, scale: 2, default: 2.78\r\n     t.float   :temperature\r\n```", "created_at": "2018-03-04 17:27:35", "user": 12642, "id": 370246989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370249829", "text": "Thanks. CI caught this https://travis-ci.org/rails/rails/jobs/348924466#L1488, I just changed precision of `world_population` column to 20.", "created_at": "2018-03-04 18:06:03", "user": 6443532, "id": 370249829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370252561", "text": "Can you change the line as well?\r\n\r\nhttps://github.com/rails/rails/blob/15ef55efb591e5379486ccf53dd3e13f416564f6/activerecord/test/migrations/decimal/1_give_me_big_numbers.rb#L8", "created_at": "2018-03-04 18:41:36", "user": 12642, "id": 370252561}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 32164, "updated_at": "2018-03-04 13:15:36", "user": 10832262, "closed_at": "2018-03-04 13:13:14", "id": 302068760, "title": "Fix links in the psql guide [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32164", "created_at": "2018-03-04 08:50:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370212483", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-04 08:51:01", "user": 7468109, "id": 370212483}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently primary key value can not be updated if a record has a locking\r\ncolumn because of `_update_record` in `Locking::Optimistic` doesn't\r\nrespect `id_in_database` as primary key value unlike in `Persistence`.\r\n\r\nAnd also, if a record has dirty primary key value, it may destroy any\r\nother record by the lock version of dirty record itself.\r\n\r\nWhen updating/destroying persisted records, it should identify\r\nthemselves by `id_in_database`, not by dirty primary key value.", "labels": [], "number": 32163, "updated_at": "2018-03-05 00:51:17", "user": 12642, "closed_at": "2018-03-05 00:51:13", "id": 302063673, "title": "`id_in_database` should be respected as primary key value for persisted records", "url": "https://api.github.com/repos/rails/rails/issues/32163", "created_at": "2018-03-04 07:13:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since `ActiveStorage::Blob::Representable` unifies the idea of previews and\r\nvariants under one roof as representation, we may as well have the\r\ncontrollers follow suit.\r\n\r\nThus `ActiveStorage::RepresentationsController` enters the fray. I've copied\r\nthe old tests for both previews and variants and unified those as well.", "labels": [], "number": 32162, "updated_at": "2018-03-04 10:22:55", "user": 350807, "closed_at": "2018-03-04 10:20:55", "id": 302030562, "title": "Merge Previews/Variants controller into one Representations controller.", "url": "https://api.github.com/repos/rails/rails/issues/32162", "created_at": "2018-03-03 20:42:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370217847", "text": "Backported to 5-2-stable in e717b54 just so the controllers don't diverge needlessly between the versions yet.", "created_at": "2018-03-04 10:22:55", "user": 350807, "id": 370217847}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Was added here: https://github.com/rails/rails/commit/a9c06f61d52c7cf03dc413dd50e9a9c5ab580703", "labels": [], "number": 32161, "updated_at": "2018-03-05 09:57:15", "user": 1301152, "closed_at": "2018-03-05 09:57:15", "id": 302012854, "title": "Add pg 1.0.0 compatibility to 5.1.5 Changelog", "url": "https://api.github.com/repos/rails/rails/issues/32161", "created_at": "2018-03-03 16:41:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370161474", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-03 16:41:53", "user": 7468109, "id": 370161474}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370161476", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-1-stable. Please double check that you specified the right target!", "created_at": "2018-03-03 16:41:53", "user": 7468109, "id": 370161476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370163322", "text": "@aried3r Thank you for your Pull Request!\r\nCould you also please add this entry to `5-2-stable` in https://github.com/rails/rails/blob/5-2-stable/activerecord/CHANGELOG.md file, under \"Rails 5.2.0.rc1 (January 30, 2018)\" since 13eff51b1b6a8ea1a21b3fedf0dfa16968b3bebb", "created_at": "2018-03-03 17:07:14", "user": 6443532, "id": 370163322}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370365080", "text": "Done: https://github.com/rails/rails/pull/32171", "created_at": "2018-03-05 09:48:57", "user": 1301152, "id": 370365080}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In order to get width of console use `IO::console_size`,\r\nSee https://ruby-doc.org/stdlib-2.4.1/libdoc/io/console/rdoc/IO.html#method-c-console_size\r\n\r\nRelated to #32130\r\n", "labels": [], "number": 32160, "updated_at": "2018-03-21 08:35:52", "user": 6443532, "closed_at": "2018-03-11 19:48:51", "id": 302000350, "title": "Draw line of a route name to the end of row console on `rails routes --expanded`", "url": "https://api.github.com/repos/rails/rails/issues/32160", "created_at": "2018-03-03 14:03:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370149667", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-03 14:03:19", "user": 7468109, "id": 370149667}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370169453", "text": "Sure we can make this dynamic, but what difference does it really make if the dashes go to the end of a window?\r\n\r\nI don't care much for the extra dynamicness/variability it adds. Especially in the tests.\r\n\r\nI'll let other reopen if they're swayed differently. Thanks!", "created_at": "2018-03-03 18:33:22", "user": 350807, "id": 370169453}, {"reactions": {"+1": [350807, 8417720]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370236572", "text": "When a window has a width less than 73, `rails routes --expanded` will output lines like\r\n```bash\r\n$ rails routes --expanded\r\n--[ Route 1 ]------------------------------------------------------------\r\n-------\r\n(snip)\r\n--[ Route 42 ]-----------------------------------------------------------\r\n--------\r\n(snip)\r\n--[ Route 333 ]----------------------------------------------------------\r\n---------\r\n(snip)\r\n```\r\nThis  PR makes the output of `rails routes --expanded` neater in this case.\r\n```bash\r\n$ rails routes --expanded\r\n--[ Route 1 ]------------------------------------------------------------\r\n(snip)\r\n--[ Route 42 ]-----------------------------------------------------------\r\n(snip)\r\n--[ Route 333 ]----------------------------------------------------------\r\n(snip)\r\n```", "created_at": "2018-03-04 15:12:07", "user": 6443532, "id": 370236572}, {"reactions": {"+1": [350807]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370244555", "text": "> When a window has a width less than 73\r\n\r\nThat sounds pretty compelling to me; I hate when that happens.\r\n\r\nLet's find a way of overriding the width detection in the test, though.", "created_at": "2018-03-04 16:56:53", "user": 1034, "id": 370244555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370248351", "text": "@matthewd We can use `IO.console.winsize=` in order to override the width of console in tests?\r\n<details><summary>Draft</summary>\r\n\r\n```diff\r\ndiff --git a/actionpack/test/dispatch/routing/inspector_test.rb b/actionpack/test/dispatch/routing/inspector_test.rb\r\nindex e970ef0..f352e7a 100644\r\n--- a/actionpack/test/dispatch/routing/inspector_test.rb\r\n+++ b/actionpack/test/dispatch/routing/inspector_test.rb\r\n@@ -323,6 +323,9 @@ def test_routes_can_be_filtered\r\n       end\r\n \r\n       def test_routes_when_expanded\r\n+        previous_console_winsize = IO.console.winsize\r\n+        IO.console.winsize = [0, 0]\r\n+\r\n         engine = Class.new(Rails::Engine) do\r\n           def self.inspect\r\n             \"Blog::Engine\"\r\n@@ -338,31 +341,30 @@ def self.inspect\r\n           mount engine => \"/blog\", :as => \"blog\"\r\n         end\r\n \r\n-        line_width = IO.console_size.second - 13\r\n-        line_width = 0 if line_width.negative?\r\n-\r\n-        assert_equal [\"--[ Route 1 ]#{'-' * line_width}\",\r\n+        assert_equal [\"--[ Route 1 ]\",\r\n                       \"Prefix            | custom_assets\",\r\n                       \"Verb              | GET\",\r\n                       \"URI               | /custom/assets(.:format)\",\r\n                       \"Controller#Action | custom_assets#show\",\r\n-                      \"--[ Route 2 ]#{'-' * line_width}\",\r\n+                      \"--[ Route 2 ]\",\r\n                       \"Prefix            | custom_furnitures\",\r\n                       \"Verb              | GET\",\r\n                       \"URI               | /custom/furnitures(.:format)\",\r\n                       \"Controller#Action | custom_furnitures#show\",\r\n-                      \"--[ Route 3 ]#{'-' * line_width}\",\r\n+                      \"--[ Route 3 ]\",\r\n                       \"Prefix            | blog\",\r\n                       \"Verb              | \",\r\n                       \"URI               | /blog\",\r\n                       \"Controller#Action | Blog::Engine\",\r\n                       \"\",\r\n                       \"[ Routes for Blog::Engine ]\",\r\n-                      \"--[ Route 1 ]#{'-' * line_width}\",\r\n+                      \"--[ Route 1 ]\",\r\n                       \"Prefix            | cart\",\r\n                       \"Verb              | GET\",\r\n                       \"URI               | /cart(.:format)\",\r\n                       \"Controller#Action | cart#show\"], output\r\n+      ensure\r\n+        IO.console.winsize = previous_console_winsize\r\n       end\r\n \r\n \r\ndiff --git a/railties/test/commands/routes_test.rb b/railties/test/commands/routes_test.rb\r\nindex d8c9b98..3bf7b23 100644\r\n--- a/railties/test/commands/routes_test.rb\r\n+++ b/railties/test/commands/routes_test.rb\r\n@@ -120,54 +120,58 @@ class Rails::Command::RoutesTest < ActiveSupport::TestCase\r\n   end\r\n \r\n   test \"rails routes with expanded option\" do\r\n-    app_file \"config/routes.rb\", <<-RUBY\r\n-        Rails.application.routes.draw do\r\n-          get '/cart', to: 'cart#show'\r\n-        end\r\n-    RUBY\r\n-\r\n-    output = rails(\"routes\", \"--expanded\")\r\n+    begin\r\n+      previous_console_winsize = IO.console.winsize\r\n+      IO.console.winsize = [0, 0]\r\n \r\n-    line_width = IO.console_size.second - 13\r\n-    line_width = 0 if line_width.negative?\r\n-\r\n-    assert_equal <<~MESSAGE, output\r\n-    --[ Route 1 ]#{'-' * line_width}\r\n-    Prefix            | cart\r\n-    Verb              | GET\r\n-    URI               | /cart(.:format)\r\n-    Controller#Action | cart#show\r\n-    --[ Route 2 ]#{'-' * line_width}\r\n-    Prefix            | rails_service_blob\r\n-    Verb              | GET\r\n-    URI               | /rails/active_storage/blobs/:signed_id/*filename(.:format)\r\n-    Controller#Action | active_storage/blobs#show\r\n-    --[ Route 3 ]#{'-' * line_width}\r\n-    Prefix            | rails_blob_variation\r\n-    Verb              | GET\r\n-    URI               | /rails/active_storage/variants/:signed_blob_id/:variation_key/*filename(.:format)\r\n-    Controller#Action | active_storage/variants#show\r\n-    --[ Route 4 ]#{'-' * line_width}\r\n-    Prefix            | rails_blob_preview\r\n-    Verb              | GET\r\n-    URI               | /rails/active_storage/previews/:signed_blob_id/:variation_key/*filename(.:format)\r\n-    Controller#Action | active_storage/previews#show\r\n-    --[ Route 5 ]#{'-' * line_width}\r\n-    Prefix            | rails_disk_service\r\n-    Verb              | GET\r\n-    URI               | /rails/active_storage/disk/:encoded_key/*filename(.:format)\r\n-    Controller#Action | active_storage/disk#show\r\n-    --[ Route 6 ]#{'-' * line_width}\r\n-    Prefix            | update_rails_disk_service\r\n-    Verb              | PUT\r\n-    URI               | /rails/active_storage/disk/:encoded_token(.:format)\r\n-    Controller#Action | active_storage/disk#update\r\n-    --[ Route 7 ]#{'-' * line_width}\r\n-    Prefix            | rails_direct_uploads\r\n-    Verb              | POST\r\n-    URI               | /rails/active_storage/direct_uploads(.:format)\r\n-    Controller#Action | active_storage/direct_uploads#create\r\n-    MESSAGE\r\n+      app_file \"config/routes.rb\", <<-RUBY\r\n+          Rails.application.routes.draw do\r\n+            get '/cart', to: 'cart#show'\r\n+          end\r\n+      RUBY\r\n+\r\n+      output = rails(\"routes\", \"--expanded\")\r\n+\r\n+      assert_equal <<~MESSAGE, output\r\n+      --[ Route 1 ]\r\n+      Prefix            | cart\r\n+      Verb              | GET\r\n+      URI               | /cart(.:format)\r\n+      Controller#Action | cart#show\r\n+      --[ Route 2 ]\r\n+      Prefix            | rails_service_blob\r\n+      Verb              | GET\r\n+      URI               | /rails/active_storage/blobs/:signed_id/*filename(.:format)\r\n+      Controller#Action | active_storage/blobs#show\r\n+      --[ Route 3 ]\r\n+      Prefix            | rails_blob_variation\r\n+      Verb              | GET\r\n+      URI               | /rails/active_storage/variants/:signed_blob_id/:variation_key/*filename(.:format)\r\n+      Controller#Action | active_storage/variants#show\r\n+      --[ Route 4 ]\r\n+      Prefix            | rails_blob_preview\r\n+      Verb              | GET\r\n+      URI               | /rails/active_storage/previews/:signed_blob_id/:variation_key/*filename(.:format)\r\n+      Controller#Action | active_storage/previews#show\r\n+      --[ Route 5 ]\r\n+      Prefix            | rails_disk_service\r\n+      Verb              | GET\r\n+      URI               | /rails/active_storage/disk/:encoded_key/*filename(.:format)\r\n+      Controller#Action | active_storage/disk#show\r\n+      --[ Route 6 ]\r\n+      Prefix            | update_rails_disk_service\r\n+      Verb              | PUT\r\n+      URI               | /rails/active_storage/disk/:encoded_token(.:format)\r\n+      Controller#Action | active_storage/disk#update\r\n+      --[ Route 7 ]\r\n+      Prefix            | rails_direct_uploads\r\n+      Verb              | POST\r\n+      URI               | /rails/active_storage/direct_uploads(.:format)\r\n+      Controller#Action | active_storage/direct_uploads#create\r\n+      MESSAGE\r\n+    ensure\r\n+      IO.console.winsize = previous_console_winsize\r\n+    end\r\n   end\r\n \r\n   private\r\n```\r\n</details>", "created_at": "2018-03-04 17:45:39", "user": 6443532, "id": 370248351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370254410", "text": "@bogdanvlviv `winsize` looks good 👍 — maybe we should set it to 10 so we can see some lines after `--[ Route 1 ]` being printed.", "created_at": "2018-03-04 19:04:28", "user": 350807, "id": 370254410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370254488", "text": "By the way, how much do the `[ Route x ]` help versus just dashes all the way? Nobody would refer to a route by index — especially because the index changes.", "created_at": "2018-03-04 19:05:28", "user": 350807, "id": 370254488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370255664", "text": "@kaspth We should set `winsize` to  `> 13` in order to see some lines, because `--[ Route x ]` takes 13\r\n\r\n> By the way, how much do the [ Route x ] help versus just dashes all the way? Nobody would refer to a route by index — especially because the index changes.\r\n\r\nIt was designed in almost the same way as `psql` does - https://github.com/rails/rails/pull/32130#issue-171781741, but we definitely can change this to dashes only.", "created_at": "2018-03-04 19:20:08", "user": 6443532, "id": 370255664}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370258729", "text": "👍, set it to 23 or more then, just so we can see the extra dashes get printed 😊\r\n\r\n> It was designed in almost the same way as psql does - #32130 (comment), but we definitely can change this to dashes only.\r\n\r\nI guess it's useful when a search returns > 20 results and it gives you a better sense of where you are in the list. E.g. scroll to route ~6, then route ~16, realize you want to go back to up to around where you saw that other ~6 route. Supposedly that would be easier if there's a number. Personally, I'm ¯\\_(ツ)_/¯ on them.", "created_at": "2018-03-04 19:58:40", "user": 350807, "id": 370258729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374865012", "text": "Thanks for the PR ! ", "created_at": "2018-03-21 08:35:52", "user": 8417720, "id": 374865012}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To Rails 5.2.0.beta1 was added \"Threading and Code Execution in Rails\" Guide\r\nby 8bfa617e9990b05061c2f481afe87e055b6a6106.\r\n\r\nTo Rails 5.2.0.rc1 was added \"Active Storage Overview\" Guide\r\nby 48fbc4aec845eeb51708a68806453528fab07d14.\r\n\r\nThis commit adds changelogs about adding these guides.\r\nI think it deserves to be mentioned in`guides/CHANGELOG.md`", "labels": [], "number": 32159, "updated_at": "2018-03-03 18:36:35", "user": 6443532, "closed_at": "2018-03-03 18:34:27", "id": 301995915, "title": "Update `guides/CHANGELOG.md`", "url": "https://api.github.com/repos/rails/rails/issues/32159", "created_at": "2018-03-03 12:50:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370145342", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-03 12:50:35", "user": 7468109, "id": 370145342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370145343", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-03-03 12:50:35", "user": 7468109, "id": 370145343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370169545", "text": "Thanks, don't forget `[ci skip]` too :)", "created_at": "2018-03-03 18:34:48", "user": 350807, "id": 370169545}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Follow up b988ecb99ff6c8854e4b74ef8a7ade8d9ef5d954", "labels": [], "number": 32158, "updated_at": "2018-03-08 16:05:53", "user": 6443532, "closed_at": "2018-03-08 15:59:28", "id": 301976122, "title": "`ActiveRecord::Tasks::DatabaseTasks` should respect `VERBOSE` unless raise error", "url": "https://api.github.com/repos/rails/rails/issues/32158", "created_at": "2018-03-03 07:17:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370126278", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-03 07:18:00", "user": 7468109, "id": 370126278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371531557", "text": "We specifically don't want to accidentally hide errors. We just want to hide output when things are positive in certain cases (ie the setup/teardown in parallel tests)", "created_at": "2018-03-08 15:59:28", "user": 1080678, "id": 371531557}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\n`ActiveJob::QueueAdapters::QueAdapter` is documented as [supporting queues](https://github.com/rails/rails/blob/master/activejob/lib/active_job/queue_adapters.rb#L27), however the adapter doesn't actually set [Que](https://github.com/chanks/que) queue names when creating jobs. Rather, all jobs are lumped into a `''`/blank queue for workers to pick up.\r\n\r\nThis commit simply passes the queue_name as set by ActiveJob to Que's own queue handler. Trivial patch that's long overdue for Que users 😃 ", "labels": [], "number": 32157, "updated_at": "2018-03-03 19:38:54", "user": 1395049, "closed_at": "None", "id": 301975394, "title": "Add queue name support to ActiveJob::QueueAdapters::QueAdapter", "url": "https://api.github.com/repos/rails/rails/issues/32157", "created_at": "2018-03-03 07:04:42", "comments": [], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {"+1": [199]}, "text": "Numeric#positive? and Numeric#negative? was added to Ruby since 2.3,\r\nsee https://github.com/ruby/ruby/blob/ruby_2_3/NEWS\r\nRails 6 requires Ruby 2.4.1+ since #32034", "labels": [], "number": 32156, "updated_at": "2018-03-03 07:33:22", "user": 6443532, "closed_at": "2018-03-03 07:32:12", "id": 301974512, "title": "Deprecate \"active_support/core_ext/numeric/inquiry\"", "url": "https://api.github.com/repos/rails/rails/issues/32156", "created_at": "2018-03-03 06:46:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370124618", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-03 06:46:18", "user": 7468109, "id": 370124618}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It would be nice to know what Activerecord migrations can and can't reverse without a custom user method. The guides states:\r\n\r\n> If you wish for a migration to do something that Active Record doesn't know how to reverse, you can use reversible\r\n\r\nyet there's no apparent list of what Active Record doesn't know.", "labels": [], "number": 32155, "updated_at": "2018-03-03 07:16:35", "user": 8052748, "closed_at": "2018-03-03 07:16:35", "id": 301973278, "title": "Document what Activerecord can and can't rollback on its own", "url": "https://api.github.com/repos/rails/rails/issues/32155", "created_at": "2018-03-03 06:21:13", "comments": [{"reactions": {"+1": [8052748]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370126205", "text": "Please see http://guides.rubyonrails.org/active_record_migrations.html#using-the-change-method", "created_at": "2018-03-03 07:16:35", "user": 987638, "id": 370126205}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"heart": [199, 94129]}, "text": "Ruby 2.4+ provides `Hash#compact` and `Hash#compact!` natively, so `active_support/core_ext/hash/compact` is no longer necessary.\r\n\r\n", "labels": [], "number": 32154, "updated_at": "2018-03-03 00:42:19", "user": 987638, "closed_at": "2018-03-03 00:40:56", "id": 301944141, "title": "Deprecate `active_support/core_ext/hash/compact`", "url": "https://api.github.com/repos/rails/rails/issues/32154", "created_at": "2018-03-03 00:05:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Improve docs of `ActionDispatch::Routing`\r\n  - Add a mention about `-g`.\r\n  - Improve info about `--expanded` option of `rails routes`.\r\n\r\n- Introduce `ActionDispatch::Routing::ConsoleFormatter::Base`\r\n  - Create `Base` and inherit `Sheet` and `Expanded` in order to\r\n    prevent code duplication.\r\n    - Remove trailing \"\\n\" for components of `Expanded`.\r\n    - There is no need for `Expanded#header` to return `@buffer` so return `nil` instead.\r\n  - Change `no_routes` message \"No routes were found for this controller\"\r\n    since if use `-g`, it sounds incorrect.\r\n    - Display `No routes were found for this controller.` if apply `-c`.\r\n    - Display `No routes were found for this grep pattern.` if apply `-g`.\r\n\r\nRelated to #32130", "labels": [], "number": 32153, "updated_at": "2018-03-13 20:02:22", "user": 6443532, "closed_at": "2018-03-13 19:09:30", "id": 301923095, "title": "Change message on the empty result of searching routes by `rails routes` with `-c` or `-g` ", "url": "https://api.github.com/repos/rails/rails/issues/32153", "created_at": "2018-03-02 22:18:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370069104", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-02 22:18:23", "user": 7468109, "id": 370069104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370521456", "text": "Thanks for the review! I just added suggested changes. What do you think about https://github.com/rails/rails/pull/32153#discussion_r172048705?", "created_at": "2018-03-05 18:46:41", "user": 6443532, "id": 370521456}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372144202", "text": "@bogdanvlviv 👍, if we can use `symbolize_keys.slice(:controller, :grep_pattern)` that might be better too (can't recall if we have Active Support access there).", "created_at": "2018-03-11 20:00:00", "user": 350807, "id": 372144202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372242326", "text": "@kaspth I implemented this in 2eff35809aa19cf4dc586b55a2fa59ce33d8d2e3. Let me know if you have concerns about the content of messages.", "created_at": "2018-03-12 09:22:38", "user": 6443532, "id": 372242326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372444634", "text": "All right, lets squash the commits then we're good 👍", "created_at": "2018-03-12 20:04:44", "user": 350807, "id": 372444634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372613161", "text": "Squashed commits related to change of messages on an empty result of `bin/rails routes` into one commit.\r\nFixing docs leaves in separate commit(e78b1e5e615978a221b68530641101451ab83e68) since it isn't related  to 304906f1bd4cd6f2831b6ae39a9ae54599d85569.", "created_at": "2018-03-13 10:09:57", "user": 6443532, "id": 372613161}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/372783990", "text": "Solid 👍", "created_at": "2018-03-13 19:09:38", "user": 350807, "id": 372783990}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails 5.1.3\r\n\r\nI'm trying to run my ActionCable server on an alternative port (8080). I set up my `production.rb` as follows:\r\n\r\n`config.action_cable.url = 'wss://my-domain.org:8080/cable'`\r\n`config.web_socket_server_url = \"wss://my-domain.org:8080/cable\"`\r\n\r\nThe metatags included on the page accurately reflect the changed port:\r\n\r\n`<meta name=\"action-cable-url\" content=\"wss://my-domain.org:8080/cable\" />`\r\n\r\nHowever, when I inspect the requests, I see that the specified port is NOT included in the URL, so the we can never connect to the websocket:\r\n\r\n`WebSocket connection to 'wss://my-domain.org/cable' failed: WebSocket is closed before the connection is established.`\r\n\r\nI've tested and verified that my server is actively listening on port 8080 for websocket requests, and it's working fine. If I manually set `App.cable.url = 'wss://my-domain.org:8080/cable'` in javascript, everything works fine.\r\n\r\nThe problem appears to be that the port specification is not being read by ActionCable from the metatag. How can I resolve this?\r\n", "labels": [], "number": 32152, "updated_at": "2018-03-08 16:07:41", "user": 170303, "closed_at": "None", "id": 301887208, "title": "ActionCable not respecting port assigning in production.rb", "url": "https://api.github.com/repos/rails/rails/issues/32152", "created_at": "2018-03-02 20:00:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370208063", "text": "Is there a way for @culov to reproduce this issue with a script? ", "created_at": "2018-03-04 07:27:12", "user": 1174604, "id": 370208063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370527842", "text": "@culov have you set `config.action_cable.allowed_request_origins` ?", "created_at": "2018-03-05 19:06:45", "user": 4325532, "id": 370527842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371534154", "text": "@culov what do you get if you do the following the browser console:\r\n\r\n``` js\r\nActionCable.getConfig('url')\r\n```", "created_at": "2018-03-08 16:07:41", "user": 6321, "id": 371534154}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nCapybara 3.0.0.rc1 has been released, and contains no changes that affect how Rails system tests integrate with it. \r\n\r\nThis PR allows Rails users to use Capybara 3.x.  Would be great to have it backported to Rails 5.1 and 5.2 too\r\n\r\n", "labels": [], "number": 32151, "updated_at": "2018-03-06 04:26:29", "user": 16556, "closed_at": "2018-03-06 01:44:40", "id": 301849014, "title": "Allow Capybara 3.x", "url": "https://api.github.com/repos/rails/rails/issues/32151", "created_at": "2018-03-02 17:45:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369996488", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-02 17:45:11", "user": 7468109, "id": 369996488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370060839", "text": "https://github.com/teamcapybara/capybara/blob/master/History.md#version-300rc1 for reference", "created_at": "2018-03-02 21:42:02", "user": 199, "id": 370060839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370061961", "text": "We also need to update the Gemfiles.", "created_at": "2018-03-02 21:46:51", "user": 47848, "id": 370061961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370063800", "text": "@rafaelfranca Technically the Gemfiles dont need to be updated - It's only this file that would prevent a user from changing the restriction in their projects Gemfile to allow Capybara 3.x.  ", "created_at": "2018-03-02 21:54:23", "user": 16556, "id": 370063800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370064135", "text": "If we upgrade the version of Capybara we allow, then we test against it also. Technically :)", "created_at": "2018-03-02 21:55:49", "user": 199, "id": 370064135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370065104", "text": "@jeremy Then wouldn't it be required to test against multiple versions?  The rails test suite doesn't appear to be set up to do that.", "created_at": "2018-03-02 22:00:20", "user": 16556, "id": 370065104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370065783", "text": "No. We will only test with the latest released version version. We also need to update the generated Gemfile otherwise new apps will not allow Capybara 3.0 by default.", "created_at": "2018-03-02 22:03:11", "user": 47848, "id": 370065783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370254363", "text": "@rafaelfranca Ok - updated version restrictions in Gemfiles too.", "created_at": "2018-03-04 19:04:05", "user": 16556, "id": 370254363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370642025", "text": "@jeremy Will you backport these changes to 5.1_stable and 5.2_stable or do I need to file separate PRs against those branches?", "created_at": "2018-03-06 02:39:34", "user": 16556, "id": 370642025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370644307", "text": "Backported to 5-2-stable @ db5a15901a411a2d23d312718d8f5c7e58a8e039 since it's still a release candidate. (Stable branches only get [bugfixes and security patches](http://guides.rubyonrails.org/maintenance_policy.html), otherwise.)", "created_at": "2018-03-06 02:52:38", "user": 199, "id": 370644307}, {"reactions": {"+1": [1497867]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370658208", "text": "@jeremy I understand the policy with regards to 5.1 stable - however I think it may need to be reconsidered for Capybara.  The benefit of system testing is to ensure compatibility with browsers, and with most browsers now auto-updating that means compatibility with the latest version of browsers. This means this will be the first gem rails depends on that loses functionality over time because a rails 5.1 app developer won't be able to upgrade Capybara (without upgrading rails) and will therefore lose the ability to test with the latest versions of browsers. \r\n\r\nIMHO this would have been much better if the  line in actionpack/lib/action_dispatch/system_test_case.rb was just\r\n\r\n    gem \"capybara\"\r\n\r\nand the version restriction was enforced through the Gemfiles since then an end user could at least override it if necessary, however that was shot down previously (when 5.1 was being released).", "created_at": "2018-03-06 04:23:58", "user": 16556, "id": 370658208}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Now that we require Ruby 2.4, we can use `String#unpack1` instead of `str.unpack(…).first`.\r\n\r\nhttps://bugs.ruby-lang.org/issues/12752\r\nhttps://ruby-doc.org/core-2.4.0/String.html#method-i-unpack1", "labels": [], "number": 32150, "updated_at": "2018-03-02 06:42:56", "user": 199, "closed_at": "2018-03-02 06:42:53", "id": 301655512, "title": "Ruby 2.4: take advantage of String#unpack1", "url": "https://api.github.com/repos/rails/rails/issues/32150", "created_at": "2018-03-02 05:12:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This reverts ignoring polymorphic error introduced at 02da8ae.\r\n\r\nWhat the ignoring want to solve was caused by force eager loading\r\nregardless of whether it is necessary, but it has been fixed by #29043.\r\n\r\nThe ignoring is now only causing a mismatch of `exists?` behavior with\r\n`to_a`, `count`, etc. It should behave consistently.", "labels": [], "number": 32149, "updated_at": "2018-03-03 17:36:19", "user": 12642, "closed_at": "2018-03-03 17:36:16", "id": 301581358, "title": "Eager loading with polymorphic associations should behave consistently", "url": "https://api.github.com/repos/rails/rails/issues/32149", "created_at": "2018-03-01 22:20:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is an alternative of #29722, and follow up of #32048.\r\n\r\nThis does not change the current behavior, but makes it easier to modify\r\nall polymorphic names consistently.", "labels": [], "number": 32148, "updated_at": "2018-03-03 17:34:05", "user": 12642, "closed_at": "2018-03-03 17:34:02", "id": 301518183, "title": "Extract all `base_class.name` as `polymorphic_name`", "url": "https://api.github.com/repos/rails/rails/issues/32148", "created_at": "2018-03-01 18:51:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm getting ActionDispatch::Cookies::CookieOverflow when I tried to upload CSV file. I googled this issue to resolve and I came across with a solution that by changing session storage to the database will resolve this. \r\n\r\nLater I found that changing session storage options has been removed from new versions of the rails application. \r\nHere is the answer I found on StackOverflow\r\nhttps://stackoverflow.com/questions/44662545/why-is-session-store-initializer-removed-in-rails-5-1-1/44662809\r\n\r\nCan someone please help me to resolve this. I have attached screenshot of the error message.\r\n\r\n### System configuration\r\n**Rails version: 5.1.4*:\r\n**Ruby version: 2.4.2**:\r\n", "labels": [], "number": 32147, "updated_at": "2018-03-01 17:16:42", "user": 12657840, "closed_at": "2018-03-01 17:16:42", "id": 301487620, "title": "Getting cookieoverflow exception when uploading a csv file ", "url": "https://api.github.com/repos/rails/rails/issues/32147", "created_at": "2018-03-01 17:12:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369663436", "text": "This is due to storing a very large value in session. Perhaps the CSV file contents itself? Recommend storing that elsewhere, e.g. in the database or using Active Storage.\r\n\r\n(Please take questions/discussions/troubleshooting to Stack Overflow. This is an issue tracker.)", "created_at": "2018-03-01 17:16:42", "user": 199, "id": 369663436}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\nRemove `index: true` from belongs_to options as it is true by default. Refer gist for example.\r\n[Gist](https://gist.github.com/abhikanojia/967dd8a83782da9064f329fb2cbb3eef)\r\n", "labels": [], "number": 32146, "updated_at": "2018-03-01 15:03:01", "user": 31365275, "closed_at": "2018-03-01 15:03:01", "id": 301416173, "title": "Remove index:true option from belongs to as defaults to true.", "url": "https://api.github.com/repos/rails/rails/issues/32146", "created_at": "2018-03-01 14:06:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369601521", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-01 14:06:11", "user": 7468109, "id": 369601521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369619596", "text": "These are Rails 5.0 migrations. It did not default to true in that version.", "created_at": "2018-03-01 15:03:01", "user": 1529387, "id": 369619596}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Followup to https://github.com/rails/rails/pull/29609.\r\n\r\nOverriding the `.configurations` method doesn't affect how connections are established; it shouldn't change the query cache behaviour either.\r\n\r\nThis is going in the opposite direction to https://github.com/rails/rails/pull/32135 - but even if we want to allow models to override the base configuration we shouldn't make that change in a stable branch, and https://github.com/rails/rails/pull/29609 was backported to 5-1-stable and 5-0-stable.", "labels": [], "number": 32145, "updated_at": "2018-03-04 23:04:48", "user": 432189, "closed_at": "None", "id": 301250139, "title": "Use Base.configurations in QueryCache.cache", "url": "https://api.github.com/repos/rails/rails/issues/32145", "created_at": "2018-03-01 01:52:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369447575", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-03-01 01:52:13", "user": 7468109, "id": 369447575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370264282", "text": "Why go in the opposite direction?", "created_at": "2018-03-04 21:09:39", "user": 30030, "id": 370264282}, {"reactions": {"+1": [30030]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370270162", "text": "Before https://github.com/rails/rails/pull/29609, users could add a `.configurations` method to their model and use it for whatever they wanted, without affecting Active Record's behaviour. Now it will potentially be called if they use `cache` / `uncached` - but we can't assume that the method has anything to do with database configurations, or even that the result will respond to `empty?` (as demonstrated in the test).", "created_at": "2018-03-04 22:26:50", "user": 432189, "id": 370270162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370270380", "text": "Ah yeah, that makes sense. I guess I was specifically wondering whether you see this as being a final position or just to introduce consistency for the existing stable releases.\r\n\r\nSo, what are your thoughts on:\r\n\r\n1. Backporting this for consistency, and then\r\n2. Applying https://github.com/rails/rails/pull/32135 and also reverting this for the next minor release of AR?", "created_at": "2018-03-04 22:29:58", "user": 30030, "id": 370270380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370270966", "text": "I guess the other option is to simply apply #32135 to stable 5.x releases which also brings things into consistency.\r\n\r\nApplying #32135 makes the API more general, while this makes it less general. While I don't think people would be relying on this behaviour, at the very least, it's already part of the public interface, so reverting it might not be a good idea.", "created_at": "2018-03-04 22:38:18", "user": 30030, "id": 370270966}, {"reactions": {"+1": [30030]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370272665", "text": "I would consider https://github.com/rails/rails/pull/32135 a new feature, and as such I don't think it should be backported (even if we've accidentally half-implemented it already!).\r\n\r\nI agree that if this is merged to master, we should undo it as part of https://github.com/rails/rails/pull/32135 if that proposal is accepted.", "created_at": "2018-03-04 23:01:32", "user": 432189, "id": 370272665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370272875", "text": "Yeah, that makes sense. I agree with your position. I think it's a logical approach. I just hope no one is depending on that behaviour, but I think that's probably a reasonable assumption.", "created_at": "2018-03-04 23:04:04", "user": 30030, "id": 370272875}], "assignees": [1080678, 1080678], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nAdd a test of `ActiveStorage::Service::DiskService#url_for_direct_upload`\r\n\r\n### Other Information", "labels": [], "number": 32144, "updated_at": "2018-03-01 00:01:23", "user": 2306108, "closed_at": "None", "id": 301230433, "title": "Add ActiveStorage::Service::DiskService#url_for_direct_upload test", "url": "https://api.github.com/repos/rails/rails/issues/32144", "created_at": "2018-03-01 00:01:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369426569", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-03-01 00:01:23", "user": 7468109, "id": 369426569}], "assignees": [94129, 94129], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis fixes #32142, in which assertions made in sub-sessions in `ActionDispatch::IntegrationTest` are not counted in the test run report.\r\n\r\nBy overriding the `assertions` accessor methods on the child session to use the parent's `assertions`, the count is accurately tracked.\r\n\r\n### Other Information\r\n\r\n- Is this the appropriate fix, or is there a better way to delegate to the parent session?\r\n- Is this the appropriate test? Should test report output be asserted on instead?\r\n\r\n----\r\ncc. @aud", "labels": [], "number": 32143, "updated_at": "2018-03-01 05:33:33", "user": 8219340, "closed_at": "None", "id": 301225652, "title": "Delegate child session assertions to parent session", "url": "https://api.github.com/repos/rails/rails/issues/32143", "created_at": "2018-02-28 23:37:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369421806", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-28 23:37:05", "user": 7468109, "id": 369421806}], "assignees": [47848, 47848], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Assertions run inside a separate session in `ActionDispatch::IntegrationTest` are not counted in the test report.\r\n\r\n### Steps to reproduce\r\n\r\n#### TL;DR\r\n\r\nRunning this test\r\n\r\n```ruby\r\nclass TLDRTest < ActionDispatch::IntegrationTest\r\n  test('assert in session') { open_session.assert(true) }\r\nend\r\n```\r\n\r\nreports an incorrect number of assertions\r\n\r\n```diff\r\n# Running:\r\n\r\n.\r\n\r\nFinished in 0.001477s, 677.0481 runs/s, 0.0000 assertions/s.\r\n-1 runs, 1 assertions, 0 failures, 0 errors, 0 skips\r\n+1 runs, 0 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\n<details>\r\n<summary>Full Test</summary>\r\n\r\n```ruby\r\n#! /usr/bin/env ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) { gem 'rails', '5.1.5', source: 'https://rubygems.org' }\r\nrequire 'rails/all'\r\nrequire \"minitest/autorun\"\r\n\r\nclass AssertionTest < ActionDispatch::IntegrationTest\r\n  test('assert outside session') { assert(true) } # control\r\n  test('assert in session') { open_session.assert(true) }\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_control\r\n    test_instance = AssertionTest.new('test_assert_outside_session').run\r\n    refute_predicate test_instance.assertions, :zero?\r\n  end\r\n\r\n  def test_actual\r\n    test_instance = AssertionTest.new('test_assert_in_session').run\r\n    refute_predicate test_instance.assertions, :zero?\r\n  end\r\nend\r\n```\r\n\r\n</details>\r\n\r\n### Expected behavior\r\n\r\nThe assertions in sessions should be counted in the test report.\r\n\r\n### Actual behavior\r\nThe assertions in sessions are not counted in the test report.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.4.2\r\n\r\n----\r\ncc. @aud\r\n", "labels": ["actionpack", "attached PR"], "number": 32142, "updated_at": "2018-03-01 22:49:08", "user": 8219340, "closed_at": "None", "id": 301224391, "title": "Assertions in IntegrationTest sessions incorrectly reported", "url": "https://api.github.com/repos/rails/rails/issues/32142", "created_at": "2018-02-28 23:31:11", "comments": [], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "We were generating the cookie value with the expiration embedded what makes the value impossible to be read by a Rails 5.1 application.\r\n\r\nThis option is only useful if you need to share your cookies between a Rails 5.1 and a Rails 5.2 application, or if you are still validating the deploy and wants to eventually rollback.", "labels": ["actionpack", "railties"], "number": 32141, "updated_at": "2018-03-06 20:19:54", "user": 47848, "closed_at": "2018-03-06 20:19:48", "id": 301221533, "title": "Use authenticated cookie options to disable embedding of the expiry information in the cookies", "url": "https://api.github.com/repos/rails/rails/issues/32141", "created_at": "2018-02-28 23:18:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369418127", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-02-28 23:18:39", "user": 7468109, "id": 369418127}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Recently @eileencodes made me aware of this PullRequest https://github.com/rails/rails/pull/32136 and plans to possibly make `Preloader` a Public API.\r\n\r\nWe've been using `Associations:Preloader` at GitHub as part of our https://github.com/Shopify/graphql-batch setup to preload associations during GraphQL queries. Over the past month we've hit some pretty nasty issues with it. I believe these may have to be fixed before making the Preloader a public concern.\r\n\r\n### Loading already loaded records\r\n\r\nThe main issue is this line: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader.rb#L180\r\n\r\nWhen preloading an association on a list of records, if this association is already loaded on the first record of the list, it is assumed that the whole list is loaded. In these cases, a `AlreadyLoaded` preloader is returned, and uses `association(name).target` to read the preloaded records.\r\n\r\nIn a public setting, I don't think we can make this assumption, in fact, using `preload` with a list of records might result in this scenario:\r\n\r\n```ruby\r\na = Record.create!\r\nb = Record.create!\r\nc = Record.create!\r\n\r\na.some_association.create!\r\n\r\npreloaders = ActiveRecord::Associations::Preloader.new.preload([a,b,c], [:some_association])\r\n\r\npreloaders.first.preloaded_records\r\n=> [Only the association for a is preloaded]\r\n```\r\n\r\nAt GitHub we worked around this problem by always checking if the association was already loaded, before passing a record to `Preloader`, filtering them out if needed. That solved most issues until we hit issues that were out of our control.\r\n\r\nTake through associations for example:\r\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader/through_association.rb#L8-L14\r\n\r\nIf we take\r\n\r\n```\r\nhas_many :patients, through: :appointments , source: :client\r\n```\r\n\r\nFirst, appointments are preloaded on patients. Then, `client` is preloaded on all patients. If the first appointment's client was already loaded, we'll get back only the client.\r\n\r\nWhen returning the preloaded records, we'll try to get the target association on all records, but the whole tail of the list of records will be `nil` because they weren't actually loaded.\r\n\r\nIn certain versions of Rails, `association.reader` is used instead of `target` if the association is not loaded. This is almost worst because it will silently generate N+1's.\r\n\r\nAnother gotcha this behaviour introduces is that you cannot use `Preloader` with different types of records / associations.\r\n\r\nFor example, one issue we hit was that we were preloading an association on two different types of records at the same time:\r\n\r\n```\r\nPreloader.new.preload([doctor, patient, patient_b], [:appointment])\r\n```\r\n\r\nIn our case, `appoitments` on one of the records was a `has_one through:`, and the other one was a `belongs to`. During the `has_one through` preloading logic, an association was loaded on the other kind of record. When it was time to load the second kind of record, since the association was already loaded for the first record, Preloader was skipping the whole list again.\r\n\r\nIf needed, I can provide failing tests for some of these tricky scenarios.\r\n\r\n### Preloading different object_ids\r\n\r\nAnother smaller issue is that the preloader currently `uniq!` the records before preloading them. This means that passing multiple objects for the same record will result in only the first record being preloaded.\r\n\r\nWe work around that by deduping the records before passing them to Preloader, and we copy over the associations after.\r\n\r\n### Takeaways\r\n\r\nCurrently, Rails assumes the preloader is ran in a certain context (its a private API right now after all). It breaks quickly when its used in other ways. It would be really awesome for us to make it a Public API, and it would be great to find a way around these gotchas!\r\n\r\ncc @eileencodes @tenderlove", "labels": [], "number": 32140, "updated_at": "2018-03-08 02:14:25", "user": 1919498, "closed_at": "None", "id": 301142583, "title": "Issues with Associations::Preloader used as a Public API", "url": "https://api.github.com/repos/rails/rails/issues/32140", "created_at": "2018-02-28 18:59:33", "comments": [{"reactions": {"+1": [1919498, 122436]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369351057", "text": "> When preloading an association on a list of records, if this association is already loaded on the first record of the list, it is assumed that the whole list is loaded.\r\n\r\nWe need to fix this case.\r\n\r\n> preloading an association on two different types of records at the same time:\r\n\r\nThis is not going to be allowed by the public API, it will raise in case you pass incompatible objects.\r\nhttps://github.com/rails/rails/pull/32136/files#diff-bf6dd6226db3aab589916f09236881c7R1198\r\n\r\n> Preloading different object_ids\r\n\r\nAlso should be fixed.", "created_at": "2018-02-28 19:17:27", "user": 47848, "id": 369351057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369437681", "text": "> it will raise in case you pass incompatible objects\r\n\r\nDepends where you call it; it'd be possible to have two members of an inheritance hierarchy with different definitions of an association. And it's currently [deliberately] callable on AR::Base, which makes anything possible.\r\n\r\nThe check is there to disallow obviously-wrong things like `User.load_associations(some_companies)`, but doesn't ensure strict homogeneity.\r\n\r\nBut I think this is just a specialization of the \"first record is loaded but others aren't\" problem, so if we fix that this one should be fine too.\r\n\r\ncc @dinahshi ", "created_at": "2018-03-01 00:57:50", "user": 1034, "id": 369437681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369450495", "text": "In the case of an inheritance hierarchy, I think a child would typically inherit all associations from its parent. And #load_association being called at the parent level would raise errors for child elements. \r\n\r\n~~However, that doesn't address the AR::Base case. I actually like the idea of homogeneity because a call to `#preload` implies one query for one listed association. The cognitive load of mixing different types of records that happen to have common associations (or common associations names) is pretty high for me as I'm reading code but maybe that's just because I'm not used to it. That's another one of the reasons I like exposing Preloader via Relation rather than viewing it as a separate service.~~ Discovered that Preloader already groups records by association class to handle non-homogeneous collections! https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader.rb#L139 I think it makes sense to expose this to public API; I will remove the incompatible object check. ", "created_at": "2018-03-01 02:09:22", "user": 5495713, "id": 369450495}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Also caches the url helpers module since that was being created every time an Active Storage url was generated.", "labels": [], "number": 32139, "updated_at": "2018-03-07 20:35:06", "user": 6321, "closed_at": "2018-03-05 17:00:05", "id": 300951780, "title": "Add support for root-relative path URLs to the disk service", "url": "https://api.github.com/repos/rails/rails/issues/32139", "created_at": "2018-02-28 09:35:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369276801", "text": "We can’t do this by default. Content type identification for direct uploads [requires](https://github.com/rails/rails/blob/9dbc4754540a7374ad04b406bb0f6e97b7719479/activestorage/app/models/active_storage/identification.rb#L24) that `ActiveStorage::Blob#service_url` return a fully-qualified URL.", "created_at": "2018-02-28 15:33:14", "user": 94129, "id": 369276801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369287453", "text": "@georgeclaghorn what if we moved `identifiable_chunk` to come from the service directly? Would be more efficient for the disk service then because it could do a file read instead of a http request.", "created_at": "2018-02-28 16:03:02", "user": 6321, "id": 369287453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369294982", "text": "I considered that before and was loath to add to the Service API, but I suppose it’s best.\r\n\r\nThe catch is that the official Google Cloud Storage client doesn’t support range downloads, so the GCS service will have to do roughly what `Identification` does now: generate a URL and manually issue a download request with a `Range` header.", "created_at": "2018-02-28 16:25:14", "user": 94129, "id": 369294982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369297527", "text": "If we go down that path, we can do away with the `:host` option altogether and always generate root-relative paths in the disk service. Identification was the only reason for switching to fully-qualified URLs.", "created_at": "2018-02-28 16:32:25", "user": 94129, "id": 369297527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370487627", "text": "@pixeltrix, I took the liberty of [implementing your proposal](https://github.com/rails/rails/commit/ccac681122db9747fec9512076772bca345e24b9) in anticipation of tomorrow’s release candidate.", "created_at": "2018-03-05 16:59:27", "user": 94129, "id": 370487627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370731407", "text": "@georgeclaghorn thanks - was going to look at it at the weekend but ended up having to work. Do the docs need updating?", "created_at": "2018-03-06 10:11:46", "user": 6321, "id": 370731407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371274199", "text": "**UPDATE**: I now realize that this makes `host` _optional_ for the disk service. And when **not** provided, root-relative `url` values will be created. But if a `host` option is specified, a fully-qualified `url` value is generated. If so, please ignore the rest of this message.\r\n\r\n**ORIGINAL COMMENT**:\r\n\r\n> If we go down that path, we can do away with the :host option altogether and always generate root-relative paths in the disk service. Identification was the only reason for switching to fully-qualified URLs.\r\n\r\nI'm sure I'm missing something, but this will be problematic for any non-HTML forms (or Rails-provided JS lib) clients, no? For example, a native iOS/Android client.\r\n\r\nWe have a Rails UI which uses the built in direct upload stuff. But we also have an iOS client that needs to upload files. Our iOS client first creates a `Blob` via `POST /api/uploads` (which is a controller that inherits from `ActiveStorage::DirectUploadsController`). As of Rails 5.2.0.rc1 the response looked like this:\r\n\r\n```json\r\n{\r\n  \"id\": 1,\r\n  \"key\": \"AHPU4cV8yHWYzoGfaaRuTQzg\",\r\n  \"filename\": \"some-file.png\",\r\n  \"content_type\": \"image/png\",\r\n  \"metadata\": {},\r\n  \"byte_size\": 15844,\r\n  \"checksum\": \"dHJ4QIEDJy7mxfm0IE09xw==\",\r\n  \"created_at\": \"2018-03-07T20:17:36.756Z\",\r\n  \"signed_id\": \"eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBCZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--5e5775d4c690a6a4171abb69e25e50e91f8a61cd\",\r\n  \"direct_upload\": {\r\n    \"url\": \"http://localhost:5000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaDdDVG9JYTJWNVNTSWRRVWhRVlRSalZqaDVTRmRaZW05SFptRmhVblZVVVhwbkJqb0dSVlE2RVdOdmJuUmxiblJmZEhsd1pVa2lEbWx0WVdkbEwzQnVad1k3QmxRNkUyTnZiblJsYm5SZmJHVnVaM1JvYVFMa1BUb05ZMmhsWTJ0emRXMUpJaDFrU0VvMFVVbEZSRXA1TjIxNFptMHdTVVV3T1hoM1BUMEdPd1pVIiwiZXhwIjoiMjAxOC0wMy0wN1QyMDoyMjozNi43ODBaIiwicHVyIjoiYmxvYl90b2tlbiJ9fQ==--c639a4499a4159ae7c6d3abcf4ce8a89b23ba964\",\r\n    \"headers\": {\r\n      \"Content-Type\": \"image/png\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe client then pulls out the `direct_upload.url` to know where to PUT the file. Will that URL be changing to root-relative with this PR? If so, that's quite a change for clients. They now have to know about the storage backed being used by Rails, rather than blindly `PUT`-ing to the `direct_upload.url`. \r\n\r\nAm I understanding this correctly?", "created_at": "2018-03-07 20:30:20", "user": 48658, "id": 371274199}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backport d004f0a to `5-2-stable`\r\nr? @kamipo ", "labels": [], "number": 32138, "updated_at": "2018-02-28 08:11:21", "user": 6443532, "closed_at": "2018-02-28 08:11:02", "id": 300927534, "title": "Backport d004f0a to `5-2-stable`", "url": "https://api.github.com/repos/rails/rails/issues/32138", "created_at": "2018-02-28 08:09:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369154303", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-02-28 08:09:03", "user": 7468109, "id": 369154303}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "columsn ->\r\ncolumns\r\n", "labels": [], "number": 32137, "updated_at": "2018-02-28 06:48:28", "user": 33111, "closed_at": "2018-02-28 06:26:04", "id": 300905700, "title": "Fix a typo in activerecord/CHANGELOG.md", "url": "https://api.github.com/repos/rails/rails/issues/32137", "created_at": "2018-02-28 06:19:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369134353", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-28 06:19:47", "user": 7468109, "id": 369134353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369135322", "text": "@okkez thanks! 👍 ", "created_at": "2018-02-28 06:26:27", "user": 6321, "id": 369135322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369138871", "text": "Thank you!!", "created_at": "2018-02-28 06:48:28", "user": 33111, "id": 369138871}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nAdds method Relation#load_associations(arr, *args) which accepts an array\r\nof records and args to preload. Useful for when a loaded list is filtered\r\nin ruby to produce an Array and we want to preload the records in this Array.\r\nEffectively exposes `Preloader.preload(records, associations, preload_scope = nil)`\r\nwithout requiring people to know about a separate Preloader class.\r\n\r\n### Todo\r\n- [x] Documentation\r\n- [x] CHANGELOG\r\n\r\ncc/ @matthewd ", "labels": [], "number": 32136, "updated_at": "2018-03-19 23:04:12", "user": 5495713, "closed_at": "None", "id": 300844176, "title": "Add delayed preloading for arrays of records", "url": "https://api.github.com/repos/rails/rails/issues/32136", "created_at": "2018-02-28 00:20:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369075383", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-28 00:20:49", "user": 7468109, "id": 369075383}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369112649", "text": "This is awesome. We have an implementation of this at Shopify. This is the implementation.\r\n\r\n```\r\nclass AssociationPreloader\r\n  def initialize(records)\r\n    @records = records\r\n  end\r\n\r\n  def preload(*associations)\r\n    if @records.is_a?(ActiveRecord::Relation)\r\n      @records.preload(associations)\r\n    else\r\n      ActiveRecord::Associations::Preloader.new.preload(@records, associations.flatten) unless @records.empty?\r\n      @records\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nMaybe we should also support passing an relation?\r\n\r\nAlso can you add documentation?", "created_at": "2018-02-28 03:49:41", "user": 47848, "id": 369112649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369610541", "text": "We are using similar technique in our project.\r\nWe found a major problems with this implementation:\r\n\r\n### Sometimes loaded associations. \r\n\r\nPreloader currently determines if the association is preloaded or not by the first record https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader.rb#L180\r\nWe have encountered that practically: it results in the double load on the loaded target records. I think we need to fix that part first before exposing the power of Preloader to the audience.\r\n\r\n\r\n### Offtopic\r\n\r\nYou may see the implementation that is efficient for us:\r\n\r\n``` ruby\r\n  def preload_into_association(host_association, *preload_associations)\r\n    # Preloading records in such a weird way\r\n    # Because we want to cache them inside an association\r\n    # but not have a separated scope as a result of #preload call\r\n    preload_associations.each do |preload_association|\r\n      collection = send(host_association)\r\n      unpreloaded = collection.reject {|l| l.association(preload_association).loaded?}\r\n      ActiveRecord::Associations::Preloader.new.preload(unpreloaded, preload_association)\r\n    end\r\n  end\r\n```\r\n\r\nHere is how it is used:\r\n\r\n``` ruby\r\nSite.has_many :campaigns\r\nCampaign.has_many :assets\r\n\r\nsite.preload_into_association(:campaigns, :assets)\r\n# which is better than\r\nsite.campaigns.preload(:assets) \r\n# because it generates new relation and site.campaigns.map(&:assets) is not cached...EVER...  \r\n```\r\n\r\nYou may see that we filter out loaded records with loaded association from collection which resolves the original problem I described. The counter problem of that is that it doesn't allow to pass the nested associations... only an array of associations.\r\n", "created_at": "2018-03-01 14:34:57", "user": 122436, "id": 369610541}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370281100", "text": "@rafaelfranca I like the Shopify implementation's straightforward way of handling relations. I'm a little concerned that the method can return different types. When passed a relation, it returns a relation so it can be chained with other query methods like `where`, `order`, etc. But when passed an Array it returns an Array.", "created_at": "2018-03-05 00:51:44", "user": 5495713, "id": 370281100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/373965724", "text": "Addressed feedback from @rafaelfranca and @kaspth. aab3b41f3d360c56bcd8e72295863676d4b3ed7a fixes the issue raised in #32140 where it is assumed that an entire list is loaded when the first record in the list is loaded. 8d6e1468b6c126f7cfb96171e417d892f257bbdf fixes preloading different object ids.\r\n\r\nAdded documentation and updated changelog.", "created_at": "2018-03-18 01:29:38", "user": 5495713, "id": 373965724}], "assignees": [1080678, 1080678], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nIn some multi-server setups, it's desirable to have multiple sets of\r\nconfigurations. Unfortunately this code path makes the assumption that\r\n`Base.configurations` is valid for the current class which isn't the case\r\nif the class overrides `::configurations`.", "labels": [], "number": 32135, "updated_at": "2018-03-04 23:06:10", "user": 30030, "closed_at": "None", "id": 300822886, "title": "Avoid explicit usage `Base.connections` as sub-classes may override", "url": "https://api.github.com/repos/rails/rails/issues/32135", "created_at": "2018-02-27 22:47:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369054768", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-27 22:47:07", "user": 7468109, "id": 369054768}, {"reactions": {"+1": [30030]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369111976", "text": "Can you add tests for it?", "created_at": "2018-02-28 03:44:41", "user": 47848, "id": 369111976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369121952", "text": "Here is the actual library which requires this change: https://github.com/ioquatix/activerecord-configurations\r\n\r\nI will submit a basic test case. It should be relatively trivial.", "created_at": "2018-02-28 04:58:33", "user": 30030, "id": 369121952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369124017", "text": "Just as a heads-up, it sounds a bit like you're reinventing (the currently not-so-documented) #28095. (With less YAML, perhaps -- but in an overlapping \"multiple connections configured per environment\" solution-space.)\r\n\r\nOr if not, could you elaborate on the use case for multiple configuration sets? I'm a little hesitant to endorse overriding `configurations`. 😕 ", "created_at": "2018-02-28 05:13:40", "user": 1034, "id": 369124017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369188223", "text": "@rafaelfranca Please see the additional test case.\r\n\r\n@matthewd Thanks for your input. I'd be happy to discuss with you the issues I see with how configurations currently work in active record but I feel such a discussion might derail this PR. However, I'd be happy to have a chat on Gitter.im or even a Hangout on Google if that's something that works for you. I hope that this PR can be seen as a simplification of the logic as implemented (i.e. using `self` rather than tightly coupling to `Base`.) If we can implement this small change, which I feel is non-invasive, it should provide benefits to all who are willing to explore improvements to how AR configurations work :)\r\n\r\n", "created_at": "2018-02-28 09:59:45", "user": 30030, "id": 369188223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370273022", "text": "It looks like the travis build failed, but due to some issue with travis, not the PR.", "created_at": "2018-03-04 23:06:10", "user": 30030, "id": 370273022}], "assignees": [94129, 94129], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Related to 948b931925febac3c965ab13470065ced68f7b53\r\n\r\nr? @sgrif ", "labels": [], "number": 32134, "updated_at": "2018-02-28 06:23:57", "user": 6443532, "closed_at": "2018-02-28 02:06:47", "id": 300819154, "title": "Use `with_partial_writes` helper in `activerecord/test/cases/dirty_test.rb`", "url": "https://api.github.com/repos/rails/rails/issues/32134", "created_at": "2018-02-27 22:33:41", "comments": [], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "<s>Remove extra comments `# Asking for private method` in activesupport/test/core_ext/module_test.rb</s>\r\nImprove docs of using `delegate` with `:private`\r\nUpdate changelog of #31944\r\n", "labels": [], "number": 32133, "updated_at": "2018-02-28 09:07:25", "user": 6443532, "closed_at": "2018-02-28 09:03:22", "id": 300815684, "title": "Add separate test to ensure that `delegate` with `:private` option returns correct value", "url": "https://api.github.com/repos/rails/rails/issues/32133", "created_at": "2018-02-27 22:21:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369047688", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-27 22:21:08", "user": 7468109, "id": 369047688}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6443532]}, "text": "### Steps to reproduce\r\n\r\nI used the bug report template: https://gist.github.com/chancancode/00296a017b46a9c8f2fd32987d46af9a#file-bugreport-rb\r\n\r\nTL;DR\r\n\r\nAccording to the docs, you need to use `self.abstract_class = true` in order to get Rails to use the explicitly overridden `table_name`. That isn't true, and I created a bug report using the bug report template (with @chancancode) to illustrate the mistake.", "labels": [], "number": 32132, "updated_at": "2018-02-28 02:44:19", "user": 4, "closed_at": "2018-02-28 02:44:19", "id": 300811453, "title": "Doc mistake with self.abstract_class = true", "url": "https://api.github.com/repos/rails/rails/issues/32132", "created_at": "2018-02-27 22:06:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369102347", "text": "Definitely. This should be fixed by #31171.", "created_at": "2018-02-28 02:43:16", "user": 12642, "id": 369102347}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [6321]}, "text": "`default_enforce_utf8` belongs to `config.action_view`\r\n\r\nUpdate info about `:skip_enforcing_utf8` since we can change default\r\nbehavior via `config.action_controller.default_enforce_utf8`\r\n\r\nRelated to #32125\r\n", "labels": [], "number": 32131, "updated_at": "2018-02-28 06:23:22", "user": 6443532, "closed_at": "2018-02-28 03:40:21", "id": 300794720, "title": "Fix `new_framework_defaults_6_0.rb`", "url": "https://api.github.com/repos/rails/rails/issues/32131", "created_at": "2018-02-27 21:13:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369027922", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-27 21:13:12", "user": 7468109, "id": 369027922}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [522155, 6443532], "+1": [380809, 163953, 522155, 24674436, 132, 1948197, 4034241]}, "text": "### Summary\r\n\r\nWhen using rails routes with small terminal or complicated routes it can be very difficult to understand where a specific element is, especially when using header. psql had the same issue, that's why they created \"expanded mode\" [long time ago](https://github.com/postgres/postgres/commit/a45195a191eec367a4f305bb71ab541d17a3b9f9#diff-c8870df945d6a1270e9d5ed30e41d3f4R107) that you can\r\nswitch using `\\x` or by starting psql with\r\n```\r\n-x\r\n--expanded\r\n\r\n    Turn on the expanded table formatting mode. This is equivalent to the \\x command.\r\n```\r\nThe output is similar to one implemented here for `rails routes`:\r\n\r\n```\r\ndb_user-# \\du\r\nList of roles\r\n-[ RECORD 1 ]----------------------------------------------\r\nRole name  | super\r\nAttributes | Superuser, Create role, Create DB\r\nMember of  | {}\r\n-[ RECORD 2 ]----------------------------------------------\r\nRole name  | role\r\nAttributes | Superuser, Create role, Create DB, Replication\r\nMember of  | {}\r\n```\r\n\r\nHere is an output expanded mode (I removed active storage routes):\r\n```\r\n$ rails routes --expanded\r\n--[ Route 1 ]------------------------------------------------------------\r\nPrefix            | high_scores\r\nVerb              | GET\r\nURI               | /high_scores(.:format)\r\nController#Action | high_scores#index\r\n--[ Route 2 ]------------------------------------------------------------\r\nPrefix            | new_high_score\r\nVerb              | GET\r\nURI               | /high_scores/new(.:format)\r\nController#Action | high_scores#new\r\n--[ Route 3 ]------------------------------------------------------------\r\nPrefix            | blog\r\nVerb              |\r\nURI               | /blog\r\nController#Action | Blog::Engine\r\n\r\n[ Routes for Blog::Engine ]\r\n--[ Route 1 ]------------------------------------------------------------\r\nPrefix            | cart\r\nVerb              | GET\r\nURI               | /cart(.:format)\r\nController#Action | cart#show\r\n````\r\n\r\n### Other Information\r\n\r\n- I didn't add an entry to changelog because it seems too early for me. Also, I didn't know where you want this to be targeted if it was approved.\r\n- [App used to display routes](https://github.com/benoittgt/rails_app_test_rake_routes)\r\n", "labels": [], "number": 32130, "updated_at": "2018-03-01 09:52:05", "user": 8417720, "closed_at": "2018-02-28 23:34:00", "id": 300789330, "title": "Add \"rails routes --expanded\" mode", "url": "https://api.github.com/repos/rails/rails/issues/32130", "created_at": "2018-02-27 20:55:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369022818", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @georgeclaghorn (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-27 20:55:49", "user": 7468109, "id": 369022818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369025849", "text": "Good idea Benoit, this will be helpful. It'll be harder to `grep` this format, but we can't have everything. :)", "created_at": "2018-02-27 21:06:00", "user": 380809, "id": 369025849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369027372", "text": "@jaredbeck you can still use '-c controller' or '-g pattern'\r\n\r\n```\r\nrails routes -g high --expanded\r\n--[ Route 1 ]------------------------------------------------------------\r\nPrefix            | high_scores\r\nVerb              | GET\r\nURI               | /high_scores(.:format)\r\nController#Action | high_scores#index\r\n--[ Route 2 ]------------------------------------------------------------\r\nPrefix            | new_high_score\r\nVerb              | GET\r\nURI               | /high_scores/new(.:format)\r\nController#Action | high_scores#new\r\n```", "created_at": "2018-02-27 21:11:24", "user": 8417720, "id": 369027372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369051683", "text": "> @jaredbeck you can still use '-c controller' or '-g pattern'\r\n\r\nAwesome. I had no idea about either of those, thanks.", "created_at": "2018-02-27 22:35:53", "user": 380809, "id": 369051683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369165515", "text": "When it's good I can squash. Thanks to all of you for the reviews. 🤙🏻", "created_at": "2018-02-28 08:56:42", "user": 8417720, "id": 369165515}, {"reactions": {"hooray": [15371677, 7865030]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369390578", "text": "Squashed 🎉 ", "created_at": "2018-02-28 21:33:41", "user": 8417720, "id": 369390578}, {"reactions": {"+1": [8417720]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369538344", "text": "Really excited for this feature, thank you so much for your work. 🎆 ", "created_at": "2018-03-01 09:52:05", "user": 7865030, "id": 369538344}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1173494, 6263853, 1859806]}, "text": "I am developing a mutli-subdomain application, and because of that I utilize `lvh.me` as my host to be able to navigate those subdomains locally. \r\n\r\nAs of 6fb3ac1536d60bc12cf531e83e4060fe1fdf3d87 on the ActiveStorage Disk service, the host was defaulted to `localhost:3000` which forces me to set the **host:** setting in my `config/storage.yml`\r\n```yml\r\nlocal:\r\n  service: Disk\r\n  root: <%= Rails.root.join(\"storage\") %>\r\n  host: http://lvh.me:5000\r\n```\r\n\r\nI would expect that attached images would be able to look at the current environment's server and build the url from there. I would expect that if I upload an image on `admin.lvh.me:5000`, it would be able to render on `lvh.me:5000`\r\n\r\nBecause I have to explicity set the host, the generated image urls are only available on the subdomain I specify in the `config/storage.yml`\r\n\r\nWith the configuration as seen above, when I am on the `admin` subdomain I receive this error when displaying an attached image\r\n\r\n<img width=\"631\" alt=\"screen shot 2018-02-27 at 12 14 18 pm\" src=\"https://user-images.githubusercontent.com/9326912/36749427-ed862efa-1bb7-11e8-978e-71a33ecaf2a5.png\">\r\n\r\nWithout anyway to dynamically set that ActiveStorage url host, I'm not sure how to get around this issue.\r\n\r\n**Ruby:** 2.4.2\r\n**Rails:** 5.2.0.rc1\r\n", "labels": ["activestorage"], "number": 32129, "updated_at": "2018-03-21 04:34:50", "user": 9326912, "closed_at": "2018-03-05 16:56:41", "id": 300758092, "title": "ActiveStorage unable to render attachment URLs across subdomains", "url": "https://api.github.com/repos/rails/rails/issues/32129", "created_at": "2018-02-27 19:17:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369135629", "text": "This was introduced in the Commit \r\n\r\nProvide a sensible default host 6fb3ac1536d60bc12cf531e83e4060fe1fdf3d87\r\n\r\nThe problem is, with setting host to \"localhost\" you don't get relative URLs. But relative URLs for the Disk Storage Adapter are fine. \r\n\r\nAnd there is a second BUG: When you set another host in the yml file, AS will ignore the setting. I'ts always \"localhost\". ", "created_at": "2018-02-28 06:28:31", "user": 1173494, "id": 369135629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369153235", "text": "@42he when you say that AS ignores the setting, is that the generated url is using 'localhost' but `ActiveStorage::Blob.service.host` is configured correctly? Testing locally seems to configure the host correctly on the service.", "created_at": "2018-02-28 08:03:59", "user": 6321, "id": 369153235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369179885", "text": "I have the mirror service: \r\n\r\nlocal:\r\n  service: Disk\r\n  root: <%= Rails.root.join('storage') %>\r\n  host: https://example.com\r\namazon:\r\n  service: S3\r\n (...)\r\nmirror: \r\n  service: Mirror\r\n  primary: local \r\n  mirrors: [amazon]\r\n\r\nirb(main):001:0> ActiveStorage::Blob.service.host\r\nNoMethodError: undefined method `host' for #<ActiveStorage::Service::MirrorService:0x007f861fe988e0>\r\n\tfrom (irb):1\r\n\r\nThe links all start with localhost:3000 \r\n\r\nI don't know if it setted the host correct before your commit, but with no host setting i got \"relative\" URLS witch worked perfekly fine. ", "created_at": "2018-02-28 09:36:24", "user": 1173494, "id": 369179885}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369184983", "text": "@42he what do you get if you do `ActiveStorage::Blob.service.primary.host` ?\r\n\r\nI think what you may be seeing is the stable url in the view which then gets redirected to the service url by the [ActiveStorage::BlobsController#show][1] action.\r\n\r\n[1]: https://github.com/rails/rails/blob/761122a6caf5030db8d791ed7d9ebf7afac529a2/activestorage/app/controllers/active_storage/blobs_controller.rb#L12", "created_at": "2018-02-28 09:47:33", "user": 6321, "id": 369184983}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/374832063", "text": "The latest fix for this, ccac681, breaks any non-browser direct upload clients. e.g., an iOS or Android native client as the direct upload `url` is no longer a url, but a relative path. I mentioned this same case in #32139. But it was OK there because we could still set a `host` option to something like `host: my-machine.local:5000` and things would work. (See: https://github.com/rails/rails/pull/32139#issuecomment-371274199).\r\n\r\nIs there a reason to _not_ allow the host option? Is there something different that non-browser ActiveStorage clients should be doing?\r\n\r\n/cc @georgeclaghorn @pixeltrix ", "created_at": "2018-03-21 04:34:50", "user": 48658, "id": 374832063}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "ActionCable is continuously checking for null users/logged out users, even though I have a meta-tag wrapped around the JS channel functions. I even erased the cookies for my loopback server, but nothing seems to stop the functions from firing off. Normally, there should be no checks for logged out users or null users w/how its configured.\r\n\r\nconnection.rb\r\n\r\n```\r\nmodule ApplicationCable\r\n  class Connection < ActionCable::Connection::Base\r\n    identified_by :current_user\r\n\r\n    def connect\r\n      self.current_user = find_verified_user\r\n      logger.add_tags 'ActionCable', current_user.username\r\n    end\r\n\r\n    protected\r\n    def find_verified_user\r\n      verified_user = User.find_by(id: cookies.signed['user.id'])\r\n      if verified_user && cookies.signed['user.expires_at'] > Time.now\r\n        verified_user\r\n      else\r\n        reject_unauthorized_connection\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\ncable.js\r\n\r\n```\r\n// Action Cable provides the framework to deal with WebSockets in Rails.\r\n// You can generate new channels where WebSocket features live using the `rails generate channel` command.\r\n//\r\n//= require action_cable\r\n//= require notifications\r\n//= require_self\r\n//= require_tree ./channels\r\n\r\n(function() {\r\n  this.App || (this.App = {});\r\n\r\n  App.cable = ActionCable.createConsumer();\r\n\r\n}).call(this);\r\n```\r\n\r\n\r\napplication.html.erb\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\r\n  <title>ActionCable Chat</title>\r\n  <%= csrf_meta_tags %>\r\n\r\n  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>\r\n  <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>\r\n  <%= javascript_include_tag 'https://cdnjs.cloudflare.com/ajax/libs/tether/1.4.0/js/tether.min.js' %>\r\n  <%= javascript_include_tag 'https://js.stripe.com/v3/' %>\r\n  <%= favicon_link_tag 'favicon.ico' %>\r\n  <% if user_signed_in? %>\r\n      <%= tag :meta, name: 'current-user', data: {id: current_user.id} %>\r\n  <% end %>\r\n</head>\r\n.....\r\n</html>\r\n\r\n```\r\nwarden_hooks.rb\r\n\r\n```\r\nWarden::Manager.after_set_user do |user,auth,opts|\r\n  scope = opts[:scope]\r\n  auth.cookies.signed[\"#{scope}.id\"] = user.id\r\n  auth.cookies.signed[\"#{scope}.expires_at\"] = 30.minutes.from_now\r\nend\r\n\r\n\r\nWarden::Manager.before_logout do |user, auth, opts|\r\n  scope = opts[:scope]\r\n  auth.cookies.signed[\"#{scope}.id\"] = nil\r\n  auth.cookies.signed[\"#{scope}.expires_at\"] = nil\r\nend\r\n\r\n```\r\n\r\nlast_read.js\r\n\r\n```\r\n$(document).on('turbolinks:load', function () {\r\n    if (!($(\"meta[name='current-user']\").length <= 0 && !($(\"meta[name='current-user']\")))) {\r\n    (function () {\r\n        App.last_read = App.cable.subscriptions.create(\"LastReadChannel\", {\r\n            connected: function () {\r\n            },\r\n            disconnected: function () {\r\n            },\r\n            received: function (data) {\r\n            },\r\n            update: function (chatroom_id) {\r\n                return this.perform(\"update\", {\r\n                    chatroom_id: chatroom_id\r\n                });\r\n            }\r\n        });\r\n\r\n    }).call(this);\r\n}\r\n});\r\n\r\n```\r\n\r\nchatrooms.js\r\n```\r\n$(document).on('turbolinks:load', function () {\r\n    if (!($(\"meta[name='current-user']\").length <= 0 && !($(\"meta[name='current-user']\")))) {\r\n        (function () {\r\n            App.chatrooms = App.cable.subscriptions.create(\"ChatroomsChannel\", {\r\n                connected: function () {\r\n                },\r\n                disconnected: function () {\r\n                },\r\n                received: function (data) {\r\n                    var active_chatroom;\r\n                    active_chatroom = $(\"[data-behavior='messages'][data-chatroom-id='\" + data.chatroom_id + \"']\");\r\n                    if (active_chatroom.length > 0) {\r\n                        if (document.hidden) {\r\n                            if ($(\".strike\").length === 0) {\r\n                                active_chatroom.append(\"<div class='strike'><span>Unread Messages</span></div>\");\r\n                            }\r\n                            if (Notification.permission === \"granted\") {\r\n                                new Notification(data.username, {\r\n                                    body: data.body\r\n                                });\r\n                            }\r\n                        } else {\r\n                            App.last_read.update(data.chatroom_id);\r\n                        }\r\n                        return active_chatroom.append(\"<div class='media message'> <div class='media-body'> <h5 class='mt-0 message-username-pos'>\" + data.username + \"</h5> <p>\" + data.body + \"</p></div></div>\");\r\n                    } else {\r\n                        return $(\"[data-behavior='chatroom-link'][data-chatroom-id='\" + data.chatroom_id + \"']\").css(\"font-weight\", \"bold\");\r\n                    }\r\n                },\r\n                send_message: function (chatroom_id, message) {\r\n                    return this.perform(\"send_message\", {\r\n                        chatroom_id: chatroom_id,\r\n                        body: message\r\n                    });\r\n                }\r\n            });\r\n\r\n        }).call(this);\r\n    }\r\n});\r\n\r\n```\r\n### System configuration\r\n**Rails version**:\r\nRails 5.1.1\r\n**Ruby version**:\r\nruby 2.4.3", "labels": [], "number": 32128, "updated_at": "2018-02-27 19:07:49", "user": 8632141, "closed_at": "2018-02-27 19:07:49", "id": 300695899, "title": "ActionCable \"An unauthorized connection attempt was rejected\" for users not logged", "url": "https://api.github.com/repos/rails/rails/issues/32128", "created_at": "2018-02-27 16:16:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368990522", "text": "Stepping through your JavaScript in a debugger will reveal what's happening!\r\n\r\n(Please take questions/discussions/troubleshooting to Stack Overflow. This is an issue tracker.)", "created_at": "2018-02-27 19:07:49", "user": 199, "id": 368990522}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\n* When getting an error that generates a screenshot it would be helpful\r\n  to be able to ctrl+click it to quickly open it in the browser, which\r\n  does not work with relative paths.\r\n* This changes `image_path` to disregard the relative path and use the\r\n  absolute one instead\r\n", "labels": [], "number": 32127, "updated_at": "2018-02-27 19:20:43", "user": 166304, "closed_at": "2018-02-27 19:20:43", "id": 300639599, "title": "Uses the absolute path for system test screenshots", "url": "https://api.github.com/repos/rails/rails/issues/32127", "created_at": "2018-02-27 13:55:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368885187", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-27 13:55:26", "user": 7468109, "id": 368885187}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "add :nodoc: to ActionView::Helpers::FormBuilder#emitted_hidden_id?", "labels": [], "number": 32126, "updated_at": "2018-02-27 12:35:25", "user": 3015835, "closed_at": "2018-02-27 12:35:22", "id": 300610626, "title": "Add :nodoc: to ActionView::Helpers::FormBuilder#emitted_hidden_id?", "url": "https://api.github.com/repos/rails/rails/issues/32126", "created_at": "2018-02-27 12:28:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368858389", "text": "@rafaelfranca I've created this PR related to #32114 ", "created_at": "2018-02-27 12:30:36", "user": 3015835, "id": 368858389}, {"reactions": {"laugh": [3015835]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368859539", "text": "Thanks!", "created_at": "2018-02-27 12:35:25", "user": 47848, "id": 368859539}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With the disabling of TLS 1.0 by most major websites, continuing to run IE8 or lower becomes increasingly difficult so default to not enforcing UTF-8 encoding as it's not relevant to other browsers.", "labels": [], "number": 32125, "updated_at": "2018-02-27 15:54:47", "user": 6321, "closed_at": "2018-02-27 15:54:44", "id": 300589370, "title": "Don't enforce UTF-8 by default", "url": "https://api.github.com/repos/rails/rails/issues/32125", "created_at": "2018-02-27 11:14:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [987638, 6443532]}, "text": "This change was made at 4a835aa3236eedb135ccf8b59ed3c03e040b8b01\r\n\r\nCurrent all.rb is [rails/all.rb at f86b221a53e8363b7c8a5688df603fc388b62b7c · rails/rails](https://github.com/rails/rails/blob/f86b221a53e8363b7c8a5688df603fc388b62b7c/railties/lib/rails/all.rb)", "labels": [], "number": 32124, "updated_at": "2018-02-27 09:18:02", "user": 82371, "closed_at": "2018-02-27 09:18:02", "id": 300531088, "title": "[ci skip]Change requring order of files in doc", "url": "https://api.github.com/repos/rails/rails/issues/32124", "created_at": "2018-02-27 08:16:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, this migration works fine when executing rails db:migrate\r\n\r\n```\r\nclass CreateBmcCards < ActiveRecord::Migration[5.1]\r\n  def change\r\n    create_table :bmc_cards do |t|\r\n      t.string :name\r\n      t.string :description\r\n      t.string :purposes, array: true, default: []\r\n\r\n      t.timestamps\r\n    end\r\n  end\r\nend\r\n```\r\nand produces the following lines in schema.rb:\r\n```\r\n  create_table \"bmc_cards\", force: :cascade do |t|\r\n    t.string \"name\", default: \"\"\r\n    t.string \"description\", default: \"\"\r\n    t.string \"purposes\", default: [], array: true\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n  end\r\n```\r\n\r\nBut when trying to re-create the database tables from the generated schema by running rails db:schema:load, I get the error:\r\n\r\n> -- create_table(\"bmc_cards\", {:force=>:cascade})\r\n> rails aborted!\r\n> TypeError: can't quote Array\r\n\r\nAll previous tables to this one are correctly created. \r\n\r\nIf I do `rake db:drop db:create db:migrate`, it does create all tables without errors.  \r\n\r\nI'm using:\r\nRails version: 5.1.2\r\nRuby version: 2.3.3\r\n", "labels": ["needs work"], "number": 32123, "updated_at": "2018-03-01 22:48:29", "user": 4969956, "closed_at": "None", "id": 300457158, "title": "rails db:schema:load fails for PostgreSQL arrays while rails db:migrate does work ", "url": "https://api.github.com/repos/rails/rails/issues/32123", "created_at": "2018-02-27 01:13:36", "comments": [{"reactions": {"+1": [1174604]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369045688", "text": "I have tried, but can't reproduce this issue. Can you provide a reproducible script with this template https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb?", "created_at": "2018-02-27 22:13:44", "user": 5657035, "id": 369045688}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Previously it was removed by #32106 since it was backported to `5-2-stable`.\r\n\r\n[ci skip]", "labels": [], "number": 32122, "updated_at": "2018-02-26 22:51:22", "user": 6443532, "closed_at": "2018-02-26 22:50:04", "id": 300423855, "title": "Remove extra changelog added by #31944", "url": "https://api.github.com/repos/rails/rails/issues/32122", "created_at": "2018-02-26 22:39:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368676628", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-26 22:39:22", "user": 7468109, "id": 368676628}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [1034, 6443532, 350807]}, "text": "\r\n\r\n### Summary\r\n\r\nAfter a [discussion with @matthewd](https://github.com/rails/rails/issues/32117). It was mentioned that rake tasks need\r\nto be moved to rails command.\r\n\r\nFirst PR for this subject from me. 😀\r\n\r\n### Other Information\r\n\r\n- Is it an issue to don't deal anymore with rake params? https://github.com/benoittgt/rails/commit/1ab3ddcfc7efc51ccb206e73c91a67b69a82a6b9#diff-e1c35224a4df7f73d90a9a90e45aab2bL255 and do we need to add a changelog for this?\r\n- Do we want to add more constraints to args?\r\n", "labels": [], "number": 32121, "updated_at": "2018-02-27 19:50:24", "user": 8417720, "closed_at": "2018-02-27 19:18:01", "id": 300413898, "title": "Move rake routes task to rails command", "url": "https://api.github.com/repos/rails/rails/issues/32121", "created_at": "2018-02-26 22:04:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368894956", "text": "Thanks a lot for the review. I will try to move other rake tasks.", "created_at": "2018-02-27 14:26:29", "user": 8417720, "id": 368894956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368896438", "text": "@benoittgt when you do move other tasks can you leave the test tasks alone? I'm working on a project with them now and I don't want to have to deal with a ton of conflicts / duplicate work 😄 ", "created_at": "2018-02-27 14:31:09", "user": 1080678, "id": 368896438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368955660", "text": "@eileencodes oups. So to be sure you want me to doesn't remove tests in [`railties/test/application/rake_test.rb`](https://github.com/rails/rails/pull/32121/commits/a2748eda586b11db59e2d0f59ab37910156d6c32#diff-e1c35224a4df7f73d90a9a90e45aab2b)?\r\n\r\nMaybe I can revert the rake tests removed for this PR?", "created_at": "2018-02-27 17:19:05", "user": 8417720, "id": 368955660}, {"reactions": {"+1": [8417720]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368956235", "text": "@benoittgt doh I'm sorry it was early and I had not had enough coffee.\r\n\r\nI meant the database rake tasks in Active Record. You're all good on Railties. 😄 ", "created_at": "2018-02-27 17:20:55", "user": 1080678, "id": 368956235}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Expected behavior\r\nA way to test if users are subscribed on a channel so that we can decide to do expensive calculations that have clients listening for\r\n\r\n### Actual behavior\r\nUnable to check if users are subscribed\r\n\r\n### System configuration\r\n**Rails version**: 5.1.2\r\n\r\n**Ruby version**: 2.3.0\r\n\r\nCurrently I have in my app I have cron tasks running that gather information and broadcasts it to the subscribers on the channels. On these taks I do view rendering before I broadcast the message to the client. But due to being a background cron task there is no user requesting the updated information and there might be no user listening to this broadcast and rendering is useless.\r\nTherefore I'm looking (but could not find it in the documentation) if there is a way to check if there are clients listening on this channel/stream? It could save a lot of cpu. Now I send a very small message out and check the return value not 0 (means consumers are listening) but it should be more simple.\r\nI could write code to track in the database if there are clients connected/disconnected on certain streams but the app already knows this (I assume?).\r\n\r\nI opened an issue because I did not got any reply on the gitter chat about this.", "labels": [], "number": 32120, "updated_at": "2018-02-27 04:11:07", "user": 12995632, "closed_at": "2018-02-27 04:11:07", "id": 300382104, "title": "Actioncable test if clients are connected on a channel", "url": "https://api.github.com/repos/rails/rails/issues/32120", "created_at": "2018-02-26 20:21:09", "comments": [{"reactions": {"+1": [12995632]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368741332", "text": "Please use the [mailing list](https://groups.google.com/forum/#!forum/rubyonrails-talk) or StackOverflow for questions/help, where a wider community will be able to help you. We reserve the issues tracker for issues only. Thanks.\r\n", "created_at": "2018-02-27 04:11:07", "user": 987638, "id": 368741332}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When a class has a belongs_to or has_one relationship with dependent: :destroy\r\noption enabled, objects of this class should not be deleted if it's dependents\r\ncannot be deleted.\r\n\r\nExample:\r\n\r\n    class Parent\r\n      has_one :child, dependent: :destroy\r\n    end\r\n\r\n    class Child\r\n      belongs_to :parent, inverse_of: :child\r\n      before_destroy { throw :abort }\r\n    end\r\n\r\n    c = Child.create\r\n    p = Parent.create(child: c)\r\n\r\n    p.destroy\r\n\r\n    p.destroyed? # expected: false; actual: true;\r\n\r\n[Fixes #32022](https://github.com/rails/rails/issues/32022)\r\n", "labels": [], "number": 32119, "updated_at": "2018-03-06 13:01:26", "user": 1015894, "closed_at": "2018-03-06 12:54:46", "id": 300370763, "title": "Fix dependence on has_one/belongs_to relationships", "url": "https://api.github.com/repos/rails/rails/issues/32119", "created_at": "2018-02-26 19:45:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368625733", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @pixeltrix (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-26 19:45:22", "user": 7468109, "id": 368625733}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370467817", "text": "@pixeltrix Is there anything else I should do for this pull request?", "created_at": "2018-03-05 16:02:29", "user": 1015894, "id": 370467817}, {"reactions": {"+1": [1015894]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370772305", "text": "@fegorodscy I merged this manually in 13e35a5 to remove the CHANGELOG entry as I've backported it to 5-2-stable in b0fc04a", "created_at": "2018-03-06 12:54:39", "user": 6321, "id": 370772305}, {"reactions": {"+1": [1015894]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370773923", "text": "@fegorodscy and thanks! 👍 ", "created_at": "2018-03-06 13:01:25", "user": 6321, "id": 370773923}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There is some incompatibility generating the following error when you use the gems JSON and ActiveSupport:\r\nIOError (not opened for reading).\r\nThis change fixes it.\r\n\r\n### Summary\r\n\r\nThis fix was implemented for master branch (commit 813f8e333d) and I'm adding it to the 5-0 stable.", "labels": [], "number": 32118, "updated_at": "2018-02-26 19:39:52", "user": 283004, "closed_at": "2018-02-26 19:39:51", "id": 300340618, "title": "Update to fix the same error as issue #26132", "url": "https://api.github.com/repos/rails/rails/issues/32118", "created_at": "2018-02-26 18:10:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368594421", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-26 18:10:06", "user": 7468109, "id": 368594421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368594426", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-0-stable. Please double check that you specified the right target!", "created_at": "2018-02-26 18:10:07", "user": 7468109, "id": 368594426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368623378", "text": "813f8e3 touched `IO`, but your PR touches `Enumerable`. These don't seem like the same fix to me? 😊", "created_at": "2018-02-26 19:38:03", "user": 350807, "id": 368623378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368623909", "text": "Also per our maintenance policy Rails 5.0 only receives security fixes from now on: http://guides.rubyonrails.org/maintenance_policy.html\r\n\r\nThanks for aiming to contribute though! Even if your code doesn't get in, it's still a good thing to have tried 😊", "created_at": "2018-02-26 19:39:51", "user": 350807, "id": 368623909}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nHello,\r\n\r\nI am writing a proposition for `rails routes` command options. In the rake task I added an option to optparser https://github.com/benoittgt/rails/blob/0508d7c28b13e271db7d277494a87e1aeddfb04d/railties/lib/rails/tasks/routes.rake#L27-L29\r\n\r\nMy issue is the option is always invalid. `#<OptionParser::InvalidOption: expanded>`\r\n\r\nI wrote a small script to try to reproduce the issue but it's work perfectly:\r\n\r\n```ruby\r\nrequire 'optparse'\r\n\r\noptions = {}\r\nexpanded = false\r\nOptionParser.new do |opts|\r\n  opts.banner = \"Usage: example.rb [options]\"\r\n\r\n  opts.on(\"-v\", \"--[no-]verbose\", \"Run verbosely\") do |v|\r\n    options[:verbose] = v\r\n  end\r\n\r\n  opts.on(\"--expanded\") do |v|\r\n    expanded = true\r\n  end\r\nend.parse!\r\n\r\np options\r\np ARGV\r\np expanded\r\n\r\n=begin\r\n\r\n{}\r\n[\"--expanded\"]\r\ntrue\r\n\r\n=end\r\n\r\n```\r\nIt doesn't seems to be on optparser, it happens here https://github.com/benoittgt/rails/blob/rake-routes-compact-mode/railties/lib/rails/commands/rake/rake_command.rb#L21 on `.init`. It seems like if command arguments where validated before the routes rake task was loaded.\r\n\r\nOr do I made something wrong?\r\n\r\nTo reproduce the issue:\r\n- clone https://github.com/benoittgt/rails/tree/rake-routes-compact-mode\r\n- `clear; bundle exec ruby -w -Itest test/application/rake_test.rb -n test_rails_routes_with_expanded_option`\r\n\r\n### Expected behavior\r\n\r\nBe able to add `--option`\r\n\r\n### Actual behavior\r\n\r\n`OptionParser::InvalidOption:`\r\n\r\n### System configuration\r\n**Rails version**: master\r\n**Ruby version**: 2.4\r\n\r\nThanks 👏🏻\r\n", "labels": [], "number": 32117, "updated_at": "2018-02-26 15:05:55", "user": 8417720, "closed_at": "2018-02-26 15:02:27", "id": 300265816, "title": "OptionParser::InvalidOption:  with any `--` rake commands arguments", "url": "https://api.github.com/repos/rails/rails/issues/32117", "created_at": "2018-02-26 14:47:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368529660", "text": "If you think it's a bug. I can work on it.", "created_at": "2018-02-26 14:57:14", "user": 8417720, "id": 368529660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368531493", "text": "`rake` isn't intended for generic subcommands, and thus cannot support \"normal\" option arguments.\r\n\r\nThis is a large part of our motivation for moving our rake commands over to our new Rails::Commands infrastructure.\r\n\r\nI don't really have a good suggestion for you in the meantime, sorry... apart from overriding the task wholesale, and then defining a new `routes:verbose` maybe?\r\n\r\nAlternatively, help converting it to a Rails::Command would be very welcome :smile:", "created_at": "2018-02-26 15:02:27", "user": 1034, "id": 368531493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368532631", "text": "Thanks @matthewd for the quick answer. Will finish this PR first and we will see for `Rails::Command` 😄 ", "created_at": "2018-02-26 15:05:55", "user": 8417720, "id": 368532631}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nhttps://gist.github.com/jfragoulis/41a5529d26a8d9921b7aa54b6e17e001\r\n\r\n### Expected behavior\r\n\r\nTest does not blow up.\r\n\r\n### Actual behavior\r\n\r\nTest fails with validation error on `Post`.\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.3.3\r\n\r\nThis *regression* is traced to https://github.com/rails/rails/pull/31575.\r\nThe **expected** behavior is how it works in latest stable.\r\n\r\nEDIT:\r\n\r\nThe problem lies with the fact that when saving a parent object, its associations go through validation as well before the parent is actually saved. This is fine I guess generally I suppose, but in my use-case, I have a presence validation check on the fk (see gist) which means that since the #31575 sets the fk to `nil`, the validation fails.\r\n", "labels": ["With reproduction steps", "activerecord", "regression"], "number": 32116, "updated_at": "2018-03-02 07:42:57", "user": 1748736, "closed_at": "2018-03-01 12:15:36", "id": 300264409, "title": "Foreign key replacement in inverse association regression", "url": "https://api.github.com/repos/rails/rails/issues/32116", "created_at": "2018-02-26 14:43:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369304466", "text": "Confirmed that this is a regression from 5.1.5", "created_at": "2018-02-28 16:52:48", "user": 6321, "id": 369304466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369535136", "text": "This is what #31575 want to do, it is the expected behavior to me.\r\n\r\n`validates :author_id, presence: true` in `Post` means that `author_id` must be present before `Post` is saved.\r\n\r\nPrevious behavior which pass the validation by the remained `author_id` makes me feel a bug.\r\n\r\nFollowing example will fail as expected from the beginning.\r\n\r\n```ruby\r\nclass Author < ActiveRecord::Base\r\n  has_many :posts\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  belongs_to :author\r\n  validates :author_id, presence: true\r\nend\r\n\r\nauthor = Author.new                                                                                                                 \r\npost = Post.new                                                                                                                     \r\nauthor.posts << post                                                                                                                \r\nauthor.save!                                                                                                                        \r\n```\r\n\r\nProbably `belongs_to :author, required: true` should be used in that case.", "created_at": "2018-03-01 09:40:11", "user": 12642, "id": 369535136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369573716", "text": "@kamipo yes, you're right - this fails in 5.1:\r\n\r\n``` ruby\r\nclass Author < ActiveRecord::Base\r\n  has_many :posts\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  belongs_to :author\r\n  validates :author_id, presence: true\r\nend\r\n\r\nAuthor.create!(posts: [Post.new])\r\n```\r\n\r\nClosing this as a won't fix", "created_at": "2018-03-01 12:15:36", "user": 6321, "id": 369573716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369576904", "text": "@jfragoulis FYI moving the validation to the `belongs_to :author` as `required: true` and doing this:\r\n\r\n``` ruby\r\n author = Author.create!(posts: [Post.new])\r\n post = author.posts.first\r\n\r\n Author.create! posts: [post]\r\n```\r\n\r\nworks in both Rails 5.1 and 5.2.", "created_at": "2018-03-01 12:30:05", "user": 6321, "id": 369576904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369846220", "text": "Thank you both for your comments.\r\n\r\n@kamipo You are right, it does feel like a bug and it is a correct fix.\r\n\r\nI verified that removing the validation check and adding `required: true` works.\r\n\r\nMy comment is the following: The documentation is either not clear or wrong and I should probably open a PR for this.\r\n\r\nIn the documentation under `belongs_to` and `:required` in both 5.1 and 5.2 we read:\r\n\r\n> When set to true, the association will also have its presence validated. This will validate the association itself, not the id. You can use :inverse_of to avoid an extra query during validation. NOTE: **required is set to true by default and is deprecated**. If you don't want to have association presence validated, use optional: true.\r\n\r\nThat means that removing the validation should suffice, since it is required by default. That is not the case though. The default value is set through `ActiveRecord::Base.belongs_to_required_by_default` which [is set to `false`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/core.rb#L126). My console says it is `nil` which is really weird:\r\n\r\n```\r\n[1] pry(main)> ActiveRecord::Base.belongs_to_required_by_default\r\n=> nil\r\n```\r\nThe [configure page](http://guides.rubyonrails.org/configuring.html) simply describes it, and the [upgrading page](http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#active-record-belongs-to-required-by-default-option) says:\r\n\r\n> This default will be automatically configured in new applications\r\n\r\nThis is vague. My guess for what it means is that the new app generator will put it in your initializers or some config file. Which does not make it `true` by default as mentioned in the docs. True by default means, true in the framework's defaults.\r\n\r\nWhat do you think?\r\n", "created_at": "2018-03-02 07:40:46", "user": 1748736, "id": 369846220}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "…ion in routing guide. [ci skip]\r\n\r\n### Summary\r\n\r\nOn defining route `get 'photos(/:id)', to: :display` an exception is raised - `ArgumentError: Missing :controller key on routes definition, please check your routes.`.\r\n\r\nSo changing`get 'photos(/:id)', to: :display` to `get 'photos(/:id)', to: 'photos#display'`.\r\n", "labels": [], "number": 32115, "updated_at": "2018-02-27 03:02:47", "user": 10562207, "closed_at": "2018-02-27 03:02:47", "id": 300253803, "title": "Correct `to` option's value of the route in the Bound Parameters sect…", "url": "https://api.github.com/repos/rails/rails/issues/32115", "created_at": "2018-02-26 14:14:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "* I have added documentation to the method ActionView::Helpers::FormBuilder#emitted_hidden_id?", "labels": [], "number": 32114, "updated_at": "2018-02-27 12:03:51", "user": 3015835, "closed_at": "2018-02-27 12:03:51", "id": 300237851, "title": "better docs for ActionView::Helpers::FormBuilder#emitted_hidden_id?", "url": "https://api.github.com/repos/rails/rails/issues/32114", "created_at": "2018-02-26 13:26:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368503190", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-26 13:26:27", "user": 7468109, "id": 368503190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368694471", "text": "Looks good. Can you squash your commits?", "created_at": "2018-02-26 23:55:54", "user": 47848, "id": 368694471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368719600", "text": "Done!", "created_at": "2018-02-27 01:58:18", "user": 3015835, "id": 368719600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368726179", "text": "You have 8 unrelated commits in the branch yet.", "created_at": "2018-02-27 02:34:26", "user": 47848, "id": 368726179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368852117", "text": "I'll be closing this PR and making another. I can not squash my merge from upstream commits.", "created_at": "2018-02-27 12:03:48", "user": 3015835, "id": 368852117}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See issue https://github.com/rails/rails/pull/32108#issuecomment-368393774\r\n\r\nFollow up https://github.com/rails/rails/pull/32108\r\n\r\n`cd activerecord && bin/test test/cases/finder_test.rb`\r\nTravis CI: https://travis-ci.org/rails/rails/jobs/346165646#L2135", "labels": [], "number": 32113, "updated_at": "2018-02-26 20:12:54", "user": 6443532, "closed_at": "2018-02-26 18:34:40", "id": 300190340, "title": "Fix `NameError: uninitialized constant Dog::DogLover`", "url": "https://api.github.com/repos/rails/rails/issues/32113", "created_at": "2018-02-26 10:49:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368461709", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-26 10:49:19", "user": 7468109, "id": 368461709}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368602785", "text": "Thanks. I also ran isolated tests in local, but it was not the only failure.\r\nI decided to restore the error suppression for now.", "created_at": "2018-02-26 18:36:33", "user": 12642, "id": 368602785}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nAS tries to be smart and allows the comparation of time to a String that is a serialized time.\r\nIt results in a really weird behavior in `#==`:\r\n\r\n``` ruby\r\na = ActiveSupport::TimeWithZone.new(Time.utc(1999, 12, 31, 23, 59, 59), ActiveSupport::TimeZone[\"UTC\"])\r\nb = a.to_s\r\n\r\na == b # => true\r\nb == a # => false\r\n\r\nh1 = {created_at: a}\r\nh2 = {created_at: b}\r\n\r\nh1 == h2 # => true\r\nh2 == h1 # => false\r\n```\r\n\r\nIt can be considered related to #31503 due to the following scenario:\r\n\r\n``` ruby\r\nu  = User.first\r\nserialized = JSON.parse(u.to_json)\r\nexpected = u.as_json\r\nserialized == expected # => false\r\nexpected == serialized # => true\r\n```\r\n\r\n### Expected Behavior\r\n\r\n\r\n`AS::TimeWithZone#==` to be commutative operation.\r\n\r\n### Actual Behavior\r\n\r\n`AS::TimeWithZone#==` is not commutative operation.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 5.4.1 but I think a lot of them are affected\r\n\r\n**Ruby version**: 2.4.2\r\n", "labels": [], "number": 32112, "updated_at": "2018-02-27 03:09:33", "user": 122436, "closed_at": "2018-02-27 03:09:33", "id": 300174698, "title": "Amazing bug in AS::TimeWithZone ", "url": "https://api.github.com/repos/rails/rails/issues/32112", "created_at": "2018-02-26 10:01:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368471731", "text": "This is expected behaviour to me; it's a natural consequence of calling `==` on two objects of different types: the LHS determines the equality rules.", "created_at": "2018-02-26 11:31:25", "user": 1034, "id": 368471731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368732214", "text": "Yup. This is how a lot of objects in Ruby works. Example:\r\n\r\n```\r\n>> require 'ipaddr'\r\n=> true\r\n>>\r\n>> ipaddr1 = IPAddr.new \"3ffe:505:2::1\"\r\n=> #<IPAddr: IPv6:3ffe:0505:0002:0000:0000:0000:0000:0001/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff>\r\n>> ipaddr1 == \"3ffe:505:2::1\"\r\n=> true\r\n>> \"3ffe:505:2::1\" == ipaddr1\r\n=> false\r\n```", "created_at": "2018-02-27 03:09:33", "user": 47848, "id": 368732214}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Summary\r\n\r\nFrom project to project written with Rails I spectate the similar snag, when **column definition rows in the schema are shuffled** from time to time (only for `schema.rb` in `:ruby` mode). It's annoying to see the changes in the git index, despite I haven't touched any of them. It's really hard for me to define the steps to reproduce for this bug, but let me put here my thoughts and proposed changes. First consider the next example for better clarity:\r\n```\r\n     t.string \"county\"\r\n-    t.string \"country_code\"\r\n     t.datetime \"created_at\", null: false\r\n     t.datetime \"updated_at\", null: false\r\n+    t.string \"country_code\"\r\n     t.string \"urn\"\r\n```\r\nHere \"country_code\" column definition changed position even though there was no any related migration code.\r\n\r\nFirst of all I thought this behaviour is connected somehow with database engine version or operating system version divergence between developers in our team. So we setup the same version of Rails 4.2 (later checked on 5.2) and MySQL 5.7.20 on macOS Sierra 10.12.6 at MacBook Pro. But there was no luck – I still spectate schema shuffling.\r\n\r\nThen I decided to dig into the schema dumper code to understand how ActiveRecord retrieves columns information and dumps it to the `schema.rb` file. Inside I noticed expected [alphabetical table names sorting](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/schema_dumper.rb#L90):\r\n```\r\ndef tables(stream)\r\n  sorted_tables = @connection.tables.sort\r\n\r\n   sorted_tables.each do |table_name|\r\n    table(table_name, stream) unless ignored?(table_name)\r\n  end\r\n  ...\r\n```\r\nThen I found [table columns info retrievement](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/schema_dumper.rb#L105):\r\n```\r\ndef table(table, stream)\r\n  columns = @connection.columns(table)\r\n...\r\n```\r\nSo there is no specific ordering. \"Hmmn\" 🤔 , – was sparkled in my – \"Maybe it's desirable to show columns definition in the same manera as database holds them and don't sort in alphabetical order. But how different databases return schema info and do they comply the result order?\". I moved to connection adapters:\r\n• **MySQL** ([`ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract_mysql_adapter.rb#L801))\r\n```\r\ndef column_definitions(table_name) # :nodoc:\r\n  execute_and_free(\"SHOW FULL FIELDS FROM #{quote_table_name(table_name)}\", \"SCHEMA\") do |result|\r\n    each_hash(result)\r\n  end\r\nend\r\n```\r\nI haven't found any proof in the [`SHOW COLUMNS`](https://dev.mysql.com/doc/refman/5.7/en/show-columns.html) (synonym to `SHOW FIELDS`) MySQL official documentation that ordering is present. But I found the next interesting discussions – [\"SHOW DATABASES does not order infomation_schema correct\"](https://bugs.mysql.com/bug.php?id=14473) and [\"Return order of MySQL SHOW COLUMNS\r\n\"](https://stackoverflow.com/questions/2544751/return-order-of-mysql-show-columns) – where people argue how MySQL handles position of columns info. Unfortunately, I'm not able to trace MySQL server source code to find the pure evidence. Let's assume **all this means `column_definitions`doesn't gauranty the order.** Do we have alternatives? Yes!\r\n- [`DESCRIBE`](https://dev.mysql.com/doc/refman/5.7/en/describe.html) (the clone of `SHOW COLUMNS`, that leads me to the idea MySQL follows the same \"There is more than one way to do it\" principle as Ruby/Perl 😄  ) \r\n- [`INFORMATION_SCHEMA.COLUMNS`](https://dev.mysql.com/doc/refman/5.7/en/columns-table.html)\r\n\r\nMySQL has **ORDINAL POSITION** of the columns and provides it in `INFORMATION_SCHEMA.COLUMNS`. But there is one note, that makes me confused:\r\n> `ORDINAL_POSITION` is necessary because you might want to say `ORDER BY ORDINAL_POSITION`. Unlike `SHOW`, `SELECT` does not have automatic ordering.\r\n\r\nSeems like thoeretically `SHOW` should keep the order according to what I see in the note, but practically I see the opposite. Unlike Postgres, [MySQL allows to insert column before or after specific one](https://dev.mysql.com/doc/refman/5.7/en/alter-table.html#alter-table-add-drop-column).\r\n I'd be very pleasant to hear any thoughts and get any references regarding  the columns positioning (logical, physical, virtual, etc.) here.\r\n\r\n• **Postgres** ([`ActiveRecord::ConnectionAdapters::PostgreSQLAdapter`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L748))\r\n```\r\ndef column_definitions(table_name)\r\n  query(<<-end_sql, \"SCHEMA\")\r\n              SELECT a.attname, format_type(a.atttypid, a.atttypmod),\r\n                     pg_get_expr(d.adbin, d.adrelid), a.attnotnull, a.atttypid, a.atttypmod,\r\n                     c.collname, col_description(a.attrelid, a.attnum) AS comment\r\n                FROM pg_attribute a\r\n                LEFT JOIN pg_attrdef d ON a.attrelid = d.adrelid AND a.attnum = d.adnum\r\n                LEFT JOIN pg_type t ON a.atttypid = t.oid\r\n                LEFT JOIN pg_collation c ON a.attcollation = c.oid AND a.attcollation <> t.typcollation\r\n               WHERE a.attrelid = #{quote(quote_table_name(table_name))}::regclass\r\n                 AND a.attnum > 0 AND NOT a.attisdropped\r\n               ORDER BY a.attnum\r\n  end_sql\r\nend\r\n```\r\nSchema info retrievement is pretty straightforward from `pg_attribute` system table. We have explicit `ORDER BY a.attnum` ([a.attnum](https://www.postgresql.org/docs/9.4/static/catalog-pg-attribute.html) – the number of the column), which should guarantee the order of attributes I guess. Unlike MySQL, Postgres doesn't allow to insert column before or after specific one.\r\n\r\n• **SQlite3** ([`ActiveRecord::ConnectionAdapters::SQLite3Adapter`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L395))\r\n```\r\ndef table_structure(table_name)\r\n  structure = exec_query(\"PRAGMA table_info(#{quote_table_name(table_name)})\", \"SCHEMA\")\r\n  ...\r\n```\r\n[`PRAGMA table_info`](https://www.sqlite.org/pragma.html#pragma_table_info) lacks the required knowledge, that's why [ActiveRecord uses](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/sqlite3_adapter.rb#L516) [`sqlite_master`](http://www.sqlite.org/faq.html#q7) readonly table to get and parse initial table creation SQL. As far as we parse the SQL statements all the time, it could be considered as columns order guarantee. Here is an excerpt from the [`ALTER TABLE`](http://sqlite.org/lang_altertable.html) official documentation regarding column position specification:\r\n> The ADD COLUMN syntax is used to add a new column to an existing table. The new column is always appended to the end of the list of existing columns.\r\n\r\n### Alternatives\r\n\r\nAny sorting, especially if it's not supported in the database, could be performed at schema dumper level. For example, dumper sorts table names in the alphabetical order right now. The same approach could be applied to the columns. Moreover we may enforce ordering at both levels – **database query** and **schema dumper table info processing**.\r\n\r\n### Considertations\r\n\r\nHow do different databases consider the columns order? AFAIK, there are 2 points:\r\n- Columns order from fixed length to variable length provides performance boost, because it's easier to find the offset of the fixed field. That's why primary key is better to place in the beginning of the table. \r\n- Columns order doesn't much matter from user point of view, because columns order at the logical level could be different from how database spread columns at the physical level. That means you don't have to be bothered with column position tuning, database engine better knows how to store the data.\r\n\r\n### Proposed changes\r\n\r\n- Force MySQL adapter to retrieve columns definition in the same order.\r\n\r\nDoes all this make sense? Please shout out if I have to cover provided changes with specs somewhere else. Also I'm happy for any critics 🙇 ", "labels": [], "number": 32111, "updated_at": "2018-02-26 16:29:30", "user": 892721, "closed_at": "2018-02-26 16:25:57", "id": 300170964, "title": "[ActiveRecord] Schema Dumper Columns Order", "url": "https://api.github.com/repos/rails/rails/issues/32111", "created_at": "2018-02-26 09:50:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368470704", "text": "> Unlike SHOW, SELECT does not have automatic ordering\r\n\r\nI agree that strongly supports the assumption that SHOW is ordered.\r\n\r\nDoes your newly added test fail without the adapter change? :confused:\r\n\r\nI don't recall ever hearing a claim that the schema dump doesn't match the database column order.", "created_at": "2018-02-26 11:26:54", "user": 1034, "id": 368470704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368498746", "text": "No, it's not failing 😞  As I wrote earlier it's hard to reproduce in a bare rails app.\r\n\r\nSuppose MySQL `SHOW` returns always ordered result. What is the base for that order? `ORDINAL_POSITION`?\r\n\r\nTBH, I'm lost what could issue something like this:\r\n![image](https://user-images.githubusercontent.com/892721/36671081-1cff48e8-1b03-11e8-957d-311a00be9eca.png)\r\nIs it possible MySQL changes the column ordinal position internally, without specific alter command?\r\nSeems like previously ordinal position for `reason_reopened`  was 27 and now it's 29.\r\n```\r\nmysql> SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = \"rails_app_development\" AND TABLE_NAME = \"case_files\" AND COLUMN_NAME = \"reason_reopened\" \\G;\r\n*************************** 1. row ***************************\r\n           TABLE_CATALOG: def\r\n            TABLE_SCHEMA: rails_app_development\r\n              TABLE_NAME: case_files\r\n             COLUMN_NAME: reason_reopened\r\n        ORDINAL_POSITION: 29\r\n          COLUMN_DEFAULT: NULL\r\n             IS_NULLABLE: YES\r\n               DATA_TYPE: text\r\nCHARACTER_MAXIMUM_LENGTH: 65535\r\n  CHARACTER_OCTET_LENGTH: 65535\r\n       NUMERIC_PRECISION: NULL\r\n           NUMERIC_SCALE: NULL\r\n      DATETIME_PRECISION: NULL\r\n      CHARACTER_SET_NAME: utf8\r\n          COLLATION_NAME: utf8_general_ci\r\n             COLUMN_TYPE: text\r\n              COLUMN_KEY:\r\n                   EXTRA:\r\n              PRIVILEGES: select,insert,update,references\r\n          COLUMN_COMMENT:\r\n   GENERATION_EXPRESSION:\r\n```", "created_at": "2018-02-26 13:08:15", "user": 892721, "id": 368498746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368502736", "text": "IME that happens when the `schema.rb` was last dumped by a different computer, using a different copy of the database, which has the columns in a different order. And I really don't think there's anything we can do about that.", "created_at": "2018-02-26 13:24:36", "user": 1034, "id": 368502736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368558429", "text": "🤔  Hmmn, maybe the problem arises from the input side, for example `mysqldump` invocation with some specific options leads to different column definition order... and then people run different SQL instructions for import. OK, I'll try to find more clues among my team. Will reopen in case if find anything helpful.\r\n\r\n@matthewd, thank you for your time 🙇 \r\n\r\nP.S. Does the test for tables alphabetical order is still acceptable?", "created_at": "2018-02-26 16:21:40", "user": 892721, "id": 368558429}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nuse activestorage.\r\n\r\n\r\n### Expected behavior\r\ncan set base url of it.\r\n\r\n### Actual behavior\r\nhardcode.\r\n\r\nhttps://github.com/rails/rails/blob/master/activestorage/config/routes.rb\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.2.0.rc1\r\n\r\n**Ruby version**:\r\n2.5.0\r\n\r\n\r\n\r\nthis can make it easy to detect framework and do some hack.", "labels": [], "number": 32110, "updated_at": "2018-03-03 03:18:49", "user": 1189879, "closed_at": "2018-02-26 11:48:31", "id": 300169692, "title": "hardcode url in activestorage", "url": "https://api.github.com/repos/rails/rails/issues/32110", "created_at": "2018-02-26 09:47:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368475645", "text": "> this can make it easy to detect framework and do some hack.\r\n\r\nThere are probably a dozen ways to tell whether an app is using Rails. If you come across specific vulnerabilities, please do [report them](http://rubyonrails.org/security/).", "created_at": "2018-02-26 11:48:31", "user": 94129, "id": 368475645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368475877", "text": "I should add that you’re free to create and use your own routes for Active Storage’s controllers.", "created_at": "2018-02-26 11:49:34", "user": 94129, "id": 368475877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370112664", "text": "we all love rails, but we do not need add it to route. maybe remove it and leave `activestorage` as namespace for protecting name conflict.", "created_at": "2018-03-03 03:18:49", "user": 1189879, "id": 370112664}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nGiven that we have two co-dependent models that have an inverse autosave association:\r\n\r\n```ruby\r\nclass Ship < ActiveRecord::Base\r\n  has_many :components, autosave: true\r\nend\r\n\r\nclass Component < ActiveRecord::Base\r\n  belongs_to :ship, autosave: true\r\nend\r\n```\r\n\r\nWe save either one of these expecting that the inverse association is validated and saved.\r\n\r\n### Expected behavior\r\n\r\nWe expect the validations and any related callbacks are run once. We definitely expect that that once the `Ship` is validated, `Component` doesn't trigger any validations on `Ship` again.\r\n\r\n### Actual behavior\r\n\r\nWhen saving `Ship`, `Component` validates and saves `Ship` again, resulting in duplicated error messages, and possibly other unexpected behavior. The same applies vice-versa.\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.4\r\n\r\n**Ruby version**:\r\n2.4.2\r\n\r\n\r\n### Executable example\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  gem \"rails\", github: \"rails/rails\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :ships, force: true do |t|\r\n  end\r\n\r\n  create_table :components, force: true do |t|\r\n    t.integer :ship_id\r\n  end\r\nend\r\n\r\nclass Ship < ActiveRecord::Base\r\n  has_many :components, autosave: true\r\n\r\n  attr_reader :times_saved, :times_validated\r\n\r\n  validate do\r\n    @times_validated ||= 0\r\n    @times_validated += 1\r\n  end\r\n\r\n  after_save do\r\n    @times_saved ||= 0\r\n    @times_saved += 1\r\n  end\r\nend\r\n\r\nclass Component < ActiveRecord::Base\r\n  belongs_to :ship, autosave: true\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_autosave_callbacks\r\n    ship = Ship.new\r\n    ship.components.build\r\n    ship.save\r\n\r\n    assert_equal 1, ship.times_saved\r\n    assert_equal 1, ship.times_validated\r\n  end\r\nend\r\n```\r\n\r\n### Additional details\r\n\r\nI've already submitted a [pull request](https://github.com/rails/rails/pull/31381) that fixes this behavior. It includes a more extensive test case. If there are better approaches to solve this, I can use one to submit a new PR.", "labels": [], "number": 32109, "updated_at": "2018-03-11 18:21:16", "user": 3352737, "closed_at": "None", "id": 300142373, "title": "Validations called twice on the same record with `autosave: true`", "url": "https://api.github.com/repos/rails/rails/issues/32109", "created_at": "2018-02-26 08:10:03", "comments": [], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "Since #31895, build of 2.5 and AR combination failed.\r\nhttps://travis-ci.org/rails/rails/jobs/346064349#L1638\r\n\r\nIt seems to be the reason that model is not loading properly, so I added require. But I'm not sure if this is correct\r\n", "labels": [], "number": 32108, "updated_at": "2018-02-26 07:20:11", "user": 987638, "closed_at": "2018-02-26 07:20:08", "id": 300085368, "title": "Fix \"NameError: uninitialized constant Categorization::Category\"", "url": "https://api.github.com/repos/rails/rails/issues/32108", "created_at": "2018-02-26 01:50:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368371095", "text": "cc @kamipo", "created_at": "2018-02-26 02:16:25", "user": 987638, "id": 368371095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368393774", "text": "This is a similar issue with #30365. It will happen with all ruby versions.\r\n\r\nThe counter_cache requires instanciating the association in the save, then `reflection.check_validity!` is called.\r\n\r\nhttps://github.com/rails/rails/blob/065c1fae12ddfa2b3744d0e872f6b6c10912f2eb/activerecord/test/models/categorization.rb#L5\r\n\r\nhttps://github.com/rails/rails/blob/065c1fae12ddfa2b3744d0e872f6b6c10912f2eb/activerecord/lib/active_record/associations/association.rb#L27\r\n\r\nBefore #31895, `#check_validity!` is not failed even if constantize the klass is failed.\r\nIf foreign key is not presented in the save, it does not try to constantize the klass again yet.\r\nBut if foreign key is presented in the save, update counters will fail due to try to constantize the klass and it is failed.\r\n\r\nWe need to require associated class if counter_cache is used.", "created_at": "2018-02-26 05:26:16", "user": 12642, "id": 368393774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368411196", "text": "Thank you for the detailed explanation. I understand. I merge this.\r\n", "created_at": "2018-02-26 07:20:00", "user": 987638, "id": 368411196}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It wasn't fixed in Rails 5.2.0.rc1 since it was backported after this release.", "labels": [], "number": 32107, "updated_at": "2018-02-25 22:27:12", "user": 6443532, "closed_at": "2018-02-25 22:25:50", "id": 300067424, "title": "Move up activestorage' changelog added by 5292cdf59a2052c453d6016c69b90b790cbf2547", "url": "https://api.github.com/repos/rails/rails/issues/32107", "created_at": "2018-02-25 22:22:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368350639", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-25 22:22:18", "user": 7468109, "id": 368350639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368350641", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-02-25 22:22:18", "user": 7468109, "id": 368350641}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {"heart": [199]}, "text": "Remove railties' changelog added by 7340596de45dc4c0f62a287b6acc4e71d8ee6c60\r\nsince it was backported to `5-2-stable` via ac99916fcf7bf27bb1519d4f7387c6b4c5f0463d\r\n\r\nRemove activesupport's changelog added by 1077ae96b34b5a1dfbf10ee0c40b1ceb1eb6b30b\r\nsince it was backported to `5-2-stable` via a2b97e4ffef971607a1be8fc7909f099b6840f36\r\n\r\nRemove activesupport's changelog added by 0d41a76d0c693000005d79456dee7f9299f5e8d4\r\nsince it was backported to `5-2-stable` via cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db\r\n\r\nRemove activestorage's changelog added by d57c52a385eb57c6ce8c6d124ab5e186f931d142\r\nsince it was backported to `5-2-stable` via 5292cdf59a2052c453d6016c69b90b790cbf2547\r\n\r\nFollow up c113bdc9d0c2cffd535ca97aff85c4bdc46b11f6\r\n/cc @guilleiguaran", "labels": [], "number": 32106, "updated_at": "2018-02-25 22:29:23", "user": 6443532, "closed_at": "2018-02-25 22:29:16", "id": 300066941, "title": "Remove changelogs for Rails 6.0 since they were backported to `5-2-stable`", "url": "https://api.github.com/repos/rails/rails/issues/32106", "created_at": "2018-02-25 22:15:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368350128", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-25 22:15:08", "user": 7468109, "id": 368350128}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`<input name=\"utf8\" type=\"hidden\" value=\"✓\" />` is obsolete. It was required for IE5-8, which are not supported by **rails-ujs** and **Turbolinks** anyway.\r\nIt's time to set `enforce_utf8` to `false` by default and to remove it completely in master: https://github.com/rails/rails/pull/32104\r\nhttps://github.com/rails/rails/issues/30852", "labels": [], "number": 32105, "updated_at": "2018-02-26 16:13:01", "user": 498185, "closed_at": "2018-02-26 00:56:24", "id": 300055820, "title": "set enforce_utf8 to false by default", "url": "https://api.github.com/repos/rails/rails/issues/32105", "created_at": "2018-02-25 20:00:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368362296", "text": "This is too late for inclusion in 5.2, and I think @rafaelfranca was pretty clear in #30852 that we’re not doing this until 6.0.", "created_at": "2018-02-26 00:56:24", "user": 94129, "id": 368362296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368481576", "text": "@georgeclaghorn 6.0 is many months ahead and `enforce_utf8` will be removed completely. Why not prepare for it and set it to `false` in the next 5.2.minor?\r\n@rafaelfranca said \"may be\" about removing this code, which is definitely not \"pretty clear\" about setting default to `false`.", "created_at": "2018-02-26 12:14:30", "user": 498185, "id": 368481576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368555368", "text": "@kshnurov you submitted this pull requests against 5-2-stable, which you can tell by the numbers ain't 6.0. So this will stay closed.\r\n\r\n> Why not prepare for it and set it to false in the next 5.2.minor?\r\n\r\nBecause that's not how we do things. Cf. https://github.com/rails/rails/pull/32104#issuecomment-368529189\r\n\r\n😉", "created_at": "2018-02-26 16:13:01", "user": 350807, "id": 368555368}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [4083992, 892721]}, "text": "`<input name=\"utf8\" type=\"hidden\" value=\"✓\" />` is obsolete. It was required for IE5-8, which are not supported by **rails-ujs** and **Turbolinks** anyway. https://github.com/rails/rails/issues/30852", "labels": [], "number": 32104, "updated_at": "2018-02-26 19:11:45", "user": 498185, "closed_at": "2018-02-26 18:10:10", "id": 300055335, "title": "remove utf8 enforce", "url": "https://api.github.com/repos/rails/rails/issues/32104", "created_at": "2018-02-25 19:53:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368446227", "text": "I think just defaulting to false for Rails 6.0 will be enough - that will give us the benefit of saving the traffic but still allow support for older versions of IE. Just because UJS and Turbolinks don't support IE8 doesn't mean that we should break older browsers intentionally especially as those JS libraries as seen as progressive enhancement.", "created_at": "2018-02-26 09:51:36", "user": 6321, "id": 368446227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368453004", "text": "Who keeps support for <=IE8 will not use Rails 6. Why not remove lagacy code in 2018", "created_at": "2018-02-26 10:15:52", "user": 4083992, "id": 368453004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368454425", "text": "@Fudoshiki people who need to run a supported version of Rails but also need to support older browser versions. This will be quite common in local government and other public sector organisations.", "created_at": "2018-02-26 10:21:19", "user": 6321, "id": 368454425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368455135", "text": "https://www.microsoft.com/en-us/windowsforbusiness/end-of-ie-support\r\nThey can use exists rails versions, but start dev new apps for unsupported browsers is bad idea", "created_at": "2018-02-26 10:23:51", "user": 4083992, "id": 368455135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368457192", "text": "@Fudoshiki because every cash-strapped resident in a local authority's area will read that and think I must go out and buy a new PC to run Windows 10 and Edge and not feed their children. Or maybe they'll just use the hand-me down PC that's only capable of running Windows Vista but still need to find out how to register the kids for free school meals. Don't assume that everyone is running/can run the latest technology.", "created_at": "2018-02-26 10:31:17", "user": 6321, "id": 368457192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368458321", "text": "Vista have IE9, this actual for IE8 and earlier, they also can install Chome/Firefox etc", "created_at": "2018-02-26 10:35:40", "user": 4083992, "id": 368458321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368459129", "text": "> Vista have IE9, this actual for IE8 and earlier\r\n\r\nVista shipped with IE7, but I accept you can probably upgrade to IE9 on Vista - still plenty of XP PCs out there though which are limited to IE8.", "created_at": "2018-02-26 10:38:49", "user": 6321, "id": 368459129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368459483", "text": "But not limited use Chrome/Firefox with updates", "created_at": "2018-02-26 10:40:25", "user": 4083992, "id": 368459483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368460155", "text": "Developers who will create new apps on Rails 6 for <=IE8 will < 0.01%, but we still keep ton of legacy code\r\n\r\nGuys who target on this version, will use rails 5.2\r\n\r\nRails from release to release it becomes bigger, but it does not get rid of the old code\r\n", "created_at": "2018-02-26 10:43:08", "user": 4083992, "id": 368460155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368461628", "text": "They also can just add `<input name=\"utf8\" type=\"hidden\" value=\"✓\" />` in their forms", "created_at": "2018-02-26 10:48:58", "user": 4083992, "id": 368461628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368462240", "text": "-123 useless LOC is great", "created_at": "2018-02-26 10:51:19", "user": 4083992, "id": 368462240}, {"reactions": {"laugh": [4083992]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368464549", "text": "> -123 useless LOC is great\r\n\r\nWell, it's actually 113 less - most of which is tests and comments. It's about 7 lines of actual code.", "created_at": "2018-02-26 11:00:53", "user": 6321, "id": 368464549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368479622", "text": "@pixeltrix those who want Rails 5+ to work with IE8- will have to add **tons** of workarounds. `<input name=\"utf8\" type=\"hidden\" value=\"✓\" />` will be just one of them.", "created_at": "2018-02-26 12:05:55", "user": 498185, "id": 368479622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368487312", "text": "@kshnurov in what way is basic HTML and HTTP broken with IE8? Whilst adding things like Action Cable, etc. can take advantage of newer browsers we shouldn't be breaking standard web technologies.", "created_at": "2018-02-26 12:39:50", "user": 6321, "id": 368487312}, {"reactions": {"+1": [4083992]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368506568", "text": "@pixeltrix IE8 doesn't support HTML5, CSS3 and HTTP 1.1, which are considered basic today. You can't even setup secure https connection with IE8, you have to make you server vulnerable to work with IE8. Do you really want someone to have that kind of security with Rails 6?", "created_at": "2018-02-26 13:39:23", "user": 498185, "id": 368506568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368527258", "text": "@kshnurov I'm responsible for keeping https://petition.parliament.uk running and it still supports signing from IE8 (possibly even IE7, though I don't have a version to try). The Qualsys SSL report gives it an A+ so it's still possible to support it and we still get traffic from old IE versions.", "created_at": "2018-02-26 14:50:11", "user": 6321, "id": 368527258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368529189", "text": "The appropriate next move is to add a config option that defaults (in new applications) to the new modern setting. We will no doubt eventually remove the option entirely, but for now, it's best sidelined an opt-in compatibility measure. As both @pixeltrix and @rafaelfranca have noted, it's really not enough code to justify abruptly ripping it out.\r\n\r\nWe'll consider incompatible changes in a major release where they are unavoidable, or unavoidably compelling. This is neither of those. Outside of that exception, a Rails application that works on one version should continue to work on the next version.\r\n\r\nFurther reiteration of an \"old things are bad\" argument is not going to change the above.", "created_at": "2018-02-26 14:55:53", "user": 1034, "id": 368529189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368535646", "text": "@pixeltrix https://petition.parliament.uk supports TLS 1.0, which is insecure, deprecated and won't pass PCI compliance test. Don't look at `A+`, look at the actual vulnerabilities your servers have.\r\nhttps://www.comodo.com/e-commerce/ssl-certificates/tls-1-deprecation.php\r\n\r\n@matthewd there's a PR for setting default to `false`: https://github.com/rails/rails/pull/32105", "created_at": "2018-02-26 15:15:01", "user": 498185, "id": 368535646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368536901", "text": "> add **a config option** that defaults (in new applications) to [false]\r\n\r\n☝🏻 -- in master, for 6.0. ", "created_at": "2018-02-26 15:18:42", "user": 1034, "id": 368536901}, {"reactions": {"+1": [4083992]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368549851", "text": "@matthewd config option would require additional 100+ LOC. Sorry, I don't want to create more mess because of some obsolete feature required by 0.01% of deprecated and unsecure browsers.\r\nRails 5+ out of the box is incompatible with them anyway. They should manually set `enforce_utf8` to `true` or add input in each form while upgrading to Rails 6 if they **really need it** (which I highly doubt), not the other way around.\r\n\r\nMaybe someone else wants to create that mess, I'll just override `utf8_enforcer_tag` in my apps.", "created_at": "2018-02-26 15:56:44", "user": 498185, "id": 368549851}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368551327", "text": "```ruby\r\ndef form_with(model: nil, scope: nil, url: nil, format: nil, **options)\r\n  options[:skip_enforcing_utf8] = true\r\n  super\r\nend\r\n```", "created_at": "2018-02-26 16:00:57", "user": 4083992, "id": 368551327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368553572", "text": "@Fudoshiki this looks better and safer for me:\r\n```\r\ndef utf8_enforcer_tag\r\nend\r\n```", "created_at": "2018-02-26 16:07:45", "user": 498185, "id": 368553572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368594444", "text": "That sounds good to me. Closing since we don't want to remove the support to IE8 in the form tags and since you don't want to introduce the new config.", "created_at": "2018-02-26 18:10:10", "user": 47848, "id": 368594444}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368614372", "text": "@rafaelfranca there's no IE8 support in Rails 5+ out of the box, but ok, good luck with supporting something that doesn't work anyway.", "created_at": "2018-02-26 19:11:45", "user": 498185, "id": 368614372}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use range restriction for i18n between ~> 0.7 and < 2.", "labels": [], "number": 32103, "updated_at": "2018-02-25 19:23:16", "user": 1847714, "closed_at": "2018-02-25 19:23:16", "id": 300052717, "title": "Use I18n ~> 0.7 but < 2.", "url": "https://api.github.com/repos/rails/rails/issues/32103", "created_at": "2018-02-25 19:18:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368336303", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-25 19:18:21", "user": 7468109, "id": 368336303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368336305", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 4-2-stable. Please double check that you specified the right target!", "created_at": "2018-02-25 19:18:21", "user": 7468109, "id": 368336305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368336642", "text": "Thank you for the pull request. However, 4.2 no longer receives bug fixes or new features. It only receives security fixes. As such, we do not accept pull requests for 4.2.", "created_at": "2018-02-25 19:23:16", "user": 12642, "id": 368336642}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [199]}, "text": "Since #32034, Rails 6 requires Ruby 2.4.1+.", "labels": [], "number": 32102, "updated_at": "2018-02-25 20:07:56", "user": 12642, "closed_at": "2018-02-25 20:07:52", "id": 300051679, "title": "Remove native `Array#sum` and `Enumerable#sum` detection", "url": "https://api.github.com/repos/rails/rails/issues/32102", "created_at": "2018-02-25 19:04:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems in this example we are not using safe assignment inside a condition.\r\nI propose to change it, even if it's just a comment. \r\n\r\nHere the references regarding why is a good idea to wrap it inside parenthesis:\r\n[Ruby style guide](https://github.com/bbatsov/ruby-style-guide#safe-assignment-in-condition)\r\n[Explanation](https://github.com/bbatsov/ruby-style-guide/issues/53)", "labels": [], "number": 32101, "updated_at": "2018-02-25 17:43:06", "user": 18511772, "closed_at": "2018-02-25 17:41:49", "id": 300043349, "title": "Refactored safe assignment in condition", "url": "https://api.github.com/repos/rails/rails/issues/32101", "created_at": "2018-02-25 17:18:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368326647", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @sgrif (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-25 17:18:13", "user": 7468109, "id": 368326647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368328081", "text": "Thanks for your contribution, but we don't accept cosmetic changes as noted in the [Contributing to Ruby on Rails guide](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#write-your-code). Moreover, we don't use https://github.com/bbatsov/ruby-style-guide, instead, we use rules mentioned in https://github.com/rails/rails/blob/master/.rubocop.yml", "created_at": "2018-02-25 17:36:57", "user": 6443532, "id": 368328081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368328464", "text": "Bogdan is correct. Thanks for bringing this to our consideration though!", "created_at": "2018-02-25 17:41:49", "user": 350807, "id": 368328464}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368328561", "text": "Hey @bogdanvlviv thanks for your suggestion. It makes sense what you say and my fault that I didn't check the contributing rails guide.\r\n\r\nHope to come up soon with better PR :) ", "created_at": "2018-02-25 17:43:06", "user": 18511772, "id": 368328561}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Followup to https://github.com/rails/rails/pull/30118.\r\n\r\n`to_prepare` callbacks are run during initialization; using one here meant that `ActiveStorage::Blob` would be loaded when the app boots, which would in turn load `ActiveRecord::Base`.\r\n\r\nBy using a lazy load hook to configure `ActiveStorage::Blob` instead, we can avoid loading `ActiveRecord::Base` unnecessarily.\r\n\r\nr? @georgeclaghorn", "labels": ["activestorage"], "number": 32100, "updated_at": "2018-02-27 04:00:04", "user": 432189, "closed_at": "2018-02-25 01:48:44", "id": 299986789, "title": "Use lazy load hook to configure ActiveStorage::Blob", "url": "https://api.github.com/repos/rails/rails/issues/32100", "created_at": "2018-02-25 00:57:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368276073", "text": "Backported to `5-2-stable` in 82930af.", "created_at": "2018-02-25 01:50:05", "user": 94129, "id": 368276073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368739847", "text": "Thank you for this test.", "created_at": "2018-02-27 04:00:04", "user": 47848, "id": 368739847}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [4083992]}, "text": "In many cases, credentials is only necessary for production.\r\nHowever, if use a service like payment, want to change the api key in staging and production.\r\nBy changing the behavior by config, I think that credentials can be used smoothly even in such a case.\r\n\r\nAlso, if an application using the secret encrypted with 5.1, this will make it possible to upgrade smoothly.\r\n", "labels": [], "number": 32099, "updated_at": "2018-02-26 18:23:04", "user": 987638, "closed_at": "None", "id": 299922942, "title": "Allow env-specific credentials by config", "url": "https://api.github.com/repos/rails/rails/issues/32099", "created_at": "2018-02-24 08:12:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368221194", "text": "Actually just hit the same problem which this PR solves so 👍  for this.Maybe it would be good idea to document this behaviour 😄 ", "created_at": "2018-02-24 11:16:34", "user": 7427365, "id": 368221194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368227902", "text": "@dhh you still favored `Rails.application.credentials.dig(Rails.env.to_sym, :payments)`, right? Has no need for dev credentials arrived in Basecamp, since we added credentials?\r\n\r\n------------------------\r\n\r\nI do think there's something here though. As many people have questions around environments and credentials.\r\n\r\nBut there are problems here:\r\n\r\n1. If we allow one encrypted credentials file but support environments within it — we're asking people to routinely distribute their production master key across dev machines. That could be insecure, if the key ends up many places and people forget to remove it. But of course, sharp knives and all that :)\r\n\r\n2. If we allow splitting the credentials file into multiple and allow the dev/test one to be unencrypted, we're basically back to secrets.yml and secrets.yml.enc territory — and the confusion that brings.\r\n\r\n2 seems out of the question, as that is essentially receding back to secrets.yml/secrets.yml.enc.", "created_at": "2018-02-24 13:16:54", "user": 350807, "id": 368227902}, {"reactions": {"+1": [350807]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368598535", "text": "@kaspth I could see cleaning up that convention a bit like `Rails.application.credentials.within_env[:payments]`. That would basically just put the `Rails.env.to_sym` into the accessor. And that's it.", "created_at": "2018-02-26 18:23:03", "user": 2741, "id": 368598535}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n* Create a new Rails project. (Sample project [available here](https://github.com/harshalbhakta/test-rails-counter-cache-update))\r\n\r\n````bash\r\n$ rails new test-rails-counter-cache-update\r\n$ bundle install\r\n$ rails g model Author name:string articles_count:integer\r\n$ rails g model Article name:string author:references\r\n$ rails db:migrate\r\n$ rails db:seed\r\n````\r\n* Modify the model files to support counter cache.\r\n\r\n````ruby\r\n# article.rb\r\nclass Article < ApplicationRecord\r\n  belongs_to :author, counter_cache: :articles_count\r\nend\r\n\r\n# author.rb\r\nclass Author < ApplicationRecord\r\n  has_many :articles\r\nend\r\n````\r\n\r\n### Expected behavior\r\n\r\ncounter_cache column should get updated in all below scenarios. Currently it works only in the first scenario. \r\n\r\nUpdating the column using Author.reset_counters(3, :articles) works as expected. However, I think it should also work correctly using author.update! articles_count: 20\r\n\r\n### Actual behavior\r\n\r\n#### Works (articles_count column does get updated)\r\n\r\n````ruby\r\n$ rails c\r\nirb(main):001:0> author = Author.first\r\nirb(main):001:0> author.update! articles_count: 20\r\n    (0.2ms)  begin transaction\r\n  SQL (0.6ms)  UPDATE \"authors\" SET \"articles_count\" = ?, \"updated_at\" = ? WHERE \"authors\".\"id\" = ?  [[\"articles_count\", 20], [\"updated_at\", \"2018-02-24 07:12:34.124976\"], [\"id\", 3]]\r\n    (2.5ms)  commit transaction\r\nirb(main):001:0> exit\r\n````\r\n#### Does not work (articles_count column does not get updated)\r\n\r\n````ruby\r\n$ rails c\r\nirb(main):001:0> article = Article.first\r\nirb(main):001:0> author = Author.first\r\nirb(main):001:0> author.update! articles_count: 10\r\n    (0.2ms)  begin transaction\r\n  SQL (25.0ms)  UPDATE \"authors\" SET \"updated_at\" = ? WHERE \"authors\".\"id\" = ?  [[\"updated_at\", \"2018-02-24 07:11:40.597808\"], [\"id\", 3]]\r\n    (1.6ms)  commit transaction\r\nirb(main):001:0> exit\r\n````\r\n\r\n#### Does not work (articles_count column does not get updated)\r\n\r\n````ruby\r\n$ rails c\r\nirb(main):001:0> author = Author.first\r\nirb(main):001:0> author.update! articles_count: author.articles.count\r\n    (9.3ms)  SELECT COUNT(*) FROM \"articles\" WHERE \"articles\".\"author_id\" = ?  [[\"author_id\", 3]]\r\n    (0.2ms)  begin transaction\r\n  SQL (26.4ms)  UPDATE \"authors\" SET \"updated_at\" = ? WHERE \"authors\".\"id\" = ?  [[\"updated_at\", \"2018-02-24 07:15:03.272752\"], [\"id\", 3]]\r\n    (1.5ms)  commit transaction\r\nirb(main):001:0> exit\r\n````\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.1.5\r\n\r\n**Ruby version**: ruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin17]\r\n", "labels": [], "number": 32098, "updated_at": "2018-02-25 01:37:26", "user": 907178, "closed_at": "2018-02-25 01:37:26", "id": 299921741, "title": "Can't update a counter_cache column using update!", "url": "https://api.github.com/repos/rails/rails/issues/32098", "created_at": "2018-02-24 07:52:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368275516", "text": "Counter cache columns are added to the containing model's list of read-only attributes. So can't update using `update!`. \r\nRef: http://guides.rubyonrails.org/association_basics.html#options-for-belongs-to-counter-cache \r\n\r\nAdded to read-only depends on whether model is loaded or not. \r\nTherefore, the first example works in development, but it does not work on production where eager load is enabled. \r\n\r\nIf you want to update counter cache to any value, please use `update_counters`. \r\nhttp://api.rubyonrails.org/classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters \r\n\r\n", "created_at": "2018-02-25 01:37:26", "user": 987638, "id": 368275516}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"hooray": [1080678, 3124, 1930], "+1": [4083992, 621238, 2741, 65950, 3124, 199]}, "text": "We've been bumping Arel in lockstep with AR for some time now: every Rails release requires a new Arel release, and Arel releases occur specifically for Rails releases.\r\n\r\nWe're not gaining any maintenance freedom by keeping it as a separate gem, while we are paying the costs of coordination.\r\n\r\nScrolling through https://rubygems.org/gems/arel/reverse_dependencies shows few notable downstreams that aren't also depending on Active Record, so this change doesn't force new dependencies onto the ecosystem at large. We'll release a new version of the `arel` gem that depends on the new version of `activerecord`, so people will still be able to smoothly upgrade: this just means they'll need AR installed (but not loaded/required).\r\n\r\nWe have no plans to rename the top level `Arel` constant.\r\n\r\n---\r\n\r\nHousekeeping:\r\n- [x] Copyright/license: https://github.com/rails/rails/commit/17ca17072dcdff11b3702a6b45f2fb0c8f8fe9a4#diff-d80e0e1d20abc3da5a7e0d873241b585R3\r\n- [x] Tests integrated\r\n- [x] Rubocop reformat\r\n- [x] `:nodoc: all`\r\n\r\nAnything else?", "labels": [], "number": 32097, "updated_at": "2018-02-27 01:49:00", "user": 1034, "closed_at": "None", "id": 299921419, "title": "Merge Arel", "url": "https://api.github.com/repos/rails/rails/issues/32097", "created_at": "2018-02-24 07:46:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368209839", "text": "1,749 commits doesn't sound quite right", "created_at": "2018-02-24 08:07:04", "user": 13696143, "id": 368209839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368209984", "text": "@composerinteralia https://github.com/rails/arel has 1746, plus my three.", "created_at": "2018-02-24 08:10:12", "user": 1034, "id": 368209984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368210098", "text": "Got it. Thanks", "created_at": "2018-02-24 08:12:41", "user": 13696143, "id": 368210098}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368225764", "text": "Glad to see you haven't made the same mistake I did when integrating Journey and have changed the test file names from `test_*.rb` to `*_test.rb`. 👍 ", "created_at": "2018-02-24 12:39:14", "user": 6321, "id": 368225764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368713103", "text": "\r\nThis commit will help me a lot because when some `git bisect` was necessary it was very difficult to bisect `rails` and `gem` repositories at the same time.\r\n\r\nAs a 3rd party database adapter maintainer, I'd like to know if if there is a plan to separate visitors for non bundled database adapters, such as `oracle`, `oracle12`, `ibm_db`, `mssql` and `informix` .\r\n\r\nActually, I'd like Arel will have these visitors at least for Rails 6, Just wanted to prepare if there is a plan.\r\n\r\nThank you. ", "created_at": "2018-02-27 01:24:41", "user": 73684, "id": 368713103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368716842", "text": "@yahonda in the short term, we'll keep the visitors in place, despite the inconsistency.\r\n\r\nLooking forward, I'd like to rebalance some responsibilities between the Arel and AR parts, and at that time I expect we'll try to move them closer together. But no concrete plans for now.", "created_at": "2018-02-27 01:44:00", "user": 1034, "id": 368716842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368717813", "text": "@matthewd Thanks for the answer and I am happy to hear there will be no change in the short term.\r\nOf course, I'm looking forward to getting any updates for future plans.\r\n\r\n", "created_at": "2018-02-27 01:49:00", "user": 73684, "id": 368717813}], "assignees": [1034, 1034], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Ico is considered an image by ActiveStorage but is not able to generate a variant of it. It is considered an image because the content type starts with 'image', but for some reason imagemagick is not able to actually create variants of it. So it is not considered a variable content_type. \r\n\r\n### Steps to reproduce\r\nUpload an .ico file, like this one:\r\n![image](https://user-images.githubusercontent.com/21774/36621131-44c955e2-18d5-11e8-8923-85cda5fc4add.png)\r\n\r\nAnd try to use a variant of it, with:\r\n```<%= image_tag(url_for(attachment.variant(resize: '150x150'))) %>```\r\n\r\n### Expected behavior\r\nIt should show the resized variant \r\n\r\n### Actual behavior\r\nraises an `ActiveStorage::InvariableError`\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.2\r\n\r\n**Ruby version**:\r\n2.4.2", "labels": ["activestorage"], "number": 32096, "updated_at": "2018-02-24 20:31:01", "user": 21774, "closed_at": "2018-02-24 20:31:01", "id": 299879962, "title": "ActiveStorage image/vnd.microsoft.icon content type", "url": "https://api.github.com/repos/rails/rails/issues/32096", "created_at": "2018-02-23 23:15:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Add `//= require rails-ujs`\r\n\r\nCloses #32094", "labels": [], "number": 32095, "updated_at": "2018-02-23 22:19:40", "user": 6443532, "closed_at": "2018-02-23 21:59:27", "id": 299850221, "title": "Improve generated file `app/assets/javascripts/application.js` of plugin", "url": "https://api.github.com/repos/rails/rails/issues/32095", "created_at": "2018-02-23 21:06:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368138603", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-23 21:06:37", "user": 7468109, "id": 368138603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368154953", "text": "Backported to `5-2-stable` in ddaadcba7277259e7db3d329d538f2c4680747c8", "created_at": "2018-02-23 22:19:40", "user": 6443532, "id": 368154953}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Not sure if this was intentional, however, I found that **rails-ujs** is not automatically required in the dummy app for Rails Engines.\r\n\r\n### Steps to reproduce\r\n\r\n- Create a new engine.\r\n- Scaffold a resource in the *test/dummy* app\r\n- Visit the **#new** page for the resource.\r\n- Create a resource.\r\n- Visit the **#index** page to view the newly created resource.\r\n- Click on the `Destroy` link\r\n\r\n### Expected behavior\r\nResource *should* be deleted via **#delete** method\r\n\r\n### Actual behavior\r\nUser is directed to the resource's **#show** page\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.4.1\r\n", "labels": [], "number": 32094, "updated_at": "2018-02-23 21:59:27", "user": 8285837, "closed_at": "2018-02-23 21:59:27", "id": 299822538, "title": "Rails 5.2 engine dummy app doesn't auto require 'rails-ujs'", "url": "https://api.github.com/repos/rails/rails/issues/32094", "created_at": "2018-02-23 19:24:09", "comments": [{"reactions": {"+1": [8285837]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368139376", "text": "Hi @shroy. Thanks for the report. I just opened PR(#32095) that should fix that.", "created_at": "2018-02-23 21:10:08", "user": 6443532, "id": 368139376}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Method documentation update to reflect changes after #28800.\r\n\r\n\r\n", "labels": [], "number": 32093, "updated_at": "2018-02-23 22:04:12", "user": 1748736, "closed_at": "2018-02-23 22:01:56", "id": 299678749, "title": "Correct method documentation", "url": "https://api.github.com/repos/rails/rails/issues/32093", "created_at": "2018-02-23 11:17:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367982137", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kaspth (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-23 11:17:12", "user": 7468109, "id": 367982137}, {"reactions": {"+1": [1748736]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368000022", "text": "Can you change the base branch to `master`? After merging, I will backport to `5-2-stable`.", "created_at": "2018-02-23 12:47:00", "user": 987638, "id": 368000022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368010822", "text": "Done.", "created_at": "2018-02-23 13:37:10", "user": 1748736, "id": 368010822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368151204", "text": "Thanks!", "created_at": "2018-02-23 22:02:00", "user": 987638, "id": 368151204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368151686", "text": "Backported: https://github.com/rails/rails/commit/191851382ba71147a9f2a40a25b6c0a7399b503f", "created_at": "2018-02-23 22:04:12", "user": 987638, "id": 368151686}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis pull request updates the RuboCop version used at codeclimate.\r\nSince https://github.com/rails/rails/pull/32091 expects RuboCop 0.52.1\r\n", "labels": [], "number": 32092, "updated_at": "2018-02-23 00:40:11", "user": 73684, "closed_at": "2018-02-23 00:37:21", "id": 299558971, "title": "Use `rubocop-0-52` channel", "url": "https://api.github.com/repos/rails/rails/issues/32092", "created_at": "2018-02-23 00:31:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367870232", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-23 00:31:56", "user": 7468109, "id": 367870232}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Includes [Switch Layout/SpaceBeforeBlockBraces's empty braces default](https://github.com/bbatsov/rubocop/pull/5263) from [0.52.1](https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md#0521-2017-12-27).\r\n\r\nBefore:\r\n\r\n```\r\nrails]$ rubocop\r\n\r\nInspecting 2390 files\r\nr\n\r\nOffenses:\r\n\r\nrailties/test/rack_logger_test.rb:52:32: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        logger = TestLogger.new {}\r\n                               ^\r\nrailties/lib/rails/test_unit/runner.rb:15:72: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          opts.on(\"--warnings\", \"-w\", \"Run with Ruby warnings enabled\") {}\r\n                                                                       ^\r\nrailties/lib/rails/test_unit/runner.rb:16:81: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          opts.on(\"-e\", \"--environment ENV\", \"Run tests in the ENV environment\") {}\r\n                                                                                ^\r\nactivemodel/test/cases/callbacks_test.rb:115:29: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      run_callbacks(:create) {}\r\n                            ^\r\nactionview/test/template/form_helper_test.rb:3443:32: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for([@post, @comment]) {}\r\n                               ^\r\nactionview/test/template/form_helper_test.rb:3450:32: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for([@post, @comment]) {}\r\n                               ^\r\nactionview/test/template/form_helper_test.rb:3458:40: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for([:admin, @post, @comment]) {}\r\n                                       ^\r\nactionview/test/template/form_helper_test.rb:3465:40: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for([:admin, @post, @comment]) {}\r\n                                       ^\r\nactionview/test/template/form_helper_test.rb:3479:20: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for(@post) {}\r\n                   ^\r\nactionview/test/template/form_helper_test.rb:3485:63: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for(@post, data: { behavior: \"stuff\" }, remote: true) {}\r\n                                                              ^\r\nactionview/test/template/form_helper_test.rb:3504:44: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_for(@post, builder: builder_class) {}\r\n                                           ^\r\nactionview/test/template/form_helper/form_with_test.rb:2158:27: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: post) {}\r\n                          ^\r\nactionview/test/template/form_helper/form_with_test.rb:2166:40: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: [@post, @comment]) {}\r\n                                       ^\r\nactionview/test/template/form_helper/form_with_test.rb:2173:40: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: [@post, @comment]) {}\r\n                                       ^\r\nactionview/test/template/form_helper/form_with_test.rb:2181:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: [:admin, @post, @comment]) {}\r\n                                               ^\r\nactionview/test/template/form_helper/form_with_test.rb:2188:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: [:admin, @post, @comment]) {}\r\n                                               ^\r\nactionview/test/template/form_helper/form_with_test.rb:2202:28: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: @post) {}\r\n                           ^\r\nactionview/test/template/form_helper/form_with_test.rb:2208:57: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: @post, data: { behavior: \"stuff\" }) {}\r\n                                                        ^\r\nactionview/test/template/form_helper/form_with_test.rb:2227:52: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    form_with(model: @post, builder: builder_class) {}\r\n                                                   ^\r\nactionview/test/template/capture_helper_test.rb:222:44: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert_equal \"\", @av.with_output_buffer {}\r\n                                           ^\r\nactionview/test/template/form_options_helper_test.rb:648:33: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      concat(f.select(:category) {})\r\n                                ^\r\nactionview/test/template/test_case_test.rb:239:46: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          routes.draw { get \"bar\", to: lambda {} }\r\n                                             ^\r\nactionview/test/activerecord/debug_helper_test.rb:16:13: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    obj = -> {}\r\n            ^\r\nactionpack/test/controller/metal_test.rb:23:25: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      \"rack.input\" => -> {}\r\n                        ^\r\nactionpack/test/controller/mime/respond_to_test.rb:81:16: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      type.json {}\r\n               ^\r\nactionpack/test/controller/live_stream_test.rb:307:15: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      res.each {}\r\n              ^\r\nactionpack/test/controller/routing_test.rb:312:19: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      mount lambda {} => \"/foo\"\r\n                  ^\r\nactionpack/test/controller/base_test.rb:141:25: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      \"rack.input\" => -> {}\r\n                        ^\r\nactionpack/test/dispatch/middleware_stack_test.rb:45:20: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    proc = Proc.new {}\r\n                   ^\r\nactionpack/test/dispatch/request_test.rb:27:53: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      ip_app = ActionDispatch::RemoteIp.new(Proc.new {}, ip_spoofing_check, @trusted_proxies)\r\n                                                    ^\r\nactionpack/test/dispatch/routing/inspector_test.rb:390:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        output = draw(\"Rails::DummyController\") {}\r\n                                               ^\r\nactionpack/test/fixtures/alternate_helpers/foo_helper.rb:4:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n  redefine_method(:baz) {}\r\n                       ^\r\nactionmailer/test/assert_select_email_test.rb:28:26: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      assert_select_email {}\r\n                         ^\r\nactivesupport/test/executor_test.rb:26:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:88:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:108:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:132:20: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      executor.wrap {}\r\n                   ^\r\nactivesupport/test/executor_test.rb:157:20: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      executor.wrap {}\r\n                   ^\r\nactivesupport/test/executor_test.rb:190:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:212:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:213:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/executor_test.rb:214:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    executor.wrap {}\r\n                 ^\r\nactivesupport/test/dependencies_test.rb:819:75: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert_equal [], (ActiveSupport::Dependencies.new_constants_in(Object) {})\r\n                                                                          ^\r\nactivesupport/test/dependencies_test.rb:895:67: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      ActiveSupport::Dependencies.new_constants_in(\"Illegal-Name\") {}\r\n                                                                  ^\r\nactivesupport/test/evented_file_update_checker_test.rb:41:36: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    checker = new_checker(tmpfiles) {}\r\n                                   ^\r\nactivesupport/test/core_ext/range_ext_test.rb:111:33: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      ((twz - 1.hour)..twz).each {}\r\n                                ^\r\nactivesupport/test/core_ext/range_ext_test.rb:118:36: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      ((twz - 1.hour)..twz).step(1) {}\r\n                                   ^\r\nactivesupport/test/core_ext/range_ext_test.rb:134:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert(((datetime - 1.hour)..datetime).each {})\r\n                                               ^\r\nactivesupport/test/core_ext/range_ext_test.rb:139:51: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert(((datetime - 1.hour)..datetime).step(1) {})\r\n                                                  ^\r\nactivesupport/test/core_ext/time_with_zone_test.rb:1094:47: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      Time.use_zone(\"No such timezone exists\") {}\r\n                                              ^\r\nactivesupport/test/core_ext/module/concerning_test.rb:8:41: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    klass = Class.new { concerning(:Foo) {} }\r\n                                        ^\r\nactivesupport/test/benchmarkable_test.rb:62:51: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    benchmark(\"included_debug_run\", level: :debug) {}\r\n                                                  ^\r\nactivesupport/test/benchmarkable_test.rb:68:50: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    benchmark(\"skipped_debug_run\", level: :debug) {}\r\n                                                 ^\r\nactivesupport/test/notifications_test.rb:57:54: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        ActiveSupport::Notifications.subscribe(\"foo\") {}\r\n                                                     ^\r\nactivesupport/test/share_lock_test.rb:14:38: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @lock.sharing   { @lock.sharing   {} }\r\n                                     ^^^\r\nactivesupport/test/share_lock_test.rb:15:40: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @lock.exclusive { @lock.exclusive {} }\r\n                                       ^\r\nactivesupport/test/share_lock_test.rb:22:58: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      assert_threads_not_stuck(Thread.new { @lock.sharing {} })\r\n                                                         ^\r\nactivesupport/test/share_lock_test.rb:29:54: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      exclusive_thread = Thread.new { @lock.exclusive {} }\r\n                                                     ^\r\nactivesupport/test/share_lock_test.rb:36:50: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      sharing_thread = Thread.new { @lock.sharing {} }\r\n                                                 ^\r\nactivesupport/test/share_lock_test.rb:45:26: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive {}\r\n                         ^\r\nactivesupport/test/share_lock_test.rb:56:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        @lock.exclusive {}\r\n                       ^\r\nactivesupport/test/share_lock_test.rb:69:26: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive {}\r\n                         ^\r\nactivesupport/test/share_lock_test.rb:84:76: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n              @lock.exclusive(purpose: :load, compatible: [:load, :unload]) {}\r\n                                                                           ^\r\nactivesupport/test/share_lock_test.rb:98:26: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive {}\r\n                         ^\r\nactivesupport/test/share_lock_test.rb:108:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        @lock.exclusive {}\r\n                       ^\r\nactivesupport/test/share_lock_test.rb:124:78: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n                @lock.exclusive(purpose: :red, compatible: [:green, :purple]) {}\r\n                                                                             ^\r\nactivesupport/test/share_lock_test.rb:130:70: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n                @lock.exclusive(purpose: :blue, compatible: [:green]) {}\r\n                                                                     ^\r\nactivesupport/test/share_lock_test.rb:141:28: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            @lock.exclusive {}\r\n                           ^\r\nactivesupport/test/share_lock_test.rb:150:61: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            @lock.exclusive(purpose: :green, compatible: []) {}\r\n                                                            ^\r\nactivesupport/test/share_lock_test.rb:234:22: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        @lock.sharing {}\r\n                     ^\r\nactivesupport/test/share_lock_test.rb:255:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.sharing {}\r\n                       ^\r\nactivesupport/test/share_lock_test.rb:262:26: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive {}\r\n                         ^\r\nactivesupport/test/share_lock_test.rb:283:81: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive(purpose: :x, compatible: [:x], after_compatible: [:x]) {}\r\n                                                                                ^\r\nactivesupport/test/share_lock_test.rb:300:39: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive(purpose: :x) {}\r\n                                      ^\r\nactivesupport/test/share_lock_test.rb:326:39: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive(purpose: :x) {}\r\n                                      ^\r\nactivesupport/test/share_lock_test.rb:355:39: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          @lock.exclusive(purpose: :x) {}\r\n                                      ^\r\nactivesupport/test/share_lock_test.rb:389:37: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        @lock.exclusive(purpose: :x) {}\r\n                                    ^\r\nactivesupport/test/share_lock_test.rb:421:35: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @lock.exclusive(purpose: :z) {}\r\n                                  ^\r\nactivesupport/test/share_lock_test.rb:430:53: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            @lock.yield_shares(compatible: [:x, :y]) {}\r\n                                                    ^\r\nactivesupport/test/share_lock_test.rb:442:35: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @lock.exclusive(purpose: :y) {}\r\n                                  ^\r\nactivesupport/test/share_lock_test.rb:447:35: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @lock.exclusive(purpose: :x) {}\r\n                                  ^\r\nactivesupport/test/callbacks_test.rb:956:37: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        klass = build_class(->(x, y) {})\r\n                                    ^\r\nactivesupport/test/callbacks_test.rb:1035:38: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        object = build_class(->(a, b) {}).new\r\n                                     ^\r\nactivesupport/test/reloader_test.rb:38:11: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    r.wrap {}\r\n          ^\r\nactivesupport/test/reloader_test.rb:44:11: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    r.wrap {}\r\n          ^\r\nactivesupport/test/reloader_test.rb:56:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    reloader.wrap {}\r\n                 ^\r\nactivesupport/test/reloader_test.rb:66:18: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    reloader.wrap {}\r\n                 ^\r\nactivesupport/test/cache/local_cache_middleware_test.rb:20:22: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            body.each {}\r\n                     ^\r\nactivesupport/test/cache/behaviors/cache_store_behavior.rb:338:29: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert @cache.fetch(key) {}\r\n                            ^\r\nactivesupport/test/cache/behaviors/cache_store_behavior.rb:352:39: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    assert_not @cache.fetch(\"bad_key\") {}\r\n                                      ^\r\nactivesupport/lib/active_support/deprecation/behaviors.rb:46:69: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      silence: ->(message, callstack, deprecation_horizon, gem_name) {},\r\n                                                                    ^\r\nactivesupport/lib/active_support/core_ext/class/subclasses.rb:6:53: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    ObjectSpace.each_object(Numeric.singleton_class) {}\r\n                                                    ^\r\nactivesupport/lib/active_support/cache.rb:688:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          instrument(:fetch_hit, name, options) {}\r\n                                               ^\r\nactiverecord/test/schema/schema.rb:938:33: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    create_table(t, force: true) {}\r\n                                ^\r\nactiverecord/test/models/author.rb:84:32: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n  has_many :categorizations, -> {}\r\n                               ^\r\nactiverecord/test/models/topic.rb:19:33: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n  scope :anonymous_extension, -> {} do\r\n                                ^\r\nactiverecord/test/cases/fixtures_test.rb:873:67: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      message_bus.instrument(\"!connection.active_record\", payload) {}\r\n                                                                  ^\r\nactiverecord/test/cases/transactions_test.rb:892:19: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      after_commit {} # necessary to trigger the has_transactional_callbacks branch\r\n                  ^\r\nactiverecord/test/cases/migration/pending_migrations_test.rb:28:38: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            CheckPending.new(Proc.new {}).call({})\r\n                                     ^\r\nactiverecord/test/cases/migration/pending_migrations_test.rb:37:47: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          assert_nil CheckPending.new(Proc.new {}).call({})\r\n                                              ^\r\nactiverecord/test/cases/migration/command_recorder_test.rb:120:25: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        block = Proc.new {}\r\n                        ^\r\nactiverecord/test/cases/migration/command_recorder_test.rb:126:25: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        block = Proc.new {}\r\n                        ^\r\nactiverecord/test/cases/migration/command_recorder_test.rb:148:25: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        block = Proc.new {}\r\n                        ^\r\nactiverecord/test/cases/connection_pool_test.rb:581:33: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            pool.with_connection {}\r\n                                ^\r\nactiverecord/test/cases/transaction_isolation_test.rb:14:50: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Tag.transaction(isolation: :serializable) {}\r\n                                                 ^\r\nactiverecord/test/cases/transaction_isolation_test.rb:93:52: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          Tag.transaction(isolation: :serializable) {}\r\n                                                   ^\r\nactiverecord/test/cases/transaction_isolation_test.rb:101:72: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          Tag.transaction(requires_new: true, isolation: :serializable) {}\r\n                                                                       ^\r\nactiverecord/test/cases/scoping/named_scoping_test.rb:485:57: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      silence_warnings { Topic.scope(reserved_method, -> {}) }\r\n                                                        ^\r\nactiverecord/test/cases/connection_management_test.rb:109:42: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n            [a, b, Rack::BodyProxy.new(c) {}]\r\n                                         ^\r\nactiverecord/test/cases/migration_test.rb:1136:81: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      assert_nothing_raised { ActiveRecord::Migration::CheckPending.new(Proc.new {}).call({}) }\r\n                                                                                ^\r\nactiverecord/test/cases/adapters/postgresql/referential_integrity_test.rb:104:48: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      @connection.disable_referential_integrity {}\r\n                                               ^\r\nactiverecord/test/cases/adapters/sqlite3/sqlite3_adapter_test.rb:90:34: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n          Base.sqlite3_connection {}\r\n                                 ^\r\nactiverecord/test/cases/associations/extension_test.rb:92:95: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      ActiveRecord::Associations::Builder::HasMany.define_extensions(model, :association_name) {}\r\n                                                                                              ^\r\nactiverecord/test/cases/finder_respond_to_test.rb:15:93: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    class << Topic; self; end.send(:define_method, :method_added_for_finder_respond_to_test) {}\r\n                                                                                            ^\r\nactiverecord/test/cases/batches_test.rb:27:50: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      result = Post.find_each(batch_size: 100000) {}\r\n                                                 ^\r\nactiverecord/test/cases/batches_test.rb:186:66: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      PostWithDefaultScope.find_in_batches(error_on_ignore: true) {}\r\n                                                                 ^\r\nactiverecord/test/cases/batches_test.rb:195:67: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      PostWithDefaultScope.find_in_batches(error_on_ignore: false) {}\r\n                                                                  ^\r\nactiverecord/test/cases/batches_test.rb:207:45: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      PostWithDefaultScope.find_in_batches() {}\r\n                                            ^\r\nactiverecord/test/cases/batches_test.rb:216:45: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      PostWithDefaultScope.find_in_batches() {}\r\n                                            ^\r\nactiverecord/test/cases/batches_test.rb:231:64: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      Post.find_in_batches({ batch_size: 42, start: 1 }.freeze) {}\r\n                                                               ^\r\nactiverecord/test/cases/batches_test.rb:449:51: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      Post.in_batches({ of: 42, start: 1 }.freeze) {}\r\n                                                  ^\r\nactiverecord/test/cases/batches_test.rb:600:22: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n      posts.find_each {}\r\n                     ^\r\nactiverecord/test/cases/batches_test.rb:607:23: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.find_each {}\r\n                      ^\r\nactiverecord/test/cases/batches_test.rb:608:23: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.find_each {}\r\n                      ^\r\nactiverecord/test/cases/batches_test.rb:627:29: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.find_in_batches {}\r\n                            ^\r\nactiverecord/test/cases/batches_test.rb:628:29: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.find_in_batches {}\r\n                            ^\r\nactiverecord/test/cases/batches_test.rb:647:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.in_batches {}\r\n                       ^\r\nactiverecord/test/cases/batches_test.rb:648:24: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Post.in_batches {}\r\n                       ^\r\nactiverecord/test/cases/suppressor_test.rb:69:30: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n        Notification.suppress {}\r\n                             ^\r\nactiverecord/test/cases/associations_test.rb:83:22: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    firm.clients.each {} # forcing to load all clients\r\n                     ^\r\nactiverecord/examples/performance.rb:179:52: C: Layout/SpaceBeforeBlockBraces: Space detected to the left of {.\r\n    Exhibit.connection.send(:log, \"hello\", \"world\") {}\r\n                                                   ^\r\n\r\n2390 files inspected, 131 offenses detected\r\n```\r\n\r\nAfter:\r\n\r\n```\r\nrails]$ rubocop\r\n\r\nInspecting 2390 files\r\nr\n\r\n2390 files inspected, no offenses detected\r\n```", "labels": [], "number": 32091, "updated_at": "2018-02-23 00:46:09", "user": 6261109, "closed_at": "2018-02-23 00:21:28", "id": 299555799, "title": "Update rubocop to the latest version", "url": "https://api.github.com/repos/rails/rails/issues/32091", "created_at": "2018-02-23 00:14:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367867025", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-23 00:14:38", "user": 7468109, "id": 367867025}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 32090, "updated_at": "2018-02-22 23:09:05", "user": 6443532, "closed_at": "2018-02-22 23:08:25", "id": 299539806, "title": "Remove passing extra arguments to ActiveJob Callbacks", "url": "https://api.github.com/repos/rails/rails/issues/32090", "created_at": "2018-02-22 22:58:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367851895", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-22 22:58:58", "user": 7468109, "id": 367851895}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [15371677]}, "text": "- <s>Prevent generation of `protect_from_forgery` in `ApplicationController` of plugin\r\n  - There is `protect_from_forgery` by default since 48cb8b3 </s>\r\n- Comment `require \"active_storage/engine\"` in `bin/rails` of plugin if `--skip-active-storage`\r\n- Improve generated file `app/views/application.html.erb` of plugin\r\n  - Do not generate `javascript_include_tag` if `--skip-javascript`\r\n  - Generate `<%= csp_meta_tag %>`. Related to #32018. /cc @pixeltrix \r\n\r\nI'll backport to `5-2-stable` after merging this.", "labels": [], "number": 32089, "updated_at": "2018-02-23 00:13:38", "user": 6443532, "closed_at": "2018-02-23 00:05:22", "id": 299529906, "title": "Fix plugin generated files", "url": "https://api.github.com/repos/rails/rails/issues/32089", "created_at": "2018-02-22 22:20:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367842445", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-22 22:21:00", "user": 7468109, "id": 367842445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367866839", "text": "Backported to `5-2-stable` in df4ed0cc44e6866dca4562a11586bad4c5b41b2e", "created_at": "2018-02-23 00:13:38", "user": 6443532, "id": 367866839}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nBonjour 👋\r\n\r\nThis adds a new generator for concerns.\r\n\r\ni.e.: The command `rails generate concern taggable` will create the Taggable\r\nmodule in `app/models/concerns`, with the basic concern template.\r\n", "labels": [], "number": 32088, "updated_at": "2018-02-23 00:14:53", "user": 5814696, "closed_at": "2018-02-23 00:14:53", "id": 299522988, "title": "add a generator for concerns", "url": "https://api.github.com/repos/rails/rails/issues/32088", "created_at": "2018-02-22 21:56:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367867075", "text": "Thank you for the pull request but concerns are very simple modules that don't justify having generators.", "created_at": "2018-02-23 00:14:53", "user": 47848, "id": 367867075}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [98871, 7427365, 38544, 19212644, 20088320]}, "text": "### Summary\r\n\r\nLet select tag be required and have a selected disabled placeholder option.\r\n\r\nCloses related issue https://github.com/rails/rails/issues/32080", "labels": [], "number": 32087, "updated_at": "2018-02-28 05:50:15", "user": 594872, "closed_at": "2018-02-28 03:52:54", "id": 299463722, "title": "Let select render default selected option for required field", "url": "https://api.github.com/repos/rails/rails/issues/32087", "created_at": "2018-02-22 18:42:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367779385", "text": "r? @georgeclaghorn\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-22 18:42:30", "user": 7468109, "id": 367779385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367992249", "text": "@rafaelfranca updated to match code style", "created_at": "2018-02-23 12:07:36", "user": 594872, "id": 367992249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368159796", "text": "Makes sense to me. Can you add a CHANGELOG entry?", "created_at": "2018-02-23 22:43:14", "user": 47848, "id": 368159796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368212504", "text": "@rafaelfranca Updated [CHANGELOG](https://github.com/prikha/rails/blob/47fb575ca33a0fda40c361942dd753792de25db0/actionview/CHANGELOG.md)", "created_at": "2018-02-24 08:51:02", "user": 594872, "id": 368212504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369016952", "text": "Can you squash the commit?", "created_at": "2018-02-27 20:34:31", "user": 47848, "id": 369016952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369017663", "text": "@rafaelfranca done", "created_at": "2018-02-27 20:37:10", "user": 594872, "id": 369017663}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nActiveRecord has a pretty weird way to build the OR conditions.\r\nAccording to Doc of `AR::Relation#or` it should look like this:\r\n\r\n``` ruby\r\nPost.where(\"id = 1\").or(Post.where(\"author_id = 3\"))\r\n```\r\n\r\nWhile it could be useful as a powerful tool, in most cases we just need a simple OR statment between two or three conditions that can be done like this:\r\n\r\n``` ruby\r\nPost.where.any(id: 1, author_id: 3) # where id = 1 OR author_id = 3\r\n```\r\n\r\nIt fits well into the multiple `where` calls idea where `AND` is till a basic operation but not `OR`:\r\n\r\n``` ruby\r\nPost.where.any(id: 1, author_id: 3).where(created_at: 2.days.ago..Time.now)\r\n  # where (id = 1 OR author_id = 3) AND created_at BETWEEN ? AND ?\r\n```\r\n", "labels": [], "number": 32086, "updated_at": "2018-02-23 16:09:31", "user": 122436, "closed_at": "None", "id": 299376678, "title": "Introduced Model.where.any method", "url": "https://api.github.com/repos/rails/rails/issues/32086", "created_at": "2018-02-22 14:35:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367699708", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-22 14:36:01", "user": 7468109, "id": 367699708}, {"reactions": {"+1": [5657035]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367708258", "text": "> in most cases we just need a simple OR statement between two or three conditions\r\n\r\nCitation needed.\r\n\r\nI'm really doubtful that exactly `column_a = value_1 OR column_b = value_2` is such a strongly common requirement to justify adding a special syntax.\r\n\r\nThere's also already a shorter way of spelling that: `Post.where(\"id = ? OR author_id = ?\", 1, 3)`", "created_at": "2018-02-22 15:02:35", "user": 1034, "id": 367708258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367718420", "text": "I analyzed my production log for the OR statement in SQL. \r\n70%  of them does fit into this use case:\r\nhttps://gist.github.com/b4f0e35dfe70c8ce9dd331ddcecaf0b2\r\n\r\nThe problems with the syntax you proposed can be in the following cases:\r\n\r\nYou have a list of conditions as Hash (e.g coming from frontend)\r\n\r\n``` ruby\r\nPost.where.any(params[:or_conditions].permit_all)\r\n```\r\nThe other problem would be polymorphic associations:\r\n\r\n``` ruby\r\nComment.belongs_to :target, polymoriphic: true\r\nComment.where.any(target: Post.first, published: false)\r\n```\r\n\r\nAnd the 3rd problem would be arrays (especially with `nil`):\r\n\r\n``` ruby\r\nPost.where.any(category_id: [25, nil], author_id: [1, nil]) \r\n```\r\n", "created_at": "2018-02-22 15:32:58", "user": 122436, "id": 367718420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367724044", "text": "Whenever I have a situation like yours @bogdan I drop down to using `arel_table` in a class method on the model because huge long AR chains in controllers are ugly. Therefore I'm definitely 👎 on the idea.\r\n", "created_at": "2018-02-22 15:49:56", "user": 6321, "id": 367724044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367728080", "text": "@pixeltrix can you show those cases where you use `arel_table`? Do they use `OR` or they are just complex?", "created_at": "2018-02-22 16:01:17", "user": 122436, "id": 367728080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367729715", "text": "@bogdan to take your example:\r\n\r\n``` ruby\r\nclass Post < ApplicationModel\r\n  class << self\r\n    def where_any(id:, author_id:)\r\n      where((arel_table[:id].eq(id)).or(arel_table[:author_id].eq(author_id)))\r\n    end\r\n  end\r\nend\r\n\r\nPost.where_any(id: 1, author_id: 3)\r\n```\r\n\r\n", "created_at": "2018-02-22 16:06:03", "user": 6321, "id": 367729715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367884753", "text": "Relation#or works best when used inside the model too:\r\n\r\n```ruby\r\nclass Post < ApplicationModel\r\n  class << self\r\n    def where_any(id:, author_id:)\r\n      where(id: id).or(where(author_id: author_id))\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nI don't see how the fifth example fits, but will agree the first four do. Again, though, I'd tend to write those as model methods/scopes:\r\n\r\n```ruby\r\nclass Campaign < ApplicationModel\r\n  def self.changing_state_during(period)\r\n    where(activates_at: period).or(where(expires_at: period))\r\n  end\r\nend\r\n```", "created_at": "2018-02-23 01:52:23", "user": 1034, "id": 367884753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367953533", "text": "@matthewd there is a problem with `or`  as it coops all where conditions defined before with a new one. This is not what I want in 90% of cases:\r\n\r\n``` ruby\r\nCampaign.where(site_id: site).changing_state_during(period)\r\n# WHERE (`campaigns`.`site_id` = 1 AND (`campaigns`.`activates_at` BETWEEN ?) OR (`campaigns`.`expires_at` BETWEEN ?))\r\n# With AND priority higher than OR - I would expect a brackets wrapping `activates_at` and `expires_at` conditions\r\n```\r\n\r\nI would expect `#or` to be local to the scope... That is why I think that `Relation#or` is pretty inconvenient.\r\n\r\nAgree on the fifth example. It doesn't fit.", "created_at": "2018-02-23 09:16:54", "user": 122436, "id": 367953533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367992347", "text": "> I would expect a brackets wrapping `activates_at` and `expires_at` conditions\r\n\r\nMe too. If you can get AR to produce a query like that, that's a bug.\r\n\r\n(Well, it actually should produce: ```WHERE (`campaigns`.`site_id` = 1 AND `campaigns`.`activates_at` BETWEEN ?) OR (`campaigns`.`site_id` = 1 AND `campaigns`.`expires_at` BETWEEN ?)```, but that's an implementation detail, and is semantically the same as what you're expecting.)", "created_at": "2018-02-23 12:08:11", "user": 1034, "id": 367992347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368039860", "text": "@matthewd You are right, it really works...\r\nWhile testing that I discovered that the following are not equal:\r\n\r\n``` ruby\r\nCampaign.where(site_id: site).changing_state_during(period)\r\nCampaign.where(site_id: site).where(activates_at: period).or(where(expires_at: period))\r\n```\r\n\r\nThat is sad, but it seems there is nothing we can do.\r\n\r\nMaybe It is good idea to support this syntax then:\r\n\r\n``` ruby\r\nwhere(activates_at: period).or(expires_at: period)\r\n```\r\n\r\nBecause double where looks ambiguous especially when I am forced to specify the class too:\r\n\r\n``` ruby\r\nCampaign.where(activates_at: period).or(Campaign.where(expires_at: period))\r\n```\r\n", "created_at": "2018-02-23 15:25:01", "user": 122436, "id": 368039860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368054524", "text": "It's necessary to *avoid* ambiguity: if you pass a condition hash to `or`, how do we decide \"how much\" of the LHS is included in the OR, and how much applies to both sides?\r\n\r\nThey're unequal so that you can form both possible queries:\r\n\r\n```\r\nsite_id AND (activates_at OR expires_at)\r\n(site_id AND activates_at) OR expires_at\r\n```\r\n\r\nSee also discussion in #16052, where a number of simpler-but-ambiguous APIs were proposed. (Oh hey, and me using the same awkward `\"how much\"` phrasing four years ago :sweat_smile:)", "created_at": "2018-02-23 16:09:31", "user": 1034, "id": 368054524}], "assignees": [350807, 350807], "state": "open", "is-pull-request": true}
{"reactions": {"hooray": [6443532]}, "text": "Record what was the current timezone in effect when the job was enqueued and then restore when the job is executed in same way that the current locale is recorded and restored.", "labels": [], "number": 32085, "updated_at": "2018-02-22 16:41:30", "user": 6321, "closed_at": "2018-02-22 16:41:27", "id": 299369631, "title": "Add support for timezones to Active Job", "url": "https://api.github.com/repos/rails/rails/issues/32085", "created_at": "2018-02-22 14:15:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "SQLServerAdapter (gem `activerecord-sqlserver-adapter`) uses square\nbrackets for quoting column names (e.g. `[id]`). Those brackets must not\nbe misinterpreted in regular expressions.\n\nFailure observed when running the AR test suite against that adapter:\n```\nExpected /SELECT [developers].[id].* FROM developers/ to match \"SELECT [developers].[id], [developers].[name], [developers].[salary], [developers].[firm_id], [developers].[mentor_id], [developers].[created_at], [developers].[updated_at], [developers].[created_on], [developers].[updated_on] FROM developers\".\n```", "labels": [], "number": 32084, "updated_at": "2018-02-22 14:46:29", "user": 3897997, "closed_at": "2018-02-22 14:22:32", "id": 299356640, "title": "Properly escape column name embedded into regexp", "url": "https://api.github.com/repos/rails/rails/issues/32084", "created_at": "2018-02-22 13:36:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367682763", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @rafaelfranca (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-22 13:37:03", "user": 7468109, "id": 367682763}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This isn't a bug, but more something I have been wondering and couldn't find on the Rails documentation. I also asked a question on StackOverflow but I didn't get any answer, so I'm trying my luck here.\r\n\r\nI would like to use React-Router to handle the majority of my pages from the visitor part and create a Single Page Application in the mean time. However, I would like to make sure that if the user types /admin, he wouldn't get \"redirected\" to the root_path\r\n\r\nSo far I only managed to either pass everything to a wildcard or make \"compartiments\" as follows:\r\n\r\n```\r\nroot 'home#index'\r\n# example 1\r\nget '/*path' => 'home#index'\r\nget '/articles' => 'home#articles_index'\r\n# example 2\r\nget '/articles/*all' => 'home#articles_index'\r\n# vain try 1\r\nget '/*path' => 'home#index', except: :admin\r\n# vain try 2\r\nget '/*path' => 'home#index', except: '/admin'\r\n\r\n```\r\n\r\nI found out about the constraints, but I realized it's to make sure the url is correctly passed (ie, integer instead of strings) but it doesn't \"blacklist\" urls.\r\n\r\nAny idea?\r\n\r\nThank you in advance\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: 2.4.3\r\n", "labels": [], "number": 32083, "updated_at": "2018-02-27 01:05:40", "user": 16261166, "closed_at": "2018-02-22 14:44:36", "id": 299338217, "title": "Is it to possible wildcards on the route system for everything except one pattern?", "url": "https://api.github.com/repos/rails/rails/issues/32083", "created_at": "2018-02-22 12:40:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367702427", "text": "Okay, I'm probably setting a bad precedent here but the question was interesting and I wasn't sure it'd work but it seems like using negative lookup assertions in the constraint regex is the way to go:\r\n\r\n``` ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n  gem \"rails\", \"5.1.5\"\r\nend\r\n\r\nrequire \"rack/test\"\r\nrequire \"action_controller/railtie\"\r\n\r\nclass TestApp < Rails::Application\r\n  config.root = __dir__\r\n  config.session_store :cookie_store, key: \"cookie_store_key\"\r\n  secrets.secret_key_base = \"secret_key_base\"\r\n\r\n  config.logger = Logger.new(\"/dev/null\")\r\n  Rails.logger  = config.logger\r\n\r\n  routes.draw do\r\n    get \"/*id\", to: \"pages#show\", id: /(?!admin).*/\r\n  end\r\nend\r\n\r\nclass ApplicationController < ActionController::Base\r\n  include Rails.application.routes.url_helpers\r\nend\r\n\r\nclass PagesController < ApplicationController\r\n  def show\r\n    render plain: request.path\r\n  end\r\nend\r\n\r\nrequire \"minitest/autorun\"\r\n\r\n# Ensure backward compatibility with Minitest 4\r\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\nclass BugTest < Minitest::Test\r\n  include Rack::Test::Methods\r\n\r\n  def test_negative_lookup_constraints\r\n    get \"/foo\"\r\n    assert_equal 200, last_response.status\r\n    assert_equal \"/foo\", last_response.body\r\n\r\n    get \"/foo/admin\"\r\n    assert_equal 200, last_response.status\r\n    assert_equal \"/foo/admin\", last_response.body\r\n\r\n    get \"/admin\"\r\n    assert_equal 404, last_response.status\r\n\r\n    get \"/admin/foo\"\r\n    assert_equal 404, last_response.status\r\n  end\r\n\r\n  private\r\n\r\n  def app\r\n    Rails.application\r\n  end\r\nend\r\n```\r\n\r\nThe other way to do it is define the routes you don't want to match before the catchall and get them to return a 404 error.", "created_at": "2018-02-22 14:44:36", "user": 6321, "id": 367702427}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367976497", "text": "Hey, thank you for your answer, and sorry for not answering earlier! It works really fine and I managed to \"improve\" it by adding elements to the \"whitelist:\r\nBy doing the following\r\n\r\n`get '/*id', to: 'home#index', id: /(?!admin|settings|users).*/`\r\n\r\nI can \"whitelist\" routes such as \"/settings\" (the website's general configuration), \"/users/sign_in\", and so on. I just hope, as you said it yourself, I don't settle a bad precedent\r\n\r\nThank you again!", "created_at": "2018-02-23 10:51:48", "user": 16261166, "id": 367976497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368702292", "text": "isn't routing prioritize those which are first define? I've been doing the following and it works:\r\n\r\n```rb\r\nget '/admin', to: 'admin#index'\r\nget '/*path' => 'home#index'\r\n```", "created_at": "2018-02-27 00:32:07", "user": 667726, "id": 368702292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368709367", "text": "@ignatiusreza I should try, I never thought about that!", "created_at": "2018-02-27 01:05:40", "user": 16261166, "id": 368709367}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. Start rails app (with puma)\r\n2. Make multiple request at same time. More specifically, when my android activity destroys, 3 fragments tries to get same resource from the server.\r\n3. Rails app freezes. `ctrl-c`, `ctrl-d` does not work at all.\r\n\r\n```\r\n=> Booting Puma\r\n=> Rails 5.1.4 application starting in development\r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.11.0 (ruby 2.5.0-p0), codename: Love Song\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on tcp://0.0.0.0:3000\r\nUse Ctrl-C to stop\r\n\r\n\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 20:41:13 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 20:41:13 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 20:41:13 +0900\r\n\r\n\r\n\r\n^C^C^C^C^D\r\n\r\n\r\n```\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n**Ruby version**: 2.5.0", "labels": [], "number": 32082, "updated_at": "2018-02-28 09:49:07", "user": 8934513, "closed_at": "2018-02-28 09:49:07", "id": 299323115, "title": "Freeze when receive multiple requests quickly", "url": "https://api.github.com/repos/rails/rails/issues/32082", "created_at": "2018-02-22 11:49:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367698017", "text": "Can you reproduce this with a different version of Ruby?", "created_at": "2018-02-22 14:31:05", "user": 6321, "id": 367698017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367700134", "text": "ruby 2.4.1 gives same result:\r\n\r\n```\r\n=> Booting Puma\r\n=> Rails 5.1.4 application starting in development\r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.11.0 (ruby 2.4.1-p111), codename: Love Song\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on tcp://0.0.0.0:3000\r\nUse Ctrl-C to stop\r\nStarted GET \"/v4/literatures/1\" for 192.168.0.5 at 2018-02-22 23:36:04 +0900\r\n   (0.3ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483\r\n   (1.4ms)  SELECT `schema_migrations`.`version` FROM `schema_migrations` ORDER BY `schema_migrations`.`version` ASC\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 23:36:04 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 23:36:04 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-22 23:36:04 +0900\r\nProcessing by V4::LiteraturesController#show as JSON\r\n  Parameters: {\"id\"=>\"1\", \"literature\"=>{}}\r\n\r\n\r\n\r\n\r\n^C^C^C^D\r\n\r\n\r\n```", "created_at": "2018-02-22 14:37:24", "user": 8934513, "id": 367700134}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367705358", "text": "And what's happening in `V4::LiteraturesController#show` - anything that might cause a deadlock?\r\n\r\nIf you could use [rbtrace][1] to track down what those three threads are doing then we can see whether there's a Rails bug or it's Puma, Ruby, etc.\r\n\r\n[1]: https://github.com/tmm1/rbtrace", "created_at": "2018-02-22 14:53:49", "user": 6321, "id": 367705358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367706419", "text": "You can also try [DebugLocks](http://api.rubyonrails.org/classes/ActionDispatch/DebugLocks.html). ", "created_at": "2018-02-22 14:57:05", "user": 1034, "id": 367706419}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367715194", "text": "I also encountered this issue. There are always some threads stuck at: https://github.com/rails/rails/blob/5-1-stable/activerecord/lib/active_record/model_schema.rb#L461\r\n\r\nThe issue appears for me when testing with RSpec, using `RSpec.config.use_transactional_fixtures = true` and `Rails.configuration.eager_load = false`. Flipping `eager_load` to true is a workaround.", "created_at": "2018-02-22 15:23:21", "user": 260602, "id": 367715194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367716021", "text": "I think `V4::LiteraturesController#show`'s logic is not that heavy, and my first trial does not call this action.\r\n\r\n```\r\n  def show\r\n    if @parent\r\n      @preview = true\r\n      @literature = @parent.literature\r\n    else\r\n      @preview = !(free? || purchased?)\r\n    end\r\n  end\r\n\r\n  private\r\n\r\n  def set_purchased_literatures\r\n    @purchased_literatures = current_user&.literatures&.pluck(:id) || []\r\n  end\r\n\r\n  def set_literature\r\n    @literature = Literature\r\n      .includes(:chapters, :articles, :pages)\r\n      .find_by(id: params[:id])\r\n  end\r\n\r\n  def free?\r\n    Time.current < (@literature.product.free_until || 1.day.ago)\r\n  end\r\n\r\n  def purchased?\r\n    current_user&.literatures&.include?(@literature)\r\n  end\r\n```\r\n\r\nBy the way, after some digging I found an interesting issue.\r\n\r\n```\r\n=> Booting Puma\r\n=> Rails 5.1.4 application starting in development\r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.11.0 (ruby 2.5.0-p0), codename: Love Song\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on tcp://0.0.0.0:3000\r\nUse Ctrl-C to stop\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-23 00:06:30 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-23 00:06:30 +0900\r\nStarted GET \"/v4/keywords/current\" for 192.168.0.5 at 2018-02-23 00:06:30 +0900\r\n   (0.5ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483\r\n   (0.7ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483\r\n   (0.8ms)  SET NAMES utf8,  @@SESSION.sql_mode = CONCAT(CONCAT(@@sql_mode, ',STRICT_ALL_TABLES'), ',NO_AUTO_VALUE_ON_ZERO'),  @@SESSION.sql_auto_is_null = 0, @@SESSION.wait_timeout = 2147483\r\n   (0.7ms)  SELECT `schema_migrations`.`version` FROM `schema_migrations` ORDER BY `schema_migrations`.`version` ASC\r\n   (1.4ms)  SELECT `schema_migrations`.`version` FROM `schema_migrations` ORDER BY `schema_migrations`.`version` ASC\r\n   (1.4ms)  SELECT `schema_migrations`.`version` FROM `schema_migrations` ORDER BY `schema_migrations`.`version` ASC\r\n/Users/injung/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:457: warning: already initialized constant V4\r\n/Users/injung/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:457: warning: previous definition of V4 was here\r\n/Users/injung/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:457: warning: already initialized constant V4\r\n/Users/injung/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:457: warning: previous definition of V4 was here\r\n\r\n\r\nLoadError (Unable to autoload constant V4::KeywordsController, expected /Users/injung/Github/ssm-api/app/controllers/v4/keywords_controller.rb to define it):\r\n\r\nLoadError (Unable to autoload constant V4::KeywordsController, expected /Users/injung/Github/ssm-api/app/controllers/v4/keywords_controller.rb to define it):\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:511:in `load_missing_constant'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:202:in `const_missing'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:271:in `const_get'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:271:in `block in constantize'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `each'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `inject'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `constantize'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:582:in `get'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:613:in `constantize'\r\nactionpack (5.1.4) lib/action_dispatch/http/request.rb:85:in `controller_class_for'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:99:in `binary_params_for?'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:90:in `set_binary_encoding'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:67:in `path_parameters='\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:48:in `block in serve'\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `each'\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `serve'\r\nactionpack (5.1.4) lib/action_dispatch/routing/route_set.rb:834:in `call'\r\nrack (2.0.3) lib/rack/etag.rb:25:in `call'\r\nrack (2.0.3) lib/rack/conditional_get.rb:25:in `call'\r\nrack (2.0.3) lib/rack/head.rb:12:in `call'\r\nactiverecord (5.1.4) lib/active_record/migration.rb:556:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:26:in `block in call'\r\nactivesupport (5.1.4) lib/active_support/callbacks.rb:97:in `run_callbacks'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:24:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:36:in `call_app'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:24:in `block in call'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:26:in `tagged'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `tagged'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:24:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/request_id.rb:25:in `call'\r\nrack (2.0.3) lib/rack/runtime.rb:22:in `call'\r\nactivesupport (5.1.4) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/static.rb:125:in `call'\r\nrack (2.0.3) lib/rack/sendfile.rb:111:in `call'\r\nrack-cors (1.0.2) lib/rack/cors.rb:97:in `call'\r\nrailties (5.1.4) lib/rails/engine.rb:522:in `call'\r\npuma (3.11.0) lib/puma/configuration.rb:225:in `call'\r\npuma (3.11.0) lib/puma/server.rb:624:in `handle_request'\r\npuma (3.11.0) lib/puma/server.rb:438:in `process_client'\r\npuma (3.11.0) lib/puma/server.rb:302:in `block in run'\r\npuma (3.11.0) lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\n\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:511:in `load_missing_constant'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:202:in `const_missing'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:271:in `const_get'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:271:in `block in constantize'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `each'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `inject'\r\nactivesupport (5.1.4) lib/active_support/inflector/methods.rb:267:in `constantize'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:582:in `get'\r\nactivesupport (5.1.4) lib/active_support/dependencies.rb:613:in `constantize'\r\nactionpack (5.1.4) lib/action_dispatch/http/request.rb:85:in `controller_class_for'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:99:in `binary_params_for?'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:90:in `set_binary_encoding'\r\nactionpack (5.1.4) lib/action_dispatch/http/parameters.rb:67:in `path_parameters='\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:48:in `block in serve'\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `each'\r\nactionpack (5.1.4) lib/action_dispatch/journey/router.rb:33:in `serve'\r\nactionpack (5.1.4) lib/action_dispatch/routing/route_set.rb:834:in `call'\r\nrack (2.0.3) lib/rack/etag.rb:25:in `call'\r\nrack (2.0.3) lib/rack/conditional_get.rb:25:in `call'\r\nrack (2.0.3) lib/rack/head.rb:12:in `call'\r\nactiverecord (5.1.4) lib/active_record/migration.rb:556:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:26:in `block in call'\r\nactivesupport (5.1.4) lib/active_support/callbacks.rb:97:in `run_callbacks'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/callbacks.rb:24:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/debug_exceptions.rb:59:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/show_exceptions.rb:31:in `call'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:36:in `call_app'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:24:in `block in call'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:26:in `tagged'\r\nactivesupport (5.1.4) lib/active_support/tagged_logging.rb:69:in `tagged'\r\nrailties (5.1.4) lib/rails/rack/logger.rb:24:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/remote_ip.rb:79:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/request_id.rb:25:in `call'\r\nrack (2.0.3) lib/rack/runtime.rb:22:in `call'\r\nactivesupport (5.1.4) lib/active_support/cache/strategy/local_cache_middleware.rb:27:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/executor.rb:12:in `call'\r\nactionpack (5.1.4) lib/action_dispatch/middleware/static.rb:125:in `call'\r\nrack (2.0.3) lib/rack/sendfile.rb:111:in `call'\r\nrack-cors (1.0.2) lib/rack/cors.rb:97:in `call'\r\nrailties (5.1.4) lib/rails/engine.rb:522:in `call'\r\npuma (3.11.0) lib/puma/configuration.rb:225:in `call'\r\npuma (3.11.0) lib/puma/server.rb:624:in `handle_request'\r\npuma (3.11.0) lib/puma/server.rb:438:in `process_client'\r\npuma (3.11.0) lib/puma/server.rb:302:in `block in run'\r\npuma (3.11.0) lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\nProcessing by V4::KeywordsController#current as JSON\r\n  Parameters: {\"keyword\"=>{}}\r\n  User Load (0.6ms)  SELECT  `ssm_user`.* FROM `ssm_user` INNER JOIN ssm_token ON ssm_user.id = ssm_token.user_id WHERE (ssm_token.access_token = '201802010034595a71e223a0dee3.10890975') ORDER BY `ssm_user`.`id` ASC LIMIT 1\r\n  FeaturedKeyword Load (0.2ms)  SELECT  `ssm_featured_keywords`.* FROM `ssm_featured_keywords` WHERE (`ssm_featured_keywords`.`actived_at` < '2018-02-22 08:06:31') ORDER BY `ssm_featured_keywords`.`id` DESC LIMIT 1\r\n  Rendering v4/keywords/current.json.jbuilder\r\n  Keyword Load (0.3ms)  SELECT  `ssm_keyword`.* FROM `ssm_keyword` WHERE `ssm_keyword`.`id` = 1091 LIMIT 1\r\n  Literature Load (0.4ms)  SELECT  `literatures`.* FROM `literatures` INNER JOIN `keywords_literatures` ON `literatures`.`id` = `keywords_literatures`.`literature_id` WHERE `keywords_literatures`.`keyword_id` = 1091 LIMIT 1\r\n   (0.7ms)  SELECT COUNT(*) FROM `pages` INNER JOIN `articles` ON `pages`.`article_id` = `articles`.`id` INNER JOIN `chapters` ON `articles`.`chapter_id` = `chapters`.`id` WHERE `chapters`.`literature_id` = 1\r\n   (0.3ms)  SELECT COUNT(*) FROM `comments` WHERE `comments`.`commentable_id` = 1 AND `comments`.`commentable_type` = 'Literature' AND `comments`.`published` = 1 AND `comments`.`deleted` = 0\r\n  User Load (0.2ms)  SELECT  `ssm_user`.* FROM `ssm_user` WHERE `ssm_user`.`id` = 112047 LIMIT 1\r\n  Rendered v4/users/_user.json.jbuilder (0.3ms)\r\n  Product Load (0.3ms)  SELECT  `products`.* FROM `products` WHERE `products`.`purchasable_id` = 1 AND `products`.`purchasable_type` = 'Literature' LIMIT 1\r\n  Rendered v4/products/_product.json.jbuilder (0.3ms)\r\n  Rendered v4/literatures/_literature.json.jbuilder (41.3ms)\r\n  Rendered v4/keywords/_keyword.json.jbuilder (93.1ms)\r\n  Rendered v4/keywords/current.json.jbuilder (96.5ms)\r\nCompleted 200 OK in 151ms (Views: 93.3ms | ActiveRecord: 11.2ms)\r\n```\r\n\r\nAgain 3 requests, but only one succeeds, and others throw `LoadError` even `V4::KeywordsController` has defined in keywords_controller.rb\r\n\r\n```\r\nclass V4::KeywordsController < ApplicationController\r\n  def current\r\n    current = FeaturedKeyword.activated_at_column.lt(7.hours.ago)\r\n    @keyword = FeaturedKeyword.where(current).order(id: :desc).first\r\n  end\r\nend\r\n```\r\n\r\nIt seems like the eager_load issue, as @rschellhorn says. What do you think?", "created_at": "2018-02-22 15:25:49", "user": 8934513, "id": 367716021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369157491", "text": "I'm currently upgrading a rails 4.2 project to 5.2rc1 and I replaced paperclip with ActiveStorage. After the replacement my rspec tests started to freeze randomly (always after tests that uploaded a file).\r\n\r\nWith ```eager_load = false``` and ```config.queue_adapter = :test``` the tests started to work again. I'm not sure if this is releated to the freeze issue reported here but it seems similar.", "created_at": "2018-02-28 08:24:05", "user": 138686, "id": 369157491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369185405", "text": "Solved by using `eager_load = false`. Thanks all! :)", "created_at": "2018-02-28 09:49:07", "user": 8934513, "id": 369185405}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\nCreate a rails form with input type as \"tel\"...telephone number and try entering character in it\r\n\r\n\r\n### Expected behavior\r\nshould throw error if isn't a number on client side only with out any regex\r\n\r\n### Actual behavior\r\nAllow to submit everything including numbers\r\n\r\n### System configuration\r\n**Rails version**: 4.0\r\n\r\n**Ruby version**: 2.1\r\n", "labels": [], "number": 32081, "updated_at": "2018-02-22 11:34:34", "user": 17555966, "closed_at": "2018-02-22 11:34:34", "id": 299314341, "title": "Form input type \"tel\" takes anything( your can type \"text\")  as input and allows to submit with our throwing error.", "url": "https://api.github.com/repos/rails/rails/issues/32081", "created_at": "2018-02-22 11:17:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367653806", "text": "@darkthirst as described in [this blog post][1], by default no validation is applied to `type=\"tel\"` inputs because of the wide variety of telephone number formats available. If you want client-side validation you'll need to add a regex option.\r\n\r\n[1]: https://martinwolf.org/blog/2015/04/html5-telephone-input-validation", "created_at": "2018-02-22 11:34:34", "user": 6321, "id": 367653806}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [151912, 98871, 15484, 19212644, 3352737, 1465872]}, "text": "### Steps to reproduce\r\n\r\nConsider the following case - I have a signup form with a select field. The field is required and should contain a placeholder. As we all know we can achieve this by using `select` and `:prompt` option. \r\n\r\nExample from docs: \r\n```ruby\r\nselect(\"post\", \"person_id\", Person.all.collect {|p| [ p.name, p.id ] }, {prompt: 'Select Person'})\r\n```\r\noutputs \r\n```html\r\n<select name=\"post[person_id]\" id=\"post_person_id\">\r\n  <option value=\"\">Select Person</option>\r\n  <option value=\"1\">David</option>\r\n  <option value=\"2\">Eileen</option>\r\n  <option value=\"3\">Rafael</option>\r\n</select>\r\n```\r\nAn important detail is that placeholder MUST be disabled. This is logically correct. If you have a required field you do not want anyone to submit a placeholder and displaying error messages is also not that fancy.\r\n\r\nGoing forward one can assume that if we have an option tag with a value equals to an empty string, that means you can employ `:selected` and `:disabled` options to gain precise control over it. It works on any option provided by the client but not on the default one.\r\n\r\n### Actual behavior\r\n\r\n```ruby\r\nselect(\"post\", \"person_id\", Person.all.collect {|p| [ p.name, p.id ] }, {prompt: 'Select Person', selected: '', disabled: ''})\r\n```\r\n\r\n```html\r\n<select name=\"post[person_id]\" id=\"post_person_id\">\r\n  <option value=\"\">Select Person</option>\r\n  <option value=\"1\">David</option>\r\n  <option value=\"2\">Eileen</option>\r\n  <option value=\"3\">Rafael</option>\r\n</select>\r\n```\r\n\r\n### Expected behavior\r\nThe usage of generic helper methods should be transparent. I expect provided options not to be silently ignored but to be placed as attributes on a placeholder option.\r\n\r\n```html\r\n<select name=\"post[person_id]\" id=\"post_person_id\">\r\n  <option value=\"\" disabled=\"disabled\" selected=\"selected\">Select Person</option>\r\n  <option value=\"1\">David</option>\r\n  <option value=\"2\">Eileen</option>\r\n  <option value=\"3\">Rafael</option>\r\n</select>\r\n```\r\n\r\nOne may notice that it is possible to pass empty option manually:\r\n\r\n```ruby\r\nhelper.select(\"post\", \"person_id\", [['Select name', ''], [\"Peter\", 1], [\"Maria\", 2], [\"Justas\", 3]], {required: true, selected: '', disabled: ''})\r\n```\r\n```html\r\n<select name=\"post[person_id]\" id=\"post_person_id\">\r\n<option selected=\"selected\" disabled=\"disabled\" value=\"\">Select name</option>\r\n<option value=\"1\">Peter</option>\r\n<option value=\"2\">Maria</option>\r\n<option value=\"3\">Justas</option></select>\r\n```\r\n\r\nwell it would be sufficient unless `required` option jumps in and produces another empty option:\r\n\r\n```ruby\r\nhelper.select(\"post\", \"person_id\", [['Select name', ''], [\"Peter\", 1], [\"Maria\", 2], [\"Justas\", 3]], {required: true, selected: '', disabled: ''}, {required: true}) \r\n```\r\n\r\n```html\r\n<select required=\"required\" name=\"post[person_id]\" id=\"post_person_id\">\r\n<option value=\"\"></option>\r\n<option selected=\"selected\" disabled=\"disabled\" value=\"\">Select name</option>\r\n<option value=\"1\">Peter</option>\r\n<option value=\"2\">Maria</option>\r\n<option value=\"3\">Justas</option></select>\r\n```\r\n\r\nA lot of stuff has been built on top of this implementation([simple_form](https://github.com/plataformatec/simple_form/) is among those, needless to say, that a lot of custom stuff is based on `simple_form` itself. ). And it is strange nobody mentions this, implementing various hacks around it.\r\n\r\nAnd the fix is really straightforward: \r\n\r\nreplace this method \r\n\r\nhttps://github.com/rails/rails/blob/v5.1.4/actionview/lib/action_view/helpers/tags/base.rb#L166-L174\r\n\r\n```ruby\r\n        def add_options(option_tags, options, value = nil)\r\n          if options[:include_blank]\r\n            option_tags = tag_builder.content_tag_string(\"option\", options[:include_blank].kind_of?(String) ? options[:include_blank] : nil, value: EMPTY_STRING) + \"\\n\" + option_tags\r\n          end\r\n          if value.blank? && options[:prompt]\r\n            opts = {value: EMPTY_STRING}.tap do |prompt_opts|\r\n              prompt_opts[:disabled] = true if options[:disabled] == EMPTY_STRING\r\n              prompt_opts[:selected] = true if options[:selected] == EMPTY_STRING\r\n            end\r\n            option_tags = tag_builder.content_tag_string(\"option\", prompt_text(options[:prompt]), opts) + \"\\n\" + option_tags\r\n          end\r\n          option_tags\r\n        end\r\n```\r\n\r\nI can submit a PR if a proposal would be accepted by the community.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: 2.4.2\r\n", "labels": [], "number": 32080, "updated_at": "2018-02-28 11:36:31", "user": 594872, "closed_at": "2018-02-28 11:36:31", "id": 299298723, "title": "Give better control on select tag helper in terms of selected and disabled options", "url": "https://api.github.com/repos/rails/rails/issues/32080", "created_at": "2018-02-22 10:28:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367648903", "text": "> And the fix is really straightforward\r\n\r\nIf you have a code change to suggest, please do submit a PR: they are specifically designed to make changes easy to read and review.", "created_at": "2018-02-22 11:12:34", "user": 1034, "id": 367648903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367681092", "text": "Sure", "created_at": "2018-02-22 13:30:58", "user": 594872, "id": 367681092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367779779", "text": "@matthewd added a PR", "created_at": "2018-02-22 18:43:52", "user": 594872, "id": 367779779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369212803", "text": "Fixed by #32087", "created_at": "2018-02-28 11:36:31", "user": 987638, "id": 369212803}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nThe following gist contains a failing unit test:\r\nhttps://gist.github.com/malikolivier/87904c9ed078dca186cf455a09a4f30e\r\n\r\n### Expected behavior\r\n\r\nTest should succeed, counter_cache should be decremented once.\r\n\r\n### Actual behavior\r\n\r\nTest fails, counter_cache is decremented twice.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5 (master)\r\n\r\n**Ruby version**: 2.4.3\r\n\r\n### More details\r\n\r\n**Database setup:** A lecture is given by a person in an institution. An institution can hold several lectures and a person can give several lectures.\r\nEach person and institution has a cache counter counting the number of lectures associated.\r\n\r\nRun the file included in the gist:\r\n```sh\r\nruby decrement_counter_cache_test.rb\r\n```\r\nThis file moves a lecture to another institution. We thus except the counter showing the number of lectures in the original institution to be decremented.\r\n\r\nYou will get the following output:\r\n\r\n```\r\nD, [2018-02-22T19:01:14.445281 #20237] DEBUG -- :   Institution Load (0.0ms)  SELECT  \"institutions\".* FROM \"institutions\" WHERE \"institutions\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\r\nD, [2018-02-22T19:01:14.446164 #20237] DEBUG -- :   Institution Update All (0.1ms)  UPDATE \"institutions\" SET \"lectures_count\" = COALESCE(\"lectures_count\", 0) + 1 WHERE \"institutions\".\"id\" IS NULL\r\nD, [2018-02-22T19:01:14.446526 #20237] DEBUG -- :   Institution Update All (0.0ms)  UPDATE \"institutions\" SET \"lectures_count\" = COALESCE(\"lectures_count\", 0) - 1 WHERE \"institutions\".\"id\" = ?  [[\"id\", 1]]  <- First decrement\r\nD, [2018-02-22T19:01:14.446999 #20237] DEBUG -- :   Institution Create (0.0ms)  INSERT INTO \"institutions\" (\"address\") VALUES (?)  [[\"address\", \"New address\"]]\r\nD, [2018-02-22T19:01:14.447429 #20237] DEBUG -- :   Lecture Update (0.0ms)  UPDATE \"lectures\" SET \"institution_id\" = ? WHERE \"lectures\".\"id\" = ?  [[\"institution_id\", 2], [\"id\", 1]]\r\nD, [2018-02-22T19:01:14.447822 #20237] DEBUG -- :   Institution Update All (0.0ms)  UPDATE \"institutions\" SET \"lectures_count\" = COALESCE(\"lectures_count\", 0) + 1 WHERE \"institutions\".\"id\" = ?  [[\"id\", 2]]\r\nD, [2018-02-22T19:01:14.448094 #20237] DEBUG -- :   Institution Update All (0.0ms)  UPDATE \"institutions\" SET \"lectures_count\" = COALESCE(\"lectures_count\", 0) - 1 WHERE \"institutions\".\"id\" = ?  [[\"id\", 1]]  <- Second decrement\r\nD, [2018-02-22T19:01:14.448218 #20237] DEBUG -- :    (0.0ms)  commit transaction\r\n```\r\n\r\nAs you can see, `institutions.lectures_count` is decremented twice. Now very interestingly, if you change  this [line](https://gist.github.com/malikolivier/87904c9ed078dca186cf455a09a4f30e#file-decrement_counter_cache_test-rb-L44) to\r\n\r\n```rb\r\nbelongs_to :person#, counter_cache: true\r\n```\r\n\r\nthe unit test will succeed. The second decrement will not occur.\r\n\r\n**Conclusion:** It seems that the creation of a second cache counter to another record interferes with the the way other cache counters are computed, causing a superfluous decrement. This happens while updating a record's attributes in bulk. A quick survey seemed to show that `assign_attributes` decrements the counter once, and `save!` decrements it a second time in the following code: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/persistence.rb#L429-L430.\r\n\r\nMay or may not be related to #31491 and #31493.", "labels": [], "number": 32079, "updated_at": "2018-03-01 22:55:47", "user": 14120117, "closed_at": "2018-03-01 22:55:47", "id": 299295685, "title": "Double decrement on counter_cache under specific conditions", "url": "https://api.github.com/repos/rails/rails/issues/32079", "created_at": "2018-02-22 10:19:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369759986", "text": "Seems the same issue with #31493. It will fix with #31494.\r\nLet's track that issue and PR. Thanks.", "created_at": "2018-03-01 22:55:47", "user": 987638, "id": 369759986}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "`controls`, `autoplay`, `muted`, and `loop` [are all binary attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video), however the `video_tag` helper returns them as strings in the HTML.\r\n\r\n### Steps to reproduce\r\n\r\nYou may need to configure your `assets.rb` to precompile videos from `/app/assets`.\r\n\r\n1. Add a video to your project under `/app/assets/videos`\r\n1. Use the `video_tag` helper (documented [here](http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag)) to insert the video into a view\r\n1. Specify `controls: true` in the helper, like: `video_tag('video.mp4', controls: true)`\r\n\r\n### Expected behavior\r\n\r\nOutput HTML should be:\r\n\r\n```html\r\n<video controls src=\"/videos/video.mp4\"></video>\r\n```\r\n\r\n### Actual behavior\r\n\r\nOutput HTML is:\r\n\r\n```html\r\n<video controls=\"controls\" src=\"/videos/video.mp4\"></video>\r\n```\r\n\r\n### System configuration\r\n\r\n**Rails version**: 5.1.0\r\n\r\n**Ruby version**: 2.4.1\r\n", "labels": [], "number": 32078, "updated_at": "2018-02-22 22:26:58", "user": 1124253, "closed_at": "2018-02-22 10:51:54", "id": 299282149, "title": "video_tag helper returns incorrect HTML attributes", "url": "https://api.github.com/repos/rails/rails/issues/32078", "created_at": "2018-02-22 09:41:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367636273", "text": "This is expected behavior and it is [documented](http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag). See examples of using `video_tag`.", "created_at": "2018-02-22 10:24:26", "user": 6443532, "id": 367636273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367643977", "text": "Thanks for the report.\r\n\r\nThat Mozilla document references the HTML Living Standard, which [says](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute):\r\n\r\n> If the attribute is present, its value must either be the empty string or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace.\r\n\r\nAs far as I can see, the attribute values are not *necessary*, but they're also not *wrong*. As such, it seems best to leave it as is: they're generated by common boolean-in-HTML-attribute code, which is also used on older tags/attributes, and some people might be relying on us producing valid XHTML. If we had to choose valid HTML5 xor valid XHTML, I'd of course choose the former... but if we can have both, that seems the safe choice.", "created_at": "2018-02-22 10:51:54", "user": 1034, "id": 367643977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367844096", "text": "@matthewd Hey, thanks for the explanation! That's very useful. I didn't know that about the Living Standard's definition of attributes.", "created_at": "2018-02-22 22:26:58", "user": 1124253, "id": 367844096}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\nDisclaimer: this is based off my reading of the code and I have not yet tested this on release vs master rails\r\n\r\nIn master, `ActiveSupport::SecurityUtils.fixed_length_secure_compare` raises an `ArgumentError` if the strings are not of equal length. `request_forgery_protection.rb` is using this method to compare csrf tokens, which means that if a token is modified, rails will 500 instead of using the configured `forgery_protection_strategy`.\r\n\r\n(Guidelines for creating a bug report are [available\r\nhere](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report))\r\n\r\n### Expected behavior\r\nthere should be no exception raised when the submitted and actual csrf tokens have different lengths so that the unverified request can be handled\r\n### Actual behavior\r\nan argument error is raised, preventing handle_unverified_request from being called\r\n\r\n### System configuration\r\n**Rails version**:\r\ncurrent master\r\n**Ruby version**:\r\nany", "labels": [], "number": 32077, "updated_at": "2018-02-22 21:27:24", "user": 6425580, "closed_at": "2018-02-22 21:27:24", "id": 299227622, "title": "fixed_length_secure_compare ArgumentError prevents handle_unverified_request", "url": "https://api.github.com/repos/rails/rails/issues/32077", "created_at": "2018-02-22 05:32:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367827639", "text": "Actually, I'm dumb and missed these checks for length:\r\n```ruby\r\n        if masked_token.length == AUTHENTICITY_TOKEN_LENGTH\r\n          # This is actually an unmasked token. This is expected if\r\n          # you have just upgraded to masked tokens, but should stop\r\n          # happening shortly after installing this gem.\r\n          compare_with_real_token masked_token, session\r\n\r\n        elsif masked_token.length == AUTHENTICITY_TOKEN_LENGTH * 2\r\n          csrf_token = unmask_token(masked_token)\r\n\r\n          compare_with_real_token(csrf_token, session) ||\r\n            valid_per_form_csrf_token?(csrf_token, session)\r\n        else\r\n          false # Token is malformed.\r\n        end\r\n```", "created_at": "2018-02-22 21:27:24", "user": 6425580, "id": 367827639}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Found several instances.\r\n\r\nFollow up on 63d530c5e68a8cf53603744789f53ccbc7ac1a0e", "labels": [], "number": 32076, "updated_at": "2018-02-22 08:33:16", "user": 6261109, "closed_at": "2018-02-22 06:15:12", "id": 299171229, "title": "Call methods with .method_name not ::method_name", "url": "https://api.github.com/repos/rails/rails/issues/32076", "created_at": "2018-02-21 23:42:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367516724", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-21 23:42:28", "user": 7468109, "id": 367516724}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367518987", "text": "Our policy is here: https://github.com/rails/rails/blob/master/CONTRIBUTING.md#did-you-fix-whitespace-format-code-or-make-a-purely-cosmetic-patch", "created_at": "2018-02-21 23:53:50", "user": 4912, "id": 367518987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367520730", "text": "I'm sorry, I did not mean to generate noise and pollute the git history, just stumbled upon 63d530c and ran a `grep`.", "created_at": "2018-02-22 00:02:21", "user": 6261109, "id": 367520730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367578496", "text": "@utilum @sikachu whilst generally I agree with not merging style changes I think this one is fine as the files are low impact in terms of git history.", "created_at": "2018-02-22 06:15:04", "user": 6321, "id": 367578496}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367579996", "text": "Ah, that's fine with me. I wasn't really concern with git history littering anything at all, only concerned if this fell into cosmetic change or not. I'm also not the one who make the call, just a suggester. 😅 ", "created_at": "2018-02-22 06:24:55", "user": 4912, "id": 367579996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367580883", "text": "Well, since we have rubocop installed now I guess we're over the rubicon when it comes to cosmetic changes - added a cop to prevent future violations in 9c0c90979a759a41628e0cd9d73821b0b34d03fc 👮 \r\n\r\n(backported to 5-2-stable in da8d0c94d48a6745d91ec6f2b3e687a06800514d since the branches haven't diverged much yet)", "created_at": "2018-02-22 06:30:30", "user": 6321, "id": 367580883}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Because of this default configuration we're constantly checking if the\r\ndatabase exists when looping through configurations. This is unnecessary\r\nand we should just delete it before we need to loop through\r\nconfigurations.\r\n", "labels": ["activerecord"], "number": 32075, "updated_at": "2018-02-22 20:45:40", "user": 1080678, "closed_at": "2018-02-21 21:32:32", "id": 299102704, "title": "Delete default configuration", "url": "https://api.github.com/repos/rails/rails/issues/32075", "created_at": "2018-02-21 19:44:19", "comments": [], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi — so yeah, this package won't even load for me.\r\n\r\nUpon page rendering I get:\r\n\r\n`Uncaught TypeError: Cannot set property 'ActionCable' of undefined`\r\n\r\nand when I console 'this' within the package script I get:\r\n\r\n![screen shot 2018-02-21 at 10 42 37 am](https://user-images.githubusercontent.com/10913613/36499848-5c35ae36-16f7-11e8-8612-1337876687ce.png)\r\n\r\nIt seems to fire correctly at first, calling 'this' as window, but then fires a second time and is undefined. \r\n\r\nI've established that the first successful call is coming from the reference script that I put into my html file as recommended in a previous issue. It does not solve the problem though as the second time always continues to come back as undefined. It also comes back undefined when there is no reference in the html script. \r\n\r\nThanks \r\n\r\n", "labels": [], "number": 32074, "updated_at": "2018-02-22 06:12:18", "user": 10913613, "closed_at": "None", "id": 299092565, "title": "Cannot set property 'ActionCable' of undefined", "url": "https://api.github.com/repos/rails/rails/issues/32074", "created_at": "2018-02-21 19:12:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367440979", "text": "Thank you for sharing, @colorwheeloflife , it would be helpful if you: \r\n1) refer to previous issues with their number (linked), and (whatever happened with that issue) what the problem is, what you do, what the expected behaviour is, and the actual.\r\n2) Use text, not an image thereof.\r\n3) Provide a reproduction script using one of these templates:\r\nhttps://github.com/rails/rails/blob/master/guides/bug_report_templates/active_job_gem.rb\r\nhttps://github.com/rails/rails/blob/master/guides/bug_report_templates/active_job_master.rb", "created_at": "2018-02-21 19:24:56", "user": 6261109, "id": 367440979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367513894", "text": "#25649 was the previous issue. Their solutions did not work for this problem.\r\n\r\nSolved it separately. I'll let you know what it was so you guys can decide if it leads to any cleanup in the package.\r\n\r\nI am working with the client side in a javascript environment. We have a separate rails api.\r\n\r\nI installed the actioncable npm and was just referencing it. Literally broke at that point without anything else besides including it in my package.json. The npm script did not recognize what 'this' is.  \r\n\r\nHaving the babel loader present \"es2015\" was breaking it. Just so you guys know. \r\n\r\nThanks \r\n\r\n", "created_at": "2018-02-21 23:28:18", "user": 10913613, "id": 367513894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367555756", "text": "Both es2015 and env are not compatible with this actioncable package. \r\n\r\nWould you prefer that I open a new issue? ", "created_at": "2018-02-22 03:25:07", "user": 10913613, "id": 367555756}, {"reactions": {"+1": [1174604]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367578110", "text": "@colorwheeloflife there's no need to open a new issue but a minimal rails app that replicates the problem would be helpful, thanks.", "created_at": "2018-02-22 06:12:17", "user": 6321, "id": 367578110}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. Clone example_app\r\n\r\n        git clone https://github.com/imechemi/example_app\r\n\r\n2. Start server, and hit POST /authors\r\n\r\n       $ curl -H \"Content-Type: application/json\" -X POST -d '{\"values\":[123]}' http://localhost:3000/authors\r\n\r\nWhen I print `param[:values]` in [controller](https://github.com/imechemi/example_app/blob/master/app/controllers/authors_controller.rb#L4), I get array of integers `[123]`. \r\n\r\n3. Quit server, hit integration test for same endpoint ([Test Code](https://github.com/imechemi/example_app/blob/master/test/integration/author_flows_test_test.rb#L5)): \r\n\r\n        $ rails test\r\n\r\nWhen I print `param[:values]` in controller, I get array of strings `[\"123\"]`.\r\n\r\n\r\n(Guidelines for creating a bug report are [available\r\nhere](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report))\r\n\r\n\r\n### Expected behavior\r\n[123]\r\n\r\n### Actual behavior\r\n[\"123\"]\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32073, "updated_at": "2018-02-21 17:06:48", "user": 3127583, "closed_at": "2018-02-21 17:06:48", "id": 299007231, "title": "Param types differ in integration Tests ", "url": "https://api.github.com/repos/rails/rails/issues/32073", "created_at": "2018-02-21 15:10:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367359714", "text": "I tested this with other rails version: `5.2.0.rc1` and `5.1.5.rc1`, still the same. I believe the types should still be consistent in both workflows. ", "created_at": "2018-02-21 15:17:45", "user": 3127583, "id": 367359714}, {"reactions": {"+1": [3127583]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367397838", "text": "@imechemi please read the documentation about changing the request encoding - your test is being treated as a standard form POST and not a JSON post.\r\n\r\nhttp://api.rubyonrails.org/classes/ActionDispatch/IntegrationTest.html#class-ActionDispatch::IntegrationTest-label-Changing+the+request+encoding", "created_at": "2018-02-21 17:06:48", "user": 6321, "id": 367397838}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n`rails new routebug --api --skip-active-record --skip-test`\r\n`cd routebug/`\r\n`rails g controller api/ones`\r\n\r\n```\r\n      create  app/controllers/api/ones_controller.rb\r\n       route  namespace :api do\r\n      end\r\n```\r\n\r\nedit `config/routes.rb` to add the new resource in the namespace\r\n\r\n```\r\nRails.application.routes.draw do\r\n  namespace :api do\r\n    resources :ones\r\n  end\r\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\r\nend\r\n```\r\n\r\n`rails g controller api/twos`\r\n```\r\n      create  app/controllers/api/twos_controller.rb\r\n       route  namespace :api do\r\n      end\r\n```\r\n\r\n`cat config/routes.rb`\r\n\r\n```\r\nRails.application.routes.draw do\r\n  namespace :api do\r\n  end\r\n  namespace :api do\r\n    resources :ones\r\n  end\r\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nI would expect the routes file to remain unchanged on the second generator:\r\n\r\n```\r\nRails.application.routes.draw do\r\n  namespace :api do\r\n    resources :ones\r\n  end\r\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\r\nend\r\n```\r\n\r\n### Actual behavior\r\n\r\nA duplicate api namespace block is generated:\r\n\r\n```\r\nRails.application.routes.draw do\r\n  namespace :api do\r\n  end\r\n  namespace :api do\r\n    resources :ones\r\n  end\r\n  # For details on the DSL available within this file, see http://guides.rubyonrails.org/routing.html\r\nend\r\n```\r\n\r\n### System configuration\r\n\r\n```\r\nrails -v \r\nRails 5.2.0.rc1\r\n```\r\n\r\n**Ruby version**:\r\n\r\n```\r\nruby -v\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n```", "labels": [], "number": 32072, "updated_at": "2018-02-23 09:17:35", "user": 23323, "closed_at": "2018-02-21 23:43:00", "id": 298987295, "title": "[5.2.0.rc1] controller generator outputs duplicate route namespace block when one already exists", "url": "https://api.github.com/repos/rails/rails/issues/32072", "created_at": "2018-02-21 14:18:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367342415", "text": "@moomerman is this a regression or does 5.1 also exhibit this behaviour?", "created_at": "2018-02-21 14:25:35", "user": 6321, "id": 367342415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367344469", "text": "@pixeltrix it looks like this is a new feature in 5.2 (ie. 5.1 doesn't try to generate the routes block)", "created_at": "2018-02-21 14:32:19", "user": 23323, "id": 367344469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367516903", "text": "Thanks for your report. \r\n\r\nI think should not add routes when actions are not specified. So I fixed with 651c2492f079cc2e37bf8e93a9fd23bde1e5349e. Thanks!\r\n", "created_at": "2018-02-21 23:43:26", "user": 987638, "id": 367516903}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367576046", "text": "@y-yagi does that fix the scenario where you do `rails g controller api/ones index` and then `rails g controller api/twos index` (i.e. you specify actions for both). Will that not generate a duplicate namespace or is it just an empty namespace matching issue? I know that thor doesn't have the best tools for patching in source code like this to existing files.", "created_at": "2018-02-22 05:58:01", "user": 6321, "id": 367576046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367953680", "text": "What I fixed is to avoid generating routes if action is not specified. This is to match behavior until 5.1. \r\nAs you pointed out, if action is specified, the same namespace will be generated.  I think that it is difficult to handle this with thor... \r\nBut I will check if it can cope.\r\n", "created_at": "2018-02-23 09:17:35", "user": 987638, "id": 367953680}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [667726]}, "text": "### Summary\r\n\r\nActiveJob was not serializing and deserializing `scheduled_at` properly\r\n\r\n### Other Information\r\n\r\nWe use ActiveJob with DelayedJob as adapter. And we are scheduling job in advance for monitoring purpose. However, `scheduled_at` value is always missing once because it's not even serialized, and also not deserialized as well if given. To achieve that, currently we are monkey patching the `ActiveJob::Core`.\r\n\r\nThis PR fix the issue.", "labels": [], "number": 32071, "updated_at": "2018-02-22 11:28:57", "user": 166730, "closed_at": "2018-02-22 11:22:27", "id": 298944061, "title": "Bugfix activejob improper serialization and deserialization of scheduled_at", "url": "https://api.github.com/repos/rails/rails/issues/32071", "created_at": "2018-02-21 12:03:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367305324", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @schneems (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-21 12:03:50", "user": 7468109, "id": 367305324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367394645", "text": "Hi @saveav - just to confirm the problem your seeing is that you can't access the scheduled_at data when the job is being performed, not that the job isn't being performed. I'm scheduling jobs in the future with a Delayed::Job backend myself and it's working fine.", "created_at": "2018-02-21 16:57:53", "user": 6321, "id": 367394645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367397363", "text": "@pixeltrix yes, correct. only when it's being performed do we lost access to the `scheduled_at` value of the job being performed.", "created_at": "2018-02-21 17:05:32", "user": 166730, "id": 367397363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367630842", "text": "Some clarification is required as to what `#scheduled_at` actually means.. as user of `Delayed::Job`, I was expecting that it will mimic `Delayed::Job#run_at`, which would changed value on failure.. but, some might also thing that it should return the time for when the job is originally set to run at, even after retry on failure..", "created_at": "2018-02-22 10:06:00", "user": 667726, "id": 367630842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367651165", "text": "Hmm, on reflection I'm 👎 on this as `scheduled_at` is an implementation detail of how `enqueue` options are converted to queue adapter semantics. As @ignatiusreza points out there is some confusion as to what it means - for example if you use `retry_job` on a job failure then it will have a new `scheduled_at` or possibly even none depending on the options passed at the time. For an application to use this in a meaningful way seems fraught with danger and the developer would be better off passing an explicit argument.\r\n\r\n@saveav thanks for the PR, sorry that I can't merge it.", "created_at": "2018-02-22 11:22:27", "user": 6321, "id": 367651165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367652550", "text": "no issue @pixeltrix what do you think about adding a new data that is implementation-agnostic? maybe like `first_scheduled_at` or the likes?", "created_at": "2018-02-22 11:28:52", "user": 166730, "id": 367652550}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\nrails s\r\n\r\n### Expected behavior\r\nstart server\r\n\r\n### Actual behavior\r\nstarted server with\r\nDEPRECATION WARNING: Ruby 2.4+ (required by Rails 6) provides Hash#transform_values natively, so requiring active_support/core_ext/hash/transform_values is no longer necessary. Requiring it will raise LoadError in Rails 6.1.\r\n\r\n### System configuration\r\n**Rails version**: Rails 6.0.0.alpha\r\n\r\n**Ruby version**: ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n", "labels": [], "number": 32070, "updated_at": "2018-02-21 04:55:11", "user": 4083992, "closed_at": "2018-02-21 04:55:11", "id": 298809787, "title": "DEPRECATION WARNING: Ruby 2.4+ (required by Rails 6) provides Hash#transform_values natively, so requiring active_support/core_ext/hash/transform_values is no longer necessary. Requiring it will raise LoadError in Rails 6.1.", "url": "https://api.github.com/repos/rails/rails/issues/32070", "created_at": "2018-02-21 01:22:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367204825", "text": "@Fudoshiki Thanks for your report. \r\nCan you help me reproduce the issue? I tried the following steps but couldn't see any warning.\r\n\r\n```sh\r\n$ ruby -v\r\n# ruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin16]\r\n\r\n$ bin/rails -v\r\n# Rails 6.0.0.alpha\r\n\r\n$ rails server\r\n# => Booting Puma\r\n# => Rails 6.0.0.alpha application starting in development \r\n# => Run `rails server -h` for more startup options\r\n# Puma starting in single mode...\r\n# * Version 3.11.2 (ruby 2.5.0-p0), codename: Love Song\r\n# * Min threads: 5, max threads: 5\r\n# * Environment: development\r\n# * Listening on tcp://0.0.0.0:3000\r\n# Use Ctrl-C to stop\r\n# ^C- Gracefully stopping, waiting for requests to finish\r\n# === puma shutdown: 2018-02-20 19:44:48 -0800 ===\r\n# - Goodbye!\r\n# Exiting\r\n\r\n$ rails console\r\n# Loading development environment (Rails 6.0.0.alpha)\r\n# irb(main):001:0> {a: 'A'}.transform_values(&:downcase)\r\n# => {:a=>\"a\"}\r\n```\r\n\r\nFor completeness, I generated a brand new app from the latest master by running `railties/exe/rails new my_app --dev`.", "created_at": "2018-02-21 03:47:29", "user": 10076, "id": 367204825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367207624", "text": "```\r\n$ rails -v\r\nRails 6.0.0.alpha\r\n\r\n$ ruby -v\r\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\r\n\r\n$ rails s\r\nDEPRECATION WARNING: Ruby 2.4+ (required by Rails 6) provides Hash#transform_values natively, so requiring active_support/core_ext/hash/transform_values is no longer necessary. Requiring it will raise LoadError in Rails 6.1. (called from require at ~/.rvm/gems/ruby-2.5.0/gems/bootsnap-1.1.8/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:17)\r\n=> Booting Puma\r\n=> Rails 6.0.0.alpha application starting in development \r\n=> Run `rails server -h` for more startup options\r\nPuma starting in single mode...\r\n* Version 3.11.2 (ruby 2.5.0-p0), codename: Love Song\r\n* Min threads: 5, max threads: 5\r\n* Environment: development\r\n* Listening on tcp://0.0.0.0:3000\r\nUse Ctrl-C to stop\r\n^C- Gracefully stopping, waiting for requests to finish\r\n=== puma shutdown: 2018-02-21 09:05:27 +0500 ===\r\n- Goodbye!\r\nExiting\r\n\r\n$ rails c\r\nDEPRECATION WARNING: Ruby 2.4+ (required by Rails 6) provides Hash#transform_values natively, so requiring active_support/core_ext/hash/transform_values is no longer necessary. Requiring it will raise LoadError in Rails 6.1. (called from require at ~/.rvm/gems/ruby-2.5.0/gems/bootsnap-1.1.8/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:17)\r\nRunning via Spring preloader in process 21826\r\nLoading development environment (Rails 6.0.0.alpha)\r\n2.5.0 :001 > {a: 'A'}.transform_values(&:downcase)\r\n => {:a=>\"a\"} \r\n```", "created_at": "2018-02-21 04:10:02", "user": 4083992, "id": 367207624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367209147", "text": "**bootsnap** should ignore this file  https://github.com/rails/rails/blob/d4eb0dc89ee6b476e2e10869dc282a96f956c6c7/activesupport/lib/active_support/core_ext/hash/transform_values.rb", "created_at": "2018-02-21 04:21:50", "user": 4083992, "id": 367209147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367211221", "text": "bootsnap should only require that file if some other file is requesting it.\r\n\r\nConfiguring deprecations to `:raise` should show the full backtrace, which might make it easier to find where that is happening.", "created_at": "2018-02-21 04:37:45", "user": 1034, "id": 367211221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367211659", "text": "Thanks @Fudoshiki ! Mystery solved, I had created my app with `--dev` and bootsnap is implicitly skipped for `rails new --dev` app since 373a5683240", "created_at": "2018-02-21 04:41:09", "user": 10076, "id": 367211659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367212033", "text": "@Fudoshiki Could you share the entire `Gemfile` of your app? That might help figure out which library is requesting the `transform_values` file.", "created_at": "2018-02-21 04:43:55", "user": 10076, "id": 367212033}, {"reactions": {"+1": [10076]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367213435", "text": "Found in https://github.com/telegram-bot-rb/telegram-bot/blob/eb24816e1ef46667165d818549b0257aafd211dc/lib/telegram/bot/config_methods.rb\r\n\r\nThank you @claudiob @matthewd ", "created_at": "2018-02-21 04:55:09", "user": 4083992, "id": 367213435}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It seems, unscoped is having some issues with joins and includes, any idea how we can fix it ?\r\n\r\n    class Document < ActiveRecord::Base\r\n      include KillMeSoftly\r\n      has_many :versions, dependent: :destroy\r\n      \r\n      default_scope { where(is_deleted: false, is_archived: false) }\r\n    end\r\n\r\n    class Version < ActiveRecord::Base\r\n      include KillMeSoftly\r\n      belongs_to :document\r\n      \r\n       default_scope { where(is_deleted: false, is_archived: false) }\r\n    end\r\n\r\nI'm using following versions:-\r\n\r\n     Rails 4.2.10 upgraded to Rails 5.0.2\r\n     ruby 2.4.2p198\r\n\r\nCalling this in console \r\n    \r\n    Document.unscoped do \r\n     Version.unscoped do\r\n       Document.joins(:versions)\r\n     end\r\n    end\r\n\r\ngives this result. How I can unscoped default scoped values.\r\n     \r\n     SELECT \"documents\".* FROM \"documents\" INNER JOIN \"versions\" ON \r\n     \"versions\".\"document_id\" = \"documents\".\"id\" AND \"versions\".\"is_deleted\" = $1 \r\n     AND \"versions\".\"is_archived\" = $2  [[\"is_deleted\", \"f\"], [\"is_archived\", \"f\"]]\r\n\r\nOther Example with includes: while joining it is ignoring default_scope attributes.\r\n\r\n    Document.unscoped.includes(:versions).where(phase_id: xxxx, is_archived: true, versions: { \r\n    is_archived: true, is_deleted: false }).count\r\n\r\n    SELECT COUNT(DISTINCT \"documents\".\"id\") FROM \"documents\" LEFT OUTER JOIN \"versions\" ON \r\n    \"versions\".\"document_id\" = \"documents\".\"id\" AND \"versions\".\"is_deleted\" = $1 AND \r\n    \"versions\".\"is_archived\" = $2 WHERE \"documents\".\"phase_id\" = $3 AND \"documents\".\"is_archived\" = \r\n     $4 AND \"versions\".\"is_archived\" = $5 AND \"versions\".\"is_deleted\" = $6  [[\"is_deleted\", \"f\"], \r\n     [\"is_archived\", \"f\"], [\"phase_id\", 5363], [\"is_archived\", \"t\"], [\"is_archived\", \"t\"], [\"is_deleted\", \"f\"]]", "labels": [], "number": 32069, "updated_at": "2018-02-27 16:12:36", "user": 1460838, "closed_at": "2018-02-27 16:12:36", "id": 298644778, "title": "unscoped default scope with Joins or includes", "url": "https://api.github.com/repos/rails/rails/issues/32069", "created_at": "2018-02-20 15:49:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367222667", "text": "Rails 4.2 is not supported anymore for anything besides security fixes.\r\nPlease check whether your issue can reproduce with latest Rails. Thanks.", "created_at": "2018-02-21 06:00:43", "user": 987638, "id": 367222667}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368471880", "text": "@y-yagi i updated to Rails 5.0.2 and still I'm facing same issue. Joins dont respect unscoped. ", "created_at": "2018-02-26 11:32:04", "user": 1460838, "id": 368471880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368472177", "text": "![image](https://user-images.githubusercontent.com/1460838/36668316-5858a4d2-1b0a-11e8-80d6-9589ea5eb8c5.png)\r\n", "created_at": "2018-02-26 11:33:23", "user": 1460838, "id": 368472177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368472584", "text": "I just wan to avoid/ignore default scope in joins or includes. any idea how i can do it ?", "created_at": "2018-02-26 11:34:56", "user": 1460838, "id": 368472584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368487250", "text": "Can you create an executable test case with using this [template](https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_master.rb)?\r\n", "created_at": "2018-02-26 12:39:37", "user": 987638, "id": 368487250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368932274", "text": "This should be fixed by #30267 in 5.0.6.", "created_at": "2018-02-27 16:12:36", "user": 12642, "id": 368932274}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nHere is a sample with the error:  https://github.com/tomascharad/rails-public-js-files-duplication\r\n\r\n1. Start the server (`rails s`)\r\n2. Open your chrome network tab\r\n3. Enable \"Disable cache\"\r\n4. Enable \"Slow 3G\" network throttling\r\n![image](https://user-images.githubusercontent.com/1534092/36423643-8895e744-161f-11e8-9a25-cd9574ac4e9d.png)\r\n5. Hit Refresh\r\n6. Before angular or main.d90603e7e9c46c1577d5.bundle.js get completely loaded:\r\n6.1. Disable \"Disable cache\"\r\n![image](https://user-images.githubusercontent.com/1534092/36423291-1ca555f2-161e-11e8-9618-f5554dad5482.png)\r\n6.2. Hit Refresh again\r\n7. Wait until the js files load partially (Be sure to not load them completely)\r\n![image](https://user-images.githubusercontent.com/1534092/36423429-b7085176-161e-11e8-8dd5-029576bd3ec9.png)\r\n8. Keep hiting refresh and loading these two files partially\r\n\r\n9. Now two things can happen, If you successfully duplicated the files:\r\n9.1. And keep hitting refresh, at one moment the files are going to throw error\r\n9.2 If you load them completely, they will throw error\r\n\r\n![image](https://user-images.githubusercontent.com/1534092/36423501-f3b1d2d2-161e-11e8-8c53-05645b976aba.png)\r\n9.3: I believe that there is something wrong in the file size calculation in `Content-Range` header\r\n![image](https://user-images.githubusercontent.com/1534092/36423798-fae006fe-161f-11e8-88dc-bd8baa53e877.png)\r\n\r\n10. The error will change depending with the duplication\r\n11. If you hit refresh now, with \"Disable cache\" Disabled, then the error doesn't leave\r\n11.1: Note that files are loaded from \"Memory cache\"\r\n\r\n![image](https://user-images.githubusercontent.com/1534092/36423531-1740314e-161f-11e8-804c-8bdcf394760e.png)\r\n\r\n12. This also happen with only one file, I just left two for isolating the cause to rails public server.\r\n\r\n### Expected behavior\r\nFiles shouldn't get duplicated.\r\n\r\n### Actual behavior\r\nThe js files get duplicated like and they start throwing errors, after this happened, the browser caches them so its impossible for the end user to recover from that state:\r\n\r\n![image](https://user-images.githubusercontent.com/1534092/36423207-b6aaa630-161d-11e8-8a09-e5a331d995ec.png)\r\n\r\n### System configuration\r\n**Rails version**:\r\nrails (5.1.2)\r\n**Ruby version**:\r\nruby 2.4.1p111", "labels": [], "number": 32068, "updated_at": "2018-02-20 16:56:44", "user": 1534092, "closed_at": "2018-02-20 15:44:27", "id": 298574070, "title": "Duplicated .js files content from public server", "url": "https://api.github.com/repos/rails/rails/issues/32068", "created_at": "2018-02-20 12:20:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367011285", "text": "After removing all the third-party gems and their respective initializers I finally managed to replicate the problem.\r\n\r\nTurns out that this is cause by rack/rack@e0ac329 - the alias of `to_path` means that the rack handler for webrick just passes the file object back as the body and it loses the offset so reads from the beginning of the file.\r\n\r\nHave you tried using puma instead of webrick?", "created_at": "2018-02-20 15:20:50", "user": 6321, "id": 367011285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367012886", "text": "Many thanks @pixeltrix \r\n\r\nI think I haven't been able to reproduce it from a new rails environment.\r\nWill try to change to puma and let you know.\r\nMany thanks.", "created_at": "2018-02-20 15:25:22", "user": 1534092, "id": 367012886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367019265", "text": "Closing since this is a problem in Rack: rack/rack#1235", "created_at": "2018-02-20 15:44:27", "user": 6321, "id": 367019265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367043571", "text": "Many thanks @pixeltrix ", "created_at": "2018-02-20 16:56:44", "user": 1534092, "id": 367043571}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nWrite a controller test like so:\r\n`put :my_path, params: {path_param: x, query_param: y}, body: { body_param: z }.to_json, as: :json`\r\n\r\n### Expected behavior\r\n\r\nquery_param should be available on the params on the controller.\r\n\r\n(This can be worked around by putting the query param in the `body` or removing the body completely and adding it to `params` but that creates a difference between test and application)\r\n\r\n### Actual behavior\r\n\r\n`path_param` and `body_param` are available on the strong params object but `query_param` does not exist in that hash.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: 2.4.1\r\n", "labels": [], "number": 32067, "updated_at": "2018-02-20 11:13:54", "user": 1580589, "closed_at": "2018-02-20 11:13:54", "id": 298538207, "title": "Query params are lost on a test with body", "url": "https://api.github.com/repos/rails/rails/issues/32067", "created_at": "2018-02-20 10:17:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366933451", "text": "this version of ruby ​​is problematic, replace it with 2.4.2", "created_at": "2018-02-20 10:25:59", "user": 16584604, "id": 366933451}, {"reactions": {"+1": [1580589]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366945412", "text": "@tamarr controller tests are deprecated so we're not fixing bugs in them - use ActionDispatch::IntegrationTest instead. Not sure about 5.1 but on master using the body kwarg has no effect on what's in the params hash.\r\n\r\nDuplicate of #23779", "created_at": "2018-02-20 11:13:54", "user": 6321, "id": 366945412}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nUse active storage variants on S3 when you have `s3:GetObject` but no `s3:ListBucket` permission\r\n\r\n### Expected behavior\r\nTell us what should happen\r\n\r\nI'd expect active storage to work with only `s3:GetObject` permissions\r\n\r\n### Actual behavior\r\nTell us what happens instead. Following error is raised:\r\n\r\n```\r\n     \r\n  Aws::S3::Errors::Forbidden (): \r\n     \r\n  vendor/bundle/ruby/2.4.0/gems/aws-sdk-s3-1.8.0/lib/aws-sdk-s3/object.rb:262:in `rescue in exists?' \r\n  vendor/bundle/ruby/2.4.0/gems/aws-sdk-s3-1.8.0/lib/aws-sdk-s3/object.rb:258:in `exists?' \r\n  vendor/bundle/ruby/2.4.0/gems/activestorage-5.2.0.beta2/lib/active_storage/service/s3_service.rb:49:in `block in exist?' \r\n  vendor/bundle/ruby/2.4.0/gems/appsignal-2.4.3/lib/appsignal/hooks/active_support_notifications.rb:19:in `block in instrument' \r\n  vendor/bundle/ruby/2.4.0/gems/activesupport-5.2.0.beta2/lib/active_support/notifications/instrumenter.rb:23:in `instrument' \r\n  vendor/bundle/ruby/2.4.0/gems/appsignal-2.4.3/lib/appsignal/hooks/active_support_notifications.rb:36:in `instrument' \r\n  vendor/bundle/ruby/2.4.0/gems/appsignal-2.4.3/lib/appsignal/hooks/active_support_notifications.rb:18:in `instrument' \r\n  vendor/bundle/ruby/2.4.0/gems/activestorage-5.2.0.beta2/lib/active_storage/service.rb:108:in `instrument' \r\n  vendor/bundle/ruby/2.4.0/gems/activestorage-5.2.0.beta2/lib/active_storage/service/s3_service.rb:48:in `exist?' \r\n  vendor/bundle/ruby/2.4.0/gems/activestorage-5.2.0.beta2/app/models/active_storage/variant.rb:75:in `processed?' \r\n  vendor/bundle/ruby/2.4.0/gems/activestorage-5.2.0.beta2/app/models/active_storage/variant.rb:47:in `processed' \r\n```\r\n\r\n### System configuration\r\n**Rails version**: Rails 5.2.0.beta2\r\n**Ruby version**: ruby 2.4.0p0\r\n", "labels": [], "number": 32066, "updated_at": "2018-02-20 17:44:04", "user": 52435, "closed_at": "2018-02-20 17:44:04", "id": 298511950, "title": "Active Storage/s3_service requires s3:ListBucket premission for exists?", "url": "https://api.github.com/repos/rails/rails/issues/32066", "created_at": "2018-02-20 08:45:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366907495", "text": "According to s3 documentation operation can raise \"access denied\"  when you have no `s3:ListBucket` permission, i think s3 service could handle that case, as AFAIK it doesn't needs list premissions.\r\n\r\nhttps://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html\r\n\r\n> If the object you request does not exist, the error Amazon S3 returns depends on whether you also have the s3:ListBucket permission.\r\n>\r\n>    If you have the s3:ListBucket permission on the bucket, Amazon S3 will return an HTTP status code 404 (\"no such key\") error.\r\n>\r\n>   if you don’t have the s3:ListBucket permission, Amazon S3 will return an HTTP status code 403 (\"access denied\") error.\r\n\r\n", "created_at": "2018-02-20 08:48:12", "user": 52435, "id": 366907495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366932904", "text": "@mfazekas from that documentation it seems there's no way to definitively tell whether an object exists if you don't have ListBucket permission. It would seem dangerous to capture the 403 error and return false for `exists?` since that could lead to uploads being overwritten.", "created_at": "2018-02-20 10:23:54", "user": 6321, "id": 366932904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366939554", "text": "@pixeltrix if you have s3:GetObject then `exists?` should return true if the file is there. \r\n\r\n```\r\nirb(main):004:0> variant.service.send(:object_for,\"foo\").exists?\r\nAws::S3::Errors::Forbidden: \r\n\tfrom (irb):4\r\nirb(main):005:0> variant.service.send(:object_for,\"foo\").put(body:\"foo\")\r\n=> #<struct Aws::S3::Types::PutObjectOutput expiration=nil, etag=\"\\\"acbd18db4cc2f85cedef654fccc4a4d8\\\"\", server_side_encryption=nil, version_id=nil, sse_customer_algorithm=nil, sse_customer_key_md5=nil, ssekms_key_id=nil, request_charged=nil>\r\nirb(main):006:0> variant.service.send(:object_for,\"foo\").exists?\r\n=> true\r\n```\r\n\r\nI assume if you don't have `s3:GetObject` but you have `s3:PutObject` permissions then, yes could overwrite, but as i understand this is path is only used on variants/previews so in that case you need to download to original to resize, if you don't have permission for that then you won't get to the upload which would overwrite.", "created_at": "2018-02-20 10:49:59", "user": 52435, "id": 366939554}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366956835", "text": "@mfazekas whilst I accept that currently it's probably not going to cause a problem if we assume that 403 is really a 404 error,  the `ActiveStorage::Service#exist?` method is a documented public API so may be used by application developers. Is there a reason why you wouldn't grant `ListBucket` permission to the application - either via an IAM instance profile or an explicit bucket policy for specific IP addresses.", "created_at": "2018-02-20 12:04:13", "user": 6321, "id": 366956835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367016641", "text": "Sure we can give reconfigure our s3 so we have `ListBucket`, we're migrating from Shrine and it was working fine with current permissions.\r\n\r\nIt think it would be nice if ActiveStorage could work with only Get and PutObject permissions and did not require ListBucket, as it could be implemented without it.\r\n\r\nI'd argue it's fine for the `ActiveStorage::Service#exist?` to be implemented the way it's ideal for `ActiveStorage`. That is to return `false` even in case the file is there but you don't either `list` or `get` permission. In a concurrent environment `put(p,data) unless exists?(p)`  can be an overwrite with the current semantics too.\r\n\r\nFeel free to close the issue if you disagree.", "created_at": "2018-02-20 15:36:27", "user": 52435, "id": 367016641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367030234", "text": "@mfazekas turns out we need `ListObject` to batch delete all the variants: https://github.com/rails/rails/blob/c42dafd437f6392bf0fb41ac751a8e231940b67e/activestorage/lib/active_storage/service/s3_service.rb#L49\r\n\r\nWe should document this though, so thanks for the report.", "created_at": "2018-02-20 16:16:47", "user": 6321, "id": 367030234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367058638", "text": "Yes you're right, i've overlooked deletion: it does require `List` permissions, thanks for pointing this out.", "created_at": "2018-02-20 17:44:04", "user": 52435, "id": 367058638}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is pretty much just a housekeeping PR.\r\n\r\nI was browsing http://edgeapi.rubyonrails.org/ and notices that this class is listed on the left size with no namespace prefix. Given that this class belongs to Rails framework, and that it's already in `railties/lib/rails` hierarchy, I believe it's best to move this class down into `Rails` module.\r\n\r\nIn some sense, I believe that this could be considered a breaking change. However, given that user will access this class through rake task, I think this is fine to change.\r\n\r\nPlease let me know what you think.", "labels": [], "number": 32065, "updated_at": "2018-03-22 17:06:44", "user": 4912, "closed_at": "None", "id": 298463801, "title": "Move SourceAnnotationExtractor under Rails module", "url": "https://api.github.com/repos/rails/rails/issues/32065", "created_at": "2018-02-20 03:47:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366860260", "text": "https://github.com/search?l=Ruby&q=SourceAnnotationExtractor+-filename%3Aannotations.rake&type=Code seems to show some usage, so I think it's worth a deprecation.", "created_at": "2018-02-20 03:54:58", "user": 1034, "id": 366860260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366867741", "text": "@matthewd sounds good. So deprecate the constant in 6.0, then remove it in 6.1?", "created_at": "2018-02-20 05:03:08", "user": 4912, "id": 366867741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366871074", "text": "Yup. Rename stays the same; we just add in a http://api.rubyonrails.org/classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html for the old name.", "created_at": "2018-02-20 05:29:40", "user": 1034, "id": 366871074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/375297670", "text": "@matthewd sorry for the delay — I just updated the PR with two things:\r\n\r\n* I add deprecation notice for SourceAnnotationExtractor as you suggested.\r\n* I also moved the Annotation sub-struct into a proper class so RDoc would properly render it in the documentation.\r\n\r\nPlease let me know if you have any feedback. Thanks!", "created_at": "2018-03-22 13:04:58", "user": 4912, "id": 375297670}], "assignees": [], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nSince #32034 Rails 6 requires Ruby 2.4.1 or higher.\r\nTwo CI jobs configured with the latest version of`jruby-9.1.15.0`\r\ncompatibile with Ruby 2.3.3 are getting errors:\r\n\r\nhttps://travis-ci.org/rails/rails/jobs/343519339\r\n\r\n```\r\nBundler could not find compatible versions for gem \"ruby\":\r\n  In Gemfile:\r\n    ruby java\r\n    rails java was resolved to 6.0.0.alpha, which depends on\r\n      ruby (>= 2.4.1) java\r\nCould not find gem 'ruby (>= 2.4.1)', which is required by gem 'rails', in any\r\nof the relevant sources:\r\n```\r\n\r\n### Other Information\r\n\r\nInstead of running CI with `jruby-head`, there could be other way \r\nto just dropping CI with JRuby 9.1.x and add CI with JRuby 9.2 once it is generally released.", "labels": [], "number": 32064, "updated_at": "2018-02-21 10:25:33", "user": 73684, "closed_at": "2018-02-21 10:25:33", "id": 298446239, "title": "CI with `jruby-head` compatible with Ruby 2.4.1", "url": "https://api.github.com/repos/rails/rails/issues/32064", "created_at": "2018-02-20 01:32:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366842334", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-20 01:32:06", "user": 7468109, "id": 366842334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366842575", "text": "cc @enebo @headius ", "created_at": "2018-02-20 01:34:05", "user": 73684, "id": 366842575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366847625", "text": "Two jobs are getting errors.\r\n\r\nhttps://travis-ci.org/rails/rails/jobs/343639863\r\nhttps://travis-ci.org/rails/rails/jobs/343639864\r\n\r\nlet me take a look at these errors later.", "created_at": "2018-02-20 02:11:55", "user": 73684, "id": 366847625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366977314", "text": "Looks like the errors reproduces without Rails using `jruby-head`.\r\nhttps://travis-ci.org/sparklemotion/nokogiri/jobs/343819697\r\n\r\n```\r\nLoadError: load error: nokogiri/nokogiri -- java.lang.ClassFormatError: Duplicate method name&signature in class file nokogiri/XmlSyntaxError$INVOKER$i$to_s_DBG\r\n```", "created_at": "2018-02-20 13:29:08", "user": 73684, "id": 366977314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367073482", "text": "Looking into this today.", "created_at": "2018-02-20 18:31:28", "user": 10135, "id": 367073482}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367083082", "text": "I had some trouble getting nokogiri to build (could not find \"rex\" command) but I believe this is fixed on JRuby master now. The issue was that we stopped paying attention to the `CompatVersion` field on the `JRubyMethod` annotation, since we no longer supported separate compat versions. In this case, both a 1.8 and 1.9+ version of the same method existed, and we were mistakenly generating the binding twice. From now on 1.8 compat methods will be ignored.", "created_at": "2018-02-20 19:03:11", "user": 10135, "id": 367083082}, {"reactions": {"+1": [45967]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367151669", "text": "Thanks for the fix. \r\n\r\nWill see when newer versions of JRuby including https://github.com/jruby/jruby/commit/065cf7813511083f785239b2329f15fc9c0b27b6 is available from `jruby-head` at rvm.", "created_at": "2018-02-20 23:01:42", "user": 73684, "id": 367151669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367153921", "text": "I am not sure how rvm decides what to build for jruby-head, but I will kick off a snapshot build on our CI and make sure we have a green build on travis.", "created_at": "2018-02-20 23:11:32", "user": 10135, "id": 367153921}, {"reactions": {"heart": [73684]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367154464", "text": "Nightly builds are here: https://projectodd.ci.cloudbees.com/view/JRuby/job/jruby-development-dist/lastSuccessfulBuild/artifact/release/\r\n\r\nJRuby master should be green on Travis soon, which is how Travis decides to update its \"jruby-head\".", "created_at": "2018-02-20 23:13:51", "user": 10135, "id": 367154464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367213069", "text": "maybe its also worth looking into that Nokogiri issue itself - as it runs on JRuby 1.7.x but only in 1.9 mode", "created_at": "2018-02-21 04:52:14", "user": 45967, "id": 367213069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367276008", "text": "This error has disappeared. Likely fixed by https://github.com/jruby/jruby/commit/065cf7813511083f785239b2329f15fc9c0b27b6\r\n```ruby\r\nLoadError: load error: nokogiri/nokogiri -- java.lang.ClassFormatError: Duplicate method name&signature in class file nokogiri/XmlSyntaxError$INVOKER$i$to_s_DBG\r\n```\r\n", "created_at": "2018-02-21 10:11:48", "user": 73684, "id": 367276008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367278072", "text": "\r\n* `am,amo,aj` are [green](https://travis-ci.org/rails/rails/jobs/344194304) with jruby-head\r\n\r\n```ruby\r\n    - rvm: jruby-head\r\n      jdk: oraclejdk8\r\n      env:\r\n        - \"GEM=am,amo,aj\"\r\n```        \r\n\r\n* `ap` is [red](https://travis-ci.org/rails/rails/jobs/344194302) with jruby-head\r\n\r\n```ruby\r\n    - rvm: jruby-head\r\n      jdk: oraclejdk8\r\n      env:\r\n        - \"GEM=ap\"\r\n```\r\n\r\nThe failure has been already reported #30542 since JRuby 9.1.13.0. At least this is not a regression with jruby-head. \r\n\r\n```ruby\r\nFailure:\r\nTestCaseTest#test_should_impose_childless_html_tags_in_html [/home/travis/build/rails/rails/actionpack/test/controller/test_case_test.rb:383]:\r\nExpected at least 1 element matching \"root > area + p\", found 0..\r\nExpected 0 to be >= 1.\r\n```\r\n\r\nI think it is worth to run CI with jruby-head now.\r\n", "created_at": "2018-02-21 10:19:18", "user": 73684, "id": 367278072}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [38524]}, "text": "According to Active Storage's guide, it supports all of MiniMagick's transformations. MiniMagicks' first usage example is one combining resize and format. However, format is the only transformation I couldn't get to work so far. Rotate, crop, resize all worked fine.\r\n\r\n### Steps to reproduce\r\n1 - Attach a png image;\r\n2 - Request a variant `.variant(format:\"JPEG\")`;\r\n\r\n### Expected behavior\r\nA JPEG variant is generated.\r\n\r\n### Actual behavior\r\nRails throws a NoMethodError.\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.2.0.rc1\r\n**Ruby version**:\r\n2.4.3 and 2.5.0\r\n**MiniMagick version**:\r\n4.8.0\r\n\r\n### Relevant Code ###\r\n```\r\nclass Photo < ApplicationRecord\r\n  belongs_to :event\r\n  has_one_attached :file\r\nend\r\n\r\n<%= image_tag @event.photo.file.variant(format:\"JPEG\") %>\r\n<%= image_tag @event.photo.file.variant(format:\"JPG\") %>\r\n```\r\n### Stack Trace\r\n```\r\nNoMethodError (you must call #format on a MiniMagick::Image directly):\r\n  \r\nmini_magick (4.8.0) lib/mini_magick/tool/mogrify_restricted.rb:10:in `format'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:72:in `public_send'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:72:in `pass_transform_argument'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:57:in `block (3 levels) in transform'\r\nmini_magick (4.8.0) lib/mini_magick/image.rb:565:in `block in mogrify'\r\nmini_magick (4.8.0) lib/mini_magick/tool.rb:39:in `new'\r\nmini_magick (4.8.0) lib/mini_magick/image.rb:564:in `mogrify'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:51:in `block (2 levels) in transform'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:50:in `each'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:50:in `block in transform'\r\nactivesupport (5.2.0.rc1) lib/active_support/notifications.rb:170:in `instrument'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variation.rb:49:in `transform'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variant.rb:122:in `transform'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variant.rb:86:in `block in process'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variant.rb:110:in `open_image'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variant.rb:85:in `process'\r\nactivestorage (5.2.0.rc1) app/models/active_storage/variant.rb:53:in `processed'\r\nactivestorage (5.2.0.rc1) app/controllers/active_storage/variants_controller.rb:12:in `show'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/basic_implicit_render.rb:6:in `send_action'\r\nactionpack (5.2.0.rc1) lib/abstract_controller/base.rb:194:in `process_action'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/rendering.rb:30:in `process_action'\r\nactionpack (5.2.0.rc1) lib/abstract_controller/callbacks.rb:42:in `block in process_action'\r\nactivesupport (5.2.0.rc1) lib/active_support/callbacks.rb:132:in `run_callbacks'\r\nactionpack (5.2.0.rc1) lib/abstract_controller/callbacks.rb:41:in `process_action'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/rescue.rb:22:in `process_action'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/instrumentation.rb:34:in `block in process_action'\r\nactivesupport (5.2.0.rc1) lib/active_support/notifications.rb:168:in `block in instrument'\r\nactivesupport (5.2.0.rc1) lib/active_support/notifications/instrumenter.rb:23:in `instrument'\r\nactivesupport (5.2.0.rc1) lib/active_support/notifications.rb:168:in `instrument'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/instrumentation.rb:32:in `process_action'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal/params_wrapper.rb:256:in `process_action'\r\nactiverecord (5.2.0.rc1) lib/active_record/railties/controller_runtime.rb:24:in `process_action'\r\nactionpack (5.2.0.rc1) lib/abstract_controller/base.rb:134:in `process'\r\nactionview (5.2.0.rc1) lib/action_view/rendering.rb:32:in `process'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal.rb:191:in `dispatch'\r\nactionpack (5.2.0.rc1) lib/action_controller/metal.rb:252:in `dispatch'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/routing/route_set.rb:52:in `dispatch'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/routing/route_set.rb:34:in `serve'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/journey/router.rb:52:in `block in serve'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/journey/router.rb:35:in `each'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/journey/router.rb:35:in `serve'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/routing/route_set.rb:840:in `call'\r\nomniauth (1.8.1) lib/omniauth/strategy.rb:190:in `call!'\r\nomniauth (1.8.1) lib/omniauth/strategy.rb:168:in `call'\r\nomniauth (1.8.1) lib/omniauth/strategy.rb:190:in `call!'\r\nomniauth (1.8.1) lib/omniauth/strategy.rb:168:in `call'\r\nomniauth (1.8.1) lib/omniauth/builder.rb:63:in `call'\r\nrack (2.0.4) lib/rack/tempfile_reaper.rb:15:in `call'\r\nrack (2.0.4) lib/rack/etag.rb:25:in `call'\r\nrack (2.0.4) lib/rack/conditional_get.rb:25:in `call'\r\nrack (2.0.4) lib/rack/head.rb:12:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/http/content_security_policy.rb:18:in `call'\r\nrack (2.0.4) lib/rack/session/abstract/id.rb:232:in `context'\r\nrack (2.0.4) lib/rack/session/abstract/id.rb:226:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/cookies.rb:663:in `call'\r\nactiverecord (5.2.0.rc1) lib/active_record/migration.rb:558:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/callbacks.rb:28:in `block in call'\r\nactivesupport (5.2.0.rc1) lib/active_support/callbacks.rb:98:in `run_callbacks'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/callbacks.rb:26:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/executor.rb:14:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/debug_exceptions.rb:61:in `call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:135:in `call_app'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:28:in `block in call'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `catch'\r\nweb-console (3.5.1) lib/web_console/middleware.rb:18:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/show_exceptions.rb:33:in `call'\r\nrailties (5.2.0.rc1) lib/rails/rack/logger.rb:38:in `call_app'\r\nrailties (5.2.0.rc1) lib/rails/rack/logger.rb:26:in `block in call'\r\nactivesupport (5.2.0.rc1) lib/active_support/tagged_logging.rb:71:in `block in tagged'\r\nactivesupport (5.2.0.rc1) lib/active_support/tagged_logging.rb:28:in `tagged'\r\nactivesupport (5.2.0.rc1) lib/active_support/tagged_logging.rb:71:in `tagged'\r\nrailties (5.2.0.rc1) lib/rails/rack/logger.rb:26:in `call'\r\nsprockets-rails (3.2.1) lib/sprockets/rails/quiet_assets.rb:13:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/remote_ip.rb:81:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/request_id.rb:27:in `call'\r\nrack (2.0.4) lib/rack/method_override.rb:22:in `call'\r\nrack (2.0.4) lib/rack/runtime.rb:22:in `call'\r\nactivesupport (5.2.0.rc1) lib/active_support/cache/strategy/local_cache_middleware.rb:29:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/executor.rb:14:in `call'\r\nactionpack (5.2.0.rc1) lib/action_dispatch/middleware/static.rb:127:in `call'\r\nrack (2.0.4) lib/rack/sendfile.rb:111:in `call'\r\nrailties (5.2.0.rc1) lib/rails/engine.rb:524:in `call'\r\npuma (3.11.2) lib/puma/configuration.rb:225:in `call'\r\npuma (3.11.2) lib/puma/server.rb:624:in `handle_request'\r\npuma (3.11.2) lib/puma/server.rb:438:in `process_client'\r\npuma (3.11.2) lib/puma/server.rb:302:in `block in run'\r\npuma (3.11.2) lib/puma/thread_pool.rb:120:in `block in spawn_thread'\r\n```", "labels": ["activestorage"], "number": 32063, "updated_at": "2018-02-21 22:48:19", "user": 1793280, "closed_at": "2018-02-21 22:48:19", "id": 298430073, "title": "ActiveStorage throws NoMethodError when using MiniMagick's \"format\"", "url": "https://api.github.com/repos/rails/rails/issues/32063", "created_at": "2018-02-19 23:45:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367467762", "text": "I took a look at the Variant model, and noticed that it has a `transform` method that probably would fit my need. Unfortunately it is private and it seems to only be used to take png images of files that are not images. \r\n\r\nFor now I'm solving my problem by going through MiniMagick, but it would be nice if ActiveStorage could it for us. \r\n\r\nThis is the code I'm using in the job that generates the variants.\r\n````\r\nif photo.file.content_type != \"image/jpeg\"\r\n  image = MiniMagick::Image.open(url_for(photo.file))\r\n  image.format \"jpeg\"\r\n  photo.file.attach(io: File.open(image.path), filename: photo.file.filename.to_s, content_type: \"image/jpg\")\r\nend\r\n````", "created_at": "2018-02-21 20:51:06", "user": 1793280, "id": 367467762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367503976", "text": "Thanks for the report, but variants are unlikely to support converting images to a specified format without a compelling reason. They’re intended for visibly transforming images.", "created_at": "2018-02-21 22:48:19", "user": 94129, "id": 367503976}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [987638]}, "text": "Remove redundant assertions of an absence of `mini_magick` in `Gemfile`\r\nsince `bin/rails app:update` does not update Gemfile.\r\nThis assertions was added by 4a835aa3236eedb135ccf8b59ed3c03e040b8b01,\r\nafter reviewing of https://github.com/rails/rails/pull/32049 i realized\r\nthat assertions are redundant.\r\n\r\nr? @y-yagi ", "labels": [], "number": 32062, "updated_at": "2018-02-20 10:00:28", "user": 6443532, "closed_at": "2018-02-20 08:13:41", "id": 298425999, "title": "Ensure that `mini_magick` is absent after `rails new` with `--skip-active-storage`", "url": "https://api.github.com/repos/rails/rails/issues/32062", "created_at": "2018-02-19 23:17:50", "comments": [], "assignees": [987638, 987638], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n`<% cache @group %>`\r\n\r\nNo longer includes the updated_at in the cache_key in 5.2.0.rc1\r\n\r\n### Expected behavior\r\nThis is an example of a generated key in 5.2.0.beta2\r\n`groups/show:b25ce2a718e61c4980803b1b01b4d28a/groups/3-20180219205350119722`\r\n\r\n### Actual behavior\r\nThe same command in 5.2.0.rc1 does not include the updated_at and therefore is stale even though the record is updated\r\n`groups/show:d8f81a8f744c2141d7eb53baca7d32fa/groups/3`\r\n\r\nI have not enabled this line in the `initializers/new_framework_defaults_5_2.rb` file\r\n`# Rails.application.config.active_record.cache_versioning = true`\r\n\r\nI'm using `:redis_store`", "labels": [], "number": 32061, "updated_at": "2018-03-07 16:56:45", "user": 706797, "closed_at": "2018-02-19 22:35:25", "id": 298402790, "title": "Cache key on 5.2.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/32061", "created_at": "2018-02-19 21:14:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366806488", "text": "See https://github.com/rails/rails/issues/31897; the `redis_store` adapter is provided by the [redis-activesupport](https://github.com/redis-store/redis-activesupport) gem, which isn't maintained by the Rails team. This issue should be reported there instead.", "created_at": "2018-02-19 21:26:50", "user": 432189, "id": 366806488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370443748", "text": "On a new Rails 5.2.0.rc1 application, this is what I get when I set `config.cache_store = :memory_store` and `config.load_defaults 5.2`:\r\n\r\n```\r\nirb(main):002:0> Project.first.cache_key\r\n  Project Load (0.5ms)  SELECT  \"projects\".* FROM \"projects\" ORDER BY \"projects\".\"id\" ASC LIMIT $1  [[\"LIMIT\", 1]]\r\n=> \"projects/1\"\r\n```\r\n\r\nThis doesn't seem like it's isolated to redis-activesupport, since I can reproduce it without that gem in use/installed.", "created_at": "2018-03-05 14:52:47", "user": 113026, "id": 370443748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370457119", "text": "That’s the expected behavior. `ActiveRecord::Base#cache_key_with_version` includes the timestamp.", "created_at": "2018-03-05 15:32:43", "user": 94129, "id": 370457119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370478032", "text": "That makes sense @georgeclaghorn, but I don't think `ActiveSupport::Base#cache_key_with_version` is being used here in `ActiveSupport::Cache::Store#fetch`, because when I inspect the key used in my logs I see this:\r\n\r\n```\r\nCache read: views/application/test:520cc54da9d0445ac315c7660f8e3205/projects/1\r\n```\r\n\r\nI have a fix though, the `ActiveSupport::Cache::Store#expanded_key` method just needs to call `ActiveSupport::Cache.expanded_cache_key` instead of trying to do a half-baked key expansion on its own. Got a PR incoming for ya :)", "created_at": "2018-03-05 16:31:33", "user": 113026, "id": 370478032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370482695", "text": "The cache key is not supposed to include the version; the version is included in the entry itself and validated on read. That is the point of [recyclable cache keys](https://github.com/rails/rails/pull/29092), and calling `ActiveSupport::Cache.expanded_cache_key` will break it.", "created_at": "2018-03-05 16:44:48", "user": 94129, "id": 370482695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370493720", "text": "@georgeclaghorn OK, so if this is expected behavior, then this is a non-issue for both Rails and `Redis::ActiveSupport`?", "created_at": "2018-03-05 17:18:13", "user": 113026, "id": 370493720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/371205842", "text": "**update:** turns out redis-activesupport had the `#write` method overridden, this isn't an issue anymore for us. thanks for being so patient!", "created_at": "2018-03-07 16:56:44", "user": 113026, "id": 371205842}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\nWe call `update!` in an after_create callback. This produces this deprecation warning.\r\n\r\nDEPRECATION WARNING: The behaviour of `changed_attributes` inside of after callbacks will be changing in the next version of Rails. The new return value will reflect the behaviour of calling the method after `save` returned (e.g. the opposite of what it returns now). To maintain the current behavior, use `saved_changes.transform_values(&:first)` instead. \r\n\r\n### Expected behavior\r\n\r\nIt seems to me that this deprecation warning is triggered somewhere in rails which shouldn't happen.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: ruby 2.3.4p301 (2017-03-30 revision 58214) [x86_64-linux]\r\n", "labels": [], "number": 32060, "updated_at": "2018-02-27 21:53:32", "user": 378859, "closed_at": "2018-02-22 20:58:10", "id": 298398195, "title": "Deprecation warning is triggered inside update! when used in after_create callback", "url": "https://api.github.com/repos/rails/rails/issues/32060", "created_at": "2018-02-19 20:52:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366815172", "text": "I can't reproduce the issue using this template. The issue might happen because your app is calling `attribute_changed?` inside one of your validation method (which gets called when `update!` is fired and at that point the validation will be called in the context on an after_save callback)\r\n\r\n<details>\r\n   \r\n   ```ruby\r\n     require \"bundler/inline\"\r\n\r\n    gemfile(true) do\r\n      source \"https://rubygems.org\"\r\n      gem \"activerecord\", \"5.1.4\"\r\n      gem 'sqlite3'\r\n    end\r\n\r\n    require \"active_record\"\r\n    require \"minitest/autorun\"\r\n    require \"logger\"\r\n\r\n    # Ensure backward compatibility with Minitest 4\r\n    Minitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\n    # This connection will do for database-independent bug reports.\r\n    ActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\n    ActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\n    ActiveRecord::Schema.define do\r\n      create_table :posts, force: true do |t|\r\n        t.string :name\r\n      end\r\n    end\r\n\r\n    class Post < ActiveRecord::Base\r\n      after_save :update_me\r\n\r\n      def update_me\r\n        if !defined?(@_updated)\r\n          @_updated = 1\r\n          update!(name: 'Test')\r\n        end\r\n      end\r\n    end\r\n\r\n    class BugTest < Minitest::Test\r\n      def test_association_stuff\r\n        post = Post.new(name: 'John')\r\n        post.save!\r\n      end\r\n    end\r\n   ```\r\n</details>", "created_at": "2018-02-19 22:14:28", "user": 8122246, "id": 366815172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366834485", "text": "I think you might be right. Good point, I haven't really thought about the validations. I will check them. Thanks a lot for your response.", "created_at": "2018-02-20 00:33:02", "user": 378859, "id": 366834485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367157835", "text": "@Edouard-chin Just checked our validations without luck. We don't use and `changed` method there. I commented out everything in the model so it only looks like this\r\n\r\n```ruby\r\nclass AModel < ApplicationRecord\r\n  after_create :after_create_callback\r\n\r\n  def after_create_callback                                                                \r\n    update!(:a_attribute => \"test\")                                                               \r\n  end                                                                                           \r\nend   \r\n\r\n\r\n```\r\n\r\nAnd I still see the deprication method", "created_at": "2018-02-20 23:27:44", "user": 378859, "id": 367157835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367160268", "text": "Looks like it's similar to the test script I provided above, have you checked the associated models as well?\r\nThe deprecation message should also point the code triggering the deprecation, maybe you can try debugging from here", "created_at": "2018-02-20 23:38:57", "user": 8122246, "id": 367160268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367819792", "text": "I finally found the reason why we see these deprecation warnings. We maintain indices with thinking-sphinx of the AnatomyTerm model and it uses the method `changed?`. \r\nI created an issue here https://github.com/pat/thinking-sphinx/issues/1085", "created_at": "2018-02-22 20:58:10", "user": 378859, "id": 367819792}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369039710", "text": "@Edouard-chin Thinking Sphinx has responded to my question and there answer might interest you too. https://github.com/pat/thinking-sphinx/issues/1085", "created_at": "2018-02-27 21:53:32", "user": 378859, "id": 369039710}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. Define a concern named `Builder` for a model and declare a method in it (in my case, the concern is placed in the `models/foo/builder.rb` file):\r\n```ruby\r\nmodule Foo::Builder\r\n  def say_hello\r\n    \"Hello!\"\r\n  end\r\nend\r\n```\r\n\r\n2. Include this concern in your model:\r\n```ruby\r\nclass Foo < ApplicationRecord\r\n  include Builder\r\n  # include Foo::Builder -> not working either\r\nend\r\n```\r\n\r\n3. Try calling the method you declared in the concern:\r\n```ruby\r\nFoo.first.say_hello\r\n```\r\n\r\nA `Builder` concern name might look strange but I'm creating a game where users can \"Build\" things and this name fits my \"module naming conventions\".\r\n\r\n### Expected behavior\r\n\r\n```bash\r\n$ Foo.first.say_hello\r\n\"Hello!\"\r\n```\r\n\r\n### Actual behavior\r\n\r\n```bash\r\n$ Foo.first.say_hello\r\nNoMethodError: undefined method `say_hello` for #Foo\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.0.6\r\n\r\n**Ruby version**: 2.4.2", "labels": [], "number": 32059, "updated_at": "2018-02-23 19:36:26", "user": 2619388, "closed_at": "2018-02-19 19:54:24", "id": 298384076, "title": "Conflict when using \"Builder\" as concern name", "url": "https://api.github.com/repos/rails/rails/issues/32059", "created_at": "2018-02-19 19:46:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366788494", "text": "Does this happen with Ruby 2.5?", "created_at": "2018-02-19 19:52:11", "user": 47848, "id": 366788494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366788940", "text": "You `Builder` module is conflicting with the `Builder` module defined by the gem `builder`. This is happening because of this behavior in Ruby https://bugs.ruby-lang.org/issues/11547 that was removed in Ruby 2.5.\r\n\r\nIn you case you need to use `require_dependency` to require the right constant. See http://guides.rubyonrails.org/autoloading_and_reloading_constants.html#common-gotchas", "created_at": "2018-02-19 19:54:24", "user": 47848, "id": 366788940}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I mistype `rails server production` instead of `rails server -e\r\nproduction` expecting to lunch a server in the production environment\r\nall the time. However, the signature of `rails server --help` is:\r\n\r\n```\r\nUsage:\r\n  rails server [puma, thin etc] [options]\r\n```\r\n\r\nThis means that the `production` argument is being interpreted as a Rack\r\nserver handler like Puma, Thin or Unicorn.\r\n\r\nShould we argue for the `rails server production`? I'm not sure of the\r\nreasons, but the `rails console production` behavior was deprecated in:\r\nhttps://github.com/rails/rails/pull/29358, so parity with the existing\r\n`rails console production` usage may not hold anymore.\r\n\r\nIn any case, this PR introduces an explicit option for the Rack servers\r\nconfiguration. I call them `--handlers` (or `-x` for short, as `-h` is\r\nalready as the shortcut for `--help`) to avoid the `rails server\r\n--server` tantrum.\r\n\r\nThe new interface of `rails server` is:\r\n\r\n```\r\nUsage:\r\n  rails server [handler] [options]\r\n\r\nOptions:\r\n  -p, [--port=port]                        # Runs Rails on the specified port - defaults to 3000.\r\n  -b, [--binding=IP]                       # Binds Rails to the specified IP - defaults to 'localhost' in development and '0.0.0.0' in other environments'.\r\n  -c, [--config=file]                      # Uses a custom rackup configuration.\r\n                                           # Default: config.ru\r\n  -d, [--daemon], [--no-daemon]            # Runs server as a Daemon.\r\n  -e, [--environment=name]                 # Specifies the environment to run this server under (development/test/production).\r\n  -x, [--handler=name]                     # Specifies the Rack server to run the application (thin/puma/webrick).\r\n  -P, [--pid=PID]                          # Specifies the PID file.\r\n                                           # Default: tmp/pids/server.pid\r\n  -C, [--dev-caching], [--no-dev-caching]  # Specifies whether to perform caching in development.\r\n      [--early-hints], [--no-early-hints]  # Enables HTTP/2 early hints.\r\n```\r\n\r\nAs a bonus, if you mistype the handler, you'll get an auto-correction\r\nmessage:\r\n\r\n```\r\n$ rails s tin\r\nCould not find handler 'tin'. Maybe you meant 'thin' or 'cgi'?\r\nRun `rails server --help` for more options.\r\n```", "labels": [], "number": 32058, "updated_at": "2018-03-04 21:33:37", "user": 604618, "closed_at": "2018-03-04 19:52:49", "id": 298368926, "title": "Introduce explicit rails server handler option", "url": "https://api.github.com/repos/rails/rails/issues/32058", "created_at": "2018-02-19 18:36:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366773597", "text": "r? @schneems\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-19 18:36:13", "user": 7468109, "id": 366773597}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366798196", "text": "The previous error was:\r\n\r\n```\r\n$ rails server production\r\nExiting\r\nTraceback (most recent call last):\r\n\t36: from bin/rails:3:in `<main>'\r\n\t35: from bin/rails:3:in `load'\r\n\t34: from /Users/genadi/Development/bithost/dashboard.bithost.io/bin/spring:15:in `<top (required)>'\r\n\t33: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:70:in `require'\r\n\t32: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:70:in `require'\r\n\t31: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `<top (required)>'\r\n\t30: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/binstub.rb:31:in `load'\r\n\t29: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/bin/spring:49:in `<top (required)>'\r\n\t28: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/client.rb:30:in `run'\r\n\t27: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/client/command.rb:7:in `call'\r\n\t26: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/client/rails.rb:28:in `call'\r\n\t25: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/spring-2.0.2/lib/spring/client/rails.rb:28:in `load'\r\n\t24: from /Users/genadi/Development/bithost/dashboard.bithost.io/bin/rails:9:in `<top (required)>'\r\n\t23: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:283:in `require'\r\n\t22: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:249:in `load_dependency'\r\n\t21: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:283:in `block in require'\r\n\t20: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/bootsnap-1.1.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:17:in `require'\r\n\t19: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/bootsnap-1.1.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:17:in `require'\r\n\t18: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands.rb:18:in `<main>'\r\n\t17: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/command.rb:46:in `invoke'\r\n\t16: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/command/base.rb:65:in `perform'\r\n\t15: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/thor-0.20.0/lib/thor.rb:387:in `dispatch'\r\n\t14: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/thor-0.20.0/lib/thor/invocation.rb:126:in `invoke_command'\r\n\t13: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/thor-0.20.0/lib/thor/command.rb:27:in `run'\r\n\t12: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:142:in `perform'\r\n\t11: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:142:in `tap'\r\n\t10: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:147:in `block in perform'\r\n\t 9: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:47:in `start'\r\n\t 8: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:76:in `print_boot_information'\r\n\t 7: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/railties-5.2.0.rc1/lib/rails/commands/server/server_command.rb:105:in `use_puma?'\r\n\t 6: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/rack-2.0.4/lib/rack/server.rb:301:in `server'\r\n\t 5: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/rack-2.0.4/lib/rack/handler.rb:16:in `get'\r\n\t 4: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/rack-2.0.4/lib/rack/handler.rb:74:in `try_require'\r\n\t 3: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:283:in `require'\r\n\t 2: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:249:in `load_dependency'\r\n\t 1: from /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/activesupport-5.2.0.rc1/lib/active_support/dependencies.rb:283:in `block in require'\r\n/Users/genadi/.rbenv/versions/2.5.0/lib/ruby/gems/2.5.0/gems/bootsnap-1.1.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:19:in `require': cannot load such file -- rack/handler/production (LoadError)\r\n```", "created_at": "2018-02-19 20:42:35", "user": 604618, "id": 366798196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368235550", "text": "@kaspth we removed the positional parameter for `console` in #29358; I don't see why we'd want to retain it for `server` but not `console`.\r\n\r\n(Specifically, given that we can only load a handler that's available in the Gemfile, and that we automatically load the first handler that's available in the Gemfile, it seems pretty rare to me for people to have cause to name a handler at all.)", "created_at": "2018-02-24 15:22:31", "user": 1034, "id": 368235550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368259032", "text": "@matthewd sure, but that was for the environment, no? I thought `bin/rails dbconsole replicant -e production` was still possible?\r\n\r\nAnyway, you're right that passing it manually is probably a minority case, so lets go with the deprecation — and `--using` 👍", "created_at": "2018-02-24 20:47:31", "user": 350807, "id": 368259032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368310632", "text": "I have changed the option to `--using` and deprecated the passing of the Rack server as a regular argument.", "created_at": "2018-02-25 13:46:00", "user": 604618, "id": 368310632}, {"reactions": {"+1": [604618]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368313388", "text": "This is probably for another time, but… I just realized that now we're on 2.3+ we could leverage the `DidYouMean` gem's spellchecker: https://github.com/yuki24/did_you_mean/blob/4d4484940cdab27566538e6453ff428d39fbad7a/lib/did_you_mean/spell_checker.rb#L8\r\n\r\n```ruby\r\nunless HANDLERS.include?(options[:using])\r\n  DidYouMean::SpellChecker.new(HANDLERS).correct(options[:using])\r\nend\r\n```\r\n\r\n```\r\nirb(main):002:0> c = DidYouMean::SpellChecker.new(dictionary: [ 'cgi', 'puma' ])\r\n=> #<DidYouMean::SpellChecker:0x00007fa055866ee0 @dictionary=[\"cgi\", \"puma\"]>\r\nirb(main):003:0> c.correct('cgy')\r\n=> [\"cgi\"]\r\nirb(main):004:0> c.correct('pumma')\r\n=> [\"puma\"]\r\n```\r\n\r\nWe could also remove Rails' Levenshtein distance method from other places.", "created_at": "2018-02-25 14:24:38", "user": 350807, "id": 368313388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368349643", "text": "@kaspth, I think I'll be able to get the printing out of the `Rails::Server` class and put it into the command.   I had a couple of naive attempts but part of the printing needs to know about whether `Rails::Server#server` is puma and this crosses some boundaries, but I'm sure we can get it.\r\n\r\nAs for moving the handler suggestion logic entirely into the `Rails::Command::ServerCommand` it may not be as pretty because of the current `Rails::Command::Behavior` concern ahem, behavior 😅, that introduces the `levenstein_distance` method as private class method, which is pretty specific to the first place it was used.", "created_at": "2018-02-25 22:09:03", "user": 604618, "id": 368349643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368504538", "text": "Friends, I have moved the printing out of `Rails::Server`. Want to take another look? There are still some funky bits, but I think we're getting there.", "created_at": "2018-02-26 13:31:30", "user": 604618, "id": 368504538}, {"reactions": {"hooray": [350807]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368773165", "text": "Don't worry Kasper I'm having fun as well. 😀", "created_at": "2018-02-27 07:31:33", "user": 604618, "id": 368773165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370174890", "text": "Oh, needs a commit squash and rebase too! Normally we'd want 1 commit, but I'll grant you a commit for the spellchecker change first, then one for the server changes after that if you want. 1 commit is fine too 👍", "created_at": "2018-03-03 19:52:38", "user": 350807, "id": 370174890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370239660", "text": "Kasper, I have searched for `Rails::Server` usage in GitHub, but the two keywords: `rails` and `server` yield a lot of uninteresting results for us. See https://help.github.com/articles/searching-code:\r\n\r\n> You can't use the following wildcard characters as part of your search query: . , : ; / \\ ` ' \" = * ! ? # $ & + ^ | ~ < > ( ) { } [ ]. The search will simply ignore these symbols.\r\n\r\nThis means that we cannot match `Rails::Server` exactly, because of the `:` character ignore and we can't be exactly sure whether it's used. I left the `# :nodoc:` only to the `serveable?` method.", "created_at": "2018-03-04 15:53:51", "user": 604618, "id": 370239660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370258259", "text": "Fine with me! Really glad how this turned out 👏", "created_at": "2018-03-04 19:53:11", "user": 350807, "id": 370258259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370266095", "text": "Thanks for the review! 🙇‍♂️", "created_at": "2018-03-04 21:33:32", "user": 604618, "id": 370266095}], "assignees": [59744, 59744], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**.text_area** and **text_area_tag** always append 1 whitespace to begin of string when use **Slim**\r\n\r\n<textarea maxlength=\"200\" name=\"hint[one]\" id=\"hint_one\"**> Why?<**/textarea>\r\n\r\nrails 5-2-stable - f45a3f89ab92efc7f45bf4891f93fb38a76c6f5e\r\nslim 3.0.9\r\nruby 2.5", "labels": [], "number": 32057, "updated_at": "2018-02-19 17:34:09", "user": 11719983, "closed_at": "2018-02-19 17:34:09", "id": 298309055, "title": ".text_area and text_area_tag always append 1 whitespace to begin of string when use Slim", "url": "https://api.github.com/repos/rails/rails/issues/32057", "created_at": "2018-02-19 15:10:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366760078", "text": "Thanks for the report @rsmything but unless you can identify where this extra space is being added in Rails I would suggest reporting it on the [Slim repo][1] first.\r\n\r\nLooking at the source code for `text_area_tag` it just takes the passed in content and calls `content_tag` after marking it as HTML safe so difficult to see anywhere this could be a Rails problem.\r\n\r\n[1]: https://github.com/slim-template/slim", "created_at": "2018-02-19 17:34:09", "user": 6321, "id": 366760078}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n(Guidelines for creating a bug report are [available\r\nhere](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report))\r\n\r\n### Expected behavior\r\nTell us what should happen\r\n\r\n### Actual behavior\r\nTell us what happens instead\r\n\r\n### System configuration\r\n**Rails version**:\r\n\r\n**Ruby version**:\r\n", "labels": [], "number": 32056, "updated_at": "2018-02-19 16:16:12", "user": 15525318, "closed_at": "2018-02-19 14:53:38", "id": 298303126, "title": "Teste", "url": "https://api.github.com/repos/rails/rails/issues/32056", "created_at": "2018-02-19 14:52:53", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n1. In `routes.rb`\r\n```ruby\r\nmount ActionCable.server => \"/cable\"\r\n```\r\n2. run `rails server`\r\n3. Access a non existing URL or raise `ActionController::RoutingError.new('Not Found')` in one of your controllers.\r\n4. Inspect the routes listed on the error page\r\n\r\n(Guidelines for creating a bug report are [available\r\nhere](http://guides.rubyonrails.org/contributing_to_ruby_on_rails.html#creating-a-bug-report))\r\n\r\n### Expected behavior\r\nI expect the 'Path' entry to match the console output of `rails routes`\r\n\r\nwhich is:\r\n\r\n```\r\n                                 /cable                                                         #<ActionCable::Server::Base:0x000019a8ede4a8e0 @mutex=#<Monitor:0x000019a8ede4a890 @mon_owner=nil, @mon_count=0, @mon_mutex=#<Thread::Mutex:0x000019a8ede4a7f0>>, @pubsub=nil, @worker_pool=nil, @event_loop=nil, @remote_connections=nil>\r\n```\r\n\r\nor even less.\r\n\r\n### Actual behavior\r\nThe output contains a lot of data that I am not sure from where it is pulled, which among many others includes a `@raw_client` containing the redis connection string, password etc.\r\n\r\n```\r\n#>, @pubsub=#, @logger=#, @formatter=#, @logdev=#, @mon_owner=nil, @mon_count=0, @mon_mutex=#>, @local_levels=#>, @listener=#[#]}, @sync=#, @adapter=#, @event_loop=#, @executor=#, @__condition__=#, @min_length=1, @max_length=10, @idletime=60, @max_queue=0, @fallback_policy=:abort, @auto_terminate=true, @pool=[#, @pool=#, @thread=#>], @ready=[#, @pool=#, @thread=#>], @queue=[], @scheduled_task_count=2, @completed_task_count=2, @largest_length=1, @ruby_pid=82819, @gc_interval=30, @next_gc_time=56566.280579534, @StopEvent=#, @__condition__=#, @set=false, @iteration=0>, @StoppedEvent=#, @__condition__=#, @set=false, @iteration=0>>, @nio=#, @map={#=>#}, @stopping=false, @todo=#, @spawn_mutex=#>, @subscribe_callbacks={}, @subscription_lock=#, @raw_client=#\"redis://test:test@127.0.0.1:6379/1\", :scheme=>\"redis\", :host=>\"127.0.0.1\", :port=>6379, :path=>nil, :timeout=>5.0, :password=>\"test\", :db=>1, :driver=>Redis::Connection::Ruby, :id=>nil, :tcp_keepalive=>0, :reconnect_attempts=>1, :inherit_socket=>false, :role=>:master, :connect_timeout=>5.0, :read_timeout=>5.0, :write_timeout=>5.0, :_parsed=>true}, @reconnect=false, @logger=nil, @connection=#>, @command_map={}, @pending_reads=0, @connector=#\"redis://test:test@127.0.0.1:6379/1\", :scheme=>\"redis\", :host=>\"127.0.0.1\", :port=>6379, :path=>nil, :timeout=>5.0, :password=>\"test\", :db=>1, :driver=>Redis::Connection::Ruby, :id=>nil, :tcp_keepalive=>0, :reconnect_attempts=>1, :inherit_socket=>false, :role=>:master, :connect_timeout=>5.0, :read_timeout=>5.0, :write_timeout=>5.0, :_parsed=>true}>, @pid=82819>, @when_connected=[], @thread=#>, @redis_connection_for_broadcasts=nil>, @worker_pool=#, @__condition__=#, @min_length=1, @max_length=4, @idletime=60, @max_queue=0, @fallback_policy=:abort, @auto_terminate=true, @pool=[#, @pool=#, @thread=#>], @ready=[#, @pool=#, @thread=#>], @queue=[], @scheduled_task_count=2, @completed_task_count=2, @largest_length=1, @ruby_pid=82819, @gc_interval=30, @next_gc_time=56566.244362796, @StopEvent=#, @__condition__=#, @set=false, @iteration=0>, @StoppedEvent=#, @__condition__=#, @set=false, @iteration=0>>>, @event_loop=#, @executor=#, @__condition__=#, @min_length=1, @max_length=10, @idletime=60, @max_queue=0, @fallback_policy=:abort, @auto_terminate=true, @pool=[#, @pool=#, @thread=#>], @ready=[#, @pool=#, @thread=#>], @queue=[], @scheduled_task_count=2, @completed_task_count=2, @largest_length=1, @ruby_pid=82819, @gc_interval=30, @next_gc_time=56566.280579534, @StopEvent=#, @__condition__=#, @set=false, @iteration=0>, @StoppedEvent=#, @__condition__=#, @set=false, @iteration=0>>, @nio=#, @map={#=>#}, @stopping=false, @todo=#, @spawn_mutex=#>, @remote_connections=nil, @heartbeat_timer=#, @__condition__=#, @dup_on_deref=nil, @freeze_on_deref=nil, @copy_on_deref=nil, @do_nothing_on_deref=true, @execution_interval=3.0, @timeout_interval=30.0, @run_now=nil, @executor=#, @exception_class=StandardError, @__lock__=#, @__condition__=#>, @running=, @observers=#, @__condition__=#, @observers={}>, @StopEvent=#, @__condition__=#, @set=false, @iteration=0>, @StoppedEvent=#, @__condition__=#, @set=false, @iteration=0>>, @connections=[#[1, 3], \"rack.errors\"=>#>, \"rack.multithread\"=>true, \"rack.multiprocess\"=>false, \"rack.run_once\"=>false, \"SCRIPT_NAME\"=>\"/cable\", \"QUERY_STRING\"=>\"\", \"SERVER_PROTOCOL\"=>\"HTTP/1.1\", \"SERVER_SOFTWARE\"=>\"puma 3.11.2 Love Song\", \"GATEWAY_INTERFACE\"=>\"CGI/1.2\", \"REQUEST_METHOD\"=>\"GET\", \"REQUEST_PATH\"=>\"/cable\", \"REQUEST_URI\"=>\"/cable\", \"HTTP_VERSION\"=>\"HTTP/1.1\", \"HTTP_HOST\"=>\"localhost:3000\", \"HTTP_CONNECTION\"=>\"Upgrade\", \"HTTP_PRAGMA\"=>\"no-cache\", \"HTTP_CACHE_CONTROL\"=>\"no-cache\", \"HTTP_UPGRADE\"=>\"websocket\", \"HTTP_ORIGIN\"=>\"http://localhost:3000\", \"HTTP_SEC_WEBSOCKET_VERSION\"=>\"13\", \"HTTP_USER_AGENT\"=>\"Mozilla/5.0 (X11; OpenBSD amd64; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.167 Safari/537.36\", \"HTTP_DNT\"=>\"1\", \"HTTP_ACCEPT_ENCODING\"=>\"gzip, deflate, br\", \"HTTP_ACCEPT_LANGUAGE\"=>\"pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7\", \"HTTP_COOKIE\"=>\"CSRF-Token-PFQXQ=V4zbXJFuCRhqxyYZfg4Y5fxb5RSfnJsY; JSESSIONID.bd18d2c8=q0i8kqi6drwp9vfrxx1pt4yd; JSESSIONID.33842597=a9m39atoma8iudb72thj3vb4; user=\\\"!R6Y4HRcr6nb0nK/PCK5zmQ==?gAJVBHVzZXJxAVUIbXVsYW5kZXJxAoZxAy4=\\\"; JSESSIONID.4800428e=node02y8u5alxy0uh1t4fdv5wtlhti501.node0; JSESSIONID.51818afb=node080av052l1msa1vgepkzmfigtv0.node0; JSESSIONID.03c0cbf7=node01ke3l2ytlkpet83gw0upq9ph8103.node0; JSESSIONID.0ef72c18=node0uu19rqa90el0cesmcg7n5lrq1204.node0; JSESSIONID.9651af49=node0ivwrkmuswmsum6ouqg2n2r0p203.node0; cookie_eu_consented=true; JSESSIONID.f91ff1b8=node07f75qj74qe1dgar915209gf01190.node0; jenkins-timestamper-offset=-3600000; JSESSIONID.022e5fe7=node01ss248hww3ds41jed70h6yba8s1747.node0; _ga=GA1.1.726703923.1511802748; JSESSIONID.753887f2=node01jzd8f3ewscvwpaey9jqnz8i91293.node0; JSESSIONID.1ca1d740=node017ejq44c9rq2tz60tedaosp0y1020.node0; JSESSIONID.05171eb3=node0kvkd5zezlihg1ff85a7cj2xac944.node0; rack.session=BAh7C0kiD3Nlc3Npb25faWQGOgZFVEkiRWJlZmFkODM4Y2QyY2FiZTZiMmJi%0AMGI0OWM2MzIzZjkzMzEzYmY5OTU4NGUyYmNhNDY0NTRlZjc3NWMxZWIwZTgG%0AOwBGSSIZd2FyZGVuLnVzZXIudXNlci5rZXkGOwBUWwdbBmkCdEVJIiIkMmEk%0AMTEkRWdIUk9vSjJ0RHhDMzNxN1RvVFJjLgY7AFRJIh13YXJkZW4udXNlci51%0Ac2VyLnNlc3Npb24GOwBUewZJIhRsYXN0X3JlcXVlc3RfYXQGOwBUbCsH6tUu%0AWkkiEF9jc3JmX3Rva2VuBjsAVEkiMUNOZzdUczlDRkszaUNyaW5oNmVzNjc4%0AR3RHbEVXM3VucmcxTmVTV05MQzQ9BjsAVEkiCWNzcmYGOwBUSSIxVUMwNFNF%0AQlNLNWE5OHR2cVUzaFNPWGR4a0QyMG4zZ0lNdWFKMm9JS3Fvbz0GOwBUSSIN%0AdHJhY2tpbmcGOwBUewdJIhRIVFRQX1VTRVJfQUdFTlQGOwBUSSItNjUwZDI0%0AMDk5OTc2Mjg1NjlmZmNiZTcxNzY4MDFiNWI5YmYyY2RhOQY7AFRJIhlIVFRQ%0AX0FDQ0VQVF9MQU5HVUFHRQY7AFRJIi0yN2IwYjEzM2U0Zjk3YTRiNDUxMjVl%0ANWQyNDIzYjMxYzFiNjI2MWE3BjsAVA%3D%3D%0A--e7b5028d03eb9cdab6fa4bac77abbeea03a2d9dd; JSESSIONID.6c61bfed=node09946ze8tlib01es289blgtfsj211.node0; JSESSIONID.b420c6df=node0ws12hgpnxm34tn1bwejypobq375.node0; JSESSIONID.3137684c=node01gwkvfwrr2w0m1aq6vqit1aovx1164.node0; CSRF-Token-KKKWG=sNEPGxoW4oGW3msMhDeLjZMNukHHC4XH; JSESSIONID.1299014c=node0l7n2j0xelqsbv1rm27zign24473.node0; JSESSIONID.0b134960=node0nfbuo6xbznrwbyrvoo1iur7s504.node0; screenResolution=1366x768; JSESSIONID.c981a945=node0cvr0b1a8l5jgeok4aewhmifd1835.node0; CSRF-Token-DO4ZB=4wZuRfrF3kGNtFyYQbYVwQPRj63g3qCZ; firstVisit=1518042165253; JSESSIONID.5360cba0=node010616cjkvk2diunn800maes7z1995.node0; _webui_session=WXc4UXpwaldjOTVxNlBJc0FqdjRNUWZCSnhtdFgwejFqcEdrbmdTVlEzTllNRnBXVWc1a1RvNm82TC9RQlN0SFdYMnRRQ3dwZ0FnK0VYcG1nb0hwdUpLNXllYS9EcTJPTnhpMHZqMHF2Qjl1ZU5Nb0Z5Q0RjMDBJMlhxem1oN2pjNEM4Vk1DdU1KRlVtVnNPMnMwbUpZSTljeG1LczlEOHNLVWc1aUtKV1pDamdYMyt5Y1U5NCs0Umw1ZW1OTkh3WktCLzFvbUNpUURvSlI4ajdSd1lYUT09LS02SGV5ekRqZUFYQ21EU1NlTWxGMC9BPT0%3D--8574ba2bd4ffd43ed78ec05960c020ea4477cce7\", \"HTTP_SEC_WEBSOCKET_KEY\"=>\"LVsxRXMCTgKicmjNPGpYOQ==\", \"HTTP_SEC_WEBSOCKET_EXTENSIONS\"=>\"permessage-deflate; client_max_window_bits\", \"HTTP_SEC_WEBSOCKET_PROTOCOL\"=>\"actioncable-v1-json, actioncable-unsupported\", \"SERVER_NAME\"=>\"localhost\", \"SERVER_PORT\"=>\"3000\", \"PATH_INFO\"=>\"/\", \"REMOTE_ADDR\"=>\"127.0.0.1\", \"puma.socket\"=>#, \"rack.hijack?\"=>true, \"rack.hijack\"=>#, \"rack.input\"=>#, \"rack.url_scheme\"=>\"http\", \"rack.after_reply\"=>[], \"puma.config\"=>#false, :app=>#:user, :scope_defaults=>{}, :default_strategies=>{:user=>[:rememberable, :database_authenticatable]}, :intercept_401=>false, :failure_app=>#}, @app=#, @ignore_cascade_pass=true>>, @cache_control=\"max-age=0, private, must-revalidate\", @no_cache_control=\"no-cache\">>>, @default_options={:path=>\"/\", :domain=>nil, :expire_after=>nil, :secure=>false, :httponly=>true, :defer=>false, :renew=>false}, @key=\"_webui_session\", @cookie_only=true>>, @last_check=1512574008>>, @executor=#>, @routes_app=#, @response_format=:default>, @exceptions_app=#>>, @taggers=[]>, @assets_regex=/\\A\\/{0,2}\\/assets/>, @check_ip=true, @proxies=[#, #, #, #, #, #]>>>, @header_name=\"X-Runtime\">>, @executor=#>, @file_handler=#>>, @index=\"index\">>, @variation=\"X-Accel-Redirect\", @mappings=[]>, @config=#, @generators=#{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :system_tests=>:test_unit, :stylesheet_engine=>:scss, :javascript_engine=>:coffee}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>true, :fixture_replacement=>nil}}, @fallbacks={}, @templates=[], @colorize_logging=true, @api_only=false, @hidden_namespaces=[\"sass\"]>, @middleware=#, @encoding=#, @allow_concurrency=nil, @consider_all_requests_local=true, @filter_parameters=[:password], @filter_redirect=[], @helpers_paths=[\"/home/mulander/github/webui/app/helpers\", \"/home/mulander/github/webui/vendor/bundle/ruby/2.4/gems/local_time-2.0.0/app/helpers\", \"/home/mulander/github/webui/vendor/bundle/ruby/2.4/gems/devise-4.4.0/app/helpers\", \"/home/mulander/github/webui/vendor/bundle/ruby/2.4/gems/font-awesome-rails-4.7.0.3/app/helpers\"], @public_file_server={:enabled=>true, :index_name=>\"index\"}, @force_ssl=false, @ssl_options={:hsts=>{:subdomains=>true}}, @session_store=:cookie_store, @time_zone=\"UTC\", @beginning_of_week=:monday, @log_level=:debug, @cache_store=:null_store, @railties_order=[:all], @relative_url_root=nil, @reload_classes_only_on_change=true, @file_watcher=ActiveSupport::EventedFileUpdateChecker, @exceptions_app=nil, @autoflush_log=true, @log_formatter=#, @eager_load=false, @secret_token=nil, @secret_key_base=nil, @api_only=false, @debug_exception_response_format=nil, @x=#, @enable_dependency_loading=false, @read_encrypted_secrets=false, @paths=#, @root={\"app\"=>#, @glob=\"{*,*/concerns}\", @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/assets\"=>#, @glob=\"*\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"app/controllers\"=>#, @glob=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/channels\"=>#, @glob=\"**/*_channel.rb\", @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/helpers\"=>#, @glob=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/models\"=>#, @glob=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/mailers\"=>#, @glob=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/views\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=true>, \"lib/assets\"=>#, @glob=\"*\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib/tasks\"=>#, @glob=\"**/*.rake\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/environments\"=>#, @glob=\"development.rb\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/initializers\"=>#, @glob=\"**/*.rb\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/locales\"=>#, @glob=\"*.{rb,yml}\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/routes.rb\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"db\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"db/migrate\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"db/seeds.rb\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"vendor\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=true>, \"vendor/assets\"=>#, @glob=\"*\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/database\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/secrets\"=>#, @glob=\"secrets.yml{,.enc}\", @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/environment\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib/templates\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"log\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public/javascripts\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public/stylesheets\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"tmp\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/cable\"=>#, @glob=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>}>, @autoload_paths=[], @eager_load_paths=[\"/home/mulander/github/webui/app/assets\", \"/home/mulander/github/webui/app/channels\", \"/home/mulander/github/webui/app/controllers\", \"/home/mulander/github/webui/app/controllers/concerns\", \"/home/mulander/github/webui/app/helpers\", \"/home/mulander/github/webui/app/jobs\", \"/home/mulander/github/webui/app/mailers\", \"/home/mulander/github/webui/app/models\", \"/home/mulander/github/webui/app/models/concerns\", \"/home/mulander/github/webui/app/uploaders\", \"/home/mulander/github/webui/app/workers\", \"/home/mulander/github/webui/app/channels/api_v1_channel.rb\", \"/home/mulander/github/webui/app/channels/benchmark_channel.rb\", \"/home/mulander/github/webui/app/channels/group_channel.rb\", \"/home/mulander/github/webui/app/channels/presence_channel.rb\"], @autoload_once_paths=[], @cache_classes=false, @session_options={:key=>\"_webui_session\", :cookie_only=>true}>, @env_config={}, @helpers=nil, @routes=#, @app_build_lock=#, @initialized=true, @reloaders=[#, @files=#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #}>, @dirs={#=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"], #=>[\"rb\", \"yml\"]}, @block=#, @updated=, @lcsp=#, @pid=82819, @boot_mutex=#, @dtw=[#]>, #, #], @eager_load=false, @updater=#, @watched=nil, @updated_at=nil, @last_watched=[\"/home/mulander/github/webui/config/routes.rb\", \"/home/mulander/github/webui/vendor/bundle/ruby/2.4/gems/commontator-5.1.0/config/routes.rb\"], @last_update_at=2017-12-12 16:28:13 +0100>>, #, @files=#, #}>, @dirs={#=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"], #=>[\"rb\"]}, @block=#, @updated=, @lcsp=#, @pid=82819, @boot_mutex=#, @dtw=[#, #, #, #, #, #, #, #, #, #, #]>], @routes_reloader=#, #], @eager_load=false, @updater=#, @watched=nil, @updated_at=nil, @last_watched=[\"/home/mulander/github/webui/config/routes.rb\", \"/home/mulander/github/webui/vendor/bundle/ruby/2.4/gems/commontator-5.1.0/config/routes.rb\"], @last_update_at=2017-12-12 16:28:13 +0100>>, @app_env_config={\"action_dispatch.parameter_filter\"=>[:password], \"action_dispatch.redirect_filter\"=>[], \"action_dispatch.secret_token\"=>nil, \"action_dispatch.secret_key_base\"=>\"eacade364a977a4367271297899625ed84d06e246997cfc406b2b6260c3fad8236d228112451816f83a43712067564f751a545109294074914b25d8b76be2114\", \"action_dispatch.show_exceptions\"=>true, \"action_dispatch.show_detailed_exceptions\"=>true, \"action_dispatch.logger\"=>#, @formatter=#, @logdev=#, @mon_owner=nil, @mon_count=0, @mon_mutex=#>, @local_levels=#>, \"action_dispatch.backtrace_cleaner\"=>#, #, #\r\n--\r\n```\r\n\r\nsince a picture is worth a thousand words\r\n![2018-02-19-154829_1334x433_scrot](https://user-images.githubusercontent.com/107247/36383430-6a1e7ff8-158c-11e8-98ff-8ede91b17560.png)\r\n![2018-02-19-154816_1253x449_scrot](https://user-images.githubusercontent.com/107247/36383432-6a453954-158c-11e8-86a0-99536ba21987.png)\r\n\r\n\r\n\r\n\r\n### System configuration\r\n**Rails version**:\r\n```\r\nfishtank$ ./bin/rails version                                                                                  \r\nRails 5.1.4\r\n```\r\n**Ruby version**:\r\n```\r\nfishtank$ ruby --version                                                                                       \r\nruby 2.4.3p205 (2017-12-14 revision 61247) [x86_64-openbsd]\r\n```", "labels": [], "number": 32055, "updated_at": "2018-02-19 23:40:16", "user": 107247, "closed_at": "2018-02-19 23:29:15", "id": 298302294, "title": "ActionCable /cable mount exposes unfiltered redis password on Routing Error in development mode", "url": "https://api.github.com/repos/rails/rails/issues/32055", "created_at": "2018-02-19 14:50:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366821142", "text": "If you want to change mount path of Action Cable, please use `config.action_cable.mount_path`.\r\n\r\nAlso, I couldn't reproduce your issue. Are you using gems for error pages like `better_errors`?", "created_at": "2018-02-19 22:50:48", "user": 987638, "id": 366821142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366823167", "text": "Hi @y-yagi, no I don't want to change my mount paths. I only mentioned it to highlight how ActionCable is used within the app.\r\n\r\n> Also, I couldn't reproduce your issue. Are you using gems for error pages like better_errors?\r\n\r\nAre you using the built in `rails server`? I didn't see this occur on a passenger deployment so it might be related to the environment.\r\n\r\nRegarding my gems & plugins, I'm attaching my Gemfile & Gemfile.lock.\r\n[Gemfile.lock.txt](https://github.com/rails/rails/files/1738465/Gemfile.lock.txt)\r\n[Gemfile.txt](https://github.com/rails/rails/files/1738466/Gemfile.txt)\r\n\r\nbut in short, no I don't have anything fancy. The only thing is an exception notifier for slack but it should not impact the look & behavior of the routing error page.", "created_at": "2018-02-19 23:04:42", "user": 107247, "id": 366823167}, {"reactions": {"+1": [107247]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366826436", "text": "Originally, Action Cable's mount path is treated as internal. As a result, mount path is not showed in the result of `routes`. \r\nhttps://github.com/rails/rails/blob/5-1-stable/actioncable/lib/action_cable/engine.rb#L46 \r\n\r\nYi\\ou have explicitly mounted `ActionCable.server`, so the result has come out in routes. \r\nThis is not the intended usage.. Therefore, the instance variable is showed unexpectedly. So please remove `mount ActionCable.server`. Thanks.\r\n", "created_at": "2018-02-19 23:29:15", "user": 987638, "id": 366826436}, {"reactions": {"+1": [987638]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366827812", "text": "Thank you @y-yagi I see now what you hinted in your first reply. I removed the explicit mount and used `config.action_cable.mount_path` which removes `/cable` from the routes output as you mentioned.\r\n\r\nI don't know where I got the idea to mount in routes.rb - might have been a very old version of http://guides.rubyonrails.org/action_cable_overview.html or some other site (still a lot of external materials point to mounting in routes.rb).\r\n\r\nThe issue is indeed solved, leaving this reply so anyone else hitting an outdated tutorial gets a reassurance.", "created_at": "2018-02-19 23:40:16", "user": 107247, "id": 366827812}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This reverts the changes in #32045 and fixes the issue with accidentally creating an empty policy when setting up the request. The [decision to generate an empty policy][1] if it's set was an explicit one to show the difference between not having a policy set and an empty policy which just uses the browser defaults. It also removes the trailing semi-colon so that an empty policy doesn't generate a console warning.\r\n\r\n[1]: https://github.com/rails/rails/pull/31162#discussion_r151300536", "labels": [], "number": 32054, "updated_at": "2018-02-19 14:59:16", "user": 6321, "closed_at": "2018-02-19 14:55:06", "id": 298258924, "title": "Fix generation of empty content security policy", "url": "https://api.github.com/repos/rails/rails/issues/32054", "created_at": "2018-02-19 12:29:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366717741", "text": "Backported to [5-2-stable](1f7fda63fa881b82fd94aad79115c2d3952dcf9e)", "created_at": "2018-02-19 14:59:16", "user": 6321, "id": 366717741}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nRun `rails new blahasdgggggfl`\r\n\r\n### Expected behavior\r\n\r\n`config/initializers/new_framework_defaults_5_1.rb` and `config/initializers/cors.rb` files generated.\r\n\r\n### Actual behavior\r\n\r\nThose files are generated and then removed (at the end):\r\n\r\n```\r\n~/d/tmp $ rails new blahasdgggggfl\r\n      create  \r\n      create  README.md\r\n      create  Rakefile\r\n      create  config.ru\r\n      create  .gitignore\r\n      create  Gemfile\r\n         run  git init from \".\"\r\nInitialized empty Git repository in /Users/rupert/develop/tmp/blahasdgggggfl/.git/\r\n      create  app\r\n      create  app/assets/config/manifest.js\r\n      create  app/assets/javascripts/application.js\r\n      create  app/assets/javascripts/cable.js\r\n      create  app/assets/stylesheets/application.css\r\n      create  app/channels/application_cable/channel.rb\r\n      create  app/channels/application_cable/connection.rb\r\n      create  app/controllers/application_controller.rb\r\n      create  app/helpers/application_helper.rb\r\n      create  app/jobs/application_job.rb\r\n      create  app/mailers/application_mailer.rb\r\n      create  app/models/application_record.rb\r\n      create  app/views/layouts/application.html.erb\r\n      create  app/views/layouts/mailer.html.erb\r\n      create  app/views/layouts/mailer.text.erb\r\n      create  app/assets/images/.keep\r\n      create  app/assets/javascripts/channels\r\n      create  app/assets/javascripts/channels/.keep\r\n      create  app/controllers/concerns/.keep\r\n      create  app/models/concerns/.keep\r\n      create  bin\r\n      create  bin/bundle\r\n      create  bin/rails\r\n      create  bin/rake\r\n      create  bin/setup\r\n      create  bin/update\r\n      create  bin/yarn\r\n      create  config\r\n      create  config/routes.rb\r\n      create  config/application.rb\r\n      create  config/environment.rb\r\n      create  config/secrets.yml\r\n      create  config/cable.yml\r\n      create  config/puma.rb\r\n      create  config/spring.rb\r\n      create  config/environments\r\n      create  config/environments/development.rb\r\n      create  config/environments/production.rb\r\n      create  config/environments/test.rb\r\n      create  config/initializers\r\n      create  config/initializers/application_controller_renderer.rb\r\n      create  config/initializers/assets.rb\r\n      create  config/initializers/backtrace_silencers.rb\r\n      create  config/initializers/cookies_serializer.rb\r\n      create  config/initializers/cors.rb\r\n      create  config/initializers/filter_parameter_logging.rb\r\n      create  config/initializers/inflections.rb\r\n      create  config/initializers/mime_types.rb\r\n      create  config/initializers/new_framework_defaults_5_1.rb\r\n      create  config/initializers/wrap_parameters.rb\r\n      create  config/locales\r\n      create  config/locales/en.yml\r\n      create  config/boot.rb\r\n      create  config/database.yml\r\n      create  db\r\n      create  db/seeds.rb\r\n      create  lib\r\n      create  lib/tasks\r\n      create  lib/tasks/.keep\r\n      create  lib/assets\r\n      create  lib/assets/.keep\r\n      create  log\r\n      create  log/.keep\r\n      create  public\r\n      create  public/404.html\r\n      create  public/422.html\r\n      create  public/500.html\r\n      create  public/apple-touch-icon-precomposed.png\r\n      create  public/apple-touch-icon.png\r\n      create  public/favicon.ico\r\n      create  public/robots.txt\r\n      create  test/fixtures\r\n      create  test/fixtures/.keep\r\n      create  test/fixtures/files\r\n      create  test/fixtures/files/.keep\r\n      create  test/controllers\r\n      create  test/controllers/.keep\r\n      create  test/mailers\r\n      create  test/mailers/.keep\r\n      create  test/models\r\n      create  test/models/.keep\r\n      create  test/helpers\r\n      create  test/helpers/.keep\r\n      create  test/integration\r\n      create  test/integration/.keep\r\n      create  test/test_helper.rb\r\n      create  test/system\r\n      create  test/system/.keep\r\n      create  test/application_system_test_case.rb\r\n      create  tmp\r\n      create  tmp/.keep\r\n      create  tmp/cache\r\n      create  tmp/cache/assets\r\n      create  vendor\r\n      create  vendor/.keep\r\n      create  package.json\r\n      remove  config/initializers/cors.rb\r\n      remove  config/initializers/new_framework_defaults_5_1.rb\r\n         run  bundle install\r\n```\r\n\r\n### System configuration\r\n**Rails version**: `5.1.5`\r\n\r\n**Ruby version**: `2.4.2p198`\r\n\r\n### Comment\r\n\r\nRails 5.0 generated `new_framework_defaults.rb`, why is it removed in fresh Rails 5.1 app?", "labels": [], "number": 32053, "updated_at": "2018-02-19 12:24:29", "user": 65587, "closed_at": "2018-02-19 12:20:44", "id": 298240280, "title": "new_framework_defaults_5_1.rb are removed when generating a new rails app", "url": "https://api.github.com/repos/rails/rails/issues/32053", "created_at": "2018-02-19 11:20:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366676989", "text": "This is intentional. \r\nSince 5.1, we provide the `load_deaults` for setting recommended config in each version and make default settings there. \r\nhttps://github.com/rails/rails/blob/ecbc84ee1c10adfc6400882b0fc2037fe961f9c0/railties/lib/rails/application/configuration.rb#L57 \r\n\r\n`new_framework_defaults_5_1.rb` is needed only when updated with `app:update`. It is unnecessary for newly created applications.\r\n", "created_at": "2018-02-19 12:20:44", "user": 987638, "id": 366676989}, {"reactions": {"+1": [987638]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366678317", "text": "@y-yagi Thanks, now I understand it better.", "created_at": "2018-02-19 12:24:29", "user": 65587, "id": 366678317}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Some timezones like `Europe/London` have multiple mappings in `ActiveSupport::TimeZone::MAPPING` so return all of them instead of the first one found by using `Hash#value`. e.g:\r\n\r\n``` ruby\r\n# Before\r\nActiveSupport::TimeZone.country_zones(\"GB\") # => [\"Edinburgh\"]\r\n\r\n# After\r\nActiveSupport::TimeZone.country_zones(\"GB\") # => [\"Edinburgh\", \"London\"]\r\n```\r\n\r\nFixes #31668.\r\n", "labels": [], "number": 32052, "updated_at": "2018-02-19 12:42:53", "user": 6321, "closed_at": "2018-02-19 12:30:48", "id": 298228598, "title": "Return all mappings for a timezone id in country_zones", "url": "https://api.github.com/repos/rails/rails/issues/32052", "created_at": "2018-02-19 10:38:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366682539", "text": "Backported to [5-2-stable][1], [5-1-stable][2] and [5-0-stable][3]\r\n\r\n[1]: https://github.com/rails/rails/commit/cdce6a709e1cbc98fff009effc3b1b3ce4c7e8db\r\n[2]: https://github.com/rails/rails/commit/0222ebbe0695fd1fbaf98e64333d9d7b285a54ed\r\n[3]: https://github.com/rails/rails/commit/8b88fc00c5267fb83ca688ea3d4b8d35c4ef8073", "created_at": "2018-02-19 12:42:53", "user": 6321, "id": 366682539}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 32051, "updated_at": "2018-02-19 06:03:13", "user": 31045807, "closed_at": "2018-02-19 06:03:13", "id": 298168491, "title": "rubocop single space after assignment", "url": "https://api.github.com/repos/rails/rails/issues/32051", "created_at": "2018-02-19 05:54:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366595335", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-19 05:55:05", "user": 7468109, "id": 366595335}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n**Update: It seems to be a `MM/DD/YYYY` vs `YYYY-MM-DD` issue.**\r\n\r\nGiven a model with this schema:\r\n```\r\n  create_table \"characteristics\", force: :cascade do |t|\r\n    t.string \"type\"\r\n    t.string \"internal_code\", null: false\r\n    t.datetime \"created_at\", null: false\r\n    t.datetime \"updated_at\", null: false\r\n    t.text \"description\"\r\n    t.text \"scale_low_text\"\r\n    t.text \"scale_high_text\"\r\n    t.integer \"position\"\r\n    t.string \"catchy_name\"\r\n    t.datetime \"publish_at\"\r\n  end\r\n```\r\n\r\nSome dates will persist to the database but others are changed to `nil`.\r\n\r\nExample:\r\n\r\n```\r\n[8] pry(main)> c.update!(\"publish_at\"=>\"02/06/2018 10:27 PM\")\r\n   (0.2ms)  BEGIN\r\n  Characteristic Exists (0.7ms)  SELECT  1 AS one FROM \"characteristics\" WHERE \"characteristics\".\"internal_code\" = $1 AND (\"characteristics\".\"id\" != $2) LIMIT $3  [[\"internal_code\", \"33\"], [\"id\", 3], [\"LIMIT\", 1]]\r\n  SQL (0.5ms)  UPDATE \"characteristics\" SET \"updated_at\" = $1, \"publish_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"updated_at\", \"2018-02-19 04:03:14.366413\"], [\"publish_at\", \"2018-06-02 22:27:00\"], [\"id\", 3]]\r\n   (0.6ms)  COMMIT\r\n=> true\r\n[9] pry(main)> c.update!(\"publish_at\"=>\"02/18/2018 10:27 PM\")\r\n   (0.2ms)  BEGIN\r\n  Characteristic Exists (0.4ms)  SELECT  1 AS one FROM \"characteristics\" WHERE \"characteristics\".\"internal_code\" = $1 AND (\"characteristics\".\"id\" != $2) LIMIT $3  [[\"internal_code\", \"33\"], [\"id\", 3], [\"LIMIT\", 1]]\r\n  SQL (0.3ms)  UPDATE \"characteristics\" SET \"updated_at\" = $1, \"publish_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"updated_at\", \"2018-02-19 04:03:39.129518\"], [\"publish_at\", nil], [\"id\", 3]]\r\n   (2.0ms)  COMMIT\r\n=> true\r\n```\r\n\r\n\r\n### Expected behavior\r\nA string parameter representing a date would save correctly to the database.\r\n\r\n### Actual behavior\r\nA string parameter representing a date sometimes saves correctly to the database, sometimes becomes `nil`.\r\n\r\nHere is an example of a **successful request:**\r\n\r\n```\r\n22:27:45 web.1       | Started PATCH \"/characteristics/3\" for ::1 at 2018-02-18 22:27:45 -0500\r\n22:27:45 web.1       | Processing by CharacteristicsController#update as HTML\r\n22:27:45 web.1       |   Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"sAbA8n4sI4/M8hNn6o+0SCV3RVbCohCiQJdR2o/uylFTc/Nh/FueGgWMDtkgoDxPqRg4E4QU67y7o7sBGoDYkQ==\", \"characteristic\"=>{\"type\"=>\"Trait\", \"internal_code\"=>\"33\", \"description\"=>\"asdf\", \"scale_low_text\"=>\"\", \"scale_high_text\"=>\"\", \"catchy_name\"=>\"\", \"publish_at\"=>\"02/06/2018 10:27 PM\"}, \"commit\"=>\"Update Trait\", \"id\"=>\"3\"}\r\n22:27:45 web.1       |   User Load (0.3ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 ORDER BY \"users\".\"id\" ASC LIMIT $2  [[\"id\", 1], [\"LIMIT\", 1]]\r\n22:27:45 web.1       |   Characteristic Load (0.2ms)  SELECT  \"characteristics\".* FROM \"characteristics\" WHERE \"characteristics\".\"id\" = $1 LIMIT $2  [[\"id\", 3], [\"LIMIT\", 1]]\r\n22:27:45 web.1       |    (0.1ms)  BEGIN\r\n22:27:45 web.1       |   Characteristic Exists (0.2ms)  SELECT  1 AS one FROM \"characteristics\" WHERE \"characteristics\".\"internal_code\" = $1 AND (\"characteristics\".\"id\" != $2) LIMIT $3  [[\"internal_code\", \"33\"], [\"id\", 3], [\"LIMIT\", 1]]\r\n22:27:45 web.1       |   SQL (0.3ms)  UPDATE \"characteristics\" SET \"publish_at\" = $1, \"updated_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"publish_at\", \"2018-06-02 22:27:00\"], [\"updated_at\", \"2018-02-19 03:27:45.799998\"], [\"id\", 3]]\r\n22:27:45 web.1       |    (1.8ms)  COMMIT\r\n22:27:45 web.1       | Redirected to http://localhost:5000/characteristics\r\n22:27:45 web.1       | Completed 302 Found in 9ms (ActiveRecord: 2.9ms)\r\n```\r\n\r\nNote that `\"publish_at\"=>\"02/06/2018 10:27 PM\"` correlates with:\r\n```SQL (0.3ms)  UPDATE \"characteristics\" SET \"publish_at\" = $1, \"updated_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"publish_at\", \"2018-06-02 22:27:00\"], [\"updated_at\", \"2018-02-19 03:27:45.799998\"], [\"id\", 3]]```\r\n\r\nAnd here is a **buggy reques**t where the `publish_at` field somehow becomes nil:\r\n```\r\n22:28:17 web.1       | Started PATCH \"/characteristics/3\" for ::1 at 2018-02-18 22:28:17 -0500\r\n22:28:17 web.1       | Processing by CharacteristicsController#update as HTML\r\n22:28:17 web.1       |   Parameters: {\"utf8\"=>\"✓\", \"authenticity_token\"=>\"HVZrwH54fT2wUaQh/pSaEblisT/veHTrA+kgpZPYk+n+I1hT/A/AqHkvuZ80uxIWNQ3MeqnOj/X43cp+BraBKQ==\", \"characteristic\"=>{\"type\"=>\"Trait\", \"internal_code\"=>\"33\", \"description\"=>\"asdf\", \"scale_low_text\"=>\"\", \"scale_high_text\"=>\"\", \"catchy_name\"=>\"\", \"publish_at\"=>\"02/18/2018 10:27 PM\"}, \"commit\"=>\"Update Trait\", \"id\"=>\"3\"}\r\n22:28:17 web.1       |   User Load (0.3ms)  SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 ORDER BY \"users\".\"id\" ASC LIMIT $2  [[\"id\", 1], [\"LIMIT\", 1]]\r\n22:28:17 web.1       |   Characteristic Load (0.4ms)  SELECT  \"characteristics\".* FROM \"characteristics\" WHERE \"characteristics\".\"id\" = $1 LIMIT $2  [[\"id\", 3], [\"LIMIT\", 1]]\r\n22:28:17 web.1       |    (0.1ms)  BEGIN\r\n22:28:17 web.1       |   Characteristic Exists (0.3ms)  SELECT  1 AS one FROM \"characteristics\" WHERE \"characteristics\".\"internal_code\" = $1 AND (\"characteristics\".\"id\" != $2) LIMIT $3  [[\"internal_code\", \"33\"], [\"id\", 3], [\"LIMIT\", 1]]\r\n22:28:17 web.1       |   SQL (0.3ms)  UPDATE \"characteristics\" SET \"publish_at\" = $1, \"updated_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"publish_at\", nil], [\"updated_at\", \"2018-02-19 03:28:17.571930\"], [\"id\", 3]]\r\n22:28:17 web.1       |    (1.6ms)  COMMIT\r\n22:28:17 web.1       | Redirected to http://localhost:5000/characteristics\r\n22:28:17 web.1       | Completed 302 Found in 8ms (ActiveRecord: 3.0ms)\r\n```\r\n\r\nNote that `\"publish_at\"=>\"02/18/2018 10:27 PM\"` correlates with:\r\n```22:28:17 web.1       |   SQL (0.3ms)  UPDATE \"characteristics\" SET \"publish_at\" = $1, \"updated_at\" = $2 WHERE \"characteristics\".\"id\" = $3  [[\"publish_at\", nil], [\"updated_at\", \"2018-02-19 03:28:17.571930\"], [\"id\", 3]]``` \r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.5\r\n\r\n**Ruby version**:\r\n2.5.0", "labels": [], "number": 32050, "updated_at": "2018-02-19 12:51:25", "user": 6576730, "closed_at": "2018-02-19 12:51:25", "id": 298154811, "title": "A string parameter representing a datetime sometimes becomes nil when persisted to database", "url": "https://api.github.com/repos/rails/rails/issues/32050", "created_at": "2018-02-19 03:52:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366584986", "text": "Update: It seems to be a `MM/DD/YYYY` vs `YYYY-MM-DD` issue.", "created_at": "2018-02-19 04:13:59", "user": 6576730, "id": 366584986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366684493", "text": "@stephenhmarsh this needs to be handled within your application as making it work for MM/DD/YYYY will obviously break DD/MM/YYYY (this is why Rails defaults to <select>s for date/time controls) and we can't know which is right for your users. Thanks for the report.", "created_at": "2018-02-19 12:51:25", "user": 6321, "id": 366684493}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [6443532]}, "text": "When upgrading from 5.1 to 5.2, if the application did not require `rails/all`, `ActiveStorage` not be defined.\r\nIn that case, Active Storage content is not generated regardless of whether the user wants to use or not.\r\n\r\nAs for the new component, I think it is preferable to check whether to use it for the user, but since it is not yet able to deal with it, I think that it is good to forcibly generate the content.\r\n", "labels": [], "number": 32049, "updated_at": "2018-02-19 12:14:07", "user": 987638, "closed_at": "2018-02-19 12:14:05", "id": 298136173, "title": "Do not check `ActiveStorage::Engine` when updating to 5.2", "url": "https://api.github.com/repos/rails/rails/issues/32049", "created_at": "2018-02-19 00:54:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366564894", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-2-stable. Please double check that you specified the right target!", "created_at": "2018-02-19 00:54:56", "user": 7468109, "id": 366564894}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is an alternative of #29722, and revert of #29601 and a1fcbd9.\r\n\r\nCurrently, association creation and normal association finding doesn't\r\nrespect `store_full_sti_class`. But eager loading and preloading respect\r\nthe setting. This means that if set `store_full_sti_class = false`\r\n(`true` by default), eager loading and preloading can not find\r\ncreated polymorphic records.\r\n\r\nAssociation creation and finding should work consistently.", "labels": [], "number": 32048, "updated_at": "2018-02-25 20:09:26", "user": 12642, "closed_at": "2018-02-25 20:09:23", "id": 298098187, "title": "Association creation and finding should work consistently", "url": "https://api.github.com/repos/rails/rails/issues/32048", "created_at": "2018-02-18 16:37:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backport of #31827.", "labels": [], "number": 32047, "updated_at": "2018-02-28 01:20:35", "user": 12642, "closed_at": "2018-02-18 16:38:05", "id": 298090343, "title": "5-0-stable: PERF: Recover marshaling dump/load performance", "url": "https://api.github.com/repos/rails/rails/issues/32047", "created_at": "2018-02-18 14:51:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366521432", "text": "<img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20> **Warning** <img src=\"http://www.joshmatthews.net/warning.svg\" alt=\"warning\" height=20>\n\n* Pull requests are usually filed against the master branch for this repo, but this one is against 5-0-stable. Please double check that you specified the right target!", "created_at": "2018-02-18 14:51:10", "user": 7468109, "id": 366521432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/369087186", "text": "Thank you @kamipo !", "created_at": "2018-02-28 01:20:35", "user": 630449, "id": 369087186}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes https://github.com/rails/rails/issues/32044.", "labels": [], "number": 32046, "updated_at": "2018-02-18 14:18:31", "user": 5657035, "closed_at": "2018-02-18 14:16:34", "id": 298087418, "title": "Fix active_job_basics.md callbacks example [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32046", "created_at": "2018-02-18 14:08:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366518710", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-18 14:09:00", "user": 7468109, "id": 366518710}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [840464, 15371677]}, "text": "### Summary\r\n\r\n`Rails.application.config.content_security_policy` is configured with no\r\npolicies by default. In this case, Content-Security-Policy header should\r\nnot be generated instead of generating the header with no directives.\r\n\r\n### Other Information\r\n\r\nFirefox also warns \"Content Security Policy: Couldn't process unknown\r\ndirective ''\".\r\n", "labels": [], "number": 32045, "updated_at": "2018-02-19 21:15:33", "user": 69755, "closed_at": "2018-02-18 19:09:43", "id": 298082513, "title": "Skip generating empty CSP header when no policy is configured", "url": "https://api.github.com/repos/rails/rails/issues/32045", "created_at": "2018-02-18 12:52:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366514003", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @eileencodes (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-18 12:52:23", "user": 7468109, "id": 366514003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366582934", "text": "Thank you for reviewing and merging! Will it be backported to 5-2-stable?", "created_at": "2018-02-19 03:51:33", "user": 69755, "id": 366582934}, {"reactions": {"heart": [69755]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366587342", "text": "@eagletmt of course!!! I've backported it in b88292bdbb", "created_at": "2018-02-19 04:40:41", "user": 160941, "id": 366587342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366804398", "text": "The error message that Firefox is giving isn't very helpful and also not present in Chrome. I've bugged Firefox as it seems they're not gracefully handling a CSP header with \";\" as the value.\r\n\r\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1439425", "created_at": "2018-02-19 21:15:33", "user": 5352840, "id": 366804398}], "assignees": [1080678, 1080678], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nUsing example from guides [0] create the job with around_perform callback defined as a method:\r\n\r\n```\r\nclass GuestsCleanupJob < ApplicationJob\r\n  queue_as :default\r\n\r\n  around_perform :around_cleanup\r\n\r\n  def perform(*args)\r\n    # Do something later\r\n    puts args\r\n  end\r\n\r\n  private\r\n  def around_cleanup(job)\r\n    # Do something before perform\r\n    puts 'before', job\r\n    yield\r\n    # Do something after perform\r\n    puts 'after'\r\n  end\r\nend\r\n```\r\n\r\nThen enqueue the job, e.g. from console with\r\n\r\n```sh\r\n$ rails c\r\n> GuestsCleanupJob.perform_later 'test'\r\n```\r\n\r\n[0] https://github.com/rails/rails/blob/master/guides/source/active_job_basics.md#callbacks\r\n\r\n### Expected behavior\r\nAround perform callback to be called with job instance, job perform method called\r\n\r\n### Actual behavior\r\nCall fails with exception \r\n\r\n```\r\nError performing GuestsCleanupJob (Job ID: b8d37412-ff74-410d-b7ba-bb3c23148fd1) from Async(default) in 0.23ms: ArgumentError (wrong number of arguments (given 0, expected 1)):\r\n/home/ev/around_perform_test/app/jobs/guests_cleanup_job.rb:12:in `around_cleanup'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `block in run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/i18n-0.9.5/lib/i18n.rb:268:in `with_locale'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/translation.rb:7:in `block (2 levels) in <module:Translation>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `instance_exec'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `block in run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/logging.rb:24:in `block (4 levels) in <module:Logging>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/notifications.rb:166:in `block in instrument'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/notifications.rb:166:in `instrument'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/logging.rb:23:in `block (3 levels) in <module:Logging>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/logging.rb:44:in `block in tag_logger'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:69:in `block in tagged'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:26:in `tagged'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/tagged_logging.rb:69:in `tagged'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/logging.rb:44:in `tag_logger'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/logging.rb:20:in `block (2 levels) in <module:Logging>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `instance_exec'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `block in run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:135:in `run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/execution.rb:33:in `perform_now'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/execution.rb:22:in `block in execute'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:108:in `block in run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/railtie.rb:26:in `block (4 levels) in <class:Railtie>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/execution_wrapper.rb:85:in `wrap'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/reloader.rb:68:in `block in wrap'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/execution_wrapper.rb:85:in `wrap'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/reloader.rb:67:in `wrap'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/railtie.rb:25:in `block (3 levels) in <class:Railtie>'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `instance_exec'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:117:in `block in run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activesupport-5.1.5/lib/active_support/callbacks.rb:135:in `run_callbacks'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/execution.rb:20:in `execute'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/activejob-5.1.5/lib/active_job/queue_adapters/async_adapter.rb:68:in `perform'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:348:in `run_task'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:337:in `block (3 levels) in create_worker'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:320:in `loop'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:320:in `block (2 levels) in create_worker'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:319:in `catch'\r\n/home/ev/.rbenv/versions/2.4.2/lib/ruby/gems/2.4.0/gems/concurrent-ruby-1.0.5/lib/concurrent/executor/ruby_thread_pool_executor.rb:319:in `block in create_worker'\r\n```\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.4.2\r\n\r\nThere is the commit inlining around perform calls in tests https://github.com/rails/rails/pull/17343 but I can't see why it shouldn't work, in case it shouldn't - I can supply the fix to the guides.\r\n", "labels": [], "number": 32044, "updated_at": "2018-02-18 15:11:59", "user": 43391, "closed_at": "2018-02-18 14:16:33", "id": 298081706, "title": "ActiveJob around_* callbacks with method", "url": "https://api.github.com/repos/rails/rails/issues/32044", "created_at": "2018-02-18 12:39:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366515124", "text": "Yeah, weird, this should work. Confirmed also on master. Will look at this, if you don't mind.  ", "created_at": "2018-02-18 13:11:02", "user": 5657035, "id": 366515124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366516877", "text": "Just a little incorrect documentation. Try this.\r\n```ruby\r\nclass GuestsCleanupJob < ApplicationJob\r\n  queue_as :default\r\n\r\n  around_perform :around_cleanup\r\n\r\n  def perform(*args)\r\n    # Do something later\r\n    puts args\r\n  end\r\n\r\n  private\r\n  def around_cleanup # <-- no need \"job\" argument here\r\n    # Do something before perform\r\n    puts 'before', self\r\n    yield\r\n    # Do something after perform\r\n    puts 'after'\r\n  end\r\nend\r\n```", "created_at": "2018-02-18 13:39:55", "user": 5657035, "id": 366516877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366522802", "text": "Sweet, thank you!", "created_at": "2018-02-18 15:11:59", "user": 43391, "id": 366522802}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [4509277]}, "text": "### Summary\r\n\r\nAfter having recently read about `Object#presence` and `Object#presence_in` I thought they didn't seem as readable as they could. So I've added aliased methods for them.\r\n\r\n### Other Information\r\n\r\nIn my opinion:\r\n\r\n`region = params[:state].if_present || params[:country].if_present || 'US'`\r\n\r\nis more readable than:\r\n\r\n`region = params[:state].presence || params[:country].presence || 'US'`\r\n\r\nAlso, from watching @dhh's Writing Software Well videos today, I noticed he uses `Object#presence_in` like this:\r\n\r\n`redis_set granulary_key, option.presence_in(OPTIONS) || DEFAULT`\r\n\r\nI think it's more readable with a method name tweak and if you can just add the default to the method:\r\n\r\n`redis_set granulary_key, option.if_present_in(OPTIONS, DEFAULT)`\r\n\r\nI'd welcome any thoughts...", "labels": [], "number": 32043, "updated_at": "2018-02-18 23:59:31", "user": 22904, "closed_at": "2018-02-18 19:48:44", "id": 298081428, "title": "More natural reading aliases for Object#presence and Object#presence_in", "url": "https://api.github.com/repos/rails/rails/issues/32043", "created_at": "2018-02-18 12:34:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366512910", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-18 12:34:30", "user": 7468109, "id": 366512910}, {"reactions": {"+1": [199]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366542071", "text": "`if_present` reads awkward to me. It partway mimics a tailing if, but then it isn't. I do a mental stop to parse the intent of the `if_`s twice in your example. Whereas with `presence` the line \"flow\" is kept and the logic with the `||` springs out more to me.\r\n\r\nAlso the `if_` part would suggest the method should end in `?`, but it can't because it's not meant to return a boolean. I think that's the reason `present?` became `presence`.\r\n\r\nThere's definitely competing tradeoffs here, to borrow David's series parlance. So thanks for bringing another perspective. I prefer `presence`, so I'll close this for now. If this has swayed others on core/committers, they're free to open again so we can revisit 😊", "created_at": "2018-02-18 19:48:43", "user": 350807, "id": 366542071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366560250", "text": "What Kasper said 👍\n\n> On Feb 18, 2018, at 11:49, Kasper Timm Hansen <notifications@github.com> wrote:\n> \n> if_present reads awkward to me. It partway mimics a tailing if, but then it isn't. I do a mental stop to parse the intent of the if_s twice in your example. Whereas with presence the line \"flow\" is kept and the logic with the || springs out more to me.\n> \n> Also the if_ part would suggest the method should end in ?, but it can't because it's not meant to return a boolean. I think that's the reason present? became presence.\n> \n> There's definitely competing tradeoffs here, to borrow David's series parlance. So thanks for bringing another perspective. I prefer presence, so I'll close this for now. If this has swayed others on core/committers, they're free to open again so we can revisit 😊\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n", "created_at": "2018-02-18 23:59:30", "user": 2741, "id": 366560250}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have some doubt about this change, just want to know your thoughts about this.\r\nShould we update AS migration every major/minor release?\r\n\r\nr? @georgeclaghorn", "labels": [], "number": 32042, "updated_at": "2018-02-19 08:12:58", "user": 6443532, "closed_at": "2018-02-19 00:16:16", "id": 298075094, "title": "Change AR::Migration version from 5.2 to 6.0 in activestorage", "url": "https://api.github.com/repos/rails/rails/issues/32042", "created_at": "2018-02-18 10:38:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366561813", "text": "Migration versions are not intended to be changed.", "created_at": "2018-02-19 00:16:16", "user": 94129, "id": 366561813}, {"reactions": {"+1": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366561992", "text": "Yeah, I think to expand further — we'd only change the version only when there's a breaking change or incompatibility.", "created_at": "2018-02-19 00:18:15", "user": 4912, "id": 366561992}], "assignees": [94129, 94129], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nThis PR documents the `:reconnect_attempts` option for Redis Cache Store.", "labels": [], "number": 32041, "updated_at": "2018-02-18 07:03:07", "user": 21235090, "closed_at": "2018-02-18 06:51:59", "id": 298058156, "title": "Document :reconnect_attempts option for Redis Cache Store [ci skip]", "url": "https://api.github.com/repos/rails/rails/issues/32041", "created_at": "2018-02-18 04:31:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366491864", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-18 04:31:18", "user": 7468109, "id": 366491864}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\nWhen you have a model concern in your app with the same name as one of the three included in `ActiveStorage::Blob`, an error may occurs. \r\n\r\nIn my case, I have a the following concern:\r\n\r\n```\r\nmodule Identifiable\r\n  extend ActiveSupport::Concern\r\n\r\n  included do\r\n    # Validations\r\n    validates_presence_of :first_name, :last_name, :email\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\n\r\nMy model should be saved and the files uploaded.\r\n\r\n### Actual behavior\r\n\r\nI get the error `undefined method 'first_name' for #<ActiveStorage::Blob:0x00007f87d0132388>` which is triggered by the validation in my concern.\r\n\r\n### System configuration\r\n**Rails version**: 5.2.0.rc1\r\n\r\n**Ruby version**: 2.5.0p0\r\n", "labels": [], "number": 32040, "updated_at": "2018-02-18 03:23:08", "user": 55738, "closed_at": "2018-02-18 03:23:08", "id": 298055283, "title": "ActiveStorage fails when a model concern Identifiable exists", "url": "https://api.github.com/repos/rails/rails/issues/32040", "created_at": "2018-02-18 03:15:21", "comments": [{"reactions": {"+1": [55738]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366489639", "text": "This was fixed in #31968 and #31995. Those changes will be included in the next RC.\r\n\r\nBundle Rails from the `5-2-stable` branch to get the fixes now.\r\n\r\n", "created_at": "2018-02-18 03:23:08", "user": 94129, "id": 366489639}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Prepare bug report templates for Rails 6.0 development\r\nAdd missing `require \"active_support\"` in `guides/bug_report_templates/generic_gem.rb`", "labels": [], "number": 32039, "updated_at": "2018-02-18 09:39:52", "user": 6443532, "closed_at": "2018-02-18 06:53:16", "id": 298048965, "title": "Update bug report templates", "url": "https://api.github.com/repos/rails/rails/issues/32039", "created_at": "2018-02-18 00:44:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366483202", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-18 00:44:21", "user": 7468109, "id": 366483202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366496493", "text": "Thanks @bogdanvlviv!", "created_at": "2018-02-18 06:53:24", "user": 199, "id": 366496493}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes few typos\r\n", "labels": [], "number": 32038, "updated_at": "2018-02-18 00:03:37", "user": 737325, "closed_at": "2018-02-18 00:03:26", "id": 298046890, "title": "Fixes typos", "url": "https://api.github.com/repos/rails/rails/issues/32038", "created_at": "2018-02-18 00:01:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366480906", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-18 00:02:00", "user": 7468109, "id": 366480906}, {"reactions": {"+1": [737325]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366480992", "text": "Thanks @dharamgollapudi !", "created_at": "2018-02-18 00:03:37", "user": 199, "id": 366480992}], "assignees": [350807, 350807], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```ruby\r\n\"foo\".freeze.strip_heredoc.frozen?  # => true\r\n```\r\n\r\nFixes the case where frozen string literals would inadvertently become unfrozen:\r\n```ruby\r\n# frozen_string_literal: true\r\nfoo = <<-MSG.strip_heredoc\r\n  la la la\r\nMSG\r\n\r\nfoo.frozen?  # => false !??\r\n```", "labels": [], "number": 32037, "updated_at": "2018-02-18 08:02:32", "user": 199, "closed_at": "2018-02-18 07:02:20", "id": 298045978, "title": "`String#strip_heredoc` preserves frozenness", "url": "https://api.github.com/repos/rails/rails/issues/32037", "created_at": "2018-02-17 23:42:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366496905", "text": "What makes `strip_heredoc` special such that it should preserve frozenness, when other string methods (like `gsub`) don't?\r\n\r\n(Particularly in the context of master, where we'd presumably discourage its use in favour of squiggly heredocs for most [and certainly called-on-a-literal] purposes)", "created_at": "2018-02-18 07:04:05", "user": 1034, "id": 366496905}, {"reactions": {"+1": [1034]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366499120", "text": "It's usage context: this was devised for cleanup of literal heredoc syntax.\r\n\r\nConsidering this usage is now obviated by squiggly heredocs, my first thought was to deprecate, too. Then I saw all our unrelated internal usage. 😑", "created_at": "2018-02-18 08:02:32", "user": 199, "id": 366499120}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm writing a [Hanami](https://hanamirb.org) app that interacts with the Twitter API. Their API [returns timezones for users in the Rails timezone strings, rather than IANA.](https://twittercommunity.com/t/please-use-standard-time-zone-identifiers/12081). \r\n\r\nI can add ActiveSupport as a dependency and use its timezone functionality to translate to IANA.\r\n\r\nBut, there was this lingering:\r\n```ruby\r\nrequire \"active_support/core_ext/object/blank\"\r\n```\r\nat the top, which I'd like to avoid adding to my project code-base.\r\n\r\n`Object#blank?` isn't used in this file anymore (it was when it was added, of course).\r\n\r\nThis avoids a monkey-patch, for those of us who just want this isolated feature of ActiveSupport.\r\n", "labels": [], "number": 32036, "updated_at": "2018-02-17 23:34:08", "user": 632942, "closed_at": "2018-02-17 23:34:08", "id": 298044326, "title": "Remove require Object#blank? monkey patch", "url": "https://api.github.com/repos/rails/rails/issues/32036", "created_at": "2018-02-17 23:11:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366478382", "text": "r? @kamipo\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-17 23:11:25", "user": 7468109, "id": 366478382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366479514", "text": "Looks like `blank?` usage was removed in 090156adebb5c373e05a333f695b9cc7b4fe1905.", "created_at": "2018-02-17 23:33:29", "user": 199, "id": 366479514}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [350905]}, "text": "### Steps to reproduce\r\n\r\nBy bisecting I have found, that regression was introduced some time ago (starting from 5.1.0) in this PR https://github.com/rails/rails/pull/27248.\r\n\r\nWhen model fails to update, `after_rollback .. on: :update` should be called, if defined. While `after_rollback .. on: :create` works as expected, `after_rollback .. on: :destroy` is not working neither on master, nor in 5.0.6.\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  gem \"activerecord\", \"5.0.6\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# Ensure backward compatibility with Minitest 4\r\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :users, force: true do |t|\r\n    t.string :name\r\n  end\r\nend\r\n\r\nclass User < ActiveRecord::Base\r\n  validates :name, presence: true\r\n\r\n  before_update  :raise_rollback!\r\n  before_destroy :raise_rollback!\r\n\r\n  after_rollback(on: :create) { |record| record.do_after_rollback(:create) }\r\n  after_rollback(on: :update) { |record| record.do_after_rollback(:update) }\r\n  after_rollback(on: :destroy) { |record| record.do_after_rollback(:destroy) }\r\n\r\n  def after_rollback_block(on, &block)\r\n    @after_rollback ||= {}\r\n    @after_rollback[on] ||= []\r\n    @after_rollback[on] << block\r\n  end\r\n\r\n  def do_after_rollback(on)\r\n    blocks = @after_rollback[on] if defined?(@after_rollback)\r\n    blocks.each { |b| b.call(self) } if blocks\r\n  end\r\n\r\n  def history\r\n    @history ||= []\r\n  end\r\n\r\n  def raise_rollback!\r\n    raise ActiveRecord::Rollback\r\n  end\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_after_rollback_on_create_was_called\r\n    user = User.new\r\n    user.after_rollback_block(:create) { |u| u.history << :after_rollback_on_create }\r\n    user.save\r\n\r\n    # works on 5.0.6 and master\r\n    assert_equal [:after_rollback_on_create], user.history\r\n  end\r\n\r\n  def test_after_rollback_on_update_was_called\r\n    user = User.create(name: \"john\")\r\n    user.after_rollback_block(:update) { |u| u.history << :after_rollback_on_update }\r\n    user.save\r\n\r\n    # works on 5.0.6, fails on master\r\n    assert_equal [:after_rollback_on_update], user.history\r\n  end\r\n\r\n  def test_after_rollback_on_destroy_was_called\r\n    user = User.create(name: \"john\")\r\n    user.after_rollback_block(:destroy) { |u| u.history << :after_rollback_on_destroy }\r\n    user.destroy\r\n\r\n    # fails on 5.0.6 and master\r\n    assert_equal [:after_rollback_on_destroy], user.history\r\n  end\r\nend\r\n```\r\n\r\n### Expected behavior\r\nWhen model fails to update/destroy, `after_rollback .. on: :update`/`after_rollback .. on: :destroy` should be called.\r\n\r\n### Actual behavior\r\nCallbacks are not called.\r\n\r\nRelated https://github.com/rails/rails/issues/7640.\r\n\r\n### System configuration\r\n**Rails version**: master\r\n\r\n**Ruby version**: 2.4.1", "labels": [], "number": 32035, "updated_at": "2018-02-17 23:00:14", "user": 5657035, "closed_at": "None", "id": 298043649, "title": "Possible regression of `after_rollback on: :update` and `after_rollback on: :destroy` is not working", "url": "https://api.github.com/repos/rails/rails/issues/32035", "created_at": "2018-02-17 23:00:14", "comments": [], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {"heart": [1796864, 86755], "+1": [15371677, 6443532, 3124, 6321, 1034, 354185, 1796864, 86755]}, "text": "References #32028\r\n\r\nSkipping over 2.4.0 to sidestep the `\"symbol_from_string\".to_sym.dup` bug.\r\n\r\n/cc @mtsmfm @matthewd ", "labels": [], "number": 32034, "updated_at": "2018-02-18 08:23:47", "user": 199, "closed_at": "2018-02-17 23:34:59", "id": 298036838, "title": "Rails 6 requires Ruby 2.4.1+", "url": "https://api.github.com/repos/rails/rails/issues/32034", "created_at": "2018-02-17 21:12:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://github.com/ruby/ruby/blob/ruby_2_3/NEWS\r\n\r\nOriginally I sent patch to https://github.com/jeremy/rails/pull/1 in order to merge this with https://github.com/rails/rails/pull/32028, but https://github.com/jeremy/rails/pull/1 was unnoticed.\r\n\r\n@jeremy Could you please review?", "labels": [], "number": 32033, "updated_at": "2018-02-17 21:16:58", "user": 6443532, "closed_at": "2018-02-17 21:09:32", "id": 298024710, "title": "Remove extra conditions in HWIDA since Rails 6 does not support Ruby 2.2", "url": "https://api.github.com/repos/rails/rails/issues/32033", "created_at": "2018-02-17 18:16:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366460617", "text": "r? @sgrif\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-17 18:16:32", "user": 7468109, "id": 366460617}, {"reactions": {"+1": [199]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366464479", "text": "1e526788e6b1d3f42f4d8fdca20e588d42838c80 breaks the tests because some attr_readers should be `protected`.\r\nSee https://travis-ci.org/rails/rails/builds/342800276,\r\nThis PR partly reverts 1e526788e6b1d3f42f4d8fdca20e588d42838c80.", "created_at": "2018-02-17 19:15:18", "user": 6443532, "id": 366464479}, {"reactions": {"heart": [6443532]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366471594", "text": "Thanks @bogdanvlviv!", "created_at": "2018-02-17 21:09:47", "user": 199, "id": 366471594}], "assignees": [1529387, 1529387], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Before:\r\n```\r\n~/.rbenv/versions/2.5.0/bin/ruby -w -Itest -Ilib -I../activesupport/lib -I../actionpack/lib -I../actionview/lib -I../activemodel/lib test/application/routing_test.rb\r\nRun options: --seed 5851\r\n\r\n# Running:\r\n\r\n.......~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:156: warning: method redefined; discarding old custom_path\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_path was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:162: warning: method redefined; discarding old custom_url\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_url was here\r\n....~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:156: warning: method redefined; discarding old custom_path\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_path was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:162: warning: method redefined; discarding old custom_url\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_url was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:156: warning: method redefined; discarding old custom_path\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_path was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:162: warning: method redefined; discarding old custom_url\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_url was here\r\n..........~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:156: warning: method redefined; discarding old custom_path\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_path was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:162: warning: method redefined; discarding old custom_url\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_url was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:156: warning: method redefined; discarding old custom_path\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_path was here\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:162: warning: method redefined; discarding old custom_url\r\n~/code/rails/actionpack/lib/action_dispatch/routing/route_set.rb:321: warning: previous definition of custom_url was here\r\n.....\r\n\r\nFinished in 13.233638s, 1.9647 runs/s, 5.8185 assertions/s.\r\n26 runs, 77 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\nAfter:\r\n```\r\n~/.rbenv/versions/2.5.0/bin/ruby -w -Itest -Ilib -I../activesupport/lib -I../actionpack/lib -I../actionview/lib -I../activemodel/lib test/application/routing_test.rb\r\nRun options: --seed 38072\r\n\r\n# Running:\r\n\r\n..........................\r\n\r\nFinished in 12.009632s, 2.1649 runs/s, 6.4115 assertions/s.\r\n26 runs, 77 assertions, 0 failures, 0 errors, 0 skips\r\n```\r\n\r\nRuby 2.5.0", "labels": [], "number": 32032, "updated_at": "2018-02-19 15:14:31", "user": 6261109, "closed_at": "2018-02-19 15:04:24", "id": 298001290, "title": "Avoid method_redefined warnings in  RouteSet::NamedRouteCollection", "url": "https://api.github.com/repos/rails/rails/issues/32032", "created_at": "2018-02-17 12:28:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366438162", "text": "r? @eileencodes\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-17 12:28:13", "user": 7468109, "id": 366438162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366441886", "text": "If that's what we want, we have `redefine_method`. But do we actually want to allow these to silently redefine methods? At a glance, it sounds like it could be a legitimate warning.", "created_at": "2018-02-17 13:35:38", "user": 1034, "id": 366441886}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366442204", "text": "Hmm, those warnings are more a consequence of the test setup - there's a normal named route and the custom url helper `direct(:custom)` is getting defined and causing the warnings. If you add the option `as: nil` to the normal `get 'custom'` route definitions then the warnings go away.", "created_at": "2018-02-17 13:41:42", "user": 6321, "id": 366442204}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366442615", "text": "As @matthewd said, these are probably legitimate warnings - they're telling you that you're overwriting an existing url helper. In fact there's an argument that this should cause an error since that's what we do for name clashes with ordinary routes.", "created_at": "2018-02-17 13:48:20", "user": 6321, "id": 366442615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366446745", "text": "Thank you both for the feedback, and for helping me learn to take a longer look before silencing.\r\n@pixeltrix : are you making the argument, suggesting we raise on such cases, or is this being discussed elsewhere?\r\n\r\n", "created_at": "2018-02-17 14:59:21", "user": 6261109, "id": 366446745}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366447199", "text": "@utilum I think we can discuss it here\r\n\r\n@rafaelfranca @matthewd what's your thoughts on raising an error in a similar way as when you define two ordinary urls with the same name?", "created_at": "2018-02-17 15:06:34", "user": 6321, "id": 366447199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366506646", "text": "Taking a longer look, there's no need to raise. Changing a route when switching environment or calling `reload_routes!` for another reason is legit. Let's provide an informative warning and test for that, not warn when running the tests.", "created_at": "2018-02-18 10:35:05", "user": 6261109, "id": 366506646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366683121", "text": "@utilum on reflection it's quite likely to be a common scenario where `direct` is being used to override a standard url helper and rather than make a developer jump through hoops to avoid a name clash then we should just use `redefine_method` - can you update your PR, thanks!", "created_at": "2018-02-19 12:45:26", "user": 6321, "id": 366683121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366686026", "text": "done.", "created_at": "2018-02-19 12:57:48", "user": 6261109, "id": 366686026}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [4083992]}, "text": "### Summary\r\n\r\nSince Rails 6.0 will support Ruby 2.3 or higher\r\n`# frozen_string_literal: true` magic comment enabled\r\nby `Style/FrozenStringLiteralComment` cop is enough to make string object frozen.\r\n\r\n### Other Information\r\n\r\nI'd like to hear from Rails committers for this change since Rails 5.2 will supports Ruby 2.2, this change itself should not be backported but also it could make other backports complex.", "labels": [], "number": 32031, "updated_at": "2018-03-18 10:08:43", "user": 73684, "closed_at": "None", "id": 297991765, "title": "Add `Style/RedundantFreeze` to remove redudant `.freeze`", "url": "https://api.github.com/repos/rails/rails/issues/32031", "created_at": "2018-02-17 09:21:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366428700", "text": "r? @kaspth\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-17 09:21:23", "user": 7468109, "id": 366428700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366431725", "text": "I wonder how many of these are extremely performance-critical. For most, it seems fine to backport to 5.2, just to make future maintenance easier: things being *slightly* slower on 5.2 + 2.2 doesn't sound like a big deal... I'm just not sure how we'd identify any where it makes a catastrophic difference.\r\n\r\nOtherwise, we can wait a while and then merge this in a few months, when 5.2 backports have settled down.\r\n\r\n---\r\n\r\nI think we might want to keep the explicit `freeze` on the tests that specifically want a frozen string, for clarity. (Maybe?)", "created_at": "2018-02-17 10:23:04", "user": 1034, "id": 366431725}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366478219", "text": "Thanks for the review. I did not expect that backporting this change to 5-2-stable is possible.\r\n\r\n> I think we might want to keep the explicit freeze on the tests that specifically want a frozen string, for clarity. (Maybe?)\r\n\r\nAgreed. I have excluded 3 test files which have tests expecting a frozen string in case of backporting and respecting the intention of the tests.\r\n", "created_at": "2018-02-17 23:08:04", "user": 73684, "id": 366478219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366478458", "text": "Backporting to 5.2 is a nice idea. We could say Rails 5.2 supports Ruby 2.2, with this caveat, but prefers 2.3 or newer.\r\n\r\nOn the other hand, it's strange for our API to return differently mutable/frozen strings depending on the version of Ruby you're running.", "created_at": "2018-02-17 23:12:57", "user": 199, "id": 366478458}, {"reactions": {"+1": [199, 747215]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366497201", "text": "> On the other hand, it's strange for our API to return differently mutable/frozen strings depending on the version of Ruby you're running.\r\n\r\nWe're already doing that on any other literals where we don't explicitly call `.freeze`, so it doesn't seem terrible... I guess there is a distinction between the performance-based freezings, and the ones where we actually care about making the value immutable (because it's being stored and reused in a constant, say).\r\n\r\nI do think it's reasonable for us to strongly recommend a newer ruby than the oldest we support, and to bump that recommendation more freely: we want 5.2 to *work* on almost-already-EOL 2.2, but I don't see myself feeling bad it if doesn't work *well*.", "created_at": "2018-02-18 07:12:12", "user": 1034, "id": 366497201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366514592", "text": "Excluded two more files changed by this commit. https://github.com/rails/rails/commit/8454aeeb2b8e7d1255acbaaec4e0ae3c97d55f49", "created_at": "2018-02-18 13:02:20", "user": 73684, "id": 366514592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368003690", "text": "Addressed conflicts. Since this pull request has been conflicting other commits\r\nBy separating commits by `rubocop -a` it is easy to rebase.\r\n\r\nWill squash two commits when it is ready to merge.", "created_at": "2018-02-23 13:04:19", "user": 73684, "id": 368003690}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368157474", "text": "It has been approved then I have squashed two commits.", "created_at": "2018-02-23 22:31:33", "user": 73684, "id": 368157474}], "assignees": [1034, 1034], "state": "open", "is-pull-request": true}
{"reactions": {}, "text": "Fixes #32021.\r\n", "labels": [], "number": 32030, "updated_at": "2018-02-20 18:32:10", "user": 987638, "closed_at": "2018-02-18 22:16:54", "id": 297989724, "title": "Use the query cache when connection is already connected", "url": "https://api.github.com/repos/rails/rails/issues/32030", "created_at": "2018-02-17 08:35:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366427333", "text": "cc @rafaelfranca ", "created_at": "2018-02-17 08:51:05", "user": 987638, "id": 366427333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366553852", "text": "Backported: 2665c8f0ecdae127ece8e91e0d1b93b679a06a6e, ff137ec49bed216a0fb1a532e4d261d85ef2f191", "created_at": "2018-02-18 22:28:42", "user": 987638, "id": 366553852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367073697", "text": "Thanks ❤️ ", "created_at": "2018-02-20 18:32:10", "user": 47848, "id": 367073697}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\n- `active_support/core_ext/string/strip` was added on #31942.\r\n- `strip_heredoc` was removed on https://github.com/rails/rails/commit/89bcca59e91fa9da941de890012872e8288e77b0\r\n- But it still remains `require \"active_support/core_ext/string/strip\"` statement.", "labels": [], "number": 32029, "updated_at": "2018-02-17 03:28:47", "user": 15371677, "closed_at": "2018-02-17 02:57:13", "id": 297970104, "title": "Remove needless requiring 'active_support/core_ext/string/strip'", "url": "https://api.github.com/repos/rails/rails/issues/32029", "created_at": "2018-02-17 02:12:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366407927", "text": "r? @pixeltrix\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-17 02:12:20", "user": 7468109, "id": 366407927}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "(And eventually Ruby 2.4+)", "labels": [], "number": 32028, "updated_at": "2018-02-17 21:11:54", "user": 199, "closed_at": "2018-02-17 18:03:38", "id": 297965472, "title": "Rails 6 requires Ruby 2.3+", "url": "https://api.github.com/repos/rails/rails/issues/32028", "created_at": "2018-02-17 01:18:12", "comments": [{"reactions": {"+1": [15371677]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366419941", "text": "@jeremy @rafaelfranca \r\n\r\nRails 6 still supports 2.3?\r\nIf we don't have to support 2.3, I hope we can remove `AS::Multibyte`'s unicode table.\r\n\r\nhttps://github.com/rails/rails/pull/26743", "created_at": "2018-02-17 06:03:54", "user": 1796864, "id": 366419941}, {"reactions": {"heart": [1796864]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366420701", "text": "@mtsmfm we expect to require 2.4... this change came first because CI was broken on 2.2.", "created_at": "2018-02-17 06:22:13", "user": 1034, "id": 366420701}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "### Summary\r\n\r\nTrivial URL fix.", "labels": [], "number": 32027, "updated_at": "2018-02-23 08:22:44", "user": 168301, "closed_at": "2018-02-17 01:33:30", "id": 297962596, "title": "Use secure link to security policy", "url": "https://api.github.com/repos/rails/rails/issues/32027", "created_at": "2018-02-17 00:50:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366399920", "text": "Thanks for the pull request, and welcome! The Rails team is excited to review your changes, and you should hear from @kamipo (or someone else) soon.\n\nIf any changes to this PR are deemed necessary, please add them as extra commits. This ensures that the reviewer can see what has changed since they last reviewed the code. Due to the way GitHub handles out-of-date commits, this should also make it reasonably obvious what issues have or haven't been addressed. Large or tricky changes may require several passes of review and changes.\n\nThis repository is being automatically checked for code quality issues using <a href=\"https://codeclimate.com\">Code Climate</a>. You can see results for this analysis in the PR status below. Newly introduced issues should be fixed before a Pull Request is considered ready to review.\n\nPlease see [the contribution instructions](http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html) for more information.\n", "created_at": "2018-02-17 00:50:50", "user": 7468109, "id": 366399920}], "assignees": [12642, 12642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Add argument serializer `TimeWithZoneSerializer`\r\n  - The serializer serializes an instance of `ActiveSupport::TimeWithZone`.\r\n  - The serializer deserializes value to `ActiveSupport::TimeWithZone` if possible.\r\n-  Fix docs of ActiveJob custom argument serializers\r\n   - Add `:nodoc:` to `ActiveJob::Serializers`\r\n   - Add `:doc:` to `ActiveJob::Serializers::ObjectSerializer#klass`\r\n   - Express `ActiveJob::Serializers::ObjectSerializer#klass` as private method\r\n- Fix error message about unknown `ActiveJob` argument serializer\r\n- <s>Express `ActiveJob::Serializers::ObjectSerializer#klass` as private method</s>\r\n  - <s>We don't use any benefits of `protected` in this case.</s>\r\n- <s>Make more strict condition of choosing of `ActiveJob` argument serializer</s>\r\n  - <s>Use `#instance_of?` instead of `#is_a?` to remove\r\n    dependance on order of argument serializers in `_additional_serializers`.\r\n    I changed order of adding custom argument serializers in order to\r\n    express the issue and ensure that it is solved\r\n\r\n    Example of the issue:\r\n    ```\r\n     ActiveJob::Serializers.add_serializers DateSerializer, DateTimeSerializer\r\n    ActiveJob::Serializers.deserialize(\r\n      ActiveJob::Serializers.serialize(\r\n        DateTime.new(2001, 2, 3, 4, 5, 6, \"+03:00\")\r\n      )\r\n    ).class # returns `Date` instead of `DateTime`\r\n    ```\r\n</s>\r\n  - <s>Use `serialize?` instead of `klass` in `SerializersTest::DummyValueObject`\r\n    since `klass` is more look like private API.</s>\r\n\r\nRelated to #30941, fa9e791\r\n\r\nr? @rafaelfranca ", "labels": [], "number": 32026, "updated_at": "2018-02-20 20:28:35", "user": 6443532, "closed_at": "2018-02-20 18:35:35", "id": 297955419, "title": "Improve ActiveJob custom argument serializers #30941", "url": "https://api.github.com/repos/rails/rails/issues/32026", "created_at": "2018-02-16 23:56:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366395749", "text": "The `is_a?` is by design. We want to be able to define serializers for the abstract classes without to defined one for each concrete class. We can be strict in the Date and DateTime serializers, but the object serializer needs to be using `is_a?`", "created_at": "2018-02-17 00:18:31", "user": 47848, "id": 366395749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366395850", "text": "And `klass` is not private API, I expose in the public API, this is why I'm using `protected` and not `private` to define it.", "created_at": "2018-02-17 00:19:24", "user": 47848, "id": 366395850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366398348", "text": "To be really true we don't need to be string about Date and DateTime. The order is good enough since nobody can change it from the public API.", "created_at": "2018-02-17 00:37:43", "user": 47848, "id": 366398348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366449399", "text": "@rafaelfranca Thank you for the review, I got your point and added suggested changes.\r\nI have only 2 questions: https://github.com/rails/rails/pull/32026#discussion_r168924419, https://github.com/rails/rails/pull/32026#discussion_r168924699.", "created_at": "2018-02-17 15:41:44", "user": 6443532, "id": 366449399}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes https://github.com/rails/rails/issues/32013.\r\n\r\n```ruby\r\nRails.application.routes.draw do\r\n  scope '/(:locale)', constraints: { locale: %w[en de es fr dk] } do\r\n    root to: 'home#index'\r\n  end\r\nend\r\n```\r\n\r\nPath constraints generated incorrect regexp:\r\n```diff\r\n- /\\A\\/(?:([\"en\", \"de\", \"es\", \"fr\", \"dk\"]))?(?:\\.([^\\/.?]+))?\\Z/\r\n+ /\\A\\/(?:((?-mix:en|de|es|fr|dk)))?(?:\\.([^\\/.?]+))?\\Z/\r\n```", "labels": [], "number": 32025, "updated_at": "2018-02-17 03:54:24", "user": 5657035, "closed_at": "2018-02-17 03:03:40", "id": 297953956, "title": "Fix array routing constraints", "url": "https://api.github.com/repos/rails/rails/issues/32025", "created_at": "2018-02-16 23:46:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366390795", "text": "r? @rafaelfranca\n\n(@rails-bot has picked a reviewer for you, use r? to override)", "created_at": "2018-02-16 23:46:38", "user": 7468109, "id": 366390795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366414135", "text": "@fatkodima Wonderful! Thank you for your hard work.", "created_at": "2018-02-17 03:54:24", "user": 92044, "id": 366414135}], "assignees": [47848, 47848], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [1174604, 758704]}, "text": "### Steps to reproduce\r\n\r\nWhen `build_association` is called on a `belongs_to` relation, then the model does not get added to the inverse `has_many` relation. This behavior can also be observed when assigning a new record directly to the `belong_to` association.\r\n\r\n```ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"5.1.5\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# Ensure backward compatibility with Minitest 4\r\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :posts, force: true do |t|\r\n  end\r\n\r\n  create_table :authors, force: true do |t|\r\n    t.integer :post_id\r\n  end\r\nend\r\n\r\nclass Post < ActiveRecord::Base\r\n  has_many :authors\r\n\r\n  validates :authors, length: { minimum: 1 }\r\nend\r\n\r\nclass Author < ActiveRecord::Base\r\n  belongs_to :post\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n\r\n  def test_build_association_adds_to_inverse\r\n    author = Author.new\r\n\r\n    post = author.build_post\r\n\r\n    assert_equal post.authors.length, 1\r\n    assert_equal post.authors.first, author\r\n    assert_predicate author, :valid?\r\n    assert_predicate post, :valid?\r\n    assert author.save\r\n  end\r\n\r\n  def test_assigning_belongs_to_adds_to_inverse\r\n    author = Author.new\r\n    post = Post.new\r\n\r\n    author.post = post\r\n\r\n    assert_equal post.authors.length, 1\r\n    assert_equal post.authors.first, author\r\n    assert_predicate author, :valid?\r\n    assert_predicate post, :valid?\r\n    assert author.save\r\n  end\r\n\r\nend\r\n```\r\n \r\n### Expected behavior\r\n\r\nI expect the `Post` model to know about the author, through which it was built. This would match the behavior observed, when used the other way round. (`post.authors.build` actually assigns the inverse `post` and `post = authors.build_post` results in `authors.post == post` being `true`) \r\n\r\n### Actual behavior\r\n\r\nThe `authors` relation is blank. Hence, the validations on the `Post` model are failing. Neither am I able to then save `Post` nor the `Author` model, without me explicitly adding the `Author` model to the `post.authors` relation.\r\n\r\n### System configuration\r\n**Rails version**:\r\n5.1.5\r\n**Ruby version**:\r\n2.3.6", "labels": [], "number": 32024, "updated_at": "2018-03-04 07:31:08", "user": 547653, "closed_at": "None", "id": 297920973, "title": "`build_association` on `belongs_to` does not add the builder to has_many association", "url": "https://api.github.com/repos/rails/rails/issues/32024", "created_at": "2018-02-16 21:10:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368515530", "text": "~This may have to do with https://github.com/rails/rails/pull/31575.~", "created_at": "2018-02-26 14:11:58", "user": 1748736, "id": 368515530}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368525235", "text": "I'm not exactly sure what you mean. I've run the test case against AR 5.2.0.rc1 and it still persists. \r\n\r\nI've originally encountered the bug in an application using AR 4.2.6, but I'm well aware that there won't be landing a bug fix in the old 4.2 branch. Since this bug seems to be present since at least rails version 4.2, i was wondering if it still persisted in a newer rails version, which it obviously does.", "created_at": "2018-02-26 14:43:47", "user": 547653, "id": 368525235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/370208219", "text": "Can someone confirm if this is a bug or not? Thanks!", "created_at": "2018-03-04 07:30:48", "user": 1174604, "id": 370208219}], "assignees": [], "state": "open", "is-pull-request": false}
{"reactions": {}, "text": "This is going to sound impossible but I ran it by @tenderlove and he agreed that it sounded like a [bug](https://twitter.com/tenderlove/status/964576299825053697) It seems hard to believe that it could be a bug in Ruby after all these years of usage, so I thought I would start here first since I discovered it when writing some Rails tests.\r\n\r\nRun the following in a Rails console:\r\n\r\n```ruby\r\nclass BustedInclude\r\n  include ActiveModel::Validations, ActiveModel::Validations::Callbacks\r\n  before_validation { puts 'Callback!' }\r\nend\r\n\r\ninstance = BustedInclude.new\r\ninstance.valid? # outputs only `true`\r\n\r\nclass WorkingInclude\r\n  include ActiveModel::Validations\r\n  include ActiveModel::Validations::Callbacks\r\n  before_validation { puts 'Callback!' }\r\nend\r\n\r\ninstance = WorkingInclude.new\r\ninstance.valid? # outputs \"Callback!\" and then `true`\r\n```\r\n\r\nAs you can see the only difference between these two is a one-line`include` statement vs two separate calls.\r\n\r\nAs I dug into this I found that `ActiveModel::Validations::Callbacks.run_callbacks!` is supposed to override `ActiveModel::Validations.run_callbacks!`. When I stepped through in the debugger the overriding version declared in `Callbacks` is never called, it only enters the original definition in `Validations`.\r\n\r\n### Expected behavior\r\n\r\nBoth versions should output \"Callback!\" in the console.\r\n\r\n### Actual behavior\r\n\r\nOnly the `WorkingInclude` instance outputs \"Callback!\", the other just outputs `true`.\r\n\r\n### System configuration\r\n\r\n**Rails version**: 5.1.4\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32023, "updated_at": "2018-02-17 03:52:41", "user": 300, "closed_at": "2018-02-17 03:14:30", "id": 297894501, "title": "`include` on one line shows different behavior than separate `include` statements", "url": "https://api.github.com/repos/rails/rails/issues/32023", "created_at": "2018-02-16 19:27:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366411869", "text": "Given you already debugged and investigated how do you recommend us to fix this? I don't think this is a bug in the rails code. If ruby is not allowing a method to be overridden because the module was included in the same `include` call of the other module I think it is a Ruby issue.", "created_at": "2018-02-17 03:12:47", "user": 47848, "id": 366411869}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366411951", "text": " Ah, just saw the reason. The modules are inserted in reverse order\r\n\r\n```\r\ninclude(module, ...) → self\r\nInvokes Module.append_features on each parameter in reverse order.\r\n```\r\n\r\nSo:\r\n\r\n```\r\nclass BustedInclude\r\n  include ActiveModel::Validations, ActiveModel::Validations::Callbacks\r\n  before_validation { puts 'Callback!' }\r\nend\r\n```\r\n\r\nis equivalent to:\r\n\r\n```\r\nclass BustedInclude\r\n  include ActiveModel::Validations::Callbacks\r\n  include ActiveModel::Validations\r\n  before_validation { puts 'Callback!' }\r\nend\r\n```", "created_at": "2018-02-17 03:14:30", "user": 47848, "id": 366411951}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366413758", "text": "Huh, strangely counter-intuitive, but I’ll never forget that now! Sorry for wasting your time there, and thanks for taking the extra time to find the reason. :)\n\n\n> On Feb 16, 2018, at 7:15 PM, Rafael França <notifications@github.com> wrote:\n> \n> Closed #32023.\n> \n> —\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n", "created_at": "2018-02-17 03:45:12", "user": 300, "id": 366413758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366414068", "text": "No problem at all. I also learned that just now.", "created_at": "2018-02-17 03:52:41", "user": 47848, "id": 366414068}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "### Steps to reproduce\r\n\r\n- Define the following classes\r\n\r\n```ruby\r\nclass Parent\r\n  has_one :child, dependent: :destroy\r\nend\r\n\r\nclass Child\r\n  belongs_to :parent, inverse_of: :child\r\n  before_destroy { throw :abort }\r\nend\r\n```\r\n\r\n- Instanciate as follows:\r\n\r\n```ruby\r\nc = Child.create\r\np = Parent.create(child: c)\r\n```\r\n\r\n- Then, destroy the parent\r\n```ruby\r\np.destroy\r\n```\r\n\r\n### Expected behavior\r\nNeither the parent nor the child should be deleted.\r\n`throw :abort` should propagate to the parent who called :destroy on the child.\r\n```ruby\r\np.destroyed? # false\r\np.child.destroyed? # false\r\n```\r\n\r\n### Actual behavior\r\nThe parent is being destroyed.\r\n\r\n```ruby\r\np.destroyed? # true\r\np.child.destroyed? # false\r\n```\r\nPS: If a foreign key is set (which might not be the case for polymorphic associations), then parent is not deleted because it would violate a foreign key contraint, but rails would try it anyways.\r\n\r\n### System configuration\r\n**Rails version**: 5.1.5\r\n\r\n**Ruby version**: 2.5.0\r\n", "labels": [], "number": 32022, "updated_at": "2018-03-06 12:45:18", "user": 1015894, "closed_at": "2018-03-06 12:45:18", "id": 297882413, "title": "throw :abort does not propagate to parent class", "url": "https://api.github.com/repos/rails/rails/issues/32022", "created_at": "2018-02-16 18:43:10", "comments": [{"reactions": {"+1": [1015894]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/366748998", "text": "This is specifically an issue with `has_one` - `has_many` works as expected.\r\n\r\nHere's a reproduction script:\r\n\r\n``` ruby\r\n# frozen_string_literal: true\r\n\r\nbegin\r\n  require \"bundler/inline\"\r\nrescue LoadError => e\r\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\r\n  raise e\r\nend\r\n\r\ngemfile(true) do\r\n  source \"https://rubygems.org\"\r\n\r\n  # Activate the gem you are reporting the issue against.\r\n  gem \"activerecord\", \"5.1.5\"\r\n  gem \"sqlite3\"\r\nend\r\n\r\nrequire \"active_record\"\r\nrequire \"minitest/autorun\"\r\nrequire \"logger\"\r\n\r\n# This connection will do for database-independent bug reports.\r\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\r\nActiveRecord::Base.logger = Logger.new(STDOUT)\r\n\r\nActiveRecord::Schema.define do\r\n  create_table :children, force: true do |t|\r\n    t.references :parent\r\n  end\r\n\r\n  create_table :parents, force: true do |t|\r\n  end\r\nend\r\n\r\nclass Parent < ActiveRecord::Base\r\n  has_one :child, dependent: :destroy\r\nend\r\n\r\nclass Child < ActiveRecord::Base\r\n  belongs_to :parent, inverse_of: :child\r\n  before_destroy { throw :abort }\r\nend\r\n\r\nclass BugTest < Minitest::Test\r\n  def test_destroy\r\n    parent = Parent.create!\r\n    child = parent.create_child!\r\n\r\n    parent.destroy\r\n\r\n    assert !parent.destroyed?\r\n  end\r\nend\r\n```\r\n\r\nThis is also an issue with the 5.2 rc gem as well", "created_at": "2018-02-19 16:52:02", "user": 6321, "id": 366748998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367206957", "text": "🔬  `git bisect` shows that the behavior changed in 3a25cdca3e0d29e", "created_at": "2018-02-21 04:04:33", "user": 10076, "id": 367206957}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367362693", "text": "@claudiob I believe that change is only for returning `false` in the callback. `throw :abort` is preferred now. `throw :abort` should halt the callback chain ", "created_at": "2018-02-21 15:26:28", "user": 1015894, "id": 367362693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367365144", "text": "@fegorodscy What you describe is correct.\r\n\r\nMy comment was referring to @pixeltrix's script, which passes before 3a25cdc and fails after.\r\nThat could help identify the root cause of the problem.", "created_at": "2018-02-21 15:33:26", "user": 10076, "id": 367365144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/367907715", "text": "But if is failing on 5.1.5, that doesn't include that commit.", "created_at": "2018-02-23 04:39:07", "user": 47848, "id": 367907715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368055606", "text": "@rafaelfranca I just tested with 5.2.0.rc1 and the issue is still there", "created_at": "2018-02-23 16:13:15", "user": 1015894, "id": 368055606}, {"reactions": {"+1": [1015894]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368082103", "text": "@fegorodscy I can see what the problem is - `has_many` uses `destroy!` to propagate the abort back up to the parent but `has_one` and `belongs_to` only call `destroy`. Unfortunately it isn't as simple as just using `destroy!` for the singular associations as that breaks another test. 😞 ", "created_at": "2018-02-23 17:37:08", "user": 6321, "id": 368082103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368119830", "text": "@pixeltrix The failing test is 'test_bidirectional_dependence_when_destroying_item_with_belongs_to_association' right? Did you get any other failing test with this change? re: changing `destroy` to `destroy!`\r\n\r\nSo, I tested with `gem \"activerecord\", \"5.0\"` and it passes the test (using the script above). This bug was probably introduced in 5.1 when support for biderectional_dependence was added.", "created_at": "2018-02-23 19:49:12", "user": 1015894, "id": 368119830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/368150749", "text": "@fegorodscy yes, that's the failing test but removing those changes doesn't fix it - it's just that returning false terminated the callback chain in 5.0 and not 5.1, we still need to call `destroy!`.", "created_at": "2018-02-23 21:59:57", "user": 6321, "id": 368150749}], "assignees": [], "state": "closed", "is-pull-request": false}
