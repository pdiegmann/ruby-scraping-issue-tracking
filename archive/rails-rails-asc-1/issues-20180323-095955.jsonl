{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6661\nCreated by **Artem Ignatyev** - 2011-04-01 06:59:23 UTC\n\nLet's use any model (i.e. Model) and execute in console:\n\n**Model.select('id').group('id').having('2 > 1')**\n\nand we'll get the sql query similar to:\n\n**SELECT id FROM \"models\" GROUP BY id HAVING 2 > 1**\n\nThat is okay.\n\nThen execute in console:\n\n**Model.select('id').group('id').having('2 > 1').having('3 > 1')**\n\nand we'll get the following error:\n\nArgumentError: wrong number of arguments (2 for 1)\n    from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in `having'\n    from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:181:in`build_arel'\n    from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation/query_methods.rb:150:in `arel'\n    from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:64:in`to_a'\n    from /home/cryo/.rvm/gems/ruby-1.8.7-p334@appstore/gems/activerecord-3.0.5/lib/active_record/relation.rb:356:in `inspect'\n\nWhy does it happen?\n\nCalling having on ActiveRecord::Relation collects having clauses into an array\n**relation.having_values += build_where(*args) unless args.blank?**\n\nThe the following code in active_record/relation/query_methods.rb:181:in `build_arel' passes as many arguments to arel.having as the quantity of collection having clauses in relation. But in seems the having method of arel accepts only 1 argument expr.\n\n**arel = arel.having(*@having_values.uniq.reject{|h| h.blank?}) unless @having_values.empty?**\n", "labels": [], "number": 989, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904915, "title": "Multiple having calls on an ActiveRecord::Relation causes \"wrong number of arguments (2 for 1)\" error", "url": "https://api.github.com/repos/rails/rails/issues/989", "created_at": "2011-05-16 05:31:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171573", "text": "_Imported from Lighthouse._\nComment by **Lewis Marshall** - 2011-04-01 23:59:12 UTC\n\nI've spotted the problem with this.\n\nLooking at the latest rails/arel source, Arel::SelectManager#having takes multiple arguments but Arel::Table#having only takes a single argument. Splatting the Arel::Table#having argument seems to solve the problem you have mentioned.\n\nI'm new to bugfixing so not sure how to sufficiently verify this doesnt break anything else!\n", "created_at": "2011-05-16 05:31:54", "user": 789801, "id": 1171573}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6663\nCreated by **Samu Voutilainen** - 2011-04-01 13:02:26 UTC\n\nIn Gentoo ebuilds there is bug that Rails doesn’t depend on rake where railties needs it. When trying to use rails(with any argument), one gets fun error message:\n\nwww ~ # rails -v\n/usr/lib64/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in `gem_original_require': no such file to load -- rails/cli (LoadError)\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems/custom_require.rb:36:in`require'\n        from /usr/lib64/ruby/gems/1.8/gems/rails-3.0.3/bin/rails:8\n        from /usr/bin/rails:8:in `load'\n        from /usr/bin/rails:8\n\nLoading this file manually does work:\n\nwww ~ # cat foo.rb \nrequire \"rails/cli\"\n\nwww ~ # ruby foo.rb \n/usr/lib64/ruby/site_ruby/1.8/rubygems.rb:779:in `report_activate_error': Could not find RubyGem rake (>= 0.8.7) (Gem::LoadError)\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems.rb:214:in`activate'\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems.rb:249:in `activate'\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems.rb:248:in`each'\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems.rb:248:in `activate'\n        from /usr/lib64/ruby/site_ruby/1.8/rubygems/custom_require.rb:35:in`require'\n        from foo.rb:3\n\nThe cause for this dummy error is in file \nwww ~ # head -n10 /usr/lib64/ruby/gems/1.8/gems/rails-3.0.3/bin/rails\n# !/usr/bin/env ruby\n\nbegin\n  require \"rails/cli\"\nrescue LoadError\n  railties_path = File.expand_path('../../railties/lib', **FILE**)\n  $:.unshift(railties_path)\n  require \"rails/cli\"\nend\n\nHere, since require fails due missing plugin, it tries with invalid path and is trying to tell that actual plugin is missing. Commenting other stuff than require gives real error. Actual problem fixed out by installing rake too, making requiring work as expected.\n", "labels": [], "number": 990, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904916, "title": "Loading rails/cli with missing plugin provides obscure error", "url": "https://api.github.com/repos/rails/rails/issues/990", "created_at": "2011-05-16 05:32:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6664\nCreated by **Dawid Marcin Grzesiak** - 2011-04-02 21:52:54 UTC\n\nI want to have an ability to setup my own class to path convention for autoloading feature, ie:\n\nNormally AS works like that\nMyNew::Class::Path => my_new/class/path\n\nI want this:\nMyNew::Class::Path => MyNew/Class/Path\n\nTo do this I introduced:\n-      class_to_path_conventions = []\n-      class_to_path_conventions << lambda { |c| c.underscore }\n-      class_to_path_conventions << lambda { |c| c.gsub('::', '/') }\n\nWhere the first convention is ruby and rails convention, while the second one is mine.\nWe don't need to hardcode my convention into Rails, but what do you think to setup an API to add someone others conventions?\nPlease, advise where we can put class_to_path_conventions array into API.\n", "labels": [], "number": 991, "updated_at": "2011-05-21 15:12:38", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904918, "title": "active support class to path conventions for autoload", "url": "https://api.github.com/repos/rails/rails/issues/991", "created_at": "2011-05-16 05:32:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171574", "text": "Attachments saved to Gist: http://gist.github.com/971828\n", "created_at": "2011-05-16 05:32:06", "user": 789801, "id": 1171574}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6665\nCreated by **Jakob S** - 2011-04-03 09:48:38 UTC\n\n<tt>ActiveRecord::Base#new</tt> and <tt>#create</tt> accepts both a Hash of attributes and a block:\n\n``` ruby\n  User.create(:first_name => 'Jamie') do |u|\n    u.is_admin = false\n  end\n```\n\nThis patch adds that same functionality to update_attributes:\n\n``` ruby\n  user.update_attributes(:first_name => 'Jamie') do |u|\n    u.is_admin = false\n  end\n  user.first_name #=> 'Jamie'\n  user.is_admin   #=> false\n```\n\nA use case for this is in the administration area, where authenticated users might be allowed to update attributes that are otherwise protected.\n\n<em>Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formatting.</em>\n", "labels": [], "number": 992, "updated_at": "2013-07-25 17:21:55", "user": 789801, "closed_at": "2011-05-21 15:12:38", "id": 904920, "title": "Block syntax for update_attributes", "url": "https://api.github.com/repos/rails/rails/issues/992", "created_at": "2011-05-16 05:32:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171575", "text": "_Imported from Lighthouse._\nComment by **Jakob S** - 2011-04-03 09:54:38 UTC\n\n/pwned by Lighthouse code formatting :(\n\nAttached revised patch with docs for the changes.\n", "created_at": "2011-05-16 05:32:12", "user": 789801, "id": 1171575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171576", "text": "Attachments saved to Gist: http://gist.github.com/971829\n", "created_at": "2011-05-16 05:32:14", "user": 789801, "id": 1171576}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6666\nCreated by **Alexey Muranov** - 2011-04-04 19:14:57 UTC\n\nThese two examples illustrate the unexpected (to me) behavior of `save` method in `ActiveRecord::Persistence` for a sample application created with\n\n``` shell\n$ rails new test_app\n$ cd test_app\n$ rails generate model Person name:string\n$ rake db:migrate\n```\n\n**First example**. In console:\n\n``` console\np = Person.create(:name=>'Bill')\np.destroy\np.name  # => \"Bill\"\np.save  # => true\n```\n\nDespite the `true` returned by `save`, the database is empty in the end.\n\n**Second example**. In console:\n\n``` console\np = Person.create(:name=>'Bill')\nPerson.find(p.id).destroy\np.persisted?     # => true\np.destroyed?     # => false\np.name = \"John\"  # => \"John\"\np.save           # => true\n```\n\nAgain, despite the `true` returned by `save`, the database is empty in the end.\n\nThis problem was discussed by me and others here: http://www.ruby-forum.com/topic/1386349\n\nI saw other tickets about unexpected behavior of `save`, but didn't find an exact match to this problem.\n", "labels": [], "number": 993, "updated_at": "2016-02-13 00:23:07", "user": 789801, "closed_at": "2011-08-28 23:44:36", "id": 904921, "title": "save (ActiveRecord::Persistence) can return true even when the model is not saved, and seems to break the principle of \"least surprise\"", "url": "https://api.github.com/repos/rails/rails/issues/993", "created_at": "2011-05-16 05:32:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171577", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-03 11:43:35 UTC\n\nI am new to Rails, i am only starting my first Rails application, so please feel free to express your opinions about this problem, or how it should be dealt with. I know that i am supposed to work on it myself if i want it to be fixed, but i am not ready for that, i am just interested in knowing if others consider this a bug too.\n", "created_at": "2011-05-16 05:32:20", "user": 789801, "id": 1171577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171578", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-03 11:56:29 UTC\n\nI want however to state what behavior would look to me natural and \"least surprising\", or how i would have changed this part of `ActiveRecord::Persistence` if there were no need to keep compatibility with already existing applications:\n1. implement `insert` and `update` methods to simply execute SQL and return `true` or `false` accordingly,\n2. switch `@persisted` to `false` when the record is destroyed or deleted or when `id=()` method is called,\n3. remove `destroyed?` method and @destroyed instance variable,\n4. implement `save` so that it would _only_ return `true` if the model/record has been **saved**.\n", "created_at": "2011-05-16 05:32:21", "user": 789801, "id": 1171578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171579", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-03 14:17:04 UTC\n\nIn fact, i think that if in item (3) above `destroyed?` is not removed but only deprecated, than the suggested changes should not break most of applications...\n", "created_at": "2011-05-16 05:32:23", "user": 789801, "id": 1171579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171580", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-04 03:33:41 UTC\n\nFollowing code is causing problem\n\n``` ruby\np = Person.create(:name=>'Bill')\nPerson.find(p.id).destroy\np.persisted?     # => true\np.destroyed?     # => false\np.name = \"John\"  # => \"John\"\np.save           # => true\n```\n\nHowever if you try following code then you will get \"TypeError: can't modify frozen hash\".\n\n``` ruby\np = Person.create(:name=>'Bill')\np2 = Person.find(p.id)\np2.destroy\np2.persisted?     \np2.destroyed?     \np2.name = \"John\"  \np2.save           \n```\n\nIn the first example author is manipulating record 'P' which is still not frozen.\n\nI guess a good fix for this problem would be to make sure that p2 is same as p. I turned on the identity mapping and still p2.object_id != p.object_id .\n\nI did not follow very closely how identity mapping is implemented. I guess it is time to see how it is done. I'm sure there is a reason why\n\n``` ruby\np1 = User.create\np2 = User.find(p1.id)\np3 = User.last\n\nputs p1.object_id == p2.object_id #=> false\nputs p1.object_id == p3.object_id #=> false\nputs p2.object_id == p3.object_id #=> false\n```\n", "created_at": "2011-05-16 05:32:25", "user": 789801, "id": 1171580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171581", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-04 04:04:36 UTC\n\nIt seems miloops has a fix for Identity mapping. https://github.com/rails/rails/pull/251/files\n", "created_at": "2011-05-16 05:32:26", "user": 789801, "id": 1171581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171582", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-04 07:37:20 UTC\n\nThe main issue here that i consider a bug is that `save` returns `true` despite not saving.\n", "created_at": "2011-05-16 05:32:28", "user": 789801, "id": 1171582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171583", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-04 12:28:43 UTC\n\nFixed in https://github.com/rails/rails/commit/b35617235d43bdb32016a623044e7f4005879969 .\n\nMake sure that in console first you do \n\n``` ruby\nActiveRecord::IdentityMap.enabled = true\n```\n", "created_at": "2011-05-16 05:32:29", "user": 789801, "id": 1171583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171584", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-04 12:36:14 UTC\n\nThis does not resolve the issue that `save` returns `true` without saving in the above examples, or if the record has been deleted in the background by another application.\n", "created_at": "2011-05-16 05:32:31", "user": 789801, "id": 1171584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171585", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-04 17:06:17 UTC\n\nBefore hitting save you are doing \n\n``` ruby\np.name = \"John\"\n```\n\nNow that line is throwing exception since the object is frozen. So you don't even get to save method.\n", "created_at": "2011-05-16 05:32:32", "user": 789801, "id": 1171585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171586", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-04 17:27:50 UTC\n\nOk, i see your point. However, if the record is deleted in the background by another process, `save` is going to return `true` without saving anything. Is this a desired behavior?\n", "created_at": "2011-05-16 05:32:34", "user": 789801, "id": 1171586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171587", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-04 19:14:57 UTC\n\n@Alexey. Now I see your point. \n\n``` ruby\nclass User < ActiveRecord::Base\n  def self.lab\n    u1 = User.create\n    User.delete_all\n    u1.name = 'foo'\n    puts u1.save #=> true\n\n    u2 = User.create\n    User.delete_all\n    u2.name='foo1'\n    puts u2.save! #=> true\n  end\nend\n```\n\nI am marking this ticket as open so that more people can look at it. I will look into this.\n", "created_at": "2011-05-16 05:32:35", "user": 789801, "id": 1171587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171588", "text": "_Imported from Lighthouse._\nComment by **Wicked Tribe** - 2011-04-20 17:20:51 UTC\n\nThere really seems to be two issues here. The first would be how active record instance behaves on a save when it knows the record has been deleted. That I believe would be the easiest to solve. The second is how or should an active record instance attempt to determine if its record has been deleted without its knowledge.\n\nThe complexity on the second issue revolves around when and if the database should be checked to determine if a record still exists. If a response from the database during an update can be used to determine that a record is no longer there, the instance can then execute the code that would solve the first issue. If not, then things get ugly.\n\nAdditionally there is the issue of what should happen when no attributes have been changed, a second matching instance has deleted the record, and then the first has been saved. Rails will desire to skip an actual call to the database as this would normally be an performance improvement by not having the db update the record with identical values. Having rails make an extra call in this situation just to see if the record still exists would work against that optimization.\n\nFor now I would suggest looking to solve the first problem as the issues with the second are non trivial.\n", "created_at": "2011-05-16 05:32:37", "user": 789801, "id": 1171588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1471659", "text": "The issue was apparently closed automatically when migrated from Lighthouse, shouldn't it be re-open? I do not have permissions to reopen it myself here.\n", "created_at": "2011-06-30 00:10:01", "user": 712698, "id": 1471659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1926244", "text": "Active Record has no way of knowing that the record has been deleted in the background.  If you're dealing with a model which is likely to be edited or destroyed behind the scenes you'll need to use Base#lock, :lock=>true on find and disable partial updates.\n\nThere are dozens of other edge cases which partial updates can cause, addressing this one particular one isn't worth it imo\n", "created_at": "2011-08-28 23:44:36", "user": 197, "id": 1926244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1928275", "text": "Why cannot Active Record look into the database? There should be a way to save a record from the memory regardless of the database state, an i think `save` would be a good name for such method.\n", "created_at": "2011-08-29 08:33:05", "user": 712698, "id": 1928275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1944120", "text": "At least `save` should return `false` in this case.\n", "created_at": "2011-08-30 16:33:27", "user": 712698, "id": 1944120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/183540051", "text": "is this still not fixed? I get the same behaviour as of Rails 5 beta 2.\n", "created_at": "2016-02-13 00:20:51", "user": 1838241, "id": 183540051}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6667\nCreated by **daleb** - 2011-04-03 23:00:32 UTC\n\nI have an application that has been working for months using Rails 3.03.  I did an upgrade to 3.05 and request.session_options[:id] broke.  For some reason it does not alway return a value.  When the page loads for the first time the request.session_options[:id] returns the id.  The page has a form that uses Ajax call to another function in the same controller.  The call also uses request.session_options[:id] but in this call it returns nil.\n\nI saw a post for 2.3 that looked similar and I tried accessing the session before request.session_options[:id] but that did not work.\n", "labels": [], "number": 994, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904923, "title": "Rails 3.05 breaks request.session_options[:id] from working the same as 3.03", "url": "https://api.github.com/repos/rails/rails/issues/994", "created_at": "2011-05-16 05:32:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171589", "text": "_Imported from Lighthouse._\nComment by **Santiago Pastorino** - 2011-04-06 00:51:32 UTC\n\nhey can you provide test case? if you can provide a complete patch even better :).\n", "created_at": "2011-05-16 05:32:44", "user": 789801, "id": 1171589}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6668\nCreated by **Greg Hazel** - 2011-04-04 03:11:13 UTC\n\nActiveRecord (2.3.11) accumulates joins in reverse order, leading to incorrect queries:\n\n``` ruby\n>> User.scoped(:joins => \"INNER JOIN profiles ON users.id = profiles.user_id\").scoped(:joins => \"INNER JOIN images ON profiles.image_id = images.id\").all\n\nUser Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id\n```\n\nHowever if I reverse the scopes, the query is correctly formed:\n\n``` ruby\n>> User.scoped(:joins => \"INNER JOIN images ON profiles.image_id = images.id\").scoped(:joins => \"INNER JOIN profiles ON users.id = profiles.user_id\").all\n\nUser Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id\n```\n\nThis appears to be due to ActiveRecord::Base#with_scope, where the parameters to merge_joins seem to be reversed compared to :include\n\n``` ruby\n                      elsif key == :include && merge\n                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq\n                      elsif key == :joins && merge\n                        hash[method][key] = merge_joins(params[key], hash[method][key])\n```\n\nThis bug does not seem to apply to Rails 3.0.5.\n", "labels": [], "number": 995, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904924, "title": "ActiveRecord scopes accumulate joins in reverse order", "url": "https://api.github.com/repos/rails/rails/issues/995", "created_at": "2011-05-16 05:32:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6669\nCreated by **Martin Troels Eberhardt** - 2011-04-04 10:47:49 UTC\n\nThis issue seems to stem from rails.js only checking for data-confirm on the <form> element, and not on the button that is clicked.\n\nExample code:\n<%= button_to 'confirm', example_path, :confirm => 'Are you sure?'%>\n", "labels": [], "number": 996, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904926, "title": "UJS-prototype: :confirm does not work on a button_to", "url": "https://api.github.com/repos/rails/rails/issues/996", "created_at": "2011-05-16 05:32:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171590", "text": "_Imported from Lighthouse._\nComment by **Martin Troels Eberhardt** - 2011-04-04 10:56:43 UTC\n\nThis is in Rails 3.0.3 with the latest prototype-UJS from github, by the way.\n\nThe action is in rails.js around 'document.on(\"submit\"' and 'function allowAction(element)'\n", "created_at": "2011-05-16 05:32:57", "user": 789801, "id": 1171590}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6671\nCreated by **Brian Durand** - 2011-04-05 02:06:47 UTC\n\nThere are a couple of threading issues with ActiveSupport::BufferedLogger.\n1. If a thread is spawned and logs messages but does not flush the log, the messages will never be written and will remain in the buffer forever.\n\nthreads = []\nurls.each do |url\n  threads << Thread.new do\n    logger.info(\"fetching #{url}\")\n    fetch(url)\n    logger.info(\"#{url} retrieved\")\n  end\nend\nthreads.each{|t| t.join}\n1. Silencing a logger for a block in one thread will silence it will silence it for all other threads as well. This means in a multi-threaded Rails application, log messages can be lost.\n", "labels": [], "number": 997, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904927, "title": "BufferedLogger threading issues", "url": "https://api.github.com/repos/rails/rails/issues/997", "created_at": "2011-05-16 05:33:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171591", "text": "Attachments saved to Gist: http://gist.github.com/971830\n", "created_at": "2011-05-16 05:33:03", "user": 789801, "id": 1171591}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6672\nCreated by **Marcin Mańk** - 2011-04-05 10:40:46 UTC\n\nsupports_disable_referential_integrity? in postgresql adapter on 2.3 stable looks like this:\n\n```\n def supports_disable_referential_integrity?() #:nodoc:\n    version = query(\"SHOW server_version\")[0][0].split('.')\n    (version[0].to_i >= 8 && version[1].to_i >= 1) ? true : false\n  rescue\n    return false\n  end\n```\n\nSo it returns false for 9.0.x , which is wrong.\n\nThe correct version is in 3.0 branch:\n\n```\n def supports_disable_referential_integrity?()\n   postgresql_version >= 80100\n end\n```\n\nAnybody cares to backpatch?\n", "labels": [], "number": 998, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904928, "title": "supports_disable_referential_integrity? is wrong", "url": "https://api.github.com/repos/rails/rails/issues/998", "created_at": "2011-05-16 05:33:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6673\nCreated by **Andriy Tyurnikov** - 2011-04-05 10:41:54 UTC\n\nclass Poll < ActiveRecord::Base\n  has_many :answers\n\n  validates_associated :answers\n\n  accepts_nested_attributes_for :answers, :allow_destroy => true\nend\n\nclass Answer < ActiveRecord::Base\n  belongs_to :poll\n\n  validates_uniqueness_of :body, :scope => :poll_id\nend\n\nWhen new poll is created,\nattributes for associated answers are passed, \nbut uniqueness of answers body in scope of poll is not validated.\n\nAny ideas how to fix that.\n", "labels": [], "number": 999, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904929, "title": "Scoped uniqueness validation of associated objects", "url": "https://api.github.com/repos/rails/rails/issues/999", "created_at": "2011-05-16 05:33:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171592", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2011-04-05 23:38:33 UTC\n\ncan you supply a failing test case?\n", "created_at": "2011-05-16 05:33:14", "user": 789801, "id": 1171592}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6674\nCreated by **Anton Topchii** - 2011-04-05 20:58:29 UTC\n\nCurrent forgery protection is not raise any exceptions as said in documentation. It just quietly reset session. And request processing goes to controller action.\n\n  # CSRF protection is turned on with the <tt>protect_from_forgery</tt> method,\n  # which will check the token and raise an ActionController::InvalidAuthenticityToken\n  # if it doesn't match what was expected. A call to this method is generated for new\n  # \\Rails applications by default. You can customize the error message by editing\n  # public/422.html.\n\n```\n  def verify_authenticity_token\n    verified_request? || handle_unverified_request\n  end\n\n  def handle_unverified_request\n    reset_session\n  end\n```\n", "labels": [], "number": 1000, "updated_at": "2011-05-16 11:41:28", "user": 789801, "closed_at": "2011-05-16 11:41:28", "id": 904930, "title": "forgery protection in master", "url": "https://api.github.com/repos/rails/rails/issues/1000", "created_at": "2011-05-16 05:33:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172837", "text": "A warning had been added recently: https://github.com/rails/rails/commit/59705deeaf3861caff1016e59da47708870f33ba\n\n@josevalim This can be closed.\n", "created_at": "2011-05-16 11:37:18", "user": 146214, "id": 1172837}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6675\nCreated by **Brian Durand** - 2011-04-06 01:53:22 UTC\n\nHere is a new storage engine for Rails session storage that stores sessions in the Rails.cache.\n\nThis analogous to MemCacheStore but it is far more flexible in that it can use any backend that is available for Rails.cache (i.e. DalliStore, RedisStore, etc.). It also doesn't require configuring your memcached cluster twice in your environment config file.\n", "labels": [], "number": 1001, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904931, "title": "CacheStore Session Storage", "url": "https://api.github.com/repos/rails/rails/issues/1001", "created_at": "2011-05-16 05:33:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171593", "text": "Attachments saved to Gist: http://gist.github.com/971831\n", "created_at": "2011-05-16 05:33:27", "user": 789801, "id": 1171593}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6676\nCreated by **jnozsc** - 2011-04-06 02:25:32 UTC\n\nInstalling ri documentation for rails-3.0.6...\nfile 'lib' not found\nInstalling RDoc documentation for rails-3.0.6...\nfile 'lib' not found\n\nI am tired of these error messages.\nRails forgets to create the folder \"lib\" at /usr/local/lib/ruby/gems/1.9.1/rails-3.0.x/\n\nEvery time I update rails, I have to enter \"sudo mkdir lib\" to create \"lib\" folder by myself, and then \"sudo gem install rails\" again.\n\nHowever, at version 3.0.6, it doesn't work. \nBecause when I enter  \"sudo gem install rails\" ， it will delete the whole “rails-3.0.x” folder.\n\nPlease fix it. It isn't difficult.\n\nmy environment\n\nruby 1.9.2p180\ngem 1.7.2\nrails 3.0.6\n", "labels": [], "number": 1002, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904932, "title": "lib folder issue", "url": "https://api.github.com/repos/rails/rails/issues/1002", "created_at": "2011-05-16 05:33:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171594", "text": "_Imported from Lighthouse._\nComment by **peter** - 2011-04-08 15:51:45 UTC\n\nSame problem:\n    sudo gem install rails-3.0.6.gem\n    Successfully installed rails-3.0.6\n    1 gem installed\n    Installing ri documentation for rails-3.0.6...\n    File not found: lib\n\nAs a results of the failure, nothing gets populated in the ../gems/rail-3.0.6 dir except bin/rails. \n\n**Env:**\n\nruby 1.8.7 (2009-06-12 patchlevel 174)\ngem r1.4.2\nrails 3.0.6\nMac OS X 10.6.7\n", "created_at": "2011-05-16 05:33:32", "user": 789801, "id": 1171594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171595", "text": "_Imported from Lighthouse._\nComment by **Andrew C. Greenberg** - 2011-04-15 15:14:37 UTC\n\nI, too, have had this problem since the 3.0 beta era.  What is the deficiency in our configurations that causes it? (I can't imagine that everyone sees it, because there is so little discussion on the net about what is truy a jarring experience - install routinely failing without explanation.)\n", "created_at": "2011-05-16 05:33:34", "user": 789801, "id": 1171595}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6678\nCreated by **artemave** - 2011-04-06 09:33:38 UTC\n\nAffects rails 3, including current master.\n\nHere is a sample model setup:\n\n```\nclass Post < ActiveRecord::Base  \n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base  \n  belongs_to :post\n  belongs_to :user\nend\n\nclass User < ActiveRecord::Base\n  has_many :comments\n  has_many :commented_posts, through: :comments, source: :post, uniq: true\nend\n```\n\nNow the following works correctly:\n\n```\nruby-1.9.2-p0 > user.commented_posts.count\n  SQL (0.2ms)  SELECT COUNT(DISTINCT \"posts\".id) FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".id = \"comments\".post_id WHERE ((\"comments\".user_id = 1))\n=> 1\n```\n\nBut adding condition makes active record 'forget' about `uniq: true` bit:\n\n```\nruby-1.9.2-p0 > user.commented_posts.where(\"posts.id != 42\").count\n  SQL (0.2ms)  SELECT COUNT(*) FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".id = \"comments\".post_id WHERE ((\"comments\".user_id = 1)) AND (posts.id != 42)\n=> 2\n```\n\nbut only when count - `all` works as expected:\n\n```\nruby-1.9.2-p0 > user.commented_posts.where(\"posts.id != 42\").all\n  Post Load (0.3ms)  SELECT DISTINCT \"posts\".* FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".id = \"comments\".post_id WHERE ((\"comments\".user_id = 1)) AND (posts.id != 42)\n=> [#<Post id: 1, created_at: \"2011-03-07 12:17:30\", updated_at: \"2011-03-07 12:17:30\">]\n```\n", "labels": ["activerecord"], "number": 1003, "updated_at": "2014-04-18 20:02:08", "user": 789801, "closed_at": "2013-02-02 12:20:12", "id": 904933, "title": "has_many through with uniq gives wrong count if condition given", "url": "https://api.github.com/repos/rails/rails/issues/1003", "created_at": "2011-05-16 05:33:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171596", "text": "_Imported from Lighthouse._\nComment by **artemave** - 2011-04-06 09:38:29 UTC\n\nProposed fix: https://github.com/artemave/rails/commits/has_many_through_uniq_fix/\n", "created_at": "2011-05-16 05:33:40", "user": 789801, "id": 1171596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1916808", "text": "This bug is still present. Please, reopen the ticket.\n", "created_at": "2011-08-26 20:52:11", "user": 23721, "id": 1916808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4074512", "text": "+1 this is still an issue on Rails 3.2.1\n", "created_at": "2012-02-21 13:19:49", "user": 30228, "id": 4074512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4074573", "text": "Please also upvote the pull request (https://github.com/rails/rails/pull/2924). Eventually we'll get noticed!\n", "created_at": "2012-02-21 13:23:57", "user": 23721, "id": 4074573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4074736", "text": "+1\n", "created_at": "2012-02-21 13:35:53", "user": 9934, "id": 4074736}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4524468", "text": "just encountered this while running some unit tests\n", "created_at": "2012-03-15 17:24:17", "user": 165698, "id": 4524468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5406680", "text": "Reopened and I'll try to make the Pull Request get attention. Thanks.\n", "created_at": "2012-04-29 17:16:22", "user": 47848, "id": 5406680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6765508", "text": "Works fine with master (Rails 4.0.0.beta):\n\n```\nLoading development environment (Rails 4.0.0.beta)\n>> User.first\n  User Load (0.1ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT 1\n=> #<User id: 1, username: nil, email: nil, created_at: \"2012-07-04 18:22:17\", updated_at: \"2012-07-04 18:22:17\">\n>> user = _\n=> #<User id: 1, username: nil, email: nil, created_at: \"2012-07-04 18:22:17\", updated_at: \"2012-07-04 18:22:17\">\n>> user.commented_posts.count\n   (2.2ms)  SELECT DISTINCT COUNT(DISTINCT \"posts\".\"id\") FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"comments\".\"user_id\" = ?  [[\"user_id\", 1]]\n=> 2\n>> user.commented_posts.where(\"posts.id != 42\").count\n   (0.3ms)  SELECT DISTINCT COUNT(*) FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"comments\".\"user_id\" = ? AND (posts.id != 42)  [[\"user_id\", 1]]\n=> 2\n```\n", "created_at": "2012-07-04 18:25:34", "user": 840464, "id": 6765508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6765567", "text": "@frodsan thanks for confirming.\n", "created_at": "2012-07-04 18:29:53", "user": 47848, "id": 6765567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6765586", "text": "Works fine in 3-2-stable too:\n\n```\nLoading development environment (Rails 3.2.6)\n\n>> user = User.first\n  User Load (0.2ms)  SELECT \"users\".* FROM \"users\" LIMIT 1\n=> #<User id: 1, created_at: \"2012-07-04 18:28:59\", updated_at: \"2012-07-04 18:28:59\">\n>> user.commented_posts.count\n   (0.3ms)  SELECT DISTINCT COUNT(DISTINCT \"posts\".\"id\") FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"comments\".\"user_id\" = 1\n=> 2\n>> user.commented_posts.where(\"posts.id != 42\").count\n   (0.3ms)  SELECT DISTINCT COUNT(*) FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"comments\".\"user_id\" = 1 AND (posts.id != 42)\n=> 2\n```\n", "created_at": "2012-07-04 18:31:07", "user": 840464, "id": 6765586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6809044", "text": "@frodsan the example from 3-2-stable doesn't look correct. The bottom example queries `DISTINCT COUNT(*)`, which will not select distinct posts rows. The `DISTINCT` must be inside the `COUNT`... I think you might be able to get around this by passing `count(\"posts.id\", :distinct => true)`?\n", "created_at": "2012-07-06 16:03:15", "user": 5054, "id": 6809044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6809083", "text": "(also for the 4.0 example)\n", "created_at": "2012-07-06 16:04:34", "user": 5054, "id": 6809083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6810156", "text": "@tiegz thanks!\n\n@rafaelfranca hey mate, my mistake ... i think this should be reopen. I'm trying to solve it, i will send a patch when i get it.\n", "created_at": "2012-07-06 16:42:24", "user": 840464, "id": 6810156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6810282", "text": "@tiegz i'm trying to solve it. But, i want some feedback on this. Should the first 'DISTINCT' be present? :s\n\n```\n>> User.first.commented_posts.where(\"posts.id != 42\").count\n  User Load (0.3ms)  SELECT \"users\".* FROM \"users\" ORDER BY \"users\".\"id\" ASC LIMIT 1\n   (0.2ms)  SELECT DISTINCT COUNT(DISTINCT \"posts\".\"id\") FROM \"posts\" INNER JOIN \"comments\" ON \"posts\".\"id\" = \"comments\".\"post_id\" WHERE \"comments\".\"user_id\" = ? AND (posts.id != 42)  [[\"user_id\", 1]]\n=> 0\n\n>> User.uniq.count\n   (0.3ms)  SELECT DISTINCT COUNT(DISTINCT \"users\".\"id\") FROM \"users\" \n=> 11\n```\n\nThanks :)\n", "created_at": "2012-07-06 16:47:03", "user": 840464, "id": 6810282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6810608", "text": "Open again\n", "created_at": "2012-07-06 17:00:14", "user": 47848, "id": 6810608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6811525", "text": "@frodsan nice! From my experience, the outer `DISTINCT` is ineffectual, so it's harmless if it's there. It's funny how Rails and/or AReL add `DISTINCT` sometimes. I've seen queries that produced something like `DISTINCT DISTINCT tables.id`.\n", "created_at": "2012-07-06 17:36:30", "user": 5054, "id": 6811525}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7623697", "text": "Related with #6865\n", "created_at": "2012-08-09 19:05:04", "user": 47848, "id": 7623697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12734106", "text": "I just created a fix for the related issue. It's at #9078. Could someone verify if the problem still exists or if we can close this issue?\n", "created_at": "2013-01-26 11:21:13", "user": 5402, "id": 12734106}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/13028562", "text": "backported to 3-2-stable, I'll close it but if you think it is not fixed let me know\n", "created_at": "2013-02-02 12:20:12", "user": 47848, "id": 13028562}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6679\nCreated by **Emilio Tagua** - 2011-04-06 14:25:21 UTC\n\nThis used to work for me in latest Rails 2.3, but it's broken on Rails 3.\n\n``` ruby\n@opinion_polls = @organizer.opinion_polls.all(\n  :select => \"DISTINCT(opinion_polls.event_id), opinion_polls.name, opinion_polls.id,  opinion_polls.random_key\", \n  :joins => :opinion_poll_recipients, \n  :conditions => [\"opinion_poll_recipients.preview = false AND opinion_poll_recipients.last_sent_at > ? \", 7.days.ago.beginning_of_day])\n```\n\nQuery generated in Rails 2.3:\n\n```\nSELECT DISTINCT(opinion_polls.event_id), opinion_polls.name, opinion_polls.id, opinion_polls.random_key FROM `opinion_polls` INNER JOIN `events` ON `opinion_polls`.event_id = `events`.id INNER JOIN `opinion_poll_recipients` ON opinion_poll_recipients.opinion_poll_id = opinion_polls.id WHERE (opinion_poll_recipients.preview = false AND opinion_poll_recipients.last_sent_at > '2011-03-30 00:00:00' ) AND ((`events`.organizer_id = 2766))\n```\n\nQuery generated in Rails 3:\n\n```\nSELECT `opinion_polls`.*, DISTINCT(opinion_polls.event_id), opinion_polls.name, opinion_polls.id, opinion_polls.random_key FROM `opinion_polls` INNER JOIN `opinion_poll_recipients` ON `opinion_poll_recipients`.`opinion_poll_id` = `opinion_polls`.`id` INNER JOIN `events` ON `opinion_polls`.event_id = `events`.id WHERE ((`events`.organizer_id = 6)) AND (opinion_poll_recipients.preview = false AND opinion_poll_recipients.last_sent_at > '2011-03-30 03:00:00' )\n\nMysql2::Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DISTINCT(opinion_polls.event_id), opinion_polls.name, opinion_polls.id,  opinion' at line 1: SELECT `opinion_polls`.*, DISTINCT(opinion_polls.event_id), opinion_polls.name, opinion_polls.id,  opinion_polls.random_key FROM `opinion_polls` INNER JOIN `opinion_poll_recipients` ON `opinion_poll_recipients`.`opinion_poll_id` = `opinion_polls`.`id` INNER JOIN `events` ON `opinion_polls`.event_id = `events`.id WHERE ((`events`.organizer_id = 6)) AND (opinion_poll_recipients.preview = false AND opinion_poll_recipients.last_sent_at > '2011-03-30 03:00:00' )\n```\n\nThe error is because we are asking a DISTINCT field after selecting every field in the table (`opinion_polls`.*).\n", "labels": [], "number": 1004, "updated_at": "2011-05-21 15:12:39", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904934, "title": "Query broken in Rails 3 (?)", "url": "https://api.github.com/repos/rails/rails/issues/1004", "created_at": "2011-05-16 05:33:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6680\nCreated by **Chris Your** - 2011-04-07 01:55:45 UTC\n\nHi everyone,\n\nFirst off, I love Rails. It's a fantastic framework.\n\nSo on to this possible bug...\n\nSay I have a Book model with many authors through an AuthorAssignment model. The AuthorAssignment model also has an additional boolean column named `featured`.  \n\n```\nclass Book < ActiveRecord::Base\n    has_many :author_assignments, :dependent => :destroy\n    has_many :featured_authors, :through => :author_assignments, :conditions => \"`author_assignments`.featured = 1\"\nend\n```\n\nHere is my problem:\n\nWhen I call:\n\n```\n@book.featured_author_ids\n```\n\nThe expected array of ids is incorrect. I get an array of all the author ids, not just the featured authors. The SQL query doesn't include the condition that `'author_assignments'.featured` must be true.\n\n```\nSELECT `author_assignments`.author_id FROM `author_assignments` WHERE (`author_assignments`.book_id = 4)\n```\n\nOn the other hand, when I fetch the `@book.featured_authors` records:\n\n```\n@book.featured_authors\n```\n\nThe `'author_assignments'.featured` condition is included in the SQL finder and the expected result for records is correct.\n\nThanks,\nChris\n", "labels": [], "number": 1005, "updated_at": "2011-08-17 13:15:42", "user": 789801, "closed_at": "2011-05-21 15:12:39", "id": 904935, "title": "Has_many :through _ids not passing conditions to SQL", "url": "https://api.github.com/repos/rails/rails/issues/1005", "created_at": "2011-05-16 05:33:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171598", "text": "_Imported from Lighthouse._\nComment by **Chris Your** - 2011-04-08 15:21:13 UTC\n\nI took a look at ActiveRecord-3.0.6 in associations.rb `redefine_method(\"#{reflection.name.to_s.singularize}_ids\")` on line 1492. As far as I can see, the _ids method on the `has_many :through` association creates the finder on the through model like this (around line 1500:\n\n```\nsend(through.name).select(\"DISTINCT #{through.quoted_table_name}.#{primary_key}\").map! { |r| r.send(primary_key) }\n```\n\nI can easily add an if condition that looks for the `:conditions` option on the reflection and add the `where` conditions like this:\n\n```\nif reflection.options[:conditions]\n    send(through.name).select(\"DISTINCT #{through.quoted_table_name}.#{primary_key}\").where(reflection.options[:conditions]).map! { |r| r.send(primary_key) }\nelse\n    send(through.name).select(\"DISTINCT #{through.quoted_table_name}.#{primary_key}\").map! { |r| r.send(primary_key) }\nend\n```\n\nBut I'm sure there's a Rails way of doing this kind of thing.\n\nAny help to get this patched would be appreciated.\n\nThanks,\nChris\n", "created_at": "2011-05-16 05:33:53", "user": 789801, "id": 1171598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171599", "text": "_Imported from Lighthouse._\nComment by **Anatoliy Lysenko** - 2011-04-08 15:55:48 UTC\n\nI think you should look at master not v3.0.6 if you want to create a pathc.\nCollectionAssociation#reader_ids:\n\n``` ruby\n  column  = \"#{reflection.quoted_table_name}.#{reflection.association_primary_key}\"\n  scoped.select(column).except(:includes).map! do |record|\n    record.send(reflection.association_primary_key)\n  end\n```\n\nMaybe scoped already has conditions?\n", "created_at": "2011-05-16 05:33:54", "user": 789801, "id": 1171599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171600", "text": "_Imported from Lighthouse._\nComment by **Chris Your** - 2011-04-08 16:12:31 UTC\n\nHi Anatoliy,\n\nThanks for the advice. I haven't contributed to Rails' source before...\n\nScoped on the `through` object's reflection doesn't have the `where` conditions - the conditions are on the `reflection` object's reflection. If that makes sense.\n\nI wish I knew more about reflections and Arel. I'm learning as I dig through this source though. :)\n", "created_at": "2011-05-16 05:33:56", "user": 789801, "id": 1171600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171601", "text": "_Imported from Lighthouse._\nComment by **Chris Your** - 2011-04-08 17:22:44 UTC\n\nI took a look at Rails Master. Looks awesome. Lots of changes.\n\nI'll have to checkout master to see if the CollectionAssociation#reader_ids fixes this little bit of missing functionality in 3.0.6.\n", "created_at": "2011-05-16 05:33:57", "user": 789801, "id": 1171601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1826183", "text": "This issue still reproducing in 3.0.9.\n", "created_at": "2011-08-17 13:15:42", "user": 95571, "id": 1826183}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6682\nCreated by **Anatoliy Lysenko** - 2011-04-07 12:46:07 UTC\n\nDelegate #inspect and #as_json to #to_a.\n", "labels": [], "number": 1006, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904938, "title": "Refactoring ActiveRecord::Relation.", "url": "https://api.github.com/repos/rails/rails/issues/1006", "created_at": "2011-05-16 05:34:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171602", "text": "Attachments saved to Gist: http://gist.github.com/971832\n", "created_at": "2011-05-16 05:34:04", "user": 789801, "id": 1171602}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6683\nCreated by **Ben Orenstein** - 2011-04-07 16:27:08 UTC\n\nI found two files in railties that weren't taking advantage of ActiveSupport::Concern.\n\nAttached patch refactors them.\n", "labels": [], "number": 1007, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904939, "title": "Small refactoring: use ActiveSupport::Concern", "url": "https://api.github.com/repos/rails/rails/issues/1007", "created_at": "2011-05-16 05:34:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171603", "text": "Attachments saved to Gist: http://gist.github.com/971833\n", "created_at": "2011-05-16 05:34:09", "user": 789801, "id": 1171603}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6685\nCreated by **Ryan Aipperspach** - 2011-04-07 22:02:49 UTC\n# The problem\n\nPolymorphic joins currently add a condition (e.g., taggable_type=\"Post\") to the WHERE clause.  When the table being joined is in an outer join (e.g., via a Tag.include(:tagged_posts)), this precludes finding objects that have no matching objects across the join (e.g., Tags that don't have any Posts).\n\nTo reproduce, see `test_has_many_polymporphic_with_source_type_and_some_empty_children` in `join_model_test.rb`.\n\nIn the current code, the query:\n\n``` ruby\nTag.includes(:tagged_posts).where(:taggings => {:id => nil}).limit(100)\n```\n\ngenerates SQL like:\n\n``` sql\nSELECT ... FROM tags LEFT OUTER JOIN \"taggings\" ON \"taggings\".\"tag_id\" = \"tags\".\"id\" LEFT OUTER JOIN \"posts\" ON \"posts\".\"id\" = \"taggings\".\"taggable_id\" WHERE \"taggings\".\"taggable_type\" = 'Post' AND \"taggings\".\"id\" IS NULL LIMIT 100\n```\n\nWhich will never find any results because of the conflicting conditions `\"taggings\".\"taggable_type\" = 'Post'` and `\"taggings\".\"id\" IS NULL`. \n\nAfter applying this patch, it instead generates:\n\n``` sql\nSELECT ... FROM \"tags\" LEFT OUTER JOIN \"taggings\" ON \"taggings\".\"tag_id\" = \"tags\".\"id\" LEFT OUTER JOIN \"posts\" ON \"posts\".\"id\" = \"taggings\".\"taggable_id\" AND \"taggings\".\"taggable_type\" = 'Post' WHERE \"taggings\".\"id\" IS NULL LIMIT 100\n```\n# Solution\n\n`ThroughReflection#conditions` currently applies a condition of `foreign_type => options[:source_type]` whenever an association provides a source_type (either directly, or implicitly via a `:through` or `:source` option, which is the source of the errant condition in the query above.\n\nThis was replaced with a constraint that is inserted when a join is created, in both `AssociationScope#add_constraints` and `JoinAssociation#join_to` (with the shared code for generating the constraint in `join_helper.rb`:\n\n``` ruby\ndef append_source_type_condition(constraint, table, foreign_table, reflection)\n  source_type = reflection.options[:source_type] ||\n    (reflection.source_reflection && \n     reflection.source_reflection.options[:source_type])\n\n  if (source_type)\n    table.create_and([\n      constraint,\n      foreign_table[reflection.foreign_type].eq(source_type)\n    ])\n  else\n    constraint\n  end\nend\n```\n", "labels": [], "number": 1008, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904940, "title": "Move conditions for polymorphic joins from WHERE to ON clause", "url": "https://api.github.com/repos/rails/rails/issues/1008", "created_at": "2011-05-16 05:34:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171604", "text": "Attachments saved to Gist: http://gist.github.com/971834\n", "created_at": "2011-05-16 05:34:16", "user": 789801, "id": 1171604}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6686\nCreated by **Michael McGrath** - 2011-04-08 13:30:48 UTC\n\nMy first ticket so forgive errors please.\n\nIn config/environment.rb we have\n\n```\nActiveRecord::Base.pluralize_table_names = false\n```\n\nWhich works flawlessly until we add a named scope to a model such as:\n\n```\nclass Disease < ActiveRecord::Base\n  scope :active, where(:active=>true)\n...\n```\n\nWithout the scope, the model/DB interaction works perfectly. However, adding the scope line causes ActiveRecord to pluralize the table name.\n\nOverriding with\n\n```\nset_table_name 'disease'\n```\n\ngets it working again but shouldn't be necessary.\n\nThanks\nMichael.\n", "labels": [], "number": 1009, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904941, "title": "Using scope causes models not to respect non-pluralization", "url": "https://api.github.com/repos/rails/rails/issues/1009", "created_at": "2011-05-16 05:34:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6687\nCreated by **jaswope** - 2011-04-08 14:28:54 UTC\n\nActionDispatch:RemoteIp ignores X-Forwarded-For if all of the IPs it contains are considered trusted proxies.  This list includes localhost and all private addresses.\n\nThis impacts applications that are hosted behind a reverse proxy (proxying to localhost) and accessed from a private IP, such as intranet applications. Aside from making the remote ip detection incorrect, this causes problems with ActionDispatch::Request.local?, causing it to incorrectly return true, which in turn causes default configurations of Rails apps to show stack traces when they shouldn't.\n\nThe offending line appears to be here: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/remote_ip.rb#L34\n\nPerhaps it should fall back to the last ip in the forwarded for chain instead:\n\n``` ruby\nreturn forwarded_ips.reject { |ip| ip =~ @trusted_proxies }.last || forwarded_ips.last\n```\n", "labels": [], "number": 1010, "updated_at": "2012-01-17 14:40:44", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904942, "title": "X-Forwarded-For ignored when \"trusted\"", "url": "https://api.github.com/repos/rails/rails/issues/1010", "created_at": "2011-05-16 05:34:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1856228", "text": "I'm not sure why this was closed. It looks like it was automatically closed after the move from Lighthouse. But I'm still experiencing this issue.\n\nIt seems to me that it should simply be the first IP in the `forwarded_ips` array that should be grabbed. I don't see why all of the trusted ranges should be rejected since the client could be coming from one of the trusted IP ranges.\n\n```\nreturn forwarded_ips.first || @env[\"REMOTE_ADDR\"]\n```\n", "created_at": "2011-08-19 20:27:34", "user": 277306, "id": 1856228}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3528693", "text": "As far as I know, is now configurable using config.action_dispatch.trusted_proxies=.\n", "created_at": "2012-01-17 14:40:44", "user": 14680, "id": 3528693}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6688\nCreated by **ystael** - 2011-04-08 17:52:11 UTC\n\nWhen using the ActiveRecord session store with :cookie_only => false set, if the session ID is actually supplied via URL parameter and not via cookie, path parameters designated in the route do not appear in the params hash in the controller.  That is, if we have the route\n\n``` ruby\n  get \"test/aa/:x/:y\" => 'test#aa'\n```\n\nand we fetch /test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88 with no session cookie set, params[:x] and params[:y] are nil in the controller action.\n\nI believe the problem is as follows:  In ActionDispatch::Session::AbstractStore#extract_session_id (action_dispatch/middleware/session/abstract_store.rb:204), if sid is not fetched from a cookie and @cookie_only is false, then sid is fetched from request.params[@key].  This causes ActionDispatch::Http::Parameters#parameters (action_dispatch/http/parameters.rb:9) to be called to populate @env[\"action_dispatch.request.parameters\"] in the request environment.  However, the session store middleware runs before the router, so @env[\"action_dispatch.request.path_parameters\"] has not yet been populated, and @env[\"action_dispatch.request.parameters\"] is populated without the path parameters.  Then later when ActionController::Instrumentation#process_action (action_controller/metal/instrumentation.rb:21) preps the filtered parameters, they come by filtering a parameter hash that should have the path parameters in it, but doesn't, so the path parameters never make it to the final controller.\n\nA crude hack that works around the problem is to change ActionDispatch::Http::FilterParameters#filter_parameters as follows:\n\n``` ruby\n      def filtered_parameters\n        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)\n      end\n```\n\nwhere ActionDispatch::Http::Parameters#parameters_uncached is a copy of ActionDispatch::Http::Parameters#parameters which forces rebuilding of the hash:\n\n``` ruby\n      def parameters_uncached\n        @env[\"action_dispatch.request.parameters\"] = begin\n          params = request_parameters.merge(query_parameters)\n          params.merge!(path_parameters)\n          encode_params(params).with_indifferent_access\n        end\n      end\n```\n\nI don't know whether this is the right way to attack the problem, and I don't know yet whether this patch causes any other issues.\n\n[Note: I require :cookie_only => false because my application is called on the user's behalf by a portal system which does not pass me cookies or permit me to set them.  This setup also means that session fixation attacks are not possible without compromising the portal system.]\n", "labels": [], "number": 1011, "updated_at": "2011-09-19 18:32:50", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904943, "title": "Path parameters not recognized when session is :cookie_only => false", "url": "https://api.github.com/repos/rails/rails/issues/1011", "created_at": "2011-05-16 05:34:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2136839", "text": "This is still an issue at least in actionpack-3.0.10.  A better fix is to use query_parametes instead of params in action_dispatch/middleware/session/abstract_store.rb\n\nSo that means changing this:\n\n``` ruby\ndef extract_session_id(env)\n   stale_session_check! do\n      request = ActionDispatch::Request.new(env)\n      sid = request.cookies[@key]\n      sid ||= request.params[@key] unless @cookie_only\n      sid\n   end\nend\n```\n\nto\n\n``` ruby\ndef extract_session_id(env)\n   stale_session_check! do\n      request = ActionDispatch::Request.new(env)\n      sid = request.cookies[@key]\n      sid ||= request.query_parameters[@key] unless @cookie_only\n      sid\n   end\nend\n```\n", "created_at": "2011-09-19 18:32:50", "user": 86016, "id": 2136839}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6689\nCreated by **Chris Willmore** - 2011-04-08 18:23:53 UTC\n\nThe [online documentation for ActiveRecord::Locking::Pessimistic in Rails 3.0.6](http://api.rubyonrails.org/classes/ActiveRecord/Locking/Pessimistic.html) has a small error in it:\n\n``` ruby\n  shugo = Account.where(\"name = 'shugo'\").lock(true).first\n  yuko = Account.where(\"name = 'shugo'\").lock(true).first\n```\n\nIt seems like the latter should have `where(\"name = 'yuko'\")` instead.\n", "labels": [], "number": 1012, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904944, "title": "Docs for ActiveRecord::Locking::Pessimistic don't make sense", "url": "https://api.github.com/repos/rails/rails/issues/1012", "created_at": "2011-05-16 05:34:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1201653", "text": "Pushed a fix to docrails for merging #3b18e900e8fc3c333dc52e71c7cb8413250ac192\n", "created_at": "2011-05-19 05:21:01", "user": 19890, "id": 1201653}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6690\nCreated by **piglop** - 2011-04-08 18:28:35 UTC\n\nI'm trying to use fields_for on nested attributes collection association, with an explicit index like in this failing test: https://github.com/piglop/rails/commit/784e4f0fb168c0ce173aa022463138367793b6d1\n\nIs it a bug or am I doing something wrong ?\n", "labels": [], "number": 1013, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904945, "title": "fields_for with index on nested attributes collection", "url": "https://api.github.com/repos/rails/rails/issues/1013", "created_at": "2011-05-16 05:34:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171605", "text": "_Imported from Lighthouse._\nComment by **piglop** - 2011-04-09 09:10:54 UTC\n\nI was doing something wrong. The right option is child_index, not index.\n\nI think this should be documented, or at least mentioned as an allowed option.\nPropositions:\n- https://github.com/piglop/rails/commit/e328c90e36016f2599f8d62c9407f4490177fa8c\n- https://github.com/piglop/rails/commit/aadc9d8629964bc87be5cb6614711cd8f967e1ed\n", "created_at": "2011-05-16 05:34:44", "user": 789801, "id": 1171605}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6691\nCreated by **Shawn** - 2011-04-08 23:35:29 UTC\n\nHi,\n\nSorry if this has been fixed in a later release, or is an issue in MySQL, but I'm experiencing an issue with validates_uniqueness_of in my app.  Specifically, when I try to violate the rule the validation does not return an error.\n\nDatabase is MYSQL 5.0.1 (have tried on later versions as well)\nRails Version is 3.0.3\nRuby Version = 1.9.2p180\nConnection encoding is; UTF8\nMySQL collation on table / field is: utf8_general_ci\nPlatforms are Windows and Linux\n\nExample code:\n\nOn my User model:\n\n  validates_uniqueness_of :login\n\nIn Rails console I find a user record and set it's login to a login that's in use on another record.  Then check user.valid? and it's true when it should be false.\n\nThe validator emits the following statement:\n\nSELECT `users`.`id` FROM `users` WHERE (`users`.`login` = BINARY 'my-dupe-id') AND (`users`.id <> 66664) LIMIT 1\n\nThis query returns no results.\n\nAdding the :case_sensitive => true option gets  things working  as the validator is forcing both values to LOWER() and not using the BINARY qualifier.\n\nAgain, sorry if this is something wrong with MySQL (as in the product of how I have the database set up) and thanks for reading this and supporting Rails.\n\nShawn\n", "labels": [], "number": 1014, "updated_at": "2011-05-21 15:12:40", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904946, "title": "Rails 3.0.3 - validates_uniqueness_of case_sensitive fails on UTF8 fields", "url": "https://api.github.com/repos/rails/rails/issues/1014", "created_at": "2011-05-16 05:34:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6693\nCreated by **Steve Schwartz** - 2011-04-21 11:26:42 UTC\n\nIf we take two `ActiveRecord::Relations` and join them via `union`:\n\n``` ruby\n    rel_a = ActiveRecord::Relation.new(MyModel).where(:id => 3)\n    rel_b = ActiveRecord::Relation.new(MyModel).where(:id => 5)\n    new_rel = rel_a.union(rel_b) \n    new_rel.to_s   #=> \"#<Arel::Nodes::Union:0x3da6260>\"\n    new_rel.to_sql #=> \"( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) UNION SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) )\"\n```\n\nIdeally, we'd be able to sort and limit the resulting `UNION` results in the SQL. According to [the MySQL docs for the UNION operator](http://dev.mysql.com/doc/refman/5.0/en/union.html), this should be possible (at least in MySQL). We'd call it like this:\n\n``` ruby\n    new_rel.order(:created_at).limit(5)\n    new_rel.to_sql #=> \"( ( SELECT `my_models`.* FROM `my_models` WHERE (`my_models`.`id` = 3) ) UNION ( SELECT `my_models`.* FROM `my_models` WHERE (`top_items`.`id` = 5) ) ORDER BY `created_at` ASC LIMIT 5 )\"\n```\n\nCurrently, two things prevent this from being possible:\n1. The `Arel::Nodes:Union` node inherits from `Arel::Nodes::Binary`, with no additional methods, and as such, does not support `order` or `limit` methods.\n2. The `Arel::Nodes::Union.to_sql` method should be wrapping both the `:left` and the `:right` Relation SQL strings in parentheses, so that the `order` and `limit` clauses may work on the `UNION` itself, according to the MySQL docs.\n", "labels": [], "number": 1015, "updated_at": "2013-07-10 14:20:42", "user": 789801, "closed_at": "2011-05-21 15:12:40", "id": 904947, "title": "Arel Union does not support #order or #limit", "url": "https://api.github.com/repos/rails/rails/issues/1015", "created_at": "2011-05-16 05:34:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171606", "text": "_Imported from Lighthouse._\nComment by **Duke** - 2011-04-26 06:48:36 UTC\n\nI need this also.  Interleaving ordering by post date and last commented date.  I must do an ordered union.\n", "created_at": "2011-05-16 05:34:56", "user": 789801, "id": 1171606}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6694\nCreated by **djusepo** - 2011-04-12 00:09:54 UTC\n\nI use cookies to save items to basket in my webshop, and in Opera, Firefox and chrome everytnigs works fine, but in IE in doesnt save any information\nhere is my project susy.heroku.com\nCan anybody help me? I am newbie to rails\nThank you for help\n", "labels": [], "number": 1016, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904948, "title": "cookies doesnt work in IE 8,9", "url": "https://api.github.com/repos/rails/rails/issues/1016", "created_at": "2011-05-16 05:35:03", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6697\nCreated by **jwkpiano1** - 2011-04-13 00:59:07 UTC\n\nIn Rails 3, if you have both an :if block and an :on declaration on the same validation, the :if block runs before the :on declaration is checked. For example, in the following code:\n`validates_presence_of :blah, :on => :update, :if => lambda { |record| record.id == 4 }`\nthe :if block is run even if the context is a create.\nThis seems to be due to the following code in activemodel/validations/callbacks.rb:\n`def before_validation(*args, &block)\n   options = args.extract_options!\n   if options.is_a?(Hash) && options[:on]\n     options[:if] = Array.wrap(options[:if])\n     options[:if] << \"self.validation_context == :#{options[:on]}\"\n   end\n   set_callback(:validation, :before, *(args << options), &block)\n end`, where the check is added to the end of the options[:if] array, causing the check to run after the :if block.\n", "labels": [], "number": 1017, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904950, "title": "Validations' if blocks are run before any :on checks are made", "url": "https://api.github.com/repos/rails/rails/issues/1017", "created_at": "2011-05-16 05:35:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6698\nCreated by **Ryan D Johnson** - 2011-04-13 04:14:41 UTC\n\nIt looks like #4109 was intended to fix this in commit 77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type method  introduced there doesn't do what it needs to. Probably it should be omitted in favor of letting Rack::Request#content_type do its normal thing.\n\nHere's an overview of the problem: \n\nActionDispatch::Request includes ActionDispatch::Http::MimeNegotiation, which overrides content_type from Rack::Request\n\nRack::Requset#content_type just dumps env['CONTENT_TYPE'], which will include the charset: \n\n```\ndef content_type\n  content_type = @env['CONTENT_TYPE']\n  content_type.nil? || content_type.empty? ? nil : content_type\nend\n```\n\nActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup as content_mime_type (the Mime::Type used to come back directly from #content_type; that's what 77a2a3 fixed, returning the mime type string instead). \n\n```\n  def content_mime_type\n    @env[\"action_dispatch.request.content_type\"] ||= begin\n      if @env['CONTENT_TYPE'] =~ /^([^,\\;]*)/\n        Mime::Type.lookup($1.strip.downcase)\n      else\n        nil\n      end\n    end\n  end\n\n  def content_type\n    content_mime_type && content_mime_type.to_s\n  end\n```\n\nUnfortunately, although the new content_type implementation returns a string, it's stripped of the charset. This renders Rack::Request#content_charset (and #media_type_params) useless: \n\n```\ndef media_type_params\n  return {} if content_type.nil?\n  Hash[*content_type.split(/\\s*[;,]\\s*/)[1..-1].\n    collect { |s| s.split('=', 2) }.\n    map { |k,v| [k.downcase, v] }.flatten]\nend\n\ndef content_charset\n  media_type_params['charset']\nend\n```\n\nIt would be really great if request.body could end up with the proper encoding at the end of the day. But even if that isn't going to happen right away, at least request.raw_post.force_encoding( request.content_charset ) should work. As is, I have to reparse the request.env['CONTENT_TYPE'] to get the charset.\n\nAttaching a patch which implements the suggestion. The unit test modification leads to a failure without the lib change and passes with it. All other action pack tests pass with the patch.\n", "labels": [], "number": 1018, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904951, "title": "Rack::Request#content_charset is always blank due to ActionDispatch::MimeNegotation#content_type", "url": "https://api.github.com/repos/rails/rails/issues/1018", "created_at": "2011-05-16 05:35:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171607", "text": "Attachments saved to Gist: http://gist.github.com/971835\n", "created_at": "2011-05-16 05:35:14", "user": 789801, "id": 1171607}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6699\nCreated by **Matt Albright** - 2011-04-14 10:17:33 UTC\n\nIf all I want from active model is validations, I cannot easily do that.  I don't want to require all of active model, because it will then pull in all of active support, which is complete overkill (and [breaks some things in Padrino](https://github.com/padrino/padrino-framework/issues/473)).\n\nI want:\n\n``` ruby\nrequire 'active_model/validations'\nclass Foo\n  include ActiveModel::Validations\n...\nend\n```\n\nI have to do:\n\n``` ruby\nrequire 'active_model/deprecated_error_methods'\nrequire 'active_model/validator'\nrequire 'active_model/naming'\nrequire 'active_model/translation'\nrequire 'active_model/validations'\nclass Foo\n  include ActiveModel::Validations\n...\nend\n```\n", "labels": [], "number": 1019, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904952, "title": "You can't require 'active_model/validations'", "url": "https://api.github.com/repos/rails/rails/issues/1019", "created_at": "2011-05-16 05:35:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6700\nCreated by **Erik Dungan** - 2011-04-14 10:17:33 UTC\n\nIn the [documentation for the validates_numericality_of validation method](http://ar.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#M000091), it lists a :allow_nil option. In my Rails 3.0.5 app my model will still not validate if this is set to true. \n\nI tried it with :allow_blank => true and this seems to work. Perhaps the documentation should be updated to reflect this. (I can submit an update but I'm not sure how to do this)\n", "labels": [], "number": 1020, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904953, "title": "validates_numericality_of doesn't honor :allow_nil option (but does :allow_blank)", "url": "https://api.github.com/repos/rails/rails/issues/1020", "created_at": "2011-05-16 05:35:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190349", "text": "Here is the implementation for allowed_nil:\nhttps://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations/numericality.rb (line 26)\n\nand the test for this:\nhttps://github.com/rails/rails/blob/master/activemodel/test/cases/validations/numericality_validation_test.rb (line 36)\n\nwhich is green for me.\n\nGreetz \nMarkus\n", "created_at": "2011-05-17 13:21:20", "user": 136796, "id": 1190349}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6701\nCreated by **Philippe Creux** - 2011-04-13 22:53:00 UTC\n\nHello,\n\n<code>\"\\302\\240\"</code> is a UTF-8 non breaking space.\n\nIt matches <code>/\\w/</code> in a rails environment on ruby 1.8. This bug does not occur in a rails environment on ruby 1.9 or in irb on ruby 1.8 and ruby 1.9.\n\n<pre>\n$> rails c\nruby-1.8.7-p249 > \"\\302\\240\".match /\\w/\n => # MatchData \"\\302\\240\"\n</pre>\n\n\n<pre>\n$> rails c\nruby-1.9.2-p0 > \"\\302\\240\".match /\\w/\n => nil\n</pre>\n\n\n<pre>\n$> irb\nruby-1.8.7-p249 > \"\\302\\240\".match /\\w/\n => nil\n</pre>\n\n\n<pre>\n$> irb\nruby-1.9.2-p0 > \"\\302\\240\".match /\\w/\n => nil\n</pre>\n", "labels": [], "number": 1021, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904954, "title": "[BUG] \"\\302\\240\".match /\\w/ on ruby 1.8", "url": "https://api.github.com/repos/rails/rails/issues/1021", "created_at": "2011-05-16 05:35:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6702\nCreated by **James Prior** - 2011-04-14 03:38:01 UTC\n\nBy default, a newly created class is not marked dirty\n\n```\n  Parrot.new.changed? => false\n```\n\nBut a newly created STI class is\n\n```\n  class LiveParrot < Parrot\n  end\n\n  LiveParrot.new.changed? => true\n```\n\nThe included patch for dirty.rb is for the rails 2.3 branch and attempts to follow the pattern established in the dirty module to ignore any changes to the STI column when initializing a new record.\n", "labels": [], "number": 1022, "updated_at": "2011-05-21 15:12:41", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904955, "title": "New STI classes should not be marked as dirty", "url": "https://api.github.com/repos/rails/rails/issues/1022", "created_at": "2011-05-16 05:35:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171609", "text": "Attachments saved to Gist: http://gist.github.com/971836\n", "created_at": "2011-05-16 05:35:37", "user": 789801, "id": 1171609}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6703\nCreated by **Yar Dmitriev** - 2011-04-14 16:56:30 UTC\n\nLike #1842, but for **sendmail** delivery method rather than SMTP.\n\nActionMailer in 2-3-stable branch incorrectly processes the Return-Path header, making the email undeliverable.\n\nIf you specify:\n\n``` ruby\nheaders     \"return-path\" => \"myproject@example.com\"\n```\n\nin your mailer method, the following header will be actually sent:\n\n```\nReturn-Path: <<myproject@example.com>>\n```\n\n(note the double << and >>).\n\nThis is a dangerous bug, because the app will submit the email \"successfully\", only to be rejected by the majority of remote MTAs.\n\nThe attached patch solves the problem, in the way similar to how #1842 was solved.\n", "labels": [], "number": 1023, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:41", "id": 904956, "title": "ActionMailer doesn't correctly use return-path header with sendmail deliver method", "url": "https://api.github.com/repos/rails/rails/issues/1023", "created_at": "2011-05-16 05:35:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171610", "text": "Attachments saved to Gist: http://gist.github.com/971837\n", "created_at": "2011-05-16 05:35:43", "user": 789801, "id": 1171610}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6704\nCreated by **Rafael Cardoso** - 2011-04-14 23:51:08 UTC\n\nI was following the mountable apps manual:\nhttp://piotrsarnacki.com/2010/12/21/mountable-apps-tutorial/\n\nand executed:\n\nbundle exec ./bin/rails plugin new ../blog --edge --mountable\n\nand it failed saying:\n\nCould not find \"../../app/templates/public/javascripts/jquery.js\" in any of your source paths. Your current source paths are: \n/Users/rafamvc/workspace2/bgjobs/rails/railties/lib/rails/generators/rails/plugin_new/templates\n\nbut the command without --mountable works.\n", "labels": [], "number": 1024, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904958, "title": "rails plugin new ../blog --edge --mountable doesn't work", "url": "https://api.github.com/repos/rails/rails/issues/1024", "created_at": "2011-05-16 05:35:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6705\nCreated by **Daniel Lopes** - 2011-04-16 01:52:07 UTC\n\nI'm creating this ticket to send a patch to make select_tag behave like select method from form_builder's. \n\nI tried to use prompt in select_tag but it didn't work but include_blank works (even without any documentation about). In the source select_tag accepts include_blank as boolean or as a string and the string behaves like the prompt of form_builder.select.\n\nI think the api should be the same to avoid mistakes and this should be documented, so I did a small patch to fix these problems.\n", "labels": [], "number": 1025, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904959, "title": "I think select_tag should also have a prompt like select.", "url": "https://api.github.com/repos/rails/rails/issues/1025", "created_at": "2011-05-16 05:35:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171611", "text": "Attachments saved to Gist: http://gist.github.com/971838\n", "created_at": "2011-05-16 05:35:54", "user": 789801, "id": 1171611}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6706\nCreated by **jeanbaptiste.barth (at gmail)** - 2011-04-17 02:22:50 UTC\n\nActual template for \".js.coffee\" files generates a app/assets/javascripts/[controller].js.coffee with 3 comments starting with a \"//\". It leads to this error when trying to compile to JS:\n\n```\nExecJS::ProgramError\nError: Parse error on line 1: Unexpected 'IDENTIFIER'\n```\n\nIf I'm not wrong, Coffeescript comments start with a \"#\", not a \"//\". Hence the (trivial) attached patch, which solves the error for me.\n\nRelevant information for this ticket: I'm running a fresh Rails master (3.1), with coffee-script 2.2.0 and coffee-script-source 1.0.1.\n", "labels": [], "number": 1026, "updated_at": "2011-05-17 12:34:28", "user": 789801, "closed_at": "2011-05-17 12:34:28", "id": 904960, "title": "Bad syntax for comments in generated *.js.coffee", "url": "https://api.github.com/repos/rails/rails/issues/1026", "created_at": "2011-05-16 05:36:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171612", "text": "Attachments saved to Gist: http://gist.github.com/971839\n", "created_at": "2011-05-16 05:36:00", "user": 789801, "id": 1171612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190120", "text": "Fixed here: 0acc6bd6cb1d27fdbb0c00ac3a322bc8413e03cc\n\nCan be closed @josevalim\n", "created_at": "2011-05-17 12:29:45", "user": 146214, "id": 1190120}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6707\nCreated by **Adam Holt** - 2011-04-17 15:40:02 UTC\n\nCurrently in master, running `rake assets:compile` with `config.assets.enabled = false` results in\n\n```\nundefined method `precompile' for nil:NilClass\n```\n\nThis patch raises an error if asset pipelining is disabled. \n\nI chose to raise, as i think if this task was part of a deploy process (and i think that would be the general use case), and assets were accidentally turned off, you would want it to abort the deploy.\n\nI would love feedback if you think this is the wrong approach :)\n", "labels": [], "number": 1027, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904962, "title": "[Patch] rake assets:compile errors when asset pipelining disabled", "url": "https://api.github.com/repos/rails/rails/issues/1027", "created_at": "2011-05-16 05:36:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171613", "text": "Attachments saved to Gist: http://gist.github.com/971840\n", "created_at": "2011-05-16 05:36:06", "user": 789801, "id": 1171613}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6708\nCreated by **Sebastian Martinez** - 2011-04-18 00:19:22 UTC\n\nIn active_support/core_ext/object/duplicable.rb says that either Class and Module are not duplicable.\nIf you run on the console:\n\n```\nClass.new.duplicable?\n => false \nModule.new.duplicable?\n => false \n```\n\nbut, if you do\n\n```\nClass.new.dup\n => #<Class:0x00000102983160>\nModule.new.dup\n => #<Module:0x00000102976988>\n```\n\nAlso DuplicableTest is not really testing if it raises an Exception.\nMarked Class and Module as duplicable (as they are now) and fixed the test.\n", "labels": [], "number": 1028, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904963, "title": "[PATCH] Class and Module are duplicable", "url": "https://api.github.com/repos/rails/rails/issues/1028", "created_at": "2011-05-16 05:36:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171614", "text": "Attachments saved to Gist: http://gist.github.com/971841\n", "created_at": "2011-05-16 05:36:12", "user": 789801, "id": 1171614}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6709\nCreated by **ygetachew** - 2011-04-18 01:12:36 UTC\n\nHello guys! \nI was interested in figuring out which rails version is more suitable for real world application (2.3.X, 3.0 or the current version) considering all pros and cons...\n", "labels": [], "number": 1029, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904964, "title": "Which rails version?", "url": "https://api.github.com/repos/rails/rails/issues/1029", "created_at": "2011-05-16 05:36:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173549", "text": "This issue tracker is for reporting and dealing with bugs in Rails core. Kindly use this mailing list to find answers to your questions regarding Rails usage: http://groups.google.com/group/rubyonrails-talk\n\nThanks! :)\n", "created_at": "2011-05-16 14:18:19", "user": 14514, "id": 1173549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199971", "text": "Worth closing.\n", "created_at": "2011-05-18 21:27:32", "user": 207112, "id": 1199971}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6710\nCreated by **Jake Dempsey** - 2011-04-18 04:14:19 UTC\n\nI am currently using as_json with something similar to:\n\n  def as_json(opts={})\n    super(:only => [:foo],\n      :methods => [:some_method?], \n      :include => { \n        :assoc => { :only => [:bar] }\n      }\n    )\n  end\n\nWhen I render my object to json, I notice that some_method? is being rendered in my json hash for the assoc object.  The only workaround I have been able to come up with is to pass an empty [] to the :assoc like:\n\n  def as_json(opts={})\n    super(:only => [:foo],\n      :methods => [:some_method?], \n      :include => { \n        :assoc => { :only => [:bar], :methods => [] }\n      }\n    )\n  end\n\nIs that the intended behavior?  It does not seem intuitive that the methods declared at the root for the as_json would get inherited by an included association if no methods are defined for the included association.  Bug?\n", "labels": [], "number": 1030, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904965, "title": "ActiveRecorder json serialization should not use keys defined in :methods for  included associations", "url": "https://api.github.com/repos/rails/rails/issues/1030", "created_at": "2011-05-16 05:36:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6711\nCreated by **Jake Dempsey** - 2011-04-18 04:23:01 UTC\n\nWhen I define an as_json override in Question, and provide it with an include for the associated profile, it does not use the as_json defined in the profile model.  \n\nclass Question < ActiveRecord::Base\n  def as_json(opts={})\n    super(:only => [:text],\n      :include => [:profile]\n    )\n  end\nend\n\nclass Profile < ActiveRecord::Base\n   def as_json(opts={})\n     super({ :only => [:display_name], :methods => [:avatar] })\n   end\nend\n\nThis will output the question as json and for the profile association, just output its id field?  The only workaround I have found is to not provide an as_json on the profile and duplicate its as_json attrs everywhere I want to include it in a rendering.\n", "labels": [], "number": 1031, "updated_at": "2012-04-26 16:21:19", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904966, "title": "ActiveRecord json serialization should respect as_json definition of included association", "url": "https://api.github.com/repos/rails/rails/issues/1031", "created_at": "2011-05-16 05:36:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5361480", "text": "Why was that issue closed? I have to admit that I also expected Rails to follow the associations' as_json method.\n\nBy the way, another workaround:\n`\nclass Question < ActiveRecord::Base\n  def as_json(opts={})\n    super(:only => [:text]).merge self.profile.as_json\n  end\nend\n`\n", "created_at": "2012-04-26 16:21:19", "user": 651893, "id": 5361480}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6713\nCreated by **Brian Durand** - 2011-04-18 15:13:14 UTC\n\nThe attached patch fixes an issue with deserializing errors returned from the server for ActiveResource records. The code for deserializing looks for the humanized name in the error messages to determine which errors belong to which attribute. However, when attributes start with the same word (i.e. \"name\" and \"name_source\"), the errors can be assigned incorrectly. The fix sorts attributes by length (descending) so that longer names are always assigned first if they exist.\n", "labels": [], "number": 1032, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904968, "title": "Disambiguate attributes on ActiveResource errors", "url": "https://api.github.com/repos/rails/rails/issues/1032", "created_at": "2011-05-16 05:36:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171615", "text": "Attachments saved to Gist: http://gist.github.com/971842\n", "created_at": "2011-05-16 05:36:34", "user": 789801, "id": 1171615}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6714\nCreated by **chaitanyav** - 2011-04-18 17:41:26 UTC\n\nThe database connection is not released after the background task finishes, I am seeing this issue after the upgrade to Rails 3.0.6 from 3.0.5. Is anyone else facing this issue with Rails 3.0.6?.\n\n```\n prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:202:in `block (2 levels) in checkout': could not obtain a database connection within 5 seconds.  The max pool size is currently 5; consider increasing it. (ActiveRecord::ConnectionTimeoutError)\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:187:in `loop'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:187:in `block in checkout'\n    from prefix/tools_64/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:186:in `checkout'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:94:in `connection'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_pool.rb:317:in `retrieve_connection'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_specification.rb:97:in `retrieve_connection'\n    from prefix/tools_64/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/connection_adapters/abstract/connection_specification.rb:89:in `connection'\n```\n\nEnvironment Ruby 1.9.2-p180 and Rails 3.0.6 on CentOS 4.5 x86_64\n\nThank you\nChaitanya\n", "labels": [], "number": 1033, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904970, "title": "Active Record connection pool Rails 3.0.6", "url": "https://api.github.com/repos/rails/rails/issues/1033", "created_at": "2011-05-16 05:36:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171616", "text": "_Imported from Lighthouse._\nComment by **chaitanyav** - 2011-04-18 18:32:24 UTC\n\nThere was a issue filed before #5736, I think the issue is still not resolved,\n\n```\nLoading development environment (Rails 3.0.6)\n>> Thread.list\n=> [#<Thread:0x00000000551e28 run>]\n>> 5.times do\n?>     Thread.new do\n?>       ActiveRecord::Base.connection_pool.checkout\n>>     end.join\n>>   end\n=> 5\n>> Thread.list\n=> [#<Thread:0x00000000551e28 run>]\n>> ActiveRecord::Base.connection_pool.checkout\nActiveRecord::ConnectionTimeoutError: could not obtain a database connection within 5 seconds.  The max pool size is currently 5; consider increasing it.\n\n```\n\nI also manually tried\n\n```\n>> ActiveRecord::Base.connection_pool.clear_stale_cached_connections!\n=> []\n>> ActiveRecord::Base.connection_pool.checkout\nActiveRecord::ConnectionTimeoutError: could not obtain a database connection within 5 seconds.  The max pool size is currently 5; consider increasing it.\n\n```\n\nThank you\nChaitanya\n", "created_at": "2011-05-16 05:36:40", "user": 789801, "id": 1171616}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6715\nCreated by **Grant Hutchins** - 2011-04-18 18:20:28 UTC\n\n``` ruby\n\nclass Foo < ActiveRecord::Base\nend\n\nclass BarObserver < ActiveRecord::Observer\n  observe :foo\nend\n\nruby-1.8.7-p174 > BarObserver.observed_classes\nNameError: uninitialized constant Bar\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activesupport-3.0.6/lib/active_support/inflector/methods.rb:113:in `constantize'\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activesupport-3.0.6/lib/active_support/inflector/methods.rb:112:in `each'\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activesupport-3.0.6/lib/active_support/inflector/methods.rb:112:in `constantize'\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activesupport-3.0.6/lib/active_support/core_ext/string/inflections.rb:43:in `constantize'\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activemodel-3.0.6/lib/active_model/observing.rb:182:in `observed_class'\n    from /Users/pivotal/.rvm/gems/ruby-1.8.7-p174/gems/activemodel-3.0.6/lib/active_model/observing.rb:175:in `observed_classes'\n    from (irb):1\n\n```\n\nBy reading the implementation at https://github.com/rails/rails/blob/v3.0.6/activemodel/lib/active_model/observing.rb#L158-163 I would expect BarObserver's observed_classes method to have been redefined to return [Foo] without trying to find the non-existant Bar class.\n", "labels": [], "number": 1034, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904971, "title": "ActiveRecord::Observer.observed_classes doesn't get redefined properly", "url": "https://api.github.com/repos/rails/rails/issues/1034", "created_at": "2011-05-16 05:36:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6716\nCreated by **Brian Durand** - 2011-04-18 19:32:29 UTC\n\nActiveResource has a bug finding custom defined classes for attributes in the same namespace as the current model. For some reason when it looks for pre-defined classes, it won't look in the current namespace, but that is where it will define a new model if the class does not exist.\n\nIf my resource comes back as:\n\n``` xml\n<person>\n  <first-name>John</first-name>\n  <last-name>Doe</last-name>\n  <address>\n    <street>123 Park Avenue</street>\n    <city>New York</city>\n    <state>NY</state>\n  <address>\n</person>\n```\n\nThis works and will dynamically create a new class Person::Address < ActiveResource::Base for person.address:\n\n``` ruby\nclass Person < ActiveRecord::Base\nend\n```\n\nThis code also works and person.address will use the Address class and address will not be treated as a resource:\n\n``` ruby\nclass Person < ActiveRecord::Base\nend\n\nclass Address\n  attr_reader :attributes\n  def initialize(attributes = {})\n    @attributes = attributes\n  end\nend\n```\n\nHowever, this code will not work. ActiveResource will try to use the Person::Address class, but it will treat it as a resource resulting in method missing errors when it tries to call prefix= and site= on it:\n\n``` ruby\nclass Person < ActiveRecord::Base\n  class Address\n    attr_reader :attributes\n    def initialize(attributes = {})\n      @attributes = attributes\n    end\n  end\nend\n```\n", "labels": [], "number": 1035, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904974, "title": "ActiveResource custom class namespace bug", "url": "https://api.github.com/repos/rails/rails/issues/1035", "created_at": "2011-05-16 05:36:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171617", "text": "Attachments saved to Gist: http://gist.github.com/971843\n", "created_at": "2011-05-16 05:36:53", "user": 789801, "id": 1171617}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6717\nCreated by **Curtis Jennings Schofield** - 2011-04-18 21:02:58 UTC\n\nExample here works in Rails 3.0.5.\n\nExact problem specified here:\n\nhttps://github.com/RAM9/off_site_testing_bug\n\nThrows exception\n\nUsers/o_o/.rvm/rubies/ruby-1.9.2-p180/bin/ruby -S bundle exec rspec ./spec/requests/offsite_bug_spec.rb\nF\n\nFailures:\n\n  1) Offsite Testing does not route internally to rails incorrectly\n     Failure/Error: click_on \"Offsite\"\n     ActionController::RoutingError:\n       No route matches \"/html/rfc2606\"\n     # internal:prelude:10:in `synchronize'\n     # ./spec/requests/offsite_bug_spec.rb:6:in`block (2 levels) in <top (required)>'\n", "labels": [], "number": 1036, "updated_at": "2011-05-21 15:12:42", "user": 789801, "closed_at": "2011-05-21 15:12:42", "id": 904975, "title": "Rails 3.0.6 - Regression in Offsite Request Test Handling", "url": "https://api.github.com/repos/rails/rails/issues/1036", "created_at": "2011-05-16 05:36:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171618", "text": "_Imported from Lighthouse._\nComment by **Curtis Jennings Schofield** - 2011-04-18 21:53:13 UTC\n\nAlso in 3.0.7\n", "created_at": "2011-05-16 05:37:00", "user": 789801, "id": 1171618}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6718\nCreated by **rubknob** - 2011-04-18 22:28:05 UTC\n\nselect :foo, :bar, options_for_select(%w(a b c)), {:disabled => true} doesn't work for me.\n\nHowever, select_tag 'foo', options_for_select(%w(a b c)), {:disabled => true} works.\n", "labels": [], "number": 1037, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904976, "title": "Unable to disable a select dropdown using the select formhelper", "url": "https://api.github.com/repos/rails/rails/issues/1037", "created_at": "2011-05-16 05:37:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171619", "text": "_Imported from Lighthouse._\nComment by **rubknob** - 2011-04-18 22:29:04 UTC\n\nI observed this behavior in both 2.3.8 and 3.0.7 btw.\n", "created_at": "2011-05-16 05:37:06", "user": 789801, "id": 1171619}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6719\nCreated by **Paul Sadauskas (Rando)** - 2011-04-18 23:27:10 UTC\n\n`core_ext/numeric/time` needs to require 'active_support/core_ext/time/calculations' and 'active_support/core_ext/time/acts_like'.\n\nSee gist: https://gist.github.com/926505\n", "labels": [], "number": 1038, "updated_at": "2011-05-18 13:08:22", "user": 789801, "closed_at": "2011-05-18 13:08:22", "id": 904977, "title": "ActiveSupport core_ext/numeric/time missing some requires", "url": "https://api.github.com/repos/rails/rails/issues/1038", "created_at": "2011-05-16 05:37:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6720\nCreated by **Sebastian Martinez** - 2011-04-19 00:21:47 UTC\n\nI have a very simple testing app, containing login code only.\n\nOn the login action I added a debugger to check if Rails is filtering the parameters as it should.\nI did:\n\n```\n(rdb:1) eval env[\"action_dispatch.parameter_filter\"]\n[:password, :password, :password_confirmation, /RAW_POST_DATA/]\n```\n\nSo it should filter the password. Checking it like this works fine\n\n```\neval ActionDispatch::Request.new(env).filtered_parameters\n{\"commit\"=>\"Sign in\", \"action\"=>\"create\", \"utf8\"=>\"✓\", \"authenticity_token\"=>\"8VJfRG+0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4=\", \"controller\"=>\"devise/sessions\", \"user\"=>{\"remember_me\"=>\"0\", \"password\"=>\"[FILTERED]\", \"email\"=>\"user@test.com\"}}\n```\n\nThe problem is when I do:\n\n```\neval ActionDispatch::Request.new(env).filtered_env\n```\n\nIt shows the entire env that should be filtered, and in several places it is, but I see parts like this:\n\n```\n[...]\n\"action_dispatch.request.request_parameters\"=>{\"commit\"=>\"Sign in\", \"authenticity_token\"=>\"8VJfRG+0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4=\", \"utf8\"=>\"✓\", \"user\"=>{\"remember_me\"=>\"0\", \"password\"=>\"user123\", \"email\"=>\"user@test.com\"}},\n\"rack.request.form_vars\"=>\"utf8=%E2%9C%93&authenticity_token=8VJfRG%2B0RHI2u1Lp0BvbP3ee9023TQFfdkVYmiaI6D4%3D&user%5Bemail%5D=user%40test.com&user%5Bpassword%5D=user123&user%5Bremember_me%5D=0&commit=Sign+in\"\n[...]\n```\n\nAs you can see, the password is right there in plain text.\nIs this ok? If so, how can I completely filter the password??\n", "labels": [], "number": 1039, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904978, "title": "Parameter Filter not working", "url": "https://api.github.com/repos/rails/rails/issues/1039", "created_at": "2011-05-16 05:37:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171621", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-19 22:07:54 UTC\n\nWhich version of Rails you are using? I tested it with one of my apps which is using Rails 3.0.3 and this is what I am getting. Notice that password is filtered.\n\n``` ruby\n(rdb:1) eval ActionDispatch::Request.new(env).filtered_env\n....\n\"rack.request.form_input\"=>#<StringIO:0x107ef78a8>, \"HTTP_ACCEPT_CHARSET\"=>\"ISO-8859-1,utf-8;q=0.7,*;q=0.3\", \"SERVER_PORT\"=>\"3000\", \"action_controller.instance\"=>#<SessionsController:0x107e9b2b0 ...>, \"rack.session.options\"=>{:httponly=>true, :expire_after=>nil, :domain=>nil, :path=>\"/\", :id=>\"92c6cfe0e146cf646c06d13641ec6af8\", :secure=>false}, \"REQUEST_METHOD\"=>\"POST\", \"HTTP_ORIGIN\"=>\"http://localhost:3000\", \"rack.request.query_string\"=>\"\", \"rack.request.form_hash\"=>{\"commit\"=>\"Login\", \"authenticity_token\"=>\"NJIXco+zVXb9bYJOb3ethlOOY9Y0vW7skoBZhsPjFYI=\", \"utf8\"=>\"\\342\\234\\223\", \"password\"=>\"welcome\", \"email\"=>\"neeraj.cmu@gmail.com\"}, \"action_dispatch.request.content_type\"=>#<Mime::Type:0x101980880 @synonyms=[], @symbol=:url_encoded_form, @string=\"application/x-www-form-urlencoded\">, \"QUERY_STRING\"=>\"\", \"rack.input\"=>#<StringIO:0x107ef78a8>, \"HTTP_CONNECTION\"=>\"keep-alive\", \"HTTP_ACCEPT_ENCODING\"=>\"gzip,deflate,sdch\", \"GATEWAY_INTERFACE\"=>\"CGI/1.2\"}, @_config=#<OrderedHash {}>, @_status=200, @_action_name=\"create\", @lookup_context=#<ActionView::LookupContext:0x107e9adb0 @view_paths=[#<ActionView::FileSystemResolver:0x108be3788 @cached={}, @caching=false, @path=\"/Users/nsingh/dev/personal/teams99_new/app/views\">, #<ActionView::FileSystemResolver:0x108be4778 @cached={}, @caching=false, @path=\"/Users/nsingh/dev/personal/teams99_new/vendor/ruby/1.8/gems/handy-0.0.15/app/views\">, #<ActionView::FileSystemResolver:0x108c0e938 @cached={}, @caching=false, @path=\"/Users/nsingh/dev/personal/teams99_new/vendor/ruby/1.8/gems/admin_data-1.1.10/app/views\">], @details_key=nil, @skip_default_locale=false, @details={:locale=>[:en, :en], :formats=>[:html], :handlers=>[:rhtml, :rxml, :erb, :builder, :haml, :rjs]}, @frozen_formats=false>>, \"HTTP_ORIGIN\"=>\"http://localhost:3000\", \"GATEWAY_INTERFACE\"=>\"CGI/1.2\", \"HTTP_ACCEPT_ENCODING\"=>\"gzip,deflate,sdch\", \"HTTP_CONNECTION\"=>\"keep-alive\", \"rack.input\"=>#<StringIO:0x107ef78a8>, \"QUERY_STRING\"=>\"\", \"action_dispatch.request.content_type\"=>#<Mime::Type:0x101980880 @synonyms=[], @symbol=:url_encoded_form, @string=\"application/x-www-form-urlencoded\">, \"rack.request.form_hash\"=>{\"commit\"=>\"Login\", \"utf8\"=>\"\\342\\234\\223\", \"authenticity_token\"=>\"NJIXco+zVXb9bYJOb3ethlOOY9Y0vW7skoBZhsPjFYI=\", \"password\"=>\"[FILTERED]\", \"email\"=>\"neeraj@example.com\"}, \"rack.request.query_string\"=>\"\"}\n\n```\n", "created_at": "2011-05-16 05:37:19", "user": 789801, "id": 1171621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171622", "text": "_Imported from Lighthouse._\nComment by **Sebastian Martinez** - 2011-04-19 22:15:38 UTC\n\nI'm using Rails 3.0.3 too.\n\nIn the response you posted, the password is not filtered in some places but in others it's not.\nThe password you used is 'welcome'.\nCheck \"rack.request.form_hash\".\nI am also seeing it without being filtered on \"action_dispatch.request.request_parameters\" that you omitted.\n", "created_at": "2011-05-16 05:37:20", "user": 789801, "id": 1171622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171623", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-20 02:46:15 UTC\n\nI investigated a bit and this is what I found.\n\nThe output looks like this https://gist.github.com/930236\n\nLook at #8 the key is (action_dispatch.request.parameters)\nand the password is filtered at line #16\n\nNow look at line #33 the key is same (action_dispatch.request.parameters) . Notice that password is _not_ filtered at line #41.\n\nQuestion is why?\n\nThe second key (action_dispatch.request.parameters) has a parent key named (action_dispatch.remote_ip) line #28.\n\nWhen rails gets the key and value for this case it looks like this.\nkey: action_dispatch.remote_ip\n\nvalue : [something] . However notice that the class of this value is _not_ Hash. In this case value.is_a?(Hash) return false since the class of value is ActionDispatch::RemoteIp::RemoteIpGetter.\n\nThe filtering code looks like this\n\n``` ruby\n              if regexps.find { |r| key =~ r }                value = '[FILTERED]'\n              elsif value.is_a?(Hash)\n                value = filter(value)\n              elsif value.is_a?(Array)\n                value = value.map { |v| v.is_a?(Hash) ? filter(v) : v }\n              else ..\n```\n\nNotice that in this case value does not satisfy any of the above cases and hence the value is left as it is and the password value is exposed.\n\nWhat's the fix?\n\nI don't have a good solution. It is not practically possible to look inside all different kinds of objects and replace the value. I can think of a solution where the values are not printed for the classes like the one mentioned above in normal mode. If you are debugging something then in the debug mode full value should be printed.\n", "created_at": "2011-05-16 05:37:22", "user": 789801, "id": 1171623}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171624", "text": "_Imported from Lighthouse._\nComment by **Steve Schwartz** - 2011-04-20 03:44:57 UTC\n\nI don't know much about the context of the filter code you posted, but I'm assuming it logs the `ActionDispatch::RemoteIp::RemoteIpGetter` by calling `to_s` on it. Could something like this work?\n\n```\nelsif value.respond_to?(:to_s)\n  value = value.to_s.gsub!(/(#{key}:\\s*)([^\\s,$]+)/, \"#{$1}#{filter($2)}\")\n```\n", "created_at": "2011-05-16 05:37:23", "user": 789801, "id": 1171624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171625", "text": "_Imported from Lighthouse._\nComment by **Neeraj Singh** - 2011-04-20 09:02:36 UTC\n\n@steve \n\nto_s is currently not being called on ActionDispatch::RemoteIp::RemoteIpGetter. Rather the value is left intact. In other words value is not being altered at all.\n\nSecondly after invoking to_s it is hard to be precise about key and value and each class can have its own implementation of to_s.\n", "created_at": "2011-05-16 05:37:24", "user": 789801, "id": 1171625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171626", "text": "_Imported from Lighthouse._\nComment by **Steve Schwartz** - 2011-04-25 23:57:54 UTC\n\n@neeraj, I think you misunderstood. I was referring to when `ActionDispatch::RemoteIp::RemoteIpGetter` is actually getting output (i.e. with `print` or `puts` or whatever), at which time the `to_s` is called on it.\n\nBut yes, the code you had excerpted was from within the `ActionDispatch::Http::ParameterFilter` class, which happens before the `to_s` method ever gets called, so that wouldn't be solvable from here. I would imagine a fix for this issue would have to go straight in the `filtered_env` method itself.\n", "created_at": "2011-05-16 05:37:26", "user": 789801, "id": 1171626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171627", "text": "_Imported from Lighthouse._\nComment by **Steve Schwartz** - 2011-04-25 23:59:56 UTC\n\nOh, and concerning the difficulty in being precise about key/value for each class's own `to_s` method, yes I agree, but when it comes to filtering sensitive info, something is better than nothing.\n", "created_at": "2011-05-16 05:37:27", "user": 789801, "id": 1171627}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6721\nCreated by **Alexey Muranov** - 2011-04-19 08:20:24 UTC\n\nI am getting in activesupport 3.0.6 a \"circular require\" warning when running ruby or irb with -w option.\nThere were no such warning in 3.0.5.\n\nIf I do\n\n```\n$ irb -w\n> require 'active_support/core_ext'\n```\n\nI get\n\"warning: loading in progress, circular require considered harmful...\".\n\nIf I do\n\n```\n$ irb -w\n> gem 'activesupport', '=3.0.5'\n> require 'active_support/core_ext'\n```\n\nit works quietly.\n\nIt this a bug in activesupport 3.0.6 gem?\n", "labels": [], "number": 1040, "updated_at": "2011-05-18 16:02:37", "user": 789801, "closed_at": "2011-05-18 16:02:37", "id": 904980, "title": "activesupport 3.0.6 gem: require 'active_support/core_ext' generates \"circular require\" warning", "url": "https://api.github.com/repos/rails/rails/issues/1040", "created_at": "2011-05-16 05:37:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171628", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-19 10:39:06 UTC\n\nThis warning is still present in `activesupport 3.0.7`.\n", "created_at": "2011-05-16 05:37:34", "user": 789801, "id": 1171628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171629", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-04-19 11:59:40 UTC\n\nHi Alexey, could you please provide a patch?\n", "created_at": "2011-05-16 05:37:35", "user": 789801, "id": 1171629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171630", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-19 12:02:04 UTC\n\nSorry Xavier, I am new to Rails, i have never patched anything before, and i do not know where this bug originates from.\n", "created_at": "2011-05-16 05:37:36", "user": 789801, "id": 1171630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171631", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-04-19 12:07:29 UTC\n\nCool. I emailed some starting material via the mailing list in case you'd like to try. It's a good exercise, and since this is a circular require it does not require knowledge of Rails internals. I encourage you to try it if you feel like it :).\n\nOtherwise, no worries Alexey, perhaps someone may provide a patch.\n", "created_at": "2011-05-16 05:37:38", "user": 789801, "id": 1171631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171632", "text": "_Imported from Lighthouse._\nComment by **Alexey Muranov** - 2011-04-19 12:15:40 UTC\n\nThanks Xavier, i'll think about it.\nWas i supposed to receive your message through the mailing list?\nI wasn't receiving any messages, so i just activated \"Ruby on Rails\" in my subscriptions, it was off.\nCan you send it to me directly at muranov@math.univ-toulouse.fr please?\n", "created_at": "2011-05-16 05:37:39", "user": 789801, "id": 1171632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171633", "text": "_Imported from Lighthouse._\nComment by **Xavier Noria** - 2011-04-19 13:26:51 UTC\n\nI replied to your email in rubyonrails-talk. This is the thread:\n\nhttp://groups.google.com/group/rubyonrails-talk/browse_thread/thread/4c6ee8c46a298d5f\n", "created_at": "2011-05-16 05:37:40", "user": 789801, "id": 1171633}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195083", "text": "I can not replicate this issue, this should be closed until further information or a failing test case is provided.\n", "created_at": "2011-05-18 05:23:29", "user": 8701, "id": 1195083}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6722\nCreated by **Florent Viard** - 2011-04-19 08:49:20 UTC\n\nToday, Chrome and maybe other brothers also remember hidden fields in forms when using the AutoFill/AutoComplete feature (like for keeping user credentials).\n\nAnd so, when using form_tag in RoR with the authenticity token feature enabled, the form submission could fail with an invalid token error because Chrome will try to autocomplete the authentication_token hidden field with an old value.\n\nSee for example those bugs in redmine:\nhttp://www.redmine.org/issues/4825\nhttp://www.redmine.org/issues/5915\nhttp://www.redmine.org/issues/5230\n\nAn easy fix will be to add the autocomplete=\"off\" attribute to the hidden input field used for the authenticity token.\n\nTo fix this, in \"rails/actionpack/lib/action_view/helpers/form_tag_helper.rb\":\nAdd ' :autocomplete => \"off\" '\nto ' tag(:input, :type => \"hidden\", :name => request_forgery_protection_token.to_s, :value => token) '\nin the function: def token_tag(token)\n", "labels": [], "number": 1041, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904981, "title": "Add autocomplete=\"off\" Attribute to the authenticity_token of form_tag", "url": "https://api.github.com/repos/rails/rails/issues/1041", "created_at": "2011-05-16 05:37:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6723\nCreated by **Jérémy Van de Wyngaert** - 2011-04-19 13:49:19 UTC\n\nThere is a bug in AR when trying to associate and update a record with another one \nthrough nested_attributes and has_many/belongs_to depending on how the params are sorted.\nI suspect the same behaviour probably is happening with has_one/belongs_to.\n\nBug reproductible with rails 3.0.7, demo app illustrating it:\n\nhttps://github.com/jeremyvdw/Piracy (check the README file for details)\n", "labels": [], "number": 1042, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904982, "title": "ActiveRecord: nested_attributes and associations bug", "url": "https://api.github.com/repos/rails/rails/issues/1042", "created_at": "2011-05-16 05:37:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171634", "text": "_Imported from Lighthouse._\nComment by **germaninthetown** - 2011-05-02 11:19:50 UTC\n\njust checked it with edge (3.1.0.beta) and the spec didn't failed\n", "created_at": "2011-05-16 05:37:53", "user": 789801, "id": 1171634}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6724\nCreated by **Diego Plentz** - 2011-04-19 15:32:22 UTC\n\nEvery time I try to disable Rack:Runtime I receive the same exception.\n\n```\n/Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/actionpack-3.0.7/lib/action_dispatch/middleware/stack.rb:86:in `assert_index': No such middleware to insert before: \"Rack::Runtime\" (RuntimeError)\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/actionpack-3.0.7/lib/action_dispatch/middleware/stack.rb:49:in `insert'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/configuration.rb:37:in `block in merge_into'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/configuration.rb:36:in `each'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/configuration.rb:36:in `merge_into'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/application.rb:161:in `app'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/application/finisher.rb:35:in `block in <module:Finisher>'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `instance_exec'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `run'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/initializable.rb:50:in `block in run_initializers'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `each'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `run_initializers'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/application.rb:134:in `initialize!'\nfrom /Users/plentz/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.0.7/lib/rails/application.rb:77:in `method_missing'\n```\n\nthe code I tried to run is(both inside development.rb or application.rb):\n\n```\nconfig.middleware.delete Rack::Runtime\n```\n", "labels": [], "number": 1043, "updated_at": "2014-08-08 18:08:47", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904984, "title": "impossible to disable Rack::Runtime", "url": "https://api.github.com/repos/rails/rails/issues/1043", "created_at": "2011-05-16 05:37:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208273", "text": "Well, this is the issue. https://github.com/rails/rails/blob/master/railties/lib/rails/application/bootstrap.rb#L49\n\nI'm not sure why anyone would need to disable Rack::Runtime? It doesn't seem to me like it's worth changing Rails to accomodate, but it can be worked around by creating another initializer with:\n\nRails.application.config.middleware.delete Rack::Runtime\n\nThis works because it then runs after the railties initializer that does insert_before Rack::Runtime.\n", "created_at": "2011-05-20 06:04:41", "user": 1284, "id": 1208273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1551005", "text": "using a initializer did the trick. I've solved it (before your tip) creating a rack-middleware like this:\n\n``` ruby\nclass Stealth\n  def initialize(app)\n    @app = app\n  end\n  def call(env)\n    status, headers, body = @app.call(env)\n    headers.delete('X-Runtime')\n    [status, headers, body]\n  end\nend\n```\n\nand in my environment I added this:\n\n``` ruby\nconfig.middleware.insert_before 'Rack::Runtime', 'Stealth'\n```\n\ntks anyway :)\n", "created_at": "2011-07-11 23:52:10", "user": 4867, "id": 1551005}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6726\nCreated by **Kirill Maximov** - 2011-04-22 05:48:03 UTC\n\nHello,\n\n  When ActiveRecord's find() option :include => [a lot of stuff], \n  the current association preloading code may be not very efficient, \n  because it calls flatten.compact.uniq for each option for :include.\n\n  This can be done only once, and this really improves performance when there are hundreds of records for which \n  associations are preloaded.\n\n  The fix is very simple, please see the attached patch.\n\n  2.3.x is still alive, I belive :)\n\n  Thanks,\n  KIR\n", "labels": [], "number": 1044, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904985, "title": "[PATCH] Speedup associations preloading when multiple options are used in :include (2.3.x branch)", "url": "https://api.github.com/repos/rails/rails/issues/1044", "created_at": "2011-05-16 05:38:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171636", "text": "Attachments saved to Gist: http://gist.github.com/971844\n", "created_at": "2011-05-16 05:38:05", "user": 789801, "id": 1171636}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6727\nCreated by **Justin French** - 2011-04-20 12:23:12 UTC\n\nActionView::Helpers::FormHelper#fields_for now has four params (record, record_object, options, block) in master instead of three (record_or_name_or_array, args, &block) in Rails 3.0.6.\n\nI'm mostly surprised that a public method has changed between releases without deprecation warnings, documentation, etc. It also bugs me that the params are different to ActionView::Helpers::FormBuilder#fields_for. The change seems to have been introduced in 58d3b9042302d41f90fc129f12787d83f7bdade9 (\"Speed up form_for by specializing extract_options!\") by Yehuda in August (can be found in the diff between v3.0.6 and master).\n\nIdeally this change would be reverted, or perhaps a backwards compatible way to keep the optimisation can be found.\n", "labels": [], "number": 1045, "updated_at": "2011-07-22 21:08:21", "user": 789801, "closed_at": "2011-07-22 21:08:21", "id": 904986, "title": "ActionView::Helpers::FormHelper#fields_for API changed in master", "url": "https://api.github.com/repos/rails/rails/issues/1045", "created_at": "2011-05-16 05:38:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232262", "text": "fake comment so i'm hopefully subscribed to this ticket again\n", "created_at": "2011-05-24 23:49:23", "user": 5240, "id": 1232262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331960", "text": "@josevalim Can you please assign this to Rails 3.1 or give me some hints on how we can work around this in simple_form and formtastic?\n", "created_at": "2011-06-09 05:22:20", "user": 5240, "id": 1331960}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1352187", "text": "@josevalim can you revert this commit and display a deprecation instead?\n", "created_at": "2011-06-11 17:19:50", "user": 26460, "id": 1352187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1606980", "text": "I think that this issue can be closed. These commits should solve it with backwards compatibility: 6871cda693a9a3e5d26ab0884f19132064acbf0a, 82f33dce9c6229bee35af35a9aa3bc9c144737f3, f0479cbbd52961c75906022003d4f03aa39556e0\n", "created_at": "2011-07-19 13:42:44", "user": 47848, "id": 1606980}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6728\nCreated by **jL** - 2011-04-20 12:34:57 UTC\n\nWhenever I try running any database related rake task \"db:create\", I got this error \"rake aborted! uninitialized constant Mysql::Error\"\n\nfrom 'databases.rake'  line 64\n\n```\nerror_class = config['adapter'] =~ /mysql2/ ? Mysql2::Error : Mysql::Error\n```\n\nwhen I commented that line out everything worked just fine.\n\nthe database got created, migrations worked fine and all.\n\nI used NetBeans 6.9.1 in windows7\nthe db gems were:\njdbc-mysql, activerecord-jdbc-adapter, activerecord-jdbcmysql-adapter\n\ndatabase.yml\n\n```\ndevelopment:\n  adapter: jdbcmysql\n  encoding: utf8\n  reconnect: false\n  database: myapp_development\n  pool: 5\n  username: root\n  password: 12345\n  host: localhost\n\n...\n```\n", "labels": [], "number": 1046, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904987, "title": "rake aborted! uninitialized constant Mysql::Error", "url": "https://api.github.com/repos/rails/rails/issues/1046", "created_at": "2011-05-16 05:38:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213781", "text": "It's fixed in master. \n\nhttps://github.com/rails/rails/commit/6464f7b9be3ccf3f05a36bc6be0de2cb8ebda97d\n\nWe can close it.!\n", "created_at": "2011-05-21 07:05:52", "user": 3948, "id": 1213781}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6729\nCreated by **qoobaa** - 2011-04-20 13:02:31 UTC\n\nIt'd be nice to provide a generic asset_url method for generating links to images, stylesheets, etc. Currently there's a image_tag helper, which generates the URL according to asset_host and asset_path, but there's no way of generating URI without the tag (i need a image URI for Facebook &lt;meta property=\"og:image\" ... /&gt; tag). Additionally we could provide some more methods like image_url, audio_url, etc.\n", "labels": [], "number": 1047, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904988, "title": "asset_url needed", "url": "https://api.github.com/repos/rails/rails/issues/1047", "created_at": "2011-05-16 05:38:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6731\nCreated by **Mathieu Arnold** - 2011-04-20 15:49:09 UTC\n\nI was playing with the latest arel, rails and squeel, and I tried a simple thing :\n\n``` ruby\nFacture.joins(:devise).sum(\"montant_ttc / taux\")\n```\n\nwhich used to work, but now does :\n\n``` sql\nSELECT SUM(montant_ttc / taux) AS sum_id FROM \"facture\" INNER JOIN \"devise\" ON \"devise\".\"id_devise\" = \"facture\".\"id_devise\" ORDER BY numero\n```\n\nThe query is perfect, only the last part, ORDER BY numero, which comes from a default_scope, should not be there. I tried adding an except(:order) but it seems a noop right now...\n", "labels": [], "number": 1048, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904989, "title": "Arel from git seems to have broken \"except\"", "url": "https://api.github.com/repos/rails/rails/issues/1048", "created_at": "2011-05-16 05:38:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6732\nCreated by **ast** - 2011-04-20 16:44:09 UTC\n\nTrying to integrate ActiveSupport into an existing non-Rails system, I unintentionally discovered AS 3.0.5 defines its own #truncate method.  Unfortunately, for word boundaries, this doesn't take regular expressions since it assumes that the separator will be a string, e.g:\n\n``` ruby\n 44     stop = options[:separator] ?\n 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission\n```\n\nSince it doesn't say explicitly that strings are required and this to me is most useful on sentence breaks, e.g. regex-based sets of punctuation.\n\nTo allow #truncate to use regex objects as separators, I've made the following change which seems to do what I'd expect:\n\n``` ruby\n 41     if(sep = options[:separator]) && sep.is_a?(String)\n 42       substr = sep.mb_chars\n 43     else\n 44       substr = sep\n 45     end\n 46 \n 47     length_with_room_for_omission = length - options[:omission].mb_chars.length\n 48     chars = text.mb_chars\n 49     stop = options[:separator] ?\n 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission\n```\n\nIt would be cool if this might be approved and included in a future version.\n\nCode that doesn't work in 3.0.5:\n\n``` ruby\n>> \"The quick brown fox jumped over the lazy dog.  Wasn't he grand?\".truncate(50, :separator => /[?\\.!]/)\n=> \"The quick brown fox jumped over the lazy dog...\"\n```\n\nCheers,\n\nast\n", "labels": [], "number": 1049, "updated_at": "2011-05-21 15:12:43", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904990, "title": "ActiveSupport's String#truncate fails with Regexp as separator", "url": "https://api.github.com/repos/rails/rails/issues/1049", "created_at": "2011-05-16 05:38:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6733\nCreated by **bterkuile** - 2011-04-20 17:41:23 UTC\n\nWhen a relation is triggered in an after_initialize block the includes statement will not do its magic and falls back to separate requests. A reproduction scenario using Rails 3.0.7 on Ubuntu:\n\nrails new after_initialize\ncd after_initialize\nrails g scaffold Post name:string body:text\nrails g scaffold Comment email:string body:text post_id:integer\nrake db:migrate\n\n``` rails\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n```\n\nrails c\n\n``` rails\np1 = Post.create(:name => 'Post 1')\np2 = Post.create :name => 'Post 2'\np1.comments << p1.comments.create(:body => 'Comment 1')\np2.comments << p2.comments.create(:body => 'Comment 2')\nComment.includes(:post).map{|c| c.post.name} #=>  Post Load (0.2ms)  SELECT \"posts\".* FROM \"posts\" WHERE (\"posts\".\"id\" IN (1,2))\n```\n\nNow the models with after initialize:\n\n``` rails\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  after_initialize do\n    self.body = post.try(:name)\n  end\nend\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n```\n\nAnd in the console:\n\n``` rails\nComment.includes(:post).map{|c| c.post.name} #=>\n  Post Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = 1 LIMIT 1\n  Post Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = 1 LIMIT 1\n  Post Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = 2 LIMIT 1\n```\n\nWhen the relation is not triggered in after_initialize, aka:\n\n``` rails\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  after_initialize do\n    self.body = 'I am new'\n  end\nend\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n```\n\nEverything is ok. This can lead to performance drops.\n", "labels": [], "number": 1050, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:43", "id": 904991, "title": "Calling a relation in after_initialize disables includes(:relation) functionality", "url": "https://api.github.com/repos/rails/rails/issues/1050", "created_at": "2011-05-16 05:38:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6734\nCreated by **Paul K** - 2011-04-20 22:51:47 UTC\n\nThis seems to have been fixed in previous version of Rails (https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/6015) but is again a problem in 3.0.x. \n\nThe code has changed a bit since the original patch, but the idea is the same. I'm attaching the necessary patch against action pack 3.0.7.\n", "labels": [], "number": 1051, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904993, "title": "AssetTagHelper ensures that files are in the wrong directory (again)", "url": "https://api.github.com/repos/rails/rails/issues/1051", "created_at": "2011-05-16 05:38:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171638", "text": "Attachments saved to Gist: http://gist.github.com/971845\n", "created_at": "2011-05-16 05:38:44", "user": 789801, "id": 1171638}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6735\nCreated by **anathematism** - 2011-04-21 06:40:55 UTC\n\nI'm shifting my Rails 2 code to Rails 3. I've an active record query\n\nGroup.find(:all, :select => 'groups.name',:include => :owner)\n\nIn model groups.rb, i've an association defined:\nbelongs_to :owner, :class_name => \"Member\", :foreign_key =>\"owner_id\"\n\nI'm getting an error while running above query:\n\nActiveModel::MissingAttributeError: missing attribute: owner_id\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:328:in `block in preload_belongs_to_association'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:327:in`each'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:327:in `preload_belongs_to_association'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:121:in`block in preload_one_association'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:115:in `each'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:115:in`preload_one_association'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/association_preload.rb:92:in `preload_associations'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation.rb:68:in`block in to_a'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation.rb:68:in `each'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation.rb:68:in`to_a'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation/finder_methods.rb:143:in `all'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation/finder_methods.rb:105:in`find'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/relation/finder_methods.rb:101:in `find'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/activerecord-3.0.6/lib/active_record/base.rb:439:in`find'\n    from (irb):18\n    from /usr/local/lib/ruby/gems/1.9.1/gems/railties-3.0.6/lib/rails/commands/console.rb:44:in `start'\n    from /usr/local/lib/ruby/gems/1.9.1/gems/railties-3.0.6/lib/rails/commands/console.rb:8:in`start'\n\nI'm using Rails 3.0.6. Seems like there's a bug introduced in the ActiveRecord 3.0.6. Kindly look into this issue and fix.\n\nThanks,\n\nAtif\n", "labels": [], "number": 1052, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904994, "title": "Rails 3 - Active Record Query that uses includes and select", "url": "https://api.github.com/repos/rails/rails/issues/1052", "created_at": "2011-05-16 05:38:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171640", "text": "_Imported from Lighthouse._\nComment by **anathematism** - 2011-04-29 05:45:19 UTC\n\nAny update on this?\n", "created_at": "2011-05-16 05:38:50", "user": 789801, "id": 1171640}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6737\nCreated by **Alexey Poimtsev** - 2011-04-22 23:30:49 UTC\n\nHi,\nIt's not a problem, but possible feature request :)\n\nis there any ability to work with counter_cache in separate table? Let me explain. I have following models - User, UserStatistics, Posts, Comments - everything standard for some blog. But i'd like to separate comments_count and posts_count from User and move to UserStatistics - on each create/destroy Post or Comment i'd like to update UserStatistics table.\n\nIs there any standard way to do that?\n", "labels": [], "number": 1053, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904995, "title": "counter_cache in separate table", "url": "https://api.github.com/repos/rails/rails/issues/1053", "created_at": "2011-05-16 05:38:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6738\nCreated by **Sebastian Martinez** - 2011-04-23 01:01:15 UTC\n\nThe +name+ argument on the #columns method is useless, no implementation of this method makes use of it.\nI removed the argument since it only creates confusion.\n", "labels": [], "number": 1054, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904997, "title": "[PATCH] Useless argument on #columns", "url": "https://api.github.com/repos/rails/rails/issues/1054", "created_at": "2011-05-16 05:39:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171641", "text": "Attachments saved to Gist: http://gist.github.com/971846\n", "created_at": "2011-05-16 05:39:02", "user": 789801, "id": 1171641}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6740\nCreated by **MSNexploder** - 2011-04-25 01:23:32 UTC\n\nResetting all inflector scopes does not clear the :humans scope.\n\nPatch including failing tests attached.\n", "labels": [], "number": 1055, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904998, "title": "[PATCH] proper reset all inflector scopes", "url": "https://api.github.com/repos/rails/rails/issues/1055", "created_at": "2011-05-16 05:39:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171642", "text": "Attachments saved to Gist: http://gist.github.com/971847\n", "created_at": "2011-05-16 05:39:08", "user": 789801, "id": 1171642}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6741\nCreated by **Ary Borenszweig** - 2011-04-25 05:08:04 UTC\n\nThis is the code that fails, you can put it in a main.rb file and run it:\n\n``` ruby\nrequire 'rubygems'\nrequire 'active_record'\n\nActiveRecord::Base.establish_connection(:adapter => 'sqlite3', :database => ':memory:')\n\nActiveRecord::Schema.define do\n  create_table \"countries\", :force => true do |t|\n    t.string \"name\"\n  end\n\n  create_table \"people\", :force => true do |t|\n    t.integer \"country_id\"\n    t.string \"name\"\n    t.integer \"age\"\n  end\nend\n\nclass Country < ActiveRecord::Base\n  has_many :people\nend\n\nclass Person < ActiveRecord::Base\n  belongs_to :country\nend\n\ncountry = Country.create! :name => 'Foo'\ncountry.people.find_or_create_by_name 'bar', :age => 30\n```\n\nI get\n\n```\n/Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activesupport-3.0.3/lib/active_support/core_ext/hash/keys.rb:43:in `assert_valid_keys': Unknown key(s): age (ArgumentError)\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/relation/spawn_methods.rb:107:in `apply_finder_options'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/base.rb:934:in `construct_finder_arel'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/base.rb:986:in `method_missing'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/associations/association_collection.rb:443:in `block in method_missing'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/base.rb:1121:in `with_scope'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/associations/association_proxy.rb:203:in `with_scope'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/associations/association_collection.rb:439:in `method_missing'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/associations/association_proxy.rb:151:in `send'\n    from /Users/asterite/.rvm/gems/ruby-1.9.2-p136@geochat-rails/gems/activerecord-3.0.3/lib/active_record/associations/association_collection.rb:425:in `method_missing'\n    from main.rb:27:in `<main>'\n```\n", "labels": [], "number": 1056, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 904999, "title": "Rails 3: find_or_create_by gives ArgumentError (Unknown keys) with hash parameter in has_many", "url": "https://api.github.com/repos/rails/rails/issues/1056", "created_at": "2011-05-16 05:39:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171643", "text": "_Imported from Lighthouse._\nComment by **Ary Borenszweig** - 2011-04-25 14:53:43 UTC\n\nWhy low priority? The beauty of Rails 3 is to work with associations like this, and I can see many use cases where you would want to find or create by an attribute and initialize it with other attributes. It's not an edge case, I already wanted to use this in two projects I started recently.\n", "created_at": "2011-05-16 05:39:14", "user": 789801, "id": 1171643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171645", "text": "_Imported from Lighthouse._\nComment by **Matthew Daubert** - 2011-04-25 16:00:54 UTC\n\nAry,\n\nI suspect the low priority designation is because you an accomplish the same task by changing the last line.  I plugged this into your test case and it seems to work fine.\n\n```\ncountry.people.find_or_create_by_name('bar') { |p| p.age = 30 }\n```\n\nhttp://api.rubyonrails.org/classes/ActiveRecord/Base.html\n", "created_at": "2011-05-16 05:39:16", "user": 789801, "id": 1171645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171646", "text": "_Imported from Lighthouse._\nComment by **Flurin** - 2011-04-28 09:00:18 UTC\n\nThat last one doesn't work either, the block never get's called.\n", "created_at": "2011-05-16 05:39:17", "user": 789801, "id": 1171646}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171648", "text": "_Imported from Lighthouse._\nComment by **Nick Howard** - 2011-05-01 22:34:05 UTC\n\nI looked into this. What it looks like is happening is that `ActiveRecord::Association::CollectionProxy`'s way of handling `find_or_create_by` calls is written in a manner that does not allow for setting additional attributes when the lookup fails. Any arguments to it are passed to a `find_by_` call instead of being used to attributes for creating a new object if it didn't exist.\n\nI put together a patch for rails master.\n\n https://github.com/rails/rails/pull/358\n\nWhat do you think?\n", "created_at": "2011-05-16 05:39:19", "user": 789801, "id": 1171648}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171649", "text": "_Imported from Lighthouse._\nComment by **Nick Howard** - 2011-05-06 21:31:16 UTC\n\nThis has been merged into master https://github.com/rails/rails/commit/f098c80947dee1b420cea4ca647d1ceb3e59eaea\n", "created_at": "2011-05-16 05:39:20", "user": 789801, "id": 1171649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171650", "text": "Attachments saved to Gist: http://gist.github.com/971849\n", "created_at": "2011-05-16 05:39:22", "user": 789801, "id": 1171650}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6742\nCreated by **Matthew Daubert** - 2011-04-25 13:17:47 UTC\n\nThe ActiveModel::SecurePassword module is outstanding but I think allowing a password to be optional would allow many more use cases for this feature.  E.g. an application using Omniauth in tandem with local authentication probably doesn't require a password for each User.  The patch attached adds a :required configuration parameter (defaults to true) and ensures that the authenticate method returns false for a blank password.\n\nThis is my first patch submission so please forgive any faux pas I may have made.  :)\n", "labels": [], "number": 1057, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905000, "title": "[Patch] Allow optional passwords in ActiveModel::SecurePassword", "url": "https://api.github.com/repos/rails/rails/issues/1057", "created_at": "2011-05-16 05:39:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171651", "text": "_Imported from Lighthouse._\nComment by **Matthew Daubert** - 2011-04-25 13:22:15 UTC\n\nRebased patch to master 2bc4856..d4bea35\n", "created_at": "2011-05-16 05:39:28", "user": 789801, "id": 1171651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171652", "text": "Attachments saved to Gist: http://gist.github.com/971850\n", "created_at": "2011-05-16 05:39:29", "user": 789801, "id": 1171652}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6744\nCreated by **jimmiesh** - 2011-04-26 01:22:27 UTC\n\nWhen passing a :type option to to_xml, the passed type is propagated to all string attributes in the ActiveModel.  For instance:\n\n``` ruby\n\nclass Person\n  include ActiveModel::Serializers::Xml\n  extend ActiveModel::Naming\n\n  attr_accessor :attributes\n  def initialize(attributes)\n    @attributes = attributes\n  end\nend    \n\nmp = Person.new('foo' => 'string', 'bar' => 1)\nputs mp.to_xml(:type => 'Person')\n\n```\n\nproduces:\n\n`````` xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<person type=\"Person\">\n  <foo type=\"Person\">string</foo>\n  <bar type=\"integer\">1</bar>\n</person>\n\n``` xml\n\nWe ran into this because ActiveRecord adds a type option when serializing has_many associations where the association class does not match the association name.  For instance:\n\n``` ruby\nhas_many :cars, :class_name => 'Automobile'\n``````\n\nIn this case, we wanted the type attribute on each car in the xml, but we don't want it on the car's string attributes :).\n\nPlease consider the attached patch for inclusion in the next release of Rails.  Thanks.\n", "labels": [], "number": 1058, "updated_at": "2011-05-18 19:55:49", "user": 789801, "closed_at": "2011-05-18 19:55:48", "id": 905002, "title": "ActiveModel Xml Serialization patch", "url": "https://api.github.com/repos/rails/rails/issues/1058", "created_at": "2011-05-16 05:39:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171653", "text": "Attachments saved to Gist: http://gist.github.com/971851\n", "created_at": "2011-05-16 05:39:35", "user": 789801, "id": 1171653}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6745\nCreated by **Josh Sharpe** - 2011-04-26 03:28:46 UTC\n\nImagine you're a User and you accepts_nested_attributes for Profile.  And your fun developer goes and does something like this:\n\n@u = User.new\n@u.build_profile\n@u.save\n\n...and then\n\n`<%= @u.errors.full_messages.each{|e| \"<p>#{e}</p>\"} %>`\n\n... or something like that, which dumps this nonsense to the screen:\n\nProfile first name can't be blank\nProfile last name can't be blank\n\nAhh, omg, what is a Profile first name??  Egad, must. get. rid. of. that.\n\n---\n\nThere's no good reason that I can think of that the class name should be in the error message.  Sometimes it makes phonetic sense (like in the test suite), but more often than not it ends up just being confusing for end users.  I suggest the error messages in the above case simply be:\n\nFirst name can't be blank\nLast name can't be blank\n\nNote that this has nothing to do with the error's key name, which remains \"profile.first_name\".  Form helpers will continue to wrap labels in an error class.\n", "labels": [], "number": 1059, "updated_at": "2011-05-18 16:02:21", "user": 789801, "closed_at": "2011-05-18 16:02:21", "id": 905003, "title": "[PATCH] full_messages generates lame messages for associations", "url": "https://api.github.com/repos/rails/rails/issues/1059", "created_at": "2011-05-16 05:39:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171654", "text": "_Imported from Lighthouse._\nComment by **Josh Sharpe** - 2011-04-26 03:31:45 UTC\n\nokay, seriously, lighthouse won't accept my patch. no error, nothing:\n\nhttp://pastebin.com/qVeRBp3R\n", "created_at": "2011-05-16 05:39:41", "user": 789801, "id": 1171654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171655", "text": "_Imported from Lighthouse._\nComment by **Josh Sharpe** - 2011-04-26 03:33:17 UTC\n\nokay... fail.  maybe this will work\n", "created_at": "2011-05-16 05:39:43", "user": 789801, "id": 1171655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171656", "text": "Attachments saved to Gist: http://gist.github.com/971852\n", "created_at": "2011-05-16 05:39:44", "user": 789801, "id": 1171656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196558", "text": "`Profile` is required at the start of the error messages relating to `Profile` as there is a possibility that you may have a `first_name` or `last_name` field on the base object, changing this would be unexpected behavior for many apps and devs.\n\nI am **-1** this patch as there are many ways for you to customize your error messages for special cases like this.\n", "created_at": "2011-05-18 12:20:44", "user": 8701, "id": 1196558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196584", "text": "For one specific case, you're removing a feature which is useful 99.99% of the time.\nI'm -1 too for this patch. You can make do personified messages very easily and that's what you should be doing here.\n", "created_at": "2011-05-18 12:26:50", "user": 9347, "id": 1196584}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6746\nCreated by **Joe Van Dyk** - 2011-04-26 04:21:45 UTC\n\nOn 2-3-stable, activerecord/test/cases/finder_test.rb is missing \"require 'models/project'\", causing it to fail if ran by itself.  (Line 124 refers to it).\n\nNot a problem on the master branch.\n", "labels": [], "number": 1060, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905004, "title": "test/cases/finder_test.rb won't run on its own", "url": "https://api.github.com/repos/rails/rails/issues/1060", "created_at": "2011-05-16 05:39:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171657", "text": "_Imported from Lighthouse._\nComment by **Joe Van Dyk** - 2011-04-26 04:23:39 UTC\n\nBah, here is the correct patch!\n", "created_at": "2011-05-16 05:39:50", "user": 789801, "id": 1171657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171658", "text": "Attachments saved to Gist: http://gist.github.com/971853\n", "created_at": "2011-05-16 05:39:51", "user": 789801, "id": 1171658}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6747\nCreated by **Narihiro Nakamura** - 2011-04-26 04:31:48 UTC\n\nHi, all.\n\nrails.js in rails3.0 stable has many bugs.\nFor example: \nhttps://github.com/rails/prototype-ujs/commit/9d5aa75eee9b39818bddfe5a96737e548b1b538d\nhttps://github.com/rails/prototype-ujs/commit/60f352a18e68ec2ed97ae01b2d72cda9dda5a216\n\nAnd, all fixes already commited to edge.\nhttps://github.com/rails/rails/commit/e9a04320d73d554870ea4c3bf7c1ec18bafcb157\n\nWhy didn't fixes backport to rails.js in rails3.0 stable?\n", "labels": [], "number": 1061, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905005, "title": "Why didn't fixes backport to rails.js in rails3.0 stable?", "url": "https://api.github.com/repos/rails/rails/issues/1061", "created_at": "2011-05-16 05:39:57", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6748\nCreated by **Chad K** - 2011-04-26 05:17:16 UTC\n\nIf you have this configuration:\n\nActionController::Base.asset_host = \"assets.example.com\"\n\nAnd do this:\n\nimage_tag(\"//mysite.com/images/image.png\")\n\nYou get something like:\n\n&lt;img src=\"http://assets.example.com//mysite.com/images/image.png\" &gt;\n\nWhen instead this should be rendered:\n\n&lt;img src=\"//mysite.com/images/image.png\" &gt;\n\nWhich allows the browser to resolve the URL relative the current scheme, e.g. http, https.\n\nAn example of this case can be seen in the URI spec here:\n\nhttp://labs.apache.org/webarch/uri/rfc/rfc3986.html#relative-normal\n\nEx:\n\n\"//g\" => \"http://g\"\n\nassuming the current scheme is http.\n\nI've attached a patch to actionpack to support scheme-relative URL's in asset helpers.\n\nGithub commit can be seen here:\n\nhttps://github.com/chadk/rails/commit/61eae0f2b1bfcb54f0355b710808bdcd5fe64b84\n", "labels": [], "number": 1062, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905006, "title": "Asset helpers should understand scheme-relative URLs", "url": "https://api.github.com/repos/rails/rails/issues/1062", "created_at": "2011-05-16 05:40:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171659", "text": "Attachments saved to Gist: http://gist.github.com/971854\n", "created_at": "2011-05-16 05:40:02", "user": 789801, "id": 1171659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1182143", "text": "Patch Already Applied. Please close \n", "created_at": "2011-05-16 20:27:26", "user": 45494, "id": 1182143}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6749\nCreated by **Frederick Cheung** - 2011-04-26 09:33:45 UTC\n\nThe performance breakdown at the end of an action doesn't include all time spent in activerecord - it only includes time spent until the point where the view finishes rendering. If more time is spent afterwards (or if no view is rendered at all, ie the response is a redirect) then it is not included in the total\n", "labels": [], "number": 1063, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905007, "title": "Action performance summary does not include all the time spent in activerecord", "url": "https://api.github.com/repos/rails/rails/issues/1063", "created_at": "2011-05-16 05:40:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171660", "text": "Attachments saved to Gist: http://gist.github.com/971855\n", "created_at": "2011-05-16 05:40:08", "user": 789801, "id": 1171660}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6750\nCreated by **Camille Roux** - 2011-04-26 11:07:32 UTC\n\nHi, \n\nI can't freeze Rails because http://dev.rubyonrails.org/archives/ seems to be down.\n\n```\n>rake rails:freeze:edge RELEASE=2.3.4\n(in /Users/camille/Development/Ruby/wemusic)\ncd vendor\nDownloading Rails from http://dev.rubyonrails.org/archives/rails_2.3.4.zip\nrake aborted!\nOperation timed out - connect(2)\n\n(See full trace by running task with --trace)\n```\n\nThanks\n", "labels": [], "number": 1064, "updated_at": "2011-05-16 11:19:23", "user": 789801, "closed_at": "2011-05-16 11:19:23", "id": 905008, "title": "Can't freeze Rails because http://dev.rubyonrails.org/archives/ seems to be down", "url": "https://api.github.com/repos/rails/rails/issues/1064", "created_at": "2011-05-16 05:40:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171661", "text": "_Imported from Lighthouse._\nComment by **Vijay Dev** - 2011-04-26 11:43:40 UTC\n\nThe dev.rubyonrails.org domain is down. Possibly related: https://twitter.com/#!/dhh/status/61050725928681473 :-)\n", "created_at": "2011-05-16 05:40:14", "user": 789801, "id": 1171661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172781", "text": "Closing. Rails 2.3 no longer supported.\n", "created_at": "2011-05-16 11:19:23", "user": 9582, "id": 1172781}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6751\nCreated by **Brian Ploetz** - 2011-04-26 20:50:37 UTC\n\nFor various reasons, we actually have several \"production\" Rails environments, and have a naming convention for them along the lines of \"prod1\", \"prod2\", etc. We've found that within the Rails source, there are a few checks for Rails.env.production?, which assumes the name of your production Rails environment is always just \"production\". For example:\n\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/application/configuration.rb#L108\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/application/bootstrap.rb#L29\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/test_help.rb#L3\n\nThis has tripped us up a couple of times. It would be nice if Rails provided a hook that allowed you to override the default name of the production environment, and also accounts for the fact that there could be more than one environment that are \"production\" like.\n\nI understand that this is breaking a very well understood Rails convention, but as more and more SaaS apps are built with Rails (as ours is) this is becoming prohibitive.\n\nThoughts?\n", "labels": [], "number": 1065, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905009, "title": "Rails assumes too much about the name of the \"production\" environment", "url": "https://api.github.com/repos/rails/rails/issues/1065", "created_at": "2011-05-16 05:40:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208305", "text": "I don't really have an opinion on what Rails should do about this, but an easy workaround for your case, as long as you don't actually use an environment named \"production\", would be putting the following at the top of the Application class in config/application.rb, or possibly overriding it per-file in config/environments:\n\n```\ndef (Rails.env).production?\n  prod1? || prod2? || prod3?\nend\n```\n\nI'm fairly sure this would bypass the issues you're having, but it's a pretty ugly hack.\n", "created_at": "2011-05-20 06:16:33", "user": 1284, "id": 1208305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208479", "text": "I'm sure `Rails.env` returns a `ActiveSupport::StringInquirer` instance. You can do `Rails.env.prod1?` if you want.\n", "created_at": "2011-05-20 07:14:14", "user": 762, "id": 1208479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208486", "text": "Are you talking of higher level instance \"type\"? There are development \"type\" instances, production \"type\" instances and \"test\" type instances among others. Each instance has a name like \"prod1\" or \"prod2\"? \n", "created_at": "2011-05-20 07:16:07", "user": 762, "id": 1208486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208628", "text": "It seems very strange to have different production environments.\nHave they different configurations ? I'd be highly interested if you wanted to contact me with some details :P\n\nDespite that, hardcoding these things seems strange too.\nThat should be configurable so we could have _real_ production-like environments, like staging.\n", "created_at": "2011-05-20 08:00:42", "user": 9347, "id": 1208628}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6752\nCreated by **amrnt** - 2011-04-27 17:35:53 UTC\n\nMaking the error message/highlight displayed not in the parent field.\n\nIn case of `password_confirmation` the error message will be shown inline `password` field. [or if we talk about rails default behavior, `password` field will be highlighted instead of `password_confirmation`]\n", "labels": [], "number": 1066, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905010, "title": "{field}_confirmation error message/highlight", "url": "https://api.github.com/repos/rails/rails/issues/1066", "created_at": "2011-05-16 05:40:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6753\nCreated by **Jason Garber** - 2011-04-27 21:24:15 UTC\n\nSuppose I want my radio buttons' labels translated:\n\n``` ruby\n= f.radio_button(:customer_access_enabled, true)\n= f.label(:customer_access_enabled, :value => true)\n= f.radio_button(:customer_access_enabled, false)\n= f.label(:customer_access_enabled, :value => false)\n```\n\nBoth labels get the same value from `\"helpers.label.#{model_name}.#{attribute_name}\"` (in my case, `\"helpers.label.page.customer_access_enabled\"`). I would like to have specific translations for each value of the same attribute.\n", "labels": [], "number": 1067, "updated_at": "2011-05-21 15:12:44", "user": 789801, "closed_at": "2011-05-21 15:12:44", "id": 905011, "title": "Specific translations for labels with values", "url": "https://api.github.com/repos/rails/rails/issues/1067", "created_at": "2011-05-16 05:40:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171662", "text": "_Imported from Lighthouse._\nComment by **Jason Garber** - 2011-04-28 03:13:20 UTC\n\nPorted to GH Issues: https://github.com/rails/rails/pull/333\n", "created_at": "2011-05-16 05:40:32", "user": 789801, "id": 1171662}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171663", "text": "Attachments saved to Gist: http://gist.github.com/971856\n", "created_at": "2011-05-16 05:40:34", "user": 789801, "id": 1171663}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6754\nCreated by **bterkuile** - 2011-04-28 09:33:51 UTC\n\nmattr_accessor :config for module raises error (actionpack) after server restart.\nPutting for example the following in config/initializers/break_it.rb\n\n``` rails\nmodule BreakIt\n  mattr_accessor :config\nend\nApplicationController.send(:include, BreakIt)\n```\n\nraises an error the first time a pare is requested after the servers starts (confirmed for webrick and thin):\n....\nundefined method `allow_forgery_protection' for nil:NilClass\n....\nactionpack (3.0.7) lib/action_controller/metal/request_forgery_protection.rb:123:in`protect_against_forgery?'\n\nA similar error, not reproduced here was because:\nactionpack (3.0.7) lib/abstract_controller/rendering.rb:131 => protected_instance_variables was nil instead of an array.\n\nI renamed :config to something else to fix it. So low priority, but good to mention I think.\n", "labels": [], "number": 1068, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905012, "title": "mattr_accessor :config for module raises error (actionpack) after server restart", "url": "https://api.github.com/repos/rails/rails/issues/1068", "created_at": "2011-05-16 05:40:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214137", "text": "Not a bug, can be closed.\n", "created_at": "2011-05-21 11:00:46", "user": 278, "id": 1214137}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6755\nCreated by **weexpectedthis** - 2011-04-28 22:39:54 UTC\n\nThere is no reason for this to return an array instead of nil.  Makes testing for errors on the object non-intuitive.\n\nWith rails 2 in Rspec I can write:\n\nobj.errors.on(:key_without_errors).should be_nil\n\nWith rails 3 in Rspec I have to write the weird notation of:\n\nobj.errors[:key_without_errors].to_a.should be_nil\n\nCan we just return nil instead of an empty array?\n", "labels": [], "number": 1069, "updated_at": "2011-05-16 11:18:14", "user": 789801, "closed_at": "2011-05-16 11:18:14", "id": 905013, "title": "Rails 3: errors[:key_without_errors] returns empty array", "url": "https://api.github.com/repos/rails/rails/issues/1069", "created_at": "2011-05-16 05:40:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172778", "text": "No. This is the new default notation.\n", "created_at": "2011-05-16 11:18:14", "user": 9582, "id": 1172778}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6756\nCreated by **Dallas Pool** - 2011-04-29 18:21:48 UTC\n\n<% form_for @object, :url => test_url do |f| %>\n<%= f.select :status, status_options %>\n<%= f.select :status, multi_status_options, :multiple => true %>\n<% end %>\n\nSubmit the above form and the following error was observed on rack 1.1, Rails 2.3.10.\n\n/!\\ FAILSAFE /!\\  04/29/2011\n  Status: 500 Internal Server Error\n  expected Array (got String) for param `status'\n    /Users/codeninja/Sites/sfm/lib/patches/rack.rb:37:in`normalize_params'\n    /Users/codeninja/Sites/sfm/lib/patches/rack.rb:51:in `normalize_params'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/utils.rb:64:in`parse_nested_query'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/utils.rb:62:in `each'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/utils.rb:62:in`parse_nested_query'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/request.rb:264:in `parse_query'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/request.rb:153:in`POST'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/methodoverride.rb:15:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/params_parser.rb:15:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/session/abstract_store.rb:177:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/activerecord-2.3.10/lib/active_record/query_cache.rb:29:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/activerecord-2.3.10/lib/active_record/connection_adapters/abstract/query_cache.rb:34:in `cache'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/activerecord-2.3.10/lib/active_record/query_cache.rb:9:in`cache'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/activerecord-2.3.10/lib/active_record/query_cache.rb:28:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/activerecord-2.3.10/lib/active_record/connection_adapters/abstract/connection_pool.rb:361:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/failsafe.rb:26:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/lock.rb:11:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/lock.rb:11:in `synchronize'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/lock.rb:11:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/dispatcher.rb:114:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/reloader.rb:34:in`run'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/actionpack-2.3.10/lib/action_controller/dispatcher.rb:108:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rails-2.3.10/lib/rails/rack/static.rb:31:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/urlmap.rb:47:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/urlmap.rb:41:in`each'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/urlmap.rb:41:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rails-2.3.10/lib/rails/rack/log_tailer.rb:17:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/content_length.rb:13:in `call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/chunked.rb:15:in`call'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/handler/mongrel.rb:67:in `process'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:159:in`process_client'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:158:in `each'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:158:in`process_client'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:285:in `run'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:285:in`initialize'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:285:in `new'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:285:in`run'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:268:in `initialize'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:268:in`new'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/mongrel-1.1.5/lib/mongrel.rb:268:in `run'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rack-1.1.0/lib/rack/handler/mongrel.rb:38:in`run'\n    /Users/codeninja/.rvm/gems/ruby-1.8.7-p334@sfm/gems/rails-2.3.10/lib/commands/server.rb:111\n    script/server:3:in `require'\n    script/server:3\n\nExpected result would be for the last form element value to supersede the previous values.\n", "labels": [], "number": 1070, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905014, "title": "deep rack error when submitting a form with 2 like named select elements, one specified as multi.", "url": "https://api.github.com/repos/rails/rails/issues/1070", "created_at": "2011-05-16 05:40:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6757\nCreated by **Bradley Harris** - 2011-04-29 18:25:26 UTC\n\nRails 3.0.6 --\n\n``` code\n>> require 'rubygems'\n=> false\n>> gem 'activesupport', '3.0.6'\n=> true\n>> require 'active_support/all'\n=> true\n>> Hash.from_xml(\"<data><![CDATA[]]></data>\")\n=> {\"data\"=>\"\"}\n```\n\nRails 3.0.7 --\n\n``` code\n>> require 'rubygems'\n=> false\n>> gem 'activesupport', '3.0.7'\n=> true\n>> require 'active_support/all'\n=> true\n>> Hash.from_xml(\"<data><![CDATA[]]></data>\")\n=> {\"data\"=>{\"__content__\"=>\"\"}}\n```\n", "labels": [], "number": 1071, "updated_at": "2011-05-18 16:02:00", "user": 789801, "closed_at": "2011-05-18 16:02:00", "id": 905015, "title": "Hash.from_xml chokes on empty CDATA", "url": "https://api.github.com/repos/rails/rails/issues/1071", "created_at": "2011-05-16 05:40:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171664", "text": "_Imported from Lighthouse._\nComment by **Bradley Harris** - 2011-04-29 19:11:38 UTC\n\nPull request with patch: https://github.com/rails/rails/pull/349\n", "created_at": "2011-05-16 05:40:56", "user": 789801, "id": 1171664}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6758\nCreated by **vilanye** - 2011-04-29 19:56:18 UTC\n\nUsing link_to with a POST seems to be broken in 3.0.x(tested with 3.0, 3.0.5 through 7).\n\nExample\n\nRoute\n\nresources :avatars do\n  post :add_from_collection, :on=>:member\nend\n\n<%= link_to 'image', add_from_collection_avatar_path(avatar),:method=>:post %>\n\ngives \"No route matches \"/avatars/2/add_from_collection\" \" error\n", "labels": [], "number": 1072, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905017, "title": "POST link_to", "url": "https://api.github.com/repos/rails/rails/issues/1072", "created_at": "2011-05-16 05:41:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6759\nCreated by **Steve** - 2011-04-30 15:09:18 UTC\n\nLooking at the example at: http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag\n\nIt gives the example of doing a select tag. The example is:\n\nselect_tag \"people\", \"<option>David</option>\"\n\nHowever, that does not work. The correct example would be:\n\nselect_tag \"people\", \"<option>David</option>\".html_safe\n\nLighthouse took out the option tags. However, .html_safe needs added to the end.\n", "labels": [], "number": 1073, "updated_at": "2011-05-16 11:17:37", "user": 789801, "closed_at": "2011-05-16 11:17:37", "id": 905019, "title": "API document incorrect", "url": "https://api.github.com/repos/rails/rails/issues/1073", "created_at": "2011-05-16 05:41:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171666", "text": "_Imported from Lighthouse._\nComment by **Jason Noble** - 2011-05-07 22:59:46 UTC\n\nOpened https://github.com/rails/rails/issues/447\n\nFixed with pull request https://github.com/rails/rails/pull/448\n\nThanks for the fix Steve.\n", "created_at": "2011-05-16 05:41:08", "user": 789801, "id": 1171666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171794", "text": "@josevalim This issue can be closed since the fixes are applied on docrails and merged.\n", "created_at": "2011-05-16 06:32:59", "user": 146214, "id": 1171794}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6760\nCreated by **VirtualFunction** - 2011-05-01 01:42:32 UTC\n\nThere's a good chance this is a Ruby bug with the way it deals with process management, but I'm posting it here because Rails is the only place it affects me. Now I know the issue, I can work round it, but it's something caused me a hell of a lot of frustration trying to track this down.\n\nI had issues with Ctrl + C not working in \"rails console\" (it wasn't working), and occasionally I found \"reload!\" and some methods freezing up Ruby. (I had to use kill -9 to terminate things, a normal 'kill' didn't work. I went down alsorts of paths looking at gems, etc. After several hours I realised the issue went away if I booted into Maverick's kernel (2.6.35) instead the natty kernel (2.6.38). After more fiddling I also found that changing my database.yml also got round the issue. It turns out the call to `hostname` in some ERB in my database.yml was the cause after 3-4 hours of hair pulling!\n\nI'm running Ruby trunk, Rails 3.0.7, and Ubuntu Natty.\n\nTo replicate the issue:\n\nOn natty and Rails 3.x, create a new project 'rails new tester'. Edit config/database.yml and put `echo` in config/application.rb, then run \"rails console\". Try and press Ctrl + C once loaded, it probably won't do anything. Loading irb normally and pressing Ctrl + C will work fine.\n\nWhile the loack of Ctrl + C is merely an annoyance, I find that if you use backticks in code that runs after \"reload!\" is called, or use backticks a lot in general, the console seems to lock up very randomly and that kill -9 is needed. This doesn't happen if I revert back to Maverick kernel, 2.6.35.\n\nAs a result, I guess this is a corner case shell-spawning/process/threading issue in Ruby itself, and not Rails. However I only seem to replicate this is Rails for now, hence reporting. It seems the Dependency system in ActiveSupport is what triggers this, as I can't replicate this in irb.\n\nI'm guessing some other people will have report process/threading issues like what I've mentioned above but obviously manifest very differently depending on how their code utilises backticks.\n\nHopefully someone smarter than me will be see what is happening and will be able to pass this upstream to the Ruby devs, explaining to them a way to replicate it without Rails so it can be fixed.\n\nWhen my console instance locks up, if I attach strace to it I get a constant loop of:\n\nsched_yield()                           = 0\n", "labels": [], "number": 1074, "updated_at": "2011-05-16 14:50:30", "user": 789801, "closed_at": "2011-05-16 14:50:30", "id": 905020, "title": "Very obscure issue with Ctrl + C in console not workng and periodic freezes", "url": "https://api.github.com/repos/rails/rails/issues/1074", "created_at": "2011-05-16 05:41:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171668", "text": "_Imported from Lighthouse._\nComment by **Daniel Choi** - 2011-05-04 16:46:13 UTC\n\nI have the same issue after I upgraded to Ubuntu 11.04. I tried reinstalling ruby 1.9.2 via RVM but that didn't fix the problem.\n", "created_at": "2011-05-16 05:41:15", "user": 789801, "id": 1171668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171669", "text": "_Imported from Lighthouse._\nComment by **Daniel Choi** - 2011-05-04 16:48:52 UTC\n\nThere's a similar ticket filed for Ruby 1.9.2\n\nhttp://redmine.ruby-lang.org/issues/4608\n", "created_at": "2011-05-16 05:41:16", "user": 789801, "id": 1171669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173501", "text": "This is not a Rails issue.\n\nP.S I use Ubuntu 11.04 and face the same problem, what works for me is doing Ctrl + C, Ctrl + Z and then fg. Don't ask me why or how but that exits the program as ctrl + C would make it. :)\n", "created_at": "2011-05-16 14:10:38", "user": 14514, "id": 1173501}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6761\nCreated by **Gabriel Mazetto** - 2011-05-02 04:49:47 UTC\n\nUse this two models:\n\nclass Item < ActiveRecord::Base\n  belongs_to :itemable, :polymorphic => true\nend\n\nclass Product < ActiveRecord::Base\n  has_one :item, :as => :itemable, :dependent => destroy\n  accepts_nested_attributes_for :item\nend\n\nnow try to:\n\n@product = Product.new(params[:product])\n@product.build_item(params[:item])\n@product.valid?\n\nAnd you will get a error lacking the \"item.itemable_id\"\n\nSo, build_item is defining the correct itemable_type, but are not dealing with the id... I expect it to save \"course\" first, get it's id and them set it on itemable_id and then save \"item\".\n", "labels": [], "number": 1075, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905021, "title": "has_one polymorphic is creating circular dependency with parent model", "url": "https://api.github.com/repos/rails/rails/issues/1075", "created_at": "2011-05-16 05:41:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171670", "text": "_Imported from Lighthouse._\nComment by **Gabriel Mazetto** - 2011-05-02 04:52:57 UTC\n\nAlso forget to mention that it's rails 3.0.7\n", "created_at": "2011-05-16 05:41:23", "user": 789801, "id": 1171670}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6763\nCreated by **Chris Corbyn** - 2011-05-02 07:43:03 UTC\n\nRails 3.0.7, ruby-1.9.2 (via RVM).  Take the following code:\n\n``` ruby\nclass LoginController < ApplicationController\n    # ... SNIP ... \n\n    def destroy\n        cookies.delete(:secureusertokens)\n        reset_session\n        redirect_to root_url\n    end\nend\n\n```\n\nThis is simply a logout.  It resets the session and deletes any \"remember me\" cookie that may be set.\n\nUnfortunately, while a new session ID is generated, the `Set-Cookie:` header lacks this information (presumably because the session logic has a reference to some stale cookie data, and the controller overwrites it).\n\nThe session key is just `SESSID` in these headers.\n\nIn the request:\n\n```\nCookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO\n```\n\nAnd in the response (no mention of the newly generated session ID):\n\n```\nSet-Cookie: secureusertokens=; path=/; expires=Thu, 01-Jan-1970 00:00:00 GMT\n```\n\nNow if I remove the call to `cookies.delete(...)` in the controller.\n\nIn the request (identical):\n\n```\nCookie: hiddenalerts=site_vrfy_124258; __utmz=REMOVED_INFO.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); elpriv=REMOVED_INFO; SESSID=b39a9a89bb6a39ea91b620fe0da392ed; __utma=REMOVED_INFO; __utmc=REMOVED_INFO; __utmb=REMOVED_INFO\n```\n\nAnd in the response (correct!!):\n\n```\nSet-Cookie: SESSID=50640523cf32b5b0fe8c93eb16aba6dc; path=/; HttpOnly\n```\n\nIt seems that I can either have the new session ID sent, or the \"remember me\" cookie deleted, but not both.  I can work around this by manually sending the new cookie, but it seems like a bug to me ;)\n\nI have my own custom `SessionStore` (MemCache + MySQL), but it does not set these cookies, that happens elsewhere.\n", "labels": [], "number": 1076, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905022, "title": "Deleting a cookie and calling reset_session in the same controller action does not send new session cookie", "url": "https://api.github.com/repos/rails/rails/issues/1076", "created_at": "2011-05-16 05:41:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6764\nCreated by **Andriy Tyurnikov** - 2011-05-02 09:12:30 UTC\n\nInstalling RDoc documentation for activesupport-3.1.0.beta...\nERROR:  While generating documentation for activesupport-3.1.0.beta\n... MESSAGE:   incompatible character encodings: UTF-8 and ASCII-8BIT\n... RDOC args: --op /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/doc/activesupport-3.1.0.beta/rdoc lib --title activesupport-3.1.0.beta Documentation --quiet\n", "labels": [], "number": 1077, "updated_at": "2011-05-18 04:56:19", "user": 789801, "closed_at": "2011-05-16 11:19:49", "id": 905023, "title": "Strange encoding message in master branch", "url": "https://api.github.com/repos/rails/rails/issues/1077", "created_at": "2011-05-16 05:41:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172783", "text": "Unfortunately it is an rdoc issue.\n", "created_at": "2011-05-16 11:19:49", "user": 9582, "id": 1172783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195000", "text": "You need to install latest version of rubygems.\n", "created_at": "2011-05-18 04:56:19", "user": 64319, "id": 1195000}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6765\nCreated by **Quantum** - 2011-05-02 17:35:28 UTC\n\nObjectItem HABTM ObjectGroup and ObjectGroup HABTM ObjectItem. I have the following query that is working correctly:\n\n<code>ObjectItem.find(:all, :include => :object_groups, :conditions => \"object_items.description LIKE '%#{search}%' OR object_groups.description LIKE '%#{search}%'\", :order => 'object_items.created_at DESC')</code>\n\nBut doing query this way is now deprecated so i'm trying to change to this form\n\n<code>ObjectItem.order('object_items.created_at DESC').includes(:object_groups).where(\"object_items.description LIKE '%#{search}%' OR object_groups.description LIKE '%#{search}%'\")</code>\n\nBut i'm getting the following error:\n\n<code>Mysql2::Error: Column 'created_at' in order clause is ambiguous: SELECT DISTINCT object_items.id FROM object_items LEFT OUTER JOIN object_groups_object_items ON object_groups_object_items.object_item_id = object_items.id LEFT OUTER JOIN object_groups ON object_groups.id = object_groups_object_items.object_group_id WHERE (object_items.description LIKE '%%' OR object_groups.description LIKE '%%') ORDER BY object_items.created_at DESC, created_at DESC LIMIT 20 OFFSET 0</code>\n", "labels": [], "number": 1078, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905024, "title": "Column 'created_at' in order clause is ambiguous on queries with include", "url": "https://api.github.com/repos/rails/rails/issues/1078", "created_at": "2011-05-16 05:41:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6766\nCreated by **Geoffrey Hichborn** - 2011-05-02 18:12:38 UTC\n\nCallbacks from before/after_filter on controllers should not be included in the list of available action methods.  These methods should either be marked as protected are otherwise excluded from the list.\n", "labels": [], "number": 1079, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905025, "title": "AbstractController#action_methods includes all filter callback methods defined.", "url": "https://api.github.com/repos/rails/rails/issues/1079", "created_at": "2011-05-16 05:41:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6767\nCreated by **Nghi Pham** - 2011-05-03 03:55:53 UTC\n\nI use PostgreSQL table partitioning. That is, a trigger is to be invoked prior to every INSERT query.\n\nThe trigger looks like this:\n\n```\ncreate or replace function insert_into_partition()\nreturns trigger\nas $$\nbegin\n    ... (insert into child table instead!)\n    return null; -- note this\nend;\n$$\nlanguage plpgsql;\n```\n\nThe problem is: the trigger somehow breaks the \"returning id\" query generated by Rails. As a result, the record is saved correctly into the database, but the ActiveRecord instance cannot retrieve the newly created ID. For example:\n\n```\nperson = Person.new(:fullname => 'John', :age => 21)\nperson.save\n# then, person.id --> nil\n```\n\nThe problem is, as I figured out, due to the \"return null\" statement of the corresponding trigger. However, I suggest that Rails should never return a nil value after a successful save statement. There should be kind of check for the value of id before assigning it back to the ActiveRecord instance.\n\nRegards,\n\nOther information:\nGem: 1.7.2\nRails: 3.0.7\nPg: 0.11.0\nPlatform: Ubuntu 10.04\n", "labels": [], "number": 1080, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905027, "title": "\"Returning ID\" does not work due to trigger", "url": "https://api.github.com/repos/rails/rails/issues/1080", "created_at": "2011-05-16 05:41:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171673", "text": "_Imported from Lighthouse._\nComment by **Kane** - 2011-05-03 14:17:05 UTC\n\ni dont get it. why dont you just change your trigger to return the id?\n\nalso i dont quite get the last part\n\n> However, I suggest that Rails should never return a nil value after a successful save \n> statement. There should be kind of check for the value of id before assigning it back to the \n> ActiveRecord instance.\n\nDoes person.save return true?\nyou think it should return false and probably abort the transaction cause no id is given?\n", "created_at": "2011-05-16 05:41:52", "user": 789801, "id": 1171673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171674", "text": "_Imported from Lighthouse._\nComment by **Nghi Pham** - 2011-05-04 03:29:20 UTC\n\n> > i dont get it. why dont you just change your trigger to return the id?\n> > Yes, \"return true\" in the trigger may somehow solve the problem. However, what I mean here is the stability of Rails: it should always retrieve the proper id after an insert regardless of whether or not \"insert into...returning id\" query is supported properly.\n\nIn this case, it's a fault of PostgreSQL itself that a trigger with \"return null\" breaks the \"returning id\" query (null returned). So, I suggest that Rails should not rely on this unstable feature of PostgreSQL. It should do extra work to make sure \"returning id\" is returning the right id; otherwise, try other way to obtain the newly inserted id\n\n> > Does person.save return true?\n> > you think it should return false and probably abort the transaction cause no id is given?\n> > Yes, I think it should, in the worst case!\n> > However, as I mentioned above, this is a problem of PostgreSQL and Rails should have a workarround for this\n", "created_at": "2011-05-16 05:41:53", "user": 789801, "id": 1171674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171675", "text": "_Imported from Lighthouse._\nComment by **Nghi Pham** - 2011-05-04 03:32:54 UTC\n\n> i dont get it. why dont you just change your trigger to return the id?\n\nYes, \"return true\" in the trigger may somehow solve the problem. However, what I mean here is the stability of Rails: it should always retrieve the proper id after an insert regardless of whether or not \"insert into...returning id\" query is supported properly.\n\nIn this case, it's a fault of PostgreSQL itself that a trigger with \"return null\" breaks the \"returning id\" query (null returned). So, I suggest that Rails should not rely on this unstable feature of PostgreSQL. It should do extra work to make sure \"returning id\" is returning the right id; otherwise, try other way to obtain the newly inserted id\n\n> Does person.save return true? you think it should return false and probably abort the transaction cause no id is given?\n\nYes, I think it should, in the worst case!\nHowever, as I mentioned above, this is a problem of PostgreSQL and Rails should have a workarround for this\n", "created_at": "2011-05-16 05:41:54", "user": 789801, "id": 1171675}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6768\nCreated by **Oleg** - 2011-05-03 15:46:09 UTC\n\nSprokets thing is attached as a last route. So if I have something like this in my routes:\n\n```\nRails.application.routes.draw do\n  get '/' => :render_page, :as => 'pages', :path => '(*page_path)'\nend\n```\n\nMy catch-all route will not allow /assets to map to a proper place. This is what I see in `rake routes`\n\n```\npages GET    /(*page_path)(.:format)  {:controller=>\"pages\", :action=>\"render_page\"}\n             /assets                  {:to=>#<Sprockets::Environment:0x00000100f5d240 ...\n```\n\n/assets route should be defined before any of my application routes.\n", "labels": [], "number": 1081, "updated_at": "2011-05-19 14:24:31", "user": 789801, "closed_at": "2011-05-19 14:24:31", "id": 905029, "title": "/assets route should not be prefixed", "url": "https://api.github.com/repos/rails/rails/issues/1081", "created_at": "2011-05-16 05:42:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171676", "text": "_Imported from Lighthouse._\nComment by **Mike Howard** - 2011-05-07 20:36:24 UTC\n\nThis is Pilot error\n\nrake route dies with 'missing controller' on this route file.\n\nNeed to specify controller for the generic route.\n", "created_at": "2011-05-16 05:42:01", "user": 789801, "id": 1171676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1175869", "text": "Actually I think was a bug, but one that has been fixed in commit 80bf68aa1ba7aea9aded5094e81af05b159ceaa4\n", "created_at": "2011-05-16 17:00:29", "user": 1287, "id": 1175869}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6769\nCreated by **fuse** - 2011-05-04 11:05:38 UTC\n\nWhen a child is marked for destruction, callbacks (like before_destroy) are called but child error is not set in the parent like it is for classic validations.\n\nIt appears in rails 2.3.11, I add a failing test case below for nested_attributes_test.rb.\n", "labels": [], "number": 1082, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905030, "title": "Error doesn't appear in the parent with accepts_nested_attributes on a before_destroy", "url": "https://api.github.com/repos/rails/rails/issues/1082", "created_at": "2011-05-16 05:42:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1171678", "text": "Attachments saved to Gist: http://gist.github.com/971858\n", "created_at": "2011-05-16 05:42:08", "user": 789801, "id": 1171678}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "_Imported from Lighthouse._ Original ticket at: http://rails.lighthouseapp.com/projects/8994/tickets/6770\nCreated by **andres** - 2011-05-04 20:35:33 UTC\n\ngiven an AR class like Facility on ./app/models/facility.rb\n\nand a namespaced module in a library with the same name ./lib/extensions/facility.rb\nwhen invoking the Facility constant class name from console\n\nAS loads first the file under the lib, not the model definition class\n\napp/models/facility.rb\n\nclass Facility < ActiveRecord::Base\nend\n\nlib/extensions/facility.rb\n\nmodule Extensions\n  module Facility\n  end\nend\n\n> rails console\n> Loading development environment (Rails 3.0.6)\n> ruby-1.9.2-p136 :001 > Facility\n> LoadError: Expected /home/andres/Documents/code/sage/lib/extensions/facility.rb to define Facility\n", "labels": [], "number": 1083, "updated_at": "2011-05-21 15:12:45", "user": 789801, "closed_at": "2011-05-21 15:12:45", "id": 905031, "title": "lib nested modules name space clash with models on console (bug or feature?)", "url": "https://api.github.com/repos/rails/rails/issues/1083", "created_at": "2011-05-16 05:42:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Rails,\n\nLet me start off by stating how much I despise the project and everything it stands for.\n\nNevertheless, that's not my issue. You see, I'm quite passionately opposed the manner in which you've chosen to import your tickets from lighthouse. It's ineffective. It's inefficient. It's disrupting. It's also really, really annoying.\n\nI must say I'm not surprised though. It certainly has the \"rails\" feel to it.\n\nThe next time you convince yourselves something like this is a good idea, please, stop. Try something more proactive like getting in touch with the site owners, in this case GitHub, and negotiating a sane solution.\n\nHonestly, how hard would it have been to give them a heads-up and have them disable notifications for rails whilst you make the \"import\".\n\nP.S. I've attached a sample of the feed spamming for reference...\n\n```\nhttp://dl.dropbox.com/u/21084952/rails.png\n```\n\n![http://dl.dropbox.com/u/21084952/rails.png](http://dl.dropbox.com/u/21084952/rails.png)\n", "labels": [], "number": 1084, "updated_at": "2011-05-16 12:43:58", "user": 13998, "closed_at": "2011-05-16 07:43:52", "id": 905182, "title": "Inconsiderate behaviour", "url": "https://api.github.com/repos/rails/rails/issues/1084", "created_at": "2011-05-16 06:45:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172007", "text": "![trollface](http://www.jontanis.com/gallery/d/5039-1/trollface.jpg)\n", "created_at": "2011-05-16 07:43:52", "user": 1979, "id": 1172007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172049", "text": "@pyrotechnick LOL\n", "created_at": "2011-05-16 07:55:51", "user": 207112, "id": 1172049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172097", "text": "Stating the obvious: sounds like a GitHub issue.\n", "created_at": "2011-05-16 08:08:05", "user": 11460, "id": 1172097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172245", "text": "@pyrotechnick you can fix this issue by yourself by clicking \"unwatch\" in the project page.\n", "created_at": "2011-05-16 08:42:30", "user": 9347, "id": 1172245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172297", "text": "Let me start off by addressing a few asides:\n\n> Let me start off by stating how much I despise the project and everything it stands for.\n\nNot gonna win you brownie points. More bees with honey and all that.\n\n> P.S. I've attached a sample of the feed spamming for reference...\n\nPicture no worky for me.\n\nBut at any rate:\n\n> Nevertheless, that's not my issue. You see, I'm quite passionately opposed the manner in which you've chosen to \n> import your tickets from lighthouse. It's ineffective. It's inefficient. It's disrupting. It's also really, really annoying.\n\nJust because the person commenting wasn't very nice about it, doesn't mean he's not right. While I wasn't witness to the issue (I don't follow Rails that closely; I just stumbled in as a bystander tbh) It _sounds_ like over 9000 github issues were created for rails pretty much at once in a way where everyone following the project had to sift through all these notifications in order to hear about the _other_ projects they're interested in. I'm personally following nearly 200 repositories, and if I missed important updates to projects I like because Rails herped the derp when importing their issues, I'd be pretty miffed too. So, shit like\n\n> *trollface* *close*\n\nand:\n\n> you can fix this issue by yourself by clicking \"unwatch\" in the project page.\n\nmakes you guys sound like gigantic jerks that don't seem to understand that this actually _pushes away_ people that might have otherwise taken an interest in Rails. I know I'm less likely to try Rails now after seeing how you guys dealt with this (probably legit) issue.\n\nRemember when RoR was cool? *eyeroll*\n", "created_at": "2011-05-16 08:59:43", "user": 57536, "id": 1172297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172585", "text": "> It sounds like over 9000 github issues were created for rails pretty much at once in a way where everyone following the project had to sift through all these notifications in order to hear about the other projects they're interested in. \n\nYou are way off mark here. The number of issues is around 500-600. Though, the number of feed items might be much more than that, because the import included files, comments etc too.\n\nCan I do a shameless plug in here? :) To solve the feed problem, I wrote a Google Chrome extension for GitHub that I use to good effect - https://chrome.google.com/webstore/detail/jcpkhafkpnaljjbgdgbehajihicjalkc - This might solve your problem if you are following hundreds of repos.\n\nThanks!\n", "created_at": "2011-05-16 10:24:10", "user": 146214, "id": 1172585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172611", "text": "> You are way off mark here. The number of issues is around 500-600.\n\nFWIW, I was making a [Dragonball Z reference.](http://www.urbandictionary.com/define.php?term=over%209000) That said, looks like a pretty nice extension!\n", "created_at": "2011-05-16 10:29:56", "user": 57536, "id": 1172611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172620", "text": "Obviously, I wasn't aware of that term :-) Thanks!\n", "created_at": "2011-05-16 10:32:35", "user": 146214, "id": 1172620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1172632", "text": "Any time, dudesky :D\n", "created_at": "2011-05-16 10:34:47", "user": 57536, "id": 1172632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173051", "text": "Just to insert some facts in here, the ticket import was as a result of the [discussion here](https://github.com/rails/rails/issues/404), not some evil conspiracy of Rails core. People were complaining that the LH tickets were inaccessible and somebody stepped up to fix that.\n\nI have a lot of time for people who are seeking to constructively move this project forward, but the original ticket here was written in quite a ridiculous way. It also was not a bug in Rails, or something we could just \"fix\", hence I closed the ticket.\n", "created_at": "2011-05-16 12:43:58", "user": 1979, "id": 1173051}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm working on HTML5 client side validator plugin and found these unneeded options are making my plugin difficult to implement.\nI believe these default values should not be merged on initializer so that we can know what kind of options were passed to the validator.\n\nThese commits were actually extracted from this patch. https://github.com/rails/rails/issues/702\n", "labels": [], "number": 1085, "updated_at": "2016-01-13 06:46:33", "user": 11493, "closed_at": "2011-05-16 11:23:51", "id": 905283, "title": "cleanups on AMo validator initializers", "url": "https://api.github.com/repos/rails/rails/issues/1085", "created_at": "2011-05-16 07:24:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "According to that issue: https://rails.lighthouseapp.com/projects/8994/tickets/6779-activesupporttimewithzone-in-range-performance-bug\n\nIn Ruby 1.8.7 methods Range#min, Range#max are included from Enumerable. These methods iterate all range, so finding min or max takes a lot of time. In Ruby 1.9.2 it's been fixed by adding own Range#min, Range#max methods.\n\nI've created patch, which is adding own Range#min, Range#max methods only when these methods are included from other module, so it's working with both Ruby versions.\n\nMy patch: https://github.com/piotrdebosz/rails/commit/a7cb0d5f03e75d1d73f88b50744f947e50fd6649\n\nCould you provide some feedback ?\n", "labels": [], "number": 1086, "updated_at": "2011-05-19 08:08:31", "user": 417251, "closed_at": "2011-05-19 08:08:31", "id": 906086, "title": "Range#min, Range#max issue", "url": "https://api.github.com/repos/rails/rails/issues/1086", "created_at": "2011-05-16 11:47:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199977", "text": "Why not pull requesting the patch?\n", "created_at": "2011-05-18 21:28:28", "user": 207112, "id": 1199977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1202145", "text": "Thanks gmile.\n\nI thought pull requests are not viewed in issues, so my mistake.\n\nI've created pull request with this commit so I'm closing this issue. \n", "created_at": "2011-05-19 08:08:31", "user": 417251, "id": 1202145}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I suppose this is obviously the case for suggesting people to use the HTML5 tag helper.\n", "labels": [], "number": 1087, "updated_at": "2014-06-16 21:10:51", "user": 11493, "closed_at": "2011-05-16 14:54:10", "id": 906836, "title": "generate HTML5 number_field tag for integer fields", "url": "https://api.github.com/repos/rails/rails/issues/1087", "created_at": "2011-05-16 14:53:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please find proposed fix for attr_accessor_with_default. It addresses the problem which can be triggered by memcached client library when it tries to marshal an object with non-default attribute value. #refactotum\n", "labels": [], "number": 1088, "updated_at": "2014-06-18 13:00:07", "user": 90239, "closed_at": "2011-05-16 15:19:54", "id": 906887, "title": "Fix for attr_accessor_with_default causing \"singleton can't be dumped\" exception on marshaling", "url": "https://api.github.com/repos/rails/rails/issues/1088", "created_at": "2011-05-16 15:04:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1173964", "text": "Thanks bro but I am deprecating attr_accssor_with_default because it is just much easier for you to implement the method yourself instead.\n", "created_at": "2011-05-16 15:19:55", "user": 9582, "id": 1173964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1177336", "text": "Thanks for the prompt response. Yes, doing such thing by hand makes sense. The bug is in there until old implementation is present though.\n", "created_at": "2011-05-16 17:45:13", "user": 90239, "id": 1177336}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Given this code:\n\n``` ruby\ncontroller = Class.new(ApplicationController) do\n  # ...\nend\n```\n\nI get the following error:\n\n```\n+/Users/david/.rvm/gems/ruby-1.9.2-p180@rspec-dev/gems/activesupport-3.1.0.beta1/lib/active_support/whiny_nil.rb:48:in `method_missing': undefined method `sub' for nil:NilClass (NoMethodError)\n+   from /Users/david/.rvm/gems/ruby-1.9.2-p180@rspec-dev/gems/actionpack-3.1.0.beta1/lib/action_controller/metal/params_wrapper.rb:140:in `_default_wrap_model'\n```\n\nThis is caused by `model_name = self.name.sub(/Controller$/, '').singularize` on https://github.com/rails/rails/blob/8b0262f9535cb9ad2215e5ed672150e2c52cb4b4/actionpack/lib/action_controller/metal/params_wrapper.rb#L143\n", "labels": [], "number": 1089, "updated_at": "2011-05-16 17:33:17", "user": 1075, "closed_at": "2011-05-16 17:33:16", "id": 907994, "title": "3.1: params_wrapper raises error on anynomous controllers", "url": "https://api.github.com/repos/rails/rails/issues/1089", "created_at": "2011-05-16 17:05:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1177055", "text": "Moved to pull request: #1090\n", "created_at": "2011-05-16 17:33:16", "user": 1075, "id": 1177055}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Given this code:\n\n``` ruby\nClass.new(ApplicationController)\n```\n\nI get the following error:\n\n```\n+/Users/david/.rvm/gems/ruby-1.9.2-p180@rspec-dev/gems/activesupport-3.1.0.beta1/lib/active_support/whiny_nil.rb:48:in `method_missing': undefined method `sub' for nil:NilClass (NoMethodError)\n+   from /Users/david/.rvm/gems/ruby-1.9.2-p180@rspec-dev/gems/actionpack-3.1.0.beta1/lib/action_controller/metal/params_wrapper.rb:140:in `_default_wrap_model'\n```\n\nThis is caused by `model_name = self.name.sub(/Controller$/, '').singularize` on https://github.com/rails/rails/blob/8b0262f9535cb9ad2215e5ed672150e2c52cb4b4/actionpack/lib/action_controller/metal/params_wrapper.rb#L143\n\nI've added a failing test case, and will offer up a solution in the next day or so.\n", "labels": [], "number": 1090, "updated_at": "2014-07-03 04:27:03", "user": 1075, "closed_at": "2011-05-17 17:58:13", "id": 908474, "title": "3.1: params_wrapper raises error on anynomous controllers", "url": "https://api.github.com/repos/rails/rails/issues/1090", "created_at": "2011-05-16 17:32:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1177468", "text": "What's the expected behavior here?  Should param wrapping simply be ignored?\n", "created_at": "2011-05-16 17:58:52", "user": 395621, "id": 1177468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1184944", "text": "@alindeman we should just not try to wrap things automatically then. you would have to be explicit.\n", "created_at": "2011-05-16 22:11:34", "user": 9582, "id": 1184944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1190397", "text": "Awesome @dchelimsky, would love to get this merged for beta2.  Adding a comment because GitHub doesn't notify pull request participants simply when new commits are added.\n", "created_at": "2011-05-17 13:33:21", "user": 395621, "id": 1190397}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This adds the convenience of allowing developers to continue to use the simple boolean check on multiple environments. We use parallel_spec which creates test[1..4], breaking our .test? assumptions. This fixes that issue by doing a regexp check on the string.\n\n``` ruby\nRAILS_ENV=test\nRails.env.test? #=> true\n```\n\n``` ruby\nRAILS_ENV=test1\nRails.env.test? #=> true\n```\n", "labels": [], "number": 1091, "updated_at": "2014-07-03 04:27:08", "user": 11707, "closed_at": "2011-05-16 22:09:58", "id": 908907, "title": "ActiveSupport::StringInquirer does a regexp check instead of direct match", "url": "https://api.github.com/repos/rails/rails/issues/1091", "created_at": "2011-05-16 18:31:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1184721", "text": "I would expect `StringInquirer` to return true only when given a full match.  While the example you've provided almost makes sense to me (as the range of environments is likely to be limited), there are many other uses for it other than environment checking.  To get the behaviour you want, to me `Rails.env.starts_with?(\"test\")` is both more explicit and more correct.\n", "created_at": "2011-05-16 22:04:26", "user": 1287, "id": 1184721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1184901", "text": "I agree with @tomafro. It may make sense for Rails.env, but that would totally break all other use cases for StringInquirier.\n", "created_at": "2011-05-16 22:09:58", "user": 9582, "id": 1184901}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When joining a single table in to a query multiple times, it's convenient to be able to access an Arel::Table with a specific alias, without manually creating it. Example:\n\n```\norg1 = Organization.arel_table\norg2 = Organization.arel_table as: \"organizations_user_organizations\"\n```\n", "labels": [], "number": 1092, "updated_at": "2014-07-03 04:27:10", "user": 1284, "closed_at": "2011-05-17 22:25:08", "id": 911776, "title": "Accept options to ActiveRecord::Base#arel_table ", "url": "https://api.github.com/repos/rails/rails/issues/1092", "created_at": "2011-05-16 21:36:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193569", "text": "I want to change the constructor for `Arel::Table`, so I want to keep this private for now.\n", "created_at": "2011-05-17 22:25:33", "user": 3124, "id": 1193569}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using the `CssCompressor` instead of `JavaScriptCompressor` just like Jammit does. \n\n[]'s\nLucas.\n", "labels": [], "number": 1093, "updated_at": "2014-06-12 10:30:12", "user": 80978, "closed_at": "2011-05-17 18:58:26", "id": 912742, "title": "Using the correct CSS compressor for the yui-compressor gem.", "url": "https://api.github.com/repos/rails/rails/issues/1093", "created_at": "2011-05-16 22:23:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1185360", "text": "@josh, I assume this is good, right?\n", "created_at": "2011-05-16 22:24:23", "user": 9582, "id": 1185360}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch resets the postgres search path in the structure.sql file\nprior to dump schema information in order to find schema_migrations\ntable when multiples schemas are dumped.\n\nSee discussion here: https://github.com/rails/rails/issues/945\n", "labels": [], "number": 1094, "updated_at": "2014-06-25 18:03:34", "user": 112913, "closed_at": "2011-12-19 16:34:34", "id": 914120, "title": "rake db:test:clone_structure might fail with multiple schemas in postgres", "url": "https://api.github.com/repos/rails/rails/issues/1094", "created_at": "2011-05-17 02:12:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1414046", "text": "I put here how to reproduce the problem:\n\n<pre>\n$ rails new postgres_clone -d postgresql\n$ cd postgres_clone\n$ rails generate migration my_migration\n</pre>\n\n\nEdit migration and add:\n\n``` ruby\n#db/migrate/20110621212539_my_migration.rb\nclass MyMigration < ActiveRecord::Migration\n  def up\n    connection.execute 'CREATE SCHEMA z_schema;'\n    connection.execute 'CREATE TABLE z_schema.table1 (id integer, name varchar[255]);'\n    connection.execute 'CREATE UNIQUE INDEX unique_table1_name ON z_schema.table1 USING btree (name);'\n  end\nend\n```\n\nAnd then run:\n\n<pre>\n$ rake db:create\n$ rake db:migrate\n$ rake db:test:clone_structure\n\npsql:/home/juan/projects/postgres_clone/db/development_structure.sql:75: ERROR:  relation \"schema_migrations\" does not exist\nLÍNEA 1: INSERT INTO schema_migrations (version) VALUES ('20110621212...\n\n</pre>\n", "created_at": "2011-06-21 21:33:33", "user": 112913, "id": 1414046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1428510", "text": "pg_dump generates a _SET search_path = ..._ statement prior to dump statements for each schema. Schemas are dumped in alphabetical order. If you have an schema with a name alphabetically superior to the schema where _schema_migrations_ table resides, the insertion of schema versions fails.\n", "created_at": "2011-06-23 21:20:38", "user": 112913, "id": 1428510}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fix the \"NameError: uninitialized constant Engine::Car\" raised when try to run test individually (rake test_sqlite3 TEST=test/cases/associations/join_model_test.rb)\n", "labels": [], "number": 1095, "updated_at": "2014-07-03 04:27:22", "user": 160941, "closed_at": "2011-05-17 07:09:23", "id": 914346, "title": "Adding missing require to join_model_test", "url": "https://api.github.com/repos/rails/rails/issues/1095", "created_at": "2011-05-17 03:54:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm getting a failure when run AR tests:\n\n```\n1) Failure:\ntest_preserves_existing_fixture_data(FoxyFixturesTest) [test/cases/fixtures_test.rb:598]:\n<Tue, 03 May 2011> expected but was\n<Mon, 02 May 2011>.\n```\n\nThe strange thing is that this test only fails a little after midnight (I reproduced it today at 1am and last weekend at 2am) and works ok all the rest of the day, it must be related to timezone.\n\nI will try to research and post more details here.\n", "labels": [], "number": 1096, "updated_at": "2011-08-06 18:25:12", "user": 160941, "closed_at": "2011-08-06 18:25:12", "id": 914740, "title": "Failing test in ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/1096", "created_at": "2011-05-17 06:31:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1188695", "text": "Yes, that's because of time zones. I think if both times were using #utc, it'd fix the problem.\n", "created_at": "2011-05-17 08:55:05", "user": 9347, "id": 1188695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304891", "text": "Closed in favour of #1494\n", "created_at": "2011-06-05 15:38:48", "user": 160941, "id": 1304891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636721", "text": "Still happening, looks like the commit referenced in #1494 was reverted\n", "created_at": "2011-07-23 07:27:48", "user": 160941, "id": 1636721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636868", "text": "This commit is not the appropriate solution. That's why it was reverted.\nI know @joshk has something drafted.\n", "created_at": "2011-07-23 09:04:36", "user": 9347, "id": 1636868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1745872", "text": "Closing in favour of #2427\n", "created_at": "2011-08-06 18:25:11", "user": 160941, "id": 1745872}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It is not right to assume that if year is 0 then date is nil.\nIn our example we store dates in BC and 0000-01-01 is a valid date\n\nSo I've added check that for date to be nil year month and mday have to be 0.\n\nI couldnt find a test for this case and wasnt sure where is a good place to add it.\n\nCheers,\nKirill R\n", "labels": [], "number": 1097, "updated_at": "2014-06-24 19:54:30", "user": 12160, "closed_at": "2011-05-19 16:14:01", "id": 914795, "title": "Improved \"treat  0000-00-00 00:00:00 as nil Date\"", "url": "https://api.github.com/repos/rails/rails/issues/1097", "created_at": "2011-05-17 06:42:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189608", "text": "'\"Year zero\" does not exist in the widely used Gregorian calendar or in its predecessor, the Julian calendar. Under those systems, the year 1 BC is followed by AD 1.' http://en.wikipedia.org/wiki/0_(year)\n\nAre you sure that 0000-01-01 is a valid date in BC?\n", "created_at": "2011-05-17 10:10:17", "user": 60129, "id": 1189608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189615", "text": "Sorry, i should explain.\n\nyear 0000  is 1 BC\nPostgres supports BC dates , as in it actually stores it as \"0001-01-01 BC\" which when queried as a date  returns 0000-01-01,  which then rails makes nil\n\nhope it makes sence.\n", "created_at": "2011-05-17 10:13:06", "user": 12160, "id": 1189615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189636", "text": "sorry one more thing\nwhen you save Date.new(-1000,1,1) to rails Postgres stores it as \"1001-01-01  BC\"\nIt does conversion based on fact that year 0 doesnt exist. so first year before 1 AD is 1 BC, hence year 0 is 1 BC\n", "created_at": "2011-05-17 10:18:02", "user": 12160, "id": 1189636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204494", "text": "Seems fine to me,  `Date.new(0,0,0)` raises `ArgumentError: invalid date` but `Date.new(0,1,1)` returns a date.\n\nI'm not sure that `Date` and `DateTime` will do sensible things with BC dates, but seems harmless enough to support the values if the database returns them.\n", "created_at": "2011-05-19 16:13:41", "user": 197, "id": 1204494}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fixed the faling test.\n", "labels": [], "number": 1098, "updated_at": "2014-07-03 04:27:30", "user": 160764, "closed_at": "2011-05-17 12:32:26", "id": 915561, "title": "fixed failing test", "url": "https://api.github.com/repos/rails/rails/issues/1098", "created_at": "2011-05-17 09:51:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1189691", "text": "Envirornment:\nRuby: ruby-1.9.2-p180\nRubyGem Version: 1.6.2\n", "created_at": "2011-05-17 10:29:57", "user": 160764, "id": 1189691}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Specifically, skip redundant work when calling <tt>with_indifferent_access()</tt>, and skip key/value conversions when calling <tt>update()</tt> with another HashWithIndifferentAccess.\n", "labels": [], "number": 1099, "updated_at": "2014-07-03 04:27:32", "user": 7035, "closed_at": "2011-05-17 12:33:54", "id": 915648, "title": "Optimize parts of HashWithIndifferentAccess", "url": "https://api.github.com/repos/rails/rails/issues/1099", "created_at": "2011-05-17 10:08:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed InnerJoinAssociationTest. Need to load essays fixture.\n", "labels": [], "number": 1100, "updated_at": "2014-06-26 01:45:09", "user": 3948, "closed_at": "2011-05-17 17:05:04", "id": 916828, "title": "Fixed InnerJoinAssociationTest. Need to load essays fixture.", "url": "https://api.github.com/repos/rails/rails/issues/1100", "created_at": "2011-05-17 15:00:28", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @chriseppstein\n", "labels": [], "number": 1101, "updated_at": "2011-05-30 07:18:20", "user": 9582, "closed_at": "2011-05-30 07:18:19", "id": 917205, "title": "Sass doesn't need to include Rack middleware if Sprockets is on", "url": "https://api.github.com/repos/rails/rails/issues/1101", "created_at": "2011-05-17 16:22:07", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In I18n, you can pass the `:default` option, comprised of an array with other places to look for the translation, just in case it cannot find it with the given key. The problem is that when using the `html` suffix in the key, `ActionView::Helpers::TranslationHelper.translate` doesn't check any of the default options. It only checks the given key (the first argument).\n\nI propose translate should loop through the array of keys to search (comprised of the given key, and then the default). It can rescue the exception `I18n::MissingTranslationData` to continue looking through the loop until it finds a match. When it finds a match, then it can mark it as `html_safe` if need be. If it doesn't find a match, then it can raise that exception.\n\nProblem, in code:\n\n```\ntemplate.translate('key.that.does.not.exist', :default => 'key.that.exists.html') # returns value of `key.that.exists.html` **but** it is not `html_safe`.\n```\n\nWhat do you think? I can give a shot at doing this, but decided to run by you guys first.\n", "labels": ["actionview"], "number": 1102, "updated_at": "2012-04-30 07:00:18", "user": 25332, "closed_at": "2012-04-30 07:00:18", "id": 917271, "title": "ActionView::Helpers::TranslationHelper.translate should make values html_safe even if they were passed in through the :default hash", "url": "https://api.github.com/repos/rails/rails/issues/1102", "created_at": "2011-05-17 16:33:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2665580", "text": "I'm sorry, I'm not sure I quite understand what you're saying here. Are you reporting two bugs?\n1. `translate` ignores `:default`s if the key ends in `html`\n2. `translate` doesn't `html_safe` the output if the `:default` key ends in `html`\n\nOr is it just one of these? Or did I misinterpret you completely?\n", "created_at": "2011-11-08 09:52:39", "user": 24421, "id": 2665580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2667043", "text": "2 :) But this was posted earlier this year -- not sure if it's been fixed in the later versions of Rails.\n", "created_at": "2011-11-08 12:48:39", "user": 25332, "id": 2667043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2672479", "text": "Can you check if it is fixed in later versions ? Thanks.\n", "created_at": "2011-11-08 19:41:16", "user": 146214, "id": 2672479}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2773443", "text": "Will do\n", "created_at": "2011-11-17 08:27:32", "user": 25332, "id": 2773443}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4794477", "text": "@ramontayag what is the status of this issue. Can I close it?\n", "created_at": "2012-03-29 00:26:26", "user": 47848, "id": 4794477}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "gem install won't help when loading from Bundler\n", "labels": [], "number": 1103, "updated_at": "2011-05-17 17:49:52", "user": 17034, "closed_at": "2011-05-17 17:48:14", "id": 917531, "title": "In database.yml, instruct users to configure Gemfile instead of running 'gem install XYZ'", "url": "https://api.github.com/repos/rails/rails/issues/1103", "created_at": "2011-05-17 17:27:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191926", "text": "Could you please provide a patch? :D\n", "created_at": "2011-05-17 17:48:14", "user": 9582, "id": 1191926}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191935", "text": "I pushed a pull request, but vatrai did the end-to-end\n\nThanks!\n", "created_at": "2011-05-17 17:49:52", "user": 17034, "id": 1191935}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is only partially a joke.\n", "labels": [], "number": 1104, "updated_at": "2014-07-03 04:27:45", "user": 173257, "closed_at": "2011-05-17 18:30:04", "id": 917561, "title": "Update Chicago mayor", "url": "https://api.github.com/repos/rails/rails/issues/1104", "created_at": "2011-05-17 17:33:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191918", "text": "Hahaha. Can we replace that by something more unlikely to change then? :P\n", "created_at": "2011-05-17 17:47:36", "user": 9582, "id": 1191918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192102", "text": "@josevalim Only time will tell! As a Chicagoan, I would be very against changing the city just to pick one with a perhaps more permanent mayor ;)  Not to mention I'd feel horrible for being the guy that got Chicago removed from Rails. But it is, of course, your choice.\n", "created_at": "2011-05-17 18:23:49", "user": 173257, "id": 1192102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192105", "text": "Sorry, hit the wrong button - didn't mean to close.  Wish GH had a cancel button.\n", "created_at": "2011-05-17 18:24:23", "user": 173257, "id": 1192105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192133", "text": "Hahahaha. Ok, you won me over with the good humor.\n", "created_at": "2011-05-17 18:29:37", "user": 9582, "id": 1192133}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`gem install sqlite3` won't work in a bundle based world\n", "labels": [], "number": 1105, "updated_at": "2014-07-02 03:53:22", "user": 17034, "closed_at": "2011-05-17 17:49:23", "id": 917564, "title": "For Issue #1103 - Fix for sqlite3.yml, mysql.yml", "url": "https://api.github.com/repos/rails/rails/issues/1105", "created_at": "2011-05-17 17:34:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191915", "text": "I think instead of removing we can add more lines here. Somebody can use \"--skip-gemfile\" :-)\n", "created_at": "2011-05-17 17:47:24", "user": 3948, "id": 1191915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191934", "text": "@arunagw please provide a pull request then? :D\n", "created_at": "2011-05-17 17:49:40", "user": 9582, "id": 1191934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191967", "text": "@josevalim :D @vatrai is on the role :)\n", "created_at": "2011-05-17 17:58:25", "user": 3948, "id": 1191967}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "instruct user to install using Gem file in database.yml template\n", "labels": [], "number": 1106, "updated_at": "2014-07-03 04:27:50", "user": 111473, "closed_at": "2011-05-17 18:13:57", "id": 917633, "title": "instruct user to install using Gem file in database.yml template ", "url": "https://api.github.com/repos/rails/rails/issues/1106", "created_at": "2011-05-17 17:51:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1191948", "text": "Sorry, I have merged the other pull request already. :( Could you please rebase?\n", "created_at": "2011-05-17 17:53:22", "user": 9582, "id": 1191948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1192021", "text": "@josevalim Commits updated.!\n", "created_at": "2011-05-17 18:09:00", "user": 111473, "id": 1192021}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The following should be valid, but instead blows up:\nUser.count(:group => \"case when id < 100 then '100'\n                                                   else '200' end\")\n\nThis commit:\nhttps://github.com/rails/rails/commit/1681ede605251560c17728d71fe5ed7390dc291d#activerecord/lib/active_record/calculations.rb  \ncalls Array() on the grouping string which ends up creating two group_fields which it then tries to alias.\n\nThe SQL it creates is:\n\nSELECT count(*) AS count_all, case when id < 100 then '100'\n AS case_when_id_100_then_100,  else '200' end AS else_200_end FROM \"users\"  GROUP BY case when id < 100 then '100', else '200' end \n\nThis is a regression from 2.3.5\n", "labels": [], "number": 1107, "updated_at": "2011-05-17 23:28:47", "user": 35221, "closed_at": "2011-05-17 21:34:10", "id": 918361, "title": "ActiveRecord :group option longer than 1 line no longer works in 2.3.11", "url": "https://api.github.com/repos/rails/rails/issues/1107", "created_at": "2011-05-17 20:32:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193117", "text": "Hey I can't reproduce this on master, neither on beta1.\n\nLoading development environment (Rails 3.1.0.beta1)\nruby-1.9.2-p180 :001 >     p Land.count(:group => \"case when id < 2 then '100'\nruby-1.9.2-p180 :002\"> else '200' end\")\n   (0.2ms)  SELECT COUNT(*) AS count_all, case when id < 2 then '100'\nelse '200' end AS case_when_id_2_then_100_else_200_end FROM \"lands\" GROUP BY case when id < 2 then '100'\nelse '200' end\n => {\"100\"=>1, \"200\"=>3} \n\nruby-1.9.2-p180 :006 >  Land.count(:group => \"case when id < 2 then '100' \\n else '200' end\")\n   (0.3ms)  SELECT COUNT(*) AS count_all, case when id < 2 then '100' \n else '200' end AS case_when_id_2_then_100_else_200_end FROM \"lands\" GROUP BY case when id < 2 then '100' \n else '200' end\n => {\"100\"=>1, \"200\"=>3} \n\nWhich version is failing for you? Does your Usel model has any special configuration?\n", "created_at": "2011-05-17 21:09:34", "user": 3359, "id": 1193117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193516", "text": "By bad, this is against 2.3.11.\n", "created_at": "2011-05-17 22:15:06", "user": 35221, "id": 1193516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193767", "text": "Actually, you might check again in Ruby 1.8. It appears that this behavior changes across ruby version.\n\nree-1.8.7-2011.03 :002 > Array(\"aa\\nbb\")\n => [\"aa\\n\", \"bb\"] \nruby-1.9.2-p180 :008 > Array(\"aa\\nbb\")\n => [\"aa\\nbb\"] \n\ngood times.\n", "created_at": "2011-05-17 23:10:42", "user": 35221, "id": 1193767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1193856", "text": "Tried running this agaisnt 1.8.7 and 1.9.2:\n\n Topic.count(:group => \"case when id < 2 then '2'\nelse '3' end\")\n\n1.9.2 output: {\"2\"=>1, \"3\"=>3}\n\n1.8.7 output: <OrderedHash {\"2\"=>1, \"3\"=>3}>\n\nSame results when running: Topic.count(:group => \"case when id < 2 then '2' \\n else '3' end\")\n\nAll this was tested against master.\n", "created_at": "2011-05-17 23:28:47", "user": 3359, "id": 1193856}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "ruby 1.8.7 (2011-02-18 patchlevel 334) [i686-linux], MBARI 0x8770, Ruby Enterprise Edition 2011.03\n\n```\ngem install rails --pre\n```\n\nGem installs fine, but then....\n\n```\nInstalling ri documentation for builder-3.0.0...\nERROR:  While generating documentation for builder-3.0.0\n... MESSAGE:   Unhandled special: Special: type=17, text=\"<!-- HI -->\"\n... RDOC args: --ri --op /home/brian/.rvm/gems/ree-1.8.7-2011.03@railspre/doc/builder-3.0.0/ri --title Builder -- Easy XML Building --main README.rdoc --line-numbers lib CHANGES Rakefile README README.rdoc TAGS doc/releases/builder-1.2.4.rdoc doc/releases/builder-2.0.0.rdoc doc/releases/builder-2.1.1.rdoc --title builder-3.0.0 Documentation --quiet\n```\n\nReported this to the Bundler, but they said they're not interested.  See https://github.com/carlhuda/bundler/issues/1178#comment_1193617\n", "labels": [], "number": 1108, "updated_at": "2011-05-18 15:24:20", "user": 540762, "closed_at": "2011-05-18 15:24:18", "id": 918986, "title": "ERROR: While generating documentation for builder-3.0.0", "url": "https://api.github.com/repos/rails/rails/issues/1108", "created_at": "2011-05-17 22:50:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194550", "text": "It seems like a builder issue though?\n", "created_at": "2011-05-18 02:29:54", "user": 9582, "id": 1194550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197642", "text": "Too tired when I submitted!  Should have gone to builder, not bundler.  Sorry.\n", "created_at": "2011-05-18 15:24:20", "user": 540762, "id": 1197642}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1109, "updated_at": "2014-06-30 12:09:26", "user": 7035, "closed_at": "2011-05-18 22:04:44", "id": 919143, "title": "Use dup to preserve previous behavior", "url": "https://api.github.com/repos/rails/rails/issues/1109", "created_at": "2011-05-17 23:31:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194558", "text": "Tks for the pull request, but the test does not really ensure it is a dup?\n", "created_at": "2011-05-18 02:32:57", "user": 9582, "id": 1194558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199702", "text": "@josevalim I updated the test to make sure it wasn't returning self.\n", "created_at": "2011-05-18 20:51:32", "user": 7035, "id": 1199702}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Arel master still on v2.1.0 \n\nhttps://github.com/rails/arel/blob/master/lib/arel.rb\n", "labels": [], "number": 1110, "updated_at": "2011-05-18 00:06:59", "user": 585634, "closed_at": "2011-05-18 00:06:59", "id": 919161, "title": "Could not find gem 'arel (~> 2.1.1)', required by 'rails', in any of the sources", "url": "https://api.github.com/repos/rails/rails/issues/1110", "created_at": "2011-05-17 23:35:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194045", "text": "Sorry, I forgot to push.\n", "created_at": "2011-05-18 00:06:59", "user": 3124, "id": 1194045}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "counter_cache isn't decremented when a model with a self referential association is destroyed.\nI've attached a test case (https://gist.github.com/977829) that should speak for itself. It fails on 3.0.7 and master.\n", "labels": [], "number": 1111, "updated_at": "2013-06-25 03:48:38", "user": 7714, "closed_at": "2011-12-02 11:39:17", "id": 919516, "title": "counter_cache isn't decremented when it should", "url": "https://api.github.com/repos/rails/rails/issues/1111", "created_at": "2011-05-18 01:27:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218233", "text": "I am not sure, if its a bug. But important thing to note is, for one of the associations even after creating the association counter_cache will be nil. So, in a nutshell, counter_cache isn't getting set in the first place, so it isn't getting decremented either.\n\n``` ruby\nmary = authors(:mary)\ndavid.author_favorites.create(:favorite_author_id => mary.id)\ndavid.author_fans.create(:author_id => mary.id)\n\n# one of them will fail\nassert_equal 1, david.author_fans_count\nassert_equal 1, david.author_favorites_count\n\nmary.destroy\n\ndavid.reload\nassert_equal 0, david.author_fans_count\nassert_equal 0, david.author_favorites_count\n```\n", "created_at": "2011-05-22 19:08:59", "user": 278, "id": 1218233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326686", "text": "That's not true if you reload the object. I've updated the test case (https://github.com/filipegiusti/rails/commits/counter_cache_bug) to include your check and fix another test in latest master.\nIf you wanna try on 3.0.7 do it with the previous version of this gists.\nI believe that's a bug on activerecord, but I'm not sure as I never digged into activerecord. If someone can confirme that to me I will try to fix it.\n", "created_at": "2011-06-08 13:36:47", "user": 7714, "id": 1326686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2336296", "text": "@filipegiusti Still a problem ??? Can you give a try with 3.1.1 and let us know. \n", "created_at": "2011-10-09 12:06:51", "user": 3948, "id": 2336296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2349492", "text": "I will try in the next days.\n", "created_at": "2011-10-10 16:55:20", "user": 7714, "id": 2349492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2957849", "text": "@filipegiusti have you tried this at your end??\n", "created_at": "2011-11-30 10:50:25", "user": 3948, "id": 2957849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2989076", "text": "@filipegiusti  Closing this issue. Please feel free to open issue again if problem stil exists. \n", "created_at": "2011-12-02 11:39:17", "user": 3948, "id": 2989076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7358961", "text": "I digged on this one and it seems the problem happens when the belongs_to is in a model that is destroyed by a :dependent => :destroy trigger, so it a lot more simpler to happen than my previous test case.\nI've updated the test case (https://github.com/filipegiusti/rails/commits/counter_cache_bug) to reflect this.\n\nCan anyone confirm?\n", "created_at": "2012-07-30 02:18:21", "user": 7714, "id": 7358961}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Add test case for inclusion of 'turn' gem in Gemfile unless RUBY_VERSION < 1.9.2.\n\nI have a question for this, why only inclusion of 'turn' gem unless RUBY_VERSION < 1.9.2?\n", "labels": [], "number": 1112, "updated_at": "2014-07-03 04:28:05", "user": 5866, "closed_at": "2011-05-18 04:44:28", "id": 919607, "title": "add test case for turn gem for testunit.", "url": "https://api.github.com/repos/rails/rails/issues/1112", "created_at": "2011-05-18 02:01:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194495", "text": "new commit: ruby-debug19 is used as long as RUBY_VERSION is > \"1.9\".\n", "created_at": "2011-05-18 02:12:30", "user": 5866, "id": 1194495}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194520", "text": "new commit: don't include the 'turn' gem in Gemfile if test unit is skipped.\n", "created_at": "2011-05-18 02:23:20", "user": 5866, "id": 1194520}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The Haml rendering engine returns nothing when a controller streams the view to the client, either via the controller-level `stream` directive or `render :stream => true`. If templating engines need to provide special support for streaming, then the maintainers of Haml, Mustache, etc. should be notified.\n", "labels": [], "number": 1113, "updated_at": "2011-05-18 04:40:12", "user": 4338, "closed_at": "2011-05-18 03:34:31", "id": 919823, "title": "Streaming doesn't work with Haml", "url": "https://api.github.com/repos/rails/rails/issues/1113", "created_at": "2011-05-18 03:28:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194748", "text": "Haml needs to support it. Please report it over their issues tracker?\n", "created_at": "2011-05-18 03:34:31", "user": 9582, "id": 1194748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194849", "text": "Agreed, but I don't know what to tell the Haml guys other than \"support streaming in Rails 3.1\". What API do they need to provide?\n", "created_at": "2011-05-18 04:05:26", "user": 4338, "id": 1194849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1194950", "text": "Basically do this:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_view/template/handlers/erb.rb#L62\n\nAnd ensure stuff works.\n", "created_at": "2011-05-18 04:40:12", "user": 9582, "id": 1194950}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Putting back mysql2 and sqlite3 in database.yml docs. In case people use \"--skip-gemfile\"\n\n/cc @josevalim :-) \n", "labels": [], "number": 1114, "updated_at": "2014-07-03 04:28:11", "user": 3948, "closed_at": "2011-05-18 04:42:57", "id": 919988, "title": "Putting back mysql2 and sqlite3 in database.yml docs. In case people use ", "url": "https://api.github.com/repos/rails/rails/issues/1114", "created_at": "2011-05-18 04:32:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis corrects the ActiveResource gem and tests to work with json (with root) for 3.1.\n\nI will add some further tests for rootless-json within the coming days.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1115, "updated_at": "2014-06-14 13:48:56", "user": 8701, "closed_at": "2011-05-18 13:13:51", "id": 920012, "title": "ActiveResource json updates", "url": "https://api.github.com/repos/rails/rails/issues/1115", "created_at": "2011-05-18 04:39:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195003", "text": "wow, I was working on this right now. I absolutely like this but I don't know if is a good idea include it in 3.1 or wait until 3.2 because it can break some apps that rely in the fact that xml is default now\n", "created_at": "2011-05-18 04:56:58", "user": 160941, "id": 1195003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195018", "text": "You can still use xml by setting `self.format = :xml` in your AR model.\n\nThis change is in line with the AC scaffold generators for 3.1 which default to json, if we did not change this then AC and ARes would not be in sync.\n\nLet me know if you experience any issues and we can get them fixed..\n", "created_at": "2011-05-18 05:00:37", "user": 8701, "id": 1195018}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1116, "updated_at": "2014-06-27 07:42:44", "user": 160941, "closed_at": "2011-05-18 13:04:37", "id": 920143, "title": "Fixing typo in test for turn gem", "url": "https://api.github.com/repos/rails/rails/issues/1116", "created_at": "2011-05-18 05:32:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195703", "text": "Perhaps you should also add a test that checks the gem is included when it should be.\n", "created_at": "2011-05-18 08:25:07", "user": 9347, "id": 1195703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1195912", "text": "See Pull Request #1121\n", "created_at": "2011-05-18 09:14:30", "user": 9347, "id": 1195912}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nI think the title speaks for itself, just some AS missing requires.\n\nEnjoy,\n\nJ\n", "labels": [], "number": 1117, "updated_at": "2014-07-03 04:28:22", "user": 8701, "closed_at": "2011-05-18 13:08:13", "id": 920147, "title": "Add some missing requires for AS core_ext/numeric/time. Closes #1038", "url": "https://api.github.com/repos/rails/rails/issues/1117", "created_at": "2011-05-18 05:33:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I believe this is as useful as `ActiveRecord::Base.logger = Logger.new(STDERR)` thing (yes, I really love that too!)\n", "labels": [], "number": 1118, "updated_at": "2014-06-30 12:24:52", "user": 11493, "closed_at": "2011-05-19 16:05:15", "id": 920611, "title": "always enable `pp` on the Rails console", "url": "https://api.github.com/repos/rails/rails/issues/1118", "created_at": "2011-05-18 07:59:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197048", "text": "I'm not seeing the issue with Rails 3.0.7.\n\n~/Projects $ rails -v\nRails 3.0.7\n~/Projects $ rails new blah\n      create  \n      create  README\n      create  Rakefile\n      create  config.ru\n[...]\n\n~/Projects $ cd blah\n~/Projects/blah $ bundle\nFetching source index for http://rubygems.org/\nUsing rake (0.8.7) \nUsing abstract (1.0.0) \nUsing activesupport (3.0.7) \n[...]\n\n~/Projects/blah $ rails c\nLoading development environment (Rails 3.0.7)\nruby-1.9.2-p180 :001 > pp [1,2,3]\n[1, 2, 3]\n => [1, 2, 3] \nruby-1.9.2-p180 :002 > require 'pp'\n => nil \nruby-1.9.2-p180 :003 > \n", "created_at": "2011-05-18 13:57:50", "user": 22501, "id": 1197048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197284", "text": "No, that's because you're on Ruby 1.9.2.\n1.8.7 does not automatically require 'pp' on irb, and I'm not sure for other Ruby implementations.\n", "created_at": "2011-05-18 14:33:30", "user": 11493, "id": 1197284}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ActiveSupport::Duration` instances, such as `30.minutes` or `5.hours`, are not properly quoted by `ActiveRecord::Base.connection.quote()`.\nInstead of `to_s`  was used `to_yaml`\nThis test will fail on 2.3.11 and master, but pass on 3.0.5 because  https://github.com/rails/rails/commit/7e4e1f0ca5722008b288224221405eba486345c1\nin this commit `to_yaml` was changed to `to_s`\nBut in https://github.com/rails/rails/commit/fd1cf13f743ac7ba71f19dff6d8e22f5ac7bc603 was changed back to `to_yaml`.\nI not sure which commit is right.\n\nOn my opinion, 30.minutes should be quoted as Numeric, because 30.minutes is a Numeric. \nBut\nruby-1.9.2-p0 > Numeric === 30\n => true \nruby-1.9.2-p0 > Numeric === 30.minutes\n => false \nruby-1.9.2-p0 > ActiveSupport::Duration === 30.minutes\n => true \nruby-1.9.2-p0 > 30.minutes.class\n => Fixnum \nruby-1.9.2-p0 > 30.minutes.is_a?(Numeric)\n => true\n\nCan someone explain me the `===` operator ?\n", "labels": ["activerecord"], "number": 1119, "updated_at": "2014-06-26 15:28:28", "user": 142554, "closed_at": "2012-07-05 11:55:57", "id": 920649, "title": "Test for quoting ActiveSupport::Duration instances.", "url": "https://api.github.com/repos/rails/rails/issues/1119", "created_at": "2011-05-18 08:11:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2665621", "text": "The `Object#===` operator is equal to the `Object#==` operator, but is usually overridden by several objects since it's used in `case` statements. When you call\n\n``` ruby\ncase 'foobar'\nwhen /foo/\n  puts 'Foo'\nwhen /bar/\n  puts 'BAR!'\nend\n```\n\nRuby calls `'foobar' === /foo/` and `'foobar' === /bar/` (or vice-versa, I'm not quite sure). Thanks to the `===` operator being overridden, this actually works.\n", "created_at": "2011-11-08 09:58:01", "user": 24421, "id": 2665621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2993355", "text": "Just wondering is this still required???  Not sure about the orignal thing.\n", "created_at": "2011-12-02 17:55:49", "user": 3948, "id": 2993355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3080010", "text": "Yes, test is failed.\n", "created_at": "2011-12-09 14:54:19", "user": 142554, "id": 3080010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399322", "text": "Just a note, @lysenko, this can no longer be automatically merged. I can't pull it in, but patches that are current are much easier to do so with. ;)\n", "created_at": "2012-04-28 19:11:33", "user": 27786, "id": 5399322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5413621", "text": "@steveklabnik:\nSure, it can't, after 5 months:)\nI will check if it still needed and will update pull request.\n", "created_at": "2012-04-30 08:36:26", "user": 142554, "id": 5413621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5417605", "text": "Thank you! :D\n", "created_at": "2012-04-30 13:48:53", "user": 27786, "id": 5417605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5492446", "text": "There are broken tests.  ./activerecord/test/cases/quoting_test.rb\n", "created_at": "2012-05-03 17:00:05", "user": 2130, "id": 5492446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6765706", "text": "@lysenko any news with this pr?\n", "created_at": "2012-07-04 18:40:27", "user": 840464, "id": 6765706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6776942", "text": "Closed by 6c9c50c\n", "created_at": "2012-07-05 11:55:57", "user": 47848, "id": 6776942}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This code was already on lighthouse. No one pay attention, so I make this pull request.\nGithub issue #925\n", "labels": [], "number": 1120, "updated_at": "2014-06-26 15:40:29", "user": 142554, "closed_at": "2011-07-07 03:13:24", "id": 920747, "title": "collection_singular_ids ignores association :include option", "url": "https://api.github.com/repos/rails/rails/issues/1120", "created_at": "2011-05-18 08:42:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196984", "text": "Original Lighthouse ticket is https://rails.lighthouseapp.com/projects/8994/tickets/6569-collection_singular_ids-ignores-association-include-option\n", "created_at": "2011-05-18 13:46:04", "user": 22501, "id": 1196984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514735", "text": "Can you squash both commits into one?, thanks\n", "created_at": "2011-07-06 19:59:06", "user": 52642, "id": 1514735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515087", "text": "Gist is good enough https://gist.github.com/1068249 or should I create another pull request?\nSantiago, thanks for response, can you also look at this one https://github.com/rails/rails/pull/1119, please. I found a bug, but I can't find right solution or help from anyone.\n\nThanks\n", "created_at": "2011-07-06 20:36:31", "user": 142554, "id": 1515087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515269", "text": "you can just push -f to your collection_singular_ids branch and github will do the right thing\n", "created_at": "2011-07-06 20:54:14", "user": 52642, "id": 1515269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515386", "text": "thanks, github is really smart\n", "created_at": "2011-07-06 21:08:03", "user": 142554, "id": 1515386}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1520110", "text": "@lysenko should this be backported to 3-1-stable?\n", "created_at": "2011-07-07 03:13:59", "user": 52642, "id": 1520110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1525782", "text": "@spastorino it should not, I think this patch can wait for next release.\n", "created_at": "2011-07-07 20:07:18", "user": 142554, "id": 1525782}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This follows [this pull request](https://github.com/rails/rails/pull/1116#issuecomment-1195703).\n", "labels": [], "number": 1121, "updated_at": "2014-07-03 04:28:34", "user": 9347, "closed_at": "2011-05-18 09:46:57", "id": 920878, "title": "make sure we add the dependency to turn if required", "url": "https://api.github.com/repos/rails/rails/issues/1121", "created_at": "2011-05-18 09:14:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196023", "text": "This is duplicate of https://github.com/rails/rails/commit/5df9d0081bd9e624a143992c4f495bf80c96d7e5\n", "created_at": "2011-05-18 09:45:10", "user": 5866, "id": 1196023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196033", "text": "My bad, I didn't see it.\n", "created_at": "2011-05-18 09:46:57", "user": 9347, "id": 1196033}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Generally, we should use JOIN clause for joining tables unless the DBMS is a legacy DB like Oracle 8.\n\nAlso, I found there were some unused tables in the FROM clause in Postgres schema_queries that probably made the query slow. df13f55d757dc8af30391b8d15af2c2d04f26aa4\n", "labels": [], "number": 1122, "updated_at": "2014-07-03 04:28:37", "user": 11493, "closed_at": "2011-05-18 16:05:25", "id": 921115, "title": "improvements on PostgreSQL schema queries", "url": "https://api.github.com/repos/rails/rails/issues/1122", "created_at": "2011-05-18 10:09:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I believe this is more modern style.\n", "labels": [], "number": 1123, "updated_at": "2014-07-03 01:52:07", "user": 11493, "closed_at": "2011-05-18 13:10:18", "id": 921451, "title": "change `for ... in` in the generator templates to Enumerator#each", "url": "https://api.github.com/repos/rails/rails/issues/1123", "created_at": "2011-05-18 12:12:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed tons of warnings in railties/lib and test.\n", "labels": [], "number": 1124, "updated_at": "2014-07-03 04:28:45", "user": 11493, "closed_at": "2011-05-18 14:27:26", "id": 921477, "title": "Fix railties warnings", "url": "https://api.github.com/repos/rails/rails/issues/1124", "created_at": "2011-05-18 12:18:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1196787", "text": "Hey @amatsuda, could you please rebase?\n", "created_at": "2011-05-18 13:07:42", "user": 9582, "id": 1196787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197241", "text": "OK. Done.\n", "created_at": "2011-05-18 14:25:49", "user": 11493, "id": 1197241}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that in Rails 3.1 beta 1, you can do things like this:\n\n```\n# A.coffee\nfoo = 'bar'\n\n# B.coffee\nalert foo\n```\n\nThat's kind of scary. The way CoffeeScript does scoping assumes that different files are isolated from one another, with specific resources shared by exporting to `window` (or other global objects). My first thought was that Sprockets was concatenating the .coffee files before compiling them, but no, there's no wrapper at all: `foo` is in the global scope.\n\nI'm having a hard time tracking down whether this is a Rails issue, a Sprockets issue, or a Tilt issue; the `ruby-coffee-script` gem definitely has `bare = false` as its default. Where is it getting overridden, and why?\n", "labels": [], "number": 1125, "updated_at": "2011-10-13 07:54:50", "user": 224895, "closed_at": "2011-05-19 13:57:09", "id": 922002, "title": "CoffeeScript files are bare", "url": "https://api.github.com/repos/rails/rails/issues/1125", "created_at": "2011-05-18 14:26:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197548", "text": "@josh, @dhh, are we concatenating before compiling it to JS? Seems to be more sane to compile then concat?\n", "created_at": "2011-05-18 15:08:58", "user": 9582, "id": 1197548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197578", "text": "Confirmed this as a bug. We'll get it fixed.\n", "created_at": "2011-05-18 15:14:24", "user": 2741, "id": 1197578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197592", "text": "Assigned to milestone 3.1.\n", "created_at": "2011-05-18 15:15:53", "user": 9582, "id": 1197592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197703", "text": "Awesome. Won't have to warn folks about this in my talk in 2 minutes, then. :)\n\nOn May 18, 2011, at 11:15 AM, josevalimreply@reply.github.com wrote:\n\n> Assigned to milestone 3.1.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1125#comment_1197592\n", "created_at": "2011-05-18 15:33:43", "user": 224895, "id": 1197703}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203529", "text": "sstephenson/sprockets@1f87cc9e1c0ceb25b065bd4f94387451b27b2e18\n", "created_at": "2011-05-19 13:57:09", "user": 137, "id": 1203529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239666", "text": "might be nice to have an option to force true, something like\n\n//= require initialize, :bare => true\n//= require jquery\n//...\n", "created_at": "2011-05-26 01:58:02", "user": 52154, "id": 1239666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239737", "text": "Hmm, I see a problem with that approach: If one file requires `initialize` with `bare` enabled, and another requires `initialize` with `bare` disabled... what happens?\n\nTo be clear: The only use case for `bare` is for users who fully understand CoffeeScript scoping to shave off a few bytes. And even then, the optimization is so small (less than a dozen minified bytes per file) that it's hard to see it as significant. Users who really care that much about byte-shaving would want to hand-optimize the JS generated by CoffeeScript anyway.\n\nFWIW, here's how to enable `bare` globally (not recommended): http://stackoverflow.com/questions/6099342/how-can-i-use-option-bare-in-rails-3-1-for-coffeescript/6099872#6099872\n", "created_at": "2011-05-26 02:25:32", "user": 224895, "id": 1239737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239880", "text": "ok, that makes sense, thanks for the info on globally setting bare\ndon't want to pollute the issues section with my questions, but if you have time can you check out the question I just posted on stack overflow: http://stackoverflow.com/questions/6133235/rails-3-1-rc1-javascript-and-asset-pipeline\n\nThanks\n", "created_at": "2011-05-26 03:03:44", "user": 52154, "id": 1239880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329545", "text": "If you have coffeescript classes in separate files that reference each other it would be nice to have them all live in a single closure. Otherwise the classes available in the scope of the class declaration depend on the order in which you required the files.\n\nMaybe there could be a `#= namespace` option that would put files into the same closure?\n", "created_at": "2011-06-08 20:17:04", "user": 28565, "id": 1329545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329569", "text": "Max, I'm not sure what you mean by \"otherwise the classes available in the scope of the class declaration depend on the order in which you required the files\"... even if they're declared in the same file, the order still matters:\n\n```\nclass A\n  console.log B # undefined\n\nclass B\n```\n", "created_at": "2011-06-08 20:22:17", "user": 224895, "id": 1329569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329570", "text": "@maxhawkins\n\n> If you have coffeescript classes in separate files that reference each other it would be nice to have them all live in a single closure.\n\n```\nwindow.Foo = class Foo\n```\n\n> Otherwise the classes available in the scope of the class declaration depend on the order in which you required the files.\n\nHence `#= require`\n\n```\n#= require foo\nwindow.Bar = Bar extends Foo\n```\n", "created_at": "2011-06-08 20:22:19", "user": 137, "id": 1329570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329605", "text": "Ah, you're both right. I had a typo in my code.\n\nSorry to pollute this space.\n", "created_at": "2011-06-08 20:29:33", "user": 28565, "id": 1329605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2165436", "text": "Defaulting to wrapping every file in its own closure is the single worst default I have ever seen in a language.  When I am programming in Ruby, and I write \"class Foo\", I expect to be able to access Foo everywhere.  That is what makes it useful.  However, with a closure around my code, in Coffeescript I have to write \"class window.Foo\".  It's ugly, it's non-semantic, it is an obnoxious mental speed bump.  Or, after the definition, window.Foo = Foo.  Now I'm repeating myself.\n\nI have not seen a javascript library worth anything that pollutes the global namespace with what should be private variables.  Anyone who knows javascript and wants to keep their code tight, just wraps their code in a closure.  (And usually setting a top-level object to what the closure returns.)  \n\nWhat this default is doing is essentially pandering to neophytes who do not know javascript, and forcing everyone else to write non-semantic or repetitive code.  I expect better from something as awesome as Coffeescript.\n", "created_at": "2011-09-22 08:52:30", "user": 104690, "id": 2165436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2351659", "text": "Is there an easy way around this? I want to split my code into seperate files, but with this behaviour i need to add every class that has its own file to window.\n\nHope there is a simpler solution.\n", "created_at": "2011-10-10 20:15:52", "user": 279045, "id": 2351659}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2381014", "text": "@OdaniaIT The easy way around this is... to add every class that has its own file to `window`. Seriously, this is the norm in JavaScript—look at the jQuery source, for instance. Every file is wrapped in a closure so that it can have its own local variables. CoffeeScript just automates this ubiquitous pattern.\n\nHere's the good news: `this` (i.e. `@`) points to `window` from that closure, which means that instead of\n\n```\nclass window.Foo\n```\n\nyou can just write\n\n```\nclass @Foo\n```\n\nOnce you've defined it, you can just refer to the class as `Foo` from anywhere in your application.\n", "created_at": "2011-10-12 16:08:37", "user": 224895, "id": 2381014}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2392161", "text": "Thanks for the reply. I didn't know that i can write @Foo, makes it a bit simpler.\n", "created_at": "2011-10-13 07:54:50", "user": 279045, "id": 2392161}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1126, "updated_at": "2014-07-03 04:28:54", "user": 4912, "closed_at": "2011-05-18 15:53:45", "id": 922350, "title": "Update Rack::Mount to 0.8.1", "url": "https://api.github.com/repos/rails/rails/issues/1126", "created_at": "2011-05-18 15:34:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I get the following error on a fresh Rails 3.1.0.beta1 app.\n\n```\n/Users/michaelprins/.rvm/gems/ruby-1.9.2-p180@corprit/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:37:in `block (2 levels) in <class:Railtie>': undefined method `context' for #<Sprockets::Environment:0x00000100f645e0> (NoMethodError)\n```\n\nThe version of the Sprockets gem it installed was 2.0.0.beta.3\n\nYou can find a full stack trace here: https://gist.github.com/978816\n", "labels": [], "number": 1127, "updated_at": "2011-05-18 15:52:07", "user": 292062, "closed_at": "2011-05-18 15:52:07", "id": 922389, "title": "rails server failing due to Sprockets on a fresh 3.1.0.beta1 install", "url": "https://api.github.com/repos/rails/rails/issues/1127", "created_at": "2011-05-18 15:41:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197799", "text": "See https://github.com/rails/rails/issues/453\n", "created_at": "2011-05-18 15:49:58", "user": 9347, "id": 1197799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197818", "text": "Yes, you need to have rails master or keep using 2.0.0.beta.1.\n", "created_at": "2011-05-18 15:52:07", "user": 9582, "id": 1197818}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Since the move from Lighthouse to GitHub Issues, Issues have not been enabled on [the arel repository](https://github.com/rails/arel). I think it would be a good idea to have them to separate issues out from arel and rails.\n", "labels": [], "number": 1128, "updated_at": "2011-05-18 16:05:24", "user": 294954, "closed_at": "2011-05-18 16:05:24", "id": 922442, "title": "Add Issues to Arel repository", "url": "https://api.github.com/repos/rails/rails/issues/1128", "created_at": "2011-05-18 15:51:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1197897", "text": "Done.\n", "created_at": "2011-05-18 16:05:24", "user": 2741, "id": 1197897}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm sorry there was a tiny formatting mistake in my previous commit 486a890505e268ddbc37edf7f1b32fbebd337fc1\n", "labels": [], "number": 1129, "updated_at": "2014-07-03 04:29:00", "user": 11493, "closed_at": "2011-05-18 16:34:57", "id": 922652, "title": "on.upcase!", "url": "https://api.github.com/repos/rails/rails/issues/1129", "created_at": "2011-05-18 16:34:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With this patch it is now possible to use CoffeeScript to respond to JS requests. \n", "labels": [], "number": 1130, "updated_at": "2014-06-13 09:04:49", "user": 3528, "closed_at": "2011-05-18 19:52:26", "id": 923587, "title": "Added ability to use foo.js.coffee files in views.", "url": "https://api.github.com/repos/rails/rails/issues/1130", "created_at": "2011-05-18 19:43:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199296", "text": "That's a very well done pull request, thanks! But we need to handle this pull request in another way and probably for Rails 3.2. Maybe by partially supporting tilt, although they lack proper encoding support and other Rails features.\n", "created_at": "2011-05-18 19:52:26", "user": 9582, "id": 1199296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199331", "text": "Mind if I ask why another way? Not sure I understand why we this isn't the correct way to implement this.\n", "created_at": "2011-05-18 19:58:07", "user": 3528, "id": 1199331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199374", "text": "I can understand why refactoring the rendering engine to use Tilt would be a good idea. I just think this is a missing piece of functionality in 3.1 that people will be complaining about when it's released. I know this was one of the first things I tried to do in the beta and was disappointed to learn I couldn't use CoffeeScript instead of vanilla JS for my Ajax requests.\n", "created_at": "2011-05-18 20:04:25", "user": 3528, "id": 1199374}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199384", "text": "Sure. If we add this as it is, we would be just duplicating code. And code duplication would easily lead for difference of behaviors from coffee being served from sprockets than rails. We should not have two code paths for this, but only one.\n", "created_at": "2011-05-18 20:05:09", "user": 9582, "id": 1199384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199416", "text": "I totally agree with your disappointment but it should be solved without duplicating the same JS preprocessor code that is already inside sprockets/tilt.\n", "created_at": "2011-05-18 20:09:23", "user": 9582, "id": 1199416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199466", "text": "Pretty disappointed with this one getting closed - the majority of the javascript in my app related to responding to ajax requests and this prevents me from using coffeescript for that. Please reconsider!\n", "created_at": "2011-05-18 20:18:34", "user": 324380, "id": 1199466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1199590", "text": "That would easily work as a coffeescript-rails plugin.\n", "created_at": "2011-05-18 20:35:37", "user": 9582, "id": 1199590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210807", "text": "Would love to see this behavior in Rails 3.1, can't this be solved using just one code path then?\n", "created_at": "2011-05-20 16:02:37", "user": 4585, "id": 1210807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212310", "text": "+1 For this becoming part of Rails 3.1. Having CoffeeScript as the default and yet having to respond to ajax using vanilla JavaScript feels broken to me.\n", "created_at": "2011-05-20 20:42:54", "user": 64114, "id": 1212310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212334", "text": "It's available as gem: https://github.com/markbates/coffeebeans\n", "created_at": "2011-05-20 20:48:05", "user": 160941, "id": 1212334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215835", "text": "Regardless when and how this missing piece of functionality gets implemented in Rails itself, I think that we all can be in agreement that it should. While we wait for the final implementation we can use the available gem and then, hopefully easily, refactor whatever code we write now to use whatever solution the Rails team finally put in place.\n", "created_at": "2011-05-21 23:01:19", "user": 201944, "id": 1215835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216285", "text": "Once we have a fast, clean implementation, it's welcome in core. 3.2 is a more likely target, though.\n", "created_at": "2011-05-22 04:02:27", "user": 2741, "id": 1216285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248951", "text": "Just wanted to put my vote here for this functionality. I tried to use coffeescript in an xhr request but it didn't work. Great that it'll probably be in 3.2 so for now I'll go grab the gem by markbates. Thanks!\n", "created_at": "2011-05-27 13:09:18", "user": 383250, "id": 1248951}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1539676", "text": "As I understand, this approach compiles CoffeeScript every time even in production. So here is alternative as a gem [coffee-views](https://github.com/yury/coffee-views).\n", "created_at": "2011-07-09 19:53:08", "user": 5250, "id": 1539676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1539701", "text": "This is almost the same as coffee beans. Why not merge these fixes into that gem so there's only one? I'll gladly pull the changes in. There are a lot of people using coffee beans already and they'd probably really like the changes. \n", "created_at": "2011-07-09 20:01:16", "user": 3528, "id": 1539701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1539714", "text": "@markbates I can prepare pull request, if you ok with <%=%> changes.\n", "created_at": "2011-07-09 20:03:50", "user": 5250, "id": 1539714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1539773", "text": "Can you explain them a bit more? Not sure I really understand what they do? Do they wrap everything in the j method?\n", "created_at": "2011-07-09 20:23:28", "user": 3528, "id": 1539773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1791977", "text": "Just ran into this myself, putting together the next version of Rails for Zombies.\n\nIf you're going to recommend people use CoffeeScript in their new Rails applications, then you should allow them to use JUST CoffeeScript in their Rails applications.\n\nI understand there may be architectural issues, I'm just going to have to teach all new Rails developers to use Mark Bates's Gem.  \n", "created_at": "2011-08-12 14:55:02", "user": 2618, "id": 1791977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1792050", "text": "Can you include the coffeebeans gem in the Gemfile by default?\n", "created_at": "2011-08-12 15:04:55", "user": 3648, "id": 1792050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1792152", "text": "The HTML5 Boilerplate based application template adds this mark's gem to\nthe GemFile (commented) when creating a new rails 3.1 app. [shameless plug\n:)]\n\nhttps://github.com/russfrisch/h5bp-rails/blob/master/h5bp.rb#L65\n\nHopefully this functionality makes it into rails core soon. Like Gregg, I\nagree that if CoffeeScript is the default, it should be able to be used\neverywhere in place of JavaScript.\n\nOn Fri, Aug 12, 2011 at 11:04 AM, joefiorini <\nreply@reply.github.com>wrote:\n\n> Can you include the coffeebeans gem in the Gemfile by default?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/1130#issuecomment-1792050\n", "created_at": "2011-08-12 15:16:25", "user": 64114, "id": 1792152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1810606", "text": "Now this supported in Rails 3.1 through the [coffee-rails](https://github.com/rails/coffee-rails) plugin (included by default in Gemfle)\n", "created_at": "2011-08-15 20:24:31", "user": 160941, "id": 1810606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1811112", "text": "Glad this is somewhat included in rails 3.1. I would love to have seen this touted as part ofbthe last RC. I don't recall seeing that change in the list. \n", "created_at": "2011-08-15 21:07:59", "user": 3528, "id": 1811112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3461565", "text": "rather than allow a `coffescript_for` tag by default, why not have a `/assets/javascripts/model/action.coffee.erb` so that it can be precompiled into a `.js.erb` file. if it's in assets then it can be added to the head of the view automatically.\n", "created_at": "2012-01-12 11:16:23", "user": 112134, "id": 3461565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10477491", "text": "I just faced this problem today. I have also the opinion of including coffeebeans in Gemfile by default, or telling about this problem in the docs instead.\n", "created_at": "2012-11-17 18:57:14", "user": 1402642, "id": 10477491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/20849656", "text": "Despite support for Coffeescript view templates we still have a problem whereby `.js.coffee` templates are preprocessed with ERB when intuition says they shouldn’t be; and an error is thrown for `.js.coffee.erb` templates. This is being discussed on rails/coffee-rails#13.\n", "created_at": "2013-07-11 23:25:20", "user": 145600, "id": 20849656}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis is a fixed patch for #1058.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1131, "updated_at": "2014-06-18 05:25:45", "user": 8701, "closed_at": "2011-05-18 19:55:35", "id": 923673, "title": "Attributes with :string type should not be given the type passed in model. Closes #1058.", "url": "https://api.github.com/repos/rails/rails/issues/1131", "created_at": "2011-05-18 19:54:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Updated the ARes changelog.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1132, "updated_at": "2014-06-15 21:35:05", "user": 8701, "closed_at": "2011-05-18 19:56:27", "id": 923680, "title": "Updated the ActiveResource changelog", "url": "https://api.github.com/repos/rails/rails/issues/1132", "created_at": "2011-05-18 19:55:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1133, "updated_at": "2014-06-27 17:27:33", "user": 8701, "closed_at": "2011-05-18 20:03:37", "id": 923717, "title": "Fix misspelling of 'lambda'. Closes #987", "url": "https://api.github.com/repos/rails/rails/issues/1133", "created_at": "2011-05-18 20:01:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\nSass::SyntaxError in Main/cockpit#index\n\nShowing /Users/edison/Sites/beta.foco/app/views/layouts/application.html.haml where line #8 raised:\n\nInvalid CSS after \"...: alpha(opacity\": expected comma, was \":0);\".\n```\n\nIm using the lastest gems with Rails 3.1\nhttps://gist.github.com/980015\n", "labels": [], "number": 1134, "updated_at": "2011-05-19 02:07:02", "user": 149353, "closed_at": "2011-05-19 02:02:04", "id": 925102, "title": "Sass::SyntaxError when using CSS \"alpha-opacity\" property", "url": "https://api.github.com/repos/rails/rails/issues/1134", "created_at": "2011-05-19 01:59:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1201145", "text": "Seems like a SASS bug? Could you please move it over to their issues tracker?\n", "created_at": "2011-05-19 02:02:04", "user": 9582, "id": 1201145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1201163", "text": "Moved: https://github.com/nex3/sass/issues/88\n", "created_at": "2011-05-19 02:07:02", "user": 149353, "id": 1201163}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As per changes  in \n\nhttps://github.com/rails/rails/commit/22ed6cb798b476f63e5d5b84cb28e054c4f1870e\n", "labels": [], "number": 1135, "updated_at": "2014-07-03 04:29:18", "user": 3948, "closed_at": "2011-05-19 11:48:13", "id": 925300, "title": "README updated for for => each", "url": "https://api.github.com/repos/rails/rails/issues/1135", "created_at": "2011-05-19 03:31:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changes is examples.\n", "labels": [], "number": 1136, "updated_at": "2014-07-03 04:29:21", "user": 3948, "closed_at": "2011-05-19 11:51:15", "id": 925339, "title": "Actionmailer readme", "url": "https://api.github.com/repos/rails/rails/issues/1136", "created_at": "2011-05-19 03:48:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Little change in activemodel/lib/active_model/observing.rb\n", "labels": [], "number": 1137, "updated_at": "2014-06-26 09:57:54", "user": 160941, "closed_at": "2011-05-19 12:02:13", "id": 925651, "title": "Prefer 'each' instead of 'for in'", "url": "https://api.github.com/repos/rails/rails/issues/1137", "created_at": "2011-05-19 06:41:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "According to that issue: https://rails.lighthouseapp.com/projects/8994/tickets/6779-activesupporttimewithzone-in-range-performance-bug\n\nIn Ruby 1.8.7 methods Range#min, Range#max are included from Enumerable. These methods iterate all range, so finding min or max takes a lot of time. In Ruby 1.9.2 it's been fixed by adding own Range#min, Range#max methods.\n\nI've created patch, which is adding own Range#min, Range#max methods only when these methods are included from other module, so it's working with both Ruby versions.\n", "labels": [], "number": 1138, "updated_at": "2014-07-03 04:29:29", "user": 417251, "closed_at": "2012-03-28 20:11:09", "id": 925949, "title": "Extend Range to have own min, max methods", "url": "https://api.github.com/repos/rails/rails/issues/1138", "created_at": "2011-05-19 08:06:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203052", "text": "Delegating to @fxn.\n", "created_at": "2011-05-19 12:04:30", "user": 9582, "id": 1203052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360505", "text": "Bump up.\n\nWould you look on it ? It's really improving performance when you use Ruby 1.8.7 and Range class.\n", "created_at": "2011-06-13 17:38:22", "user": 417251, "id": 1360505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365385", "text": "/cc @fxn\n", "created_at": "2011-06-14 11:38:30", "user": 9582, "id": 1365385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365459", "text": "@piotrdebosz As a rule of thumb, AS core extensions are driven by the needs of Rails itself. AS is different from the facets gem in this sense. For example, this would be interesting if inclusion validation relied on Range#(min|max) (it doesn't). Do you see these methods used in Rails?\n", "created_at": "2011-06-14 11:53:11", "user": 3387, "id": 1365459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4214375", "text": "@josevalim @fxn I guess this one can be closed due to the lack of activity and Rails 4 being 1.9 only. wdyt?\n", "created_at": "2012-02-28 12:02:29", "user": 78422, "id": 4214375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4784993", "text": "Closing since Rails 4 will be 1.9 only\n", "created_at": "2012-03-28 20:11:10", "user": 160941, "id": 4784993}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Minimal change to query generation of FinderMethods#exists? that makes SQLServer and others happy that do not like columns without an alias.\n\nWithout this patch MS-SQLServer doesn't like the generated SQL and barks for FinderMethods#exists?, ie:\n\nActiveRecord::StatementInvalid: ActiveRecord::JDBCError: No column was specified for column 2 of 't'.: SELECT t.\\* FROM (SELECT ROW_NUMBER() OVER(ORDER BY huhu.id) AS _row_num, 1 FROM huhu WHERE huhu.[id] = 83287) AS t WHERE t._row_num BETWEEN 1 AND 1\n", "labels": ["activerecord"], "number": 1139, "updated_at": "2014-06-26 15:28:32", "user": 27787, "closed_at": "2012-06-10 20:22:45", "id": 926158, "title": "Fix FinderMethods#exists? sql generation to make picky sql servers happy", "url": "https://api.github.com/repos/rails/rails/issues/1139", "created_at": "2011-05-19 09:07:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1825108", "text": "A test case has been added.\n", "created_at": "2011-08-17 10:19:31", "user": 27787, "id": 1825108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4210125", "text": "@iaddict out of curiosity, since `exists?` is extensively tested, does the existent tests break against SQL Server?\n", "created_at": "2012-02-28 05:53:43", "user": 78422, "id": 4210125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5388731", "text": "This can't be merged automatically.\n\nIf you still have this issue, please rebase it and I'll glad to put this is in discussion with the Core Team.\n", "created_at": "2012-04-27 19:34:47", "user": 47848, "id": 5388731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5396682", "text": "This seems to be recurrent, I've already closed 3 issues explaining the same problem, linked above. Unfortunately this pull request does not apply anymore, as @rafaelfranca pointed, so if you can bring it up-to-date, we can go ahead with it. Thanks\n", "created_at": "2012-04-28 13:12:29", "user": 26328, "id": 5396682}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI've start a simple app just using the scaffold generators, however the data that I'm using has string ids such as `'PROD/700'` and `'THIS.HAS.DOTS'`. When action dispatch trys to generate the model's url (ie when I call `product_path(product)`) this error occurs:\n\n```\nNo route matches {:action=>\"show\", :controller=>\"products\", :id=>#<Product @id=\"PROD/700\" ...>}\n\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:425:in `raise_routing_error'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:398:in `generate'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:454:in `generate'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:482:in `url_for'\nactionpack (3.0.7) lib/action_dispatch/routing/url_for.rb:131:in `url_for'\nactionpack (3.0.7) lib/action_view/helpers/url_helper.rb:99:in `url_for'\nactionpack (3.0.7) lib/action_dispatch/routing/route_set.rb:206:in `product_path'\n...\n```\n\nI can fix it by using `product_path(CGI::escape(product.id))`. (But this doesn't work for `'THIS.HAS.DOTS'`, for obvious reasons.) This fix is very tiresome because all sorts of things break, e.g. my fix for `form_for` is:\n\n``` ruby\n  <%= form_for(@product, :url => product_path(@product.id.urlescape /[^ a-zA-Z0-9_-]/)) do |f| %>\n```\n\nI know I'm being brief but hopefully you see what I mean.\n\nCheers,\nCorin\n", "labels": [], "number": 1140, "updated_at": "2011-05-24 02:34:37", "user": 702802, "closed_at": "2011-05-21 16:19:56", "id": 926221, "title": "URL encoding needed on route parameter", "url": "https://api.github.com/repos/rails/rails/issues/1140", "created_at": "2011-05-19 09:30:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214116", "text": "HI,\n\nFrom the route.rb comments\n\n```\n=== Parameter Restriction\n        # Allows you to constrain the nested routes based on a set of rules.\n        # For instance, in order to change the routes to allow for a dot character in the +id+ parameter:\n        #\n        #   constraints(:id => /\\d+\\.\\d+) do\n        #     resources :posts\n        #   end\n```\n\nYou can use this to allow dots in your id\n\nOR (2nd pref) you can use to_param method of your model and escape your ids before url/path gets generated.\n\nIn any case, this is not a bug.\n", "created_at": "2011-05-21 10:45:48", "user": 278, "id": 1214116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214814", "text": "As @gnufied says, by default resource :id params don't allow periods and slashes. The periods are not allowed so that we can support optional formats and the slash is not allowed so that there's no confusion over what's path and what's id. You can pass a custom route constraint to `resources` to override this:\n\n```\nresources :products, :id => /.+/\n```\n\nThis will allow any character as the `:id` parameter, however it will break formats as the .json or whatever will be included in the `:id` parameter. If you make the format parameter non-optional and then use a non-greedy regexp then you can kind of workaround it.\n", "created_at": "2011-05-21 16:19:56", "user": 6321, "id": 1214814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216111", "text": "Thanks for the tips!\n\nI like the idea of using to_param to escape my problematic characters.\n\nI accept that this is not a bug, could I suggest this as a feature request?\n", "created_at": "2011-05-22 02:08:24", "user": 702802, "id": 1216111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217464", "text": "I'm not sure what you're asking for as to_param is already called:\n\n``` ruby\nclass Product < ActiveRecord::Base\n  def to_param\n    # Escape everything that isn't an alphanumeric\n    URI.escape(id, /[^[:alnum:]]/)\n  end\nend\n\n# Your view\n<%= link_to product.name, product_path(product) %>\n```\n\nNote you have to pass the instance to the url helper and not the id.\n", "created_at": "2011-05-22 15:07:33", "user": 6321, "id": 1217464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218812", "text": "Sorry, I neglected to mention, I'm using DataMapper... but it's action pack that call's to_param, right?\n", "created_at": "2011-05-22 22:06:39", "user": 702802, "id": 1218812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219965", "text": "Yes, thats correct.\n", "created_at": "2011-05-23 05:31:20", "user": 6321, "id": 1219965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225669", "text": "Thanks for your help, adding that to_param to my model works as expected. However most browsers do not handle %2E in links correctly.\n\nIn IE9 and Chrome (11.0.696.68) it sends the `GET /products/THIS.HAS.DOTS` to the server and they also conveniently present this in the address bar and status bar. (I've confirmed that the link is in fact `/products/THIS%2EHAS%2EDOTS` using 'Inspect element').\n\nFirefox (4.0.1) behaves like above except it correctly sends `GET /products/THIS%2EHAS%2EDOTS/edit` for the edit route. (Go figure!)\n\nSafari (5.0.5 for Windows 7) works correctly without any convenience conversion.\n", "created_at": "2011-05-24 02:34:36", "user": 702802, "id": 1225669}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Minimal change to query generation of FinderMethods#exists? that makes SQLServer and others happy that do not like columns without an alias.\n\nWithout this patch MS-SQLServer doesn't like the generated SQL and barks for FinderMethods#exists?, ie:\n\nActiveRecord::StatementInvalid: ActiveRecord::JDBCError: No column was specified for column 2 of 't'.: SELECT t.\\* FROM (SELECT ROW_NUMBER() OVER(ORDER BY huhu.id) AS _row_num, 1 FROM huhu WHERE huhu.[id] = 83287) AS t WHERE t._row_num BETWEEN 1 AND 1\n", "labels": ["activerecord"], "number": 1141, "updated_at": "2014-06-26 15:28:34", "user": 27787, "closed_at": "2012-04-27 19:32:12", "id": 926242, "title": "Fix FinderMethods#exists? sql generation to make picky sql servers happy - 3 0 stable", "url": "https://api.github.com/repos/rails/rails/issues/1141", "created_at": "2011-05-19 09:36:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308169", "text": "+1 please fix\n", "created_at": "2011-06-06 09:47:33", "user": 76164, "id": 1308169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5324052", "text": "@iaddict Is this still an issue? If not, please close it. Thanks.\n", "created_at": "2012-04-25 04:17:34", "user": 139443, "id": 5324052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5388686", "text": "This pull request is for a no longer supported Rails version. If you still have this issue please open a new pull request pointing to master.\n\nThank you so much for your time.\n", "created_at": "2012-04-27 19:32:12", "user": 47848, "id": 5388686}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Affected version 3.0.7\n\nThose 3 methods:\n- number_to_human\n- number_to_percentage\n- number_with_delimiter\n  either work wrongly or raise a TypeError (eg, to_percentage -> can't convert NilClass to String) when you use regional locales like en-VU (with supporting en.yml & en-VU.yml) and corresponding formatting are not present in the exact locale while using:\n  \n  ```\n  config.i18n.fallbacks = true\n  ```\n\nIn other words, they fail falling back to more generic locales. Eg. if I18n.locale = 'en-VU', the look up should work this way:\n- not present in en-VU.yml\n- falls back to app en.yml\n- falls back to Rails en.yml\n", "labels": [], "number": 1142, "updated_at": "2016-01-11 07:09:28", "user": 124391, "closed_at": "2011-07-09 23:39:22", "id": 926441, "title": "I18n: 3 methods of ActionView::Helpers::NumberHelper don't fallback properly", "url": "https://api.github.com/repos/rails/rails/issues/1142", "created_at": "2011-05-19 10:35:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515086", "text": "This is a regression, which should probably be fixed for 3.1 - cc @spastorino\n", "created_at": "2011-07-06 20:36:31", "user": 9347, "id": 1515086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1540002", "text": "Could you please provide a test case? THanks for the report!\n", "created_at": "2011-07-09 21:47:51", "user": 9582, "id": 1540002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1540266", "text": "Should be fixed with https://gist.github.com/svenfuchs/i18n/pull/102.\n@gamov can you confirm that?\n", "created_at": "2011-07-09 23:39:22", "user": 52642, "id": 1540266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545650", "text": "@spastorino Once a new RC is released, I will. Still fails with 3.1rc4.\n", "created_at": "2011-07-11 10:59:21", "user": 124391, "id": 1545650}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546223", "text": "You can check that now using master i18n in the Gemfile\n", "created_at": "2011-07-11 12:58:11", "user": 52642, "id": 1546223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9083110", "text": "This seems to have regressed again.  In my rails 3.2.8 console:\n\nirb(main):001:0> include ActionView::Helpers::NumberHelper\n\n=> Object\nirb(main):002:0> number_to_human(0, :locale => 'fr-FR')\nTypeError: wrong argument type nil (expected Fixnum)\n    from /.../shared/bundled_gems/ruby/1.9.1/gems/actionpack-3.2.8/lib/action_view/helpers/number_helper.rb:349:in `round'\n    from /.../shared/bundled_gems/ruby/1.9.1/gems/actionpack-3.2.8/lib/action_view/helpers/number_helper.rb:349:in`number_with_precision'\n    from /.../shared/bundled_gems/ruby/1.9.1/gems/actionpack-3.2.8/lib/action_view/helpers/number_helper.rb:602:in `number_to_human'\n...\nirb(main):003:0> number_to_human(0, :locale => 'fr')\n=> \"0\"\nirb(main):004:0> number_to_human(0, :locale => 'en-US')\nTypeError: wrong argument type nil (expected Fixnum)\n...\nirb(main):005:0> number_to_human(0, :locale => 'en')\n=> \"0\"\n", "created_at": "2012-10-02 19:14:52", "user": 554505, "id": 9083110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/170451127", "text": "Fixed for me on 3.2.22 with i18n 0.7.0\n", "created_at": "2016-01-11 07:09:28", "user": 124391, "id": 170451127}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Currently all relative paths on the partial path are relative to the `app/view` directory, however let's suppose we have the following directory structure:\n\n```\napp/view\n  > layouts\n    > shared\n      - _header.html.erb\n      - _some_header_stuff.html.erb\n      - _footer.html.erb\n      - _navigation.html.erb\n    - application.html.erb\n```\n\nFrom `application.html.erb` you would the partial via:\n- `./shared/header` or `layouts/shared/header`.\n\nFrom `header` you could render the partial `_some_header_stuff.html.erb`  via:\n- `./some_header_stuff` or `layouts/shared/some_header_stuff`.\n\nThis would allow to have a more organized view directory, with less than 13 files bouncing around root directories, without having to write incredible long paths every time.\n\nOrganization is good, according to @dhh - and this would support that goal.\n", "labels": ["actionpack"], "number": 1143, "updated_at": "2018-01-06 20:19:58", "user": 125900, "closed_at": "2012-11-17 12:12:30", "id": 926636, "title": "Relative Paths on render :partial => ", "url": "https://api.github.com/repos/rails/rails/issues/1143", "created_at": "2011-05-19 11:30:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332832", "text": "+1\n", "created_at": "2011-06-09 08:44:52", "user": 8155, "id": 1332832}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1537592", "text": "What do you think, if absolute path will starts with `/`, and relative path will starts without slash.\nExample:\n\n``` ruby\n  render :partial => \"some/relative/path\"\n  render :partial => \"/some/absolute/path\"\n```\n\nOr maybe better to have \"./\" at the beginning in relative path?\nExample:\n\n```\n  render :partial => \"./some/relative/path\"\n  render :partial => \"some/absolute/path\"\n  render :partial => \"/some/another/absolute/path\"\n```\n\nThe second way looks more pretty good, but it has no backward compatibility.\n\nWhat do you prefer?\n", "created_at": "2011-07-09 05:13:35", "user": 30642, "id": 1537592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1537601", "text": "Thanks for the interest!\n\nI believe that `./` is something that is pretty much a standard in Ruby, and we're using that way on Sprockets, check issue #525 to see what I'm talking about.\n\nThoughts?\n", "created_at": "2011-07-09 05:17:55", "user": 125900, "id": 1537601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1557514", "text": "Relative path shouldn't be relative from another parent partial. Any partial can be rendered from action or partial with deep inheritance. So, point of start of relative path can be the controller's folder. If you render partial from another partial just once &mdash; do not use sub-partial.\n", "created_at": "2011-07-12 20:31:26", "user": 30642, "id": 1557514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1561760", "text": "> If you render partial from another partial just once — do not use sub-partial.\n\nYou lost me there, what do you mean?\n", "created_at": "2011-07-13 10:49:00", "user": 125900, "id": 1561760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1562226", "text": "If you have partial, which calling from another place just once, just inline it. \n", "created_at": "2011-07-13 12:27:12", "user": 30642, "id": 1562226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3518395", "text": "`./` and `../` sounds like an interesting additional feature with full backwards compatibility.\n\nprobably not that good readable and a bit harder to maintain because you only can move complete complete folder structures without editing internals. but maybe that's a decision everyone should make for themselves \n", "created_at": "2012-01-16 21:18:16", "user": 245670, "id": 3518395}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4885049", "text": "+1 , was looking for that\n", "created_at": "2012-04-02 18:35:21", "user": 833383, "id": 4885049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4889054", "text": "Using Cells (http://cells.rubyforge.org/) solved this kind of problems to me. When I need to isolate views (and \"sub-views\") that are intented to work together, I tend to isolate them as a Cell.\n\nThe cell defines a \"subcontroller\" (and also an [ActionView::Resolver](http://api.rubyonrails.org/classes/ActionView/Resolver.html) relative to the cell view-path).\n", "created_at": "2012-04-02 21:27:55", "user": 30809, "id": 4889054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320787", "text": "@kuroir did using a plugin like Cells (http://cells.rubyforge.org/) solve this for you? If so please close the ticket.\n", "created_at": "2012-04-25 00:10:31", "user": 640501, "id": 5320787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5325871", "text": "This is a feature request for something that is part of Rails. It should be in by default and not provided by a a external plugin.\n\nSo no, it didn't solve it. \n", "created_at": "2012-04-25 07:34:51", "user": 125900, "id": 5325871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5425207", "text": "+1.\n", "created_at": "2012-04-30 19:15:00", "user": 33770, "id": 5425207}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5734319", "text": "+1.\n\nThis helps structure complex views much better - otherwise every deeply nested partial has to include the full path starting from the controller directory.\n\nI second @kuroir on using ./ for explicit relative paths. This will help not break backward compatibility and provide a good visual indicator when using relative paths.\n", "created_at": "2012-05-16 06:26:45", "user": 108296, "id": 5734319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10473490", "text": "> This is a feature request for something that is part of Rails.\n\nWe don't accept feature requests on the issues tracker. It's been 6 months with no discussion, so I'm closing. If someone would like to implement this, please submit a pull request. Thanks.\n", "created_at": "2012-11-17 12:12:30", "user": 27786, "id": 10473490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/140348105", "text": "Печаль\n", "created_at": "2015-09-15 10:28:45", "user": 1290711, "id": 140348105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/247970714", "text": "+1\n", "created_at": "2016-09-19 11:39:23", "user": 2911971, "id": 247970714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/251150262", "text": "up\n\nuseful thing\n", "created_at": "2016-10-03 16:12:44", "user": 321163, "id": 251150262}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/280847070", "text": "+1", "created_at": "2017-02-18 13:55:39", "user": 1491315, "id": 280847070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/324597833", "text": "+1", "created_at": "2017-08-24 10:30:40", "user": 18439839, "id": 324597833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/331334457", "text": "+1 waiting for PR merge!", "created_at": "2017-09-22 02:36:32", "user": 3957744, "id": 331334457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/332593852", "text": "+1", "created_at": "2017-09-27 17:21:46", "user": 418868, "id": 332593852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/349661936", "text": "+1", "created_at": "2017-12-06 14:50:29", "user": 84978, "id": 349661936}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/355728090", "text": "+1", "created_at": "2018-01-06 06:51:00", "user": 649188, "id": 355728090}], "assignees": [5004, 5004], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I am working on this but this is causing some conflicts with the Rack::Sendfile middleware.\n", "labels": [], "number": 1144, "updated_at": "2011-05-19 16:36:39", "user": 9582, "closed_at": "2011-05-19 16:36:39", "id": 926738, "title": "Rails middleware stack should include Rack::ContentLength", "url": "https://api.github.com/repos/rails/rails/issues/1144", "created_at": "2011-05-19 12:00:07", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Minor changes in test files for array representation\n", "labels": [], "number": 1145, "updated_at": "2014-07-03 04:29:47", "user": 160764, "closed_at": "2011-05-19 12:24:41", "id": 926786, "title": "Minor changes for array representation", "url": "https://api.github.com/repos/rails/rails/issues/1145", "created_at": "2011-05-19 12:19:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203123", "text": "Thanks for the pull request, but this only change syntax and is likely to break other pull requests and patches available without an explicit benefit.\n", "created_at": "2011-05-19 12:24:41", "user": 9582, "id": 1203123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203258", "text": "ok.\n", "created_at": "2011-05-19 12:59:52", "user": 160764, "id": 1203258}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The link_to with many parameters produces a lexicographically sorted querystring, but that is not desired in many cases e.g. page should follow query parameter in <pre>/search?page=3&q=some+query</pre> Looking at the code for \"activesupport/lib/active_support/core_ext/object/to_param.rb\" and corresponding git log reveals that Hash#to_param sort was introduced, removed and re-introduced back around rails 3.0.1-3.0.3\n\n<pre>\n def to_param(namespace = nil)\n    collect do |key, value|\n      value.to_query(namespace ? \"#{namespace}[#{key}]\" : key)\n    end.sort * '&'\n  end\n</pre>\n\n\nIt would be better if sort or no-sort is provided as an option e.g.\n\n<pre>\n def to_param(namespace = nil, sortquery = false)\n    result = collect do |key, value|\n      value.to_query(namespace ? \"#{namespace}[#{key}]\" : key)\n    end\n   (sortquery ? result.sort : result) * '&'\n end\n</pre>\n\n\nThen with some update on \"url_for\" and \"link_to\" code in \"actionpack/lib/action_view/helpers/url_helper.rb\" for \"sortquery\" option propagation, users would be able to select whether they want sorted querystring or not.\n", "labels": [], "number": 1146, "updated_at": "2014-09-05 17:10:47", "user": 185101, "closed_at": "2011-05-24 15:07:10", "id": 926803, "title": "link_to querystring sort problem in to_param", "url": "https://api.github.com/repos/rails/rails/issues/1146", "created_at": "2011-05-19 12:26:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204323", "text": "What's the difference if the page number parameter doesnt come last? Just curious. Why would query string params need to be ordered in any web app?\n", "created_at": "2011-05-19 15:49:13", "user": 146214, "id": 1204323}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208538", "text": "Or the question could be : why are they currently ordered ? I don't see any reason to it (so that's a +1).\n", "created_at": "2011-05-20 07:30:55", "user": 9347, "id": 1208538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209181", "text": "@dmathieu\nA quick `git log` shows that the sort was removed in commit 5c858220085dc4ddc1bec496747059dfbe32f1da, and was reverted in 10dec0e65e1f4d87f411b4361045eba86b121be9 by @fxn\n\n```\nlet Hash#to_param and Hash#to_query sort again\n\nThis was a regression introduced in 5c85822. We bring\nsorting back because people rely on it, eg for constructing consistent cache keys.\n```\n", "created_at": "2011-05-20 10:32:35", "user": 217126, "id": 1209181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228826", "text": "So, there's a point in having this sorted.\nFrom what I understand, not sorting the query is just for an esthetic reason.\nAdding \"no_sort\" in the params adds useless complexity.\n\nThis could be closed. cc @josevalim\n", "created_at": "2011-05-24 15:02:17", "user": 9347, "id": 1228826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12221844", "text": "Sorting by key discards the insertation order of keys in ruby 1.9\n", "created_at": "2013-01-14 15:04:03", "user": 1065730, "id": 12221844}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This commit (3021297e89dc3720d1bce50dabf1177f8935172e) removed the ability to override an ActiveRecord attribute, to have it return a default value for example, and have the overridden value appear in a text field.\n\nI'm guessing there might be a good reason to want to call `#<method>_before_type_cast` but it's not tested so I've added a test and fix to produce the behaviour I want.\n\nI'm doing this more to discuss why it might be useful to call `#<method>_before_type_cast` and work out what tests are missing should that be the case.\n", "labels": [], "number": 1147, "updated_at": "2014-07-03 04:29:54", "user": 6556, "closed_at": "2011-05-19 16:07:38", "id": 926896, "title": "Overridden ActiveRecord attributes should appear as the value in text fie", "url": "https://api.github.com/repos/rails/rails/issues/1147", "created_at": "2011-05-19 12:49:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203279", "text": "The reason before_type_cast is called is so that forms can show the actual data the user entered. Otherwise a user entering a non-numerical value into a numeric attribute won't see what they entered when the form is re-presented. Your change will break this behaviour - just override the before_type_cast method to return the default text you need.\n", "created_at": "2011-05-19 13:07:16", "user": 6321, "id": 1203279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204452", "text": "The reason @pixeltrix has given is exactly correct. using post-typecast values can lead to horrible user experience where they accidentally type a comma in a long number field and most of their data disappears because of how `String#to_i` behaves\n", "created_at": "2011-05-19 16:07:38", "user": 197, "id": 1204452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1204531", "text": "Thanks for the explanation guys.  That makes sense.\n", "created_at": "2011-05-19 16:17:50", "user": 6556, "id": 1204531}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Method\n\n  def proxy_owner\n    @owner\n  end\nis simply not there anymore.\n\nHow we should extend associations now?\n", "labels": [], "number": 1148, "updated_at": "2011-07-27 16:17:42", "user": 3668, "closed_at": "2011-07-27 11:45:01", "id": 927021, "title": "Association Extension - Association proxy missing", "url": "https://api.github.com/repos/rails/rails/issues/1148", "created_at": "2011-05-19 13:25:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1206187", "text": "Hi there,\n\nYou should now call `record.association(:items).owner` (where 'items' is the name of an association).\n\nI should add a deprecation for the `proxy_` methods... though that won't be possible for singular associations as they no longer have any proxy.\n\nJon\n", "created_at": "2011-05-19 20:36:30", "user": 1979, "id": 1206187}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1641002", "text": "It does not solve the problem.\n\nFor example:\n\n``` ruby\n    class Author < ActiveRecord::Base\n        has_many :posts do\n            # code from http://blog.hasmanythrough.com/2006/9/9/finding-unassociated-objects\n            def not\n                find(:all, :conditions => [\"posts.id != ?\", proxy_owner.id])\n            end\n         end\n     end\n```\n\nDeprecation warning says\n\n``` text\n     Calling record.posts.proxy_owner is deprecated. Please use record.association(:posts).owner instead.\n```\n\nand it does not make any sense, because `record.association(:posts).owner` returns `record`. And there's no non-deprecated way to get the record from the `not` method. Of course, one could use `@association.owner`, but it's not really public API.\n\nThe same goes for proxy_target and proxy_reflection. The documentation and deprecation warnings assume that `proxy_*` is called from the outside of a `CollectionProxy` object, which is not true in this case.\n\nSo we should either specify that there is no replacement for those methods, keep them without deprecation warnings, or make `association` (which is `@association` now) a public API.\n", "created_at": "2011-07-24 15:01:08", "user": 7838, "id": 1641002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1651258", "text": "Agreed, please provide an upgrade path for association extensions.\n", "created_at": "2011-07-26 03:00:01", "user": 8683, "id": 1651258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1652796", "text": "Thanks for pointing that out. We should probably bring back the proxy_\\* methods then.\n", "created_at": "2011-07-26 09:22:44", "user": 1979, "id": 1652796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1663130", "text": "I ended up adding a `proxy_association` method, so you can call `proxy_association.owner` rather than `proxy_owner`.\n", "created_at": "2011-07-27 11:45:56", "user": 1979, "id": 1663130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1665171", "text": "Thanks!\n", "created_at": "2011-07-27 16:17:42", "user": 8683, "id": 1665171}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "...and this is not the only case when url_for() raising exception\n\nrender :stream => true or class method\nstream effect is same\n# unicorn config line\n\nlisten :tcp_nopush => false\n# stack trace\n\nActionView::Template::Error (No route matches {}):\n\n11:             <ul class=\"additional_locales\">\n12:                 <% Language.active.reject {|l| l.code == I18n.locale.to_s }.each do |lang| %>\n13:                     <li>\n14:                         <%= link_to url_for( :host => lang.code + '.' + request.host_with_port ) do %>\n15:                       <%= image_tag(\"/images/flags/png/#{lang.code}.png\") %>  \n16:                             <%=raw lang.name %>\n17:                     <% end %>\n/Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/route_set.rb:464:in raise_routing_error' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/route_set.rb:460:inrescue in generate' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/route_set.rb:452:in generate' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/route_set.rb:493:ingenerate' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/route_set.rb:518:in url_for' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_dispatch/routing/url_for.rb:143:inurl_for' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/helpers/url_helper.rb:107:in url_for' /Users/andriytyurnikov/Code/futubox/app/views/shared/_nav.html.erb:14:inblock in app_views_sharednav_html_erb3474679066074452885_2165049460' /Users/andriytyurnikov/Code/futubox/app/views/shared/nav.html.erb:12:in each' /Users/andriytyurnikov/Code/futubox/app/views/shared/_nav.html.erb:12:in_app_views_sharednav_html_erb3474679066074452885_2165049460' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/template.rb:144:in block in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/activesupport/lib/active_support/notifications.rb:57:ininstrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/template.rb:142:in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/partial_renderer.rb:265:inrender_partial' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/partial_renderer.rb:237:in block (2 levels) in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:inblock in instrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/activesupport/lib/active_support/notifications.rb:55:in block in instrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/activesupport/lib/active_support/notifications/instrumenter.rb:21:ininstrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/activesupport/lib/active_support/notifications.rb:55:in instrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:ininstrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/partial_renderer.rb:236:in block in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/abstract_renderer.rb:22:inwrap_formats' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/partial_renderer.rb:228:in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/renderer.rb:41:inrender_partial' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/renderer.rb:15:in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/helpers/rendering_helper.rb:24:inrender' /Users/andriytyurnikov/Code/futubox/app/views/layouts/application.html.erb:17:in _app_views_layouts_application_html_erb___3265135085123127531_2169541100' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/template.rb:144:inblock in render' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/activesupport/lib/active_support/notifications.rb:57:in instrument' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/template.rb:142:inrender' /Users/andriytyurnikov/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-505defc27ead/actionpack/lib/action_view/renderer/streaming_template_renderer.rb:73:in `block (2 levels) in delayed_render'\n", "labels": [], "number": 1149, "updated_at": "2011-05-21 15:13:48", "user": 3668, "closed_at": "2011-05-21 15:13:48", "id": 927024, "title": "url_for() raising exceptions when HTTP streaming enabled", "url": "https://api.github.com/repos/rails/rails/issues/1149", "created_at": "2011-05-19 13:25:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203418", "text": "I assume it works normally if you turn streaming off?\n", "created_at": "2011-05-19 13:36:54", "user": 9582, "id": 1203418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203489", "text": "true, without streaming everything works fine\n", "created_at": "2011-05-19 13:51:11", "user": 3668, "id": 1203489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210300", "text": "The options hash to Rack::Mount is empty indicating that something is messing about with the recall parameters. Usually the router will use the current controller and action if you just supply the host however in your case it isn't. Can you reproduce this in a simple app and I'll have a look at it. It seems to work fine here for me in a simple test app.\n", "created_at": "2011-05-20 14:27:20", "user": 6321, "id": 1210300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210311", "text": "So Rack::Mount probably does not work with streaming. They need to wrap the Rack body in a proxy as here: https://github.com/rack/rack/blob/master/lib/rack/lock.rb\n\n/cc @josh\n", "created_at": "2011-05-20 14:29:36", "user": 9582, "id": 1210311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210339", "text": "rack-mount doesn't touch the body at all\n", "created_at": "2011-05-20 14:35:25", "user": 137, "id": 1210339}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210378", "text": "@josh the problem is something like this in Rails or Rack-Mount:\n\n```\nbegin\n  @rack_mount.options = some_value\n  @app.call(env)\nensure\n  @rack_mount.options = {}\nend\n```\n\nIt means that we are reverting the options before actually rendering the template. Do you have any idea if we have something like that and where it might be?\n", "created_at": "2011-05-20 14:42:24", "user": 9582, "id": 1210378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210402", "text": "I had that, but it was fixed here: https://github.com/josh/rack-mount/commit/349084391be92db1e0e9d38f50d91ed8b9ea6924\n\n@andriytyurnikov please make sure you are using rack-mount 0.8.1\n", "created_at": "2011-05-20 14:47:27", "user": 137, "id": 1210402}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Because of this it is probable to have two cookies (even session cookies) in the jar, one keyed as a symbol, one as a string. These two cookies are sent to the browser and the browser \"chooses\" which cookie to use. If it is a session cookie (as was my case) things like csrf get reset on every request which makes submitting forms hard.\n", "labels": [], "number": 1150, "updated_at": "2014-07-03 04:30:02", "user": 3463, "closed_at": "2011-05-19 14:35:00", "id": 927107, "title": "The cookie jar does not to_s cookie names (keys)", "url": "https://api.github.com/repos/rails/rails/issues/1150", "created_at": "2011-05-19 13:54:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1203521", "text": "Looks good, tests please?\n", "created_at": "2011-05-19 13:56:10", "user": 9582, "id": 1203521}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nI renamed the wrap_parameters :only and :except options to :include and :exclude to make it consistent with controller filters options.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1151, "updated_at": "2014-07-03 04:30:05", "user": 8701, "closed_at": "2011-05-19 14:51:18", "id": 927264, "title": "renamed the wrap_parameters :only and :except options to :include and :ex", "url": "https://api.github.com/repos/rails/rails/issues/1151", "created_at": "2011-05-19 14:34:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This should be merged into the stable branch: https://github.com/rails/rails/commit/be9883b09d05b90c2422502f38ab69081e29e4ce#activemodel/lib/active_model/validations/confirmation.rb\n\nI have an ActiveModel class that has a method email_address_confirmation.  This method is being overwritten by the method defined in the Confirmation validator.\n", "labels": [], "number": 1152, "updated_at": "2011-11-30 10:43:29", "user": 1179, "closed_at": "2011-11-30 10:43:29", "id": 928348, "title": "ActiveModel's confirmation validator fix should be merged into 3.0 stable", "url": "https://api.github.com/repos/rails/rails/issues/1152", "created_at": "2011-05-19 18:16:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210342", "text": "Could you please provide a patch and include tests?\n", "created_at": "2011-05-20 14:35:38", "user": 9582, "id": 1210342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210693", "text": "Should there be two patches, one for 3-0-stable (containing the fix and the test) and one for master (containing the test)?\n", "created_at": "2011-05-20 15:43:21", "user": 1179, "id": 1210693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210796", "text": "No need for the tests on 3-0-stable as it is going to only security releases\nmode.\n", "created_at": "2011-05-20 16:00:28", "user": 9582, "id": 1210796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252529", "text": "Sorry, I'm confused -- why wouldn't tests be necessary for 3-0-stable if a change is being made?\n", "created_at": "2011-05-28 00:23:34", "user": 1179, "id": 1252529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515253", "text": "The 3-0-stable patch still hasn't been applied for this. Could you make a pull request ?\n", "created_at": "2011-07-06 20:52:04", "user": 9347, "id": 1515253}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Version Bump.\n", "labels": [], "number": 1153, "updated_at": "2014-07-03 04:30:12", "user": 3948, "closed_at": "2011-05-19 19:49:08", "id": 928364, "title": "Sprockets version update.", "url": "https://api.github.com/repos/rails/rails/issues/1153", "created_at": "2011-05-19 18:18:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It happens if I do a rake db:migrate, a rails g scaffold or loading the rails console. The rails environment does not load.\n\n/home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:37:in `block (2 levels) in <class:Railtie>': undefined method`context' for #Sprockets::Environment:0x99918b8 (NoMethodError)\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:36:in `instance_eval'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:36:in`execute_hook'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:26:in `on_load'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/actionpack-3.1.0.beta1/lib/sprockets/railtie.rb:36:in`block in class:Railtie'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:34:in `call'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:34:in`execute_hook'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:43:in `block in run_load_hooks'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:42:in`each'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/activesupport-3.1.0.beta1/lib/active_support/lazy_load_hooks.rb:42:in `run_load_hooks'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/application/finisher.rb:56:in`block in module:Finisher'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/initializable.rb:25:in `instance_exec'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/initializable.rb:25:in`run'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/initializable.rb:49:in`each'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/initializable.rb:49:in `run_initializers'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/application.rb:94:in`initialize!'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/railtie/configurable.rb:28:in `method_missing'\n    from /home/toma/Workspace/foot/config/environment.rb:5:in`<top (required)>'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/application.rb:76:in `require'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/application.rb:76:in`require_environment!'\n    from /home/toma/.rvm/gems/ruby-1.9.2-p180@foot/gems/railties-3.1.0.beta1/lib/rails/commands.rb:38:in `<top (requ\n", "labels": [], "number": 1154, "updated_at": "2011-05-19 19:43:46", "user": 562627, "closed_at": "2011-05-19 19:43:46", "id": 928601, "title": "Rails 3.1 boot error - undefined method `context' for #<Sprockets::Environment:0x99918b8>", "url": "https://api.github.com/repos/rails/rails/issues/1154", "created_at": "2011-05-19 19:06:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1205803", "text": "Duplicate of https://github.com/rails/rails/issues/453\n", "created_at": "2011-05-19 19:35:41", "user": 294954, "id": 1205803}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "http://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources\n\n:shallow_path code example is wrongly indented.\n", "labels": [], "number": 1155, "updated_at": "2014-06-14 17:33:42", "user": 4867, "closed_at": "2011-05-20 00:39:25", "id": 929645, "title": "fixes code highlight in shallow_path example", "url": "https://api.github.com/repos/rails/rails/issues/1155", "created_at": "2011-05-19 23:16:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207359", "text": "hey @plentz, you can push this fix directly to https://github.com/lifo/docrails, since it's documentation and the code you're fixing is already merged in that repository.\nPlease remember to close this issue after that.\nThanks!\n", "created_at": "2011-05-20 00:34:29", "user": 83449, "id": 1207359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207376", "text": "@smartinez87 thanks! done :)\n", "created_at": "2011-05-20 00:39:25", "user": 4867, "id": 1207376}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix styles of docs pushed on this commit: https://github.com/rails/rails/commit/0afd5850f5bba4bd3f1218e27a4a1488c9fdb83e\n", "labels": [], "number": 1156, "updated_at": "2014-06-27 08:34:04", "user": 83449, "closed_at": "2011-05-26 20:51:35", "id": 929724, "title": "Better styling on docs", "url": "https://api.github.com/repos/rails/rails/issues/1156", "created_at": "2011-05-19 23:42:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove extra white spaces on these ActiveRecordError messages\n", "labels": [], "number": 1157, "updated_at": "2014-07-03 04:30:22", "user": 83449, "closed_at": "2011-05-20 13:03:19", "id": 929751, "title": "Remove extra white spaces.", "url": "https://api.github.com/repos/rails/rails/issues/1157", "created_at": "2011-05-19 23:53:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209800", "text": "Cool, we are generally using one space everywhere, this is consistent. Thanks.\n", "created_at": "2011-05-20 13:03:01", "user": 3387, "id": 1209800}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Error during failsafe response: \"\\xC3\" from ASCII-8BIT to UTF-8`\n\nThis error occurs when I try to load a page after run server (I tested both Webrick and Mongrel).\n\nRails 3.1\nRuby 1.9.2\n\nTrace: https://gist.github.com/982149\n", "labels": [], "number": 1158, "updated_at": "2011-05-20 08:51:30", "user": 149353, "closed_at": "2011-05-20 08:51:30", "id": 929972, "title": "Encoding error", "url": "https://api.github.com/repos/rails/rails/issues/1158", "created_at": "2011-05-20 01:17:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207523", "text": "Can you please provide some more information? Did you send some particular request? Did it happen just booting the server? Can you reproduce with a minimal application?\n", "created_at": "2011-05-20 01:23:46", "user": 3387, "id": 1207523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207568", "text": "I just created a minimal application and it works. But, when I put any special character like `á` in controller or other ruby file, the same error occurs. So, we can't use these characters anymore?\n\nPS: Im only using these kind of character in `.yml` translation files.\n", "created_at": "2011-05-20 01:40:30", "user": 149353, "id": 1207568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208651", "text": "Are you putting the encoding magic comment in the controller when you put that accented character there?\n", "created_at": "2011-05-20 08:07:49", "user": 3387, "id": 1208651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208790", "text": "Strange... now Im thinking that is a config with my computer, because when I put these characters through Textmate or Text editor and send it to github, these characters apears with (?),  but when I edit in Github, it works.\n\nYou can see this controller here: https://github.com/edison/error-encoding-rails-3.1/blob/master/app/controllers/posts_controller.rb\n", "created_at": "2011-05-20 08:43:18", "user": 149353, "id": 1208790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208815", "text": "UTF-8 in source code with Ruby 1.9.2 and the corresponding magic comment definitely works. If this can't be reproduced I think we could close the issue. What do you think?\n", "created_at": "2011-05-20 08:49:19", "user": 3387, "id": 1208815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208829", "text": "Yes, I'll will try to solve and run other tests. Thx!\n", "created_at": "2011-05-20 08:51:30", "user": 149353, "id": 1208829}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Is this more or less what you had in mind?\n", "labels": [], "number": 1159, "updated_at": "2014-06-26 00:37:31", "user": 1284, "closed_at": "2011-06-07 06:57:06", "id": 930200, "title": "Refactored has_secure_password per @tenderlove's talk at RailsConf.", "url": "https://api.github.com/repos/rails/rails/issues/1159", "created_at": "2011-05-20 02:48:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1207786", "text": "I guess one big shortcoming that this still has is an inability to use additional columns, like a per-user salt.\n", "created_at": "2011-05-20 02:52:15", "user": 1284, "id": 1207786}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218699", "text": "I don't think it's a big shortcoming.  BCrypt is creating a salt each time a new password is set (saved in password_digest along side the hash).  Someone implementing their own Authenticator could do the same thing.  I like the API you built here but it seems to me that this is basically a less-generic version of Rails 3.1 ActiveRecord column coders.\n", "created_at": "2011-05-22 21:26:34", "user": 127900, "id": 1218699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231298", "text": "I think it would be better with named arguments/an options hash. There are too many arguments to keep track of the order, and if you only want to use another authenticator you shouldn't have to type the other arguments.\n", "created_at": "2011-05-24 21:01:20", "user": 6351, "id": 1231298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232358", "text": "You're right, @dasch, that's much better.\n", "created_at": "2011-05-25 00:10:35", "user": 1284, "id": 1232358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232777", "text": "What about:\n\n<pre>\n<code>\n\nhas_secure :password\nhas_secure :drivers_license\nhas_secure :something_super_secret\n</code>\n</pre>\n\n\nThese would all store digest in \"column_name_digest\", it's a much more generic solution because sometimes you need to secure things other than just passwords.\n", "created_at": "2011-05-25 02:26:24", "user": 17698, "id": 1232777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232796", "text": "Yeah, I like that idea. Feels much cleaner.\n", "created_at": "2011-05-25 02:31:11", "user": 1284, "id": 1232796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232837", "text": "Just watched @tenderlove's screencast again and he's using the second arg as the encryptor.\n\n<pre><code>\nserialize :content, Bcrypt.new\nhas_secure :password, Bcrypt.new\n</pre></code>\n\nThoughts?\n\n<pre><code>\nparams[:password] == User.find_by_email(params[:email]).password\n</pre></code>\n\nIt uses the encryption specified to figure it out, this might already be done with has_secure_password though not sure.\n\nHere's his screencast: http://www.youtube.com/watch?v=7cco1jxori8\n", "created_at": "2011-05-25 02:40:19", "user": 17698, "id": 1232837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232890", "text": "I like that better too. I was getting hung up on specifying the column for storage, when that's sort of the 1% use case. Having the authenticator second is more useful, and mirroring the other API is preferable.\n", "created_at": "2011-05-25 02:51:47", "user": 1284, "id": 1232890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232891", "text": "This looks awesome, good work!\n", "created_at": "2011-05-25 02:51:56", "user": 17698, "id": 1232891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232893", "text": "Thanks! And thanks for the feedback.\n", "created_at": "2011-05-25 02:52:52", "user": 1284, "id": 1232893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234587", "text": "I still think it's better to use a named argument for the encryptor as well. I'd rather change @tenderlove's API to match that.\n\nAgain: if I want to change the column name I shouldn't have to specify a `nil` authenticator, or worse, type in the default value again, i.e.: \n\n``` ruby\nhas_secure :password, ActiveModel::Authenticators::BCrypt.new, :column => 'password_hash'\n```\n\nversus\n\n``` ruby\nhas_secure :password, :column => 'password_hash'\n```\n\nPositional arguments should only be used for the most essential parameters, ones that are likely to be changed. Developers will in all likelihood seldomly need to change the authenticator. That's my opinion, at least.\n", "created_at": "2011-05-25 10:37:39", "user": 6351, "id": 1234587}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236702", "text": "@dasch That's a good point and yeah I think that in this case the column option will be changed more often than the encryption.\n\nAlso, I was thinking we should have another method besides \"authenticate\" or just renamed. Probably the == method. I don't know that \"authenticate\" makes sense when not used in a login context.\n", "created_at": "2011-05-25 17:19:18", "user": 17698, "id": 1236702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237003", "text": "Guys - are we sure we aren't re-creating the wheel here?  Using ActiveModel 3.1 we get the same functionality with a nearly identical API.  A \"column coder\" looks a whole lot like an \"authenticator\" to me.  IMO it seems logical to implement this in ActiveModel instead so that the existing column coder API can be leveraged.\n\n```\nclass PasswordCoder\n  def load(value)\n    BCrypt::Password.new(value) if password\n  end\n  def dump(value)\n    BCrypt::Password.create(value).to_s\n  end\nend\n\nclass User < ActiveRecord::Base\n  serialize :password, PasswordCoder.new\nend\n```\n\nThis allows password to be set from a string, saved as a BCrypt salt+hash string in the database, and retrieved as a BCrypt::Password that responds to the == operator.  So now...\n\n```\nUser.create(:password => \"SomePassword\").password == \"SomePassword\" # => true\nUser.create(:password => \"SomePassword\").password == \"NotThePassword\" # => false\n```\n\nIt seems to me that if `has_secure :password` was simply a macro that implemented the above it'd be super smooth.  Just my two cents.  Please let me know if I'm off base.  Any thoughts?\n", "created_at": "2011-05-25 18:00:35", "user": 127900, "id": 1237003}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238776", "text": "Serialize as a verb feels like it implies a two-way operation. The default bcrypt password encryption is clearly one-way, but when storing a password, one-way isn't necessarily a requirement.\n\n`has_secure` as a general phrase could be taken to mean one- or two-way. To take the `has_secure :drivers_license` example, one might think that they could get the original data back out -- it's just stored \"securely\" (whatever that means). So maybe \"authenticatable\" is a better general purpose description than \"secure,\" especially when you're describing data other than passwords. Of course forcing people to spell that is another issue altogether.\n", "created_at": "2011-05-25 22:14:41", "user": 61409, "id": 1238776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238917", "text": "Thanks for the comment @lewinksi.  I'm not proposing that we change the \"outer\" API.  I agree completely on the has_secure verbiage.  I just think internally it might be more cleanly implemented in ActiveModel as a coded column.  Or maybe not. Just a suggestion.  I can't agree more about the spelling issue.  :-)\n", "created_at": "2011-05-25 22:44:25", "user": 127900, "id": 1238917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239129", "text": "@MDaubs - Totally agree with you when the details are hidden from the user. I guess I skipped the last item in your post about making it a shortcut for the user. Still believe the name could be better though.\n", "created_at": "2011-05-25 23:30:14", "user": 61409, "id": 1239129}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239239", "text": "Just saw this in my feed, indeed it should be renamed; I mean it hasn't been officially released yet has it? (It's new to 3.1?) so we really should fix it before it's published and applications depend on it. `has_secure :credit_card` is another great example of where this verbage would make sense. Since credit card must be (legally) stored \"securely\" and reversible for processing. \n\nLong brain storm that should have stayed in my head:\n`has_authentication_for :password` is bit long and ugly\n`has_authentication :password` is vague\n`authentication_on :password` I don't think on really is the best verbage.\n`will_authenticate_on :password` is a bit long, but I like it\n\nWhat do you think of:\n`will_authenticate` with option field: `will_authenticate :field => :password`\n", "created_at": "2011-05-25 23:54:13", "user": 371940, "id": 1239239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241274", "text": "We could also just revert to `has_secure_password`, thus avoiding any confusion. Attribute and column names can be provided in an options hash.\n", "created_at": "2011-05-26 09:49:51", "user": 6351, "id": 1241274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1250097", "text": "I don't think reverting to has_secure_password is a good idea. What if you have two passwords for a user for 2 different systems? I guess you could store in two different fields but has_secure :password and has_secure :some_api_key makes a lot more sense, has_secure_password :some_api_key seems a bit sloppy. Storing other sensitive information is also a common use case that I think we might as well reuse this functionality for.\n", "created_at": "2011-05-27 16:41:24", "user": 17698, "id": 1250097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1250284", "text": "@nickhammond those are great reasons! I just wanted to add that: yes, having two passwords is rather common. Example, for my freelancing account on the site I use (forget the name) I have a password for my account to browse jobs, send messages, etc. then I have one for handling my finical transactions like withdrawing money.\n", "created_at": "2011-05-27 17:13:04", "user": 371940, "id": 1250284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1250294", "text": "The wording \"has_secure\" might need to change but I don't think we should put the attribute name in whatever we decide on.\n", "created_at": "2011-05-27 17:14:56", "user": 17698, "id": 1250294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1283401", "text": "The macro _should_ be `has_secure_password`, optionally taking an argument listing the attribute name.\n\n```\nclass User < ActiveRecord::Base\n  has_secure_password\n  has_secure_password :name => :admin\nend\n```\n\nThe only case of an attribute requiring:\n- that it be confirmed by a corresponding `#{attribute}_confirmation` attribute\n- that it not be persisted directly, but that only a value computed from it via a stretched cryptographic hash be persisted\n\nis a password.\n\nA `secure_password` is something very specific. A `secure #{anything}` is quite something else, and doesn't imply any of the same things. For example, other potential meanings of `secure` include:\n- Persisted in the clear alongside a keyed cryptographic checksum (hmac-sha-256).\n- Persisted in the clear alongside an access-control list.\n- Encrypted before persistence.\n", "created_at": "2011-06-02 19:06:23", "user": 169419, "id": 1283401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296520", "text": "Seriously, if you need a non-trivial authentication system, don't use `has_secure_password`. In 99% of cases, there is only one password, the field is called \"password\", and BCrypt is just fine.\n\nFor all other cases, rolling your own or using a plugin will be the way to go.\n\nThis should be a shortcut for the common case, not something that fits all corner cases.\n", "created_at": "2011-06-03 12:57:49", "user": 6351, "id": 1296520}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1305044", "text": "@yfeldblum, I think we're in complete agreement here. I don't want to see a generic `has_secure` feature because it could be misleading and is unlikely to actually be what people mean or want. The confirmation attribute that you mention is a clear distinction between passwords and most other things that were mentioned as a datum that might be stored securely.\n", "created_at": "2011-06-05 16:27:55", "user": 61409, "id": 1305044}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313978", "text": "Closing this as it is adding more features than what @tenderlove simply proposed. In general, we are -1 for adding more features to has_secure_password. If you want more customization, there are plenty auth tools out there.\n", "created_at": "2011-06-07 06:57:06", "user": 9582, "id": 1313978}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This reverts commit e4ebded5bcd4f54fee0c4f643c9df76aeb22436e.\n\n@josh \n\nAs this got reverted https://github.com/rack/rack/commit/bc30108180e2472423497657b55f7ccb8749a7a0\n", "labels": [], "number": 1160, "updated_at": "2014-09-03 17:43:38", "user": 3948, "closed_at": "2011-05-20 03:03:39", "id": 930230, "title": "Revert \"Use Rack::ContentLength.\"", "url": "https://api.github.com/repos/rails/rails/issues/1160", "created_at": "2011-05-20 02:59:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1161, "updated_at": "2014-07-03 04:30:37", "user": 160941, "closed_at": "2011-05-20 10:19:20", "id": 930399, "title": "Syntax cleanup:  for in => each on ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/1161", "created_at": "2011-05-20 04:14:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209156", "text": "I personally like the for loop, but #each is considered to be much more idiomatic for sure, and it is what the code base uses, so good :).\n", "created_at": "2011-05-20 10:18:59", "user": 3387, "id": 1209156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209162", "text": "Would be nice however, if it was done in one whole swoop though, so the core team doesnt have the hassle of doing smaller bit by bit commits?\n", "created_at": "2011-05-20 10:22:57", "user": 762, "id": 1209162}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This allow set pluralize_table_names for an individual class.\n\n```\nclass Post < ActiveRecord::Base\n  self.pluralize_table_names = false\nend\n```\n\nPreviously when you set it for a class it was used globally (We discuss a little about it here: https://github.com/rails/rails/pull/560#issuecomment-1165420)\n\ncc @jonleighton\n", "labels": [], "number": 1162, "updated_at": "2014-06-16 09:08:36", "user": 160941, "closed_at": "2011-05-21 08:30:08", "id": 930762, "title": "Singularize individual table name", "url": "https://api.github.com/repos/rails/rails/issues/1162", "created_at": "2011-05-20 07:04:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210347", "text": "+1\n", "created_at": "2011-05-20 14:36:55", "user": 9582, "id": 1210347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210412", "text": "@tenderlove and I discussed this the other day. We talked about the following situation:\n\n``` ruby\nclass Animal < AR::Base\nend\n\nclass Horse < Animal\n  self.pluralize_table_names = false\nend\n```\n\nNote that `Horse` and `Animal` will share the same table under usual circumstances.\n\n@tenderlove said that changing `pluralize_table_names` on the subclass _should_ affect the superclass in this scenario, since they normally share the same table. I agreed at the time.\n\nHowever, I now think the opposite. I think that in the above situation `Horse` and `Animal` should have the table names `animal` and `animals`, because:\n1. If changing the subclass affects the superclass, it is at the very least a code smell to make the change in the subclass\n2. I think we should treat this like `self.table_name` in the sense of \"whatever you would have called this table, call it the singular of that\"\n3. It seems more obvious to do it this way, and certainly the implementation will be simpler (the other way would need to deal with abstract classes appropriately as well)\n\nThoughts? (All this seems quite academic though as I can't envisage the above situation arising in real life.)\n", "created_at": "2011-05-20 14:49:47", "user": 1979, "id": 1210412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210550", "text": "Changing a subclass should not affect the superclass. If you want to affect everyone, the configuration option should be applied to Animal.\n", "created_at": "2011-05-20 15:16:41", "user": 9582, "id": 1210550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210961", "text": "@guilleiguaran your patch does not change `AliasTracker`, which currently checks `ActiveRecord::Base.pluralize_table_names`, which makes me wonder how `test_has_many_with_pluralize_table_names_false` still works with this patch. Could you investigate please?\n", "created_at": "2011-05-20 16:29:25", "user": 1979, "id": 1210961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213616", "text": "I've changed AliasTracker, take a look to the last commit. I'm investigating but I haven't found how was working without patch.\n", "created_at": "2011-05-21 04:41:49", "user": 160941, "id": 1213616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213920", "text": "Ah, just realised it would have worked before because all it's doing is generating an alias, not an actual table name. Merged.\n", "created_at": "2011-05-21 08:32:02", "user": 1979, "id": 1213920}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Let me propose a new Rails-3-ish cooler syntax for the database migrations.\nThis pull request enables you to remove the block parameter and t. t. t. t. t. t. t. ... from your migration code.\n\nThis is actually the same thing with what I posted here in January, so please refer to this ticket for details.\nhttps://rails.lighthouseapp.com/projects/8994/tickets/6339\n\nThe reasons why I made another pull request today are:\n- The attached patch on the ticket does not apply anymore to the current master\n- The proposal got many +1s from people\n- The ticket is in \"wontfix\" state (by mistake?), and maybe because of that, was not copied to GH issues\n- I think 3.1 is the best timing for including another change on the migration syntax\n- I guess @tenderlove have not looked at it yet\n\nSo, @tenderlove, can you please take a look at [the former ticket](https://rails.lighthouseapp.com/projects/8994/tickets/6339) and this pull request, then give me your thoughts?\nThanks in advance!\n", "labels": [], "number": 1163, "updated_at": "2014-06-13 06:47:54", "user": 11493, "closed_at": "2011-11-04 10:30:00", "id": 930954, "title": "Sexier migrations", "url": "https://api.github.com/repos/rails/rails/issues/1163", "created_at": "2011-05-20 08:20:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208714", "text": "If this pull request is applied I think this idiom should become the recommended one, and thus all example code in documentation would need to be updated to reflect that. Only the API docs of create_table would mention the block may receive a argument.\n", "created_at": "2011-05-20 08:26:57", "user": 3387, "id": 1208714}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208783", "text": "Yes, agree. And of course I'm willing to work on that when I'm sure the syntax will be accepted.\nI mean, I just wanted to know first whether you like it or not, before updating the whole documentation.\n", "created_at": "2011-05-20 08:42:23", "user": 11493, "id": 1208783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1208812", "text": "+1, looks sweet. Lets do this if we can.\nWe've got instance evals in routes already as a pre-cursor. \nMigrations aren't run very frequently so there would be negligible net performance impact. \nWe're already updating the migration syntax in Rails 3.1 so why not go a step further.\nIt's backward compatible as far as i can see.\n", "created_at": "2011-05-20 08:48:44", "user": 762, "id": 1208812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209159", "text": "+1 for simplified api, definitely have a more \"Rails 3 feel\"\n", "created_at": "2011-05-20 10:20:34", "user": 163774, "id": 1209159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209570", "text": "asanghi what he says +1\n", "created_at": "2011-05-20 12:16:52", "user": 127208, "id": 1209570}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1209619", "text": "I also give this a :+1:, but it is too late for it to go into 3.1 so we should return to this once 3.1 is out the door.\n", "created_at": "2011-05-20 12:28:52", "user": 1979, "id": 1209619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210387", "text": "I am in general -1 for instance eval. instance eval has its set of gotchas that does not make it worth imo.\n", "created_at": "2011-05-20 14:43:32", "user": 9582, "id": 1210387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210416", "text": "I'm OK with this change, but I want to see what methods we would expose by doing `instance_eval` before I full agree with this change.  Doing the instance eval will allow private methods to be exposed on the `table_definition` object, and that kind of worries me.\n\nIn any case, I agree with @jonleighton that this should be considered for 3.2.  I wish somebody would branch for 3.1 so we can start merging in 3.2 features.  :-P\n", "created_at": "2011-05-20 14:50:25", "user": 3124, "id": 1210416}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1210485", "text": "Given the `instance_eval` gotchas that @josevalim mentioned, and the fact that there are _tons_ of migrations out in the wild with the old syntax, I think both ways should be supported.  That way, old migrations do not break, and people who prefer the non-`instance_eval` syntax and still choose to avoid it.  Here's a simple way to accomplish that:\n\n``` ruby\nif blk.arity == 1\n  blk.call(td)\nelse\n  td.instance_eval(&blk)\nend\n```\n", "created_at": "2011-05-20 15:03:12", "user": 49391, "id": 1210485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1211399", "text": "+1\n", "created_at": "2011-05-20 17:45:20", "user": 4867, "id": 1211399}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1211657", "text": "We :heart: this already. The only stuff that really would later are a few blog posts as far as dissemination of information is concerned. Why wait til 3.2 to introduce yet more changes in migrations. If we're going to have this might as well make the changes now, still not too late. :+1: on @myronmarston's changes. \n", "created_at": "2011-05-20 18:33:07", "user": 762, "id": 1211657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212309", "text": "3.1 is feature complete. I have the same concern that @tenderlove has, it could be nice to see what are we going to expose to the table_definition objects.\n", "created_at": "2011-05-20 20:42:46", "user": 52642, "id": 1212309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216108", "text": "-1, I'd prefer we weren't adding extra code for the sake of making this two characters shorter per line\n", "created_at": "2011-05-22 02:07:14", "user": 2687, "id": 1216108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234640", "text": "+1, this seems in line with the direction Rails has taken, e.g. in the routing DSL.\n", "created_at": "2011-05-25 10:51:24", "user": 6351, "id": 1234640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234677", "text": "@radar please compare the time that it takes for a machine to interpret these lines, what three or four lines, and the time for a human to write those two characters. You'll find that this is +1\n\n+1 :)\n", "created_at": "2011-05-25 11:01:56", "user": 371940, "id": 1234677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2096890", "text": "+1.\n\nCleaner interfaces is always best.\n", "created_at": "2011-09-14 19:14:28", "user": 13167, "id": 2096890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2338349", "text": "This is a good candidate for 3.2, let's merge to master and update documentation.\n", "created_at": "2011-10-09 19:50:08", "user": 199, "id": 2338349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2510896", "text": "This is green for 3.2, we just need docs/guides updates.\n", "created_at": "2011-10-24 23:13:30", "user": 199, "id": 2510896}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2628946", "text": "+1\nThere isn't really much extra code, and the migrations look nicer.\n", "created_at": "2011-11-04 10:15:35", "user": 46878, "id": 2628946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2629192", "text": "FTR this doesn't have documentation. @tenderlove what about this suggestion?https://github.com/rails/rails/pull/1163#issuecomment-1210485\n", "created_at": "2011-11-04 10:45:09", "user": 146214, "id": 2629192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2633129", "text": "@vijaydev the suggestion seems good. Can you put together a pull request with tests?  Thanks!\n", "created_at": "2011-11-04 16:36:23", "user": 3124, "id": 2633129}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI am trying to install 'Rails 3.1 beta 1' on Windows 7. I have Ruby two versions installed -  'ruby 1.8.7 (2010-08-16 patchlevel 302) [i386-mingw32]' and 'ruby 1.9.2p180 (2011-02-18) [i386-mingw32]' and switching between them with pik.\n\nWhen I ran 'gem install rails --pre' with Ruby version 1.8.7, it gives me following error:\n<code>\nC:\\Users\\ritesh>gem install rails --pre\nSuccessfully installed multi_json-1.0.2\nSuccessfully installed activesupport-3.1.0.beta1\nSuccessfully installed builder-3.0.0\nSuccessfully installed i18n-0.6.0beta1\nSuccessfully installed activemodel-3.1.0.beta1\nSuccessfully installed rack-1.3.0.beta2\nSuccessfully installed rack-cache-1.0.2\nSuccessfully installed rack-test-0.6.0\nSuccessfully installed rack-mount-0.7.4\nSuccessfully installed hike-1.0.0\nSuccessfully installed tilt-1.3\nSuccessfully installed sprockets-2.0.0.beta.5\nSuccessfully installed erubis-2.7.0\nSuccessfully installed actionpack-3.1.0.beta1\nSuccessfully installed arel-2.1.1\nSuccessfully installed activerecord-3.1.0.beta1\nSuccessfully installed activeresource-3.1.0.beta1\nSuccessfully installed mail-2.3.0\nSuccessfully installed actionmailer-3.1.0.beta1\nSuccessfully installed rack-ssl-1.3.2\nSuccessfully installed railties-3.1.0.beta1\nSuccessfully installed rails-3.1.0.beta1\n22 gems installed\nInstalling ri documentation for multi_json-1.0.2...\nBuilding YARD (yri) index for multi_json-1.0.2...\nInstalling ri documentation for activesupport-3.1.0.beta1...\nBuilding YARD (yri) index for activesupport-3.1.0.beta1...\nInstalling ri documentation for builder-3.0.0...\nERROR:  While generating documentation for builder-3.0.0\n... MESSAGE:   Unhandled special: Special: type=17, text=\"<!-- HI -->\"\n... RDOC args: --ri --op C:/Ruby187/lib/ruby/gems/1.8/doc/builder-3.0.0/ri --title Builder -- Easy XML Building --main README.rdoc --line-numbers --quiet lib CHANGES Rakefile README README.rdoc TAGS doc/releases/builder-1.2.4.rdoc\n doc/releases/builder-2.0.0.rdoc doc/releases/builder-2.1.1.rdoc --title builder-3.0.0 Documentation\n(continuing with the rest of the installation)\nBuilding YARD (yri) index for builder-3.0.0...\nInstalling ri documentation for i18n-0.6.0beta1...\nBuilding YARD (yri) index for i18n-0.6.0beta1...\nInstalling ri documentation for activemodel-3.1.0.beta1...\nBuilding YARD (yri) index for activemodel-3.1.0.beta1...\nInstalling ri documentation for rack-1.3.0.beta2...\nBuilding YARD (yri) index for rack-1.3.0.beta2...\nInstalling ri documentation for rack-cache-1.0.2...\nBuilding YARD (yri) index for rack-cache-1.0.2...\nInstalling ri documentation for rack-test-0.6.0...\nBuilding YARD (yri) index for rack-test-0.6.0...\nInstalling ri documentation for rack-mount-0.7.4...\nBuilding YARD (yri) index for rack-mount-0.7.4...\nInstalling ri documentation for hike-1.0.0...\nBuilding YARD (yri) index for hike-1.0.0...\nInstalling ri documentation for tilt-1.3...\nBuilding YARD (yri) index for tilt-1.3...\nInstalling ri documentation for sprockets-2.0.0.beta.5...\nBuilding YARD (yri) index for sprockets-2.0.0.beta.5...\nInstalling ri documentation for erubis-2.7.0...\nBuilding YARD (yri) index for erubis-2.7.0...\nInstalling ri documentation for actionpack-3.1.0.beta1...\nBuilding YARD (yri) index for actionpack-3.1.0.beta1...\nBuilding YARD (yri) index for arel-2.1.1...\nInstalling ri documentation for activerecord-3.1.0.beta1...\nBuilding YARD (yri) index for activerecord-3.1.0.beta1...\nInstalling ri documentation for activeresource-3.1.0.beta1...\nBuilding YARD (yri) index for activeresource-3.1.0.beta1...\nInstalling ri documentation for mail-2.3.0...\nBuilding YARD (yri) index for mail-2.3.0...\nInstalling ri documentation for actionmailer-3.1.0.beta1...\nBuilding YARD (yri) index for actionmailer-3.1.0.beta1...\nInstalling ri documentation for rack-ssl-1.3.2...\nBuilding YARD (yri) index for rack-ssl-1.3.2...\nInstalling ri documentation for railties-3.1.0.beta1...\nBuilding YARD (yri) index for railties-3.1.0.beta1...\n[error]: Unhandled exception in YARD::Handlers::Ruby::Legacy::ModuleHandler:\n[error]:   in `lib/rails/generators/rails/plugin_new/templates/lib/%name%/engine.rb`:1:\n\n```\n     1: module <%= camelized %>\n```\n\n[error]: ArgumentError: invalid empty object name\n[error]: Stack trace:\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/code_objects/base.rb:167:in `new'\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/handlers/ruby/legacy/module_handler.rb:7:in`process'\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/handlers/processor.rb:90:in `process'\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/handlers/processor.rb:88:in`each'\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/handlers/processor.rb:88:in `process'\n        C:/Ruby187/lib/ruby/gems/1.8/gems/yard-0.6.3/lib/yard/handlers/ruby/legacy/class_handler.rb:54:in`each_with_index'\n\nInstalling ri documentation for rails-3.1.0.beta1...\nFile not found: lib\n</code>\nIt installed successfully with Ruby 1.9.2. For a detailed log, you can refer to post :\nhttp://rorguide.blogspot.com/2011/05/gem-install-rails-pre-command-break.html\n\nI don't know whether this is a bug or a incompatibility issue. Please help.\n\nThanks,\nRitesh Kumar\n", "labels": [], "number": 1164, "updated_at": "2013-07-10 01:33:45", "user": 417359, "closed_at": "2011-05-27 06:01:25", "id": 931035, "title": "'gem install rails --pre' throwing 'File not found: lib' error with Ruby 1.8.7 on Windows7", "url": "https://api.github.com/repos/rails/rails/issues/1164", "created_at": "2011-05-20 08:47:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214883", "text": "Try a gem install rdoc. I had the same problem before on OSX. Found this solution and it worked for me: http://stackoverflow.com/questions/2709683/ruby-on-rails-beta-3-install-problem-on-snow-leopard\n", "created_at": "2011-05-21 16:41:49", "user": 67093, "id": 1214883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227239", "text": "Thanks, it worked. \nI ran the command \"gem install rdoc\" first and then \"gem install rails --pre\". \n\nAlthough it displays line \"file 'lib' not found\" twice, but the installation gets completed successfully.\n", "created_at": "2011-05-24 10:08:23", "user": 417359, "id": 1227239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244292", "text": "Yeah, I'm not entirely sure what the issue is, but it seems that it could be with the gem packaging. I think this issue can be closed.\n", "created_at": "2011-05-26 18:23:16", "user": 67093, "id": 1244292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247377", "text": "Ok, as installation gets completed successfully, so closing this issue.\n", "created_at": "2011-05-27 06:01:25", "user": 417359, "id": 1247377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1503474", "text": "This is because rdoc loads this directory to generate the documentation. By default, this is \"lib\".\nAnd the rails gem does not have any lib directory.\n\nThis was fixed in e7fc5d1cad27e47d3d0149a2b9a61d074c30f225. But it raised other problems so it was reverted.\nA fix should arrive soon.\n", "created_at": "2011-07-05 12:59:27", "user": 9347, "id": 1503474}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Not updating rubyforge for new versions. \n\nResult of \"gem list -d rails\" is not useful.\n\nhttp://rubyforge.org/projects/rails displaying 2.3.3 version :-)\n", "labels": [], "number": 1165, "updated_at": "2014-06-27 17:57:04", "user": 3948, "closed_at": "2011-05-21 11:55:44", "id": 931700, "title": "Not updating rubyforge for new versions. ", "url": "https://api.github.com/repos/rails/rails/issues/1165", "created_at": "2011-05-20 12:13:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213873", "text": "/ cc @josevalim ;-)\n", "created_at": "2011-05-21 07:49:42", "user": 3948, "id": 1213873}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Simple patch that allows the user to check if an integer is multiple_of many numbers at the same time.\n\nFor example:\n12.multiple_of?(6)\n12.multiple_of?(2,6)\n\nHope this helps someone else,\nAlberto.\n", "labels": [], "number": 1166, "updated_at": "2014-07-03 04:30:55", "user": 15064, "closed_at": "2011-05-22 14:29:24", "id": 932062, "title": "Multiple_of methods accepting many parameters rather than only one.", "url": "https://api.github.com/repos/rails/rails/issues/1166", "created_at": "2011-05-20 13:45:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213944", "text": "Using multiple_of? for evaluating more than 1 variable using the existing method is completely wrong. We feel that when more than one variable has to be used, then we have to use an array as most of the times they are dynamic information rather than static. which means i could test 30 with 2,3,5 or 3,5  we or just 5 however these would have to be added as an array which means \n\n multiple_of?(*numbers) will fail if the numbers are passed as a dynamic array.\n\n-- Satish N Kota & Manoj\n", "created_at": "2011-05-21 08:51:30", "user": 374397, "id": 1213944}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213987", "text": "Can't we just multiply what we pass to `multiple_of` ?\n\n``` ruby\nmy_ary = [2,6]\n12.multiple_of?(my_ary.inject(:*))\n```\n\nor are my Saturday morning mathematics broken? :)\n", "created_at": "2011-05-21 09:24:31", "user": 108369, "id": 1213987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214024", "text": "@cesario you are correct to an extent...\n\n12.multiple_of(my_arr.inject(:*)) works fine if your is [2,6]\n\nbut \n\n6.multiple_of(my_arr.inject(:*)) fails if your is [2,6] and\n6.multiple_of(2,6) works fine\n", "created_at": "2011-05-21 09:45:23", "user": 374397, "id": 1214024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214307", "text": "No offense, but this is some poorly written piece of code. Most notable errors to me:\n- The use of `#inject` must have originated from a good intention, but if you have to `break` inside the block, it's making it more complicated than it should be. Using `#all?` would break as soon as the block would return false, in addition to resulting in a more concise code.\n- A ternary operation to return either `true` or `false`!?\n- If this method is added, it must be available for all numeric values, not just integers. Regardless of whether a numeric value is a `Float` or an `Integer`, one would expect it to respond to `#multiple_of?` with no prior cast to an `Integer`.\n\nThe whole method could be reduced to a single line:\n\n``` ruby\nclass Numeric\n  def multiple_of?(*numbers)\n    zero? || numbers.all? { |n| n.nonzero? && modulo(n).zero? }\n  end\nend\n```\n\nThe gist with a small inline test: https://gist.github.com/984482\n", "created_at": "2011-05-21 12:45:08", "user": 2480, "id": 1214307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217350", "text": "Following what Roman2K has suggested on https://github.com/rails/rails/pull/1166#issuecomment-1214307, I've change the code.\n", "created_at": "2011-05-22 14:22:57", "user": 15064, "id": 1217350}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In the [docs](http://edgeapi.rubyonrails.org/classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources) we have:\n\n> Generates shallow routes for nested resource(s). When placed on a parent resource, generates shallow routes for all nested resources.\n\n```\nresources :posts, :shallow => true do\n  resources :comments\nend\n```\n\n> Is the same as:\n\n```\nresources :posts do\n  resources :comments\nend\nresources :comments\n```\n\nWhile it's not true. Given this example:\n\n```\nresources :foo, :shallow => true do\n  resources :bar\nend\n```\n\nGenerates the following routes:\n\n```\nfoo_bar_index GET    /foo/:foo_id/bar(.:format)     {:action=>\"index\", :controller=>\"bar\"}\n              POST   /foo/:foo_id/bar(.:format)     {:action=>\"create\", :controller=>\"bar\"}\n  new_foo_bar GET    /foo/:foo_id/bar/new(.:format) {:action=>\"new\", :controller=>\"bar\"}\n     edit_bar GET    /bar/:id/edit(.:format)        {:action=>\"edit\", :controller=>\"bar\"}\n          bar GET    /bar/:id(.:format)             {:action=>\"show\", :controller=>\"bar\"}\n              PUT    /bar/:id(.:format)             {:action=>\"update\", :controller=>\"bar\"}\n              DELETE /bar/:id(.:format)             {:action=>\"destroy\", :controller=>\"bar\"}\n    foo_index GET    /foo(.:format)                 {:action=>\"index\", :controller=>\"foo\"}\n              POST   /foo(.:format)                 {:action=>\"create\", :controller=>\"foo\"}\n      new_foo GET    /foo/new(.:format)             {:action=>\"new\", :controller=>\"foo\"}\n     edit_foo GET    /foo/:id/edit(.:format)        {:action=>\"edit\", :controller=>\"foo\"}\n          foo GET    /foo/:id(.:format)             {:action=>\"show\", :controller=>\"foo\"}\n              PUT    /foo/:id(.:format)             {:action=>\"update\", :controller=>\"foo\"}\n              DELETE /foo/:id(.:format)             {:action=>\"destroy\", :controller=>\"foo\"}\n```\n\nWhile:\n\n```\nresources :foo do\n  resources :bar\nend\nresources :bar\n```\n\nGenerates:\n\n```\nfoo_bar_index GET    /foo/:foo_id/bar(.:format)          {:action=>\"index\", :controller=>\"bar\"}\n              POST   /foo/:foo_id/bar(.:format)          {:action=>\"create\", :controller=>\"bar\"}\n  new_foo_bar GET    /foo/:foo_id/bar/new(.:format)      {:action=>\"new\", :controller=>\"bar\"}\n edit_foo_bar GET    /foo/:foo_id/bar/:id/edit(.:format) {:action=>\"edit\", :controller=>\"bar\"}\n      foo_bar GET    /foo/:foo_id/bar/:id(.:format)      {:action=>\"show\", :controller=>\"bar\"}\n              PUT    /foo/:foo_id/bar/:id(.:format)      {:action=>\"update\", :controller=>\"bar\"}\n              DELETE /foo/:foo_id/bar/:id(.:format)      {:action=>\"destroy\", :controller=>\"bar\"}\n    foo_index GET    /foo(.:format)                      {:action=>\"index\", :controller=>\"foo\"}\n              POST   /foo(.:format)                      {:action=>\"create\", :controller=>\"foo\"}\n      new_foo GET    /foo/new(.:format)                  {:action=>\"new\", :controller=>\"foo\"}\n     edit_foo GET    /foo/:id/edit(.:format)             {:action=>\"edit\", :controller=>\"foo\"}\n          foo GET    /foo/:id(.:format)                  {:action=>\"show\", :controller=>\"foo\"}\n              PUT    /foo/:id(.:format)                  {:action=>\"update\", :controller=>\"foo\"}\n              DELETE /foo/:id(.:format)                  {:action=>\"destroy\", :controller=>\"foo\"}\n    bar_index GET    /bar(.:format)                      {:action=>\"index\", :controller=>\"bar\"}\n              POST   /bar(.:format)                      {:action=>\"create\", :controller=>\"bar\"}\n      new_bar GET    /bar/new(.:format)                  {:action=>\"new\", :controller=>\"bar\"}\n     edit_bar GET    /bar/:id/edit(.:format)             {:action=>\"edit\", :controller=>\"bar\"}\n          bar GET    /bar/:id(.:format)                  {:action=>\"show\", :controller=>\"bar\"}\n              PUT    /bar/:id(.:format)                  {:action=>\"update\", :controller=>\"bar\"}\n              DELETE /bar/:id(.:format)                  {:action=>\"destroy\", :controller=>\"bar\"}\n```\n\nSo, basically, these routes are missing:\n\n```\n   bar_index GET    /bar(.:format)                      {:action=>\"index\", :controller=>\"bar\"}\n             DELETE /foo/:foo_id/bar/:id(.:format)      {:action=>\"destroy\", :controller=>\"bar\"}\nedit_foo_bar GET    /foo/:foo_id/bar/:id/edit(.:format) {:action=>\"edit\", :controller=>\"bar\"}\n     foo_bar GET    /foo/:foo_id/bar/:id(.:format)      {:action=>\"show\", :controller=>\"bar\"}\n     new_bar GET    /bar/new(.:format)                  {:action=>\"new\", :controller=>\"bar\"}\n             POST   /foo/:foo_id/bar(.:format)          {:action=>\"create\", :controller=>\"bar\"}\n             PUT    /foo/:foo_id/bar/:id(.:format)      {:action=>\"update\", :controller=>\"bar\"}\n```\n\nrelated:\n- https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L1116\n", "labels": [], "number": 1167, "updated_at": "2011-06-05 01:00:32", "user": 4867, "closed_at": "2011-05-21 05:53:16", "id": 932207, "title": "shallow routes doesn't work as the doc says", "url": "https://api.github.com/repos/rails/rails/issues/1167", "created_at": "2011-05-20 14:24:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213704", "text": "Docs are wrong - the routes generated are the same as what was generated in Rails 2.3. The docs should say something like this:\n\n```\nresources :foo do\n  resources :bar, :except => [:show, edit, :update, :destroy]\nend\nresources :bar, :only => [:show, edit, :update, :destroy]\n```\n\nThe intent of the shallow option is provide the shortest possible url, for example a comment on a blog post can just be linked as `/comments/123424` rather than `/posts/a-very-long-title-that-acts-as-a-permalink/comments/123424`.\n", "created_at": "2011-05-21 05:53:16", "user": 6321, "id": 1213704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1303193", "text": "@pixeltrix thanks :)\n", "created_at": "2011-06-05 01:00:32", "user": 4867, "id": 1303193}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In applications with a lot of namespaces and legacy code it comes in very handy to overwrite the name, which rails uses to generate routes etc. It would be great if ActiveModel::Name would accept another String argument to specify the name, which should be used. This specified name then takes precedence over klass.name.\n\n``` ruby\nclass CustomerLocation < ActiveRecord::Base  \n  def self.model_name  \n    ActiveModel::Name.new(self, nil, \"Location\")  \n  end  \nend  \n```\n", "labels": [], "number": 1168, "updated_at": "2011-05-20 15:17:01", "user": 5402, "closed_at": "2011-05-20 15:17:01", "id": 932304, "title": "specify a custom name for ActiveModel::Name", "url": "https://api.github.com/repos/rails/rails/issues/1168", "created_at": "2011-05-20 14:47:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This patch allows to specify the name of your models independent of the class name.\n\nI added a third Argument to the #initialize method to maintain backward compatibility. It would probably be cleaner to add an options hash after the class, which contains the namespace and the name options.\n\nThis request solves the issue #1168\n", "labels": [], "number": 1169, "updated_at": "2014-06-18 11:46:23", "user": 5402, "closed_at": "2011-05-20 15:17:19", "id": 932324, "title": "Specify the name to be used for ActiveModel::Name fixes #1168", "url": "https://api.github.com/repos/rails/rails/issues/1169", "created_at": "2011-05-20 14:53:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since Rails 3.1, attr_accessible now allows roles to be passed by an `:as` option. However, `find_or_initialize_by` and `find_or_create_by` do not accept this option.\n", "labels": [], "number": 1170, "updated_at": "2013-11-10 18:26:56", "user": 4338, "closed_at": "2011-05-21 15:34:52", "id": 932816, "title": "find_or_initialize_by doesn't accept role", "url": "https://api.github.com/repos/rails/rails/issues/1170", "created_at": "2011-05-20 16:56:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213799", "text": "@josevalim we need to extract the options out of the args array in this method to fix this issue:\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/finder_methods.rb#L266\n\nHow would you prefer me to do it - as I see it there are two ways:\n1. Detect if there are two hashes in args\n2. Detect if the last arg is a hash and does it contain a valid option key\n\nNumber two seems more hassle to maintain. Number one will miss the options hash if no attributes hash is passed, e.g:\n\n```\nPost.find_or_initialize_by_author_id(params[:author_id], :as => :admin)\n```\n\nHowever this makes no difference to the actual outcome as there are no attributes to be mass-assigned - the author_id attribute is assigned using `:without_protection`.\n", "created_at": "2011-05-21 07:16:08", "user": 6321, "id": 1213799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213847", "text": "Let's go with two hashes as It makes the API and the boundary more explicit.\n", "created_at": "2011-05-21 07:35:36", "user": 9582, "id": 1213847}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214068", "text": "We have added some failing specs in https://github.com/rails/rails/pull/1183\n\nWhat is the expected behavior?\n", "created_at": "2011-05-21 10:12:56", "user": 134173, "id": 1214068}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I just did a fresh 3.1 beta install and bundler installed the newly released rake 0.9.0. Here's the output of any rake tasks I try to run:\n\nrake aborted!\nundefined method `task' for #TestApp::Application:0x000001010d6978\n\nSpecifying rake 0.8.7 in my Gemfile and uninstalling 0.9.0 cleared it up for now.\n", "labels": [], "number": 1171, "updated_at": "2011-05-22 00:54:40", "user": 259967, "closed_at": "2011-05-22 00:54:40", "id": 933064, "title": "Rake 0.9.0 not working with 3.1 beta1", "url": "https://api.github.com/repos/rails/rails/issues/1171", "created_at": "2011-05-20 17:52:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1211715", "text": "It's basically because of [this](https://github.com/jimweirich/rake/blob/master/CHANGES) (I think):\n\n> Removed Rake's DSL methods from the top level scope.  If you need to\n> call 'task :xzy' in your code, include Rake::DSL into your class, or\n> put the code in a Rake::DSL.environment do ... end block.\n", "created_at": "2011-05-20 18:40:18", "user": 4867, "id": 1211715}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1211900", "text": "Just, FYI, this is also broken in 3.0.7 and I can confirm that the fix proposed by plentz (as well as the one proposed [here](http://stackoverflow.com/questions/5287121/undefined-method-task-using-rake-0-9-0-beta-4/5290331#5290331) ) does seem to fix it.\n", "created_at": "2011-05-20 19:13:47", "user": 59451, "id": 1211900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212032", "text": "I have the same problem with 3.0.7 and I fix this following [here](http://stackoverflow.com/questions/5287121/undefined-method-task-using-rake-0-9-0-beta-4/5290331#5290331)\n", "created_at": "2011-05-20 19:42:58", "user": 46654, "id": 1212032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212499", "text": "same here with 3.1 beta1\n", "created_at": "2011-05-20 21:31:13", "user": 752058, "id": 1212499}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213437", "text": "Ditto. What everyone said. 3.0.7 here.\n", "created_at": "2011-05-21 02:22:45", "user": 339051, "id": 1213437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213511", "text": "I've fixed this on master and sent a [pull request](https://github.com/rails/rails/pull/1174).  As mentioned there, it can use a back-port to 3-0-stable to fix the problems people are seeing with 3.0.7\n", "created_at": "2011-05-21 03:16:31", "user": 61120, "id": 1213511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214911", "text": "FYI, that paragraph from Rake's CHANGES file is old:<blockquote>Removed Rake's DSL methods from the top level scope.  If you need to call 'task :xzy' in your code, include Rake::DSL into your class, or put the code in a Rake::DSL.environment do ... end block.</blockquote> The DSL methods are still available from the toplevel scope (via the toplevel object being extended with Rake::DSL), and Rake::DSL.environment doesn't exist. The middle part, \"If you need to call 'task :xzy' in your code, include Rake::DSL into your class,\" is still valid advice.\n", "created_at": "2011-05-21 16:53:05", "user": 15971, "id": 1214911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216002", "text": "If someone wants to get a backport going for 3-0-stable, that'd be great. I got @bilts fix in on master.\n", "created_at": "2011-05-22 00:54:40", "user": 2741, "id": 1216002}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It's a regex bug. In `railties/lib/rails/application/configuration.rb:37`, the regex fails to match due to the `$` on the end. It should be changed to:\n\n```\n/\\w+\\.(?!js$|css$)/\n```\n", "labels": [], "number": 1172, "updated_at": "2011-05-20 22:13:31", "user": 4338, "closed_at": "2011-05-20 22:13:31", "id": 934130, "title": "[patch] assets.precompile doesn't include non-JS/CSS as advertised", "url": "https://api.github.com/repos/rails/rails/issues/1172", "created_at": "2011-05-20 22:11:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1212685", "text": "Seems this is already fixed in master, actually.\n", "created_at": "2011-05-20 22:13:31", "user": 4338, "id": 1212685}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "i18n is used for even basic parts like core_ext/string, so really, it's a dependency\n", "labels": [], "number": 1173, "updated_at": "2014-06-16 06:12:24", "user": 348, "closed_at": "2011-05-22 11:31:40", "id": 934522, "title": "Missing i18n dependency on ActiveSupport ?", "url": "https://api.github.com/repos/rails/rails/issues/1173", "created_at": "2011-05-21 00:41:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216917", "text": "Yeah, I have tried to decouple this but I believe it had brought more pain than fixed a problem. I will merge this after we move 3.1 to a branch.\n", "created_at": "2011-05-22 10:52:30", "user": 9582, "id": 1216917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216995", "text": "I have added i18n dependency back to AS. thanks bro.\n", "created_at": "2011-05-22 11:31:40", "user": 9582, "id": 1216995}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes incompatibility introduced by Rake 0.9.0\n\nAs of Rake 0.9.0, methods such as 'task' are no longer available globally.  They're placed in Rake::DSL instead.  This breaks Rails::Application's initialize_tasks method.  It also breaks subclasses of Railties which call Rake's methods in a rake_tasks block.\n\nI've updated Rails::Railtie to extend Rake::DSL (if available) before loading tasks, so that formerly-global rake methods can still be called within rake_tasks blocks.  I also updated Rails::Application to add its tasks within a rake_task block so it can use the rake DSL methods without issues.\n\nThis fixes [issue 1171](https://github.com/rails/rails/issues/1171).  The code is compatible with Rake 0.9.0 and Rake 0.8.7.  \n\nThe change needs to be back-ported to the 3-0-stable branch as well.\n", "labels": [], "number": 1174, "updated_at": "2014-06-13 20:14:33", "user": 61120, "closed_at": "2011-05-21 16:57:44", "id": 934794, "title": "Make Rake::DSL methods available within Railtie rake_tasks block", "url": "https://api.github.com/repos/rails/rails/issues/1174", "created_at": "2011-05-21 03:08:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214072", "text": "+1, This is a valid patch and fixes many of the failing tests.\n", "created_at": "2011-05-21 10:15:33", "user": 278, "id": 1214072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214169", "text": "+1\nThis fixes failing tests in railties and allows a rails 3.1.0.beta-1 app to run rake tasks! :)\n", "created_at": "2011-05-21 11:21:11", "user": 14514, "id": 1214169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214775", "text": "I wonder if we should wait an see what happens with Rake 0.9.1. The change was very backwards incompatible. You'd think they'd at least go to Rake 1.0 to make it.\n", "created_at": "2011-05-21 16:01:45", "user": 2741, "id": 1214775}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637728", "text": "Unclear if this is in 3-1-stable branch. \n\nGetting these messages during RUBYOPTS=\"-W0\" rake test:\n\n ...WARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Class#task called at /Users/whitemac/source/rails/railties/tmp/app/config/application.rb:48:in `block in <class:Application>'\n..WARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Class#task called at /Users/whitemac/source/rails/railties/tmp/app/config/application.rb:44:in`block in class:Application'**\n", "created_at": "2011-07-23 15:19:41", "user": 43523, "id": 1637728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637766", "text": "Here my Gist of my run\n\nhttps://gist.github.com/1101548\n", "created_at": "2011-07-23 15:33:37", "user": 43523, "id": 1637766}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nattr_accessor_with_default is deprecated, so lets not use it in ActiveResource.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1175, "updated_at": "2014-06-17 19:40:42", "user": 8701, "closed_at": "2011-05-21 05:21:29", "id": 935002, "title": "attr_accessor_with_default removed from ActiveResource", "url": "https://api.github.com/repos/rails/rails/issues/1175", "created_at": "2011-05-21 05:06:42", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey guys,\n\nThis patch allows use object.fetch(:method, 'default return') instead: object.respond_to?(:method) ? object.method : 'default return'\n\nIt's is a shortcut that i've been using\n\nHope this helps someone else\n", "labels": [], "number": 1176, "updated_at": "2014-07-03 04:31:23", "user": 46654, "closed_at": "2011-05-24 15:06:09", "id": 935025, "title": "Add support for fetch methods or return the default value informed", "url": "https://api.github.com/repos/rails/rails/issues/1176", "created_at": "2011-05-21 05:22:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214070", "text": "Why not use `#try` ?\n", "created_at": "2011-05-21 10:13:23", "user": 9347, "id": 1214070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214209", "text": "@dmathieu #try returns nil if the method is not supported.\n@ricardohsd I don't see real use for this, better do `@person.try(:to_model) || @person` - it's even almost the same amount of keystrokes.\n", "created_at": "2011-05-21 11:44:50", "user": 2195, "id": 1214209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214465", "text": "@NoKarma but if the object don't respond to :some_method when you try @person.try(:some_method) || @person will raise NoMethodError.\n\nWith the proposed fetch method, if the object don't respond to :some_method it will return the last argument if present or nil. @person.fetch(:some_method, @person)\n\nThis is a shortcut to: @person.respond_to?(:some_method) ? @person.some_method : @person\n", "created_at": "2011-05-21 13:59:07", "user": 46654, "id": 1214465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214580", "text": "It's a nice shortcut but I'm not able to say if it could be widely useful. Lately, i've been thinking a lot about core_ext in rails code. I think we need a sort of workflow for additions. I mean just some guidelines on how to propose new core_ext. Maybe it could just be a post in rails-core group.\n", "created_at": "2011-05-21 14:45:01", "user": 124274, "id": 1214580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215337", "text": "We could avoid raising NoMethodErrors on try when the method doesn't exists.\n", "created_at": "2011-05-21 19:49:27", "user": 9347, "id": 1215337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215665", "text": "I've added a pull request about that : https://github.com/rails/rails/pull/1195\n", "created_at": "2011-05-21 21:47:46", "user": 9347, "id": 1215665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228803", "text": "try doesn't raises on NoMethodException anymore. I think this ticket should be closed.\n\ncc @josevalim\n", "created_at": "2011-05-24 14:59:32", "user": 9347, "id": 1228803}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nFixed some ruby 19 warnings, including circular requires and variable name reuse.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1177, "updated_at": "2014-07-03 04:31:27", "user": 8701, "closed_at": "2011-05-21 05:23:59", "id": 935026, "title": "Fixed some ruby 19 warnings", "url": "https://api.github.com/repos/rails/rails/issues/1177", "created_at": "2011-05-21 05:22:11", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nSorry, the last commit didn't include one of the files, my bad.\n\nEnjoy,\n\nJosh \n\nps. I tried to correct it but José was to fast\n", "labels": [], "number": 1178, "updated_at": "2014-06-18 17:07:35", "user": 8701, "closed_at": "2011-05-21 05:31:51", "id": 935034, "title": "Corrected a minor ruby19 variable name reuse warning", "url": "https://api.github.com/repos/rails/rails/issues/1178", "created_at": "2011-05-21 05:28:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed failing tests \n", "labels": [], "number": 1179, "updated_at": "2014-06-17 07:36:32", "user": 68955, "closed_at": "2011-05-21 07:37:25", "id": 935188, "title": "fixed failing tests of ActiveSupport for deprecation test", "url": "https://api.github.com/repos/rails/rails/issues/1179", "created_at": "2011-05-21 07:33:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Documentation Error fixed for the ticket #839.\n", "labels": [], "number": 1180, "updated_at": "2014-07-03 04:31:35", "user": 16808, "closed_at": "2011-05-21 17:39:35", "id": 935192, "title": "Documentation Error Fixed for ticket #839", "url": "https://api.github.com/repos/rails/rails/issues/1180", "created_at": "2011-05-21 07:34:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1213870", "text": "/cc @fxn\n", "created_at": "2011-05-21 07:47:59", "user": 16808, "id": 1213870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215017", "text": "Thanks.\n\nPlease feel free to fix documentation via docrails, it has public write access.\n", "created_at": "2011-05-21 17:39:15", "user": 3387, "id": 1215017}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Example Action Mailer Deliver Method changes updated For #761\n", "labels": [], "number": 1181, "updated_at": "2014-07-03 04:31:38", "user": 16808, "closed_at": "2011-05-23 11:16:05", "id": 935255, "title": "Example Action mailer deliver method changes Ticket #761", "url": "https://api.github.com/repos/rails/rails/issues/1181", "created_at": "2011-05-21 08:42:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221091", "text": "Closing this as already accepted in prior pull request\n", "created_at": "2011-05-23 11:16:05", "user": 16808, "id": 1221091}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Check for Module.new.dup as well in https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/duplicable.rb\n", "labels": [], "number": 1182, "updated_at": "2014-06-13 04:06:18", "user": 295689, "closed_at": "2011-05-21 11:57:43", "id": 935290, "title": "Enhanced test for duplicable in  active_support/core_ext/object/duplicable.rb", "url": "https://api.github.com/repos/rails/rails/issues/1182", "created_at": "2011-05-21 09:21:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Failing test case for #1170\n\nIf you pass the attributes as a hash and add another hash with :as => :role, no attribute is assigned. \n\nWhat is the expected behavior? \n", "labels": [], "number": 1183, "updated_at": "2014-06-17 10:24:24", "user": 134173, "closed_at": "2011-05-21 15:38:10", "id": 935359, "title": "failing test case for issue 1170", "url": "https://api.github.com/repos/rails/rails/issues/1183", "created_at": "2011-05-21 10:11:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214719", "text": "Thanks for the patch but the tests weren't right so I couldn't use it.\n", "created_at": "2011-05-21 15:38:10", "user": 6321, "id": 1214719}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "db:schema:dump\n", "labels": [], "number": 1184, "updated_at": "2014-06-26 15:40:39", "user": 278, "closed_at": "2011-05-23 07:21:20", "id": 935370, "title": "Fixes connection_not established error while running db:schema:dump", "url": "https://api.github.com/repos/rails/rails/issues/1184", "created_at": "2011-05-21 10:22:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214196", "text": "+1 this patch fixes the issue.\n\nBut why doesn't the following work on it's own anymore?\n\n``` ruby\nActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)\n```\n", "created_at": "2011-05-21 11:33:41", "user": 14514, "id": 1214196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220217", "text": "/cc @tenderlove can you pull this one?\n", "created_at": "2011-05-23 06:58:36", "user": 278, "id": 1220217}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Reasons :\n1.  rake_test_loader.rb in rake-0.9.0 loading twice cause test failing \n   <pre>\n   1) Failure:\n   test_uniq_load_paths(LoadPathsTest)\n   [/home/ubuntu/clones/rails/activesupport/test/load_paths_test.rb:14:in `test_uniq_load_paths'\n    /home/ubuntu/clones/rails/tmp/bundle/ruby/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in`**send**'\n    /home/ubuntu/clones/rails/tmp/bundle/ruby/1.8/gems/mocha-0.9.12/lib/mocha/integration/test_unit/ruby_version_186_and_above.rb:22:in `run']:\n\n</pre>\n1. https://github.com/rails/rails/pull/1174 \n\nI think we need to wait for newer version.\n", "labels": [], "number": 1185, "updated_at": "2014-07-03 04:31:49", "user": 3948, "closed_at": "2011-05-21 15:59:48", "id": 935424, "title": "For now using older rake version. ", "url": "https://api.github.com/repos/rails/rails/issues/1185", "created_at": "2011-05-21 11:05:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214768", "text": "Closing this as fixed by @dhh here https://github.com/rails/rails/compare/09daaaa1e0...f3c3a785bd\n\n:)\n", "created_at": "2011-05-21 15:59:48", "user": 3948, "id": 1214768}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Duplicable test is looking fine now. \n", "labels": [], "number": 1186, "updated_at": "2014-06-27 22:44:21", "user": 24949, "closed_at": "2011-07-24 15:20:17", "id": 935543, "title": "Duplicable test is looking fine now.", "url": "https://api.github.com/repos/rails/rails/issues/1186", "created_at": "2011-05-21 12:29:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226203", "text": "/cc @josevalim , I think this can go in.\n", "created_at": "2011-05-24 05:39:33", "user": 24949, "id": 1226203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1640912", "text": "/cc @spastorino commits rebased, pull request updated.\n", "created_at": "2011-07-24 14:30:14", "user": 24949, "id": 1640912}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ActiveRecord::Associations::BelongsToPolymorphicAssociation#klass` returns a wrong value if the `polymorphic_type` attribute contains an empty string (`''.constantize` returns an `Object` instead of `nil`).\n", "labels": [], "number": 1187, "updated_at": "2014-07-02 05:19:17", "user": 15688, "closed_at": "2011-05-21 16:43:49", "id": 935619, "title": "Handle polymorphic_type NOT NULL columns", "url": "https://api.github.com/repos/rails/rails/issues/1187", "created_at": "2011-05-21 13:22:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On 1.8 when using `ActiveSupport`'s implementation of the `BasicObject` if some `Object` extensions are loaded after the `active_support/basic_object` the do sneak their methods into `BasicObject` as well. In this case `BasicObject` ends up using `Object#duplicable?` instead of `Fixnum#duplicable?`.\n\nThis should got both into `master` and `3-0-stable`.\n", "labels": [], "number": 1188, "updated_at": "2014-07-03 04:31:57", "user": 15688, "closed_at": "2011-05-21 17:42:08", "id": 935654, "title": "Fix AS::Duration#duplicable? on 1.8", "url": "https://api.github.com/repos/rails/rails/issues/1188", "created_at": "2011-05-21 13:38:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi guys!\n\nThis patch adds the method FormHelper#fields_for_with_index which may be useful in situations where you need to access to the current child index while invoking field_for on a collection.\n\nThis feature is inspired on the discussion under the following open issue: https://github.com/rails/rails/issues/642.\n\nAlthough I guess it's not a very common situation, I had to figure out how to access to the child index a few times. In the meanwhile, the best solution that I found it's the following:\n\nhttp://stackoverflow.com/questions/4853373/rails-fields-for-with-index\n\nHowever, the proposed method would allow us to write the same code more concisely, leaving to Rails the responsibility of iterating over collection members.\n\nHope it helps!\n\nCheers,\nRegards\n", "labels": [], "number": 1189, "updated_at": "2014-06-16 05:11:40", "user": 487140, "closed_at": "2011-05-22 11:26:40", "id": 935925, "title": "Add method FormHelper#fields_for_with_index", "url": "https://api.github.com/repos/rails/rails/issues/1189", "created_at": "2011-05-21 16:08:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215019", "text": "Wouldnt this be better as an extra option to fields for?\n", "created_at": "2011-05-21 17:40:13", "user": 9582, "id": 1215019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215314", "text": "Hi Jose,\n\nDo you mean allowing an extra parameter in the block passed to fields_for?\n\nIn fact, my first try was following this approach, checking if the passed block has more than one parameter, in which case I setted the current child index value in the second param.\n\nFinally, I have chosen the fields_for_with_index option based on the existent discussion in the open ticket, and also thinking in the Enumerable methods each and each_with_index.. \nHowever, allowing a second parameter in the block used to invoke fields_for seems to be a feasible option as well.\n", "created_at": "2011-05-21 19:38:57", "user": 487140, "id": 1215314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215402", "text": "Sorry, I misunderstood you, your pull request is fine. I will assign it to 3.2 milestone. In case I forget, could you please ping me after Rails 3.1 is released?\n", "created_at": "2011-05-21 20:12:28", "user": 9582, "id": 1215402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215429", "text": "Yes, sure...  many thanks for reviewing the request\n\nCan't wait to see rails 3.1 released, good luck with this milestone!\n", "created_at": "2011-05-21 20:21:46", "user": 487140, "id": 1215429}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Some time ago I pushed the #update_column method, and it can be seen here https://github.com/rails/rails/commit/245542ea2994961731be105db6c076256a22a7a9#commitcomment-384953 how someone asked for #update_columns, which to me makes sense for completeness and consistency.\n\nSo here it is :)\n", "labels": ["activerecord"], "number": 1190, "updated_at": "2014-06-15 07:27:10", "user": 83449, "closed_at": "2012-07-24 23:21:33", "id": 935938, "title": "New #update_columns method.", "url": "https://api.github.com/repos/rails/rails/issues/1190", "created_at": "2011-05-21 16:18:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1214828", "text": "What about mass-assignment security?\n", "created_at": "2011-05-21 16:23:55", "user": 6321, "id": 1214828}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215384", "text": "I don't see this method being used say on the controller passing the params hash, where you definitely need mass-assignment security. It is not intended to be a replacement of #update_attributes.\nI see it being used say in your logic where you need to set a couple of attributes, without even executing callbacks or validations.\n", "created_at": "2011-05-21 20:06:29", "user": 83449, "id": 1215384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234708", "text": "I agree, if it's bypassing validations and callbacks, it should by pass everything. Yeah this is pretty nice, but update_attribute doesn't activate callbacks or validations either does it? Because I've used that several times to bypass validations and what not; so either I'm crazy or this would do the same thing?\n\nAlso I'm reading a nice testing book now, is `Topic` a stub or is that really coming from the database? I would imagine with Rails those kind of things can make the tests much faster.\n", "created_at": "2011-05-25 11:09:27", "user": 371940, "id": 1234708}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1235226", "text": "you're right @dasch, thanks\n", "created_at": "2011-05-25 13:23:08", "user": 83449, "id": 1235226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2666699", "text": "I think this should probably bypass everything too.\n", "created_at": "2011-11-08 12:03:04", "user": 24421, "id": 2666699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5388757", "text": "This pull request can't be automatically merge.\n\nIf you still want to make this one part of the Rails please rebase it.\n", "created_at": "2012-04-27 19:36:39", "user": 47848, "id": 5388757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389255", "text": "@rafaelfranca just rebased it. Also added the entry to the CHANGELOG for it.\nThanks!\n", "created_at": "2012-04-27 20:06:41", "user": 83449, "id": 5389255}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389315", "text": "cc/ @jonleighton @tenderlove \n", "created_at": "2012-04-27 20:09:43", "user": 47848, "id": 5389315}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389436", "text": "What is the difference between this and [`assign_attributes`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_assignment.rb#L39-66)?\n", "created_at": "2012-04-27 20:16:55", "user": 3124, "id": 5389436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5393019", "text": "The main difference I see is that update_columns impacts the database.\nNote that this pull request was made to have completeness with #update_column, that people was asking for when it was merged.\n", "created_at": "2012-04-28 00:25:35", "user": 83449, "id": 5393019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5671317", "text": "This is a good addition since there is not an easy alternative except multiple update_column calls.\n", "created_at": "2012-05-12 19:58:00", "user": 6658, "id": 5671317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5768891", "text": "Could this be implemented as:\n\n``` ruby\ndef update_columns(attributes)\n  assign_attributes(attributes)\n  save\nend\n```\n", "created_at": "2012-05-17 17:16:11", "user": 3124, "id": 5768891}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5771254", "text": "@tenderlove Wouldn't calling `save` execute callbacks and validations?\nperhaps something like this:\n\n``` ruby\ndef update_columns(attributes)\n  raise ActiveRecordError, \"can not update on a new record object\" unless persisted?\n  attributes.each_key {|key| raise ActiveRecordError, \"#{key.to_s} is marked as readonly\" if self.class.readonly_attributes.include?(key.to_s) }\n  assign_attributes(attributes)\n  self.class.update_all(attributes, self.class.primary_key => id) == 1\nend\n```\n", "created_at": "2012-05-17 18:52:53", "user": 83449, "id": 5771254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6301325", "text": "Any news about this pull request?\n\nCurrently we needed that on a migration and workarounded using this:\n\n``` ruby\nResourceAnnul.find_each do |annul|\n  # annul.update_column :resource_id, annul.price_collection_proposal_id\n  # annul.update_column :resource_type, 'PriceCollectionProposal'\n\n  ResourceAnnul.update_all( {:resource_id => annul.price_collection_proposal_id, :resource_type => 'PriceCollectionProposal'}, {:id => annul.id} )\nend\n```\n\nI think the intention of update_columns is update without hitting validations and/or callbacks.\n\nSomething like:\n- update_attributes - hit validations, hit callbacks, respect mass assignment\n- update_attribute - ignore validations, hit callbacks, ignore mass assignment\n- update_columns - ignore validations, ignore callbacks, ignore mass assignment\n- update_column - ignore validations, ignore callbacks, ignore mass assignment\n\nBut the difference is if you need to update more than one attribute and don't want to querying one time per attribute like happened on my migration.\n\nWhat you think, @tenderlove ?\n", "created_at": "2012-06-13 13:46:37", "user": 26460, "id": 6301325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7192028", "text": "I don't see the value to still have the `update_column` since we are adding a method that can be used to one or more fields.\n\nThat said I proposing the following path:\n- `update_attributes` - hit validations, hit callbacks, respect mass assignment\n- `update_columns` - ignore validations, ignore callbacks, ignore mass assignment\n\n`update_attribute` was removed in 4.0 (#6738) and deprecated in 3-2-stable (#6739)\n`update_column` will be deprecated in 4.0 and remove in the next major release.\n\nI'll work on this.\n", "created_at": "2012-07-23 21:30:23", "user": 47848, "id": 7192028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7236530", "text": "Done @ 864b49d42f887b2453a3d90807569c8ca73af807\n", "created_at": "2012-07-24 23:22:24", "user": 47848, "id": 7236530}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1191, "updated_at": "2014-07-03 04:32:12", "user": 3948, "closed_at": "2011-05-21 20:08:19", "id": 936280, "title": "Removal require again from tests.", "url": "https://api.github.com/repos/rails/rails/issues/1191", "created_at": "2011-05-21 19:26:31", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "1. rubygems now we don't need to require.\n2. ruby-debug is already in environment. If required then we need to have a check for ruby-version.\n", "labels": [], "number": 1192, "updated_at": "2014-06-26 17:36:21", "user": 3948, "closed_at": "2011-05-22 16:12:34", "id": 936386, "title": "No more need rubygems here.", "url": "https://api.github.com/repos/rails/rails/issues/1192", "created_at": "2011-05-21 20:33:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217060", "text": "/cc @josevalim\n", "created_at": "2011-05-22 11:57:40", "user": 3948, "id": 1217060}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": ":P\n", "labels": [], "number": 1193, "updated_at": "2014-06-26 18:04:39", "user": 3948, "closed_at": "2011-05-22 11:40:48", "id": 936397, "title": "Loading action_controller twice removed.", "url": "https://api.github.com/repos/rails/rails/issues/1193", "created_at": "2011-05-21 20:45:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217002", "text": "/cc @josevalim \n", "created_at": "2011-05-22 11:34:48", "user": 3948, "id": 1217002}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To reproduce just create new app using rails master. It was working a week ago. If you won't be able to reproduce then i'll create test app.\n\nP.S.\nconfig/application.rb:\nconfig.assets.enabled = true\n\nls app/assets/javascripts/\n  application.js\n", "labels": [], "number": 1194, "updated_at": "2011-07-27 20:57:25", "user": 108694, "closed_at": "2011-05-22 00:52:33", "id": 936468, "title": "No route matches [GET] \"/assets/application.js\" (same for css)", "url": "https://api.github.com/repos/rails/rails/issues/1194", "created_at": "2011-05-21 21:46:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1215999", "text": "Master currently binds to 3.1.0.beta1. You need to use --edge or --dev to actually bind the generated app to master.\n", "created_at": "2011-05-22 00:52:33", "user": 2741, "id": 1215999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216055", "text": "I've used it. And checked gemfile after. \n\nAs i said before it works well a week ago. Now it's broken.\n\nGemfile:\n\n<pre>\ngem 'rails',                 :git => 'git://github.com/rails/rails.git'\ngem 'arel',                  :git => 'git://github.com/rails/arel.git'\ngem 'rack',                  :git => 'git://github.com/rack/rack.git'\ngem 'sprockets',             :git => 'git://github.com/sstephenson/sprockets.git'\ngem 'rack-cache',            :git => 'git://github.com/rtomayko/rack-cache.git', :require => 'rack/cache'\ngem 'tilt',                  :git => 'git://github.com/rtomayko/tilt.git'\ngem 'rack-mount',            :git => 'git://github.com/josh/rack-mount.git'\n</pre>\n\n\nhttps://github.com/slbug/rails1194issue - testapp\n", "created_at": "2011-05-22 01:38:23", "user": 108694, "id": 1216055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1665178", "text": "I have this same issue. This was working yesterday and broke --for me-- some time around 10pm last night and is still broken. If i run rails new app, route to a controller, look at page source and click on application.css, i get no route for assets/application.css.\n", "created_at": "2011-07-27 16:18:35", "user": 386993, "id": 1665178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1667663", "text": "I set up a new gemset and problem solved. Still don't know how it happened. But probably not an issue w/ rails.\n", "created_at": "2011-07-27 20:57:25", "user": 386993, "id": 1667663}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As said at the time by @rwdaigle in the [edge rails blog](http://ryandaigle.com/articles/2008/11/20/what-s-new-in-edge-rails-object-try),\n\n> If the method doesn’t exist, or if the target object nil, then nil will be returned without exceptions\n\nThat's not the case however.\nOnly nil returns nil for try. If the method does not exists, a NoMethoderror will be raised.\n\nThis pull request changes it.\n", "labels": [], "number": 1195, "updated_at": "2014-06-13 09:27:33", "user": 9347, "closed_at": "2011-05-22 00:56:51", "id": 936472, "title": "Don't raise NoMethodError the tried method doesn't exists", "url": "https://api.github.com/repos/rails/rails/issues/1195", "created_at": "2011-05-21 21:47:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216004", "text": "I've been bitten by this too. Try should definitely ignore NoMethod. Thanks!\n", "created_at": "2011-05-22 00:56:31", "user": 2741, "id": 1216004}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It seems Rails 3.0.7 silently ignores this code (in my config/application.rb):\n\n```\nconfig.after_initialize do\n  config.action_view.default_form_builder = MyFormBuilder\nend\n```\n\nIt works fine if I don't put it in an after_initialize() block, but that means I need to make sure any requires for the builder happen before configuration.  This means you can put the require statement in config/initializers/*.rb, for example.\n\nNothing critical, but annoying.  I can't think of a good reason for it either.  Surely Rails would still have it before it needs to render a page.\n", "labels": ["actionview"], "number": 1196, "updated_at": "2012-04-29 05:42:52", "user": 5639, "closed_at": "2012-04-29 05:42:52", "id": 936684, "title": "Cannot Set default_form_builder=() in after_initialize()", "url": "https://api.github.com/repos/rails/rails/issues/1196", "created_at": "2011-05-22 00:01:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1722285", "text": "@wycats can you look at this?\n", "created_at": "2011-08-03 22:01:03", "user": 3124, "id": 1722285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2999889", "text": "The core of the issue here is that the `on_load(:action_view)` hook that defines `cattr_accessor :default_form_builder` isn't run until after the `on_load(:action_view)` defined by the `action_view.set_configs` initializer in the `ActionView::Railtie`.\n\nThe exception which allows this to work in some cases is when the `action_view/helpers/form_helper.rb` is loaded before `action_view/railtie.rb`. Many times, this happens when a custom form builder is required in `config/application.rb`, at which point the form builder is inheriting from `ActionView::Helpers::FormBuilder` which triggers `action_view/helpers/form_helper.rb` to be loaded before `action_view/railtie.rb`.\n\nAs a minimal example, the following works:\n\n```\nmodule MyApp\n  class Application < Rails::Application\n    require 'action_view/helpers'            \n    require 'action_view/helpers/form_helper' \n\n    config.after_initialize do\n      config.action_view.default_form_builder = MyApp::FormBuilder\n    end\n  end\nend\n```\n\nBut removing the `require` lines will cause it to fail with the following error:\n\n```\nNoMethodError: undefined method `default_form_builder=' for ActionView::Base:Class\n```\n\nA proposed solution would be to move `cattr_accessor :default_form_builder` into `action_view/base.rb` and change `action_view/helpers/form_helper.rb` to read:\n\n```\nActiveSupport.on_load(:action_view) do\n  class ActionView::Base\n    @@default_form_builder ||= ::ActionView::Helpers::FormBuilder\n  end\nend\n```\n\nThis would ensure that the `default_form_builder` setter is always defined, and also ensures that the default value of `::ActionView::Helpers::FormBuilder` never overrides one that may have already been set by the initializer in `action_view/railtie.rb`.\n\nI understand the motivation for wanting to keep the accessor definition with the form helper definition, though, from a modularity standpoint. Maybe someone with more knowledge of the code base can propose a better solution.\n", "created_at": "2011-12-03 09:56:00", "user": 6457, "id": 2999889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5402850", "text": "This can be closed since this was applied in master e6ab0d56cf5d376f4b351282c606ecc74e6fad9a. Now you don't need to change the `default_form_builder` in a `after_initializer` block since it can be lazy loaded if you pass a string\n\nAlso you can't use `config` in a `after_initilizer` block since the Rails components was loaded and these configs will not be copied to they anymore.\n", "created_at": "2012-04-29 05:42:52", "user": 47848, "id": 5402850}], "assignees": [4, 4], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When running\n\n```\nrake routes\n```\n\nI'm getting\n\n```\nundefined method `prerequisites' for nil:NilClass\n```\n\nWith Rails from current master branch with rake 0.9.0!\n", "labels": [], "number": 1197, "updated_at": "2013-03-15 16:30:32", "user": 38004, "closed_at": "2011-05-23 00:13:29", "id": 936699, "title": "Rake 0.9.0, Rails 3.1: undefined method `prerequisites' for nil:NilClass", "url": "https://api.github.com/repos/rails/rails/issues/1197", "created_at": "2011-05-22 00:21:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216417", "text": "I'm getting the same error when running rake db:create or rake db:migrate and then saw this tweet from @dhh http://twitter.com/#!/dhh/status/71966528744071169 . rake 0.9.0 breaks rails so you should use 0.8.7 until the fix.\n", "created_at": "2011-05-22 05:39:28", "user": 707128, "id": 1216417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216592", "text": "It's actually fixed in master. You should pull !\nFixed by #1174\n", "created_at": "2011-05-22 07:59:32", "user": 9347, "id": 1216592}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216804", "text": "I pulled for master and it gave me undefined method `prerequisites' for nil:NilClass\n... not sure if it's really fixed. \n", "created_at": "2011-05-22 09:55:56", "user": 51751, "id": 1216804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217122", "text": "Seems like the error comes from rspec and not rails itself. Happens with rails 3.1rc1 even when using rake 0.8.7.\n\n``` bash\nundefined method `prerequisites' for nil:NilClass\ngems/rspec-rails-2.5.0/lib/rspec/rails/tasks/rspec.rake:3:in `<top (required)>'\n```\n", "created_at": "2011-05-22 12:32:52", "user": 38004, "id": 1217122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217390", "text": "It is said that Rails 3.1 and Rspec-rails < 2.6 isn't compatible: https://github.com/rspec/rspec-rails/blob/master/features/RailsVersions.md.\n\nI got the same error with rails edge and rspec-rails 2.6.0, but upgrade to rspec-rails version 2.6.1.beta1 fixed it.\n", "created_at": "2011-05-22 14:40:18", "user": 151228, "id": 1217390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219082", "text": "I can confirm that the error comes from rspec. Try using the edge rspec-rails, this error will be solved.\n", "created_at": "2011-05-22 23:48:07", "user": 5866, "id": 1219082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377862", "text": "I got the same errror \"undefined method `prerequisites' for nil:NilClass\" when I run ake db:migrate\nhere is my situation\nUsing railties (3.0.8.rc1)\nUsing rails (3.0.8.rc1)\nUsing rspec-core (2.5.2)\nUsing rspec-expectations (2.5.0)\nUsing rspec-mocks (2.5.0)\nUsing rspec (2.5.0)\nUsing rspec-rails (2.5.0)\nUsing webrat (0.7.1)\n\npriidikvaikla said \"upgrade to rspec-rails version 2.6.1.beta1 fixed it\"\nand how to upgrade? when I run gem install rspec-rails and I got an other error \"activemodel requires activesupport (=3.0.8, runtime)\"\n\nany help?\n", "created_at": "2011-06-16 00:16:14", "user": 834559, "id": 1377862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379180", "text": "If you haven't specified a version for rspec-rails in your Gemfile, just run bundle update.\nIf you have, upgrade it to 2.6.1 and run bundle update.\n", "created_at": "2011-06-16 07:09:10", "user": 9347, "id": 1379180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380686", "text": "It works. It's very kind of you, dmathieu\n", "created_at": "2011-06-16 12:52:31", "user": 834559, "id": 1380686}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380697", "text": "You can close the issue then. Thanks :)\n", "created_at": "2011-06-16 12:53:37", "user": 9347, "id": 1380697}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3268935", "text": "thanks alot, it helped me.\n", "created_at": "2011-12-24 20:16:26", "user": 1026439, "id": 3268935}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3302913", "text": "Thank you, dmathieu, this really helped me out too!\n", "created_at": "2011-12-29 17:33:24", "user": 1075981, "id": 3302913}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3459120", "text": "Thanks, helped me too! :-)\n", "created_at": "2012-01-12 06:54:21", "user": 522408, "id": 3459120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4986280", "text": "Very helpful, thank you!\n", "created_at": "2012-04-05 21:32:47", "user": 1380702, "id": 4986280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14970742", "text": "Thank you, this really helped me out too!, dear dmathieu ..:-)\n", "created_at": "2013-03-15 16:30:32", "user": 3583000, "id": 14970742}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1198, "updated_at": "2014-07-03 04:32:30", "user": 160941, "closed_at": "2011-05-22 10:46:39", "id": 936912, "title": "Adding pluralize_table_names change to CHANGELOG", "url": "https://api.github.com/repos/rails/rails/issues/1198", "created_at": "2011-05-22 03:10:21", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "need to require hash/conversions to make available Hash.from_xml\n", "labels": [], "number": 1199, "updated_at": "2014-06-29 02:11:40", "user": 111473, "closed_at": "2011-05-22 10:49:03", "id": 936957, "title": "test fix jdom_engine_test ", "url": "https://api.github.com/repos/rails/rails/issues/1199", "created_at": "2011-05-22 04:02:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a new fix NZKoz suggested, details: https://github.com/rails/rails/pull/563\n\nChanges made: covered ConnectionPool#connection and #release_connection methods by mutex to fix thread-safe issue; changed ConnectionPool#clear_stale_cached_connections! to private to avoid outside call, which would not be thread-safe,\n\nThe old patch with the test provided to prove the thread-safe issue on jruby can be found at: https://github.com/xli/rails/commit/23828c0a9eca44c697765e06f39e0bc33ec74bb6\n", "labels": ["activerecord"], "number": 1200, "updated_at": "2014-07-03 04:32:35", "user": 17474, "closed_at": "2012-04-27 20:11:31", "id": 936979, "title": "Fix ConnectionPool thread-safe issue", "url": "https://api.github.com/repos/rails/rails/issues/1200", "created_at": "2011-05-22 04:25:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216907", "text": "Is it intentional to make the method private?\n", "created_at": "2011-05-22 10:48:24", "user": 9582, "id": 1216907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218095", "text": "This can't pass tests.  We have tests that [call the method you made private](https://github.com/rails/rails/blob/master/activerecord/test/cases/connection_pool_test.rb#L84).\n", "created_at": "2011-05-22 18:29:17", "user": 3124, "id": 1218095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219081", "text": "Tenderlove, please look into my changes, I also changed the test, using send instead.\n\n josevalim: it is intentional to make the method private, because the method is not thread-safe called outside of ConnectionPool, all methods called inside ConnectionPool are covered by mutex, so there is no sense to leave the method public\n", "created_at": "2011-05-22 23:48:00", "user": 17474, "id": 1219081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234625", "text": "Is the mutex reentrant? If so, would it be feasible to synchronize `#clear_stale_cached_connections!` as well?\n\nUsing `#send` from the tests is smelly.\n", "created_at": "2011-05-25 10:48:19", "user": 6351, "id": 1234625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253069", "text": "Hi, since there are some concerns about making `#clear_stale_cached_connections!` private, I rollbacked the changes related with it, so that this pull request can focus on the fix for `#connection` and `#release_connection` methods\n", "created_at": "2011-05-28 04:57:19", "user": 17474, "id": 1253069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544469", "text": "Do you mind squashed those commits together and force push to your branch?\n\n@tenderlove bro, does the change looks ok?\n", "created_at": "2011-07-11 05:39:56", "user": 4912, "id": 1544469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545594", "text": "Ya, this is fine.  I'll merge it.\n", "created_at": "2011-07-11 10:48:54", "user": 3124, "id": 1545594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5388795", "text": "@tenderlove can I close this one?\n", "created_at": "2012-04-27 19:38:19", "user": 47848, "id": 5388795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389350", "text": "Ya, we can close this.  Those methods are synchronized on master now.\n", "created_at": "2012-04-27 20:11:31", "user": 3124, "id": 5389350}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`:dependent => :restrict` with a `has_many` throws a `ActiveRecord::DeleteRestrictionError` exception when `destroy` is called on the object. \n\nMy initial intuition was that it would return a false with errors in the base object. My intuition was wrong, but i wish it was documented better so i can rescue from the exception.\n", "labels": [], "number": 1201, "updated_at": "2014-07-03 04:32:38", "user": 762, "closed_at": "2011-05-22 10:51:21", "id": 937010, "title": "Document that has_many and has_one dependent restrict throws an exception.", "url": "https://api.github.com/repos/rails/rails/issues/1201", "created_at": "2011-05-22 04:45:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216543", "text": "Why not docrails?\n", "created_at": "2011-05-22 07:15:12", "user": 146214, "id": 1216543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216631", "text": "My machine's battery drained. Did this from a non-development laptop using the edit feature on Github. \n\nBut duh, I could've done the same on docrails too!\n", "created_at": "2011-05-22 08:19:23", "user": 762, "id": 1216631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216915", "text": "@asangui can you push to docrails? so @fxn can copyedit as usual. Thanks!\n", "created_at": "2011-05-22 10:51:22", "user": 9582, "id": 1216915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217177", "text": "@asanghi @josevalim We need GitHub to auto complete user names when mentioning them :)\n", "created_at": "2011-05-22 13:01:38", "user": 146214, "id": 1217177}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix todo Time.xmlschema used instead of Time.parse\n", "labels": [], "number": 1202, "updated_at": "2014-06-12 18:17:18", "user": 111473, "closed_at": "2011-05-22 13:06:00", "id": 937097, "title": "Fix todo Time.xmlschema used instead of Time.parse", "url": "https://api.github.com/repos/rails/rails/issues/1202", "created_at": "2011-05-22 05:49:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216920", "text": "I wonder why we have this todo in the first place. Maybe xmlschema was not available in previous rails versions? and I am almost sure we need to require \"time\" in order to use it.\n", "created_at": "2011-05-22 10:53:19", "user": 9582, "id": 1216920}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217033", "text": "@josevalim yeah. commits updated\n", "created_at": "2011-05-22 11:49:19", "user": 111473, "id": 1217033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217607", "text": "@josevalim do you have any idea how to fix \n\n#TODO use regexp instead of Date.parse\nline 55 active_support/xml_mini.rb\n", "created_at": "2011-05-22 15:53:26", "user": 111473, "id": 1217607}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217670", "text": "No idea.\n", "created_at": "2011-05-22 16:10:42", "user": 9582, "id": 1217670}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This reduces false positives that come from using ints in params in\ntests, which do not get converted to strings in the tests. In\nimplementations going through rack, they do get converted to strings.\n- David Chelimsky and Sam Umbach\n", "labels": [], "number": 1203, "updated_at": "2014-06-17 05:48:42", "user": 1075, "closed_at": "2011-05-28 19:43:22", "id": 937200, "title": "Stringify param values in controller tests.", "url": "https://api.github.com/repos/rails/rails/issues/1203", "created_at": "2011-05-22 06:50:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216616", "text": "Wouldn't it be better to call to_param? To save rehashing old arguments look at these tickets:\n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2984\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2970\n", "created_at": "2011-05-22 08:09:21", "user": 6321, "id": 1216616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216971", "text": "to_param would definitely be more appropriate as we would be able to pass models to get/post and friends. @dchelimsky, what do you think?\n", "created_at": "2011-05-22 11:23:52", "user": 9582, "id": 1216971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217081", "text": "to_param makes sense (I hadn't seen those tickets, sry). That said, I'm a bit confused. https://rails.lighthouseapp.com/projects/8994/tickets/2984 says it's resolved, but I don't see a patch. What happened?\n\nAlso - we need to exclude Rack::Test::UploadedFile from this as the to_param conversion does the wrong thing. Are there any other exclusions you can think of?\n", "created_at": "2011-05-22 12:10:08", "user": 1075, "id": 1217081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254838", "text": "+1 for to_paramification.\n", "created_at": "2011-05-28 18:38:01", "user": 11493, "id": 1254838}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1643242", "text": "@josevalim - I see this is in master but not 3-1-stable. Is the intent to include this post 3.1?\n", "created_at": "2011-07-25 03:13:34", "user": 1075, "id": 1643242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1645209", "text": "@dchelimsky we can include it on 3-1. Could you please send a pull request for 3-1-stable (I am without my mac lately)?\n", "created_at": "2011-07-25 12:06:38", "user": 9582, "id": 1645209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1645317", "text": "@josevalim - I squashed the two commits into a single commit and cherry-picked it onto 3-1-stable in a separate pull request: #2253\n", "created_at": "2011-07-25 12:27:11", "user": 1075, "id": 1645317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4400156", "text": "Per https://twitter.com/#!/nzkoz/status/177832158617018368, this breaks the ability to functional test json APIs (which support fixnums). Any thoughts on how to preserve the benefits from this change and also support json APIs? The first thing that comes to my mind is a declaration in the test like `do_not_convert_params` or some such. I'd expect the conversion to be an opt-out, but that's me :)\n", "created_at": "2012-03-08 19:18:55", "user": 1075, "id": 4400156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4400483", "text": "Well, this change breaks backwards compatibility and should only be applied when it's _definitely_ safe, but that's me ;)\n\nI think the simplest option is to only do this to_paramization when the format of the request is :html or nil,  that at least lets people include :format=>:json and hopefully move on with their lives?\n", "created_at": "2012-03-08 19:35:38", "user": 197, "id": 4400483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4400490", "text": "I'd suggest discussing in that issue rather than here as this one is closed and ancient\n", "created_at": "2012-03-08 19:36:04", "user": 197, "id": 4400490}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This method is returning empty:\n\n```\n<% f.fields_for :asset do |as| %> # not work with or without \"=\"\n  <%= as.label :name %><br />\n  <%= as.text_area :name %>\n<% end %>\n```\n\nI wrote an answer here: http://stackoverflow.com/questions/6086120/helper-fields-for-not-working\nSo I created a minimal app for test but error still.\nI think it's a bug.\n", "labels": [], "number": 1204, "updated_at": "2011-05-22 16:35:25", "user": 149353, "closed_at": "2011-05-22 10:02:34", "id": 937292, "title": "Helper `fields_for` doesn't work", "url": "https://api.github.com/repos/rails/rails/issues/1204", "created_at": "2011-05-22 07:35:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216603", "text": "Could you provide this failing app ? Or even better, a failing test !\n", "created_at": "2011-05-22 08:04:24", "user": 9347, "id": 1216603}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216622", "text": "Here is my test app with log and all included: https://github.com/edison/rails-test-helper-error\n", "created_at": "2011-05-22 08:11:36", "user": 149353, "id": 1216622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216749", "text": "You shouldn't name your model `Asset`. When renaming it to something else, it works well.\n\nEdit : my bad. It occurs whenever the relation has `accepts_nested_attributes_for`.\n", "created_at": "2011-05-22 09:23:41", "user": 9347, "id": 1216749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216768", "text": "In my main app this model is called `Traditions::MaterialAsset`, doesn't work too.\n", "created_at": "2011-05-22 09:35:41", "user": 149353, "id": 1216768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216806", "text": "Quite certain this **is not a bug**.\n\nI posted an answer to [your stack overflow question](http://stackoverflow.com/questions/6086120/helper-fields-for-not-working/6087102#6087102). I tested it with your app an it solves the problem - you don't appear to be calling `build_asset` (or `build_material_asset`) on the parent object.\n", "created_at": "2011-05-22 09:58:33", "user": 64073, "id": 1216806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216814", "text": "@thetron is right, it works. Thx!\n", "created_at": "2011-05-22 10:02:34", "user": 149353, "id": 1216814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217749", "text": "As @thetron said it's because the association is empty and is defined as accepting nested attributes. See this article for more information: http://ryandaigle.com/articles/2009/2/1/what-s-new-in-edge-rails-nested-attributes, specifically the section called 'Default Create Form Fields'\n", "created_at": "2011-05-22 16:35:25", "user": 6321, "id": 1217749}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "On the latest 3.1.0.rc1 branch, I used the line in a migration:\n\n``` ruby\n  def change\n    add_index :some_table, [:column1, :column2], :unique => true, :name => \"some_table_unique_entries\"\n  end\n```\n\nThe new automatically generated rollback action attempted to revert this change with:\n\n``` ruby\n  remove_index :some_table, [:column1, :column2]\n```\n\nwhich failed because the generated index name from this did not match the overridden index name.\n", "labels": [], "number": 1205, "updated_at": "2011-07-06 20:54:32", "user": 162987, "closed_at": "2011-07-06 20:54:32", "id": 937491, "title": "Error in automatically generated down action for add_index with an overridden name", "url": "https://api.github.com/repos/rails/rails/issues/1205", "created_at": "2011-05-22 10:20:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515118", "text": "This has been fixed and should be closed - cc @spastorino\n", "created_at": "2011-07-06 20:38:59", "user": 9347, "id": 1515118}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Loading jruby-openssl for all. \n", "labels": [], "number": 1206, "updated_at": "2014-06-20 23:31:57", "user": 3948, "closed_at": "2011-05-22 10:57:57", "id": 937495, "title": "Let's load jruby-openssl now for all. #jruby", "url": "https://api.github.com/repos/rails/rails/issues/1206", "created_at": "2011-05-22 10:22:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216923", "text": "Isn't it bundled in jruby 1.6?\n", "created_at": "2011-05-22 10:55:35", "user": 9582, "id": 1216923}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1216925", "text": "Nope.\n", "created_at": "2011-05-22 10:57:31", "user": 3948, "id": 1216925}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I can't access any image assets in Rails 3.1 (beta, rc). The server seem to return the HTTP header, but not the actual image content, it simply times out after 30 seconds. Everything else, JS and CSS assets load fine.\n\nI'm running Rails 3.1 rc1 in development enviroment, WEBrick on Windows 7 (x64) with Ruby 1.9.2-p180.\n\ndevelopment.log\n\n```\nStarted GET \"/assets/rails.png\" for 127.0.0.1 at 2011-05-22 12:11:57 +0200\n\nServed asset /rails.png - 200 OK  (0.001s)  (pid 3040)\n```\n\nChrome request info\n\n```\nRequest URL:http://localhost:3000/assets/rails.png\nRequest Method:GET\nStatus Code:200 OK\n\nRequest Headers\n\nAccept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.3\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:en-US,en-GB;q=0.8,en;q=0.6,sl-SI;q=0.4,sl;q=0.2\nCache-Control:max-age=0\nConnection:keep-alive\nHost:localhost:3000\nIf-Range:\"4762fc82c3f31bd8e9366001213aed2b\"\nRange:bytes=6645-6645\nUser-Agent:Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.30 (KHTML, like Gecko) Chrome/12.0.742.60 Safari/534.30\n\nResponse Headers\n\nCache-Control:public, must-revalidate\nConnection:Keep-Alive\nContent-Length:6646\nContent-Md5:4762fc82c3f31bd8e9366001213aed2b\nContent-Type:image/png\nDate:Sun, 22 May 2011 10:11:57 GMT\nEtag:\"4762fc82c3f31bd8e9366001213aed2b\"\nLast-Modified:Sun, 22 May 2011 09:38:36 GMT\nServer:WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nX-Runtime:0.001000\nX-Ua-Compatible:IE=Edge\n```\n\nI also tried in Internet Explorer, the result is a bit different\n\n```\nStarted GET \"/assets/rails.png\" for 127.0.0.1 at 2011-05-22 12:22:31 +0200\n\nServed asset /rails.png - 200 OK  (0.001s)  (pid 3040)\n\n[2011-05-22 12:22:31] ERROR Errno::ECONNRESET: An existing connection was forcibly closed by the remote host.\n        C:/Ruby/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `eof?'\n        C:/Ruby/lib/ruby/1.9.1/webrick/httpserver.rb:56:in `run'\n        C:/Ruby/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n```\n", "labels": [], "number": 1207, "updated_at": "2011-09-09 23:21:44", "user": 803220, "closed_at": "2011-06-05 15:55:42", "id": 937504, "title": "Image assets in 3.1 don't load", "url": "https://api.github.com/repos/rails/rails/issues/1207", "created_at": "2011-05-22 10:27:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217378", "text": "I have the same problem over the same configuration with the RC.\n", "created_at": "2011-05-22 14:34:24", "user": 55738, "id": 1217378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219368", "text": "Can you test with rails and sprockets master please.\n\n```\ngem \"rails\", :git => \"git://github.com/rails/rails.git\"\ngem \"sprockets\", :git => \"git://github.com/sstephenson/sprockets.git\"\n```\n", "created_at": "2011-05-23 01:29:10", "user": 137, "id": 1219368}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219572", "text": "Are your images in `app/assets/images` or `vendor/images`?  The former works for me, the later doesn't.\n", "created_at": "2011-05-23 03:00:57", "user": 300, "id": 1219572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220160", "text": "Not fixed in rails and sprockets master. Bundler output: https://gist.github.com/986312\nAnd yeah, I'm talking about `app/assets/images/`\n", "created_at": "2011-05-23 06:35:27", "user": 803220, "id": 1220160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228264", "text": "I've debugged the HTTP requests with Fiddler and got this error:\n\n`Content-Length mismatch: Response Header indicated 6.702 bytes, but server sent 6.645 bytes.`\n\nSo yeah, the actual image is transmitted but the packet content size doesn't match.\n", "created_at": "2011-05-24 13:39:43", "user": 803220, "id": 1228264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234770", "text": "Same issue here =(\n", "created_at": "2011-05-25 11:35:10", "user": 281812, "id": 1234770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234965", "text": "I think I might have found the cause of this. Sprockets use the library Pathname to read the contents of the file. Since it can read Javascript and CSS fine, it obviously has problems with reading binary files.\n\nHere's a blog post explaining that binary files on Windows MUST be read in binary mode.\nhttp://blog.leosoto.com/2008/03/reading-binary-file-on-ruby.html\n\nSo I'm assuming Pathname.read() doesn't read in binary mode.\n\nEdit: Yep, that did it. I've submited the bug to the Sprockets git along with instructions on how to fix it https://github.com/sstephenson/sprockets/issues/60\n", "created_at": "2011-05-25 12:21:12", "user": 803220, "id": 1234965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281356", "text": "Rails 3.1 on Windows appears to be corrupting the images served up from `app/assets/images/`\n\n![image assets](http://i.imgur.com/6QOxc.png)\n\n**Details:**\n\nRails 3.1.0.rc1\nWindows 7\nWEBrick\n", "created_at": "2011-06-02 15:36:53", "user": 124968, "id": 1281356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281389", "text": "@stungeye : this appears to be a different issue. You should open an other ticket.\n", "created_at": "2011-06-02 15:43:17", "user": 9347, "id": 1281389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281403", "text": "It's the same issue actually. Reading files in text mode on Windows converts all \\r\\n to \\n which renders some images corrupted or completely unreadable, depending on the format. I've got he same result with some formats.\n", "created_at": "2011-06-02 15:46:33", "user": 803220, "id": 1281403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304942", "text": "The issue has been fixed in Sprockets master. Test with:\n`gem \"sprockets\", :git => \"git://github.com/sstephenson/sprockets.git\"`\n\nClosing this issue.\n", "created_at": "2011-06-05 15:55:42", "user": 803220, "id": 1304942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1418324", "text": "I am still having problems with this.\n\nRails pointing to 31-stable and sprockets to master.\n", "created_at": "2011-06-22 14:26:32", "user": 287889, "id": 1418324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1467345", "text": "I have updated to sprockets-2.0.0.beta.10 and pressed Ctrl+F5 in browser and it fixed this problem\n", "created_at": "2011-06-29 14:21:05", "user": 187657, "id": 1467345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1587746", "text": "+1 for X-Accel-Redirect on heroku w/cedar!\n", "created_at": "2011-07-16 18:41:26", "user": 48928, "id": 1587746}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1829671", "text": "Hi,\nAll my images are served with content length 0 (when im in production mode) and therefore are not displayed\nIm using: \n\nsprockets (2.0.0.beta.13)\nrails (3.1.0.rc6)\n\non Mac OS X 10.6.7 with rvm .... (two different macs ...)\n\nI have no idea how to solve this issue .. precompiling did not help eighter ..\n\nRails 3.1 is simply not usable for me until i get rid of this issue \nany Tips ?\n", "created_at": "2011-08-17 19:27:57", "user": 586390, "id": 1829671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1841682", "text": "I have the same problem.\n\nsprockets (2.0.0.beta.13)\nrails (3.1.0.rc6)\n", "created_at": "2011-08-18 18:35:09", "user": 815596, "id": 1841682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1849288", "text": "This answer solved my problem:\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/4bc7bac8b295b3aa\n", "created_at": "2011-08-19 08:49:11", "user": 586390, "id": 1849288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2056761", "text": "Intermittent issues with images here too. The file in question is a simple PNG; all other images are working correctly. If I vist the asset path directly the image works as expected. Restarting the server (Webrick, in development) does not help. Clearing the browser cache does not help.\n\nWhen I reload the page the image shows but the browser indicates it is still loading. After 30 seconds the request times out and the image is replaced with a broken image indicator.\n\nHere are a few supporting images:\nhttps://skitch.com/matt_darby/fahke/oops-google-chrome-could-not-connect-to-localhost-3000\nhttps://skitch.com/matt_darby/fahkp/oops-google-chrome-could-not-connect-to-localhost-3000\nhttps://skitch.com/matt_darby/fahkw/contact.html.haml-documents-code-protectedmethod.com-app-views-pages-vim\n", "created_at": "2011-09-09 23:20:39", "user": 2805, "id": 2056761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2056768", "text": "Also of note, the comment above (removing x_sendfile_header) did not help me.\n", "created_at": "2011-09-09 23:21:44", "user": 2805, "id": 2056768}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Only one space is needed, yo!\n", "labels": [], "number": 1208, "updated_at": "2014-07-03 04:32:56", "user": 6351, "closed_at": "2011-05-22 11:11:39", "id": 937567, "title": "Remove superfluous whitespace from ActiveModel::SecurePassword ", "url": "https://api.github.com/repos/rails/rails/issues/1208", "created_at": "2011-05-22 11:03:09", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is with Rails3.1rc and beta1 If I have a background url specified in application.css like so:\n\n```\nbody { \n  background: #00ff00 url('rails.png') no-repeat fixed center;\n}\n```\n\nThe new asset pipeline stuff finds that image in the assets folder.  However when I rake assets:compile the resulting compiled CSS still references rails.png but the asset is now called rails-9c0a079bdd7701d7e729bd956823d153.png so my production server wouldn't be able to serve that asset from the web server.\n\nI would have expected it to expand it to:\n\n```\nurl('/assets/rails-9c0a079bdd7701d7e729bd956823d153.png')\n```\n", "labels": [], "number": 1209, "updated_at": "2015-12-14 12:40:56", "user": 23323, "closed_at": "2011-05-23 20:05:02", "id": 937582, "title": "assets:precompile doesn't replace image asset paths in CSS", "url": "https://api.github.com/repos/rails/rails/issues/1209", "created_at": "2011-05-22 11:13:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217108", "text": "You have to use ERB inside your CSS to fix this. You can do this by appending .erb to your css/scss file:\n\n```\napplications.css.scss.erb\n```\n\nThen you have the `asset_path` helper available:\n\n``` css\nbody { \n    background: #00ff00 url(<%= asset_path 'rails.png' %>) no-repeat fixed center;\n}\n```\n", "created_at": "2011-05-22 12:27:23", "user": 38004, "id": 1217108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219562", "text": "I added `asset_path` to all images included in my CSS and it didn't make any difference after running `rake assets:precompile` No hash added to the image includes in `public/assets/application.css` ... am I missing a step?\n", "created_at": "2011-05-23 02:54:49", "user": 300, "id": 1219562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219569", "text": "Hashes are only applied in production. Running `rake assets:precompile` in development has no real effect. It will create all the files but they are not used by the development server. You can run `rake assets:precompile RAILS_ENV=production` to see how the asset pipeline would behave in production, but you should remove the `public/assets` folder afterwards since it's from no use for your dev env.\n", "created_at": "2011-05-23 02:59:39", "user": 38004, "id": 1219569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219595", "text": "Sure enough, thanks!\n", "created_at": "2011-05-23 03:09:55", "user": 300, "id": 1219595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221609", "text": "So there is a workaround but this is still a bug?  Either CSS assets shouldn't be handled by the asset pipeline at all or the correct thing should happen when you compile the assets.\n", "created_at": "2011-05-23 13:33:06", "user": 23323, "id": 1221609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223959", "text": "Everything @MSchmidt said is correct.\n\nIf you don't want images to be handled by the asset pipeline, just keep them in public/images as you had them before.\n", "created_at": "2011-05-23 20:05:02", "user": 137, "id": 1223959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224199", "text": "I can understand what you're saying but this fails the principle of least surprise.  A new developer comes along and is told about the asset pipeline, you can use it in your css - this is great.  However, when you deploy to production it will all break!  Either you need to make this very clear in the documentation (ie. don't use it) or don't use the asset pipeline for css assets in development.  Just my thoughts.\n", "created_at": "2011-05-23 20:50:57", "user": 23323, "id": 1224199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247747", "text": "I agree with @moomerman, this is really confusing.\nJammit can even embed the images in the css files automatically.\n", "created_at": "2011-05-27 07:53:51", "user": 57373, "id": 1247747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247790", "text": "Agree with @moomerman; maybe it's low priority to fix, but this behavior is definitely worse for the user\n", "created_at": "2011-05-27 08:03:14", "user": 59190, "id": 1247790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248557", "text": "This issue tripped me up when playing with 3.1. I do agree that the default behaviour should be more newbie friendly...\n", "created_at": "2011-05-27 11:26:44", "user": 395859, "id": 1248557}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251392", "text": "The problem aren't the hashes, the problem is the different behavior between dev & production. Why don't you apply hashes in development as well? Unless you have hundreds of Megabytes of assets, it'll take fractions of a second to get the MD5 sums. \n", "created_at": "2011-05-27 19:59:14", "user": 36442, "id": 1251392}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251434", "text": "+1\n", "created_at": "2011-05-27 20:06:47", "user": 578881, "id": 1251434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251616", "text": "Agree with iGEL, seems like a feature that is meant for production shouldn't need me to be in production environment to use.\n\nThe main reason this is a fail is because there are several things that I only use in production/staging which I don't want to setup locally... Memcached being one of them. \n\n<code>rake assets:precompile</code> should produce what will be needed in production.\n", "created_at": "2011-05-27 20:35:23", "user": 35866, "id": 1251616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253366", "text": "@MSchmidt & @josh, I am currently testing this using 3-1-stable branch and it is not working as described. I get assets with no hashes. Not sure what is missing here but I have been chasing my tail trying to make sense of the asset pipeline with nothing more than frustration for the last week. I remember this working in beta1 (will have another look), not sure what happened along the way.\n\nWhere is the outline for expected/intended behavior that was used to implement this feature so we can get some idea of how it is suppose to work without sifting through 2 plugins and rails core?\n", "created_at": "2011-05-28 07:59:29", "user": 35866, "id": 1253366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254336", "text": "The pipeline should handle the CSS files correctly by default or the CSS files should be treated as ERB by default.\n", "created_at": "2011-05-28 16:05:20", "user": 131699, "id": 1254336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255143", "text": "So, if I'm following along correctly, using Rails 3.1 asset pipeline set up as it is by default – aka using `url(rails.png)` in a non-erb CSS file – will result in a broken production environment?\n", "created_at": "2011-05-28 20:27:43", "user": 10958, "id": 1255143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255174", "text": "@contentfree The asset will be served but not how you expect it to.  If you're running a web server on the front end then the web server won't serve the asset, it will fall back to the application and get served by the asset pipeline as in development.  This is confusing though since you're precompiled your assets so you expect them to be served from the precompiled cache (and by your web server if you have one).\n\nAnother issue I just noticed is that it is serving the static asset via the asset pipeline in production even though in production.rb I have:\n\n```\nconfig.serve_static_assets = false\n```\n", "created_at": "2011-05-28 20:39:14", "user": 23323, "id": 1255174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255217", "text": "@moomerman can you verify that it works as described by @MSchmidt on 3-1-stable? From my end it does not.\n", "created_at": "2011-05-28 20:51:42", "user": 35866, "id": 1255217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255390", "text": "@lardawge I just tried against the latest 3-1-stable and got an error while running RAILS_ENV=production rake assets:precompile\n\n```\nrake aborted!\nuninitialized constant Sprockets::Helpers\n\nTasks: TOP => assets:precompile\n(See full trace by running task with --trace)\n```\n", "created_at": "2011-05-28 21:58:20", "user": 23323, "id": 1255390}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255502", "text": "Here is a pull request to fix that: https://github.com/rails/rails/pull/1387\n\nYou can try my fork until this gets accepted...\n\nSo for me with 3-1-stable, \nI get hashed assets (js, css, images) in the public assets directory when running rake assets:precompile.\nThe css does not reference the hashed images even if I use asset_path as MSchmidt suggested in production.\n\nExpected behavior,\nThe css should be parsed using the asset_path by default and reference the hashed asset in production without using erb.\n\n@josevalim can you give us a hand sorting this... I am happy to do some work to make the required changes and get it working, just need to know the intended behavior if it differs from what I suggested. Also can we reopen this ticket?\n", "created_at": "2011-05-28 22:47:38", "user": 35866, "id": 1255502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1259370", "text": "Ok, sorted out some of the issues that I have been having. \n1.  Image urls in css/scss files don't get touched unless you use erb. For some reason I thought that scss files were parsed for urls. Having to use erb now completely makes sense to me rather than having to build a parser to go through and find urls which can be written in a variety of formats. Maybe in the future.\n2. The reason I was having problems with getting asset_path to work in the scss.erb was because I had removed the line in the rake task that was causing uninitialized constant Sprockets::Helpers (3-1-stable). The helper is what overrides the path allowing sprockets to fingerprint assets. Sprockets::Helpers still doesn't exist in 3-1-stable so I overwrote the rake task locally using the following until something is done about it. I will probably end up keeping it because in my case it works for the workflow (see below).\n\n``` ruby\nRake::Task[\"assets:precompile\"].clear\nnamespace :assets do\n  desc \"As if production env\"\n  task :precompile => :environment do\n    # Give assets access to asset_path\n    ActionView::Helpers::SprocketsHelper\n\n    assets = Rails.application.config.assets.precompile\n    Rails.application.assets.precompile(*assets)\n  end\nend\n```\n\nI was able to run <code>rake assets:precompile</code> as if I was in production by adding the following to the development.rb and updating the rake task. The only thing rails cares about is <code>config.action_controller.perform_caching</code> being true and it will add the hash. \n\nAs an aside, the api will change to the following for minifying js/css in 3.1. This caught me off guard because there was no mention of the change other than looking through the source code. You will also need to add <code>gem 'sass-rails'</code> to Gemfile.\n\n``` ruby\n# development.rb\nif $precompile_assets\n  config.assets.compress = true\n  config.assets.js_compressor = :uglifier\n  config.action_controller.perform_caching = true\nelse\n  config.action_controller.perform_caching = false\nend\n```\n\n``` ruby\n#assets.rake\nnamespace :assets do\n  desc \"As if production env\"\n  task :precompile do\n    # Set global to compress and fingerprint assets\n    $precompile_assets = true\n\n    # Load rails\n    Rake::Task['environment'].invoke\n\n    # Give assets access to asset_path for fingerprinting\n    ActionView::Helpers::SprocketsHelper\n\n    assets = Rails.application.config.assets.precompile\n    Rails.application.assets.precompile(*assets)\n  end\nend\n```\n\nLastly, image_tag generate hashed urls if you only use the image name or relative paths.\n\n``` erb\n<%= image_tag 'rails.png' %>\n<%= image_tag 'nested_folder/rails.png' %>\n```\n\nHopefully this is helpful to someone...\n", "created_at": "2011-05-30 01:47:02", "user": 35866, "id": 1259370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323652", "text": "fyi: in sass rails I will be adding native sass functions to ease access to asset paths.\n\n```\nbackground: image-url(\"foo.png\")\n```\n\nwill search the asset path for an image named foo.png and lastly it will look in public.\n", "created_at": "2011-06-08 00:23:05", "user": 1839, "id": 1323652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332030", "text": "@chriseppstein will this implementation be included in 3.1?\n", "created_at": "2011-06-09 05:37:36", "user": 330939, "id": 1332030}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1399854", "text": "@chriseppstein is there an issue on sass-rails that I can watch to track this (and possibly help test it out for you)?\n", "created_at": "2011-06-20 00:28:11", "user": 2406, "id": 1399854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417135", "text": "Guys\n\nThe asset pipeline works fine for me in Staging/Production\n\nI think it's great...\n\nIt's crippling me in Dev mode though... having to make a request to the pipleine for each image on my app means it now takes about 20-30 seconds for a page to load. Try styling a page with that? \n\nI'm going bald here guys, is there something I've missed?\n", "created_at": "2011-06-22 10:28:19", "user": 73998, "id": 1417135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417148", "text": "In the meantime:\n\n<pre>\ncp -R app/assets/images public/assets\n</pre>\n\n\nreally helps!\n", "created_at": "2011-06-22 10:31:48", "user": 73998, "id": 1417148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417172", "text": "@Bodacious I had same issue, but problem wasn't in asset pipeline. I use mongoid wchich by default preloads all models in developemnt evnironment. After switching this off each asset load in aboud 100ms.\n\nYou can find what is realy slow using [rack-perftools_profiler](https://github.com/bhb/rack-perftools_profiler). It helped me a lot.\n", "created_at": "2011-06-22 10:37:57", "user": 34633, "id": 1417172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1424629", "text": "@martincui - thanks for the suggestion  - I don't use Mongoid but I'll check out rack-perftools_profiler and see it I can find where I'm going wrong \n", "created_at": "2011-06-23 11:32:18", "user": 73998, "id": 1424629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1465750", "text": "Don't know if it's possible, but would be neat if Sprockets could figure out that url(\"/assets/cat.jpg\") (or a similar string in javascript) should be rewritten. I don't know the inner workings of Sprockets, but I'm thinking such a feature shouldn't be too difficult. Support for automatically converting small enough images into base64 would be neat too.\n\nThat said, the new pipeline is great and this isn't a major issue. Using ERB or falling back to the previous behavior are both easy.\n", "created_at": "2011-06-29 09:25:01", "user": 122287, "id": 1465750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1672879", "text": "The problem I'm having is that if I use \"application.css.scss.erb\" and then within that file want to import an SCSS partial (say _partial) then none of the following work:\n\n@import \"partial\"\n@import \"partial.css.scss\"\n@import \"_partial.css.scss\"\n@import \"partial.css.scss.erb\"\n@import \"_partial.css.scss.erb\"\n\nI need to be able to use asset paths within any SCSS and having to add multiple layers of parsing to each file (and still have it break) is entirely weird.\n\nGiven that ERB tags are invalid SCSS, could we not pass all SCSS files via ERB and then hopefully the @import should work?\n", "created_at": "2011-07-28 14:08:21", "user": 22904, "id": 1672879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1672889", "text": "Sorry, just realised there's a github user called \"import\" that will now be strangely pulled in to this thread.  I was referring to the SCSS directive, not him.\n", "created_at": "2011-07-28 14:09:11", "user": 22904, "id": 1672889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1674279", "text": "The @import (apologies to user named @import) is a SASS directive, not a sprockets directive.\n\nI think it would be cooler to include variables from other styles using the `*= require` directive\n\nDifficult to do?\n\nOn 28 Jul 2011, at 15:09, andyjeffriesreply@reply.github.com wrote:\n\n> Sorry, just realised there's a github user called \"import\" that will now be strangely pulled in to this thread.  I was referring to the SCSS directive, not him.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1209#issuecomment-1672889\n", "created_at": "2011-07-28 16:49:44", "user": 73998, "id": 1674279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1674285", "text": "Should start a new thread for this btw\n\nOn 28 Jul 2011, at 15:09, andyjeffriesreply@reply.github.com wrote:\n\n> Sorry, just realised there's a github user called \"import\" that will now be strangely pulled in to this thread.  I was referring to the SCSS directive, not him.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1209#issuecomment-1672889\n", "created_at": "2011-07-28 16:50:14", "user": 73998, "id": 1674285}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1746168", "text": "Huge +1 on that.\n\nAnyone with any decently DRY'd pattern of SASS can't really use the asset compiling because of this.\n", "created_at": "2011-08-06 20:03:11", "user": 124018, "id": 1746168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1938293", "text": "only one comment to this new assets stuff:\ntha fuck is this?\n", "created_at": "2011-08-30 01:59:58", "user": 54423, "id": 1938293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2046815", "text": "I just got bit by this issue when I tried to use an asset host. precompiling the asset gives me fingerprinted images which I then sync to my asset host, but anytime I call `image-url` in my `.scss` files the resulting URL does not include the fingerprint.\n", "created_at": "2011-09-09 00:36:05", "user": 12020, "id": 2046815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2102451", "text": "@subelsky please check that you don't have leading '/' in image-url value.\n\nIf you use helper in this way: image-url('/logo.png') sprockets will not replace it with digest.\nJust use image-url('logo.png').\n", "created_at": "2011-09-15 09:03:23", "user": 19233, "id": 2102451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2105084", "text": "Hi @alovak thanks for writing back; I tried that but it didn't work. Maybe because these files are in /vendor/assets/stylesheets?\n", "created_at": "2011-09-15 14:39:35", "user": 12020, "id": 2105084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2106735", "text": "I also have files in vendor.  But I include them with sprockets directive:\n\n *= require my-file \n\nthis file is in /vendor/assets/stylesheets\n\nand it contains:\n\n  ...\n  background: image-url(\"input-file/button.png\") no-repeat left top;\n  ...\n\nthe resulted css contains url(\"input-file/button-xxxxxxxxxxxxxxxxxxxxx.png\")\n", "created_at": "2011-09-15 17:22:45", "user": 19233, "id": 2106735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2115848", "text": "It worked! It turned out I had been writing my image-urls as `image-url('assets/input-file/button.png')` - every time I looked through this I failed to notice the unnecessary `assets` prefix int he path. Thanks for helping me!\n", "created_at": "2011-09-16 15:42:22", "user": 12020, "id": 2115848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/67808381", "text": "In case anybody googles for this issue, I had this exact problem, and it turned out that the custom build script was failing to set RAILS_ENV=production.\n", "created_at": "2014-12-22 07:13:54", "user": 1118459, "id": 67808381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/87294911", "text": "Still hawing this issue with:\n`gem 'sass-rails', '~> 5.0'`\n`gem 'rails', '4.2.0'`\nSetting `RAILS_ENV` variable did not work.\n", "created_at": "2015-03-28 20:17:05", "user": 502254, "id": 87294911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/88885050", "text": "For me, fixed this using image-url(), font-url() properly. Only using url() did **not** help. This is a huge gotcha. Probably causing lots of people turn `config.assets.compile = true`\n", "created_at": "2015-04-02 12:39:35", "user": 224840, "id": 88885050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/152665333", "text": "Since I was using `sass-rails` like @kulbida I finally ended up adding the file extension `.scss` to the offending .css file(s) so they all end in `.css.scss`, then replaced all instances of `url('blah.png')` with `url(asset-path('blah.png'))` (in my case all the blah.pngs were in a `/vendor`ed folder).\n", "created_at": "2015-10-30 22:29:40", "user": 113548, "id": 152665333}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "main_app routes.rb\n\n```\nmount MyEngine::Engine => '/', :as => 'my_engine'\n```\n\nmy_engine's routes.rb\n\n```\nget 'my_url' => 'MyEngine::Pages#show', :as => :my_url\n```\n\nin views:\n\n```\nmy_engine.my_url\n```\n\nresults in \"http://localhost:3000//my_url\" (note the incorrect '//')\n", "labels": [], "number": 1210, "updated_at": "2011-06-01 19:47:45", "user": 3788, "closed_at": "2011-06-01 19:47:45", "id": 937656, "title": "helpers generate incorrect URLs when engine mounted on root", "url": "https://api.github.com/repos/rails/rails/issues/1210", "created_at": "2011-05-22 12:02:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273508", "text": "Is there a reason why you use the suffix \"_url\" in your route name? BTW I attempted to duplicate this without much luck.\n", "created_at": "2011-06-01 10:35:00", "user": 16414, "id": 1273508}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273998", "text": "the _url is just a naming, not actual generator (as for example _path or _url). i should have chosen better name. \nperhaps i also forgot to say, that the engine is not isolated.\ni will try to look for some example on which to show this issue …\n", "created_at": "2011-06-01 12:34:36", "user": 3788, "id": 1273998}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274009", "text": "I think you should mount your engine as\n\n```\nmount MyEngine::Engine => '', :as => 'my_engine'\n```\n", "created_at": "2011-06-01 12:36:34", "user": 9347, "id": 1274009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274037", "text": "yes, that would make sense, right? unfortunately:\n\n```\nExiting\n/Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:1426:in `to_sym': interning empty string (ArgumentError)\n    from /Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:1426:in `action_path'\n    from /Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:1421:in `path_for_action'\n    from /Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:1276:in `match'\n    from /Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:1477:in `match'\n    from /Library/Ruby/Gems/1.8/bundler/gems/rails-82857adc56ef/actionpack/lib/action_dispatch/routing/mapper.rb:420:in `mount'\n```\n", "created_at": "2011-06-01 12:42:45", "user": 3788, "id": 1274037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274331", "text": "Right, 1.8 doesn't allows empty strings to be transormed to symbols. If you tried the same in 1.9, it'd work.\n", "created_at": "2011-06-01 13:37:21", "user": 9347, "id": 1274331}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "hello,\nIt's really tiny issue so if you feel like changing the world, please move on.\n\nTextwidth. Is there any suggested max line size for rails code? I haven't found such information anywhere. 80 seems to be a bit too little for most cases currently I guess, and of course I don't mean having absolute limit, just having some common value everywhere which makes it easier to minimize scrolling and to make better use of screen. In some files it seems like somebody was trying to cut at 120, in some 90, it varies a a lot. \n\nSo is there any suggested line size? If not do you think it's worth having one? If yes then possibly it could be nice to add it to contributing guide.\n\nhave a nice time\n", "labels": [], "number": 1211, "updated_at": "2011-05-23 00:12:42", "user": 23470, "closed_at": "2011-05-23 00:12:42", "id": 937669, "title": "coding guidelines", "url": "https://api.github.com/repos/rails/rails/issues/1211", "created_at": "2011-05-22 12:11:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219171", "text": "There's not a fixed length, but I generally like 120.\n", "created_at": "2011-05-23 00:12:42", "user": 2741, "id": 1219171}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey,\n\nRails isn't using [travis-ci](http://travis-ci.org/) as a continuous integration system for now.\nSo this is a feature request to configure the repository to add the travis-ci callback.\n\n/cc @svenfuchs\n", "labels": [], "number": 1212, "updated_at": "2011-06-01 07:16:17", "user": 9347, "closed_at": "2011-06-01 07:16:17", "id": 937853, "title": "Travis-ci", "url": "https://api.github.com/repos/rails/rails/issues/1212", "created_at": "2011-05-22 13:42:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223608", "text": "Hey @dmathieu,\n\n@svenfuchs and I are working on it, we had a prototype working but we need to make some changes before we can turn it on for all builds.\n\nI'll let you know how it goes :)\n\nJosh\n", "created_at": "2011-05-23 19:11:02", "user": 8701, "id": 1223608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272600", "text": "Closing this as it's actually not a bug request.\n", "created_at": "2011-06-01 07:16:17", "user": 9347, "id": 1272600}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This change to Hash key format (from `:key => val`, to `key: val`) breaks if you:\n1. generate `rails new foo` on a machine w/ 1.9.2\n2. then deploy to a machine running 1.8.7 (like REE)\n\nexample:\n\n```\n/config/initializers/session_store.rb:3: syntax error, unexpected ':', expecting $end (SyntaxError)\n```\n", "labels": [], "number": 1213, "updated_at": "2014-07-03 04:33:08", "user": 1920, "closed_at": "2011-05-22 14:43:43", "id": 937997, "title": "1.9 style Hash format in generated files breaks when deployed to 1.8.7", "url": "https://api.github.com/repos/rails/rails/issues/1213", "created_at": "2011-05-22 14:39:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217404", "text": "You shouldn't have different versions of ruby in your development machine and the production one. rvm is here just for that.\nI don't think this hash change should be reverted.\n", "created_at": "2011-05-22 14:42:50", "user": 9347, "id": 1217404}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217406", "text": "Agreed with @dmathieu. You can also pass --old-hash-syntax (or something like that) to use the old syntax.\n", "created_at": "2011-05-22 14:43:43", "user": 9582, "id": 1217406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217415", "text": "It's `--old-style-hash`.\n", "created_at": "2011-05-22 14:48:41", "user": 4912, "id": 1217415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217417", "text": "@dmathieu RVM is how we found the bug ;) develop against 1.9.2, test against other versions. i believe it's common to develop against 1.9.2 but deploy to production running REE (which is 1.8.7)\n", "created_at": "2011-05-22 14:49:23", "user": 1920, "id": 1217417}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217421", "text": "It's common to develop using MRI 1.8 and deploy with REE 1.8.\nIf you develop using 1.9, it makes much more sense to deploy with 1.9.\n", "created_at": "2011-05-22 14:51:31", "user": 9347, "id": 1217421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217424", "text": "I can agree that it is insane to develop on 1.9 and deploy on 1.8.\n", "created_at": "2011-05-22 14:52:06", "user": 9582, "id": 1217424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217456", "text": "strongly disagree.\n\nif you're developing an application that others can host, you can't predict their environments. this change requires the application developer to choose between developing against 1.8, or requiring the host to run 1.9.2, or maintain platform-specific forks.\n\nare there similar precedents in the codebase?\n", "created_at": "2011-05-22 15:02:51", "user": 1920, "id": 1217456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217473", "text": "If you're developing an application for which you can't predict the environment, you should use 1.8 in your development environment.\n", "created_at": "2011-05-22 15:11:27", "user": 9347, "id": 1217473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217493", "text": "gentlemen, this was a purely aesthetic change that breaks compatibility and puts the burden of discovery & resolution on the individual developer. it should be reverted.\n", "created_at": "2011-05-22 15:18:02", "user": 1920, "id": 1217493}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217549", "text": "@defeated - unfortunately you are probably in the minority use case by developing on a different Ruby version than you deploy on. It is sane to assume that if you develop on 1.9 you will deploy on 1.9. Why not create a template that you can use for all your in house applications that uses the old-style-hashes argument?\n", "created_at": "2011-05-22 15:36:37", "user": 3648, "id": 1217549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274638", "text": "I agree with @defeated.\n\nSo long as Rails supports both 1.8 and 1.9, it is assumed that any given Rails application **may** also support both 1.8 and 1.9. So long as Rails supports both 1.8 and 1.9, it should support them equally: in this case, that means generating code that runs equally well on both versions of Ruby.\n\nWhen and only when Rails ditches support for Ruby 1.8, then it might be nice to use 1.9-only syntax that will break under 1.8. Until then, there will be numerous minorities like @defeated with different edge cases where things break mysteriously an unexpectedly.\n\nIt is not \"sane to assume\" that development and deployment are necessarily identical, and it is not good to posit that they _should_ be the same. As a popular, if tangential, example, consider someone who develops on a Mac laptop and deploys on an Ubuntu server. As a relevant example, consider someone who prefers to develop on 1.9 because it is faster, but continues to deploy on 1.8 because it has been stable for longer (he runs the tests periodically on 1.8 just to be sure, but usually runs the on 1.9 for the speed). Or, similarly, consider someone whose production environment is 1.8 but who wishes soon to move production to 1.9; in anticipation, he begins developing with 1.9, with the goal of establishing over six months that his application well on 1.9, and has even set up a staging infrastructure on 1.9, but plans to continue the 1.8 production deployment until the stability of his application on 1.9 has been established. (In this paragraph, the \"application\" may be an amalgamation of multiple Rails apps serving as its pieces, since the generated file in question is only generated for a new Rails app.)\n\nRails _should_ be opinionated. It _should_ be opinionated that 1.9 is preferred. It _should_ lead the charge to move everyone to 1.9. But if it claims, for the time being, also to support 1.8, then it should, for the time being, also support 1.8 _well_.\n", "created_at": "2011-06-01 14:32:42", "user": 169419, "id": 1274638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274907", "text": "We have --old-style-hash to deal with the minority case of developing on 1.9 and deploying on 1.8 (seems like a bad idea to me). Doing something for a \"purely aesthetic change\" is half the enjoyment I get out of Rails, so we're certainly not going to change the default. The new hash style is one of my favorite features of 1.9.\n", "created_at": "2011-06-01 15:09:26", "user": 2741, "id": 1274907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275239", "text": "I prefer the json-mimicry of 1.9 hashes, but in this case you're binding to a specific runtime version at the wrong time. And you don't get the enjoyment of writing \"key: val\" as it is being written for you.\n\nLet the developer choose to bind to 1.9 by using the new hash syntax in their own code, not the framework generated code.\n\nThank you for `--old-style-hash` - while it doesn't help ex post facto, I have added it to my template for future projects.\n", "created_at": "2011-06-01 15:56:02", "user": 1920, "id": 1275239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4357900", "text": "The problem with the new invalidating of the old hash, is that where there are 200 files that use it, and the programmer that wrote it is dead and gone. And there is in fact no developer in house. But the code has to move to a new version of Rails because the servers have been updated. To assert that the code has to rewritten sort of goes against the DRY... no?  That I now have to open files that I've never seen before, to change the code... well I get paid by the hour, so it's not a problem.. \nI hope windows does the same with EXE's.  each new version of the OS means old programs don't work.. Cahh-Ching $$$$\n\nThe real question could be.\nWhat if 2.0 changes it back (or to something else) and all our new hashs have to be changed?\n", "created_at": "2012-03-06 22:37:35", "user": 1302918, "id": 4357900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4357968", "text": "@baash05 Ruby 1.9 does support both old style hash and new style hash. There's no need to change the old style hash.\n", "created_at": "2012-03-06 22:40:38", "user": 4912, "id": 4357968}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Sprockets moved to beta6\n", "labels": [], "number": 1214, "updated_at": "2014-07-03 04:33:11", "user": 3948, "closed_at": "2011-05-23 01:27:50", "id": 938046, "title": "Sprockets moved to beta6", "url": "https://api.github.com/repos/rails/rails/issues/1214", "created_at": "2011-05-22 14:55:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217629", "text": "First commit as Sprockets gets updated to beta6 .\n\nSecond commit fixed errors with new version of Sprockets. I think loading in test is fine.\n\n/cc @josh\n", "created_at": "2011-05-22 16:00:06", "user": 3948, "id": 1217629}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217665", "text": "Sprockets should require those files. Btw, if sprockets is having an engine, we should probably remove the railtie from Rails. I will leave it up to Josh to update 3-1-stable and master.\n", "created_at": "2011-05-22 16:09:06", "user": 9582, "id": 1217665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1217985", "text": "Err, @wycats is working on a sprockets-rails plugin. I don't think the railtie should be in sprockets. I'll talk to Sam about this.\n", "created_at": "2011-05-22 17:51:05", "user": 137, "id": 1217985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219365", "text": "Bumped to beta 8\n", "created_at": "2011-05-23 01:27:50", "user": 137, "id": 1219365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219372", "text": "Closing this as Sprockets moves to beta8..!!\n", "created_at": "2011-05-23 01:29:48", "user": 3948, "id": 1219372}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "remove require active_support/tzinfo as file dosent exists #TODO fix\n", "labels": [], "number": 1215, "updated_at": "2014-06-27 09:19:04", "user": 111473, "closed_at": "2011-05-22 16:52:01", "id": 938271, "title": "remove require active_support/tzinfo as file dosent exists #TODO fix", "url": "https://api.github.com/repos/rails/rails/issues/1215", "created_at": "2011-05-22 16:42:05", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1216, "updated_at": "2014-07-03 04:33:17", "user": 134173, "closed_at": "2011-05-27 21:32:42", "id": 938368, "title": "Tzinfo fixes.", "url": "https://api.github.com/repos/rails/rails/issues/1216", "created_at": "2011-05-22 17:23:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218124", "text": "I don't follow. What exactly is this fixing? Is there a failing test?\n", "created_at": "2011-05-22 18:37:57", "user": 9582, "id": 1218124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251885", "text": "I don't think this fixes anything.\n", "created_at": "2011-05-27 21:32:42", "user": 3124, "id": 1251885}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hopefully this is in the right place - if not, please point me in the right direction.\n\nI'm probably not alone in preferring the original .sass syntax over .scss; as far as I can see there currently isn't an option you can set/pass that will generate the assets as tabbed .sass files instead of .scss. An option like --sass-format for generating assets/controllers or a variable we could set in a config file would be handy.\n\nIs this a reasonable request, or something that should be made into a gem?\n", "labels": [], "number": 1217, "updated_at": "2011-05-24 12:33:41", "user": 94277, "closed_at": "2011-05-24 12:33:41", "id": 938434, "title": "Provide a command line option for SASS asset generation", "url": "https://api.github.com/repos/rails/rails/issues/1217", "created_at": "2011-05-22 17:49:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219596", "text": "This is been talked about here:\n\nhttps://github.com/sstephenson/sprockets/pull/23\n\nThere are some issues so it didn't make it into the current release.\n", "created_at": "2011-05-23 03:10:33", "user": 38004, "id": 1219596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220178", "text": "I think it should be possible to precompile all SASS files by doing `compass .` (assuming proper compass configuration ~ path to SASS files).\n", "created_at": "2011-05-23 06:43:41", "user": 195035, "id": 1220178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227845", "text": "I'd be happy to see this, but it requires someone to do the work. The issues here are meant for tickets or bug reports, not feature requests (they tend to become very many, very fast without getting cleared out).\n", "created_at": "2011-05-24 12:33:41", "user": 2741, "id": 1227845}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": ":-)\n", "labels": [], "number": 1218, "updated_at": "2014-07-03 04:33:21", "user": 3948, "closed_at": "2011-05-22 18:37:25", "id": 938461, "title": "No more Lazy Tzinfo.", "url": "https://api.github.com/repos/rails/rails/issues/1218", "created_at": "2011-05-22 18:04:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218122", "text": "The instances are still lazy loaded. Not the library. :)\n", "created_at": "2011-05-22 18:37:25", "user": 9582, "id": 1218122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1218133", "text": "Ohh My Bad :-)\n", "created_at": "2011-05-22 18:42:22", "user": 3948, "id": 1218133}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The performance breakdown at the end of an action doesn't include all time spent in activerecord - it only includes time spent until the point where the view finishes rendering. If more time is spent afterwards (or if no view is rendered at all, ie the response is a redirect) then it is not included in the total\n", "labels": [], "number": 1219, "updated_at": "2014-07-03 04:33:24", "user": 5927, "closed_at": "2011-05-22 19:08:14", "id": 938557, "title": "Take into account time spent in AR even if a redirect occurs or if it is ", "url": "https://api.github.com/repos/rails/rails/issues/1219", "created_at": "2011-05-22 18:53:13", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Appears after commit 60b55baca9e381deb3a0a85580f089f4caf551d4\n\n<pre>\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activerecord/lib/active_record/railties/controller_runtime.rb:26:in `cleanup_view_runtime'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/implicit_render.rb:5:in `send_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/abstract_controller/base.rb:167:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/rendering.rb:10:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/abstract_controller/callbacks.rb:18:in `block in process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/callbacks.rb:416:in `_run__548827729508408665__process_action__3169742628848342379__callbacks'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/callbacks.rb:386:in `_run_process_action_callbacks'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/notifications.rb:55:in `block in instrument'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/notifications.rb:55:in `instrument'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/params_wrapper.rb:202:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/rescue.rb:17:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activerecord/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/abstract_controller/base.rb:121:in `process'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/abstract_controller/rendering.rb:45:in `process'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal.rb:193:in `dispatch'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_controller/metal.rb:236:in `block in action'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/routing/route_set.rb:29:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-mount-cb252d9afdbd/lib/rack/mount/route_set.rb:152:in `block in call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-mount-cb252d9afdbd/lib/rack/mount/code_generation.rb:93:in `block in recognize'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-mount-cb252d9afdbd/lib/rack/mount/code_generation.rb:75:in `optimized_each'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-mount-cb252d9afdbd/lib/rack/mount/code_generation.rb:92:in `recognize'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-mount-cb252d9afdbd/lib/rack/mount/route_set.rb:141:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/routing/route_set.rb:531:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/sass-54f1526928a5/lib/sass/plugin/rack.rb:54:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/etag.rb:23:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/conditionalget.rb:25:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/flash.rb:243:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/session/abstract/id.rb:195:in `context'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/session/abstract/id.rb:190:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/cookies.rb:321:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activerecord/lib/active_record/query_cache.rb:54:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activerecord/lib/active_record/identity_map.rb:152:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/sendfile.rb:102:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/railties/lib/rails/rack/logger.rb:13:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/methodoverride.rb:24:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/runtime.rb:17:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/lock.rb:34:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/railties/lib/rails/rack/content_length.rb:16:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/railties/lib/rails/engine.rb:438:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-8c19ebe5539f/railties/lib/rails/rack/log_tailer.rb:14:in `call'\n/home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-a976537cd013/lib/rack/handler/webrick.rb:59:in `service'\n/home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n/home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n/home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n</pre>\n", "labels": [], "number": 1220, "updated_at": "2011-05-23 03:40:10", "user": 108694, "closed_at": "2011-05-23 03:40:10", "id": 938744, "title": "undefined local variable or method `db_during_render'", "url": "https://api.github.com/repos/rails/rails/issues/1220", "created_at": "2011-05-22 20:11:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219578", "text": "Reverted here \n\nhttps://github.com/rails/rails/commit/ba3ea9c90b000d8520944b51b2f6d41af148090c\n", "created_at": "2011-05-23 03:03:32", "user": 3948, "id": 1219578}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There was a problem that I can't `cd actionpack` and `bundle exec rake` in there. Sprocket was trying to look for these two things:\n- `Rails::VERSION::STRING`\n- `.initializer(str)` in `Rails::Engine`\n\nThis commit added require to version.rb into Abstract Unit, and mocking the `Rails::Engine.initializer` in `sprockets_helper_test.rb`\n", "labels": [], "number": 1221, "updated_at": "2014-07-03 04:33:30", "user": 4912, "closed_at": "2011-05-22 23:05:43", "id": 939052, "title": "Make sure that we're able to run Action Pack test standalone.", "url": "https://api.github.com/repos/rails/rails/issues/1221", "created_at": "2011-05-22 23:04:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220159", "text": "Hrm, this should have been fixed in sprockets.\n", "created_at": "2011-05-23 06:35:19", "user": 9582, "id": 1220159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221915", "text": "As of beta6, no. As of beta8, yes.\n", "created_at": "2011-05-23 14:26:05", "user": 4912, "id": 1221915}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Kind of Revert \n\nhttps://github.com/rails/rails/commit/90f028a4dc48152baded4cba9ec66474c2e98f48\n", "labels": [], "number": 1222, "updated_at": "2014-06-18 10:10:21", "user": 3948, "closed_at": "2011-05-23 06:36:02", "id": 939405, "title": "We don't need to load version any more as Sprockets.beta8 is included. ", "url": "https://api.github.com/repos/rails/rails/issues/1222", "created_at": "2011-05-23 01:40:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey guys,\n\nI've got some JS files going into `vendor/assets/javascripts` that need to be loaded in a specific order so I can't do this:\n\n```\n// require_tree ../../../vendor/assets/javascripts/fileupload\n```\n\nThe JS files are all included in `application.js`, no problem there (other than the order they're being brought in). So to define the order I switch to something like this:\n\n```\n// require ../../../vendor/assets/javascripts/fileupload/jquery.fileupload\n// require ../../../vendor/assets/javascripts/fileupload/jquery.fileupload-ui\n```\n\nHowever when I do this I get the following error:\n\n```\nthrow Error(\"Sprockets::FileNotFound: couldn't find file '../../../vendor/assets/javascripts/fancybox/jquery.fileupload-ui'\\n  (in /var/www/my_rails_site/app/assets/javascripts/application.js):12\")\n```\n\nAdding `.js` on the end didn't do any good either. Am I missing something really simple or is this actually a bug?\n\nAs a side note--from DHH's presentation he made it sound like `lib/assets` and `vendor/assets` would automatically be in the pipeline loadpath, but apparently not? `../../../vendor/assets` is ugly! :)\n\nRob\n", "labels": [], "number": 1223, "updated_at": "2011-07-29 20:57:35", "user": 300, "closed_at": "2011-05-25 01:23:38", "id": 939472, "title": "Asset pipeline - can't require individual files in vendor/assets, only require_tree", "url": "https://api.github.com/repos/rails/rails/issues/1223", "created_at": "2011-05-23 02:10:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219579", "text": "Rails already looks inside `vendor/assets` for files, so you don't need to go all the way back to root.\n\n```\n//= require fileupload/jquery.fileupload\n//= require fileupload/jquery.fileupload-ui\n```\n\nalso the extension is appended automatically, so any of the following files would be found: (probably even more, but .js and .js.coffee work for sure)\n\n```\nvendor/assets/javascripts/fileupload/jquery.fileupload.js\nvendor/assets/javascripts/fileupload/jquery.fileupload.js.coffee\nvendor/assets/javascripts/fileupload/jquery.fileupload-ui.js\nvendor/assets/javascripts/fileupload/jquery.fileupload-ui.js.coffee\n```\n", "created_at": "2011-05-23 03:03:42", "user": 38004, "id": 1219579}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219609", "text": "I tried that originally but it gives me a different error!\n\n```\nthrow Error(\"Sprockets::ArgumentError: require_tree argument must be a relative path\\n  (in /var/www/my_rails_site/app/assets/javascripts/application.js):13\")\n```\n\nSo I added all the `../` to make the path relative. If I try adding just a `./` as if they were relative to the current directory then I'm back to my original error: \n\n```\nthrow Error(\"Sprockets::FileNotFound: couldn't find file './fileupload/jquery.fileupload'\\n  (in /Users/rob/Sites/watchmemakethis/app/assets/javascripts/application.js):11\")\n```\n", "created_at": "2011-05-23 03:15:59", "user": 300, "id": 1219609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219617", "text": "Check if you have a `=` after `//`:\n\n```\n//= require fileupload/jquery.fileupload\n```\n\ninstead of\n\n```\n// require fileupload/jquery.fileupload\n```\n", "created_at": "2011-05-23 03:18:01", "user": 38004, "id": 1219617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219619", "text": "Sorry, I had a `require_tree` in there to include the _remaining_ files in the `fileupload` directory, after I loaded the first two manually, that's what threw my \"must be a relative path\" error.  So, to do a `require_tree` I would still need `../../../vendor/assets/javascripts/fileupload`, right?\n", "created_at": "2011-05-23 03:19:22", "user": 300, "id": 1219619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219645", "text": "Okay so to sum up, here are my requires now, everything looks good:\n\n```\n//= require fileupload/jquery.fileupload\n//= require fileupload/jquery.fileupload-ui\n//= require_tree ../../../vendor/assets/javascripts/fileupload\n```\n\nAssuming `require_tree` really does need to be relative, and has to be relative to `app/assets/javascripts` then this can be closed, thanks for the help!\n", "created_at": "2011-05-23 03:28:40", "user": 300, "id": 1219645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219647", "text": "I am experiencing this same problem. Sprockets throws:\n\n```\nthrow Error(\"Sprockets::FileNotFound: couldn't find file 'fileupload/jquery.fileupload'\\n  (in /Users/alex/Rails/uclass/app/assets/javascripts/jquery-fileupload.js):1\")\n```\n\nThe files are located in vendor/assets/javascripts/fileupload but Sprockets has no idea where to find them.\n", "created_at": "2011-05-23 03:28:49", "user": 46724, "id": 1219647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219930", "text": "Typically what you'd really want to do here is have a `vendor/assets/javascripts/fileupload/index.js` that reads as follows:\n\n```\n//= require jquery.fileupload\n//= require jquery.fileupload-ui\n//= require_tree .\n```\n\nThen doing `javascript_include_tag 'fileupload'` will find the index.js and include _it_, which makes relative paths a lot simpler, and separates things out nicely.\n\nEDIT: Also note that this will actually include the first two files twice. Not the end of the world if you're gzipping, but you'd really be better off enumerating all the files explicitly, if you require a specific load order. \n\nAlso, this obviously requires you to modify something in vendor, which is a little questionable. It's an option, anyway.\n", "created_at": "2011-05-23 05:15:37", "user": 1284, "id": 1219930}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223993", "text": "do what @burke said\n", "created_at": "2011-05-23 20:10:35", "user": 137, "id": 1223993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232453", "text": "Thanks guys. I think this issue can be closed out now.\n", "created_at": "2011-05-25 00:44:04", "user": 46724, "id": 1232453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248113", "text": "I want to include a lot of vendor files that have to be in a specific order, (underscore.js and backbone being one pair). As such, I can't just use a <code>require_tree</code> . to pull in my vendor files, (without renaming each file with a prefix. Yuck).\n\nThe following is within my <code>app/assets/javascripts/application.js</code> file:\n\n<pre>\n//= require modernizr-1.7\n//= require jquery-1.6.1\n//= require underscore-1.1.5\n//= require backbone-0.3.3\n//= require_tree .\n</pre>\n\n\nI have tried every combination of with/out extensions, with/out the require_tree and with/out the relative paths, and nothing works. All of my vendor files are in <code>/vendor/assets/javascripts/</code>.\n\nAm I right in understanding that the proposed solution is a folder for each of the above files in <code>/vendor/assets/javascripts/</code> each containing a manifest file and the file itself? And that doing so will mean all files are included twice?\n", "created_at": "2011-05-27 09:23:21", "user": 4986, "id": 1248113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1684949", "text": "You need to restart webrick after adding `vendor/javascripts/` folder and some js-files there. All works fine after restarting  and you can require individual js-files from there without any problems.\n", "created_at": "2011-07-29 20:57:35", "user": 95125, "id": 1684949}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "With Engines blurring the lines between library and application, it's really starting to get awkward not having the ability to merge Gemfiles in certain use cases. \n\nIn particular, I'm wanting to have an application template of sorts as an engine, with a fairly hefty Gemfile, supporting several different rubies using the `platform` helper, and extensive use of environment `group`s. Declaring all these as gemspec dependencies is a BIG step backwards, and manually syncing the per-project Gemfiles is an inelegant hassle. I feel that to really embrace the potential power of engines we need to be able to merge Gemfiles.\n\nIdeally, you would somewhere indicate that this Engine should merge its Gemfile into the Application's Gemfile, with the Application's shadowing the Engine's declarations where necessary. \n\nIf anyone has any thoughts on how to go about this, I'd love to hear them. I started down a couple paths earlier today, but none of them felt right. I think this might be a problem that has to be addressed at the bundler level.\n", "labels": [], "number": 1224, "updated_at": "2011-05-23 05:48:40", "user": 1284, "closed_at": "2011-05-23 05:48:40", "id": 939858, "title": "Engines should optionally merge their Gemfile into the App's Gemfile.", "url": "https://api.github.com/repos/rails/rails/issues/1224", "created_at": "2011-05-23 05:29:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1219972", "text": "The really easy solution would be to add a rake task to compile the Gemfile from something along the lines of Gemfile.src, but this reeks of Bad Idea.\n\nAnother thought was to add something like:\n\n```\ngem 'template_application', '1.0.0', :merge_gemfile => true\n```\n\n...but this is a very complex change to bundler internals. I'd be willing to give it a shot, if anyone else wants to sanity check me and thinks this is a sane thing to do, but I feel that Bundler's devs may abhor this idea of sub-Gemfiles.\n", "created_at": "2011-05-23 05:33:03", "user": 1284, "id": 1219972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220012", "text": "This is really a bundler feature request and if/when you open a issue here: https://github.com/carlhuda/bundler I suggest giving an real-world example where adding dependencies to a gemspec and importing that into your Gemfile won't work, otherwise it's likely to be ignored - just talking generically about complicated Gemfiles doesn't help anyone visualise your problem.\n", "created_at": "2011-05-23 05:48:40", "user": 6321, "id": 1220012}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "but there is no way to cancel them since the project is now private...\n", "labels": [], "number": 1225, "updated_at": "2011-05-23 10:33:19", "user": 60891, "closed_at": "2011-05-23 10:33:19", "id": 940306, "title": "old lighthouse send ticket changes", "url": "https://api.github.com/repos/rails/rails/issues/1225", "created_at": "2011-05-23 08:28:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220512", "text": "I don't think core team can do anything about that. It should probably be a ticket for lighthouse's support.\nhttp://help.lighthouseapp.com/\n", "created_at": "2011-05-23 08:38:23", "user": 9347, "id": 1220512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220598", "text": "i think the core team could set the access control list to read only and all should work fine. also im sure, that i am not the only one with this \"problem\" and ping-pong between core team and lighthouse support won't be the best solution \n", "created_at": "2011-05-23 09:01:22", "user": 60891, "id": 1220598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220973", "text": "i found a solution for me: logged in on http://help.lighthouseapp.com and disable the discussion notification in my profile. but this will disable all notifications on all projects which will not work for all.\n", "created_at": "2011-05-23 10:33:19", "user": 60891, "id": 1220973}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I want to add something like `/Users/me/myscripts`\n\nrequire_tree give me an error `require_tree argument must be a relative path`\n", "labels": [], "number": 1226, "updated_at": "2011-05-23 20:09:07", "user": 303497, "closed_at": "2011-05-23 20:09:07", "id": 940509, "title": "How I can add external path with assets to sprockets?", "url": "https://api.github.com/repos/rails/rails/issues/1226", "created_at": "2011-05-23 09:28:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223980", "text": "You shouldn't be accessing files outside your rails app with the require directive.\n\nIf you need to get assets from a plugin, you should add that path to `config.assets.path` and just use `require`.\n", "created_at": "2011-05-23 20:09:07", "user": 137, "id": 1223980}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Steps to reproduce:\n\n$ rails _2.3.9_ parents_test\n$ cd parents_test\n$ echo \"class M < ActiveRecord::Base; named_scope(:parents, :conditions => {}); end\" > app/models/m.rb\n$ irb\nruby > M\nSystemStackError: stack level too deep\n    from /usr/local/rvm/gems/ruby-1.9.2-p136/gems/activerecord-2.3.9/lib/active_record/named_scope.rb:90\n", "labels": [], "number": 1227, "updated_at": "2011-09-26 11:37:59", "user": 116019, "closed_at": "2011-05-24 15:26:02", "id": 940616, "title": "Using 'parents' as named_scope's name causes an infinite loop", "url": "https://api.github.com/repos/rails/rails/issues/1227", "created_at": "2011-05-23 09:57:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1220895", "text": "The parents method is reserved by ruby. You shouldn't call your scope that way.\n", "created_at": "2011-05-23 10:06:51", "user": 9347, "id": 1220895}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229005", "text": "This is not a bug. Should be closed.\n\ncc @josevalim\n", "created_at": "2011-05-24 15:25:01", "user": 9347, "id": 1229005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2197179", "text": "> The parents method is reserved by ruby.\n\nNo, it's defined by ActiveSupport. Rails should definitely throw a warning here instead of an infinite loop.\n", "created_at": "2011-09-26 11:30:37", "user": 1037292, "id": 2197179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2197215", "text": "To clarify: I ran into this after upgrading from Rails 2.2, which also has the #parents method, but doesn't loop indefinitely when defining a scope named \"parents\". There is no deprecation warning or anything helpful to resolve this issue, and it's hard to even track it down to the named_scope problem: In our app, the tests just hung up after eating all available RAM.\n", "created_at": "2011-09-26 11:37:59", "user": 1037292, "id": 2197215}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed version of https://github.com/rails/rails/pull/1219 - sorry for the noise\n", "labels": [], "number": 1228, "updated_at": "2014-06-26 15:40:46", "user": 5927, "closed_at": "2011-05-23 10:11:24", "id": 940648, "title": "Take into account time spent in AR even if a redirect occurs or if it is after the render", "url": "https://api.github.com/repos/rails/rails/issues/1228", "created_at": "2011-05-23 10:02:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Simple fix for correctly inverting an add_index migration when a name has been provided\n\nThis is for Issue #1205 on the github tracker.\n", "labels": [], "number": 1229, "updated_at": "2014-06-26 15:40:49", "user": 162987, "closed_at": "2011-05-27 21:34:15", "id": 941234, "title": "Fix for Issue #1205", "url": "https://api.github.com/repos/rails/rails/issues/1229", "created_at": "2011-05-23 12:58:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221602", "text": "I believe it'd be better to do it the following way :\n\n```\nif options && options[:name]\n    options_hash = {:name => options[:name]}\nelse\n    options_hash = {:column => columns}\nend\n[:remove_index, [table, options_hash]]\n```\n\nThat way, we don't have code repetition on generating the array.\n", "created_at": "2011-05-23 13:31:54", "user": 9347, "id": 1221602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1221796", "text": "Good point. I've neatened up the code as per the suggestion :)\n", "created_at": "2011-05-23 14:05:38", "user": 162987, "id": 1221796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229241", "text": "I guess one with no options passed in would expose why I'm using .try would make sense. \n\nAny other suggestions for tests beyond the one I already provided for the new functionality? \n", "created_at": "2011-05-24 15:53:40", "user": 162987, "id": 1229241}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adds an entry into the ActionPack CHANGELOG mentioning the following new method: https://github.com/rails/rails/pull/1189\n", "labels": [], "number": 1230, "updated_at": "2014-07-03 04:33:52", "user": 83449, "closed_at": "2011-05-23 13:46:39", "id": 941257, "title": "Add entry to AP changelog", "url": "https://api.github.com/repos/rails/rails/issues/1230", "created_at": "2011-05-23 13:05:47", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nHere are some minor corrections to ActiveSupport core_ext/kernel debugger related code, one which removes a `require_library_or_gem`, which is bad practice imo, and subsequent requires (which were unused). And another commit which removes AS removing `breakpoint` from `Kernel` if it existed, this is added by `ruby-debug` as an alias and I am not sure why Rails would say its been renamed.\n\nI think this is good to apply to 3-1-stable and master, but I leave that up to you.\n\nThanks,\n\nJosh\n", "labels": [], "number": 1231, "updated_at": "2014-06-24 16:53:11", "user": 8701, "closed_at": "2011-05-23 13:48:12", "id": 941387, "title": "Ruby debugger corrections", "url": "https://api.github.com/repos/rails/rails/issues/1231", "created_at": "2011-05-23 13:41:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As per comment mentioned for 'def root' at\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/mapper.rb#L259\n\nroot route should be at the very top because that will help it match\nfirst. Since root is most popular route it is beneficial.\n\nI agree with that and this patch moves the root route to the top\nto encourage that behavior .\n", "labels": [], "number": 1232, "updated_at": "2014-06-27 09:51:57", "user": 6399, "closed_at": "2011-05-23 20:11:04", "id": 941542, "title": "root route should be the very first route in routes.rb for efficiency reason", "url": "https://api.github.com/repos/rails/rails/issues/1232", "created_at": "2011-05-23 14:15:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223969", "text": "The router doesn't do a linear scan. I don't think we need this.\n", "created_at": "2011-05-23 20:06:53", "user": 137, "id": 1223969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275757", "text": "Do you have timings for this?\n", "created_at": "2011-06-01 17:18:43", "user": 169419, "id": 1275757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1291595", "text": "Well if that's not necessary, the comment in mapper.rb should be removed.\n", "created_at": "2011-06-03 07:17:11", "user": 9347, "id": 1291595}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Given the following models:\n\n``` ruby\nclass Menu < ActiveRecord::Base\n  has_many :links, :as => :owner\n  default_scope includes(:links)\nend\n\nclass Link < ActiveRecord::Base\n  belongs_to :menu, :polymorphic => true\nend\n```\n\nthen doing a `Menu.first` doesn't load the links. Pretty sure this is a regression from 3.0.x. There's a related issue with has_many :through as well where it tries to execute the default scope but can't find the association reflection. I'll add some more details later and provide some failing tests.\n", "labels": ["activerecord", "regression"], "number": 1233, "updated_at": "2011-05-24 22:30:33", "user": 6321, "closed_at": "2011-05-24 22:30:33", "id": 942622, "title": "Default scope includes(:association) is ignored", "url": "https://api.github.com/repos/rails/rails/issues/1233", "created_at": "2011-05-23 17:43:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223776", "text": "Failing tests would be great, thanks! :)\n", "created_at": "2011-05-23 19:41:11", "user": 1979, "id": 1223776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225618", "text": "@jonleighton I've created a pull request #1246 that seems to fix the issue - not sure if there's a better way of fixing it. The issue with `has_many :through` is different so I'll create a new ticket for that.\n", "created_at": "2011-05-24 02:12:51", "user": 6321, "id": 1225618}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey Guys,\n\nThis patch is for 3-1-stable and deprecates `require_library_or_gem` as its been removed in 3.2.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1234, "updated_at": "2014-06-13 08:29:56", "user": 8701, "closed_at": "2011-05-23 18:39:24", "id": 942682, "title": "Deprecate kernel requires", "url": "https://api.github.com/repos/rails/rails/issues/1234", "created_at": "2011-05-23 17:55:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223120", "text": "Not sure why the other commits were added to this pull request :/\n", "created_at": "2011-05-23 17:56:31", "user": 8701, "id": 1223120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223227", "text": "it seems to be some rebase issue. I cannot even use the merge button. :(\n", "created_at": "2011-05-23 18:11:51", "user": 9582, "id": 1223227}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223273", "text": "can you use the merge button for other branches?\n", "created_at": "2011-05-23 18:18:48", "user": 8701, "id": 1223273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223338", "text": "c\n", "created_at": "2011-05-23 18:30:12", "user": 9582, "id": 1223338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223381", "text": "```\njoshk wants someone to merge 3 commits into rails:master from joshk:deprecate_kernel_requires\n```\n\nThat's why. You'd have to do it manually then, or create another pull request to make it merge into `rails:3-1-stable`\n", "created_at": "2011-05-23 18:36:58", "user": 4912, "id": 1223381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223399", "text": "ahhhhhhhhh, @sikachu thanks for the tip, i'll change that now\n", "created_at": "2011-05-23 18:39:06", "user": 8701, "id": 1223399}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis patch is for 3-1-stable and deprecates require_library_or_gem as its been removed in 3.2.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1235, "updated_at": "2014-06-27 10:07:44", "user": 8701, "closed_at": "2011-05-23 19:20:38", "id": 942890, "title": "Deprecate kernel requires", "url": "https://api.github.com/repos/rails/rails/issues/1235", "created_at": "2011-05-23 18:40:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223418", "text": "@josevalim @sikachu fixed! :)\n", "created_at": "2011-05-23 18:40:56", "user": 8701, "id": 1223418}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We ran in to an issue upgrading a Rails 2.3.10 project to Rails 3.0 due to put_via_redirect not being included in the list of methods that Runner wraps with a reset for @html_document. I also added delete_via_redirect for completeness.\n", "labels": [], "number": 1236, "updated_at": "2014-07-02 05:33:37", "user": 223, "closed_at": "2012-03-29 16:02:56", "id": 943045, "title": "Also reset put_via_redirect and delete_via_redirect.", "url": "https://api.github.com/repos/rails/rails/issues/1236", "created_at": "2011-05-23 19:11:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223678", "text": "Tests please?\n", "created_at": "2011-05-23 19:24:35", "user": 9582, "id": 1223678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223958", "text": "I wasn't able to find tests for this code; it may fall under the category of \"tests for tests\" since this is part of the integration testing infrastructure. If I've missed the tests please point me in the right direction and I'll be happy to add tests to make sure these methods are covered.\n", "created_at": "2011-05-23 20:04:56", "user": 223, "id": 1223958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544464", "text": "You might try to add some test in `actionpack/test/dispatch/integration_test.rb`. Just create it and add your failing test case, so we know what you're fixing. ;)\n", "created_at": "2011-07-11 05:38:16", "user": 4912, "id": 1544464}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4795445", "text": "@ntalbott Do you think you can bring this up-to-date with current master and add some tests, so we could merge? Thanks.\n", "created_at": "2012-03-29 02:15:10", "user": 26328, "id": 4795445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4824618", "text": "Don't have the cycles, unfortunately. Anyone else should feel free to pick it up, though. I'll close for now.\n", "created_at": "2012-03-29 16:02:56", "user": 223, "id": 4824618}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4825462", "text": "@ntalbott alright, thanks for reporting back.\n", "created_at": "2012-03-29 16:41:38", "user": 26328, "id": 4825462}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "[sprockets_javascript_include_tag](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/sprockets_helper.rb#L18-34) doesn't respect the api defined by [javascript_include_tag](https://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/asset_tag_helpers/javascript_tag_helpers.rb#L189-195) when adding multiple sources, as in `javascript_include_tag 'one', 'two', 'three'` - I believe that the same happens with the stylesheet helpers.\n", "labels": [], "number": 1237, "updated_at": "2011-05-30 09:14:42", "user": 80978, "closed_at": "2011-05-23 19:58:31", "id": 943241, "title": "SprocketsHelper doesn't respect the old helpers api", "url": "https://api.github.com/repos/rails/rails/issues/1237", "created_at": "2011-05-23 19:52:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1223893", "text": "This is an intention change. You really shouldn't need to have 10 script tag links because you can declare them to be all part of the same bundle.\n", "created_at": "2011-05-23 19:58:31", "user": 137, "id": 1223893}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224031", "text": "Anyway, the lack of flexibility gets in the way of a more modular usage (2/3 tags per page, maybe).\n", "created_at": "2011-05-23 20:16:45", "user": 80978, "id": 1224031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1260631", "text": "+1 to allowing multiple scripts/stylesheets. Whilst bundles are fine for most situations, this seems like a pointless regression in functionality.\n", "created_at": "2011-05-30 09:14:42", "user": 7600, "id": 1260631}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1238, "updated_at": "2014-07-01 19:50:02", "user": 160941, "closed_at": "2011-06-08 03:28:03", "id": 943784, "title": "ruby-prof is failing to compile in ruby trunk, disable it for 1.9.3 in Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/1238", "created_at": "2011-05-23 21:41:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324283", "text": "I have already pushed this, yours was not rebased :(\n", "created_at": "2011-06-08 03:28:03", "user": 52642, "id": 1324283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324289", "text": "Thanks :) !!!\n", "created_at": "2011-06-08 03:29:20", "user": 160941, "id": 1324289}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is a refactor, so no updates to tests.\n\nThis also could be cherry picked cleanly into 3-1-stable.\n", "labels": [], "number": 1239, "updated_at": "2014-06-26 16:59:10", "user": 395621, "closed_at": "2011-05-24 19:59:15", "id": 943849, "title": "Use set data structure to speed up circular reference checks on large/deeply nested objects", "url": "https://api.github.com/repos/rails/rails/issues/1239", "created_at": "2011-05-23 21:52:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226178", "text": "Do you have some simple benchmark that shows that using set is really faster? Thanks!\n", "created_at": "2011-05-24 05:34:12", "user": 9582, "id": 1226178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230685", "text": "Given (I've seen objects even \"bigger\" than this need to be encoded for certain special cases):\n\n``` ruby\nbig_object = 500.times.map { |i| Hash[('a'..'z').map { |j| [j, j] }] }\n```\n\n<pre>\nruby-1.9.2-p180 :016 > Benchmark.bm do |x|\nruby-1.9.2-p180 :017 >     x.report('array') { 100.times { ActiveSupport::JSON.encode(big_object) } }\nruby-1.9.2-p180 :018?>   end\n      user     system      total        real\narray 28.600000   0.100000  28.700000 ( 28.703123)\n</pre>\n\n\n<pre>\nruby-1.9.2-p180 :011 > Benchmark.bm do |x|\nruby-1.9.2-p180 :012 >     x.report('set') { 100.times { ActiveSupport::JSON.encode(big_object) } }\nruby-1.9.2-p180 :013?>   end\n      user     system      total        real\nset 27.440000   0.110000  27.550000 ( 27.546195)\n</pre>\n\n\nWhile the numbers varied slightly over multiple runs, set always beat array by a significant enough margin for me to think this small patch is worth applying.\n", "created_at": "2011-05-24 19:31:16", "user": 395621, "id": 1230685}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1240, "updated_at": "2014-07-03 04:34:24", "user": 195035, "closed_at": "2011-05-24 05:33:05", "id": 944164, "title": "fix minor spelling mistakes", "url": "https://api.github.com/repos/rails/rails/issues/1240", "created_at": "2011-05-23 23:01:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1224959", "text": "You might also want to sort out the phrase 'configuration config file' on line 9 too :)\n", "created_at": "2011-05-23 23:15:11", "user": 162987, "id": 1224959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225048", "text": "Missed that somehow.\n", "created_at": "2011-05-23 23:38:56", "user": 195035, "id": 1225048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226175", "text": "Please do documentation changes on github.com/lifo/docrails. Thanks!\n", "created_at": "2011-05-24 05:33:05", "user": 9582, "id": 1226175}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1241, "updated_at": "2014-06-26 18:54:33", "user": 83449, "closed_at": "2011-05-24 00:09:42", "id": 944225, "title": "Remove extra white-space on exception message.", "url": "https://api.github.com/repos/rails/rails/issues/1241", "created_at": "2011-05-23 23:18:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225200", "text": "Nice job!\n", "created_at": "2011-05-24 00:18:37", "user": 38223, "id": 1225200}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails 3.0.7 allocates a lot of memory if you do benchmark{}/silence{}/any_helper_with_yield{} in a loop:\n\n```\n<%= 20.times do %>\n    <%= benchmark(\"test\") { %>\n        hello world\n     <% } %>\n<% end %>\n```\n\nThis one eats about 300MB RAM. 100.times{} easily killed our shared development server with 2GB RAM.\n\nEasy to reproduce:\n1. rails new railstest --skip-active-record && rails g controller test\n2. fill config/routes.rb\n3. put that sample into app/views/test/index.html.erb\n4. rails server\n5. wget\n\nIt's not problem for 2.3.11.\n", "labels": [], "number": 1242, "updated_at": "2011-06-06 18:19:35", "user": 806405, "closed_at": "2011-05-31 23:19:21", "id": 944443, "title": "Block in a loop: huge memory allocation in view (lighthouse#6794)", "url": "https://api.github.com/repos/rails/rails/issues/1242", "created_at": "2011-05-24 00:19:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226492", "text": "Does it happen when you use the 3.1 RC? What version of Ruby are you using? Have you tried using other Ruby versions? Does it happen with the production env or just development?\n", "created_at": "2011-05-24 07:05:23", "user": 1979, "id": 1226492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226732", "text": "Ok, I found the focus isn't on the memory allocation, the real problem is the reported view prints \"hello world\" in 2.097.150 lines instead of 20.\n\nYes, it does happen with 3.1.0.rc1 in production and development mode too.\n\nI verified it on 2 machines, Debian Lenny (32bit) and Squeeze (64bit):\nruby 1.8.7 (2008-08-11 patchlevel 72) [i486-linux]\nruby 1.8.7 (2010-08-16 patchlevel 302) [x86_64-linux]\n", "created_at": "2011-05-24 08:06:35", "user": 806405, "id": 1226732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271040", "text": "Hello,\n\nFor the blocks you are using, there is no meaningful value in using `<%=` instead of `<%`. As a quick fix, you should just remove the `=`.\n\nThe reason this is happening is to do with how [erubis](http://www.kuwata-lab.com/erubis/) compiles your template, which means that on every iteration it prints out the entire current contents of the page up to that point, which obviously gets quite big quite quickly.\n\nIt might be worth contacting the erubis author about this, but it is not a Rails bug.\n\nThanks\n", "created_at": "2011-05-31 23:19:21", "user": 1979, "id": 1271040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1310876", "text": "Hi,\n\nI tried <% first, but I think the compatibility layer translate it into <%= so there's no elegant workaround, just the following:\n\n```\n<% (20.times do %>\n    <% (benchmark(\"test2\") do %>\n       hello world\n     <% end; nil) %>\n<% end; nil) %>\n```\n\nThe only difference between <% and <%= the following log message:\n\nDEPRECATION WARNING: <% %> style block helpers are deprecated. Please use <%= %>. (called from _app_views_test_index_html_erb__814193393_70273774260100_0 at /root/railstest/app/views/test/index.html.erb:2)\n\nAnyway, I agree this is an erubis bug so I left the ticket closed.\n", "created_at": "2011-06-06 18:19:35", "user": 806405, "id": 1310876}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Parenthesize arguments when the first one is a Regexp literal.\n", "labels": [], "number": 1243, "updated_at": "2014-06-17 08:03:21", "user": 83449, "closed_at": "2011-05-24 05:32:22", "id": 944547, "title": "Fix 'warning: ambiguous first argument; put parentheses or even spaces'.", "url": "https://api.github.com/repos/rails/rails/issues/1243", "created_at": "2011-05-24 00:46:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If a user deletes a Option Type that is in use on products it leave the products and variants in a broken state.\n*Defined Variants are no longer shown on the product page in admin\n*The options type is no longer listed in the product\n*Because unable to add a new option type using the edit interface. The button is gone because the variants are still in the system.\n\nPossible Solutions:\n*Prompt to delete all variants based on options during delete\n*Check for variants and disallow delete with error message \"Product X still uses this Option Type\"\n", "labels": [], "number": 1244, "updated_at": "2011-05-24 07:56:02", "user": 44528, "closed_at": "2011-05-24 07:56:02", "id": 944584, "title": "Deleting a Option Type leaves broken products/variants", "url": "https://api.github.com/repos/rails/rails/issues/1244", "created_at": "2011-05-24 00:53:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226674", "text": "You appear to be using a rails-powered application. Which one is it ? I think your ticket would belong there instead of here.\n", "created_at": "2011-05-24 07:53:29", "user": 9347, "id": 1226674}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226684", "text": "Mercy no more talking a type at the same time. I posted this to the wrong project sorry!\n", "created_at": "2011-05-24 07:56:02", "user": 44528, "id": 1226684}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "when change the primary key ID's value in console it display right,but Actually it doesn't change the current record's ID.(I think when something can't be changed,it will be nice to warn the user it can't be changed. Otherwise it may be a trap.)\n\nEven worse..for example:  when you change the record of id=4's name equal to \"value of schedule 4\" , and then make current record's id equal to 5 and save it. at last the id=5's name is changed.  \n\nThe reason:\n     in the source code ,the SQL is spliced at this way: the updated id is the last saved id, so actually the other id's fields is changed instead of changing the current record's id and fields.\n   Spliced  SQL:  \"name\" = 'name of schedule 4' WHERE \"schedules\".\"id\" = 5\n\nExample:\nree-1.8.7-2011.03 :001 > Schedule\n => Schedule(id: integer, plan_date: date, plan_id: integer, created_at: datetime, updated_at: datetime, name: string, description: text)\nree-1.8.7-2011.03 :003 > schedule = Schedule.first\n => #<Schedule id: 4, plan_date: \"2011-05-28\", plan_id: 4, created_at: \"2011-05-23 09:36:12\", updated_at: \"2011-05-23 09:36:12\", name: nil, description: nil> \nree-1.8.7-2011.03 :004 > schedule.id\n => 4 \nree-1.8.7-2011.03 :005 > schedule.name = \"name of schedule 4\"\n => \"name of schedule 4\" \nree-1.8.7-2011.03 :006 > schedule.id = 5\n => 5 \nree-1.8.7-2011.03 :007 > Schedule.find(5)\n => #<Schedule id: 5, plan_date: \"2011-05-29\", plan_id: 4, created_at: \"2011-05-23 09:37:07\", updated_at: \"2011-05-23 09:37:07\", name: nil, description: nil> \nree-1.8.7-2011.03 :008 > schedule.save\n => true \nree-1.8.7-2011.03 :009 > reload!\nReloading...\n => true \nree-1.8.7-2011.03 :010 > Schedule.find(4)\n => #<Schedule id: 4, plan_date: \"2011-05-28\", plan_id: 4, created_at: \"2011-05-23 09:36:12\", updated_at: \"2011-05-23 09:36:12\", name: nil, description: nil> \nree-1.8.7-2011.03 :011 > Schedule.find(5)\n => #<Schedule id: 5, plan_date: \"2011-05-29\", plan_id: 4, created_at: \"2011-05-23 09:37:07\", updated_at: \"2011-05-24 01:15:28\", name: \"name of schedule 4\", description: nil> \nree-1.8.7-2011.03 :012 > \n", "labels": [], "number": 1245, "updated_at": "2012-04-27 20:00:08", "user": 698932, "closed_at": "2012-04-27 20:00:08", "id": 944764, "title": "primary key ID,when change ID's value in console it display right,but Actually it doesn't,even worse..", "url": "https://api.github.com/repos/rails/rails/issues/1245", "created_at": "2011-05-24 01:47:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1587964", "text": "This should be a bug:\n\ntesting shows that 'foo.id = something-new' ; 'foo.field = 'new value' will generate a SQL UPDATE statement which looks\nsomething like:\n\n update foos set foos.field = 'new value' where foos.id = 'something-new';\n\nThis will either fail silently - if no record with foos.id = 'something-new' exists OR will corrupt the database.\n\nIt looks like the critical functions are write_attribute() and arel_attributes_values().\n\nactiverecord/lib/active_record/attribute_methods/write.rb#write_attribute() intentionally allows modifying the primary key value in the model.  \n\nActiveRecord::Base#arel_attributes_values() excludes primary keys from SQL, by default, but allows an override. It's not clear that this method would be called at the application level.\n\nIn any case the correct thing is probably to ensure that, if the primary key value is changed, the original value is used in SQL statements.\n\nI don't know where that should happen, but it's probably in arel_attributes_values() and whatever uses it to construct the SQL.\n", "created_at": "2011-07-16 19:54:53", "user": 639851, "id": 1587964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4283367", "text": "try using save!\n", "created_at": "2012-03-02 10:27:25", "user": 174693, "id": 4283367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4285888", "text": "I ran a couple of tests of the original problem in Rails 3.2.2 using sqlite3.\n\nThe database corruption did not occur. Interestingly - and consistently - both save and save! return true. This is consistent database behavior because an update to a record which does not exist should not do anything. Both save's ran in a transaction and both used UPDATE.\n\nI think this is a non-issue and should be closed: anyone changing the primary key on a record probably doesn't know what they are doing and I don't think it's Rail's job to protect them from themselves.\n", "created_at": "2012-03-02 13:51:23", "user": 639851, "id": 4285888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5322820", "text": "+1 for closing if this is not a bug, as @mikehoward suggests.\n", "created_at": "2012-04-25 03:10:49", "user": 139443, "id": 5322820}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5389161", "text": "Ok. I'm closing this now. Please feel free to ask to reopen if you still have this issue in the Rails >= 3.1\n", "created_at": "2012-04-27 20:00:08", "user": 47848, "id": 5389161}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixes #1233. Sending as a pull request so that it can be reviewed before merging.\n", "labels": [], "number": 1246, "updated_at": "2014-07-03 04:34:41", "user": 6321, "closed_at": "2011-05-24 22:31:31", "id": 944817, "title": "Don't ignore includes from default scope", "url": "https://api.github.com/repos/rails/rails/issues/1246", "created_at": "2011-05-24 02:09:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226170", "text": "/cc @jonleighton\n", "created_at": "2011-05-24 05:31:49", "user": 9582, "id": 1226170}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226514", "text": "I'll look at this when I get a moment.\n", "created_at": "2011-05-24 07:10:13", "user": 1979, "id": 1226514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231909", "text": "Hey Andrew,\n\nThanks for catching this and the other issues.\n\nI wanted to implement the fix slightly differently to ensure that all the nuanced logic was captured correctly, without duplication. So I have split out your tests and my fix into two commits:\n\nhttps://github.com/rails/rails/commit/f1f1ab77df4ecfc122ab10c095a1e4e4c8b52353\nhttps://github.com/rails/rails/commit/a000ff7a503158cc95bee9cd4b15ff9089f6828a\n\nHope that's okay.\n\nJon\n", "created_at": "2011-05-24 22:31:31", "user": 1979, "id": 1231909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232351", "text": "No problems - that's why I've ran all these past you since you've a better grasp on what's going on exactly :-)\n", "created_at": "2011-05-25 00:08:23", "user": 6321, "id": 1232351}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Not loading file if PLATFORM not available. \n", "labels": [], "number": 1247, "updated_at": "2014-06-26 16:59:12", "user": 3948, "closed_at": "2011-05-24 16:09:25", "id": 945094, "title": "Not loading file if PLATFORM not available. ", "url": "https://api.github.com/repos/rails/rails/issues/1247", "created_at": "2011-05-24 03:48:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227816", "text": "/cc josevalim :-)\n", "created_at": "2011-05-24 12:26:19", "user": 3948, "id": 1227816}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1248, "updated_at": "2014-07-03 04:34:51", "user": 160941, "closed_at": "2011-05-24 05:31:12", "id": 945145, "title": "Removing extra white-spaces on some templates", "url": "https://api.github.com/repos/rails/rails/issues/1248", "created_at": "2011-05-24 04:01:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1225980", "text": "you always steal ideas :P :P (Just Joking :D)\n", "created_at": "2011-05-24 04:26:59", "user": 779796, "id": 1225980}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226094", "text": "You can do this on https://github.com/lifo/docrails . It has public commit access and gets synched into master regularly.\n", "created_at": "2011-05-24 05:07:20", "user": 762, "id": 1226094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226184", "text": "Thanks, done!!!\n", "created_at": "2011-05-24 05:36:17", "user": 160941, "id": 1226184}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1249, "updated_at": "2014-06-27 23:19:02", "user": 1179, "closed_at": "2011-05-24 10:52:58", "id": 945169, "title": "Removed EOL whitespace from all .rb files", "url": "https://api.github.com/repos/rails/rails/issues/1249", "created_at": "2011-05-24 04:13:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226166", "text": "Usually I don't like to apply such commits as they usually break all pull requests, forks and patches out there.\n", "created_at": "2011-05-24 05:30:15", "user": 9582, "id": 1226166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227408", "text": "Same opinion here. I like a clean code base with no trailing whitespaces, but a bulk edit like this has those practical downsides unfortunately. On the other hand, if one works on a handful of files for some patch, and those come with trailing whitespace removed, that's fine.\n", "created_at": "2011-05-24 10:51:38", "user": 3387, "id": 1227408}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "rake upgraded to new version\n", "labels": [], "number": 1250, "updated_at": "2014-06-16 06:01:34", "user": 111473, "closed_at": "2011-07-11 07:37:56", "id": 945209, "title": "rake upgraded to new version", "url": "https://api.github.com/repos/rails/rails/issues/1250", "created_at": "2011-05-24 04:28:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544453", "text": "Why do we need this? Did we change anything in the code that drop support for `0.8.7 <= Rake.version <= 0.9.0` ?\n\nIf that's not the case, then this change is not necessary. Please only bump the version **if** it does not support the old version anymore.\n", "created_at": "2011-07-11 05:34:35", "user": 4912, "id": 1544453}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544777", "text": "ok, older version is still supporting, closing.\n", "created_at": "2011-07-11 07:37:56", "user": 111473, "id": 1544777}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using java_import instead of import. Need to do this with rake 0.9.0 #jruby\n", "labels": [], "number": 1251, "updated_at": "2014-06-26 16:59:17", "user": 3948, "closed_at": "2011-05-24 16:06:51", "id": 945241, "title": "Using java_import instead of import. Need to do this with rake 0.9.0 #jruby", "url": "https://api.github.com/repos/rails/rails/issues/1251", "created_at": "2011-05-24 04:38:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I update for the last version, which @wycats changed Sprockets hepers. Im missing something new?\n", "labels": [], "number": 1252, "updated_at": "2011-05-24 10:50:59", "user": 149353, "closed_at": "2011-05-24 10:50:59", "id": 945245, "title": "undefined method `sprockets_stylesheet_link_tag'", "url": "https://api.github.com/repos/rails/rails/issues/1252", "created_at": "2011-05-24 04:38:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227054", "text": "I have same error\n", "created_at": "2011-05-24 09:25:34", "user": 303497, "id": 1227054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227401", "text": "Was fixed.\n", "created_at": "2011-05-24 10:50:59", "user": 149353, "id": 1227401}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I think this is required\n\n/cc @goncalossilva\n", "labels": [], "number": 1253, "updated_at": "2014-06-26 16:59:19", "user": 3948, "closed_at": "2011-05-24 16:08:21", "id": 945265, "title": "import to java_import. ", "url": "https://api.github.com/repos/rails/rails/issues/1253", "created_at": "2011-05-24 04:45:43", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@jonleighton this is the other :includes problem that I mentioned in #1233. Again this is a regression from 3.0.x.\n", "labels": ["activerecord", "regression"], "number": 1254, "updated_at": "2014-06-26 15:40:53", "user": 6321, "closed_at": "2011-05-24 22:34:39", "id": 945547, "title": "Ignore :includes on through associations", "url": "https://api.github.com/repos/rails/rails/issues/1254", "created_at": "2011-05-24 06:24:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231934", "text": "This looks fine to me, though I do hate `assert_nothing_raised` :(\n", "created_at": "2011-05-24 22:34:57", "user": 1979, "id": 1231934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233807", "text": "About the assert_nothing_raised, see @tenderlove's commit in has many : 0df8830160123542cfcc00185ff7d70a05495894\nPerhaps there should be a consensus to either use it everywhere or not use it at all.\n", "created_at": "2011-05-25 07:42:01", "user": 9347, "id": 1233807}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "At the moment, the files of an engine, as specified in its gemspec, only include the lib folder, Rakefile, MIT-LICENSE and README.rdoc.\n\nNevertheless, if you're using the options _--full_ or _--mountable_ when generating an engine, the project will also include the folders app and config. But they're never part of the gemspec.\n\nThis patch fixes this issue by adding the concerning folders if they're available.\n", "labels": [], "number": 1255, "updated_at": "2014-06-19 01:37:43", "user": 128683, "closed_at": "2011-05-24 07:38:04", "id": 945574, "title": "Fix gemspec of full or mountable engines", "url": "https://api.github.com/repos/rails/rails/issues/1255", "created_at": "2011-05-24 06:32:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226429", "text": "Maybe you could rewrite it as: Dir[\"{app,config,lib}/*_/_\"] ? I also don't think we need to check if options[:full], this could be the default value. Finally, could you add a test? Thanks!\n", "created_at": "2011-05-24 06:47:00", "user": 9582, "id": 1226429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226549", "text": "Sweet! Could you please add a test that makes a simple assertion about having {app,config,lib} in the gemspec?\n", "created_at": "2011-05-24 07:19:17", "user": 9582, "id": 1226549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226556", "text": "Sure, I'm currently working on it :)\n", "created_at": "2011-05-24 07:21:58", "user": 128683, "id": 1226556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226588", "text": "I've added a test that also tests the name and version specifications.\n", "created_at": "2011-05-24 07:31:53", "user": 128683, "id": 1226588}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Testing my app against 3.1.0.rc1.\n\nI try to request /assets/application.js and here's what I get in the log:\n\n```\nStarted GET \"/assets/application.js\" for 127.0.0.1 at Tue May 24 13:37:20 +0700 2011\nCompiled ~/work/obed1.5/app/assets/javascripts/application.js  (8ms)  (pid 11810)\nCompiled ~/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/jquery-rails-1.0.7/vendor/assets/javascripts/jquery.js  (6ms)  (pid 11810)\nCompiled ~/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/jquery-rails-1.0.7/vendor/assets/javascripts/jquery_ujs.js  (1ms)  (pid 11810)\nCompiled ~/work/obed1.5/app/assets/javascripts/application.js  (0ms)  (pid 11810)\n\nServed asset /application.js - 200 OK  (0.0238s)  (pid 11810)\n\n\nActionController::RoutingError (No route matches \"/assets/application.js\"):\n\n\nRendered /home/od/.rvm/gems/ree-1.8.7-2011.03@rails31/gems/actionpack-3.1.0.rc1/lib/action_dispatch/middleware/templates/rescues/routing_error.erb within rescues/layout (0.6ms)\n```\n\nSo it compiles and gets served AND at the same time RoutingError is raised.\n", "labels": [], "number": 1256, "updated_at": "2011-07-27 12:26:54", "user": 920, "closed_at": "2011-05-24 08:37:24", "id": 945620, "title": "Assets served, ActionController::RoutingError raised", "url": "https://api.github.com/repos/rails/rails/issues/1256", "created_at": "2011-05-24 06:51:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1226859", "text": "Ok, this was route_dog gem which is currently incompatible with 3.1.\n", "created_at": "2011-05-24 08:37:24", "user": 920, "id": 1226859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1558334", "text": "Got the same using gem 'jquery-rails', '>= 1.0.12' in a windows, rails 3.0.7 enviroment without using route_dog. Any ideas?\n", "created_at": "2011-07-12 22:07:26", "user": 812813, "id": 1558334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1663384", "text": "@kungen1 the asset pipeline is a new feature in Rails 3.1 and up\n", "created_at": "2011-07-27 12:26:54", "user": 371940, "id": 1663384}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As per the last version of the yml specifications, alias nodes shouldn't  be defined with `<<: *NODE` anymore.\nBut with `*NODE`.\n\nSee http://www.yaml.org/spec/1.2/spec.html#* alias//\n", "labels": [], "number": 1257, "updated_at": "2014-06-14 21:31:51", "user": 9347, "closed_at": "2011-05-24 12:40:12", "id": 946123, "title": "Properly reference yml alias nodes", "url": "https://api.github.com/repos/rails/rails/issues/1257", "created_at": "2011-05-24 09:23:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In 3.0.x `rails_asset_id` was a public method and I used it to manually add cache busting to some swf files under public/swf.\n\nNoticed this method was not found after upgrading to 3.1.0.rc1 and according to my undestanding of the Rails source it has been changed to a private method.\n\nHow would I achieve the following in Rails 3.1:\n\n```\n<... src=\"/swfs/goplayer.swf?<%= rails_asset_id('swfs/goplayer.swf') %>\" ..>\n```\n\nEDIT: Noticed now that this method was actually documented as private even before - however I sure was using it without problems until the new version. Still curious what a better way of doing this would be.\n", "labels": [], "number": 1258, "updated_at": "2014-05-27 04:32:37", "user": 3461, "closed_at": "2011-05-24 12:39:11", "id": 946135, "title": "Alternative to rails_asset_id in 3.1?", "url": "https://api.github.com/repos/rails/rails/issues/1258", "created_at": "2011-05-24 09:28:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227872", "text": "Just use the asset pipeline and it'll automatically be md5'ed in production. So /app/assets/flash/goplayer.swf which is accessible from GET /assets/goplayer.swf and after rake assets:precompile as GET /assets/goplayer-345ljhjsdf234234.swf (random numbers = md5). You can also do <... src=\"<%= asset_path(\"goplayer.swf\") %>\" ..> and the proper md5 is automatically added.\n", "created_at": "2011-05-24 12:39:11", "user": 2741, "id": 1227872}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've created a new engine using the available generator:\n\n```\nrails plugin new status --skip-test-unit\n```\n\nI've used the _--skip-test-unit_ option because I don't want TestUnit files since I'm using RSpec. By using this option the engine generator won't create a dummy app folder (usually located at _test/dummy_ if no additional option is passed).\n\nAnd because the dummy app is not available, no Rails commands are available inside the engine:\n\n```\nstefansmac:status stefan$ rails g\nscript/rails:6:in `load': no such file to load -- /Users/stefan/Desktop/status/test/dummy/script/rails (LoadError)\nfrom script/rails:6:in `<main>'\n```\n\nWhat do you think is the best way to fix this issue?\nMove the dummy application to another folder than _test_?\nMove the commands into the engine's project at _script/rails_?\n\nThe missing dummy app may also impact other components.\n\nI'd love to do the patch :)\n", "labels": [], "number": 1259, "updated_at": "2011-05-26 10:00:30", "user": 128683, "closed_at": "2011-05-24 12:36:43", "id": 946353, "title": "Rails commands don't work inside an engine without the dummy application", "url": "https://api.github.com/repos/rails/rails/issues/1259", "created_at": "2011-05-24 10:27:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227349", "text": "You should be able to specify dumy-path:\n\n``` ruby\nrails plugin new status --dummy-path spec/dummy\n```\n", "created_at": "2011-05-24 10:37:56", "user": 5004, "id": 1227349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227365", "text": "Sure, but the dummy path should get a default value other than _test/dummy_ if the option _--skip-test-unit_ was used, shouldn't it?\n", "created_at": "2011-05-24 10:40:55", "user": 128683, "id": 1227365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227397", "text": "With the --skip-test-unit option, you remove all unit testing in your new engine, which makes the dummy app useless.\nThat's why it's not created.\nBy specifying the --dummy-path though, it should add it back.\n\nThis behavior doesn't work.\n\n```\nbundle exec rails plugin new status --skip-test-unit --dummy-path spec/dummy\n```\n\nThis doesn't work the dummy-app at all.\n\n```\nbundle exec rails plugin new status --dummy-path spec/dummy\n```\n\nThis created the dummy app in spec/dummy.\n", "created_at": "2011-05-24 10:50:12", "user": 9347, "id": 1227397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227533", "text": "I've fixed it in #1262\n", "created_at": "2011-05-24 11:21:56", "user": 9347, "id": 1227533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233999", "text": "Anyway, this is not the behavior I'd expect.\n\nIf I want to generate a new engine without test unit files because I'm using another test framework, I'd use the option _--skip-test-unit_. But this generates an engine that is not working.\n\nWhy do I need to use the dummy_path option? IMHO, it'd be the best, if we set _dummy_ as dummy_path if no dummy_path option is given and test unit files are skipped.\nIf you disagree with this, we should at least point out that the dummy path option has to be set if the skip-test-unit option is used.\n\nFurthermore, IMHO it's not clean to load Rails generators from the dummy app. Why can't we load the generators directly from the Rails core?\n", "created_at": "2011-05-25 08:17:08", "user": 128683, "id": 1233999}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234598", "text": "@flippingbits\n\nYou're totally correct that loading generators from dummy path is not optimal, but it was the easiest thing to do without rebuilding generators system. This is the thing that eventually could be done, but I didn't have time to do it that way.\n\nThe other thing is the lack of dummy app when you want to skip test unit. Generating it by default is not an option, cause most of the time when you skip tests, you want it to be in another dir (like spec/dummy). Simply moving it will not work, as script/rails has path pointing to it. I think that there could be a warning that tells you that you skipped tests and didn't provide dummy path, so if you need it you can change the path.\n", "created_at": "2011-05-25 10:41:20", "user": 5004, "id": 1234598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234831", "text": "@drogus\n\nThe only thing working generators need is an application class (as _config/application.rb_ in regular Rails applications). We could create one, that is only used for engine development and that is not provided with the engine.\nwhat do you think? If you agree, which place should we use for storing the application class? \n", "created_at": "2011-05-25 11:50:44", "user": 128683, "id": 1234831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236291", "text": "I am in the process of creating a multiapp-engine gem for creating a fresh engine configured with multiple dummy apps.\n\nTrying this I ran into some of the same problems! I could not invoke the same generator more than once, so I had to run a `Kernel::system` to run a `rails new` for each dummy app. \n\nSecondly the generated dummy apps were not \"complete\", fx missing the _vendor_ dir and I could not run commands such as `bundle` or `rails g` within these dummy apps, except to a very limited degree (since I couldn't run bundle on the dummy Gemfile). \n\nMy _hack_ is to export these dummy apps to a sandbox environment, execute my commands on them there, then import them back into my spec or test folder. I sure wish there was a better solution!\n\nPlease see my https://github.com/kristianmandrup/multiapp-engine where I discuss these issues under the section _Design Considerations_\n", "created_at": "2011-05-25 16:24:15", "user": 125005, "id": 1236291}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241317", "text": "I've created a fix in #1327.\n", "created_at": "2011-05-26 10:00:30", "user": 128683, "id": 1241317}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've removed the shebang from the template since it's already added by the engine generator.\nOtherwise it would be generated twice.\n", "labels": [], "number": 1260, "updated_at": "2014-06-26 18:04:41", "user": 128683, "closed_at": "2011-05-25 12:40:41", "id": 946401, "title": "Remove shebang from the template", "url": "https://api.github.com/repos/rails/rails/issues/1260", "created_at": "2011-05-24 10:37:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227643", "text": "Sorry I just recognized that I forgot to push the tests again.\nI'll attach them later because I don't have access to the internet from my laptop, at the moment.\n", "created_at": "2011-05-24 11:48:31", "user": 128683, "id": 1227643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229066", "text": "I've added the missing test.\n", "created_at": "2011-05-24 15:33:17", "user": 128683, "id": 1229066}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I did a fresh install of Rails 3.1 rc, following the Railcast of Ryan Bates (http://railscasts.com/episodes/265-rails-3-1-overview). It seems, every STI implementation throws the same error (described below). For every other model, no problems occur. \n\nIs this a known issue? A bug perhaps? Or is there something missing on my end?\n\nMedia model is the STI. Event model inherits from the Media model. Model definitions:\n\n```\nclass Media < ActiveRecord::Base\n  belongs_to :user\n  ....\nend\n\nclass Event < Media\n  ...\nend\n```\n\nIn console, I do:\n\n```\nruby-1.9.2-p136 :009 > Event.count\nCreating scope :page. Overwriting existing method Event.page.\nActiveRecord::StatementInvalid: PGError: ERROR:  relation \"media\" does not exist\nLINE 4:              WHERE a.attrelid = '\"media\"'::regclass\n                                        ^\n:             SELECT a.attname, format_type(a.atttypid, a.atttypmod), d.adsrc, a.attnotnull\n              FROM pg_attribute a LEFT JOIN pg_attrdef d\n                ON a.attrelid = d.adrelid AND a.attnum = d.adnum\n             WHERE a.attrelid = '\"media\"'::regclass\n               AND a.attnum > 0 AND NOT a.attisdropped\n             ORDER BY a.attnum\n\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:958:in `async_exec'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:958:in `exec_no_cache'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:547:in `block in exec_query'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:222:in `block in log'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:217:in `log'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:546:in `exec_query'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:1057:in `column_definitions'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:736:in `columns'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:93:in `block (2 levels) in initialize'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:174:in `with_connection'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:90:in `block in initialize'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:104:in `yield'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:104:in `default'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:104:in `block in initialize'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/base.rb:709:in `yield'\n... 8 levels...\n  from /Users/Chris/Sites/site_name.1/app/models/event.rb:1:in `<top (required)>'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:452:in `load'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:452:in `block in load_file'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:639:in `new_constants_in'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:451:in `load_file'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:338:in `require_or_load'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:181:in `block in const_missing'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:179:in `each'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/dependencies.rb:179:in `const_missing'\n  from (irb):9\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:44:in `start'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:8:in `start'\n  from /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/railties-3.1.0.rc1/lib/rails/commands.rb:40:in `<top (required)>'\n  from script/rails:6:in `require' from script/rails:6:in\n```\n", "labels": [], "number": 1261, "updated_at": "2011-10-02 23:12:40", "user": 390072, "closed_at": "2011-05-24 17:15:55", "id": 946552, "title": "STI's are not compatible with Rails 3.1 RC?", "url": "https://api.github.com/repos/rails/rails/issues/1261", "created_at": "2011-05-24 11:16:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1227731", "text": "It’s saying that the media table doesn't exist and so it can't find any column definitions - are your table names correct?\n", "created_at": "2011-05-24 12:07:17", "user": 6321, "id": 1227731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228844", "text": "In 3.1:\n\n```\npry(main)> \"media\".pluralize\n=> \"media\"\n```\n\nIn 2.3.8:\n\n```\nruby-1.9.2-p180 :002 > \"media\".pluralize\n => \"medias\" \n```\n\nYou probably have a table named \"medias\". This is an Inflector pluralization correction. You can use the old behaviour by putting `set_table_name 'medias'` (or something like that) in your `media.rb`.\n\nStrictly speaking, you should probably be using \"Medium\" as the model name, as \"Media\" is plural already. \n", "created_at": "2011-05-24 15:04:52", "user": 1284, "id": 1228844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229252", "text": "Hmmm, interesting. Thanks for pointing this out. In 3.0+, 'media'.pluralize returns 'medias'. In 3.1, seems different\n", "created_at": "2011-05-24 15:54:56", "user": 390072, "id": 1229252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2267620", "text": "If it's too late/difficult to change your model names you can revert back to the old behavior without having to adjust your application.\n\nIn config/initializers/inflections.rb: \n\n```\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.irregular 'media', 'medias'\nend\n```\n", "created_at": "2011-10-02 23:12:40", "user": 307888, "id": 2267620}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This pull request follows #1259\n\nWhen creating a new plugin with the `skip-test-unit` option, the dummy app isn't generated, which is the expected behavior.\nHowever, if we provide the `dummy-path` option, it should generate the dummy app where we specified it to.\n", "labels": [], "number": 1262, "updated_at": "2014-07-03 04:35:31", "user": 9347, "closed_at": "2011-05-24 11:59:35", "id": 946575, "title": "Create the dummy app if there's no test_unit but there's a dummy_path", "url": "https://api.github.com/repos/rails/rails/issues/1262", "created_at": "2011-05-24 11:21:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a rake task that looks like this:\n\n``` ruby\ndesc 'reset database and seed development'\ntask :rs => [:drop_tables, :create, :migrate, 'data:sample', 'db:test:prepare']\n```\n\nwhen I run it I get this error:\n\n```\nundefined method `name' for nil:NilClass\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/whiny_nil.rb:48:in `method_missing'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/to_sql.rb:57:in `visit_Arel_Nodes_InsertStatement'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/to_sql.rb:56:in `map'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/to_sql.rb:56:in `visit_Arel_Nodes_InsertStatement'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/visitor.rb:15:in `send'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/visitor.rb:15:in `visit'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/visitor.rb:5:in `accept'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/to_sql.rb:19:in `accept'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/connection_adapters/abstract/connection_pool.rb:111:in `with_connection'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/visitors/to_sql.rb:17:in `accept'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/tree_manager.rb:20:in `to_sql'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/arel-2.0.9/lib/arel/select_manager.rb:217:in `insert'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/relation.rb:14:in `__send__'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/relation.rb:14:in `insert'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/persistence.rb:270:in `create'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/timestamp.rb:47:in `create'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/callbacks.rb:277:in `create'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/callbacks.rb:414:in `_run_create_callbacks'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/callbacks.rb:277:in `create'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/persistence.rb:246:in `create_or_update'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/callbacks.rb:273:in `create_or_update'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/callbacks.rb:449:in `_run_save_callbacks'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/callbacks.rb:273:in `create_or_update'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/persistence.rb:56:in `save!'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/validations.rb:49:in `save!'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/attribute_methods/dirty.rb:30:in `save!'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/transactions.rb:245:in `save!'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/transactions.rb:292:in `with_transaction_returning_status'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/connection_adapters/abstract/database_statements.rb:139:in `transaction'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/transactions.rb:207:in `transaction'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/transactions.rb:290:in `with_transaction_returning_status'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/transactions.rb:245:in `save!'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activerecord-3.0.7/lib/active_record/validations.rb:34:in `create!'\n/Users/pupeno/Documents/docount/spms/app/models/task_definition.rb:109:in `create_task'\n/Users/pupeno/Documents/docount/spms/db/seed/tasks.rb:5:in `primary_task_for_all_metrics'\n/Users/pupeno/Documents/docount/spms/db/create_sample_data.rb:6\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/polyglot-0.3.1/lib/polyglot.rb:64:in `polyglot_original_require'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/polyglot-0.3.1/lib/polyglot.rb:64:in `require'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/dependencies.rb:239:in `require'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/dependencies.rb:225:in `load_dependency'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/dependencies.rb:596:in `new_constants_in'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/dependencies.rb:225:in `load_dependency'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/activesupport-3.0.7/lib/active_support/dependencies.rb:239:in `require'\n/Users/pupeno/Documents/docount/spms/lib/tasks/data.rake:24\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:205:in `call'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:205:in `execute'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:200:in `each'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:200:in `execute'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:158:in `invoke_with_call_chain'\n/Users/pupeno/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:151:in `invoke_with_call_chain'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:176:in `invoke_prerequisites'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:174:in `each'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:174:in `invoke_prerequisites'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:157:in `invoke_with_call_chain'\n/Users/pupeno/.rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:151:in `invoke_with_call_chain'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/task.rb:144:in `invoke'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:112:in `invoke_task'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:90:in `top_level'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:90:in `each'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:90:in `top_level'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:84:in `top_level'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:62:in `run'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/lib/rake/application.rb:59:in `run'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/gems/rake-0.9.0/bin/rake:31\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/bin/rake:19:in `load'\n/Users/pupeno/.rvm/gems/ruby-1.8.7-p334@spms/bin/rake:19\nTasks: TOP => db:rs => data:sample\n```\n\nIf I run the tasks independently, it actually works.\n\nIt seems I'm not the one suffering this problem:\n- http://rorguide.blogspot.com/2011/04/getting-undefined-method-name-for.html\n- http://stackoverflow.com/questions/4284043/rails2-to-rails3-upgrade-problem\n- https://github.com/brianmario/mysql2/issues/151\n", "labels": [], "number": 1263, "updated_at": "2011-10-25 20:57:58", "user": 8425, "closed_at": "2011-10-25 20:57:58", "id": 946681, "title": "Trying to create a record in the same process as the database fails", "url": "https://api.github.com/repos/rails/rails/issues/1263", "created_at": "2011-05-24 11:54:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1594894", "text": "I have just tested this, doing the following :\n- Generate a fresh app (based on edge master).\n- Create a User model\n- Add data generation in db/seeds.rb : `15.times { User.create! }\n\nI just changed a bit the rake task to have :\n\n```\ndesc 'reset database and seed development'\ntask :rs => ['db:drop', 'db:create', 'db:migrate', 'db:seed']\n```\n\nThis works fine on both master and 3-1-stable.\n", "created_at": "2011-07-18 12:41:48", "user": 9347, "id": 1594894}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Given the following model:\n\n``` ruby\nclass Manufacturer < ActiveRecord::Base\n  scope :visible, where(:visible => true)\n  def self.default_scope\n    visible\n  end\nend\n```\n\nthen trying to create a model raises an error:\n\n```\n>> Manufacturer.create!(:name => 'Yonex')\nSystemStackError: stack level too deep\n```\n\nDefining the default_scope as `default_scope visible` doesn't raise an error. Isn't a regression as defining default scope as a class method is new to 3.1 however I'd consider it a blocker.\n", "labels": ["activerecord"], "number": 1264, "updated_at": "2011-05-24 23:08:47", "user": 6321, "closed_at": "2011-05-24 23:08:47", "id": 946995, "title": "Declaring default_scope as class_method cause stack level too deep error", "url": "https://api.github.com/repos/rails/rails/issues/1264", "created_at": "2011-05-24 13:18:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228164", "text": "It also fails when defining default_scope using a block, lambda or callable.\n", "created_at": "2011-05-24 13:25:48", "user": 6321, "id": 1228164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228437", "text": "It looks like an infinite loop in AR::Base#build_default_scope - here's a backtrace:\n\n```\n--> #0 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1266\n    #1 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #2 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #3 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #4 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #5 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #6 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #7 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #8 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #9 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #10 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #11 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #12 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #13 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #14 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #15 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #16 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #17 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #18 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #19 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #20 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #21 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #22 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #23 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #24 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #25 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #26 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #27 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #28 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #29 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #30 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #31 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #32 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #33 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #34 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #35 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #36 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #37 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #38 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #39 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #40 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #41 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #42 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #43 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #44 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #45 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #46 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #47 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #48 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #49 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #50 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #51 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #52 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #53 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #54 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #55 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #56 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n    #57 ActiveRecord::Relation.with_default_scope \n       at line /lib/active_record/relation.rb:428\n    #58 ActiveRecord::QueryMethods.arel \n       at line /lib/active_record/relation/query_methods.rb:171\n    #59 ActiveRecord::Relation.respond_to?(method#Symbol) \n       at line /lib/active_record/relation.rb:96\n    #60 Manufacturer.default_scope \n       at line /app/models/manufacturer.rb:160\n    #61 ActiveRecord::Base.with_scope \n       at line /lib/active_record/base.rb:1269\n    #62 ActiveRecord::Relation.scoping \n       at line /lib/active_record/relation.rb:178\n    #63 ActiveRecord::Base.build_default_scope \n       at line /lib/active_record/base.rb:1269\n```\n\nPaths shortened for readability.\n", "created_at": "2011-05-24 14:03:01", "user": 6321, "id": 1228437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1228737", "text": "Okay the problem lies [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/named_scope.rb#L160), [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation.rb#L96) and [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/query_methods.rb#L170-197). The `respond_to?(:call)` in `scope` triggers `arel` which tries to build the default scope again. Short-circuiting `AR::Relation#respond_to?` with `return false if method == :call` seems to fix the problem but that seems very hacky - @jonleighton what do you think?\n", "created_at": "2011-05-24 14:48:49", "user": 6321, "id": 1228737}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm trying to create a simple Rails Engine. It's a simple blog with :posts resource generated by rails scaffold generator. \nEverything works fine, I can execute dummy application and under /blog/posts I can manage the blog's content.\nBut when I'm trying to write test for controller I have the following error:\n\n```\n  1) Error:\ntest_should_create_post(Blog::PostsControllerTest):\nActionController::RoutingError: No route matches {:post=>{\"id\"=>1, \"title\"=>\"My post\", \"content\"=>\"It's just a post, man...\", \"created_at\"=>Tue, 24 May 2011 13:16:49 UTC +00:00, \"updated_at\"=>Tue, 24 May 2011 13:16:49 UTC +00:00}, :controller=>\"blog/posts\", :action=>\"create\"}\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:464:in `raise_routing_error'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:460:in `rescue in generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:452:in `generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:493:in `generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:489:in `generate_extras'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:485:in `extra_keys'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:145:in `assign_parameters'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:421:in `process'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:49:in `process'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:370:in `post'\n    /home/lucassus/Projects/blog/test/functional/blog/posts_controller_test.rb:30:in `block (2 levels) in <class:PostsControllerTest>'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/activesupport-3.1.0.rc1/lib/active_support/testing/assertions.rb:53:in `assert_difference'\n    /home/lucassus/Projects/blog/test/functional/blog/posts_controller_test.rb:29:in `block in <class:PostsControllerTest>'\n\n  2) Error:\ntest_should_destroy_post(Blog::PostsControllerTest):\nActionController::RoutingError: No route matches {:id=>\"1\", :controller=>\"blog/posts\", :action=>\"destroy\"}\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:464:in `raise_routing_error'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:460:in `rescue in generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:452:in `generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:493:in `generate'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:489:in `generate_extras'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_dispatch/routing/route_set.rb:485:in `extra_keys'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:145:in `assign_parameters'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:421:in `process'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:49:in `process'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/actionpack-3.1.0.rc1/lib/action_controller/test_case.rb:380:in `delete'\n    /home/lucassus/Projects/blog/test/functional/blog/posts_controller_test.rb:53:in `block (2 levels) in <class:PostsControllerTest>'\n    /home/lucassus/Projects/blog/vendor/bundle/ruby/1.9.1/gems/activesupport-3.1.0.rc1/lib/active_support/testing/assertions.rb:53:in `assert_difference'\n    /home/lucassus/Projects/blog/test/functional/blog/posts_controller_test.rb:52:in `block in <class:PostsControllerTest>'\n\netc..\n```\n\nComplete sources for this application you can find on https://github.com/lucassus/blog_engine-test_unit\nI have exactly the same problem when I'm trying to write controllers (and routes) tests in rspec (sources at https://github.com/lucassus/blog_engine).\n\nI both cases I have engine generated by rails plugin generator: rails plugin new [engine name] –mountable\n", "labels": [], "number": 1265, "updated_at": "2011-07-06 20:54:39", "user": 41239, "closed_at": "2011-07-06 20:54:39", "id": 947028, "title": "RoutingError in tests for an engine", "url": "https://api.github.com/repos/rails/rails/issues/1265", "created_at": "2011-05-24 13:24:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240855", "text": "I've found a workaround for for this problem, see: https://github.com/LunarLogicPolska/cse/blob/master/spec/dummy/config/routes.rb#L5\nI just added corresponding named routes to the dummy app in the test environment.\n\nIs it a bug or feature?\n", "created_at": "2011-05-26 08:17:24", "user": 41239, "id": 1240855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515175", "text": "As mentioned in #1693, `map.route` is not the appropriate syntax.  \nYou should use `map.connect`.\n\nThis issue could be closed - cc @spastorino\n", "created_at": "2011-07-06 20:44:31", "user": 9347, "id": 1515175}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed test with 3-0-stable branch\n", "labels": [], "number": 1266, "updated_at": "2014-06-13 10:33:57", "user": 3948, "closed_at": "2011-05-24 14:48:51", "id": 947265, "title": "Deprecation warning 3 0 fix", "url": "https://api.github.com/repos/rails/rails/issues/1266", "created_at": "2011-05-24 14:06:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The last about that\n", "labels": [], "number": 1267, "updated_at": "2014-06-28 21:33:28", "user": 160941, "closed_at": "2011-05-24 15:07:56", "id": 947570, "title": "Prefer 'each' syntax instead of 'for in'", "url": "https://api.github.com/repos/rails/rails/issues/1267", "created_at": "2011-05-24 15:02:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Minor tweak to compute_asset_host. We were previously checking if an object was a proc or responded to call. Since procs respond to call, only the latter check was needed.\n", "labels": [], "number": 1268, "updated_at": "2014-07-03 04:35:45", "user": 14947, "closed_at": "2011-05-24 15:15:32", "id": 947641, "title": "Redundant condition in compute_asset_host is redundant.", "url": "https://api.github.com/repos/rails/rails/issues/1268", "created_at": "2011-05-24 15:13:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed failing tests for load_path\n\nhttps://github.com/rails/rails/commit/a6e945554dedf0a33527df2b43c283dd17ae8eb3\n\n/cc @josevalim\n\n:-)\n", "labels": [], "number": 1269, "updated_at": "2014-07-03 04:35:48", "user": 3948, "closed_at": "2011-05-24 15:39:02", "id": 947745, "title": "Fix load path test 3 0", "url": "https://api.github.com/repos/rails/rails/issues/1269", "created_at": "2011-05-24 15:30:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Use single quotes in the Gemfile.\n", "labels": [], "number": 1270, "updated_at": "2014-06-12 08:01:57", "user": 6351, "closed_at": "2011-05-24 17:28:14", "id": 948176, "title": "Clean up quotes in the Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/1270", "created_at": "2011-05-24 16:42:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229862", "text": "Thanks for the pull request but this is only esthetics. I personally prefer to use double quotes everywhere.\n", "created_at": "2011-05-24 17:28:14", "user": 9582, "id": 1229862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229868", "text": "FTR: Duplicate of https://github.com/rails/rails/pull/496\n", "created_at": "2011-05-24 17:28:54", "user": 294954, "id": 1229868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230610", "text": "@josevalim: fine with me, as long as they're used consistently. In the Gemfile in master, both single and double quotes are used. Should I open another pull request with only double quotes?\n", "created_at": "2011-05-24 19:18:50", "user": 6351, "id": 1230610}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230658", "text": "Agree with consistency, please send a pull request that will change the minimum amount of LOC?\n", "created_at": "2011-05-24 19:26:55", "user": 9582, "id": 1230658}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nEnjoy,\n\nJ\n", "labels": [], "number": 1271, "updated_at": "2014-06-21 07:14:42", "user": 8701, "closed_at": "2011-05-24 17:35:53", "id": 948240, "title": "Removed deprecated ActionMailer API and related tests", "url": "https://api.github.com/repos/rails/rails/issues/1271", "created_at": "2011-05-24 16:56:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229764", "text": "This is awesome. +1\n", "created_at": "2011-05-24 17:12:12", "user": 4912, "id": 1229764}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On rc1, if a model has a default_scope with an order clause, #last does not generate the correct sql query, resulting in the same object as #first being returned.\n\nFor example, lets say I have a User model with a default_scope with created_at ASC:\n\n``` ruby\nclass User < ActiveRecord::Base\n  def self.default_scope\n     order('created_at ASC')\n  end\nend\n```\n\nThen User.last generates this sql:\n\n```\nSELECT \"users\".* FROM \"users\" ORDER BY created_at ASC, created_at DESC LIMIT 1\n```\n\nSo:\n\n```\n>> User.first == User.last\n  User Load (3.1ms)  SELECT \"users\".* FROM \"users\" ORDER BY created_at ASC LIMIT 1\n  User Load (1.1ms)  SELECT \"users\".* FROM \"users\" ORDER BY created_at ASC, created_at DESC LIMIT 1\n=> true\n```\n\nIt looks like it only happens with order clauses in the default_scope. (also effects #last in a relationship call e.g. `project.users.last`)\n", "labels": ["activerecord", "regression"], "number": 1272, "updated_at": "2011-06-08 17:29:40", "user": 534, "closed_at": "2011-06-01 22:58:47", "id": 948264, "title": "Relation#last has issues with existing order_clauses", "url": "https://api.github.com/repos/rails/rails/issues/1272", "created_at": "2011-05-24 17:01:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1229876", "text": "This is to do with how the default scope is merged in last now in 3.1 - `AR::Relation#last` calls `reverse_order` internally which it does on the order in the default scope but `arel` merges in the default scope again so you end up with two order clauses.\n\n@jonleighton would we be better off merging in the default scope in the finder methods like find_first, find_last, etc. rather than merging in the `arel` method? Using `with_default_scope.reverse_order` in `AR::Relation#last` seems to fix this.\n", "created_at": "2011-05-24 17:30:27", "user": 6321, "id": 1229876}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232166", "text": "@pixeltrix We need to change `reverse_order` to just set a `reverse_order_value` flag, and then deal with it properly in `build_arel`... I had to do the same thing for `reorder` when I originally made the default scope change, but I missed this one.\n\nI will fix when I get a chance - or feel free to take it in the mean time :)\n", "created_at": "2011-05-24 23:26:44", "user": 1979, "id": 1232166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325481", "text": "This has introduced a new problem:\n\n```\n>> Fuu.order(Fuu.arel_table[:name].desc).reverse_order.to_sql\n=> \"SELECT \\\"fuus\\\".* FROM \\\"fuus\\\"  ORDER BY #<Arel::Nodes::Ordering:0x0000010319dc88> DESC\"\n```\n\nVersus:\n\n```\n>> Fuu.order(Fuu.arel_table[:name].desc.to_sql).reverse_order.to_sql\n=> \"SELECT \\\"fuus\\\".* FROM \\\"fuus\\\"  ORDER BY \\\"fuus\\\".\\\"name\\\" ASC\"\n```\n\nNotice the **to_sql** call in Fuu.arel_table[:name].desc\n", "created_at": "2011-06-08 09:11:57", "user": 5254, "id": 1325481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328353", "text": "I have filed a new issue for this: #1571\n", "created_at": "2011-06-08 17:29:40", "user": 1979, "id": 1328353}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Addresses an inconsistency in the ActiveRecord::Base.method_missing handling of dynamic finder methods and the passing of the &block parameter for :find_by_attributes.\n", "labels": [], "number": 1273, "updated_at": "2014-06-26 15:40:58", "user": 2130, "closed_at": "2011-07-06 20:05:59", "id": 948573, "title": "Addresses an inconsistency in the ActiveRecord::Base.method_missing handl", "url": "https://api.github.com/repos/rails/rails/issues/1273", "created_at": "2011-05-24 18:08:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1467389", "text": "What version of rails is this for?\n", "created_at": "2011-06-29 14:26:47", "user": 287889, "id": 1467389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1467574", "text": "It's tracking master. So it's 3.2.\nHowever it should probably be cherry-picked to 3.1.\n", "created_at": "2011-06-29 14:50:46", "user": 9347, "id": 1467574}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixing the deprecation of Rake::GemPackageTask in Rake 0.9.0.\n", "labels": [], "number": 1274, "updated_at": "2014-06-26 15:41:01", "user": 146214, "closed_at": "2011-05-24 19:14:41", "id": 948592, "title": "Fixes for Rake::GemPackageTask deprecation warnings from Rake 0.9.0", "url": "https://api.github.com/repos/rails/rails/issues/1274", "created_at": "2011-05-24 18:13:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230359", "text": "Could you please check since which Rubygems version the package task require is available?\n", "created_at": "2011-05-24 18:38:09", "user": 9582, "id": 1230359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230451", "text": "Found out that RubyGems 1.3.2 included \"a Rake task for creating gems which replaces rake’s Rake::GemPackageTask\" (http://rubygems.rubyforge.org/rubygems-update/History_txt.html). Is that what you are asking? I'm sorry if I misunderstood anything.\n", "created_at": "2011-05-24 18:54:42", "user": 146214, "id": 1230451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230576", "text": "Yup, that was it, tks.\n", "created_at": "2011-05-24 19:14:02", "user": 9582, "id": 1230576}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": " I would like to avoid writing 'billing_info.address.city = \"Atlanta\"' but the mass assignment is happening before the address is instantiated in the after_initialize callback.\n\n``` ruby\n  class BillingInfo < ActiveRecord::Base\n    has_one :billing_address, :as => :addressable\n    delegate :city, :state, :zip, :to => :billing_address\n\n    after_initialize :setup_billing_address\n    def setup_billing_address\n      build_billing_address if building_address.nil?\n    end\n  end\n\n  class BillingAddress < Address\n    # .. snip ..\n  end\n\n\nb = BillingInfo.new\nb.city = \"atlanta\"\nb.city  # works this way\n=> \"Atlanta\"  \n\nb = BillingInfo.new :city => \"Atlanta\"\n=> *asplode* something about attribute missing\n```\n\nI've got a patch locally that fixes it, but it involves adding a 'before' callback on assign_attributes. Is this a bad idea / is there another way to do it? I tried alias_method_chain on assign_attributes, but that will give me a StackLevelToDeep error.\n", "labels": [], "number": 1275, "updated_at": "2011-05-24 20:00:48", "user": 4067, "closed_at": "2011-05-24 19:38:44", "id": 948684, "title": "Delegation doesn't work correctly when model is instantiated with attributes hash and delegate target is created in callback", "url": "https://api.github.com/repos/rails/rails/issues/1275", "created_at": "2011-05-24 18:28:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230649", "text": "What version of Rails are you using? Is this a regression?\n", "created_at": "2011-05-24 19:26:04", "user": 1979, "id": 1230649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230694", "text": "3.1.0.beta1 and I do not know. I suspect this behavior has existed for as long as we've had delegate. I can write some tests later today for it but really I'm asking if this is a problem or a 'sorry, but delegate doesn't place nice with non-instantiated associations' ?\n", "created_at": "2011-05-24 19:32:26", "user": 4067, "id": 1230694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230728", "text": "Hmm. Looking more closely at your code there are two problems:\n1. You are not listing `city=` as a delegation, but the `city=` method is how the attribute would be assigned\n2. When the attributes are assigned during the call to `BillingInfo.new`, the `after_initialize` callback will not have run yet, so the `billing_address` will be nil.\n\nSo I'm closing this as I don't think it's a bug in Rails.\n", "created_at": "2011-05-24 19:38:43", "user": 1979, "id": 1230728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230816", "text": "Sorry, I mean't those delegates to be 'setters' in the example. I agree it's not a bug. Maybe I should ask in a different way: can we get a way to run code before attributes are assigned?\n\ne.g. in your model\n\n``` ruby\n  before_assign_attributes :do_stuff\n\n```\n\nin ActiveRecord::Base#initialize\n\n``` ruby\nrun_callbacks(:assign_attributes)\nassign_attributes(attributes, options) \n```\n", "created_at": "2011-05-24 19:54:06", "user": 4067, "id": 1230816}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230833", "text": "You could use alias_method_chain on the billing_address to build it if it's nil.\n", "created_at": "2011-05-24 19:56:54", "user": 1979, "id": 1230833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1230853", "text": "Thanks Jon, I'll try that.\n", "created_at": "2011-05-24 20:00:47", "user": 4067, "id": 1230853}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Updated ActiveRecord::Base.find_or_create_by for 2 attributes when 1 is nil\n\nUpdated the find_or_create_by_foo_and_bar('hello') to process the find portion\nsimilar to find_by_foo_and_bar('hello').  In the original\nfind_by_foo_and_bar('hello'), the resulting query was something like\n\"foo = 'hello' AND bar IS NULL\".  In the original\nfind_or_create_by_foo_and_bar('hello'), the resulting query was something like\n\"foo = 'hello'\"\n\nThis patch aligns those two methods expected behaviors on the \"find\" portion\nof the method call.\n", "labels": ["activerecord"], "number": 1276, "updated_at": "2014-06-18 04:15:29", "user": 2130, "closed_at": "2012-04-28 20:25:22", "id": 948804, "title": "Updated ActiveRecord::Base.find_or_create_by for 2 attributes when 1 is n", "url": "https://api.github.com/repos/rails/rails/issues/1276", "created_at": "2011-05-24 18:47:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544449", "text": "Interesting. I feel like it should instead raise an error if you're doing `find_by_foo_and_bar('hello')` and passing only one argument. I think if you're using `_and_`, you actually have to pass two arguments to it.\n\n/cc @tenderlove\n", "created_at": "2011-07-11 05:32:07", "user": 4912, "id": 1544449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546744", "text": "Given that find_by_foo_and_bar will not raise an error if only one param is passed, I'd expect find_or_create_by_foo_and_bar to behave the same.  Having these two related functions behave differently on missing parameters is a big no no for me.  And altering the find_by_foo_and_bar to raise an error on a missing parameter will likely  break existing applications.\n", "created_at": "2011-07-11 14:17:05", "user": 2130, "id": 1546744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398455", "text": "@jeremyf Is this still an issue?\n", "created_at": "2012-04-28 17:24:48", "user": 651597, "id": 5398455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399102", "text": "Yeah. I don't remember but seems like @jonleighton want to remove the dynamic finders in the next version. If so, please close this one @jonleighton \n", "created_at": "2012-04-28 18:47:36", "user": 47848, "id": 5399102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399881", "text": "If we are removing dynamic finders, then I'll close it.\n", "created_at": "2012-04-28 20:25:22", "user": 2130, "id": 5399881}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I just saw a request by someone on the rspec-users mailing list for support for the OPTIONS http verb in controller specs. See http://rubyforge.org/pipermail/rspec-users/2011-May/020082.html\n\nIt makes sense to me that this exist in Rails (as opposed to rspec-rails) since OPTIONS is one of the better ways to figure out what resources do when building RESTful APIs.\n\nI couldn't find where I should write the tests - if you could point me at the file where they're written, I'd be happy to add them.\n", "labels": ["actionpack"], "number": 1277, "updated_at": "2014-06-21 11:28:28", "user": 19141, "closed_at": "2012-04-29 11:22:26", "id": 948808, "title": "Added a helper to make OPTIONS calls in controller tests", "url": "https://api.github.com/repos/rails/rails/issues/1277", "created_at": "2011-05-24 18:48:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544437", "text": "Referring to the nearest method - `xml_http_request`, I think you better write your test in `actionpack/test/controller/integration_test.rb`. Please add test, amend your commit, and force-push to your branch.\n", "created_at": "2011-07-11 05:28:45", "user": 4912, "id": 1544437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545272", "text": "Since there was a bit more than adding the tests (integration_test.rb covered a few other scenarios) I've added new commits. Please feel free to squash as you see fit.\n\nThank you.\n", "created_at": "2011-07-11 09:34:05", "user": 19141, "id": 1545272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1547319", "text": "Do you mind squashed them and rebased your branch against current `master` ?\n", "created_at": "2011-07-11 15:35:03", "user": 4912, "id": 1547319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1586780", "text": "@sikachu I have rebased and squashed the commit.\n", "created_at": "2011-07-16 12:28:03", "user": 37798, "id": 1586780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4309334", "text": "Any chance for this to be merged?\n\nIf additionnal work is needed, I may be able to help.\n", "created_at": "2012-03-04 12:12:36", "user": 61271, "id": 4309334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4318239", "text": "@tjouan I have rebased changes on master again\n", "created_at": "2012-03-05 08:05:05", "user": 37798, "id": 4318239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4684002", "text": "BTW, it'd be nice to see support for other HTTP (ex: DAV's PROPFIND, PROPPATCH, REPORT, etc) verbs included.\n", "created_at": "2012-03-25 19:39:37", "user": 871927, "id": 4684002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5404325", "text": "Rather than adding support for a multitude of HTTP request methods I think it makes more sense to make `process` a public method in `integration.rb` and leave it at that. It's not too much to ask that tests use `process :options, '/path'`.\n", "created_at": "2012-04-29 11:22:26", "user": 6321, "id": 5404325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5405050", "text": "Just for the record OPTIONS support was added in ad46884af567d6f8d6d8d777f372c39e81a560ba\n", "created_at": "2012-04-29 13:43:49", "user": 6321, "id": 5405050}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixing the deprecation of Rake::RDocTask in Rake 0.9.0. Using RDoc::Task instead, as mentioned here: http://drake.rubyforge.org/classes/Rake/RDocTask.html\n", "labels": [], "number": 1278, "updated_at": "2014-07-03 04:36:18", "user": 146214, "closed_at": "2011-05-24 19:28:27", "id": 949023, "title": "Fixes Rake::RDocTask deprecation warnings from Rake 0.9.0", "url": "https://api.github.com/repos/rails/rails/issues/1278", "created_at": "2011-05-24 19:26:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove single quotes from the Gemfile.\n", "labels": [], "number": 1279, "updated_at": "2014-06-15 10:22:35", "user": 6351, "closed_at": "2011-05-24 20:32:51", "id": 949325, "title": "Use quotes consistently in Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/1279", "created_at": "2011-05-24 20:28:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231088", "text": "I missed the ones in the `source` call -- can you merge ef8c2a8 as well?\n", "created_at": "2011-05-24 20:31:40", "user": 6351, "id": 1231088}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`content_for(:foo)` now returns an empty string if it is unset. Previously it returned `nil`. I believe `nil` ought to be the correct return value in this situation, and the semantics of the call should not be changed.\n", "labels": [], "number": 1280, "updated_at": "2011-11-30 15:53:12", "user": 4338, "closed_at": "2011-11-30 15:53:12", "id": 949478, "title": "content_for semantics changed in rc1", "url": "https://api.github.com/repos/rails/rails/issues/1280", "created_at": "2011-05-24 20:55:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244273", "text": "content_for(:foo) (when unset) seems to return an empty string for me even in 3-0-stable\n", "created_at": "2011-05-26 18:19:56", "user": 378646, "id": 1244273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2958020", "text": "Guys.. is this still a issue??\n", "created_at": "2011-11-30 11:07:31", "user": 3948, "id": 2958020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2961471", "text": "Dunno, but it's probably too late to turn back at this point.\n", "created_at": "2011-11-30 15:53:12", "user": 4338, "id": 2961471}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey Guys,\n\nPlease let me know if you see anything amiss.\n\nThanks,\n\nJosh\n", "labels": [], "number": 1281, "updated_at": "2014-06-26 04:04:46", "user": 8701, "closed_at": "2011-05-24 22:40:18", "id": 949587, "title": "removed deprecated methods, and related tests, from ActionPack", "url": "https://api.github.com/repos/rails/rails/issues/1281", "created_at": "2011-05-24 21:14:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231719", "text": "@josevalim updated with your feedback, let me know if you see anything else which should be updated\n", "created_at": "2011-05-24 21:58:04", "user": 8701, "id": 1231719}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am trying to upgrade my woefully out of date rails 2.3.5 application to rails 2.3.11 I have the following code in a model:\n\n```\nhas_many :user_tags, :dependent => :destroy\n\nhas_many :tags, \n       :through => :user_tags,\n       :group => 'tag_id',\n       :select => '`tags`.*, COUNT(*) AS `count`',\n       :order => 'count DESC'\n```\n\nI use the tags association with a scope that limits the size of the result set.  This has been working great for over a year.  I upgrade rails to 2.3.11 and my tests start failing.  When I dig around in the console I discover the problem:\n\n```\n>> Neighborhood.first.tags.scoped({:limit => 5})\n  Neighborhood Load (0.4ms)   SELECT * FROM `neighborhoods` LIMIT 1\n  Tag Load (0.7ms)   SELECT `tags`.*, COUNT(*) AS `count` FROM `tags` INNER JOIN `user_tags` ON `tags`.id =  `user_tags`.tag_id WHERE ((`user_tags`.neighborhood_id = 1)) ORDER BY count DESC LIMIT 5\n=> [#<Tag id: 404, name: \"Architecture\", created_at: \"2009-12-12 04:14:29\", updated_at: \"2009-12-12 04:14:29\">]\n```\n\nAll the options specified in the association are dropped and, for some reason, only the first result is returned.  Even if I use an empty scope, only the first result is returned.  \n\nIf I issue the same query using find instead of scopes, everything works fine:\n\n```\n>> Neighborhood.first.tags.find(:all, :limit => 5)\n  Neighborhood Load (0.4ms)   SELECT * FROM `neighborhoods` LIMIT 1\n  Tag Load (0.6ms)   SELECT `tags`.*, COUNT(*) AS `count` FROM `tags` INNER JOIN `user_tags` ON `tags`.id = `user_tags`.tag_id WHERE ((`user_tags`.neighborhood_id = 1)) GROUP BY tag_id ORDER BY count DESC LIMIT 5\n=> [#<Tag id: 405, name: \"Yuppie\", created_at: \"2009-12-12 04:14:30\", updated_at: \"2009-12-12 04:14:30\">, #<Tag id: 7, name: \"Quiet\", created_at: \"2009-12-12 04:13:30\", updated_at: \"2009-12-12 04:13:30\">, #<Tag id: 404, name: \"Architecture\", created_at: \"2009-12-12 04:14:29\", updated_at: \"2009-12-12 04:14:29\">, #<Tag id: 535, name: \"Cemetery\", created_at: \"2009-12-12 04:15:19\", updated_at: \"2009-12-12 04:15:19\">, #<Tag id: 49, name: \"Green\", created_at: \"2009-12-12 04:13:34\", updated_at: \"2009-12-12 04:13:34\">]\n```\n", "labels": [], "number": 1282, "updated_at": "2011-08-10 18:05:14", "user": 4259, "closed_at": "2011-05-24 22:23:50", "id": 949925, "title": "Scope issue with rails 2.3.11 and associations with options", "url": "https://api.github.com/repos/rails/rails/issues/1282", "created_at": "2011-05-24 22:17:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1231874", "text": "Rails 2.3 is no longer maintained, sorry. Please file a new issue if you can reproduce your problem on Rails 3 or 3.1.\n", "created_at": "2011-05-24 22:23:50", "user": 1979, "id": 1231874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1733260", "text": "schleyfox, did you ever get a solution to this issue? I just experienced the same behavior on Rails 3.0.9, Ruby 1.9.2 with mysql2 v0.2.11. I'm curious what the rest of your stack was, ruby version, etc. Maybe there's something in common and will give me a place to start looking for making a patch. \n", "created_at": "2011-08-05 06:20:03", "user": 163532, "id": 1733260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1775062", "text": "Still unsolved. I'm still on Rails 2.3.5 running on Ruby 1.8.\n", "created_at": "2011-08-10 18:05:14", "user": 4259, "id": 1775062}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey Guys,\n\nI fixed the ActionMailer tests which broke due to some code removed from ActionPack, well, due to code I removed from ActionPack relating to deprecations.\n\nSorry,\n\nJosh\n", "labels": [], "number": 1283, "updated_at": "2014-07-03 04:36:35", "user": 8701, "closed_at": "2011-05-24 23:01:38", "id": 950122, "title": "corrected/fixed the ActionMailer tests", "url": "https://api.github.com/repos/rails/rails/issues/1283", "created_at": "2011-05-24 22:59:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If you have compiled assets in public/assets in development mode (if you ran assets:precompile), sprockets picks up those files instead of serving the compiled content dynamically.\n\nThe html source says /assets/application.css which may confuse some people as this is not what is being served. \n\nThere probably needs to be a task to cleanup old compiled files, as this appears to be the correct behavior.\n\nrefer: https://github.com/sstephenson/sprockets/issues/57\n", "labels": [], "number": 1284, "updated_at": "2011-07-06 20:54:50", "user": 30732, "closed_at": "2011-07-06 20:54:50", "id": 950203, "title": "Need a task to cleanup compiled assets", "url": "https://api.github.com/repos/rails/rails/issues/1284", "created_at": "2011-05-24 23:18:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247669", "text": "Added a fix here: https://github.com/rails/rails/pull/1354\n", "created_at": "2011-05-27 07:34:44", "user": 278, "id": 1247669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515220", "text": "There is `rake assets:clean` now. This issue could be closed. cc @spastorino\n", "created_at": "2011-07-06 20:48:22", "user": 9347, "id": 1515220}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey @jonleighton and @tenderlove\n\nThe commit removes arguments and methods, and relating tests, from ActiveRecord which were deprecated in 3.1.\n\nLet me know if I have missed anything.\n\nThanks,\n\nJosh\n", "labels": [], "number": 1285, "updated_at": "2014-06-26 15:41:05", "user": 8701, "closed_at": "2011-05-25 20:52:54", "id": 950472, "title": "removed deprecated methods, and related tests, from ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/1285", "created_at": "2011-05-25 00:31:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232509", "text": "You're insanely fast, I was working also on this some minutes ago :)\n", "created_at": "2011-05-25 00:57:39", "user": 160941, "id": 1232509}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "/cc @josevalim \n", "labels": [], "number": 1286, "updated_at": "2014-07-03 04:36:45", "user": 3948, "closed_at": "2011-05-25 02:52:36", "id": 950775, "title": "Fixed failing tests for generators_test", "url": "https://api.github.com/repos/rails/rails/issues/1286", "created_at": "2011-05-25 02:26:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1232810", "text": "1. Fixed ApplicationTests::GeneratorsTest\n2. AMLogSubscriberTest\n", "created_at": "2011-05-25 02:33:36", "user": 3948, "id": 1232810}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "load_generators_from_railties was removed by @josevalim in https://github.com/rails/rails/commit/594b749f3c81102a1f89480d0f8f10b464b895a7#L5L327\n", "labels": [], "number": 1287, "updated_at": "2014-06-26 11:07:46", "user": 160941, "closed_at": "2011-05-25 07:05:40", "id": 950864, "title": "load_generators_from_railties was removed, remove test with error about it", "url": "https://api.github.com/repos/rails/rails/issues/1287", "created_at": "2011-05-25 03:05:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This remove deprecated methods and tests from Railties.\n", "labels": [], "number": 1288, "updated_at": "2014-06-26 18:04:45", "user": 160941, "closed_at": "2011-05-25 07:10:55", "id": 951133, "title": "Remove Railties deprecated methods", "url": "https://api.github.com/repos/rails/rails/issues/1288", "created_at": "2011-05-25 05:17:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233324", "text": "Note: There is a test with error that is fixed with #1287\n", "created_at": "2011-05-25 05:17:47", "user": 160941, "id": 1233324}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Steps to reproduce:\n# Step 1\n\nFrom 192.168.0.7 - running Rails 3.1rc1 on a clean Ubuntu 11.04 with Ruby installed with rvm install 1.9.2\n\n```\nrails new blankapp\ncd blankapp\nrails g scaffold myapp myfield:string\nrake db:migrate\nrails s\n```\n# Step 2\n\nFrom 192.168.0.1 (on the same network\n\n```\ncurl -d '{\"myfield\":\"test value\"}' -H 'Content-Type: application/json' -H 'Accept: application/json' http://192.168.0.7:3000/myapps\n{\"created_at\":\"2011-05-25T05:23:49Z\",\"id\":1,\"myfield\":\"test value\",\"updated_at\":\"2011-05-25T05:23:49Z\"}\n...\nwhile true; do curl http://192.168.0.7:3000/myapps/1; done\n...\n```\n# Step 3\n\nFrom 192.168.0.7 - Memory use climbs to around 350MB... rails craps out after as little as a few seconds of requests!\n\n```\ncurl http://192.168.0.7:3000/myapps/1\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <title>Action Controller: Exception caught</title>\n  <style>\n    body { background-color: #fff; color: #333; }\n\n    body, p, ol, ul, td {\n      font-family: helvetica, verdana, arial, sans-serif;\n      font-size:   13px;\n      line-height: 18px;\n    }\n\n    pre {\n      background-color: #eee;\n      padding: 10px;\n      font-size: 11px;\n    }\n\n    a { color: #000; }\n    a:visited { color: #666; }\n    a:hover { color: #fff; background-color:#000; }\n  </style>\n</head>\n<body>\n\n<h1>\n  LoadError\n    in MyappsController#show\n</h1>\n<pre>no such file to load -- /home/xanview2/blankapp/app/controllers/myapps_controller.rb</pre>\n\n\n<p><code>Rails.root: /home/xanview2/blankapp</code></p>\n\n<div id=\"traces\">\n    <a href=\"#\" onclick=\"document.getElementById('Framework-Trace').style.display='none';document.getElementById('Full-Trace').style.display='none';document.getElementById('Application-Trace').style.display='block';; return false;\">Application Trace</a> |\n    <a href=\"#\" onclick=\"document.getElementById('Application-Trace').style.display='none';document.getElementById('Full-Trace').style.display='none';document.getElementById('Framework-Trace').style.display='block';; return false;\">Framework Trace</a> |\n    <a href=\"#\" onclick=\"document.getElementById('Application-Trace').style.display='none';document.getElementById('Framework-Trace').style.display='none';document.getElementById('Full-Trace').style.display='block';; return false;\">Full Trace</a> \n\n    <div id=\"Application-Trace\" style=\"display: block;\">\n      <pre><code></code></pre>\n    </div>\n    <div id=\"Framework-Trace\" style=\"display: none;\">\n      <pre><code>activesupport (3.1.0.rc1) lib/active_support/dependencies.rb:452:in `load'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:452:in `block in load_file'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:639:in `new_constants_in'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:451:in `load_file'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:338:in `require_or_load'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:489:in `load_missing_constant'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:181:in `block in const_missing'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:179:in `each'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:179:in `const_missing'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:124:in `block in constantize'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:123:in `each'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:123:in `constantize'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:527:in `block in initialize'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `yield'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `default'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `[]'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:61:in `controller_reference'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:46:in `controller'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:25:in `call'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:152:in `block in call'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:93:in `block in recognize'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:89:in `optimized_each'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:92:in `recognize'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:141:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:531:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.0) lib/rack/etag.rb:23:in `call'\nrack (1.3.0) lib/rack/conditionalget.rb:25:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/head.rb:14:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/flash.rb:243:in `call'\nrack (1.3.0) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.0) lib/rack/session/abstract/id.rb:190:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/cookies.rb:321:in `call'\nactiverecord (3.1.0.rc1) lib/active_record/query_cache.rb:54:in `call'\nactiverecord (3.1.0.rc1) lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nactivesupport (3.1.0.rc1) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nactivesupport (3.1.0.rc1) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/callbacks.rb:28:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.0) lib/rack/sendfile.rb:102:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.0) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.0) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.1.0.rc1) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.0) lib/rack/lock.rb:34:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/static.rb:53:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/content_length.rb:16:in `call'\nrailties (3.1.0.rc1) lib/rails/engine.rb:438:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/log_tailer.rb:14:in `call'\nrack (1.3.0) lib/rack/handler/webrick.rb:59:in `service'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'</code></pre>\n    </div>\n    <div id=\"Full-Trace\" style=\"display: none;\">\n      <pre><code>activesupport (3.1.0.rc1) lib/active_support/dependencies.rb:452:in `load'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:452:in `block in load_file'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:639:in `new_constants_in'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:451:in `load_file'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:338:in `require_or_load'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:489:in `load_missing_constant'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:181:in `block in const_missing'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:179:in `each'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:179:in `const_missing'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:124:in `block in constantize'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:123:in `each'\nactivesupport (3.1.0.rc1) lib/active_support/inflector/methods.rb:123:in `constantize'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:527:in `block in initialize'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `yield'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `default'\nactivesupport (3.1.0.rc1) lib/active_support/dependencies.rb:549:in `[]'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:61:in `controller_reference'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:46:in `controller'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:25:in `call'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:152:in `block in call'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:93:in `block in recognize'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:89:in `optimized_each'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:92:in `recognize'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:141:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/routing/route_set.rb:531:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.0) lib/rack/etag.rb:23:in `call'\nrack (1.3.0) lib/rack/conditionalget.rb:25:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/head.rb:14:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/flash.rb:243:in `call'\nrack (1.3.0) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.0) lib/rack/session/abstract/id.rb:190:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/cookies.rb:321:in `call'\nactiverecord (3.1.0.rc1) lib/active_record/query_cache.rb:54:in `call'\nactiverecord (3.1.0.rc1) lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nactivesupport (3.1.0.rc1) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nactivesupport (3.1.0.rc1) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/callbacks.rb:28:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.0) lib/rack/sendfile.rb:102:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.0) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.0) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.1.0.rc1) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.0) lib/rack/lock.rb:34:in `call'\nactionpack (3.1.0.rc1) lib/action_dispatch/middleware/static.rb:53:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/content_length.rb:16:in `call'\nrailties (3.1.0.rc1) lib/rails/engine.rb:438:in `call'\nrailties (3.1.0.rc1) lib/rails/rack/log_tailer.rb:14:in `call'\nrack (1.3.0) lib/rack/handler/webrick.rb:59:in `service'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n/usr/local/rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'</code></pre>\n    </div>\n</div>\n\n\n\n<h2 style=\"margin-top: 30px\">Request</h2>\n<p><b>Parameters</b>: <pre>{&quot;id&quot;=&gt;&quot;1&quot;}</pre></p>\n\n<p><a href=\"#\" onclick=\"document.getElementById('session_dump').style.display='block'; return false;\">Show session dump</a></p>\n<div id=\"session_dump\" style=\"display:none\"><pre></pre></div>\n\n<p><a href=\"#\" onclick=\"document.getElementById('env_dump').style.display='block'; return false;\">Show env dump</a></p>\n<div id=\"env_dump\" style=\"display:none\"><pre>GATEWAY_INTERFACE: &quot;CGI/1.1&quot;\nHTTP_ACCEPT: &quot;*/*&quot;\nREMOTE_ADDR: &quot;192.168.0.7&quot;\nREMOTE_HOST: &quot;192.168.0.7&quot;\nSERVER_NAME: &quot;192.168.0.7&quot;\nSERVER_PROTOCOL: &quot;HTTP/1.1&quot;</pre></div>\n\n\n<h2 style=\"margin-top: 30px\">Response</h2>\n<p><b>Headers</b>: <pre>None</pre></p>\n\n\n\n</body>\n</html>\n```\n\nAny ideas?\n", "labels": [], "number": 1289, "updated_at": "2011-05-27 21:12:44", "user": 578881, "closed_at": "2011-05-27 21:12:44", "id": 951252, "title": "Sqlite3+DevEnv+Rails-3.1rc1 = leaks memory and craps out in seconds!", "url": "https://api.github.com/repos/rails/rails/issues/1289", "created_at": "2011-05-25 05:58:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233466", "text": "Doesn't happen on 3.0.7\n", "created_at": "2011-05-25 06:05:22", "user": 578881, "id": 1233466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233487", "text": "Also, this doesn't happen on 3.1rc1 running in the production environment\n", "created_at": "2011-05-25 06:10:59", "user": 578881, "id": 1233487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233521", "text": "Can reproduce on mac os X\n", "created_at": "2011-05-25 06:27:07", "user": 163774, "id": 1233521}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233562", "text": "Reproducible on OS X / 3.1RC1 / REE 187... interestingly enough if you change Myapp.find(params[:id]) to Myapp.first it runs quite a while with no issue... and I can't reproduce the memory issue... my memory is steady but after 250 requests it blows up with the error it can't load the controller file.\n\nSome issue with perhaps running out of file handles?\n", "created_at": "2011-05-25 06:40:04", "user": 6473, "id": 1233562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1233628", "text": "Interesting, if switching to mysql from sqlite3 - I'm no longer able to reproduce the issue! - It seems like an sqlite issue!\n", "created_at": "2011-05-25 06:58:11", "user": 578881, "id": 1233628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243448", "text": "I'm running this in development on mysql and leaking like crazy too. I'm running out of memory (and having to force kill) before capping out so I haven't yet been able to get a stack trace.\n", "created_at": "2011-05-26 16:20:55", "user": 286476, "id": 1243448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247906", "text": "Yup this is consistently reproducible. I am taking a stab at it. :)\n", "created_at": "2011-05-27 08:34:58", "user": 278, "id": 1247906}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using load_generators\n", "labels": [], "number": 1290, "updated_at": "2014-07-03 04:36:59", "user": 3948, "closed_at": "2011-05-25 07:58:46", "id": 951598, "title": "Using load_generators", "url": "https://api.github.com/repos/rails/rails/issues/1290", "created_at": "2011-05-25 07:44:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "why rails 3.1.rc1 output cache status messages to the error.log under apache/passenger in production env?\n\n```\ncache: [GET /assets/application-1b389ecea1e529cffec30aa571c63564.css] fresh\ncache: [GET /assets/application-7f146761fbe283240feff8b0e773d7fa.js] fresh\ncache: [GET /institute/] miss\ncache: [GET /angebote/] miss\ncache: [GET /angebote/] miss\n```\n", "labels": [], "number": 1291, "updated_at": "2012-04-25 00:30:37", "user": 165599, "closed_at": "2012-04-25 00:30:37", "id": 951667, "title": "non error output to the error.log", "url": "https://api.github.com/repos/rails/rails/issues/1291", "created_at": "2011-05-25 08:04:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1748104", "text": "This is still the case for 3.1.0.rc5 using unicorn. `config.log_level = :warn` is set, so I think there shouldn't be any ouptut.\n", "created_at": "2011-08-07 11:00:07", "user": 175494, "id": 1748104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2061638", "text": "I'm still seeing this in production with Rails 3.1 + Nginx-1.0.6 + Phusion Passenger 3.0.9.\n\nLog level in production.rb is set to config.log_level = :warn and still /opt/nginx/logs/error.log fills with cache misses.\n", "created_at": "2011-09-10 23:00:43", "user": 55412, "id": 2061638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2079750", "text": "@digitalphotogallery, me too! Exact same setup.\n", "created_at": "2011-09-13 09:10:37", "user": 15245, "id": 2079750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2336826", "text": "Rails 3.1.1 + Apache also has many \"cache ... miss\" in the error.log file\n", "created_at": "2011-10-09 14:54:34", "user": 85734, "id": 2336826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2337169", "text": "Make sure `log/production.log` exists and is writable. Passenger only logs to stdout if that file isn't available for it. And Apache sends any output from a module to error.log.\n", "created_at": "2011-10-09 16:22:25", "user": 294954, "id": 2337169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2337517", "text": "@samuelkadolph this is not a configuration issue for us, this is how Rails (Rack::Cache) currently works for everyone. Quote from the documentation:\n\n_verbose_\n\nBoolean specifying whether verbose trace logging is enabled. This option is currently enabled (true) by default but is likely to be disabled (false) in a future release. All log output is written to the rack.errors stream, which is typically set to STDERR.\n", "created_at": "2011-10-09 17:45:08", "user": 85734, "id": 2337517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4796035", "text": "@Fjan is right, rack-cache was logging everything using rack.errors. It has been fixed [in this commit](https://github.com/rtomayko/rack-cache/commit/06d089a28e118f091bc4a17f52af944a4626ba6c), but a new version was not released yet. Meanwhile the Rails master branch turned verbose off 14f06dd8711231157435282cb288728c5f643303.\n\nYou can also disable verbosity by setting: `config.action_dispatch.rack_cache[:verbose] = false` in your config files, at least while a new version of rack-cache is not released.\n\nCan anyone please check if that works fine, so we can consider the issue fixed? Thanks.\n", "created_at": "2012-03-29 03:16:41", "user": 26328, "id": 4796035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5320492", "text": "I can confirm this is no longer an issue with the latest Rack.  I believe this issue can be closed.\n", "created_at": "2012-04-24 23:50:39", "user": 4666, "id": 5320492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5321088", "text": "@drewblas awesome, thanks for reporting.\n\nIf anyone still has related issues, please let us know. Closing.\n", "created_at": "2012-04-25 00:30:37", "user": 26328, "id": 5321088}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Database.rake file fixed for load_generators\n", "labels": [], "number": 1292, "updated_at": "2014-07-03 04:37:04", "user": 3948, "closed_at": "2011-05-25 09:13:03", "id": 951758, "title": "Database.rake file fixed for load_generators", "url": "https://api.github.com/repos/rails/rails/issues/1292", "created_at": "2011-05-25 08:28:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234058", "text": "I think this is the last place :-)\n", "created_at": "2011-05-25 08:31:21", "user": 3948, "id": 1234058}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The example code doesn't work because Root initialization requires a path string as parameter.\n", "labels": [], "number": 1293, "updated_at": "2014-07-03 04:37:06", "user": 5958, "closed_at": "2011-05-25 09:17:24", "id": 951803, "title": "Fix Rails::Paths::Root documentation", "url": "https://api.github.com/repos/rails/rails/issues/1293", "created_at": "2011-05-25 08:45:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys\n\nIn IRB when trying to call allocate on an activerecord object, there's an error: \"NoMethodError: undefined method `has_key?' for nil:NilClass\"\n\n```\nfrom /Users/beatrichartz/.rvm/gems/ree-1.8.7-2011.03@restorm-com/gems/activesupport-2.3.11/lib/active_support/whiny_nil.rb:52:in `method_missing'\nfrom /Users/beatrichartz/.rvm/gems/ree-1.8.7-2011.03@restorm-com/gems/activerecord-2.3.11/lib/active_record/base.rb:2839:in `has_attribute?'\nfrom /Users/beatrichartz/.rvm/gems/ree-1.8.7-2011.03@restorm-com/gems/activerecord-2.3.11/lib/active_record/base.rb:2900:in `inspect'\nfrom /Users/beatrichartz/.rvm/gems/ree-1.8.7-2011.03@restorm-com/gems/activerecord-2.3.11/lib/active_record/base.rb:2899:in `collect'\nfrom /Users/beatrichartz/.rvm/gems/ree-1.8.7-2011.03@restorm-com/gems/activerecord-2.3.11/lib/active_record/base.rb:2899:in `inspect'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:310:in `output_value'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:159:in `eval_input'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:271:in `signal_status'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:155:in `eval_input'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:154:in `eval_input'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:71:in `start'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:70:in `catch'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/irb.rb:70:in `start'\nfrom /Users/beatrichartz/.rvm/rubies/ree-1.8.7-2011.03/bin/irb:17\n```\n\nMay be you want to fix that\n\nCheers\n", "labels": [], "number": 1294, "updated_at": "2011-05-25 16:38:11", "user": 305847, "closed_at": "2011-05-25 12:02:37", "id": 952142, "title": "Rails 2.3.11: Allocate breaks IRB", "url": "https://api.github.com/repos/rails/rails/issues/1294", "created_at": "2011-05-25 10:09:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234588", "text": "Do you have a failing test case ? Something more explicit than just a failing backtrace.\n", "created_at": "2011-05-25 10:38:22", "user": 9347, "id": 1234588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234626", "text": "Try to run\n\nclass Something < ActiveRecord::Base\nend\n\nSomething.allocate\n\n(there is a table named 'somethings' needed, too)\n\nin IRB\n", "created_at": "2011-05-25 10:48:23", "user": 305847, "id": 1234626}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1234693", "text": "Happens in 3.0 too.\n", "created_at": "2011-05-25 11:05:54", "user": 9347, "id": 1234693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236280", "text": "Can this be pulled into Rails 2.3-stable as well?\n", "created_at": "2011-05-25 16:22:49", "user": 168192, "id": 1236280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236324", "text": "Rails 2.3 is no longer maintained now that Rails 3.1 is out. Upgrading is recommended.\n", "created_at": "2011-05-25 16:27:51", "user": 9582, "id": 1236324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236377", "text": "That was fast. Any chance of final a maintenance release that encompasses that last few patches?\n", "created_at": "2011-05-25 16:35:55", "user": 168192, "id": 1236377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236397", "text": "I don't think so.\n", "created_at": "2011-05-25 16:38:11", "user": 9582, "id": 1236397}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Say I have a User model.\n\n``` ruby\nUser.find(1)\n```\n\nproduces the following query:\n\n``` sql\nSELECT \"accounts\".* FROM \"accounts\" WHERE \"accounts\".\"id\" = ? LIMIT 1  [[\"id\", 1]]\n```\n\nThe issue is that in more complex queries involving joins, the \"id\" at the end is applying to any table being queried, not just accounts. That is, \"id\" should be \"users.id.\" \n\nThis isn't noticeable when Rails breaks includes(...) queries up, but in complex queries such as\n\n``` ruby\nUser.includes({grandparent:{parent: :child}}).find(1)\n```\n\nthe grandparent, parent, and child's ids must all be 1 as well.\n", "labels": [], "number": 1295, "updated_at": "2011-05-25 20:11:50", "user": 10137, "closed_at": "2011-05-25 20:11:50", "id": 952166, "title": "Rails 3.1.0rc1 - ActiveRecord find does not prepend the table name to queries", "url": "https://api.github.com/repos/rails/rails/issues/1295", "created_at": "2011-05-25 10:14:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236118", "text": "@tanman726 are you reading the bind parameters?  They aren't actually part of the SQL statement.\n", "created_at": "2011-05-25 15:58:48", "user": 3124, "id": 1236118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236350", "text": "Oh. Well I feel dumb haha. In the example I gave the only grandparent that was displaying was the one with the id 1. Maybe it's something else...\n", "created_at": "2011-05-25 16:31:13", "user": 10137, "id": 1236350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237990", "text": "Yep it was something else, my mistake.\n", "created_at": "2011-05-25 20:11:46", "user": 10137, "id": 1237990}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "See #636\n", "labels": [], "number": 1296, "updated_at": "2014-06-26 16:59:20", "user": 19141, "closed_at": "2011-07-11 11:28:01", "id": 952549, "title": "Resubmitting issue #636 as a pull request", "url": "https://api.github.com/repos/rails/rails/issues/1296", "created_at": "2011-05-25 11:57:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544426", "text": "The patch looks good. But I rather have the wording of the commit to mention what it tries to fix instead. Do you mind amending your commit and force push to your branch?\n\nThank you.\n\n/cc @josevalim\n", "created_at": "2011-07-11 05:25:38", "user": 4912, "id": 1544426}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544540", "text": "Done. Thank you.\n", "created_at": "2011-07-11 06:13:26", "user": 19141, "id": 1544540}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "IRB and friends are called `inspect` on the returned objects. This patch makes sure we don't throw an exception when we just call `MyModel.allocate`\n", "labels": [], "number": 1297, "updated_at": "2014-07-03 04:37:17", "user": 108369, "closed_at": "2011-05-25 12:02:24", "id": 952552, "title": "#1294 : allocated object cant be inspected [closes #1294]", "url": "https://api.github.com/repos/rails/rails/issues/1297", "created_at": "2011-05-25 11:57:50", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi guys,\n\nI've added the test files to the engine's gemspec unless the option _--skip-test-unit_ is used.\nFurthermore, I've cleaned up the test file a little bit by removing whitespaces from an empty line, I don't want to open a separate pull request for this minor issue.\n\nRegards\n", "labels": [], "number": 1298, "updated_at": "2014-07-03 04:37:21", "user": 128683, "closed_at": "2011-05-25 13:29:09", "id": 952782, "title": "Add test files to engine's gemspec", "url": "https://api.github.com/repos/rails/rails/issues/1298", "created_at": "2011-05-25 13:08:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "ActiveRecord, ActiveResource and ActiveSupport were missing those files.\n", "labels": [], "number": 1299, "updated_at": "2014-06-24 23:12:24", "user": 108369, "closed_at": "2011-05-25 13:43:23", "id": 952895, "title": "Ensure MIT-LICENSE is included in all the gemspec's", "url": "https://api.github.com/repos/rails/rails/issues/1299", "created_at": "2011-05-25 13:36:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1235330", "text": "Merged.\n", "created_at": "2011-05-25 13:43:23", "user": 9582, "id": 1235330}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This caused that `find_each` may produce extra db call taking all the records from db, return array with all records, and was less efficient than `ActiveRecord::Base#all`. There is no sense to keep _scope_ with this method, as it expects block and having further scopes after `find_each` is not possible.\n\neg. (notice last query)\n\n<pre>\nruby-1.9.2-p180 :016 > User.find_each{|u| }\n  User Load (93.8ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` >= 0) ORDER BY `users`.`id` ASC LIMIT 1000\n  User Load (175.0ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` > 1000) ORDER BY `users`.`id` ASC LIMIT 1000\n  User Load (0.5ms)  SELECT `users`.* FROM `users` WHERE (`users`.`id` > 2000) ORDER BY `users`.`id` ASC LIMIT 1000\n  User Load (308.2ms)  SELECT `users`.* FROM `users` \n</pre>\n", "labels": [], "number": 1300, "updated_at": "2014-07-03 04:37:27", "user": 63880, "closed_at": "2011-07-07 09:43:04", "id": 953207, "title": "Make `ActiveRecord::Batches#find_each` to not return `self`. ", "url": "https://api.github.com/repos/rails/rails/issues/1300", "created_at": "2011-05-25 14:35:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1235665", "text": "Sorry for merge commit - did merge instead of pull --rebase :/ \n", "created_at": "2011-05-25 14:41:00", "user": 63880, "id": 1235665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1235718", "text": "Test ?\n", "created_at": "2011-05-25 14:52:59", "user": 9347, "id": 1235718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236004", "text": "If you're not able to combine commits (dunno if it's possible with pull request), I can provide a patch with both of them.\n", "created_at": "2011-05-25 15:39:00", "user": 63880, "id": 1236004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1265398", "text": "ping. can you merge this?\n", "created_at": "2011-05-31 07:25:56", "user": 63880, "id": 1265398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514630", "text": "Can you first squash all the commits into one?, thanks\n", "created_at": "2011-07-06 19:45:15", "user": 52642, "id": 1514630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1521534", "text": "@spastorino - I created new pull request with squashed commits: https://github.com/rails/rails/pull/1997\n", "created_at": "2011-07-07 09:43:04", "user": 63880, "id": 1521534}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "fixes a regression introduced by b921679d0dd3d5ca16f0362c2b34e7703cfe15e5\nrequire 'rdoc/task' fails if the system RDoc version is below 2.4.2 (e.g. CRuby 1.8.7)\n", "labels": [], "number": 1301, "updated_at": "2014-06-20 00:02:31", "user": 11493, "closed_at": "2011-05-25 15:26:21", "id": 953443, "title": "require 'rake/rdoctask' if failed to require 'rdoc/task'", "url": "https://api.github.com/repos/rails/rails/issues/1301", "created_at": "2011-05-25 15:23:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Maybe this is just in development mode, I didn't check. But thats no excuse, this should work in development mode too.\n\nComplete example lib file:\n\n``` ruby\n#\n# Slug generator and searcher\n# Has dependency to \"hexcore\" gem\n#\nmodule Hex\n  module ActsAsSlug\n\n    def self.included(base)\n      base.extend(SingletonMethods)\n    end\n\n    module SingletonMethods\n\n      def acts_as_slug(*attrs)\n        extend ClassMethods\n        include InstanceMethods\n\n        raise ArgumentError, \"first parameter must be the name of collumn used for slug\" if attrs.any? && !attrs.first.kind_of?(String) && !attrs.first.kind_of?(Symbol)\n\n        # options holder\n        class_attribute :acts_as_slug_options\n\n        # defaults to :slug and :name\n        default_options = {\n          :col => :slug,\n          :from => :name\n        }\n\n        options = attrs.extract_options! || {}\n\n        options[:col] = attrs.first if attrs.any?\n\n        self.acts_as_slug_options = default_options.merge(options)\n        logger.warn self.acts_as_slug_options.inspect\n\n        # scopes\n        scope :with_slug, lambda { |slug| where(self.acts_as_slug_options[:col] => slug) }\n\n        # validations\n        before_validation :determine_slug\n      end\n\n    end\n\n    module ClassMethods\n\n    end\n\n    module InstanceMethods\n\n      # automatically assigns item slug, if it's blank\n      def determine_slug\n\n        logger.error acts_as_slug_options.inspect\n        logger.error self.acts_as_slug_options.inspect\n        logger.error self.class.acts_as_slug_options.inspect\n\n        val = self.send(self.class.acts_as_slug_options[:from])\n        c = self.class.acts_as_slug_options[:col]\n        self.send(:\"#{c}=\", val.codeize) if self.send(c.to_sym).blank? && val\n        true\n      end\n\n    end\n\n  end\nend\n\nActiveRecord::Base.send :include, Hex::ActsAsSlug\n```\n\nConsole:\n\n``` console\n>> Branch.acts_as_slug_options\n{:from=>:name, :col=>:slug}\n=> nil\n```\n\nFirst line is logger.warn within acts_as_slug method (model was just autoloaded),\nsecond line is what it actually returns (subsequent calls to this method just gives nil, too).\n\nIf I run this commands from the console, to test if it isn't problem with autoload or something:\n\n``` console\n>> Branch.acts_as_slug :slug\n{:from=>:name, :col=>:slug}\nCreating scope :with_slug. Overwriting existing method Branch.with_slug.\n\n=> Branch(id: integer, name: string, desc: string, slug: string, company_id: integer, contact_id: integer, active: boolean, created_at: datetime, updated_at: datetime)\n\n>> Branch.acts_as_slug_options\n=> nil\n```\n\nIt just returns nil.\nI have 3 logger outputs in the method determine_slug, they all also return _nil_ to the log.\n\nWhen I change class_attribute to class_inheritable_accessor (which is now deprecated), this just works:\n\n``` console\n>> Branch.acts_as_slug_options\n=> {:from=>:name, :col=>:slug}\n```\n\nLogger calls output:\n\n``` console\n{:col=>:slug, :from=>:name}\n{:col=>:slug, :from=>:name}\n{:col=>:slug, :from=>:name}\n```\n", "labels": [], "number": 1302, "updated_at": "2011-05-28 06:24:53", "user": 195891, "closed_at": "2011-05-28 06:24:52", "id": 953602, "title": "class_attribute doesn't work, class_inheritable_accessor does (tested on Rails 3.1 RC1)", "url": "https://api.github.com/repos/rails/rails/issues/1302", "created_at": "2011-05-25 15:49:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244653", "text": "Can anyone please review this?\nI've tried all possible ways of using class_attribute (of couse I've checked the API guide on this and did everything I imagined)...\n\nI'm using this method (class_inheritable_accessor) in 2 my gems and when I run project rspec I get tons of warnings to the log (DEPRECATED: ....).\n", "created_at": "2011-05-26 19:14:54", "user": 195891, "id": 1244653}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252904", "text": "Are you running these commands in the order you posted them in? Because I just get an undefined method error on the first one:\n\n``` ruby\nBranch.acts_as_slug_options\nNoMethodError: undefined method `acts_as_slug_options' for Branch(id: integer, created_at: datetime, updated_at: datetime):Class\n```\n\nBut even ignoring that, I can't duplicate your issue:\n\n``` ruby\nBranch.acts_as_slug :slug\n{:from=>:name, :col=>:slug}\n=> [Branch(id: integer, created_at: datetime, updated_at: datetime)]\nBranch.acts_as_slug_options\n=> {:from=>:name, :col=>:slug}\n```\n\nWhat version of Ruby are you running? Maybe there's more going on in your app? It could be helpful to post a more minimal test case.\n", "created_at": "2011-05-28 03:10:46", "user": 16414, "id": 1252904}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253198", "text": "Well... I must say I'm sorry.\nLooks like class_attribute works nicely, if i write it in that class method like this:\n\n``` ruby\nself.acts_as_slug_options = default_options.merge(options)\n```\n\nand not like this:\n\n``` ruby\nacts_as_slug_options = default_options.merge(options)\n```\n\nI was 120% sure I've tested that... but maybe i just did reload! instead of starting the console again.\nWhat a fatal mistake.\n\nSorry I bothered you with this issue.\n\nRegards, NoICE.\n", "created_at": "2011-05-28 06:24:52", "user": 195891, "id": 1253198}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi,\n\nThe route in question looks like this: `get \"images/uploads/*path\" => \"images#serve\"` and works under 3.1.0.beta1 giving me the proper `params[:path]` and `params[:format]`. The line generated in `rake routes` is `GET    /images/uploads/*path(.:format)                                             {:path=>/.+?/, :controller=>\"images\", :action=>\"serve\"}`\n\nHowever, on 3.1.0.rc1, I get a `NoMethodError (undefined method 'ref' for nil:NilClass)` with this [stacktrace](https://gist.github.com/991273) and the line generated in `rake routes` is `GET    /images/uploads/*path(.:format)                                             {:path=>/.+?/, :controller=>\"images\", :action=>\"serve\"}`.\n\nWhen I change the route, under 3.1.0.rc1, to `get \"images/uploads/*path\" => \"images#serve\", :format => false` and the appropriate code in my app, it works as expected. The line generated in `rake routes` is `GET    /images/uploads/*path                                                       {:controller=>\"images\", :action=>\"serve\"}`.\n\nThanks in advance and let me know if you need any more information.\n", "labels": [], "number": 1303, "updated_at": "2011-05-26 14:27:02", "user": 397824, "closed_at": "2011-05-26 14:27:02", "id": 953780, "title": "3.1.0.rc1 Route Globbing with Format", "url": "https://api.github.com/repos/rails/rails/issues/1303", "created_at": "2011-05-25 16:24:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241762", "text": "I've fixed this already in #1324\n", "created_at": "2011-05-26 11:51:58", "user": 9347, "id": 1241762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242647", "text": "Perfect. Thanks!\n", "created_at": "2011-05-26 14:27:02", "user": 397824, "id": 1242647}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The following Code is not working\n\n```\nclass Something::Base < ActiveRecord::Base\n  self.abstract_class = true\n\n  meta_def :table_name_prefix do\n    'somethings_'\n  end\nend\n\nclass Something::GreaterThing < Something::Base\n  has_many :things, class_name => 'Something::Thing', :foreign_key => :greater_thing_id, :dependent => :destroy\n  has_many :minor_stuff, :through => :somethings, :source => :minor_things\nend\n\nclass Something::Thing < Something::Base\n  has_many :minor_things, :class_name => 'Something::ThingVariant', :foreign_key => :thing_id, :dependent => :destroy\n  belongs_to :greater_thing, :foreign_key => :greater_thing_id\nend\n\nclass Something::ThingVariant < Something::Base\n   belongs_to :thing, :foreign_key => :thing_id\n   belongs_to :something_else, :foreign_key => :something_else_id\nend\n```\n\nI get \"uninitialized constant Something::GreaterThing::Something::Thing\" when trying to call 'minor_stuff' on an instance of Something::GreaterThing the first time\n\nThen I get \"uninitialized constant Something::GreaterThing::Something::ThingVariant\" when trying to call 'minor_stuff' on an instance of Something::GreaterThing the second time \n\nthe third time the call returns the right records.\n\nAny ideas?\n", "labels": [], "number": 1304, "updated_at": "2011-09-01 11:44:09", "user": 305847, "closed_at": "2011-09-01 11:44:09", "id": 953833, "title": "Rails 3.0.7: class_name is not respected in has_many :through when calling the first two times", "url": "https://api.github.com/repos/rails/rails/issues/1304", "created_at": "2011-05-25 16:30:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1236373", "text": "First Error Backtrace\n\n```\n    NameError: uninitialized constant Something::GreaterThing::Something::Thing\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/base.rb:1200:in `compute_type'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:162:in `klass'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:346:in `block in source_reflection'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:346:in `collect'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:346:in `source_reflection'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:377:in `check_validity!'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/association_proxy.rb:61:in `initialize'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/association_collection.rb:23:in `initialize'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/has_many_association.rb:11:in `initialize'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations.rb:1483:in `new'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations.rb:1483:in `block in collection_reader_method'\n        from (irb):1\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands/console.rb:44:in `start'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands/console.rb:8:in `start'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands.rb:23:in `<top (required)>'\n        from script/rails:6:in `require'\n```\n\nSecond Error Backtrace\n\n```\n    NameError: uninitialized constant Something::GreaterThing::Something::ThingVariant\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/base.rb:1200:in `compute_type'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:162:in `klass'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/reflection.rb:198:in `quoted_table_name'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/through_association_scope.rb:77:in `construct_joins'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/through_association_scope.rb:11:in `construct_scope'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/has_many_through_association.rb:84:in `find_target'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/association_collection.rb:410:in `load_target'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/activerecord-3.0.7/lib/active_record/associations/association_proxy.rb:145:in `inspect'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands/console.rb:44:in `start'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands/console.rb:8:in `start'\n        from /Users/beatrichartz/.rvm/gems/ruby-1.9.2-p180@restorm-com/gems/railties-3.0.7/lib/rails/commands.rb:23:in `<top (required)>'\n        from script/rails:6:in `require'\n```\n", "created_at": "2011-05-25 16:35:20", "user": 305847, "id": 1236373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1500917", "text": "http://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html\n\nFor `has_many`'s `:through` option, the docs clearly state\n\n> Options for :class_name and :foreign_key are ignored, as the association uses the source reflection.\n", "created_at": "2011-07-05 01:23:25", "user": 14762, "id": 1500917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1967211", "text": "ok, thanks\n", "created_at": "2011-09-01 11:44:09", "user": 305847, "id": 1967211}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm sorry my previous commit 24b28a2a0c6a58e177b07ce3ccf56dc975541780 was still not perfect.\nThis time, I made sure the rdoc task runs.\n", "labels": [], "number": 1305, "updated_at": "2014-06-23 15:54:41", "user": 11493, "closed_at": "2011-05-25 20:44:21", "id": 953938, "title": "Ensure RDoc::Task exists even if 'rdoc/task' was not required", "url": "https://api.github.com/repos/rails/rails/issues/1305", "created_at": "2011-05-25 16:47:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\nclass Todolist < ActiveRecord::Base\n  default_scope where(trashed: false)\n\n  has_many   :todos\n  has_many   :comments, through: :todos\nend\n\nclass Todo < ActiveRecord::Base\n  default_scope where(trashed: false)\n\n  belongs_to :todolist\n  has_many   :comments, as: :commentable\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :commentable, polymorphic: true\nend\n\ntodolist.comments.update_all trashed: true\n# => ActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'todos.trashed' in 'where clause': UPDATE `comments` SET `trashed` = 1 WHERE `comments`.`trashed` = 0 AND `todos`.`trashed` = 0 AND `todos`.`todolist_id` = 968316918 ORDER BY created_at\n```\n", "labels": [], "number": 1306, "updated_at": "2011-05-25 22:32:33", "user": 2741, "closed_at": "2011-05-25 22:32:33", "id": 954161, "title": "default_scope is applying too broadly", "url": "https://api.github.com/repos/rails/rails/issues/1306", "created_at": "2011-05-25 17:28:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238865", "text": "@dhh This looks like a dupe of #522, which occurs because `Relation#update_all` does not respect joins (and never has).\n", "created_at": "2011-05-25 22:32:33", "user": 1979, "id": 1238865}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello, \n\nI tried due diligence in looking for answers on Ruby On Rails Groups and Stack Overflow plus searching using every possible google term I could think of but I have to submit this as I don't know what else to do.\n\nI'm converting my 2.3.8 application to 3.0.7 and have run into a snag with forwarding emails from the app with an attachment. The attachment appears in the email as 1 byte in size and thus corrupt. The actual file is fine and Rails seems to have access to the file. I've tried multiple permutations but here's what I'm doing... \n\nI'm fetching email from IMAP and storing it in the db. Attachments are saved to the file system and the Attachment model stores the name of the attachment and belongs to an Email. In the view there's a simple form that allows an email address to forward the email to. That's all working fine. It's just the attachment part that I'm having troubles with. This was working fine in 2.3.8 but obviously I've had to change the way the attachment is handle for 3.0.7. \n\n```\ndef forward_email(email_id, from_address, to_address) \n    @email = Email.find(email_id) \n    @recipients = to_address \n    @from = from_address \n    @subject = @email.subject \n    @sent_on = Time.now \n    @body = @email.body + \"\\n\\n\" \n    @email.attachments.each do |file| \n        if File.exist?(file.full_path) \n            attachment :filename => file.file_name, \n                                 :content => File.read(file.full_path), \n                                 :content_type => \"application/octet-stream\" \n        else \n            @body += \"ATTACHMENT NOT FOUND: #{file.file_name}\\n\\n\" \n        end \n    end \nend \n```\n\nIf I try the attachment part like this... \n\n```\nattachments[file.file_name] = File.read(file.full_path) \n```\n\n...then I get a text representation of the attachment at the bottom of the email. I've also tried changing many different settings for \ncontent_type but it doesn't seem to make a difference. \n\nAny help would be much appreciated! \n\nThanks, \n\nChris\n", "labels": [], "number": 1307, "updated_at": "2011-05-27 12:35:41", "user": 208661, "closed_at": "2011-05-27 01:05:12", "id": 954409, "title": "ActionMailer 3.0.7 attachments", "url": "https://api.github.com/repos/rails/rails/issues/1307", "created_at": "2011-05-25 18:22:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244616", "text": "The problem is you specifying @body, which apparently interferes with ActionMailer's multipart processing. I tried but apparently it's not possible to send an email using ActionMailer without a view, so you need to use views.\n\nTry adding a view `forward_email.txt.erb` that contains just this:\n\n``` erb\n<%=@custom_content %>\n```\n\nThen your code becomes\n\n``` ruby\ndef forward_email(email_id, from_address, to_address) \n  @email = Email.find(email_id)\n  @custom_content = @email.body\n  @email.attachments.each do |file|\n    if File.exists(file.full_path)\n      attachments[file.file_name] = File.read(file.full_path)\n    end\n  end\n\n  mail :to => to_address,\n       :from => from_address,\n       :subject => @email.subject,\n       :date => Time.now\nend\n```\n\nSince I can't find any documentation on @body, I assume it's not supported and not actually a Rails 3 issue.\n", "created_at": "2011-05-26 19:10:28", "user": 44360, "id": 1244616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246290", "text": "That works! \n\nSo, just to clarify, if I specify both @body and an attachment then I need a view, otherwise @body will work fine for just plain text notifications? Did I miss that in the documentation somewhere or is this a bug?\n\nThanks!\n", "created_at": "2011-05-26 23:47:32", "user": 208661, "id": 1246290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246359", "text": "Around line 643 in https://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/base.rb you can tell @body is definitely not a string:\n\n``` ruby\n      if m.multipart?\n        parts_order ||= explicit_order || headers[:parts_order]\n        m.body.set_sort_order(parts_order)\n        m.body.sort_parts!\n      end\n```\n\nI believe your method probably stems from an old version of rails, which has since been changed. So it's not a bug. There's nothing in the documentation about @body, nor is there anything in the code that jumped out at me except for the above few lines. I may be wrong, but I think it's safe to say that you shouldn't be doing it that way any longer.\n\nHowever, since it's possible to `render :text => \"body here\"` in a controller, it would be nice to be able to do so in a mail as well.\n", "created_at": "2011-05-27 00:06:24", "user": 44360, "id": 1246359}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246560", "text": "Ok. Thanks again!\n", "created_at": "2011-05-27 01:05:12", "user": 208661, "id": 1246560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248808", "text": "Just a FYI, I tried it again, and this possibly works without a view:\n\n``` ruby\ndef forward_email(email_id, from_address, to_address) \n  @email = Email.find(email_id)\n  @email.attachments.each do |file|\n    if File.exists(file.full_path)\n      attachments[file.file_name] = File.read(file.full_path)\n    end\n  end\n\n  mail :to => to_address,\n       :from => from_address,\n       :subject => @email.subject,\n       :date => Time.now,\n       :body => @email.body\nend\n```\n\nNotice the `:body` inside the mail-hash.\n", "created_at": "2011-05-27 12:35:41", "user": 44360, "id": 1248808}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The end at the end needed to move to the left :)\n", "labels": [], "number": 1308, "updated_at": "2014-06-26 18:04:59", "user": 146214, "closed_at": "2011-05-25 20:43:24", "id": 954414, "title": "Minor indentation fix in code_statistics", "url": "https://api.github.com/repos/rails/rails/issues/1308", "created_at": "2011-05-25 18:23:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237239", "text": "awesome fix. GREEN BUILD!!!\n", "created_at": "2011-05-25 18:31:22", "user": 779796, "id": 1237239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237477", "text": "Did all the tests pass?\n", "created_at": "2011-05-25 19:01:14", "user": 228088, "id": 1237477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237530", "text": "It certainly will not work.\n", "created_at": "2011-05-25 19:08:03", "user": 149353, "id": 1237530}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "You'd think I was a grammar nazi or something, but I found one and went on a hunt to find some more. I am of course making the assumption that all code/documentation should be in American English as opposed to British English..?\n\nCheers,\n  Lee :beer:\n", "labels": [], "number": 1309, "updated_at": "2014-07-03 04:37:51", "user": 121322, "closed_at": "2011-05-25 20:36:21", "id": 954888, "title": "Some Typos Corrected and Queen's English -> American English Translations", "url": "https://api.github.com/repos/rails/rails/issues/1309", "created_at": "2011-05-25 20:03:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237956", "text": "The changes in guides can directly be pushed to docrails (public commit access)\n", "created_at": "2011-05-25 20:05:54", "user": 146214, "id": 1237956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1237987", "text": "Thanks, Vijay. Only 3 of 9 files in the pull request are for the guides. I'll try and update them now. Should I resubmit the pull request with the guide textile files omitted?\n\nCheers,\n  Lee :beer:\n", "created_at": "2011-05-25 20:10:28", "user": 121322, "id": 1237987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238115", "text": "Yeah, it's better to remove those commits. You can do that in the same pull request or open a new one, if you prefer.\n", "created_at": "2011-05-25 20:30:02", "user": 146214, "id": 1238115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238276", "text": "Recreated @ https://github.com/rails/rails/pull/1310\n", "created_at": "2011-05-25 20:53:41", "user": 121322, "id": 1238276}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "You'd think I was a grammar nazi or something, but I found one and went on a hunt to find some more. I am of course making the assumption that all code/documentation should be in American English as opposed to British English..?\n\nCheers,\nLee :beer:\n", "labels": [], "number": 1310, "updated_at": "2014-07-03 04:37:56", "user": 121322, "closed_at": "2011-05-25 22:03:44", "id": 955091, "title": "Some Typos Corrected and Queen's English -> American English Translations", "url": "https://api.github.com/repos/rails/rails/issues/1310", "created_at": "2011-05-25 20:48:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238344", "text": "![hmmm](https://img.skitch.com/20110525-1mfkxnkjxgpa27amdjh8cbt8i2.jpg)\n\n:beer:\n", "created_at": "2011-05-25 21:04:34", "user": 3124, "id": 1238344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238351", "text": "@leereilly do you mind rebasing so I can lazily apply this from github?\n", "created_at": "2011-05-25 21:05:40", "user": 3124, "id": 1238351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238432", "text": "I saaaaay....!\n\nNP - just let me review http://learn.github.com/p/rebasing.html and get back to you...\n", "created_at": "2011-05-25 21:17:02", "user": 121322, "id": 1238432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238596", "text": "OK I RTFM. I have a new branch @ https://github.com/leereilly/rails/tree/my_new_branch - should I initiate a new pull request from there... or is there some Git(hub) magic I can use?\n\nThanks for your patience!\n\nCheers,\n  Lee :beer:\n", "created_at": "2011-05-25 21:43:53", "user": 121322, "id": 1238596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1238715", "text": "@leereilly ya, just send a new pull request from that branch.  I'll close this one and apply your new one.\n", "created_at": "2011-05-25 22:03:44", "user": 3124, "id": 1238715}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "lingering autoload causes application to fail loading when config.threadsafe! has been set\n", "labels": [], "number": 1311, "updated_at": "2014-06-26 18:54:36", "user": 10137, "closed_at": "2011-05-25 21:15:13", "id": 955183, "title": "action_view/template/handler.rb has been removed", "url": "https://api.github.com/repos/rails/rails/issues/1311", "created_at": "2011-05-25 21:05:58", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nFire any comments / advice / abuse my way.\n\nThanks,\n\nJosh\n", "labels": [], "number": 1312, "updated_at": "2014-06-19 10:59:31", "user": 8701, "closed_at": "2011-05-25 21:55:15", "id": 955392, "title": "Removed deprecated methods and related tests from ActiveSupport", "url": "https://api.github.com/repos/rails/rails/issues/1312", "created_at": "2011-05-25 21:41:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis is a correction to the AR::Base#attributes= guard_protected_attributes deprecation message.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1313, "updated_at": "2014-07-03 04:38:09", "user": 8701, "closed_at": "2011-05-25 21:56:25", "id": 955408, "title": "Deprecation message correction", "url": "https://api.github.com/repos/rails/rails/issues/1313", "created_at": "2011-05-25 21:46:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "3rd time lucky?!?\n\nCheers,\n  Lee :beer:\n", "labels": [], "number": 1314, "updated_at": "2014-07-03 04:38:16", "user": 121322, "closed_at": "2011-05-29 17:38:21", "id": 955541, "title": "Minor typos corrected; minor Queen's/British English -> American English ", "url": "https://api.github.com/repos/rails/rails/issues/1314", "created_at": "2011-05-25 22:07:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255985", "text": "Can you rebase it please?\n", "created_at": "2011-05-29 04:14:35", "user": 52642, "id": 1255985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1257591", "text": "Closing this an resubmitting...\n\nCheers,\n  Lee :beer:\n", "created_at": "2011-05-29 17:38:21", "user": 121322, "id": 1257591}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I removed the extra leading space in the application.rb that is generated with 'rails new'.\n", "labels": [], "number": 1315, "updated_at": "2014-06-26 18:05:01", "user": 428480, "closed_at": "2011-05-26 05:47:02", "id": 955781, "title": "Removed unnecessary space in application.rb", "url": "https://api.github.com/repos/rails/rails/issues/1315", "created_at": "2011-05-25 23:06:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1239091", "text": "To clarify why I removed the extra space in application.rb and added it to the comment_if helper is because when the following four lines are generated:\n\nrequire \"active_record/railtie\"\nrequire \"action_controller/railtie\"\nrequire \"action_mailer/railtie\"\nrequire \"active_resource/railtie\"\n\nThe first one had a leading space, causing it to be not formatted correctly.\n", "created_at": "2011-05-25 23:21:11", "user": 428480, "id": 1239091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246462", "text": "Somehow I wish those three commits to be rebased together before get merged. This is too easy.\n", "created_at": "2011-05-27 00:34:46", "user": 4912, "id": 1246462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246504", "text": "How would one do that? I'm extremely new to rails, and programming altogether actually. It seems to be too late now, since it's already merged, but for future reference? \n\nThanks! \nAndy\n", "created_at": "2011-05-27 00:47:30", "user": 428480, "id": 1246504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246576", "text": "Aha, I'll explain to you for your further reference. Your keywords for today are `git squash commit` and `git force push` ;)\n\nFirst you'll want to look up for the commit before your commits. you can do so by `git log`. You'll see something like this:\n\n```\ncommit 60ca8d95938eddd2e9a54fb1167fd636e510b914\nAuthor: Andrew Davis <Lordsauron90@gmail.com>\nDate:   Wed May 25 19:18:29 2011 -0400\n\n    Added a space to the comment_if helper for formatting purposes\n\ncommit 063229525f8a89cd3dd6efa4c0cead37e42d2bd6\nAuthor: Andrew Davis <Lordsauron90@gmail.com>\nDate:   Wed May 25 19:04:15 2011 -0400\n\n    Accidentally added extra IDE files, removed them.\n\ncommit 3b23759a74009cc76237f60de1cd60d0d0c97d34\nAuthor: Andrew Davis <Lordsauron90@gmail.com>\nDate:   Wed May 25 19:03:29 2011 -0400\n\n    Removed unnecessary space in application.rb for formatting\n\ncommit 9b6791870bbe67f5c93cad0a676148b7cc83e697\nMerge: 7fd0a6d 9cafc28\nAuthor: José Valim <jose.valim@gmail.com>\nDate:   Wed May 25 14:55:04 2011 -0700\n\n    Merge pull request #1312 from joshk/remove_active_support_deprecations\n\n    Removed deprecated methods and related tests from ActiveSupport\n```\n\nSo now we see the SHA of that commit, we can then run \"interactive rebase\" with that.\n\n```\ngit rebase -i 9b6791870bbe67f5c93cad0a676148b7cc83e697\n```\n\nThis will open your text editor with the list of commits. It will be something along the line like this:\n\n```\npick 3b23759 Removed unnecessary space in application.rb for formatting\npick 0632295 Accidentally added extra IDE files, removed them.\npick 60ca8d9 Added a space to the comment_if helper for formatting purposes\n\n# Rebase 9b67918..60ca8d9 onto 9b67918\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n```\n\nIf you look at the comments there, you'll see that we need to change `pick` to `squash`. Your result will look like this:\n\n```\npick 3b23759 Removed unnecessary space in application.rb for formatting\nsquash 0632295 Accidentally added extra IDE files, removed them.\nsquash 60ca8d9 Added a space to the comment_if helper for formatting purposes\n```\n\nNow if you save and quit that file, another editor will come up and asking you to change commit message.\n\n```\n# This is a combination of 3 commits.\n# The first commit's message is:\nRemoved unnecessary space in application.rb for formatting\n\n# This is the 2nd commit message:\n\nAccidentally added extra IDE files, removed them.\n\n# This is the 3rd commit message:\n\nAdded a space to the comment_if helper for formatting purposes\n```\n\nThen you just change your wording to describe those commits. After that, save and close your editor. It should say something like this:\n\n```\nSuccessfully rebased and updated refs/heads/master.\n```\n\nNow you can force push to your remote. I assume that you have a remote name `ardavis`\n\n```\ngit push ardavis +master\n```\n\nYou'd then see that it pushes successfully and it would also say \"forced update\" in that log. Now wait for about 1 minute and your pull request will automatically updated with new commit.\n\n## Note Note Note\n\n**Always** use git rebase and force push only if you're the only single developer on that repository. This will be fine with your fork of Rails, as you're the single person accessing/pushing it. I would not recommend you do something like this if you're sharing a repository with somebody else, as they would facing an error that the original commit was disappeared and now they won't be able to run `git pull` anymore.\n", "created_at": "2011-05-27 01:11:48", "user": 4912, "id": 1246576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246593", "text": "Thanks! I'll try to do that later. I appreciate it! \n", "created_at": "2011-05-27 01:15:33", "user": 428480, "id": 1246593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247336", "text": "I agree, I will be more careful next time. The problem is that I usually don't look at the number of commits, just the diff after the pull request. And the diff showed just one line change. :(\n", "created_at": "2011-05-27 05:47:18", "user": 9582, "id": 1247336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248890", "text": "I followed your excellent instructions sikachu, I forced push to my fork. So I guess that's all I have to do then?\n\nSorry José for the mixup. \n\nThanks guys, definitely a learning process :)\n", "created_at": "2011-05-27 12:54:21", "user": 428480, "id": 1248890}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1316, "updated_at": "2014-07-03 04:38:23", "user": 160941, "closed_at": "2011-05-26 00:32:49", "id": 955938, "title": "Updating Railties changelog", "url": "https://api.github.com/repos/rails/rails/issues/1316", "created_at": "2011-05-25 23:50:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes rake for me in RefineryCMS. Otherwise, I get: undefined method 'prerequisites' for nil:NilClass (from rspec)\n", "labels": [], "number": 1317, "updated_at": "2014-06-30 10:39:49", "user": 10128, "closed_at": "2011-05-26 01:11:50", "id": 956159, "title": "This fixes rake for me in RefineryCMS. ", "url": "https://api.github.com/repos/rails/rails/issues/1317", "created_at": "2011-05-26 01:10:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "## Removes the restriction on primary key when joining in a habtm && test that it was properly removed\n\nSo I saw issue #534 and thought that it looked simple and gave it a try. Added a test to prove that it works fine without it. First commit pretty nervous that I just screwed everything up or something :P so anyway, hope I understood the ticket correctly and the code is satisfactory. \n", "labels": [], "number": 1318, "updated_at": "2014-06-12 11:47:31", "user": 371940, "closed_at": "2011-05-26 19:54:51", "id": 956771, "title": "Resolve issue #534", "url": "https://api.github.com/repos/rails/rails/issues/1318", "created_at": "2011-05-26 04:58:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See https://github.com/rails/rails/pull/1323\n", "labels": [], "number": 1319, "updated_at": "2014-07-03 04:38:32", "user": 27249, "closed_at": "2011-05-26 09:06:20", "id": 956844, "title": "AssociationScope#add_constraints, habtm, wrong primary_key", "url": "https://api.github.com/repos/rails/rails/issues/1319", "created_at": "2011-05-26 05:40:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240644", "text": "Can you add tests please? (And try to reuse the existing models in `activerecord/test/models` rather than adding new ones as there are already lots.)\n", "created_at": "2011-05-26 07:24:11", "user": 1979, "id": 1240644}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241102", "text": "Apologies, I've made it short, sweet and clean and had to open another pull request for it: https://github.com/rails/rails/pull/1323\n", "created_at": "2011-05-26 09:06:20", "user": 27249, "id": 1241102}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "One thing I don't understand about mass assignment protection is - Why is it a warning but not exception?\n\nMass assignment sanitizer works in the following use cases:\n- Attempt to hack something \n- Bug in the source code that made protected things that should not be protected\n\nI think both cases should throw an exception at least in development and test environment at most always.\n\nOtherwise bugs can stay uncovered by test suite or manual QA for a long time.\n", "labels": [], "number": 1320, "updated_at": "2014-07-03 04:38:35", "user": 122436, "closed_at": "2011-05-26 15:25:55", "id": 957244, "title": "Debug mass assignment protection bugs made easy", "url": "https://api.github.com/repos/rails/rails/issues/1320", "created_at": "2011-05-26 07:45:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240854", "text": "I think an extra option is the wrong way to tackle this issue. The best solution is to provide an easy to customize what to do when an invalid attribute is assigned, so people could customize it as they wish: warnings, exceptions, growl notifcations, whatever.\n", "created_at": "2011-05-26 08:16:58", "user": 9582, "id": 1240854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240863", "text": "An easy way to change the Sanitizer class (so you can inherit and override the error handling) is probably enough.\n", "created_at": "2011-05-26 08:18:36", "user": 9582, "id": 1240863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240940", "text": "We've had this discussion before:\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/32ceef53fe86195c/76befe7cc6566116\n\nBasically my feelings are we should raise in development and test and do nothing in production, where it's just noise from bots, etc.\n", "created_at": "2011-05-26 08:35:51", "user": 6321, "id": 1240940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241054", "text": "Nice, the consensus in the thread was exactly to provide a hook that people could override and do whatever they wanted.\n", "created_at": "2011-05-26 08:57:31", "user": 9582, "id": 1241054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241103", "text": "I gave some thought to Jose's idea. The problem is that Sanitizer is an internal class. Moreover it's going very deep into implementation. This make it hard to pass own sanitizer instance and even own sanitizer class to `#sanitize_from_mass_assignment` method without significant changes to the current implementation.\n\nThe only thing I can propose connected with callback is something like this:\n\n```\nActiveModel::MassAssignmentSecurity::Sanitizer.on_error = lambda {|attrs|\n  raise StandardError\n}\n```\n\nAnd implementation like this:\n\n```\n      def process_removed_keys(attrs)\n        if callback = self.class.on_error\n          callback.call(attrs)\n        else\n          self.logger.debug \"WARNING: Can't mass-assign protected attributes: #{attrs.join(', ')}\" if self.logger\n        end\n      end\n```\n\nBut this is still a configuration option.\n\nWhat do you think?\n", "created_at": "2011-05-26 09:06:27", "user": 122436, "id": 1241103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241131", "text": "The problem is because sanitizer is a module. We would need to refactor it and probably make it an object. Adding a configuration option somehow is surely the easiest way, but I don't think it is the most appropriate. Feel free to change the current code as you seem fit.\n", "created_at": "2011-05-26 09:12:19", "user": 9582, "id": 1241131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243057", "text": "Closing this  one in favor of the new one!\n", "created_at": "2011-05-26 15:25:55", "user": 9582, "id": 1243057}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When I update gem rails from git repo then run server:\n\n`undefined method `delegate_template_exists?' for class `ActionView::Base' (NameError)`\n\nFull: https://gist.github.com/992743\n", "labels": [], "number": 1321, "updated_at": "2015-10-23 18:27:55", "user": 149353, "closed_at": "2011-06-19 00:34:13", "id": 957324, "title": "undefined method `delegate_template_exists?'", "url": "https://api.github.com/repos/rails/rails/issues/1321", "created_at": "2011-05-26 08:06:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240915", "text": "Seems to be a bug in HAML not Rails.\n", "created_at": "2011-05-26 08:31:14", "user": 128683, "id": 1240915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1240933", "text": "But, it works before last update.\nNow Im loading from branch '3-1-stable' and it works.\n", "created_at": "2011-05-26 08:34:39", "user": 149353, "id": 1240933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247996", "text": "It seems that a commit on rails broke Haml, see https://github.com/nex3/haml/issues/395 for more details\n", "created_at": "2011-05-27 08:52:57", "user": 87115, "id": 1247996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3595330", "text": "Bumped into this after updating to Rails 3.2 - Updating Haml from 3.1.2 to 3.1.4 fixed it :)\n", "created_at": "2012-01-21 09:28:52", "user": 13972, "id": 3595330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3905423", "text": "Same here: encountered this after updating to Rails 3.2, but updating Haml to 3.1.4 fixed problem.\n", "created_at": "2012-02-10 12:39:57", "user": 650715, "id": 3905423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/150655730", "text": "I had haml v3.0.25 and got this error. I updated to v4.0.7 and it worked like a charm !\nBTW I'm using ruby v1.9.3 and rails v3.2.8\n", "created_at": "2015-10-23 18:27:55", "user": 694404, "id": 150655730}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The error occurs when loading railtie from gem. This is probably one more issue related to new version of rake - 0.9 .\n\nOriginal file: https://github.com/paneq/calendar_date_select/blob/977048211b94599fe0f08eb37a481f3d69df48f6/lib/calendar_date_select.rb\n\n``` ruby\nmodule CalendarDateSelect\n  class Railtie < ::Rails::Railtie\n\n    rake_tasks do\n      namespace :calendar do\n        task :install do\n        end\n      end\n    end\n\n  end\nend\n```\n\nStacktrace:\n\n```\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/bundler/gems/calendar_date_select-977048211b94/lib/calendar_date_select.rb:31:in `block in <class:Railtie>'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/railtie.rb:185:in `call'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/railtie.rb:185:in `each'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/railtie.rb:185:in `load_tasks'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/application.rb:140:in `block in load_tasks'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/application/railties.rb:11:in `each'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/application/railties.rb:11:in `all'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/application.rb:140:in `load_tasks'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/application.rb:77:in `method_missing'\n/home/rupert/develop/gavdihrpif/Rakefile:36:in `<top (required)>'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/rake_module.rb:25:in `load'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/rake_module.rb:25:in `load_rakefile'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:495:in `raw_load_rakefile'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:78:in `block in load_rakefile'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:77:in `load_rakefile'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:61:in `block in run'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/lib/rake/application.rb:59:in `run'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/rake-0.9.0/bin/rake:31:in `<top (required)>'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/bin/rake:19:in `load'\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/bin/rake:19:in `<main>'\n```\n", "labels": [], "number": 1322, "updated_at": "2011-05-28 16:23:49", "user": 65587, "closed_at": "2011-05-27 16:02:47", "id": 957530, "title": "undefined method `namespace' for CalendarDateSelect::Railtie:Class [Rails 3.0.8.rc1]", "url": "https://api.github.com/repos/rails/rails/issues/1322", "created_at": "2011-05-26 09:05:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241128", "text": "The error occures during execution of `rake` command in rails application directory. However it does not occur during execution of `rails c` command.\n\nAdding `extend Rake::DSL if defined? Rake::DSL` line before `rake_tasks` block helps.\n", "created_at": "2011-05-26 09:11:52", "user": 65587, "id": 1241128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241183", "text": "Possible fixed by this one: https://github.com/rails/rails/pull/1317\n", "created_at": "2011-05-26 09:29:44", "user": 2687, "id": 1241183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241251", "text": "Sad that there are no tests for that...\n", "created_at": "2011-05-26 09:44:04", "user": 65587, "id": 1241251}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241257", "text": "(additional) patches welcome :)\n", "created_at": "2011-05-26 09:46:01", "user": 2687, "id": 1241257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243360", "text": "I think this was fixed in 9e88b87.  I'm closing for now.  Please reopen if it's still breaking!\n", "created_at": "2011-05-26 16:08:49", "user": 3124, "id": 1243360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243486", "text": "I would like to reopen however I do not have permissions for doing it :-(\n\n```\n18:24 <ruby-1.9.2-p136> ~/develop/gavdihrpif (stable) > cat Gemfile | grep rails\ngem 'rails', :git => 'git://github.com/rails/rails.git', :branch => \"3-0-stable\"\n\n18:24 <ruby-1.9.2-p136> ~/develop/gavdihrpif (stable) > rake --version\nrake, version 0.9.0\n\n18:24 <ruby-1.9.2-p136> ~/develop/gavdihrpif (stable) > bundle show rails\n/home/rupert/.rvm/gems/ruby-1.9.2-p136/bundler/gems/rails-072e1ca5ea70\n\n18:24 <ruby-1.9.2-p136> ~/develop/gavdihrpif (stable) > rake test:units\nrake aborted!\nundefined method `namespace' for CalendarDateSelect::Railtie:Class\n```\n", "created_at": "2011-05-26 16:26:34", "user": 65587, "id": 1243486}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243601", "text": "doh, okay.  Reopening.\n", "created_at": "2011-05-26 16:46:31", "user": 3124, "id": 1243601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246143", "text": "This isn't actually fixed, I accidentally put the wrong number in the commit message.\n", "created_at": "2011-05-26 23:13:45", "user": 3124, "id": 1246143}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252599", "text": "What pain rake 0.9.0 caused :( \nThanks everyone!\n", "created_at": "2011-05-28 00:43:24", "user": 10128, "id": 1252599}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254406", "text": "This is not fixed in 3.0.8.rc2\n", "created_at": "2011-05-28 16:23:49", "user": 65587, "id": 1254406}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "AssociationScope#add_constraints was incorrectly using Reflection#active_record_primary_key instead of Reflection#association_primary_key (Line 63)\n", "labels": [], "number": 1323, "updated_at": "2014-06-26 15:41:19", "user": 27249, "closed_at": "2011-05-26 20:08:22", "id": 957534, "title": "use association_primary_key in AssociationScope#add_constraints", "url": "https://api.github.com/repos/rails/rails/issues/1323", "created_at": "2011-05-26 09:05:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Master has a regression whenever the :format parameter isn't a recognized MIME type.\nThis pull requests fixes it, so that there's no exception raised, without being trigger by respond_to either.\n", "labels": [], "number": 1324, "updated_at": "2014-06-26 18:54:38", "user": 9347, "closed_at": "2011-05-26 09:29:33", "id": 957587, "title": "Don't raise an exception if the format isn't recognized", "url": "https://api.github.com/repos/rails/rails/issues/1324", "created_at": "2011-05-26 09:21:40", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When we do a polymorphic association in Rails, if the column name has an integer the column <polymorphic_association>_type will not be filled. So for example having:\n\nclass Address < ActiveRecord::Base\n  belongs_to :addressable_1, :polymorphic => true\nend\n\nclass Person < ActiveRecord::Base\n  has_many :addresses, :as => :addressable_1\nend\n\nAddress.create!(:addressable_1 => Person.first) -> The Address object will not have addressable_1_type saved in the Database.\n\nI have tried using Rails 3.0.7 with Ruby 1.8.7.\n", "labels": [], "number": 1325, "updated_at": "2012-04-25 07:57:22", "user": 76204, "closed_at": "2012-04-25 07:57:22", "id": 957641, "title": "Polymorphic association don't work when column name has an integer", "url": "https://api.github.com/repos/rails/rails/issues/1325", "created_at": "2011-05-26 09:33:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241940", "text": "Does it work on the Rails 3.1 RC?\n", "created_at": "2011-05-26 12:31:55", "user": 1979, "id": 1241940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244051", "text": "I reproduced this in 3.0.7 as well, but it works in 3.1.0.rc1\n", "created_at": "2011-05-26 17:49:08", "user": 378646, "id": 1244051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3879894", "text": "+1\n", "created_at": "2012-02-09 00:57:06", "user": 80631, "id": 3879894}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5323135", "text": "@jonleighton Looks like this can be closed, as it was fixed in 3.1.\n", "created_at": "2012-04-25 03:25:51", "user": 139443, "id": 5323135}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "String column values are escaped improperly in SQL queries.\n\n``` ruby\nclass Function < ActiveRecord::Base {\n    :short_name => :string,\n          :path => :string,\n        :hidden => :boolean,\n    :created_at => :datetime,\n    :updated_at => :datetime\n}\n\nclass Role < ActiveRecord::Base {\n    :short_name => :string,\n        :system => :boolean,\n    :created_at => :datetime,\n    :updated_at => :datetime\n}\nf = Function.first\n\n#<Function:0xd40d8d4> {\n    :short_name => \"ManagePermissions\",\n          :path => \"permissions\",\n        :hidden => false,\n    :created_at => Mon, 23 May 2011 08:43:04 UTC +00:00,\n    :updated_at => Mon, 23 May 2011 08:43:04 UTC +00:00\n}\nruby-1.9.2-p136 :013 > f.role_ids\n[\n    [0] \"Administrator\"\n]\nruby-1.9.2-p136 :014 > f.role_ids= f.role_ids\n```\n\n```\nActiveRecord::StatementInvalid: PGError: ERROR:  column \"managepermissions\" does not exist\nLINE 1: ...s\".role_id WHERE ((\"function_roles\".function_id = ManagePerm...\n                                                             ^\n: SELECT \"roles\".* FROM \"roles\" INNER JOIN \"function_roles\" ON \"roles\".short_name = \"function_roles\".role_id WHERE ((\"function_roles\".function_id = ManagePermissions))\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:514:in `execute'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:1004:in `select_raw'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:997:in `select'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:473:in `find_by_sql'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation.rb:64:in `to_a'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation/finder_methods.rb:143:in `all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation/finder_methods.rb:105:in `find'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:444:in `find'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/has_many_through_association.rb:84:in `block in find_target'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:1127:in `with_scope'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_proxy.rb:207:in `with_scope'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/has_many_through_association.rb:84:in `find_target'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_collection.rb:410:in `load_target'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_collection.rb:356:in `replace'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations.rb:1515:in `block in collection_accessor_methods'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations.rb:1523:in `block in collection_accessor_methods'\n    from (irb):14\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands/console.rb:44:in `start'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands/console.rb:8:in `start'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands.rb:23:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'ruby-1.9.2-p136 :015 > \n```\n", "labels": [], "number": 1326, "updated_at": "2011-05-26 23:14:42", "user": 65587, "closed_at": "2011-05-26 23:14:42", "id": 957728, "title": "collection_singular_ids= setter broken when keys are strings on postgresql [Rails 3.0.8.rc1]", "url": "https://api.github.com/repos/rails/rails/issues/1326", "created_at": "2011-05-26 09:53:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241320", "text": "Seems to be deeper problem with associations:\n\n``` ruby\nclass Person < BusinessObject\n  has_many :contractings\n  has_many :contracts, :through => :contractings\nend\n\nclass Person < BusinessObject {\n             :id => :string,\n           :type => :string,\n}\n\nclass Contract < BusinessObject {\n             :id => :string,\n           :type => :string\n}\n\nclass Contracting < Foundation {\n    :contract_id => :string,\n      :person_id => :string\n}\n\n\nPerson.first.contracts\n```\n\nException:\n\n```\nActiveRecord::StatementInvalid: PGError: ERROR:  operator does not exist: character varying = integer\nLINE 1: ...type\" = 'Contract' AND ((\"contractings\".person_id = 00000002...\n                                                             ^\nHINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.\n: SELECT \"business_objects\".* FROM \"business_objects\" INNER JOIN \"contractings\" ON \"business_objects\".id = \"contractings\".contract_id WHERE \"business_objects\".\"type\" = 'Contract' AND ((\"contractings\".person_id = 00000002))\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:207:in `rescue in log'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract_adapter.rb:199:in `log'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:514:in `execute'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:1004:in `select_raw'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:997:in `select'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract/database_statements.rb:7:in `select_all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/connection_adapters/abstract/query_cache.rb:56:in `select_all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:473:in `find_by_sql'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation.rb:64:in `to_a'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation/finder_methods.rb:143:in `all'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/relation/finder_methods.rb:105:in `find'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:444:in `find'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/has_many_through_association.rb:84:in `block in find_target'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/base.rb:1127:in `with_scope'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_proxy.rb:207:in `with_scope'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/has_many_through_association.rb:84:in `find_target'\n... 1 levels...\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_proxy.rb:213:in `method_missing'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/activerecord-3.0.8.rc1/lib/active_record/associations/association_collection.rb:433:in `method_missing'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/will_paginate-2.3.15/lib/will_paginate/finder.rb:170:in `method_missing_with_paginate'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/awesome_print.rb:180:in `declassify'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/awesome_print.rb:174:in `printable'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/mixin/active_record.rb:16:in `printable_with_active_record'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/mixin/active_support.rb:16:in `printable_with_active_support'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/awesome_print.rb:149:in `awesome'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/core_ext/kernel.rb:10:in `ai'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/awesome_print-0.2.1/lib/ap/core_ext/kernel.rb:15:in `ap'\n    from /home/rupert/.irbrc:15:in `output_value'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands/console.rb:44:in `start'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands/console.rb:8:in `start'\n    from /home/rupert/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.0.8.rc1/lib/rails/commands.rb:23:in `<top (required)>'\n```\n", "created_at": "2011-05-26 10:01:19", "user": 65587, "id": 1241320}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241947", "text": "Is this a regression from 3.0.7?\n", "created_at": "2011-05-26 12:33:25", "user": 1979, "id": 1241947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241955", "text": "Yes. It works fine on 3.0.7 .\n", "created_at": "2011-05-26 12:35:01", "user": 65587, "id": 1241955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243611", "text": "@paneq would you mind providing the important parts of the schema.rb along with actual ruby for constructing the objects?  Then I can get this fixed.\n", "created_at": "2011-05-26 16:47:28", "user": 3124, "id": 1243611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244241", "text": "Stolen tables from existing rails tests schema so it is easier to write the test :-)\n\n```\n create_table :countries, :force => true, :id => false, :primary_key => 'country_id' do |t|\n   t.string :country_id\n   t.string :name\n end\n\ncreate_table :treaties, :force => true, :id => false, :primary_key => 'treaty_id' do |t|\n   t.string :treaty_id\n   t.string :name\n end\n\ncreate_table :countries_treaties, :force => true, :id => false do |t|\n  t.string :country_id, :null => false\n  t.string :treaty_id, :null => false\n  t.datetime :created_at\n  t.datetime :updated_at\nend\n```\n\nModels differ a little from current models in rails tests:\n\n```\nclass Country < ActiveRecord::Base\n  set_primary_key :country_id\n  has_many :country_treaties\n  has_many :treaties, :through => :country_treaties\nend\n\nclass CountryTreaty < ActiveRecord::Base\n  set_table_name :countries_treaties\n  belongs_to :country\n  belongs_to :treaty\nend\n\nclass Treaty < ActiveRecord::Base\n  set_primary_key :treaty_id\n  has_many :country_treaties\n  has_many :countries, :through => :country_treaties\nend\n```\n\nThings that lead to an exception:\n\n```\nCountry.create! do |c|\n c.id = \"PL\"\nend\nTreaty.create! do |t|\n t.id = \"UE\"\nend\n\nCountryTreaty.create!(:country_id => \"PL\", :treaty_id => \"UE\")\n\nc = Country.first \nc.treaties # exception\nc.treaty_ids = c.treaty_ids # exception\n```\n\nI hope this helps and makes working on this little bug nice and quick.\n", "created_at": "2011-05-26 18:16:19", "user": 65587, "id": 1244241}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244269", "text": "@paneq awesome!  Thank you!  I really appreciate the detailed report!\n", "created_at": "2011-05-26 18:19:37", "user": 3124, "id": 1244269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244284", "text": "Always pleasure to work with you. I totally like the \"veto\" idea for Rails releases.\n", "created_at": "2011-05-26 18:21:43", "user": 65587, "id": 1244284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245611", "text": "Just to update: I've reproduced the bug.  Looking in to a fix!\n", "created_at": "2011-05-26 21:33:27", "user": 3124, "id": 1245611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245639", "text": "Good luck. It's getting midnight at my time zone so I'm going to sleep.\n", "created_at": "2011-05-26 21:38:40", "user": 65587, "id": 1245639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246140", "text": "I've found the commit that caused the regression: 9f5ab9a9\n\nI fixed this, but accidentally put the wrong ticket number in the commit.  It is fixed with 179a8a46f91f71c2b0a7d306abbfc4259b61e717.\n", "created_at": "2011-05-26 23:13:21", "user": 3124, "id": 1246140}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi all,\n\nthis is a fix for Rails generators inside an engine. They currently depend on the dummy app that breaks them if no dummy app exists (e.g. if test unit files are skipped).\n\nI've extracted the generators and added a new class _Application_ inside the _lib_ folder, that provides a _Rails::Application_ but doesn't get loaded by Rails applications that use the engine.\n\nThis fixes issue #1259.\n\nRegards\n", "labels": [], "number": 1327, "updated_at": "2014-06-24 15:07:47", "user": 128683, "closed_at": "2011-05-26 10:10:23", "id": 957750, "title": "Fix engine's generators", "url": "https://api.github.com/repos/rails/rails/issues/1327", "created_at": "2011-05-26 10:00:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241336", "text": "Hrm, this is a hack around the current bug. Probably the best way to fix is this is by moving the load_generators code from Application to Engine and call it on the engine. We could probably do the same for console and make rails console also work for engines.\n", "created_at": "2011-05-26 10:04:50", "user": 9582, "id": 1241336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241345", "text": "Sure, I'll do some work on this topic.\n", "created_at": "2011-05-26 10:07:22", "user": 128683, "id": 1241345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241824", "text": "\"Probably the best way to fix is this is by moving the load_generators code from Application to Engine and call it on the engine. We could probably do the same for console and make rails console also work for engines.\"\n\nYeah, sounds like a nice solution! BTW, any plans to enable running executables such as _bundle_ and _rails_ within a dummy application in a project? \n\nCurrently this doesn't work, hence it's complicated to set up a dummy app for testing purposes - you first have to export it out, run your bundle/rails commands, then import the project back into your test folder :(\n\nhttps://github.com/kristianmandrup/multiapp-engine\n", "created_at": "2011-05-26 12:05:26", "user": 125005, "id": 1241824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242245", "text": "IMHO, the only commands we need inside an engine's project are _generate_ and _console_, as @josevalim already pointed out.\n_rails/commands_ is pretty hard to extend to achieve this behavior.\nWhat do you think about introducing _rails/engine/commands_ that handles the commands that are needed by engines only?\nThis solution separates application's and engine's command line processing.\n", "created_at": "2011-05-26 13:27:47", "user": 128683, "id": 1242245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242350", "text": "Sounds good for now. Let's try it out and see how it works in real life scenarios. I would however like to be able to run the bundler commands inside the spec folder, fx to configure a dummy rails app with some other gems in order to see how my engine plays in an app configured with other gems (integration testing). \n", "created_at": "2011-05-26 13:42:35", "user": 125005, "id": 1242350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242365", "text": "The bundler commands aren't provided by Rails and shouldn't be affected.\nThe only thing I'd do is providing a clean command set for engines.\n", "created_at": "2011-05-26 13:45:02", "user": 128683, "id": 1242365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242700", "text": "I dont think we need commands for engines. We partially handle the engine case in the current commands file, I just think we need to wrap it somewhere.\n", "created_at": "2011-05-26 14:33:45", "user": 9582, "id": 1242700}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242729", "text": "Hm, handling all together in one file would be the best solution. But the commands are totally different.\nE.g. we need one help command for engines and one for regular Rails applications.\nThey've only one thing in common: the processing of command aliases.\n", "created_at": "2011-05-26 14:38:54", "user": 128683, "id": 1242729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242803", "text": "As you seem fit sir.\n", "created_at": "2011-05-26 14:49:12", "user": 9582, "id": 1242803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242848", "text": "Hm? :)\n", "created_at": "2011-05-26 14:54:05", "user": 128683, "id": 1242848}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243033", "text": "If you think it is better to have two different files, gO ahead and try it. Code >>> discussion.\n", "created_at": "2011-05-26 15:21:55", "user": 9582, "id": 1243033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243036", "text": "Indeed, I'll do.\n", "created_at": "2011-05-26 15:22:34", "user": 128683, "id": 1243036}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246784", "text": "@flippingbits: for the record, we've tried the \"single file application\" approach, but this is not optimal and can lead to subtle bugs. Think about that: if you set some config options for an Engine and you leave Application file untouched, how will generators now that they need to us Engine's options?\n", "created_at": "2011-05-27 02:19:43", "user": 5004, "id": 1246784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247407", "text": "Yep, good point, @drogus!\n\nI've successfully moved _load_generators_ from _Application_ to _Engine_ and modified the commands by creating _rails/engine/commands_.\nI'll create a push request later, where we can discuss this solution. Or should we continue discussing here?\n", "created_at": "2011-05-27 06:11:49", "user": 128683, "id": 1247407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248495", "text": "The new pull request is available: #1356.\n", "created_at": "2011-05-27 11:06:28", "user": 128683, "id": 1248495}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI did two small cleanups.\n\nRegards\n", "labels": [], "number": 1328, "updated_at": "2014-07-03 04:38:59", "user": 128683, "closed_at": "2011-05-26 10:44:25", "id": 957784, "title": "Cleanup engine generator", "url": "https://api.github.com/repos/rails/rails/issues/1328", "created_at": "2011-05-26 10:09:33", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nRecently i had to count occurrences of the same object in an array, so maybe it can be a core extension.\nHere the patch (for code and tests).\n\nhttps://gist.github.com/992992\n", "labels": [], "number": 1329, "updated_at": "2011-05-26 17:18:08", "user": 88009, "closed_at": "2011-05-26 12:34:59", "id": 958127, "title": "Patch: Add count_occurrences to Array", "url": "https://api.github.com/repos/rails/rails/issues/1329", "created_at": "2011-05-26 11:59:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1241953", "text": "Hi there,\n\nThanks for the patch. However, new features only get added to Active Support when they are needed internally in the Rails code base, or there is a clear use-case that lots of people might use the feature in their Rails application.\n\nThanks\n", "created_at": "2011-05-26 12:34:59", "user": 1979, "id": 1241953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242041", "text": "Okay. How should i add (and share to others) this kind of tools ? As a gem ?\n", "created_at": "2011-05-26 12:53:52", "user": 88009, "id": 1242041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242072", "text": "Yes, you might create a gem that extends Ruby's core.\n", "created_at": "2011-05-26 12:59:43", "user": 128683, "id": 1242072}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243277", "text": "``` ruby\n>> [1, 1, \"foo\", :bar, 1, :bar].group_by { |x| x }\n=> {1=>[1, 1, 1], :bar=>[:bar, :bar], \"foo\"=>[\"foo\"]}\n>> Hash[_.map { |k,v| [k, v.length] }]\n=> {1=>3, :bar=>2, \"foo\"=>1}\n>>\n```\n", "created_at": "2011-05-26 15:57:50", "user": 3124, "id": 1243277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243558", "text": "Thank you Aaron, great refactoring. ;)\nThe tip of the \"self grouping\" is really nice.\n", "created_at": "2011-05-26 16:39:10", "user": 88009, "id": 1243558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243829", "text": "@Sephi-Chan Also have a look at the [Facets library](http://rubyworks.github.com/facets/)\n", "created_at": "2011-05-26 17:18:08", "user": 1979, "id": 1243829}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When googling for \"contributing to rails\" or \"contributing to ruby on rails\" this outdated guide is the top result: http://edgeguides.rubyonrails.org/contributing_to_rails.html\n\nThis guide has been removed in docrails, but apparently still exists as a .html file. The correct guide should be http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html\n\nIt confuses developers since e.g. it says to create tickets in lighthouse instead of in github.\n\nI think it's only a matter of removing or redirecting contributing_to_rails.html to the new guide to stop Google from linking to it.\n\n(Also, the docrails github repo has no \"issues\" so I couldn't create it there. Sorry if this isn't the right place for it.)\n", "labels": [], "number": 1330, "updated_at": "2011-05-26 15:27:21", "user": 44360, "closed_at": "2011-05-26 14:28:48", "id": 958222, "title": "Guides: outdated contribution-guide still live", "url": "https://api.github.com/repos/rails/rails/issues/1330", "created_at": "2011-05-26 12:29:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242661", "text": "Good catch. I've added permanent redirects for those ones.\n\nRegarding docrails and \"issues\", yeah this is the place. To explain that: documentation belongs to Rails. docrails is not a project in itself, only a branch to be able to commit fixes directly. If there's any issue with the documentation, as this one, that's a Rails issue.\n\nThanks!\n", "created_at": "2011-05-26 14:28:48", "user": 3387, "id": 1242661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243067", "text": "Excellent, glad I could help.\n", "created_at": "2011-05-26 15:27:21", "user": 44360, "id": 1243067}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "https://github.com/rails/rails/tree/19c763f7831e08606e6b4fa516f5ad3b00c6428f broke using a Rack::URLMap in your config.ru, rails would simply not start.\n\nThe use case is something like this in config.ru:\n\n```\nrun Rack::URLMap.new \"/\"       => Deploytracking::Application,\n                     \"/resque\" => Resque::Server.new\n```\n\nI've fixed it to get it starting again and added some tests to a piece which previously had no tests, which are similar to how rack tests Rack::Server: https://github.com/rack/rack/blob/master/test/spec_server.rb#L52\n\nThe only thing that I couldn't do was silence the server output in the tests.\n", "labels": ["actionpack"], "number": 1331, "updated_at": "2014-07-03 04:39:06", "user": 1060, "closed_at": "2011-06-07 06:59:56", "id": 958223, "title": "Fixed starting Rails::Server when using a Rack::URLMap in 3.1.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1331", "created_at": "2011-05-26 12:29:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242202", "text": "I can confirm this, I was having same problem with URLMap when I migrate an app from 3.0.7 to 3.1.0.rc1 and I solve it mounting application:\n\n```\nMyApp::Application.routes.draw do\n  mount Resque::Server => \"/resque\"\n  ...\n```\n", "created_at": "2011-05-26 13:20:13", "user": 160941, "id": 1242202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242572", "text": "@guilleiguaran that is a handy quick fix, but rails really should be a good rack citizen in the long run.\n", "created_at": "2011-05-26 14:16:44", "user": 1060, "id": 1242572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313989", "text": "Closing this in favor of #1516\n", "created_at": "2011-06-07 06:59:57", "user": 9582, "id": 1313989}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "A nice convenience to go with the +partial_name_counter+ local when rendering collections.\n", "labels": [], "number": 1332, "updated_at": "2014-07-03 04:39:09", "user": 3687, "closed_at": "2011-05-26 13:11:18", "id": 958358, "title": "Make +collection_size+ available as a local variable when rendering collections", "url": "https://api.github.com/repos/rails/rails/issues/1332", "created_at": "2011-05-26 13:08:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1242135", "text": "I am -1. We rarely need this and in such cases it is easy to pass as an extra option.\n", "created_at": "2011-05-26 13:11:18", "user": 9582, "id": 1242135}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi guys, I found this when I worked on my project. Let me explain situation.\nWhen \nclass Parent < ActiveRecord::Base\n  self.abstract_class = true\n  # in the end it call table_name method\n  default_scope where(...) # for example\nend\n\nclass Child < Parent\nend\nThen Child has an incorrect table_name method, because Parent is loaded first and already has overrided table_name method like this:\n\ndef table_name; “parents”; end;\n\nwhich inherits Child.\n", "labels": [], "number": 1333, "updated_at": "2014-07-03 04:39:13", "user": 414803, "closed_at": "2011-12-20 19:17:53", "id": 958359, "title": "Fix inherited table_name from abstract class", "url": "https://api.github.com/repos/rails/rails/issues/1333", "created_at": "2011-05-26 13:08:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1881270", "text": "I can confirm this is happening on `Rails 3.1.rc5` and `Rails 3.1.rc6` though not in `Rails 3.0.x`.\n\nThe issue does seem to stem from improper loading of the Parent table name. For example, say Parent declares a `has_one` relation to a Widget model for all children. The following seed data throws a table missing error (table named as Parent). \n\n```\nchild1 = Child1.create(...)\nchild1.create_widget(...)\nchild2 = Child2.create(...)\nchild2.create_widget(...)\n```\n\nWhere the following sequence works as expected. \n\n```\nchild1 = Child1.create(...)\nchild2 = Child2.create(...)\nchild1.create_widget(...)\nchild2.create_widget(...)\n```\n\nIf I monkey patch the `table_name` method in each Child model, both sequences work as expected.\n", "created_at": "2011-08-23 16:09:01", "user": 150527, "id": 1881270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2107681", "text": "I'm also getting the error on 3.1.0 but not 3.0.x.\nWhen I create seed data in the build model.  I'm getting a pg error for the abstract parent table when I'm creating seed data for a child of the abstract parent table.\n", "created_at": "2011-09-15 18:53:02", "user": 709243, "id": 2107681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3190254", "text": "Guys can you confirm if this is still a issue??\n", "created_at": "2011-12-17 16:58:04", "user": 3948, "id": 3190254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3200358", "text": "I'll check it today\n", "created_at": "2011-12-19 08:09:22", "user": 414803, "id": 3200358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3207018", "text": "Well I've tested it again and it was fixed by https://github.com/rails/rails/pull/2679. But as I said there https://github.com/rails/rails/pull/2679#issuecomment-2371227 scopes still doesn't work.\n", "created_at": "2011-12-19 18:12:32", "user": 414803, "id": 3207018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3207063", "text": "Ok so can we close this PR and open a new PR/Issue for that ??\n", "created_at": "2011-12-19 18:15:28", "user": 3948, "id": 3207063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3223691", "text": "sure\n", "created_at": "2011-12-20 19:17:53", "user": 414803, "id": 3223691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3223703", "text": "Thanks @route \n", "created_at": "2011-12-20 19:18:34", "user": 3948, "id": 3223703}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With respect to discussion:\nhttps://github.com/rails/rails/pull/1320\n\nAdded an ability to specify your own behavior on mass assingment\nprotection, controlled by option:\n\n```\nActiveModel::MassAssignmentSecurity.mass_assignment_sanitizer\n```\n\nI hope this is right way to do it. Because I don't understand how the customizations can be done without monkey patch or configuration option.\n\nBTW code seems more clean now even without customization benefits.\n\nIf there is still something I need to fix please let me know.\n", "labels": [], "number": 1334, "updated_at": "2014-06-26 17:36:22", "user": 122436, "closed_at": "2011-05-26 18:50:28", "id": 958464, "title": "MassAssignmentSecurity: add ability to specify your own sanitizer", "url": "https://api.github.com/repos/rails/rails/issues/1334", "created_at": "2011-05-26 13:22:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243065", "text": "I will review properly when I get home, but this looks good!\n", "created_at": "2011-05-26 15:27:06", "user": 9582, "id": 1243065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244476", "text": "Merged (github did not close this automatically). Thanks for your work, I think the final solution is quite good.\n", "created_at": "2011-05-26 18:50:28", "user": 9582, "id": 1244476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247740", "text": "My plan now is to make `StrictSanitizer` that will raise `ActiveModel::MassAssingmentSecurity::Error` and use it by default in development and test envs like:\n\n```\nR3config::Application.configure do\n....\nconfig.active_record.mass_assingment_sanitizer = ActiveModel::MassAssignmentProtection::StrictSanitizer.new\n....\nend\n```\n\nThat do you think, guys?\n", "created_at": "2011-05-27 07:51:49", "user": 122436, "id": 1247740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247794", "text": "I think it is a good idea, but, if we are going to have a main API for that, we should support symbols to be given:\n\n  config.active_record.mass_assignment_sanitizer = :strict\n\nAnd then we would do a constant lookup for StrictSanitizer in the current class, what do you think? And also what do you think about renaming DefaultSanitizer to LoggerSanitizer?\n", "created_at": "2011-05-27 08:03:52", "user": 9582, "id": 1247794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247852", "text": "Agreed with everything.\n\nUsing symbols in config is good idea.\n", "created_at": "2011-05-27 08:20:58", "user": 122436, "id": 1247852}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There is a bug in the setting of table_name when using multiple namespaces.\nThis bug manifests only when \"config.cache_classes\" is set to false, i.e. the development environment.\n\n`> rails c\nLoading development environment (Rails 3.1.0.rc1)\nruby-1.9.2-p180 :001 > ExamRoom::Practice::Question.table_name\n => \"exam_room_questions\"`\nvs\n`> rails c test\nLoading test environment (Rails 3.1.0.rc1)\nruby-1.9.2-p180 :001 > ExamRoom::Practice::Question.table_name\n => \"exam_room_practice_questions\"`\n\nThis can be reproduced by making a sample app with three new files and one change as outlined in the following Gist:\nhttps://gist.github.com/993158\n\nI will try and look into this later but I thought I'd post it in case anyone with more knowledge wants to have a look...\n", "labels": [], "number": 1335, "updated_at": "2011-05-28 11:25:52", "user": 286476, "closed_at": "2011-05-28 06:12:56", "id": 958585, "title": "Bug in setting table_name when using multiple namespaces.", "url": "https://api.github.com/repos/rails/rails/issues/1335", "created_at": "2011-05-26 13:40:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252810", "text": "Your directory structure is off.\n\nActiveSupport::Dependencies#load_missing_constant uses String#underscore to turn constants into file names. In other words, it's looking for \"ExamRoom::Practice\" in something like:\n\n\"ExamRoom::Practice\".underscore + \".rb\"\n=> \"exam_room/practice.rb\"\n\nIt never gets loaded because it never finds it.\n", "created_at": "2011-05-28 02:09:42", "user": 16414, "id": 1252810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252956", "text": "I agree, having a directory first called namespaces and then having the namespaces under that seems unnecessary. Best to do as @farleyknight shows.\n", "created_at": "2011-05-28 03:54:19", "user": 2687, "id": 1252956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253175", "text": "Just to add that the reason it works in test and production is that all models are loaded at startup (due to load not being threadsafe) so the constant exists even though its in the wrong place in filesystem. For the record they should like this:\n\n``` ruby\n# app/models/exam_room.rb\nmodule ExamRoom\n  mattr_accessor :table_name_prefix\n  self.table_name_prefix = 'engine_room_'\nend\n\n# app/models/exam_room/practice.rb\nmodule ExamRoom::Practice\n  mattr_accessor :table_name_prefix\n  self.table_name_prefix = \"#{parent.table_name_prefix}practice_\"\nend\n\n# app/models/exam_room/practice/question.rb\nclass ExamRoom::Practice::Question < ActiveRecord::Base\nend\n\n# script/rails c\n>> ExamRoom::Practice::Question.table_name\n=> \"engine_room_practice_questions\"\n```\n", "created_at": "2011-05-28 06:12:55", "user": 6321, "id": 1253175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253741", "text": "Hi guys,\n\nThanks for your comments.\n\nI understand your thoughts on keeping the namespaces in the models folder. However, my app has hundreds of models and it gets somewhat cluttered, so extracting those namespaces out seemed like a sensible idea as they don't actually containing any model code.\n\nRegardless, I'm still unsure as to why the line in application.rb is not loading the modules - is this not the point of it?\nconfig.autoload_paths += %W(#{config.root}/app/models/namespaces)\n\nSurely that should include the files in app/models/namespaces?\n", "created_at": "2011-05-28 11:25:52", "user": 286476, "id": 1253741}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "# when\n# in SomeController\n\n stream\n\ndef some_action\n  respond_to do |format|\n      format.json do\n        render :json => @some_collection.map{ |p| { id: p.id, name: p.full_name} }\n      end\n  end\nend\n# request and respose headers looks same, but no JSON content is visible in browser\n# Perhaps it is misuse or something, but it should be documented or reimplemented defensively then, IMHO\n", "labels": [], "number": 1337, "updated_at": "2011-07-06 23:26:09", "user": 3668, "closed_at": "2011-07-06 23:26:09", "id": 958847, "title": "HTTP streaming is on = no json content ", "url": "https://api.github.com/repos/rails/rails/issues/1337", "created_at": "2011-05-26 14:23:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Its better if I provide the link to the problem description instead. Link contains error message and config files.\n\nI suspect, this may be an issue with activerecord-3.1.0.rc1, since the error (described in stackoverflow link) is bringing it up. Had no problems running this exactly the same way in Rails 3.0.3.\n\nhttp://stackoverflow.com/questions/6137570/resque-enqueue-failing-on-second-run\n\nIn summary: \n\nIn console, I do:\n\n```\nResque.enqueue(EncodeSong, Song.find(20).id, Song.find(20).unencoded_url)\n```\n\nEverything works so far. Resque-web reports no failed jobs. And, I get the two 'puts' from module EncodeSong.\n\nHowever, running Resque.enqueue(EncodeSong, Song.find(20).id, Song.find(20).unencoded_url) a second time will return the following error in resque-web (described in stackoverflow link). To make the error go away, I would have to close the process thats running: QUEUE=\\* rake environment resque:work and rerun it in the console window. But the problem comes back after trying to Resque.enqueue() after the first time.\n", "labels": [], "number": 1339, "updated_at": "2014-05-29 09:02:41", "user": 390072, "closed_at": "2011-09-07 22:28:49", "id": 958957, "title": "Resque.enqueue failing on second run", "url": "https://api.github.com/repos/rails/rails/issues/1339", "created_at": "2011-05-26 14:39:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244959", "text": "Looks like it might be a bug with Resque or Postgres gem than Rails 3.1 bug.\nI migrate successfully an app from Rails 3.0.7 to Rails 3.1.0.rc1, I use Resque, Heroku and RedisToGo also. What version of postgres gem and resque are you using?\n\nP.D: Please post the backtrace here, some people wouldn't go to StackOverflow to see the error :P\n", "created_at": "2011-05-26 20:02:22", "user": 160941, "id": 1244959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245202", "text": "Bundle install says: Using pg (0.11.0), Using resque (1.16.1). Are you on ruby 1.9.2?\n\nThe backtrace as requested:\n\n```\nClass\n    EncodeSong\nArguments\n\n    20\n    \"https://bucket_name.s3.amazonaws.com/unencoded/users/1/songs/test.mp3\"\n\nException\n    PGError\nError\n    server closed the connection unexpectedly This probably means the server terminated abnormally before or while processing the request.\n\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:272:in `exec'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:272:in `block in clear_cache!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:271:in `each_value'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:271:in `clear_cache!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:299:in `disconnect!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:191:in `block in disconnect!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `each'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `disconnect!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/core_ext/module/synchronization.rb:35:in `block in disconnect_with_synchronization!'\n    /Users/Chris/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activesupport-3.1.0.rc1/lib/active_support/core_ext/module/synchronization.rb:34:in `disconnect_with_synchronization!'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:407:in `remove_connection'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:116:in `remove_connection'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:79:in `establish_connection'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:60:in `establish_connection'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:55:in `establish_connection'\n    /Users/Chris/Sites/site_name/lib/tasks/resque.rake:17:in `block (2 levels) in <top (required)>'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:355:in `call'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:355:in `run_hook'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:162:in `perform'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:130:in `block in work'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:116:in `loop'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/worker.rb:116:in `work'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/resque-1.16.1/lib/resque/tasks.rb:27:in `block (2 levels) in <top (required)>'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:205:in `call'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:205:in `block in execute'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:200:in `each'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:200:in `execute'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:158:in `block in invoke_with_call_chain'\n    /Users/Chris/.rvm/rubies/ruby-1.9.2-p136/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:151:in `invoke_with_call_chain'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/task.rb:144:in `invoke'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:112:in `invoke_task'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:90:in `block (2 levels) in top_level'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:90:in `each'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:90:in `block in top_level'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:84:in `top_level'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:62:in `block in run'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:129:in `standard_exception_handling'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/lib/rake/application.rb:59:in `run'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/gems/rake-0.9.0/bin/rake:31:in `<top (required)>'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/bin/rake:19:in `load'\n    /Users/Chris/.rvm/gems/ruby-1.9.2-p136@railspre/bin/rake:19:in `<main>'\n```\n", "created_at": "2011-05-26 20:34:13", "user": 390072, "id": 1245202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245288", "text": "Guilleiguaran, can you also show me what you have in:\n\nlib/tasks/resque.rake\nconfig/initializers/resque.rb\n\nIn your module for one of your jobs, are you using active record to look up a record? For instance. Something like:\n\n```\nmodule EncodeSong\n  @queue = :encode_song\n\n  def self.perform(media_id, s3_file_url)\n    media = Song.find(media_id)\n  ....\n```\n\nIts interesting to know how you got this to work in Rails 3.1rc.\n", "created_at": "2011-05-26 20:47:06", "user": 390072, "id": 1245288}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245396", "text": "I'm using Ruby 1.9.2 and I'm querying with ActiveRecord in my jobs. I'm using pg 0.11.0 and resque 1.16.1\n\nconfig/initializers/resque.rb:\n\n``` ruby\nrequire 'resque/job_with_status'\nrequire 'resque/failure/multiple'\nrequire 'resque/failure/hoptoad'\nrequire 'resque/failure/redis'\nrequire 'resque/server'\nrequire 'resque/status_server'\n\nResque::Server.use Rack::Auth::Basic do |username, password|\n  password == \"test-password\"\nend\n\nredis_config = YAML.load_file(File.join(Rails.root, 'config', 'redis.yml'))[Rails.env]\nredis_url = ENV[\"REDISTOGO_URL\"] || redis_config['redis_url']\n\nuri = URI.parse(redis_url)\nResque.redis = Redis.new(:host => uri.host, :port => uri.port, :password => uri.password)\nResque::Status.expire_in = (24 * 60 * 60)\n```\n\nlib/tasks/resque.rake:\n\n```\nrequire 'resque/tasks'\n\ntask \"resque:setup\" => :environment do\n  ENV['QUEUE'] = '*'\nend\n\ndesc \"Alias for resque:work (To run workers on Heroku)\"\ntask \"jobs:work\" => \"resque:work\"\n```\n", "created_at": "2011-05-26 21:01:16", "user": 160941, "id": 1245396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245475", "text": "Do your jobs make any queries to any records? \n\nSecond, I did a fresh install of Rails 3.1rc on a new RVM gemset running 1.9.2. I don't think this should be a problem. I'm hoping I didn't miss out on any configurations.\n", "created_at": "2011-05-26 21:15:31", "user": 390072, "id": 1245475}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1245621", "text": "Yes, I make a lot of queries on all my jobs.\n", "created_at": "2011-05-26 21:35:44", "user": 160941, "id": 1245621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248438", "text": "Guilleiguaran, is your app on Heroku running on a dedicated server (pgsql 9) or shared (pgsql 8)? \n\nAre you on OSX?\n\nStill can't seem to pinpoint the problem. If its running fine on your 3.1rc environment, I wonder why it isn't on mine.\n", "created_at": "2011-05-27 10:47:07", "user": 390072, "id": 1248438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323500", "text": "It seems I have just run into the same problem. \n\nBacktrace: \n\n```\n[ pid=18421 thr=70134877964720 file=utils.rb:176 time=2011-06-08 01:21:06.693 ]: *** Exception PGError in application (server closed the connection unexpectedly\n        This probably means the server terminated abnormally\n        before or while processing the request.\n) (process 18421, thread #<Thread:0x7f9318f99360>):\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:273:in `query'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:273:in `clear_cache!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:272:in `each_value'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:272:in `clear_cache!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:300:in `disconnect!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:191:in `disconnect_without_synchronization!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `each'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:190:in `disconnect_without_synchronization!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activesupport-3.1.0.rc1/lib/active_support/core_ext/module/synchronization.rb:35:in `disconnect!'\n        from /usr/local/rvm/rubies/ruby-1.8.7-p334/lib/ruby/1.8/monitor.rb:242:in `synchronize'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activesupport-3.1.0.rc1/lib/active_support/core_ext/module/synchronization.rb:34:in `disconnect!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:374:in `clear_all_connections!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:374:in `each_value'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_pool.rb:374:in `clear_all_connections!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:123:in `__send__'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:123:in `clear_all_connections!'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/utils.rb:398:in `before_handling_requests'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/rack/application_spawner.rb:204:in `start_request_handler'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/rack/application_spawner.rb:170:in `send'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/rack/application_spawner.rb:170:in `handle_spawn_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/utils.rb:479:in `safe_fork'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/rack/application_spawner.rb:165:in `handle_spawn_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:357:in `__send__'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:357:in `server_main_loop'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:206:in `start_synchronously'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:180:in `start'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/rack/application_spawner.rb:128:in `start'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/spawn_manager.rb:253:in `spawn_rack_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server_collection.rb:132:in `lookup_or_add'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/spawn_manager.rb:246:in `spawn_rack_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server_collection.rb:82:in `synchronize'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server_collection.rb:79:in `synchronize'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/spawn_manager.rb:244:in `spawn_rack_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/spawn_manager.rb:137:in `spawn_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/spawn_manager.rb:275:in `handle_spawn_application'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:357:in `__send__'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:357:in `server_main_loop'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334/gems/passenger-3.0.7/lib/phusion_passenger/abstract_server.rb:206:in `start_synchronously'\n        from /usr/local/rvm/gems/ruby-1.8.7-p334//gems/passenger-3.0.7//helper-scripts/passenger-spawn-server:99\n```\n\nThis error starts to appear in my Rails application after upgrade from 2.3.11 to 3.1rc (I didn't try any 3.0.\\* version). The backtrace is from apache log file, there is no record in rails log file. About 1 of 20 requests results in Internal server error and the\napache log shows this message. The page where application fails seems to be random.\n- I do NOT use resque\n- the application uses PostgreSQL 7.4 database and pg (0.9.0) gem, passenger 3.0.7 \n- same error both for ruby 1.8.7 and 1.9.2\n- it only occurs where there are concurrent requests, i.e. `ab -n 100 -c 2 http://localhost/login` fails while `ab -n 100 -c 1 http://localhost/login` passes.\n- more concurrency, more fails\n- no error if I comment out the line `@connection.query \"DEALLOCATE #{value}\"` at `activerecord-3.1.0.rc1/lib/active_record/connection_adapters/postgresql_adapter.rb:273`\n", "created_at": "2011-06-07 23:49:13", "user": 171436, "id": 1323500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323575", "text": "@krzkrzkrz I use OSX locally and shared database in Heroku\n", "created_at": "2011-06-08 00:05:25", "user": 160941, "id": 1323575}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366718", "text": "Maybe I found the reason why thinks go wrong. Passenger spawner creates the first thread which works fine. As soon as some any threads is needed, it forks the first thread, try to reestabilish database connections since it's not allowed to use a database connection after fork (see http://www.postgresql.org/docs/9.0/static/libpq-connect.html). The problem part is clearing database connections - all prepared statements are deallocated by sending query to the database. Since the connection isn't valid because of forking it results in undefined behavior.\n\nIn previous versions of Rails it works because there weren't any prepared statements and clearing database connection doesn't perform any query. I'm not sure who is responsible for this issue. It seems active record doesn't allow to clear invalid database connection, but both passenger and resque do it. \n", "created_at": "2011-06-14 15:21:26", "user": 171436, "id": 1366718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1459523", "text": "The temporary fix is to use `PassengerSpawnMethod conservative` in passenger, which disables forking running processes.\n", "created_at": "2011-06-28 22:20:56", "user": 5004, "id": 1459523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1466058", "text": "As pointed out by carhartl: https://github.com/defunkt/resque/issues/306#issuecomment-1421034\n\nUsing `before_fork` instead of `after_fork` seems to work. Don't have Resque installed on our environment anymore, so I can't verify this solution. But might as well point this out as it may help anyone else who comes across the same issue.\n\n---\n\nWhile after_fork for me always caused the \"closed connection\" error, using before_fork fixed both that one as well as the \"prepared statement already exists\" error.\n\n```\nResque.before_fork = Proc.new { ActiveRecord::Base.establish_connection }\n```\n\nNot yet sure about the implications of it.\n\nruby 1.9.2p136 (2010-12-25 revision 30365) [x86_64-darwin10.6.0]\nRails 3.1.0.rc4\nresque 1.17.1\n", "created_at": "2011-06-29 10:37:01", "user": 390072, "id": 1466058}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529937", "text": "Having this same issue with:\n\nruby 1.8.7\nRails 3.0.8\nResque 1.10.0\nPostgresql 8.4\n\nI get the error:  ActiveRecord::StatementInvalid: PGError: server closed the connection unexpectedly\n\nAdding the before_fork lambda seemingly fixed this.\n", "created_at": "2011-07-08 02:57:08", "user": 471, "id": 1529937}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715696", "text": "Same problem here.\n\nruby 1.8.7\nRails 3.0.9\nPostgresql 9.0\n\nWe fixed it in Resque by using the before_fork block, but it occurs as well in rails + passenger.\n", "created_at": "2011-08-03 05:55:21", "user": 12752, "id": 1715696}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1780497", "text": "Same problem.\n\nWas ok until I upgraded from Rails 3.0.x to rails 3.1.0rc5. \n\nBefore_fork didn't fix it. Only temporary fix so far is PassengerSpawnMethod conservative as mentioned above.\n", "created_at": "2011-08-11 09:46:48", "user": 600494, "id": 1780497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787830", "text": "I'm experiencing this issue as well, Ruby 1.9.0 (p290), Rails 3.2.0-beta, Passenger 3.0.8.\n\n```\n$ uname -a\nLinux li375-134 2.6.39.1-linode34 #1 SMP Tue Jun 21 10:29:24 EDT 2011 i686 GNU/Linux\n$ gem list | grep passenger\npassenger (3.0.8)\n$ ruby --version\nruby 1.9.2p290 (2011-07-09 revision 32553) [i686-linux]\n$ apache2 -v\nServer version: Apache/2.2.19 (Debian)\nServer built:   May 22 2011 08:32:52\n$ free\n             total       used       free     shared    buffers     cached\nMem:       1028684     919724     108960          0      25580     615576\n-/+ buffers/cache:     278568     750116\nSwap:       262140      61668     200472\n```\n\n@drogus - Thanks for the workaround using `PassengerSpawnMethod conservative`, hopefully this doesn't bring my server to a crawl. :/\n", "created_at": "2011-08-12 02:29:24", "user": 169093, "id": 1787830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1916130", "text": "Is it possible to rename this issue to better describe the actual nature and impact of it?  Prepared statements in ActiveRecord 3.1 + Postgres + Passenger basically blow up big time, and require the conservative spawn method which is undesirable.  \n", "created_at": "2011-08-26 19:12:08", "user": 69, "id": 1916130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1993109", "text": "i am facing similar problem.\n\nalthough setting `passenger_spawn_method conservative;` works.\n\nIt seems to end up premature closing my rails thread, it seems.\n\n`upstream prematurely closed connection while reading response header from upstream`\n\nmight be a separate issue.\n", "created_at": "2011-09-04 18:34:22", "user": 297156, "id": 1993109}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2022819", "text": "@rsanheim, I don't think that would be a suitable title for the issue. When I was experiencing this problem, I was not using Passenger. Although a lot of devs are coming across this issue with Passenger (so it seems), its not solely Passenger related.\n", "created_at": "2011-09-06 21:52:12", "user": 390072, "id": 2022819}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2025683", "text": "Just to inform you guys that I move my DB to MySQL and the problem is solved.\n", "created_at": "2011-09-07 05:13:10", "user": 297156, "id": 2025683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2026341", "text": "I can vouch for this too. I moved databases from PgSQL to MySql, and the problem seems to have gone away.\n", "created_at": "2011-09-07 07:35:41", "user": 390072, "id": 2026341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2026994", "text": "Problem is that on connection reset PgSQL AR adapter is trying to deallocate all prepared statements. But for smart forks in passenger it makes no sense, because these statements are not valid for forked process.\nSolution can be tricky because connection rest is triggered from passenger. And the AR reset connection clears statements cache. The problem is that the passenger calls [reset connection](https://github.com/FooBarWidget/passenger/blob/master/lib/phusion_passenger/utils.rb#L396) before it's hooks got triggered.\n\nI use following monkey patch to make smart spawn methods work with PostgreSQL.\n_WARNING:_ This is for 3.1 only, the later version may have this bug fixed and now in trunk statements caching mechanism differs form that this patch relay on\n\n<pre>\n# Monkey pactch to prevent postgres prepared statements deallocation on fork\n# Original file https://github.com/FooBarWidget/passenger/blob/master/lib/phusion_passenger/utils.rb\nif defined?(PhusionPassenger)\nmodule PhusionPassenger\n  module Utils\n    protected\n\n    def before_handling_requests_with_pg(forked, options)\n      if forked && defined?(::ActiveRecord::Base)\n        begin\n          if ::ActiveRecord::Base.respond_to?(:connection)\n            if ::ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ADAPTER_NAME == ::ActiveRecord::Base.connection.adapter_name\n              # Reset all prepared statements, they will be handled properly in donor thread\n              ::ActiveRecord::Base.connection.instance_variable_set(:@statements, {})\n            end\n          end\n        rescue Exception => e\n          print_exception(self.class.to_s, e)\n        end\n      end\n      before_handling_requests_without_pg(forked, options)\n    end\n    alias_method_chain :before_handling_requests, :pg\n  end\nend\nend\n</pre> \n", "created_at": "2011-09-07 09:17:34", "user": 134304, "id": 2026994}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2027040", "text": "Mr. MasterLambaster, you are a star! Just in time, mate! Until a solution makes it into the postgres adapter, will give your monkey patch a shot.\n", "created_at": "2011-09-07 09:26:00", "user": 966819, "id": 2027040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2027114", "text": "@jiannis Problem with the patch is that it's need to be made both in passenger and AR PostgreSQL adapter.\n", "created_at": "2011-09-07 09:39:34", "user": 134304, "id": 2027114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2028668", "text": "# Idea Boat: Rack+Rails Expose Fork Aspects\n\nPerhaps Rails could expose `before_fork`, `after_fork`, and `around_fork` hooks?\n\n```\nRails.configuration.configure do\n  config.before_fork { close_all_connections }\n  config.after_fork { open_all_connections }\n  # or\n  config.around_fork do |fork|\n    close_all_connections\n    fork.call\n    open_all_connections\n  end\nend\n```\n\nRack could potentially expose these hooks too (so rack-compatible servers could find them), and a Rails config.ru could forward the Rack hooks to the Rails hooks.\n\nPassenger and Unicorn could then call the appropriate Rack hooks before, after, and around forking.\n\nNote that in this example Rails would not actually implement the forking. Passenger and Unicorn would merely be able to discover and call the hooks when Passenger and Unicorn implement the forking.\n\nThen you wouldn't need complicated cross-library patches. The ActiveRecord PosgreSql Adapter would, in the ActiveRecord railtie's initializiation, set up the hooks. Done.\n\nThis idea doesn't help the current state of affairs, where these hooks don't exist and where cross-library patches remain necessary. But this may help the future state of affairs.\n", "created_at": "2011-09-07 13:30:56", "user": 169419, "id": 2028668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2032628", "text": "For those suggesting moving from MySQL to PostgreSQL, you are correct that the problem is only when using PostgreSQL.  However, \"just switching databases\" is definitely not an acceptable solution by any means.\n", "created_at": "2011-09-07 19:25:34", "user": 169093, "id": 2032628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2033932", "text": "I've threatened @tenderlove with bodily harm unless this is fixed in 3.1.1. He claims he's going to partition by PID in the cache, but he's historically untrustworthy.\n", "created_at": "2011-09-07 21:29:37", "user": 3117, "id": 2033932}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2052931", "text": "@MasterLambaster : Is this patch is only for rails 3.1.X ?\nActiveRecord doesn't seem to have a \"statements\" var: \n\n```\n::ActiveRecord::Base.connection.instance_variable_get(:@statements)                           \n=> nil                  \n```\n\nthanks\n", "created_at": "2011-09-09 16:26:02", "user": 12752, "id": 2052931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053016", "text": "Yes, that's for 3.1.x, later versions have separate class for statements cache - StatementPool\nBut same variable is set after initialization. Are you sure your ::ActiveRecord::Base.connection.adapter_name == \"PostgreSQL\".  And 3.x AFAIK  have no prepared statements cache at all\n", "created_at": "2011-09-09 16:32:30", "user": 134304, "id": 2053016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053043", "text": "I have 3.0.10, I thought it could be a solution for us :)\nWe're having this issue and it's driving me crazy\n", "created_at": "2011-09-09 16:34:22", "user": 12752, "id": 2053043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053119", "text": "3.0 doesn't use a statement cache. It tends that you have other problem that this particular one\n", "created_at": "2011-09-09 16:39:18", "user": 134304, "id": 2053119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053278", "text": "Just wondering why this issue has been closed. Has it been deemed resolved? I saw @tenderlove made a recent commit. Does this highlight / fix the issue at hand?\n", "created_at": "2011-09-09 16:54:06", "user": 390072, "id": 2053278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053298", "text": "for rails 3.1, it should be fixed. For rails 3.0, the truth is out there... \n", "created_at": "2011-09-09 16:55:45", "user": 12752, "id": 2053298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053346", "text": "@krzkrzkrz Yes, @tenderlove commit is fix for this issue. Prepared statements are stored with the process_id, so after fork the statements cache will be empty because proc id will change.\n@gravis it cant be truth because there is **NO** statements cache in it. Post your error and rails version, may be we can find out what's the problem.\n", "created_at": "2011-09-09 17:00:13", "user": 134304, "id": 2053346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2053382", "text": "Awesome. Great job Rails team! Thumbs up!\n", "created_at": "2011-09-09 17:03:43", "user": 390072, "id": 2053382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2054776", "text": "@MasterLambaster thanks again mate for the monkey patch, @tenderlove thanks for the ingenious fix! Love you both!\n", "created_at": "2011-09-09 19:16:39", "user": 966819, "id": 2054776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2130542", "text": "Had no luck with the above fix for unicorn. Reducing the number of workers to 1 seems to make the problem go away.\n", "created_at": "2011-09-19 05:45:04", "user": 96907, "id": 2130542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2205753", "text": "I also had no luck with unicorn until I used the before_fork approach mentioned by @krzkrzkrz.  That seemed to do it.\n", "created_at": "2011-09-27 00:24:33", "user": 47390, "id": 2205753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3254925", "text": "Everything was fine on Monday.  Now I'm getting the problem.\n\nRails 3.1.3, Unicorn 4.1.1, PG 0.12.0, Postgresql 9.1\n\nHappened when I did a bundle update on Tuesday to upgrade to Rails 3.1.3.  I seen that Unicorn upgraded also.  I downgraded everything but I still have the issue.\n\nJust wanted to add my 2c here.\n\nPS, switched to WEBrick for local development on my Mac to fix the problem.  Only change was to remove Unicorn from my Gemfile.\n\nPPS, works fine on my Debian server.  Only broken on my Mac.\n\nPPPS, Instead of using \"rails s\" to start my app, I used \"unicorn\" and it works fine.  No more PG errors.\n", "created_at": "2011-12-22 21:11:26", "user": 871, "id": 3254925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3335219", "text": "I'm having this problem as well.\n\nRails 3.1.3\npg 0.11.0\nPostgresql 9.1.1\n", "created_at": "2012-01-03 00:22:53", "user": 4727, "id": 3335219}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3379389", "text": "I'm having a similar issue, sans Resque/PG, with:\n\nRails 3.1.3\nMongo 1.5.2\nMongoMapper 0.10.1\nPassenger 3.0.2\nNginx 0.8.54\nUbuntu  10.04  x86_64\n\nAfter a few seconds of light load, the Rack processes that Passenger spawns begin to eat up large amounts of CPU/Memory and eventually the box becomes unusable. An strace on one of the errant processes looks like this, over and over again: \n\nselect(22, [], [20], [], {42, 971988})  = 1 (out [20], left {42, 971985})\nsendto(20, \"1\\2\\0\\0#\\t\\0\\0\\0\\0\\0\\0\\324\\7\\0\\0\\4\\0\\0\\0weeklyad_sta\"..., 561, 0, NULL, 0) = 561\ngettimeofday({1325811631, 89591}, NULL) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 684154080}) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 684226412}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 684494242}) = 0\nselect(21, [20], [], [], {29, 999659})  = 1 (in [20], left {29, 993908})\nclock_gettime(CLOCK_MONOTONIC, {173, 690521306}) = 0\nselect(21, [20], [], [], {29, 993632})  = 1 (in [20], left {29, 993630})\nread(20, \"\\244\\\"\\0\\0\\211\\342\\21\\0#\\t\\0\\0\\1\\0\\0\\0\\10\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"..., 4096) = 4096\nclock_gettime(CLOCK_MONOTONIC, {173, 690851532}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 691390212}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\ngettimeofday({1325811631, 97286}, NULL) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 691849901}) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 691985528}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 692489629}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 692913229}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\ngettimeofday({1325811631, 98793}, NULL) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 693355616}) = 0\nclock_gettime(CLOCK_MONOTONIC, {173, 693427246}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 693694905}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\nclock_gettime(CLOCK_MONOTONIC, {173, 693924126}) = 0\nselect(0, [], [], [], {0, 0})           = 0 (Timeout)\ngettimeofday({1325811631, 99715}, NULL) = 0\n\nThe issue is resolved by setting: passenger_spawn_method conservative;\n", "created_at": "2012-01-06 01:01:01", "user": 391291, "id": 3379389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3640740", "text": "We are seeing a similar issue with:\n- rails (3.1.3)\n- pg (0.11.0)\n- passenger (3.0.11)\n\nWe are connecting to postgresql using SSL  This seems to happen sporadically, I suspect it is after a Passenger forking or , but I have not been able to come up with steps to reliably reproduce the issue..\n\nRelevant stack trace on the error is\n\n## ActiveRecord::StatementInvalid: PGError: no connection to the server : SELECT \"categories\".\\* FROM \"categories\"  LIMIT 1\n\n```\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1021:in `async_exec'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1021:in `exec_no_cache'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/postgresql_adapter.rb:602:in `block in exec_query'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract_adapter.rb:244:in `block in log'\n[GEM_ROOT]/gems/activesupport-3.1.3/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract_adapter.rb:239:in `log'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/postgresql_adapter.rb:601:in `exec_query'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/postgresql_adapter.rb:1116:in `select'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract/database_statements.rb:18:in `select_all'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract/query_cache.rb:61:in `block in select_all'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract/query_cache.rb:75:in `cache_sql'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/connection_adapters/abstract/query_cache.rb:61:in `select_all'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/base.rb:470:in `find_by_sql'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/relation.rb:111:in `to_a'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/relation/finder_methods.rb:376:in `find_first'\n[GEM_ROOT]/gems/activerecord-3.1.3/lib/active_record/relation/finder_methods.rb:122:in `first'\n```\n", "created_at": "2012-01-24 21:27:48", "user": 14490, "id": 3640740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3647358", "text": "@robdimarco it's other issue. The connection had to be reset on fork, but the passenger reset connection on fork. So the problem may be in network connectivity or at some point pg server goes away.\nTry to set reconnect: true in your database.yml file. \nIt might be PgSQL adapter issue, but most likely it's not.\n", "created_at": "2012-01-25 08:29:35", "user": 134304, "id": 3647358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3649669", "text": "@MasterLambaster thanks for the recommendation, will try.\n", "created_at": "2012-01-25 12:18:15", "user": 14490, "id": 3649669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4372469", "text": "Quick note to others having the issues:\n\n 1: The Devise gem causes problems when running Rails with unicorn-rails (rails server).  Clearance works fine.\n 2: The apn_sender (Apple Notification Sender) gem causes Resque to have the problem.\n", "created_at": "2012-03-07 17:11:37", "user": 871, "id": 4372469}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello,\n\nI'm having trouble finding a solution to this problem. I'm getting the error `Please install the mysql adapter: 'gem install activerecord-mysql-adapter'` when I specify either `ruby-mysql` or `mysql2` in my GemFile. This has only happend sense I've upgraded to rails 3.1.0.rc1. I'm running OSX 10.6, ruby 1.9.2, \n\n```\ncody$ rails c\n/Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:71:in `rescue in establish_connection': Please install the mysql adapter: `gem install activerecord-mysql-adapter` (mysql is not part of the bundle. Add it to Gemfile.) (RuntimeError)\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:68:in `establish_connection'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:60:in `establish_connection'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/connection_specification.rb:55:in `establish_connection'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/railtie.rb:69:in `block (2 levels) in <class:Railtie>'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/lazy_load_hooks.rb:36:in `instance_eval'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/lazy_load_hooks.rb:36:in `execute_hook'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/lazy_load_hooks.rb:43:in `block in run_load_hooks'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/lazy_load_hooks.rb:42:in `each'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/lazy_load_hooks.rb:42:in `run_load_hooks'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/base.rb:2135:in `<top (required)>'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/railtie.rb:34:in `block in <class:Railtie>'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/railtie.rb:177:in `call'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/railtie.rb:177:in `block in load_console'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/railtie.rb:177:in `each'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/railtie.rb:177:in `load_console'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/application.rb:115:in `block in load_console'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/application/railties.rb:8:in `each'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/application/railties.rb:8:in `all'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/application.rb:115:in `load_console'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:26:in `start'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:8:in `start'\nfrom /Users/cody/.rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands.rb:40:in `<top (required)>'\nfrom script/rails:6:in `require'\nfrom script/rails:6:in `<main>'\n```\n\nHere is the `gem env` output\n\n```\ncody$ gem env\nRubyGems Environment:\n- RUBYGEMS VERSION: 1.6.2\n- RUBY VERSION: 1.9.2 (2011-02-18 patchlevel 180) [x86_64-darwin10.7.3]\n- INSTALLATION DIRECTORY: /Users/cody/.rvm/gems/ruby-1.9.2-p180\n- RUBY EXECUTABLE: /Users/cody/.rvm/rubies/ruby-1.9.2-p180/bin/ruby\n- EXECUTABLE DIRECTORY: /Users/cody/.rvm/gems/ruby-1.9.2-p180/bin\n- RUBYGEMS PLATFORMS:\n  - ruby\n  - x86_64-darwin-10\n- GEM PATHS:\n   - /Users/cody/.rvm/gems/ruby-1.9.2-p180\n   - /Users/cody/.rvm/gems/ruby-1.9.2-p180@global\n- GEM CONFIGURATION:\n   - :update_sources => true\n   - :verbose => true\n   - :benchmark => false\n   - :backtrace => false\n   - :bulk_threshold => 1000\n   - :sources => [\"http://gems.rubyforge.org/\", \"http://gems.github.com\"]\n- REMOTE SOURCES:\n   - http://gems.rubyforge.org/\n   - http://gems.github.com\n```\n\nIf I can provide any more information please let me know.\n\nThanks,\n-Cody\n", "labels": [], "number": 1340, "updated_at": "2012-03-07 21:16:10", "user": 68203, "closed_at": "2011-05-26 16:07:18", "id": 959380, "title": "3.1.0.rc1: Please install the mysql adapter", "url": "https://api.github.com/repos/rails/rails/issues/1340", "created_at": "2011-05-26 15:44:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243349", "text": "I believe I've fixed my problem. I set `adapter: mysql2` instead of `adapter: mysql` in database.yml\n\nI apologize for the noise.\n\nCheers,\n-Cody\n", "created_at": "2011-05-26 16:07:18", "user": 68203, "id": 1243349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1428647", "text": "no noise here. came up as the first solution in google and totally got me moving again.. thanks!!!\n", "created_at": "2011-06-23 21:36:59", "user": 534913, "id": 1428647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1428668", "text": "awesome, glad I could help.\n", "created_at": "2011-06-23 21:40:05", "user": 68203, "id": 1428668}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1538961", "text": "100% usefull. Thanks!\n", "created_at": "2011-07-09 16:14:56", "user": 49499, "id": 1538961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3685540", "text": "A note to anyone who finds this issue while researching this error when using Rails 3.1 with Heroku and the Amazon RDS add-on, you'll need to make the change in the database.yaml file, and also change the DB URL in the RDS add-on configs to use `mysql2://` instead of `mysql://`\n", "created_at": "2012-01-27 11:49:14", "user": 445150, "id": 3685540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3841934", "text": "ditto @WilliamDenniss for clearDB mysql change <code>DATABASE_URL=mysql2://...</code> instead of <code>DATABASE_URL=mysql://...</code>\n", "created_at": "2012-02-07 03:34:20", "user": 1414577, "id": 3841934}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4378166", "text": "Hey guys i am having the same issue like *codr \ni checked my database.yaml file and it is already mysql2 \n\nthe details are same as codr \nany help is highly appreciated\n", "created_at": "2012-03-07 21:16:10", "user": 1483250, "id": 4378166}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As far as I can tell this is not needed. Running the task with the original\nline, ActionView::Helpers::SprocketsHelper, does nothing different to the final output.\nWhatever the case, I could find nowhere that Sprockets::Helpers is defined.\n\nOther option is to revert 9701014b960e8679af86\n\n@josh can you shed some light on this?\n", "labels": [], "number": 1341, "updated_at": "2014-07-03 04:39:43", "user": 35866, "closed_at": "2011-05-26 17:48:51", "id": 959499, "title": "Remove line causing uninitialized constant Sprockets::Helpers", "url": "https://api.github.com/repos/rails/rails/issues/1341", "created_at": "2011-05-26 16:04:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243472", "text": "Looks like this is happening because of an inconsistant state between master and 3-1-stable. Particularly actionpack/lib/sprockets/helpers which doesn't exist in 3-1-stable. Still questionable if it is actually needed. \n", "created_at": "2011-05-26 16:25:28", "user": 35866, "id": 1243472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244050", "text": "This is actually only happening in rails 3-1-stable... \n", "created_at": "2011-05-26 17:48:51", "user": 35866, "id": 1244050}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After cloning the most recent merge, I get this error when I try to run anything inside my bundle\n\n```\n    ~/.rvm/gems/ruby-1.9.2-p180/gems/haml-3.1.1/lib/haml/util.rb:427:in `const_get': uninitialized constant ActionView::TemplateHandlers (NameError)\n```\n\nI haven't been able to track down the commit that broke this yet.\n", "labels": [], "number": 1342, "updated_at": "2011-05-26 17:04:50", "user": 568174, "closed_at": "2011-05-26 17:04:50", "id": 959713, "title": "Change to ActionView::TemplateHandlers breaks HAML", "url": "https://api.github.com/repos/rails/rails/issues/1342", "created_at": "2011-05-26 16:45:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243612", "text": "Do you reproduce this with 3.1.0.rc1 or master branch?\n", "created_at": "2011-05-26 16:47:29", "user": 160941, "id": 1243612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243630", "text": "This is with the master branch.\n", "created_at": "2011-05-26 16:49:32", "user": 568174, "id": 1243630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243729", "text": "TemplateHandlers was deprecated in past versions of Rails and was removed in Rails 3.2: https://github.com/rails/rails/commit/d182b6ee9c99901553e6e948f91102d03bb041b0\n\nYou must report it as bug in Haml issues tracker.\n", "created_at": "2011-05-26 17:02:59", "user": 160941, "id": 1243729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1243736", "text": "alright, will do. Thanks!\n", "created_at": "2011-05-26 17:04:49", "user": 568174, "id": 1243736}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "maybe not really considered a defect, as regular js should not be in the manifest file, \nmaybe a big WARNING in the comments that come with application.js is enough? but this caught me off guard\n\nmkdir app/assets/javascripts/issue\ntouch app/assets/javascripts/issue/script1.js.coffee\ntouch app/assets/javascripts/issue/script2.js.coffee\n\ncontents of each file \n`console.log \"I am script 1\"\nconsole.log \"I am script 2\"`\n\nworks fine with an application.js with the following content:\n`//= require_tree ./issue`\n\nrenders\n`(function() {\n  console.log(\"I am script 1\");\n}).call(this);\n(function() {\n  console.log(\"I am script 2\");\n}).call(this);`\n\nbut if changed like so (include any js before require)\n`console.log(\"before loading ./issue\");\n//= require_tree ./issue`\n\nrenders\n\n`console.log(\"before loading ./issue\");\n//= require_tree ./issue`\n\nand it will work correctly up until the point regular js is used\n\n`//= require ./issue/script1\nconsole.log(\"before loading ./issue/script2\");\n//= require ./issue/script2`\n\nrenders\n\n`(function() {\n  console.log(\"I am script 1\");\n}).call(this);\nconsole.log(\"before loading ./issue/script2\");\n//= require ./issue/script2`\n\nnote that the last line is rendered literally\n\nrails 3.1 rc1\nrvm ruby-1.9.2-p0\n", "labels": [], "number": 1343, "updated_at": "2011-07-22 16:20:12", "user": 52154, "closed_at": "2011-07-22 16:20:12", "id": 959714, "title": "asset manifest application.js stops loading requires if regular js included before require", "url": "https://api.github.com/repos/rails/rails/issues/1343", "created_at": "2011-05-26 16:45:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298868", "text": "Pretty sure that this is just how the parser works. There is a warning already\n\n>  It's not advisable to add code directly here, but if you do, it'll appear at the bottom ...\n\nNever the less, should be a sprockets ticket, not a rails one.\n", "created_at": "2011-06-03 19:27:02", "user": 185039, "id": 1298868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1632960", "text": "We don't parse past the first comment block to avoid unintentional directives.\n", "created_at": "2011-07-22 16:20:12", "user": 137, "id": 1632960}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It seems wrong that when I do the following:\n\n``` ruby\nUser.first.as_json(:only => :first_name, :include => :posts)\n```\n\nthat `:only => :first_name` will apply to to `:posts` as well.\n\nThe present behavior has been around essentially forever, and the current nuances of the behavior arrived in two phases, apparently initially to preserve backward compatibility when it became possible to [specify opts for includes](https://github.com/rails/rails/commit/3442e0c6714d766b9ea0ca2fc644fdf7753832aa#L0R1535) in the first place, and then when app developers got the ability to [override to_xml](https://github.com/rails/rails/commit/48052d70ec065a3a8d9e6e121cab5ae857f8da1a#L1R1870) on their models.\n\nAs far as I can tell it was just initially decided that passing the base's options along to the include is better than having the included model be serialized in an unconstrained way, but the remote likelihood that the same column names are likely to usefully exist on the two models makes me think that's worth reconsidering.\n\nThe current behavior isn't covered by tests, so I'm hoping nobody is intentionally relying on it.  That said, because this patch is less restrictive than the old approach, this could cause security issues for anybody who was relying on it unwittingly (included models without explicit options hashes would start dumping all attributes out over JSON and XML REST APIs instead of the seemingly random intersection of their column and method names with those from the base opts).  That may make this pull request a no go until AR (or really, AM) serialization has a mandatory security layer analogous to `attr_accessible` (mandatory may be far-fetched given the cool reception to mandatory `attr_accessible`, but I'd be in favor of it), or this behavior change comes with a configuration option that must be turned on consciously by an upgrading app maintainer in order to take effect.\n\nI'm working on a generic AM serialization security layer for a project (and this patch is a prerequisite for it, in fact -- otherwise it's challenging to keep opts on base from trickling down to included models).  If there's interest in pulling that into core, I'd be happy to clean it up and submit.  Especially if it would make this patch more palatable.\n\nThanks for considering.\n", "labels": [], "number": 1344, "updated_at": "2014-07-03 04:39:49", "user": 40619, "closed_at": "2011-05-26 18:21:21", "id": 959845, "title": "AR Serialization shouldn't fall back to base opts for includes", "url": "https://api.github.com/repos/rails/rails/issues/1344", "created_at": "2011-05-26 17:08:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Revert \"Renaming helper in the Rake task, but why is this needed in the first place? (paging JP)\"\n\nThis reverts commit 9701014b960e8679af8652c5cd0b413a0ad04f58.\n", "labels": [], "number": 1345, "updated_at": "2014-07-03 04:39:52", "user": 35866, "closed_at": "2011-05-28 22:34:02", "id": 960036, "title": "This doesn't yet exist in 3-1-stable leading to uninitialized constant Sprockets::Helpers", "url": "https://api.github.com/repos/rails/rails/issues/1345", "created_at": "2011-05-26 17:55:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1244252", "text": "/cc @wycats\n", "created_at": "2011-05-26 18:17:39", "user": 9582, "id": 1244252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255473", "text": "Rebasing 3-1-stable and will send another pull request\n", "created_at": "2011-05-28 22:34:02", "user": 35866, "id": 1255473}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Putting back test_file_from_xml for JDOM backend.\n\n/cc @tenderlove \n", "labels": [], "number": 1346, "updated_at": "2014-06-26 16:59:23", "user": 3948, "closed_at": "2011-05-27 18:52:54", "id": 960529, "title": "Jdom file from xml fix", "url": "https://api.github.com/repos/rails/rails/issues/1346", "created_at": "2011-05-26 19:22:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a Movie model with showtimes and theaters that looks like this:\n\nclass Movie < ActiveRecord::Base\nhas_many :showtimes \nhas_many :theaters, :through => :showtimes, :uniq=>true\n\nscope :with_showtimes_today, lambda {where('showtimes.showtime' => Time.now.midnight..(Time.now.midnight+26.hours))}\nend\n\nIf I do something like this, the SQL correctly generates the join statement:\n\nt=Theater.find(7114)\nt.movies.with_showtimes_today\n\nSELECT DISTINCT movies.\\* FROM movies INNER JOIN showtimes ON movies.id = showtimes.movie_id WHERE ((showtimes.theater_id = 7114)) AND (showtimes.showtime BETWEEN '2011-05-11 04:00:00' AND '2011-05-12 06:00:00')\n\nI believe that works because the Theater model has movies through showtimes like this:\n\nclass Theater < ActiveRecord::Base\nhas_many :showtimes \nhas_many :movies, :through=>:showtimes, :uniq=>true \nend\n\nHowever, if I just call\n\nMovie.with_showtimes_today\n\nI get this error:\n\nSELECT movies. FROM movies WHERE (showtimes.showtime BETWEEN '2011-05-11 04:00:00' AND '2011-05-12 06:00:00')\nMysql2::Error: Unknown column 'showtimes.showtime' in 'where clause': SELECT movies. FROM movies WHERE (showtimes.showtime BETWEEN '2011-05-11 04:00:00' AND '2011-05-12 06:00:00')\n\nBecause it's not doing the join. So if I change the scope to include a joins:\n\nscope :with_showtimes_today, lambda {joins(:showtimes).where('showtimes.showtime' => Time.now.midnight..(Time.now.midnight+26.hours))}\n\nMovie.with_showtimes_today works correctly and generates this SQL:\n\nSELECT movies.\\* FROM movies INNER JOIN showtimes ON showtimes.movie_id = movies.id WHERE (showtimes.showtime BETWEEN '2011-05-11 04:00:00' AND '2011-05-12 06:00:00')\n\nBut then the association through Theaters generates this insanely long-running query with 2 INNER JOINS:\n\nSELECT DISTINCT movies.\\* FROM movies INNER JOIN showtimes showtimes_movies ON showtimes_movies.movie_id = movies.id INNER JOIN showtimes ON movies.id = showtimes.movie_id WHERE ((showtimes.theater_id = 7114)) AND (showtimes.showtime BETWEEN '2011-05-11 04:00:00' AND '2011-05-12 06:00:00')\n\nEven if it's not a bug, it's definitely in need of some improvements along with scope documentation/guides being completely lacking (for example, it was not apparent in reading any of the documentation that I had to wrap my Time.now statements in lambda's or they would be set at class load)\n", "labels": [], "number": 1347, "updated_at": "2012-04-28 17:59:35", "user": 294487, "closed_at": "2012-04-28 17:59:35", "id": 961690, "title": "Scope joins with distinct only work through association and not on base model", "url": "https://api.github.com/repos/rails/rails/issues/1347", "created_at": "2011-05-26 22:52:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5323296", "text": "This seems like a tech support request more than an issue. I'd suggest this be closed.\n", "created_at": "2012-04-25 03:32:48", "user": 139443, "id": 5323296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398744", "text": "@jwkpiano1 correct. I'm closing this now. Thank you so much.\n", "created_at": "2012-04-28 17:59:35", "user": 47848, "id": 5398744}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using rails 3.1.0.rc1 and sprockets 2.0.0.beta.8, image_tag, stylesheet_link_tag, and javascript_include_tag (at least) generate paths of the form \"/assets/FILE\".  This is not correct when the application is running in a subdirectory.\n\nFor example, using Apache and Passenger, with RackBaseURI set to '/APPNAME', the URLs generated by the helpers should be prefixed by '/APPNAME' -- ie '/APPNAME/assets/FILE'.\n\nThis might be related to the TODO in actionpack/lib/action_controller/metal/compatibility.rb which specifies that SCRIPT_NAME should be handled properly.\n\nThis appears to be Rails-related, not Passenger-related.  Rails 3.0 applications work fine.\n", "labels": [], "number": 1348, "updated_at": "2011-07-02 17:31:59", "user": 722773, "closed_at": "2011-07-02 17:31:50", "id": 961765, "title": "Helpers generate wrong asset URL when running in subdirectory", "url": "https://api.github.com/repos/rails/rails/issues/1348", "created_at": "2011-05-26 23:12:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1257138", "text": "have run into this one as well.\n\nThe way I got around it for now was to specify the app name in the production.rb file\n  # Enable serving of images, stylesheets, and JavaScripts from an asset server\n  config.action_controller.asset_host = \"http://[domain]/[APPNAME]\"\n", "created_at": "2011-05-29 14:59:13", "user": 806458, "id": 1257138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1489974", "text": "This appears to have be fixed, so I'm closing this issue.\n", "created_at": "2011-07-02 17:31:59", "user": 722773, "id": 1489974}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have expected, allowed Null values in my database. When I try to do:\n\n```\n$ rails c\nLoading development environment (Rails 3.1.0.rc1)\nruby-1.9.2-p180 :001 > Recording.first.to_json\n  Recording Load (0.7ms)  SELECT \"recordings\".* FROM \"recordings\" LIMIT 1\n => \"{\\\"created_at\\\":\\\"2011-05-27T01:01:32Z\\\",\\\"end_date\\\":\\\"2011-05-27T00:57:59Z\\\",\\\"id\\\":5,\\\"keywords\\\":null,\\\"length\\\":60.0,\\\"maximum_amplitude\\\":-0.016022,\\\"maximum_delta\\\":0.01712,\\\"mean_amplitude\\\":-0.028989,\\\"mean_delta\\\":0.00945,\\\"mean_norm\\\":0.028989,\\\"midline_amplitude\\\":-0.028244,\\\"minimum_amplitude\\\":-0.040466,\\\"minimum_delta\\\":0.0,\\\"name\\\":\\\"20110527_Fri_01-56-59\\\",\\\"ogg_file\\\":null,\\\"ogg_size\\\":598136.0,\\\"png_url\\\":\\\"http://192.168.0.1:81/car_project/ogg/20110527_Fri/png/20110527_Fri_01-56-59.ogg.png\\\",\\\"rms_amplitude\\\":0.029391,\\\"rms_delta\\\":0.009525,\\\"rough_frequency\\\":2274.0,\\\"samples\\\":5292000.0,\\\"scaled_by\\\":2147483647.0,\\\"spx_size\\\":77624.0,\\\"start_date\\\":\\\"2011-05-27T00:56:59Z\\\",\\\"updated_at\\\":\\\"2011-05-27T01:01:32Z\\\",\\\"volume_adjustment\\\":24.712,\\\"waveform\\\":{\\\"url\\\":null}}\"\n```\n\nThat works just fine. However if I try to do the same with xml, I get:\n\n```\n>   Recording.first.to_xml\n  Recording Load (0.5ms)  SELECT \"recordings\".* FROM \"recordings\" LIMIT 1\nTypeError: can't convert nil into String\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:51:in `block in method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:44:in `each'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:44:in `method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:34:in `tag!'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activesupport-3.1.0.rc1/lib/active_support/xml_mini.rb:125:in `to_tag'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activemodel-3.1.0.rc1/lib/active_model/serializers/xml.rb:118:in `block in add_attributes_and_methods'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activemodel-3.1.0.rc1/lib/active_model/serializers/xml.rb:116:in `each'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activemodel-3.1.0.rc1/lib/active_model/serializers/xml.rb:116:in `add_attributes_and_methods'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activemodel-3.1.0.rc1/lib/active_model/serializers/xml.rb:103:in `block in serialize'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:155:in `call'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:155:in `_nested_structures'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:63:in `method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:34:in `tag!'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activemodel-3.1.0.rc1/lib/active_model/serializers/xml.rb:102:in `serialize'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/activerecord-3.1.0.rc1/lib/active_record/serializers/xml_serializer.rb:175:in `to_xml'\n        from (irb):4\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:44:in `start'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands/console.rb:8:in `start'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/railties-3.1.0.rc1/lib/rails/commands.rb:40:in `<top (required)>'\n        from script/rails:6:in `require'\n        from script/rails:6:in `<main>'ruby-1.9.2-p180 :005 > \n```\n\nThis also breaks when I have in my controller:\n\n```\n    respond_to do |format|\n      format.html # show.html.erb\n      format.json { render json: @recording }\n      format.xml { render xml: @recording }\n    end\n```\n\nIn my controller, if the user requests /recordings.json - fine, however if they request /recordings.xml - they get a 500 error :(\n\nAny way to get to_xml to correctly deal with Nil values in my database records?\n", "labels": [], "number": 1349, "updated_at": "2011-05-27 07:36:31", "user": 578881, "closed_at": "2011-05-27 07:36:31", "id": 962124, "title": ".to_xml broken with CarrierWave - \"TypeError: can't convert nil into String\"", "url": "https://api.github.com/repos/rails/rails/issues/1349", "created_at": "2011-05-27 01:24:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246666", "text": "I think it is worth noting that this is specific to 1.9. I just ran into it as well when converting from REE and it wasn't an issue. This looks to be an issue with Builder though, and not so much the to_xml method itself.\n", "created_at": "2011-05-27 01:42:15", "user": 270831, "id": 1246666}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246779", "text": "Incorrectness retracted\n\n```\nirb(main):001:0> RUBY_VERSION\n=> \"1.8.7\"\nirb(main):002:0> Rails.version\n=> \"3.1.0.beta1\"\nirb(main):003:0> nil.to_xml\nNoMethodError: You have a nil object when you didn't expect it!\nYou might have expected an instance of ActiveRecord::Base.\n```\n", "created_at": "2011-05-27 02:18:15", "user": 371940, "id": 1246779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246916", "text": "@TheEmpty nil object doesn't have to_xml but when is an attribute of an model instance is converted successfully:\n\n```\nruby-1.9.2-p180 :011 >   User.first.to_xml\nUser Load (0.2ms)  SELECT \"users\".* FROM \"users\" LIMIT 1\n=> \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<user>\\n  <first-name>Guillermo</first-name>\\n  <last-name>Iguaran Suarez</last-name>\\n  <due type=\\\"integer\\\" nil=\\\"true\\\"></due>\\n</user>\\n\" \n```\n\ntake a look to nil value in 'due' attribute, it's converted to: \n\n```\n<due type=\\\"integer\\\" nil=\\\"true\\\"></due>\n```\n\nIt also works with Hashes:\n\n```\nruby-1.9.2-p180 :024 > {key: nil}.to_xml\n=> \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<hash>\\n  <key nil=\\\"true\\\"></key>\\n</hash>\\n\"\n```\n", "created_at": "2011-05-27 03:03:13", "user": 160941, "id": 1246916}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246984", "text": "I would consider thinking twice about an API like this. In rails you can render header only responses by using head. For example in your case I'd think that if the resource is not found you could use:\n\n```\nhead :not_found\n```\n\ninstead of returning a 200 with an empty body.\n", "created_at": "2011-05-27 03:28:42", "user": 2197, "id": 1246984}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247002", "text": "@jonnii not a pratical example, just an example. Not to mention that I misunderstood the issue. \n", "created_at": "2011-05-27 03:36:19", "user": 371940, "id": 1247002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247483", "text": "@guilleiguaran maybe this is a database specific issue then? - Notice I'm not getting a Nil returned, I'm getting a record with loads of values - some of the values may be Nil some times - so I'm getting completely different behaviour to what you are getting (I'm using Postgresql).\n\nNotice along side all the key/value pairs, I have keywords: nil, ogg_file: nil, waveform: nil which are causing the problem when they really shouldn't be :( - \n\n```\nruby-1.9.2-p180 :004 >   r = Recording.first\n  Recording Load (0.5ms)  SELECT \"recordings\".* FROM \"recordings\" LIMIT 1\n => #<Recording id: 6, name: \"20110527_Fri_08-08-33\", created_at: \"2011-05-27 07:11:52\", updated_at: \"2011-05-27 07:11:52\", spx_size: 84327.0, ogg_size: 624970.0, samples: 5292000.0, length: 60.0, scaled_by: 2147483647.0, maximum_amplitude: 0.334076, minimum_amplitude: -0.472839, midline_amplitude: -0.069382, mean_norm: 0.048891, mean_amplitude: -0.028322, rms_amplitude: 0.062973, maximum_delta: 0.605255, minimum_delta: 0.0, mean_delta: 0.063686, rms_delta: 0.083394, rough_frequency: 9294.0, volume_adjustment: 2.115, png_url: \"http://192.168.0.1:81/car_project/ogg/20110527_Fri/...\", keywords: nil, start_date: \"2011-05-27 07:08:33\", end_date: \"2011-05-27 07:09:33\", ogg_file: nil, waveform: nil> \nruby-1.9.2-p180 :005 > r.to_json\n => \"{\\\"created_at\\\":\\\"2011-05-27T07:11:52Z\\\",\\\"end_date\\\":\\\"2011-05-27T07:09:33Z\\\",\\\"id\\\":6,\\\"keywords\\\":null,\\\"length\\\":60.0,\\\"maximum_amplitude\\\":0.334076,\\\"maximum_delta\\\":0.605255,\\\"mean_amplitude\\\":-0.028322,\\\"mean_delta\\\":0.063686,\\\"mean_norm\\\":0.048891,\\\"midline_amplitude\\\":-0.069382,\\\"minimum_amplitude\\\":-0.472839,\\\"minimum_delta\\\":0.0,\\\"name\\\":\\\"20110527_Fri_08-08-33\\\",\\\"ogg_file\\\":null,\\\"ogg_size\\\":624970.0,\\\"png_url\\\":\\\"http://192.168.0.1:81/car_project/ogg/20110527_Fri/png/20110527_Fri_08-08-33.ogg.png\\\",\\\"rms_amplitude\\\":0.062973,\\\"rms_delta\\\":0.083394,\\\"rough_frequency\\\":9294.0,\\\"samples\\\":5292000.0,\\\"scaled_by\\\":2147483647.0,\\\"spx_size\\\":84327.0,\\\"start_date\\\":\\\"2011-05-27T07:08:33Z\\\",\\\"updated_at\\\":\\\"2011-05-27T07:11:52Z\\\",\\\"volume_adjustment\\\":2.115,\\\"waveform\\\":{\\\"url\\\":null}}\" \nruby-1.9.2-p180 :006 > r.to_xml\nTypeError: can't convert nil into String\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:51:in `block in method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:44:in `each'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:44:in `method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:34:in `tag!'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activesupport/lib/active_support/xml_mini.rb:125:in `to_tag'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activemodel/lib/active_model/serializers/xml.rb:118:in `block in add_attributes_and_methods'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activemodel/lib/active_model/serializers/xml.rb:116:in `each'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activemodel/lib/active_model/serializers/xml.rb:116:in `add_attributes_and_methods'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activemodel/lib/active_model/serializers/xml.rb:103:in `block in serialize'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:155:in `call'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:155:in `_nested_structures'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:63:in `method_missing'\n        from /usr/local/rvm/gems/ruby-1.9.2-p180/gems/builder-3.0.0/lib/builder/xmlbase.rb:34:in `tag!'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activemodel/lib/active_model/serializers/xml.rb:102:in `serialize'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/activerecord/lib/active_record/serializers/xml_serializer.rb:175:in `to_xml'\n        from (irb):6\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/railties/lib/rails/commands/console.rb:45:in `start'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/railties/lib/rails/commands/console.rb:8:in `start'\n        from /home/xanview2/.bundler/ruby/1.9.1/rails-d1c74706c35b/railties/lib/rails/commands.rb:44:in `<top (required)>'\n        from script/rails:6:in `require'\n        from script/rails:6:in `<main>'ruby-1.9.2-p180 :007 > \n```\n", "created_at": "2011-05-27 06:42:35", "user": 578881, "id": 1247483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247675", "text": "OK, I think the issue isn't with Rails, it is with CarrierWave - as soon as I uncomment the mount uploader line in my models file, the issue goes away. Opened an issue with CarrierWave: https://github.com/jnicklas/carrierwave/issues/337\n", "created_at": "2011-05-27 07:36:31", "user": 578881, "id": 1247675}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've been using the ancestry gem but I ran into an issue a little while ago.  I created a ticket over there but haven't been able to think of a particularly good solution yet:\n\nhttps://github.com/stefankroes/ancestry/issues/44\n\nThe ticket has all the info, but the basic idea is that in callbacks (and apparently validations) you get a scope applied to you.\n\nI can imagine one might want the scope applied to callbacks/validations, but can't immediately think of a case.\n\nI've been poking through the ActiveRecord source to see if there's way to undo a part of the scope or somehow mark a part of the scope to be undone in certain situations.  I don't know how much I like that idea, but just unscoping everything isn't desirable either.  Thoughts?\n", "labels": [], "number": 1350, "updated_at": "2011-05-27 12:45:32", "user": 301415, "closed_at": "2011-05-27 06:14:10", "id": 962311, "title": "Scoping affects callbacks unfavorably", "url": "https://api.github.com/repos/rails/rails/issues/1350", "created_at": "2011-05-27 02:33:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247412", "text": "I think you're looking for [only](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/spawn_methods.rb#L98) and [except](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/spawn_methods.rb#L73). You also have [unscoped](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb#L931) if you want to remove everything.\n", "created_at": "2011-05-27 06:14:10", "user": 6321, "id": 1247412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248845", "text": "Thanks ;)  I saw only and except but I wasn't sure that they were the solution to the problem.  I've gone with except for the time being since I can't think of a good example where it wouldn't work.\n", "created_at": "2011-05-27 12:45:32", "user": 301415, "id": 1248845}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Need to apply these to work with rake 0.9.0 \n", "labels": [], "number": 1351, "updated_at": "2014-07-03 04:40:07", "user": 3948, "closed_at": "2011-05-27 12:33:26", "id": 962382, "title": "3 0 stable jruby jdom fixes", "url": "https://api.github.com/repos/rails/rails/issues/1351", "created_at": "2011-05-27 03:00:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248770", "text": "@josevalim can we merge it. These changes because of rake 0.9.0\n\nit's already in master\n\nhttps://github.com/rails/rails/commit/ae323a51f1dcf5529f34927cb91693a993416b07\n\nhttps://github.com/rails/rails/commit/68d5abeaffd1006b59d0a5dcee666e168d1c4c78\n", "created_at": "2011-05-27 12:24:33", "user": 3948, "id": 1248770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248797", "text": "Is it in 3.1 stable as well?\n", "created_at": "2011-05-27 12:34:01", "user": 9582, "id": 1248797}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248967", "text": "Nope. Should i cheery-pick and create a pull request?\n", "created_at": "2011-05-27 13:13:56", "user": 3948, "id": 1248967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249819", "text": "Probably. If it is on master and 3-0-stable, I would assume it should\nbe on 3-1-stable as well.\n\n## \n\n*\nJosé Valim\nwww.plataformatec.com.br\nFounder and Lead Developer\n*\n", "created_at": "2011-05-27 15:56:58", "user": 9582, "id": 1249819}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Refactor inclusion and exclusion validators to inherit from base class. Removes duplicate code.\n", "labels": [], "number": 1352, "updated_at": "2014-06-17 09:01:16", "user": 4067, "closed_at": "2012-03-28 22:13:30", "id": 962410, "title": "Refactor InclusionValidator/ExclusionValidator to remove duplicate code.", "url": "https://api.github.com/repos/rails/rails/issues/1352", "created_at": "2011-05-27 03:09:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247342", "text": "Looks good, but is \"clusivity\" a valid name? Maybe we should find something better?\n", "created_at": "2011-05-27 05:49:04", "user": 9582, "id": 1247342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248987", "text": "http://tinyurl.com/3lgprec :) :)\n", "created_at": "2011-05-27 13:17:43", "user": 3829, "id": 1248987}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249423", "text": "Today I learnt a new word. +1\n", "created_at": "2011-05-27 14:43:41", "user": 2197, "id": 1249423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249807", "text": "It is almost good to go then. We just need to make both inclusion and exclusion validators require the clusivity one!\n", "created_at": "2011-05-27 15:55:13", "user": 9582, "id": 1249807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252052", "text": "Mighty tickled about learning the existence of the word \"clusivity\". \n", "created_at": "2011-05-27 22:12:15", "user": 762, "id": 1252052}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514596", "text": "Can we squash all the commits in just one?, thanks\n", "created_at": "2011-07-06 19:40:40", "user": 52642, "id": 1514596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1523576", "text": "Done.\n", "created_at": "2011-07-07 15:31:20", "user": 4067, "id": 1523576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1526119", "text": "James, does it need some code to check if it's 1.8 or 1.9 to determine whether to use cover? or not as well?\n", "created_at": "2011-07-07 20:45:22", "user": 3829, "id": 1526119}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1526185", "text": "IIRC Active suppor now backports cover? on 1.8\n", "created_at": "2011-07-07 20:52:31", "user": 5927, "id": 1526185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546586", "text": "Urgh. The pull request cannot be merged to master now. Do you mind rebased your commit against master and force-push it to your branch again? Thank you.\n", "created_at": "2011-07-11 13:54:27", "user": 4912, "id": 1546586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2789116", "text": "@josevalim this can be merged?\n", "created_at": "2011-11-18 13:40:35", "user": 146214, "id": 2789116}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When dealing with application.css, I'm getting an overlap. This is what my file looks like:\n\n```\n/*\n * This is a manifest file that'll automatically include all the stylesheets available in this directory\n * and any sub-directories. You're free to add application-wide styles to this file and they'll appear at\n * the top of the compiled file, but it's generally better to create a new file per style scope.\n *= require_self\n *= require reset\n *= require general\n *= require_tree . \n*/\n```\n\nand it adds the reset and general file twice. Ideally, Rails would look at which files have already been required and would ignore those files when doing *= require_tree .\n", "labels": [], "number": 1353, "updated_at": "2011-07-06 20:54:44", "user": 10756, "closed_at": "2011-07-06 20:54:44", "id": 962413, "title": "Application.css needs a way to specify order", "url": "https://api.github.com/repos/rails/rails/issues/1353", "created_at": "2011-05-27 03:10:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1246973", "text": "This should be reported in sprockets, the rails tie that handles this cc @josh\n", "created_at": "2011-05-27 03:24:22", "user": 371940, "id": 1246973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247488", "text": "Gotcha. I added it as an issue on there as well: https://github.com/sstephenson/sprockets/issues/65\n", "created_at": "2011-05-27 06:43:35", "user": 10756, "id": 1247488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515203", "text": "This is a sprockets issue, not belonging to rails and it correctly exists there. It could be closed - cc @spastorino\n", "created_at": "2011-07-06 20:47:05", "user": 9347, "id": 1515203}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed issue#1284\n", "labels": [], "number": 1354, "updated_at": "2014-07-03 04:40:21", "user": 278, "closed_at": "2011-05-27 08:29:53", "id": 963048, "title": "Adds rake task to cleanup compiled assets", "url": "https://api.github.com/repos/rails/rails/issues/1354", "created_at": "2011-05-27 07:32:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247655", "text": "/cc @josevalim \n", "created_at": "2011-05-27 07:32:57", "user": 278, "id": 1247655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247783", "text": "We should probably require \"fileutils\" before using it. /cc @dhh\n", "created_at": "2011-05-27 08:01:29", "user": 9582, "id": 1247783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247839", "text": "Nope, from railties/application.rb\n\nrequire 'fileutils'\n", "created_at": "2011-05-27 08:17:21", "user": 278, "id": 1247839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247864", "text": "But in general it is a good practice to require it nonetheless. This rake file could eventually be required outside of an application or an application may not need fileutils later, leading to breakages.\n", "created_at": "2011-05-27 08:25:21", "user": 9582, "id": 1247864}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "updated with requiring fileutils before attempting to use it.\n", "labels": [], "number": 1355, "updated_at": "2014-06-14 05:35:40", "user": 278, "closed_at": "2011-05-30 13:47:01", "id": 963256, "title": "Adds rake task to cleanup compiled assets", "url": "https://api.github.com/repos/rails/rails/issues/1355", "created_at": "2011-05-27 08:32:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247899", "text": "/cc @josevalim \n", "created_at": "2011-05-27 08:34:01", "user": 278, "id": 1247899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247942", "text": "/cc @dhh and /cc @josh\n", "created_at": "2011-05-27 08:41:20", "user": 9582, "id": 1247942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1247949", "text": "Shouldn't the globbed filespec match that which spockets uses?\n\ni.e. Line 54 in Sprockets::StaticCompilation\n\npattern = /^#{Regexp.escape(asset_pathname.basename_without_extensions.to_s)}\n                     -([0-9a-f]{7,40})\n                     #{Regexp.escape(asset_pathname.extensions.join)}$/x \n\nrm_ing everything might not be what some people expect.\n", "created_at": "2011-05-27 08:43:13", "user": 30732, "id": 1247949}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248971", "text": "Cool, but I'd suggest following rake conventions here. Call it `assets:clean` and make use of `Rake::FileList` instead of dir globbing.\n", "created_at": "2011-05-27 13:15:04", "user": 137, "id": 1248971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256830", "text": " done!  /cc @josh\n", "created_at": "2011-05-29 12:09:58", "user": 111473, "id": 1256830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1260424", "text": "refectored!! /cc @josh\n", "created_at": "2011-05-30 08:15:01", "user": 111473, "id": 1260424}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1409720", "text": "We need tests for this. Could someone please provide some tests? Otherwise I will have to revert it.\n", "created_at": "2011-06-21 12:01:00", "user": 9582, "id": 1409720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1409740", "text": "@josevalim I will provide test case and other refactoring soon. /cc  @josevalim\n", "created_at": "2011-06-21 12:05:55", "user": 111473, "id": 1409740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1410752", "text": "@vatrai how were you thinking of testing it? I had considered moving the cleanup into a method on `Rails.application.assets` (which is actually a `Sprockets::Environment` object), but that means monkey-patching Sprockets from within Rails.\n", "created_at": "2011-06-21 14:39:11", "user": 2406, "id": 1410752}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1410776", "text": "Tests can be added here:\n\nhttps://github.com/rails/rails/blob/master/railties/test/application/assets_test.rb\n\nThere are examples of invoking the rake tasks in the same test case.\n", "created_at": "2011-06-21 14:41:39", "user": 9582, "id": 1410776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1410795", "text": "Thanks, @josevalim! I'll get that done this morning and submit another pull request.\n", "created_at": "2011-06-21 14:43:31", "user": 2406, "id": 1410795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1411836", "text": "I added some tests on [my pull request](https://github.com/rails/rails/pull/1793).\n", "created_at": "2011-06-21 16:54:55", "user": 2406, "id": 1411836}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1411948", "text": "thanks!! @jamesarosen\n", "created_at": "2011-06-21 17:11:14", "user": 111473, "id": 1411948}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've moved _load_generator_ from _Rails::Application_ to _Rails::Engine_ in order to provide generators for Rails engines (fixes #1259).\n\nI've introduced _rails/engine/commands_ that provides engine specific commands.\nFurthermore, I've done some small cleanups and improvements.\n\nRegards\n", "labels": [], "number": 1356, "updated_at": "2014-06-20 19:45:58", "user": 128683, "closed_at": "2011-06-09 07:01:10", "id": 963949, "title": "Fix engine's generator", "url": "https://api.github.com/repos/rails/rails/issues/1356", "created_at": "2011-05-27 11:06:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248518", "text": "This looks good. However, I don't think we should always generate an engine file. I think that should happen only with the full option. What we could (and need to) do is to generate script/rails on rails plugin new only if the engine is full, so we can guarantee we won't have issues. Also, I think we can tidy up rails/commands/application after those commits. Finally, don't forget to add the destroy command as well (the inverse of generate).\n", "created_at": "2011-05-27 11:13:48", "user": 9582, "id": 1248518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248520", "text": "Summoning @drogus to join the discussion!\n", "created_at": "2011-05-27 11:14:16", "user": 9582, "id": 1248520}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248535", "text": "Yes, I was struggling if we should always generate an engine file or not. IMHO we should, because then generators will be available in every engine, whether it's full or not.\nIf you don't agree with this, I'm fine with reverting/removing the concerning commit.\n", "created_at": "2011-05-27 11:19:49", "user": 128683, "id": 1248535}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248543", "text": "@flippingbits The thing is that generator can also create bare rails plugin or railtie. I think that we should generate it for options that generate engine. Otherwise it will break as @josevalim mentioned.\n\nThe other option would be to alway generate it, but add nice warning if there is no engine when you try to run it and also add option to be able to skip it. But the first option seems much simpler.\n", "created_at": "2011-05-27 11:23:29", "user": 5004, "id": 1248543}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248556", "text": "@flippingbits plugin new is also used to generate simpler plugins, that for example, just extend ActiveRecord without an app directory in the first place. In such cases, generators (or any of the command line options) are not really needed.\n", "created_at": "2011-05-27 11:26:29", "user": 9582, "id": 1248556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248562", "text": "That's fine for me. So, I'll add the engine and _script/rails_ only if _--full_ is given.\n", "created_at": "2011-05-27 11:27:27", "user": 128683, "id": 1248562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248568", "text": "@flippingbits I thought this was the original behavior in the first place. :) @drogus, can you remember why we were shipping with script/rails for everything? Was it intentional?\n", "created_at": "2011-05-27 11:29:11", "user": 9582, "id": 1248568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248631", "text": "@josevalim @drogus IMHO, _script/rails_ is only needed by full engines.\nWith the last commit, only full engines will get a _script/rails_ file and therefore access to Rails generators.\n", "created_at": "2011-05-27 11:46:12", "user": 128683, "id": 1248631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248664", "text": "@flippingbits agreed. I am just wondering if there is a reason for that to not be happening now in the first place. Those commits look good. If @drogus agree with me, could you also add support to \"script/rails destroy\" so we can finally merge it?\n", "created_at": "2011-05-27 11:54:09", "user": 9582, "id": 1248664}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1248669", "text": "_script/rails destroy_ has been added 3 minutes ago :)\n", "created_at": "2011-05-27 11:55:02", "user": 128683, "id": 1248669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254504", "text": "Do you think we can get this merged into _3-1-stable_ and therefore into the 3.1.0 release? IMHO it's a must-have.\nBTW, if you have any desire for corrections, I'm happy to help :)\n", "created_at": "2011-05-28 16:47:46", "user": 128683, "id": 1254504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255040", "text": "We should not merge on 3-1-stable. @drogus, is this good for master?\n\n## \n\n*\nJosé Valim\nwww.plataformatec.com.br\nFounder and Lead Developer\n*\n", "created_at": "2011-05-28 19:47:15", "user": 9582, "id": 1255040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266182", "text": "Sorry for delayed answer. This is overally ok, but from my quick tests, it breaks generators from isolated engines. Try adding:\n\n``` ruby\nmodule Blog\n  class Engine < ::Rails::Engine\n    isolate_namespace Blog\n  end\nend\n```\n\nand running `rails g scaffold post title:string body:text`. Ideally it should generate Blog::Post model, unless you provide `--skip-namespace`.\n", "created_at": "2011-05-31 10:46:57", "user": 5004, "id": 1266182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266263", "text": "There is also another problem. In engine with dummy app, there are some rake tasks that should work with integration wit dummy path (like db tasks). This was added to allow people develop engines similarly to applications, so you can do something like that: \n\n``` shell\nrails g scaffold post title:string body:text\nrake db:migrate # runs migrations for dummy app + engine, so you can test it properly\n```\n\nUnfortunately this was not tested properly, but there should be such tests, at least for simplest cases (like rake db:migrate).\n\nAlso, namespaced generators does not work because of a hack that I used to not rewrite the entire generators system ;)\nhttps://github.com/rails/rails/blob/master/railties/lib/rails/generators/named_base.rb#L65\n", "created_at": "2011-05-31 11:05:41", "user": 5004, "id": 1266263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266271", "text": "@flippingbits if you want to tackle those missing parts, please let me know and I will guide you. If not, I will try to find some time in the next weeks to tidy this up.\n", "created_at": "2011-05-31 11:07:25", "user": 9582, "id": 1266271}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266519", "text": "@drogus Thanks for your feedback!\n\n@josevalim I'd love to do the missing tasks. Where can we talk?\n", "created_at": "2011-05-31 12:05:18", "user": 128683, "id": 1266519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1306642", "text": "It appears to me that when I generate a controller using @flippingbits branch of Rails it still isn't namespaced. Perhaps I am doing it wrong? Is there an easier way I can confirm this?\n\n```\n$ rails g controller topics\ncreate  app/controllers/topics_controller.rb\ninvoke  erb\ncreate    app/views/topics\ninvoke  test_unit\ncreate    test/functional/topics_controller_test.rb\ninvoke  helper\ncreate    app/helpers/topics_helper.rb\ninvoke    test_unit\ncreate      test/unit/helpers/topics_helper_test.rb\ninvoke  assets\ncreate    app/assets/javascripts/topics.js\ninvoke    css\ncreate      app/assets/stylesheets/topics.css\n```\n", "created_at": "2011-06-06 01:24:36", "user": 2687, "id": 1306642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1306679", "text": "Ah, I just saw drogus's reply earlier. Apparently it's still broken. \n", "created_at": "2011-06-06 01:34:16", "user": 2687, "id": 1306679}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307314", "text": ":) Yes, it's still broken. I'm working on it!\n", "created_at": "2011-06-06 05:57:47", "user": 128683, "id": 1307314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307321", "text": "Anything I can do to help / speed this up other than kidnapping you?\n", "created_at": "2011-06-06 05:59:39", "user": 2687, "id": 1307321}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307362", "text": "I'm currently working on improving the general test suite regarding engine's generators and rake tasks.\nWe can talk in Jabber, if you want to?\n", "created_at": "2011-06-06 06:19:13", "user": 128683, "id": 1307362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307547", "text": "Stefan and I have talked on Jabber about this and I have come up with a starting point for this: https://github.com/radar/rails/blob/master/railties/test/engine/generators_test.rb. I don't know much about the practices of testing in Rails and so I have just gone with the \"whatever works\" development pattern. \n\nI strongly believe that Rails 3.1 should not be released until this issue is completely solved. If you have a precise reason why you would rather release it with something as critical as generators within an engine still being broken, let me know. I am curious.\n", "created_at": "2011-06-06 07:27:41", "user": 2687, "id": 1307547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307567", "text": "@radar Are you sure this issue also exists on Rails 3.1? For me it was happening just on master. If that is the case, I will happily apply that previous patch from you. Do you still have it around?\n", "created_at": "2011-06-06 07:33:25", "user": 9582, "id": 1307567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312928", "text": "@flippingbits: When you will be fixing it, you can take a look at tests that @radar did to reproduce this: #1483 (unless you already have that cases added as we discussed)\n", "created_at": "2011-06-07 00:45:39", "user": 5004, "id": 1312928}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313890", "text": "I'll do. My current solution is pretty similar to radar's, so I'll take his as base.\n", "created_at": "2011-06-07 06:22:25", "user": 128683, "id": 1313890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314063", "text": "I've added a sneak preview, more tests are coming :)\n", "created_at": "2011-06-07 07:18:22", "user": 128683, "id": 1314063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314090", "text": "It looks good! Just one small suggestion: maybe we could use most of the contents in https://github.com/rails/rails/blob/master/railties/test/isolation/abstract_unit.rb instead of doing everything manually in test/engine/generators_test.rb? Also, feel free to place the generators tests inside test/railties/generators_test.rb. We usually place everything engine related inside test/railties. :)\n", "created_at": "2011-06-07 07:26:55", "user": 9582, "id": 1314090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314099", "text": "@josevalim requiring https://github.com/rails/rails/blob/master/railties/test/isolation/abstract_unit.rb creates always a new Rails application. IMHO, we don't need this behavior for testing generators.\n", "created_at": "2011-06-07 07:29:27", "user": 128683, "id": 1314099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314103", "text": "Yeah, but you could something like this:\n\nRAILS_ISOLATION_COMMAND = \"engine\"\nrequire \"isolation/abstract_unit\"\n\nAnd then, the isolation file could check for RAILS_ISOLATION_COMMAND and generate things accordingly. I know using constants as signal is bad, but at least we would be able to re-use the existing structure. Wdyt?\n", "created_at": "2011-06-07 07:31:53", "user": 9582, "id": 1314103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314127", "text": "Yes, this might be a solution, I'll push it later.\nDo you think that we need to test anything else regarding generators or can we continue with testing rake tasks?\n", "created_at": "2011-06-07 07:37:28", "user": 128683, "id": 1314127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314152", "text": "Don't worry about adding a complete suite. Just add a regression for the case you are fixing right now and we are done. :)\n", "created_at": "2011-06-07 07:41:22", "user": 9582, "id": 1314152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315546", "text": "I've fixed other tests from the railties test suite.\n\nBTW, Rails definitely needs CI :)\n", "created_at": "2011-06-07 13:02:50", "user": 128683, "id": 1315546}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331062", "text": "It has a CI, just not many people know about it: http://ci.rubyonrails.org/\n", "created_at": "2011-06-09 00:20:40", "user": 2687, "id": 1331062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332211", "text": "@flippingbits is this ready to merge? :D\n", "created_at": "2011-06-09 06:33:07", "user": 9582, "id": 1332211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332294", "text": "I think so :)\n", "created_at": "2011-06-09 06:58:26", "user": 128683, "id": 1332294}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there,\n\nI have a strange error with feeds generation like atom or rss xml after an upgrade to rails 3.1.0.rc1 :\n\n```\nActionView::Template::Error (wrong number of arguments (1 for 0)):\n    1: atom_feed do |feed|\n    2:   feed.title(\"website name\")\n    3:  \n    4:   for post in @posts\n  app/views/posts/index.atom.builder:1:in `_app_views_posts_index_atom_builder___1517323884_2197592720'\n  app/controllers/posts_controller.rb:31:in `index'\n  app/controllers/posts_controller.rb:21:in `index'\n```\n\nI have a basic respond_to in my controller which looks like this :\n\n``` ruby\nformat.atom do\n  @posts = Post.published\nend\n```\n\nThe code in my index.atom.builder file works with rails 3.0.7.\n\nAny idea ?\n\nThx\n\nRegards\n", "labels": [], "number": 1357, "updated_at": "2011-12-07 11:28:59", "user": 82464, "closed_at": "2011-10-10 17:51:30", "id": 964274, "title": "atom_feed wrong number of arguments (1 for 0) rails 3.1.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1357", "created_at": "2011-05-27 12:40:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249041", "text": "Can you post the entire `index.atom.builder` file, that would be very helpful.\n", "created_at": "2011-05-27 13:29:10", "user": 435815, "id": 1249041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249064", "text": "Yes, it is :\n\n``` ruby\natom_feed do |feed|\n  feed.title(\"website name\")\n\n  for post in @posts\n    feed.entry(post) do |entry|\n      entry.title(post.title)\n      entry.content(RedCloth.new(post.content).to_html, :type => 'html')\n      entry.updated(post.updated_at.to_s)\n      entry.author do |author|\n        author.name(\"author\")\n      end\n    end\n  end\nend\n```\n", "created_at": "2011-05-27 13:32:22", "user": 82464, "id": 1249064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1249118", "text": "Nothing seems to be wrong in there, could you please paste the full trace so that we can see where is the error being raised?\n\nClick on \"Full Application Trace\", copy the large number of lines in a Gist preferably and link\n", "created_at": "2011-05-27 13:45:05", "user": 435815, "id": 1249118}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1410504", "text": "Have a similiar problem ... I used\n\n```\nfeed.link(:rel =>'license', :href => 'http://creativecommons.org/licenses/by-nc/3.0/')\n```\n\nand it worked earlier, now (Rails 3.0.9) it gives \"wrong number of arguments (1 for 2)\" in this line. However, it works with a clean new Rails project so I really don't know what's wrong. Tried with an empty new controller, but same error... maybe a plugin problem.\n\nFull trace: https://gist.github.com/1037930\n", "created_at": "2011-06-21 14:06:56", "user": 156167, "id": 1410504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1937329", "text": "Same issue, Rails 3.0.9.\n\nFound this: http://stackoverflow.com/questions/5954198/is-rails-3-1-edge-breaking-xmlmarkupbuilder\n\nI can't believe that this is not reproduced in lots and lots of setups..\n", "created_at": "2011-08-29 23:08:48", "user": 4277, "id": 1937329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1937434", "text": "Okay, got this fixed after I rewrote default_url_options in my app. Disregard that.\n", "created_at": "2011-08-29 23:28:43", "user": 4277, "id": 1937434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2350137", "text": "I'm closing this. Reopen if reproducible in 3.1.x.\n", "created_at": "2011-10-10 17:51:29", "user": 146214, "id": 2350137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2815974", "text": "I seem to have the exact same problem with Rails 3.1.x\n\nMy builder file:\n\n``` ruby\natom_feed :language => 'en-US' do |feed|\n  feed.title @title\n  feed.updated @updated\n  @posts_feed.each do |item|\n    next if item.updated_at.blank?\n    feed.entry( item ) do |entry|\n      entry.url news_item_url(item)\n      entry.title item.title\n      entry.content item.content, :type => 'html'\n      entry.updated(item.published_at.strftime('%Y-%m-%dT%H:%M:%SZ')) \n    end\n  end\nend\n```\n\nHere is the full app trace:\n\n``` bash\nbuilder (3.0.0) lib/builder/xmlbase.rb:135:in `to_xs'\nbuilder (3.0.0) lib/builder/xmlbase.rb:135:in `_escape'\nbuilder (3.0.0) lib/builder/xmlbase.rb:140:in `_escape_quote'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:320:in `_attr_value'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:308:in `_insert_attributes'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:306:in `each'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:306:in `_insert_attributes'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:284:in `_special'\nbuilder (3.0.0) lib/builder/xmlmarkup.rb:250:in `instruct!'\nactionpack (3.1.1) lib/action_view/helpers/atom_feed_helper.rb:104:in `atom_feed'\napp/views/posts/feed.atom.builder:1:in `_app_views_posts_feed_atom_builder___258023103_2474382880'\nactionpack (3.1.1) lib/action_view/template.rb:144:in `send'\nactionpack (3.1.1) lib/action_view/template.rb:144:in `render'\nactivesupport (3.1.1) lib/active_support/notifications.rb:55:in `instrument'\nactionpack (3.1.1) lib/action_view/template.rb:142:in `render'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:40:in `render_template'\nactionpack (3.1.1) lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\nactivesupport (3.1.1) lib/active_support/notifications.rb:53:in `instrument'\nactivesupport (3.1.1) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.1.1) lib/active_support/notifications.rb:53:in `instrument'\nactionpack (3.1.1) lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:39:in `render_template'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:47:in `render_with_layout'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:38:in `render_template'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:12:in `render'\nactionpack (3.1.1) lib/action_view/renderer/abstract_renderer.rb:22:in `wrap_formats'\nactionpack (3.1.1) lib/action_view/renderer/template_renderer.rb:9:in `render'\nactionpack (3.1.1) lib/action_view/renderer/renderer.rb:36:in `render_template'\nactionpack (3.1.1) lib/action_view/renderer/renderer.rb:17:in `render'\nactionpack (3.1.1) lib/abstract_controller/rendering.rb:120:in `_render_template'\nactionpack (3.1.1) lib/action_controller/metal/streaming.rb:250:in `_render_template'\nactionpack (3.1.1) lib/abstract_controller/rendering.rb:114:in `render_to_body'\nactionpack (3.1.1) lib/action_controller/metal/renderers.rb:30:in `render_to_body'\nactionpack (3.1.1) lib/action_controller/metal/compatibility.rb:43:in `render_to_body'\nactionpack (3.1.1) lib/abstract_controller/rendering.rb:99:in `render'\nactionpack (3.1.1) lib/action_controller/metal/rendering.rb:16:in `render'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:40:in `render'\nactivesupport (3.1.1) lib/active_support/core_ext/benchmark.rb:5:in `ms'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/benchmark.rb:308:in `realtime'\nactivesupport (3.1.1) lib/active_support/core_ext/benchmark.rb:5:in `ms'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:40:in `render'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\nactiverecord (3.1.1) lib/active_record/railties/controller_runtime.rb:24:in `cleanup_view_runtime'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:39:in `render'\nremotipart (1.0) lib/remotipart/render_overrides.rb:7:in `render'\napp/controllers/posts_controller.rb:23:in `feed'\nactionpack (3.1.1) lib/action_controller/metal/mime_responds.rb:195:in `call'\nactionpack (3.1.1) lib/action_controller/metal/mime_responds.rb:195:in `respond_to'\napp/controllers/posts_controller.rb:22:in `feed'\nactionpack (3.1.1) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.1.1) lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nactionpack (3.1.1) lib/abstract_controller/base.rb:167:in `process_action'\nactionpack (3.1.1) lib/action_controller/metal/rendering.rb:10:in `process_action'\nactionpack (3.1.1) lib/abstract_controller/callbacks.rb:18:in `process_action'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:425:in `_run__84203013__process_action__1179179433__callbacks'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:386:in `send'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:386:in `_run_process_action_callbacks'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:81:in `send'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.1) lib/abstract_controller/callbacks.rb:17:in `process_action'\nactionpack (3.1.1) lib/action_controller/metal/rescue.rb:17:in `process_action'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:30:in `process_action'\nactivesupport (3.1.1) lib/active_support/notifications.rb:53:in `instrument'\nactivesupport (3.1.1) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.1.1) lib/active_support/notifications.rb:53:in `instrument'\nactionpack (3.1.1) lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nactionpack (3.1.1) lib/action_controller/metal/params_wrapper.rb:201:in `process_action'\nactiverecord (3.1.1) lib/active_record/railties/controller_runtime.rb:18:in `process_action'\nactionpack (3.1.1) lib/abstract_controller/base.rb:121:in `process'\nactionpack (3.1.1) lib/abstract_controller/rendering.rb:45:in `process'\nactionpack (3.1.1) lib/action_controller/metal.rb:193:in `dispatch'\nactionpack (3.1.1) lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\nactionpack (3.1.1) lib/action_controller/metal.rb:236:in `action'\nactionpack (3.1.1) lib/action_dispatch/routing/route_set.rb:65:in `call'\nactionpack (3.1.1) lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\nactionpack (3.1.1) lib/action_dispatch/routing/route_set.rb:29:in `call'\nrack-mount (0.8.3) lib/rack/mount/route_set.rb:152:in `call'\nrack-mount (0.8.3) lib/rack/mount/code_generation.rb:96:in `recognize'\nrack-mount (0.8.3) lib/rack/mount/code_generation.rb:89:in `optimized_each'\nrack-mount (0.8.3) lib/rack/mount/code_generation.rb:95:in `recognize'\nrack-mount (0.8.3) lib/rack/mount/route_set.rb:141:in `call'\nactionpack (3.1.1) lib/action_dispatch/routing/route_set.rb:532:in `call'\nrack-raw-upload (1.0.9) lib/rack/raw_upload.rb:17:in `call'\nrack-pjax (0.5.5) lib/rack/pjax.rb:12:in `call'\nwarden (1.1.0) lib/warden/manager.rb:35:in `call'\nwarden (1.1.0) lib/warden/manager.rb:34:in `catch'\nwarden (1.1.0) lib/warden/manager.rb:34:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.5) lib/rack/etag.rb:23:in `call'\nrack (1.3.5) lib/rack/conditionalget.rb:25:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/head.rb:14:in `call'\nremotipart (1.0) lib/remotipart/middleware.rb:30:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/flash.rb:243:in `call'\nrack (1.3.5) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.5) lib/rack/session/abstract/id.rb:190:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/cookies.rb:331:in `call'\nactiverecord (3.1.1) lib/active_record/query_cache.rb:62:in `call'\nactiverecord (3.1.1) lib/active_record/connection_adapters/abstract/connection_pool.rb:477:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/callbacks.rb:29:in `call'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:81:in `send'\nactivesupport (3.1.1) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.1) lib/action_dispatch/middleware/callbacks.rb:28:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/reloader.rb:68:in `call'\nrack (1.3.5) lib/rack/sendfile.rb:101:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nrailties (3.1.1) lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.5) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.5) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.1.1) lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.5) lib/rack/lock.rb:15:in `call'\nactionpack (3.1.1) lib/action_dispatch/middleware/static.rb:53:in `call'\nrailties (3.1.1) lib/rails/engine.rb:456:in `call'\nrailties (3.1.1) lib/rails/rack/content_length.rb:16:in `call'\nrailties (3.1.1) lib/rails/rack/log_tailer.rb:14:in `call'\nrack (1.3.5) lib/rack/handler/webrick.rb:59:in `service'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:95:in `start'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `each'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `start'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:23:in `start'\n/Users/dunya/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:82:in `start'\nrack (1.3.5) lib/rack/handler/webrick.rb:13:in `run'\nrack (1.3.5) lib/rack/server.rb:265:in `start'\nrailties (3.1.1) lib/rails/commands/server.rb:70:in `start'\nrailties (3.1.1) lib/rails/commands.rb:54\nrailties (3.1.1) lib/rails/commands.rb:49:in `tap'\nrailties (3.1.1) lib/rails/commands.rb:49\nscript/rails:6:in `require'\nscript/rails:6\n```\n", "created_at": "2011-11-21 14:52:25", "user": 698335, "id": 2815974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3034602", "text": "This is related to fast_xs somehow... \n", "created_at": "2011-12-06 16:36:09", "user": 1035375, "id": 3034602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3046085", "text": "Looks like it indeed is the case since the workaround that's suggested in http://stackoverflow.com/questions/5954198/is-rails-3-1-edge-breaking-xmlmarkupbuilder actually worked.\n", "created_at": "2011-12-07 11:28:59", "user": 698335, "id": 3046085}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I'm using accepts_nested_attributes_for so I can create relationships between email messages and recipients by directly \nI want to directly edit the attributes for the through table (email_message_recipients), rather than the recipients\nThe recipients are static and shared between all email messages\nadditionally the through table has custom fields such as recipient type (to,cc,bcc)\n\nmy model\n\n```\nclass EmailMessage\n    has_many :email_message_recipients, :dependent => :destroy\n    has_many :recipients, :through => :email_message_recipients\n\n    accepts_nested_attributes_for :email_message_recipients, :allow_destroy => true\n\n    validates_presence_of :sender\n\nend\n```\n\nIt mostly works fine, apart from when the validation fails on the email_message model, eg a sender is not specified\nWhen the validation fails it causes the rows in the through table to be duplicated.\n", "labels": [], "number": 1358, "updated_at": "2012-04-28 18:36:07", "user": 37096, "closed_at": "2012-04-28 18:36:07", "id": 965248, "title": "accepts_nested_attributes_for :through_relationship causes dups on validation failure", "url": "https://api.github.com/repos/rails/rails/issues/1358", "created_at": "2011-05-27 16:02:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266135", "text": "I tried looking at this before, but I couldn't seem to duplicate your problem exactly. Maybe you could specify more than just the model, say some console examples?\n", "created_at": "2011-05-31 10:35:56", "user": 16414, "id": 1266135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276568", "text": "I managed to create two records instead of one when I have used `inverse_of` on polymorphic association, which doesn't work (and it is described in documentation). See #1383\n", "created_at": "2011-06-01 19:31:25", "user": 171436, "id": 1276568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280155", "text": "I am not using a polymorphic association, i'll try and get a working example for you\n", "created_at": "2011-06-02 11:12:55", "user": 37096, "id": 1280155}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5322940", "text": "@raldred Is this issue still occurring? If not, please close the issue. Thanks.\n", "created_at": "2012-04-25 03:16:33", "user": 139443, "id": 5322940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399024", "text": "I'm closing this now. Please test with one actual version. If this issue still occurs please open a new one with a better description and more informations how we can reproduce your issue.\n\nThanks.\n", "created_at": "2012-04-28 18:36:07", "user": 47848, "id": 5399024}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "An example of the problem can be seen in this gist: https://gist.github.com/994919.\n\nBasically, `ActiveSupport::OrderedHash` behaves differently than the built-in `Hash` when yielding to a block that accepts its parameters with a splat. This is only an issue on ruby 1.8 because 1.9 uses the built-in `Hash` at all times. It's a very minor inconsistency, but it causes some problems with `pp`, for example.\n\nTested with rvm-installed ruby 1.8.7-p330, on Mac OS X 10.6.7. At least on this machine, tests are all running green.\n", "labels": [], "number": 1359, "updated_at": "2014-06-26 16:59:26", "user": 124255, "closed_at": "2011-05-27 16:43:19", "id": 965404, "title": "Fix for ruby 1.8 bug with ActiveSupport::OrderedHash", "url": "https://api.github.com/repos/rails/rails/issues/1359", "created_at": "2011-05-27 16:29:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253145", "text": "This now makes each_pair different for 1.8 and 1.9 - is this what we want? Anybody using each_pair on ordered hashes is now going to have implement a version check - developers writing apps probably won't be affected that much but what about gem/plugin authors using Active Support? If you've gone to the trouble of using an AS::OrderedHash in a gem it's likely you'll want the same behaviour on 1.8 and 1.9.\n", "created_at": "2011-05-28 05:49:26", "user": 6321, "id": 1253145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253236", "text": "@pixeltrix Does each_pair behaves differently on 1.8 and 1.9 for Hash? If so, it is ok for us to be differently here, if not, we should revert this.\n", "created_at": "2011-05-28 06:48:41", "user": 9582, "id": 1253236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253826", "text": "Yes it behaves differently - my concern is that a gem/plugin may be using AS:OrderedHash for consistent behavior between 1.8 and 1.9. It at least needs to be noted in the CHANGLOG. :-)\n", "created_at": "2011-05-28 12:14:37", "user": 6321, "id": 1253826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253872", "text": "Agreed.\n", "created_at": "2011-05-28 12:43:09", "user": 9582, "id": 1253872}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253977", "text": "I added an entry to the CHANGELOG on my fork: https://github.com/AndrewRadev/rails/commit/07a353dde1aab7eabf082f4e07cf41f9dc3b2664. I can't tell if this information is enough, though. Should I explain it in a bit more detail?\n\nUm, I also don't actually know how to add it to this pull request, or even if it's possible considering it's closed :). Sorry, I'm afraid I'm not very experienced with pull requests.\n", "created_at": "2011-05-28 13:36:52", "user": 124255, "id": 1253977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254056", "text": "@AndrewRadev it looks good. However this fix is not going into 3-1-stable. So you just need to put it above. As per the pull request, you have to send a new one and then just link here. Thanks for your work!\n", "created_at": "2011-05-28 14:17:00", "user": 9582, "id": 1254056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254092", "text": "> this fix is not going into 3-1-stable\n\nSorry about that, moved it under 3.2.0. Here's the link to the pull request, hope it's okay now: https://github.com/rails/rails/pull/1378/commits\n\n> Thanks for your work!\n\nGlad I could help :).\n", "created_at": "2011-05-28 14:32:37", "user": 124255, "id": 1254092}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Here's a fun one I found this morning. Took about 4 hours to pinpoint this sucker.\nThis problem exists in both rc1 and the master branch.\n\n```\nclass Foo < ActiveRecord::Base\n  has_many :bars\nend\n\nclass Bar < ActiveRecord::Base\n  belongs_to :foo\n\n  before_save :hi\n  after_save :bye\n\n  def hi\n    p \"HI #{self.id}\"\n  end\n\n  def bye\n    p \"BYE #{self.id}\"\n  end\nend\n```\n\nHere's little test to run:\n\n```\nclass BarTest < ActiveSupport::TestCase\n  def setup\n    @foo = Foo.create!\n  end\n\n  def test_direct_create\n    Bar.create!\n  end\n\n  def test_save\n    bar = @foo.bars.new\n    bar.save!\n  end\n\n  def test_create_via_association\n    @foo.bars.create\n  end\n\n  def test_create_via_association_gone_bad\n    @foo.bars.create!\n  end\nend\n```\n\nFew sanity checks, but the meat of the problem is at the last two. When you run the `test_create_via_association` this is the debug output:\n\n```\n\"HI \"\n\"BYE 980190963\"\n```\n\nThat's expected. Next test should have exactly the same output. But:\n\n```\n\"HI \"\n\"BYE 980190963\"\n\"HI 980190963\"\n\"BYE 980190963\"\n```\n\nFor some reason `create!` will trigger save twice, but only via association. Any thoughts how this is happening?\n", "labels": ["activerecord", "regression"], "number": 1360, "updated_at": "2011-05-31 19:37:33", "user": 78363, "closed_at": "2011-05-31 19:35:33", "id": 965982, "title": "Double save with record.association.create! in Rails 3.1.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1360", "created_at": "2011-05-27 18:41:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251060", "text": "Wanted to add that I arrived at this problem when `object.attributes = { :parent_id => id }` in my application started triggering errors in **belongs_to_association.rb**, `def different_target?(record)` method. \n\nFrom what I could tell `record` was nil and so was the `owner[reflection.foreign_key]`, then it would just blow up on `record.id`. Since that code at least 3 months old, it's probably not the problem. Problem is that mere assignment of attributes would trigger counter cache update. Something is iffy.\n", "created_at": "2011-05-27 19:07:17", "user": 78363, "id": 1251060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255684", "text": "+1 on patch\n", "created_at": "2011-05-29 00:55:12", "user": 12844, "id": 1255684}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256942", "text": "+1 I encountered this too\n", "created_at": "2011-05-29 13:03:48", "user": 13864, "id": 1256942}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261519", "text": "Thanks for the patch. Hopefully it will get merged soon.\nAlso, wouldn't it be great to be able to tag issues when creating them? Seems only the repo owner can do it.\n", "created_at": "2011-05-30 13:56:35", "user": 78363, "id": 1261519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261550", "text": "No problem. Glad to help. My pull request is here: #1389 . Maybe a +1 over there could raise it's awareness, not sure.\n\nBTW, I realised, literally 5 seconds ago, that my patch was somewhat incomplete. I just submitted a second patch, so it should pass all the (unbroken) tests now.\n", "created_at": "2011-05-30 14:04:02", "user": 16414, "id": 1261550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261939", "text": "Hiya, Just to say that I have seen this and will look at it when I have a chance. I agree this should be fixed before 3.1 goes out.\n", "created_at": "2011-05-30 15:30:07", "user": 1979, "id": 1261939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266049", "text": "Okay, just merged my two patches, closing my original pull request.\n", "created_at": "2011-05-31 10:13:55", "user": 16414, "id": 1266049}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269560", "text": "Hiya,\n\nThanks for the patch. I worked on the implementation a bit as I wanted to reduce the duplication, but I've given you full credit for the test.\n\nCheers!\n", "created_at": "2011-05-31 19:36:41", "user": 1979, "id": 1269560}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269570", "text": "Oh, and BTW, your patch had lots of trailing white space, which really muddies up diffs. You can get plugins for various text editors which will automatically remove trailing white space.\n", "created_at": "2011-05-31 19:37:33", "user": 1979, "id": 1269570}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Through-association owner's primary key wasn't quoted. This generates invalid SQL if the record wasn't saved yet (i.e. the primary key's value is nil) and you try to access the relation (should return an empty result).\n\nReal-world example of generated sql:\n\n```\nSELECT `tags`.*\n  FROM `tags`\n  INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id\n  WHERE\n    ((`taggings`.taggable_id = ) AND (`taggings`.taggable_type = 'Ticket'))\n    AND (taggings.context = 'tags' AND taggings.tagger_id IS NULL)\n```\n", "labels": [], "number": 1361, "updated_at": "2014-08-17 20:59:54", "user": 56807, "closed_at": "2011-05-27 20:05:09", "id": 966342, "title": "Unquoted query generated by through-association scope", "url": "https://api.github.com/repos/rails/rails/issues/1361", "created_at": "2011-05-27 20:02:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251425", "text": "It seems something is wrong with your pull request. :P\n", "created_at": "2011-05-27 20:05:09", "user": 9582, "id": 1251425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251447", "text": "Whoops. Github exploded. Fixed the Pull-Request (now 1362). Sorry for the mess.\n", "created_at": "2011-05-27 20:09:51", "user": 56807, "id": 1251447}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Through-association owner's primary key wasn't quoted. This generates invalid SQL if the record wasn't saved yet (i.e. the primary key's value is nil) and you try to access the relation (should return an empty result).\n\nReal-world example of generated sql:\n\n```\nSELECT `tags`.*\n  FROM `tags`\n  INNER JOIN `taggings` ON `tags`.id = `taggings`.tag_id\n  WHERE\n    ((`taggings`.taggable_id = ) AND (`taggings`.taggable_type = 'Ticket'))\n    AND (taggings.context = 'tags' AND taggings.tagger_id IS NULL)\n```\n", "labels": [], "number": 1362, "updated_at": "2014-07-03 04:40:50", "user": 56807, "closed_at": "2011-05-29 03:34:33", "id": 966366, "title": "Unquoted query generated by through-association scope", "url": "https://api.github.com/repos/rails/rails/issues/1362", "created_at": "2011-05-27 20:08:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251457", "text": "Could you please add a test to ensure we won't have regressions?\n", "created_at": "2011-05-27 20:11:21", "user": 9582, "id": 1251457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251822", "text": "Added a minimal regression test `assert_equal [], Post.new.tags.all`, which fails without 152c41d524b58951b5b30ca03d1ba8034dd646a9:\n\n```\n1) Error:\ntest_has_many_through_on_new_record(HasManyThroughAssociationsTest):\nActiveRecord::StatementInvalid: SQLite3::SQLException: near \")\": syntax error: SELECT \"tags\".* FROM \"tags\" INNER JOIN \"taggings\" ON \"tags\".id = \"taggings\".tag_id WHERE ((\"taggings\".taggable_id = ) AND (\"taggings\".taggable_type = 'Post'))\n```\n", "created_at": "2011-05-27 21:19:55", "user": 56807, "id": 1251822}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I've two models:\n\n``` ruby\nclass User < ActiveRecord::Base\nend\n\nclass Deal < ActiveRecord::Base\n  belongs_to :owner, :class_name = >:User # or :user\nend\n```\n\nSuch code in controller:\n\n``` ruby\n@deal.owner = current_user\n```\n\ncauses an error message: `undefined method`match' for :user:Symbol `\nbut simplу changing`:class_name => 'User'` solves the issue. I think it's Rails-style to make both string and symbolic types acceptable.\n", "labels": ["activerecord"], "number": 1363, "updated_at": "2012-09-01 10:41:02", "user": 814984, "closed_at": "2011-06-07 14:15:00", "id": 966495, "title": "Symbol-type class_names in associations doesn't work", "url": "https://api.github.com/repos/rails/rails/issues/1363", "created_at": "2011-05-27 20:43:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278094", "text": "This is a long running issue. I can tell that it exists since 2.x.x. I'll have a look into it.\n", "created_at": "2011-06-01 23:53:30", "user": 4912, "id": 1278094}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315972", "text": "\"I think it's Rails-style to make both string and symbolic types acceptable.\" No, it is not. This is common on some hashes due to security reasons, but it is not a general style.\n", "created_at": "2011-06-07 14:15:00", "user": 9582, "id": 1315972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322341", "text": "@josevalim what is the general style regarding hash keys?\n", "created_at": "2011-06-07 20:46:30", "user": 169419, "id": 1322341}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1805706", "text": "I haven't noticed this and reported a [similar issue (#2530)](https://github.com/rails/rails/issues/2530) again.\nIn my opinion, passing class names as Symbols is more natural, than as Strings.\nAfter all, it is not the content of the \"ClassName\" that matters here, even if it needs to be parsed.\n\nAt least it needs to be documented somewhere.\n", "created_at": "2011-08-15 09:08:36", "user": 712698, "id": 1805706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1806572", "text": "It is more natural to pass class names as strings, especially when the class name is namespaced.\n\n```\nbelongs_to :owner, :class_name => \"Admin::User\"\n```\n", "created_at": "2011-08-15 12:05:41", "user": 169419, "id": 1806572}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1806779", "text": "@yfeldblum why?\nSplitting on \"::\" is the only parsing needed, so is this the only reason to pass class names as strings?\nIs there a reason to not implement some time in the future splitting on \"::\" as `Symbol#split`?\nIn my opinion, class names are no less \"immutable\" than attribute names, and attribute name are usually passed as symbols.\n", "created_at": "2011-08-15 12:43:06", "user": 712698, "id": 1806779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1807209", "text": "It is more natural for the programmer to write\n\n```\nbelongs_to :owner, :class_name => \"Admin::User\"\n```\n\nthan for him to write\n\n```\nbelongs_to :owner, :class_name => \"Admin::User\".to_sym\n```\n\nor some variant thereof.\n", "created_at": "2011-08-15 13:54:45", "user": 169419, "id": 1807209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1807282", "text": "I would write `:'Admin::User'`.\nI meant being natural from the point of view of the language, not typing.\nI agree that to some extent this is also a matter of taste.\n", "created_at": "2011-08-15 14:05:51", "user": 712698, "id": 1807282}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8211889", "text": "`:class_name=>:user` should simply look for `User` in upper case. When needed, strings can be passed, but it _is_ natural to use symbols.\n", "created_at": "2012-09-01 10:41:02", "user": 2188417, "id": 8211889}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Set reverse_order_value when asked to reverse_order().\nDo the actual reversal in build_arel.\n", "labels": [], "number": 1364, "updated_at": "2014-07-03 04:40:55", "user": 4782, "closed_at": "2011-05-30 16:43:11", "id": 966581, "title": "Fix for #1272 based on @jonleighton suggestion.", "url": "https://api.github.com/repos/rails/rails/issues/1364", "created_at": "2011-05-27 21:05:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253192", "text": "Looks good. Just one thing - do we want to negate the current value of reverse_order_value rather than always setting it to true? You might be using a scope on a model in a gem/plugin that uses reverse_order internally and if you then try to reverse order it yourself it will be still the same. What do you think @jonleighton?\n", "created_at": "2011-05-28 06:22:18", "user": 6321, "id": 1253192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255125", "text": "Ah, so `reverse_order.reverse_order` would produce the original order. That makes sense to me. \n\nAssuming @jonleighton is good with this, how do we deal this pull request? Do I close this one and start another pull request with a commit that contains this addition? Or do I add another commit to this existing request?\n", "created_at": "2011-05-28 20:19:29", "user": 4782, "id": 1255125}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255423", "text": "If you just add a new commit and push it then GitHub should automatically pick it up. For future reference it's best to create a branch and create a pull request from that rather than pushing directly to master because if your pull request is rejected then you'll have to delete and re-fork the rails repo to pull upstream changes cleanly again.\n", "created_at": "2011-05-28 22:15:08", "user": 6321, "id": 1255423}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255501", "text": "@pixeltrix Thank you for the tip!\n", "created_at": "2011-05-28 22:46:33", "user": 4782, "id": 1255501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262255", "text": "Hi @bmthykm,\n\nThanks for the patch. A few comments:\n- Your test is testing that `Foo.first != Foo.last`. It would be better test this positively, e.g. `assert_equal bla, Foo.order(:bla).last`. (I added the order part so that the query always returns the same object.) Make sure that there are multiple records in `Foo.order(:bla)` otherwise we are not really testing anything.\n- Please also add a test that tests `reverse_order` directly. You could do this by e.g `assert_equal Foo.order(:bla).to_a.reverse, Foo.order(:bla).reverse_order`.\n- Please also add a test that tests two consecutive `reverse_order` calls. E.g. `assert_equal Foo.order(:bla), Foo.order(:bla).reverse_order.reverse_order`\n\nFinally, with your amendment commit above, please squash it into the previous commit so that people can easily see what's going on when they read the commit log. This is probably going to be easiest if you create a new branch that isn't called master:\n1. Rename your current master branch: `git branch -m master reverse_order_fix`\n2. Add the Rails repo as a remote (if you haven't already): `git remote add -f rails git://github.com/rails/rails.git`\n3. Pull down rails master into the master branch: `git checkout -t -b master rails/master`\n4. Switch to your branch `git checkout reverse_order_fix`\n5. Apply your changes on top of the current master: `git rebase master`\n6. Finally, use interactive rebase to squash the commits: `git rebase -i master` (it will enter an editor, you can follow the instructions but you basically need to label the second commit with an 's')\n7. Then push it to your repo: `git push origin reverse_order_fix`\n\nIf you want to do patches in future, you just need to checkout your `master` branch, do a `git pull` (to get latest master) and then do a `git checkout -b my_patch_name` to create a branch for your patch. This allows you to keep your `master` branch tracking the real 'master' and have all your patches etc in separate branches which you can rebase if you need to.\n\nHope that makes sense. Ask away if you have any questions. I am going to close this for now as you will need to create a new pull request once you have renamed your branch.\n\nJon\n", "created_at": "2011-05-30 16:43:12", "user": 1979, "id": 1262255}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1365, "updated_at": "2014-06-26 15:41:25", "user": 278, "closed_at": "2011-05-27 21:49:54", "id": 966675, "title": "close statment only if its not closed", "url": "https://api.github.com/repos/rails/rails/issues/1365", "created_at": "2011-05-27 21:28:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251919", "text": "/cc @tenderlove\n", "created_at": "2011-05-27 21:40:13", "user": 278, "id": 1251919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1251967", "text": "I merged this, but github 500'd before it could close it. :-(\n", "created_at": "2011-05-27 21:49:54", "user": 3124, "id": 1251967}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails' inflector bit me many times with inflecting acronyms. I want to add an `acronym` inflection rule alongside `plural` and `singular` that would provide better support for acronyms in `camelize` and `titleize`.\n\nRight now, the `camelize` and `titleize` have no concept of acronyms:\n\n``` ruby\nNet::HTTP.name.underscore #=> \"net/http\"\n\"net/http\".camelize #=> \"Net::Http\" :(\n\nNokogiri::HTML.name.underscore #=> \"nokogiri/html\"\n\"nokogiri/html\".camelize #=> \"Nokogiri::Html\" :(\n```\n\nNotice how underscore and camelize are not completely reversible because of the acronyms. Adding the `acronym` inflection rule would allow you to do this:\n\n``` ruby\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.acronym \"HTTP\"\n  inflect.acronym \"HTML\"\n  inflect.acronym \"API\"\n  inflect.acronym \"RoR\"\nend\n\n\"net/http\".camelize #=> \"Net::HTTP\"\n\"nokogiri/html\".camelize #=> \"Nokogiri::HTML\"\n\"api_controller\".camelize #=> \"APIController\"\n\"ror_rocks\".titleize #=> \"RoR Rocks\"\n```\n\nThis has bitten other developers out there, who probably just ended up renaming their `APIController` to `ApiController`, and such. I think adding the `acronym` inflection rule would go a long way in solving these headaches. If Rails core accepts this suggestion, I can cook up a pull request.\n", "labels": ["activesupport"], "number": 1366, "updated_at": "2011-07-11 13:51:36", "user": 7035, "closed_at": "2011-07-11 13:51:35", "id": 966925, "title": "Inflector support for acronyms", "url": "https://api.github.com/repos/rails/rails/issues/1366", "created_at": "2011-05-27 22:30:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278091", "text": "I think I like that idea. Do you mind cooking the pull request with documentation/guide? This will be very nice addition to Rails 3.1/3.2 (depends on how fast you can make it ;))\n\nThank you :)\n", "created_at": "2011-06-01 23:51:29", "user": 4912, "id": 1278091}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279908", "text": "+1, this would be very nice to have.\n", "created_at": "2011-06-02 09:58:00", "user": 9347, "id": 1279908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279952", "text": "+2 \n", "created_at": "2011-06-02 10:11:48", "user": 73998, "id": 1279952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279961", "text": ":+1: apparently, we miss this functionality.\n", "created_at": "2011-06-02 10:14:05", "user": 11493, "id": 1279961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315939", "text": "/cc @jeremy @fxn\n", "created_at": "2011-06-07 14:10:43", "user": 9582, "id": 1315939}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316068", "text": "Sounds good to me.\n\nOnly concern is backwards compatibility, if this is added to AS in my view no acronym rules should come builtin in a minor version upgrade. New generated apps could perhaps have some in config/initializers if they do not create a clear conflict.\n", "created_at": "2011-06-07 14:27:30", "user": 3387, "id": 1316068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316092", "text": "@fxn I think what we can have is a commented out definition in `config/initializers/inflector.rb`, just like others. Then we can have some default ones in there, which will only reflect new applications.\n\nIn the future (3.2), we then stuck the definitions in AS for useful terms :)\n", "created_at": "2011-06-07 14:30:51", "user": 4912, "id": 1316092}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316190", "text": "Doubtful about 3.x. Defining such rules within AS is unnecessarily brittle in my opinion for existing apps and plugins they depend on. A plugin should need to conditionally use a constant or other depending on a minor version of Rails.\n\nThough I understand that the fact that camelize and underscore are not inverses of each other is not ideal (though it is documented), even if you change them via a new acronym category, you are changing the behavior of camelize. Not worthwhile in my opinion for a 3.x.\n", "created_at": "2011-06-07 14:43:41", "user": 3387, "id": 1316190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316198", "text": "Ok, then let's forget about setting term in AS. How about just add support and add comment in the `inflector.rb` file? I, for one, willing to customize my own application for it for sure.\n", "created_at": "2011-06-07 14:45:11", "user": 4912, "id": 1316198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316206", "text": "I.e. use at your own risk?\n", "created_at": "2011-06-07 14:45:41", "user": 4912, "id": 1316206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316234", "text": "Yes, use at your own risk sounds good for me. Indeed I prefer the generator to output only commented out code. You are able to get the acronyms back, and if that breaks some other dependency of yours then that's your choice. Seems fine.\n\nThink the canonical acronyms to configure here are ubiquitous.\n", "created_at": "2011-06-07 14:49:27", "user": 3387, "id": 1316234}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316269", "text": "Ok, @dlee do you want to make a patch for this?\n", "created_at": "2011-06-07 14:52:29", "user": 4912, "id": 1316269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1320763", "text": "Yup, coming right up!\n", "created_at": "2011-06-07 19:16:57", "user": 7035, "id": 1320763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346909", "text": "@sikachu: I just sent a pull request with tests, docs, and guide.\n", "created_at": "2011-06-11 08:46:17", "user": 7035, "id": 1346909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1435724", "text": "This was merged in. I'm going to submit another patch to add the template file in the new application, and add some guides to it ;)\n", "created_at": "2011-06-24 21:56:13", "user": 4912, "id": 1435724}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I found a regression on 3.1.rc1.\n\nUpdating nested_attributes fails when (IdentityMap is disabled) && (target is not loaded).\nAttached is a test case which passes on 3.1.beta1 and fails on 3.1.rc1.\n\nThere were no changes on active_record/nested_attributes.rb in v3.1.0.beta1..v3.1.0.rc1, thus maybe some changes on active_record/associations are the cause.\n", "labels": [], "number": 1367, "updated_at": "2014-06-16 23:55:57", "user": 11493, "closed_at": "2011-05-31 17:58:37", "id": 967168, "title": "A failing test case for 3.1.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1367", "created_at": "2011-05-27 23:43:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268871", "text": "Hiya,\n\nI just rebased this onto the latest master and the test passed. (I did see that it failed on 1.8.7 before I rebased.)\n\nBefore the rebase it looks like there were a bunch of other failures with IM=false, so I guess it was a problem that is now fixed.\n\nThanks\n", "created_at": "2011-05-31 17:58:37", "user": 1979, "id": 1268871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268906", "text": "Just tried on 3-1-stable too and it seems ok. Probably was fixed by 021e4f16b7db21d397196d9e1c1a693935e1e371 and 60cb96abead70eb9d510efd56013ec705baf0d63.\n", "created_at": "2011-05-31 18:05:12", "user": 1979, "id": 1268906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269934", "text": "Apparently. 021e4f16b7db21d397196d9e1c1a693935e1e371 and 60cb96abead70eb9d510efd56013ec705baf0d63 did the fix. Thanks!\n", "created_at": "2011-05-31 20:30:34", "user": 11493, "id": 1269934}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I propose that IM should be turned off for AR testing by default. It is strange that the default test doesn't run on the library's default behavior.\n\nIn fact, this patch reveals 7 failing cases for each adapters on current master. This means, people are not testing with `ENV['IM']=false` option, and AR 3.1 is shipped untested for its default option.\n", "labels": [], "number": 1368, "updated_at": "2014-06-16 22:58:49", "user": 11493, "closed_at": "2011-05-28 01:07:58", "id": 967261, "title": "Disable IdentityMap by default for ActiveRecord testing", "url": "https://api.github.com/repos/rails/rails/issues/1368", "created_at": "2011-05-28 00:35:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1252566", "text": "Plus, it would be nice if `ENV['IM']=true` option is tested on the CI.\n", "created_at": "2011-05-28 00:35:23", "user": 11493, "id": 1252566}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's already in master. I think this can go in 3-0-stable also. #jruby\n\n/cc @tenderlove \n", "labels": [], "number": 1369, "updated_at": "2014-07-03 04:41:09", "user": 3948, "closed_at": "2011-05-28 02:01:32", "id": 967359, "title": "File From Xml is working now. #3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1369", "created_at": "2011-05-28 01:38:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` js\n// /Users/james/development/me/railstar/app/assets/javascripts/tasks.js.coffee.erb\n$(\"#add_objective\").live 'click', (event) ->\n  $(\"#objectives\").append -> \n    \"<%= render :partial => '/tasks/objective', :object => Objective.new %>\"\n```\n\nError compiling asset application.js:\n\n```\nNoMethodError: undefined method `render' for #<#<Class:0x00000100ac4a08>:0x00000100d7d678>\n  (in /Users/james/development/me/railstar/app/assets/javascripts/tasks.js.coffee.erb)\n```\n\nI converted it to js.erb and from coffeescript to jquery and I get the same error. I can evaluate some things in the brackets though\n\n<%= 1+1 %> compiles the js just fine\n", "labels": [], "number": 1370, "updated_at": "2014-08-22 06:11:17", "user": 156253, "closed_at": "2011-06-05 03:07:59", "id": 967424, "title": "When rendering a partial from tasks.js.coffee.erb - undefined, render", "url": "https://api.github.com/repos/rails/rails/issues/1370", "created_at": "2011-05-28 02:21:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1303371", "text": "`render` isn't available to assets.\n", "created_at": "2011-06-05 03:07:59", "user": 137, "id": 1303371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12247432", "text": "Yeah. This sucks. So much for me creating a modal (pop up) for records on the fly with js. Looks like I'll just have to have a modal for every record already on the page. It just makes the source code ugly and will make the page take longer to load for the user.\n\nNot a big deal. I forgot that assets are compiled.\n", "created_at": "2013-01-15 00:19:32", "user": 222064, "id": 12247432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39022963", "text": "Having the same problem with Rails 4.0.4, it would be really useful if render would be available.\n", "created_at": "2014-03-30 11:12:13", "user": 2667916, "id": 39022963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42947111", "text": "What about rendering static HTML files that could live in `app/assets` too? I often need some generic markup (like a `<li>` with some classes) to use with some JS logic but I don't want to embed it in the JS code.\n", "created_at": "2014-05-13 12:15:12", "user": 3890250, "id": 42947111}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42947726", "text": "Take a look at the jst project\nOn May 13, 2014 9:15 AM, \"Andrea Leopardi\" notifications@github.com wrote:\n\n> What about rendering static HTML files that could live in app/assets too?\n> I often need some generic markup (like a <li> with some classes) to use\n> with some JS logic but I don't want to embed it in the JS code.\n> \n> —\n> Reply to this email directly or view it on GitHubhttps://github.com/rails/rails/issues/1370#issuecomment-42947111\n> .\n", "created_at": "2014-05-13 12:22:50", "user": 47848, "id": 42947726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/42964595", "text": "@rafaelfranca Neat! That's exactly what I was looking for, thanks!\n", "created_at": "2014-05-13 14:47:59", "user": 3890250, "id": 42964595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/48690434", "text": "This worked for me.\n\n```\n= Haml::Engine.new(File.read(File.join(Rails.root, 'app/views/xxxx','_form.html.haml'))).render(Object.new, :hello => \"Hello World\")\n```\n", "created_at": "2014-07-11 03:17:54", "user": 381300, "id": 48690434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/53026591", "text": "@yoshiokatsuneo Thanks for that, worked for me as well.\n", "created_at": "2014-08-22 06:11:17", "user": 213006, "id": 53026591}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "While reading the code of ActionMailer::Base, found out some typos and fixed them.\n", "labels": [], "number": 1371, "updated_at": "2014-07-03 04:41:15", "user": 5866, "closed_at": "2011-05-28 06:14:52", "id": 967735, "title": "Typo in ActionMailer::Base", "url": "https://api.github.com/repos/rails/rails/issues/1371", "created_at": "2011-05-28 06:04:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253177", "text": "Thanks very much.\n\nWe have also docrails, which is a branch in github with public write access for doc fixes. Please feel free to push edits directly there if you'r sure about them.\n\nThanks!\n", "created_at": "2011-05-28 06:14:32", "user": 3387, "id": 1253177}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Sprockets does not use the ActionView::Helpers::AssetTagHelper::AssetPaths sub-class of ActionView::Helpers::AssetPaths which is where the relative_url_root logic has been moved to.\n\nThis fix moves the relative_url_root logic into ActionView::Helpers::AssetPaths so that it works with sprockets.\n", "labels": [], "number": 1372, "updated_at": "2014-06-12 11:47:30", "user": 94888, "closed_at": "2011-05-28 06:46:48", "id": 967770, "title": "Fix for relative_url_root when used with sprockets", "url": "https://api.github.com/repos/rails/rails/issues/1372", "created_at": "2011-05-28 06:25:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just a really minor typo corrected.\n", "labels": [], "number": 1373, "updated_at": "2014-07-03 04:41:22", "user": 147843, "closed_at": "2011-05-28 07:53:58", "id": 967883, "title": "Minor typo corrected", "url": "https://api.github.com/repos/rails/rails/issues/1373", "created_at": "2011-05-28 07:53:08", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When installing `gem install rails --pre` I am getting the error when generating RDoc:\n\n```\nERROR:  While generating documentation for activesupport-3.1.0.rc1\n... MESSAGE:   incompatible character encodings: UTF-8 and ASCII-8BIT\n... RDOC args: --op /home/dima/.rvm/gems/ruby-1.9.2-p180@rc1/doc/activesupport-3.1.0.rc1/rdoc lib --title activesupport-3.1.0.rc1 Documentation --quiet\n```\n\nFull log is at https://gist.github.com/996813\n", "labels": ["activesupport"], "number": 1374, "updated_at": "2011-07-23 12:15:57", "user": 195035, "closed_at": "2011-07-23 12:15:57", "id": 968179, "title": "incompatible character encodings: UTF-8 and ASCII-8BIT", "url": "https://api.github.com/repos/rails/rails/issues/1374", "created_at": "2011-05-28 11:56:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253877", "text": "This seems to be a rdoc issue, not rails.\n", "created_at": "2011-05-28 12:46:32", "user": 9347, "id": 1253877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1253892", "text": "Possibly, but I could install rails 3.0.7 without any errors. It might be that some file in Rails is UTF-8 encoded which might cause the issue.\n", "created_at": "2011-05-28 12:54:05", "user": 195035, "id": 1253892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256940", "text": "I got this when migrating from to ruby 1.9.2, it seems to be an issue with Temfile not being binary by default. Maybe a gem is using this? (Mine was soap4r)\n", "created_at": "2011-05-29 13:02:48", "user": 13864, "id": 1256940}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1258902", "text": "I don't think there is something to do with gems used because (as I showed in the full log) I was installing Rails in to the empty gemset.\n", "created_at": "2011-05-29 22:05:28", "user": 195035, "id": 1258902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1297500", "text": "Had the same experience as @dnagir running:\ngem install rails -v \">=3.1.0rc\"\nto an empty Ruby 1.9.2 gemset.\n\nRe-running the command installs the Rails 3.1 RC successfully but I think this is not a good \"fix\".\n", "created_at": "2011-06-03 15:37:17", "user": 72755, "id": 1297500}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1614925", "text": "This is happening here aswell on a fresh Rails 3.1.0.rc4 application:\n\n``` text\n$ rake routes --trace\n** Invoke routes (first_time)\n** Invoke environment (first_time)\n** Execute environment\n** Execute routes\nrake aborted!\nincompatible character encodings: UTF-8 and ASCII-8BIT\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/railties-3.1.0.rc4/lib/rails/tasks/routes.rake:15:in `inspect'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/railties-3.1.0.rc4/lib/rails/tasks/routes.rake:15:in `inspect'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/railties-3.1.0.rc4/lib/rails/tasks/routes.rake:15:in `block (2 levels) in <top (required)>'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/railties-3.1.0.rc4/lib/rails/tasks/routes.rake:11:in `collect'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/railties-3.1.0.rc4/lib/rails/tasks/routes.rake:11:in `block in <top (required)>'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:205:in `call'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:205:in `block in execute'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:200:in `each'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:200:in `execute'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:158:in `block in invoke_with_call_chain'\n/home/ilyas/.rvm/rubies/ruby-1.9.2-p290/lib/ruby/1.9.1/monitor.rb:201:in `mon_synchronize'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:151:in `invoke_with_call_chain'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/task.rb:144:in `invoke'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:112:in `invoke_task'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:90:in `block (2 levels) in top_level'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:90:in `each'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:90:in `block in top_level'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:84:in `top_level'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:62:in `block in run'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/gems/rake-0.9.2/bin/rake:32:in `<top (required)>'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/bin/rake:19:in `load'\n/home/ilyas/.rvm/gems/ruby-1.9.2-p290/bin/rake:19:in `<main>'\nTasks: TOP => routes\n```\n\nSetting encoding in environment.rb doesn't fix the issue and setting RUBYOPT will break sprockets (beta10).\n", "created_at": "2011-07-20 12:26:17", "user": 176576, "id": 1614925}], "assignees": [3387, 3387], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Cherry-picked #1368 to 3-1-stable branch. This also unveils 7 failure cases.\n", "labels": [], "number": 1375, "updated_at": "2014-07-03 04:41:27", "user": 11493, "closed_at": "2011-05-28 17:39:19", "id": 968198, "title": "Disable IdentityMap by default for ActiveRecord testing on 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1375", "created_at": "2011-05-28 12:11:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Without removing it it breaks some gems which checks if TemplateHandlers const defined in ActionView\n", "labels": [], "number": 1376, "updated_at": "2014-07-03 04:41:29", "user": 108694, "closed_at": "2011-05-28 14:03:26", "id": 968307, "title": "No need in autoloading TemplateHandlers since it's removed.", "url": "https://api.github.com/repos/rails/rails/issues/1376", "created_at": "2011-05-28 13:56:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254025", "text": "did a wrong thing. ignore it.\n", "created_at": "2011-05-28 14:03:26", "user": 108694, "id": 1254025}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "On http://rubyonrails.org/download\ntowards the bottom of the page, in the \"Make your application\" section, there is a command given as \"rails server\" which is incorrect. That command actually creates a new app called server. The command that is needed is \"script/server\" to launch the server, which is the intended action.\n", "labels": [], "number": 1377, "updated_at": "2011-05-28 14:05:26", "user": 74711, "closed_at": "2011-05-28 14:04:39", "id": 968314, "title": "Download page has incorrect instructions", "url": "https://api.github.com/repos/rails/rails/issues/1377", "created_at": "2011-05-28 14:01:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254030", "text": "Command changed from Rails 2 to 3.\n", "created_at": "2011-05-28 14:05:26", "user": 74711, "id": 1254030}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "See https://github.com/rails/rails/pull/1359.\n", "labels": [], "number": 1378, "updated_at": "2014-06-26 16:59:31", "user": 124255, "closed_at": "2011-05-28 14:51:52", "id": 968366, "title": "Add changelog entry for pull request #1359", "url": "https://api.github.com/repos/rails/rails/issues/1378", "created_at": "2011-05-28 14:28:44", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With the following ERB in the page head (assuming default generated `application.js` file):\n\n   <%= stylesheet_link_tag    \"application\" %>\n   <%= stylesheet_link_tag    \"sub/other\" %>\n\nand a file `app/assets/stylesheets/sub/other.scss` (notice the extension - not .css.scss).\n\nThe `/assets/application.css` URL contains the compiled `sub/other.scss`. But the link to `/assets/sub/other.css` is not available.\n\n_Expected:_ The URL at `/assets/sub/other.css` to render the compiled CSS of `app/assets/stylesheets/sub/other.scss`.\n\nBUT, if the extension of the file is changed from `sub/other.scss` to `sub/other.css.scss` - it works as expected.\nThus a _WORKAROUND_: change the extension from `.scss` to `.css.scss`.\n", "labels": [], "number": 1379, "updated_at": "2011-05-30 08:51:57", "user": 195035, "closed_at": "2011-05-30 08:51:57", "id": 968432, "title": "SASS files in can't be referenced, but are included", "url": "https://api.github.com/repos/rails/rails/issues/1379", "created_at": "2011-05-28 15:10:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256808", "text": "Why are you linking to it if it's included in the application.css file? Otherwise that's what's expected - sprockets treats the first extension in the list of extensions as the format, so if you only have .scss that's what sprockets will serve.\n", "created_at": "2011-05-29 11:59:37", "user": 6321, "id": 1256808}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1258896", "text": "The fact that it is included in the application.css is just a side effect. What I tried to demonstrate is that it is misleading a bit. On one hand the `.scss` (no `.css`) is picked up automatically, but on the other hand I can't use it directly. I think it just needs to be consistent: the no-`.css` files should either be available or not.\n", "created_at": "2011-05-29 22:03:26", "user": 195035, "id": 1258896}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1260570", "text": "You're meant to use .css.scss, it's not a workaround - that's what is generated and sprockets doesn't add any extensions to a filename. Anyway it's a sprockets related issue rather than a rails issue so if you want to discuss it further open a ticket here: https://github.com/sstephenson/sprockets/issues\n", "created_at": "2011-05-30 08:51:57", "user": 6321, "id": 1260570}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Changing the migration to create sessions table to use change method instead of up and down.\n", "labels": [], "number": 1380, "updated_at": "2014-07-03 04:41:38", "user": 146214, "closed_at": "2011-05-28 19:45:26", "id": 968613, "title": "Use 3.1 style migration for sessions table", "url": "https://api.github.com/repos/rails/rails/issues/1380", "created_at": "2011-05-28 16:36:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256884", "text": "@josevalim: Can this also go into 3.1 stable, if it's not too late for that? \n", "created_at": "2011-05-29 12:38:11", "user": 146214, "id": 1256884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256904", "text": "I don't think there is a need to merge this on 3.1 branch.\n\n## \n\n*\nJosé Valim\nwww.plataformatec.com.br\nFounder and Lead Developer\n*\n", "created_at": "2011-05-29 12:48:31", "user": 9582, "id": 1256904}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently Rails/Sprockets dump everything form `app/assets/javasctips/`, `app/assets/stylesheets/`, `app/assets/images/` into one single bin `public/assets/`. Even files in different subfolders are dumped there.\n\nWhat is the reason for flattening everything into one directory?\nShouldn't it maintain the same structure? Otherwise it is a pain to go through all existing references and update them using `asset_path`.\n", "labels": [], "number": 1381, "updated_at": "2011-06-03 20:02:00", "user": 195035, "closed_at": "2011-06-01 14:52:03", "id": 968688, "title": "Preserve compiled assets file structure", "url": "https://api.github.com/repos/rails/rails/issues/1381", "created_at": "2011-05-28 17:08:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274774", "text": "That's how the asset pipeline works. It treats everything as one namespace, such that you can do:\n\n```\n//=require lib\n```\n\ninstead of:\n\n```\n//=require javascripts/lib\n```\n\nYou can force that behavior, though, if you really wanted to. Just clear out the assets paths and only add app/assets. Then it'll keep the paths.\n", "created_at": "2011-06-01 14:52:03", "user": 2741, "id": 1274774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1287057", "text": "The problem with treating everything as one **compiled** namespace is that references from CSS files (to images for example) are broken. So instead of modifying all the libraries used (jQuery-UI custom, for example) with `asset_path` it would be better to just \"drop it  in\" and use as part of the asset pipeline.\n", "created_at": "2011-06-03 02:15:20", "user": 195035, "id": 1287057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298839", "text": "isn't this something that can be fixed by using an `asset_root` variable in your css (as SASS) [or coffee for javascripts]?\n", "created_at": "2011-06-03 19:20:53", "user": 185039, "id": 1298839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299062", "text": "It can be, but it is too error prone. For example, to include customise jQuery UI we need to replace all occurrances if images in the CSS file. There would be no need of doing it if the resulting file structure would be preserved.\n", "created_at": "2011-06-03 20:02:00", "user": 195035, "id": 1299062}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "migration example updated\n", "labels": [], "number": 1382, "updated_at": "2014-07-03 04:41:43", "user": 160764, "closed_at": "2011-05-29 08:30:27", "id": 968769, "title": "Changelog and readme updated.", "url": "https://api.github.com/repos/rails/rails/issues/1382", "created_at": "2011-05-28 17:50:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254767", "text": "I think the changelog should not be changed, because it reflects the changes done at the time of release.\n", "created_at": "2011-05-28 18:11:00", "user": 146214, "id": 1254767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1254772", "text": "I agree with @vijaydev, you should not change old entries of CHANGELOG.\n\nEdit the README looks fine and you can do it directly in https://github.com/lifo/docrails\n", "created_at": "2011-05-28 18:13:05", "user": 160941, "id": 1254772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256157", "text": "i want to clarify one thing @vijaydev,\n\nIf you generate any model/migration file. It looks like below\n     class CreatePosts < ActiveRecord::Migration\n      def change\n           create_table :posts do |t|\n             t.belongs_to :user\n             t.timestamps\n         end\n           add_index :posts, :user_id\n       end\n end\n but in CHANGELOG it shows \"def up\" It creates confusion.\n", "created_at": "2011-05-29 06:56:52", "user": 160764, "id": 1256157}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256172", "text": "My mistake. I thought it was part of an already released version. That one can be changed, yes. \n\nHowever, the second place where you've done the change should be changed back to <code>def up</code>, because that deals with the reversible migrations and specifically shows how to use <code>up</code> and <code>down</code> methods in cases where the migrations can not be automatically reversed.\n", "created_at": "2011-05-29 07:09:44", "user": 146214, "id": 1256172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256462", "text": "ok thx @vijaydev.\n", "created_at": "2011-05-29 08:30:19", "user": 160764, "id": 1256462}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I found a situation in which the record is invalid even if it should be valid. \n## Example\n\nLet's have a zoo with animals. An animal can be i.e. Lion (we are using polymorphic association here). Also let's assume that each animal must be in zoo, and validate it. In terms of models:\n\n```\nclass Zoo < ActiveRecord::Base\n  has_many :animals\n  has_many :lions, :through => :animals, :source => :sort, :source_type => \"Lion\" \n\n  accepts_nested_attributes_for :lions\nend\n\n\nclass Animal < ActiveRecord::Base\n  belongs_to :zoo\n  belongs_to :sort, :polymorphic => true\n\n  validates_presence_of :zoo\nend\n\n\nclass Lion < ActiveRecord::Base\n  has_one :animal, :as => :sort\n  has_one :zoo, :through => :animal\n\n  accepts_nested_attributes_for :animal\nend\n```\n\nWe may want to create Zoo using nested_attributes:\n\n```\nZoo.create!(:lions_attributes => [{:name => \"Simba\", :animal_attributes => {:mammal => true}}])\n```\n\nIt fails with an exception:\n\n```\nActiveRecord::RecordInvalid: Validation failed: Lions animal zoo can't be blank\n```\n\nI expect the zoo is 'magically' assigned to animal and the record is created.\n## More details\n\nIf the `validates_presence_of` is ommited, the record is saved without an error and the zoo is assigned, following test passes:\n\n```\nzoo = Zoo.create!(:lions_attributes => [{:name => \"Simba\", :animal_attributes => {:mammal => true}}])\nassert_equal(zoo.animals.first.sort.name, \"Simba\")\nassert_equal(zoo.animals.first.sort.zoo, zoo)\n```\n\nThe problem occurs only if we pass the hash :animal_attributes. If we ommit it, the record is saved correctly.\n\n```\nZoo.create!(:lions_attributes => [{:name => \"Simba}])\n```\n\nThe problem is not connected with polymorphic association, it fails in the same way if we replace the polymorphic association with a belongs to association. However I use the polymorphic one in the example, so that the schema makes sense. \n\nIn my application the problem is even worse - it sometimes saves the record, sometimes it fails - the same code behave different among the tests. If I create the models using the code from first example, it just fails. \n\nTested on:\n- Rails 3.1rc\n- Ruby 1.8.7, 1.9.2p180\n\nI believe the bug is not specific to the latest version of rails since I mess with it since Rails 2.3.x, but I didn't test it.\n", "labels": [], "number": 1383, "updated_at": "2011-06-01 19:22:21", "user": 171436, "closed_at": "2011-06-01 19:22:21", "id": 968983, "title": "validates_presence_of   when using nested_attributes", "url": "https://api.github.com/repos/rails/rails/issues/1383", "created_at": "2011-05-28 19:31:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274909", "text": "Have you tried using the :inverse_of option on the associations. I believe that it solves this issue. \n\nhttp://apidock.com/rails/ActiveRecord/NestedAttributes/ClassMethods#971-Validating-presence-of-parent-in-child\n", "created_at": "2011-06-01 15:10:09", "user": 3073, "id": 1274909}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276520", "text": "It shows I haven't enough. According to the documentation:\n\n```\n# There are limitations to <tt>:inverse_of</tt> support:\n#\n# * does not work with <tt>:through</tt> associations.\n# * does not work with <tt>:polymorphic</tt> associations.\n# * for +belongs_to+ associations +has_many+ inverse associations are ignored.\n```\n\nSo this issue may be closed with the resume that the example is not supposed to work because of limitations of `inverse_of`. But a warning or an exception that says \"do not do this\" would be nice. If you close it you can stop reading here, the code below is trying to get it work using `inverse_of` on polymorphic association and since it it undefined it can (and does) work strangly.\n\nI play with it more and I found a solution which works for polymorphic association at first glance, but there are a few gotchas. It looks like this (I know it's not ideal but it's the only one which at least create associated record):\n\n``` ruby\nclass Zoo < ActiveRecord::Base\n  has_many :animals, :inverse_of => :zoo\n  has_many :lions, :through => :animals, :source => :sort, :source_type => \"Lion\"\n\n  accepts_nested_attributes_for :lions\nend\n\nclass Animal < ActiveRecord::Base\n  belongs_to :zoo\n  belongs_to :sort, :polymorphic => true, :inverse_of => :animal, :class_name => \"Lion\"\n\n  validates_presence_of :zoo\nend\n\nclass Lion ## the same as before\n```\n\nThe only associations for which `inverse_of` option must be specified are Zoo->animals and the polymorphic one Animal->sort. The others seems that they don't modify the behaviour. There problems now are following:\n\n## Problem 1\n\nEven if the record is created, the attributes are not correctly assigned (`:mammal` should be true):\n\n``` ruby\nzoo = Zoo.create(:lions_attributes => [{:name => \"Simba\", :animal_attributes => {:mammal => true}}])\nputs zoo.animals.inspect             # [#<Animal id: 1, zoo_id: 1, mammal: nil, sort_id: \"1\", sort_type: \"Lion\">]\nputs zoo.animals.map(&:sort).inspect # [#<Lion id: 1, name: \"Simba\">]\n```\n\n## Problem 2\n\nThe class is specified for polymorphic association and if we have also i.e. Tiger, we can't use it. I have tried to solve it by creating a new polymorphic association specific for a lion:\n\n``` ruby\nclass Animal < ActiveRecord::Base\n  belongs_to :zoo\n  belongs_to :sort, :polymorphic => true, :inverse_of => :animal, :class_name => \"Lion\"\n  belongs_to :sort_lion, :polymorphic => true, :foreign_key => :sort_id, :foreign_type => :sort_type, :inverse_of => :animal, :class_name => \"Lion\"\n\n  validates_presence_of :zoo\nend\n\nclass Zoo < ActiveRecord::Base\n  has_many :animals, :inverse_of => :zoo\n  has_many :lions, :through => :animals, :source => :sort_lion, :source_type => \"Lion\"\n\n  accepts_nested_attributes_for :lions\nend\n\nclass Lion ## the same as before\n```\n\nNow it fails in another way, it creates two records instead of one:\n\n``` ruby\nzoo = Zoo.create(:lions_attributes => [{:name => \"Simba\", :animal_attributes => {:mammal => true}}])\n\nzoo.animals.inspect\n# [#<Animal id: 1, zoo_id: 1, mammal: nil, sort_id: \"1\", sort_type: \"Lion\">, #<Animal id: 2, zoo_id: 1, mammal: nil, sort_id: \"1\", sort_type: \"Lion\">]\n\nzoo.animals.map(&:sort).inspect\n# [#<Lion id: 1, name: \"Simba\">, #<Lion id: 1, name: \"Simba\">]\n```\n\nThis could be connected with issue #1358\n", "created_at": "2011-06-01 19:22:21", "user": 171436, "id": 1276520}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Removed unused `options` parameter from `SchemaStatements#drop_table`.\nThis matches to the documentations, and all existing tests passed.\n", "labels": [], "number": 1384, "updated_at": "2014-06-26 15:41:27", "user": 11493, "closed_at": "2011-05-28 20:36:47", "id": 968993, "title": "Remove unused options from drop_table", "url": "https://api.github.com/repos/rails/rails/issues/1384", "created_at": "2011-05-28 19:38:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit removes the options hash from #drop_column: https://github.com/rails/rails/commit/bcb466c543451dce69403aaae047295758589d8e\n\nThis test was making use of it, so I removed it.\n", "labels": ["activerecord"], "number": 1385, "updated_at": "2014-06-26 15:41:30", "user": 83449, "closed_at": "2011-06-01 17:54:35", "id": 969206, "title": "#drop_table accepts no options now.", "url": "https://api.github.com/repos/rails/rails/issues/1385", "created_at": "2011-05-28 21:21:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272240", "text": "+1 for merge this in.\n", "created_at": "2011-06-01 05:24:10", "user": 4912, "id": 1272240}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275997", "text": "This was merged, but github 500'd so it didn't close.\n", "created_at": "2011-06-01 17:54:09", "user": 3124, "id": 1275997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276010", "text": "Double merged!\n", "created_at": "2011-06-01 17:55:44", "user": 4912, "id": 1276010}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nIn a model (say User) using has_secure_password, the password and it's confirmation are lost if one of the other fields is invalid.\n\nIt's really bad for user experience. For instance on a sign up form : if my username or email is invalid, i have to retype the password and its confirmation whereas they were good.\n\nI would fix that but i don't know how. :(\n", "labels": [], "number": 1386, "updated_at": "2011-06-01 08:22:43", "user": 88009, "closed_at": "2011-06-01 05:23:32", "id": 969209, "title": "Password attribute is emptied when record is invalid using has_secure_password", "url": "https://api.github.com/repos/rails/rails/issues/1386", "created_at": "2011-05-28 21:23:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256540", "text": "That's a quite common behavior actually on most web applications.\n\nMoreover I see two problems with this :\n- The unencrypted password is not stored at all. So we can't display it back in the password input field anyway.\n- Displaying it back would mean adding it in the HTML code. So anyone whom could view the page's source would see the password. It could be a security issue for some.\n\n-1 on this.\n", "created_at": "2011-05-29 09:21:27", "user": 9347, "id": 1256540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256578", "text": "Devise don't lose the password, authlogic neither.\nMajor websites (Facebook, Twitter, Digg, etc.) don't lose the password.\n\nThere is no more security flaw the second time you type than the first. In both case the password is somewhere in the browser (and accessible through Javascript, then with both Javascript and HTML). What kind of attack do you have in mind ?\n\nThe main flaw is about user experience : i mistype my email so i have to retype the password and its confirmation ? Not good at all. :(\n\nPs : Big up Oahu ! :)\n", "created_at": "2011-05-29 09:40:55", "user": 88009, "id": 1256578}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256688", "text": "If you want to check that the password and it's confirmation match, and you're worried about user experience, you should go with a Javascript solution, like the jQuery validation plugin[1]. Then your user will know instantly. Similarly, if you're checking the password for strength, the same plugin allows for custom validation methods.\n\n[1] http://docs.jquery.com/Plugins/validation\n", "created_at": "2011-05-29 10:46:44", "user": 16414, "id": 1256688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1257087", "text": "part of the problem appears to be that password_field has {:value => nil} merged in as part of the helper (see actionpack/lib/action_view/helpers/form_helper.rb )\n\nThe other part is that password_confirmation attribute is virtual (in memory only).\n", "created_at": "2011-05-29 14:31:59", "user": 62123, "id": 1257087}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272238", "text": "I think this is normal, no matter you're using `has_secure_password` or not. Your application/browser should reset your password field if there's any validation error. IMO I never see an application that would retain user's password in case the validation of the model fails.\n\nIf you want to make sure use does correctly type in the same password for confirmation, you should use client-side validation as suggested by @farleyknight.\n", "created_at": "2011-06-01 05:23:32", "user": 4912, "id": 1272238}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272878", "text": "Such a bad faith is quite disappointing. For information: GitHub and Twitter do retain the user's password when the registration fail at validation.\n\nAnyway i will go for client-side validation.\n", "created_at": "2011-06-01 08:22:43", "user": 88009, "id": 1272878}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Revert \"Renaming helper in the Rake task, but why is this needed in the first place? (paging JP)\"\n\nThis reverts commit 9701014b960e8679af8652c5cd0b413a0ad04f58.\n", "labels": [], "number": 1387, "updated_at": "2014-06-14 19:07:40", "user": 35866, "closed_at": "2011-06-01 04:53:24", "id": 969335, "title": "Revert commit 9701014 which causes uninitialized constant Sprockets::Helpers when running rake assets precompile", "url": "https://api.github.com/repos/rails/rails/issues/1387", "created_at": "2011-05-28 22:36:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272148", "text": "Close per request in #1401\n", "created_at": "2011-06-01 04:53:24", "user": 4912, "id": 1272148}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have found that if I include a simple module from the lib folder in a Model, it cancels all validations if i include it at the top of the file. I have to include it bellow all validations to make it not cancel validations. \n\nAlso, I can't call the code in the Module although it is 'detected' and no error of missing method is thrown...\n\nI have also tested with just including an empty module in a model and this also cancels all validations.\n\n```\nclass Collection < ActiveRecord::Base\nrequire MyAutoSort\n```\n\nIs this normal?\n\nGEMFILE:\n\n```\nsource 'http://rubygems.org'\n\ngem 'rails', '~> 3.0.7'\n\n# Bundle edge Rails instead:\n# gem 'rails', :git => 'git://github.com/rails/rails.git'\n\n# Use unicorn as the web server\n# gem 'unicorn'\n\n# Deploy with Capistrano\n# gem 'capistrano'\n\n# To use debugger (ruby-debug for Ruby 1.8.7+, ruby-debug19 for Ruby 1.9.2+)\n# gem 'ruby-debug'\n# gem 'ruby-debug19'\n\n# Bundle the extra gems:\n# gem 'bj'\n# gem 'nokogiri'\n# gem 'aws-s3', :require => 'aws/s3'\ngem 'haml'\ngem 'sass'\ngem 'devise'\ngem 'hpricot'\ngem 'ruby_parser'\ngem 'sitemap_generator'\ngem 'haml-rails'\ngem 'formtastic', '~> 1.1.0'\ngem 'simple_form'\n#gem 'carrierwave'\ngem 'paperclip', \"~> 2.3\"\ngem 'mini_magick'\ngem 'spectator-validates_email', :require => 'validates_email'\ngem 'jquery-rails'\ngem \"geocoder\", :require => \"geocoder\"\ngem 'will_paginate', '~> 3.0.beta'\ngem 'humanizer', '~> 2.4'\ngem 'aws-s3'\n\ngroup :development do\n  gem 'sqlite3-ruby', :require => 'sqlite3'\n  gem 'nifty-generators'\nend\n\ngroup :production do\n  gem 'mysql2'\n  gem 'ruby-mysql', '~> 2.9.3'\n  gem 'exception_notification_rails3', :require => 'exception_notifier'\nend\n\ngroup :test do\n  gem 'rspec'\n  gem 'rspec-rails'\n  gem 'cucumber'\n  gem 'cucumber-rails'\n  gem 'capybara'\n  gem 'database_cleaner'\n  gem 'webrat'\n  gem 'pickle'\n  gem 'jasmine'\n  gem 'factory_girl'\n  gem 'builder', '~> 2.1.2'\n  gem 'launchy'\n  gem \"mocha\"\nend\n# Bundle gems for the local environment. Make sure to\n# put test-only gems in this group so their generators\n# and rake tasks are available in development mode:\n# group :development, :test do\n#   gem 'webrat'\n# end\n```\n", "labels": [], "number": 1388, "updated_at": "2014-01-30 14:39:53", "user": 315297, "closed_at": "2011-05-29 11:52:06", "id": 969391, "title": "Including a Module before validations cancels validations", "url": "https://api.github.com/repos/rails/rails/issues/1388", "created_at": "2011-05-28 23:13:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256784", "text": "I'm not sure why you're not getting error messages but your code is wrong - it should be:\n\n``` ruby\nrequire 'my_auto_sort'\n\nclass Collection < ActiveRecord::Base\n  include MyAutoSort\n  # Rest of model code\nend\n```\n\nIn future can you please use the [Ruby on Rails: Talk][1] mailing list for support\n", "created_at": "2011-05-29 11:51:47", "user": 6321, "id": 1256784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1258001", "text": "Ah, I see what you did there, I'll try that out... thanks.\n", "created_at": "2011-05-29 19:54:57", "user": 315297, "id": 1258001}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi,\n\nI took a look at issue #1360 and found out what the problem was. It seems that the latest refactoring of collection_association.rb used both create and save! to perform a create!. This caused the double-callbacks to be triggered.\n\nThe patch is essentially an unrefactoring of create! to mimic what create currently does. I had to add in an extra parameter to insert_record to use either save or save!.\n\nI wrote a simple test to check if the callbacks were getting called more than once.  It should capture the problem that was found in issue #1360.\n\nAs it stands, there are 7 other tests that are failing, but they seem to be existing problems, as ever time I've cloned I get the same 7 failures. And my modifications don't seem to change the results of those failures, so I'm fairly certain they are unrelated.\n\nThanks for taking a look,\n- Farley\n", "labels": [], "number": 1389, "updated_at": "2014-06-12 04:39:58", "user": 16414, "closed_at": "2011-05-31 10:07:27", "id": 969521, "title": "A fix for issue #1360", "url": "https://api.github.com/repos/rails/rails/issues/1389", "created_at": "2011-05-29 01:08:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Whoops. Posted under wrong account. Closing this and re-opening another issue so I'll get notifications.\n", "labels": [], "number": 1390, "updated_at": "2011-05-29 01:30:58", "user": 644128, "closed_at": "2011-05-29 01:30:58", "id": 969540, "title": "Closing", "url": "https://api.github.com/repos/rails/rails/issues/1390", "created_at": "2011-05-29 01:29:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255731", "text": "Closing\n", "created_at": "2011-05-29 01:30:58", "user": 644128, "id": 1255731}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Proposed veto of 3.1 release. My config.ru is setup to mount Resque:\n\n```\n# This file is used by Rack-based servers to start the application.\n\nrequire ::File.expand_path('../config/environment',  __FILE__)\nrequire 'resque/server'\n\nrun Rack::URLMap.new \\\n  \"/\"       => CodeClimate::Application,\n  \"/resque\" => Resque::Server.new\n```\n\nAfter booting Rails and sending a request to it, it crashes. It appears to be calling #instance on the running Rack app, thus violating the Rack API (#call):\n\n```\n[ree-1.8.7] [21:24:50] $ rails server\n=> Booting WEBrick\n=> Rails 3.1.0.rc1 application starting in development on http://0.0.0.0:3000\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\nExiting\n/Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/railties-3.1.0.rc1/lib/rails/commands/server.rb:46:in `app': undefined method `instance' for #<Rack::URLMap:0x103aef480> (NoMethodError)\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/rack-1.3.0/lib/rack/server.rb:301:in `wrapped_app'\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/rack-1.3.0/lib/rack/server.rb:252:in `start'\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/railties-3.1.0.rc1/lib/rails/commands/server.rb:70:in `start'\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/railties-3.1.0.rc1/lib/rails/commands.rb:54\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/railties-3.1.0.rc1/lib/rails/commands.rb:49:in `tap'\n    from /Users/bhelmkamp/.rvm/gems/ree-1.8.7-2011.01/gems/railties-3.1.0.rc1/lib/rails/commands.rb:49\n    from script/rails:6:in `require'\n    from script/rails:6\n```\n\nThis seems to break any user modifications to config.ru where the running application is not the Rails app directly.\n", "labels": ["actionpack"], "number": 1391, "updated_at": "2011-06-01 17:35:01", "user": 19, "closed_at": "2011-06-01 17:35:01", "id": 969541, "title": "3.1.0.rc1 crasher: undefined method `instance' for #<Rack::URLMap:0x103aef480>", "url": "https://api.github.com/repos/rails/rails/issues/1391", "created_at": "2011-05-29 01:31:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1255823", "text": "Already reported in https://github.com/rails/rails/pull/1331 but they are looking for a better fix\n\nA temporal quick fix for your app, in routes.rb:\n\n``` ruby\nMyApp::Application.routes.draw do\n  mount Resque::Server => \"/resque\"\n  ...\n```\n", "created_at": "2011-05-29 02:36:46", "user": 160941, "id": 1255823}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275855", "text": "Closing this as it's a dupe if #1331 as said above.\n", "created_at": "2011-06-01 17:35:01", "user": 1979, "id": 1275855}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi. \n\nThis is a minor issue: No error raised if the field doesn't exist on the database. \n\n<pre>\nnamespace :username do\n\n  desc \"Create usernames for users who don't have one\"\n  task :create => :environment do\n\n     User.all.each do |u|\n       u.update_attributes(:update_at=>Time.now)\n       p u.to_param\n     end\n   \n     \n     \n  end\n  \nend\n</pre>\n\n\nThere's no error. Kinda strange for me. \n", "labels": [], "number": 1392, "updated_at": "2011-05-29 07:44:13", "user": 50656, "closed_at": "2011-05-29 07:43:50", "id": 969914, "title": "No error raised if field doesn't exist", "url": "https://api.github.com/repos/rails/rails/issues/1392", "created_at": "2011-05-29 06:35:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256227", "text": "update_attributes! \ndang\n", "created_at": "2011-05-29 07:44:13", "user": 50656, "id": 1256227}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As mentioned in a chat with Jose Valim in rc.1 it is necessary to do\n\n  ....\n   format.js  { render :layout => false }\n  ....\n\nbecause with just\n  ...\n    format.js #no params\n  ...\nthe default layout will be rendered.\n\nhave fun\n- Andi Altendorfer\n", "labels": ["actionpack", "regression"], "number": 1393, "updated_at": "2014-06-23 23:53:10", "user": 12751, "closed_at": "2011-06-07 06:51:17", "id": 970404, "title": "*.js.erb should not be rendered using layout", "url": "https://api.github.com/repos/rails/rails/issues/1393", "created_at": "2011-05-29 12:28:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1256900", "text": "You've forgotten the test :-)\n\nI'm not sure this is the best way to do this.\nYou're ignoring the layout just for javascript here. But I guess CSS should be ignored too. And perhaps some other formats ...\n", "created_at": "2011-05-29 12:47:44", "user": 9347, "id": 1256900}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1257080", "text": "@dmathieu You're completely right. I will try to figure out how and where to implement the test. But I'm not sure which formats should add :layout and which not. Perhaps default-layout should be used for html-requests only?\n", "created_at": "2011-05-29 14:26:48", "user": 12751, "id": 1257080}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1260181", "text": "Yes, a test case would be nice! And I agree that this is may not be the best way to solve the problem, I will try to investigate exactly why it is loading the html layout. Thanks @iboard!\n", "created_at": "2011-05-30 07:14:12", "user": 9582, "id": 1260181}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261050", "text": "I've just been trying it in edge and I don't really see where the problem is.\n\n```\ndef index\n    respond_to do |format|\n        format.html\n        format.js\n    end\nend\n```\n\nWhen rendering in html, I properly get the view `index.html.erb` with the `application.html.erb` layout.\nWhen rendering in javascript, I properly get the view `index.js.erb` with no layout.\n\nIf I create some `application.js.erb` then, of course, it' rendered.\nBut I believe this should be the appropriate behavior.\n", "created_at": "2011-05-30 11:48:00", "user": 9347, "id": 1261050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261878", "text": "@iboard  what version of rails are you using?\n", "created_at": "2011-05-30 15:18:15", "user": 160941, "id": 1261878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261961", "text": "3.1.0.rc1 See https://skitch.com/n0ckenfell/fnnnd/revolve with some extra logging.\n\nJose told me, he will take a look at it. I close this request now because, if it's a problem at all, the fix will be in a better way than I suggested ;-)\n", "created_at": "2011-05-30 15:33:31", "user": 12751, "id": 1261961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261977", "text": "Let's leave this opened because it is currently assigned as a blocker for Rails 3.1 and all the discussion so far is here.\n", "created_at": "2011-05-30 15:35:21", "user": 9582, "id": 1261977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262250", "text": "I can't reproduce it even on rails 3.1.0.rc1.\n", "created_at": "2011-05-30 16:41:50", "user": 9347, "id": 1262250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262905", "text": "In my sanbox-application (at github.com/iboard/revolve) I can reproduce it.\nSo I've tried to figure it out from scratch. Here my experience ... \n1. `rails new dummy`\n2. `rails g controller TestController index`\n3. adding `gem haml` and  route `root :to => 'test_controller#index'`\n4. index.haml => `link_to 'test', root_path, :remote => true`\n5. index.js.erb => `alert(\"Hello from js.erb\");`\n\nSo far things are fine. Now, call a coffee-script from the js.erb-template ...\n1. index.js.erb => `call_coffee();`\n2. assets/javascript/test_controller.js.coffee => `@call_coffe = () -> alert(\"Hello from coffee\")`\n\nNow, if `:layout => false` is not explicitly given ...\n\n```\n_include_layout?(options)\nLOG options => {:prefixes=>[\"test_controller\", \"application\"], :template=>\"index\", **:layout=>\"layouts/application\"**, :stream=>nil}\n```\n\nwith my 'workaround' or :layout => false everything works as expected.\nI'm kinda confused but hopefully this info will help.\n", "created_at": "2011-05-30 18:48:03", "user": 12751, "id": 1262905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263622", "text": "Could you please put your entirely failing test case in a github repository ?\nFollowing your instructions gives me something which works just as it should be expected.\n- It's not possible to load the content of index.js.erb as there's no route leading to it.\n- The call_coffee method is properly added to application.js.\n- If I add the route to index.js.erb, it's content is only what I expected it to be, which is the javascript code included in the file.\n", "created_at": "2011-05-30 21:08:15", "user": 9347, "id": 1263622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1265577", "text": "I'm even more confused now and I guess this may be a local problem at my macBook.\n- I removed all haml-gems and did bundle again\n- The last example works now - even without an extra route. (https://github.com/iboard/rails_3_1_test)\n- but [project revolve](http://github.com/iboard/revolve) still does render with :layout\n  - and I can reproduce this at two different machines - see [this commit](https://github.com/iboard/revolve/commit/6d72a2beedcb845778b184a0f92bb4949a20e2ff)\n  - revolve was build just as rails_3_1_test plus rails generate scaffold Message\n\nI apologize here if I grabbed your time because of a (may be) local problem. \nThough both apps are using the same rvm-gemset, just to make sure, I'll build a new rvm-path and will try both apps from scratch.\n\nIf you're willing to spend even more time on this topic, check out [project revolve](http://github.com/iboard/revolve) and let me know if you can reproduce the error.\n", "created_at": "2011-05-31 08:15:54", "user": 12751, "id": 1265577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276825", "text": "Ok, there is definitely something in your revolve project.\n- The layout problem (which I also reproduce in revolve) appears to be related to haml. When I remove it's dependency, it works fine. I can't try it more deeply though as haml is broken on rails edge.\n- When the .js view is missing, rails renders the html one. I believe this is a bug and I'm looking into it.\n", "created_at": "2011-06-01 20:09:32", "user": 9347, "id": 1276825}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276870", "text": "\"When the .js view is missing, rails renders the html one. I believe this is a bug and I'm looking into it.\" -> This is rails default behavior for some time already.\n", "created_at": "2011-06-01 20:18:33", "user": 9582, "id": 1276870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277590", "text": "But in \"revolve\" the .js view isn't missing - there is an edit.js.erb file and with `format.js { render :layout => false }` it is used correctly. Here is a short [demonstration](http://edge.iboard.cc/public/r31js-issue.mov) which shows that it's definitely a HAML-issue. \nI will give up here because my \"Inside-Rails-Experience\" is not enough to handle this. \nThanks for your patience.\n", "created_at": "2011-06-01 22:15:15", "user": 12751, "id": 1277590}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI have the following piece of code in my routes.rb file:\n\n match 'findTicket' => redirect{|p,r| \"/tickets/#{r.query_parameters[:id]}\"}, :as => :find_ticket\n\nUsing rails 3.1.0.rc1 this generate paths of the form \"/tickets/:id\". This is not correct when the application is running in a subdirectory.\n\nFor example, using Apache and Passenger, with RackBaseURI set to '/APPNAME', the URLs generated by the redirect should be prefixed by '/APPNAME' -- ie '/APPNAME/tickets/:id'.\n\nThanks,\ndal\n", "labels": [], "number": 1394, "updated_at": "2011-06-01 14:12:15", "user": 806458, "closed_at": "2011-06-01 05:12:46", "id": 970683, "title": "redirect returning wrong url when running in subdirectory", "url": "https://api.github.com/repos/rails/rails/issues/1394", "created_at": "2011-05-29 15:04:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272208", "text": "Unfortunately, `redirect()` is working somewhat like a dumb redirector. It will redirect you to your given location without lookup for the base URI or anything. You'll have to correct the target redirect path and adding the value of RackBaseURI by yourself.\n", "created_at": "2011-06-01 05:12:46", "user": 4912, "id": 1272208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274541", "text": "my workaround for this issue for anyone interested is to stick a global in the environment.rb file.\nMIKE_RELATIVE=\"\"\nif Rails.env.production?\n  MIKE_RELATIVE = \"/APPNAME\"\nend\n\nthen in the routes simply pop the global in front of the link.  Doing it this way allows for it to work on both prod and dev only adding the uri when needed.   \n", "created_at": "2011-06-01 14:12:15", "user": 806458, "id": 1274541}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a regression from 3.0.7\n\nI have got to learn pull reqs one day but here's a failing test and example output for now https://gist.github.com/997882\n\nI don't have the time to look into fixing the issue until thursday next week\n", "labels": ["activerecord", "regression"], "number": 1395, "updated_at": "2011-05-31 20:15:57", "user": 127208, "closed_at": "2011-05-31 20:15:57", "id": 970776, "title": "default_scope select(\"name\") breaks aggregation on 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1395", "created_at": "2011-05-29 15:57:25", "comments": [], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "http://stackoverflow.com/questions/6168533/bug-with-single-table-inheritance-sti-and-has-and-belongs-to-many-habtm-assoc\n", "labels": [], "number": 1396, "updated_at": "2011-05-31 10:43:21", "user": 137437, "closed_at": "2011-05-31 10:43:21", "id": 970805, "title": "Bug with Single Table Inheritance (STI) and has_and_belongs_to_many (HABTM) associations.", "url": "https://api.github.com/repos/rails/rails/issues/1396", "created_at": "2011-05-29 16:11:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1260688", "text": "I've replicated your model and I just get `NoMethodError: undefined method`eq' for nil:NilClass`when I call`Meeting.foo.to_sql` so I'm guessing that you've simplified it for the question and changed it somehow - I get hints of this since the foreign keys in your generated sql don't match the defaults. Can you please provide a working demonstration of the incorrect sql, thanks.\n", "created_at": "2011-05-30 09:31:38", "user": 6321, "id": 1260688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261146", "text": "When using 3.0.7, I also get the `undefined method eq` error.\nWhen trying it in edge, the query differs quite a bit though. And I don't think it's fully appropriate either.\n\n```\nSELECT \"meetings\".*\nFROM \"meetings\"\nINNER JOIN \"clients_meetings\" ON \"clients_meetings\".\"meeting_id\" = \"meetings\".\"id\"\nINNER JOIN \"clients\" ON \"clients\".\"id\" = \"clients_meetings\".\"client_id\"\nINNER JOIN \"administrators_clients\" ON \"administrators_clients\".\"client_id\" = \"clients\".\"id\"\nINNER JOIN \"users\" ON \"users\".\"id\" = \"administrators_clients\".\"administrator_id\"\n```\n\nThe `INNER JOIN users ON users.id = clients_administrators.user_id` is there.\nBut the `WHERE users.type = 'Administrator'` is missing.\n", "created_at": "2011-05-30 12:22:11", "user": 9347, "id": 1261146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261218", "text": "Hi pixeltrix, I think maybe you didn't create the join tables: administrators_clients and clients_meetings.\nRecreate the bug from this http://github.com/jowls/sti_bug\n", "created_at": "2011-05-30 12:43:08", "user": 137437, "id": 1261218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263719", "text": "Reproduced it now thanks. The good news is that it's fixed in the Rails 3.1 release candidate - this is the SQL that I get:\n\n``` sql\nSELECT \"meetings\".* FROM meetings \nINNER JOIN \"clients_meetings\" ON \"clients_meetings\".\"meeting_id\" = \"meetings\".\"id\" \nINNER JOIN \"clients\" ON \"clients\".\"id\" = \"clients_meetings\".\"client_id\" \nINNER JOIN \"administrators_clients\" ON \"administrators_clients\".\"client_id\" = \"clients\".\"id\" \nINNER JOIN \"users\" ON \"users\".\"id\" = \"administrators_clients\".\"administrator_id\" AND \"users\".\"type\" IN ('Administrator')\n```\n\nThe bad news is that I don't think it'll be fixed in any 3.0.x build - the association code has had a lot of refactoring in 3.1 to support nested through associations and it's not a straightforward backport. If you'd like to have a go at coming up with a patch the place to start is in [`AR::Relation#build_joins`](https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/relation/query_methods.rb#L232-268). This method calls [`AR::JoinAssocation#association_join`](https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L2137-2231) which constructs the conditions correctly but `build_joins` assumes the return value is either a single value or a two element array and drops the middle element of the three element array returned by `association_join` - it's this assumption you'll need to fix.\n", "created_at": "2011-05-30 21:28:20", "user": 6321, "id": 1263719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266167", "text": "Thanks for the detailed reply pixeltrix, i'll have a go at coming up with a patch, thanks for the head start.\n", "created_at": "2011-05-31 10:43:21", "user": 137437, "id": 1266167}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "`extend` must be called on `this.class`, resolves #1322 (Rake 0.9 related).\n", "labels": [], "number": 1397, "updated_at": "2014-06-16 17:00:04", "user": 56807, "closed_at": "2011-05-29 19:08:49", "id": 970871, "title": "Really fix #1322 (Rake::DSL issue)", "url": "https://api.github.com/repos/rails/rails/issues/1397", "created_at": "2011-05-29 16:48:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1257855", "text": "Awesome, thank you very much.  @paneq can you verify that everything is fixed on the 3-0-8 branch for you?  If so, I'll cut another release candidate.\n", "created_at": "2011-05-29 19:08:28", "user": 3124, "id": 1257855}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rebased :-)\n\nCheers,\n  Lee :beer:\n", "labels": [], "number": 1398, "updated_at": "2014-07-03 04:42:21", "user": 121322, "closed_at": "2011-05-29 19:46:44", "id": 971261, "title": "Corrected some typos and American vs. Queen's English issues", "url": "https://api.github.com/repos/rails/rails/issues/1398", "created_at": "2011-05-29 19:44:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's about time we should fix this - right now `ActiveRecord::ConnectionAdapters::MysqlAdapter` has this code block:\n\n```\ndef case_sensitive_equality_operator\n  \"= BINARY\"\nend\n```\n\nwhich renders `validates_uniqueness_of` prohibitively slow. With 7M records, it takes 3+ seconds in our case. It really should be:\n\n```\ndef case_sensitive_equality_operator\n  \"=\"\nend\n```\n\nThat way, we benefit from MySQL's collation for case sensitivity in the index (like `utf8_unicode_ci` or `utf8_bin`), which is FAST. Or we could add `:case_sensitive => nil` as a new option particularly for that case.\n\nIt's a known problem for a long time actually, and patches have been around:\n- http://grosser.it/2009/12/11/validates_uniqness_of-mysql-slow/\n- http://techblog.floorplanner.com/2009/11/17/case-insensitive-validates_uniqueness_of-slowness/\n", "labels": ["activerecord"], "number": 1399, "updated_at": "2012-04-25 20:52:23", "user": 10350, "closed_at": "2012-04-25 20:52:23", "id": 971304, "title": "case_sensitive_equality_operator including BINARY is slow on MySQL", "url": "https://api.github.com/repos/rails/rails/issues/1399", "created_at": "2011-05-29 20:04:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272184", "text": "I think I was the one who working on this patch. The blog posts are quite unrelated because the ability to validates uniqueness with case sensitive for MySQL was lost between 2.3.x and 3.0.x transition.\n\nI bought back the `= BINARY()` because there is no way you can do case sensitive testing in MySQL without having to alter your database. It was broken in 3.0.x and nobody noticed it.\n\nIf you're going to do update your schema to something that will make MySQL always do case sensitive, I think you can already do `:case_sensitive => false` on the `validate_uniqueness_of`. I don't think there's a good fix for it, since telling people to migrate to `utf8_unicode_ci` is also impossible.\n\n@tenderlove, what is your thought on this ticket?\n", "created_at": "2011-06-01 05:06:13", "user": 4912, "id": 1272184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275695", "text": "Oh, I use **both** `utf8_unicode_ci` and `utf8_bin` in the same app and there's absolutely no way to ask people to change column/index collation, that's my point too.\n\nI use `utf8_unicode_ci` for email and username,  because I want to match `KennEjima` with `kennejima`, and I use `utf8_bin` for secret tokens, because I don't want to let `AyBV6hja1` accidentally match with `AYBV6HJA1` (token is BASE62 representation of SecureRandom) - both collations exist in the same users table.\n\nIn the very early days after releasing the app, we removed every line of `validate_uniqueness_of` from our code and made a custom validator to do just that.\n\n```\nclass BetterUniquenessValidator < ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    if record.send(\"#{attribute}_changed?\")\n      target = options[:with_type] ? record.class : record.class.base_class\n      if target.where(attribute => record.read_attribute(attribute)).exists?\n        record.errors[attribute] << \"already in use\"\n      end\n    end\n  end\nend\n\n# In User.rb\nvalidates :username, :better_uniqueness => true\nvalidates :email, :better_uniqueness => true\n```\n\nIIRC, I found the noticeable performance degradation when we only have 10K users, so the problem should be pretty common, and people must be doing either:\n1. Don't use `validate_uniqueness_of` and instead use a custom validator just like mine, from the beginning\n2. Don't use `validate_uniqueness_of` at all and let database raise exception when duplicate (this is actually the fastest if duplicate case is very rare (e.g. UUID), we use this strategy in some places)\n3. Monkey patch `case_sensitive_equality_operator`\n4. Don't care performance\n\nAnd the current implementation only benefits people like 4 (and Postgres, maybe? but I guess `:case_sensitive => false` could kill Postgres too), so I think the reason nobody noticed the regression in 3.0.x is because nobody is using it. :P\n\nAnyway, my suggestion for change is either:\n1. In case `:case_sensitive => nil` is explicitly given (`options.has_key?(:case_sensitive) && options[:case_sensitive].nil?`), the equality operator should be just `\"IS\"` or `\"=\"`. Period. (Backward compatible)\n2. Or better yet, do not set `:case_sensitive => true` by default, but let people explicitly set it for `\"= BINARY\"`. (Desired)\n", "created_at": "2011-06-01 17:09:17", "user": 10350, "id": 1275695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5342474", "text": "It's already '=' in current master. Closing this.\n", "created_at": "2012-04-25 20:52:22", "user": 4912, "id": 5342474}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1400, "updated_at": "2014-06-26 15:28:42", "user": 3948, "closed_at": "2011-05-31 01:45:26", "id": 972500, "title": "Query cache test", "url": "https://api.github.com/repos/rails/rails/issues/1400", "created_at": "2011-05-30 03:16:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262028", "text": "This can go easily. Fixed tests for #jruby \n\n/cc @josevalim \n", "created_at": "2011-05-30 15:48:44", "user": 3948, "id": 1262028}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These commits were never applied to 3-1-stable and were causing uninitialized constant Sprockets::Helpers when running <code>rake assets:precompile</code>. All tests passing and browser tested. This would invalidate pull request https://github.com/rails/rails/pull/1387.\n", "labels": ["actionpack"], "number": 1401, "updated_at": "2014-07-03 04:42:30", "user": 35866, "closed_at": "2011-06-02 21:20:26", "id": 973295, "title": "Apply sprocket helpers refactor to 3-1-Stable", "url": "https://api.github.com/repos/rails/rails/issues/1401", "created_at": "2011-05-30 08:25:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268375", "text": "@wycats, Can we resolve this? I believe I corralled all the commits leading to this change. Either this needs to be applied or the referenced pull request needs to be applied for <code>rake assets:precompile</code> to work in 3-1-stable.\n\n/cc @dhh\n", "created_at": "2011-05-31 16:49:11", "user": 35866, "id": 1268375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272142", "text": "I'm closing #1387 because you said you want to invalidate that.\n\nAssign to @dhh for comment, and put to 3.1 milestone.\n", "created_at": "2011-06-01 04:52:09", "user": 4912, "id": 1272142}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1284987", "text": "Closing because it has been committed by wycats\n", "created_at": "2011-06-02 21:20:26", "user": 35866, "id": 1284987}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "During Rails 3.0.6 release it was decided that 2 conventions for storing translations for namespaced models should be supported. The alternative convention was added. It is not supported anymore in Rails 3.1.0.rc1 currently.\n\nhttp://groups.google.com/group/rubyonrails-core/browse_thread/thread/eca57305b1a3ea0d\n\nAlso. The convention was not fully established for Rails 3.0.\\* . It could be used for \nNamespaced::Model.model_name.human\nNamespaced::Model.human_attribute_name\nbut not for\nNamespaced::Model.new.errors.add(...)\n\nI think we should keep and expand the support for alternative translation convention that uses dots instead of slashes.\n", "labels": ["activerecord"], "number": 1402, "updated_at": "2011-06-11 16:07:36", "user": 65587, "closed_at": "2011-06-11 16:07:36", "id": 973359, "title": "Alternative I18n convention for namespaced models is not supported in Rails 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1402", "created_at": "2011-05-30 08:49:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272128", "text": "@tenderlove do you mind looking into this one?\n", "created_at": "2011-06-01 04:48:18", "user": 4912, "id": 1272128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327782", "text": "Part of it has been merged in to `master` and `3-1-stable`. Do you mind making a pull request for that?\n", "created_at": "2011-06-08 16:02:42", "user": 4912, "id": 1327782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327986", "text": "Forgot to refer to this pull request: https://github.com/rails/rails/pull/1556\n", "created_at": "2011-06-08 16:31:26", "user": 4912, "id": 1327986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340721", "text": "So what about `Namespaced::Model.new.errors.add` ? I can provide patch for that for rails 3.0.\\* and rails 3.1.\\* during the weekend. Would you merge it ?\n", "created_at": "2011-06-10 09:23:36", "user": 65587, "id": 1340721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340943", "text": "@paneq: Of course, provide a patch. I´m sure sikachu will merge if you solve the problem. \n", "created_at": "2011-06-10 10:19:32", "user": 202410, "id": 1340943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341981", "text": "@paneq yep, send 'em in. ;)\n", "created_at": "2011-06-10 12:53:22", "user": 4912, "id": 1341981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1345782", "text": "If I'm not wrong this was fixed in https://github.com/rails/rails/pull/1556, if it's still an issue please add a comment and I will reopen it.\n", "created_at": "2011-06-11 00:00:54", "user": 52642, "id": 1345782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346955", "text": "@spastorino\nJust for clarification: Currently you cannot use both conventions for \"Namespaced::Model.new.errors.add(...)\" (as per paneq´s issue description, I´ve not tested this) which may confuse users. I think paneq works on it over the weekend. The original problem with either support for one or the other convention from ealier rails versions (3.0.x) is solved by supporting both. This is what pull request 1556 did. \n", "created_at": "2011-06-11 09:05:09", "user": 202410, "id": 1346955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347558", "text": "Sorry @paneq I couldn´t resist ;) Any comments on this implementation? \n", "created_at": "2011-06-11 12:48:43", "user": 202410, "id": 1347558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347561", "text": "If it´s good enough I will provide a backport for 3.1-stable. I established an external .yal-file for testing namespaced translations, too. I hope this is ok. \n", "created_at": "2011-06-11 12:51:48", "user": 202410, "id": 1347561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350182", "text": "@paneq @sikachu\nJust to let you know: Looks like the namespaced model feature will be removed completely...\n", "created_at": "2011-06-11 15:22:08", "user": 202410, "id": 1350182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350246", "text": "@thoefer - What are you talking about? Who told you that? I highly doubt that I won't be possible to use namespaced models in Rails. That wouldn't make any sense.\n", "created_at": "2011-06-11 15:25:38", "user": 65587, "id": 1350246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350351", "text": "https://github.com/rails/rails/pull/1650\n", "created_at": "2011-06-11 15:34:52", "user": 202410, "id": 1350351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350370", "text": "Be precise next time please :-) Jose comment in the pull request is about translations of namespaced models errors. Not about namespaced models per se\n", "created_at": "2011-06-11 15:40:23", "user": 65587, "id": 1350370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350699", "text": "The way I understand it is that he want to remove the support for \"[...]nested namespaced setting[...]\". I think he refers to the entire possibility of nesting and using \"dot-syntax\".\n", "created_at": "2011-06-11 15:59:35", "user": 202410, "id": 1350699}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350855", "text": "Yes, nested I18n lookup was removed.\n", "created_at": "2011-06-11 16:07:25", "user": 9582, "id": 1350855}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In order to specify your own sanitize method\nImplemented .mass_assignment_sanitizer configuration option\n\nAs we discussed here:\nhttps://github.com/rails/rails/pull/1334#issuecomment-1247794\n", "labels": [], "number": 1403, "updated_at": "2014-06-14 18:22:36", "user": 122436, "closed_at": "2011-05-31 10:09:39", "id": 973379, "title": "ActiveModel::MassAssignmentSecurity.mass_assignment_sanitizer method", "url": "https://api.github.com/repos/rails/rails/issues/1403", "created_at": "2011-05-30 08:55:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I noticed that creating a mountable engine with:\n\n```\nrails plugin new foo --mountable\n```\n\ngives me the following in 'app/assets/javascripts/application.js':\n\n```\n<% unless options[:skip_javascript] -%>\n//= require <%= options[:javascript] %>\n//= require <%= options[:javascript] %>_ujs\n<% end -%>\n//= require_tree .\n```\n\nThis commit properly renders the ERB and adds the appropriate javascript gem to the plugin's Gemfile.\n", "labels": [], "number": 1404, "updated_at": "2014-06-26 18:05:19", "user": 8328, "closed_at": "2011-05-30 15:17:28", "id": 973578, "title": "properly require javascript libraries when generating mountable engine", "url": "https://api.github.com/repos/rails/rails/issues/1404", "created_at": "2011-05-30 10:08:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is one of the failures that I'm seeing on master.\n\nThis is testing mark_for_destruction against a has_many association. The problem is, once the 'part' object becomes divorced from it's association, it cannot share it's instance variables with the original association it belonged to. At first I was curious to know if there was some other functionality that allowed this to happen. Maybe objects are added to associations during creation? I didn't see anything to this effect, especially since #create! doesn't trigger a full load of the association.\n\nThere are a number of tests for mark_for_destruction in autosave_association_test.rb that don't divorce the object from the association, so I feel that this is the appropriate semantics.\n\nSorry for such a long discussion on what is essentially a 2-line commit. But I'd rather head off any misunderstandings well before making this submission.\n", "labels": [], "number": 1405, "updated_at": "2014-07-03 04:42:46", "user": 16414, "closed_at": "2011-05-31 11:25:40", "id": 974192, "title": "A fix for mark_for_destruction failing test in AssociationsTest (small patch: only 2 lines)", "url": "https://api.github.com/repos/rails/rails/issues/1405", "created_at": "2011-05-30 13:21:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1265406", "text": "Just added another small patch (1 line) that fixes two more failing tests. The issue is pretty much the same: the association was not fully loaded, so any modification to the instance variables would not have been passed between those calls.\n", "created_at": "2011-05-31 07:28:43", "user": 16414, "id": 1265406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266355", "text": "Closing in favor of #1421\n", "created_at": "2011-05-31 11:25:40", "user": 16414, "id": 1266355}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This commit fixes a few warnings when running the tests.\n- In Active Record for @cesario's fix in #inspect last week, when `@attributes` is not defined.\n- In whiny_nil, where it's not useful to stub object_id of nil.\n", "labels": ["activerecord", "activesupport"], "number": 1406, "updated_at": "2014-06-26 16:59:33", "user": 9347, "closed_at": "2011-07-07 10:59:02", "id": 974577, "title": "Fix test warnings", "url": "https://api.github.com/repos/rails/rails/issues/1406", "created_at": "2011-05-30 15:04:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1261864", "text": "@dmathieu the whiny_nil looks good but I would fix the @attributes one by ensuring that @attributes is set to nil (or an empty hash) rather than using defined?() check.\n", "created_at": "2011-05-30 15:16:00", "user": 9582, "id": 1261864}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262213", "text": "Actually no, I can't use .nil?. It wouldn't remove the warning.\n", "created_at": "2011-05-30 16:33:02", "user": 9347, "id": 1262213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262338", "text": "@dmathieu that is not what I meant. Usually when variables are not defined, the proper fix is not to add a defined?() check, but ensure that both initialize and initialize_copy are initializing the variable (in this case, @attributes).\n", "created_at": "2011-05-30 17:03:46", "user": 9582, "id": 1262338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262345", "text": "My fix is to make sure `MyModel.allocate` can be inspect. So we don't call\n`initialize` or `initialize_copy` at all.\n\nOn Mon, May 30, 2011 at 7:03 PM, josevalim <\nreply@reply.github.com>wrote:\n\n> @dmathieu that is not what I meant. Usually when variables are not defined,\n> the proper fix is not to add a defined?() check, but ensure that both\n> initialize and initialize_copy are initializing the variable (in this case,\n> @attributes).\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/1406#issuecomment-1262338\n\n## \n\nFranck Verrot\nhttps://github.com/cesario\nhttps://twitter.com/cesariogw\n", "created_at": "2011-05-30 17:06:05", "user": 108369, "id": 1262345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262357", "text": "The related commit, adding @attributes is b2db8740eabbb9b9c6afb237530d33ef7fc807e9\n", "created_at": "2011-05-30 17:08:32", "user": 9347, "id": 1262357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262358", "text": "Hrm, you are right then. And do we also need the check on has_attribute?\n", "created_at": "2011-05-30 17:08:43", "user": 9582, "id": 1262358}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262363", "text": "Yes, there are warnings on both.\n", "created_at": "2011-05-30 17:09:10", "user": 9347, "id": 1262363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262368", "text": "Ok, thanks guys. I am summoning @tenderlove to see if he has something to add, if not, it is ok to merge imo.\n", "created_at": "2011-05-30 17:10:33", "user": 9582, "id": 1262368}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1262388", "text": "zomg, we're going to be tenderloved! :)\n", "created_at": "2011-05-30 17:15:00", "user": 108369, "id": 1262388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1425962", "text": "If the @attributes change is gonna be a problem, I can move it to a different pull request.\n", "created_at": "2011-06-23 15:23:38", "user": 9347, "id": 1425962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1465548", "text": "I've just rebased this with master.\n", "created_at": "2011-06-29 08:35:41", "user": 9347, "id": 1465548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515830", "text": "If someone is brave enough to call allocate, he should initialize the @attributes variable by himself. We cannot sanity check cases because people are writing case ruby. With that said, @dmathieu, could you please provide a patch where @attributes is properly set in the specific case we call allocate in the test? There is no need to use the defined check. The other fix looks great.\n", "created_at": "2011-07-06 22:01:46", "user": 9582, "id": 1515830}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1521448", "text": "I'm sorry, but I don't see what you mean. I can't define the @attributes var for the object as it's not initialized when we use allocate.\nSo I've removed this commit which seems to be too much of trouble, keeping only the second one.\n", "created_at": "2011-07-07 09:23:22", "user": 9347, "id": 1521448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1521830", "text": "@dmathieu I was saying that, for the only test that @attributes gives a warning, we could do:\n\n  object.instance_variable_set(:@attributes, nil)\n\nI am merging what we have so far.\n", "created_at": "2011-07-07 10:58:38", "user": 9582, "id": 1521830}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Since we're going to be having a lot more than `.js` files in that directory I propose we rename it to something more generic. `scripts` covers JavaScript and CoffeeScript. Also to me it sounds/reads more natural than having \"JavaScripts\"; which are usually referred as JavaScript Files.\n", "labels": [], "number": 1407, "updated_at": "2011-05-30 20:33:11", "user": 125900, "closed_at": "2011-05-30 20:33:11", "id": 974628, "title": "javascripts directory rename to scripts", "url": "https://api.github.com/repos/rails/rails/issues/1407", "created_at": "2011-05-30 15:16:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263454", "text": "The final output is still javascript. scripts could just as well be ruby or perl.\n", "created_at": "2011-05-30 20:33:11", "user": 2741, "id": 1263454}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1408, "updated_at": "2014-07-03 04:42:54", "user": 19945, "closed_at": "2011-05-31 20:46:20", "id": 975695, "title": "changed text to be more explicit about where stylesheets can be located", "url": "https://api.github.com/repos/rails/rails/issues/1408", "created_at": "2011-05-30 19:59:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270040", "text": "It is in with a revision, thanks.\n", "created_at": "2011-05-31 20:46:20", "user": 3387, "id": 1270040}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Modified generated text to explain where .js and .coffee files can be located and that there shouldn't be blank lines in manifest per this issue  http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/effb868290c2c0b8\n", "labels": [], "number": 1409, "updated_at": "2014-07-03 04:42:57", "user": 19945, "closed_at": "2011-05-31 20:46:39", "id": 975699, "title": "Modified generated application.js file text", "url": "https://api.github.com/repos/rails/rails/issues/1409", "created_at": "2011-05-30 20:00:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270044", "text": "It is in with a revision, thanks.\n", "created_at": "2011-05-31 20:46:39", "user": 3387, "id": 1270044}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, \n\na few secure fixes to proper schema support in rails 3.1 and -dev\n\nThis is just a step to a better support for pg schemas(search_path isn't a very good option, but works)\nall tests pass in 3.1 and master branch\n\na little question for core team:\nAre you guys open to a rewrite of postgresql adapter? \n", "labels": [], "number": 1410, "updated_at": "2014-06-26 15:41:35", "user": 6397, "closed_at": "2011-05-30 20:30:18", "id": 975721, "title": "a little step to better postgresql schema support in rails", "url": "https://api.github.com/repos/rails/rails/issues/1410", "created_at": "2011-05-30 20:06:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263438", "text": "@lucasts I'm not really open to a rewrite, but I'm definitely open to incremental changes.  In other words, I don't care if the whole thing is rewritten, I just don't want to review a complete rewrite all at once.\n", "created_at": "2011-05-30 20:29:51", "user": 3124, "id": 1263438}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263487", "text": "@tenderlove Is that the kind of response that I was looking for, better  incremental changes applied thant a huge PR that will never be merged.\nThanks\n", "created_at": "2011-05-30 20:40:12", "user": 6397, "id": 1263487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270489", "text": "Hiya,\n\nThis commit caused a test breakage here: https://github.com/rails/rails/blob/master/activerecord/test/cases/adapters/postgresql/schema_authorization_test.rb#L104\n\nI have reverted.\n\nIf you want to resubmit feel free but please give me information about what you're trying to achieve and ensure that there is no breakage.\n\nJon\n", "created_at": "2011-05-31 21:47:59", "user": 1979, "id": 1270489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271013", "text": "Hi @jonleighton, I will take a look, but the test that you're point dind't break for me(and I will assume that @tenderlove run the test as well).\n\nThanks for the advise\n", "created_at": "2011-05-31 23:11:30", "user": 6397, "id": 1271013}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Add MailBag to Action Mailer to handling bulk mailing and chaining method\n\nMailBag gives you the ability to bulk mailing to multiple users. Instead of having to call the mailer multiple time, you can now pass the list of emails to it like this:\n\n```\nNotification.plan_expire.to_bulk(@users.map(&:email)).deliver\n```\n\nYou could also modify the headers of your E-Mail at runtime by do a chaining, just like Active Record's scope.\n\n```\nNotification.plan_expire.subject(\"Your plan is expired!\").deliver\n```\n\n---\n\n@mikel and @dhh, do you mind giving feedbacks on this? Is this too overkill?\n", "labels": ["actionmailer"], "number": 1411, "updated_at": "2014-07-03 04:43:03", "user": 4912, "closed_at": "2011-06-06 04:01:16", "id": 975973, "title": "Add MailBag to Action Mailer to handling bulk mailing and chaining method", "url": "https://api.github.com/repos/rails/rails/issues/1411", "created_at": "2011-05-30 21:26:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263738", "text": "I remember me and @nzkoz have discussed about this. @nzkoz, do you remember the feedback?\n\nAlso, isn't this totally backward incompatible in the sense Notification.foo.deliver now returns an array?\n", "created_at": "2011-05-30 21:32:11", "user": 9582, "id": 1263738}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263753", "text": "Didn't you were the one telling me to always returning array? >_<\n\nAnyhow, yes, that would be backward incompatible in the sense that `#deliver` will always return array. However, other methods are backward compatible afaik. You can continue using your own mailer without notice, etc etc.\n", "created_at": "2011-05-30 21:34:44", "user": 4912, "id": 1263753}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263796", "text": "I was telling to use an array because the previous logic was returning a Mail object if the mailbag had one recipient and an array with more than one. That would clearly cause pain if someone was generating a mailbag against a set from the database (which can be one or more than one).\n\nThe whole problem is that Foo.bar is now returning a MailBag when it shouldn't. On the other hand, I don't see how we can keep backward compatibility without introducing an specific entry point for the mail bag, like: Notification.bag(:plan_expire).\n", "created_at": "2011-05-30 21:48:21", "user": 9582, "id": 1263796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1263805", "text": "My suggestion was:\n\n```\nNotification.plan_expire.deliver(:to=>@users.map(&:email))\n```\n\nI don't see why we need to surface the api change,  simply let people pass arguments to deliver on a given instance\n", "created_at": "2011-05-30 21:52:17", "user": 197, "id": 1263805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269492", "text": "If you're using to_bulk, we should always return an array. If you don't use to_bulk, we don't.\n\nBut I don't know if I like the order of this. I'd like to make it more explicit that sending in bulk is a special thing. It's not the same as just setting the subject. So I like this better:\n\n```\nNotification.plan_expire.to(@users.map(&:email)).bulk_deliver\n```\n\nThat'll take the to: setting and turn each value into its own email.\n", "created_at": "2011-05-31 19:26:41", "user": 2741, "id": 1269492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269532", "text": "@dhh then that would mean we should do it at the `Mail::Message` level instead. Just add `#bulk_deliver` method which will extracts the recipients from the list? c/d?\n\nHowever, that will still need me to make the `Mail::Message` to return self after each method. I think that would not be hard, though.\n\nIf you think those two would be the case I'll consult with @mikel to patch `Maill::Message` instead.\n", "created_at": "2011-05-31 19:33:05", "user": 4912, "id": 1269532}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269555", "text": "@dhh why two methods then? Why simply not:\n\n```\nNotification.plan_expire.bulk_deliver(@users.map(&:email))\n```\n", "created_at": "2011-05-31 19:36:20", "user": 9582, "id": 1269555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270088", "text": "I definitely prefer the notion of replacing or supplementing deliver rather than doing anything complicated with bulks and mailbag methods etc.\n", "created_at": "2011-05-31 20:52:38", "user": 197, "id": 1270088}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272121", "text": "I'm sold by @dhh and @NZKoz, will try to get patch to @mikel on Mail gem then.\n\nI'm keep this one open in case there's more feedback.\n", "created_at": "2011-06-01 04:45:24", "user": 4912, "id": 1272121}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307062", "text": "I'll fix this in mail.\n", "created_at": "2011-06-06 03:59:11", "user": 3366, "id": 1307062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307070", "text": "This will be a mail fix that will flow automagically into action mailer, closing this pull request.\n", "created_at": "2011-06-06 04:01:17", "user": 3366, "id": 1307070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307073", "text": "Awesome, thank you man! :)\n", "created_at": "2011-06-06 04:01:48", "user": 4912, "id": 1307073}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I get an error \"uninitialized constant Syck::Syck\" when attempting to install 3.0.8.rc3.\n\nThere's no problem with 3.0.8.rc2.\n\n<pre>\n$ ruby -v\n# ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]\n$ gem -v\n#1.8.4\n$ rake --version\n# rake, version 0.8.7\n$ gem install rails --version=3.0.8.rc3\n# ERROR:  While executing gem ... (NameError)\n#   uninitialized constant Syck::Syck\n$ gem update rake\n$ rake --version\n# rake, version 0.9.0\n$ gem install rails --version=3.0.8.rc3\n# ERROR:  While executing gem ... (NameError)\n#   uninitialized constant Syck::Syck\n$ gem install rails --version=3.0.8.rc2\n# Fetching: activesupport-3.0.8.rc2.gem (100%)\n# ...\n</pre>\n\n", "labels": [], "number": 1412, "updated_at": "2011-06-02 15:50:54", "user": 8665, "closed_at": "2011-05-31 00:08:43", "id": 976232, "title": "uninitialized constant Syck::Syck on installing 3.0.8.rc3", "url": "https://api.github.com/repos/rails/rails/issues/1412", "created_at": "2011-05-30 23:04:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1264211", "text": "Is there a crying emoji on github?  :'(\n\nI've pushed an rc4 that should fix the problem.\n", "created_at": "2011-05-31 00:08:43", "user": 3124, "id": 1264211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1264290", "text": "Not to belabor the synchronicity, but you said you had a cold? And the issue was an uninitialized constant Syck? I recommend taking hot water with lemon and a good night's rest before pushing the next release.\n\nSetting aside all levity, thank you sincerely for all you've done for Rails and this thriving community.\n\n-- Daniel\n", "created_at": "2011-05-31 00:41:28", "user": 8665, "id": 1264290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1264378", "text": "Hehehe.  Yes, you are correct.  Thank you.  And thanks for giving the release candidate a try! :-)\n", "created_at": "2011-05-31 01:08:31", "user": 3124, "id": 1264378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266126", "text": "Confused!\n\n> ruby -v\n> ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.6.0]\n> ~/Code\n> gem -v\n> 1.8.4\n> ~/Code\n> rake --version\n> rake, version 0.8.7\n> ~/Code\n> gem install rails --pre\n> ERROR:  While executing gem ... (NameError)\n>     uninitialized constant Syck::Syck\n> ~/Code\n\nHowever, this works...\n\n> gem install rails --version=3.1.0.rc1\n\nI thought --pre == 3.1.0.rc# NOT 3.0.#.rc# ?\n\n--Jamie\n", "created_at": "2011-05-31 10:33:21", "user": 144030, "id": 1266126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266203", "text": "Noticed this problem on yesterday night (UTC +1 here): \"Ok let's got to sleep, you will fix this on tomorrow\" and now the (working) rc4 is out. That's why I love this community. Thanks Aaron.\n", "created_at": "2011-05-31 10:52:03", "user": 5089, "id": 1266203}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267971", "text": "I had the same issue. How is it possible that pushing rails again fixes the issue ? Is it some rubygems problem ? Just curious.\n", "created_at": "2011-05-31 15:54:28", "user": 65587, "id": 1267971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268083", "text": "@paneq it's an error when building the YAML spec with syck on 1.9.3.  Basically, I had ruby build in a bad spot and forgot to switch back to 1.9.2 before building the gem.  :-(\n", "created_at": "2011-05-31 16:08:08", "user": 3124, "id": 1268083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268156", "text": "Easy to miss such things. But rc4 works fine which is awesome :-)\n", "created_at": "2011-05-31 16:17:39", "user": 65587, "id": 1268156}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280795", "text": "Would it be possible to fix the rails-3.0.8.rc3 gem file as well? When I'm doing a 'bundle update rails' rubygems seems to download the gemspecs for all rails version, including the 'syck' rc3 gemfile and thus fails with \"uninitialized constant Syck::Syck\"...\n", "created_at": "2011-06-02 13:53:31", "user": 19619, "id": 1280795}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281192", "text": "@andi no, we cannot fix the rc3 gem.  Please use the rc4 gem.  Unfortunately, the best I can do is yank the rc3 gem from rubygems.org.\n", "created_at": "2011-06-02 15:08:34", "user": 3124, "id": 1281192}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281261", "text": "I don't event want to use rails 3.0.8. I changed my Gemfile to use rails-3.1.0.rc1 and ran 'bundle update rails', but as I said, somehow rubygems or bundler seem to fetch all gemspecs for 3.0.8 as well. So it would be great if you could yank it... Thanks a lot\n", "created_at": "2011-06-02 15:20:57", "user": 19619, "id": 1281261}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281440", "text": "I wrote a detailed guide to installing Rails 3.1 to provide some advice and recommendations.\n\n\"Read This Before Installing Rails 3.1\" is here:\nhttp://railsapps.github.com/installing-rails-3-1.html\n\n@tenderlove and friends, could you give it a read and let me know if it is accurate, please?\n\nIt's getting a lot of page views and tweets so I'd like to know if it needs corrections.\n", "created_at": "2011-06-02 15:50:54", "user": 8665, "id": 1281440}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Set reverse_order_value when asked to reverse_order().\nDo the actual reversal in build_arel.\n\nAnd take in code review comments from @jonleighton:\n- Add tests to ensure expectations of how `reverse_order` should work\n", "labels": ["activerecord"], "number": 1413, "updated_at": "2014-07-03 04:43:11", "user": 4782, "closed_at": "2011-06-01 06:51:23", "id": 976242, "title": "Fix issue #1272", "url": "https://api.github.com/repos/rails/rails/issues/1413", "created_at": "2011-05-30 23:10:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268800", "text": "Thanks for updating your patch.\n\nHowever I just tried to run the tests and got 10 failures. For example:\n\n```\n  1) Failure:\ntest_last(RelationTest) [test/cases/relations_test.rb:547]:\n<#<Author id: 3, name: \"Bob\", author_address_id: nil, author_address_extra_id: nil, organization_id: nil, owned_essay_id: nil>> expected but was\n<#<Author id: 1, name: \"David\", author_address_id: 1, author_address_extra_id: 2, organization_id: \"No Such Agency\", owned_essay_id: \"A Modest Proposal\">>.\n```\n\nCould you have another look please?\n", "created_at": "2011-05-31 17:48:02", "user": 1979, "id": 1268800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269798", "text": "Hmm. Will take a look tonight.\n\nOn Tue, May 31, 2011 at 10:48 AM, jonleighton <\nreply@reply.github.com>wrote:\n\n> Thanks for updating your patch.\n> \n> However I just tried to run the tests and got 10 failures. For example:\n> \n> ```\n>  1) Failure:\n> test_last(RelationTest) [test/cases/relations_test.rb:547]:\n> <#<Author id: 3, name: \"Bob\", author_address_id: nil,\n> author_address_extra_id: nil, organization_id: nil, owned_essay_id: nil>>\n> expected but was\n> <#<Author id: 1, name: \"David\", author_address_id: 1,\n> author_address_extra_id: 2, organization_id: \"No Such Agency\",\n> owned_essay_id: \"A Modest Proposal\">>.\n> ```\n> \n> Could you have another look please?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/1413#issuecomment-1268800\n\n## \n\nBrian Mathiyakom / brian@rarevisions.net\n", "created_at": "2011-05-31 20:10:40", "user": 4782, "id": 1269798}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272191", "text": "Hey @jonleighton, would you be opposed to something like\n\n``` ruby\ndef build_arel\n  # ...\n  order = @order_values\n  order = [\"#{quoted_table_name}.#{primary_key} ASC\"] if order.empty?\n  order = @reorder_value if @reorder_value\n  order = reverse_sql_order(order) if @reverse_order_value\n  arel.order(*order.uniq.reject{|o| o.blank?}) unless order.empty?\n  # ...\nend\n```\n\nThe idea is that we default to ascending primary key ordering, when not given an order. Is there a better way to express `[\"#{quoted_table_name}.#{primary_key} ASC\"]`?\n", "created_at": "2011-06-01 05:08:55", "user": 4782, "id": 1272191}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272213", "text": "We could also hide the default sql order in a private method of `QueryMethods`\n\n``` ruby\ndef default_sql_order \n  [\"#{quoted_table_name}.#{primary_key} ASC\"]\nend\n```\n", "created_at": "2011-06-01 05:14:05", "user": 4782, "id": 1272213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272516", "text": "Got a better patch coming. Closing.\n", "created_at": "2011-06-01 06:51:23", "user": 4782, "id": 1272516}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`ActionView::Helpers::FormBuilder#fields_for` was refactored recently (f0479cbbd52961c75906022003d4f03aa39556e0). It now checks whether the second parameter `is_a? Hash`, and if so, it assumes that it's an options hash (not a record object).\n\nUnfortunately, if your record object is a subclass of Hash, `#fields_for` now mistakenly tries to interpret your record as an options hash. This is a real-world problem for the [admittedly fringe] case of [Casted Models in CouchRest Model](http://www.couchrest.info/model/casted_models.html), which are subclassed from Hash with a mix-in.\n\nI don't think anybody who really intends to pass in an options hash is doing so with anything but a real Hash, so this can be fixed easily by using `instance_of?` (which will be false for casted models) instead of `is_a?`.\n", "labels": ["actionpack"], "number": 1414, "updated_at": "2014-06-26 19:35:58", "user": 646297, "closed_at": "2012-02-07 13:11:49", "id": 976300, "title": "Use instance_of? in #fields_for to check specifically for a Hash (excluding subclasses)", "url": "https://api.github.com/repos/rails/rails/issues/1414", "created_at": "2011-05-30 23:36:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329411", "text": "As far as CouchRest Model is concerned, this should no longer be an issue in the upcoming 1.1 (currently 1.1.0.rc1) release.\n", "created_at": "2011-06-08 19:58:33", "user": 13102, "id": 1329411}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Previously ActionView contained TemplateHandler, TemplateHandlers (@d182b6ee9c99901553e6 removed them), but declarations of autoload for these constants are still there. I've removed them in this patch since they don't exist anymore. \n\nBackstory: \nI've found out about this when was figuring out why haml stopped working with latest head of rails. Turned out haml was checking for ActionView.const_defined?(\"TemplateHandlers\") which returned true because of autoload for this constant, but was failing afterwords since this constant doesn't exist.\n", "labels": [], "number": 1415, "updated_at": "2014-07-03 04:43:18", "user": 386, "closed_at": "2011-05-31 06:56:59", "id": 976647, "title": "Remove autoload for non-existing constants", "url": "https://api.github.com/repos/rails/rails/issues/1415", "created_at": "2011-05-31 02:34:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "jruby -S gem install rails --pre\nERROR:  While executing gem ... (ArgumentError)\n    undefined class/module YAML::Syck::DefaultKey\n\njruby-1.6.x especially with jruby-complete.jar which comes with a packed rubygems.\n\nPLEASE if possible use a rubygems to build the rails gems which works out of the box with jruby. jruby users are a bit troubled recently with rubygems bugs (jruby related - maybe).\n\nalso I know I school which use central ldap for authentication and central NFS-server for the home directories and all workstations are exactly the same and can use only debian/ubuntu packages. i.e. they can not upgrade rubygems => they can not use rails-3.0.8.rc3\n", "labels": [], "number": 1416, "updated_at": "2011-05-31 06:10:07", "user": 35058, "closed_at": "2011-05-31 06:10:07", "id": 977008, "title": "jruby can not install rails-3.0.8.rc3", "url": "https://api.github.com/repos/rails/rails/issues/1416", "created_at": "2011-05-31 05:28:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1265067", "text": "Did you try rc4? I believe it fixes the issue\n", "created_at": "2011-05-31 05:33:46", "user": 10128, "id": 1265067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1265195", "text": "indeed\njava -jar jruby-complete-1.6.2.jar -S gem install rails --pre --version 3.0.8.rc4\ndoes work.\nbut\njava -jar jruby-complete-1.6.2.jar -S gem install rails --pre --version 3.0.8.rc3\nand\njava -jar jruby-complete-1.6.2.jar -S gem install rails --pre\ndo not work. I guess the later is due the yaml in rc3 gem.\n\nI guess fir the released version things are on save side.\n", "created_at": "2011-05-31 06:10:07", "user": 35058, "id": 1265195}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed nested_attributes tests\n\nI found that \n\nmem_record = memory.delete(record) is returning record itself. with ruby-1.8.7\n\n/cc @jonleighton\n\n/cc @tenderlove\n", "labels": [], "number": 1417, "updated_at": "2014-07-03 04:43:23", "user": 3948, "closed_at": "2011-05-31 15:46:39", "id": 977101, "title": "Fix nested attribute for memory record.", "url": "https://api.github.com/repos/rails/rails/issues/1417", "created_at": "2011-05-31 06:06:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268326", "text": "I'm sorry, but that's not very dry and not a nice piece of code either.\nYou're having two conditions when you could have only one, making it look far more complicated than what it really is.\n\nI did the same thing this morning (in the train, therefor I didn't see this pull request) in a way which I believe to be nicer. See #1425\n", "created_at": "2011-05-31 16:42:30", "user": 9347, "id": 1268326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268714", "text": "I've refactored it in #1427\n", "created_at": "2011-05-31 17:37:09", "user": 9347, "id": 1268714}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My actionmailer seemed to be broken, and I realized it was working after I renamed my mailer from \"DomainMailer\" to \"DomainNameMailer\". The stacktrace when using DomainMailer is as followes, after calling for example \"DomainMailer.request(@domain, @current_user)\":\n\nArgumentError: wrong number of arguments (0 for 2)\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/action_view/base.rb:217:in `request'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/action_view/base.rb:217:in`initialize'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:87:in `new'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:87:in`view_context'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:115:in `_render_template'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:109:in`render_to_body'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:102:in `render_to_string'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:93:in`render'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/deprecated_api.rb:111:in `render'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:735:in`collect_responses_and_parts_order'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:750:in `each'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:750:in`each_template'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:745:in `each'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:745:in`each_template'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:731:in `collect_responses_and_parts_order'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:673:in`mail'\n    from /Users/onno/Sites/hoppakay/app/mailers/domain_mailer.rb:11:in `request'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/base.rb:150:in`send_action'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/base.rb:150:in `process_action'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/base.rb:119:in`process'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionpack-3.0.7/lib/abstract_controller/rendering.rb:41:in `process'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/old_api.rb:75:in`process'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:471:in `process'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:466:in`initialize'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:450:in `new'\n    from /Users/onno/.rvm/gems/ruby-1.8.7-p334/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:450:in`method_missing'\n", "labels": [], "number": 1418, "updated_at": "2011-05-31 21:28:53", "user": 320955, "closed_at": "2011-05-31 21:28:53", "id": 977119, "title": "DomainMailer error in ActionMailer", "url": "https://api.github.com/repos/rails/rails/issues/1418", "created_at": "2011-05-31 06:16:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "On ActiveRecord 3.0.x, a method defined on association proxy illegally caches outdated `target`, only when the method calls the target's scope.\n\nHere's an example.\n\n``` ruby\nclass Author < ActiveRecord::Base\n  has_many :books do\n    def newest\n      # calling Book's scope\n      published.last\n    end\n  end\nend\n\nclass Book < ActiveRecord::Base\n  belongs_to :author\n  scope :published  # any kind of scope\nend\n```\n\n``` ruby\na = Author.first\na.books.create :title => 'book 1'\n#=> #<Book id: 1, author_id: 1, title: \"book 1\">\n# you see the scope works\na.books.newest\n#=> #<Book id: 1, author_id: 1, title: \"book 1\">\n\n# create a new book\na.books.create :title => 'book 2'\n#=> #<Book id: 2, author_id: 1, title: \"book 2\">\n# \"newest\" still returns the old model\na.books.newest\n#=> #<Book id: 1, author_id: 1, title: \"book 1\">\n```\n\n``` ruby\n# correctly returns the newest one when reloaded\na.books.reload\na.books.newest\n#=> #<Book id: 2, author_id: 1, title: \"book 2\">\n```\n\nI confirmed this happens on **3.0.0..3.0.8.rc4**, and does **NOT** happen on master (3.1.rc1) and 2.3.11 (changing \"scope => named_scope\").\n", "labels": ["activerecord", "regression"], "number": 1419, "updated_at": "2012-04-25 20:54:11", "user": 11493, "closed_at": "2012-04-25 20:54:11", "id": 977455, "title": "A method on association proxy sometimes caches old target", "url": "https://api.github.com/repos/rails/rails/issues/1419", "created_at": "2011-05-31 08:24:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272099", "text": "This seems like a valid regression for 3.0.x. Do you want to make a patch for this?\n", "created_at": "2011-06-01 04:39:35", "user": 4912, "id": 1272099}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279178", "text": "I'm afraid I have no time to dig into this complex problem ATM, so your (or anyone's) patch would be appreciated :)\n", "created_at": "2011-06-02 05:53:02", "user": 11493, "id": 1279178}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5342520", "text": "@amatsuda I don't think we're going to release another 3.0.x release, so I'm closing this.\n", "created_at": "2012-04-25 20:54:10", "user": 4912, "id": 5342520}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Given:\n\nclass Pizzerias < ActiveRecord::Base\nend\n\nI have the following error:\nMysql2::Error: Table 'pizza_development.pizzeria' doesn't exist: SHOW FIELDS FROM `pizzeria`.\n\nI tried to pluralize other names and it works fine, except names with  \"ia\" as end of word . \nruby 1.9.2-p180, rails 3.1.0.rc1\n", "labels": ["activerecord", "regression"], "number": 1420, "updated_at": "2011-06-01 06:16:50", "user": 46208, "closed_at": "2011-06-01 06:16:50", "id": 978151, "title": "names with 'ia' as end of word have problems with pluralize", "url": "https://api.github.com/repos/rails/rails/issues/1420", "created_at": "2011-05-31 11:15:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266773", "text": "I believe the model name should be singular and table name should be plural? Does it really try to resolve a singular table name from plural model?\n", "created_at": "2011-05-31 13:02:04", "user": 4912, "id": 1266773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267008", "text": "This \"show case\" works fine with 3.0.x\nI have this problem after I upgrade one of my Project\n", "created_at": "2011-05-31 13:42:29", "user": 46208, "id": 1267008}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272090", "text": "Are you sure that you didn't have custom inflection rule in `config/initializers/inflection.rb`?\n\nI'm trying on bare 3.0.7 and 3.1.0.rc1 and they both trying to lookup `pizzerias` table, not `pizzeria`.\n\nDo you mind telling me what is the expected result?\n", "created_at": "2011-06-01 04:35:48", "user": 4912, "id": 1272090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272408", "text": "I don't have custome inflection roule.\nI expect the project works fine after update rails on Gemfile from 3.0.x to 3.1.x .\nI try to create a new scaffold in a new project \n\n> rails g scaffold pizzeria name:string street:string\n> and I have the following Warning:\n> Plural version of the model detected, using singularized version. Override with --force-plural.\n\n create    app/controllers/pizzeria_controller.rb\n      invoke    erb\n  app/views/pizzeria\n      create      app/views/pizzeria/index.html.erb\n      create      app/views/pizzeria/edit.html.erb\n      create      app/views/pizzeria/show.html.erb\n. create    app/models/pizzerium.rb\n", "created_at": "2011-06-01 06:16:50", "user": 46208, "id": 1272408}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This should fix the 7 tests failing on master for ActiveRecord\n# test_loading_the_association_target_should_keep_child_records_marked_for_destruction\n\nThe part object was divorced from the association, so the instance variable for mark_for_destruction could never be reached.\n# test_should_not_overwrite_unsaved_updates_when_loading_association and #test_should_not_remove_scheduled_destroys_when_loading_association\n\nAs far as I can tell, nested attributes are not enough to force a load of an association. \n\nTestHasManyAutosaveAssociationWhichItselfHasAutosaveAssociations\n\nAvoid accessing the association directly in setup, in light of the two test cases below it. Both of those cases had been loading the association directly, by mistake.\n", "labels": [], "number": 1421, "updated_at": "2014-06-13 14:16:21", "user": 16414, "closed_at": "2011-05-31 14:07:49", "id": 978186, "title": "This should fix the 7 tests failing on master for ActiveRecord", "url": "https://api.github.com/repos/rails/rails/issues/1421", "created_at": "2011-05-31 11:25:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266844", "text": "These tests are passing with ruby-1.9.2-p180 \n\nCan you see this  https://github.com/rails/rails/pull/1417\n", "created_at": "2011-05-31 13:15:58", "user": 3948, "id": 1266844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267203", "text": "Yep, that works for me.\n", "created_at": "2011-05-31 14:07:49", "user": 16414, "id": 1267203}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "https://github.com/spohlenz/AS-autoload contains a demonstration of the problem that this commit fixes.\n\nThis issue was uncovered because of the way the inherited_resources gem autodetects constants based on the controller name, but I don't believe that inherited_resources is doing anything wrong here.\n\nThis commit also rids ActiveSupport of the confusing \"X is not missing constant Y\" error.\n", "labels": [], "number": 1422, "updated_at": "2014-06-13 15:00:21", "user": 7600, "closed_at": "2011-06-01 00:41:33", "id": 978396, "title": "AS::Dependencies.load_missing_constant should return the constant if it is already loaded", "url": "https://api.github.com/repos/rails/rails/issues/1422", "created_at": "2011-05-31 12:19:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1266624", "text": "+1. Change looks good to me, tested on a fairly large application and it didn't cause any strife.\n", "created_at": "2011-05-31 12:28:22", "user": 4400, "id": 1266624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269651", "text": "We've been down this road already:\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2283\n", "created_at": "2011-05-31 19:48:59", "user": 6321, "id": 1269651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269826", "text": "The reason it wasn't changed is that it would change the behaviour of constant lookup - `Blog::Admin::Post` would return `Blog::Post` which it doesn't without the presence of `AS::Dependencies`. Basically inherited_resources needs to rescue `ArgumentError` as well as `NameError`, but not `NoMethodError` which it will at the moment because `NoMethodError` is a subclass of `NameError`. Look at how [`AR::Base.compute_type`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb#L1293) for how to do it.\n", "created_at": "2011-05-31 20:16:11", "user": 6321, "id": 1269826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271362", "text": "I've made a slight change to load_missing_constant - it now raises NameError instead of ArgumentError but inherited_resources will still need to be updated to search back up the ancestor chain, e.g. Blog::Post as well as Blog::Admin::Post.\n", "created_at": "2011-06-01 00:41:33", "user": 6321, "id": 1271362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313773", "text": "Unfortunately a mere member of the public such as myself can no longer view https://rails.lighthouseapp.com/projects/8994/tickets/2283, despite having wasted hours of frustrating time with errors related to this issue in 2.3.x, which now seem to still be occurring in 3.0.7!  With namespaced models all sorts of trouble occurs with autoloading/unloading/reloading in dev mode, forcing restarts of rails console or server sessions for each iteration. Might as well have to link and compile between changes!\n\nSo, please illuminate how to access the existing lighthouse tickets (interestingly #2283 was not imported to github--maybe all of the tickets should be imported even if they were supposedly closed?) and what the current solutions are to fix namespaced model loading/unloading/reloading in dev mode.\n", "created_at": "2011-06-07 05:44:02", "user": 167275, "id": 1313773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314550", "text": "I'm using namespaced models and have no problems with loading/unloading/autoloading. Please give a specific example of where it's failing and I will look at it. The problem here was that AS::Dependencies was raising a misleading error - it should raise NameError instead of ArgumentError and that's what has been fixed.\n\nOne source of problems is when declaring a namespace in a single line like:\n\n```\nclass Blog::Post < ActiveRecord::Base\nend\n```\n\nthis can cause problems because constant lookup behaves differently that when declaring it like this:\n\n```\nmodule Blog\n  class Post < ActiveRecord::Base\n  end\nend\n```\n\nAlways try and use the latter if possible and especially if you see errors like:\n\n```\ntoplevel constant XX referenced by YY::XX\n```\n\nI had a look at whether this could be fixed however there was no way to intercept the constant lookup.\n", "created_at": "2011-06-07 09:11:51", "user": 6321, "id": 1314550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314693", "text": "Thanks for the quick response. Yes indeed that is one problem of using the fully qualified class name rather than explicitly nesting within modules, although the enclosing module has always been previously declared before encountering the FQCN which then appear in top-level scope. \n\nI can make these edits, but from my limited vantage point I cannot see why this should make any difference to any code that intercepts constant lookups. If ruby allows the syntax, Rails/AS should not interfere with it. Also I'm trying to remember  why this exists at all--something to do with scoping of association declarations? This reeks of code to be deleted from the framework in favor of what ruby provides intrinsically or at least something with fewer side effects.\n\nI'll make the changes to our code and see if I can give you a further concrete example. All I know is that installing the patches from lighthouse #2283 fixed the problem in 2.3.x so I was about to look and see if the same patches could be applied to 3.0.x.   Importing that ticket and all related/referenced/referencing tickets would probably save future grief.\n", "created_at": "2011-06-07 09:41:43", "user": 167275, "id": 1314693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314829", "text": "Actually what we're seeing a lot of is:\nOn the first request after starting the dev server, the page renders correctly. On subsequent requests we get e.g.:\n`Expected /Users/xxx/dev/xxx/app/models/xx/location.rb to define XX::Location`\n\nand in `/Users/xxx/dev/xxx/app/models/xx/location.rb`:\n\n```\nrequire 'xx/location/location'\nrequire 'xx/location/geoip_geocoder'\n  ... additional declarations...\n```\n\nand in `/Users/xxx/dev/xxx/app/models/xx/location/location.rb`:\n\n```\nrequire 'geokit'\nrequire 'xx/legacy/location'\n\nmodule XX\n class Location < Model\n  include GeoKit::Mappable\n\n  Mappable = GeoKit::Mappable\n  LatLng = GeoKit::LatLng\n end\nend\n```\n\nand in `config/application.rb` we have:\n`config.autoload_paths += Dir[\"#{config.root}/app/models/**/\"]`\n\nSo, it is complaining because of what exactly that ruby by itself would have no problem with?\n", "created_at": "2011-06-07 10:10:33", "user": 167275, "id": 1314829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314884", "text": "Having then moved the declaration of `XX:Location` from `app/models/xx/location/location.rb` to `app/models/xx/location.rb` we're still then seeing:\n`Expected /Users/xxx/dev/xxx/app/models/xx/location/geoip_geocoder.rb to define GeoipGeocoder`\nwhere in `app/models/xx/location/geoip_geocoder.rb` we have:\n\n```\nrequire 'geokit/geocoders'\nmodule XX\n class Location\n\n  class GeoipGeocoder < GeoKit::Geocoders::Geocoder\n      ...\n  end\n end\nend\n```\n\nruby would not have a problem with this--why does Rails/AS create a problem?   Hours wasted on this brah.\n", "created_at": "2011-06-07 10:23:11", "user": 167275, "id": 1314884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314929", "text": "Also the full trace for that \"Expected (file where foo is defined) to define foo\" is:\n\n```\nactivesupport (3.0.7) lib/active_support/dependencies.rb:492:in `load_missing_constant'\nactivesupport (3.0.7) lib/active_support/dependencies.rb:183:in `block in const_missing'\nactivesupport (3.0.7) lib/active_support/dependencies.rb:181:in `each'\nactivesupport (3.0.7) lib/active_support/dependencies.rb:181:in `const_missing'\n```\n", "created_at": "2011-06-07 10:34:34", "user": 167275, "id": 1314929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315076", "text": "Could you try replacing `require` calls with `require_dependency`? You can't use `require` for paths that are supposed to be autoloaded/reloaded by Rails in development mode.\n", "created_at": "2011-06-07 11:15:27", "user": 15688, "id": 1315076}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315183", "text": "You'll also want to lose the `config.autoload_paths += Dir[\"#{config.root}/app/models/**/\"]` - that's probably the cause of the errors you're seeing as you've added every sub-directory of `app/models` to the load path.\n\nIf you want to use autoloading it's best to stick with a folder hierarchy that matches the constants. If you've got a bunch of code that's doesn't need reloading then stick it in `#{config.root}/lib` and require it explicitly - you can use `autoload :Constant, 'path/to/file'` to speed up boot times.\n", "created_at": "2011-06-07 11:44:58", "user": 6321, "id": 1315183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315194", "text": "The call to `require 'geokit/geocoders'` doesn't need to be `require_dependency` if you're loading the code from the Geokit gem - you don't want that to be unloaded on every request.\n", "created_at": "2011-06-07 11:47:28", "user": 6321, "id": 1315194}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1321314", "text": "@thedar changing the nested class `require` to `require_dependency` does make this example work--thanks! However, why couldn't we eliminate this explicit require altogether and have the nested classes autoload from `app/models/**` with that Rails magic?\n\n@pixeltrix 1) the folder hierarchy does match the class/module nesting. That is unless Rails is doing something brilliant like converting the enclosing module named XX (caps) in folder xx (lowercase) to Xx (mixed case) instead of XX ?\n\n2) numerous blog posts (fwiw) advise adding all model subdirs to the `autoload_paths` in `config/application.rb` as we've done.  Are you implying that all subdirs of `app/models` (or of app) are already autoloaded without explicitly adding to the path?  If not, how would nested classes of models living in subdirs be autoloaded?\n\n3) replacing the `require 'xx/location/geoip_geocoders'` (i.e. the nested class require from the enclosing class) to `autoload XX::Location::GeoipGeocoders` does not work and yields a new error, \n\n`Routing Error\nYou tried to call GeoipGeocoder#respond_to?, but GeoipGeocoder is not defined on /Users/xxx/dev/xxx/app/models/xx/location.rb:432:in`<top (required)>'`\n\n4) there's no problem with a hard `require` for gems that are truly 'external' to the app. However, now with Bundler especially in dev mode with local source paths, it is common to want to reload the source for a gem which is being co-developed with the app. Thoughts on how to do this without cluttering the source?  Would `require_dependency` work if the gem is then packaged as an external gem in production?\n", "created_at": "2011-06-07 19:49:00", "user": 167275, "id": 1321314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322460", "text": "@tribalvibes that's what Rails does by default. I suggest you create a small empty app and try adding namespaced models I'm pretty sure it will work out of the box as long as you follow the Rails naming conventions.\n\n1) Rails is following its conventions here, fire up the console and try running few experiments like this `'Abc::Xxx'.underscore` or `'abc/xxx'.camelize`.\n\n2) Don't do that, it should work correctly out of the box.\n\n3) `Module.autoload` isn't going to work with Rails' constant reloading in dev. mode as far as I know.\n\n4) Reloading gems in dev. mode via Rails's `ActiveSupport::Dependencies` is technically possible, but you'd have to be pretty intimate with its internals and configuration. You might try reading its source code.\n", "created_at": "2011-06-07 20:55:00", "user": 15688, "id": 1322460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322504", "text": "1) Yes - require 'xx/location/geoip_geocoders' will expect to define Xx::Location::GeoipGeocoder:\n\n```\n>> \"xx\".classify\n=> \"Xx\"\n```\n\n2) If your hierarchy matches the class/module nesting then AS::Dependencies will walk the hierarchy so you're just adding more locations to search.\n\n3) autoload :Class, 'path/to/file' is for non-reloadable code that you want to defer loading until referenced - don't use it for model code.\n\n4) You can always use unloadable to mark a class/module as reloadable - but you wouldn't do that with a released gem. If the gem is an engine then use a relative path spec in your Gemfile and it will reload in development. require_dependency would work for the first file but any requires in the gem code would revert to non-reloadable\n\nAnyway we're straying off the point - this is the Rails issue tracker not Rails-Talk. If there's a specific, reproducible example where you think it isn't reloading properly or not finding a constant properly then please open a new issue with ideally a failing test or at least a link to a Github repo that exhibits the problem.\n", "created_at": "2011-06-07 21:01:39", "user": 6321, "id": 1322504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322912", "text": "Thanks, that's clarifying, except that #2 doesn't work.  If I remove the `require_dependency 'xx/location/geoip_geocoders'` it does not find `XX::Location::GeoipGeocoders` although it is properly nested and located. It gives the error:\n\n`You tried to call GeoipGeocoder#geocode, but GeoipGeocoder is not defined on /Users/xxx/dev/xxx/app/models/xx/location/location.rb:267:in`geoip'`\n\nwhere it  is referenced.  Does AS::Dependencies walk the folder tree only from the referencing `__FILE__`'s dir or does it start with `app/models`?\n\nUnless it's the problem of #1, in which case how do I tell Rails that the enclosing top-level module is really named `XX` and not `Xx` ?\n\nIt may be off-topic, but hopefully definitive answers will help others hitting the same problems over and over again.  Also could someone import lighthouse 2283 to github, and/or how could I gain read access to the old lighthouse tickets (other than goog cache?)\n\nI will try to extract a gist that demonstrates the problem, but it is exactly the situation we are discussing--Rails is not autoloading the tertiary nested model classes.\n", "created_at": "2011-06-07 21:53:26", "user": 167275, "id": 1322912}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323165", "text": "Looking at `XX::Location::GeoipGeocoders` and the error message it seems you still don't have the files in the right place - it needs to be:\n\n```\nXX                          -> 'app/models/xx.rb'\nXX::Location                -> 'app/models/xx/location.rb'\nXX::Location::GeoipGeocoder -> 'app/models/xx/location/geoip_geocoder.rb'\n```\n", "created_at": "2011-06-07 22:38:06", "user": 6321, "id": 1323165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323224", "text": "@pixeltrix Thanks, but nope that's not the problem.  It works regardless of whether `XX:Location` is defined in `app/models/xx/location.rb` or `app/models/xx/location/location.rb` as we would prefer, but only if `require_dependency 'xx/location/geoip_geocoder'` is present. Without the `require_dependency` it does not work even if `Location` is defined in `app/models/xx/location.rb` rather than `xx/location/location.rb`.  Also note there is no `app/models/xx.rb` as the top-level module is merely an empty namespace. \n\nI'll extract a bare example this eve.\n", "created_at": "2011-06-07 22:49:06", "user": 167275, "id": 1323224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324425", "text": "@pixeltrix  OK here ya go brah. I  was able to reproduce in vitro.\nhttps://github.com/tribalvibes/autoload_test\n\nMinimal example that clearly demonstrates that the nested class is not being autoloaded out of the box. See the README.\n", "created_at": "2011-06-08 04:10:50", "user": 167275, "id": 1324425}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324448", "text": "Updated to 3.0.8, same behavior. Let me know if I should open a new issue for this.  Also please answer regarding access to old lighthouse tickets, and also please import lighthouse 2283 to github.\n", "created_at": "2011-06-08 04:16:45", "user": 167275, "id": 1324448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324706", "text": "https://github.com/pixeltrix/autoload_test/commit/c7a217e12df0c4cf57f0cf5746223f3507c12a25\n", "created_at": "2011-06-08 05:51:17", "user": 6321, "id": 1324706}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325419", "text": "@pixeltrix ah, sorry, my bad. That helped find the problem though--another component (mixin) was overriding const_missing. ugh.\n", "created_at": "2011-06-08 08:57:00", "user": 167275, "id": 1325419}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "To reproduce create a new rails project (3.1.rc1) and the following two models (rails g model ...):\n\n```\nclass Account < ActiveRecord::Base\n  has_many :dossiers\n\n  accepts_nested_attributes_for :dossiers\nend\n\nclass Dossier < ActiveRecord::Base\n  belongs_to :account\n\n  validates :name, :invalid => true\nend\n```\n\nRun the migrations. Then invoke the rails console and issue the following commands:\n\n```\na = Account.new\nd = a.dossiers.build\na.save!\n```\n\nThis should fail (as there's no validator called InvalidValidator), but it saves the record without any warnings.\n\n```\nd = Dossier.new\n```\n\nThis fails as expected with \"ArgumentError: Unknown validator: 'InvalidValidator'\"\n", "labels": [], "number": 1423, "updated_at": "2011-06-01 00:13:55", "user": 175494, "closed_at": "2011-06-01 00:13:55", "id": 978398, "title": "exceptions are ignored when creating records through associations", "url": "https://api.github.com/repos/rails/rails/issues/1423", "created_at": "2011-05-31 12:19:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267351", "text": "I can confirm this behavior! \n", "created_at": "2011-05-31 14:31:17", "user": 202410, "id": 1267351}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267712", "text": "I can't seem to reproduce this. I get:\n\n``` ruby\nirb(main):001:0> Account.new\n=> #<Account id: nil, created_at: nil, updated_at: nil>\nirb(main):002:0> a = Account.new\n=> #<Account id: nil, created_at: nil, updated_at: nil>\nirb(main):003:0> d = a.dossiers.build\nNoMethodError: undefined method `new' for InvalidValidator:Module\n```\n\nAnd similarly:\n\n``` ruby\nirb(main):004:0> d = Dossier.new\nNoMethodError: undefined method `new' for InvalidValidator:Module\n```\n\nI tried this on 1.8.7 and 1.9.2. What version are you using?\n", "created_at": "2011-05-31 15:19:54", "user": 16414, "id": 1267712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1267765", "text": "I am using 1.9.2p180 (2011-02-18 revision 30909)\n", "created_at": "2011-05-31 15:26:04", "user": 202410, "id": 1267765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268001", "text": "Same for me. Here's what I get: http://pastie.org/1998785\n\nbundle show: http://pastie.org/1998792\n\nI could also upload the demo project to github if needed.\n", "created_at": "2011-05-31 15:58:00", "user": 175494, "id": 1268001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268167", "text": "Nah, don't worry guys, I think I found the problem. I'll have a patch in a few minutes..\n", "created_at": "2011-05-31 16:19:37", "user": 16414, "id": 1268167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268600", "text": "Great! :)\n", "created_at": "2011-05-31 17:20:59", "user": 175494, "id": 1268600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269216", "text": "farleyknight´s solution works for me :-) \n", "created_at": "2011-05-31 18:47:59", "user": 202410, "id": 1269216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269292", "text": "I didn't test it yet, but looks good. But I wonder why ArgumentErrors are silenced there? Debug left-over?\n", "created_at": "2011-05-31 18:56:38", "user": 175494, "id": 1269292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269303", "text": "Not sure why.. But there are tests for it.\n\nMy tests, however, are kinda sucky. Re-writing them now.\n", "created_at": "2011-05-31 18:58:57", "user": 16414, "id": 1269303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269956", "text": "The reason `ArgumentError` is caught there is that `AS::Dependencies.load_missing_constant` raises it with the message 'Module is not missing constant'. Strange serendipity given the previous issue/pull request #1422. Maybe `load_missing_constant` should raise `NameError`?\n", "created_at": "2011-05-31 20:34:17", "user": 6321, "id": 1269956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270042", "text": "Is this a regression from 3-0-stable?\n", "created_at": "2011-05-31 20:46:30", "user": 1979, "id": 1270042}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270097", "text": "Don't think so - that code section has not been touched. I'm not happy with the proposed solution though - checking the error message of the exception is asking for trouble. What about load_missing_constant raising NameError instead - that way we can get rid of the rescue ArgumentError altogether.\n", "created_at": "2011-05-31 20:54:36", "user": 6321, "id": 1270097}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi guys,\nThank you for doing such a great job, I can't stop getting amazed by how talented and supportive each of you are.\n\nRecently I came across an issue in Rails 3.0.7 which is maybe a bug, so I'm posting it here.\n\n``` ruby\nclass Member < ActiveRecord::Base\n  has_and_belongs_to_many :roles, :uniq => true\nend\n\nclass Role < ActiveRecord::Base\n  has_and_belongs_to_many :members, :uniq => true\nend\n```\n\nIf there is a duplicate in members_roles table, `my_role.members` won't return duplicates (as expected), but\n`my_role.members.where(...)` will return duplicates despite `:uniq => true` setting.\n", "labels": [], "number": 1424, "updated_at": "2011-06-01 04:24:29", "user": 528373, "closed_at": "2011-06-01 04:24:28", "id": 978458, "title": "Habtm, :uniq option, ActiveRecord::QueryMethods ", "url": "https://api.github.com/repos/rails/rails/issues/1424", "created_at": "2011-05-31 12:36:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270068", "text": "Hello, thanks for the report. Please could you try the 3.1 RC and let me know if you still experience the bug?\n", "created_at": "2011-05-31 20:50:15", "user": 1979, "id": 1270068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272066", "text": "I'm sure that this behavior exists since Rails 3.0.1. In the normal case, it would be impossible for `member_roles` table to have the duplicate `member_id` and `role_id`. However, in the race condition it will.\n\nBy setting the `:uniq` option on `has_and_belongs_to_many`, it will not guarantee that you'll have non-duplicate roles/member in complex query. I would suggest you alter the `member_roles` table and make `[member_id, role_id]` as unique keys instead. That will surely prevent this type of duplicate in the future.\n\nI'm closing this, unless you're going to provide a patch for it. Thanks again for reporting in.\n", "created_at": "2011-06-01 04:24:28", "user": 4912, "id": 1272066}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "For some reason, #delete(record) didn't return the record in memory, but the persisted one.\nThis could be considered as a bug in ruby, which is fixed in 1.9.\n", "labels": [], "number": 1425, "updated_at": "2014-06-26 15:41:40", "user": 9347, "closed_at": "2011-05-31 16:00:28", "id": 979457, "title": "fix merging the targer lists in 1.8.", "url": "https://api.github.com/repos/rails/rails/issues/1425", "created_at": "2011-05-31 15:52:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268016", "text": "Just merged in master.!! from https://github.com/rails/rails/pull/1417\n", "created_at": "2011-05-31 16:00:01", "user": 3948, "id": 1268016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268730", "text": "I agree with @dmathieu that his fix was cleaner. Unfortunately the branch was deleted so I couldn't merge it and give you the credit, but I have implemented the fix in 60cb96abead70eb9d510efd56013ec705baf0d63 anyway.\n\nAlso merged into 3-1-stable.\n", "created_at": "2011-05-31 17:39:25", "user": 1979, "id": 1268730}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": " sprockets gem update to beta9\n", "labels": ["actionpack"], "number": 1426, "updated_at": "2014-06-23 03:18:49", "user": 3948, "closed_at": "2011-06-05 08:55:33", "id": 979584, "title": " sprockets gem update to beta9", "url": "https://api.github.com/repos/rails/rails/issues/1426", "created_at": "2011-05-31 16:13:27", "comments": [], "assignees": [9582, 9582], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Following #1417, this improves the code quality by drying it up.\n", "labels": [], "number": 1427, "updated_at": "2014-07-03 04:43:49", "user": 9347, "closed_at": "2011-05-31 17:40:51", "id": 980051, "title": "refactoring in order to avoid code repetition", "url": "https://api.github.com/repos/rails/rails/issues/1427", "created_at": "2011-05-31 17:36:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1268742", "text": "Damn, I just did exactly the same thing after seeing you deleted your original pull request branch! I would have merged this if I'd seen it, sorry!\n", "created_at": "2011-05-31 17:40:51", "user": 1979, "id": 1268742}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": ["activerecord"], "number": 1428, "updated_at": "2014-07-03 04:43:52", "user": 27509, "closed_at": "2011-07-08 21:33:22", "id": 980136, "title": "Fix issue #402 - Destroying a record with habtm association using foreign keys on association table raises a exception", "url": "https://api.github.com/repos/rails/rails/issues/1428", "created_at": "2011-05-31 17:55:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272040", "text": "Do you mind rebase your commits and squash them together, then force push to your branch so this pull request will be updated? I think it would be more useful to have just a single commit.\n", "created_at": "2011-06-01 04:14:55", "user": 4912, "id": 1272040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277860", "text": "Ok. Here is the join commit https://github.com/tomas-stefano/rails/commit/7b27d8553074c94ed2ac4e059c3173ad45a13931\n=D\n", "created_at": "2011-06-01 22:56:31", "user": 27509, "id": 1277860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355480", "text": "Excuse my curiosity, but I wonder if my patch will be accepted ... or not :)\n", "created_at": "2011-06-12 17:24:23", "user": 27509, "id": 1355480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515373", "text": "This also fails on 3-1-stable. So it will have to be cherry-picked on 3-1-stable and master.\n", "created_at": "2011-07-06 21:06:00", "user": 9347, "id": 1515373}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515922", "text": "This looks good enough to be applied if @tenderlove / @jonleighton agrees. I would later refactor it to use only destroy_associations callbacks, without the need to mix it with `after_destroy` callbacks.\n", "created_at": "2011-07-06 22:12:08", "user": 9582, "id": 1515922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1515979", "text": "Does the SQL work cross database?\n", "created_at": "2011-07-06 22:15:56", "user": 3124, "id": 1515979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1535562", "text": "I made some fixups to this patch, ported it to master and 3-1-stable, and then backported to 3-0-stable. Thanks for contributing.\n", "created_at": "2011-07-08 21:33:09", "user": 1979, "id": 1535562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1535568", "text": "FYI, the commits are:\n- 3-0-stable: 28f057c9d2a5122e8ce62337ce2e58c4b3b566da\n- 3-1-stable: 15f5c3bcbd282c9822f0de7b7a796d208229a81a\n- master: ea4b94a7bf707d27af44701fa44ef5f916b84e01\n", "created_at": "2011-07-08 21:34:20", "user": 1979, "id": 1535568}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1536564", "text": ":heart: @jonleighton\n", "created_at": "2011-07-09 01:33:24", "user": 9582, "id": 1536564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1539375", "text": "Thanks for the code refactoring. :heart: @jonleighton\n", "created_at": "2011-07-09 18:21:00", "user": 27509, "id": 1539375}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Assume the following two models:\n\n```\nclass Invoice < ActiveRecord::Base\n  has_many :invoice_items\nend\n\nclass InvoiceItem < ActiveRecord::Base\n  belongs_to :invoice\nend\n```\n\nAnd the routes likes this:\n\n```\nresources :invoices do\n  resources :invoice_items\nend\n```\n\nThe name InvoiceItem has the huge disadvantage that one has to use invoice.invoice_items instead of a intuitive invoice.items. Also the generated url helpers look real ugly, for example \"new_invoice_invoice_item_path(invoice)\" (notice the double invoice_invoice). The paths in the urls are ugly too ;)\n\nSo I changed to namespaced models like this:\n\n```\nclass Invoice < ActiveRecord::Base\n  has_many :items, :class_name => \"Invoice::Item\"\nend\n\nclass Invoice::Item < ActiveRecord::Base\n  belongs_to :invoice\nend\n```\n\nAnd the routes likes this:\n\n```\nresources :invoices do\n  resources :items, :module => \"invoice\"\nend\n```\n\nNow the assocation is named nicely and also the url helpers look pretty. But I can't use dynamic urls (ex. [:new, invoice, :item]) anymore, because the :controller in the path hash is set to \"invoice_item\" instead of \"invoice/item\" and so I get a route not found exception. I suspect this being a bug....or at least something that should be improved.\n", "labels": [], "number": 1429, "updated_at": "2015-09-23 06:04:51", "user": 175494, "closed_at": "2012-04-25 09:10:48", "id": 980250, "title": "proper support for namespaced models", "url": "https://api.github.com/repos/rails/rails/issues/1429", "created_at": "2011-05-31 18:10:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1269581", "text": "Can you try doing url_for(:new, invoice, Invoice::Item.new)? Just using :item is never going to work, since we can't know that you're not referring to a top-level Item. \n", "created_at": "2011-05-31 19:38:33", "user": 2741, "id": 1269581}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1284071", "text": "@gucki why not just do this:\n\n```\nclass Invoice < ActiveRecord::Base\n  has_many :items, :class_name => \"InvoiceItem\"\nend\n```\n", "created_at": "2011-06-02 19:47:37", "user": 5254, "id": 1284071}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298391", "text": "@dhh \nIn fact [:new, @invoice, :item] works. This is because it translates to new_invoice_item_path. \n\nurl_for([:new, @invoice, Invoice::Item.new]) does not work, because it translates to new_invoice_invoice_items_path. Also [:edit, @invoice, item] does not work because it translates to edit_invoice_invoice_item_path, but it must be edit_invoice_item_path only. \n\nI think one solution would be to check the namespace and predecessor of each item in url_for. So if we encounter an Invoice::Item and the predecessor is Invoice, just ignore the namespace (Invoice::) in the path generation. This way we'd get a clean edit_invoice_item_path and everything should work as expected. Too bad I'm not sure if this seems to hacky and if there are any backwars compatibility issues.\n\n@oriolgual\nThis only helps with the name of the assocation. But it does not play well with all the problems mentioned and especially with gems which expect the name of the association being derived from the name of the model (ex cancan).\n\nOther suggestions welcome :)\n", "created_at": "2011-06-03 18:02:14", "user": 175494, "id": 1298391}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1441020", "text": "Here's the monkey patch I'm currently using without any problems so far:\n\n```\nmodule ActionDispatch\n  module Routing\n    module PolymorphicRoutes\n      private\n        def build_named_route_call(records, inflection, options = {})\n          if records.is_a?(Array)\n            record = records.pop\n            route = records.map do |parent|\n              if parent.is_a?(Symbol) || parent.is_a?(String)\n                parent\n              else\n                ActiveModel::Naming.route_key(parent).singularize\n              end\n            end\n          else\n            record = extract_record(records)\n            route  = []\n          end\n\n          if record.is_a?(Symbol) || record.is_a?(String)\n            route << record\n          else\n            record_name = ActiveModel::Naming.route_key(record)\n            route << record_name.gsub(/^#{route.last}_/,'')\n            route = [route.join(\"_\").singularize] if inflection == :singular\n            route << \"index\" if ActiveModel::Naming.uncountable?(record) && inflection == :plural\n          end\n\n          route << routing_type(options)\n\n          action_prefix(options) + route.join(\"_\")\n        end\n    end\n  end\nend\n```\n\nThe only difference to the original this little piece of code\n\n```\nroute << record_name.gsub(/^#{route.last}_/,'')\n```\n\nIt's not super nice but it does the trick.\n", "created_at": "2011-06-26 14:28:01", "user": 175494, "id": 1441020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1486485", "text": "Hi @gucki. I've been working with MongoDB lately and the namespaced pattern has become even more appealing for  embedded documents. Naturally, I faced the same problems you had, and found this ticket in the process of solving them. Besides the routes, I've also noticed an annoyance with the Form Builder, that rightfully writes the attributes of **Invoice::Item** wrapped in a **invoice_item** hash instead of **item**. I'm using Rails 3 with Inherited Resources to keep controllers dry and this little thing ultimately ended up writing a new collection to my database(invoice_item), instead of assigning item records to the invoice.\nSo, instead of patching the route generation I've actually overridden the naming of the **Invoice::Item** class. That way it would expose its **param_key** and **route_key** the way I wanted them to. If you take a look at **ActiveModel::Naming** you'll see that this can be accomplished by extending it and implementing a **model_name** method in your class.\n\n``` ruby\n  # == Active Model Naming\n  # \n  # Creates a +model_name+ method on your object.\n  # \n  # To implement, just extend ActiveModel::Naming in your object:\n  # \n  #   class BookCover\n  #     extend ActiveModel::Naming\n  #   end\n...\n  module Naming\n    # Returns an ActiveModel::Name object for module. It can be\n    # used to retrieve all kinds of naming-related information.\n    def model_name\n      @_model_name ||= begin\n        namespace = self.parents.detect { |n| n.respond_to?(:_railtie) }\n        ActiveModel::Name.new(self, namespace)\n      end\n    end\n...\n```\n\nThe **ActiveModel::Name** initializer takes into account whether the namespaced models are inside isolated or shared engines. I used that to simplify my approach.\n\n``` ruby\nclass Invoice::Item\n  include Mongoid::Document\n  extend ActiveModel::Naming\n\n  def self.model_name\n    ActiveModel::Name.new(self, Invoice)\n  end\n\nend\n```\n\nNow the class behaves like an **Item** for URL generation and other goodies. My routes are declared just like yours:\n\n``` ruby\n  resources :invoices do\n    resources :items, :module => \"invoices\"\n  end\n```\n\nand I keep everything related to the **items** views in an **items** folder under **invoices**.\nIf you're interested in using Inherited Resources, the only thing I had to change to effectively do so was to set the route prefix option to blank. `defaults :route_prefix => \"\"`. \n\n``` ruby\nmodule Invoices\n  class ItemsController < InheritedResources::Base\n    belongs_to :invoice\n    defaults :route_prefix => \"\"\n  end\nend\n```\n\nI hope this helps. \n", "created_at": "2011-07-01 19:56:45", "user": 55675, "id": 1486485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1496772", "text": "Hi @angelim. Thanks for sharing your approach, it seems much nicer than mine. I'll let you know how it works as soon as I found some time to give it a try. :)\n", "created_at": "2011-07-04 09:44:42", "user": 175494, "id": 1496772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1501650", "text": "@gucki,\njust so you know, I think this implementation only works in rails 3.1. The former implementation of ActiveModel::Name initializer only accepts one argument. Receiving the second one is probably an enhancement related to the use of Rails Engines. I've extracted this into a gem that properly requires ActiveModel 3.1.0.beta1. Naturally you could always try a different approach without using the second argument.\n\nhttps://github.com/angelim/mongoid-included\n", "created_at": "2011-07-05 05:44:00", "user": 55675, "id": 1501650}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1772492", "text": "I finally had time to give it a try and it works like a charm! :) :) :)\n\nWhen using Activerecord all you need to insert into the model is:\n\n```\ndef self.model_name\n  ActiveModel::Name.new(self, Page)\nend\n```\n\nThen in the parent model (page here):\n\n```\nhas_many :images, :class_name => \"Page::Image\", :dependent => :destroy\n```\n\nHelpers and routes now like pretty too:\n\n```\nnew_page_image_path(@page)\n```\n\ninstead of\n\n```\nnew_page_page_image_path(@page)\n```\n\nEverything works perfectly fine with cancan etc. too! :)\n", "created_at": "2011-08-10 13:32:34", "user": 175494, "id": 1772492}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5322922", "text": "@gucki Is this issue resolved? If so, please close it. Thanks.\n", "created_at": "2012-04-25 03:15:32", "user": 139443, "id": 5322922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/142463295", "text": "@gucki running into a similar problem myself. Seeing that this issue is more than 3 years old, has anything changed, or is this the recommended approach still?\n", "created_at": "2015-09-23 00:43:26", "user": 545430, "id": 142463295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/142504400", "text": "@abitdodgy Afaik nothing changed and this is still the recommended approach. I'd be happy about better ideas.\n", "created_at": "2015-09-23 06:04:46", "user": 175494, "id": 142504400}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": ["activerecord"], "number": 1430, "updated_at": "2014-06-25 20:45:17", "user": 111473, "closed_at": "2011-06-01 17:41:41", "id": 980522, "title": "test fixes for jruby", "url": "https://api.github.com/repos/rails/rails/issues/1430", "created_at": "2011-05-31 18:59:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270502", "text": "If you did `assert_equal \"0\", bool.reload.attributes_before_type_cast[\"value\"].to_s`, you wouldn't need to have a condition and could have it in only one line :)\n", "created_at": "2011-05-31 21:49:51", "user": 9347, "id": 1270502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271616", "text": "Yes I know, we can do that for the sake of test pass but that will override the test for MRI ruby with MySQL thats why I added the condition.\n", "created_at": "2011-06-01 02:09:38", "user": 111473, "id": 1271616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272027", "text": "Does this one fails for `master` and `3-1-stable` as well?\n", "created_at": "2011-06-01 04:11:31", "user": 4912, "id": 1272027}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273487", "text": "@sikachu commits updated. Jruby with rails  master is totally in bad shape. \n\nOne question Are you now Rails Repo Collab ??  Just seeing a tag on your comment :-) \n", "created_at": "2011-06-01 10:31:00", "user": 111473, "id": 1273487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273498", "text": "yeah. I see you are already in Rails list ;-)\n", "created_at": "2011-06-01 10:33:21", "user": 111473, "id": 1273498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274967", "text": "I'd love to help you guys out to get jRuby to play nice with Rails. Keep them coming.\n\nregarding repo collab, I use this permission just for cleaning up tickets bin ;)\n", "created_at": "2011-06-01 15:17:11", "user": 4912, "id": 1274967}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275407", "text": "@sikachu awesome.!! We will Keep stay for Jruby.\n", "created_at": "2011-06-01 16:22:13", "user": 3948, "id": 1275407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275982", "text": "I merged this into master and 3-1-stable too.\n", "created_at": "2011-06-01 17:52:20", "user": 1979, "id": 1275982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275991", "text": "@jonleighton thanks.!\n", "created_at": "2011-06-01 17:53:18", "user": 3948, "id": 1275991}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Last I saw there were a few open issues on therubyracer. Adding it here so we don't forget for 3.1 final.\n", "labels": [], "number": 1431, "updated_at": "2011-06-08 23:44:43", "user": 2741, "closed_at": "2011-06-08 23:44:43", "id": 980760, "title": "Verify that the therubyracer and uglifier plays nice", "url": "https://api.github.com/repos/rails/rails/issues/1431", "created_at": "2011-05-31 19:47:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1310334", "text": "Latest master of therubyracer is still bust: https://github.com/cowboyd/therubyracer/issues/79\n", "created_at": "2011-06-06 16:42:43", "user": 2741, "id": 1310334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1330919", "text": "Fixed by execjs 1.1.2\n", "created_at": "2011-06-08 23:44:42", "user": 137, "id": 1330919}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The sass-rails gem needs a release and the sass-cleanup branch needs to be merged.\n\nhttps://github.com/rails/rails/commits/sass-cleanup\n\nhttps://github.com/rails/sass-rails\n", "labels": [], "number": 1432, "updated_at": "2011-06-10 16:10:00", "user": 1839, "closed_at": "2011-06-10 16:10:00", "id": 980980, "title": "Land Sass-Rails Integration", "url": "https://api.github.com/repos/rails/rails/issues/1432", "created_at": "2011-05-31 20:23:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272177", "text": "Some of the sass-cleanup branch has already been merged. I have a ticket open with the missing commits see https://github.com/rails/rails/pull/1401. I am currently running sass-rails edge with 3-1-stable and my commit applied.\n", "created_at": "2011-06-01 05:02:34", "user": 35866, "id": 1272177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300690", "text": "All the necessary commits have been applied to 3-1-stable so merging sass-cleanup is complete... only thing left, release sass-rails gem.\n", "created_at": "2011-06-04 04:12:44", "user": 35866, "id": 1300690}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey all. \n\nWorking on a brand new app in preparation for a class.  `gem install rails` seems to install Rake 0.9.0. This results in the 'undefined method 'task' that prevents any of the rake tasks from working.\n\n  Here's a transcript.\n\n```\nruby-1.8.7-p174 ~$ rvm gemset create rails3test\n\nruby-1.8.7-p174 ~$ rvm gemset use rails3test\n\nruby-1.8.7-p174@rails3test tmp$ gem install rails\nSuccessfully installed activesupport-3.0.7\nSuccessfully installed builder-2.1.2\nSuccessfully installed i18n-0.5.0\nSuccessfully installed activemodel-3.0.7\nSuccessfully installed rack-1.2.3\nSuccessfully installed rack-test-0.5.7\nSuccessfully installed rack-mount-0.6.14\nSuccessfully installed tzinfo-0.3.27\nSuccessfully installed abstract-1.0.0\nSuccessfully installed erubis-2.6.6\nSuccessfully installed actionpack-3.0.7\nSuccessfully installed arel-2.0.10\nSuccessfully installed activerecord-3.0.7\nSuccessfully installed activeresource-3.0.7\nSuccessfully installed mime-types-1.16\nSuccessfully installed polyglot-0.3.1\nSuccessfully installed treetop-1.4.9\nSuccessfully installed mail-2.2.19\nSuccessfully installed actionmailer-3.0.7\nSuccessfully installed rake-0.9.0\nSuccessfully installed thor-0.14.6\nSuccessfully installed railties-3.0.7\nSuccessfully installed bundler-1.0.14\nSuccessfully installed rails-3.0.7\n24 gems installed\n\nruby-1.8.7-p174@rails3test tmp$ rails new octest && cd octest\n\nruby-1.8.7-p174@rails3test octest$ bundle\n\nFetching source index for http://rubygems.org/\nUsing rake (0.9.0) \nUsing abstract (1.0.0) \nUsing activesupport (3.0.7) \nUsing builder (2.1.2) \nUsing i18n (0.5.0) \nUsing activemodel (3.0.7) \nUsing erubis (2.6.6) \nUsing rack (1.2.3) \nUsing rack-mount (0.6.14) \nUsing rack-test (0.5.7) \nUsing tzinfo (0.3.27) \nUsing actionpack (3.0.7) \nUsing mime-types (1.16) \nUsing polyglot (0.3.1) \nUsing treetop (1.4.9) \nUsing mail (2.2.19) \nUsing actionmailer (3.0.7) \nUsing arel (2.0.10) \nUsing activerecord (3.0.7) \nUsing activeresource (3.0.7) \nUsing bundler (1.0.14) \nUsing thor (0.14.6) \nUsing railties (3.0.7) \nUsing rails (3.0.7) \nInstalling sqlite3 (1.3.3) with native extensions \nYour bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.\n\nruby-1.8.7-p174@rails3test octest$ rake -T\nrake aborted!\nundefined method `task' for #<Octest::Application:0x101992210>\n```\n", "labels": [], "number": 1433, "updated_at": "2011-05-31 21:48:17", "user": 1306, "closed_at": "2011-05-31 21:43:57", "id": 981386, "title": "Rails 3.0.7 gem installs Rake 0.9.0", "url": "https://api.github.com/repos/rails/rails/issues/1433", "created_at": "2011-05-31 21:37:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270465", "text": "Yes, this is due to backwards incompatible changes in Rake 0.9.0.  Please change your Gemfile to point at Rake 0.8.7 until Rails 3.0.8 is released.\n", "created_at": "2011-05-31 21:43:57", "user": 3124, "id": 1270465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270469", "text": "I believe this issue is fixed in the 3.0.8rc release. Please confirm.\n", "created_at": "2011-05-31 21:44:14", "user": 2687, "id": 1270469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270471", "text": "I can think of a few patches, but I don't really know what the acceptable approach would be given recent comments about dependencies. I'd suggest the default Gemfile at least includes Rake as a dependency, and preferably specifies the version like it does with Rails.\n", "created_at": "2011-05-31 21:44:55", "user": 1306, "id": 1270471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270491", "text": "Groovy!\n", "created_at": "2011-05-31 21:48:17", "user": 1306, "id": 1270491}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This requires string's inflections in mass_assignment security, therefore fixing activemodel's isolation tests.\nI've also removed a useless .rb in a require.\n", "labels": [], "number": 1434, "updated_at": "2014-06-30 19:54:48", "user": 9347, "closed_at": "2011-05-31 21:52:32", "id": 981429, "title": "Mass assignment", "url": "https://api.github.com/repos/rails/rails/issues/1434", "created_at": "2011-05-31 21:44:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270516", "text": ":heart: :heart: :heart:\n", "created_at": "2011-05-31 21:52:09", "user": 1979, "id": 1270516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270526", "text": "Haha, @josevalim and me both tried to merge at the same time... I got a 500 eror!\n", "created_at": "2011-05-31 21:53:17", "user": 1979, "id": 1270526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270534", "text": "If this was the wild west, you would be dead right now. ;)\n", "created_at": "2011-05-31 21:54:14", "user": 9582, "id": 1270534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1270543", "text": "Bro, you'd be dead already given the 'quality' of the music you perform ;)\n", "created_at": "2011-05-31 21:55:27", "user": 1979, "id": 1270543}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently if the code that calls `find_in_batches` modifies the yielded array in place then `find_in_batches` can enter an infinite loop searching with ruby object ids in the database instead of the primary key of records in the database. This happens because it naively assumes the yielded array hasn't been modified before calling `id` on the last object in the array. And ruby (1.8 at least) alias' `id` to `object_id` so an integer is still returned no matter what the last object is.\n\nBy moving finding the `id` of the last object before yielding the array of records it means the calling code can do whatever it wants to the array in terms of modifying it in place, and `find_in_batches` doesn't care. Also moved the count of the array records before yielding in case elements are removed or added when yielded.\n", "labels": ["activerecord"], "number": 1435, "updated_at": "2014-06-26 06:49:09", "user": 696, "closed_at": "2011-06-21 19:08:19", "id": 981470, "title": "Stop find_in_batches using the records after yielding.", "url": "https://api.github.com/repos/rails/rails/issues/1435", "created_at": "2011-05-31 21:55:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1412957", "text": "Refactored the test, going to open a new pull request with that code.\n", "created_at": "2011-06-21 19:08:19", "user": 696, "id": 1412957}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "AR#composed_of can now access the associated record\n\n``` ruby\n    class User < ActiveRecord::Base\n      composed_of :some_aggregation, ...,  :converter => Proc.new { |record, values| ... }\n    end\n```\n\nTested against REE and 1.9.2-p180.\n", "labels": ["activerecord"], "number": 1436, "updated_at": "2014-06-14 01:45:15", "user": 108369, "closed_at": "2012-06-18 19:28:20", "id": 981607, "title": "#364 composed_of: Access record information from converter", "url": "https://api.github.com/repos/rails/rails/issues/1436", "created_at": "2011-05-31 22:24:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1421128", "text": "hey there, this was a great addition, however, i noticed something strange - looks like it make a difference in what order the attributes were specified (i guess the one that is being specified in the composed_of, in this case value)\n\nIn the examples below, currency field is not populated\n\n> > Rate.new(:start_at=>\"2012-12-5\", :end_at=>\"2012-12-8\",:value=>43,:currency=>\"EUR\")\n> > /Users/ilyakatz/NetBeansProjects/xxxx/app/models/rate.rb:17\n> > :converter => Proc.new { |record, value, currency| debugger; Money.new(value || 0, currency) }\n> > (rdb:1) pp record\n> > #<Rate id: nil, start_at: \"2012-12-05 00:00:00\", end_at: \"2012-12-08 00:00:00\", value: nil, rate_type: nil, min_days: 0, entity_id: nil, created_at: nil, updated_at: nil, currency: nil>\n> > \n> > Rate.new(:start_at=>\"2012-12-5\", :end_at=>\"2012-12-8\",:currency=>\"EUR\",:value=>43)\n> > /Users/ilyakatz/NetBeansProjects/xxxx/app/models/rate.rb:17\n> > :converter => Proc.new { |record, value, currency| debugger; Money.new(value || 0, currency) }\n> > (rdb:1) pp record\n> > #<Rate id: nil, start_at: \"2012-12-05 00:00:00\", end_at: \"2012-12-08 00:00:00\", value: nil, rate_type: nil, min_days: 0, entity_id: nil, created_at: nil, updated_at: nil, currency: \"EUR\">\n", "created_at": "2011-06-22 21:10:44", "user": 282514, "id": 1421128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1565135", "text": "Coool!!!\n\nPlease apply this patch to the master branch!\n", "created_at": "2011-07-13 18:46:45", "user": 10075, "id": 1565135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398463", "text": "@cesario Is this still an issue?\n", "created_at": "2012-04-28 17:25:15", "user": 651597, "id": 5398463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399340", "text": "@cesario This pull request can't be cleanly merged any more. While I don't have the authority to merge it in anyway, clean patches are always faster to get merged than ones that aren't. :)\n", "created_at": "2012-04-28 19:13:22", "user": 27786, "id": 5399340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6371631", "text": "If #6743 gets merged, this feature won't be useful.\n", "created_at": "2012-06-16 08:21:21", "user": 27786, "id": 6371631}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey Guys,\n\nThis adds an alias for new to build to the AR collection proxy, this corrects an issue where the collection proxies were not consistent.\n\nEnjoy,\n\nJosh\n", "labels": [], "number": 1437, "updated_at": "2014-07-03 04:44:17", "user": 8701, "closed_at": "2011-05-31 22:54:05", "id": 981732, "title": "Ar collection new alias", "url": "https://api.github.com/repos/rails/rails/issues/1437", "created_at": "2011-05-31 22:44:14", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Allows a user to pass in a custom attribute name in has_secure_password call, like this:\n\n<pre>\nclass User\n   has_secure_password :encrypted_password\nend\n</pre>\n\n\nIf nothing is passed then password_digest is assumed to be the default.\n", "labels": [], "number": 1438, "updated_at": "2014-06-14 17:08:05", "user": 6663, "closed_at": "2011-06-01 00:48:44", "id": 982138, "title": "Custom attribute name in has_secure_password", "url": "https://api.github.com/repos/rails/rails/issues/1438", "created_at": "2011-06-01 00:48:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "@tenderlove do you think this would be better than the conditional?\n\n(Sorry, I had this patch ready to be pushed before you add the conditional. Just want to get your thought on my approach.)\n", "labels": [], "number": 1439, "updated_at": "2014-07-03 04:44:27", "user": 4912, "closed_at": "2011-06-01 02:29:40", "id": 982161, "title": "Isolated PostgreSQL test into PostgreSQL folder", "url": "https://api.github.com/repos/rails/rails/issues/1439", "created_at": "2011-06-01 00:58:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added code to allow users to pass a custom attribute name to has_secure_password.\n\nExample:\n\n<pre>\nclass User\n   has_secure_password :encrypted_password\nend\n</pre>\n", "labels": ["activemodel"], "number": 1440, "updated_at": "2014-07-03 04:44:31", "user": 6663, "closed_at": "2011-06-07 06:55:35", "id": 982240, "title": "Custom attribute name in has_secure_password", "url": "https://api.github.com/repos/rails/rails/issues/1440", "created_at": "2011-06-01 01:28:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1271985", "text": "Assigned to @dhh for review.\n\nI think this ticket looks good to me, just curious if you want to add anything to it or not.\n", "created_at": "2011-06-01 04:01:50", "user": 4912, "id": 1271985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272580", "text": "I think if we allow a customized password field, we need to allow to have more than one secured_password field.\n", "created_at": "2011-06-01 07:10:14", "user": 9347, "id": 1272580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272952", "text": "More than one secure field does make sense. Should I do it in this pull request or may be do it as a separate pull request? Please give your opinion.\n", "created_at": "2011-06-01 08:43:30", "user": 6663, "id": 1272952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272961", "text": "I don't think we need to support more than one field. As maintainer of Devise, nobody has ever asked for a feature like that.\n", "created_at": "2011-06-01 08:46:13", "user": 9582, "id": 1272961}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273325", "text": "I think the ability to encrypt any field and not just password field would be interesting. Something like:\n\n<pre>\nhas_secure_field :some_random_attribute\n</pre>\n\n\nHowever, it would need more work as at the moment the whole idea of secure field is tightly bound to password but IMHO the code should be able to adapt to any field irrespective. Therefore, I would create a diff pull request for it if it's deemed useful.\n\nOpinion?\n", "created_at": "2011-06-01 09:54:23", "user": 6663, "id": 1273325}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1295150", "text": "Any more feedback on this pull request?\n", "created_at": "2011-06-03 10:04:29", "user": 6663, "id": 1295150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296556", "text": "There is a rampant discussion on this topic in issue #1159. My personal opinion is that this is so easy to implement, any non-standard interaction (field name, encryption method, etc.) should just have its own implementation.\n\nIf absolutely needed, any options to `has_secure_password` should be passed in a options hash, e.g. `has_secure_password :column => \"pwd\"`.\n", "created_at": "2011-06-03 13:05:53", "user": 6351, "id": 1296556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313970", "text": "I am closing this after some discussion with other cores. If you want more customization, there are plenty auth tools out there.\n", "created_at": "2011-06-07 06:55:35", "user": 9582, "id": 1313970}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": ["activemodel"], "number": 1441, "updated_at": "2014-06-26 19:21:46", "user": 160941, "closed_at": "2011-06-01 08:13:36", "id": 982518, "title": "Don't add .rb in requires", "url": "https://api.github.com/repos/rails/rails/issues/1441", "created_at": "2011-06-01 03:21:50", "comments": [], "assignees": [3124, 3124], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My (Javascript) assets dir looks like this:\n\n```\napplication.js\nblah/foo.js.coffee\nblah/bar.js.coffee\n```\n\nIn `bar.js.coffee`, there is a line `#= require \"foo\"`, but visiting `http://localhost:3000/assets/blah/bar` shows the compiled `foo.js.coffee` Javascript, but it did not include the JS from `bar.js.coffee`.\n\nIf I move both the files out of the `blah` dir, then `#= require \"foo\"` works as expected.\n\nI've tried `#= require \"./foo\"`, `#= require \"blah/foo\"`, `#= require \"/foo\"`.\n\nI put some debug statements in Sprockets gem, and it doesn't look like it's processing the require statement at all.\n\nThanks.\n", "labels": ["actionpack"], "number": 1442, "updated_at": "2011-06-01 05:41:25", "user": 10292, "closed_at": "2011-06-01 05:41:25", "id": 982681, "title": "sprockets #= require doesn't work with subdirs", "url": "https://api.github.com/repos/rails/rails/issues/1442", "created_at": "2011-06-01 04:35:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272220", "text": "Assigned to @josh to see if ti's a bug or not.\n", "created_at": "2011-06-01 05:17:12", "user": 4912, "id": 1272220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1272293", "text": "Sorry about that, it's not a Rails thing (see second comment)... \nhttps://github.com/sstephenson/sprockets/issues/70\n", "created_at": "2011-06-01 05:41:25", "user": 10292, "id": 1272293}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Set reverse_order_value when asked to reverse_order().\nDo the actual reversal in build_arel.\n\nAnd take in code review comments from @jonleighton:\n- Add tests to ensure expectations of how reverse_order should work\n- Tests are happy in mysql, mysql2, sqlite3, sqlite3_mem, postgresql (I don't have any other dbs available)\n", "labels": [], "number": 1443, "updated_at": "2014-07-03 04:44:41", "user": 4782, "closed_at": "2011-06-01 17:31:58", "id": 983043, "title": "Fix issue #1272 (retry 3)", "url": "https://api.github.com/repos/rails/rails/issues/1443", "created_at": "2011-06-01 06:59:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275832", "text": "Great, thanks. I have merged.\n\nI had to amend the commit to remove trailing white space. You can probably install a plugin or something for your editor which will automatically remove trailing white space, this keeps the diffs clean.\n", "created_at": "2011-06-01 17:31:58", "user": 1979, "id": 1275832}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276094", "text": "Ah, okay. Thanks for the tip.\n", "created_at": "2011-06-01 18:09:46", "user": 4782, "id": 1276094}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Jruby Fixes for 3-1-stable. Already in master.\n", "labels": ["activesupport"], "number": 1444, "updated_at": "2014-06-23 02:54:30", "user": 3948, "closed_at": "2011-06-01 18:39:09", "id": 983522, "title": "Jruby fixes for 3 1 stable", "url": "https://api.github.com/repos/rails/rails/issues/1444", "created_at": "2011-06-01 09:18:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1273356", "text": "I think these will come automatically when we get new commits for 3-1-stable from master. Right ?? \n", "created_at": "2011-06-01 10:01:33", "user": 3948, "id": 1273356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275020", "text": "Can you confirm that all the tests passed?\n\nI'm not sure about merging stuff from 3-1-stable; Usually it go another way around. Do you mind sending another pull request for `master`?\n", "created_at": "2011-06-01 15:25:25", "user": 4912, "id": 1275020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275360", "text": "@sikachu Yes all Jruby Tests passes. \n\nit's in master also. Do you want me to new cheery-pick from master? \n\nIt's in 3-0 stable also. \n\nhttps://github.com/rails/rails/commit/0094351a240598025141409e3aa309ff8b2f5c6c\nhttps://github.com/rails/rails/commit/d16466388eb483dce5d3c559b47254c3b641d668\n", "created_at": "2011-06-01 16:15:48", "user": 3948, "id": 1275360}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The URL http://dev.mysql.com/doc/refman/5.0/en/savepoints.html is no longer available\n", "labels": [], "number": 1445, "updated_at": "2014-07-03 04:44:51", "user": 37484, "closed_at": "2011-06-01 15:45:42", "id": 984047, "title": "The URL http://dev.mysql.com/doc/refman/5.0/en/savepoints.html is no long", "url": "https://api.github.com/repos/rails/rails/issues/1445", "created_at": "2011-06-01 11:44:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1274919", "text": "Out of curiosity, should you fix it by pointing to a correct MySQL documentation instead?\n", "created_at": "2011-06-01 15:11:33", "user": 4912, "id": 1274919}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275086", "text": "Or http://en.wikipedia.org/wiki/Savepoint\n", "created_at": "2011-06-01 15:34:46", "user": 37484, "id": 1275086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275101", "text": "Off topic:\n\n```\nFor save points in video games, see Saved game.\n```\n\n---\n\nYes, I think that should work. Do you mind amend your commit and force-push to your branch? Or you can either push to http://github.com/lifo/docrails, which is the main documentation repository with open-push access. ;)\n", "created_at": "2011-06-01 15:37:10", "user": 4912, "id": 1275101}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275168", "text": "Thank you! I will send the change to lifo/docrails\n", "created_at": "2011-06-01 15:45:42", "user": 37484, "id": 1275168}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello everybody. I was trying to use the gem pjax_rails by dhh in a 3.1 rc1 app. I discovered that the simple call `render :js => \"alert('Hello Rails');\"` (http://guides.rubyonrails.org/layouts_and_rendering.html) made in a controller doesn't behave correctly, as the javascript is not interpreted, but is displayed in the page.\n\nThe same call behaves correctly in a rails 3.0 app. Do we have a problem? Or am I just a noob?\nThank you\n", "labels": ["actionpack", "regression"], "number": 1446, "updated_at": "2014-08-21 16:46:21", "user": 440821, "closed_at": "2011-06-07 14:08:03", "id": 984520, "title": "Wrong behavior of render :js", "url": "https://api.github.com/repos/rails/rails/issues/1446", "created_at": "2011-06-01 13:49:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277050", "text": "Do you mind pushing your test application for us to have a look? It would be easier to investigate the problem.\n\nThank you :)\n", "created_at": "2011-06-01 20:47:04", "user": 4912, "id": 1277050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279728", "text": "Take it: https://github.com/oli-g/samurais_app\nCreate a samurai and show it. The js alert is displayed as text.\n\nFor the same reason, this doesn't work either: https://github.com/rails/pjax_rails/blob/master/lib/pjax.rb\n\nAm I missing some configuration?\nThank you for the support!\n", "created_at": "2011-06-02 09:00:51", "user": 440821, "id": 1279728}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1293656", "text": "I have the same issue.\n", "created_at": "2011-06-03 08:54:36", "user": 12844, "id": 1293656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304574", "text": "@sikachu any update here? I can help you to fix this... but I'm a noob in the field Rails internals: can you give me a starting point where I can begin to look to?\n", "created_at": "2011-06-05 13:41:25", "user": 440821, "id": 1304574}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315915", "text": ":js is no longer supported. It has gone away with the other RJS stuff.\n", "created_at": "2011-06-07 14:08:03", "user": 9582, "id": 1315915}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316070", "text": "Ah ok! But does @dhh know about this? :))) Watch this: https://github.com/rails/pjax_rails/blob/master/lib/pjax.rb\n\nAnyway, thank you!\n", "created_at": "2011-06-07 14:27:45", "user": 440821, "id": 1316070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316571", "text": "Sorry, you are right, I was wrong. :js still works:\n\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/renderers.rb#L101\n\nFor the JS to be interpreted, you need to change your JS library. For example, there is a configuration option you pass to jquery that says that you are returning a script, so it is executed automatically.\n\nEarlier I thought you were passing an rjs lambda to :js, sorry for the wrong response.\n", "created_at": "2011-06-07 15:21:18", "user": 9582, "id": 1316571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316809", "text": "No problem! I will investigate on this configuration option for jquery. But do we have to reopen this issue?\nThank you.\n", "created_at": "2011-06-07 15:36:43", "user": 440821, "id": 1316809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317168", "text": "No, it is js specific not a rails issue.\n", "created_at": "2011-06-07 16:02:22", "user": 9582, "id": 1317168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/52947808", "text": "Did anyone solve this?  Render does not work with the example code: render js: \"alert('Hello Rails');\". Since render does not work as advertised and it is a Rails call, I would assert this is a Rails issue.\n\nWe've tried creating a js.erb file with the same result. It prints the javascript to the screen. This appears to be a gaping security hole too. This could give an attacker access to see internal methods  and information that may not otherwise be exposed. \n", "created_at": "2014-08-21 16:46:21", "user": 8515643, "id": 52947808}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Ruby 1.8 doesn't accepts empty strings to be converted to symbols.\nAn empty route would therefore generate an error.\n\nSee, as a use case of this, the issue #1210.\n", "labels": ["actionpack"], "number": 1447, "updated_at": "2014-06-26 18:54:44", "user": 9347, "closed_at": "2011-06-01 19:47:30", "id": 984544, "title": "Fix creating an empty route on 1.8. Closes #1210", "url": "https://api.github.com/repos/rails/rails/issues/1447", "created_at": "2011-06-01 13:53:36", "comments": [], "assignees": [52642, 52642], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Per discussion at https://github.com/rails/rails/commit/1632a3a49fb318be25d832b7efb17093bd7ef8ae#commitcomment-409761\n", "labels": [], "number": 1448, "updated_at": "2014-06-26 18:54:47", "user": 14947, "closed_at": "2011-06-01 14:49:42", "id": 984761, "title": "Require attr_internal before using in ActionView::Helpers", "url": "https://api.github.com/repos/rails/rails/issues/1448", "created_at": "2011-06-01 14:32:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For security reasons(session hijacking, for example), I think that it could be a good idea to default cookies to httpOnly: https://www.owasp.org/index.php/HttpOnly\n\n(any reason for not doing that - apart of being 'kind of' backwards incompatible?)\n\nrelated:\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/response.rb#L136\nhttps://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/middleware/cookies.rb#L220\nhttps://github.com/rack/rack/issues/184\n", "labels": ["actionpack", "security"], "number": 1449, "updated_at": "2014-04-23 16:05:01", "user": 4867, "closed_at": "2011-06-08 00:03:18", "id": 985602, "title": "default cookies to httpOnly", "url": "https://api.github.com/repos/rails/rails/issues/1449", "created_at": "2011-06-01 17:19:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275787", "text": "Let's hear feedback from @josh? As long as this cookie would work on both `http` and `https`, I'm fine.\n", "created_at": "2011-06-01 17:23:32", "user": 4912, "id": 1275787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1275833", "text": "the main point is that setting cookies to httponly, they can't be read by javascript (so we have a better protection against session hijacking).\n\n> HttpOnly is a an option which specifies that the cookie (session identifiers included) should not be accessed from the application DOM. In that case the attacker cannot hijack the session because document.cookie will not return anything useful.\n\nbtw, I said that it is 'kind of' backwards incompatible because the only thing I can image that could break is if someone is reading cookies with javascript intentionally in his app.\n", "created_at": "2011-06-01 17:32:11", "user": 4867, "id": 1275833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314060", "text": "The session is already httponly. So is there a strong reason to set _all_ cookies httponly?\n", "created_at": "2011-06-07 07:17:42", "user": 9582, "id": 1314060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323550", "text": "I think that the question should be \"why not?\".\n", "created_at": "2011-06-08 00:01:13", "user": 4867, "id": 1323550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323562", "text": "Backwards incompat.\n", "created_at": "2011-06-08 00:03:18", "user": 137, "id": 1323562}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11830485", "text": "Now that Rails 4 is on the horizon, and backwards incompatibilities can be expected, is this something that should be reconsidered?\n", "created_at": "2013-01-03 00:17:14", "user": 4338, "id": 11830485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11972524", "text": "Rails 4 is a backwards-compatible (as much as possible) release, and feature requests don't belong on the issues tracker anyway.\n", "created_at": "2013-01-07 21:26:11", "user": 27786, "id": 11972524}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/40323640", "text": "Seems like there should be a way to tell Rails to make all cookies httponly by default, right? Instead of having to remember to set the httponly flag each time you save a cookie.\n", "created_at": "2014-04-13 23:29:43", "user": 1179, "id": 40323640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41033433", "text": "@joevandyk : Please talk about feature requests on the mailing list. It looks like there is still [a topic](https://groups.google.com/forum/#!topic/rubyonrails-core/yDzoifkfqvc) about your proposal ; unfortunately, it hasn't been commented yet.\n", "created_at": "2014-04-22 12:28:29", "user": 354185, "id": 41033433}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41109239", "text": "Maybe we can get @xuchu to think about this one for his gsoc project\n", "created_at": "2014-04-22 23:38:53", "user": 55829, "id": 41109239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41180079", "text": "@chancancode I can work on it when building the expiring signed cookie jar.\n", "created_at": "2014-04-23 16:05:01", "user": 1195715, "id": 41180079}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "cc: @jonleighton, @tenderlove\n\nAs of PR #1410, this change try to respect table  with qualified schemas in postgres\n\nnow you can do something like this on a migration file:\n\n``` ruby\n    create_table 'myschema.mytable' do |t|  \n      t.string :column          , :null => false, :limit => 20\n      t.timestamps  \n    end\n```\n\nsomething I want to work soon is to create schemas in migrations without breaking dump and create tasks(that will also break test tasks)\n", "labels": ["activerecord"], "number": 1450, "updated_at": "2014-06-15 10:15:05", "user": 6397, "closed_at": "2012-05-03 19:19:39", "id": 985926, "title": "Support to dump and load of postgresql schemas", "url": "https://api.github.com/repos/rails/rails/issues/1450", "created_at": "2011-06-01 18:17:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276286", "text": "Hiya,\n\nThis looks identical to what I reverted, which broke the tests.\n\nThe reason it broke is because [this line](https://github.com/rails/rails/blob/master/activerecord/test/cases/adapters/postgresql/schema_authorization_test.rb#L104) is checking for 'schema_things', but after your change the entry is 'rails_pg_schema_user1.schema_things', hence the assertion fails.\n\nI'm not sure what the 'right' behaviour is here so I will let @tenderlove comment as he is more familiar with the adapters code.\n\nJon\n", "created_at": "2011-06-01 18:44:08", "user": 1979, "id": 1276286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276344", "text": "Hi Jon,\n\nYes, almost the same.\nThe fix is at line 663  https://github.com/rails/rails/pull/1450/files#L0R663\nNow I'm checking if the schemaname is a authorization schema for the current user.\n\nI ran the test that you're pointing and it pass now.\n\nDid you run it with this new patch?\n", "created_at": "2011-06-01 18:54:24", "user": 6397, "id": 1276344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276394", "text": "Ok, I didn't notice the difference. I will let @tenderlove check it over.\n\nJust on a code quality point, I would prefer if you hadn't changed the if/else statement into a ternary.\n", "created_at": "2011-06-01 19:01:16", "user": 1979, "id": 1276394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276434", "text": "Ok, lets wait for him.\nAbout your point, I stopped for 5min to think about it before rewrote as ternary.\nIs that preference (if/else over ternary) a ruby pattern? \n\nthanks for the tip.\n", "created_at": "2011-06-01 19:06:24", "user": 6397, "id": 1276434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1276448", "text": "There's no hard and fast rule, but if an if/else is at all complicated, then I favour a full if/else rather than ternary. I find it easier to read. Especially in this case where your condition includes an `==` in addition to the `=` in the assignment.\n", "created_at": "2011-06-01 19:09:55", "user": 1979, "id": 1276448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277153", "text": "Agreed @jonleighton\nThe multiple '=' chars in the line may lead to misunderstandings in the future.\n", "created_at": "2011-06-01 21:05:35", "user": 6397, "id": 1277153}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328254", "text": "@tenderlove, \nAs the \"same\" PR was merged before, but reverted due to a little break, that I fixed now\n\nIs anything else left to merge this?\n\nCheers\n-lucas\n", "created_at": "2011-06-08 17:16:24", "user": 6397, "id": 1328254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398016", "text": "Is this still an issue @lucasts?\n", "created_at": "2012-04-28 16:33:14", "user": 651597, "id": 5398016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399183", "text": "This pull request cannot be automatically merged. If you still want to merge it, please rebase against the master. If no, please close it.\n\nThanks.\n", "created_at": "2012-04-28 18:54:50", "user": 47848, "id": 5399183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5495931", "text": "I'll close this PR and investigate the current status of the root problem.\n\nIf I found something that need fix I will create a new PR with uptated code. Since last interaction I found other issues with postgresql schema support that need to be fixed too. \n", "created_at": "2012-05-03 19:19:39", "user": 6397, "id": 5495931}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I should be putting this in previous pull request. \n\nIt's already in master.\n\nSorry for sending again. I will try to fix all the places in one pull request.\n\nYou can see this also. https://github.com/rails/rails/pull/1426\n\n:-)\n", "labels": ["activesupport"], "number": 1451, "updated_at": "2014-06-23 02:57:25", "user": 3948, "closed_at": "2011-06-01 19:42:42", "id": 986427, "title": "3-1-stable import to java_import", "url": "https://api.github.com/repos/rails/rails/issues/1451", "created_at": "2011-06-01 19:31:18", "comments": [], "assignees": [1979, 1979], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is related to the new streaming.\n\nWhenever I post to user_session (using authlogic) via request specs (or for that matter cucumber or controller specs rendering views) For now I have pended these things. I'm betting this is going to be similar to the flash issue.\n\nI don't have time just now to look into this more then I have, maybe this weekend if no one gets to it.\n", "labels": ["actionpack"], "number": 1452, "updated_at": "2013-10-13 10:50:30", "user": 156253, "closed_at": "2011-06-17 18:49:53", "id": 986756, "title": "[Rails 3.1 edge] ActionDispatch::ClosedError: Cannot modify cookies because it was closed. This means it was already streamed back to the client or converted to HTTP headers.", "url": "https://api.github.com/repos/rails/rails/issues/1452", "created_at": "2011-06-01 20:43:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277040", "text": "Do you have any middleware that accessing the cookie?\n", "created_at": "2011-06-01 20:45:58", "user": 4912, "id": 1277040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1277302", "text": "Nope, it straight authlogic with the following helpers: https://gist.github.com/1003373\nmy spec helper: https://gist.github.com/1003383\nmy request spec: https://gist.github.com/1003385\nMy user session model: https://gist.github.com/1003387\nmy factories: https://gist.github.com/1003388\n\nIt was working till I upgraded to 3.1 last week.\n\nI have tried quite a few work arounds with no luck yet.\n", "created_at": "2011-06-01 21:29:51", "user": 156253, "id": 1277302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278020", "text": "Thank you. I'll dig around to see if I can reproduce.\n\nAnyway, just to make sure, you're on the latest version of `rspec-rails` (2.6.1) right? I think all versions before 2.6.1 is broken on Rails 3.1.\n", "created_at": "2011-06-01 23:33:06", "user": 4912, "id": 1278020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278441", "text": "yup.\n\nOn Wed, Jun 1, 2011 at 4:33 PM, sikachu <\nreply@reply.github.com>wrote:\n\n> Thank you. I'll dig around to see if I can reproduce.\n> \n> Anyway, just to make sure, you're on the latest version of `rspec-rails`\n> (2.6.1) right? I think all versions before 2.6.1 is broken on Rails 3.1.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1452#comment_1278020\n\n## \n\n E. James OKelly\n\nChief Technologist\nRubyistLabs, llc.\n\n+1 760 851 1046\njames@rubyloves.me\n", "created_at": "2011-06-02 01:36:42", "user": 156253, "id": 1278441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1285258", "text": "@dreamr can you gave us a github repo of a minimal app with the failing test?\n", "created_at": "2011-06-02 22:05:20", "user": 52642, "id": 1285258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1306020", "text": "I'm seeing the same thing. I also use authlogic. I am seeing the issue with Cucumber features though.\n", "created_at": "2011-06-05 21:19:52", "user": 8556, "id": 1306020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315931", "text": "It seems to be an authlogic issue? It seems to be storing cookies somewhere and modifying them after they are sent back.\n", "created_at": "2011-06-07 14:09:41", "user": 9582, "id": 1315931}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327548", "text": "It would help if any of you guys can share an application that shows the error\n", "created_at": "2011-06-08 15:34:05", "user": 52642, "id": 1327548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327577", "text": "I'll try to set up an example.\n", "created_at": "2011-06-08 15:38:17", "user": 8556, "id": 1327577}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329621", "text": "@dreamr are you also using Factory Girl? Looking at my failing Cucumber scenarios I see that they are actually failing when a User instance is being created with Factory(:user). So far in a test app I've created the same problem does not manifest with Cucumber and Authlogic alone. Still digging...\n", "created_at": "2011-06-08 20:33:02", "user": 8556, "id": 1329621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329695", "text": "FactoryGirl was a red herring. I've reproduced the error without it. I'll publish the repo momentarily.\n", "created_at": "2011-06-08 20:43:20", "user": 8556, "id": 1329695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329722", "text": "Here's the repo: https://github.com/aeden/rails31_authlogic.\n\nTo get it blow up run cucumber.\n", "created_at": "2011-06-08 20:49:18", "user": 8556, "id": 1329722}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342968", "text": "Same problem here, using ActionController::IntegrationTest, factory_girl, capybara & authlogic (no cucumber). I'll try to find out what's happening in the authlogic after_save callback. Trace:\n\n```\nActionDispatch::ClosedError: Cannot modify cookies because it was closed. This means it was already streamed back to the client or converted to HTTP headers.\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/actionpack-3.1.0.rc1/lib/action_dispatch/middleware/cookies.rb:157:in `[]='\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/session/cookies.rb:167:in `save_cookie'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activesupport-3.1.0.rc1/lib/active_support/callbacks.rb:395:in `_run_after_save_callbacks'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activesupport-3.1.0.rc1/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/session/callbacks.rb:87:in `after_save'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/session/existence.rb:71:in `save'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/session/existence.rb:30:in `create'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/acts_as_authentic/session_maintenance.rb:113:in `create_session'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/authlogic-3.0.3/lib/authlogic/acts_as_authentic/session_maintenance.rb:103:in `maintain_sessions'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activesupport-3.1.0.rc1/lib/active_support/callbacks.rb:418:in `_run_save_callbacks'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activesupport-3.1.0.rc1/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/callbacks.rb:264:in `create_or_update'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/persistence.rb:53:in `save!'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/validations.rb:56:in `save!'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/attribute_methods/dirty.rb:33:in `save!'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/transactions.rb:246:in `block in save!'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/transactions.rb:295:in `block in with_transaction_returning_status'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/connection_adapters/abstract/database_statements.rb:183:in `transaction'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/transactions.rb:208:in `transaction'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/transactions.rb:293:in `with_transaction_returning_status'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/activerecord-3.1.0.rc1/lib/active_record/transactions.rb:246:in `save!'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/factory_girl-1.3.3/lib/factory_girl/proxy/create.rb:6:in `result'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/factory_girl-1.3.3/lib/factory_girl/factory.rb:330:in `run'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/factory_girl-1.3.3/lib/factory_girl/factory.rb:273:in `create'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/factory_girl-1.3.3/lib/factory_girl/factory.rb:304:in `default_strategy'\n    /Users/nedforce/.rvm/gems/ruby-1.9.2-p180@rails31/gems/factory_girl-1.3.3/lib/factory_girl.rb:20:in `Factory'\n    /Users/nedforce/projects/wizer/test/integration/authentication_test.rb:6:in `block in <class:AuthenticationTest>'\n```\n", "created_at": "2011-06-10 15:16:06", "user": 19221, "id": 1342968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365201", "text": "This has not been fixed in RC4 either. Is this an authlogic or an actiondispatch issue? Note that I found out that it works when running one test at a time, but running 'rake test:integration' when having multiple tests or when running one test class with multiple test definitions in it, it fails.\n", "created_at": "2011-06-14 10:55:28", "user": 19221, "id": 1365201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1375716", "text": "@moiristo @aeden @dreamr I'd like to see a minimal app without cucumber too. If you guys can set up the minimal app that makes this fail that would help a lot. So NO fgirl, NO cucumber, NO capybara is that possible?. Just Rails 3.1.rc4 + authlogic the latest version. I will take a look right now.\n", "created_at": "2011-06-15 18:20:08", "user": 52642, "id": 1375716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1375857", "text": "Another question the app works ok and it's failing in the test environment or do you get the error also in development and production?\n", "created_at": "2011-06-15 18:42:19", "user": 52642, "id": 1375857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377665", "text": "No, it's only failing in the test env. I'll try to strip out fgirl & capybara in my current app..\n", "created_at": "2011-06-15 23:32:21", "user": 19221, "id": 1377665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377773", "text": "@moiristo that's great if you can share with me a reduced sample app I will take a look ;)\n", "created_at": "2011-06-15 23:53:21", "user": 52642, "id": 1377773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386818", "text": "Hi, I created a sample app using plain ol' ActionController::IntegrationTest which also raises the same error: https://github.com/moiristo/rails31_al_cookie_bug\n", "created_at": "2011-06-17 08:33:52", "user": 19221, "id": 1386818}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390130", "text": "This is an authlogic bug. It is storing an instance of the controller in a thread variables and modifying the cookies after the response is sent back to the client.\n\nYou can clearly see in the backtrace that the error comes from a model callback. This is nasty. Storing the controller in threads variables so it can be accessible from the model is one of the worst ways to violate MVC.\n", "created_at": "2011-06-17 18:49:53", "user": 9582, "id": 1390130}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390139", "text": "Proof of the crime:\n\nhttps://github.com/binarylogic/authlogic/blob/master/lib/authlogic/controller_adapters/rails_adapter.rb#L41\nhttps://github.com/binarylogic/authlogic/blob/master/lib/authlogic/session/cookies.rb#L167\n", "created_at": "2011-06-17 18:51:55", "user": 9582, "id": 1390139}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1442408", "text": "Calling it a \"crime\" is a little harsh. The whole point of Authlogic is letting you abstract session data as just another model in your app. I'm going to try and think of a cleaner way to pass the session data that authlogic needs, in a cleaner way. Maybe as a before_filter or middleware.\n", "created_at": "2011-06-26 20:12:13", "user": 12020, "id": 1442408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1666523", "text": "How come this issue was closed 3 years before it was opened? I get the same error message running a Cucumber test as soon as I create a user. My app uses Authlogic too.\nThe issue is also discussed in the authlogic gem:\nhttps://github.com/binarylogic/authlogic/issues/262\n", "created_at": "2011-07-27 18:56:12", "user": 10217, "id": 1666523}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1797630", "text": "Don't think this is just an authlogic bug. I'm using devise / rails 3.1rc5 and also getting :\n\nActionDispatch::ClosedError / Cannot modify cookies because it was closed. This means it was already streamed back to the client or converted to HTTP headers.\n\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:162:in `[]='\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:291:in`[]='\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/session/cookie_store.rb:67:in `set_cookie'\nrack (1.3.2) lib/rack/session/abstract/id.rb:311:in`commit_session'\nrack (1.3.2) lib/rack/session/abstract/id.rb:196:in `context'\nrack (1.3.2) lib/rack/session/abstract/id.rb:190:in`call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:326:in `call'\nactiverecord (3.1.0.rc5) lib/active_record/query_cache.rb:62:in`call'\nactiverecord (3.1.0.rc5) lib/active_record/connection_adapters/abstract/connection_pool.rb:466:in `call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/callbacks.rb:29:in`call'\nactivesupport (3.1.0.rc5) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nactivesupport (3.1.0.rc5) lib/active_support/callbacks.rb:81:in`send'\nactivesupport (3.1.0.rc5) lib/active_support/callbacks.rb:81:in `run_callbacks'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/callbacks.rb:28:in`call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/reloader.rb:68:in `call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/remote_ip.rb:48:in`call'\nvidibus-routing_error (0.2.0) lib/./lib/vidibus/routing_error/rack.rb:13:in `call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/show_exceptions.rb:47:in`call'\nrailties (3.1.0.rc5) lib/rails/rack/logger.rb:13:in `call'\nrack (1.3.2) lib/rack/methodoverride.rb:24:in`call'\nrack (1.3.2) lib/rack/runtime.rb:17:in `call'\nactivesupport (3.1.0.rc5) lib/active_support/cache/strategy/local_cache.rb:72:in`call'\nrack (1.3.2) lib/rack/lock.rb:15:in `call'\nactionpack (3.1.0.rc5) lib/action_dispatch/middleware/static.rb:53:in`call'\nrailties (3.1.0.rc5) lib/rails/engine.rb:455:in `call'\nrailties (3.1.0.rc5) lib/rails/railtie/configurable.rb:30:in`send'\nrailties (3.1.0.rc5) lib/rails/railtie/configurable.rb:30:in `method_missing'\nrack (1.3.2) lib/rack/showexceptions.rb:24:in`call'\nrailties (3.1.0.rc5) lib/rails/rack/content_length.rb:16:in `call'\nrailties (3.1.0.rc5) lib/rails/rack/log_tailer.rb:14:in`call'\nrack (1.3.2) lib/rack/handler/webrick.rb:59:in `service'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/httpserver.rb:104:in`service'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:173:in`start_thread'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:162:in `start'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:162:in`start_thread'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:95:in `start'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:92:in`each'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:92:in `start'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:23:in`start'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:82:in `start'\nrack (1.3.2) lib/rack/handler/webrick.rb:13:in`run'\nrack (1.3.2) lib/rack/server.rb:265:in `start'\nrailties (3.1.0.rc5) lib/rails/commands/server.rb:70:in`start'\nrailties (3.1.0.rc5) lib/rails/commands.rb:54\nrailties (3.1.0.rc5) lib/rails/commands.rb:49:in `tap'\nrailties (3.1.0.rc5) lib/rails/commands.rb:49\nscript/rails:6:in`require'\nscript/rails:6\n", "created_at": "2011-08-13 14:55:32", "user": 600494, "id": 1797630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1797643", "text": "@sreid99 can you share a minimal failing app for us to check?\n", "created_at": "2011-08-13 15:01:02", "user": 52642, "id": 1797643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1797695", "text": "That could take me quite a while - I assume you'd need access to the code ?\nIs there a quicker way - logs files / doing some guided debugging myself etc. ?\n", "created_at": "2011-08-13 15:23:18", "user": 600494, "id": 1797695}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1797729", "text": "@sreid99 we do need a failure app to reproduce this.\n", "created_at": "2011-08-13 15:36:58", "user": 9582, "id": 1797729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1797732", "text": "I managed to clear the error for my case. I had a line in the index view for my user controller, of the form :\n\n<%= link_to \"Re-generate all users\", regenerate_all_users_user_path, :method => :put %>\n\nI fixed it adding an unused param. : \n\n<%= link_to \"Re-generate all users\", regenerate_all_users_user_path(@users.first), :method => :put %>\n", "created_at": "2011-08-13 15:38:10", "user": 600494, "id": 1797732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1799021", "text": "@sreid99 you didn't fix it, you worked around the issue. Nothing wrong with that but the issue still needs to be fixed.\n", "created_at": "2011-08-13 21:08:01", "user": 8556, "id": 1799021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1800763", "text": "What does vidibus-routing_error do? It's sound very fishy in that stack trace. \n\nSent from my iPad\n\nOn 13 ส.ค. 2554, at 10:55, sreid99reply@reply.github.com wrote:\n\n> Don't think this is just an authlogic bug. I'm using devise / rails 3.1rc5 and also getting :\n> \n> ActionDispatch::ClosedError / Cannot modify cookies because it was closed. This means it was already streamed back to the client or converted to HTTP headers.\n> \n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:162:in `[]='\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:291:in`[]='\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/session/cookie_store.rb:67:in `set_cookie'\n> rack (1.3.2) lib/rack/session/abstract/id.rb:311:in`commit_session'\n> rack (1.3.2) lib/rack/session/abstract/id.rb:196:in `context'\n> rack (1.3.2) lib/rack/session/abstract/id.rb:190:in`call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/cookies.rb:326:in `call'\n> activerecord (3.1.0.rc5) lib/active_record/query_cache.rb:62:in`call'\n> activerecord (3.1.0.rc5) lib/active_record/connection_adapters/abstract/connection_pool.rb:466:in `call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/callbacks.rb:29:in`call'\n> activesupport (3.1.0.rc5) lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\n> activesupport (3.1.0.rc5) lib/active_support/callbacks.rb:81:in`send'\n> activesupport (3.1.0.rc5) lib/active_support/callbacks.rb:81:in `run_callbacks'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/callbacks.rb:28:in`call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/reloader.rb:68:in `call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/remote_ip.rb:48:in`call'\n> vidibus-routing_error (0.2.0) lib/./lib/vidibus/routing_error/rack.rb:13:in `call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/show_exceptions.rb:47:in`call'\n> railties (3.1.0.rc5) lib/rails/rack/logger.rb:13:in `call'\n> rack (1.3.2) lib/rack/methodoverride.rb:24:in`call'\n> rack (1.3.2) lib/rack/runtime.rb:17:in `call'\n> activesupport (3.1.0.rc5) lib/active_support/cache/strategy/local_cache.rb:72:in`call'\n> rack (1.3.2) lib/rack/lock.rb:15:in `call'\n> actionpack (3.1.0.rc5) lib/action_dispatch/middleware/static.rb:53:in`call'\n> railties (3.1.0.rc5) lib/rails/engine.rb:455:in `call'\n> railties (3.1.0.rc5) lib/rails/railtie/configurable.rb:30:in`send'\n> railties (3.1.0.rc5) lib/rails/railtie/configurable.rb:30:in `method_missing'\n> rack (1.3.2) lib/rack/showexceptions.rb:24:in`call'\n> railties (3.1.0.rc5) lib/rails/rack/content_length.rb:16:in `call'\n> railties (3.1.0.rc5) lib/rails/rack/log_tailer.rb:14:in`call'\n> rack (1.3.2) lib/rack/handler/webrick.rb:59:in `service'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/httpserver.rb:104:in`service'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:173:in`start_thread'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:162:in `start'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:162:in`start_thread'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:95:in `start'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:92:in`each'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:92:in `start'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:23:in`start'\n> C:/RailsInstaller/Ruby1.8.7/lib/ruby/1.8/webrick/server.rb:82:in `start'\n> rack (1.3.2) lib/rack/handler/webrick.rb:13:in`run'\n> rack (1.3.2) lib/rack/server.rb:265:in `start'\n> railties (3.1.0.rc5) lib/rails/commands/server.rb:70:in`start'\n> railties (3.1.0.rc5) lib/rails/commands.rb:54\n> railties (3.1.0.rc5) lib/rails/commands.rb:49:in `tap'\n> railties (3.1.0.rc5) lib/rails/commands.rb:49\n> script/rails:6:in`require'\n> script/rails:6\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1452#issuecomment-1797630\n", "created_at": "2011-08-14 07:27:01", "user": 4912, "id": 1800763}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1800945", "text": "vidibus-routing_error (https://github.com/vidibus/vidibus-routing_error) is used to workaround a 404 page error in rails 3 (see https://rails.lighthouseapp.com/projects/8994/tickets/4444-can-no-longer-rescue_from-actioncontrollerroutingerror). Without it I get a routing error displayed for invalid urls (e.g. www.example.com/33333), instead of a 404 page. The link above said it might be fixed in Rails 3.1.\n\nI just removed vidibus-routing_error, and found the following :\n- the routing error display still exists in rails 3.1\n- instead of the original ActionDispatch::ClosedError error above, I'm now getting a 404 page when I use\n\n<%= link_to \"Re-generate all users\", regenerate_all_users_user_path, :method => :put %>\n\nThe change below still works :\n\n<%= link_to \"Re-generate all users\", regenerate_all_users_user_path(@users.first), :method => :put %>\n\nFor now vidibus-routing_error plus the \"fix\" above, solves both issues in my case. \n", "created_at": "2011-08-14 08:59:06", "user": 600494, "id": 1800945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1801002", "text": "So that means the `vidibus-routing_error` plugin may access the cookie, and that `regenerate_all_users_user_path` path is actually not exists, or it requires that user argument. As that plugin trying to rescue the 404 error, it raises another error on accessing the cookie.\n\nI think that mean there's nothing to be fixed here on the Rails side, as it should be fixed on the plugin by not accessing/modifying the cookie.\n", "created_at": "2011-08-14 09:32:22", "user": 4912, "id": 1801002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1805018", "text": "I did some digging into this for AuthLogic and found it seems to indeed be an AuthLogic issue, but not where @josevalim was pointing. The issue is in its automatic session maintenance here:\n\nhttps://github.com/binarylogic/authlogic/blob/master/lib/authlogic/acts_as_authentic/session_maintenance.rb#L66\n\nSo, if you create a model that actsasauthentic _outside_ of a controller request, like to factory a user to login with, that's when you get ActionDispatch::ClosedError, not during the controller request.\n\nMore detail and possible solutions here:\n\nhttps://github.com/binarylogic/authlogic/issues/262#issuecomment-1804988\n", "created_at": "2011-08-15 06:08:49", "user": 6724, "id": 1805018}], "assignees": [52642, 52642], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Please do not merge master. Fix broken 3-0-stable.\n", "labels": [], "number": 1453, "updated_at": "2014-07-03 04:45:14", "user": 3948, "closed_at": "2011-06-02 03:21:13", "id": 988046, "title": "Only for 3-0-stable ", "url": "https://api.github.com/repos/rails/rails/issues/1453", "created_at": "2011-06-02 02:38:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278632", "text": "Discussion reference here \n\nhttps://github.com/rails/rails/commit/230f78875999ed566cbfc54c3b824420ea082f4b#commitcomment-410835\n", "created_at": "2011-06-02 02:40:37", "user": 3948, "id": 1278632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278741", "text": "Hi,\n\nI think the best way to resolve that to revert this commit instead [4c0bed0cf0b01c4f063f39fc8e503e97d4661832]\n\nThank you for sending in, I'm really appreciate it. I tried to test it with JRuby too, and totally unable to try it. If you're working on fixing the tests for JRuby that's going to be awesome.\n", "created_at": "2011-06-02 03:21:13", "user": 4912, "id": 1278741}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1278757", "text": "@sikachu yeah revert only in 3-0-stable :-) \n\nYeah i am fixing for jruby. It will be awesome. \n", "created_at": "2011-06-02 03:27:40", "user": 3948, "id": 1278757}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Revert \"Fix broken test. You know, the merge button will be the end of us...\"\n\nThe fix was intentionaly for this branch, but was applied to another\nbranches by mistake. This should fix the CI.\n\nThis reverts commit 4c0bed0cf0b01c4f063f39fc8e503e97d4661832.\n", "labels": [], "number": 1454, "updated_at": "2014-07-03 04:45:16", "user": 4912, "closed_at": "2011-06-02 04:05:21", "id": 988205, "title": "Revert failing commit", "url": "https://api.github.com/repos/rails/rails/issues/1454", "created_at": "2011-06-02 03:47:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`Unit#managers_properties` generates invalid SQL. The `WHERE` clause contains condition: `\"business_objects\".\"type\" IN ('Position')` however it is invalid. It should states `\"business_objects\".\"type\" IN ('Person')`.\n\nThe query for: `Unit#managers_people` is ok.\n\nHere are the full queries:\n\nQuery for `Unit.first.managers_properties` :\n\n``` sql\nSELECT \"person_attributes\".* FROM \"person_attributes\"\nINNER JOIN \"business_objects\" ON \"person_attributes\".\"person_id\" = \"business_objects\".\"id\"\nINNER JOIN \"contractings\" ON \"business_objects\".\"id\" = \"contractings\".\"person_id\"\nINNER JOIN \"business_objects\" \"managers_contracts_managers_properties_join\" ON \"contractings\".\"contract_id\" = \"managers_contracts_managers_properties_join\".\"id\"\nINNER JOIN \"contract_refers_to_positions\" ON \"managers_contracts_managers_properties_join\".\"id\" = \"contract_refers_to_positions\".\"contract_id\"\nINNER JOIN \"business_objects\" \"managers_managers_properties_join\" ON \"contract_refers_to_positions\".\"position_id\" = \"managers_managers_properties_join\".\"id\"\nINNER JOIN \"managements\" ON \"managers_managers_properties_join\".\"id\" = \"managements\".\"position_id\"\nWHERE \"business_objects\".\"type\" IN ('Position') AND \"managements\".\"unit_id\" = '123'\n```\n\nQuery for `Unit.first.managers_people`:\n\n``` sql\nSELECT \"business_objects\".* FROM \"business_objects\"\nINNER JOIN \"contractings\" ON \"business_objects\".\"id\" = \"contractings\".\"person_id\"\nINNER JOIN \"business_objects\" \"managers_contracts_managers_people_join\" ON \"contractings\".\"contract_id\" = \"managers_contracts_managers_people_join\".\"id\"\nINNER JOIN \"contract_refers_to_positions\" ON \"managers_contracts_managers_people_join\".\"id\" = \"contract_refers_to_positions\".\"contract_id\"\nINNER JOIN \"business_objects\" \"managers_managers_people_join\" ON \"contract_refers_to_positions\".\"position_id\" = \"managers_managers_people_join\".\"id\"\nINNER JOIN \"managements\" ON \"managers_managers_people_join\".\"id\" = \"managements\".\"position_id\"\nWHERE \"business_objects\".\"type\" IN ('Person') AND \"managements\".\"unit_id\" = '123'\n```\n\nSchema & models & seeds:\n\n``` ruby\n# SCHEMA:\n\n# Unit, Person, Position\ncreate_table \"business_objects\", :id => false, :force => true do |t|\n  t.string   \"id\",          :null => false\n  t.string   \"type\",        :null => false\nend\n\n# Unit => Position\ncreate_table \"managements\", :force => true do |t|\n  t.string   \"unit_id\",     :null => false\n  t.string   \"position_id\", :null => false\nend\n\n\n# Position => Contract\ncreate_table \"contract_refers_to_positions\", :force => true do |t|\n  t.string   \"contract_id\", :null => false\n  t.string   \"position_id\", :null => false\nend\n\n# Contract => Person\ncreate_table \"contractings\", :force => true do |t|\n  t.string   \"contract_id\", :null => false\n  t.string   \"person_id\",   :null => false\nend\n\n# Person properties\ncreate_table \"person_attributes\", :force => true do |t|\n  t.string   \"person_id\",  :null => false\n  t.string   \"first_name\", :null => false\n  t.string   \"last_name\",  :null => false\nend\n\n# MODELS:\n\nclass BusinessObject < ActiveRecord::Base\n  set_primary_key :id\nend\n\nclass Unit < BusinessObject\n  has_many :managements, :foreign_key => :unit_id\n  has_many :managers, :through => :managements, :source => :position\n\n  has_many :managers_contracts,  :through => :managers,           :source => :contracts\n  has_many :managers_people,     :through => :managers_contracts, :source => :people\n  has_many :managers_properties, :through => :managers_people,    :source => :properties\nend\n\nclass Position < BusinessObject\n  has_many :managements\n  has_many :managed_units, :through => :managements\n\n  has_many :contract_refers_to_position\n  has_many :contracts, :through => :contract_refers_to_position, :source => :contract\nend\n\nclass Contract < BusinessObject\n  has_many :contractings\n  has_many :people, :through => :contractings\n\n  has_many :contract_refers_to_position\n  has_many :positions, :through => :contract_refers_to_position\nend\n\nclass PersonAttribute < ActiveRecord::Base\n  belongs_to :person, :inverse_of => :properties\nend\n\nclass Person < BusinessObject\n  has_many :contractings\n  has_many :contracts, :through => :contractings\n\n  has_many :properties, :class_name => \"PersonAttribute\"\nend\n\nclass Management < ActiveRecord::Base\n  belongs_to :unit\n  belongs_to :position\nend\n\nclass ContractRefersToPosition < ActiveRecord::Base\n  belongs_to :position\n  belongs_to :contract\nend\n\nclass Contracting < ActiveRecord::Base\n  belongs_to :contract\n  belongs_to :person\nend\n\n# SEEDS:\n\nu = Unit.new\nu.id = \"123\"\nu.save!\n```\n", "labels": ["activerecord"], "number": 1455, "updated_at": "2011-12-14 16:34:11", "user": 65587, "closed_at": "2011-12-14 16:34:10", "id": 988964, "title": "[Rails 3.1.rc1] Invalid SQL generated for nested has_many :through with STI", "url": "https://api.github.com/repos/rails/rails/issues/1455", "created_at": "2011-06-02 08:42:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1279687", "text": "@joshk & @jonleighton - Could you have a look at this weird bug? \nI also checked against Rails master, not better.\n", "created_at": "2011-06-02 08:46:17", "user": 65587, "id": 1279687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280595", "text": "Assigned to @tenderlove, but I'll dive head in too.\n\nDoes this bug also occur in 3.0.x?\n", "created_at": "2011-06-02 13:16:18", "user": 4912, "id": 1280595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280643", "text": "3.0 does not support nested has many :through .\n", "created_at": "2011-06-02 13:26:29", "user": 65587, "id": 1280643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280796", "text": "Oops ... please forget that I asked that question then :P\n", "created_at": "2011-06-02 13:53:35", "user": 4912, "id": 1280796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1285185", "text": "Bloody hell, that is a lot of joins.\n\nI will try to take a look at this but it will help enormously if you can provide a simplified test case. I am doubtful that it needs so many joins in order to repro the bug.\n\nThanks\n", "created_at": "2011-06-02 21:54:19", "user": 1979, "id": 1285185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1290489", "text": "I know that it is not an easy case. And as you can see one more join makes the difference. managers_people works fine. managers_properties not...\n\nAnother case that also works:\n\n``` ruby\nclass Contract < BusinessObject\n  has_many :people, :through => :contractings\n  has_many :people_properties, :through => :people,    :source => :properties\nend\n\nContract.first.people_properties\n```\n\nThis skips few joins and works fine. So my guess is that this is some corner case that I was only able to reproduce in a way that I provided. I wish I could provide something simpler but despite my efforts I cannot.\n", "created_at": "2011-06-03 06:25:46", "user": 65587, "id": 1290489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1297569", "text": "So a few words about this: I tried to make the test case as simple as possible, but the way it turns out, you definitely need about 3 or 4 joins in order to reproduce this. I tried to get it down to just 3 joins, but I could not seem to reproduce it without 4. Instead, I just prefixed everything with \"business_\" and placed it all in one file so it doesn't conflict with the already overcrowded test model namespace.\n\nAbout the issue itself, it seems that when doing both STI and nesting has_many through, the type column can get buried. In particular, if the last join is not an STI model, and there are at least 2 other STI's before it, it will accept the first in the chain, not the last, as one would expect. The new method on ThroughAssociation, #sti_scope, tries its best to grab any STI conditions and let #merge handle any overriding that needs to happen, except perform it in reverse, as opposed to forward as done in #target_scope.\n\nAny suggestions in terms of style are more than welcome.\n", "created_at": "2011-06-03 15:47:19", "user": 16414, "id": 1297569}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3143925", "text": "Closing this because the [script](https://gist.github.com/1477319) works fine for me on current master. I think this was probably due to a bug I fixed in one of the recent 3.1 point releases, so please try the latest 3.1 if you're still having trouble.\n", "created_at": "2011-12-14 16:34:10", "user": 1979, "id": 3143925}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Having some issues with times passed through accepts_nested_attributes_for they are being converted incorrectly when using a different timezone.\n\nI'm using the 'London' timezone.\n\nI have a field where I'm storing a time, called publish_at\nI have passing the time through into the controller like so:\n\nHere are the params:\n\n```\n\"email_conversation\" => {\"email_messages_attributes\" => {\"0\" => {\"publish_at\" => \"2011-07-28 21:00:00\", \"id\" => \"1\"}}, \"id\" => \"1\"}\n```\n\nI have setup a before save to log out the value that will be saved that's saving as ive inputted it:\n\n```\nUPDATE `email_messages` SET `publish_at` = '2011-07-28 21:00:00', `updated_at` = '2011-06-02 11:06:59' WHERE `email_messages`.`id` = 1\n```\n\nrails should be converting the time to UTC before sending it to mysql\n\n```\nUPDATE `email_messages` SET `publish_at` = '2011-07-28 20:00:00', `updated_at` = '2011-06-02 11:06:59' WHERE `email_messages`.`id` = 1\n```\n\ntherefore when it get the record back out of mysql, because it assumes the time stored is UTC the time is displayed as: `2011-07-28 22:00:00`\n\n**Something to note...**\n- It works fine if i update the model directly\n- When creating records via the email_messages_attributes has it works fine, this only happens on updates to existing records.\n\n**record.attributes =**\nDoing this in a console using `attributes =` seems to work fine....\n\n```\nem = EmailMessage.find(1)\nem.attributes = {\"publish_at\" => \"2011-07-28 21:00:00\"}\nem.save!\n```\n\nresults in the correct query to mysql:\n\n```\nUPDATE `email_messages` SET `updated_at` = '2011-06-02 11:57:32', `publish_at` = '2011-07-28 20:00:00' WHERE `email_messages`.`id` = 1\n```\n", "labels": ["activerecord"], "number": 1456, "updated_at": "2012-04-28 18:59:21", "user": 37096, "closed_at": "2012-04-28 18:59:21", "id": 989469, "title": "[rails 3.1.rc1] accepts_nested_attributes_for does not respect timezones on update", "url": "https://api.github.com/repos/rails/rails/issues/1456", "created_at": "2011-06-02 11:27:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280582", "text": "Does this happen on 3.0.x as well?\n", "created_at": "2011-06-02 13:13:16", "user": 4912, "id": 1280582}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1280588", "text": "I'm just setting up a demo scaffold to illustrate the issue, i'll try with 3.0.x aswell.\n", "created_at": "2011-06-02 13:14:37", "user": 37096, "id": 1280588}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281011", "text": "Hey, I've setup a scaffold... however, updates to the nested records is not happening at all....\nI'm very confused.\n\nhttps://github.com/raldred/rails_demo\n\nruby 1.8.7 p330\nrails 3.1.0 rc1\n\nHowever with rails 3.0.7 everything seems to work as expected.\n", "created_at": "2011-06-02 14:32:56", "user": 37096, "id": 1281011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1281761", "text": "This fixes the issue:\n\n```\nafter_validation do\n self.publish_at = publish_at\nend\n```\n\nWTF? some call back on the attr accessor causing the attributes hash to be updated automatically that's not happening by default?\n", "created_at": "2011-06-02 16:44:46", "user": 37096, "id": 1281761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4490005", "text": "I have come across the same issue and have discovered that the problem only occurs if the identity map is enabled.\n\nI have created an example app that reproduces the problem.\n\nhttps://github.com/tlconnor/nested_attributes_bug_exmple\n", "created_at": "2012-03-14 00:52:47", "user": 37422, "id": 4490005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399224", "text": "Since identity map was removed I'm closing this issue. Thanks.\n", "created_at": "2012-04-28 18:59:21", "user": 47848, "id": 5399224}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "For some reason \"vendor/assets\" and \"lib/assets\" aren't getting added to the asset paths even though the docs (application.css/application.js) say they are. I have to manually add them in my application.rb.\n\napplication.css\n(\"reset\" is in lib/assets/stylesheets).\n\n```\n/*\n *= require reset\n *= require base\n *= require_tree .\n*/\n```\n\napplication.rb\n\n```\n# Enable the asset pipeline\nconfig.assets.enabled = true\nconfig.assets.paths << \"#{Rails.root}/vendor/assets\" << \"#{Rails.root}/lib/assets\"\n```\n\nThis is with Rails 3.1.0.rc1, Ruby 1.9.2 on Windows.\n", "labels": [], "number": 1457, "updated_at": "2011-06-08 19:00:54", "user": 10137, "closed_at": "2011-06-08 19:00:54", "id": 993014, "title": "Asset pipeline paths issue", "url": "https://api.github.com/repos/rails/rails/issues/1457", "created_at": "2011-06-02 22:08:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300019", "text": "I'm experiencing the same issue.\n", "created_at": "2011-06-03 23:12:32", "user": 12844, "id": 1300019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329024", "text": "Fixed on 3.1.0.rc2 with 639dca4. \n", "created_at": "2011-06-08 19:00:51", "user": 10137, "id": 1329024}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It seems that plugins inside a Rails 3.1 application proper (i.e. in /vendor/plugins) are initialized **before** engines and plugins inside engines.\n\nAfter some debugging, I found the culprit in `Rails::Application::Railties#all`:\n\n```\n  def all(&block)\n    @all ||= railties + engines + super\n    @all.each(&block) if block\n    @all\n  end\n```\n\nThe call to `super` here implicitly passes the `&block` argument, which has the unfortunate side-effect of adding the plugin initializers **first** (in front of other railties and engines) in the case of `Rails::Engine#initializers`:\n\n```\ndef initializers\n  initializers = []\n  railties.all { |r| initializers += r.initializers }\n  initializers += super\n  initializers\nend\n```\n\nOne solution that works here is to change how `super` is called, e.g. this works:\n\n```\n  def all(&block)\n    @railties_plus_engines ||= railties + engines\n    @railties_plus_engines.each(&block) if block\n    @railties_plus_engines + super\n  end\n```\n\n(Here I'm deliberately not memoizing the result so that `super` is always called, and that the block is run against the plugins **after** it has been run against the railties and engines first.)\n\nThis is one of the issues blocking our efforts to migrate to Rails 3.1.\n", "labels": [], "number": 1458, "updated_at": "2014-06-13 20:57:12", "user": 826393, "closed_at": "2011-06-16 20:19:06", "id": 993295, "title": "[3.1.0.rc1] App plugins initialized before engines and plugins inside engines", "url": "https://api.github.com/repos/rails/rails/issues/1458", "created_at": "2011-06-02 23:15:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336412", "text": "BUMP!!\n", "created_at": "2011-06-09 19:02:16", "user": 22553, "id": 1336412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368461", "text": "Oops... got one too many commits in the pull request. :)\n", "created_at": "2011-06-14 19:13:28", "user": 826393, "id": 1368461}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1382985", "text": "The commit 27d7083 has been pulled into 3-1-stable, so this pull request should effectively just pull 06fa6e3. Let me know if there needs to be a clean branch containing just 06fa6e3 picked out.\n", "created_at": "2011-06-16 18:00:52", "user": 826393, "id": 1382985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383206", "text": "Can't we just call it as super { |x| x } instead? We should also add some comments that we are doing that just to avoid passing the block up.\n", "created_at": "2011-06-16 18:26:32", "user": 9582, "id": 1383206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383327", "text": "I like your idea of being more explicit. How about this:\nhttps://gist.github.com/1029924\n\n``` ruby\n  def all(&block)\n    @railties_plus_engines ||= railties + engines\n    @railties_plus_engines.each(&block) if block\n    # Only after the block has been run against the railties and engines in the application\n    # will we call super with the block (which has the effect of running the block against the plugins in the\n    # application and returning the array of plugins)\n    @railties_plus_engines + super(&block)\n  end\n```\n", "created_at": "2011-06-16 18:44:15", "user": 826393, "id": 1383327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383504", "text": "What about this:\n\n```\ndef all(&block)\n  # Pass a block to super so it doesn't pass the current one\n  @all ||= railties + engines + super { |x| x }\n  @all.each(&block) if block\n  @all\nend\n```\n", "created_at": "2011-06-16 19:09:36", "user": 9582, "id": 1383504}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383593", "text": "That would work, with the implicit assumption that running `super(&block)` is semantically equivalent to:\n\n``` ruby\nsuper { |x| x }.tap { |railties| railties.each(&block) }\n```\n\ni.e. it runs the given block over exactly the same elements as its return value, and in the same order.\n\nAnother alternative is to replace `super { |x| x }` with just a call to `plugins`\n", "created_at": "2011-06-16 19:22:51", "user": 826393, "id": 1383593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383611", "text": "Another thing is that if we use `@all` here for memoization, we have to watch out not to assign to it before the call to `super`, since it's the same memoizing ivar there too.\n", "created_at": "2011-06-16 19:25:42", "user": 826393, "id": 1383611}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383613", "text": "Replacing super by plugins sounds like the best and simpler solution.\n", "created_at": "2011-06-16 19:25:49", "user": 9582, "id": 1383613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383651", "text": "I like the `plugins` idea too. (We'll just need to keep the semantics of Engine::Railties#all in sync with this afterwards.)\n\nDo you want me to create a new pull request (this one refers to the commit so we're effectively stuck)?\n", "created_at": "2011-06-16 19:30:59", "user": 826393, "id": 1383651}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383667", "text": "Creating a new one will probably be easier.\n", "created_at": "2011-06-16 19:33:33", "user": 9582, "id": 1383667}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383900", "text": "Created a new pull request #1735 for the `plugins` approach.\n", "created_at": "2011-06-16 20:10:17", "user": 826393, "id": 1383900}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rake::DSL include definition added, warning solved.\n", "labels": [], "number": 1459, "updated_at": "2014-07-03 04:45:30", "user": 87910, "closed_at": "2011-06-06 15:51:04", "id": 993311, "title": "Add Rake::DSL call definition", "url": "https://api.github.com/repos/rails/rails/issues/1459", "created_at": "2011-06-02 23:18:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1287793", "text": "It wouldn't be wise to add this in application.rb and since all rake tasks are run with rake command, rake is required anyways. \n\nAlso, if the pull requests has been added to fix Rake 0.9.1 problems, it has been already taken care.\n", "created_at": "2011-06-03 04:02:27", "user": 278, "id": 1287793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1310022", "text": "Yep, thank you for submitting. It has been already taken care ;) [8b719cf3f73cbce78506e3a42ed01b2c4314a70a]\n", "created_at": "2011-06-06 15:51:04", "user": 4912, "id": 1310022}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4552475", "text": "just add require rake/dsl_definition to the rake file and change the format of database.yml file.\n\nNow make rake db:create\nlater rake db:migrate\nrails s\n\nopen localhost:3000 in browser\n", "created_at": "2012-03-17 07:42:38", "user": 1040344, "id": 4552475}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Working with the new support for plugins inside engines in Rails 3.1, I found that certain things that work for regular plugins don't work for these new nested plugins. In particular, these methods in `Rails::Engine` don't seem to understand that an engine could have nested plugins:\n- #load_tasks\n- #load_generators\n- #load_console\n- #eager_load!\n\nA solution which worked out for me is to move the calls to `railties.all { ... }` from the overriding methods in `Rails::Application` into `Rails::Engine`, i.e. changing `Rails::Engine` to look like this:\n\n```\ndef load_tasks\n  railties.all { |r| r.load_tasks }\n  super\n  paths[\"lib/tasks\"].existent.sort.each { |ext| load(ext) }\nend\n\ndef load_generators\n  railties.all { |r| r.load_generators }\n  super\nend\n\ndef load_console(sandbox=false)\n  railties.all { |r| r.load_console(sandbox) }\n  super\nend\n\ndef eager_load!\n  railties.all(&:eager_load!)\n\n  config.eager_load_paths.each do |load_path|\n    matcher = /\\A#{Regexp.escape(load_path)}\\/(.*)\\.rb\\Z/\n    Dir.glob(\"#{load_path}/**/*.rb\").sort.each do |file|\n      require_dependency file.sub(matcher, '\\1')\n    end\n  end\nend\n```\n\n...and `Rails::Application` to look like this (after also removing `eager_load!` entirely):\n\n```\ndef load_tasks\n  initialize_tasks\n  super\n  self\nend\n\ndef load_generators\n  initialize_generators\n  super\n  self\nend\n\ndef load_console(sandbox=false)\n  initialize_console(sandbox)\n  super\n  self\nend\n```\n\n(Note also the removal of the `()` from `load_console`'s call to `super` so as to preserve the sandbox argument,)\n", "labels": [], "number": 1460, "updated_at": "2014-06-26 18:05:25", "user": 826393, "closed_at": "2011-06-16 10:37:41", "id": 993331, "title": "[3.1.0.rc1] Plugins inside engines not eager-loaded properly and their rake tasks ignored", "url": "https://api.github.com/repos/rails/rails/issues/1460", "created_at": "2011-06-02 23:25:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315954", "text": "Patch please?\n", "created_at": "2011-06-07 14:12:49", "user": 9582, "id": 1315954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1378428", "text": "Turned this issue into a pull request by adding the patch.\n", "created_at": "2011-06-16 03:03:49", "user": 826393, "id": 1378428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380208", "text": "Could you please provide a patch for master as well? Thanks!\n", "created_at": "2011-06-16 11:01:02", "user": 9582, "id": 1380208}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "html5 validation fails on those fields. It should be registered on http://wiki.whatwg.org/wiki/MetaExtensions \n", "labels": [], "number": 1461, "updated_at": "2011-11-22 12:18:04", "user": 108694, "closed_at": "2011-11-22 12:18:04", "id": 994288, "title": "csrf-param/csrf-token not registered html5 meta extensions", "url": "https://api.github.com/repos/rails/rails/issues/1461", "created_at": "2011-06-03 01:59:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314056", "text": "Could someone please go through this process and add them to list?\n", "created_at": "2011-06-07 07:16:13", "user": 9582, "id": 1314056}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315147", "text": "I've added it, but it needs more detailed description i think\n", "created_at": "2011-06-07 11:32:48", "user": 108694, "id": 1315147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2833696", "text": "needs to be closed since w3c validation works with those attributes already\n", "created_at": "2011-11-22 12:18:04", "user": 108694, "id": 2833696}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Test added for problem which is in 3-0-stable.\n\nhttps://github.com/rails/rails/issues/1419\n\nWill try to get a patch for 3-0-stable also.\n", "labels": [], "number": 1462, "updated_at": "2014-06-26 06:59:20", "user": 3948, "closed_at": "2011-06-05 07:12:43", "id": 994549, "title": "Test added for namedscope target.", "url": "https://api.github.com/repos/rails/rails/issues/1462", "created_at": "2011-06-03 03:01:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296635", "text": "The above test is passing in master.\n", "created_at": "2011-06-03 13:23:40", "user": 3948, "id": 1296635}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, if your string includes a timezone (like \"2011-05-27 10:13:49 -0700\") the to_time method will ignore it and do the conversion assuming a timezone of utc or local, depending on how it was called.  With this patch you'll get a time object with the correct time, represented in utc or local.\n", "labels": [], "number": 1463, "updated_at": "2014-06-25 09:52:18", "user": 220318, "closed_at": "2011-07-06 19:36:48", "id": 994747, "title": "Fix timezone handling in String.to_time", "url": "https://api.github.com/repos/rails/rails/issues/1463", "created_at": "2011-06-03 03:55:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302011", "text": "I will check if this fix #1096\n", "created_at": "2011-06-04 16:03:45", "user": 160941, "id": 1302011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1495052", "text": "Just ran into this problem as well.  +1\n", "created_at": "2011-07-04 00:21:59", "user": 285582, "id": 1495052}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am using signed cookies to maintain my user across pages, pretty much implemented as <a href=\"http://ruby.railstutorial.org/chapters/sign-in-sign-out\">here</a>. I use two methods, sign_in(account) and sign_out to manipulate my cookies, creating or destroying them as you would expect:\n\n```\nmodule SessionsHelper\n  def sign_in account\n    cookies.signed[:auth_account] = {\n      :expires => 1.week.from_now,\n      :value => [account.id, account.hash]\n    }\n  end\n\n  def sign_out\n    cookies.delete(:auth_account)\n  end\nend\n```\n\nHowever, when trying to use this method, or the authenticate method that matches it in the ApplicationController from the functional tests, I get a NoMethodError:\n\n_NoMethodError: undefined method `signed' for {}:ActiveSupport::HashWithIndifferentAccess_\n\nI realise from <a href=\"http://stackoverflow.com/questions/5097095/testing-signed-cookies-in-rails\">this</a> and <a href=\"http://stackoverflow.com/questions/4979866/how-to-test-cookies-permanent-signed-in-rails-3\">this</a> that this is an issue with the way cookies are defined differently in the test case, but I can't get any of these solutions to work. For completeness, an example test that fails with the above error:\n\n```\nrequire 'test_helper'\n\nclass AccountsControllerTest < ActionController::TestCase\n  include SessionsHelper\n\n  setup do\n    # We need to fake authentication by manually\n    # assigning an account to the sign_in process\n    sign_in accounts(:ia)\n\n    @account = accounts(:ia)\n  end\n\n  test \"should 403 on index if unauthenticated\" do\n    sign_out\n\n    get :index\n    assert_response :forbidden\n  end\n\n  test \"should 200 on index if authenticated\" do\n    get :index\n    assert_response :success\n  end\nend\n```\n\nThis error occurs when using cookies.permanent too. I got around that by setting an expires time manually, but its the same issue\n\nI am pretty new to Rails and Ruby but a simple solution would seem to be to add two mock functions that simply pass through the value of the cookie and attach them to the cookies object - obviously then it wouldn't behave like a hash as it does now. I'm not up to speed enough yet to work out quite how to do this.\n", "labels": [], "number": 1464, "updated_at": "2011-06-07 08:02:33", "user": 4986, "closed_at": "2011-06-07 07:15:19", "id": 995465, "title": "[3.1.0.rc1] Signed cookies and Test:unit = “NoMethodError”", "url": "https://api.github.com/repos/rails/rails/issues/1464", "created_at": "2011-06-03 05:27:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314054", "text": "I believe this is fixed on master, as know you can use the _cookie_jar_ to set signed and permanent cookies.\n", "created_at": "2011-06-07 07:15:19", "user": 9582, "id": 1314054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314075", "text": "Sorry, as a newcomer, can you explain how one would do that so I can fix my tests? Also, would this mean I should use the edge version of Rails?\n\nThanks for the response regardless.\n", "created_at": "2011-06-07 07:21:59", "user": 4986, "id": 1314075}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314100", "text": "@beseku sure!\n\nSo, today unfortunately there isn't an easy way for you to do that, here is what I do in such cases:\n\nhttps://github.com/plataformatec/devise/blob/master/test/integration/rememberable_test.rb#L16\n\nAnd you should not be using edge version of Rails if you are a newcomer. :)\n", "created_at": "2011-06-07 07:29:37", "user": 9582, "id": 1314100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314248", "text": "But edge versions are so _exciting_!\n", "created_at": "2011-06-07 08:02:33", "user": 4986, "id": 1314248}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The rake tasks used when dumping the database structure (db:structure:dump and db:test:clone_structure) both make an assumption that a username will be provided with the database config for postgres, which isn't automatically the case if you have set up trust_ident for postgres.\n\nThis fix simply checks if a username has been provided and if it hasn't then it doesn't provide a -U string (and the commands will default to being attempted with the user running the rake task).\n\nCouldn't see a clean way to test the rake tasks, especially not with these one's relying on command line tools. I verified by hand that the error had been solved.\n", "labels": [], "number": 1465, "updated_at": "2014-07-03 04:45:46", "user": 162987, "closed_at": "2011-06-03 07:28:21", "id": 996319, "title": "Error when using trust_ident with pg and the :sql schema dumper", "url": "https://api.github.com/repos/rails/rails/issues/1465", "created_at": "2011-06-03 07:27:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1291933", "text": "If you want your pull request to be merged, you should keep it open :)\nCould you rebase your commits in order to remove the \"Merge branch 'master'\" one ?\n", "created_at": "2011-06-03 07:33:23", "user": 9347, "id": 1291933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1291940", "text": "Forgot to clean up my history. Closed this pull request and reopened with neater commit history.\n", "created_at": "2011-06-03 07:33:44", "user": 162987, "id": 1291940}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The rake tasks used when dumping the database structure (db:structure:dump and db:test:clone_structure) both make an assumption that a username will be provided with the database config for postgres, which isn't automatically the case if you have set up trust_ident for postgres.\n\nThis fix simply checks if a username has been provided and if it hasn't then it doesn't provide a -U string (and the commands will default to being attempted with the user running the rake task).\n\nCouldn't see a clean way to test the rake tasks, especially not with these one's relying on command line tools. I verified by hand that the error had been solved.\n", "labels": [], "number": 1466, "updated_at": "2014-07-03 04:45:49", "user": 162987, "closed_at": "2011-11-17 19:18:27", "id": 996363, "title": "Error when using trust_ident with pg and the :sql schema dumper", "url": "https://api.github.com/repos/rails/rails/issues/1466", "created_at": "2011-06-03 07:32:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2682104", "text": "+1. Is it going to find its way into Rails 3.1 any time soon?\n", "created_at": "2011-11-09 15:04:36", "user": 137030, "id": 2682104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2778805", "text": "+1 for both Rails 3.0 and 3.1\n", "created_at": "2011-11-17 17:17:23", "user": 28287, "id": 2778805}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2778937", "text": "This seems to be not necessary anymore. See https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railties/databases.rake#L383\n", "created_at": "2011-11-17 17:27:14", "user": 3892, "id": 2778937}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2780460", "text": "Agreed, this is no longer necessary now the rake tasks are using the env variables for postgres. Much neater solution to the problem :)\n", "created_at": "2011-11-17 19:18:27", "user": 162987, "id": 2780460}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Greetings, \n\nI'll try to keep this short and sweet because once you see it, it's obvious:\n\nThe `build_record` method in `activerecord/lib/active_record/associations/collection_association.rb` is currently defined like this:\n\n```\ndef build_record(attributes, options)\n  record = reflection.build_association(attributes, options)\n  record.assign_attributes(create_scope.except(*record.changed), :without_protection => true)\n  record.assign_attributes(attributes, options)\n  record\nend\n```\n\nThis method is causing the attributes to be loaded twice, once when `build_association` is called, and again when `assign_attributes` is called. In my engine (http://github.com/radar/forem), this causes topics that `has_many :posts` that are also nested attributes to have two posts when they should only have one. By commenting out / removing the `assign_attributes` line it does not do a double assignment of attributes.\n\nYou can run the tests on forem by running `bundle install` and then `bundle exec rspec spec/integration/topics_spec.rb:35`.\n\nThanks!\n", "labels": [], "number": 1467, "updated_at": "2011-06-04 01:22:40", "user": 2687, "closed_at": "2011-06-03 13:18:49", "id": 998082, "title": "Double assignment of attributes on a collection association occurs", "url": "https://api.github.com/repos/rails/rails/issues/1467", "created_at": "2011-06-03 11:17:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296159", "text": "Actually, its doing it three times isn't it? On `build_association` and the two `assign_attributes`.\n\n@jonleighton to the rescue!\n", "created_at": "2011-06-03 11:21:13", "user": 8701, "id": 1296159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296162", "text": "Nope, just twice. The first one doesn't send through the attributes the first time.\n", "created_at": "2011-06-03 11:21:56", "user": 2687, "id": 1296162}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296345", "text": "Yes, the second `assign_attributes` shouldn't be there. @pixeltrix tweaked this method recently so I reckon he accidentally left it in.\n\nPull request please? Also please make sure the equivalent change in made in `SingularAssociation`.\n", "created_at": "2011-06-03 12:09:56", "user": 1979, "id": 1296345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296676", "text": "Looks like  `SingularAssociation` is fine. Sorry about that - I don't know how I missed it!\n", "created_at": "2011-06-03 13:31:07", "user": 6321, "id": 1296676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299631", "text": "Thank you for the quick fix! <3\n", "created_at": "2011-06-03 21:40:17", "user": 2687, "id": 1299631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300374", "text": "@radar, you fail. It's `:heart:` :heart:\n", "created_at": "2011-06-04 01:22:40", "user": 294954, "id": 1300374}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Double assignment of attributes on a collection association occurs fixed for the issue issue #1467\n", "labels": [], "number": 1468, "updated_at": "2014-07-03 04:45:54", "user": 68955, "closed_at": "2011-06-03 13:20:36", "id": 998497, "title": "Double assignment of attributes on a collection association occurs fixed #1467", "url": "https://api.github.com/repos/rails/rails/issues/1468", "created_at": "2011-06-03 13:19:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1296621", "text": "Closing this as already done here . https://github.com/rails/rails/commit/54883682dea9a6766b066cd290cbe151f002a240\n", "created_at": "2011-06-03 13:20:36", "user": 68955, "id": 1296621}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Which does not fail, which means the issue has since been solved.\n", "labels": [], "number": 1469, "updated_at": "2014-07-03 04:45:57", "user": 9347, "closed_at": "2011-06-03 23:19:40", "id": 998866, "title": "Add testcase for #379", "url": "https://api.github.com/repos/rails/rails/issues/1469", "created_at": "2011-06-03 14:30:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1297862", "text": "I am confused. You are using 'pirates' as the table name, however that is defined as a proper table in schema.rb, not a view. So how does this prove the bug is fixed?\n", "created_at": "2011-06-03 16:39:16", "user": 1979, "id": 1297862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298120", "text": "I'm sorry, I'm just an idiot sometimes :(\n", "created_at": "2011-06-03 17:19:48", "user": 9347, "id": 1298120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299777", "text": "Don't worry, everyone makes mistakes :)\n", "created_at": "2011-06-03 22:13:59", "user": 1979, "id": 1299777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299985", "text": "I'm reopening this pull request as I've been working on it again, this time for real ! ;-)\nFor some reason, github doesn't displays the commit in my fork. So [here it is](https://github.com/dmathieu/rails/commit/9f5f0405449d7d271a82da2d08e5d9e737858184).\n\nI haven't been doing a test because creating views is not supported ATM, so I couldn't create any.\n", "created_at": "2011-06-03 23:04:24", "user": 9347, "id": 1299985}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Assigning cookies for test cases should now use cookies[], e.g:\n\n```\ncookies[:email] = 'user@example.com'\nget :index\nassert_equal 'user@example.com', cookies[:email]\n```\n\nTo clear the cookies, use clear, e.g:\n\n```\ncookies.clear\nget :index\nassert_nil cookies[:email]\n```\n\nWe now no longer write out HTTP_COOKIE and the cookie jar is\npersistent between requests so if you need to manipulate the environment\nfor your test you need to do it before the cookie jar is created.\n\nThis commit fixes #1464.\n", "labels": [], "number": 1470, "updated_at": "2014-07-03 04:45:59", "user": 6321, "closed_at": "2011-06-04 17:13:02", "id": 999060, "title": "Refactor ActionController::TestCase cookies", "url": "https://api.github.com/repos/rails/rails/issues/1470", "created_at": "2011-06-03 15:07:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Here's a simple model you normally have when dealing with tree structures:\n\n```\nclass Foo < ActiveRecord::Base\n\n  belongs_to :parent,\n    :class_name     => 'Foo',\n    :counter_cache  => :children_count\n\n  has_many :children,\n    :class_name   => 'Foo',\n    :foreign_key  => 'parent_id'\n\nend\n```\n\nAnd here's the test:\n\n```\nclass FooTest < ActiveSupport::TestCase\n\n  def test_this_works\n    foo = Foo.create\n    foo.attributes = { :parent_id => nil }\n  end\n\n  def test_this_blows_up\n    foo = Foo.create\n    foo.attributes = { :parent => nil }\n  end\n\nend\n```\n\nSeems that assigning a nil object triggers counter_cache refresh on that nil. No such problem when assigning a foreign key.\n\nI didn't see a filed issue for this, which is rather odd as this is pretty common functionality.\n\nBroken in 3.1.0.rc1 and master branch.\n", "labels": ["activerecord", "regression"], "number": 1471, "updated_at": "2011-07-11 23:18:18", "user": 78363, "closed_at": "2011-07-11 23:18:18", "id": 999272, "title": "[Rails3.1.0.rc1] attributes= method explodes when assigning nil parent object but only if counter_cache is enabled (breaks acts_as_tree)", "url": "https://api.github.com/repos/rails/rails/issues/1471", "created_at": "2011-06-03 15:48:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1297878", "text": "Can you confirm if this a regression from 3-0-stable? Does it just happen via `attributes=`, or does it happen if you do `foo.parent = nil` also? Thanks.\n", "created_at": "2011-06-03 16:42:13", "user": 1979, "id": 1297878}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298029", "text": "You're right. `foo.parent = nil` triggers the same error.\n\n```\nRuntimeError: Called id for nil, which would mistakenly be 4 -- if you really wanted the id of nil, use object_id\nmethod different_target? in belongs_to_association.rb at line 40\nmethod update_counters in belongs_to_association.rb at line 26\nmethod replace in belongs_to_association.rb at line 8\nmethod writer in singular_association.rb at line 17\nmethod block in define_writers in association.rb at line 49\nmethod test_this_still_works in foo_test.rb at line 17\n```\n", "created_at": "2011-06-03 17:04:52", "user": 78363, "id": 1298029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1488830", "text": "If it happens in 3.1.0.rc1 and master, why this issue has a milestone 3.0.9, which has already been even released?\n", "created_at": "2011-07-02 08:48:40", "user": 124430, "id": 1488830}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This got refactored out and is now overridden by sprockets/helpers/rails_helper.rb but was never applied to 3-1-stable.\n", "labels": [], "number": 1472, "updated_at": "2014-07-03 04:46:07", "user": 35866, "closed_at": "2011-06-03 17:25:49", "id": 999669, "title": "Fix undefined method sprockets_javascript_include_tag", "url": "https://api.github.com/repos/rails/rails/issues/1472", "created_at": "2011-06-03 17:19:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298165", "text": "Just seen wycats pushed the fix\n", "created_at": "2011-06-03 17:25:49", "user": 35866, "id": 1298165}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This needs to be there to generate urls with assets/ in paths vs stylesheets/, javascripts/. Brings 3-1 inline with master.\n", "labels": [], "number": 1473, "updated_at": "2014-07-03 04:46:10", "user": 35866, "closed_at": "2011-06-04 01:32:00", "id": 999700, "title": "Fix broken asset pipeline paths", "url": "https://api.github.com/repos/rails/rails/issues/1473", "created_at": "2011-06-03 17:24:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298821", "text": "This change _seems_ to set asset paths to use the **sprockets** `asset_path`, no matter the setting in `config.assets.enabled`.\nWhile I fully agree that the asset paths are buggy on master, logic would say that asset path should resolve to the old '/public/' tree if `assets.enabled = false` [or if not defined for that matter] and only if `true` should it use the newer `/assets` tree.\n", "created_at": "2011-06-03 19:16:25", "user": 185039, "id": 1298821}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298892", "text": "It seems? By testing in an app or by looking at the code? From my house it works. The override doesn't happen if <code>::Sprockets::Helpers::RailsHelper</code> doesn't get included... Line 27 in railties.rb insures that doesn't happen.\n\nIt works just as you described... BTW, it is exactly what is in master.\n", "created_at": "2011-06-03 19:32:06", "user": 35866, "id": 1298892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299025", "text": "You are right. Problem was on my side. (Pulled in your branch, but didn't update the bundling, so was using an old commit)\n", "created_at": "2011-06-03 19:55:03", "user": 185039, "id": 1299025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1299041", "text": "Gotcha. Thanks for letting me know. I was baffled as to how it wouldn't be working.\n", "created_at": "2011-06-03 19:58:15", "user": 35866, "id": 1299041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300015", "text": "+1\n", "created_at": "2011-06-03 23:11:08", "user": 12844, "id": 1300015}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "update_column tests added\n", "labels": [], "number": 1474, "updated_at": "2014-06-26 15:41:51", "user": 160764, "closed_at": "2011-06-07 07:14:51", "id": 1000209, "title": "added  tests for update_column", "url": "https://api.github.com/repos/rails/rails/issues/1474", "created_at": "2011-06-03 19:07:07", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1475, "updated_at": "2014-06-30 12:57:59", "user": 318137, "closed_at": "2011-06-03 19:27:07", "id": 1000295, "title": "add a missing \"the\" and normalize the use of periods.", "url": "https://api.github.com/repos/rails/rails/issues/1475", "created_at": "2011-06-03 19:22:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298859", "text": "This is looking good. However, do you mind pushing it to http://github.com/lifo/docrails so the documentation update will get centralized? That repository has open-commit policy, so you should be able to push to their faster.\n\nThank you :)\n", "created_at": "2011-06-03 19:24:48", "user": 4912, "id": 1298859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298870", "text": "Done! Thanks for letting me know.\n", "created_at": "2011-06-03 19:27:07", "user": 318137, "id": 1298870}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298873", "text": "(oh, and i assume i should close this pull request, too?)\n", "created_at": "2011-06-03 19:27:31", "user": 318137, "id": 1298873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1298878", "text": "Yep, thank you for cleaning that up ;)\n", "created_at": "2011-06-03 19:28:56", "user": 4912, "id": 1298878}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Something strange happened while changing the pull request's commits and my branch has been committed into my own fork.\n\nSo I'm reopening a pull request. This follows #1469\n", "labels": [], "number": 1476, "updated_at": "2014-07-03 04:46:20", "user": 9347, "closed_at": "2011-06-29 08:33:43", "id": 1001313, "title": "table_exists should also consider the views", "url": "https://api.github.com/repos/rails/rails/issues/1476", "created_at": "2011-06-03 23:21:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301190", "text": "Hey,\n\nIt needs a test. You can add db-specific code to add a view in the postgres sql file in test/schemas, and then test that it works.\n\nAlso, we should probably automatically mark records as readonly if they come from a view. @tenderlove, what do you think?\n\nCheers\n", "created_at": "2011-06-04 09:37:59", "user": 1979, "id": 1301190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301270", "text": "I've added a test.\nHowever I don't think you should apply it now. I realize it doesn't work on mysql and sqlite either (which seems logical, but the original ticket, #379 didn't mention it).\n\nI'll see what I can do for mysql and sqlite.\n", "created_at": "2011-06-04 10:28:09", "user": 9347, "id": 1301270}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301427", "text": "It now works for all adapters !\n\nI completely agree with you about marking the model as readonly when it's a view.\nIf @tenderlove agrees with it, I'll look into that too.\n", "created_at": "2011-06-04 11:45:50", "user": 9347, "id": 1301427}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I just ran into this with AR 3.0.7 on jruby and im not quite sure if this is fixed in master.\nCan someone shed some light on this?\n\nfollow up of #776\n", "labels": [], "number": 1477, "updated_at": "2012-03-03 23:45:43", "user": 115934, "closed_at": "2012-03-03 23:45:43", "id": 1001669, "title": "Reduce memory bloat in ActiveRecord transactions", "url": "https://api.github.com/repos/rails/rails/issues/1477", "created_at": "2011-06-04 01:51:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300480", "text": "Hi! Unfortunately it's not fixed.  The way presented in #776 won't work from Ruby to Ruby (or even on MRI for that matter).  We need to make major changes to the way transactions work before we can clear this up.\n\nI'm not sure why #776 was closed. :(\n", "created_at": "2011-06-04 02:15:10", "user": 3124, "id": 1300480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2103160", "text": "All tickets imported from Lighthouse were closed, so it wasn't that specific one only. :)\n", "created_at": "2011-09-15 10:47:03", "user": 14514, "id": 2103160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4306197", "text": "Closing this as referenced issue is open, no need to duplicate.\n", "created_at": "2012-03-03 23:45:40", "user": 5004, "id": 4306197}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Some Cherry-picks for 1.9.2 warning removal from master.\n", "labels": [], "number": 1478, "updated_at": "2014-07-03 04:46:26", "user": 3948, "closed_at": "2011-06-06 09:43:55", "id": 1001794, "title": "Some Cherry-picks for 1.9.2 warning removal", "url": "https://api.github.com/repos/rails/rails/issues/1478", "created_at": "2011-06-04 03:34:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1303742", "text": "/cc @tenderlove do you think it is fine to apply on 3-1-stable? or do you want to wait for the release?\n", "created_at": "2011-06-05 07:11:14", "user": 9582, "id": 1303742}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1305268", "text": "Yes, we should apply this to 3.1\n", "created_at": "2011-06-05 17:36:05", "user": 3124, "id": 1305268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308823", "text": "24b28a2a0c6a58e177b07ce3ccf56dc975541780 and 05adf524c6905eb5ac448e473cc64baa3571fd51 also needs to be applied (in that order). @amatsuda fixed my commits for rake deprecation warnings to ensure older RDoc versions work fine too. I'm sending a pull request for the two commits (https://github.com/rails/rails/pull/1508)\n", "created_at": "2011-06-06 12:24:33", "user": 146214, "id": 1308823}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm not really familiar with how to fix something like this myself, so I thought I'd post it here and maybe someone can shed some light.\n\nYou can find the original issue at my StackOverFlow Question here:\n\nhttp://stackoverflow.com/questions/6222673/rails-3-1-deployment-to-heroku-error\n\nI was using Ruby 1.9.2 it was not allowing me to migrate on heroku when the 'new hash' technique was being used.\n\nThoughts?\n", "labels": [], "number": 1479, "updated_at": "2011-06-04 14:53:31", "user": 428480, "closed_at": "2011-06-04 04:56:24", "id": 1001872, "title": "config/initializers generators problem with Ruby 1.9.2 / Heroku", "url": "https://api.github.com/repos/rails/rails/issues/1479", "created_at": "2011-06-04 04:35:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300759", "text": "Looks like you are using 1.9.2 in local environment but 1.8.7 in Heroku. You must change your heroku stack:\n\n```\n% heroku stack:migrate bamboo-mri-1.9.2 \n```\n", "created_at": "2011-06-04 04:47:45", "user": 160941, "id": 1300759}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300764", "text": "Is bamboo-mri a gem then? Can this be included in the gemfile for future apps, to prevent from having to execute that every time in the future?\n", "created_at": "2011-06-04 04:52:30", "user": 428480, "id": 1300764}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300772", "text": "No, isn't a gem, is one of the available stacks for Heroku apps. In the future you can create new apps with bamboo-mri-1.9.2 by default:\n\n```\n% heroku create --stack bamboo-mri-1.9.2 yourappname\n```\n", "created_at": "2011-06-04 04:55:29", "user": 160941, "id": 1300772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300773", "text": "Okay. Thank you.\n", "created_at": "2011-06-04 04:56:24", "user": 428480, "id": 1300773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300858", "text": "This is the same issue as https://github.com/rails/rails/issues/1213 (if you need to support 1.8.7 in some capacity, it's a 2-line fix; see patch attached to pull request.)\n", "created_at": "2011-06-04 06:08:10", "user": 1920, "id": 1300858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300860", "text": "As alternative if you want get old style hash you can use:\n\n```\nrails new yourappname --old-hash-syntax\n```\n", "created_at": "2011-06-04 06:09:46", "user": 160941, "id": 1300860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1300865", "text": "Yes, but that doesn't offer much help after the application has been created.\n", "created_at": "2011-06-04 06:11:24", "user": 1920, "id": 1300865}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301826", "text": "I have zero need for Ruby 1.8.7. My app is already created and I have been using 1.9.2. My main problem was that I was unable to deploy to heroku and perform a successful migration.\n", "created_at": "2011-06-04 14:53:31", "user": 428480, "id": 1301826}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Having this error on Fedora 15 when running `gem install rails --pre`\n\n```\n[balupton@localhost ~]$ sudo gem install rails --pre\nFetching: multi_json-1.0.3.gem (100%)\nFetching: activesupport-3.1.0.rc1.gem (100%)\nFetching: builder-3.0.0.gem (100%)\nFetching: i18n-0.6.0beta1.gem (100%)\nFetching: bcrypt-ruby-2.1.4.gem (100%)\nBuilding native extensions.  This could take a while...\n\n.......\n\nFetching: activemodel-3.1.0.rc1.gem (100%)\nFetching: rack-1.3.0.beta2.gem (100%)\nFetching: rack-cache-1.0.2.gem (100%)\nFetching: rack-test-0.6.0.gem (100%)\nFetching: rack-mount-0.8.1.gem (100%)\nFetching: hike-1.0.0.gem (100%)\nFetching: tilt-1.3.2.gem (100%)\nFetching: sprockets-2.0.0.beta.9.gem (100%)\nFetching: erubis-2.7.0.gem (100%)\nFetching: actionpack-3.1.0.rc1.gem (100%)\nFetching: arel-2.1.1.gem (100%)\nFetching: activerecord-3.1.0.rc1.gem (100%)\nFetching: activeresource-3.1.0.rc1.gem (100%)\nFetching: mail-2.3.0.gem (100%)\nFetching: actionmailer-3.1.0.rc1.gem (100%)\nFetching: rack-ssl-1.3.2.gem (100%)\nFetching: railties-3.1.0.rc1.gem (100%)\nFetching: rails-3.1.0.rc1.gem (100%)\nSuccessfully installed multi_json-1.0.3\nSuccessfully installed activesupport-3.1.0.rc1\nSuccessfully installed builder-3.0.0\nSuccessfully installed i18n-0.6.0beta1\nSuccessfully installed bcrypt-ruby-2.1.4\nSuccessfully installed activemodel-3.1.0.rc1\nSuccessfully installed rack-1.3.0.beta2\nSuccessfully installed rack-cache-1.0.2\nSuccessfully installed rack-test-0.6.0\nSuccessfully installed rack-mount-0.8.1\nSuccessfully installed hike-1.0.0\nSuccessfully installed tilt-1.3.2\nSuccessfully installed sprockets-2.0.0.beta.9\nSuccessfully installed erubis-2.7.0\nSuccessfully installed actionpack-3.1.0.rc1\nSuccessfully installed arel-2.1.1\nSuccessfully installed activerecord-3.1.0.rc1\nSuccessfully installed activeresource-3.1.0.rc1\nSuccessfully installed mail-2.3.0\nSuccessfully installed actionmailer-3.1.0.rc1\nSuccessfully installed rack-ssl-1.3.2\nSuccessfully installed railties-3.1.0.rc1\nSuccessfully installed rails-3.1.0.rc1\n23 gems installed\nInstalling ri documentation for multi_json-1.0.3...\nInstalling ri documentation for activesupport-3.1.0.rc1...\nInstalling ri documentation for builder-3.0.0...\nERROR:  While generating documentation for builder-3.0.0\n... MESSAGE:   Unhandled special: Special: type=17, text=\"<!-- HI -->\"\n... RDOC args: --ri --op /usr/lib/ruby/gems/1.8/doc/builder-3.0.0/ri --title Builder -- Easy XML Building --main README.rdoc --line-numbers lib CHANGES Rakefile README README.rdoc TAGS doc/releases/builder-1.2.4.rdoc doc/releases/builder-2.0.0.rdoc doc/releases/builder-2.1.1.rdoc --title builder-3.0.0 Documentation --quiet\n[balupton@localhost ~]$ sudo gem install rdoc\nFetching: rdoc-3.6.1.gem (100%)\nSuccessfully installed rdoc-3.6.1\n1 gem installed\nInstalling ri documentation for rdoc-3.6.1...\nInstalling RDoc documentation for rdoc-3.6.1...\n[balupton@localhost ~]$ sudo gem install builder\nSuccessfully installed builder-3.0.0\n1 gem installed\nInstalling ri documentation for builder-3.0.0...\nInstalling RDoc documentation for builder-3.0.0...\n[balupton@localhost ~]$ sudo gem install rails --pre\nSuccessfully installed rails-3.1.0.rc1\n1 gem installed\nInstalling ri documentation for rails-3.1.0.rc1...\nfile 'lib' not found\nInstalling RDoc documentation for rails-3.1.0.rc1...\nfile 'lib' not found\n```\n\nAlso tried the suggestions here with no success:\nhttp://stackoverflow.com/questions/4822052/installing-rails-file-not-found-lib\n", "labels": [], "number": 1480, "updated_at": "2011-06-07 07:14:16", "user": 61148, "closed_at": "2011-06-07 07:14:16", "id": 1001880, "title": "File not found: lib", "url": "https://api.github.com/repos/rails/rails/issues/1480", "created_at": "2011-06-04 04:40:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301083", "text": "Try installing the rdoc gem and running this again.\n", "created_at": "2011-06-04 08:36:31", "user": 2687, "id": 1301083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301295", "text": "@radar, @balupton actually did install rdoc, as seen in the output he pasted. Perhaps an issue with the recently released version of rdoc? There's been two versions of it released in the last 2-3 weeks. I tried installing rc1 myself to see if I can reproduce, and while the rails-3.1.0.rc1 RDoc built for me without error, (rdoc 2.5.11) I got a different error, which may in turn be an issue with yard (0.6.8).\n\n```\nBuilding YARD (yri) index for railties-3.1.0.rc1...\n[error]: Unhandled exception in YARD::Handlers::Ruby::Legacy::ModuleHandler:\n[error]:   in `lib/rails/generators/rails/plugin_new/templates/lib/%name%/engine.rb`:1:\n\n 1: module <%= camelized %>\n\n[error]: ArgumentError: invalid empty object name\n```\n", "created_at": "2011-06-04 10:41:07", "user": 14826, "id": 1301295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314050", "text": "This is a bug in YARD. It is trying to generate documentations for a file that does not contain valid Ruby code.\n", "created_at": "2011-06-07 07:14:16", "user": 9582, "id": 1314050}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "/cc @dhh\n", "labels": [], "number": 1481, "updated_at": "2014-06-26 18:05:28", "user": 3948, "closed_at": "2011-06-27 09:16:24", "id": 1002186, "title": "Generating /lib/assets  for assets", "url": "https://api.github.com/repos/rails/rails/issues/1481", "created_at": "2011-06-04 08:37:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1303744", "text": "@dhh are you ok with this?\n", "created_at": "2011-06-05 07:12:20", "user": 9582, "id": 1303744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380720", "text": "Let's just add lib/assets. People can fill that in with whatever subdirectories they need. Also, don't delete app/assets/images please.\n", "created_at": "2011-06-16 12:56:59", "user": 2741, "id": 1380720}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380747", "text": "@dhh I will just add lib/assets only. I have just moved up actually \" app/assets/images\" in test. \n\nI will update the commits now.\n", "created_at": "2011-06-16 12:59:18", "user": 3948, "id": 1380747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380790", "text": "Commits updated.\n", "created_at": "2011-06-16 13:05:36", "user": 3948, "id": 1380790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400553", "text": "@dhh  i have squashed the commits into one commit. We are only generating lib/assets folder now. \n", "created_at": "2011-06-20 04:45:56", "user": 3948, "id": 1400553}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have an engine at http://github.com/radar/forem which is designed to run on edge Rails. In previous revisions of Rails, I am positive I was able to run `rails g controller topics` and get a namespaced controller if my engine had `isolate_namespace`, i.e. `app/controllers/forem/topics_controller.rb`. At least, that's how I remember it. I think it should work like that too.\n\nSo I dug a little deeper and it actually generates the controller within the _dummy_ application, so I have a new controller at `spec/dummy` rather than in the root of my engine. Therefore, generators in Rails engines _right now_ are broken.\n\nI think this has to do with commit 3022ce4f723075d201d9a20f7bca3537aa76a7d8 by @josevalim who defaults the generators to use `Rails.root`, but I am not sure what is causing the ignoring of the `isolate_namespace`.\n\nI don't know much about the Rails generator code, so I was hoping somebody who does could shed some light on this issue. Thanks.\n", "labels": [], "number": 1482, "updated_at": "2011-06-07 00:43:03", "user": 2687, "closed_at": "2011-06-07 00:43:03", "id": 1002192, "title": "Engine generators generate in dummy app, not engine root", "url": "https://api.github.com/repos/rails/rails/issues/1482", "created_at": "2011-06-04 08:42:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301184", "text": "Fix is available in #1483.\n", "created_at": "2011-06-04 09:33:25", "user": 2687, "id": 1301184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302010", "text": "We are tackling those issues on #1356, let's continue this discussion there?\n", "created_at": "2011-06-04 16:03:38", "user": 9582, "id": 1302010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302074", "text": "Does pull #1483 still need to be apply regarding #1356 then?\n", "created_at": "2011-06-04 16:33:23", "user": 4912, "id": 1302074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302115", "text": "The idea of #1356 is to fix the issue without the Rails.application = engine hack. So in theory we should not apply #1483.\n", "created_at": "2011-06-04 16:47:12", "user": 9582, "id": 1302115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1306166", "text": "I will see if I can apply the changes in #1356 to a local copy of Rails and see if they have a good enough effect.\n\nI am just encountering these bugs as I do my final review of Chapter 16 and I am worried that the book will recommend doing something incorrect and we'll have the whole \"undefined method scaffold\" saga all over again.\n\nVery very interested in doing all I can to ensure people do not encounter issues with Rails when reading books.\n\n> The idea of #1356 is to fix the issue without the Rails.application = engine hack. So in theory we should not apply #1483.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1482#comment_1302115\n", "created_at": "2011-06-05 22:26:56", "user": 2687, "id": 1306166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312915", "text": "Clossing this issue as this is duplicate of #1356, 3-1-stable is fine, it's broken on master.\n", "created_at": "2011-06-07 00:43:03", "user": 5004, "id": 1312915}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "It turns out that I do know enough about the Rails process to fix this. Who would have thought?\n", "labels": [], "number": 1483, "updated_at": "2014-06-12 12:59:45", "user": 2687, "closed_at": "2011-06-07 00:44:10", "id": 1002271, "title": "Fix for #1482", "url": "https://api.github.com/repos/rails/rails/issues/1483", "created_at": "2011-06-04 09:29:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301388", "text": "Oops, this fixes the controller generator but breaks the model generator in ways that I haven't yet been able to figure out. Tomorrow I will be spending the whole day driving to Brisbane so I won't be able to figure it out then.\n", "created_at": "2011-06-04 11:26:48", "user": 2687, "id": 1301388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312783", "text": "@josevalim: These changes add two tests for generators within an engine that are both failing, conclusively proving that it's broken within `master` at the moment. I have no idea myself how to fix these so any assistance I can get from either you or @drogus at understanding the generators code here would be greatly appreciated.\n\nPer your advice, you can revert 62b207f if you wish which re-adds the engines hack that I didn't know was a hack.\n", "created_at": "2011-06-07 00:08:50", "user": 2687, "id": 1312783}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312799", "text": "+1 - I believe this is a blocking issue to releasing 3.1 as with this sort of functionality I believe it is incredibly important to trust that it works precisely as expected.\n", "created_at": "2011-06-07 00:13:13", "user": 10128, "id": 1312799}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312920", "text": "Closing as this is something that should go for #1356, I'll link it there.\n", "created_at": "2011-06-07 00:44:10", "user": 5004, "id": 1312920}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "routes.rb:\nresources :accounts\n\n/accounts/new works as expected\n\nroutes.rb:\nresources :accounts, :only => [:new]\n\n/accounts/new gives:\nRouting Error\nNo route matches {:controller=>\"accounts\", :format=>nil}\n", "labels": [], "number": 1484, "updated_at": "2011-06-04 17:12:50", "user": 10137, "closed_at": "2011-06-04 14:15:34", "id": 1002650, "title": "Problems with :only in resourceful routes", "url": "https://api.github.com/repos/rails/rails/issues/1484", "created_at": "2011-06-04 13:43:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301671", "text": "Which version are you using ? 3.0 or 3.1 ?\n", "created_at": "2011-06-04 13:45:56", "user": 9347, "id": 1301671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301677", "text": "3.1\n\nI'm currently trying to test this in 3.0\n", "created_at": "2011-06-04 13:48:10", "user": 10137, "id": 1301677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1301740", "text": "nm, I guess that's a feature:\nonly: [:new,:create] ... works\nexcept: [:show,:update,:edit,:delete, :index] ... works\nexcept: [:create,:show,:update,:edit,:delete, :index] ... throws a similar error\n", "created_at": "2011-06-04 14:15:34", "user": 10137, "id": 1301740}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302179", "text": "Just to note I can't reproduce this - both `:only` and `:except` work for me, e.g:\n\n```\nresources :accounts, :only => :new\nresources :accounts, :except => [:show, :edit, :update, :destroy, :create, :index]\n```\n\nWas this with the RC?\n", "created_at": "2011-06-04 17:10:47", "user": 6321, "id": 1302179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1302186", "text": "Yes, RC1.\n", "created_at": "2011-06-04 17:12:50", "user": 10137, "id": 1302186}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello guys, I don't know if this is a bug but it broke my heart when I saw it.\n\nI was a migrating a huge application (1M pageviews /day) from Rails 2 to 3, and I forgot to migrate a couple of scopes, we launch the site, and our MySQL was dieing really fast, we check the queries and we noticed that there were some huge results queries (1M records) without limit/offset.\n\nThe error was that when you call a no existing scope, Rails throws an error, but execute the query anyway, I'm using kaminari for pagination, here goes the examples:\n\n> Product.scope1.scope2.page(2).per(10).to_sql\n> \"select \\* from products where scope1 = 1 and scope2 = 2 limit 10, 20\"\n\nNow let's say that scope3 doesn't exists and let's use it\n\n> Product.scope1.scope2.scope3.page(2).per(10).to_sql\n> Error: method missing scope3 for ActiveRecord::Relation\n> But this query goes to DB => \"select \\* from products where scope1 = 1 and scope2 = 2\", you can see it in the logs.\n\nAgain don't know if this is a bug, I don't think that this is a Kaminari issue, nor an Octopus issue (also using it for sharding/replication). This is a bullet in the head for sites with high amount of queries in 2M+ records tables.\n\nObviously I fix it writing down the missing scope.\n\nThanks.\n\nRoR is God.\n", "labels": [], "number": 1485, "updated_at": "2011-11-01 15:14:25", "user": 595468, "closed_at": "2011-06-07 07:13:17", "id": 1002797, "title": "[3.0.7] Missing scope break the chain.", "url": "https://api.github.com/repos/rails/rails/issues/1485", "created_at": "2011-06-04 14:43:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314046", "text": "@Shinta, could you please send this to rails-talk mailing list and try to create a test case to confirm if this is an issue or not? As you can see, we have a lot of issues to tackle and unfortunately we don't have enough time to check if a given scenario is an issue or not, so we give more priority to issues that are 100% verified. Thanks.\n", "created_at": "2011-06-07 07:13:17", "user": 9582, "id": 1314046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2591499", "text": "@josevalim I just created the rails-talk mail http://groups.google.com/group/rubyonrails-talk/browse_thread/thread/cc1107ccdf36fd4d, this just happened to me again.\n\nSorry to create this like 4 month late but I just have lots of stuff on me.\n", "created_at": "2011-11-01 15:14:25", "user": 595468, "id": 2591499}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Resolve remaining issues under https://github.com/sstephenson/sprockets/issues?milestone=2&state=open\n", "labels": [], "number": 1486, "updated_at": "2011-06-22 22:04:06", "user": 137, "closed_at": "2011-06-22 22:04:06", "id": 1002849, "title": "Release Sprockets 2.0", "url": "https://api.github.com/repos/rails/rails/issues/1486", "created_at": "2011-06-04 15:14:46", "comments": [], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "May be I just haven't found it but I can't do such a thing:\n\nI have two models: Items and Tags. When I create a new Item, I want to mark it with tags (one tag or multiple tags). I've tried to set tags as a nested attribute for an item. But in view I couldn't make select-list using fields_for. I've tried to make as in this (http://stackoverflow.com/questions/2104737/accepts-nested-attributes-for-and-select-tag) article but fields that are generated in form haven't been saved. I dont know whether it's my misunderstanding or it's a chance to enhance rails with a method which can construct nested attributes selector.\n", "labels": [], "number": 1487, "updated_at": "2011-06-07 07:10:56", "user": 814984, "closed_at": "2011-06-07 07:10:56", "id": 1004400, "title": "select helper for nested_attributes", "url": "https://api.github.com/repos/rails/rails/issues/1487", "created_at": "2011-06-05 06:04:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314038", "text": "Could you please use rails-talk mailing list or stackoverflow for questions? The issues tracker is for _issues_. Thanks.\n", "created_at": "2011-06-07 07:10:56", "user": 9582, "id": 1314038}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Given:\n\n```\napp/assets/stylesheets/xmlhr.js\napp/assets/stylesheets/extra.js\n```\n\nThis allow you to include multiple sources at once:\n\n``` ruby\n<%= javascript_include_tag(\"xmlhr\", \"extra\") %>\n```\n", "labels": [], "number": 1488, "updated_at": "2014-07-03 04:46:53", "user": 160941, "closed_at": "2011-06-05 07:10:26", "id": 1004427, "title": "Allow multiple sources in Sprockets helpers", "url": "https://api.github.com/repos/rails/rails/issues/1488", "created_at": "2011-06-05 06:21:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In RC1 if you do this:\n\nTestApp::Application.config.assets.prefix     = \"/something\"\n\nThe helpers still output:  /assets/whatever instead of /something/whatever\n\nThe content is correctly available at  /something/whatever\n\n(I have an app that already uses /assets for paperclip and a bunch of other stuff)\n", "labels": [], "number": 1489, "updated_at": "2011-06-07 21:29:22", "user": 30732, "closed_at": "2011-06-07 21:29:22", "id": 1004462, "title": "Helpers dont respect config.assets.prefix", "url": "https://api.github.com/repos/rails/rails/issues/1489", "created_at": "2011-06-05 06:43:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322722", "text": "2684f17a17e4f97bdb89d20b4cd08585235263a2\n", "created_at": "2011-06-07 21:29:22", "user": 137, "id": 1322722}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "using activerecord_unittest2 for second db\n", "labels": [], "number": 1490, "updated_at": "2014-07-03 04:47:00", "user": 3948, "closed_at": "2011-06-05 10:36:59", "id": 1004796, "title": "using activerecord_unittest2 for second db", "url": "https://api.github.com/repos/rails/rails/issues/1490", "created_at": "2011-06-05 10:04:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304113", "text": "Closing.!! Already done in master.!\n", "created_at": "2011-06-05 10:36:59", "user": 3948, "id": 1304113}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hey to all,\n\nTested on two computers (one dev. under Macosx and a production server on FreeBSD). Using Rails 3.0.7 and ruby 1.9.2. Tested on brand new apps.\n\nWhen running `rake test`, development logs are written. Have to use `rake test RAILS_ENV=\"test\"` to see the test logs written. I was thinking it was  a normal behavior, apparently not.\n\nAnyway, great job everyone!\n", "labels": [], "number": 1491, "updated_at": "2011-06-07 11:56:02", "user": 307597, "closed_at": "2011-06-07 07:09:13", "id": 1005103, "title": "[Rails 3.0.7] When using `rake test`, default log written is development one", "url": "https://api.github.com/repos/rails/rails/issues/1491", "created_at": "2011-06-05 12:30:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314035", "text": "Yes, all rake tasks by default use development. This is the reason the `rake test` internally starts other tasks manually setting RAILS_ENV to test.\n", "created_at": "2011-06-07 07:09:13", "user": 9582, "id": 1314035}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315225", "text": "Ok, thanks for the response. Great job man.\n", "created_at": "2011-06-07 11:56:02", "user": 307597, "id": 1315225}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1492, "updated_at": "2011-06-05 14:03:56", "user": 639851, "closed_at": "2011-06-05 14:03:56", "id": 1005246, "title": "Rails 3.0.7  - before_filter returns false, but action executed", "url": "https://api.github.com/repos/rails/rails/issues/1492", "created_at": "2011-06-05 13:38:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304633", "text": "pilot error\n", "created_at": "2011-06-05 14:03:56", "user": 639851, "id": 1304633}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "<pre>\nTest Case Description:\n\nCreated vanilla rails 3.0.7 app with single controller containing 5 actions.\nEach action was guarded by a 'before_filter ..., :only => <action>'.\nEach action and each filter 'puts <identifying message>'\nThe five filters did:\n1. always returned true\n2. always returned false\n3. always rendered 'action a'\n4. always redirected to 'action a'\n5. always raised an exception\n   Ran test case via Webrick on port 3001\n   Probed each action using 'curl http://localhost:3001/a/<action>'\n\n1, 3, 4, & 5 performed as expected\n2 failed\n\nSee https://mikehoward@github.com/mikehoward/before_filter_but.git for test case\n", "labels": [], "number": 1493, "updated_at": "2013-07-31 07:56:44", "user": 639851, "closed_at": "2011-06-05 15:52:40", "id": 1005273, "title": "Rails 3.0.7  - before_filter returns false, but action executed", "url": "https://api.github.com/repos/rails/rails/issues/1493", "created_at": "2011-06-05 13:51:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304933", "text": "The return value of a before_filter doesn't affect whether the filter chain is halted - this changed in Rails 2.0 if I remember correctly. You need to provide a response body to halt the filter chain - normally via a render or redirect but even something like head will work.\n", "created_at": "2011-06-05 15:52:40", "user": 6321, "id": 1304933}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304971", "text": "Thanks - I'll forward this to Prag Programmers so they can fix the book\n\nDo you know where I can find examples of this?\n\nDave: this contradicts the text in Agile Web Dev with Rails 3 pp 336-337\n\nfrom page 336:\n\"Filters can be passive, monitoring activity performed by a controller. They can also take a more active part in request handling. If a before filter returns false, processing of the filter chain terminates, and the action is not run. A filter may also render output or redirect requests, in which case the original action never gets invoked.\"\n\nMike\n\nMike Howard\nmike@clove.com\nhttp://www.clove.com\nhttp://mikehoward-musings.posterous.com\n\nOn Jun 5, 2011, at 9:52 AM, pixeltrix wrote:\n\n> The return value of a before_filter doesn't affect whether the filter chain is halted - this changed in Rails 2.0 if I remember correctly. You need to provide a response body to halt the filter chain - normally via a render or redirect but even something like head will work.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1493#comment_1304933\n", "created_at": "2011-06-05 16:03:54", "user": 639851, "id": 1304971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1305031", "text": "No need - it's already in the errata: http://pragprog.com/titles/rails3/errata\n", "created_at": "2011-06-05 16:23:25", "user": 6321, "id": 1305031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1305041", "text": "Damn! I must have missed that.\n\nThanks,\nMike\n\nMike Howard\nmike@clove.com\nhttp://www.clove.com\nhttp://mikehoward-musings.posterous.com\n\nOn Jun 5, 2011, at 10:23 AM, pixeltrix wrote:\n\n> No need - it's already in the errata: http://pragprog.com/titles/rails3/errata\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1493#comment_1305031\n", "created_at": "2011-06-05 16:25:36", "user": 639851, "id": 1305041}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "So following is the result of 'rake test_mysql' on 'activerecord'\n\n<pre>\nFinished in 187.706285 seconds.\n\n  1) Failure:\ntest_preserves_existing_fixture_data(FoxyFixturesTest) [/Users/anil.wadghule/Code/rails/rails/activerecord/test/cases/fixtures_test.rb:592]:\n<Sun, 22 May 2011> expected but was\n<Mon, 23 May 2011>.\n\n2982 tests, 9217 assertions, 1 failures, 0 errors, 0 skips\n</pre>\n\n\nCommit fixes this failing test.\n", "labels": [], "number": 1494, "updated_at": "2014-06-25 09:44:52", "user": 266, "closed_at": "2011-07-06 19:23:20", "id": 1005313, "title": "Fix failing test because of Timezone difference.", "url": "https://api.github.com/repos/rails/rails/issues/1494", "created_at": "2011-06-05 14:18:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514499", "text": "@anildigital should we backport this to 3-1-stable?\n", "created_at": "2011-07-06 19:23:47", "user": 52642, "id": 1514499}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Don't know why it's giving error with i18n gem. \n\nIt was loading i18n/version actually. Need to figure out why not working with i18n.\n\nChanging gem here in test doesn't matter. As checking same. \n\nError coming was \n\n<pre>\n  1) Error:\ntest_require_library_or_gem_deprecated(KernelTest):\nNameError: uninitialized constant I18n\n    /Users/arunagw/checkouts/rails/activesupport/lib/active_support/i18n.rb:9\n    /Users/arunagw/checkouts/rails/bundle/ruby/1.8/gems/i18n-0.6.0/lib/i18n/version.rb:1\n    /Users/arunagw/checkouts/rails/bundle/ruby/1.8/gems/i18n-0.6.0/lib/i18n.rb:1:in `require'\n    /Users/arunagw/checkouts/rails/bundle/ruby/1.8/gems/i18n-0.6.0/lib/i18n.rb:1\n\n</pre>\n\n\nThis is only for 3-1-stable as it's deprecated in 3-1-stable branch only.\nThis can give 3-1-stable as green build.\n", "labels": [], "number": 1495, "updated_at": "2014-07-03 04:47:10", "user": 3948, "closed_at": "2011-06-05 15:30:28", "id": 1005423, "title": "Fixed failing isolated test", "url": "https://api.github.com/repos/rails/rails/issues/1495", "created_at": "2011-06-05 15:15:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The link about savepoints for mysql in \"activerecord/lib/active_record/transactions.rb\" at line 168 is broken. It should be \"http://dev.mysql.com/doc/refman/5.0/en/savepoint.html\" (not \".../savepoints.html\"). \n", "labels": [], "number": 1496, "updated_at": "2011-06-05 16:13:35", "user": 202410, "closed_at": "2011-06-05 15:59:16", "id": 1005484, "title": "link broken in documentation for transactions.rb", "url": "https://api.github.com/repos/rails/rails/issues/1496", "created_at": "2011-06-05 15:43:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1304954", "text": "It's already been fixed in the [docrails project](https://github.com/lifo/docrails) - it will be merged into the main repository at the next scheduled time. In future you can make the change directly yourself - the docrails project has a public write access.\n", "created_at": "2011-06-05 15:59:16", "user": 6321, "id": 1304954}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1305008", "text": "Ok, thanks Andrew! \n", "created_at": "2011-06-05 16:13:35", "user": 202410, "id": 1305008}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "/cc @jonleighton\n\nI think loading_test.rb is also needed. I can send one more or update this pull request :-)\n", "labels": [], "number": 1497, "updated_at": "2014-06-26 07:22:02", "user": 3948, "closed_at": "2011-06-06 09:43:42", "id": 1005823, "title": "framework_test.rb also dependent on RAILS_ENV=development", "url": "https://api.github.com/repos/rails/rails/issues/1497", "created_at": "2011-06-05 18:12:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308174", "text": "@josevalim Please cherry-pick these into 3-1-stable and 3-0-stable also.\n", "created_at": "2011-06-06 09:49:06", "user": 3948, "id": 1308174}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix undefined method collect bug in ActiveResource instantiate_collection. When trying to interact with the Basecamp API I ran into this bug and am able to consistently reproduce it with the following steps:\n\n```\n>> require 'active_resource'\n=> true\n>> class Project < ActiveResource::Base\n>>   self.site = \"https://BASECAMPURL.basecamphq.com\"\n>>   self.user = \"BASECAMPAPIKEY\"\n>>   self.password = \"X\" # Leave as X as mentioned in the documentation\n>> end\n=> \"X\"\n>> Project.all\nNoMethodError: undefined method `collect!' for #<Hash:0x101b45788>\n    from /Library/Ruby/Gems/1.8/gems/activeresource-3.1.0.rc1/lib/active_resource/base.rb:926:in `instantiate_collection'\n    from /Library/Ruby/Gems/1.8/gems/activeresource-3.1.0.rc1/lib/active_resource/base.rb:894:in `find_every'\n    from /Library/Ruby/Gems/1.8/gems/activeresource-3.1.0.rc1/lib/active_resource/base.rb:806:in `find'\n    from /Library/Ruby/Gems/1.8/gems/activeresource-3.1.0.rc1/lib/active_resource/base.rb:832:in `all'\n    from (irb):7\n```\n\ninstantiate_collection is expecting an Array to be returned but after the XML decode it's receiving a Hash like this:\n`{\"count\"=>1, \"records\"=>[{\"name\"=>\"Project1\", ... }], \"nextOffset\"=>nil, \"limit\"=>25, \"offset\"=>0}`\n\nI wasn't sure what the best way would be to reproduce this in a test case, but if you have any suggestions, please let me know.\n", "labels": [], "number": 1498, "updated_at": "2014-06-20 04:39:41", "user": 67093, "closed_at": "2011-06-07 07:08:11", "id": 1005992, "title": "[3.1.0rc1] Undefined method 'collect!' bug in ActiveResource instantiate_collection", "url": "https://api.github.com/repos/rails/rails/issues/1498", "created_at": "2011-06-05 19:01:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314029", "text": "It is better to use respond_to?() instead of checking instance_of. Also, could you please provide tests? I am closing the pull request, but please reopen it once a new patch is provided.\n", "created_at": "2011-06-07 07:08:11", "user": 9582, "id": 1314029}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316846", "text": "I'm not sure that there's a rails bug here - the /projects.json API call is returning extra keys in the JSON response so `Formats.remove_root` isn't doing anything. What we certainly shouldn't be doing is assuming the root element is called 'records'. @dhh is the Basecamp API meant to return those extra keys? They seem to be related to pagination:\n\n```\n>> json.keys\n=> [\"records\", \"count\", \"nextOffset\", \"limit\", \"offset\"]\n```\n", "created_at": "2011-06-07 15:40:01", "user": 6321, "id": 1316846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3556114", "text": "See https://github.com/rails/rails/issues/2318#issuecomment-3555973 for a solution, just use `ActiveResource::Formats::JsonFormat` and `ActiveSupport::JSON.decode` instead.\n", "created_at": "2012-01-19 00:49:00", "user": 67034, "id": 3556114}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nI try to apply episode 256 from Ryan Bates :\nhttp://railscasts.com/episodes/256-i18n-backends\n\nBut with Rails 3.1.0 rc1 but I have this error :\nMultiJson::DecodeError in Tickets#index\n    737: unexpected token at '\"Welcome from redis\"'\n\nThe error expected with Redis but also with :\n    I18n.backend = I18n::Backend::KeyValue.new({})\n\nThanks for your help.\n\n```\nfor f in Gemfile* config/initializers/i18n_backend.rb app/controllers/translations_controller.rb ; do echo \"    ==== $f\" ; cat $f | sed 's/^/    /' ; done\n==== Gemfile\nsource 'http://rubygems.org'\n\ngem 'rails', '3.1.0.rc1'\n\n# Bundle edge Rails instead:\n# gem 'rails',     :git => 'git://github.com/rails/rails.git'\n\ngem 'sqlite3'\n\n# Asset template engines\ngem 'sass'\ngem 'coffee-script'\ngem 'uglifier'\n\ngem 'jquery-rails'\n\n# Add mongo mapper\ngem 'mongo_mapper'\ngem 'bson_ext'\n\n# Add redis\ngem 'redis'\n\n# Use unicorn as the web server\n# gem 'unicorn'\n\n# Deploy with Capistrano\n# gem 'capistrano'\n\n# To use debugger\n# gem 'ruby-debug19', :require => 'ruby-debug'\n\ngroup :test do\n  # Pretty printed test output\n  gem 'turn', :require => false\n  gem 'rspec-rails'\n  gem 'rb-fsevent', :require => false if RUBY_PLATFORM =~ /darwin/i\n  gem 'growl', :require => false if RUBY_PLATFORM =~ /darwin/i\n  gem 'guard-rspec'\n  gem 'guard-livereload'\n  gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'\n  gem 'launchy'\n  gem 'database_cleaner'\nend\n==== Gemfile.lock\nGIT\n  remote: git://github.com/jnicklas/capybara.git\n  revision: e1091daced2513a2d2ce15ae4033d9da1ced9f7e\n  specs:\n    capybara (1.0.0.beta1)\n      mime-types (>= 1.16)\n      nokogiri (>= 1.3.3)\n      rack (>= 1.0.0)\n      rack-test (>= 0.5.4)\n      selenium-webdriver (~> 0.2.0)\n      xpath (~> 0.1.4)\n\nGEM\n  remote: http://rubygems.org/\n  specs:\n    actionmailer (3.1.0.rc1)\n      actionpack (= 3.1.0.rc1)\n      mail (~> 2.3.0)\n    actionpack (3.1.0.rc1)\n      activemodel (= 3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      i18n (~> 0.6.0beta1)\n      rack (~> 1.3.0.beta2)\n      rack-cache (~> 1.0.1)\n      rack-mount (~> 0.8.1)\n      rack-test (~> 0.6.0)\n      sprockets (~> 2.0.0.beta.5)\n      tzinfo (~> 0.3.27)\n    activemodel (3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n      bcrypt-ruby (~> 2.1.4)\n      builder (~> 3.0.0)\n      i18n (~> 0.6.0beta1)\n    activerecord (3.1.0.rc1)\n      activemodel (= 3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n      arel (~> 2.1.1)\n      tzinfo (~> 0.3.27)\n    activeresource (3.1.0.rc1)\n      activemodel (= 3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n    activesupport (3.1.0.rc1)\n      multi_json (~> 1.0)\n    addressable (2.2.6)\n    ansi (1.2.5)\n    arel (2.1.1)\n    bcrypt-ruby (2.1.4)\n    bson (1.3.1)\n    bson_ext (1.3.1)\n    builder (3.0.0)\n    childprocess (0.1.9)\n      ffi (~> 1.0.6)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.1.1)\n    configuration (1.2.0)\n    database_cleaner (0.6.7)\n    diff-lcs (1.1.2)\n    em-websocket (0.2.1)\n      addressable (>= 2.1.1)\n      eventmachine (>= 0.12.9)\n    erubis (2.7.0)\n    eventmachine (0.12.10)\n    execjs (1.1.0)\n      multi_json (~> 1.0)\n    ffi (1.0.9)\n    growl (1.0.3)\n    guard (0.3.4)\n      thor (~> 0.14.6)\n    guard-livereload (0.1.11)\n      em-websocket (~> 0.2.0)\n      guard (>= 0.2.2)\n      json (~> 1.5.1)\n    guard-rspec (0.3.1)\n      guard (>= 0.2.2)\n    hike (1.0.0)\n    i18n (0.6.0)\n    jquery-rails (1.0.9)\n      railties (~> 3.0)\n      thor (~> 0.14)\n    json (1.5.1)\n    json_pure (1.5.1)\n    launchy (0.4.0)\n      configuration (>= 0.0.5)\n      rake (>= 0.8.1)\n    mail (2.3.0)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.16)\n    mongo (1.3.1)\n      bson (>= 1.3.1)\n    mongo_mapper (0.9.1)\n      activemodel (~> 3.0)\n      activesupport (~> 3.0)\n      plucky (~> 0.3.8)\n    multi_json (1.0.3)\n    nokogiri (1.4.4)\n    plucky (0.3.8)\n      mongo (~> 1.3)\n    polyglot (0.3.1)\n    rack (1.3.0)\n    rack-cache (1.0.2)\n      rack (>= 0.4)\n    rack-mount (0.8.1)\n      rack (>= 1.0.0)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.0)\n      rack (>= 1.0)\n    rails (3.1.0.rc1)\n      actionmailer (= 3.1.0.rc1)\n      actionpack (= 3.1.0.rc1)\n      activerecord (= 3.1.0.rc1)\n      activeresource (= 3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n      bundler (~> 1.0)\n      railties (= 3.1.0.rc1)\n    railties (3.1.0.rc1)\n      actionpack (= 3.1.0.rc1)\n      activesupport (= 3.1.0.rc1)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      thor (~> 0.14.6)\n    rake (0.9.1)\n    rb-fsevent (0.4.0)\n    redis (2.2.0)\n    rspec (2.6.0)\n      rspec-core (~> 2.6.0)\n      rspec-expectations (~> 2.6.0)\n      rspec-mocks (~> 2.6.0)\n    rspec-core (2.6.3)\n    rspec-expectations (2.6.0)\n      diff-lcs (~> 1.1.2)\n    rspec-mocks (2.6.0)\n    rspec-rails (2.6.1)\n      actionpack (~> 3.0)\n      activesupport (~> 3.0)\n      railties (~> 3.0)\n      rspec (~> 2.6.0)\n    rubyzip (0.9.4)\n    sass (3.1.2)\n    selenium-webdriver (0.2.1)\n      childprocess (>= 0.1.7)\n      ffi (>= 1.0.7)\n      json_pure\n      rubyzip\n    sprockets (2.0.0.beta.9)\n      hike (~> 1.0)\n      rack (~> 1.0)\n      tilt (!= 1.3.0, ~> 1.1)\n    sqlite3 (1.3.3)\n    thor (0.14.6)\n    tilt (1.3.2)\n    treetop (1.4.9)\n      polyglot (>= 0.3.1)\n    turn (0.8.2)\n      ansi (>= 1.2.2)\n    tzinfo (0.3.27)\n    uglifier (0.5.4)\n      execjs (>= 0.3.0)\n      multi_json (>= 1.0.2)\n    xpath (0.1.4)\n      nokogiri (~> 1.3)\n\nPLATFORMS\n  ruby\n\nDEPENDENCIES\n  bson_ext\n  capybara!\n  coffee-script\n  database_cleaner\n  growl\n  guard-livereload\n  guard-rspec\n  jquery-rails\n  launchy\n  mongo_mapper\n  rails (= 3.1.0.rc1)\n  rb-fsevent\n  redis\n  rspec-rails\n  sass\n  sqlite3\n  turn\n  uglifier\n==== config/initializers/i18n_backend.rb\nTRANSLATION_STORE = Redis.new  \nI18n.backend = I18n::Backend::Chain.new(I18n::Backend::KeyValue.new(TRANSLATION_STORE), I18n.backend)\n==== app/controllers/translations_controller.rb\nclass TranslationsController < ApplicationController\n  def index\n    @translations = TRANSLATION_STORE\n  end\n\n  def create\n    I18n.backend.store_translations(params[:locale], {params[:key] => params[:value]}, :escape => false)\n    redirect_to translations_url, :notice => \"Added translations\"\n  end\nend\n```\n", "labels": ["i18n"], "number": 1499, "updated_at": "2012-08-21 04:31:52", "user": 247138, "closed_at": "2012-08-21 04:31:52", "id": 1006047, "title": "[3.1.0.rc1] MultiJson::DecodeError with alternative I18n Backends ", "url": "https://api.github.com/repos/rails/rails/issues/1499", "created_at": "2011-06-05 19:15:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312363", "text": "I had to change this line https://github.com/svenfuchs/i18n/blob/master/lib/i18n/backend/key_value.rb#L76 to <pre>@store[key] = ActiveSupport::JSON.encode([value]) unless value.is_a?(Symbol)</pre>\n\nAnd https://github.com/svenfuchs/i18n/blob/master/lib/i18n/backend/key_value.rb#L93 to <pre>value = ActiveSupport::JSON.decode(value)[0] if value</pre>\n\nI don't know why, but there is somethong wrong with decoding plain text.\n", "created_at": "2011-06-06 22:25:49", "user": 108694, "id": 1312363}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346964", "text": "Yes ! Many thanks.\n\nBellow the monkey patch :\n\n```\ndiff --git a/config/environment.rb b/config/environment.rb\nindex bb2ed67..025e04f 100644\n--- a/config/environment.rb\n+++ b/config/environment.rb\n@@ -1,5 +1,43 @@\n # Load the rails application\n require File.expand_path('../application', __FILE__)\n\n+module I18n\n+  module Backend\n+    class KeyValue\n+      module Implementation\n+        def store_translations(locale, data, options = {})\n+          escape = options.fetch(:escape, true)\n+          flatten_translations(locale, data, escape, @subtrees).each do |key, value|\n+            key = \"#{locale}.#{key}\"\n+\n+            case value\n+            when Hash\n+              if @subtrees && (old_value = @store[key])\n+                old_value = ActiveSupport::JSON.decode(old_value)\n+                value = old_value.deep_symbolize_keys.deep_merge!(value) if old_value.is_a?(Hash)\n+              end\n+            when Proc\n+              raise \"Key-value stores cannot handle procs\"\n+            end\n+\n+            #@store[key] = ActiveSupport::JSON.encode(value) unless value.is_a?(Symbol)\n+            @store[key] = ActiveSupport::JSON.encode([value]) unless value.is_a?(Symbol)\n+          end\n+        end\n+\n+      protected\n+\n+        def lookup(locale, key, scope = [], options = {})\n+          key   = normalize_flat_keys(locale, key, scope, options[:separator])\n+          value = @store[\"#{locale}.#{key}\"]\n+          #value = ActiveSupport::JSON.decode(value) if value\n+          value = ActiveSupport::JSON.decode(value)[0] if value\n+          value.is_a?(Hash) ? value.deep_symbolize_keys : value\n+        end\n+      end\n+    end\n+  end\n+end\n+\n # Initialize the rails application\n Tickets::Application.initialize!\n```\n", "created_at": "2011-06-11 09:08:38", "user": 247138, "id": 1346964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347146", "text": "Could you make a pull request ?\n", "created_at": "2011-06-11 10:53:55", "user": 9347, "id": 1347146}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1349062", "text": "Looks like an error in i18n, @svenfuchs can you take a look to this?\n", "created_at": "2011-06-11 14:27:28", "user": 160941, "id": 1349062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1349171", "text": "folks, thanks for tracking this down!\n\ni'll ask @josevalim to look into this as i have no clue about the keyvalue backend :)\n", "created_at": "2011-06-11 14:33:42", "user": 2208, "id": 1349171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1349364", "text": "My thoughts:\n\nJSON should decode simple text value, but some person says that this is incorrect (e.g. JSON should work only with objects). So there s 2 ways to fix it:\n1. Make json library to work correctly with strings\n2. Transparently convert string to object  (e.g. array).\n\nfirst looks way better for me.\n", "created_at": "2011-06-11 14:44:08", "user": 108694, "id": 1349364}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1349905", "text": "I believe simply the string is not valid JSON, right? So wrapping it in an array in the backend seems like the proper solution.\n", "created_at": "2011-06-11 15:09:30", "user": 9582, "id": 1349905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350209", "text": "@josevalim, some json implementations works correctly with encoded strings (e.g \"foo bar\"). it decodes to simple string. just drops quotes\n", "created_at": "2011-06-11 15:23:35", "user": 108694, "id": 1350209}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350794", "text": "Even multi_json right now encodes string (for example \"foo bar\") to \"\\\"foo bar\\\"\", but can't decode back.\n", "created_at": "2011-06-11 16:04:33", "user": 108694, "id": 1350794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351028", "text": "If put data in a array is a good solution I made a pull request :\nhttps://github.com/svenfuchs/i18n/pull/97\n", "created_at": "2011-06-11 16:16:34", "user": 247138, "id": 1351028}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1594268", "text": "It's json gem problem, with other engines all works fine. I install gem 'yajl-ruby' instead 'json' and have no more trouble with MultiJson::DecodeError\n", "created_at": "2011-07-18 10:37:08", "user": 426230, "id": 1594268}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1962660", "text": "It's related to flori/json#84, and yajl-ruby seems not working as workaround with rails >= 3.1.0.rc6 (no, not even with fresh new 3.1)\n", "created_at": "2011-08-31 22:09:36", "user": 207895, "id": 1962660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2092283", "text": "is there any solution to this available?\n", "created_at": "2011-09-14 11:45:27", "user": 202063, "id": 2092283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2130316", "text": "@rweng\ntemporary solution: see nledez's monkey patch above.\nlong term solution: JSON.parse(\"a\".to_json) needs to be addressed (see carlesso's entry on  https://github.com/flori/json/issues/84)\n", "created_at": "2011-09-19 04:26:37", "user": 630408, "id": 2130316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2258410", "text": "Install [yajl-ruby](https://github.com/brianmario/yajl-ruby) and put in your config/application.rb: \n\n```\nrequire 'yajl/json_gem'\n```\n\nAnd everything is working again, no monkey patching needed:).\nTested with rails 3.1 and Redis backend.\n", "created_at": "2011-10-01 19:11:28", "user": 624416, "id": 2258410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2470308", "text": "That fixed it! Wonderful Pajk!\n", "created_at": "2011-10-20 15:45:42", "user": 611106, "id": 2470308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4668144", "text": "Pajk!\n\nYou just made my day! Wasted close to 10hrs trying to work around this MultiJson::DecodeError and being close to going back to good ol' yml-files, you came miraculously into my \"google-radar\"\n\nPerfect!\n", "created_at": "2012-03-23 21:16:46", "user": 193245, "id": 4668144}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5062025", "text": "thx pajk. your solution works like a charm. well done.\n", "created_at": "2012-04-11 04:33:31", "user": 1515246, "id": 5062025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5223547", "text": "Sorry, can't get this to work, I must be missing something obvious here... \n\nruby 1.9.3p125 (2012-02-16) [i386-mingw32], rails 3.2.1\n\nFrom a simple tutorial:\n\nrails new demo\ncd demo\nrails g controller Hello index\nrails s\n0.0.0.0:3000/Hello\n\nMultiJson::DecodeError in Hello#index\n C:/Sites/dem/app/views/layouts/application.html.erb where line #6 raised:\n <%= javascript_include_tag \"application\" %>\n\nSo... installed yajl-ruby; \nchanged gemfile to include: gem 'yajl-ruby'\nchanged config\\application.rb to include: require 'yajl/json_gem'\nremoved json from gemfile.lock\n\nNew bundle install shows using yajl and not json gem.\n\nRepeat steps as above:\nrails s\n0.0.0.0:3000/Hello\n\nGives the same error message as before, at the same location:\n <%= javascript_include_tag \"application\" %>\n\nDo I need to remove other dependencies?\n", "created_at": "2012-04-19 14:57:07", "user": 1347071, "id": 5223547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5278457", "text": "Are there any quick solutions for this on JRuby, where yajl-ruby isn't an option?\n", "created_at": "2012-04-23 10:51:08", "user": 2651, "id": 5278457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5396613", "text": "@Pajk it woked like a charm.. thanks!\n", "created_at": "2012-04-28 12:57:08", "user": 422039, "id": 5396613}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399344", "text": "@svenfuchs @josevalim can we close this one?\n", "created_at": "2012-04-28 19:14:13", "user": 47848, "id": 5399344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7891291", "text": "Closing this now. Please reopen if issue still exists.\n\nCheers, \nArun\n", "created_at": "2012-08-21 04:31:52", "user": 3948, "id": 7891291}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I need to pass the :except option into uglifier to protect the $super keyword in my javascript. I checked the API's of YUI and Closure, and all 3 support an options hash passed to the initializer. So it seems like another config key addresses the issue.\n", "labels": [], "number": 1500, "updated_at": "2014-06-14 18:35:12", "user": 1789, "closed_at": "2012-04-28 15:32:59", "id": 1007273, "title": "Allow options to be passed to the javascript compressor", "url": "https://api.github.com/repos/rails/rails/issues/1500", "created_at": "2011-06-06 02:58:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307313", "text": "Maybe we could allow js_compressor to be a lambda and in such cases we just invoke it? Wouldn't it be better than adding a new config option? /cc @wycats\n", "created_at": "2011-06-06 05:57:31", "user": 9582, "id": 1307313}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1307328", "text": "That seems reasonable to me, too.\n", "created_at": "2011-06-06 06:01:31", "user": 1789, "id": 1307328}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326257", "text": "@nathansobo what is so special about <tt>$super</tt> in JavaScript. And secondly why uglifier does not handle it correcly already? I'm just curious!\n", "created_at": "2011-06-08 12:21:18", "user": 6399, "id": 1326257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328336", "text": "We built a layer on top of normal prototype-based inheritance that allows you to specify $super as the first parameter to a method and call it to invoke the method from the superclass. Prototype.js uses a similar technique as well. So the uglifier can't know we're planning on using the parameters in this way and we have to tell it. Our module system actually inspects the names of the function parameters when it's setting up our constructors.\n", "created_at": "2011-06-08 17:27:29", "user": 1789, "id": 1328336}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328366", "text": "Wow. That's hardcore. Thanks for the clarification. \n", "created_at": "2011-06-08 17:31:29", "user": 6399, "id": 1328366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4140031", "text": "So pull request thread hijacking aside, is this feature going anywhere? Is it in 3.2, maybe? I kind of need it, too.\n", "created_at": "2012-02-23 16:50:42", "user": 50673, "id": 4140031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5394179", "text": "@nathansobo any idea to do more work on this issue, as per @josevalim idea? Otherwise I'd like to close the issue, thanks.\n", "created_at": "2012-04-28 03:46:07", "user": 26328, "id": 5394179}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5397585", "text": "I liked the `lambda` idea better than my pull request, but I don't have time to implement it right now. I'll go ahead and close it for now.\n", "created_at": "2012-04-28 15:32:59", "user": 1789, "id": 5397585}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5397713", "text": "@nathansobo alright, thanks.\n", "created_at": "2012-04-28 15:52:29", "user": 26328, "id": 5397713}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi.\n\nUsing `update_all` in `touch` looks smart enough, but there is a hidden issue in this: `update_all` uses `default_scope`.\n\nImagine a situation: you have the following `User` class:\n\n``` ruby\nclass User < ActiveRecord::Base\n  default_scope :active => true\nend\n\nuser = User.unscoped.where(:active => false).first\n\nuser.touch\n# This fires sql \"UPDATE `users` SET `updated_at` = ? WHERE `users`.`active` = 0\"\n# and so our user instance remains changed (and the database remains unchanged)\nuser.changed? #=> true\nuser.reload # brings old updated_at value back to life\n```\n\nI've provided a test proving that and a fix for the issue.\n", "labels": [], "number": 1501, "updated_at": "2014-07-03 04:47:27", "user": 124430, "closed_at": "2011-06-07 04:36:19", "id": 1007952, "title": "ActiveRecord::Persistence#touch should not use default_scope", "url": "https://api.github.com/repos/rails/rails/issues/1501", "created_at": "2011-06-06 07:44:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313584", "text": "Redone in #1519\n", "created_at": "2011-06-07 04:36:35", "user": 124430, "id": 1313584}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\n#config/application.rb\n#..stuff..\n  config.autoload_paths += %W(#{config.root}/lib)\n#..stuff..\n\n#lib/parent.rb\nclass Parent\n  class_attribute :name\nend\n\n#lib/parent/nested.rb\nclass Parent::Nested\nend\n```\n\n<code>\n$ rails c\nLoading development environment (Rails 3.0.7)\nirb(main):001:0> Parent\n=> Parent\nirb(main):002:0> Parent::Nested\nNameError: uninitialized constant Nested\n    from (irb):2\n</code>\n\nThis happens only when I add the `class_attribute :name` line in `Parent`. Everything works fine if I comment-out `class_attribute :name` from `Parent`.\nUsing\nRails - 3.0.7\nRuby - ruby 1.8.7 (2010-06-23 patchlevel 299) [x86_64-linux]\nOS - Ubuntu 10.10 amd64 GNU/Linux 2.6.35-28-generic\n", "labels": [], "number": 1502, "updated_at": "2011-06-06 12:50:59", "user": 233999, "closed_at": "2011-06-06 12:30:18", "id": 1008052, "title": "class_attribute won't let nested classes (auto-)load.", "url": "https://api.github.com/repos/rails/rails/issues/1502", "created_at": "2011-06-06 08:05:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308765", "text": "This is not a bug. \n\n``` ruby\nruby-1.9.2-p180 :002 > class Foo; end\n => nil \nruby-1.9.2-p180 :003 > Foo.name\n => \"Foo\" \n```\n\nRuby has built-in method `name` defined in all the classes and Rails uses that method to find out nesting of class/modules. When you declare a `class_attribute` `name` you are overriding that method and Rails is unable to determine nesting of classes and hence auto-loading of nested classes fail.\n", "created_at": "2011-06-06 12:09:23", "user": 278, "id": 1308765}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308863", "text": "The problem is calling the attribute `:name` - this overrides the built-in method which breaks the inspection of the constant. If you actually set `:name` to 'Parent' before trying to load `Parent::Nested` it will load correctly.\n", "created_at": "2011-06-06 12:30:17", "user": 6321, "id": 1308863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308943", "text": "@gnufied: Good catch!\n", "created_at": "2011-06-06 12:50:58", "user": 2480, "id": 1308943}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I am not sure this is a bug or this is my mistake,\n\nMy rails version is 3.0.05 and ruby version is ruby 1.9.2p0\n\nWhen i want to iterate over time like that\n\n(Time.now.to_s(:db)..(Time.now + 1.hour).to_s(:db)).each {|t| puts t }\n\nIt gives me like that\n\n...\n2011-06-06 12:99:60\n2011-06-06 12:99:61\n2011-06-06 12:99:62\n2011-06-06 12:99:63\n2011-06-06 12:99:64\n2011-06-06 12:99:65\n2011-06-06 12:99:66\n2011-06-06 12:99:67\n2011-06-06 12:99:68\n2011-06-06 12:99:69\n2011-06-06 12:99:70\n2011-06-06 12:99:71\n2011-06-06 12:99:72\n2011-06-06 12:99:73\n2011-06-06 12:99:74\n2011-06-06 12:99:75\n2011-06-06 12:99:76\n2011-06-06 12:99:77\n2011-06-06 12:99:78\n2011-06-06 12:99:79\n2011-06-06 12:99:80\n...\n\nRegards,\n\nMurat USTUNTAS\n", "labels": [], "number": 1503, "updated_at": "2011-06-06 11:39:58", "user": 728608, "closed_at": "2011-06-06 11:37:11", "id": 1008404, "title": "Wrong Iteration over time", "url": "https://api.github.com/repos/rails/rails/issues/1503", "created_at": "2011-06-06 09:05:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308154", "text": "What you're doing is incrementing the String value of the time. What you should do is something like this, where the time is converted to integer first, since Ruby [can't iterate on Time range](http://redmine.ruby-lang.org/issues/3623):\n\n```\n(Time.now.to_i..(Time.now.to_i + 1.hour)).each { |t| puts Time.at(t).to_s(:db) }\n```\n", "created_at": "2011-06-06 09:45:10", "user": 21238, "id": 1308154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308573", "text": "@htanata\nWith your suggestion, potential time zone information (from the starting time) is lost, going from Time to Integer and back to Time. I suggest:\n\n``` ruby\nstart = Time.now\n(0.seconds .. 1.hour).each do |offset|\n  time = start + offset\n  puts time.to_s(:db)\nend\n```\n", "created_at": "2011-06-06 11:18:09", "user": 2480, "id": 1308573}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308635", "text": "Thank you for your suggestions.. \n\nI changed the code as Roman2K says.. It is ok now.. \n\nRegards,\n\nMurat USTUNTAS\n", "created_at": "2011-06-06 11:37:11", "user": 728608, "id": 1308635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308646", "text": "You're right, @Roman2K. That's a better way of doing it :)\n", "created_at": "2011-06-06 11:39:57", "user": 21238, "id": 1308646}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "/cc @josevalim\n", "labels": [], "number": 1504, "updated_at": "2014-06-29 03:13:18", "user": 3948, "closed_at": "2011-06-06 10:52:50", "id": 1008823, "title": "Fix for CI server. Dependent on RAILS_ENV=development", "url": "https://api.github.com/repos/rails/rails/issues/1504", "created_at": "2011-06-06 10:50:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Cherry-picked from master to fix the build\n\nDon't need to cherry-pick by hand just press the merge button :-) \n\n/cc @josevalim\n", "labels": [], "number": 1505, "updated_at": "2014-07-03 04:47:36", "user": 3948, "closed_at": "2011-06-06 10:53:18", "id": 1008831, "title": "Cherry-picked from master to fix the build", "url": "https://api.github.com/repos/rails/rails/issues/1505", "created_at": "2011-06-06 10:52:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308460", "text": "You are making me the laziest person on earth. :)\n", "created_at": "2011-06-06 10:53:30", "user": 9582, "id": 1308460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308464", "text": ":-) my pleasure :P \n", "created_at": "2011-06-06 10:55:14", "user": 3948, "id": 1308464}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Cherry-picked from master to fix the build\n\nDon't need to cherry-pick by hand just press the merge button :-) \n\n/cc @josevalim\n", "labels": [], "number": 1506, "updated_at": "2014-06-23 18:26:47", "user": 3948, "closed_at": "2011-06-06 11:01:04", "id": 1008835, "title": "Cherry-picked from master to fix the build", "url": "https://api.github.com/repos/rails/rails/issues/1506", "created_at": "2011-06-06 10:53:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "**Starring: Rails 3.0.8.rc4, Ruby 1.9.2-p180, and Postgres**\n\n(But it also was the case on Rails 3.0.3, I updated to see whether that fixes the issue)\n\nI want to log validation failures into a separate database table so I can check what kind of problems people have and where the UI could be clearer. What I do in the model that is to be tracked is roughly:\n\n``` ruby\nafter_validations do\n  ValidationFailure.create(:source => self.class.to_s, :notes => errors.to_json) if errors.length > 0\nend\n```\n\nNow, the ValidationFailure record will be created (I verified that with after_save log statements on the ValidationFailure records), but since the Validations block is wrapped in a DB transaction, it will immediately be rolled back after the failed validations on the \"parent record\" (no actual associations involved).\n\nThis is a minified excerpt of my test log from running a `@record.save` on an deliberately invalid record:\n\n```\nSQL BEGIN\nSQL SAVEPOINT active_record_1\nSQL INSERT INTO validation_failures (...)\nTracked failed validations. {\"name\":[\"can't be blank\",\"is too short (minimum is 1 characters)\"]}\nSQL ROLLBACK TO SAVEPOINT active_record_1\n```\n\nWrapping validations in a db transaction seems wrong to me - shouldn't this only start when the actual SAVE happens? Also, is there a way to work around this for now?\n", "labels": [], "number": 1507, "updated_at": "2014-04-17 15:25:08", "user": 13972, "closed_at": "2012-04-28 19:37:48", "id": 1009129, "title": "ActiveRecord wraps validations in postgres transaction", "url": "https://api.github.com/repos/rails/rails/issues/1507", "created_at": "2011-06-06 12:21:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308824", "text": "/cc @jonleighton @tenderlove\n", "created_at": "2011-06-06 12:25:08", "user": 9582, "id": 1308824}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309024", "text": "Just a thought: what if you need to read something from the database in order to validate record (think \"app-level\" referential integrity)? At the other side, if you're doing HTTP call in order to validate something, there's no any reason for wrapping this in transaction.\n\nOne of the possible solutions for the specific error saving problem is to save errors from different database connection.\n\nSolution for HTTP vs db validation is... something like before_transaction ? :)\n", "created_at": "2011-06-06 13:09:36", "user": 204241, "id": 1309024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309025", "text": "Further info that came out of a twitter discussion: The parent model I am actually trying to do this on does validates_uniqueness_of, so maybe the transaction is pushed in there because of that?\n\nUpdate: I removed the validation temporarily, result: Nope, still in a transaction :)\n", "created_at": "2011-06-06 13:09:45", "user": 13972, "id": 1309025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309070", "text": "Yep, you cannot ensure that validates_uniqueness_of will work without wrapping the whole thing in a transaction. But even then, there's no way to ensure uniqueness on the app side with 100% guarantee: transactions may run into race condition (A.begin, B.begin, B.end, A.end), so database-level UNIQUE constraint is required anyways, be validation wrapped in transaction or not.\n", "created_at": "2011-06-06 13:17:29", "user": 204241, "id": 1309070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309265", "text": "Yes, I think that:\n1. Validations should not be wrapped in a transaction by default - since it means a huge performance drop if for example you have a huge amount of sign ups and validate e-mail domains via DNS, always locking your database for the whole process seems crazy.\n2. If you really want your validations in a transaction, wrap the save in a `ActiveRecord::Base.transaction` block manually.\n3. Ultimately, IMHO validates_uniqueness_of is a convenience for the user, unique constraints on the database should be responsible for the actual db integrity\n", "created_at": "2011-06-06 13:51:10", "user": 13972, "id": 1309265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309517", "text": "1. Good point\n2. Just thinking about consequences: it will wrap internal before_save-save-after_save transaction into external one (or will use checkpoints on dbs that support them), that seems ok to me. But I think manually adding transactions isn't developer friendly...\n3. Agreed, validations aren't for integrity. Actually, you cannot enforce referential integrity out of the database without using some kind of locking, which is overkill for validations.\n\nAs an idea, what about this?\n\n``` ruby\nvalidates_uniqueness_of :something, :transaction => true\nvalidates :email, :transaction => false\n```\n\nwith transaction turned on or off by default (\"on\" is good for backwards compatibility, \"off\" is good for ... newcomers?)\n", "created_at": "2011-06-06 14:32:45", "user": 204241, "id": 1309517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398009", "text": "Is this still an issue @colszowka?\n", "created_at": "2012-04-28 16:32:32", "user": 651597, "id": 5398009}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398553", "text": "1. can you proof this bold claim about performance? and what locking are you talking about?\n2. I dont think this is intuitive. I expect the whole save in the transaction and validations are part of it.\n   Also what would happen in your scenario if model A creates an instance of model B in an after_safe callback?\n   Are the validations of model B now run in the transaction? I hate your idea.\n3. \"Agreed, validations aren't for integrity\". - really..?\n\nI use validations to enforce constraints like \"a user can only be in one rank per group\". I do stuff like that with validations and explicit row locks and it works great. It is handy if normal foreign key constraints in the db dont do the trick, also handling validation errors is nicer than exceptions from the database.\n\nFor your described problem I would suggest simply using another connection for your model ValidationFailure.\n", "created_at": "2012-04-28 17:32:39", "user": 115934, "id": 5398553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399519", "text": "I made a sample Rails 3.2.2 app and this no longer happens:\n\n```\n1.9.3-p125 :002 > f = Foo.new\n1.9.3-p125 :002 > f.valid?\n   (0.4ms)  BEGIN\n  SQL (5.2ms)  INSERT INTO \"validation_failures\" (\"created_at\", \"notes\", \"source\", \"updated_at\") VALUES ($1, $2, $3, $4) RETURNING \"id\"  [[\"created_at\", Sat, 28 Apr 2012 19:36:46 UTC +00:00], [\"notes\", \"{\\\"bar\\\":[\\\"can't be blank\\\"]}\"], [\"source\", \"Foo\"], [\"updated_at\", Sat, 28 Apr 2012 19:36:46 UTC +00:00]]\n   (0.7ms)  COMMIT\n => false \n1.9.3-p125 :003 > ValidationFailure.count\n   (0.8ms)  SELECT COUNT(*) FROM \"validation_failures\" \n => 1 \n```\n\nHence, I'm closing.\n", "created_at": "2012-04-28 19:37:48", "user": 27786, "id": 5399519}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Continuation of https://github.com/rails/rails/pull/1478\n", "labels": [], "number": 1508, "updated_at": "2014-06-17 11:16:56", "user": 146214, "closed_at": "2011-06-06 12:28:04", "id": 1009144, "title": "Rake deprecation fixes - cherry picks", "url": "https://api.github.com/repos/rails/rails/issues/1508", "created_at": "2011-06-06 12:25:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1308840", "text": "Can we also have one for 3-0-stable?\n", "created_at": "2011-06-06 12:27:21", "user": 9582, "id": 1308840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1309932", "text": "@josevalim: Done for 3-0-stable: https://github.com/rails/rails/pull/1511\n", "created_at": "2011-06-06 15:40:00", "user": 146214, "id": 1309932}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixed tests for failing because of environment of server. \n\nPlease merge them in 3-0-stable and 3-1-stable also.\n", "labels": [], "number": 1509, "updated_at": "2014-07-03 04:47:50", "user": 3948, "closed_at": "2011-06-06 12:38:10", "id": 1009151, "title": "Fixed for Test Environment. Fixed failing CI server.", "url": "https://api.github.com/repos/rails/rails/issues/1509", "created_at": "2011-06-06 12:28:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Tested with rails 3.0.7 on postgres-adapter, but as I see, the code in edge (ActiveRecord::Migration#method_missing) causing the problem is still the same.  \n\nTo reproduce:\n\nedit  config/application.rb:\n\n```\n config.active_record.table_name_prefix  'pfx_'\n```\n\ngenerate\n\n```\nrails g migration simple\n```\n\nedit migration:\n\n```\ndef self.up\n    create_table(:simple) do |t|\n        t.timestamps\n    end\nend\n```\n\nmigrate this one, verify that the table in the db is named \"pfx_simple\"\n\nrename the table:\n\n```\nrails g migration change_it\n\ndef self.up\n    rename_table :simple, :changed\nend\n```\n\nAfter rake'ing, check the database: (or try to use add_column :changed, :blub , :string ) to see that the table name is now \"changed\" instead of \"pfx_changed\"\n\nCulprit is the code in ActiveRecord::Migration#method_missing which says:\n\n```\n      unless arguments.empty? || method == :execute\n          arguments[0] = Migrator.proper_table_name(arguments.first)\n      end\n```\n\nfailing to treat argument[0] with pre- and suffix.\n\nThis works (albeit that these kind of comparisons feel itchy):\n\n```\n      unless arguments.empty? || method == :execute\n          arguments[0] = Migrator.proper_table_name(arguments.first)\n              if method == :rename_table\n                  arguments[1] = Migrator.proper_table_name(arguments[1])\n              end\n      end\n```\n\nas does this in Migration:\n\n```\nrename_table :simple, ActiveRecord::Migrator.proper_table_name(:changed)\n```\n", "labels": [], "number": 1510, "updated_at": "2011-12-06 18:08:13", "user": 278411, "closed_at": "2011-12-06 18:08:13", "id": 1009656, "title": "rename_table: table_name_prefix is ignored for target table name", "url": "https://api.github.com/repos/rails/rails/issues/1510", "created_at": "2011-06-06 14:41:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1766363", "text": "This is also happening on creating tables. I'm getting a double prefix when doing a db:test:prepare\n", "created_at": "2011-08-09 19:07:13", "user": 10182, "id": 1766363}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "@josevalim: As requested in https://github.com/rails/rails/pull/1508.\n\nPlease note that I've to cherry pick and edit the commits because 'plugin_new' doesn't exist in 3-0-stable.\n\nAnd Rakefile in the top of the tree already had <code>require rdoc/task</code> and hence is not included in the diff.\n", "labels": [], "number": 1511, "updated_at": "2014-07-03 04:47:56", "user": 146214, "closed_at": "2011-06-06 15:45:10", "id": 1010025, "title": "Rake rdoc fixes cherry picks for 3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1511", "created_at": "2011-06-06 15:39:34", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It should be possible to pass :optional => true to has_secure_password, which would simply skip adding the validations.\n\nWould a patch for this be accepted? :)\n", "labels": [], "number": 1512, "updated_at": "2012-09-08 20:08:11", "user": 175494, "closed_at": "2011-06-07 06:54:04", "id": 1010783, "title": "has_secure_password should accept an optional option", "url": "https://api.github.com/repos/rails/rails/issues/1512", "created_at": "2011-06-06 18:20:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313965", "text": "I am -1 for adding more features to has_secure_password. If you want more customization, there are plenty auth tools out there.\n", "created_at": "2011-06-07 06:54:03", "user": 9582, "id": 1313965}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2107692", "text": "I am also in favor of making this optional, as I have a model that has optional login functionality. Actually, I'm not sure the \"validates_presence_of :password_digest\" serves any real purpose, and it's the only thing causing me trouble. Removing that line seems like it would suffice.\n", "created_at": "2011-09-15 18:53:53", "user": 75490, "id": 2107692}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2234555", "text": "I know this issue has been closed, but I am +1 for making the ability to turn off validation an option. I have two different applications right now with simple user classes that use has_secure_password, and both have a need to allow the password to be blank for completely different reasons. However, without some hackery (i.e. accessing the model's validations hash and brute force removing the :validates_presence_of proc) or completely overriding has_secure_password, there is no way to prevent the validation from occurring. A simple option that is passed into has_secure_password would solve that without in anyway making it more complicated to use. The default is still to validate presence (and confirmation).\n", "created_at": "2011-09-29 06:21:21", "user": 840700, "id": 2234555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2592411", "text": "+1 I don't want password confirmation.\nIt's not much of a feature, :validate => false. Done\n", "created_at": "2011-11-01 16:24:47", "user": 55424, "id": 2592411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2592602", "text": "+1 again\n", "created_at": "2011-11-01 16:40:59", "user": 175494, "id": 2592602}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3272116", "text": "+1 here, for the removal of the validation altogether.\n\nI have lost count of times where I needed to implement secure password myself, recreating the has_secure_password functionality just because I wanted to get rid of this implicit validation.\n\nPerhaps there's some need for it that I don't realise, but shouldn't it be the responsibility of the class itself to declare \"validates :password, presence: true\" or  { on: :create } or whatever the specific implementation case is? Why the implicit validation at all? So counter-intuitive...\n", "created_at": "2011-12-26 00:22:41", "user": 10137, "id": 3272116}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3861347", "text": "+1 for skip validation - same problem as bloomdido\n", "created_at": "2012-02-08 02:24:42", "user": 54223, "id": 3861347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5300946", "text": "+1 for having an option to skip `validates_presence_of :password_digest`\n", "created_at": "2012-04-24 09:43:33", "user": 749915, "id": 5300946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6033246", "text": "+1\n", "created_at": "2012-05-31 11:12:21", "user": 1489427, "id": 6033246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8321905", "text": "Massive +1 from me. @josevalim I see your point, but one thing I really love about has_secure_password is just how simple it is to integrate. I don't want to have to install something as complex and monolithic as devise or authlogic in my current lightweight/simple rest api site. However, I would love to allow facebook users to have an empty password!\n\nThat being said ... my current solution is to simply calculate a hashed password for them now based on certain user parameters.\n", "created_at": "2012-09-06 04:05:09", "user": 5907, "id": 8321905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8396372", "text": "@whalesalad When/how are you setting this password? I can only set it in the User.new stage, which doesn't work for me.\n", "created_at": "2012-09-08 19:04:16", "user": 1329212, "id": 8396372}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8396671", "text": "Right now in my `UserController#create` method i'm automatically setting `password_confirmation` to the value of `password`. Also, in my `User` model, I have `before_validation :bootstrap_facebook_account, :on => :create` which calls my custom method when the user is created, but before it is validated/saved. In that method I bootstrap the user with as much data from facebook that I can and also set their password to a salted hash of their user created_at and facebook_id so that I can re-create it later on. Since all this occurs before validation, by the time that stuff happens the `User` object is ready to rock.\n\nKeep in mind I am building a very simple private API for an iPhone client, so while security is a priority, certain things can be avoided due to the fact that my only real user is the app itself, which I am also developing.\n", "created_at": "2012-09-08 19:08:27", "user": 5907, "id": 8396671}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8396807", "text": "Please guys, look to the code https://github.com/rails/rails/blob/master/activemodel/lib/active_model/secure_password.rb#L44-48 and you will see that this feature was added 4 month ago.\n", "created_at": "2012-09-08 19:12:19", "user": 47848, "id": 8396807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8397338", "text": "Thanks guys...I see it in master...looking forward to it in the next release!\n", "created_at": "2012-09-08 20:08:11", "user": 1329212, "id": 8397338}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "composed_of objects should be able to take advantage of ActiveModel::Validations. However composed_of uses value\nsemantics and freezes the objects.\n\nThe solution is to ensure that ActiveModel::Validations use variables with \"reference\" semantics so that if the object is frozen you can still add errors to the validation.  The following monkey patch works for me and doesn't add any performance overhead or space overhead for creating Errors objects if they are not needed.\n\n```\n\nmodule ActiveModel\n  module Validations\n\n    def self.included(base)\n      super base\n      base.class_eval do\n        def errors\n          @errors ||= []\n          @errors[0] ||= ActiveModel::Errors.new(self) \n          @errors[0]\n        end\n\n        def validation_context=(val)\n          @validation_context ||= []\n          @validation_context[0] = val\n        end\n\n        def validation_context\n          @validation_context ||= []\n          @validation_context[0]\n        end\n\n        def freeze\n          @errors ||= []\n          @validation_context ||= []\n          super\n        end\n      end\n    end\n  end\n\nend\n\n\nmodule MySugr\n  # This module is mainly a hack to get around a bug with composed_of freezing objects\n  # and ActiveRecord::Validations requiring unfrozen objects\n  module Composable\n\n    def self.included(base)\n      base.send :include, ActiveModel::Validations\n    end\n\n    def new_record?\n      true\n    end\n\n  end\n\nend\n```\n\nand is used like\n\n```\nclass BolusPumpSetting\n    include MySugr::Composable\n\n    attr_reader :normal_units, :square_units, :square_duration\n\n    def initialize(normal_units, square_units, square_duration)\n      @normal_units = normal_units\n      @square_units = square_units\n      @square_duration = square_duration\n    end\n\n    validate do |record|\n      if record.square_units.nil? ^ record.square_duration.nil?\n        record.errors.add :base, \"Must set both square_units and square duration\"\n      end\n    end\n\nend\n```\n\n```\nclass Log < ActiveRecord::Base\n\n  composed_of :bolus_pump_setting,\n    :allow_nil => true,\n    :mapping => [\n      %w[bolus_pump_setting_normal_units normal_units],\n      %w[bolus_pump_setting_square_units square_units],\n      %w[bolus_pump_setting_square_duration square_duration]\n    ]\n  validates_associated :bolus_pump_setting\n\nend\n```\n", "labels": ["activemodel"], "number": 1513, "updated_at": "2017-12-22 15:53:38", "user": 17650, "closed_at": "2012-06-19 02:14:19", "id": 1011206, "title": "composed_of freezing prevents ActiveModel::Validations from working", "url": "https://api.github.com/repos/rails/rails/issues/1513", "created_at": "2011-06-06 19:50:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1565117", "text": "Yeah that would be cool... Does someone know if this becomes applied to the master branch?\n", "created_at": "2011-07-13 18:43:59", "user": 10075, "id": 1565117}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5002927", "text": "This is still causing us problems... it would be helpful if someone could look at it.\n", "created_at": "2012-04-06 21:34:30", "user": 20406, "id": 5002927}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399565", "text": "While I don't have the authority to pull in code, these things, in order of awesome, help move fixes along:\n1. A report (✓)\n2. A failing test\n3. A failing test + code that makes it pass.\n", "created_at": "2012-04-28 19:43:17", "user": 27786, "id": 5399565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5403846", "text": "Responding to bug reports in order of awesome\n\n(1)  thank-you\n(2)  do you please have time to add more information?\n(3) do you please have time to add a test case?\n(4) I see you have provided a patch, thanks! However could you please fork and then provide a pull request as it would make things for the core devs easier.\n(5) if you don't have time thanks anyway for your contribution. \n\nJust sayin!\n", "created_at": "2012-04-29 09:52:33", "user": 17650, "id": 5403846}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5405199", "text": "Word. I was mostly trying to point @emschwar in the right direction. Regardless of that, thanks for your report, absolutely.\n", "created_at": "2012-04-29 14:10:32", "user": 27786, "id": 5405199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5779850", "text": "Created two failing tests and then implemented the initial proposed solution: https://github.com/markmcspadden/rails/compare/issue_1513\n\nDidn't seem to solve the issue, but it's there if someone else wants to pick it up and give it some more attention.\n", "created_at": "2012-05-18 04:45:07", "user": 1148, "id": 5779850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6278812", "text": "@rafaelfranca this is considered opened?\n", "created_at": "2012-06-12 18:38:58", "user": 46208, "id": 6278812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6279115", "text": "yes\n", "created_at": "2012-06-12 18:50:32", "user": 47848, "id": 6279115}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6311828", "text": "If the object is frozen this means that it should not change. I don't understand why you try to change the `errors` instance  in your test @markmcspadden.\nMaybe everything could be solved forsing the validation process when `freeze` is called.\ncc / @rafaelfranca \n", "created_at": "2012-06-13 20:03:47", "user": 46208, "id": 6311828}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6312095", "text": "@acapilleri - Looking back, it's probably a misunderstanding of the problem on my part. \n", "created_at": "2012-06-13 20:12:49", "user": 1148, "id": 6312095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6312264", "text": "The problem is that @bradphelan want to use `ActiveModel::Validation` with `composed_of`, and `composed_of` freeze the object after the initialization. So you can't add errors, or change any value on it.\n\nSolve this problem can be difficult and I personally don't think that it will be worth.\n\nI'll leave this issue open but I'll not work on it. If someone want to provide a pull request without monkey patches to change a frozen object I'll be glad to review.\n", "created_at": "2012-06-13 20:18:18", "user": 47848, "id": 6312264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6313185", "text": "actually a test like this fails :\n\n``` ruby\nclass Book < Hash\n  include ActiveModel::Validations\n  attr_accessor :title\nend\n\ndef test_validate_no_validated_frozen_object \n    Book.validates_presence_of :title\n    book = Book.new\n    book.title = \"Litterature\"\n    assert book.valid?\n\n    book_freeze = Book.new\n    book_freeze.title = \"Litterature\"\n    book_freeze.freeze\n    assert book_freeze.valid?\n\n    book = Book.new\n    assert book.invalid?\n\n    book_freeze2 = Book.new\n    book_freeze2.freeze\n    assert book_freeze2.invalid?\nend\n```\n", "created_at": "2012-06-13 20:51:50", "user": 46208, "id": 6313185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6315329", "text": "@acapilleri - Yeah that's a much better test of the behavior. Nice.\n", "created_at": "2012-06-13 22:15:56", "user": 1148, "id": 6315329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6330122", "text": "When an object is freezed you don't know if is valid or not.This happens because the validation method try to change some stuff inside an instance.This behaviour is not consistent because an object is valid and invalid also after his freezing. To solve this, I forced to call `valid?` method when the object if freezed considering that if an obejct if valid/invalid before freezing it will be also when is frozen. With the following changes:\n\n``` ruby\n# Valid the object when freeze is called so the object\ndef freeze\n  self.valid?\n  super\nend\n\n# Runs all the specified validations and returns true if no errors were added\n# otherwise false. Context can optionally be supplied to define which callbacks\n# to test against (the context is defined on the validations using :on).\ndef valid?(context = nil)\n  unless self.frozen?\n     current_context, self.validation_context = validation_context, context\n     errors.clear\n     @valid = run_validations!\n   else\n     @valid\n   end\nend\n```\n\n the test above not fails but activerecord https://github.com/rails/rails/blob/master/activerecord/test/cases/transactions_test.rb#L365  fails.\nI want add an exception like `FrozenRecord` when active record try to save frozen object, because maybe at the moment it fails because the validation can't proceed.\nAny suggestion? \ncc / @carlosantoniodasilva \n", "created_at": "2012-06-14 14:33:49", "user": 46208, "id": 6330122}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6332792", "text": "@acapilleri I don't think there's a need to add an exception like that to AR, because AR does not suffer from this problem when calling `valid?`. The difference is that when you call `freeze` in an AR object, [it actually freezes the `@attributes` hash](https://github.com/rails/rails/blob/master/activemodel/lib/active_model/validations.rb), and not the AR object itself, so running `valid?` just works.\n\nNow about the issue with ActiveModel, I kinda agree that we can't handle all the cases where someone tries to change a frozen object. In case of a model using `AMo::Validations`, I get this:\n\n```\n>> class Foo; include ActiveModel::Validations; end\n=> Foo\n>> f = Foo.new\n=> #<Foo:0x007f81447457a8>\n>> f.validation_context\n=> nil\n>> f.freeze\n=> #<Foo:0x007f81447457a8>\n>> f.valid?\nRuntimeError: can't modify frozen Foo\n    from ./activemodel-3.2.5/lib/active_model/validations.rb:195:in `ensure in valid?'\n```\n\nwhich means that the problem happens when `self.validation_context=` is executed. \n\nIn any case, I think that forcing validations to happen without the user expecting it may not be the best in some scenarios when calling `freeze`. It should just return the same result as prior to calling `freeze`, ie just `errors.empty?`, without running validations.. Still unsure.. @rafaelfranca thoughts?\n", "created_at": "2012-06-14 16:00:49", "user": 26328, "id": 6332792}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6333067", "text": "Sorry, I forgot a line of code :\n\n``` ruby\n\n# Runs all the specified validations and returns true if no errors were added\n# otherwise false. Context can optionally be supplied to define which callbacks\n# to test against (the context is defined on the validations using :on).\ndef valid?(context = nil)\n  unless self.frozen?\n     current_context, self.validation_context = validation_context, context\n     errors.clear\n     @valid = run_validations!\n   else\n     @valid\n   end\nensure\n  self.validation_context = current_context unless self.frozen?\nend\n```\n", "created_at": "2012-06-14 16:10:25", "user": 46208, "id": 6333067}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6355503", "text": "Looks like #6743 would \"solve\" the `composed_of` part of this discussion.\n\nI think the AM considerations raise here are still worth keeping it open for.\n", "created_at": "2012-06-15 12:41:38", "user": 1148, "id": 6355503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6355731", "text": "maybe We should open an issue about validation of freeze object that includes ActiveModel::Validation\n", "created_at": "2012-06-15 12:52:49", "user": 46208, "id": 6355731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6414421", "text": "Closed by #6743\n", "created_at": "2012-06-19 02:14:19", "user": 47848, "id": 6414421}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/353624277", "text": "Late comment, but a work-around for this issue (4.2.6) appears to be to modify the value object so that freeze is delegated to the attribute.\r\n```\r\nclass Book < Hash\r\n  include ActiveModel::Validations\r\n  attr_accessor :title\r\n  delegate :freeze, to: :title\r\nend\r\n\r\ndef test_validate_no_validated_frozen_object \r\n    Book.validates_presence_of :title\r\n    book = Book.new\r\n    book.title = \"Litterature\"\r\n    assert book.valid?\r\n\r\n    book_freeze = Book.new\r\n    book_freeze.title = \"Litterature\"\r\n    book_freeze.freeze\r\n    assert book_freeze.valid?\r\n\r\n    book = Book.new\r\n    assert book.invalid?\r\n\r\n    book_freeze2 = Book.new\r\n    book_freeze2.freeze\r\n    assert book_freeze2.invalid?\r\nend\r\n```\r\n", "created_at": "2017-12-22 15:53:38", "user": 2069517, "id": 353624277}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The following snippet causes the double render of the entire form:\n\n``` ruby\n<% f.with_options :class => 'title' do |opt| %>\n  <%= opt.text_field :title %>\n<% end -%>\n```\n\nI'm using Rails 3.0.8.rc4 and Ruby 1.8.7\n", "labels": [], "number": 1514, "updated_at": "2011-06-07 16:02:28", "user": 47848, "closed_at": "2011-06-07 07:05:52", "id": 1011295, "title": "with_options causes a double render problem in views", "url": "https://api.github.com/repos/rails/rails/issues/1514", "created_at": "2011-06-06 20:12:22", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314017", "text": "I believe this is fixed in Rails 3.1. Could you please check?\n", "created_at": "2011-06-07 07:05:50", "user": 9582, "id": 1314017}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316951", "text": "Yeah! It was fixed. But, will it be backported to Rails 3-0-stable branch?\n", "created_at": "2011-06-07 15:47:38", "user": 47848, "id": 1316951}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317171", "text": "Unfortunately fixing it is non trivial, so no backporting.\n", "created_at": "2011-06-07 16:02:27", "user": 9582, "id": 1317171}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When using MySQL, .group and .having can be used to accomplish the very common task of finding records from SQL table table_a by specifying some conditions on some tables joining table_a, i.e. table_b, table_c etc. So, if I want to find all the users that have paid more then four times, I can do:\n\n``` ruby\nUser.joins(:payments).group('users.id').having('count(payments.id) > 4')\n```\n\nThis however doesn't work with PostgreSQL, which will in this case throw an error message similar to this one:\n\n```\nActiveRecord::StatementInvalid: PGError: ERROR: column \"users.email\" must \nappear in the GROUP BY clause or be used in an aggregate function\n```\n\nThis is because in PostgreSQL the columns that appear in the FROM clause have to be the same ones that appear in the GROUP by clause. Correct me if I'm wrong, but from what I see you can fix it only by using .select('users.id,users.email,...\"), but in this case you either have to manually list all the columns or you get crippled objects returned with only some attributes present. This forces PostgreSQL users to either come up with some ugly workarounds or to use find_by_sql for any but the simplest queries concerning only one table. I don't know what's the most \"Railsy\" way of fixing it, but I think it would at least be helpful to have a method that would return all the column names qualified by the table name, like this:\n\n``` ruby\nmodule ActiveRecord\n  class Base\n    def all_columns\n      column_names.collect { |c| \"#{table_name}.#{c}\" }.join(\",\")\n    end\n  end\nend\n```\n\nThat would make .group and .having usable in PostgreSQL like this:\n\n``` ruby\nUser.joins(:payments).group(User.all_columns).having('count(payments.id) > 4')\n```\n\nIn the end I think it would be great if Rails provided some shorthand notation for doing the same thing, like this:\n\n``` ruby\nUser.joins(:payments).group(:users).having('count(payments.id) > 4')\n```\n\nEdit:\n\nMaybe .group with no arguments could do just that?\n", "labels": [], "number": 1515, "updated_at": "2016-05-10 14:54:17", "user": 26233, "closed_at": "2012-04-28 03:40:54", "id": 1011382, "title": ".group and .having of little usefulness with PostgreSQL", "url": "https://api.github.com/repos/rails/rails/issues/1515", "created_at": "2011-06-06 20:28:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1532105", "text": "This is really just postgresql's behavior though.  You can and should list all the non-aggregate columns in the group call as that is how they define group as working in current versions of postgresql.\n\nYour patch would ease the pain here, but this is being changed in postgresql itself in 9.2 - see http://developer.postgresql.org/pgdocs/postgres/sql-select.html:\n\nWhen GROUP BY is present, it is not valid for the SELECT list expressions to refer to ungrouped columns except within aggregate functions or if the ungrouped column is functionally dependent on the grouped columns, since there would otherwise be more than one possible value to return for an ungrouped column. A functional dependency exists if the grouped columns (or a subset thereof) are the primary key of the table containing the ungrouped column.\n\nWhich in plain english means that if you group by the users.id, you'll also be grouping by the other users columns and won't need to list them all.\n\nWill that make the issue moot?\n", "created_at": "2011-07-08 12:38:51", "user": 12062, "id": 1532105}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1532621", "text": "I know this is supposed to be fixed in PostgreSQL in the future, but lots of people already use Rails with PostgreSQL 8.x and they're not all going to upgrade anytime soon to PostgreSQL 9.2. Of course one can just live with this, but this issue makes ActiveRecord crippled for all those people, as it makes any queries but the simplest one very cubersome to build, so I still think it would be a good idea to fix this in some way.\n", "created_at": "2011-07-08 14:09:39", "user": 26233, "id": 1532621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1537468", "text": "Yeah, it'd definitely be a useful plugin.\n", "created_at": "2011-07-09 04:45:53", "user": 12062, "id": 1537468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5394147", "text": "I have to agree that this is how postgresql works. Given it's been a goal of postgresql to support such queries, I think it'd not be Rails concern to handle that. This might be a good place for a plugin indeed, if that's still required. Thanks!\n", "created_at": "2012-04-28 03:40:54", "user": 26328, "id": 5394147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17888369", "text": "I would like to add my comments to this. It sounds like postgresql was going to make this change but still has yet to do it. Every Rails project that I've worked on with postgresql runs into this issue. If you look for a solution on how to work around it, you find the same answers all over StackOverflow. I would like to see something like @jaroslawr mentioned above.\n\n``` ruby\nUser.joins(:payments).group(:users).having('count(payments.id) > 4')\n```\n\nThat solution would make the headache a lot worse and the code quite a bit cleaner. I'm willing to implement said code, but I wanted to receive feedback before diving into that. Or hopefully, I somehow missed the memo on where postgresql supports these types of queries.\n", "created_at": "2013-05-14 16:37:23", "user": 684, "id": 17888369}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17904007", "text": "With recent PostgreSQL versions it's possible to do User.select('users.*').joins(:payments).group('users.id').having('count(payments.id) > 4')\n", "created_at": "2013-05-14 20:47:59", "user": 26233, "id": 17904007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/218183120", "text": "Run into this myself. Can't really group at all\n", "created_at": "2016-05-10 14:54:17", "user": 430233, "id": 218183120}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This a follow-up of #1331 (Actually I'm looking to solve this because I need it urgently).\n\nI'm checking if super.instance exists before call it and call to super if it doesn't exists (for Rack::URLMap), I don't want remove entire method since according to 19c763f7831e08606e6b4fa516f5ad3b00c6428f using it here reduces 2 methods call per request.\n\nAlso I do some changes to @andrew test to use a free port instead of port 3000 for server_tests. (Some people runs another Rails apps while run the tests ;)).\n\ncc. @andrew @josevalim\n", "labels": ["regression"], "number": 1516, "updated_at": "2014-06-13 20:02:09", "user": 160941, "closed_at": "2011-06-07 16:26:31", "id": 1011655, "title": "Rails::Server#app should be nice with Rack::URLMap", "url": "https://api.github.com/repos/rails/rails/issues/1516", "created_at": "2011-06-06 21:27:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312533", "text": "Just in case, this the backtrace of the error:\n\n```\n~/code/MyThreeBest[master] % rails server\n=> Booting WEBrick\n=> Rails 3.1.0.rc1 application starting in development on http://0.0.0.0:3000\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\nExiting\n/Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/railties-3.1.0.rc1/lib/rails/commands/server.rb:46:in `app': undefined method `instance' for #<Rack::URLMap:0x000001051f0738> (NoMethodError)\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/rack-1.3.0/lib/rack/server.rb:301:in `wrapped_app'\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/rack-1.3.0/lib/rack/server.rb:252:in `start'\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/railties-3.1.0.rc1/lib/rails/commands/server.rb:70:in `start'\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/railties-3.1.0.rc1/lib/rails/commands.rb:54:in `block in <top (required)>'\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/railties-3.1.0.rc1/lib/rails/commands.rb:49:in `tap'\n    from /Users/guille/.rvm/gems/ruby-1.9.2-p180@mythreebest/gems/railties-3.1.0.rc1/lib/rails/commands.rb:49:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n", "created_at": "2011-06-06 23:02:37", "user": 160941, "id": 1312533}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1312943", "text": "@guilleiguaran: can you change that fix to use to_app method that @josevalim proposed here: https://github.com/rails/rails/pull/1331#r35847 ?\n", "created_at": "2011-06-07 00:50:54", "user": 5004, "id": 1312943}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313986", "text": "@guilleiguaran agreed. If you can make it call .to_app instead of .instance and define to_app in Rails::Application, I would merge it straight way.\n", "created_at": "2011-06-07 06:59:37", "user": 9582, "id": 1313986}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316487", "text": "@josevalim done, also I rebase with master.\n\nOne more thing: Looks like the server tests sometimes fail with \"Errno::ECONNREFUSED: Connection refused - connect(2)\" because are trying to get \"/\" before server finish booting, any ideas about how to solve it or we must delete it and revisit those tests later?\n", "created_at": "2011-06-07 15:14:03", "user": 160941, "id": 1316487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316540", "text": "https://github.com/rails/rails/pull/1516/files#L2R42 is supposed to stop this happening, similar to the server test in rack: https://github.com/rack/rack/blob/master/test/spec_server.rb#L65\n\nIt looks like the rails server goes to sleep and then walks up halfway through the boot process, making quite hard to know when its finally ready to serve pages, perhaps this is why the whole file is untested currently?\n", "created_at": "2011-06-07 15:18:10", "user": 1060, "id": 1316540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316547", "text": "Hrm, let's leave the tests out. Let's just have a fix that we can merge into 3-1-stable and master soon. I have also added an extra comment.\n", "created_at": "2011-06-07 15:18:37", "user": 9582, "id": 1316547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317236", "text": "@josevalim Done, also I rebase all changes in a single commit :)\n", "created_at": "2011-06-07 16:06:36", "user": 160941, "id": 1317236}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317619", "text": "Merged.\n", "created_at": "2011-06-07 16:26:31", "user": 9582, "id": 1317619}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317646", "text": "Can you also provide a pull request for 3-1-stable?\n", "created_at": "2011-06-07 16:27:46", "user": 9582, "id": 1317646}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I had a controller Deal with actions new and edit. When I create a deal, recipient is current user. But after it's created, both persons can edit a deal so recipient is loaded from model. There's a convenient way to make a temporary variable @recipient for this purposes (I know that in this case there are lots other ways that fits better - but I want to tell in such a way about a bug). I initialized this variable in both controllers and tried to create a deal. All was fine. Next time I tried to create a deal but in a process of filling the form made a validation error. Rails tried to tell me that model wasn't saved due to validation error but it failed with this message: after validation error my temporary variable @recipient became nil.\nI think this is wrong behavior for a variable. It may be fine for flash-messages but not for @-variables\n", "labels": [], "number": 1517, "updated_at": "2011-06-07 07:02:18", "user": 814984, "closed_at": "2011-06-07 07:02:18", "id": 1011769, "title": "Annulating temporary @-variables in a View after a validation error", "url": "https://api.github.com/repos/rails/rails/issues/1517", "created_at": "2011-06-06 21:49:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1313999", "text": "Rails does not clean up @-variables, unless you are using a protected variable (which starts with underscore). If you feel this is an issue, can you try providing a test case please?\n", "created_at": "2011-06-07 07:02:17", "user": 9582, "id": 1313999}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When I change the `schema_search_path` on the ActiveRecord::Base.connection, the `table_exists?` method doesn't honour the current search path.  \n\nThis breaks the loading of schema.rb to a new pg schema as the create_table first tries to drop the table by checking `table_exists?` which returns true, when in fact that table doesn't exist in this schema\n\nExample:\n\n```\n# Given a model User and a default public `schema_search_path`\n> User\n   => User(id: integer, name: string, created_at: datetime, updated_at: datetime)\n> ActiveRecord::Base.connection.table_exists? 'users'\n   => true\n> ActiveRecord::Base.schema_search_path = 'some_schema'\n   => 'some_schema'\n> ActiveRecord::Base.connection.table_exists? 'users'\n   => true\n> User\n   => PGError: ERROR:  relation \"users\" does not exist\n```\n", "labels": [], "number": 1518, "updated_at": "2011-07-12 15:08:44", "user": 190353, "closed_at": "2011-07-12 15:08:44", "id": 1012636, "title": "Postgresql Adapter `table_exists?` ignores schema when using `schema_search_path`", "url": "https://api.github.com/repos/rails/rails/issues/1518", "created_at": "2011-06-07 02:30:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315596", "text": "is there any reason why we couldn't just use:\n\n```\ntables.include?(table_name.to_s)\n```\n", "created_at": "2011-06-07 13:12:26", "user": 190353, "id": 1315596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315639", "text": "Yes, performance.\n", "created_at": "2011-06-07 13:22:00", "user": 9347, "id": 1315639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1316011", "text": "ya i just noticed the query caching going on... but performance comes at the cost of inoperability when using schemas.  I'm trying to look into the matter to find a solution for both issues, but I'm fairly inexperienced with postgres and this adapter so I'm not sure I'm the best fit to fix this.\n", "created_at": "2011-06-07 14:21:26", "user": 190353, "id": 1316011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334762", "text": "pull request for 3-0-stable https://github.com/rails/rails/pull/1604   will look at 3-1.  Never contributed to rails so would appreciate some feedback!\n", "created_at": "2011-06-09 15:00:39", "user": 190353, "id": 1334762}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1554911", "text": "This was pushed\n", "created_at": "2011-07-12 15:08:44", "user": 52642, "id": 1554911}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi.\n\nUsing `update_all` in `touch` looks smart enough, but there is a hidden issue in this: `update_all` uses `default_scope`.\n\nImagine a situation: you have the following `User` class:\n\n``` ruby\nclass User < ActiveRecord::Base\n  default_scope :active => true\nend\n\nuser = User.unscoped.where(:active => false).first\n\nuser.touch\n# This fires sql \"UPDATE `users` SET `updated_at` = ? WHERE `users`.`active` = 0\"\n# and so our user instance remains changed (and the database remains unchanged)\nuser.changed? #=> true\nuser.reload # brings old updated_at value back to life\n```\n\nI've provided a test proving that and a fix for the issue.\n", "labels": ["activerecord", "regression"], "number": 1519, "updated_at": "2014-06-18 15:26:31", "user": 124430, "closed_at": "2011-06-07 17:44:17", "id": 1012975, "title": "ActiveRecord::Persistence#touch should not use default_scope", "url": "https://api.github.com/repos/rails/rails/issues/1519", "created_at": "2011-06-07 04:57:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314010", "text": "Great patch. Could you just please tell which Rails version this is happening? /cc @jonleighton @tenderlove\n", "created_at": "2011-06-07 07:04:18", "user": 9582, "id": 1314010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314254", "text": "This is happening in edge (master) and 3.0.7, that I am using currently.\nIn 3.0.7 there is also additional similar issue: if there is a `default_scope joins(:association)`, `update_all` produces sql like:\n`UPDATE `base_table_name` SET `updated_at` = ? WHERE `id` = ? JOIN `association_table_name` ON ...`\nand results in error \"column `updated_at` is ambiguous\". However, this particular bug not found in edge.\n\nI'd say that this happens since e4943e93 where current `touch` implementation was introduced, but I've tested only in 3.0.7 and master.\n", "created_at": "2011-06-07 08:04:27", "user": 124430, "id": 1314254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1319021", "text": "I have merged this, thanks!\n", "created_at": "2011-06-07 17:44:18", "user": 1979, "id": 1319021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1319041", "text": "Incidentally, `ActiveRecord::Relation` has never supported joins on updates, which is the root cause of the error on 3-0-stable you describe. I plan to fix this for 3.2.\n", "created_at": "2011-06-07 17:45:02", "user": 1979, "id": 1319041}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there,\n\ni've got an application with several engines in it.\nThe main application has a javascript asset called \"application.js\" aswell as some of the engines do have a \"application.js\"\n\nThe engines file is called \"ENGINE_PATH/app/assets/javascripts/ENGINE_NAME/application.js\", the main file is called\n\"app/assets/javascripts/application.js\".\n\n\"rake assets:precompile\" wont compile the engine file (to public/assets/ENGINE_NAME/application.js), just the main application.js.\n\nRenaming the javascript to \"ENGINE_NAME.js\" doesn't work too (not generated), renaming it to \"ENGINE_NAME.engine.js\" works though.\n\nThis just occurs with Javascript-files & Stylesheets. If two engines have the same \"submit.png\" in images/ENGINE_NAME/submit.png\" everything is being generated just fine.\n\nI tried todays 3-1-stable.\n\nAm I getting this wrong or is it a bug?\n\n-Tobias\n", "labels": [], "number": 1520, "updated_at": "2011-06-28 19:00:11", "user": 330939, "closed_at": "2011-06-28 19:00:11", "id": 1013287, "title": "Javascript/Stylesheet assets with same name in subdirectories not generated", "url": "https://api.github.com/repos/rails/rails/issues/1520", "created_at": "2011-06-07 06:56:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314004", "text": "/cc @dhh /cc @josh\n", "created_at": "2011-06-07 07:02:45", "user": 9582, "id": 1314004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315624", "text": "Okay,\n\nI just traced the problem to Sprockets / to \"config.assets.precompile\":\nscreen.css isn't compiled by default. So I had to add it to this config.\n\nA true bug is IMHO that \"application.js\" (default setting) won't work with subdirectories (eg ENGINE_NAME/application.js) - right?\n", "created_at": "2011-06-07 13:20:00", "user": 330939, "id": 1315624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315682", "text": "If ENGINE_NAME/application.js is generated by default, we should add it to the default list. Otherwise, no, you should have to do it manually.\n", "created_at": "2011-06-07 13:27:51", "user": 137, "id": 1315682}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315945", "text": "Yes, I think we should include ENGINE_NAME/application.js by default as it is generated automatically.\n", "created_at": "2011-06-07 14:11:09", "user": 9582, "id": 1315945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315959", "text": "IMHO you should add /application.(css|js)$/ as default matcher. this would solve this issue.\n", "created_at": "2011-06-07 14:13:15", "user": 330939, "id": 1315959}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458088", "text": "Can you whip up a pull request?\n", "created_at": "2011-06-28 19:00:11", "user": 2741, "id": 1458088}], "assignees": [2741, 2741], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I experienced this in an existing application and have recreated it form scratch. If you create a model (via a scaffold) and give it an attribute named 'hash', that attribute will behave strangely - I reproduced the behaviour in a simple functional test.\n\n```\nrails new showbug\nrails generate scaffold users name:string mail:string hash:string\n```\n\nI then created the following fixtures:\n\n```\none:\n    name: Ben Sekulowicz-Barclay\n    mail: ben@informationarchitects.jp\n    hash: 123456abcdef\n```\n\nand functional test:\n\n```\nrequire 'test_helper'\n\nclass UsersControllerTest < ActionController::TestCase\n  setup do\n    @user = users(:one)\n\n    # Uncomment the follownig line to make both tests pass!\n    # temp = @user.hash\n  end\n\n  test \"should have correct hash 1\" do\n    assert_equal '123456abcdef', @user.hash\n  end\n\n  test \"should have correct hash 2\" do\n    assert_equal '123456abcdef', @user.hash\n  end\nend\n```\n\nIf the code commented out at ~ line 8 is uncommented and allowed to run, both tests pass. If you leave it commented, the first test fails.\n\n```\nUsersControllerTest:\n    FAIL should have correct hash 1 (0.02s) \n        <\"123456abcdef\"> expected but was <-3071788483000566756>.\n        /Users/ben/Sites/study/showbug/test/functional/users_controller_test.rb:12:in `block in <class:UsersControllerTest>'\n\n    PASS should have correct hash 2 (0.00s) \n\nFinished in 0.025757 seconds.\n\n2 tests, 2 assertions, 1 failures, 0 errors, 0 skips\n```\n\nI'm guessing this is something to do with the use of a reserved word, 'hash' but I can't get beyond that. \n", "labels": [], "number": 1521, "updated_at": "2011-06-07 13:22:50", "user": 4986, "closed_at": "2011-06-07 13:22:50", "id": 1013421, "title": "[3.1.0.rc1] Strange behaviour of model's 'hash' attribute", "url": "https://api.github.com/repos/rails/rails/issues/1521", "created_at": "2011-06-07 07:38:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1315644", "text": "Yep, `Object#hash` is Ruby's internal method that represent the `Fixnum` hash value of the object, as described here: http://apidock.com/ruby/Object/hash\n\nI've been passing this same road bump quite several times too, and I would suggest you to name it something like \"#hash_value\" .. or maybe \"#encrypted_hash\" instead ;)\n", "created_at": "2011-06-07 13:22:49", "user": 4912, "id": 1315644}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I’m trying to use [Jasmine](https://github.com/pivotal/jasmine)  with Rails 3.1 and Ruby 1.9.2 and got „Uninitialized constant ActiveSupport::Concern“ error. after executing „bundle exec jasmine init“.\n\nFollow this steps to reproduce the error:\n`gem install rails --pre\nrails new test_jasmine\ncd test_jasmine\necho -e \"\\ngem 'jasmine'\" >> Gemfile\nbundle exec jasmine init`\n\nAnd got error:\n\n<pre>\n/home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/railties-3.1.0.rc1/lib/rails/railtie/configurable.rb:4:in `<module:Configurable>': uninitialized constant ActiveSupport::Concern (NameError)\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/railties-3.1.0.rc1/lib/rails/railtie/configurable.rb:3:in `<class:Railtie>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/railties-3.1.0.rc1/lib/rails/railtie/configurable.rb:2:in `<module:Rails>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/railties-3.1.0.rc1/lib/rails/railtie/configurable.rb:1:in `<top (required)>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/railties-3.1.0.rc1/lib/rails/railtie.rb:129:in `inherited'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/lib/jasmine/railtie.rb:3:in `<module:Jasmine>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/lib/jasmine/railtie.rb:2:in `<top (required)>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/lib/jasmine.rb:12:in `require'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/lib/jasmine.rb:12:in `<top (required)>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/bin/jasmine:4:in `require'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/gems/jasmine-1.0.2.1/bin/jasmine:4:in `<top (required)>'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/bin/jasmine:19:in `load'\n    from /home/kane/.rvm/gems/ruby-1.9.2-p180@jasmine_test/bin/jasmine:19:in `<main>'</pre>\n", "labels": [], "number": 1522, "updated_at": "2011-06-07 10:08:19", "user": 10137, "closed_at": "2011-06-07 10:08:19", "id": 1013907, "title": "Uninitialized constant ActiveSupport::Concern", "url": "https://api.github.com/repos/rails/rails/issues/1522", "created_at": "2011-06-07 09:57:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1314819", "text": "Thanks, should be fixed with 72cca79d36ecdc740eebf519a6be6172d7bae0fc.\n", "created_at": "2011-06-07 10:08:18", "user": 3387, "id": 1314819}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1523, "updated_at": "2014-06-22 04:32:32", "user": 68955, "closed_at": "2011-06-10 10:27:54", "id": 1015614, "title": "rafactored the regex related code in the mapper class ", "url": "https://api.github.com/repos/rails/rails/issues/1523", "created_at": "2011-06-07 13:38:09", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340398", "text": "Commits Updated.\n\n/cc @fxn\n", "created_at": "2011-06-10 08:05:49", "user": 68955, "id": 1340398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340971", "text": "Thanks!\n", "created_at": "2011-06-10 10:27:18", "user": 3387, "id": 1340971}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Given:\n\n``` ruby\nclass Picture < ActiveRecord::Base\n  belongs_to :imageable, :polymorphic => true\nend\n\nclass Employee < ActiveRecord::Base\n  has_one :picture, :as => :imageable\nend\n```\n\nThen:\n\n``` ruby\npicture = Picture.new\npicture.name = \"my_picture\"\npicture.save!\n\nemployee = Employee.new\nemployee.picture = picture\nemployee.save!\n\nemployee.picture.imageable_type\n```\n\nUp to Rails.3.0.8.rc2 :\n\n``` ruby\n=> \"Employee\"\n```\n\nHowever, in Rails3.1.0 edge  today (June 7) :\n\n``` ruby\n=> nil\n```\n\nIs this the intended behavior? Perhaps I'm missing something... please double-check.\n", "labels": [], "number": 1524, "updated_at": "2011-06-07 23:35:16", "user": 337629, "closed_at": "2011-06-07 23:34:14", "id": 1016097, "title": "has_one with polymorphic association not setting type in Rails 3.1.0 ?", "url": "https://api.github.com/repos/rails/rails/issues/1524", "created_at": "2011-06-07 14:59:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323433", "text": "Thanks for the report, I've fixed this now.\n", "created_at": "2011-06-07 23:35:15", "user": 1979, "id": 1323433}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi,\n\nsince I installed rails 3.1.0, when some bugs occur, Webrick freezes for a couple of minutes when some bugs occur (not all bugs, apparently the 500 ones).\n\nMy gemfile looks like this:\n\nsource 'http://rubygems.org'\n\ngem \"rails\", \"3.1.0.rc1\"\n# Asset template engines\n\ngem 'sass'\ngem 'coffee-script'\ngem 'uglifier'\ngem 'jquery-rails'\n\ngem \"simple-navigation\"\ngem 'ranked-model' #, :git => 'git@github.com:harvesthq/ranked-model.git'\ngem 'formtastic'\ngem 'validation_reflection'\ngem \"paperclip\", \"~> 2.3\"\ngem 'devise'\ngem 'heroku'\ngem \"aws-s3\"\ngem \"scoped_search\"\ngem \"meta_search\", :git => 'git://github.com/ernie/meta_search.git'\ngem \"kaminari\"\n\ngroup :production do\n  gem \"pg\", \"~> 0.11.0\"\n  gem 'therubyracer-heroku', '0.8.1.pre3'\n  gem 'exception_notification', :require => 'exception_notifier'\nend\n\ngroup :development, :test do\n  gem 'mysql2'\nend\n\nrequire 'csv'\n\nCan anyone help me on this? Thanks,\n\nNicolas\n", "labels": ["asset pipeline"], "number": 1525, "updated_at": "2014-08-12 15:36:48", "user": 630156, "closed_at": "2012-02-23 11:49:31", "id": 1016472, "title": "Exception in View Freezes Rails", "url": "https://api.github.com/repos/rails/rails/issues/1525", "created_at": "2011-06-07 15:29:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1318152", "text": "I've experienced this as well... It doesn't seem to happen consistently though.\n\nMy gems:\n\ngem 'rails', '3.1.0.rc1'\ngem 'sqlite3'\ngem 'mysql2'\ngem 'json'\ngem 'sass'\ngem 'coffee-script'\ngem 'uglifier'\ngem 'jquery-rails'\ngem 'capistrano'\ngem 'compass', :require=>false\ngem 'hoptoad_notifier'\ngem 'devise'\ngem 'cancan'\ngem 'simple_form', :git=>\"git://github.com/plataformatec/simple_form.git\", :branch=>\"master\"\ngem 'nifty-generators'\ngem \"paperclip\", \"~> 2.3\"\ngem 'inherited_resources'\ngem \"nested_form\", :git => \"git://github.com/ak/nested_form.git\"\ngem \"acts_as_list\"\ngem 'kaminari'\ngem 'thinking-sphinx', :git => \"git://github.com/freelancing-god/thinking-sphinx.git\", :branch  => 'rails3'\ngem 'sprite-factory'\ngem 'rmagick'\n", "created_at": "2011-06-07 16:56:03", "user": 303958, "id": 1318152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322552", "text": "I agree. It's unconsistent. The problem is the same with Unicorn or Mongrel. When I look at the activity monitor, I can clearly see the \"ruby\" process using more and more ram memory, until total freeze when this happen. I still don't know the reason. What I'm sure is that the bug has nothing to do with an infinite loop or somtehing like that.\n\nStrange behaviour as well is the fact that, when it doesn't freeze, instead of being redirected to a page with details about the error, I'm redirected to the 500.html page, like in production.\n", "created_at": "2011-06-07 21:07:38", "user": 630156, "id": 1322552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325420", "text": "@ndemoreau, are you using the Rails HTTP streaming by any chance?\n", "created_at": "2011-06-08 08:57:20", "user": 217126, "id": 1325420}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325625", "text": "Correct. I disabled it and now, i'm not redirected to the 500.html page anymore and the freeze doesn't seem to happen anymore (I did very few tests).\n\nThanks! I keep you posted.\n\nNicolas.\n\nOn 8 juin 2011, at 10:57, utkarshkukreti wrote:\n\n> @ndemoreau, are you using the Rails HTTP streaming by any chance?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1525#comment_1325420\n", "created_at": "2011-06-08 09:47:57", "user": 630156, "id": 1325625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329483", "text": "Just to let you know that it seems to be more stable but it is still not totally fixed yet. It just freezed when I mistyped an input on a simple_form form:  <%= input.tel ...   %>\n", "created_at": "2011-06-08 20:08:34", "user": 630156, "id": 1329483}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334172", "text": "+1 on this. \n\nI am using the edge Rails and when the error is raised in the view then Rails freezes (eats more and more CPU and memory). When I hit Ctrl-C in console then the error is outputted to the console. I am on Mac OS X Snow Leo and using the latest Ruby 1.9.2. My server is Mongrel. I've also attached some 'dtruss' output here: https://gist.github.com/1016728\n", "created_at": "2011-06-09 13:32:34", "user": 131281, "id": 1334172}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1504472", "text": "This issue is really annoying, the memory usage grows so fast it becomes quite difficult to even switch to a terminal window to kill the process. I tried to find the source of the problem, but I'm not that familiar with Rails codebase and ruby-prof isn't able to complete the dump file once things blow up (waited a good 15 minutes with my rsize growing to ~4GB).\n\nHoping that this will help a little bit in solving the problem then here's what I tried and figured out.\n\nFirst create a view that uses assets and renders OK (without errors):\n\n```\n= stylesheet_link_tag :admin\n= javascript_include_tag :admin\n\nThis should be OK\n```\n\nThen create a view that has an error like the one below:\n\n```\n= this_should_blow_up\n```\n\nEnvironment: OS X Snow Leopard, 1.9.2,  Thin, Rails 3.1.0 RC4.\n", "created_at": "2011-07-05 15:22:10", "user": 115003, "id": 1504472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1524083", "text": "Yeah, this does make development (porting to 3.1) tricky. I've found that if I CTRL-C the server sometimes I do get an error message output, which helps me track down that one problem to inch forward. Not fun.\n\nI am also seeing this with Passenger.\n\nI am using RoR 3.1 RC 4\n", "created_at": "2011-07-07 16:40:17", "user": 105598, "id": 1524083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550794", "text": "Is this still an issue using rails from git 3-1-stable branch?\n", "created_at": "2011-07-11 23:06:42", "user": 52642, "id": 1550794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1623635", "text": "Yeah, still reproducible, but now better (6-7 secs until I see the error in browser). Workaround is to put this code in development.rb:\n\n``` ruby\n\n  config.after_initialize do\n    module SmallInspect\n      def inspect\n        \"<#{self.class.name} - tooooo long>\"\n      end\n    end\n    [ActionDispatch::RemoteIp::RemoteIpGetter, OmniAuth::Strategies::Facebook, ActionController::Base, Warden::Proxy].each do |klazz|\n      klazz.send(:include, SmallInspect)\n    end\n  end\n```\n", "created_at": "2011-07-21 13:50:47", "user": 131281, "id": 1623635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1624026", "text": "Can you share with us an application where we can try to reproduce the error?\n", "created_at": "2011-07-21 14:48:39", "user": 52642, "id": 1624026}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1624097", "text": "Unfortunately, I can not share it with you because it's proprietary. I simply have HomeController#index action. In index.html.erb I place a call:\n\n``` ruby\n<% non_existing_method %>\n```\n\nIt takes 7 secs to render the error in browser and console without the workaround code. And it takes 2 secs to render the error with workaround code. My Gemfile:\n\n``` ruby\nsource 'http://rubygems.org'\n\ngem 'rake', '0.8.7'\ngem 'rails', :git => 'https://github.com/rails/rails.git', :branch => '3-1-stable'\ngem 'mysql', '2.8.1'\ngem 'jquery-rails', '1.0.7'\ngem 'devise', :git => 'https://github.com/plataformatec/devise.git'\ngem 'mini_magick', :git => 'https://github.com/AndreyChernyh/mini_magick.git' # , :path => '~/projects/gems/mini_magick'\ngem 'fog', :git => 'https://github.com/AndreyChernyh/fog.git'\ngem 'carrierwave', :git => 'https://github.com/AndreyChernyh/carrierwave.git'\ngem 'faraday', '0.6.1'\ngem 'oa-oauth', '0.2.6', :require => 'omniauth/oauth'\ngem 'oa-openid', '0.2.6', :require => 'omniauth/openid'\ngem 'oauth', '~> 0.4.0'\ngem 'kaminari', '0.12.4'\ngem 'exception_notification_rails3', :require => 'exception_notifier'\n# TODO check if the official gem updated\ngem 'grouped_validations', :git => 'https://github.com/adzap/grouped_validations.git'\ngem 'memcache-client', '1.8.5'\ngem 'acts-as-taggable-on', :git => 'https://github.com/denisj/acts-as-taggable-on.git'\ngem 'gravtastic', '3.1.0'\ngem 'twitter', '1.4.1'\ngem 'fbgraph', '1.8.0'\ngem 'thinking-sphinx', '2.0.5'\ngem 'ts-datetime-delta', '1.0.2', :require => 'thinking_sphinx/deltas/datetime_delta'\ngem 'sass-rails'\ngem 'whenever', '0.6.7', :require => false\ngem 'newrelic_rpm', '3.1.1.beta1'\ngem 'configatron', '2.8.0'\ngem 'delayed_job', '2.1.4'\ngem 'yui-compressor', '0.9.6'\n#gem 'mailman', '0.4.0'\n\n# admin\ngem 'meta_search', '>= 1.1.0.pre'\ngem 'activeadmin', :git => 'https://github.com/gregbell/active_admin.git'\n\n# caching\ngem 'hiredis', '~> 0.3.1'\ngem 'redis', '~> 2.2.0', :require => [\"redis/connection/hiredis\", \"redis\"]\ngem 'redis-store', '1.0.0.rc1'\n\ngroup :development, :test do\n  gem 'mongrel'\n  gem 'rspec-rails', '2.6.1.beta1'\n  gem 'ruby-prof'\nend\n\ngroup :test do\n  gem 'factory_girl_rails', '1.0.1'\n  gem 'shoulda-matchers', :git => 'https://github.com/thoughtbot/shoulda-matchers.git'\n  gem 'autotest-rails', '4.1.0'\n  gem 'capybara', :git => 'git://github.com/jnicklas/capybara.git'\n  gem 'timecop', '0.3.5'\n  gem 'launchy'\nend\n\ngroup :production, :staging do\n  gem 'unicorn'\nend\n```\n", "created_at": "2011-07-21 14:59:33", "user": 131281, "id": 1624097}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1624224", "text": "I'm on master and I've still got this. It happens every time you call a non-existent method as @AndreyChernyh said.\n\nWant me to try on the stable branch or should master have fixed it if stable has?\n\nThis app is also proprietary and it's massive, but I'm happy to provide any traces or info that might be useful. \n\nMy Gemfile looks like this:\n\n```\nsource 'http://rubygems.org'\n\ngem 'rails', :git => \"git://github.com/rails/rails.git\"\n\ngem 'mysql2'\ngem 'rubyzip2'\ngem 'libxml-ruby'\ngem 'will_paginate', :git => \"git://github.com/JackDanger/will_paginate.git\" #\"git://github.com/mislav/will_paginate.git\"\ngem 'cocaine'\ngem 'paperclip', :git => \"git://github.com/ihid/paperclip.git\", :branch => \"delayed_fog\"\ngem 'json'\n#gem 'rmagick', \"2.13.1\"\ngem 'hpricot'\ngem 'ruby-openid'\ngem 'exceptional'\ngem 'memcache-client'\ngem 'haml', :git => \"git://github.com/ihid/haml.git\"\ngem 'sass-rails', :git => \"git://github.com/rails/sass-rails.git\"\n#gem 'sass', :git => \"git://github.com/nex3/sass.git\"\ngem 'bourbon', :git => \"git://github.com/ihid/bourbon.git\"\ngem 'coffee-script'\ngem 'uglifier'\ngem 'jquery-rails'\ngem 'pdfkit', \"0.5.1\"\ngem 'aws-s3', :require => \"aws/s3\"\ngem 'fog'\ngem 'amazon-ec2'\ngem 'oink'\ngem 'foreigner', :git => 'git://github.com/matthuhiggins/foreigner.git'\ngem 'bson_ext'\ngem 'super_sti', :git => \"git://github.com/ihid/super_sti.git\"\ngem 'belongs_to_enum', :git => \"git://github.com/ihid/belongs_to_enum.git\"\ngem 'activemerchant', :git => \"git://github.com/ihid/active_merchant.git\"\n\ngroup :test do\n    gem 'ruby-debug19', :require => 'ruby-debug'\n    gem 'rspec-rails'\n    gem 'autotest'\n    gem 'webrat'\nend\n\ngroup :development do\n  #gem 'rails-dev-boost', :git => 'git://github.com/thedarkone/rails-dev-boost.git', :require => 'rails_development_boost'\nend\n\ngroup :production do \n  gem 'thinking-sphinx',\n    :git     => 'git://github.com/freelancing-god/thinking-sphinx.git',\n    :branch  => 'rails3',\n    :require => 'thinking_sphinx'\nend\n```\n", "created_at": "2011-07-21 15:19:51", "user": 286476, "id": 1624224}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1624353", "text": "This is the output I get if I kill the server with CTRL-C (the ^C are me holding down CTRL-C as my computer is totally unresponsive by this point). \n\n```\n^C^C^C^C^C^C^C^C[2011-07-21 16:29:00] ERROR NoMethodError: undefined method `shutdown' for nil:NilClass\n    /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/activesupport/lib/active_support/whiny_nil.rb:48:in `method_missing'\n^C^C^C^C^C^C/Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/activesupport/lib/active_support/whiny_nil.rb:48:in `method_missing': undefined method `shutdown' for nil:NilClass (NoMethodError)\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/handler/webrick.rb:24:in `shutdown'\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/server.rb:259:in `block in start'\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/server.rb:320:in `call'\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/server.rb:320:in `block in write_pid'\n    from script/rails:in `call'\n^C^C^C^C^C^C^C^C^C^C^C\n\nStarted GET \"/publications/1\" for 127.0.0.1 at 2011-07-21 16:28:29 +0100\nProcessing by PublicationsController#show as HTML\n  Parameters: {\"id\"=>\"1\"}\n  User Load (0.5ms)  SELECT `users`.* FROM `users` WHERE `users`.`id` = 2 LIMIT 1\n  Publication Load (0.2ms)  SELECT `publications`.* FROM `publications` WHERE `publications`.`id` = 1 LIMIT 1\nCompiled ~/.rvm/gems/ruby-1.9.2-p180/gems/jquery-rails-1.0.12/vendor/assets/javascripts/jquery.js  (0ms)  (pid 6640)\nCompiled ~/.rvm/gems/ruby-1.9.2-p180/gems/jquery-rails-1.0.12/vendor/assets/javascripts/jquery_ujs.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.ui.min.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.tools.min.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.tokeninput.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.jcrop.min.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.iframe-transport.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/jquery.fileupload.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/general.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/meducation.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/ui.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/users.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/widgets.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/exam_room/practice/exams.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/exam_room/practice/questions.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/exam_room/practice/mcqs.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/exam_room/practice/sbas.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/publications.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/ecommerce.js.coffee  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/javascripts/application.js  (0ms)  (pid 6640)\nCompiled ~/Projects/Work/meducation/app/assets/stylesheets/application.css.scss  (0ms)  (pid 6640)\n  Rendered publications/show.html.haml within layouts/application (30347.5ms)\nCompleted 500 Internal Server Error in 30794ms\n\nActionView::Template::Error (undefined local variable or method `asdwqe' for #<#<Class:0x0000010c28b330>:0x0000010c2872f8>):\n    69:         \n    70:         #publication_container    \n    71:             \n    72:             -non_existant.each do |i|\n    73:                 -x\n    74: \n    75: \n  app/views/publications/show.html.haml:72:in `_app_views_publications_show_html_haml___2654011636592586608_2249469060'\n\n  Rendered /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/templates/rescues/_trace.erb (120.3ms)\n  Rendered /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb (3.9ms)\n  Rendered /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/templates/rescues/template_error.erb within rescues/layout (210.9ms)\n^C^C^C^C^C^C/Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/activesupport/lib/active_support/whiny_nil.rb:48:in `method_missing': undefined method `shutdown' for nil:NilClass (NoMethodError)\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/handler/webrick.rb:24:in `shutdown'\n    from /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/server.rb:259:in `block in start'\n    from script/rails:in `call'\n^C^C\n```\n", "created_at": "2011-07-21 15:36:44", "user": 286476, "id": 1624353}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1624437", "text": "Digging into this deeper, I'm also sporadically getting the following. It may or may not be related. \n\n(Update: now I've applied @AndreyChernyh's hack, I get this ever time a page fails.)\n\n```\nError during failsafe response: incompatible character encodings: UTF-8 and ASCII-8BIT\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:132:in `block in log_error'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/activesupport/lib/active_support/deprecation/reporting.rb:20:in `silence'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:130:in `log_error'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:65:in `render_exception'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:60:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/railties/lib/rails/rack/logger.rb:13:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/methodoverride.rb:24:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/runtime.rb:17:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/lock.rb:15:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/railties/lib/rails/engine.rb:454:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/railties/lib/rails/rack/content_length.rb:16:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-993d0f6477c6/railties/lib/rails/rack/log_tailer.rb:14:in `call'\n  /Users/iHiD/.rvm/gems/ruby-1.9.2-p180/gems/rack-1.3.1/lib/rack/handler/webrick.rb:59:in `service'\n  /Users/iHiD/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n  /Users/iHiD/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n  /Users/iHiD/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n```\n", "created_at": "2011-07-21 15:48:18", "user": 286476, "id": 1624437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636723", "text": "I had this problem on an app I no longer work on, but we worked around with the `#inspect` monkey patch provided above.\n\nThis issue was potentially made harder to reproduce by 5b8801442ea02fc942ae0ee8ef81a9120525f5f0 that filters out most of the rack stuff from the env dump.\n\nIt doesn't fix the root problems though, of which there are two:\n1. `#inspect` on an `ActionController::Base` instance is 33K (!!) on a blank rails app. This is totally unhelpful. The opposite extreme (only show the class name) would be more useful and not misleading.\n2. The error page blindly renders the inspect of everything in the session and a lot of stuff in the environment. This is potentially megabytes of data, most of which is hidden by default, and given it's volume likely not interesting in the majority of cases. While generating the inspect output can potentially take a long time (see point 1), changing `debug_hash` in `actionpack/lib/action_dispatch/middleware/templates/rescues/_request_and_response.erb` to truncate the output to an arbitrary length (100 chars?) seems reasonable to me.\n\nHappy to provide a patch for either or both of these suggestions @spastorino if you agree.\n", "created_at": "2011-07-23 07:28:50", "user": 1714, "id": 1636723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638333", "text": "Are you guys aware of why this is only happening when the error is a missing method? Parse errors and general exceptions are being handled fine. Is a different template rendered for this etc? \n\nCould we maybe mimic the other exception behaviours here? \n\nExcuse my questions rather than solutions - I don't know this bit of the codebase at all and am too bogged down with deadlines to explore it right now. Sorry.\n", "created_at": "2011-07-23 18:49:15", "user": 286476, "id": 1638333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1644329", "text": "I experience the issue with unicorn as well as webrick. My trick is to spot it before the memory monster goes past the 1GB.. from years of CounterStrike I tend to have a good reaction time.. ha ha..\n\nAnyway it only happens on method_missing errors for me, typical typo errors. When making a new app it doesnt seem to happen in webrick or unicorn. I only tested this for a few minutes.\n\nMaybe important is also the information that it doesnt only happen on the view layer. I also had this happen in a model, 100% reproducible. Unfortunately I deleted that bit of code :/ (I know Im a dummy...) I will post some code if i can reproduce it again.\n", "created_at": "2011-07-25 08:54:29", "user": 224657, "id": 1644329}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1646757", "text": "I've managed to capture a couple stack traces - http://pastie.org/2268985\n", "created_at": "2011-07-25 15:53:48", "user": 115003, "id": 1646757}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1647051", "text": "When monkey patching rack-mount/lib/rack/mount/route.rb inspect to not call @app.inspect at least the problem goes away, along with some debug info :(\n", "created_at": "2011-07-25 16:33:31", "user": 115003, "id": 1647051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1647362", "text": "@xaviershay I'm happy with that. Can you put together a patch?\n", "created_at": "2011-07-25 17:15:16", "user": 3124, "id": 1647362}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1648673", "text": "Seems that I managed to fix this (at least I am not able to reproduce this issue anymore).\nI created a pull request with the change: https://github.com/rails/rails/pull/2264\n\nIt seems that when a Template:Error is raised from rendering the actual view, the layout rendering fails with calling .html_safe on nil content. This in turn raises another error, which then causes the whole loop to repeat until the host machine runs out of RAM. \n", "created_at": "2011-07-25 20:06:09", "user": 75699, "id": 1648673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1649442", "text": "Great find @tanelsuurhans. I'm still going to put together a patch for my suggestions as I still think they're worthwhile additions.\n", "created_at": "2011-07-25 21:31:41", "user": 1714, "id": 1649442}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1651873", "text": "Pull request for shorter inspect output for `Rails::Engine` (the `@app.inspect` culprit from above), and `AbstractController`. Adds `ActiveSupport::ShortInspect` so others can use it also: https://github.com/rails/rails/pull/2269\n\nProbably not going to get around to the `#debug_hash` changes I suggested just at the moment. /cc @tenderlove\n", "created_at": "2011-07-26 05:50:36", "user": 1714, "id": 1651873}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1655267", "text": "I debugged this problem some more, it seems to happen in C code - action_view/template/error.rb#initialize never returns, more accurately the call to NameError.message never returns: super(original_exception.message).\n\nI've tried this also with JRuby (1.6.3) and everything works, the following is the result from original_exception.message:\n\nundefined local variable or method `foo' for #<#Class:0x174cff77f:0x2e20a282>\n\nFor some reason 1.9.2-p0 and 1.9.2-p290 are unable to call name_err_mesg_to_str without going into an endless loop and concating to a huge string buffer. I've captured a couple of C level stack traces with GDB also and I think it looks like the string is already over 8 MB.\n\nWhat I suspect is that while name error is looping instance variables there's some sort of circular reference or edge case that causes it to keep looping endlessly (no recursion since stack overflow doesn't happen).\n\nI also pastied the C stack traces: http://pastie.org/2274529 and http://pastie.org/2274530\n\nI'll try to go through the C code a bit more when I get the chance, meanwhile hope that this helps a bit in finding the cause of the problem.\n", "created_at": "2011-07-26 15:43:43", "user": 115003, "id": 1655267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1655322", "text": "@tarmolehtpuu can you consistently reproduce the error?  If so, can you push an app to github that I can use to repro?\n", "created_at": "2011-07-26 15:49:21", "user": 3124, "id": 1655322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1658053", "text": "I got into this loop too since 3.1.0.rc1.\nNow with rc5 using passenger 3.0.3 on ruby 1.8.7 it's not really the same case, the waiting is long, but not endless like in rc1-4 for me.\n\nOn rc4, I had to kill the process and relaunch passenger.\n\nMainly caused by \"undefined method\" errors, I think when the app crashes for something else, like syntax err, it is OK. (sorry if this is already known.)\n\n3.1.0.rc1+\nruby 1.8.7 (2010-01-10 patchlevel 249) [universal-darwin11.0] && ruby 1.8.7 EE 2011.3\npassenger 3.0.3\n", "created_at": "2011-07-26 21:37:05", "user": 195891, "id": 1658053}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1675145", "text": "@tenderlove, I'm able to reproduce it, but as usual the app is proprietary and I can't share it I think (I'll have to check). I've been trying to reproduce this with a fresh application, no luck so far. I'll try some more over the weekend.\n", "created_at": "2011-07-28 18:25:22", "user": 115003, "id": 1675145}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1675180", "text": "I've tried assets, haml and couple other things I could think of that might be causing it, no luck yet. In case anyone would like to try to reproduce this bug in a fresh app then here's a good starting point: https://github.com/perfectline/name-error-inspect\n\nGemfile and Gemfile.lock are both from an app where this bug appears, just something is missing. Might be worth a try to add some AR usage and maybe bit more exotic stuff like default scopes etc...\n", "created_at": "2011-07-28 18:28:35", "user": 115003, "id": 1675180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1676971", "text": "OK - This is a slightly different observation which may or may not be related to any of this. When the server starts absorbing memory and I kill it, the shutdown method gets itself into an endless loop.\n\nIn webrick.rb in the rack gem is the following\n```def self.shutdown\n        @server.shutdown\n        @server = nil\n      end\n\n``````\n\nBecause ```@server``` is nil, shutdown gets called on nil, and for some reason this causes massive recursion.\n\nWhen I change this to the following, I can kill the server cleanly.\n```@server.shutdown if @server.respond_to?(:shutdown)```\n\nIn the last 48hrs, this issue has stopped affecting me altogether. Whether it's down to this, or something totally different, I don't know. I've made lots of commits in the last few days, but the only infrastructure ones are that I've moved to 3-1-stable (from master) and to the sass-rails 3-1 branch (from master).\n\nI will try further to backtrace my steps and see what's gone right, but I thought I'd mention this in case it's a pointer in a helpful direction.\n``````\n", "created_at": "2011-07-28 22:00:52", "user": 286476, "id": 1676971}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1695962", "text": "I'm pretty sure we're seeing this happen on Heroku (Bamboo REE 1.8.7 using Thin). We get locked dynos and I'm guessing this is the cultprit (as we see this problem all the time in dev mode).\n\nIt seems fairly in-determinate so it does seem like a race condition as suggested above.\n\nIf it is happening in production, I'd say it's a big problem.\n", "created_at": "2011-07-31 18:22:47", "user": 124018, "id": 1695962}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1710297", "text": "I must confess that this thread totally confuses me! :-)\n\nI think there are two similar nicks and alot of info going on. I'll try to summarize.\n\n@AndreyChernyh came up with the #inspect monkey patch, which helps some people but not others. It doesn't solve the problem for us.\n\n@xaviershay 's found a few similar things, his patch appears to do the same thing as the Andrey's?\n\nIt sounded like @tarmolehtpuu had a sweet fix but when following the link to the pull request he closed it because it doesn't fix the issue. \n\n(BTW I think this is because I've found that sometimes I hit the error and then restart the server and the same code does NOT reproduce the error, although other times it seems consistant, so it's constantly inconsistant :-)\n\n@ihid seems to have solved the problem of not being able to ctrl-C properly but not the actual bug?\n\nSome more observations:\n- Everyone who is hitting the problem seem to have larger, commercial, production apps (at least, lots of gems and they can't share their app, like us).. so perhaps it's memory or resource related?\n- Info seems to be drying up, which is worrying because I'm sure we're seeing this in production. Locking up our dynos and rendering our app unresponsive. Of course you could argue that we shouldn't have any \"method missings\" in production but it's not our release branch, we're evaluating 3.1 for our next big release.\n\nI've tried to capture as much info as I can think of below, in the hope that somebody can nail this. From our point of view, this is by far and away THE showstopper in 3.1 as it locks up our dynos in \"production\" if we have a method missing anywhere in our code (we _think_, I should emphasise that there's almost no way to prove that).\n\nHere's our Gemfile.lock from the breaking branch:\n\nhttps://gist.github.com/1120512\n\n.. an example stack trace dump when pressing ctrl-C\n\nhttps://gist.github.com/1120516\n\n.. and finally, something a little more interesting, this is the FULL trace from a request which totally hangs my Rails (requiring the triple ctrl-C action) when I've been running for a while, but when starting rails s up fresh and hitting the same action with the exact same code it actually does finally time out after around 40seconds, with this trace:\n\nhttps://gist.github.com/1120522\n\nHelp! :-)\n", "created_at": "2011-08-02 16:05:29", "user": 124018, "id": 1710297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1710338", "text": "Can anyone reproduce this on their local machine?  If so, please send me an email, and I'll walk you through the steps to debug.  You don't need to share your application with me, but I need to get in touch with someone who can reproduce locally.\n", "created_at": "2011-08-02 16:08:55", "user": 3124, "id": 1710338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1710471", "text": "I was getting it all the time (not 100%, but lots) when I started porting from 2.x to 3.1 but I backed down to 3.0 in the hope of avoiding it. I've seen it on 3.0 but less and less ... as I improve my port, and I get less errors in the code ... to now, not in a while. That said, I am pretty nervous about this bug (for me going to production w/ what I have) so I'd be game to try to reproduce it if nobody else can offer a local app. Ping me if nobody else volunteers.\n", "created_at": "2011-08-02 16:25:14", "user": 105598, "id": 1710471}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1712202", "text": "Can any of you who can still reproduce this report your Rails version and sprockets gem version please?\n", "created_at": "2011-08-02 19:16:11", "user": 75699, "id": 1712202}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1712205", "text": "People who are seeing this problem: if you upgrade to Rails 3.1.0.rc5 and sprockets beta.12, does the problem still happen?\n", "created_at": "2011-08-02 19:16:29", "user": 3124, "id": 1712205}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1712839", "text": "We've been able to narrow this issue down to a problem with sprockets storing concatenated assets in memory, and attaching them to an exception.  Does this seem familiar @josh?\n\nI'm looking through sprockets code, but I'm not sure what is going on.\n", "created_at": "2011-08-02 20:30:18", "user": 3124, "id": 1712839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1713468", "text": "If I am adding noise but not signal I'll try to keep quiet 'cos I am new to 3.anything so not sure of what I saw nor what I am talking about... but I moved back from 3.1 to 3.0 and I believed I still hit this problem (just far less frequently.) Isn't sprockets 3.1 only not 3.0? BTW: Before downgrading I thought I'd improved things by disabling concatenating assets (I'm sorry I forget how) but it didn't make it go away.\n\nI'd read earlier that folks thought it was to do with NameError, and I was getting a lot of those as I was porting 2.x code to 3.x. Is that thread of investigation no longer being considered?\n", "created_at": "2011-08-02 21:42:24", "user": 105598, "id": 1713468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1713721", "text": "@tenderlove sprockets catches asset exceptions and converts them to `console.log` or css error messages.\n\nhttps://github.com/sstephenson/sprockets/blob/master/lib/sprockets/server.rb#L66-81\n\nThat should only affect errors raised under `/assets` though, not the entire rails stack.\n", "created_at": "2011-08-02 22:16:42", "user": 137, "id": 1713721}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1713803", "text": "@josh: the issue is that in sprockets beta.10 the asset cache is an instance variable on the Sprockets::Environment object. Now when a template error is raised, Sprockets catches it (https://github.com/sstephenson/sprockets/blob/v2.0.0.beta.10/lib/sprockets/context.rb#L107) and re-raises it. The exception message contains a dump (.inspect) of all the env ivars, which means it tries to dump all of the asset cache also. For some reason this seems to cause massive memory consumption and also explains why this is not reproducible with rc5 and sprockets beta.12 (the caching mechanism has changed in sprockets). \nIt would be nice to have this verified by people having the issue before on rc4 and upgrading to rc5.\n", "created_at": "2011-08-02 22:27:59", "user": 75699, "id": 1713803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1713840", "text": "@tanelsuurhans ah, interesting. Can you open a sprockets issue for that. It seems like a bug to cache a template that raises an error.\n", "created_at": "2011-08-02 22:32:55", "user": 137, "id": 1713840}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1713866", "text": "@josh was this true in beta 10?  I'm looking at objects under gdb, and it seems that sprockets caches the entire file in an `@cache` hash.\n\nSomething is calling `inspect` on a `Sprockets::Environment` object and concatenating a string (I _think_ it's from an exception):\n\n![str buf cat](https://img.skitch.com/20110803-cwyey4pcyi53e6969br2i1jw9p.jpg)\n\nIf we go to frame 3 and check out the string, it's the full source for every JS file (and some are duplicated):\n\n![frame 3](https://img.skitch.com/20110803-jhy7hhihks11w1meyrq77whau3.jpg)\n\nDoes this seem familiar?  I can't seem to find the code that would cause it, but duping and concating strings this long is probably not a good thing.\n", "created_at": "2011-08-02 22:36:29", "user": 3124, "id": 1713866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714174", "text": "What I could find out is that every file is present in @cache at least twice - once with the full path, once with just the file name. \nIf i remember correctly then .inspect loops over all of the objects ivars and calls .inspect on those respectively. As the NameError message seems to contain an inspection output (ActionView::Template::Error (undefined local variable or method `foo' for #<#Class:0x007fca1f165fd0:0x007fca1f161278>): - notice that the inspected object also seems to be nested), this would mean that Sprockets::Environment is one of the targets of those inspect calls.\n\nBy overriding Sprockets::Environment#inspect and logging the caller, I get this: http://pastie.org/2311514 \n", "created_at": "2011-08-02 23:23:11", "user": 75699, "id": 1714174}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714206", "text": "I could probably pretty up the sprockets inspects too.\n", "created_at": "2011-08-02 23:28:19", "user": 137, "id": 1714206}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714235", "text": "@tenderlove - I'll try downgrading and see if it starts happening again.\n", "created_at": "2011-08-02 23:33:32", "user": 286476, "id": 1714235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714343", "text": "@tenderlove, @tanelsuurhans - I've just tried downgrading to rails rc4 and spockets beta10 and the problem started happening again. \n\nI've now gone a week with no issues on the 3.1 stable branch of rails and whichever sprockets gems that's pulling in, so I'm happy that this is resolved.\n\nExcellent find, guys. Very unexpected place to find it. Thank for your hard work in tracking it down.\n", "created_at": "2011-08-02 23:48:45", "user": 286476, "id": 1714343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714538", "text": "@josh just mixin in `ActiveSupport::ShortInspect` from my patch above, unless there are good reasons why `inspect` has to be more helpful for `Sprockets::Environment`.\n", "created_at": "2011-08-03 00:26:49", "user": 1714, "id": 1714538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1714964", "text": "Please test again on sprockets/master\n\n[sprockets 94a8fb0](https://github.com/sstephenson/sprockets/commit/94a8fb0bf310ae219491b9db2f1282c5b41c61ec)\n", "created_at": "2011-08-03 02:08:36", "user": 137, "id": 1714964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715021", "text": "I'm so sorry to crash the part in here but all of my comments (including the pasties above, which show sprockets b.12 and rc5 in the Gemfile.lock) apply to rc5 and b.12 :-(\n\nI spent a fair bit of time with @tenderlove trying to dtrace what's going on. It didn't seem like a big mem alloc problem right Aaron? Didn't we determine it's in a big loop trying to access files but failing or something?\n\n@josh I'll try sprockets master now\n", "created_at": "2011-08-03 02:22:12", "user": 124018, "id": 1715021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715583", "text": "Furthermore, @josh and @tenderlove the problem still exists (although it does seem like it could be a lot less of a problem, ie frozen for a shorter period like 30 secs instead of 5 minutes) when using edge rails and sprockets.\n\nNote that sprockets actually doesn't work at all for CSS and images on edge for us, so I temporarily commented out our CSS loading to be able to load our pages at all. So there is a lot less going on memory-wise which may be the real reason for the shorter freezes. Normally if I load the server, click around our site a fair bit and then hit the page with the method-missing I get a nice juicy 10min+ freeze with max CPU etc.\n", "created_at": "2011-08-03 05:18:40", "user": 124018, "id": 1715583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715685", "text": "@matpowel: Could you please try your app with ruby 1.9.2-p290 and see what happens then? I notice that you are using REE 1.8.7 judging by the traces you provided earlier.\n", "created_at": "2011-08-03 05:51:08", "user": 75699, "id": 1715685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715731", "text": "@josh: While the issue itself is already fixed in beta.12, this last commit seemingly makes the error pages appear more quickly though. Either way I am not able to reproduce the error on rails 3.rc5 and sprockets beta.12.\n\n@matpowel: Does your app have config.assets.enabled = true (and if yes, does this issue happen if you turn it off). \n", "created_at": "2011-08-03 06:08:20", "user": 75699, "id": 1715731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715833", "text": "@tanelsuurhans getting up and running on 1.9.2 now (a few gems are complaining), we migrated our code to 1.9.2 initially but performance was horrific with 3.1.rc1 so we rolled back to ree.. will try it again now anyway and report.\n\nAlso yes, we have config.assets.enabled = true as because of a number of bugs in sprockets we can't rake compile our assets and need them to be served live even in production. Turning it off doesn't help anyway, ironically the method missing becomes \"asset_path\" :-) Only 26 seconds for the timeout but that matches the behaviour I mention above with a fresh server instance which has been \"clicked around\".\n\nRendered farm_reporting/index.html.erb within layouts/company (24855.9ms)\nCompleted 500 Internal Server Error in 26236ms\n\nActionView::Template::Error (undefined method `asset_path' for #<#<Class:0x111a8b198>:0x1162b5338>):\n    60:     <%= f.radio_button( :user_report_id, -3 ) %> Actuals PDF<br />\n    61:     <%= f.radio_button( :user_report_id, -4 ) %> Recommendations PDF<br />\n    62:     <br />\n    63:     <%= link_to( image_tag( asset_path( \"icons/add.png\" ), :alt => \"\" )+\" Build Custom Reports\", user_reports_path ) %>\n    64:   </div>\n    65:   <div class=\"left widget\" style=\"margin-left: 20px;\">\n    66:     <div class=\"title\">Select Paddocks</div>\n  app/views/farm_reporting/index.html.erb:63:in`_app_views_farm_reporting_index_html_erb__229202839_2295415560'\n  app/views/farm_reporting/index.html.erb:50:in `_app_views_farm_reporting_index_html_erb__229202839_2295415560'\n  app/controllers/application_controller.rb:334:in`set_current_user_on_model'\n", "created_at": "2011-08-03 06:36:17", "user": 124018, "id": 1715833}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1715882", "text": "@tanelsuurhans no joy, the problem still exists in 1.9.2\n", "created_at": "2011-08-03 06:47:13", "user": 124018, "id": 1715882}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1716154", "text": "@matpowel - since your request is successfully completing perhaps you could try get a rack-profiler log of it?\n\nhttps://github.com/rapportive-oss/rack-perftools_profiler\n", "created_at": "2011-08-03 07:51:48", "user": 115003, "id": 1716154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1717657", "text": "@tarmolehtpuu one of our guys Jason will look at it this evening (Perth time, morning in the USA) and let you know!\n", "created_at": "2011-08-03 12:44:36", "user": 124018, "id": 1717657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1719989", "text": "@tarmolehtpuu i just gave it a quick try before heading off to bed, unfortunately the exception bails out before the perftools dump the info, any idea how to get rack-perftools to still print the info?\n", "created_at": "2011-08-03 17:43:12", "user": 124018, "id": 1719989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1720842", "text": "I can replicate the issue me and @matpowel are having in our app by replacing ActionView::TemplateRenderer::render() with this:\n\n``` ruby\n    def render(context, options)\n      @view = context\n      crikey\n    rescue NameError => e\n      puts \"START\"\n      m = e.message.to_str\n      puts \"STOP\"\n    end \n```\n\nThere is a _massive_ pause between START and STOP, even on the first request to a fresh app. It doesn't actually matter where the exception is thrown; the pause occurs whenever message is read.\n\nIt seems something is monkey-patching NameError::message?\n\n@tenderlove suspected Sprockets, so I added the following to Sprockets::Environment:\n\n``` ruby\n    def inspect\n        puts \"Sprockets::Environment::inspect(): #{caller[0]}\"\n        super\n    end\n```\n\nThat immediately revealed that e.message.to_str is calling Sprockets::Environment::inspect() somehow.\n\nI also changed Rack::Mount::Route::inspect() as follows, although in my sleep-addled state I can't remember why:\n\n``` ruby\n    def inspect #:nodoc:\n      puts \"Rack::Mount::Route::inspect(): #{caller[0]}\"\n      \"#<#{self.class.name} @app=#{@app.inspect} @conditions=#{@conditions.inspect} @defaults=#{@defaults.inspect} @name=#{@name.inspect}>\"\n    end\n```\n\nThat causes the following to be printed:\n\n```\nSTART\nSprockets::Environment::inspect(): /Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:11:in `to_str'\nRack::Mount::Route::inspect(): /Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:11:in `to_str'\nRack::Mount::Route::inspect(): /Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:11:in `to_str'\n\n...\n\nRack::Mount::Route::inspect(): /Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:11:in `to_str'\nRack::Mount::Route::inspect(): /Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:11:in `to_str'\nSTOP\nCompleted 200 OK in 34760ms (Views: 31376.7ms | ActiveRecord: 254.4ms)\n```\n\nIn all, the single e.message.to_str line gives rise to 2360 calls to Sprockets::Environment::inspect() and 43772 calls to Rack::Mount::Route::inspect() and who knows what else.\n\nAnyway, I'm due for sleep and don't have any insights. In the morning @matpowel and I will look at perftools, unless any of you have other ideas of where we should be looking in the interim. Much thanks :)\n", "created_at": "2011-08-03 19:17:35", "user": 38485, "id": 1720842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1722249", "text": "There are seemingly two separate issues here:\na) the problem of the error message containing all the cached assets\nb) the issue of .inspect being called on the objects multiple times\n\nSprockets::Environment#inspect is called because the NameError message is constructed by using the error description and the object it happened on, with it's inspect method being invoked to get a human readable representation of it. Inspect works by looping through all of the objects ivars and calling inspect on those also. Now considering that the template rendering is partially done in Sprockets (if the asset pipeline is enabled), it should be pretty obvious why Sprockets::Environment#inspect gets called - although it does not appear it the output. Maybe it's scrubbed later on in Rails (I recall seeing a backtrace cleaner somewhere).\n", "created_at": "2011-08-03 21:57:18", "user": 75699, "id": 1722249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724316", "text": "We've fixed this issue in our app by adding the following to the top of config/application.rb:\n\n``` ruby\n# Monkeypatch to stop the app freezing on NameError and NoMethodError\nmodule AbstractController\n  module Rendering\n    module Antifreeze\n      def inspect\n        @view_renderer.lookup_context.find_all(@_request[:action], @_request[:controller]).inspect\n      end\n    end\n    def view_context\n      context = view_context_class.new(view_renderer, view_assigns, self)\n      context.extend Antifreeze \n      return context\n    end\n  end\nend\n```\n", "created_at": "2011-08-04 04:09:43", "user": 38485, "id": 1724316}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724590", "text": "@jasonhutchens: So what you are doing is cutting even more inspected data out of the error message (see sprockets related stuff a couple of posts above). I would like to ask you to first try to find out what's inside the original message thats freezing up the application, otherwise me or anyone else is unable to figure out why this issue is happening and how to really fix it.\n\nIn actionpack/lib/action_view/template/error.rb\n\n```\ndef initialize(template, assigns, original_exception)\n  super(original_exception.message)\n  puts original_exception.message\n  puts caller.inspect\n  @template, @assigns, @original_exception = template, assigns.dup, original_exception\n  @sub_templates = nil\n  @backtrace = original_exception.backtrace\nend\n```\n\nThis should give you the original message and the call stack for the invocation.\n", "created_at": "2011-08-04 05:25:47", "user": 75699, "id": 1724590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724710", "text": "@tanelsuurhans sorry but we have a very large and stressful deadline for the end of this week. We will put some more time into it mid next week or later.\n\nWe are committed to putting back in as what we are doing is evaluating the use of 3.1 for our live site soon. I have a number of in depth blog/info type things to write up on pitfalls/experiences on 3.1, sprockets et al and I'm sure @jasonhutchens will be keen to help you resolve this issue.\n\nIn general, I wonder whether the problem is linked to a much larger problem which we haven't tackled yet which is truly shocking performance on 1.9.2. Our site is now very quick on REE 1.8.7 and unusable on 1.9.2. The problem with the inspect seems to be around large amounts of data (we're taking gigabytes it seems) being generated by #inspect calls, it makes one wonder!\n", "created_at": "2011-08-04 06:01:13", "user": 124018, "id": 1724710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724723", "text": "@tanelsuurhans: I thought you'd explained it pretty well. ActionView::TemplateRenderer::render throws a NoMethodError or a NameError. This results in a call to @view.inspect, which calls inspect recursively on all @view.instance_method's. So my fix just truncates @view.inspect.\n\nAnyway, I caused an exception by adding this in our dashboard.html.erb template:\n\n```\n<% crikey %>\n```\n\nI then made the changes you described above and ran the app, requesting the dashboard, WITHOUT my monkey patch, to get this (after 36405.1ms):\n\n```\nundefined local variable or method `crikey' for #<#<Class:0x10557bb28>:0x1055746c0>\n[\"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:302:in `new'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:302:in `handle_render_error'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:147:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:40:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:39:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:47:in `render_with_layout'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:38:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:12:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:22:in `wrap_formats'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:9:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/renderer.rb:36:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/renderer.rb:17:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:120:in `_render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/streaming.rb:250:in `_render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:114:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/renderers.rb:30:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/compatibility.rb:43:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:99:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rendering.rb:16:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/benchmark.rb:308:in `realtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/railties/controller_runtime.rb:24:in `cleanup_view_runtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/wicked_pdf-954af3d4a609/lib/pdf_helper.rb:16:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/implicit_render.rb:5:in `send_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/base.rb:167:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rendering.rb:10:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/callbacks.rb:18:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:471:in `_run__434435962__process_action__757340806__callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:207:in `_conditional_callback_around_117'\", \"/Users/jason/dev/website/app/controllers/application_controller.rb:359:in `set_current_user_on_model'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:206:in `_conditional_callback_around_117'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:443:in `_run__434435962__process_action__757340806__callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:386:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:386:in `_run_process_action_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rescue.rb:17:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:30:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/params_wrapper.rb:202:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/base.rb:121:in `process'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:45:in `process'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal.rb:193:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal.rb:236:in `action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:29:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:152:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:93:in `recognize'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:103:in `optimized_each'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:92:in `recognize'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:141:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:531:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/bullet-2.0.1/lib/bullet/rack.rb:8:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/etag.rb:23:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/conditionalget.rb:25:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/flash.rb:243:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/session/abstract/id.rb:195:in `context'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/session/abstract/id.rb:190:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/cookies.rb:326:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/query_cache.rb:62:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:466:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/logger.rb:13:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/methodoverride.rb:24:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/runtime.rb:17:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/lock.rb:15:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/engine.rb:455:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/content_length.rb:16:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/log_tailer.rb:14:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/handler/webrick.rb:59:in `service'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:95:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `each'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:23:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:82:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/handler/webrick.rb:13:in `run'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/server.rb:265:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands/server.rb:70:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:54\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:49:in `tap'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:49\", \"script/rails:6:in `require'\", \"script/rails:6\"]\n```\n\nI then re-ran the test, but this time WITH my monkey patch, to get this (after 23.5ms):\n\n```\nundefined local variable or method `crikey' for app/views/users/dashboard.html.erb():#<Class:0x1054b6350>\n[\"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:302:in `new'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:302:in `handle_render_error'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/template.rb:147:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:40:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:39:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:47:in `render_with_layout'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:38:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:12:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/abstract_renderer.rb:22:in `wrap_formats'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/template_renderer.rb:9:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/renderer.rb:36:in `render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_view/renderer/renderer.rb:17:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:120:in `_render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/streaming.rb:250:in `_render_template'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:114:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/renderers.rb:30:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/compatibility.rb:43:in `render_to_body'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:99:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rendering.rb:16:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/benchmark.rb:308:in `realtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:40:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/railties/controller_runtime.rb:24:in `cleanup_view_runtime'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render_without_wicked_pdf'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/wicked_pdf-954af3d4a609/lib/pdf_helper.rb:16:in `render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/implicit_render.rb:5:in `send_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/base.rb:167:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rendering.rb:10:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/callbacks.rb:18:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:471:in `_run__434435962__process_action__757340806__callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:207:in `_conditional_callback_around_117'\", \"/Users/jason/dev/website/app/controllers/application_controller.rb:359:in `set_current_user_on_model'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:206:in `_conditional_callback_around_117'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:443:in `_run__434435962__process_action__757340806__callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:386:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:386:in `_run_process_action_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/callbacks.rb:17:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rescue.rb:17:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:30:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/notifications.rb:55:in `instrument'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/params_wrapper.rb:202:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/base.rb:121:in `process'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/abstract_controller/rendering.rb:45:in `process'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal.rb:193:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_controller/metal.rb:236:in `action'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:29:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:152:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:93:in `recognize'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:103:in `optimized_each'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:92:in `recognize'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:141:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/routing/route_set.rb:531:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/bullet-2.0.1/lib/bullet/rack.rb:8:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/etag.rb:23:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/conditionalget.rb:25:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/head.rb:14:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/flash.rb:243:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/session/abstract/id.rb:195:in `context'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/session/abstract/id.rb:190:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/cookies.rb:326:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/query_cache.rb:62:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:466:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/callbacks.rb:29:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `send'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/logger.rb:13:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/methodoverride.rb:24:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/runtime.rb:17:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/lock.rb:15:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/engine.rb:455:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/content_length.rb:16:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/rack/log_tailer.rb:14:in `call'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/handler/webrick.rb:59:in `service'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:95:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `each'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:92:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:23:in `start'\", \"/Users/jason/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/webrick/server.rb:82:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/handler/webrick.rb:13:in `run'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/gems/rack-1.3.2/lib/rack/server.rb:265:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands/server.rb:70:in `start'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:54\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:49:in `tap'\", \"/Users/jason/.rvm/gems/ree-1.8.7-2011.03/bundler/gems/rails-7ee15e8a0f84/railties/lib/rails/commands.rb:49\", \"script/rails:6:in `require'\", \"script/rails:6\"]\n```\n\nTLDR; no difference, apart from the _slightly_ more useful error message.\n", "created_at": "2011-08-04 06:03:46", "user": 38485, "id": 1724723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724804", "text": "The only difference that I can spot is #<#Class:0x10557bb28:0x1055746c0> vs #Class:0x1054b6350 in the message.\nThe latter one would suggest that nested object inspects were skipped, thus giving a flat object inspect instead of a nested one and resulting in faster error throwing.\n\nStill not sure if this issue is caused by too much data in the object trees ivars, or by the fact that those .inspect calls end up in a loop somehow. Or both. The first issue would need to be eliminated via having .inspect overrides with minimal data (as the default behavior of inspecting all the objects ivars comes from ruby, and I don't think we are going to change that). But the second issue still needs some clarification first.\n\n@jasonhutchens: Can I ask you one more thing please? Could you post your Gemfile.lock\n", "created_at": "2011-08-04 06:27:08", "user": 75699, "id": 1724804}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1724852", "text": "Hi @tanelsuurhans, \n\nI posted our Gemfile.lock above, @jasonhutchens is using the same:\n\nhttps://gist.github.com/1120512\n\nThanks for looking into this.\n", "created_at": "2011-08-04 06:39:25", "user": 124018, "id": 1724852}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1728476", "text": "@tanelsuurhans: We can answer some of your questions by extending my patch to print out some debugging information, like this:\n\n``` ruby\n    module Antifreeze\n      @@indent = 0\n      def inspect\n        puts \"   \" * @@indent + \"BEG INSPECT ##{object_id}\"\n        @@indent += 1\n        instance_variables.each do |i|\n            v = instance_variable_get \"#{i}\".to_sym\n            start = Time.now\n            puts \"   \" * @@indent + \"#{i} #{v.class.name} ##{v.object_id}\"\n            v.inspect\n            puts \"   \" * @@indent + \"(#{1000 * (Time.now - start)}ms)\"\n        end \n        @@indent -= 1\n        puts \"   \" * @@indent + \"END INSPECT ##{object_id}\"\n        return \"\"\n      end\n    end\n```\n\nYou'll notice I'm looping through the instance variables and calling inspect on them, in an attempt to emulate the default implementation of inspect. Here are the edited results (for clarity, I've removed instance variables which don't recurse and are quick to inspect):\n\n```\nBEG INSPECT #2191884540\n   @_request ActionDispatch::Request #2201021240\n   BEG INSPECT #2191884540\n      ...\n   END INSPECT #2191884540\n   (4528.217ms)\n   @view_renderer ActionView::Renderer #2191908220\n   BEG INSPECT #2191884540\n      @_request ActionDispatch::Request #2201021240\n      (4137.892ms)\n      @_controller UsersController #2201021360\n      (12622.849ms)\n   END INSPECT #2191884540\n   (16761.496ms)\n   @_controller UsersController #2201021360\n   BEG INSPECT #2191884540\n      @_request ActionDispatch::Request #2201021240\n      (3869.411ms)\n   END INSPECT #2191884540\n   (16323.756ms)\nEND INSPECT #2191884540\n```\n\nSo there's definitely recursion; four inspect calls to the same object instead of one. It seems `@_request`, `@_controller` and `@view_renderer` are of interest. This \"monkey debugging\" can be continued in the obvious way to delve into those in an attempt to find the source of the recursion. The details are too long for this comment form to contain, but it boils down to this:\n- The exception is called, we inspect the template renderer, and this causes `@_request` to be inspected\n- The `_@request` (an `ActionDispatch::Request`) contains an `@env` hash, which is inspected\n  - This contains `@env[action_dispatch.remote_ip]` (an `ActionDispatch::RemoteIp::RemoteIpGetter`)\n  - Inspecting this (eventually) calls inspect on `UserController` (would be nice to know where this happens)\n    - It also calls inspect on the same request object three additional times, it seems\n  - This has a `@_view_renderer`, which, when inspected, causes the `ActionView::Renderer` to be inspected\n  - This causes our template renderer to be inspected again, which, in turn, causes the same `ActionDispatch::Request` to be inspected...\n\nSo you can see that the call chain is _template_ -> _request_ -> _controller_ -> _renderer_ -> _template_. This causes the first recursion you see. Next, the template renderer contains `@_view_renderer`, which results in _template_ -> _renderer_ -> _template_, and it also contains `@_controller`, resulting in _template_ -> _controller_ -> _renderer_ -> _template_.\n\nPresumably along the line lots of `Sprockets::Environment::inspect()` and `Rack::Mount::Route::inspect()` calls are made, and are probably responsible for a lot of the slowdown (you can see from above that the first recursion takes 4.5 seconds, while the second and third take over 16 seconds?\n\nThat's as far as I've got at the moment. I hope it joins the dots for someone? And I'm not sure whether I'm barking down the wrong path or not; this is the first time I've looked at the Rails source in any detail, and I don't know my Ruby internals (i.e. how inspect works) too well.\n\nRight now I'm wondering whether the recursion has got anything to do with how the view context is created (i.e. an anonymous class returned by `ActionView::Base.prepare()`). Perhaps something's going on to prevent the default implementation of inspect from detecting recursion, which it surely must be trying to do?\n", "created_at": "2011-08-04 16:46:14", "user": 38485, "id": 1728476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1777063", "text": "I've fixed this on 3-1-stable by reverting 403b06e right here: cdf6251\n\nI'm keeping this ticket open, but moving it to 3.2.  I think this is a symptom of a problem, and the problem is that we're holding references to too much stuff.  I'd like to get the references down in 3.2 so that calling inspect is not so painful.\n", "created_at": "2011-08-10 21:46:05", "user": 3124, "id": 1777063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1782439", "text": "@tenderlove: fwiw, that patch does _not_ fix the issue for us\n\nI've modified the monkeypatch we use to be more inclusive, as we were still getting a freeze on a NameError within a controller. This is now the patch we're using:\n\n``` ruby\nmodule ActionDispatch\n  module Routing\n    class RouteSet\n      alias inspect to_s\n    end\n  end\nend\n```\n\nWe can instrument this for debugging as follows:\n\n``` ruby\nmodule ActionDispatch\n  module Routing\n    class RouteSet\n      alias old_inspect inspect\n      def inspect\n        start = Time.now\n        retval = old_inspect\n        elapsed = Time.now - start\n        puts \"#{elapsed}|#{retval.length}\" if elapsed > 1.0\n        retval\n      end\n    end\n  end\nend\n```\n\nThat produces the following output for our case of a `NameError` in a template:\n\n```\n5.199491|5890102\n4.981274|5892448\n5.256369|5892448\n4.499855|5892448\n4.390188|5892448\n4.402916|5892448\n4.881419|5892448\n```\n\nAs for the contents of retval (a 5+MB string that is generated 7 times), please see http://pastie.org/2356074. I haven't pasted the entire thing; I've gone through and redacted bits (which are marked with `...nnn...`, where `nnn` is the number of characters removed), and indented to make the nesting more obvious. There's definitely no js source in it, however.\n", "created_at": "2011-08-11 14:53:05", "user": 38485, "id": 1782439}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1782526", "text": "These seem to be two closely related but slightly different issues. The first one, which was caused by calling exception#message, crashed the whole app process due to a seemingly endless loop inside the #inspect implementation of ruby. The bug you are having seems to be caused by a huge env dump. I'm guessing your app is relatively big?\n", "created_at": "2011-08-11 15:04:07", "user": 75699, "id": 1782526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1783287", "text": "I think @tanelsuurhans is probably correct.  It looks like you have many routes.  My patch should prevent that string from getting duped (which just goes back to Rails 3.0 behavior).  In other words, I suspect that this problem would also occur on Rails 3.0.\n\nThe real solution is to reduce the number of objects to which we're holding references.  After my revert, we should be no worse than Rails 3.0 behavior, but IMO this bug is by no means \"fixed\" (which is why I left it open).\n", "created_at": "2011-08-11 16:29:20", "user": 3124, "id": 1783287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787048", "text": "In that case, I'm not sure we ever got the endless loop bug. We just get extremely long pauses on NameError and NoMethodError (and your patch didn't speed things up, but, sure, the app probably used less memory).\n\nIt's fine to reduce the number of references held, but why not have a policy like \"always implement `inspect` if you implement `to_s`\" and \"always implement `inspect` if you contain a large number of complex ivars\" or something like that? Reducing the size of RouteSet.inspect from 5MB to, say, 5k by reducing held references is still of dubious utility (is anyone really going to find 5k strings in stack traces useful when debugging)?\n", "created_at": "2011-08-11 23:44:55", "user": 38485, "id": 1787048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787070", "text": "I agree.  But the point of my patch is to relieve pressure from the 3.1 release.  We're reverting to 3.0 behavior in order to buy more time.\n", "created_at": "2011-08-11 23:48:17", "user": 3124, "id": 1787070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787432", "text": "I've been having this bug in my own app - FWIW, I'm using  jasonhutchens' alias inspect to_s patch, and it's working around the problem nicely for the issues I was hitting.  \n\nI thought it might be a useful data point to point out that with that patch in place, `<%= undefined_variable %>` returns the \"name error\" / undefined local variable error we expect.  But if I say `<% raise undefined_variable %>` that kicks off the infinite memory-eating loop.\n\nNot sure if that has any bearing on the research, but I figured I'd rather say something redundant than sit on something important.  Cheers!\n", "created_at": "2011-08-12 01:09:27", "user": 390194, "id": 1787432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787691", "text": "@marktabler: I've just tried your `<% raise undefined_variable %>` and don't get the infinite loop. You might be hitting the Sprockets bug mentioned earlier in this thread?\n", "created_at": "2011-08-12 02:01:05", "user": 38485, "id": 1787691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1787881", "text": "Ah, looks like I am.  I'll see about upgrading to RC5 over the weekend and report on what my status is.\n", "created_at": "2011-08-12 02:39:14", "user": 390194, "id": 1787881}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2662367", "text": "This has been driving me nuts and causing issues with my production app.  At least I think it's the same issue.  Something makes the process hang when there's an error.\n", "created_at": "2011-11-08 00:52:53", "user": 312435, "id": 2662367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2665868", "text": "@inspire22\n\nFor me the fix is to remove \"table_exists?\" check from def inspect on AR base.rb. Memoizing the result is probably better than this hack, but it'll do for me...\n\nRack::Mount is calling \"inspect\" seriously large numbers of times (\\* 4ms per call to table_exists with my mysql setup) when you have a non trivial routes file (instant with 1 route, but for a real app it takes upwards of 7 seconds) and something 500s.\n\nReproducible for me with unicorn and mongrel, it's not just webrick.\n", "created_at": "2011-11-08 10:26:09", "user": 311, "id": 2665868}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2692877", "text": "We are experiencing the same problem porting our rails 2.3.14 app to Rails 3.1 (Rails freezes with high memory leak when a NameError or NoMethodError exception happens in a view). @matpowel : I think our app falls into the the \"large, commercial, production apps\" category too... It's quite annoying since we can't deploy our Rails 3.1 in production with this unexplained and heavy bug.\n\nAmong the patches proposed above, which one is the winner ? Could you please explain me how to apply it ? Thanks a lot.\n\nDetails : Ruby 1.8.7, Rails 3.1 on Webrick with asset pipeline enabled (local app on my MacBook Pro)\n", "created_at": "2011-11-10 08:52:38", "user": 744532, "id": 2692877}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2692914", "text": "try without asset pipeline (I.E with jammit), we are currently deploying our 3.1 apps that way and it helps \n", "created_at": "2011-11-10 08:57:11", "user": 115003, "id": 2692914}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2693127", "text": "Try this patch:\n\n``` ruby\nmodule ActionDispatch\n  module Routing\n    class RouteSet\n      alias inspect to_s\n    end\n  end\nend\n```\n\nIt's probably easiest to create a new file called `anti_freeze.rb` that contains this patch and put it in `config/initializers`.\n", "created_at": "2011-11-10 09:22:51", "user": 38485, "id": 2693127}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2707201", "text": "Thanks a lot, in my case the antifreeze patch seems to solve the problem. Hope we will find a \"proper\" way to fix this in Rails core.\n", "created_at": "2011-11-11 11:30:32", "user": 744532, "id": 2707201}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2713596", "text": "@jasonhutchens you made my week with that monkey patch! My production server went live on RoR 3.1 and then dead within no time, then down for days despite all my efforts. Applying this patch brought it back to life, and allowed me to track down the NameError that was sucking the life out of it.  THANK YOU! :)\n", "created_at": "2011-11-11 21:40:39", "user": 105598, "id": 2713596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2984688", "text": "Today I've discovered (running rails 3.1.1) that when I put call to non-existing method to the view (erb, haml, doesn't matter) my local mysql server just can't get enough of CPU power.\n\nFor example, this is from the log when this happened:\n\n```\nRendered shared/_menu.html.erb (0.2ms)\nRendered account/_menu.html.haml (8.4ms)\nRendered payments/new.html.erb within layouts/dashboard (120250.9ms)\nCompleted 500 Internal Server Error in 120566ms\n```\n\nThen the error came out in the browser:\n\n```\nNoMethodError in Payments#create\nShowing /Users/.../Sites/.../app/views/payments/new.html.erb where line #10 raised:\nundefined method `error_fields' for #<ActionView::Helpers::FormBuilder:0x007fd9aeb94440>\n\n10:   <%= f.error_fields %>\n```\n\nHow can those two things be related? How can throwing an error cause mysql server to eat cpu like dirty devil?\n(and yes, I'm pretty sure mysqld cpu usage ramped up only because of this, it happened twice this very day and stopped when the error message was thrown on the screen).\n\nIt looked like rails tried to connect and connect and connect to mysql \n\nRails 3.1.1\nMysql2 gem 0.3.6\nRuby 1.9.3-p0\nOS X 10.7.2 Lion (11.2.0 Darwin Kernel Version 11.2.0)\nMySQL server 5.5.9\n\nEDIT:\n\n@lypanov I've read your comment too late... If it's calling to table_exists? every time that would be the cause of my discovery.\n@jasonhutchens Your patch works like a charm, thanks!\n", "created_at": "2011-12-02 00:51:19", "user": 195891, "id": 2984688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2984963", "text": "Great stuff - the \"proper\" fix in Rails I suppose is either to implement meaningful versions of `inspect` instead of relying on default behaviour, and/or to avoid calling `inspect` altogether. And, of course, minimising held references to reduce the number and complexity of instance variables in the first place.\n\nThe default implementation of `inspect` recursively calls `inspect` on all instance variables. Calling `inspect` on top-level Rails objects, like the view itself, can chew up resources.\n", "created_at": "2011-12-02 01:25:27", "user": 38485, "id": 2984963}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3212567", "text": "@tenderlove should we move this out of the 3.2 milestone?\n", "created_at": "2011-12-20 01:04:29", "user": 1979, "id": 3212567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3234459", "text": "Thank you @jasonhutchens, that patch did the trick for me too.  This issue would sometimes render my Linux computer unusable for long enough to make me force a restart - not fun.  Recently I've been running with the line 'debugger' in the Route#inspect method just to catch it and restart my server before it eats all my resources.\n", "created_at": "2011-12-21 14:47:27", "user": 934953, "id": 3234459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3234576", "text": "@jamesds Why not just kill the process? There is something very wrong if a user space non superuser process is able to render a machine unusable.\n", "created_at": "2011-12-21 14:55:22", "user": 34627, "id": 3234576}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3234670", "text": "@betelgeuse I ran with the hack after it happened badly for the first time.  I was exaggerated slightly, though.  I could kill the server process but the computer was still very sluggish for a while, even after restarting the DB.  Not sure if it was swapping like crazy, but a few times it was just quicker to restart than work out why it was slow or work out how to fix it.\n", "created_at": "2011-12-21 15:03:40", "user": 934953, "id": 3234670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3468498", "text": "@jasonhutchens Thanks a lot. I've been dealing with this issue for a few months in development with Rails 3.0.3 and 3.0.11, but it didn't rise to a level of importance until it hit our production server this week :) and I finally found this thread. \n\nYour patch solved it for me in Rails 3.1.3. Before I just had to kill and restart the development server. That was faster than waiting for the error to finally bubble up. Thanks!\n\nEdit: @jasonhutchens' patch actually only worked in Rails 3.1.3. For Rails 3.0.11, we used @AndreyChernyh's patch, which raises the errors faster, but still impendingly slow.\n", "created_at": "2012-01-12 18:56:48", "user": 91577, "id": 3468498}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3603800", "text": "@jasonhutchens - Thank you a lot! I had the same problem with ruby 1.9.3 and rails 3.1.3 - your patch solved it!\n", "created_at": "2012-01-22 16:01:00", "user": 273759, "id": 3603800}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3743978", "text": "I think I'm also getting this problem on a few of my Rails 3.1 and 3.2 apps.\n", "created_at": "2012-01-31 17:49:46", "user": 1179, "id": 3743978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3744128", "text": "@joevandyk Try the patch from @jasonhutchens in the comments above (November 10th 2011) and hopefully you'll be smiling/thanking him, like a number of us. :)\n", "created_at": "2012-01-31 17:56:19", "user": 105598, "id": 3744128}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3744788", "text": "I did, and it worked great! I've been annoyed by this bug for months,\nit was hard to find this GH issue about it.  I'm not using webrick, so\nthe title was misleading.\n\nOn Jan 31, 2012, at 9:56 AM, Adam Jack\nreply@reply.github.com\nwrote:\n\n> @joevandyk Try the patch from @jasonhutchens in the comments above (November 10th 2011) and hopefully you'll be smiling/thanking him, like a number of us. :)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1525#issuecomment-3744128\n", "created_at": "2012-01-31 18:27:44", "user": 1179, "id": 3744788}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3745024", "text": "I hear that! I bet a bunch of folks are suffering this, and it killed me for a long time before the monkey patch came out. Any thoughts on how to spread the word, since a fix for it doesn't appear forthcoming.\n\nBtw: you ought now be seeing exceptions in your code (that you can fix) now the logs are coming out. The root source of the problem.  :-)\n\nAdam\n\nSent from my iPad\n\nOn Jan 31, 2012, at 6:27 PM, Joe Van Dykreply@reply.github.com wrote:\n\n> I did, and it worked great! I've been annoyed by this bug for months,\n> it was hard to find this GH issue about it.  I'm not using webrick, so\n> the title was misleading.\n> \n> On Jan 31, 2012, at 9:56 AM, Adam Jack\n> reply@reply.github.com\n> wrote:\n> \n> > @joevandyk Try the patch from @jasonhutchens in the comments above (November 10th 2011) and hopefully you'll be smiling/thanking him, like a number of us. :)\n> > \n> > ---\n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/rails/rails/issues/1525#issuecomment-3744128\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1525#issuecomment-3744788\n", "created_at": "2012-01-31 18:39:58", "user": 105598, "id": 3745024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3753956", "text": "@tenderlove would you be willing to change the title / description of this issue to make it more easily discoverable for those who are hitting this problem (based on the comment by @joevandyk above)? Something like \"Exception in View Freezes Rails\"?\n\nAlso, is it possible to divorce this symptom from the underlying cause? It seems to me that the fact that several people are struggling with this for months in development, and that it's affecting production apps, makes a fix a higher priority than 4.0? Reducing the number of held references, on the other hand, is an optimisation that arguably could wait that long.\n\nAnd @adamjack; the fix really is just to implement sane inspect methods for RouteSet and so on. The entire problem is that we're hitting the default implementation of inspect on top-level, long-lived rails objects that hold references to everything. The default implementation builds a massive string which is time consuming, memory intensive and of no practical use.\n", "created_at": "2012-02-01 05:25:42", "user": 38485, "id": 3753956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3754167", "text": "@jasonhutchens : I updated the title as upon your request.\n", "created_at": "2012-02-01 05:58:38", "user": 630156, "id": 3754167}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3917996", "text": "@jasonhutchens Thanks for the patch, worked wonderfully for me (Ruby 1.9.3-p0, Rails 3.2.1).\n", "created_at": "2012-02-11 02:39:26", "user": 144901, "id": 3917996}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3966806", "text": "@jasonhutchens Thanks. This patch is working well for our huge app. It helps me a lot to debug thousands of missing methods exceptions following our migration from Rails 2.3 .\n", "created_at": "2012-02-14 18:32:15", "user": 36916, "id": 3966806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3967912", "text": "Hi @aq, glad to hear the patch worked for you. One question, since you're doing the same thing we did a while ago in upgrading a very large app to Rails 3.1 (I work with @jasonhutchens), have you guys also moved to Ruby 1.9.3? We find the performance unacceptable compared to REE 1.8.7 because of very poor GC performance, so I'm checking with other people with very large apps. Thanks, Matt\n", "created_at": "2012-02-14 19:28:09", "user": 124018, "id": 3967912}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3968331", "text": "I'm (misery loves company) glad to hear somebody else say that. I worked hard to improve performance when I upgraded from 2.x to 3.1, and yet my new app is so slow (on exactly the same hardware) that I've found myself page caching almost everything (and more than I should.) The app instances bloat (when before they didn't, and I've worked hard to optimize & route out leaks/bloats.) Basically I don't know where to turn next to get back to the performance I had with 2.x.\n\nSo, long whine short, and not that this is the place for it ... but any ideas for improving performance (be it new ruby or what) would be appreciated.\n", "created_at": "2012-02-14 19:51:55", "user": 105598, "id": 3968331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3969182", "text": "Yes @matpowel we are using 1.9.3, but I am currently debugging and I have no numbers to compare with 1.8.7 .\n\n@adamjack for us, lazy loading of 2.5MB of config data stored in yaml files will be the first step.\n", "created_at": "2012-02-14 20:38:03", "user": 36916, "id": 3969182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3978185", "text": "The patch from @jasonhutchens worked perfect for me (Ruby 1.8.7, Rails 3.2.1).\n", "created_at": "2012-02-15 10:41:20", "user": 204562, "id": 3978185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3978213", "text": "@DriesS: I really have to ask - why on earth are you still using 1.8.7 with Rails 3.2.1? Afaik Rails dropped official support for 1.8.7 from 3.x onwards. I really suggest you upgrade your ruby version, you will get insane performance boots from using 1.9.3\n", "created_at": "2012-02-15 10:43:09", "user": 75699, "id": 3978213}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3978246", "text": "@tanelsuurhans rails supports 1.8.7 until 4.0\n", "created_at": "2012-02-15 10:45:10", "user": 34627, "id": 3978246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3978280", "text": "Okay, I was on that one then. Doesn't really change the fact that 1.8.7 is dog slow compared to 1.9.3, not to mention the memory usage :)\n\nAs a side note - I've encountered this bug a couple of times on a 3.2.1 project too, although its not as bad as it was with 3.0.x, just eats a up a bit of memory and spits out the TemplateError.\n", "created_at": "2012-02-15 10:48:07", "user": 75699, "id": 3978280}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3978400", "text": "never ending issue :)\n\nWould it make sense to write custom inspect methods for rails core classes (at least the huge ones) to make this go away?\n", "created_at": "2012-02-15 10:58:54", "user": 115003, "id": 3978400}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3979039", "text": "@tarmolehtpuu I think that an idiom of \"implement inspect for complex classes\" is good practice in general; after all, who is inspect for (developers, right)? So the default implementation, which, in our case, returns a 20MB string for the view, is pretty useless! I mean, 20MB is the complete works of shakespeare, the bible, all the sherlock holmes stories, and a bunch of other stuff. Hence my comment about separating symptom from cause above: https://github.com/rails/rails/issues/1525#issuecomment-3753956\n\n@tanelsuurhans all evidence we have to have to hand is that 1.9.x performance is worse than ree 1.8.7 for our app; it's quite likely GC related; we've not had enough time to investigate\n", "created_at": "2012-02-15 11:55:55", "user": 38485, "id": 3979039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3996608", "text": "Ping.  Seriously.  Still no fix for this in Rails 3.2.1?  I'm find the RouteSet hack (added via initializer) works for me.\n\n```\nmodule ActionDispatch\n  module Routing\n    class RouteSet\n      alias inspect to_s\n    end\n  end\nend\n```\n", "created_at": "2012-02-16 08:05:17", "user": 6473, "id": 3996608}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4006465", "text": "I created a sample app that shows how rails hangs when getting a view error.  https://github.com/joevandyk/rails-view-errors-hanging  Essentially I created an empty Rails 3.1.3 app with a couple thousand routes and put an undefined method call in the view.  I also made a 3.2 branch -- that one seems to hang for much longer.\n\nFor me, it only hangs for 5-6 seconds, but I'm sure the root cause of the slowness is the same as mentioned above where Rails can hang for minutes for larger apps.\n\nAs mentioned in the README, I'm positive this problem can show itself without having a thousand+ routes, but the slowness is fixed by the above Routeset fix.\n", "created_at": "2012-02-16 18:37:17", "user": 1179, "id": 4006465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4040366", "text": "I am using Rails 3.2.1 and the same is happening with me. whenever a method isn't find it takes forever to not throw the error. And memory usage going up and up and it almost use all of my system memory if i dont kill the server manually and sometimes killing the server doesnt work easily. Please we need a fix.\n", "created_at": "2012-02-19 07:05:33", "user": 964925, "id": 4040366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4071921", "text": "Encountered this problem yesterday in production :( RouteSet hack works for me now.\n", "created_at": "2012-02-21 09:55:55", "user": 8935, "id": 4071921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4075591", "text": "Out of curiosity, I've had a bit more of a look into this issue. The problem is internal to the Ruby interpreter; Rails isn't scrubbing this exception message as suspected by @tanelsuurhans seven months ago.\n\nThe root cause is `name_err_mesg_to_str`, which _always_ calls the `inspect` method of the object throwing the exception when constructing the message for a `NameError` or a `NoMethodError`. Which is pretty much what @tarmolehtpuu found in his first debugging session. This is the (1.9.2) code:\n\n``` c\nd = rb_protect(rb_inspect, obj, 0);\nif (NIL_P(d) || RSTRING_LEN(d) > 65) {\n  d = rb_any_to_s(obj);\n}\ndesc = RSTRING_PTR(d);\n\n...\n\nif (desc && desc[0] != '#') {\n  d = d ? rb_str_dup(d) : rb_str_new2(desc);\n  rb_str_cat2(d, \":\");\n  rb_str_cat2(d, rb_obj_classname(obj));\n}\n\nargs[0] = mesg;\nargs[1] = ptr[2];\nargs[2] = d;\nmesg = rb_f_sprintf(NAME_ERR_MESG_COUNT, args);\n```\n\nThat is:\n- Call `inspect` on the object that raised the exception\n- If the string returned is nil, or is more than 65 characters long, then call `rb_any_to_s`, which returns a string of the form `#<CLASSNAME:ADDRESS>`\n- If the string doesn't start with a `#`, then add the class name to the end of the string\n- Build the exception message via `rb_f_sprintf`\n\nNow, when a `NameError` or `NoMethodError` is thrown from a view, any access of the `message` of the resulting exception object will cause `name_err_mesg_to_str` to be invoked, which in turn will call `inspect` on the object which raised the exception, very probably discarding the results.\n\nThe default implementation of `inspect`, as we now all know, can be resource hungry for large, complex objects. One perfectly reasonable fix, I think, would therefore be for `name_err_mesg_to_str` to call `rb_inspect` _only_ _if_ it had been overridden (that is, to never call the default implementation for an object). But that's as maybe. The fix for us is to ensure that we don't allow the default implementation of `inspect` to be called. Which is as simple as overriding it. Which is what the \"RouteSet Hack\" does.\n\nHere's a simple test that replicates the issue in plain Ruby:\n\n``` ruby\ndef test_slow_inspect\n  require 'benchmark'\n  SlowInspect.new.raise_name_error\nrescue NameError => e\n  time = Benchmark.realtime { puts e.message }\n  puts \"(done in #{(time*1000).to_i} ms)\"\nend\n\nclass SlowInspect\n  def initialize(l=0)\n    @foo = []\n    10.times { @foo << ( l > 4 ? self : SlowInspect.new(l+1) ) }\n  end\n  def raise_name_error\n    shazbut\n  end\nend\n\ntest_slow_inspect\n\nclass SlowInspect\n  alias inspect to_s\nend\n\ntest_slow_inspect\n```\n\nwhich prints the following on my machine:\n\n```\nundefined local variable or method `shazbut' for #<SlowInspect:0x105213990>\n(done in 4593 ms)\nundefined local variable or method `shazbut' for #<SlowInspect:0x10499fae8>\n(done in 0 ms)\n```\n\nNote that the _result_ of calling `e.message` here is identical (well, apart from the address of the object); the only difference is that we're reducing the overhead of the call to `inspect` by overriding its default implementation.\n\nIn pure Ruby terms, \"implement inspect for complex classes\" is a good idiom. And, if you're bothering to do that, then \"keep the length of the string returned by inspect no more than 65 characters\" is a useful corollary, as it will yield more informative error messages for `NameError` and `NoMethodError` exceptions.\n", "created_at": "2012-02-21 14:27:03", "user": 38485, "id": 4075591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4722476", "text": "The fix for this bug has arrived on the 3.2 and 3.1 stable branches.\n", "created_at": "2012-03-27 18:03:02", "user": 1179, "id": 4722476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5195884", "text": "For those who might stumble upon dirty fixes for this issues in \"old\" projects, I can confirm that this issue has been fixed in 3.2.3.\n\nThe changelog doesn't cleary stipulates it (you can't look up #1525).\n", "created_at": "2012-04-18 10:40:38", "user": 807233, "id": 5195884}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5198381", "text": "I always create the changelog on the fly using github : https://github.com/rails/rails/compare/v3.2.2...v3.2.3\nThere it says it got included :)\n", "created_at": "2012-04-18 13:26:57", "user": 8935, "id": 5198381}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5199843", "text": "The changelog does say the cause for the bug (routeset inspection) was\nfixed. But unfortunately it doesn't mention the actual bug (freezing,\nmemory growth on view errors).\n\nOn Apr 18, 2012, at 3:40 AM, Thomas Gautier\nreply@reply.github.com\nwrote:\n\n> For those like me who're used to check changelogs, I confirm that this issue has been fixed in 3.2.3 even if the changelog http://weblog.rubyonrails.org/2012/3/30/ann-rails-3-2-3-has-been-released/ doesn't say so.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1525#issuecomment-5195884\n", "created_at": "2012-04-18 14:31:45", "user": 1179, "id": 5199843}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "another place\n", "labels": [], "number": 1526, "updated_at": "2012-03-29 13:42:45", "user": 6537, "closed_at": "2012-03-29 13:33:40", "id": 1016772, "title": "remove reflector to ", "url": "https://api.github.com/repos/rails/rails/issues/1526", "created_at": "2011-06-07 15:53:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4817794", "text": "Sorry but I didn't get the intent of this issue. I'm closing it from now.\n\nFeel free to reopen it with more information. Thanks to reporting.\n", "created_at": "2012-03-29 13:33:40", "user": 47848, "id": 4817794}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4818013", "text": "@rafaelfranca yep, was a pull request made few months ago, but no code here, don't know what's happen.\n", "created_at": "2012-03-29 13:36:32", "user": 6537, "id": 4818013}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4818318", "text": "Maybe some bug in github. Also thanks for the pull request and sorry for the delay with the response.\n", "created_at": "2012-03-29 13:40:54", "user": 47848, "id": 4818318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4818503", "text": "Thanks to you! n.p\n", "created_at": "2012-03-29 13:42:45", "user": 6537, "id": 4818503}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "cc. @josevalim\n", "labels": [], "number": 1527, "updated_at": "2014-07-03 04:48:40", "user": 160941, "closed_at": "2011-06-07 16:47:20", "id": 1017294, "title": "Rails::Server#app should be nice with Rack::URLMap (3.1 stable)", "url": "https://api.github.com/repos/rails/rails/issues/1527", "created_at": "2011-06-07 16:39:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1317970", "text": "Applied. GH didn't close.\n", "created_at": "2011-06-07 16:47:20", "user": 9582, "id": 1317970}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "We'll update this dependency again before full release.\n", "labels": [], "number": 1528, "updated_at": "2014-07-03 04:48:42", "user": 1839, "closed_at": "2011-06-07 17:11:42", "id": 1017630, "title": "Update project Gemfile to use the sass-rails rc", "url": "https://api.github.com/repos/rails/rails/issues/1528", "created_at": "2011-06-07 17:10:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I believe this is a functional test bug:\n\n``` ruby\nclass SomeControllerTest < ActionController::TestCase\n  setup do\n    @request.session[\"user_id\"] = 1\n  end\n\n  test \"some action\" do\n    get :some_action, { }, { \"another_var\" => 2 }\n    # expected: @request.session == { \"user_id\" => 1, \"another_var\" => 2 }\n    # actual:  @request.session == { \"another_var\" => 2 }\n  end\nend\n```\n\nAfter the `get` line, the session will only have `another_var`, not `user_id`. To get the latter, you have to do:\n`@request.session.merge({ \"another_var\" => 5 })` as the third argument to `get`. It does not seem to matter whether the session keys are strings or symbols, both fail without a merge.\n\nShouldn't merging with the current `@request.session` be done as part of `get`? Happy to start a patch if we agree this is a bug.\n", "labels": ["actionpack"], "number": 1529, "updated_at": "2012-04-29 06:12:52", "user": 28668, "closed_at": "2012-04-28 21:37:43", "id": 1017745, "title": "Functional test get method ignores session variables from setup when given a hash of new session variables", "url": "https://api.github.com/repos/rails/rails/issues/1529", "created_at": "2011-06-07 17:20:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1321332", "text": "This appears to be the intention as the code [explicitly creates a new session](https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/test_case.rb#L445). You can easily merge it yourself - I'd recommend using update as the session hash is a Rack session hash and update is redefined to stringify keys, e.g:\n\n```\nget :some_action, { }, session.update(:another_var => 2)\n```\n", "created_at": "2011-06-07 19:49:43", "user": 6321, "id": 1321332}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325159", "text": "Thanks for the quick response and the session.update tip. I know merging it myself isn't hard but isn't merging the common case? Any thoughts on why the session is treated differently from the parameters and the flash, both of which are merged in (around the code you linked to)?\n", "created_at": "2011-06-08 07:52:01", "user": 28668, "id": 1325159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325406", "text": "Well if it merged by default how would you create a test with a clean session - you'd need something like this:\n\n``` ruby\nclass SomeControllerTest < ActionController::TestCase\n  setup do\n    @request.session[\"user_id\"] = 1\n  end\n\n  test \"some action\" do\n    @request.session = ActionController::TestSession.new\n    get :some_action, { }, { :another_var => 2 }\n  end\nend\n```\n\nIt would also be a breaking change without any possibility of being backwards compatible unless you add a config option to enable the old behaviour.\n", "created_at": "2011-06-08 08:54:36", "user": 6321, "id": 1325406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329640", "text": "If merging the session is more common, I wouldn't mind the additional \n\n``` ruby\n@request.session = ActionController::TestSession.new\n```\n\nin the odd case I'd need to create a clean session but I do see your point about backwards compatibility.\n", "created_at": "2011-06-08 20:35:47", "user": 28668, "id": 1329640}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329681", "text": "I do think merging the session is the more common behavior.\n\n@pixeltrix : with merging session params, there isn't necessarily a need to reinitialize the session manually.\nI'd reproduce your previous example with the following :\n\n```\nclass SomeControllerTest < ActionController::TestCase\n    context \"logged in\" do\n        setup do\n            @request.session[\"user_id\"] = 1\n        end\n\n        test some action\" do\n            get :some_action, { }\n        end\n    end\n\n    context \"logged of\" do\n        test \"some action\" do\n            get :some_action, { }, { :another_var => 2 }\n        end\n    end\nend\n```\n\nThis way, you have all your tests use the same predefined session depending of the context.\nHowever as this can't be backward compatible and there'd be a lot of tests broken, I don't think it should come before 3.2.\n", "created_at": "2011-06-08 20:42:04", "user": 9347, "id": 1329681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1333012", "text": "If you're going to try and stick to [Semantic Versioning](http://semver.org/) then it shouldn't come before 4.0 :-)\n", "created_at": "2011-06-09 09:25:35", "user": 6321, "id": 1333012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364177", "text": "I'm not a stickler for version numbers. Don't mind waiting til 3.2 or later. Should I contribute a patch with tests?\n", "created_at": "2011-06-14 06:49:24", "user": 28668, "id": 1364177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1436050", "text": "Any more thoughts on this? Go forward or ignore?\n", "created_at": "2011-06-24 22:29:15", "user": 28668, "id": 1436050}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1506542", "text": "Ignore it is.\n", "created_at": "2011-07-05 19:29:57", "user": 28668, "id": 1506542}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1506645", "text": "@avk current focus is getting 3.1 out the door - this won't be patched before 3.2 so not a high priority right now. I'll assign it to me so it doesn't get lost and give you an answer once 3.1 final has shipped.\n", "created_at": "2011-07-05 19:42:56", "user": 6321, "id": 1506645}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1506657", "text": "Awesome, thanks. Just wanted to make sure it didn't get lost.\n", "created_at": "2011-07-05 19:44:29", "user": 28668, "id": 1506657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399377", "text": "@pixeltrix ping.\n", "created_at": "2012-04-28 19:18:18", "user": 47848, "id": 5399377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399615", "text": "@pixeltrix was this eventually added to 3.2? @avk, are you still seeing this problem?\n", "created_at": "2012-04-28 19:49:36", "user": 27786, "id": 5399615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399624", "text": "@steveklabnik looking at it now - if it's not in then I'll add it today\n", "created_at": "2012-04-28 19:50:47", "user": 6321, "id": 5399624}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399756", "text": "Awesome, thanks. :heart:\n", "created_at": "2012-04-28 20:08:53", "user": 27786, "id": 5399756}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5400166", "text": "Just out of interest would it be preferable to reset to the initial session after a `process` with a session arg or leave it merged? e.g:\n\n``` ruby\nclass SomeControllerTest < ActionController::TestCase\n  setup do\n    session[:user_id] = 1\n  end\n\n  test \"some action\" do\n    get :some_action, { }, { :another_var => 2 }\n    # session == { \"user_id\" => 1, \"another_var\" => 2 }\n\n    get :some_action\n    # A: session == { \"user_id\" => 1 }\n    # B: session == { \"user_id\" => 1, \"another_var\" => 2 }\n  end\nend\n```\n\nWhich would be preferable - A or B. I can see arguments for both.\n", "created_at": "2012-04-28 20:58:39", "user": 6321, "id": 5400166}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5400199", "text": "Form me B if it is in the same test as you showed. But A if it is in different tests.\n", "created_at": "2012-04-28 21:02:40", "user": 47848, "id": 5400199}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5400243", "text": "The request instance is re-created in the test setup phase so that would always be the case. The B case is nice and easy so lets go with that :-)\n", "created_at": "2012-04-28 21:08:19", "user": 6321, "id": 5400243}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5402960", "text": "Sorry to have missed out on the conversation earlier today but glad to see my suggestion made it in. The B case makes sense to me too.\n", "created_at": "2012-04-29 06:12:52", "user": 28668, "id": 5402960}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When requiring javascript with the :debug => true option in development mode, the many small asset requests are unduly slowed down by the execution of the to_prepare block before each of them. It would be nice to not execute this block if a request is being handled by sprockets, to optimize loading of individual js files while retaining convenient class reloading for normal requests.\n", "labels": [], "number": 1530, "updated_at": "2011-07-26 03:04:16", "user": 1789, "closed_at": "2011-07-26 03:04:16", "id": 1017991, "title": "to_prepare block runs for every sprockets asset request", "url": "https://api.github.com/repos/rails/rails/issues/1530", "created_at": "2011-06-07 17:41:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1456054", "text": "I agree.  In particular, Mongoid will preload all models for every request if preload_models is set.  This drastically slows down development.\n", "created_at": "2011-06-28 14:55:38", "user": 143241, "id": 1456054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548093", "text": "Here's a gem that'll turn off `to_prepare` on each asset request: https://github.com/wavii/rails-dev-tweaks (also configurable for any other request you like).  Gives a good boost.\n", "created_at": "2011-07-11 17:17:18", "user": 41373, "id": 1548093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1651284", "text": "There is no way to_prepare callback can be disabled only for sprockets in a reliable way and avoiding side effects. This should be done at your own peril and not automatically by Rails. Honestly, Mongoid could do better than preloading all models on each request (it could be lazy, for instance).\n", "created_at": "2011-07-26 03:04:16", "user": 9582, "id": 1651284}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "With Rails 3.1.rc1, when an app is generated using `rails new test_app --skip-active-record`, there will be \"ThreadError: deadlock; recursive locking\" errors.\n\nI believe this is an issue similar to https://github.com/rack/rack/issues/168, which occurs when #close for the body is not called by any of the Rack middlewares.\n\nWhen `require \"active_record/railtie\"` is commented out in `application.rb`, none of the middlewares call #close, causing the errors.\n\nHowever, when it is un-commented, the ActiveRecord::ConnectionAdapters::ConnectionManagement middleware is used, which does call #close (e524609).\n\nThis also doesn't happen when `rails server` is used, because the Rails::Rack::ContentLength middleware is pushed to the stack, and #close is called by this middleware (6e5eedeb).\n", "labels": [], "number": 1531, "updated_at": "2011-09-01 10:30:37", "user": 16396, "closed_at": "2011-09-01 10:26:58", "id": 1019183, "title": "ThreadError when --skip-active-record is used", "url": "https://api.github.com/repos/rails/rails/issues/1531", "created_at": "2011-06-07 19:25:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636625", "text": "@jasoncheow is it happening for you with rails 3.1.rc4 ? \n", "created_at": "2011-07-23 06:18:10", "user": 3948, "id": 1636625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1640976", "text": "Yup, I can still reproduce this on Rails 3.1.0.rc4.\n", "created_at": "2011-07-24 14:51:56", "user": 16396, "id": 1640976}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1966772", "text": "Looks like this isn't a Rails issue after all. Fixed after upgrading to Pow 0.3.2.\n", "created_at": "2011-09-01 10:26:58", "user": 16396, "id": 1966772}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1966786", "text": "@jasoncheow thanks for checking and closing issue.\n", "created_at": "2011-09-01 10:30:37", "user": 3948, "id": 1966786}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've implemented a test and a fix in http://github.com/apeiros/rails/commit/c0f53b60c1366fa95400418cb8453847e0210ac7\n\nProblem description:\nString#blank? raises an ArgumentError when invoked on an invalidly encoded string\n\nExample:\n\"\\x80\".force_encoding('utf-8').blank? # !> ArgumentError: invalid byte sequence in UTF-8\n\nAssumptions:\n- String#blank? should never raise\n- An invalidly encoded string is not empty\n- A ruby that is encoding aware also provides String#valid_encoding?\n\nBugfix:\nsee http://github.com/apeiros/rails/commit/c0f53b60c1366fa95400418cb8453847e0210ac7\n", "labels": [], "number": 1532, "updated_at": "2011-06-08 08:44:36", "user": 10409, "closed_at": "2011-06-07 21:22:47", "id": 1019268, "title": "String#blank? raises an ArgumentError when invoked on invalidly encoded strings", "url": "https://api.github.com/repos/rails/rails/issues/1532", "created_at": "2011-06-07 19:32:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1321223", "text": "Have you benchmarked this? This method can be called quite often and I'm unsure what the performance impact may be.\n", "created_at": "2011-06-07 19:43:49", "user": 6321, "id": 1321223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1321330", "text": "pixeltrix, the difference on my machine is less than 1% (1e4 iterations, with ~7% stddev over 10 repetitions for both implementations, ruby1.9.2p180).\nAnd honestly, I prefer correct but slow methods over fast and broken ones. But if you've got an alternative implementation, please feel free to suggest it!\n", "created_at": "2011-06-07 19:49:40", "user": 10409, "id": 1321330}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322054", "text": "+1 for this patch.\n+1 for @apeiros's justification of correctness over performance.\n\nI just have one question about this:\n\n``` ruby\ndef blank?\n  valid_encoding? && self !~ /\\S/\nend\n```\n\nWith this implementation, `String`s have an invalid encoding are necessarily non blank. Is that always true? Can't a blank `String` have an invalid encoding?\n", "created_at": "2011-06-07 20:30:41", "user": 2480, "id": 1322054}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322545", "text": "+1 for patch\n", "created_at": "2011-06-07 21:06:06", "user": 12485, "id": 1322545}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322601", "text": "Roman2K, re \"Can't a blank String have an invalid encoding?\" - in order to have an invalid encoding, there must be data in the string. So we've got two possibilities:\na) the invalidly encoded part is not whitespace in another encoding\nb) the invalidly encoded part _is_ whitespace in another encoding\nIn case of a), the string is non-blank.\nIn case of b), the string interpreted in the given encoding is non-blank.\nSo yes, I'd argue that an invalidly encoded string is always non-blank.\n", "created_at": "2011-06-07 21:11:51", "user": 10409, "id": 1322601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322681", "text": "-1\nCode should raise exceptions in exceptional conditions. Trying to treat an invalid string as valid is such a condition and hiding the problem from the developer is wrong.\n", "created_at": "2011-06-07 21:22:33", "user": 294954, "id": 1322681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1322683", "text": "After having some discussion it's best not to apply this as if some data has invalid encoding then it will only raise an exception elsewhere as soon as it was used in a regexp - better to fail earlier.\n", "created_at": "2011-06-07 21:22:47", "user": 6321, "id": 1322683}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325084", "text": "I am for early raising. But I disagree on the view that an invalidly encoded string necessitates blank? to raise.\nCompare to the various core string methods that don't raise either.\nA string with data and encoding not matching up is not invalid. It just means that certain operations can not be applied to it. Blank is not one of those operations since blank? does not need encoding and data of the string to match up in order to work.\nBlank? is also not in the position to know whether the encoding/data mismatch is intentional or accidental. It's not its duty to raise.\n\nBut that disagreement aside: if you insist on String#blank? raising, it is my opinion that at the very least this should be reflected by the tests as to establish it as expected behaviour. I think documenting the fact would be a good idea too.\n", "created_at": "2011-06-08 07:34:23", "user": 10409, "id": 1325084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325114", "text": "+1 for @apeiros's justification and suggestion for adding the tests\n", "created_at": "2011-06-08 07:39:18", "user": 11270, "id": 1325114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325136", "text": "@pixeltrix: So what if the exception is raised elsewhere? It will be raised if it needs to be raised, namely when an operation cannot be performed due to the data and declared encoding not matching, and only then.\n\nLike @apeiros said, it's not abnormal for a string to be invalidly encoded, otherwise the `String` class would not allow it. It's just a case that may be dealt with at some point if possible (unfortunately, sometimes it's too late to know the correct encoding).\n", "created_at": "2011-06-08 07:45:17", "user": 2480, "id": 1325136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325369", "text": "The exception will be raised wherever the string is used to match against a regexp, including places where it's not possible to carry on because you need the operation to work like pluralize. I'm also against adding tests and documentation - blank? isn't doing the raising, it's Regexp so we'd have to add tests and documentation everywhere in rails where we use Regexp (e.g. using invalidly-encoded string in a route helper will raise an error).\n", "created_at": "2011-06-08 08:44:36", "user": 6321, "id": 1325369}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1533, "updated_at": "2014-07-03 04:48:53", "user": 81225, "closed_at": "2011-06-07 21:46:46", "id": 1020476, "title": "Fix typo", "url": "https://api.github.com/repos/rails/rails/issues/1533", "created_at": "2011-06-07 21:35:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "<pre>\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-404f2f167f9f/lib/rack/lock.rb:14:in `lock'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-404f2f167f9f/lib/rack/lock.rb:14:in `call'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-7d1782a2c150/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-7d1782a2c150/railties/lib/rails/engine.rb:438:in `call'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-7d1782a2c150/railties/lib/rails/rack/content_length.rb:16:in `call'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rails-7d1782a2c150/railties/lib/rails/rack/log_tailer.rb:14:in `call'\n    /home/bug/.rvm/gems/ruby-1.9.2-p180/bundler/gems/rack-404f2f167f9f/lib/rack/handler/webrick.rb:59:in `service'\n    /home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n    /home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n    /home/bug/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n</pre>\n\n\nIt comes to webrick console when there is some errors in stylesheet compilation (e.g. importing file that does not exists)\n", "labels": [], "number": 1534, "updated_at": "2011-10-13 10:24:34", "user": 108694, "closed_at": "2011-07-12 04:35:57", "id": 1021078, "title": "ERROR ThreadError: deadlock; recursive locking", "url": "https://api.github.com/repos/rails/rails/issues/1534", "created_at": "2011-06-07 23:49:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550774", "text": "Steps to reproduce this?\n", "created_at": "2011-07-11 23:02:05", "user": 52642, "id": 1550774}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1551966", "text": "Seems like already fixed.\n", "created_at": "2011-07-12 04:35:57", "user": 108694, "id": 1551966}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2074989", "text": "I'm still seeing this with the latest 3.1 release (the actual release, not an RC). Using ruby 1.9.2p136.\n\n~/.rvm/gems/ruby-1.9.2-p136/gems/rack-1.3.2/lib/rack/lock.rb:14:in `lock'\n~/.rvm/gems/ruby-1.9.2-p136/gems/rack-1.3.2/lib/rack/lock.rb:14:in`call'\n~/.rvm/gems/ruby-1.9.2-p136/gems/actionpack-3.1.0/lib/action_dispatch/middleware/static.rb:53:in `call'\n~/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.1.0/lib/rails/engine.rb:455:in`call'\n~/.rvm/gems/ruby-1.9.2-p136/gems/railties-3.1.0/lib/rails/railtie/configurable.rb:30:in `method_missing'\n", "created_at": "2011-09-12 20:27:26", "user": 1202, "id": 2074989}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2393266", "text": "Seeing this with Rails 3.1.0 on Pow, with ruby1.9.2p290. There is also a related Pow issue: https://github.com/37signals/pow/issues/191\n", "created_at": "2011-10-13 10:24:34", "user": 755, "id": 2393266}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1535, "updated_at": "2014-06-26 14:51:38", "user": 83449, "closed_at": "2011-06-08 06:13:19", "id": 1021277, "title": "Prefer 'each' over 'for in' syntax.", "url": "https://api.github.com/repos/rails/rails/issues/1535", "created_at": "2011-06-08 00:46:30", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For example, consider using this:\n\n```\nstylesheet_link_tag 'foo', 'bar', 'baz'\n```\n\nIt fails with:\n\n```\nActionView::Template::Error (undefined method `stringify_keys' for \"application\":String):\n    9: <head>\n    10: <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n    11: <title>Something</title>\n    12: <%= stylesheet_link_tag    \"foo\", \"bar\", \"baz\" %>\n    13: <%= javascript_include_tag \"application\" %>\n    14: <%= csrf_meta_tags %>\n    15: </head>\n  app/views/layouts/application.html.erb:12:in `_app_views_layouts_application_html_erb___956746531_2161457640'\n  app/controllers/thoughts_controller.rb:8:in `index'\n```\n\nI was able to track it down a bit more. When using sprockets, stylesheet_link_tag ends up calling:\n\n```\nsprockets_stylesheet_link_tag(*sources)\n```\n\nIf you look at sprockets_stylesheet_link_tag though, it's not really ready to take multiple sources:\n\n```\n  def sprockets_javascript_include_tag(source, options = {})\n    options = {\n      'type' => \"text/javascript\",\n      'src'  => asset_path(source, 'js')\n    }.merge(options.stringify_keys)\n\n    content_tag 'script', \"\", options\n  end\n```\n\nI'm not sure what the right thing should be, but it'll probably either be to loop over the sources given before calling sprockets_javascript_include_tag, or making sprockets_javascript_include_tag more friendly to multiple sources.\n", "labels": [], "number": 1536, "updated_at": "2011-06-08 06:25:59", "user": 159, "closed_at": "2011-06-08 06:25:59", "id": 1021384, "title": "stylesheet_link_tag raises error with multiple styelsheets in 3.1.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1536", "created_at": "2011-06-08 01:21:54", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324060", "text": "Just confirmed this in rc2 as well.\n", "created_at": "2011-06-08 02:12:34", "user": 159, "id": 1324060}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324066", "text": "@technicalpickles can you try (just for testing) with master?\n\nI think that is the same I change in db8eeaff06009deac2d34337942a8b8414dfd7ba and we can backport it to 3-1-stable\n", "created_at": "2011-06-08 02:13:53", "user": 160941, "id": 1324066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324254", "text": "Just confirmed that works, thanks!\n", "created_at": "2011-06-08 03:18:56", "user": 159, "id": 1324254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324259", "text": "@josevalim what do you think about backport db8eeaf to 3-1-stable?\n", "created_at": "2011-06-08 03:21:11", "user": 160941, "id": 1324259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324799", "text": "@guilleiguaran, yes. pull request pls?\n", "created_at": "2011-06-08 06:25:59", "user": 9582, "id": 1324799}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "```\nFinished in 0.729945 seconds.\n\n  1) Error:\ntest_fragment_caching(FunctionalFragmentCachingTest):\nActionView::Template::Error: Cannot modify SafeBuffer in place\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `slice!'\n    /home/cmeiklejohn/Repositories/rails/actionpack/lib/action_view/helpers/cache_helper.rb:54:in `fragment_for'\n--\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  2) Error:\ntest_fragment_caching_in_partials(FunctionalFragmentCachingTest):\nActionView::Template::Error: Cannot modify SafeBuffer in place\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `slice!'\n    /home/cmeiklejohn/Repositories/rails/actionpack/lib/action_view/helpers/cache_helper.rb:54:in `fragment_for'\n--\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  3) Error:\ntest_html_formatted_fragment_caching(FunctionalFragmentCachingTest):\nActionView::Template::Error: Cannot modify SafeBuffer in place\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `slice!'\n    /home/cmeiklejohn/Repositories/rails/actionpack/lib/action_view/helpers/cache_helper.rb:54:in `fragment_for'\n--\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n  4) Error:\ntest_render_inline_before_fragment_caching(FunctionalFragmentCachingTest):\nActionView::Template::Error: Cannot modify SafeBuffer in place\n    /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `slice!'\n    /home/cmeiklejohn/Repositories/rails/actionpack/lib/action_view/helpers/cache_helper.rb:54:in `fragment_for'\n```\n", "labels": [], "number": 1537, "updated_at": "2011-07-15 06:35:00", "user": 44939, "closed_at": "2011-06-08 05:58:33", "id": 1021406, "title": "rails safebuffer change causes fragment_for failures", "url": "https://api.github.com/repos/rails/rails/issues/1537", "created_at": "2011-06-08 01:28:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1323956", "text": "I'm seeing this on 3.0.8 and master.\n", "created_at": "2011-06-08 01:34:09", "user": 44939, "id": 1323956}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324327", "text": "I was experiencing a similar issue, coming from haml. I updated haml from 3.1.1 to 3.1.2 and that resolved my issue.\n", "created_at": "2011-06-08 03:44:56", "user": 118086, "id": 1324327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324731", "text": "Fixes pending merge in 3-1, master; merged in 3-0.\n", "created_at": "2011-06-08 05:58:33", "user": 44939, "id": 1324731}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1568835", "text": "I'm having almost the same problem with Rails 3.0.9. I use slim templates which might be part of the cause as execution reaches the else branch of\n\n```\n          if output_buffer.is_a?(ActionView::OutputBuffer)\n            safe_output_buffer = output_buffer.to_str\n            fragment = safe_output_buffer.slice!(pos..-1)\n            self.output_buffer = ActionView::OutputBuffer.new(safe_output_buffer)\n          else\n            fragment = output_buffer.slice!(pos..-1)\n          end\n```\n\nThis throws a `Cannot modify SafeBuffer in place`. A quick fix is to remove the exclamation mark that follows the latter slice. The has been changed in Rails 3.1 but it still looks like it would be affected by this.\n", "created_at": "2011-07-14 07:58:57", "user": 304943, "id": 1568835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572544", "text": "I think that:\n\n```\n  if output_buffer.is_a?(ActionView::OutputBuffer)\n```\n\nneeds to be changed to: \n\n```\n  if output_buffer.is_a?(ActiveSupport::SafeBuffer)\n```\n\nCan you test and see if that fixes it, if so, I'll reopen the issue and update the commits.\n", "created_at": "2011-07-14 15:45:02", "user": 44939, "id": 1572544}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572636", "text": "The fact that an object is an ActiveSupport::SafeBuffer does not guarantee that it's safe. You should use :\n\n```\noutput_buffer.html_safe?\n```\n", "created_at": "2011-07-14 15:57:22", "user": 9347, "id": 1572636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1577921", "text": "I fixed this in https://github.com/rails/rails/pull/2080\n", "created_at": "2011-07-15 06:35:00", "user": 304943, "id": 1577921}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "on updating my app to 3.1.0.rc2, on any generators I receved this error. Follow:\n\n/Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:237:in `require': /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/sprockets-2.0.0.beta.10/lib/sprockets/context.rb:93: invalid multibyte escape: /\\A(\\xEF\\xBB\\xBF|\\xFE\\xFF|\\xFF\\xFE)/ (SyntaxError)\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:237:in`block in require'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:223:in `block in load_dependency'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:639:in`new_constants_in'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:223:in `load_dependency'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/dependencies.rb:237:in`require'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/sprockets-2.0.0.beta.10/lib/sprockets/environment.rb:2:in `<top (required)>'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/actionpack-3.1.0.rc2/lib/sprockets/railtie.rb:53:in`asset_environment'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/railtie/configurable.rb:30:in `method_missing'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/actionpack-3.1.0.rc2/lib/sprockets/railtie.rb:29:in`block in class:Railtie'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/lazy_load_hooks.rb:34:in `call'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/lazy_load_hooks.rb:34:in`execute_hook'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/lazy_load_hooks.rb:43:in `block in run_load_hooks'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/lazy_load_hooks.rb:42:in`each'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/activesupport-3.1.0.rc2/lib/active_support/lazy_load_hooks.rb:42:in `run_load_hooks'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:56:in`block in module:Finisher'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/initializable.rb:25:in `instance_exec'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/initializable.rb:25:in`run'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/initializable.rb:49:in`each'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/initializable.rb:49:in `run_initializers'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/application.rb:96:in`initialize!'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/railtie/configurable.rb:30:in `method_missing'\n    from /Users/weldyss/Sites/my_projects/myproject/config/environment.rb:5:in`<top (required)>'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/application.rb:78:in `require'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/application.rb:78:in`require_environment!'\n    from /Users/weldyss/.rvm/gems/ruby-1.9.2-p180@myproject/gems/railties-3.1.0.rc2/lib/rails/commands.rb:22:in `<top (required)>'\n    from script/rails:6:in`require'\n    from script/rails:6:in `<main>'\n", "labels": [], "number": 1538, "updated_at": "2011-06-08 06:03:39", "user": 1395, "closed_at": "2011-06-08 06:03:39", "id": 1021572, "title": "\"invalid multibyte escape:\" on Rails 3.1.0.rc2", "url": "https://api.github.com/repos/rails/rails/issues/1538", "created_at": "2011-06-08 02:30:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324746", "text": "If you're running ruby with -Ku then there's a bug in sprockets.beta.10 that's fixed in master. To fix it for the moment add the following to your application Gemfile:\n\n```\ngem 'sprockets', :git => 'git://github.com/sstephenson/sprockets.git'\n```\n\nThis will be fixed before 3.1 final release.\n", "created_at": "2011-06-08 06:03:39", "user": 6321, "id": 1324746}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix for #1537.\n\nEnsure that we can operate directly on the output buffer, and not the safe buffer as it prevents certain operations.\n\nLet me know if there's a more elegant way to approach this, or if there's something you'd like to see changed.  This addresses test failures on 3.0.8 and master in actionpack/test/controller/caching_test.rb.\n", "labels": [], "number": 1539, "updated_at": "2014-07-03 03:09:01", "user": 44939, "closed_at": "2011-06-08 03:25:19", "id": 1021592, "title": "Fragment caching needs to operate on the pure output, not the safebuffer.", "url": "https://api.github.com/repos/rails/rails/issues/1539", "created_at": "2011-06-08 02:39:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324396", "text": "@cmeiklejohn  Can you send a pull request for 3-0-stable. I think this required also. \n\nI ran this with 3-0-stable and getting one test fail \n\n<pre>\n  1) Failure:\ntest_xml_formatted_fragment_caching(FunctionalFragmentCachingTest)\n    [test/controller/caching_test.rb:783:in `test_xml_formatted_fragment_caching'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:434:in `_run_setup_callbacks'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<\"<body>\\n  <p>Builder</p>\\n</body>\\n\"> expected but was\n<\"<body>\\n</body>\\n\">.\n\n</pre>\n\n", "created_at": "2011-06-08 04:03:52", "user": 3948, "id": 1324396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324397", "text": "No, I think this is a separate issue with test_xml_formatted_fragment_caching.  I'm looking at it now.\n", "created_at": "2011-06-08 04:04:23", "user": 44939, "id": 1324397}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324403", "text": "Thanks. I was cheery-picking your changes in 3-0-stable but got conflicts. So may be you can open a pull request with full changes :-)\n", "created_at": "2011-06-08 04:05:55", "user": 3948, "id": 1324403}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324405", "text": "Will do.\n", "created_at": "2011-06-08 04:06:23", "user": 44939, "id": 1324405}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Imagine some codes like this:\n\n```\n<%= simple_format \"zomg\" %>\n```\n\nThis fails with:\n\n```\nCannot modify SafeBuffer in place\nactivesupport (3.1.0.rc2) lib/active_support/core_ext/string/output_safety.rb:121:in `gsub!'\nactionpack (3.1.0.rc2) lib/action_view/helpers/text_helper.rb:261:in `simple_format'\n```\n\nI also checked the tests for in the v3.1.0.rc2 tag for simple_format, and they seem to be failing with similar errors:\n\n```\n7) Error:\ntest_simple_format(TextHelperTest):\nTypeError: Cannot modify SafeBuffer in place\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `gsub!'\n/Users/technicalpickles/code/vendor/rails/actionpack/lib/action_view/helpers/text_helper.rb:261:in `simple_format'\n/Users/technicalpickles/code/vendor/rails/actionpack/test/template/text_helper_test.rb:27:in `test_simple_format'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/callbacks.rb:426:in `_run_setup_callbacks'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/technicalpickles/code/vendor/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n```\n", "labels": ["actionpack"], "number": 1540, "updated_at": "2011-06-08 12:46:19", "user": 159, "closed_at": "2011-06-08 06:45:15", "id": 1021612, "title": "simple_format fails with `Cannot modify SafeBuffer in place` in 3.1.0.rc2", "url": "https://api.github.com/repos/rails/rails/issues/1540", "created_at": "2011-06-08 02:48:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324382", "text": "The patch has been submitted in #1542. We're currently verify the patch.\n", "created_at": "2011-06-08 03:58:54", "user": 4912, "id": 1324382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324857", "text": "This has been resolved in [509aa663601defc7c821] in `3-1-master` branch.\n\nAlso, it has been fixed in [ef8b12a29e27ea015477] for `master`\n", "created_at": "2011-06-08 06:45:15", "user": 4912, "id": 1324857}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326387", "text": "Confirmed it working on master, thanks!\n", "created_at": "2011-06-08 12:46:19", "user": 159, "id": 1326387}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixed for SafeBuffer. Was throwing errors. Cannot modify SafeBuffer in place\n\nCaching test are still failing don't know why response.body coming like this.\n\n<pre>\n  1) Failure:\ntest_fragment_caching(FunctionalFragmentCachingTest)\n    [/Users/arun/checkouts/rails/actionpack/test/controller/caching_test.rb:741:in `test_fragment_caching'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:434:in `_run_setup_callbacks'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<\"Hello\\nThis bit's fragment cached\\n\"> expected but was\n<\"Hello\\nThis bit's fragment cachedThis bit's fragment cached\\n\">.\n\n  2) Failure:\ntest_html_formatted_fragment_caching(FunctionalFragmentCachingTest)\n    [/Users/arun/checkouts/rails/actionpack/test/controller/caching_test.rb:773:in `test_html_formatted_fragment_caching'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:434:in `_run_setup_callbacks'\n     /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<\"<body>\\n<p>ERB</p>\\n</body>\\n\"> expected but was\n<\"<body>\\n<p>ERB</p><p>ERB</p>\\n</body>\\n\">.\n\n</pre>\n", "labels": [], "number": 1541, "updated_at": "2014-06-14 01:51:14", "user": 3948, "closed_at": "2011-06-08 03:25:59", "id": 1021645, "title": "Fixed for SafeBuffer ", "url": "https://api.github.com/repos/rails/rails/issues/1541", "created_at": "2011-06-08 03:05:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324221", "text": "I've fixed this here: https://github.com/rails/rails/pull/1539\n\nYou need to slice out the content that's going into the fragment for the tests to pass.\n", "created_at": "2011-06-08 03:08:41", "user": 44939, "id": 1324221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324252", "text": "@cmeiklejohn  you bet!\n", "created_at": "2011-06-08 03:17:20", "user": 3948, "id": 1324252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329029", "text": "Ow, I haven't noticed. That's cool.\nI will wait for 3.0.9\n", "created_at": "2011-06-08 19:01:27", "user": 7714, "id": 1329029}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix for #1540.  \n\nDon't operate directly on the SafeBuffer.\n", "labels": [], "number": 1542, "updated_at": "2014-06-14 17:34:08", "user": 44939, "closed_at": "2011-06-08 06:32:16", "id": 1021651, "title": "Don't operate on the safebuffer, operate on a string and convert.", "url": "https://api.github.com/repos/rails/rails/issues/1542", "created_at": "2011-06-08 03:09:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324276", "text": "This addresses failing tests in:\n\nactionpack/lib/action_view/helpers/text_helper.rb\n", "created_at": "2011-06-08 03:27:18", "user": 44939, "id": 1324276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324794", "text": "Already fixed in master.\n", "created_at": "2011-06-08 06:23:25", "user": 9582, "id": 1324794}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This makes test/template/url_helper_test.rb  happy.\n\nAlready in 3-0-stable. \n", "labels": [], "number": 1543, "updated_at": "2014-06-29 03:12:53", "user": 3948, "closed_at": "2011-06-08 06:21:07", "id": 1021688, "title": "Fixed mailto for SafeBuffer#gsub already in 3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1543", "created_at": "2011-06-08 03:37:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324333", "text": "Why does this need to fix the test too?\n", "created_at": "2011-06-08 03:45:55", "user": 4912, "id": 1324333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324367", "text": "This is correct, test prior to SafeBuffer commit was encoding escaped string:\n\n```\n<a href=\\\"mailto:me@domain.com\\\">My email<\\/a>\n```\n\nNow it's encoding:\n\n```\n<a href=\"mailto:me@domain.com\">My email</a>\n```\n", "created_at": "2011-06-08 03:57:09", "user": 44939, "id": 1324367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324502", "text": "I'm sorry if I'm being a little dense but I don't actually see the problem this is intent on fixing?\n", "created_at": "2011-06-08 04:33:56", "user": 197, "id": 1324502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324513", "text": "This fixes the 3 failing tests in test/template/url_helper_test.rb\n", "created_at": "2011-06-08 04:37:40", "user": 44939, "id": 1324513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324536", "text": "<pre>\n  3) Error:\ntest_mail_to_with_replace_options(UrlHelperTest):\nTypeError: Cannot modify SafeBuffer in place\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:121:in `gsub!'\n    /Users/arun/checkouts/rails/actionpack/lib/action_view/helpers/url_helper.rb:501:in `mail_to'\n    test/template/url_helper_test.rb:401:in `test_mail_to_with_replace_options'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/arun/checkouts/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run'\n\n</pre>\n\n", "created_at": "2011-06-08 04:41:58", "user": 3948, "id": 1324536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324561", "text": "Why do the assertions change though?  The output shouldn't differ just to support this change?  it should be identical right?  The \\\" is actually important.\n", "created_at": "2011-06-08 04:46:20", "user": 197, "id": 1324561}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324710", "text": "I don't think that's a fix if you have to change the test.\n", "created_at": "2011-06-08 05:52:21", "user": 4912, "id": 1324710}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324718", "text": "@NZKoz I think then we need to look for code again. Trying to fix it again. \n", "created_at": "2011-06-08 05:55:55", "user": 3948, "id": 1324718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324729", "text": "I've already fixed it in #1546.\n", "created_at": "2011-06-08 05:58:01", "user": 4912, "id": 1324729}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324788", "text": "@sikachu  Works well for me. Can you please take care for  3-0-stable branch. These changes required there also.\n\nClosing this.!\n\nCheers, \nArun\n", "created_at": "2011-06-08 06:21:07", "user": 3948, "id": 1324788}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Builder's output buffer is a String, not a OutputBuffer.  Make fragment_for smart enough to handle either.  \n\n@tenderlove is there a better way we should be handling this?\n\nAddresses failing test:\n\n```\nLoaded suite test/controller/caching_test\nStarted\n......................................F.........................\nFinished in 1.059313 seconds.\n\n  1) Failure:\ntest_xml_formatted_fragment_caching(FunctionalFragmentCachingTest)\n    [test/controller/caching_test.rb:784:in `test_xml_formatted_fragment_caching'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/callbacks.rb:426:in `_run_setup_callbacks'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n     /home/cmeiklejohn/Repositories/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n<\"<body>\\n  <p>Builder</p>\\n</body>\\n\"> expected but was\n<\"<body>\\n</body>\\n\">.\n```\n", "labels": [], "number": 1544, "updated_at": "2014-07-03 04:49:22", "user": 44939, "closed_at": "2011-06-08 06:42:32", "id": 1021959, "title": "Failing fragment_for test with Builder", "url": "https://api.github.com/repos/rails/rails/issues/1544", "created_at": "2011-06-08 05:16:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1324841", "text": "Thank you for sending one it. However, I ported the one that I fixed from `3-1-stable` instead so it stays consistence along the code base. It has been fixed in `master`\n\nI owe you one. :)\n", "created_at": "2011-06-08 06:42:32", "user": 4912, "id": 1324841}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adapt [059692a74692917cf1d6bbe4fafe19211f363fe2] to make sure we perform correct cloning before manipulation on `OutputBuffer`.\n\nThis has been adapted from [823aa223efbac6ad4d31ea33402892267bb77cb4]. However, after the fragment rendering, `Builder` returns the `String` object instead of `ActionView::OutputBuffer`. Somehow the same procedure which was in [823aa223efbac6ad4d31ea33402892267bb77cb4] does not play nice with the String, and result in the fragment got lost.\n", "labels": [], "number": 1545, "updated_at": "2014-06-18 06:38:48", "user": 4912, "closed_at": "2011-06-08 05:36:17", "id": 1021964, "title": "Fix test on 3-0-stable regarding SafeBuffer", "url": "https://api.github.com/repos/rails/rails/issues/1545", "created_at": "2011-06-08 05:19:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This contain fixes, with some cherry-picking from master and some backport from 3-0-stable. All the test passed.\n", "labels": [], "number": 1546, "updated_at": "2014-06-17 15:05:20", "user": 4912, "closed_at": "2011-06-08 06:19:53", "id": 1022041, "title": "Fix failing ActionPack tests on 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1546", "created_at": "2011-06-08 05:54:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This contain fixes, with some cherry-picking from master and some backport from 3-1-stable. All the test passed.\n", "labels": [], "number": 1547, "updated_at": "2014-06-26 18:55:04", "user": 4912, "closed_at": "2011-06-08 06:40:00", "id": 1022124, "title": "Fix ActionPack tests on `master`", "url": "https://api.github.com/repos/rails/rails/issues/1547", "created_at": "2011-06-08 06:34:56", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1548, "updated_at": "2014-06-26 18:55:08", "user": 6399, "closed_at": "2011-06-08 07:30:21", "id": 1022184, "title": "remove unused class from test", "url": "https://api.github.com/repos/rails/rails/issues/1548", "created_at": "2011-06-08 06:56:51", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "that is actually being called\n", "labels": [], "number": 1549, "updated_at": "2014-06-26 18:55:10", "user": 6399, "closed_at": "2011-06-08 07:42:08", "id": 1022252, "title": "test name should reflect the name of the method", "url": "https://api.github.com/repos/rails/rails/issues/1549", "created_at": "2011-06-08 07:18:46", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As a result test was failing on Oracle where ids are assigned by default from 1000\n", "labels": [], "number": 1550, "updated_at": "2014-07-03 04:49:39", "user": 4736, "closed_at": "2011-06-08 09:14:05", "id": 1022673, "title": "Do not hardcode :id as it was ignored by mass assignment filter", "url": "https://api.github.com/repos/rails/rails/issues/1550", "created_at": "2011-06-08 08:57:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325505", "text": "Discussed with jonleighton that this patch should be cherry-picked also in 3-1-stable branch.\n", "created_at": "2011-06-08 09:18:25", "user": 4736, "id": 1325505}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325512", "text": "Totally, just did it.\n", "created_at": "2011-06-08 09:19:16", "user": 3387, "id": 1325512}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Having updated rails from 2.3.11 to 2.3.12 our app (which uses bundler) now fails to boot:\n\n```\n$ rake --trace\n(in /Users/fractious/application)\nrake aborted!\nuninitialized constant RDoc\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2503:in `const_missing'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/documentation.rake:3\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:1882:in `in_namespace'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:910:in `namespace'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/documentation.rake:1\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/rails.rb:4:in `load'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/rails.rb:4\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/rails.rb:4:in `each'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@application/gems/rails-2.3.12/lib/tasks/rails.rb:4\n/Users/fractious/application/Rakefile:10:in `require'\n/Users/fractious/application/Rakefile:10\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2383:in `load'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2383:in `raw_load_rakefile'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2017:in `load_rakefile'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2016:in `load_rakefile'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2000:in `run'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:2068:in `standard_exception_handling'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/lib/rake.rb:1998:in `run'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/gems/rake-0.8.7/bin/rake:31\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/bin/rake:19:in `load'\n/Users/fractious/.rvm/gems/ree-1.8.7-2011.03@global/bin/rake:19\n\n$ cat Rakefile\n# Add your own tasks in files placed in lib/tasks ending in .rake,\n# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.\n\nrequire(File.join(File.dirname(__FILE__), 'config', 'boot'))\n\nrequire 'rake'\nrequire 'rake/testtask'\nrequire 'rake/rdoctask'\n\nrequire 'tasks/rails'\n\n# delayed_job tasks\nbegin\n  require 'delayed/tasks'\nrescue LoadError\n  STDERR.puts \"Run `rake gems:install` to install delayed_job\"\nend\n```\n\nIt looks like it might be [this commit ](https://github.com/rails/rails/commit/79aa54d0c781ea518e09d62c48e70d2d5619fe33#railties/lib/tasks/documentation.rake) that has caused the breakage.\n\nI figured there might now be a unspecified dependency on the `rdoc` gem but specifying it in our GemFile doesn't help.\n\n```\n$ gem list\n\n*** LOCAL GEMS ***\n\naasm (2.2.0)\nabstract (1.0.0)\nactionmailer (2.3.12, 2.3.11)\nactionpack (2.3.12, 2.3.11)\nactiverecord (2.3.12, 2.3.11)\nactiveresource (2.3.12, 2.3.11)\nactivesupport (2.3.12, 2.3.11)\nansi (1.2.5)\nattribute_normalizer (1.0.0.pre3, 0.3.1)\nauthlogic (2.1.1)\nautotest-fsevent (0.2.5)\nautotest-rails (4.1.0)\nawesome_print (0.4.0)\naws-s3 (0.6.2)\nbuilder (3.0.0)\nbundler (1.0.14)\nchronic (0.2.3)\ncompass (0.10.2)\ndaemon_controller (0.2.6)\ndaemons (1.0.10)\ndelayed_job (2.0.7)\ndelorean (0.1.1)\nerubis (2.6.5)\nfactory_girl (1.2.3)\nfaker (0.3.1)\nfastthread (1.0.7)\nhaml (3.0.10)\nhoe (2.3.3)\nhookup (1.0.3)\nhoptoad_notifier (2.4.2)\ni18n (0.4.1)\njson_pure (1.5.1)\nmail_safe (0.2.0)\nmetaid (1.0)\nmime-types (1.16)\nmocha (0.9.8)\nmultipart-post (1.1.2)\nmysql (2.8.1)\nnewrelic_rpm (3.0.1)\nnokogiri (1.3.3)\npassenger (3.0.7)\nrack (1.1.2)\nrack-test (0.6.0)\nrails (2.3.12, 2.3.11)\nrainbow (1.1.1)\nrake (0.8.7)\nRedCloth (4.2.3)\nredgreen (1.2.2)\nroleful (0.0.4)\nrubyforge (2.0.4)\nshoulda (2.10.2)\nsinatra (1.2.6)\nsprockets (1.0.2)\nsys-uname (0.8.5)\ntilt (1.3.2)\ntrollop (1.16.2)\nweb_translate_it (1.8.1.0, 1.8.0.1, 1.7.3.0)\nwebrat (0.7.1)\nxml-simple (1.0.16)\nZenTest (4.4.0)\n```\n\nGenerating a fresh rails 2.3.12 application using this gemset also results in the same exception being thrown.\n", "labels": [], "number": 1551, "updated_at": "2014-04-02 03:54:40", "user": 5934, "closed_at": "2012-03-31 17:03:19", "id": 1022927, "title": "Rails 2.3.12 throws uninitialized constant RDoc (NameError) on boot", "url": "https://api.github.com/repos/rails/rails/issues/1551", "created_at": "2011-06-08 09:36:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325604", "text": "On further investigation it appears that even though the [rails gem specifies a dependency on rake >= 0.8.3](https://github.com/rails/rails/blob/v2.3.12/railties/Rakefile#L315) it is incompatible with v0.8.7. Updating to rake v0.9.2 fixes this issue. I'll investigate further to find the minimum version of rake needed.\n", "created_at": "2011-06-08 09:40:38", "user": 5934, "id": 1325604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1325660", "text": "So it appears that rake >= 0.9.0 is a requirement for rails 2.3.12.\n", "created_at": "2011-06-08 09:57:57", "user": 5934, "id": 1325660}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327652", "text": "@fractious can you try installing the latest RDoc gem too?  I think it might clear up the problem.\n", "created_at": "2011-06-08 15:46:18", "user": 3124, "id": 1327652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327911", "text": "Hey @tenderlove I did mention that above; I tried installing the latest RDoc but that didn't help.\n", "created_at": "2011-06-08 16:18:51", "user": 5934, "id": 1327911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327969", "text": "Ah, yes.  This is a problem with rake.  Unfortunately you will need to use 0.9.2.  :-(\n\nI think 0.9.0 is the minimum, but I'm not sure.\n", "created_at": "2011-06-08 16:27:26", "user": 3124, "id": 1327969}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328021", "text": "@tenderlove yeah 0.9.0 does appear to be the minimum. The [rails gem spec does specify >= 0.8.3](https://github.com/rails/rails/blob/v2.3.12/railties/Rakefile#L315) though, so I guess that needs updating.\n\nI'd post a patch but I'm not set up for testing rails and it's only a one-liner so figured someone on core could easily make the change.\n", "created_at": "2011-06-08 16:35:34", "user": 5934, "id": 1328021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328460", "text": "I ran into the same problem.  Upgrading to rake 0.9.2 alone didn't do it.  I had to add rdoc to my Gemfile, too.\n", "created_at": "2011-06-08 17:46:23", "user": 26245, "id": 1328460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328621", "text": "I was able to work around this by changing\n\nrequire 'rake/rdoctask' => require 'rdoc/task'\n\nin my rake file\n", "created_at": "2011-06-08 18:08:51", "user": 11577, "id": 1328621}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332104", "text": "I think the only real thing you need to do is add \"rdoc\" to your gemfile\nBut it makes sense to change your Rakefile to use the new \"rdoc/task\".\n\nBut here is my diff.\n\n```\n--- a/Gemfile\n+++ b/Gemfile\n@@ -1,6 +1,6 @@\n-gem \"rails\", \"2.3.11\"\n+gem \"rails\", \"2.3.12\"\n gem \"mysql\"\n+# required for rails 2.3.12 to work\n+gem \"rdoc\"\n+\n\n--- a/Rakefile\n+++ b/Rakefile\n require 'rake'\n require 'rake/testtask'\n-require 'rake/rdoctask'\n+require 'rdoc/task'\n```\n", "created_at": "2011-06-09 06:04:24", "user": 8659, "id": 1332104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360748", "text": "Rails 2.3.12 works fine with Rake 0.8.7 after applying the changes posted by @matthewrudy.\n", "created_at": "2011-06-13 18:14:54", "user": 2944, "id": 1360748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1384639", "text": "The @matthewrudy method worked for me too using rails 2.3.12 and rake 0.8.7.  Unfortunately in my environment, upgrading to rake 0.9.2 isn't an option because passenger 3.0.7 breaks when using it.\n", "created_at": "2011-06-16 22:00:07", "user": 317609, "id": 1384639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1453665", "text": "+1 for solution by @matthewrudy. Works for me also that way\n", "created_at": "2011-06-28 10:23:56", "user": 19897, "id": 1453665}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1508190", "text": "This also worked for my project, thanks!\n", "created_at": "2011-07-05 23:09:25", "user": 30469, "id": 1508190}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1556015", "text": "+1 for solution by @matthewrudy.\n", "created_at": "2011-07-12 17:21:35", "user": 160485, "id": 1556015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1567231", "text": "+1 for solution by @matthewrudy it also worked for me\n", "created_at": "2011-07-14 00:14:43", "user": 49194, "id": 1567231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2041186", "text": "that solution didn't work for me\n\n#Gemfile\ngem \"rails\", \"2.3.12\" \ngem \"rdoc\"\ngem \"rake\", \"0.8.7\"\n\n#Rakefile\nrequire 'rake'\nrequire 'rake/testtask'\nrequire 'tasks/rails'\nrequire 'rdoc/task'\n", "created_at": "2011-09-08 15:56:41", "user": 57855, "id": 2041186}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2042991", "text": "try to remove the last line from your Gemfile....\n", "created_at": "2011-09-08 18:29:56", "user": 160485, "id": 2042991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2043766", "text": "[21:36:48]kevin[ndthub]$ rake -T\nrake aborted!\nuninitialized constant RDoc\n\n(See full trace by running task with --trace)\n[21:36:56]kevin[ndthub]$ rake --trace\nrake aborted!\nuninitialized constant RDoc\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/ext/module.rb:36:in `const_missing'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/documentation.rake:3\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/task_manager.rb:207:in`in_namespace'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/dsl_definition.rb:95:in `namespace'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/documentation.rake:1\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/rails.rb:4:in`load'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/rails.rb:4\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/rails.rb:4:in `each'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/gems/rails-2.3.12/lib/tasks/rails.rb:4\n/Users/kevin/projects/ndthub/Rakefile:8:in`require'\n/Users/kevin/projects/ndthub/Rakefile:8\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in `load'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in`load_rakefile'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:495:in `raw_load_rakefile'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:78:in`load_rakefile'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:77:in`load_rakefile'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:61:in `run'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:129:in`standard_exception_handling'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@global/gems/rake-0.9.2/bin/rake:32\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/bin/rake:19:in`load'\n/Users/kevin/.rvm/gems/ruby-1.8.7-p352@rails2/bin/rake:19\n", "created_at": "2011-09-08 19:40:26", "user": 57855, "id": 2043766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2051685", "text": "the last 2 lines of my Rakefile were the wrong way around. now the solution by @matthewrudy works for me\n\n#Rakefile\nrequire(File.join(File.dirname(**FILE**), 'config', 'boot'))\nrequire 'rake'\nrequire 'rake/testtask'\nrequire 'rdoc/task'\nrequire 'tasks/rails'\n", "created_at": "2011-09-09 14:26:32", "user": 57855, "id": 2051685}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4859825", "text": "So I guess we can close this issue. Thanks for sharing the solution.\n", "created_at": "2012-03-31 17:03:19", "user": 47848, "id": 4859825}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "There is very good work around for deselected check box in [FormHelper#check_box](http://api.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-check_box).  \n\nI think it's good idea to use same work around for `select[multiple]` that have the same problem:\n\nServer do not receive any value when all options got deselected. \n\nSo we will generate hidden input with the same name and blank value before each multiple select.\n", "labels": [], "number": 1552, "updated_at": "2014-06-14 15:17:04", "user": 122436, "closed_at": "2011-06-11 15:21:30", "id": 1023050, "title": "Fixing select[multiple] html specification problem.", "url": "https://api.github.com/repos/rails/rails/issues/1552", "created_at": "2011-06-08 10:09:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/14461702", "text": "> The case when something is selected: Are you sure?\n\nI am sure, I am also seeing this, and its actually kind of annoying. I'd rather not have to clean up params in my controller because of Rails magic silently adding things. I am not even using this for updating a model, but I do use it when trying to query against a list of users belonging to different organizations. This is what comes over when you have one or more selected:\n\n`\"organization_ids\"=>[\"\", \"66284513\", \"676685643\"]`\n\nWhile I would prefer not to have the hidden field generated at all, is there anyway we could throw an option to not have the hidden field generate?\n", "created_at": "2013-03-05 20:00:02", "user": 20238, "id": 14461702}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15216849", "text": "same problem here\n", "created_at": "2013-03-21 02:56:45", "user": 542860, "id": 15216849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/43558912", "text": "There, same problem too\n", "created_at": "2014-05-19 21:13:12", "user": 1112804, "id": 43558912}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After this commit: https://github.com/rails/rails/commit/53a2c0baf2b128dd4808eca313256f6f4bb8c4cd\n(in rails 3-0-stable branch and present in rails 3.0.8)\n`javascript_escape` connected with rendering template  is not working correctly.\n\n``` ruby\n<%= escape_javascript(render(\"partial\")) %>\n```\n\nPartial content:\n\n```\n<span> Topics </span>\n```\n\nResults:\nrails 3.0.8:\n\n```\n\"<span> Topics span>\"\n```\n\nrails 3.0.7:\n\n```\n\"<span> Topics <\\\\/span>\\\\n\"\n```\n\nYou can play with this bug using sample app: https://github.com/morgoth/escape_javascript_bug\n", "labels": [], "number": 1553, "updated_at": "2013-05-13 16:33:17", "user": 10766, "closed_at": "2011-06-08 15:03:26", "id": 1023122, "title": "Broken escape_javascript after SafeBuffer modifications in rails 3.0.8", "url": "https://api.github.com/repos/rails/rails/issues/1553", "created_at": "2011-06-08 10:25:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326039", "text": "related to https://github.com/rails/rails/issues/1555\n", "created_at": "2011-06-08 11:32:20", "user": 10766, "id": 1326039}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326169", "text": "escape_javascript needs to be fixed to not use $1.\n", "created_at": "2011-06-08 12:02:57", "user": 9582, "id": 1326169}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326182", "text": "Same problem here\n", "created_at": "2011-06-08 12:05:41", "user": 264848, "id": 1326182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326196", "text": "@josevalim that's what we're doing as a monkey-patch to get by for now, however it means gsub's behaviour remains changed from ruby core doc.. not too comfortable with that. I'm trying to find a good fix to suggest on 1555.\n", "created_at": "2011-06-08 12:09:31", "user": 16432, "id": 1326196}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326218", "text": "@tardate I don't think we can leave gsub intact. If it cannot work as in core, we will probably remove it straight away. that's why I suggest to change escape_javascript to fix the issue differently. :)\n", "created_at": "2011-06-08 12:13:05", "user": 9582, "id": 1326218}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326516", "text": "As a quick workaround you can write an initializer monkey-patching escape_javascript:\n\n``` ruby\nmodule ActionView::Helpers::JavaScriptHelper\n  def escape_javascript_with_workaround(javascript)\n    escape_javascript_without_workaround(javascript.try(:to_str)).html_safe\n  end\n\n  alias_method_chain :escape_javascript, :workaround\nend\n```\n", "created_at": "2011-06-08 13:08:35", "user": 11974, "id": 1326516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326921", "text": "same issue on 3.1.0.rc2 \n", "created_at": "2011-06-08 14:14:58", "user": 99309, "id": 1326921}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327299", "text": "Fixed on #1558.\n", "created_at": "2011-06-08 15:03:26", "user": 9582, "id": 1327299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1438991", "text": "Hi. I'm just starting wiht rails 3.0.8. and I came across with the same problem ... Starpeak where should I put that monkey-patching escape_javascript  ? Thanks for your help and Keep on the good work guys ! Amazing chages from Rails 1 to now . Rails is getting better and better :) \n", "created_at": "2011-06-25 19:49:15", "user": 875776, "id": 1438991}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1439079", "text": "I've update to the 3.0.9 version :) Wroking perfect  :)\n", "created_at": "2011-06-25 20:21:05", "user": 875776, "id": 1439079}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fix for Oracle adapter to count SELECT queries for assert_queries assertion\n\nNeeded just in 3-0-stable branch, query counting is refactored in 3-1-stable and master branches and do not need this patch anymore.\n", "labels": [], "number": 1554, "updated_at": "2014-07-03 04:49:52", "user": 4736, "closed_at": "2011-06-08 11:40:18", "id": 1023128, "title": "Assert queries oracle fix for 3 0", "url": "https://api.github.com/repos/rails/rails/issues/1554", "created_at": "2011-06-08 10:27:20", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "commit 53a2c0baf2b128dd4808eca313256f6f4bb8c4cd introduced a change to ensure gsub returns an unsafe string.\n\nWhen gsub is used in block form, variables such as $1, $2, $`, $&, and $’ will be set appropriately. Now it seems that SafeBuffer's intervention loses the context and these variables are no longer available in the block. \n\nThis is the simplest test I can make to demonstrate the issue (which currently fails on 3.0-stable)...\n\n```\nclass SafeBufferTest < ActiveSupport::TestCase\n  def setup\n    @buffer = ActiveSupport::SafeBuffer.new\n  end\n  [..]\n  test \"Should not break gsub block form match variables\" do\n    @buffer << 'matchme'\n    @buffer.gsub(/(matchme)/) { assert_equal 'matchme', $1 }\n  end\n```\n\nSo far it's know that this breaks escape_javascript since it uses $1 matcher (see https://github.com/rails/rails/issues/1553 ). I presume there may be others also affected.\n\nInvestigating what a good fix would be.. seems awful heavy handed to have to capture and reset all those variables, but on the other hand, its bad form to leave a ruby core method different from it's documented behaviour.\n", "labels": [], "number": 1555, "updated_at": "2018-02-13 23:20:41", "user": 16432, "closed_at": "2011-09-08 08:27:04", "id": 1023331, "title": "SafeBuffer#gsub breaks block form match variables $1, $2, $`, $&, and $’", "url": "https://api.github.com/repos/rails/rails/issues/1555", "created_at": "2011-06-08 11:22:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1326171", "text": "There is not much we can do here. Maybe we should get rid of gsub altogether. /cc @tenderlove\n", "created_at": "2011-06-08 12:03:23", "user": 9582, "id": 1326171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327796", "text": "Yes, you're right. I've investigated further and this one seems to cross the border into ruby internals. Not 100% sure but might even be considered a ruby bug: just the act of chaining up the inheritance hierarchy with super causes \"last match\" globs ($1, $2 etc) to be lost from the caller's context.\n\nAction? Removing gsub support for SafeBuffer is one, but the ramifications may be quite widespread. Or just document the modified behaviour of gsub with a SafeBuffer?\n", "created_at": "2011-06-08 16:04:53", "user": 16432, "id": 1327796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327875", "text": "IMO docco is the best solution.  We can't remove gsub, and even a regular subclass of string that just calls super will break:\n\n```\nirb(main):001:0> class X < String; def gsub(*args); super; end end\n=> nil\nirb(main):002:0> X.new('hello').gsub(/(l)/) { $1 + 'm' }\nNoMethodError: undefined method `+' for nil:NilClass\n    from (irb):2:in `block in irb_binding'\n    from (irb):1:in `gsub'\n    from (irb):1:in `gsub'\n    from (irb):2\n    from /Users/aaron/.local/bin/irb:12:in `<main>'\nirb(main):003:0>\n```\n", "created_at": "2011-06-08 16:14:06", "user": 3124, "id": 1327875}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1330670", "text": "A more serious monkeypatch could solve this, although it may have unfortunate performance implications. If you do something like this:\n\n```\ndef gsub(rx, *args)\n  super {|s| s =~ rx; yield}\nend\n```\n\nyou should be able to properly set the magic variables before running the block.\n", "created_at": "2011-06-08 23:01:42", "user": 188, "id": 1330670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1333301", "text": "+1 can't use the Rack::Utils.escape on SafeBuffer now\n\n```\nree-1.8.7-2010.02 > Rack::Utils.escape('>')\n => \"%3E\" \n\nree-1.8.7-2010.02 > Rack::Utils.escape(ActiveSupport::SafeBuffer.new('>'))\nNoMethodError: undefined method `bytesize' for nil:NilClass\n```\n", "created_at": "2011-06-09 10:24:52", "user": 43391, "id": 1333301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339580", "text": "I've pushed a suggested fix on https://github.com/rails/rails/pull/1622 .. (update: and just yanked it because it's no good)\n", "created_at": "2011-06-10 03:39:30", "user": 16432, "id": 1339580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395302", "text": "(per @dmathieu) http://www.ruby-forum.com/topic/198458 - best explanation/discussion I've seen of why the magic matching variables break when you attempt to intercept gsub (and why it's nigh impossible to \"just fix it\")\n", "created_at": "2011-06-19 02:47:46", "user": 16432, "id": 1395302}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400511", "text": "rails_autolink is affected https://github.com/tenderlove/rails_autolink/blob/master/lib/rails_autolink/helpers.rb: Line #59 turns text into safebuffer, Line #85 and #117 invoke gsub{} on it.\n", "created_at": "2011-06-20 04:25:32", "user": 5958, "id": 1400511}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1493997", "text": "@janx line 59 in rails_autolink does not return a safebuffer. It uses `#to_str`, which transforms any safebuffer into a string.\n\n```\nruby-1.9.2-p180 :004 > \"test\".html_safe.class\n => ActiveSupport::SafeBuffer \nruby-1.9.2-p180 :006 > \"test\".html_safe.to_str.class\n=> String \n```\n\nTherefore it should not have this gsub problem.\n", "created_at": "2011-07-03 18:35:25", "user": 9347, "id": 1493997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1495455", "text": "@dmathieu You're right. I gave wrong link/lines, the problem cause of our app was lib/rails_autolink.rb in commit fe9d2c7bb4e099a70cdb5419f4b2068e7555cfb0 (v1.0.1), so it's already fixed in edge. Thanks.\n", "created_at": "2011-07-04 03:10:06", "user": 5958, "id": 1495455}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1496074", "text": "I think we should perhaps, either :\n- Send a warning for every safebuffer which uses an unsafe method with a block, saying it might not work.\n- Raise an exception on SafeBuffer#gsub when there is a block.\n\nThe second solution seems better to me.\n@josevalim, @tenderlove, what do you think ?\n", "created_at": "2011-07-04 07:20:26", "user": 9347, "id": 1496074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1564661", "text": "Agreed. We need to have this raise an exception at the very least.\n\n``` ruby\n<%= render('layouts/application.html.erb').gsub(/\\{\\{\\s*([a-z0-9_]+)\\s*\\}\\}/i) do |match|\n  respond_to?(\"#{$1}_for_cobranding\") ? send(\"#{$1}_for_cobranding\") : match\nend %>\n```\n\nSimple code like this, which I use to do different branding in layouts, just does not work anymore.\n\nA simple fix is just to:\n\n``` ruby\n<%= render('layouts/application.html.erb').to_str.gsub(/\\{\\{\\s*([a-z0-9_]+)\\s*\\}\\}/i) do |match|\n  respond_to?(\"#{$1}_for_cobranding\") ? send(\"#{$1}_for_cobranding\") : match\nend.html_safe %>\n```\n", "created_at": "2011-07-13 17:45:31", "user": 19303, "id": 1564661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1644630", "text": "I have disabled gsub and sub from safe buffers. See #2248\n", "created_at": "2011-07-25 09:53:35", "user": 9347, "id": 1644630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1652849", "text": "I just want to point out this change breaks lib/mail/body.rb's delivering html email templates as they're encoded with:\n\n```\ndef to_lf\n    gsub(/\\n|\\r\\n|\\r/) { \"\\n\" }\nend\n```\n\nThat's going to bite a few people when they find out their emails are all &amp;lt;table&amp;gt;\n", "created_at": "2011-07-26 09:35:17", "user": 168183, "id": 1652849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1652874", "text": "yes, but there's no way to detect whether the block uses $\\* vars or not.\n", "created_at": "2011-07-26 09:40:40", "user": 9347, "id": 1652874}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1652890", "text": "Basically, gsub shouldn't be used on safe buffers because you'll have unexpected behaviors with block.\nThat's why my patch removes it.\n\nAfter, as it works as long as you don't use $\\* vars, it might be enough to not remove the feature.\nThen both my PR and this issue can be closed ...\nBut I think that's for a core committer to decide.\ncc @josevalim @spastorino\n", "created_at": "2011-07-26 09:44:50", "user": 9347, "id": 1652890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1768214", "text": "This also breaks things like CGI.escapeHTML and HTMLEntities.new.encode, and their decoding equivalents.\n\nI think if you're going to modify behaviour from ruby-core, it should raise an exception rather than just return nil for $1.\n", "created_at": "2011-08-09 22:46:23", "user": 535, "id": 1768214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1770630", "text": "@steveh : that's what my PR, #2248 does.\n", "created_at": "2011-08-10 07:47:57", "user": 9347, "id": 1770630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1777527", "text": "@dmathieu Ah, managed to miss that completely. Thanks, will watch that PR instead.\n", "created_at": "2011-08-10 22:45:11", "user": 535, "id": 1777527}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1798237", "text": "Just spent way too long dealing with this issue myself realizing Rails was borking gsub.\n\nMy vote is to raise an exception if a block is used if core doesn't want to remove it from the list of unsafe methods.  In the mean time, I have to force standard gsub usage with String.new(my_text).gsub { }\n", "created_at": "2011-08-13 17:57:12", "user": 24056, "id": 1798237}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1801079", "text": "@akaspick : it can't be removed from the list of unsafe methods. Because it's not a safe method. It'll lead to even more confusion.\nA cleaner way to do it is :\n\n```\nmy_text.to_str.gsub {}\n```\n", "created_at": "2011-08-14 10:10:17", "user": 9347, "id": 1801079}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1935244", "text": "The gsub part of this affected me, by way of HTTParty. It was totally unexpected and very difficult to track down.\n", "created_at": "2011-08-29 19:16:39", "user": 50124, "id": 1935244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2097726", "text": "So gsub isnt' allowed on a safe buffer anymore. So if you want to take a string and html_escape it, and THEN call gsub on it, and mark the results as html_safe.... how the heck do you do it?\n\nSince calling html_escape will result in an html_safe string that exhibits this bug, here's one way:\n\n```\nstring = String.new(html_escape(  string ))  # html escaped, but not a SafeBuffer\nstring.gsub(....).html_safe  # obviously it's your responsibility to make sure whatever you are sub'ing in is safe, as any other place you explciitly call #html_safe to make a SafeBuffer. \n```\n\nIs there any better way to do this?  This definitely has resulted in some confusing situations here. This use case -- wanting to take an un-safe string, html-escape everything in it, and then gsub on it... is THAT crazy of a case, is it? The solution here still doesn't get people out of having to do crazy things like above, although at least it raises instead of failing mysteriously, giving you a clue you have to do something crazy. \n", "created_at": "2011-09-14 20:30:57", "user": 149304, "id": 2097726}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2097750", "text": "Yes, there's a much better way to do this :\n\n```\nstring = html_escape(string).to_str  # Not a SafeBuffer\nstring.gsub(....).html_safe  # obviously it's your responsibility to make sure whatever you are sub'ing in is safe, as any other place you explciitly call #html_safe to make a SafeBuffer. \n```\n", "created_at": "2011-09-14 20:33:20", "user": 9347, "id": 2097750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/22909993", "text": "I also just spent a good deal of my day tracking down this bug.\n\nIssue #1555 was resolved by pull request #2248 which raises an exception for these methods, but this change was reverted on the same day for some reason. I think raising an exception when called with a block would be far more sensible than knowingly letting it run in a broken state?\n", "created_at": "2013-08-19 22:37:34", "user": 6501, "id": 22909993}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/58361468", "text": "Just ran into this problem myself, and lucked into finding this thread. Wanted to add one important note for other travelers.\n\nThe solution provided by @dmathieu...\n\n```\nmy_text.to_str.gsub {}\n```\n\nworked for me, however note that you **must** use `to_str` rather than `to_s`. \n\nSafeBuffer inherits from String and [overrides `to_s`to return `self`](http://api.rubyonrails.org/classes/ActiveSupport/SafeBuffer.html#method-i-to_s), but does not touch `to_str`, which is why it works in this case.\n", "created_at": "2014-10-08 14:00:44", "user": 4679818, "id": 58361468}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/293790046", "text": "I run into a problem with `escape_javascript`. I render a confirm modal to prereview the article content before saving. Anh JS doesn't work if it has an `'` or `\"` in the article's content.\r\n```js\r\n$(\".confirmation-modal\").html(\"<%= j render(\"articles/modal_confirm\", article: @article) %>\");\r\n```\r\nI've tried to use `.html('<%= ... %>')` or `.html(\"<%= ... %>\")` but the other case won't work.\r\nThe problem was solved when I use `.to_str()` after `render()`\r\n\r\n```js\r\n$(\".confirmation-modal\").html(\"<%= j render(\"articles/modal_confirm\", article: @article).to_str %>\");\r\n```\r\n", "created_at": "2017-04-13 06:00:09", "user": 13447235, "id": 293790046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/293791842", "text": "@trandaison have you tried once with `raw`?", "created_at": "2017-04-13 06:09:57", "user": 2970724, "id": 293791842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/293793326", "text": "@vishalzambre I've tried `.html_safe` and `raw`, it won't work too :D ", "created_at": "2017-04-13 06:14:02", "user": 13447235, "id": 293793326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/298043590", "text": "@trandaison see https://github.com/JangoSteve/remotipart/issues/89\r\n\r\n```javascript\r\n$(\".yield-section\").html(\"<%= j \"#{render \"admin/articles/modal_confirm\", article: @article}\"  %>\");\r\n```", "created_at": "2017-04-28 16:25:21", "user": 3414795, "id": 298043590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/300362140", "text": "@westonganger \r\nIn case I edit an article, it renders a html text at the end of the page instead of showing a preview modal. Adding `.html_safe or raw()` will do the job.\r\nBut if using `.html_safe`, when I only change the image of article (others are not changed), it won't render properly, JS won't execute.\r\n\r\nI have to do something like this, and it works as well but it seems like a little bit complicated :smile: \r\n```erb\r\n<% if action_name == \"create\" || params[:article][:image].present? %>\r\n  $(\".confirmation-modal\").html(\"<%= j render(\"articles/modal_confirm\", article: @article).to_str %>\");\r\n<% else %>\r\n  $(\".confirmation-modal\").html(\"<%= j render(\"articles/modal_confirm\", article: @article) %>\");\r\n<% end %>\r\n ```", "created_at": "2017-05-10 03:15:21", "user": 13447235, "id": 300362140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/324589344", "text": "Just ran into this issue again today (using Rails 5.0 and Ruby 2.4.1) and took quite some time before I realized ActiveSupport::SafeBuffer was the cause. I see there were several attempts at fixes, which were uncompleted or reverted. It would however be nice if we could at least show a warning when this is happening to prevent wasting time.\r\n\r\nNote: this is also a problem when using `Regexp.last_match` (as did I).", "created_at": "2017-08-24 09:52:19", "user": 3602336, "id": 324589344}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/365439084", "text": "I just ran into this issue again today (using rails 5.1.4) and wasted quite some time debugging before I realized `ActiveSupport::SafeBuffer` was the cause. It looks like I am not the only one who continues to get bitten by this.\r\n\r\nIt looks like this issue was closed by https://github.com/rails/rails/pull/2248 but then that fix was [reverted](https://github.com/rails/rails/commit/e05d4cea69919ed0a2e5832bde120b5d0f12c0ec#diff-f639a79f308e72f54af369291a4d5907) (why?). I would suggest reopening this until a solution is finally merged. (Closing the issue suggests that it was resolved. If it was resolved, what was the resolution??)\r\n\r\nPerhaps raise an error when `gsub` is used on a `SafeBuffer`, or at least emit a warning?\r\n\r\n", "created_at": "2018-02-13 23:18:29", "user": 14151, "id": 365439084}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "See issue #1402\n\nI did NOT implement the usage for \"Namespaced::Model.new.errors.add(...)\" as I am a bit short in time currently. I basically brought back the changes from \"jfirebaugh\" in commit \"https://github.com/rails/rails/commit/5b8dbb0eee0a3277ef51e4bf31555ef27410272f\". \n\nThis means you can write your yaml file like this:\n\n...\n  activerecord:\n    models: \n      invoice:\n        item: \"Invoice::Item dot notation\"\n      invoice/item: \"Invoice::Item slash notation\"\n    attributes:\n      invoice/item:\n        name: \"Invoice::Item.name slash notation\"\n      invoice:\n        item:\n          name: \"Invoice::Item.name dot notation\"\n", "labels": [], "number": 1556, "updated_at": "2014-07-03 04:49:57", "user": 202410, "closed_at": "2011-06-08 12:01:33", "id": 1023452, "title": "Brought back alternative convention for namespaced models in i18n", "url": "https://api.github.com/repos/rails/rails/issues/1556", "created_at": "2011-06-08 11:51:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327108", "text": "I believe this one should be backported to `3-1-stable` as well, because it's a bug fix.\n", "created_at": "2011-06-08 14:37:22", "user": 4912, "id": 1327108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327254", "text": "3-1-stable pull request please? :)\n", "created_at": "2011-06-08 14:58:34", "user": 9582, "id": 1327254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327393", "text": "This has been backported in #1562\n", "created_at": "2011-06-08 15:15:12", "user": 4912, "id": 1327393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340724", "text": "Thank you.\n", "created_at": "2011-06-10 09:23:46", "user": 65587, "id": 1340724}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc. @josevalim\n", "labels": [], "number": 1557, "updated_at": "2014-07-03 04:50:01", "user": 160941, "closed_at": "2011-06-08 13:26:27", "id": 1023849, "title": "Multiple sources in sprockets helpers (backported from master)", "url": "https://api.github.com/repos/rails/rails/issues/1557", "created_at": "2011-06-08 13:19:26", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Seems like no-one has pushed the fix yet, so here's my shot.\n\nThis fixes escape_javascript to allow for the fact that gsub on SafeBuffer does not pass match variables $1, $2 etc to a block. See issue GH#1553\n\nIt doesn't fix the fact that gsub on a SafeBuffer still behaves differently from ruby core gsub when given a block (issue GH#1555)\n", "labels": [], "number": 1558, "updated_at": "2014-06-12 08:02:07", "user": 16432, "closed_at": "2011-06-08 15:01:44", "id": 1024380, "title": "Fix for issue 1553 - escape_javascript to support SafeBuffer strings", "url": "https://api.github.com/repos/rails/rails/issues/1558", "created_at": "2011-06-08 14:54:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327259", "text": "@josevalim bro, please get this one in. Looks good to me.\n", "created_at": "2011-06-08 14:58:58", "user": 4912, "id": 1327259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327290", "text": "We need to port this to 3-1-stable and master as well, right?\n", "created_at": "2011-06-08 15:02:20", "user": 9582, "id": 1327290}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327298", "text": "Yep, I'm doing it now.\n", "created_at": "2011-06-08 15:03:24", "user": 4912, "id": 1327298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327384", "text": "This has been ported in #1560 and #1561. Thank you for fixing this :)\n", "created_at": "2011-06-08 15:13:56", "user": 4912, "id": 1327384}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If before_filter list was being called mistakenly then\nthe test should fail. However test will not fail because\nsecond filter is assigning new values to @list. To truly\ntest that first before_filter is not called when it should\nnot be called then @list should not assigned value unconditionally.\n\nThis patch will make the test fail if first filter is called.\n", "labels": [], "number": 1559, "updated_at": "2014-07-03 04:50:08", "user": 6399, "closed_at": "2011-06-08 23:34:06", "id": 1024386, "title": "Make test meaningful", "url": "https://api.github.com/repos/rails/rails/issues/1559", "created_at": "2011-06-08 14:55:12", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Port of #1558 to `master`\n", "labels": [], "number": 1560, "updated_at": "2014-06-26 18:55:18", "user": 4912, "closed_at": "2011-06-08 15:10:22", "id": 1024470, "title": "Make escape_javascript happy to handle SafeBuffers", "url": "https://api.github.com/repos/rails/rails/issues/1560", "created_at": "2011-06-08 15:06:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327355", "text": "Merged.\n", "created_at": "2011-06-08 15:10:22", "user": 9582, "id": 1327355}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Port of #1558 to `3-1-stable`\n", "labels": [], "number": 1561, "updated_at": "2014-06-23 14:37:56", "user": 4912, "closed_at": "2011-06-08 15:13:32", "id": 1024487, "title": "Make escape_javascript happy to handle SafeBuffers", "url": "https://api.github.com/repos/rails/rails/issues/1561", "created_at": "2011-06-08 15:08:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327380", "text": "Merged.\n", "created_at": "2011-06-08 15:13:32", "user": 9582, "id": 1327380}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Backport #1556 to `3-1-stable`\n", "labels": [], "number": 1562, "updated_at": "2014-07-03 04:50:17", "user": 4912, "closed_at": "2011-06-08 15:17:47", "id": 1024519, "title": "Brought back alternative convention for namespaced models in i18n.", "url": "https://api.github.com/repos/rails/rails/issues/1562", "created_at": "2011-06-08 15:12:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327414", "text": "Merged.\n", "created_at": "2011-06-08 15:17:47", "user": 9582, "id": 1327414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340734", "text": "Thank you.\n", "created_at": "2011-06-10 09:26:33", "user": 65587, "id": 1340734}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "First of all, congratulations on the 3.1 RC as it is indeed one of the most exciting version in the history of rails.\n\nI've been getting my hands dirty with this release and am having trouble doing a remote call (ajax) and in the controller's method, I have \"render :update do |page| ... end\" block. It throws a Template Missing error (missing controller_name/update, application/update) when it's called.\n\nSample of what I'm trying to do to test things out:\n\n```\ndef remote_call\n    render :update do |page|\n        page << \"alert('testing')\"\n    end\nend\n```\n\nCan someone shed light to the render :update usage with Rails 3.1 with jQuery being the default?\n\nThanks in advance.\n", "labels": [], "number": 1563, "updated_at": "2012-01-06 13:47:13", "user": 350337, "closed_at": "2011-06-08 18:02:20", "id": 1024591, "title": "render :update seems to be broken in Rails 3.1 RC", "url": "https://api.github.com/repos/rails/rails/issues/1563", "created_at": "2011-06-08 15:23:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327494", "text": "Have you install the prototype-rails plugin? \nhttps://github.com/rails/prototype-rails\n", "created_at": "2011-06-08 15:27:18", "user": 6321, "id": 1327494}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328355", "text": "I am using jQuery instead of prototype.  So it appears that render :update is a Prototype-related mechanism?  If that is the case, what is the alternative with jQuery?\n\nChad\n", "created_at": "2011-06-08 17:30:06", "user": 350337, "id": 1328355}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328563", "text": "Just render a js.erb template that has the appropriate jQuery code. There are loads of articles on the web but the best place to start is [railscasts.com](http://railscasts.com).\n", "created_at": "2011-06-08 18:02:20", "user": 6321, "id": 1328563}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328595", "text": "An external js.erb file is not an issue for me.  The issue is rendering within the controller's method as illustrated in the sample code provided above.  What is the alternative, other than an external js.erb file, for render :update that stays within the controller's method?\n", "created_at": "2011-06-08 18:05:50", "user": 350337, "id": 1328595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1557239", "text": "chadwtaylor: You can just render :text with the js code. \n\nEx.\n```respond_to do |format|\n  format.js { render :text => \"alert('testing')\" }\nend\n\n```\n\nI'm not sure if this is a good alternative, but to me it feels dirty.\n```\n", "created_at": "2011-07-12 19:56:35", "user": 337455, "id": 1557239}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3384650", "text": "You can use [jrails](https://github.com/aaronchi/jrails) if you still love those RJS helpers, but it ships with outdated jQuery (1.5) and doesn't guarantee Ruby 1.9 support.\n", "created_at": "2012-01-06 13:47:13", "user": 519227, "id": 3384650}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1564, "updated_at": "2014-07-03 04:50:22", "user": 4912, "closed_at": "2011-06-08 16:19:13", "id": 1024725, "title": "Update CHANGELOG to mention the new SafeBuffer change", "url": "https://api.github.com/repos/rails/rails/issues/1564", "created_at": "2011-06-08 15:48:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327915", "text": "This was merged, bug github threw a 500 /cc @brianmario\n", "created_at": "2011-06-08 16:19:13", "user": 3124, "id": 1327915}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1565, "updated_at": "2014-07-03 04:50:25", "user": 4912, "closed_at": "2011-06-08 16:20:20", "id": 1024762, "title": "Update CHANGELOG to mention the new SafeBuffer change", "url": "https://api.github.com/repos/rails/rails/issues/1565", "created_at": "2011-06-08 15:57:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1327921", "text": "This was also merged.\n", "created_at": "2011-06-08 16:20:20", "user": 3124, "id": 1327921}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1566, "updated_at": "2014-07-03 04:50:28", "user": 4912, "closed_at": "2011-06-08 16:21:55", "id": 1024777, "title": "Update CHANGELOG to mention the new SafeBuffer change", "url": "https://api.github.com/repos/rails/rails/issues/1566", "created_at": "2011-06-08 16:00:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently rake railties:install:migrations copies & re-numbers migrations from engines in a random order. This commit ensures that they are copied in the same sequence that they are required.\n", "labels": [], "number": 1567, "updated_at": "2014-06-28 16:15:50", "user": 22470, "closed_at": "2011-06-10 11:44:18", "id": 1024878, "title": "Ensure engine migrations are copied in correct sequence", "url": "https://api.github.com/repos/rails/rails/issues/1567", "created_at": "2011-06-08 16:19:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328011", "text": "Could we have tests?\n", "created_at": "2011-06-08 16:34:26", "user": 9582, "id": 1328011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328051", "text": "I couldn't find anything covering that rake task already, and I was weary about adding a complicated test for a single line change. I'll revisit the test for it.\n", "created_at": "2011-06-08 16:39:42", "user": 22470, "id": 1328051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328287", "text": "Current tests are here:\n\nhttps://github.com/rails/rails/blob/master/railties/test/railties/shared_tests.rb#L24\n", "created_at": "2011-06-08 17:20:12", "user": 9582, "id": 1328287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341066", "text": "@josevalim - I've updated the test, thanks for pointing out that existing one.\n", "created_at": "2011-06-10 10:57:34", "user": 22470, "id": 1341066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341185", "text": "Github says I cannot apply your pull request anymore, could you please rebase?\n", "created_at": "2011-06-10 11:10:20", "user": 9582, "id": 1341185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341643", "text": "@josevalim - done.\n", "created_at": "2011-06-10 11:40:57", "user": 22470, "id": 1341643}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341656", "text": "Sweet! Could you also provide a pull request for 3-1-stable in case you want it merged on 3-1?\n", "created_at": "2011-06-10 11:43:20", "user": 9582, "id": 1341656}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341661", "text": "Merged.\n", "created_at": "2011-06-10 11:44:18", "user": 9582, "id": 1341661}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The fix in [cdf617e9aaf26f741bcae275ae675d9522d14496] was manipulating the test, and also _not_ fixing all the issues. I've backported my [9e2e24265510572a6574d38ba2af83fdf734ab54] and confirm that the tests passed.\n", "labels": [], "number": 1568, "updated_at": "2014-06-25 21:56:54", "user": 4912, "closed_at": "2011-06-08 16:22:53", "id": 1024882, "title": "Add proper fix to mail_to helper", "url": "https://api.github.com/repos/rails/rails/issues/1568", "created_at": "2011-06-08 16:20:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As per the [HTML 4.01 specification appendice](http://www.w3.org/TR/html401/appendix/notes.html#notes-line-breaks)\n\n> SGML (see [ISO8879], section 7.6.1) specifies that a line break immediately following a start tag must be ignored, as must a line break immediately before an end tag. This applies to all HTML elements without exception.\n\nI've added it only on the textarea because it's the only place where this has an impact (see more detailed description of the problem in #393 ).\n", "labels": [], "number": 1569, "updated_at": "2014-06-17 14:58:06", "user": 9347, "closed_at": "2011-09-08 21:31:00", "id": 1025097, "title": "Add a newline after a textarea's opening tag. Closes #393", "url": "https://api.github.com/repos/rails/rails/issues/1569", "created_at": "2011-06-08 16:55:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329001", "text": "Thank you for your comments. I've fixed and pushed the fixes for both.\n", "created_at": "2011-06-08 18:57:58", "user": 9347, "id": 1329001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1465552", "text": "I've just rebased this with master.\n", "created_at": "2011-06-29 08:36:15", "user": 9347, "id": 1465552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544407", "text": "Thank you. Do you mind squashed them into a single commit, and force push to your branch?\n", "created_at": "2011-07-11 05:16:10", "user": 4912, "id": 1544407}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1973281", "text": ":bump: this has no big impact. Anyone to take one last look and merge it ?\n", "created_at": "2011-09-01 20:56:42", "user": 9347, "id": 1973281}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "From my new form, the new record is not being added to the model after selecting f.submit.  From the development log, I can see that the parameters for the new record are being passed, but then the new form gets re-rendered, which is what I have set up as an \"else\" to to my \"if .... .save.\nSeems to be its failing half way through the save process?\n", "labels": [], "number": 1570, "updated_at": "2011-06-08 18:50:22", "user": 629345, "closed_at": "2011-06-08 18:50:22", "id": 1025201, "title": "creating new record", "url": "https://api.github.com/repos/rails/rails/issues/1570", "created_at": "2011-06-08 17:13:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328281", "text": "You probably have failing validations in your form. Try displaying the errors.\nYou can also see them quickly by using `#save!` in your controller (just temporarily of course).\n", "created_at": "2011-06-08 17:19:33", "user": 9347, "id": 1328281}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328418", "text": "I removed all validations in the model's rb file...not sure if I'm using #save! properly...is that in place of .save   ?\n", "created_at": "2011-06-08 17:40:00", "user": 629345, "id": 1328418}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328435", "text": "Without the validations...my development log shows the INSERT INTO....thanks\n", "created_at": "2011-06-08 17:43:40", "user": 629345, "id": 1328435}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1328810", "text": "That's not a bug then. Could you close the issue ?\n", "created_at": "2011-06-08 18:31:19", "user": 9347, "id": 1328810}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Initially reported in #1272:\n\nThis has introduced a new problem:\n\n```\n>> Fuu.order(Fuu.arel_table[:name].desc).reverse_order.to_sql\n=> \"SELECT \\\"fuus\\\".* FROM \\\"fuus\\\"  ORDER BY #<Arel::Nodes::Ordering:0x0000010319dc88> DESC\"\n```\n\nVersus:\n\n```\n>> Fuu.order(Fuu.arel_table[:name].desc.to_sql).reverse_order.to_sql\n=> \"SELECT \\\"fuus\\\".* FROM \\\"fuus\\\"  ORDER BY \\\"fuus\\\".\\\"name\\\" ASC\"\n```\n\nNotice the to_sql call in Fuu.arel_table[:name].desc\n", "labels": ["activerecord", "regression"], "number": 1571, "updated_at": "2011-06-28 20:06:47", "user": 1979, "closed_at": "2011-06-28 16:44:52", "id": 1025289, "title": "ActiveRecord::Relation#order no longer works with arel ordering nodes", "url": "https://api.github.com/repos/rails/rails/issues/1571", "created_at": "2011-06-08 17:29:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329151", "text": "Sent pull request #1574 to fix this.\n", "created_at": "2011-06-08 19:22:05", "user": 5254, "id": 1329151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1456718", "text": "@jonleighton can you apply the pull? Would like to clear out the 3.1 blocker list.\n", "created_at": "2011-06-28 16:14:54", "user": 2741, "id": 1456718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1456997", "text": "@dhh this was already fixed in 08f3f30994d37f6f44acfac801f82fc43127fc78 so closing this ticket. \n", "created_at": "2011-06-28 16:44:51", "user": 1979, "id": 1456997}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458612", "text": "Well, this isn't really closed.\n\nThe problem is that with the latest Arel update, Arel Ordering Nodes got splitted into Descending and Ascending Nodes. Since the tests added 08f3f30994d37f6f44acfac801f82fc43127fc78 weren't really testing the reverse, no one noticed it.\n\nI'll update the pull request.\n", "created_at": "2011-06-28 20:06:47", "user": 5254, "id": 1458612}], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {"+1": [289949, 47229]}, "text": "When batch creating a number of objects (as is done via mass assignment with `accepts_nested_attributes_for`), it looks like `validates_uniqueness_of` is just checking the db for conflicts, but not looking for conflicts within the batch currently being saved.\n\nFor example, given these two models:\n\n```\nclass Parent < ActiveRecord::Base\n  has_many :children\n  accepts_nested_attributes_for :children\nend\n\nclass Child < ActiveRecord::Base\n  belongs_to :parent\n  validates_uniqueness_of :name\nend\n```\n\nHere's my output from the console. See that, despite the uniqueness constraint, two children with the same name were created, and that they then can't be re-saved!\n\n```\n?> p = Parent.create\n=> #<Parent id: 3, created_at: \"2011-06-08 17:31:54\", updated_at: \"2011-06-08 17:31:54\">\n>> p.update_attributes :children_attributes => [{:name => \"Kid\"}, {:name => \"Kid\"}]\n=> true\n>> Child.all.map(&:name)\n=> [\"Kid\", \"Kid\"]\n>> c = Child.first\n=> #<Child id: 4, parent_id: 3, name: \"Kid\", created_at: \"2011-06-08 17:32:12\", updated_at: \"2011-06-08 17:32:12\">\n>> c.save\n=> false\n>> c.errors.full_messages\n=> [\"Name has already been taken\"]\n```\n\nI understand it may not be the role of `validates_uniqueness_of` to validate these objects against each other, but is there at least a reasonable workaround short of hand-coding a list-sorter/de-duper or something? Thanks!\n", "labels": [], "number": 1572, "updated_at": "2018-02-04 09:28:30", "user": 15598, "closed_at": "2011-07-23 18:37:26", "id": 1025366, "title": "'validates_uniqueness_of' ignored if 'accepts_nested_attributes_for' is used", "url": "https://api.github.com/repos/rails/rails/issues/1572", "created_at": "2011-06-08 17:44:33", "comments": [{"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383765", "text": "I can reproduce the problem, but I don't think it's directly related to <code>nested_atributes_for</code>. It also happens associating the children manually:\n\n```\n?> p = Parent.create\n=> #<Parent id: 5, name: nil, age: nil, created_at: \"2011-06-16 19:09:53\", updated_at: \"2011-06-16 19:09:53\">\n>> p.children.build :name => \"Kid\"\n=> #<Child id: nil, parent_id: 5, name: \"Kid\", age: nil, created_at: nil, updated_at: nil>\n>> p.children.build :name => \"Kid\"\n=> #<Child id: nil, parent_id: 5, name: \"Kid\", age: nil, created_at: nil, updated_at: nil>\n>> p.children\n=> [#<Child id: nil, parent_id: 5, name: \"Kid\", age: nil, created_at: nil, updated_at: nil>, #<Child id: nil, parent_id: 5, name: \"Kid\", age: nil, created_at: nil, updated_at: nil>]\n>> p.save\n=> true\n>> Child.all.map(&:name)\n=> [\"Kid\", \"Kid\"]\n```\n\nYou could prevent this behavior with <code>validates_associated</code>:\n\n``` ruby\nclass Parent < ActiveRecord::Base\n  has_many :children\n  validates_associated :children\n  accepts_nested_attributes_for :children\nend\n```\n\nHope that's what you're looking for.\n", "created_at": "2011-06-16 19:48:20", "user": 389480, "id": 1383765}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638287", "text": "Yep, `validates_associated` is the key here.\n", "created_at": "2011-07-23 18:37:26", "user": 4912, "id": 1638287}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2127816", "text": "I'm sorry guys, but i have same problem. I got reproduced the problem of @adamflorin with the validates_associated defined. The problem only occurs with nested_attributes. So, can't i use nested_attribute? :S \n\n```\nruby-1.9.2-p290 :001 > p = Parent.create :children_attributes => [{:name => \"Kid\"}, {:name => \"Kid\"}]\n=> #<Parent id: 1, created_at: \"2011-09-18 18:00:08\", updated_at: \"2011-09-18 18:00:08\"> \nruby-1.9.2-p290 :002 > Child.all.map(&:name)\n => [\"Kid\", \"Kid\"] \nruby-1.9.2-p290 :003 > c = Child.first\n => #<Child id: 1, parent_id: 1, name: \"Kid\", created_at: \"2011-09-18 18:00:08\", updated_at: \"2011-09-18 18:00:08\"> \nruby-1.9.2-p290 :004 > c.save\n => false\n```\n\nModels:\n\n``` ruby\nclass Parent < ActiveRecord::Base\n  has_many :children\n  validates_associated :children\n  accepts_nested_attributes_for :children\nend\n\nclass Child < ActiveRecord::Base\n  belongs_to :parent\n  validates_uniqueness_of :name\nend\n```\n\ni'm using rails 3.1.0.\n\nThanks!\n", "created_at": "2011-09-18 18:19:59", "user": 139446, "id": 2127816}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2136193", "text": "Same problem over here.\n\nEven with _validates_associated_ Rails let the Child be saved.\n\n```\np = Parent.new\np.children << Child.new(:name => \"Kid\")\np.children << Child.new(:name => \"Kid\")\np.save\n=> true\n```\n\nRails (ActiveRecord) should avoid it, right? It only check if the Children named \"Kid\" is already in DB but not in memory.\n\nThere's a workaround using this: http://stackoverflow.com/questions/2772236/validates-uniqueness-of-in-nested-model-rails#answers-header\n\nBut I think it's a ActiveRecord issue.\n", "created_at": "2011-09-19 17:26:58", "user": 408219, "id": 2136193}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2288995", "text": "+1\n", "created_at": "2011-10-04 17:26:54", "user": 3932, "id": 2288995}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2709631", "text": "+1 to fix please\n", "created_at": "2011-11-11 16:02:23", "user": 157205, "id": 2709631}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2709771", "text": "+1, running into the same problem here, and validates_associated doesn't solve it\n", "created_at": "2011-11-11 16:13:51", "user": 28287, "id": 2709771}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2779866", "text": "+1 can we reopen this issue, please?\n", "created_at": "2011-11-17 18:34:23", "user": 846684, "id": 2779866}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2781681", "text": "validates_associated works fine with validates_uniqueness of if you are adding a single record to a collection. Where it breaks is when you use collection.build to add multiple records. If there are duplicates within the new records, the validation doesn't find them.\n", "created_at": "2011-11-17 20:43:42", "user": 345651, "id": 2781681}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2907016", "text": "+1 for reopening; `validates_associated` doesn't work. To summarize, the issue is that if you:\n- are submitting multiple new records as part of an association; and\n- you `accepts_nested_attribues_for` on that association; and\n- that association has a `validates ..., :uniqueness` on it\n\nthen the uniqueness validator:\n- checks against records already in the database\n- won't find records that are not unique within the collection being submitted, since they aren't in the database yet\n\nLikewise, `validates_associated` is of no help since it doesn't address the underlying uniqueness issue.\n", "created_at": "2011-11-28 20:48:54", "user": 57813, "id": 2907016}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2907711", "text": "+1 for a re-open. \n\nAt the very least, the `validates_uniqueness_of` documentation should point out that its behavior is altered significantly when used conjunction with `accepts_nested_attributes_for` and or when `:autosave` is enabled.\n\nIf I get a chance in the next few days, i'll fork and add the warning myself.\n", "created_at": "2011-11-28 21:36:14", "user": 1935, "id": 2907711}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2961435", "text": "@rares, I think the warning might be unnecessary as this seems to be a bug, not just a slight altering in behavior. The validation just plain doesn't work with `acceps_nested_attributes_for`.\n", "created_at": "2011-11-30 15:51:36", "user": 846684, "id": 2961435}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2961673", "text": "I am split on this, as where it seems like a bug, it is actually really hard to solve in the context of `accepts_nested_attributes_for` because it all executes within the scope of one transaction. The query executed in the validation never can see the data because the data is not committed (default transaction isolation level is `READ_COMMITTED` on oracle and postgres, not sure about mysql). \n\nOne thought I have had is to alter the transaction isolation level (to `READ_UNCOMMITTED`), but can lead to some scary situations in a write-heavy app.\n\n`validates_uniqueness_of` can also be extended to look at its in-memory collection for uniqueness as well, but that is more of a hack then actually fixing the problem.\n\nBottom line, my reasoning for including it in the docs was not to be the eventual solution (as i don't think its easily solvable given how both nested_attributes and the validator works) but as warning so that people are at least educated when using these two features together.\n", "created_at": "2011-11-30 16:05:16", "user": 1935, "id": 2961673}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2964779", "text": "It's important to note that this is not specific to accepts_nested_attributes_for. This is a general problem with validates_uniqueness_of when you are adding multiple records to a collection. The transaction doesn't matter because it's the in-memory objects that are not being validated against each other.\n", "created_at": "2011-11-30 19:26:59", "user": 345651, "id": 2964779}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2964971", "text": "Yeah, that is much is understood. the question is how to merge that concern with that `validates_uniqueness_of` does.\n", "created_at": "2011-11-30 19:39:00", "user": 1935, "id": 2964971}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2965124", "text": "It's really not a difficult problem to solve, we already have a patch in our own code. A generic solution for AR is not much more complicated than what we are doing. If nothing else gets done, when I have time I will submit something myself.\n", "created_at": "2011-11-30 19:48:58", "user": 345651, "id": 2965124}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2965181", "text": "Great! I look forward to it.\n", "created_at": "2011-11-30 19:52:16", "user": 1935, "id": 2965181}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2996880", "text": "+1\n", "created_at": "2011-12-02 22:32:41", "user": 42363, "id": 2996880}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3526249", "text": "+1 <code>validates_presence_of</code> too.\n", "created_at": "2012-01-17 10:55:48", "user": 1179925, "id": 3526249}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4144970", "text": "For the record, this happens not only for validates_uniqueness_of but for other validations as well (all?).\n\nIn my case, I have a validates_numericality_of :x, :only_integer => true on one of the attributes (data type: integer) of the associated object. When value is changed from 200 (valid value) to 200.13 (decimal is invalid), it doesn't trigger \"not a number\" error.\n\nSurprisingly, when value is changed from 200 to 199.13 (still invalid but the integer portion is different from previous value), the validations run since the field is of type :integer and activerecord is able to detect that integer portion of value has changed.\n\nRails version: 2.3.14\n", "created_at": "2012-02-23 20:52:44", "user": 429968, "id": 4144970}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10298682", "text": "+1 ! ! !\n", "created_at": "2012-11-12 18:34:26", "user": 570181, "id": 10298682}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10395706", "text": "+1\n", "created_at": "2012-11-15 02:47:47", "user": 266831, "id": 10395706}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10583127", "text": "+1\n", "created_at": "2012-11-21 02:17:22", "user": 808043, "id": 10583127}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10701533", "text": "I opened a pull request with a fix for this bug, take a look. Let me know if you have suggestions or comments.\n", "created_at": "2012-11-26 01:06:03", "user": 142833, "id": 10701533}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17386774", "text": "I have used this patch in my code and it seem works well on Development and Staging Environment.\nHowever, on Production I faced some problems but not sure it is related to this patch or not.\nUser add nested records after saved it responded ok but it doesn't save any data. After users try 2 or 3 times, it saved. It is happen only some time and not often. \n\n``` ruby\n\nclass Author\n  has_many :books\n\n  # Could easily be made a validation-style class method of course\n  validate :validate_unique_books\n\n  def validate_unique_books\n    validate_uniqueness_of_in_memory(\n      books, [:title, :isbn], 'Duplicate book.')\n  end\nend\n\nmodule ActiveRecord\n  class Base\n    # Validate that the the objects in +collection+ are unique\n    # when compared against all their non-blank +attrs+. If not\n    # add +message+ to the base errors.\n    def validate_uniqueness_of_in_memory(collection, attrs, message)\n      hashes = collection.inject({}) do |hash, record|\n        key = attrs.map {|a| record.send(a).to_s }.join\n        if key.blank? || record.marked_for_destruction?\n          key = record.object_id\n        end\n        hash[key] = record unless hash[key]\n        hash\n      end\n      if collection.length > hashes.length\n        self.errors.add_to_base(message)\n      end\n    end\n  end\nend\n```\n", "created_at": "2013-05-03 09:55:55", "user": 827717, "id": 17386774}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/194286029", "text": "+1 for reopening, a simple iteration / group_by would solve it\n", "created_at": "2016-03-09 13:00:45", "user": 48054, "id": 194286029}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/322161482", "text": "Can we reopen this?", "created_at": "2017-08-14 10:58:12", "user": 6539261, "id": 322161482}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/325552746", "text": "Just got into this problem too", "created_at": "2017-08-29 04:36:00", "user": 1697380, "id": 325552746}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/340738535", "text": "This just bit me as well. Thankfully, I had an index in place to prevent the \"bad\" data from being saved. However, it'd make for a much better user experience if the issue could be caught during the ActiveRecord validation cycle.", "created_at": "2017-10-31 11:47:00", "user": 289949, "id": 340738535}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/357620625", "text": "Can we reopen this?\r\nI faced the same issue.\r\nRails: 5.1.4", "created_at": "2018-01-15 09:01:38", "user": 13543984, "id": 357620625}, {"reactions": {"+1": [289949, 47229]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/362893393", "text": "+1 for reopening this; `validates_associated` doesn't work with nested attributes", "created_at": "2018-02-04 09:28:29", "user": 9535792, "id": 362893393}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "``` ruby\nrender :partial => \"item\", :collection => @items, :layout => \"item_layout\"\n```\n\nI would expect that item_layout would be rendered once and that each partial would be rendered inside the yield call. It appears that the layout value is being ignored due to the separation of render_collection and render_partial in ActionView::PartialRenderer\n\nI'm happy to take a stab at patching this, but I had two questions:\n- Is this behavior intended as part of the ActionView api? \n- If not, is the behavior I'm describing above what you would expect?\n", "labels": [], "number": 1573, "updated_at": "2012-04-26 20:28:11", "user": 1082, "closed_at": "2012-04-26 20:28:11", "id": 1025835, "title": "partial layouts and collections", "url": "https://api.github.com/repos/rails/rails/issues/1573", "created_at": "2011-06-08 18:58:11", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1388863", "text": "It's what i tried just 5min ago. So yes, the described behavior is what i would expect.\n", "created_at": "2011-06-17 15:30:13", "user": 99911, "id": 1388863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393609", "text": "While this is a nice to have, you can achieve the same thing by doing:\n\n```\n<%= render :partial => 'layouts/item_layout', :collection => @things %>\n```\n\nand then in your item layout:\n\n```\n<%= render :partial => @item %>\n```\n", "created_at": "2011-06-18 15:22:30", "user": 2197, "id": 1393609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394452", "text": "Thats true, but the layout feature cames handy if you have something like a sidebar on your page where every element is wrapped in div.box and you want to throw out a simple list of newest/popular stuff. Creating yet another template that in the end only consists of an single line of code sounds a bit silly to me. i believe it makes sense to just let them wrap in a layout like our action-views.\n", "created_at": "2011-06-18 20:19:07", "user": 99911, "id": 1394452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394460", "text": "also not sure about the filesystem i/o expense of rendering a partial repeatedly. (A render partial collection will load the partial  file once instead of n times)\n", "created_at": "2011-06-18 20:20:58", "user": 1082, "id": 1394460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5366941", "text": "This has been fixed on master by pull request #5310. Thanks.\n", "created_at": "2012-04-26 20:28:11", "user": 26328, "id": 5366941}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Added different test cases for the issue. Not sure if the implementation of the fix is the best\n", "labels": [], "number": 1574, "updated_at": "2014-06-16 10:44:56", "user": 5254, "closed_at": "2011-06-28 21:55:16", "id": 1025953, "title": "Fix #1571 ActiveRecord::Relation#order no longer works with arel ordering nodes", "url": "https://api.github.com/repos/rails/rails/issues/1574", "created_at": "2011-06-08 19:20:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331600", "text": "This isn't the right way to fix it.  We need to push the ordering node down to the arel AST rather than calling `to_sql` on the node directly.\n", "created_at": "2011-06-09 03:18:37", "user": 3124, "id": 1331600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332269", "text": "Should I change the direction of the ordering node and then return an array with all the orderings?\n", "created_at": "2011-06-09 06:51:50", "user": 5254, "id": 1332269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340078", "text": "Updated with @tenderlove suggestions\n", "created_at": "2011-06-10 06:43:16", "user": 5254, "id": 1340078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1367337", "text": "Any news on this?\n", "created_at": "2011-06-14 16:44:25", "user": 5254, "id": 1367337}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1367369", "text": "I suspect this is something @tenderlove wants to do in Arel instead of in ActiveRecord::Relation.\n", "created_at": "2011-06-14 16:48:00", "user": 18524, "id": 1367369}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1455638", "text": "Closed by 08f3f30994d37f6f44acfac801f82fc43127fc78 (although there are some missing tests)\n", "created_at": "2011-06-28 13:57:39", "user": 5254, "id": 1455638}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458625", "text": "Since these tests weren't merged to master no one noticed that this is fails with new Arel Nodes. \n", "created_at": "2011-06-28 20:08:04", "user": 5254, "id": 1458625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458636", "text": "pinging @tenderlove\n", "created_at": "2011-06-28 20:09:12", "user": 18524, "id": 1458636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458694", "text": "I'm updating the pull request with the changes\n", "created_at": "2011-06-28 20:17:02", "user": 5254, "id": 1458694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1458813", "text": "Updated with latest changes. Everything is green. /cc @jonleighton\n", "created_at": "2011-06-28 20:34:37", "user": 5254, "id": 1458813}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1459386", "text": "@oriolgual can you rebase these on 3-1-stable and send another pull request?\n", "created_at": "2011-06-28 21:57:46", "user": 3124, "id": 1459386}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When Turn is off, you get the full backtrace when a test fails. It's not scrubbed with the backtrace cleaner.\n", "labels": ["activesupport"], "number": 1575, "updated_at": "2012-10-06 04:18:08", "user": 2741, "closed_at": "2012-10-06 04:18:07", "id": 1026022, "title": "Ruby 1.9.2 minitest is not applying our backtrace cleaner in tests", "url": "https://api.github.com/repos/rails/rails/issues/1575", "created_at": "2011-06-08 19:31:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639312", "text": "I see this even if turn is on. See https://github.com/metaskills/mini_backtrace for a workaround and possible fix.\n", "created_at": "2011-07-24 00:23:26", "user": 2758, "id": 1639312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4314451", "text": "This is pulled & fixed, could someone close it? ed1fb7a34949dede70e4e4a2eae020e9ce5d9dff\n", "created_at": "2012-03-04 23:06:47", "user": 49185, "id": 4314451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4338135", "text": "@Tass i can't see this in code. :(\n", "created_at": "2012-03-06 05:06:38", "user": 3948, "id": 4338135}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399389", "text": "cc @arunagw \n", "created_at": "2012-04-28 19:19:27", "user": 47848, "id": 5399389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399586", "text": "@tass I'll gladly close it, since ed1fb7a seems to take care of things.\n", "created_at": "2012-04-28 19:45:48", "user": 27786, "id": 5399586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399622", "text": "As was just pointed out to me, this hasn't landed in master yet. My bad!\n", "created_at": "2012-04-28 19:50:41", "user": 27786, "id": 5399622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5402547", "text": "Yeah. Actually This is not applied yet :-(\n", "created_at": "2012-04-29 04:18:40", "user": 3948, "id": 5402547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8482184", "text": "@arunagw any news? :)\n", "created_at": "2012-09-12 04:58:05", "user": 840464, "id": 8482184}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8482401", "text": "I will try to work this week. Otherwise I will remove my name from assignee so anybody can pick this up :-)\n", "created_at": "2012-09-12 05:16:17", "user": 3948, "id": 8482401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8487985", "text": "We don't need to monkey patch MT to fix this.  Just add the backtrace cleaner method to the MT/Spec subclass (AS::TestCase).\n", "created_at": "2012-09-12 10:08:51", "user": 3124, "id": 8487985}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8746716", "text": "@tenderlove but the `filter_backtrace` method is part of the `MiniTest` module. How would you do it?\n", "created_at": "2012-09-20 21:42:39", "user": 840464, "id": 8746716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8802175", "text": "Ah, I see.  `filter_backtrace` is a class method (I thought it was an instance method).  Let me see what I can do about that.\n", "created_at": "2012-09-23 19:55:20", "user": 3124, "id": 8802175}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8802308", "text": "I've opened a [pull request](https://github.com/seattlerb/minitest/pull/165) on minitest that would allow us to set our own filter object.\n", "created_at": "2012-09-23 20:07:49", "user": 3124, "id": 8802308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9195155", "text": "Closing this as it's fixed. #7861\n", "created_at": "2012-10-06 04:18:07", "user": 3948, "id": 9195155}], "assignees": [3948, 3948], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Not sure if this is a bug or just my ignorance but the line below is in a js.erb file and the select statement is now escaped in 3.0.8.\n\n$(\"#accessdropdown\").append('<%= escape_javascript select(\"rep\", \"name\", session[:rep_acl],{:selected=>session[:currentrep]}) %>');\n", "labels": [], "number": 1576, "updated_at": "2011-06-09 18:46:43", "user": 16582, "closed_at": "2011-06-09 02:00:17", "id": 1026115, "title": "rendered partial escaped in 3.0.8", "url": "https://api.github.com/repos/rails/rails/issues/1576", "created_at": "2011-06-08 19:49:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1329552", "text": "I'm having the same problems:\n\n$('#tweet_search').html(\"<%= j render('form') %>\");\n\nrenders escaped.\n", "created_at": "2011-06-08 20:18:15", "user": 3528, "id": 1329552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1330137", "text": "Seems related to https://github.com/rails/rails/blame/b341e45d8e75d49a9f599881eea952c2a41af032/activesupport/lib/active_support/core_ext/string/output_safety.rb and the fact that there's a gsub call in the escape_javascript definition and so is an unsafe method.\n\nI think :)\n", "created_at": "2011-06-08 21:36:28", "user": 16582, "id": 1330137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331217", "text": "I see this in 3.0.9rc1 too except as suggested by Tony Perrie in the comments on the blog post, wrapping the escape_javascript() call in raw() does fix it.\n", "created_at": "2011-06-09 00:57:58", "user": 16582, "id": 1331217}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331401", "text": "Fixed with this patch\n\nFrom c7255813b8f61c1aa5f58dc9b92a3f382ef1a3ef Mon Sep 17 00:00:00 2001\nFrom: Greg Berenfield gberenfield@jollyfrog.org\nDate: Wed, 8 Jun 2011 21:34:27 -0400\nSubject: [PATCH] \\* fixed Issue #1576 which persists in 3.0.9rc1\n\n---\n\n .../lib/action_view/helpers/javascript_helper.rb   |    2 +-\n 1 files changed, 1 insertions(+), 1 deletions(-)\n\ndiff --git a/actionpack/lib/action_view/helpers/javascript_helper.rb b/actionpack/lib/action_view/helpers/javascript_helper.rb\nindex 0f18a4b..9e5e8ed 100644\n--- a/actionpack/lib/action_view/helpers/javascript_helper.rb\n+++ b/actionpack/lib/action_view/helpers/javascript_helper.rb\n@@ -49,7 +49,7 @@ module ActionView\n       # Escape carrier returns and single and double quotes for JavaScript segments.\n       def escape_javascript(javascript)\n         if javascript\n-          javascript.gsub(/(\\|<\\/|\\r\\n|[\\n\\r\"'])/) {|match| JS_ESCAPE_MAP[match] }\n-          (javascript.gsub(/(\\|<\\/|\\r\\n|[\\n\\r\"'])/) {|match| JS_ESCAPE_MAP[match] }).to_s.html_safe\n       else\n         ''\n       end\n  --\n  1.7.5.4\n", "created_at": "2011-06-09 02:00:17", "user": 16582, "id": 1331401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336304", "text": "As we're trying to fix the release ASAP, I've fixed it in these instead: [8c8652c] [66dbef6] [3d82d81]\n\nThe patch there and pull request lack the check whether string is a SafeBuffer or not before trying to mark it safe, or we will expose to the attack again.\n\nThanks again for sending it and reporting it.\n", "created_at": "2011-06-09 18:46:43", "user": 4912, "id": 1336304}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The arel_table method already returns a new correct arel_table using the new table_name.\n", "labels": [], "number": 1577, "updated_at": "2014-07-03 04:51:01", "user": 191614, "closed_at": "2011-06-09 06:33:51", "id": 1026182, "title": "Instance variable not used.", "url": "https://api.github.com/repos/rails/rails/issues/1577", "created_at": "2011-06-08 20:04:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi there,\n\nTrying to get the compressor to work I found this in a lot of blog posts etc:\n\n```\nconfig.assets.css_compressor = :scss\n```\n\nHowever, that doesn't work, since Sprockets seems to take that exact Symbol and try to call `compress` on it.\nIt seems like `expand_css_compressor` in actionpack/lib/sprockets/railtie.rb shouldn't just return the sym, though there is probably a reason for it that I don't know.\n\nThis was just a gotcha that took me some time to figure out, so just wanted to check if this was expected behavior.\n\nThanks!\n", "labels": [], "number": 1578, "updated_at": "2011-06-10 18:20:05", "user": 64594, "closed_at": "2011-06-10 18:20:05", "id": 1026422, "title": "config.assets.css_compressor = :scss", "url": "https://api.github.com/repos/rails/rails/issues/1578", "created_at": "2011-06-08 20:48:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340266", "text": "Take a look to #1626\n", "created_at": "2011-06-10 07:32:30", "user": 160941, "id": 1340266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1344102", "text": "My apologies. Thanks for pointing that out!\n", "created_at": "2011-06-10 18:20:05", "user": 64594, "id": 1344102}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The ActiveSupport Date#freeze monkey-patch tries to call Date's metaprogrammed memoization logic every time you call Date#freeze. As a result, you can't do this:\n\n`> Date.today.freeze.freeze\nTypeError: can't modify frozen object\n        from rails/activesupport/lib/active_support/core_ext/date/freeze.rb:22:in `instance_variable_set'\n        from rails/activesupport/lib/active_support/core_ext/date/freeze.rb:22:in `freeze'\n        from rails/activesupport/lib/active_support/core_ext/date/freeze.rb:20:in `each'\n        from rails/activesupport/lib/active_support/core_ext/date/freeze.rb:20:in `freeze'\n        from (irb):2`\n\nThe fix is simple; check to see if we've already frozen the object and don't run the memoization logic twice. Patch and unit test are attached.\n", "labels": [], "number": 1579, "updated_at": "2014-06-26 08:26:13", "user": 74217, "closed_at": "2011-06-09 06:36:16", "id": 1026546, "title": "Date#freeze fails when called more than once in 1.8", "url": "https://api.github.com/repos/rails/rails/issues/1579", "created_at": "2011-06-08 21:03:27", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I got burned by the fact that `Enumerable#index_by` does not return an `Enumerator` if called without block, so I took a moment to fix the issues I could find in the `Enumerable` extension, namely:\n\n`#index_by`, `#group_by` and `#each_with_object` now return `Enumerator`s as they should.\n\n`#many?` iterates only as much as needed to determine the result. It also doesn't rely on `#size` (which not all `Enumerable`s respond to).\n\nThe patch also improves the robustness of the tests. `#each_with_object` is also optimized by not capturing the block.\n\nProblems not addressed:\n- most extensions assume that the `Enumerable` yields only one argument.\n- the definition of `#many?` can be confusing because the form without block doesn't test for truthiness. Thus `foo.many?` is not necessarily equal to `foo.many?{|x| x}`, and `foo.any?` can be false while `foo.many?` can be true (e.g. `foo = [nil, nil]`). Discounting `nil`/`false` would be ideal, except that it could break compatibility, so I leave this up to the powers that be.\n\nPatch & comments to be found in the [imported issue](https://github.com/rails/rails/issues/893)\n", "labels": [], "number": 1580, "updated_at": "2011-08-09 02:17:36", "user": 33770, "closed_at": "2011-08-09 02:17:36", "id": 1026552, "title": "[PATCH] core_ext/enumerable multiple fixes", "url": "https://api.github.com/repos/rails/rails/issues/1580", "created_at": "2011-06-08 21:04:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638408", "text": "Do you mind resend your patch as a pull request? I was looking into your original patch, but there was so many changes in there. I think the patch should change only necessary stuff in the project.\n\nThank you.\n", "created_at": "2011-07-23 19:19:26", "user": 4912, "id": 1638408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638548", "text": "All these patches are necessary. Let me know which commit(s) you feel is not. \n\nPull request: https://github.com/rails/rails/pull/2217\n", "created_at": "2011-07-23 19:58:40", "user": 33770, "id": 1638548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1760175", "text": "Merged by @tenderlove, thanks!\n", "created_at": "2011-08-09 02:17:36", "user": 33770, "id": 1760175}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "If `foo.eql?(bar)` returns `true` then so should `bar.eql?(foo)`.\nMoreover, `foo.hash` must then be the same as `bar.hash`.\nOtherwise the Hash lookup will fail. `TimeWithZone` want to act like a `Time`, but currently:\n\n```\nbar = Time.utc(2000)\nfoo = bar.in_time_zone\n\nfoo.eql?(bar) # => true\nbar.eql?(foo) # => false\nfoo.hash == bar.hash # => false (only in Ruby 1.9)\n```\n\nThe attached patch fixes this. Since `TimeWithZone` wants to be freely replaceable with a `Time`:\n\n```\nbar.eql?(foo) # => now true\nfoo.hash == bar.hash # => now true (even in Ruby 1.9)\n```\n\nThere is also a problem with `DateTime` vs `TimeWithZone`:\n\n```\ndt = foo.to_datetime\nfoo.eql?(dt) # => true\ndt.eql?(foo) # => false\ndt.hash == foo # => false.\n```\n\nSince `DateTime` and a `Time` are both builtin classes and that a `Time` is never `eql?` to a `DateTime` or vice-versa (as per the doc and the implementation), the patch also insures that a `TimeWithZone` can not be `eql?` to a `DateTime`:\n\n```\nfoo.eql?(dt) # => now false\n```\n\nPatch & comments to be found in the [imported issue](https://github.com/rails/rails/issues/905)\n", "labels": [], "number": 1581, "updated_at": "2011-11-22 21:09:57", "user": 33770, "closed_at": "2011-11-22 21:09:57", "id": 1026567, "title": "[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}", "url": "https://api.github.com/repos/rails/rails/issues/1581", "created_at": "2011-06-08 21:08:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2840720", "text": "Merged by @wycats after https://github.com/rails/rails/pull/3725, thanks!\n", "created_at": "2011-11-22 21:09:57", "user": 33770, "id": 2840720}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The documentation for `AbstractController::Helpers#helper` states that `:all` is a special parameter.\n\nIndeed, from a `ActionController::Base`, `helper :all` will use all the helper files. It even does that by default in Rails 3 / 3.1rc1.\n\nOn the other hand, this doesn't work from `ActionMailer::Base` and we get:\n\n```\nMissing helper file helpers/all_helper.rb\n```\n\nNote that `ActionMailer::Base < AbstractController::Helpers` is true.\n\n1) It would be nice if `helper :all` could work for `ActionMailer::Base` also.\n\n2) If it did, maybe `ActionMailer::Base` should call it by default, as `ActionController` does\n\n3) If it wont, and `:all` can not handled by all descendants of `AbstractController::Helpers`, then the doc should be updated to reflect this.\n\nComments to be found in the [imported issue](https://github.com/rails/rails/issues/928)\n", "labels": ["actionmailer"], "number": 1582, "updated_at": "2013-06-14 12:37:00", "user": 33770, "closed_at": "2013-06-14 12:37:00", "id": 1026602, "title": "helper :all from ActionMailer", "url": "https://api.github.com/repos/rails/rails/issues/1582", "created_at": "2011-06-08 21:14:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3062124", "text": "@marcandre Not sure if this is still a issue. can you please confirm???\n", "created_at": "2011-12-08 13:10:37", "user": 3948, "id": 3062124}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3281528", "text": "Closing this. Please feel free to reopen it again if issue still exists for you.\n\nThanks!\n", "created_at": "2011-12-27 13:58:42", "user": 3948, "id": 3281528}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11141189", "text": "This is still an issue:\nI'm on OSX running:\nRuby 1.9.3-p194 (w/ Falcon memory mgmt patch)\nRails 3.1.4  and Rails 3.2.9\n\nmy_mailer.rb\nclass MyMailer < ActionMailer::Base\n  helper :all\nend\n\nmy_mailer_spec.rb\nrequire 'spec_helper'\ndescribe MyMailer do\n\nend\n\n↪ rspec ./spec/mailers/my_mailer_spec.rb \n/Users/jthomas/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.1.4/lib/active_support/dependencies.rb:306:in `rescue in depend_on': Missing helper file helpers/all_helper.rb (LoadError)\n\nas well as:\n\n/Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:317:in `rescue in depend_on': Missing helper file helpers/all_helper.rb \n\nFWIW, here are the rest of the gory details:\n(LoadError) from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:312:in `depend_on' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:225:in`require_dependency' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/actionpack-3.2.9/lib/abstract_controller/helpers.rb:135:in `block in modules_for_helpers' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/actionpack-3.2.9/lib/abstract_controller/helpers.rb:131:in`map!' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/actionpack-3.2.9/lib/abstract_controller/helpers.rb:131:in `modules_for_helpers' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/actionpack-3.2.9/lib/abstract_controller/helpers.rb:95:in`helper' from /Users/<username>/dev/test/www/app/mailers/my_mailer.rb:8:in `<class:MyMailer>' from /Users/<username>/dev/test/www/app/mailers/my_mailer.rb:4:in`<top (required)>' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:251:in `require' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:251:in`block in require' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:236:in `load_dependency' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:251:in`require' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:359:in `require_or_load' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:313:in`depend_on' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/activesupport-3.2.9/lib/active_support/dependencies.rb:225:in `require_dependency' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/engine.rb:439:in`block (2 levels) in eager_load!' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/engine.rb:438:in `each' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/engine.rb:438:in`block in eager_load!' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/engine.rb:436:in `each' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/engine.rb:436:in`eager_load!' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/application/finisher.rb:53:in `block in <module:Finisher>' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/initializable.rb:30:in`instance_exec' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/initializable.rb:30:in `run' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/initializable.rb:55:in`block in run_initializers' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/initializable.rb:54:in `each' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/initializable.rb:54:in`run_initializers' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/application.rb:136:in `initialize!' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/railties-3.2.9/lib/rails/railtie/configurable.rb:30:in`method_missing' from /Users/<username>/dev/test/www/config/environment.rb:5:in `<top (required)>' from /Users/<username>/dev/test/www/spec/spec_helper.rb:28:in`require' from /Users/<username>/dev/test/www/spec/spec_helper.rb:28:in `block in <top (required)>' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/spork-1.0.0rc2/lib/spork.rb:24:in`prefork' from /Users/<username>/dev/test/www/spec/spec_helper.rb:7:in `<top (required)>' from /Users/<username>/dev/test/www/spec/mailers/my_mailer_spec.rb:4:in`require' from /Users/<username>/dev/test/www/spec/mailers/my_mailer_spec.rb:4:in `<top (required)>' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in`load' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `block in load_spec_files' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in`map' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/configuration.rb:780:in `load_spec_files' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/command_line.rb:22:in`run' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/runner.rb:69:in `run' from /Users/<username>/.rvm/gems/ruby-1.9.3-p194-perf@www/gems/rspec-core-2.11.1/lib/rspec/core/runner.rb:8:in`block in autorun'\n", "created_at": "2012-12-07 18:39:47", "user": 83524, "id": 11141189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18570807", "text": ":+1: this is a confusing difference.\n", "created_at": "2013-05-28 18:36:28", "user": 94505, "id": 18570807}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18630466", "text": "@rafaelfranca thanks for re-opening. \n\nIt looks like #928 is the same issue, imported from Lighthouse and @neerajdotname had a fix mentioned in the comments at https://github.com/neerajdotname/rails/commits/fix_for_6575, but that link is now 404ing. Maybe he can resurrect that branch?\n", "created_at": "2013-05-29 16:53:56", "user": 94505, "id": 18630466}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18631296", "text": "@phillbaker I remember having worked on it. I don't have that fix locally too. I'll work on it.\n", "created_at": "2013-05-29 17:07:57", "user": 6399, "id": 18631296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19454610", "text": "I honestly can't see the appeal on including `helper :all` on ActionMailer even because it will include a bunch of unrelated helpers into the mailer. As @arunagw pull requests shows, all you need to do is to include `ActionController::Helpers` functionality into your mailer, so you can just go ahead and do it. :)\n", "created_at": "2013-06-14 12:37:00", "user": 9582, "id": 19454610}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Currently, the following doesn't raise any error:\n\n```\nt = Time.now.in_time_zone(\"There is no such timezone\"); t.utc\n```\n\nMany other methods of `TimeWithZone` will raise a `NoMethodError` as soon as they try to access the timezone (e.g. `t.inspect`).\n\nIt should not be possible to create a `TimeWithZone` with an invalid timezone.\n\nPatch & comments to be found in the [imported issue](https://github.com/rails/rails/issues/927)\n", "labels": [], "number": 1583, "updated_at": "2011-07-11 23:01:42", "user": 33770, "closed_at": "2011-07-11 23:01:39", "id": 1026612, "title": "[PATCH] TimeWithZone should not accept unrecognized time zones", "url": "https://api.github.com/repos/rails/rails/issues/1583", "created_at": "2011-06-08 21:17:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550712", "text": "Hey the LH patch doesn't apply cleanly can you rebase it?\n", "created_at": "2011-07-11 22:52:49", "user": 52642, "id": 1550712}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550771", "text": "Oh, it looks like you have pushed it (1c4db4d7), thanks!\n", "created_at": "2011-07-11 23:01:42", "user": 33770, "id": 1550771}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixtures created by the rails generators are usually valid, except if STI is used. Indeed, the default value `\"MyString\"` is not appropriate for a column of name `\"type\"`.\n\nThis patch changes the default value to `\"\"` for columns with the special name `type`.\n\nPatch & comments to be found in the [imported issue](https://github.com/rails/rails/issues/907)\n", "labels": [], "number": 1584, "updated_at": "2011-07-11 22:53:40", "user": 33770, "closed_at": "2011-07-11 22:48:17", "id": 1026623, "title": "[PATCH] Fix fixture default value for 'type' column", "url": "https://api.github.com/repos/rails/rails/issues/1584", "created_at": "2011-06-08 21:19:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550681", "text": "pushed\n", "created_at": "2011-07-11 22:48:17", "user": 52642, "id": 1550681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550723", "text": "Thanks\n", "created_at": "2011-07-11 22:53:40", "user": 33770, "id": 1550723}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hi!\n\nI found this problem in Rails 3.1.0.rc1 with Ruby 1.9.2p0.\n\nI have simple model \"Article\" and and it has many \"Sources\". I want to store sources into database serialized as simple Hash.\n\n``` ruby\n# article.rb\nclass Article < ActiveRecord::Base\n  serialize :sources\n  # ... #\nend\n```\n\n``` ruby\n# source.rb\nclass Source\n  include ActiveModel::Validations\n  attr_accessor :title, :url\n  validates_presence_of :title, :url\nend\n```\n\nNow i store like this...\n\n``` ruby\na = Article.new\na.sources = Array.new\n\ns = Source.new\ns.title = \"github\"\ns.url = \"http://github.com\"\n\na.sources << s\na.save\n```\n\nIf i later retrive this article i get something like...\n\n```\nruby-1.9.2-head :054 > s2 = Article.sources.first\n=> #<Syck::Object:0x000001044d2218 @class=\"Source\", @ivars={\"errors\"=>#<ActiveModel::Errors:0x000001044d1b10 @base=#<Syck::Object:0x000001044d2218 ...>, @messages={}>, \"title\"=>\"github\", \"url\"=>\"http://github.com\", \"validation_context\"=>nil}>\n```\n\nAnd I cant basically do nothing about \"sources\". Becouse object is \"serialized\" with Syck::Object... \nLater i found out if I use...\n\n``` ruby\nrequire_dependency \"source\" \n```\n\n... inside Article model it serializes just the way it should.\n\nI don't know if this is really a bug. But it sure gave me a headache.\n\nI found some notes here:\nhttp://stackoverflow.com/questions/4705867/rails-doesnt-load-classes-on-deserializing-yaml-marshal-objects\n\nIf this is a bug - hope u can fix it. :)\n", "labels": ["activerecord"], "number": 1585, "updated_at": "2013-04-12 22:37:19", "user": 225946, "closed_at": "2013-04-12 22:30:58", "id": 1026917, "title": "ActiveRecord#serialize method and Ruby 1.9.x / Rails 3.1.0.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1585", "created_at": "2011-06-08 21:58:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366517", "text": "This bug has always existed (we have it in 2.3/1.8.7).  But it definitely needs to be addressed on the \"least surprise\" principle.\n", "created_at": "2011-06-14 14:58:07", "user": 491483, "id": 1366517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398046", "text": "Is this still an issue @otobrglez?\n", "created_at": "2012-04-28 16:36:43", "user": 651597, "id": 5398046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399636", "text": "More specifically, is it an issue with rails 3.2 or above?\n", "created_at": "2012-04-28 19:51:57", "user": 27786, "id": 5399636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5452803", "text": "Fun, I just ran into this today! I believe I've confirmed that it is still an issue in rails 3.2.2.\n\nI followed the procedure laid out in the stack overflow question, here are the files I used/generated:\n\nhttps://gist.github.com/2573092\n\nRunning the serializing_test will produce that yaml file, and trying to load it in development raises ArgumentError: undefined class/module MyModel and loading it in test works as expected.\n", "created_at": "2012-05-02 02:22:46", "user": 193874, "id": 5452803}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6767382", "text": "@otobrglez do you put `source.rb` in `app` or `lib` folder?\n", "created_at": "2012-07-04 20:33:58", "user": 840464, "id": 6767382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6767451", "text": "@frodsan from @otobrglez's [stack overflow question](http://stackoverflow.com/questions/4705867/rails-doesnt-load-classes-on-deserializing-yaml-marshal-objects) it looks lite it's in app.\n\nwhy do you ask?\n", "created_at": "2012-07-04 20:38:42", "user": 193874, "id": 6767451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6767465", "text": "Hi @carols10cents, i just want to reproduce the issue. Thanks :)\n", "created_at": "2012-07-04 20:39:35", "user": 840464, "id": 6767465}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6771095", "text": "Works fine with master (Rails 4.0.0.beta):\n\n```\nLoading development environment (Rails 4.0.0.beta)\n>> a = Article.new\n=> #<Article id: nil, sources: nil, created_at: nil, updated_at: nil>\n>> a.sources = Array.new\n=> []\n>> s = Source.new\n=> #<Source:0x007fabadc72148>\n>> s.title = \"github\"\n=> \"github\"\n>> s.url = \"http://github.com\"\n=> \"http://github.com\"\n>> a.sources << s\n=> [#<Source:0x007fabadc72148 @title=\"github\", @url=\"http://github.com\">]\n>> a.save\n   (0.1ms)  begin transaction\n  SQL (46.3ms)  INSERT INTO \"articles\" (\"created_at\", \"sources\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 05 Jul 2012 03:52:56 UTC +00:00], [\"sources\", \"---\\n- !ruby/object:Source\\n  title: github\\n  url: http://github.com\\n\"], [\"updated_at\", Thu, 05 Jul 2012 03:52:56 UTC +00:00]]\n   (256.3ms)  commit transaction\n=> true\n\n>> s2 = a.sources.first\n=> #<Source:0x007fabaaa9ffa8 @title=\"github\", @url=\"http://github.com\">\n>> s2.class\n=> Source\n```\n", "created_at": "2012-07-05 03:54:18", "user": 840464, "id": 6771095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6771141", "text": "Also, works fine with 3-2-stable (Rails 3.2.6):\n\n```\nLoading development environment (Rails 3.2.6)\n>> a = Article.new\n=> #<Article id: nil, sources: nil, created_at: nil, updated_at: nil>\n>> a.sources = Array.new\n=> []\n>> s = Source.new\n=> #<Source:0x007fe0c63bced8>\n>> s.title = \"github\"\n=> \"github\"\n>> s.url = \"http://github.com\"\n=> \"http://github.com\"\n>> a.sources << s\n=> [#<Source:0x007fe0c63bced8 @title=\"github\", @url=\"http://github.com\">]\n>> a.save\n   (0.1ms)  begin transaction\n  SQL (0.5ms)  INSERT INTO \"articles\" (\"created_at\", \"sources\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 05 Jul 2012 03:59:35 UTC +00:00], [\"sources\", \"---\\n- !ruby/object:Source\\n  title: github\\n  url: http://github.com\\n\"], [\"updated_at\", Thu, 05 Jul 2012 03:59:35 UTC +00:00]]\n   (49.8ms)  commit transaction\n=> true\n\n>> s2 = a.sources.first\n=> #<Source:0x007fe0c608bde0 @title=\"github\", @url=\"http://github.com\">\n>> a.sources\n=> [#<Source:0x007fe0c608bde0 @title=\"github\", @url=\"http://github.com\">]\n>> s2.class\n=> Source\n```\n", "created_at": "2012-07-05 04:01:29", "user": 840464, "id": 6771141}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6771148", "text": "/cc @rafaelfranca @carlosantoniodasilva \n", "created_at": "2012-07-05 04:02:29", "user": 840464, "id": 6771148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6777133", "text": "@frodsan thanks for confirming.\n", "created_at": "2012-07-05 12:08:01", "user": 47848, "id": 6777133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6789839", "text": "@frodsan I was under the impression that this issue had to do with serialization/deserialization, and I don't see where you're doing that in your reproduction, unless I'm misunderstanding something.\n\nI'm still able to reproduce the issue as outlined in my comment in rails 3.2.6.\n\nPlease reopen this issue, @rafaelfranca!\n", "created_at": "2012-07-05 20:33:11", "user": 193874, "id": 6789839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6789899", "text": "@carols10cents i'm reproducing the case that @otobrglez posted in the description. I'm not sure, but i think you should open a new one with your case.\n", "created_at": "2012-07-05 20:35:48", "user": 840464, "id": 6789899}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6790385", "text": "I don't think it's appropriate to close an issue when we do have someone that's seeing the same thing, especially when that person provides a reproduction.\n\nCan we figure out if it's actually a different issue or not before hastily closing?\n", "created_at": "2012-07-05 20:57:18", "user": 27786, "id": 6790385}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6790627", "text": "Hey @steveklabnik, if you look at the issue's description, it says \"ActiveRecord#serialize\" and that's what i tested. I just recently saw the gist provided by @carols10cents and i think is a different issue.\n", "created_at": "2012-07-05 21:06:25", "user": 840464, "id": 6790627}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6791350", "text": "@frodsan - your example doesn't mimic the problem @otobrglez pointed out.  It doesn't appear that your code deserializes anywhere.  Specifically, you make this call:\n\n```\n>> s2 = a.sources.first\n```\n\ninstead of making this call:\n\n```\n>> s2 = Article.sources.first\n```\n\nThe former returns the `sources` value that is already in memory.  The latter retrieves the serialized value.\n", "created_at": "2012-07-05 21:35:01", "user": 169093, "id": 6791350}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6792406", "text": "@carols10cents sorry I didn't read the entire thread.\n\n@steveklabnik thanks to reopen :heart:\n", "created_at": "2012-07-05 22:18:13", "user": 47848, "id": 6792406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6793293", "text": "Here is my reproduction of the issue in Rails 3.2.6:\n\nThis is the issue from the stackoverflow question that @otobrglez posted. The tmp/object.yml file contains the output of a serialization:\n\n```\n--- !ruby/object:MyModel\nid: my model\n```\n\nThere is a model in app/models/my_model.rb that contains:\n\n```\nclass MyModel\n  attr_accessor :id\nend\n```\n\nIf you start the console in development, this is the reproduction of the issue (that I was able to do in Rails 3.2.6):\n\n```\n$ rails c\nLoading development environment (Rails 3.2.6)\n1.9.2p290 :001 > object = YAML.load_file \"#{Rails.root}/tmp/object.yml\"\nArgumentError: undefined class/module MyModel\n```\n\nAnd if you start the console in test, you can see the behavior that I would expect in development if this issue were fixed:\n\n```\n$ RAILS_ENV=test rails c\nLoading test environment (Rails 3.2.6)\n1.9.2p290 :001 > object = YAML.load_file \"#{Rails.root}/tmp/object.yml\"\n => #<MyModel:0x00000102c61af8 @id=\"my model\"> \n```\n", "created_at": "2012-07-05 23:03:21", "user": 193874, "id": 6793293}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16321041", "text": "So. \n\n@calebthompson and I were looking into this just now, and I happened to find this test:\n\n```\n    def test_load_doesnt_handle_undefined_class_or_module\n         coder = YAMLColumn.new\n         missing_class_yaml = '--- !ruby/object:DoesNotExistAndShouldntEver {}\\n'\n         assert_raises(ArgumentError) do\n           coder.load(missing_class_yaml)\n         end\n    end\n```\n\nSo, the current behavior is actually expected. If you come across this, best not to rely on the serialized class not being autoloaded. Make sure to use `require_dependency` and it'll all be good.\n", "created_at": "2013-04-12 22:30:58", "user": 27786, "id": 16321041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16321223", "text": "Basically, if your namespace doesn't already know about the class then YAML can't and shouldn't shouldn't be able to deserialize and object of that type.\n", "created_at": "2013-04-12 22:37:19", "user": 711717, "id": 16321223}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Just ran `bundle update rails` from 3.1.0.rc1 to 3.1.0.rc3 and got this error on the first page refresh after restarting my server.  Application stack trace here: https://gist.github.com/1015615\n", "labels": [], "number": 1586, "updated_at": "2011-06-08 22:38:49", "user": 300, "closed_at": "2011-06-08 22:37:37", "id": 1027062, "title": "'Cannot modify SafeBuffer in place' in 3.1.0.rc3", "url": "https://api.github.com/repos/rails/rails/issues/1586", "created_at": "2011-06-08 22:35:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1330526", "text": "Please update your HAML gem\n\n`bundle update haml`\n", "created_at": "2011-06-08 22:37:36", "user": 4912, "id": 1330526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1330537", "text": "Yep that did it, thanks!\n", "created_at": "2011-06-08 22:38:49", "user": 300, "id": 1330537}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I am using [Cells plugin](https://github.com/apotonick/cells) and I have noticed that in Rails 3.1.0 (checked with both RC1 and RC2) asset generation fails silently when the plugin is declared as dependency in Gemfile. There are no error messages in the log file or on the console (when running with rake assets:precompile). public/assets directory just does not get created. \n\nI've dug into the issue and there doesn't seem to be anything wrong with Cells. The plugin just adds two initializers and this makes a deeper problem surface. Assets are not being compiled because config.assets.paths is still empty when Sprockets' :after_initialize hook is executed and that hook expects them to be there already. The initializer that sets the paths, surprisingly, runs after the hook.\n\nThe problem is that initializers from [Rails::Application::Finisher](https://github.com/rails/rails/blob/master/railties/lib/rails/application/finisher.rb) (and in particular :finisher_hook that executes :after_initialize hooks) are not guaranteed to run after all the other initializers like they are expected to. \n\nFinisher is properly placed at the end of the list when the list is returned by [Rails::Application.initializers()](https://github.com/rails/rails/blob/master/railties/lib/rails/application.rb)\n\n``` ruby\n    def initializers\n      Bootstrap.initializers_for(self) +\n      super +\n      Finisher.initializers_for(self)\n    end\n```\n\nbut the list is later tsorted in [Rails::Initializable::Initializer.run_initializers()](https://github.com/rails/rails/blob/master/railties/lib/rails/initializable.rb):\n\n``` ruby\n    def run_initializers(*args)\n      return if instance_variable_defined?(:@ran)\n      initializers.tsort.each do |initializer|\n        initializer.run(*args)\n      end\n      @ran = true\n    end\n```\n\nSome initializers are constrained with :before/:after parameters that make tsort order them correctly. There are none in Finisher though.\n\nIndeed, in an empty application (generated with rails new) everything is ok on my system: Finisher's initializers are lucky and stay at the end even after the tsort.\n\n``` ruby\nirb:001:0> initializers.tsort.each { |i| pp i.block };0                                                                                                                 \n```\n\n```\n#<Proc:0x00000000b7df68@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:474>                     \n#<Proc:0x00000000b7df68@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:474>                     \n#<Proc:0x00000000b7dd10@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:486>                     \n#<Proc:0x00000000b7dd10@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:486>                     \n#<Proc:0x00000000b7d8d8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:496>                     \n#<Proc:0x00000000b7d8d8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:496>                     \n#<Proc:0x00000000b7d180@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:507>                     \n#<Proc:0x00000000b7d180@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:507>                     \n#<Proc:0x00000000b7ceb0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:511>                     \n#<Proc:0x00000000b7ceb0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:511>                     \n#<Proc:0x00000000b7be48@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:519>                     \n#<Proc:0x00000000b7be48@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:519>                     \n#<Proc:0x00000002d45380@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:10>       \n#<Proc:0x00000002d452b8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:12>       \n#<Proc:0x00000002d451f0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:19>       \n#<Proc:0x00000002d45128@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:24>       \n#<Proc:0x00000002d45060@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:44>       \n#<Proc:0x0000000187b9e0@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:37>         \n#<Proc:0x0000000187b710@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:44>         \n#<Proc:0x0000000187b3f0@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:48>         \n#<Proc:0x0000000187ae28@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:53>         \n#<Proc:0x0000000187a680@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:66>         \n#<Proc:0x00000001876918@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:74>         \n#<Proc:0x00000001876080@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:81>         \n#<Proc:0x00000002d44f98@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:54>       \n#<Proc:0x00000002d44ed0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:63>       \n#<Proc:0x00000002d44e08@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:67>       \n#<Proc:0x000000019ac968@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/i18n_railtie.rb:21>  \n#<Proc:0x00000001a35bf0@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:11>       \n#<Proc:0x00000001a3a808@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:15>       \n#<Proc:0x00000001a455c8@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:47>       \n#<Proc:0x00000001f35a10@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_dispatch/railtie.rb:15>         \n#<Proc:0x00000000744dc0@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:11>             \n#<Proc:0x00000000744aa0@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:19>             \n#<Proc:0x00000000744578@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:31>             \n#<Proc:0x00000000743d58@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:39>             \n#<Proc:0x0000000188b8b8@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:13>       \n#<Proc:0x0000000188b520@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:17>       \n#<Proc:0x0000000188b070@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:21>       \n#<Proc:0x0000000188d870@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/sprockets/railtie.rb:15>               \n#<Proc:0x0000000188aaf8@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:42>       \n#<Proc:0x00000001090578@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:9>          \n#<Proc:0x0000000108fbf0@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:13>         \n#<Proc:0x0000000108f5b0@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:37>         \n#<Proc:0x00000000f42608@/usr/lib/ruby/gems/1.9.1/gems/activeresource-3.1.0.rc2/lib/active_resource/railtie.rb:8>      \n#<Proc:0x00000000ab36f0@/usr/lib/ruby/gems/1.9.1/gems/sass-rails-3.1.0.rc.2/lib/sass/rails/railtie.rb:16>             \n#<Proc:0x00000000ab3448@/usr/lib/ruby/gems/1.9.1/gems/sass-rails-3.1.0.rc.2/lib/sass/rails/railtie.rb:36>             \n#<Proc:0x00000000b7b498@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:524>                     \n#<Proc:0x00000000b7b498@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:524>                     \n#<Proc:0x00000000b7af20@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:536>                     \n#<Proc:0x00000000b7af20@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:536>                     \n#<Proc:0x00000000b79f08@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:542>                     \n#<Proc:0x00000000b79f08@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:542>                     \n#<Proc:0x00000000b78068@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:548>                     \n#<Proc:0x00000000b78068@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:548>                     \n#<Proc:0x00000002d5efd8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:6>         \n#<Proc:0x00000002d5ef10@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:10>        \n#<Proc:0x00000002d5ee48@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:22>        \n#<Proc:0x00000002d5ed80@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:28>        \n#<Proc:0x00000002d5ecb8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:36>        \n#<Proc:0x00000002d5ebf0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:40>        \n#<Proc:0x00000002d5eb28@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:44>        \n#<Proc:0x00000002d5ea60@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:48>        \n#<Proc:0x00000002d5e998@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:55>        \n#<Proc:0x00000002d5e8d0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:62>        \n#<Proc:0x00000002d5e808@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:69>        \n```\n\nBut when we add Cells to the Gemfile, its initializers and the ones from from [Rails::Engine](https://github.com/rails/rails/blob/master/railties/lib/rails/engine.rb) (including :append_assets_path that sets config.assets.paths) are placed after Finisher's ones.\n\n```\n#<Proc:0x00000000cb6650@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:474>                   \n#<Proc:0x00000000cb6650@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:474>                   \n#<Proc:0x00000000cb64c0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:486>                   \n#<Proc:0x00000000cb64c0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:486>                   \n#<Proc:0x00000000cb6240@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:496>                   \n#<Proc:0x00000000cb6240@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:496>                   \n#<Proc:0x00000000cb5e80@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:507>                   \n#<Proc:0x00000000cb5e80@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:507>                   \n#<Proc:0x00000000caf828@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:511>                   \n#<Proc:0x00000000caf828@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:511>                   \n#<Proc:0x00000000caf2b0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:519>                   \n#<Proc:0x00000000caf2b0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:519>                   \n#<Proc:0x00000002debc08@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:10>     \n#<Proc:0x00000002debd20@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:12>     \n#<Proc:0x00000002debeb0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:19>     \n#<Proc:0x00000002debff0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:24>     \n#<Proc:0x00000002dec0e0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:44>     \n#<Proc:0x0000000190b518@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:37>       \n#<Proc:0x0000000190afc8@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:44>       \n#<Proc:0x0000000190a7a8@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:48>       \n#<Proc:0x0000000190a230@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:53>       \n#<Proc:0x00000001900500@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:66>       \n#<Proc:0x000000018ffdd0@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:74>       \n#<Proc:0x000000018ff290@/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc2/lib/active_record/railtie.rb:81>       \n#<Proc:0x00000002dec220@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:54>     \n#<Proc:0x00000002dec4a0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:63>     \n#<Proc:0x00000002dec680@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/bootstrap.rb:67>     \n#<Proc:0x000000021b26f8@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/i18n_railtie.rb:21>\n#<Proc:0x000000021b1d20@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:11>     \n#<Proc:0x000000021b1b90@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:15>     \n#<Proc:0x000000021b1a00@/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc2/lib/active_support/railtie.rb:47>     \n#<Proc:0x000000021056b0@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_dispatch/railtie.rb:15>       \n#<Proc:0x000000021f5fe8@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:11>           \n#<Proc:0x000000021f5e58@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:19>           \n#<Proc:0x000000021f5c00@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:31>           \n#<Proc:0x000000021f5980@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_view/railtie.rb:39>           \n#<Proc:0x0000000191d1a0@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:13>     \n#<Proc:0x0000000191cf20@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:17>     \n#<Proc:0x0000000191cc78@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:21>     \n#<Proc:0x0000000191e550@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/sprockets/railtie.rb:15>             \n#<Proc:0x0000000191c610@/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc2/lib/action_controller/railtie.rb:42>     \n#<Proc:0x00000000d9f148@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:9>        \n#<Proc:0x00000000d9e5e0@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:13>       \n#<Proc:0x00000000d9df78@/usr/lib/ruby/gems/1.9.1/gems/actionmailer-3.1.0.rc2/lib/action_mailer/railtie.rb:37>       \n#<Proc:0x00000000cf3f78@/usr/lib/ruby/gems/1.9.1/gems/activeresource-3.1.0.rc2/lib/active_resource/railtie.rb:8>    \n#<Proc:0x00000002aecae8@/usr/lib/ruby/gems/1.9.1/gems/sass-rails-3.1.0.rc.2/lib/sass/rails/railtie.rb:16>           \n#<Proc:0x00000002aeca20@/usr/lib/ruby/gems/1.9.1/gems/sass-rails-3.1.0.rc.2/lib/sass/rails/railtie.rb:36>           \n#<Proc:0x00000002e46b80@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:6>       \n#<Proc:0x00000002e46c98@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:10>      \n#<Proc:0x00000002e46d88@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:22>      \n#<Proc:0x00000002e46ea0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:28>      \n#<Proc:0x00000002e46f68@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:36>      \n#<Proc:0x00000002e47080@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:40>      \n#<Proc:0x00000002e47198@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:44>      \n#<Proc:0x00000002e47288@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:48>      \n#<Proc:0x00000002e473a0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:55>      \n#<Proc:0x00000002e47490@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:62>      \n#<Proc:0x00000002b53298@/tmp/cells/lib/cells/railtie.rb:8>                                                          \n#<Proc:0x00000002b536f8@/tmp/cells/lib/cells/railtie.rb:14>                                                         \n#<Proc:0x00000000caecc0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:524>                   \n#<Proc:0x00000000caecc0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:524>                   \n#<Proc:0x00000000cae608@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:536>                   \n#<Proc:0x00000000cae608@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:536>                   \n#<Proc:0x00000000cadfa0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:542>                   \n#<Proc:0x00000000cadfa0@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:542>                   \n#<Proc:0x00000000cada00@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:548>                   \n#<Proc:0x00000000cada00@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/engine.rb:548>                   \n#<Proc:0x00000002e475a8@/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc2/lib/rails/application/finisher.rb:69>      \n```\n", "labels": [], "number": 1587, "updated_at": "2012-04-28 03:50:07", "user": 137030, "closed_at": "2012-04-28 03:50:07", "id": 1027306, "title": "after_initialize hooks sometimes get executed during initialization", "url": "https://api.github.com/repos/rails/rails/issues/1587", "created_at": "2011-06-08 23:26:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335661", "text": "Update: it turns out that Cells does not break the initialization order just by accident but because it explicitly wants to run its initializers after Finisher's :set_routes_reloader.\n\nFrom [Cells' railtie](https://github.com/apotonick/cells/blob/master/lib/cells/railtie.rb):\n\n``` ruby\nmodule Cells\n  class Railtie < Rails::Railtie\n    options = {}\n    options[:after] = :set_routes_reloader if Cells.rails3_1?\n   ...\n    <snip>\n    ...\n  end\nend\n```\n\nWhile Cells might be better served by using :after_initialize hook rather than an initializer, this issue shows that :finisher_hook lacks some constraints. Other initializers, even those that are expected to run before it, may push it down in the execution order. \n\nMore details here: [pull request 1602](https://github.com/rails/rails/pull/1602)\n", "created_at": "2011-06-09 17:11:24", "user": 137030, "id": 1335661}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5324062", "text": "@cameel Is there still an issue, or can this be closed?\n", "created_at": "2012-04-25 04:18:48", "user": 139443, "id": 5324062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5328487", "text": "The issue with Cells is fixed - it has changed its initializers. I think that it's still possible to break initialization order though. There's nothing that forces finisher hook to be executed as the last initializer so some combinations of constraints may force other initializers to appear after it.\n", "created_at": "2012-04-25 10:47:48", "user": 137030, "id": 5328487}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5394193", "text": "Since this issue was against 3.1 rc versions, and apparently the issue with Cells was fixed, I'm going to close this. Please let us know if you notice any other issue related to this in Rails, and make sure to test latest stable version in this case, and I'll be glad to reopen the discussion. Thanks!\n", "created_at": "2012-04-28 03:50:07", "user": 26328, "id": 5394193}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Secondly it seemed from the method that the intent was to test a case\nwhere layout was declared in a symbol and the method named mention in\nlayout returns nil.\n\nThat case is already covered with class     class WithSymbolReturningNil .\n\nAlso the case of SymbolReturningString is covered with the class\nWithSymbol.\n", "labels": [], "number": 1588, "updated_at": "2014-07-03 04:51:26", "user": 6399, "closed_at": "2011-06-09 06:36:18", "id": 1027516, "title": "class WithSymbolReturningString is not used anywhere in the test.", "url": "https://api.github.com/repos/rails/rails/issues/1588", "created_at": "2011-06-09 00:23:54", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "You can see the expected & actual output: http://twitpic.com/58vm5j\nThe example code is on the rails3.0.9.rc1 branch here: http://bit.ly/leww2A\nThe partial that is rendered is here: http://bit.ly/mpqmYC\n\nAn upgrade to Haml 3.1.2 was necessary too.\n", "labels": [], "number": 1589, "updated_at": "2011-06-15 20:37:26", "user": 18191, "closed_at": "2011-06-09 01:39:23", "id": 1027604, "title": "escape_javascript doesn't work as expected in 3.0.9.rc1", "url": "https://api.github.com/repos/rails/rails/issues/1589", "created_at": "2011-06-09 00:52:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331347", "text": "This is a haml bug, not one in rails.\n\nescape_javascript and html_safe? are entirely orthogonal to one another. Looks more like their fix for haml 3.1.2 is inadvertently returning unsafe strings where previously they were safe.\n", "created_at": "2011-06-09 01:39:23", "user": 197, "id": 1331347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331473", "text": "I've filed a ticket with the HAML folks [here](https://github.com/nex3/haml/issues/402).\n", "created_at": "2011-06-09 02:20:33", "user": 3124, "id": 1331473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1352365", "text": "This is a Rails bug, _not_ a HAML bug.  I'm using a straight js.erb view and having to monkeypatch escape_javascript to get 3.0.8, 3.0.9.rc1, and 3.0.9.rc3 to behave the same as 3.0.7.\n", "created_at": "2011-06-11 18:15:48", "user": 12233, "id": 1352365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1352371", "text": "Try doing this with JQuery and a js.erb view in Rails 3.0.7 and then in Rails 3.0.8, 3.0.9.rc1, or 3.0.9.rc3.  \n$(\"#lightbox_content\").html('<%= escape_javascript(render(:partial => \"form\")) %>');  All exhibit the same behavior as jc00ke was seeing. \n", "created_at": "2011-06-11 18:17:52", "user": 12233, "id": 1352371}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376387", "text": "Nothing to do with HAML. I'm back to 3.0.7. \n", "created_at": "2011-06-15 20:06:49", "user": 473244, "id": 1376387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376506", "text": "Apologies for not updating this ticket after commenting on the core list.  Definitely  not a haml thing, it was our thing.  It's fixed in the 3.0.9.rc releases\n", "created_at": "2011-06-15 20:23:53", "user": 197, "id": 1376506}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376519", "text": "It's been working well on 3.0.9.rc3\n", "created_at": "2011-06-15 20:25:23", "user": 18191, "id": 1376519}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376627", "text": "Shouldn't it be also commited to the stable branch? \n", "created_at": "2011-06-15 20:37:26", "user": 473244, "id": 1376627}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Magic encoding comment required in case schema includes utf-8 characters (e.g. for default column value).\n", "labels": [], "number": 1590, "updated_at": "2014-07-03 04:51:31", "user": 30756, "closed_at": "2011-06-09 02:50:23", "id": 1027797, "title": "Magic encoding comment required in case schema includes utf-8 characters ", "url": "https://api.github.com/repos/rails/rails/issues/1590", "created_at": "2011-06-09 01:54:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331513", "text": "I don't think this is good.  What if the database returns `EUC-JP` schema?\n", "created_at": "2011-06-09 02:35:10", "user": 3124, "id": 1331513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1331538", "text": "Ah, good point. I'll close this pull request in favour of a bug report.\n", "created_at": "2011-06-09 02:50:23", "user": 30756, "id": 1331538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332217", "text": "We should probably ask the database what is the encoding, no?\n", "created_at": "2011-06-09 06:35:32", "user": 9582, "id": 1332217}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This removes a couple of variables being assigned but never used.\n", "labels": [], "number": 1591, "updated_at": "2014-06-16 17:09:39", "user": 83449, "closed_at": "2011-06-09 06:37:34", "id": 1027847, "title": "Fix \"warning: assigned but unused variable\" on AR tests", "url": "https://api.github.com/repos/rails/rails/issues/1591", "created_at": "2011-06-09 02:17:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I have a table that includes a UTF-8 default value for a column\n\n```\nActiveRecord::Schema.define(:version => 20110609012941) do\n  create_table \"invoices\", :force => true do |t|\n    t.string   \"recipient_title\",     :default => \"御中\"\n  end\nend\n```\n\nBecause the dumped schema does not include an encoding magic comment, this creates an error. It should have a magic comment indicating the encoding following from the db encoding.\n", "labels": [], "number": 1592, "updated_at": "2011-07-29 19:24:43", "user": 30756, "closed_at": "2011-07-29 19:24:43", "id": 1027927, "title": "magic comment should be included when dumping db schema", "url": "https://api.github.com/repos/rails/rails/issues/1592", "created_at": "2011-06-09 02:55:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332771", "text": "Shouldn't it be the encoding of the database connection? Might not always be UTF-8.\n", "created_at": "2011-06-09 08:35:23", "user": 6321, "id": 1332771}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332782", "text": "Sorry - got confused between the pull request and issue :-)\n", "created_at": "2011-06-09 08:37:18", "user": 6321, "id": 1332782}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1503620", "text": "I don't think it should be the encoding of database connection. It is the adapter who should care about the database connection. +1 for magic comment in schema.rb. Can find a time to do it if agreed.\n", "created_at": "2011-07-05 13:25:05", "user": 124430, "id": 1503620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1510906", "text": "Can I work on writing a fix for this issue?\n\nThanks\n", "created_at": "2011-07-06 10:45:59", "user": 174703, "id": 1510906}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "A line with foo && bar || baz is equivalent to foo ? bar : baz, but the latter is almost definitely easier to follow. I think it's a clear readability win to switch.\n\nComments welcome!\n", "labels": [], "number": 1593, "updated_at": "2014-07-03 04:51:38", "user": 46677, "closed_at": "2011-06-09 03:29:20", "id": 1027988, "title": "Simplify boolean logic into ternary", "url": "https://api.github.com/repos/rails/rails/issues/1593", "created_at": "2011-06-09 03:23:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi!\n\nTrouble:\n\n``` ruby\nclass Account < ActiveRecord::Base\n  belongs_to :user\n\n  before_create do\n    build_user\n  end\n\nend\nAccount.create # => \nINSERT INTO \"accounts\" (\"created_at\", \"updated_at\", \"user_id\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 09 Jun 2011 04:54:59 UTC +00:00], [\"updated_at\", Thu, 09 Jun 2011 04:54:59 UTC +00:00], [\"user_id\", nil]]\n => #<Account id: 1, user_id: nil, created_at: \"2011-06-09 04:54:59\", updated_at: \"2011-06-09 04:54:59\">\n```\n\n( Only account created )\n\n``` ruby\nclass Account < ActiveRecord::Base\n  belongs_to :user\n\n  before_validation :on => :create do\n    build_user\n  end\n\nend\n\nAccount.create # => \nINSERT INTO \"users\" (\"created_at\", \"name\", \"updated_at\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 09 Jun 2011 04:55:27 UTC +00:00], [\"name\", nil], [\"updated_at\", Thu, 09 Jun 2011 04:55:27 UTC +00:00]]\n  SQL (0.3ms)  INSERT INTO \"accounts\" (\"created_at\", \"updated_at\", \"user_id\") VALUES (?, ?, ?)  [[\"created_at\", Thu, 09 Jun 2011 04:55:27 UTC +00:00], [\"updated_at\", Thu, 09 Jun 2011 04:55:27 UTC +00:00], [\"user_id\", 1]]\n => #<Account id: 2, user_id: 1, created_at: \"2011-06-09 04:55:27\", updated_at: \"2011-06-09 04:55:27\">\n```\n\n( Account and user created )\n\nIs it ok?\n", "labels": [], "number": 1594, "updated_at": "2011-06-09 09:06:35", "user": 348907, "closed_at": "2011-06-09 09:06:34", "id": 1028265, "title": "Saving association in callback method Rails 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1594", "created_at": "2011-06-09 05:06:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332922", "text": "This is to be expected - the `save_belongs_to_association` in `ActiveRecord::AutosaveAssociation` is called in a `before_save` callback itself. The callbacks are executed in the order they are defined so if you move your `before_save` before the association declaration it should work.\n", "created_at": "2011-06-09 09:04:13", "user": 6321, "id": 1332922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332927", "text": "oh. thanks\n", "created_at": "2011-06-09 09:06:34", "user": 348907, "id": 1332927}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1595, "updated_at": "2014-07-03 04:51:43", "user": 9347, "closed_at": "2011-06-09 21:56:37", "id": 1028587, "title": "Don't reinitialize the arel_table unless the table_name changes", "url": "https://api.github.com/repos/rails/rails/issues/1595", "created_at": "2011-06-09 07:03:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1332324", "text": "/cc @tenderlove\n", "created_at": "2011-06-09 07:05:47", "user": 9582, "id": 1332324}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337422", "text": "looking to it.\n", "created_at": "2011-06-09 21:26:56", "user": 3124, "id": 1337422}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337624", "text": "Applied, thanks!\n", "created_at": "2011-06-09 21:56:37", "user": 3124, "id": 1337624}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "something seems either changed or broken in the rc3 compared to rc1.\nwhen e.g. index.js.erb renders out, escape_javascript seems to encode more, then it should.\n\ndo we really have to set raw before every esacape_javascript call, or is that a failure, what is the thought behind it?\nthanks!\n\n``` javascript\n$('.pagination-sections').\nhtml(\"<%= raw escape_javascript render(:partial => 'pagination_top')%>\").\nstop(true, true).effect(\"highlight\", {}, 3000);\n```\n", "labels": [], "number": 1596, "updated_at": "2011-07-11 23:11:30", "user": 339111, "closed_at": "2011-07-11 22:42:55", "id": 1029095, "title": "rails 3.1 rc3 js.erb not rendered like before, needs raw before esacape_javascript", "url": "https://api.github.com/repos/rails/rails/issues/1596", "created_at": "2011-06-09 09:32:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338299", "text": "Seems fixed to me in 3.0.9.rc3 from sikachu's patches in Issue #1600\n", "created_at": "2011-06-10 00:15:12", "user": 16582, "id": 1338299}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550634", "text": "So is this still an issue?, let us know and I will reopen.\n", "created_at": "2011-07-11 22:42:54", "user": 52642, "id": 1550634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550824", "text": "-1 for me, I could remove the \"raw\", and its working for me\n\nAm 12.07.2011 um 00:42 schrieb spastorino:\n\n> So is this still an issue?, let us know and I will reopen.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1596#issuecomment-1550634\n", "created_at": "2011-07-11 23:11:30", "user": 339111, "id": 1550824}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I become the Error Mesage \"Cannot modify SafeBuffer in place\" with the function number_with_delimiter and/or number_with_precision.\n(<%= number_with_delimiter(number_with_precision(artikel.preis*anzahl(\"#{artikel.id}\"), :precision => 2), :delimiter => \".\", :separator => \",\") %>)\nI have the Problem with Rails 3.1 RC3 and the Master.\n", "labels": [], "number": 1597, "updated_at": "2011-06-10 10:33:23", "user": 839591, "closed_at": "2011-06-10 10:33:23", "id": 1029109, "title": "Cannot modify SafeBuffer in place", "url": "https://api.github.com/repos/rails/rails/issues/1597", "created_at": "2011-06-09 09:35:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335295", "text": "Can you post a backtrace - having looked at the source code both those helpers coerce the first argument to a float before doing anything so shouldn't be working on a SafeBuffer. Also what is `artikel.preis*anzahl(\"#{artikel.id}\")` doing?\n", "created_at": "2011-06-09 16:17:32", "user": 6321, "id": 1335295}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335815", "text": "i have the same problem on an other position and on the position i have only artikel.preis as value.\nartikel.preis is a float variable from the database and have the value 172.3\n\ni become the error everytime if i use number_with_delimiter with number_with_precision.\nIf i use only one of the two helpers it will work\n", "created_at": "2011-06-09 17:35:38", "user": 839591, "id": 1335815}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335978", "text": "That's because `number_with_delimiter` and `number_with_precision` return HTML safe strings so you're feeding a safe string into the other helper. However if you look at the code [here](https://github.com/rails/rails/blob/v3.1.0.rc3/actionpack/lib/action_view/helpers/number_helper.rb#L202) and [here](https://github.com/rails/rails/blob/v3.1.0.rc3/actionpack/lib/action_view/helpers/number_helper.rb#L250) you can see that the string is coerced into a `Float` so when `gsub!` is called [here](https://github.com/rails/rails/blob/v3.1.0.rc3/actionpack/lib/action_view/helpers/number_helper.rb#L215) then it should be a normal `String` rather than a `SafeBuffer`, e.g:\n\n``` ruby\n>> Float(\"123.00\".html_safe).to_s.split(\".\")[0].html_safe?\n=> false\n```\n\nPlease post a backtrace so I can see exactly where the error is raised. Anyway why are you nesting the helpers, can't you just use number_with_precision? e.g:\n\n``` ruby\n>> helper.number_with_precision(1234.0, :separator => ',', :delimiter => '.', :precision => 2)\n=> \"1.234,00\"\n```\n", "created_at": "2011-06-09 17:56:13", "user": 6321, "id": 1335978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340548", "text": "oh,  i can use separator and delimiter with number_with_precision too?!\nthx for this info :)\n\ni have edit the code a little bit\n\nhow i write my code with color in github?\n\n<code><%= price(artikel.preis) %></code>\n<code>def price(zahl)\n    x=number_with_precision(zahl, :precision => 2)\n    x=number_with_delimiter(x, :delimiter => \".\", :separator => \",\")\n  end</code>\n\ni think you mean the full trace with backtrace, correct?\n\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/core_ext/string/output_safety.rb:130:in `gsub!'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/helpers/number_helper.rb:215:in`number_with_delimiter'\napp/helpers/application_helper.rb:58:in `price'\napp/views/produkts/_produkt.html.erb:15:in`_app_views_produkts__produkt_html_erb___263552572_20592372'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/template.rb:143:in `block in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:57:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/template.rb:141:in `render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/partial_renderer.rb:265:in`render_partial'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/partial_renderer.rb:237:in `block (2 levels) in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in`block in instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in `block in instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications/instrumenter.rb:20:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in `instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/partial_renderer.rb:236:in `block in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:22:in`wrap_formats'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/partial_renderer.rb:228:in `render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/renderer.rb:41:in`render_partial'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/renderer.rb:15:in `render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/helpers/rendering_helper.rb:24:in`render'\napp/views/warenkorb/index.html.erb:10:in `block in _app_views_warenkorb_index_html_erb__214535296_19209312'\napp/views/warenkorb/index.html.erb:9:in`each'\napp/views/warenkorb/index.html.erb:9:in `_app_views_warenkorb_index_html_erb__214535296_19209312'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/template.rb:143:in`block in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:57:in `instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/template.rb:141:in`render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:40:in `block (2 levels) in render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in`block in instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in `block in instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications/instrumenter.rb:20:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in `instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:33:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:39:in `block in render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:47:in`render_with_layout'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:38:in `render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:12:in`block in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/abstract_renderer.rb:22:in `wrap_formats'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/template_renderer.rb:9:in`render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/renderer.rb:36:in `render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_view/renderer/renderer.rb:17:in`render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/rendering.rb:120:in `_render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/streaming.rb:258:in`_render_template'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/rendering.rb:114:in `render_to_body'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/renderers.rb:30:in`render_to_body'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/compatibility.rb:43:in `render_to_body'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/rendering.rb:99:in`render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/rendering.rb:16:in `render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:40:in`block (2 levels) in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `block in ms'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/1.9.1/benchmark.rb:309:in`realtime'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/core_ext/benchmark.rb:5:in `ms'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:40:in`block in render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:78:in `cleanup_view_runtime'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activerecord/lib/active_record/railties/controller_runtime.rb:24:in`cleanup_view_runtime'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:39:in `render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/implicit_render.rb:10:in`default_render'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/mime_responds.rb:268:in `block in retrieve_response_from_mimes'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/mime_responds.rb:195:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/mime_responds.rb:195:in `respond_to'\napp/controllers/warenkorb_controller.rb:27:in`index'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/implicit_render.rb:4:in `send_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/base.rb:167:in`process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/rendering.rb:10:in `process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/callbacks.rb:18:in`block in process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/callbacks.rb:425:in `_run__992371585__process_action__436524014__callbacks'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/callbacks.rb:386:in`_run_process_action_callbacks'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/callbacks.rb:17:in`process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:30:in `block in process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in`block in instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/notifications.rb:55:in`instrument'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/instrumentation.rb:29:in `process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/params_wrapper.rb:202:in`process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/rescue.rb:17:in `process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activerecord/lib/active_record/railties/controller_runtime.rb:18:in`process_action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/base.rb:121:in `process'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/abstract_controller/rendering.rb:45:in`process'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal.rb:193:in `dispatch'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal/rack_delegation.rb:14:in`dispatch'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_controller/metal.rb:236:in `block in action'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/routing/route_set.rb:65:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/routing/route_set.rb:65:in `dispatch'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/routing/route_set.rb:29:in`call'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:152:in `block in call'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:93:in`block in recognize'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:75:in `optimized_each'\nrack-mount (0.8.1) lib/rack/mount/code_generation.rb:92:in`recognize'\nrack-mount (0.8.1) lib/rack/mount/route_set.rb:141:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/routing/route_set.rb:531:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\nrack (1.3.0) lib/rack/etag.rb:23:in`call'\nrack (1.3.0) lib/rack/conditionalget.rb:25:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/head.rb:14:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/flash.rb:243:in`call'\nrack (1.3.0) lib/rack/session/abstract/id.rb:195:in `context'\nrack (1.3.0) lib/rack/session/abstract/id.rb:190:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/cookies.rb:332:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activerecord/lib/active_record/query_cache.rb:54:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activerecord/lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/callbacks.rb:28:in`block in call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/callbacks.rb:81:in`run_callbacks'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/reloader.rb:68:in`call'\nrack (1.3.0) lib/rack/sendfile.rb:102:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/remote_ip.rb:48:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/railties/lib/rails/rack/logger.rb:13:in`call'\nrack (1.3.0) lib/rack/methodoverride.rb:24:in `call'\nrack (1.3.0) lib/rack/runtime.rb:17:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/activesupport/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\nrack (1.3.0) lib/rack/lock.rb:34:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/actionpack/lib/action_dispatch/middleware/static.rb:53:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/railties/lib/rails/engine.rb:446:in`call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/railties/lib/rails/rack/content_length.rb:16:in `call'\nC:/RailsInstaller/Ruby1.8.7/lib/ruby/gems/1.9.1/bundler/gems/rails-2bda229c2fa1/railties/lib/rails/rack/log_tailer.rb:14:in`call'\nrack (1.3.0) lib/rack/handler/mongrel.rb:77:in `process'\nmongrel-1.2.0.pre2-x86 (mingw32) lib/mongrel.rb:165:in`block in process_client'\nmongrel-1.2.0.pre2-x86 (mingw32) lib/mongrel.rb:164:in `each'\nmongrel-1.2.0.pre2-x86 (mingw32) lib/mongrel.rb:164:in`process_client'\nmongrel-1.2.0.pre2-x86 (mingw32) lib/mongrel.rb:291:in `block (2 levels) in run'\n\nBut now, i change my code and use only the number_with_precision helper, thx again\n", "created_at": "2011-06-10 08:44:35", "user": 839591, "id": 1340548}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In my project, any rake invocation (eg. \"rake -T --trace\") yields the error below. \n\nThis does **not** happen in a fresh app. Here is my Gemfile.lock: https://gist.github.com/1016634\nI'm not sure what other info to provide? \n\n```\nrake aborted!\nuninitialized constant RubyToken::AlreadyDefinedToken\n/Users/jtj/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/rdoc/parsers/parse_rb.rb:273:in `def_token'\n/Users/jtj/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/rdoc/parsers/parse_rb.rb:300\n/Users/jtj/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/rdoc/parsers/parse_rb.rb:299:in `each'\n/Users/jtj/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/rdoc/parsers/parse_rb.rb:299\n/Users/jtj/.rvm/rubies/ree-1.8.7-2011.03/lib/ruby/1.8/rdoc/rdoc.rb:8\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/tasks/documentation.rake:4\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/tasks.rb:15\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/tasks.rb:6:in `each'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/tasks.rb:6\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/application.rb:215:in `initialize_tasks'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/application.rb:139:in `load_tasks'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/application.rb:77:in `send'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/railties-3.0.9.rc1/lib/rails/application.rb:77:in `method_missing'\n/Users/jtj/wb/foobar/Rakefile:7\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in `load'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/rake_module.rb:25:in `load_rakefile'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:495:in `raw_load_rakefile'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:78:in `load_rakefile'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:77:in `load_rakefile'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:61:in `run'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/gems/rake-0.9.2/bin/rake:32\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/bin/rake:19:in `load'\n/Users/jtj/.rvm/gems/ree-1.8.7-2011.03@foobar/bin/rake:19\n```\n", "labels": ["railties"], "number": 1598, "updated_at": "2011-06-10 23:54:58", "user": 1176, "closed_at": "2011-06-10 23:54:58", "id": 1029787, "title": "uninitialized constant when running rake", "url": "https://api.github.com/repos/rails/rails/issues/1598", "created_at": "2011-06-09 12:31:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334185", "text": "@tenderlove do you mind have a look?\n", "created_at": "2011-06-09 13:35:29", "user": 4912, "id": 1334185}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334257", "text": "@chopmo http://www.gewinnt-immer.de/?p=72 or http://www.ruby-forum.com/topic/115373 helps?\n", "created_at": "2011-06-09 13:50:43", "user": 146214, "id": 1334257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334309", "text": "@vijaydev Thanks, but not really :)\n\nI was just looking into this a bit more. It turns out that require 'rdoc/rdoc' fails on 1.8.7. And this is exactly what happens in railties-3.0.9.rc1/lib/rails/tasks/documentation.rake:4 (changed since 3.0.8). \n\nIt's very easy to reproduce: \n\n```\n[ ruby-1.9.2-p0 -  ~ ] $ rvm ruby-1.8.7-p302\n[ ruby-1.8.7-p302 -  ~ ] $ irb\nruby-1.8.7-p302 :001 > require 'rdoc/rdoc'\n(snip)\nNameError: uninitialized constant RubyToken::AlreadyDefinedToken\n    from /Users/jtj/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/rdoc/parsers/parse_rb.rb:273:in `def_token'\n    (snip)\n    from (irb):1:in `require'\n    from (irb):1\n```\n", "created_at": "2011-06-09 13:57:10", "user": 1176, "id": 1334309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334406", "text": "In 3.0.9, the top of documentation.rake has changed from this: \n\n```\nrequire 'rake/rdoctask'\n\n# Monkey-patch to remove redoc'ing and clobber descriptions to cut down on rake -T noise\nclass RDocTaskWithoutDescriptions < Rake::RDocTask\n```\n\nto this: \n\n```\nbegin\n  require 'rdoc/task'\nrescue LoadError\n  require 'rdoc/rdoc'\n  require 'rake/rdoctask'\n  RDoc::Task = Rake::RDocTask\nend\n\n# Monkey-patch to remove redoc'ing and clobber descriptions to cut down on rake -T noise\nclass RDocTaskWithoutDescriptions < RDoc::Task\n```\n\nAnd as I said in my previous comment, **require 'rdoc/rdoc'** fails on MRI/REE 1.8.7. \n\nI'm sure there's reason for this change, but simply reverting it allows me to run rake again. I wonder what breaks?\n", "created_at": "2011-06-09 14:07:34", "user": 1176, "id": 1334406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334434", "text": "Rake 0.9 deprecated rake/rdoctask and replaced with rdoc/task. What's your rake version? Does it work in 1.9.2 with the same rake version as you used in 1.8.7 ? \n", "created_at": "2011-06-09 14:12:11", "user": 146214, "id": 1334434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334476", "text": "My rake version is 0.9.2. And yes, it does work in 1.9.2, maybe because **require 'rdoc/rdoc'** works on that ruby version. \n\nThanks for helping!\n", "created_at": "2011-06-09 14:18:06", "user": 1176, "id": 1334476}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334481", "text": "History of commits (in that order) that did these changes: b921679d0dd3d5ca16f0362c2b34e7703cfe15e5 24b28a2a0c6a58e177b07ce3ccf56dc975541780 and 05adf524c6905eb5ac448e473cc64baa3571fd51 \n\nAlso, check your rdoc version (see commit message of 2nd commit in the list).\n", "created_at": "2011-06-09 14:18:59", "user": 146214, "id": 1334481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334670", "text": "Ah, I didn't have the rdoc gem installed! So I was using the ancient rdoc\nthat is part of 1.8.7. Installing the gem fixed this.\n\nSo I guess this means that 3.0.9 introduces a dependency to rdoc?\n", "created_at": "2011-06-09 14:47:31", "user": 1176, "id": 1334670}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336081", "text": "I found out that adding ruby-debug to the Gemfile reproduces this error.\nAs @vijaydev showed in his first comment, the root cause is that both irb (which is required by ruby-debug) and rdoc defines `RubyToken` module.\n\nThis is why updating rdoc via RubyGems actually solved @chopmo's problem.\n\nSo, what should we do next? Here are some solutions:\n1. let ruby-debug gem depend on newer rdoc gem\n=> but Rails users may encounter this error unless using the fixed version of ruby-debug\n2. rollback these Rake tasks to use 'rake/rdoctask' instead of 'rdoc/task'\n=> but this may show warnings when Rake > 0.9\n3. let rails depend on rdoc gem\n=> probably the best?\n\nThoughts?\n", "created_at": "2011-06-09 18:09:57", "user": 11493, "id": 1336081}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336149", "text": "@amatsuda For some reason I had completely missed the connection to ruby-debug, my bad :( Anyway, if 3. is acceptable, I definitely agree that this is the cleanest solution. BTW I'm surprised that this hasn't turned up before somewhere in Rails... \n\n@vijaydev Sorry, your links would have been very helpful if I had checked them more thoroughly!\n", "created_at": "2011-06-09 18:21:59", "user": 1176, "id": 1336149}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336215", "text": "It seems that if we're going to ship a task to build documentation using RDoc, we should add the proper dependency.\n", "created_at": "2011-06-09 18:32:43", "user": 3124, "id": 1336215}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1345759", "text": "This issue should be fixed now, if not please add a comment and I will take another look\n", "created_at": "2011-06-10 23:54:57", "user": 52642, "id": 1345759}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "To reproduce:\n\n```\nclass Player::PlaylistsController < ApplicationController\n  def index\n  end\n\n  def create\n    redirect_to :index\n  end\nend\n```\n\nWhen submitting a form to the create action, this happens:\n\n```\nNoMethodError in Player::PlaylistsController#create\n\nundefined method `hash_for_index_url' for #<Module:0x00000101446108>\n\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_dispatch/routing/polymorphic_routes.rb:133:in `polymorphic_url'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_dispatch/routing/url_for.rb:145:in `url_for'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_controller/metal/redirecting.rb:93:in `_compute_redirect_to_location'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_controller/metal/redirecting.rb:63:in `redirect_to'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_controller/metal/flash.rb:25:in `redirect_to'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_controller/metal/instrumentation.rb:60:in `block in redirect_to'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/activesupport/lib/active_support/notifications.rb:55:in `block in instrument'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/activesupport/lib/active_support/notifications/instrumenter.rb:21:in `instrument'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/activesupport/lib/active_support/notifications.rb:55:in `instrument'\n/Users/kain/.rvm/gems/ruby-1.9.2-p180-patched/bundler/gems/rails-fa6b12aeed58/actionpack/lib/action_controller/metal/instrumentation.rb:59:in `redirect_to'\napp/controllers/player/playlists_controller.rb:15:in `create'\n```\n\nThis also happen in view when using form_for @object, i.e. when leaving rails the task to compute the path.\n", "labels": [], "number": 1599, "updated_at": "2011-07-05 13:34:58", "user": 12844, "closed_at": "2011-06-15 09:27:51", "id": 1029852, "title": "[3.1 git] polymorphic routes raises exception", "url": "https://api.github.com/repos/rails/rails/issues/1599", "created_at": "2011-06-09 12:45:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335007", "text": "What does routes.rb look like? If you want to redirect to action then the format is:\n\n```\nredirect_to :action => :index\n```\n\nAs for the form_for @object - what's in @object?\n", "created_at": "2011-06-09 15:34:33", "user": 6321, "id": 1335007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372274", "text": "I have another example:\n\n```\nclass Api::YoutubeVideosController < Api::HomeController\n\n    def create\n      @youtube_video = current_user.youtube_videos.create(youtube_id: params[:video_id])\n      respond_with(@youtube_video)#, location: api_youtube_video_url(@youtube_video))\n    end\n```\n\nThis will bomb when I let rails compute a path without location.\nI always have to specify the full resource url, even in forms for any object.\n\n```\nCompleted 500 Internal Server Error in 784ms\n\nNoMethodError (undefined method `hash_for_youtube_video_url' for #<Module:0x00000106f47bd8>):\n  app/controllers/api/youtube_videos_controller.rb:52:in `create'\n```\n\nError is the same as above.\nIn this case I should always specify the full url because I'm under a namespace and I'm not sure rails can be smart enough to understand that, in any case the polymorphic_url used for the object to path resolution isn't working.\n", "created_at": "2011-06-15 09:11:54", "user": 12844, "id": 1372274}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372308", "text": "Again, like @pixeltrix said, what's in your routes file? Paste at least the part that matters to the `Api::YoutubeVideosController`\n\nWael\n", "created_at": "2011-06-15 09:20:23", "user": 87115, "id": 1372308}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372322", "text": "Here it is, pretty basic:\n\n```\nnamespace :api do\n  root to: 'home#index', via: :get\n  resources :youtube_videos\nend\n```\n", "created_at": "2011-06-15 09:22:22", "user": 12844, "id": 1372322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372349", "text": "The code for polymorphic_url doesn't really know about routes - it uses the model name to determine which url helper to call so even if you have this in your routes.rb\n\n``` ruby\nnamespace :api do\n  resources :youtube_videos\nend\n```\n\ncallling `polymorphic_url` with an instance of the YoutubeVideo model will try to use `youtube_video_url`. You can use an array to namespace the url if necessary, e.g. `polymorphic_url([:api, @video])`.\n", "created_at": "2011-06-15 09:27:51", "user": 6321, "id": 1372349}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372366", "text": "I noticed, but I reproposed the ticket here because I don't remember rails (2.3.x) exploding so bad when it cannot resolve the url for an AR object; I recall it was throwing a different error. Anyway, cheers\n", "created_at": "2011-06-15 09:31:08", "user": 12844, "id": 1372366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372402", "text": "Exactly the same NoMethodError as in 2.3.x\n\n```\nLoading development environment (Rails 2.3.11)\n>> app.polymorphic_url(Page.new)\nNoMethodError: undefined method `pages_url' for #<ActionController::Integration::Session:0x1031b81c8>\n    from /Users/andyw/.rvm/gems/ree-1.8.7-2011.03@luminaire/gems/actionpack-2.3.11/lib/action_controller/test_process.rb:511:in `method_missing'\n    from /Users/andyw/.rvm/gems/ree-1.8.7-2011.03@luminaire/gems/actionpack-2.3.11/lib/action_controller/polymorphic_routes.rb:107:in `__send__'\n    from /Users/andyw/.rvm/gems/ree-1.8.7-2011.03@luminaire/gems/actionpack-2.3.11/lib/action_controller/polymorphic_routes.rb:107:in `polymorphic_url'\n    from (irb):2\n```\n", "created_at": "2011-06-15 09:38:17", "user": 6321, "id": 1372402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372411", "text": "Correct, it's the \"hash_for_\" that tripped me up then.\n", "created_at": "2011-06-15 09:39:58", "user": 12844, "id": 1372411}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1429837", "text": "Having this same problem. \n\nPassing in the namespace as the first param worked for me. \n\nrespond_with(:api, @youtube_video)\n", "created_at": "2011-06-24 02:12:37", "user": 564579, "id": 1429837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1443938", "text": "I'm having the same issue with form_for. \n\n```\nundefined method `hash_for_group_descriptions_path' for #<Module:0x000001040d3f18>\nactionpack (3.1.0.rc4) lib/action_dispatch/routing/polymorphic_routes.rb:133:in `polymorphic_url'\nactionpack (3.1.0.rc4) lib/action_dispatch/routing/polymorphic_routes.rb:140:in `polymorphic_path'\nactionpack (3.1.0.rc4) lib/action_view/helpers/form_helper.rb:391:in `apply_form_for_options!'\nactionpack (3.1.0.rc4) lib/action_view/helpers/form_helper.rb:364:in `form_for'\nhaml (3.1.2) lib/haml/helpers/action_view_mods.rb:181:in `form_for_with_haml'\nhaml (3.1.2) lib/haml/helpers/xss_mods.rb:132:in `form_for_with_haml_xss'\n```\n\n``` haml\n  = form_for [@group, @description] do |f|\n    = f.text_field :description\n    = f.submit\n```\n", "created_at": "2011-06-27 00:07:22", "user": 254562, "id": 1443938}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1446104", "text": "@jasonLaster what’s in your routes.rb file? Is it failing because description is a singular resource? If so what you're seeing is #1769.\n", "created_at": "2011-06-27 09:17:31", "user": 6321, "id": 1446104}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1450193", "text": "@pixeltrix here are the relevant routes.\n\n``` ruby\n\n  resources :group, :only => [:index, :show] do\n    collection do\n      get 'leaderboard'\n      get 'recently_updated'\n      get 'least_updated'\n    end\n    resources :description\n  end\n```\n", "created_at": "2011-06-27 20:25:32", "user": 254562, "id": 1450193}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452292", "text": "I think your problem is your using singular names in the resources calls, try this instead:\n\n``` ruby\n resources :groups, :only => [:index, :show] do\n   collection do\n     get 'leaderboard'\n     get 'recently_updated'\n     get 'least_updated'\n   end\n   resources :descriptions\n end\n```\n", "created_at": "2011-06-28 04:33:06", "user": 6321, "id": 1452292}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1503687", "text": "Also have an error with form_for in /views/users/new.html.erb:\n\n```\nundefined method `hash_for_users_path' for #<Module:0x0000010300abf0>\n\nactionpack (3.1.0.rc4) lib/action_dispatch/routing/polymorphic_routes.rb:133:in `polymorphic_url'\nactionpack (3.1.0.rc4) lib/action_dispatch/routing/polymorphic_routes.rb:140:in `polymorphic_path'\nactionpack (3.1.0.rc4) lib/action_view/helpers/form_helper.rb:391:in `apply_form_for_options!'\nactionpack (3.1.0.rc4) lib/action_view/helpers/form_helper.rb:364:in `form_for'\napp/views/users/new.html.erb:3:in `_app_views_users_new_html_erb___2414497005668900510_2173635720'\nactionpack (3.1.0.rc4) lib/action_view/template.rb:144:in `block in render'\nactivesupport (3.1.0.rc4) lib/active_support/notifications.rb:57:in `instrument'\nactionpack (3.1.0.rc4) lib/action_view/template.rb:142:in `render'\n```\n\nroutes.rb\n\n``` ruby\nresources :tasks\nresources :projects\nmatch \"/signup\" => \"users#new\", :as => :signup\n```\n", "created_at": "2011-07-05 13:34:58", "user": 507849, "id": 1503687}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Fixes Issue #1596 and Issue #1576 with escape_javascript only working if raw(escape_javascript(js)) used. Actionpack tests re-run and all passed.\n", "labels": [], "number": 1600, "updated_at": "2014-07-03 04:51:55", "user": 16582, "closed_at": "2011-06-09 18:42:15", "id": 1029881, "title": "3.0.9rc1 fix escape_javascript", "url": "https://api.github.com/repos/rails/rails/issues/1600", "created_at": "2011-06-09 12:52:32", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334176", "text": "Yeah, I totally miss the point that `#gsub` returns the new object.\n\nHowever, should the string being marked as safe only if they were a SafeBuffer? And why our test case didn't cache that?\n", "created_at": "2011-06-09 13:33:49", "user": 4912, "id": 1334176}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1336278", "text": "As we're trying to fix the release ASAP, I've fixed it in these instead: [8c8652c37f6f6969ce48] [66dbef6d791e0dfb9201] [3d82d81f7da6f3c85d57]\n\nThank you so much for sending this in.\n", "created_at": "2011-06-09 18:42:18", "user": 4912, "id": 1336278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338302", "text": "This works great for me (3.0.9.rc3). Thank you :)\n", "created_at": "2011-06-10 00:15:41", "user": 16582, "id": 1338302}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently rails wraps every operation on association collections in a transaction. This results in unecessary <code>BEGIN</code> <code>COMMIT</code> statements sent to the database server when working with unsaved records. In our application these unecessary statements caused about 70% of the whole database time.\n\nExample:\n\n``` ruby\nf = Firm.new\nf.clients_of_firm << Client.new(\"name\" => \"New Client\")\n# Results in an empty transaction statement in the database:\n# BEGIN\n# COMMIT\n```\n\nThe same issue applies not only to <code>CollectionAssociation#concat</code> but also to <code>CollectionAssociation#replace</code> and <code>CollectionAssociation#delete_or_destroy</code>. This pull request fixes the issue by only wrapping the calls when the transaction is actually needed.\n", "labels": [], "number": 1601, "updated_at": "2014-06-26 13:30:12", "user": 9696, "closed_at": "2011-06-12 17:43:57", "id": 1029920, "title": "Don't use transactions when working with unsafed records in associations", "url": "https://api.github.com/repos/rails/rails/issues/1601", "created_at": "2011-06-09 12:59:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334007", "text": "@jonleighton I thought we removed the code that wraps all operations in a transaction?\n", "created_at": "2011-06-09 13:05:51", "user": 9582, "id": 1334007}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335266", "text": "Of course this would solve this, too... but is this really what you want? Especially when adding/replacing/removing several records at once the transaction is quite handy, isn't it?\n", "created_at": "2011-06-09 16:12:05", "user": 9696, "id": 1335266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340586", "text": "@josevalim We remove it for e.g. foo.items.build, but it looks like there are further issues...\n\n@benedikt thanks for reporting and providing a patch! I want to work on the code a bit before merging, but I aim to have it merged by Sunday night UTC+1\n\n@tenderlove giving you the heads up about this - I think this fix ought to go in 3.1 final as it's a perf regression. If the current RC has no \"omg\" issues then maybe we can create another RC with just an absolutely minimal set of important changes cherry-picked (e.g. this) and this have a shorter RC cycle for that.\n", "created_at": "2011-06-10 08:51:31", "user": 1979, "id": 1340586}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340604", "text": "tks @jonleighton\n", "created_at": "2011-06-10 08:55:36", "user": 9582, "id": 1340604}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340639", "text": "@jonleighton If you want me to change anything in the patch (or anything related) just tell me. :)\n", "created_at": "2011-06-10 09:04:30", "user": 9696, "id": 1340639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355524", "text": "This is merged now:\n- fa8dfad7654baa831c8de515118008b3382df515\n- de01a6410207efd9554e9d1ed901c180e54d632a\n- 14e6bbb149a7045d73d34deed2c8ef4a47e4233f\n- b09bbdb8bf342b3f6d19a2cc2c8860019e39cac9\n\nThanks for offering to make changes. I would definitely have told you what I wanted changed if it was obvious, but I had to actually get in there and play with the code before I could work out how I wanted to change it!\n\nThanks for contributing.\n", "created_at": "2011-06-12 17:43:57", "user": 1979, "id": 1355524}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Use sorting in topological order (TSort) on all initializers found by Railtie but not on the ones from Rails::Application::Bootstrap and Rails::Application::Finisher. Bootstrap should always be the first and Finisher the last.\n- Move Rails::Initializable::Collection to Rails::Application. Now it's only needed there.\n\nThis fixes [issue 1587 reported by me yesterday](https://github.com/rails/rails/issues/1587).\n", "labels": [], "number": 1602, "updated_at": "2014-07-03 04:52:03", "user": 137030, "closed_at": "2012-04-25 09:49:15", "id": 1030091, "title": "Do not TSort Finisher and Bootstrap initializers", "url": "https://api.github.com/repos/rails/rails/issues/1602", "created_at": "2011-06-09 13:33:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334220", "text": "Suggestion: It will be useful to mention the issue number itself as the link text in \"This fixes &lt;issue-num&gt;\" :-)\n", "created_at": "2011-06-09 13:41:52", "user": 146214, "id": 1334220}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334536", "text": "ok. link fixed.\n", "created_at": "2011-06-09 14:26:10", "user": 137030, "id": 1334536}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334950", "text": "I am afraid that, after this change, people won't be able to use before/after using bootstrap and finisher as references. Also, I don't agree with the TSort responsibility moving to the application object. Maybe cells should be using the finisher hooks and/or passing both before/after instead of just one?\n", "created_at": "2011-06-09 15:27:42", "user": 9582, "id": 1334950}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335613", "text": "Right, it might be better for Cells to use :after_initialize hook rather than initializers. Even though it explicitly states in its Railtie that it wants to run after Finisher's :set_routes_reloader initializer, it seems to work fine with my patch that always places it before the Finisher. I'll report it in their repo.\n\nStill, the issue with :after_initialize remains. There should be more constraints on :finisher_hook so that other initializers can't push it down. \n\nAnd is :after_initialize really a good name for this hook? It's misleading since it's not guaranteed to run after all initializers. At very least :set_routes_reloader and :disable_dependency_loading initializers from Finisher run after the hooks. Moreover, it's possible for an initializer to request to be run after :finisher_hook. This can be a source or errors (as this issue clearly shows). \n\nOr maybe :after_initialize would better not be executed by an initializer?\n", "created_at": "2011-06-09 17:01:56", "user": 137030, "id": 1335613}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When trying to run rake test under jruby, Rake fails with \"unknown task jdbcpostgresql\" during db:test:purge. This simple fix works for me, and is similar to how the mysql task is implemented.\n", "labels": [], "number": 1603, "updated_at": "2014-07-03 04:52:07", "user": 247, "closed_at": "2011-07-06 19:25:28", "id": 1030118, "title": "Support JDBC PostgreSQL adapter under JRuby", "url": "https://api.github.com/repos/rails/rails/issues/1603", "created_at": "2011-06-09 13:36:25", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "modified `table_exists?` in the postgresql adapter to always use the current search_path unless a explicit schema is specified.\n\nCurrently one cannot load `schema.rb` into a new (empty) postgresql schema.  `create_table` forces a table drop which checks `table_exists?` first.  This returns `true` even though the table doesn't actually exist in the current schema.  Thus a PG error is thrown when it tries to drop the nonexistent table.\n", "labels": [], "number": 1604, "updated_at": "2014-06-13 23:13:03", "user": 190353, "closed_at": "2011-06-09 15:39:57", "id": 1030606, "title": "fix table_exists? in postgresql adapter to always use current search_path", "url": "https://api.github.com/repos/rails/rails/issues/1604", "created_at": "2011-06-09 14:53:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334953", "text": "I think you should squash the three commits and fix indenting on the squashed commit before someone can merge this pull request, it's filled with useless changes\n", "created_at": "2011-06-09 15:28:16", "user": 87115, "id": 1334953}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334979", "text": "ok good tip. thx\n", "created_at": "2011-06-09 15:31:40", "user": 190353, "id": 1334979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1335105", "text": "wasn't sure if I could ammend the pull request so i just closed and made a [new one](https://github.com/rails/rails/pull/1607)\n\nOpinions welcome!\n", "created_at": "2011-06-09 15:49:12", "user": 190353, "id": 1335105}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It is my understanding that versions of Ruby prior to 1.9.2 are not supported in Rails 3.1+. This enforces that.\n", "labels": [], "number": 1605, "updated_at": "2014-07-03 04:52:13", "user": 210221, "closed_at": "2011-06-09 15:12:35", "id": 1030682, "title": "Bump the ruby version check to 1.9.2+", "url": "https://api.github.com/repos/rails/rails/issues/1605", "created_at": "2011-06-09 15:08:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334845", "text": "That's not true. We are supporting 1.8.7 until Rails 4.\n", "created_at": "2011-06-09 15:12:35", "user": 9582, "id": 1334845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334849", "text": "Tks for pull request though!\n", "created_at": "2011-06-09 15:13:24", "user": 9582, "id": 1334849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1334935", "text": "My mistake, apologies for the noise.\n", "created_at": "2011-06-09 15:25:17", "user": 210221, "id": 1334935}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1606, "updated_at": "2014-06-26 18:55:22", "user": 6399, "closed_at": "2011-06-09 15:30:56", "id": 1030724, "title": "remove unused UserController from test", "url": "https://api.github.com/repos/rails/rails/issues/1606", "created_at": "2011-06-09 15:14:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "modified table_exists? in the postgresql adapter to always use the current search_path unless a explicit schema is specified.\n\nCurrently one cannot load schema.rb into a new (empty) postgresql schema. create_table forces a table drop which checks table_exists? first. This returns true even though the table doesn't actually exist in the current schema. Thus a PG error is thrown when it tries to drop the nonexistent table.\n", "labels": [], "number": 1607, "updated_at": "2014-06-12 17:19:49", "user": 190353, "closed_at": "2011-07-12 00:28:31", "id": 1030878, "title": "fix table_exists? in postgresql adapter to always use current search_path", "url": "https://api.github.com/repos/rails/rails/issues/1607", "created_at": "2011-06-09 15:42:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342550", "text": "fyi, I was working on something similar based off master, see: https://github.com/rails/rails/pull/1632\n+1 yes I'd like to see this fixed too, as it also enables migration into independent schemas and compatibility with schema-partitioning approaches for multi-tenancy\n", "created_at": "2011-06-10 14:08:51", "user": 16432, "id": 1342550}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342787", "text": "ah good one!  Ya I planned on adding a patch for master also, just haven't gotten around to it as we don't use 3.1 in production ATM.\n", "created_at": "2011-06-10 14:46:30", "user": 190353, "id": 1342787}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1512242", "text": "Can someone give me some feedback on this pull request?  It's been sitting here for a month without any comments (save 1)  I'm interested to know how I can improve it\n", "created_at": "2011-07-06 14:51:10", "user": 190353, "id": 1512242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529553", "text": "Yes!  If this were in Rails it would have saved me many hours.  I had monkey patched table_exists? so that I could use Postgresql schemas and I was running into problems when I used set_table_name on a model with a schema (i.e. set_table_name 'meta.accounts').  I applied your patch and it fixed my issues with table_exists?\n\nWould love to see this added into Rails as I have an app that makes heavy use of Postgresql schemas, a feature which is mostly unusable with an unhacked Rails install.  \n", "created_at": "2011-07-08 01:58:41", "user": 15169, "id": 1529553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529812", "text": "fyi this is what we're using in production if you need to use this patch:\n\n`gem 'rails', '3.0.8', :git => 'git://github.com/bradrobertson/rails', :branch => '3-0-stable'`\n", "created_at": "2011-07-08 02:28:43", "user": 190353, "id": 1529812}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529888", "text": "Brad, +1 (again;-)\nNote that I just realised my similar patch on 3.1 has been merged to master (covering view and schema-related improvements for the PostgreSQL adapter), suggest you see if there's anything you can scavenge from this to converge/align what's to go on 3.0 https://github.com/rails/rails/pull/1632\n", "created_at": "2011-07-08 02:43:43", "user": 16432, "id": 1529888}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529905", "text": "cool, thx @tardate, will take a look.\nIf anyone on the Rails core team can comment as to what extra work from @tardate's might make this pull request more enticing I'm all ears.  I was pretty happy with the simplicity of my patch, but am definitely happy to provide more functionality if that's what people are looking for.\n", "created_at": "2011-07-08 02:48:01", "user": 190353, "id": 1529905}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550605", "text": "/cc @tenderlove\n", "created_at": "2011-07-11 22:39:48", "user": 52642, "id": 1550605}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1554918", "text": "Was this merged in master and 3-1-stable?\n", "created_at": "2011-07-12 15:09:44", "user": 52642, "id": 1554918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1554927", "text": "3-1-stable has a different fix from @tardate.  This was just for 3-0-stable\n", "created_at": "2011-07-12 15:10:55", "user": 190353, "id": 1554927}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1555102", "text": "cool\n", "created_at": "2011-07-12 15:29:32", "user": 52642, "id": 1555102}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2026064", "text": "This issue still exists in 3-1-stable\n", "created_at": "2011-09-07 06:43:57", "user": 123986, "id": 2026064}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2027829", "text": "really @tardate can you comment?  I'm not on 3.1 yet\n", "created_at": "2011-09-07 11:45:27", "user": 190353, "id": 2027829}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2034634", "text": "I hit this on a 3.0.10 to 3.1 upgrade yesterday on a relative new multi-tenant build. Big thanks for the original fix.\nhttps://github.com/rails/rails/pull/2909\n", "created_at": "2011-09-07 22:41:02", "user": 123986, "id": 2034634}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2066273", "text": "https://github.com/rails/rails/pull/1632 addressed this for 3.1 but it looks like that while it's in rails/master it didn't get merged to an RC or 3.1 stable.\n", "created_at": "2011-09-11 22:40:51", "user": 16432, "id": 2066273}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "MemcacheStore: deserialize the entry reading from local_cache when using raw.\n\nWhen with :raw => true and storing the Marshal.dump(obj) into the memcached, Rails.cache.read(key) will return the the serialization data. MemCacheStore should try to deserialize the entry before returning the result.\n", "labels": [], "number": 1608, "updated_at": "2014-06-26 16:59:46", "user": 11197, "closed_at": "2011-07-11 11:54:29", "id": 1031520, "title": "MemcacheStore: deserialize the entry reading from local_cache when using ", "url": "https://api.github.com/repos/rails/rails/issues/1608", "created_at": "2011-06-09 17:31:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544401", "text": "I like this idea. How do you think @josevalim?\n", "created_at": "2011-07-11 05:13:35", "user": 4912, "id": 1544401}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545790", "text": "But isn't :raw exactly about storing a raw object (without dumping)? If your code is dumping it before caching it, you are expected to Marshal.load it as well.\n", "created_at": "2011-07-11 11:31:23", "user": 9582, "id": 1545790}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545792", "text": "In other words, what is your use case? :)\n", "created_at": "2011-07-11 11:31:34", "user": 9582, "id": 1545792}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545854", "text": "The problem is not that leave Marshal.load to app when fetching, instead, the solution here is not consistent.  \n\nWhen the entry doesn't exist in LocalCache, the MemcacheStore will try to Marshal.load the raw value before returning the value to app. However, if the entry exists in LocalCache, it will directly return the raw value without Marshal.load.\n\nSo we should always leave the dump/load to app users or deserialize both.\n", "created_at": "2011-07-11 11:48:02", "user": 11197, "id": 1545854}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545878", "text": "Ah, now I see. The original issue was not clear in the issue message. Thanks.\n", "created_at": "2011-07-11 11:54:18", "user": 9582, "id": 1545878}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argument is already html_safe\n", "labels": [], "number": 1609, "updated_at": "2014-07-03 04:52:26", "user": 4912, "closed_at": "2011-06-09 18:37:18", "id": 1031858, "title": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argumen", "url": "https://api.github.com/repos/rails/rails/issues/1609", "created_at": "2011-06-09 18:31:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argument is already html_safe\n", "labels": [], "number": 1610, "updated_at": "2014-07-03 04:52:29", "user": 4912, "closed_at": "2011-06-09 18:39:20", "id": 1031861, "title": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argumen", "url": "https://api.github.com/repos/rails/rails/issues/1610", "created_at": "2011-06-09 18:32:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argument is already html_safe\n", "labels": [], "number": 1611, "updated_at": "2014-06-18 12:13:07", "user": 4912, "closed_at": "2011-06-09 18:43:20", "id": 1031863, "title": "Make sure `escape_javascript` return `SafeBuffer` if the incoming argumen", "url": "https://api.github.com/repos/rails/rails/issues/1611", "created_at": "2011-06-09 18:32:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As suggested by @tenderlove and @amatsuda here: https://github.com/rails/rails/issues/1598\n\nI used the same rdoc version as in the Gemfile for Rails. \n", "labels": [], "number": 1612, "updated_at": "2014-06-17 14:27:55", "user": 1176, "closed_at": "2011-06-09 21:38:47", "id": 1032109, "title": "Adding rdoc dependency to fix issue #1598", "url": "https://api.github.com/repos/rails/rails/issues/1612", "created_at": "2011-06-09 19:30:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337467", "text": "Oh...I'm not sure if this should have been against master instead of 3-0-stable?\n", "created_at": "2011-06-09 21:33:39", "user": 1176, "id": 1337467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337512", "text": "I've merged your commit to all branches.\n", "created_at": "2011-06-09 21:38:47", "user": 3124, "id": 1337512}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The ActiveRecord.attribute_present? method reads the attribute then returns value.blank? This is not a correct implementation for boolean values. The blank? method returns true if a boolean value is false. Thus, attribute_present? incorrectly returns false for boolean values that are present but false. \n", "labels": [], "number": 1613, "updated_at": "2011-11-06 09:27:35", "user": 595975, "closed_at": "2011-11-06 09:27:35", "id": 1032559, "title": "ActiveRecord.attribute_present? returns false for boolean values that are present but false", "url": "https://api.github.com/repos/rails/rails/issues/1613", "created_at": "2011-06-09 20:55:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343181", "text": "The method's documentation reads:\n\n```\n  # Returns true if the specified +attribute+ has been set by the user or by a database load and is neither\n  # nil nor empty? (the latter only applies to objects that respond to empty?, most notably Strings).\n```\n\nNote \"_and_ is neither nil nor empty?\" So: are false values and string values are equally \"present?\"\n", "created_at": "2011-06-10 15:48:05", "user": 35545, "id": 1343181}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The API stuck around for ActiveModel. Doesn't make sense to deprecate this method in AR 2.x\n", "labels": [], "number": 1614, "updated_at": "2014-06-19 01:59:46", "user": 18524, "closed_at": "2011-06-09 21:56:09", "id": 1032947, "title": "Remove deprecation warning for ActiveRecord::Error#generate_message", "url": "https://api.github.com/repos/rails/rails/issues/1614", "created_at": "2011-06-09 21:55:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337620", "text": "Stupid git closing, sorry\n", "created_at": "2011-06-09 21:56:09", "user": 18524, "id": 1337620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337623", "text": "My fault :p\n", "created_at": "2011-06-09 21:56:21", "user": 18524, "id": 1337623}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Remove deprecation warning for ActiveRecord::Errors#generate_message. This is the same API that ActiveModel ended up using and that won't be changing.\n", "labels": [], "number": 1615, "updated_at": "2014-06-19 01:20:57", "user": 18524, "closed_at": "2011-06-09 21:59:53", "id": 1032971, "title": "Remove deprecation warning in ActiveRecord::Errors#generate_message", "url": "https://api.github.com/repos/rails/rails/issues/1615", "created_at": "2011-06-09 21:57:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337652", "text": "Applied, thanks!\n", "created_at": "2011-06-09 21:59:53", "user": 3124, "id": 1337652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1337670", "text": "Awesome thanks! :)\n", "created_at": "2011-06-09 22:02:50", "user": 18524, "id": 1337670}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The SQLite adapter currently doesn't query the sqlite_temp_master table, so any temporary tables created are never found. This patch fixes it by performing a UNION on the sqlite_master and sqlite_temp_master tables.\n", "labels": [], "number": 1616, "updated_at": "2014-07-03 04:52:49", "user": 189518, "closed_at": "2012-04-28 03:39:53", "id": 1033064, "title": "Fix SQLite adapter so that it correctly fetches the names of temporary tables.", "url": "https://api.github.com/repos/rails/rails/issues/1616", "created_at": "2011-06-09 22:16:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342489", "text": "+1\n", "created_at": "2011-06-10 14:01:56", "user": 2488, "id": 1342489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355565", "text": "+1, seems fine.\n", "created_at": "2011-06-12 18:02:52", "user": 6351, "id": 1355565}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1588307", "text": "+1 : Makes sense to include, tests work properly, and code looks good.\n", "created_at": "2011-07-16 22:07:27", "user": 303257, "id": 1588307}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1650518", "text": "+1\n", "created_at": "2011-07-26 00:09:16", "user": 141314, "id": 1650518}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5394140", "text": "sqlite adapter was removed from master in favor of sqlite3 adapter, so I'm closing this pull request. If you still have this issue and want it merged in master please rebase this one with the master branch and reopen it. Thanks\n", "created_at": "2012-04-28 03:39:53", "user": 47848, "id": 5394140}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rails 3.1 RC3 cannot create project for JRuby working as Ruby 1.9. \n\n$ jruby --1.9 -v\njruby 1.6.2 (ruby-1.9.2-p136) (2011-05-23 e2ea975) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_24) [darwin-x86_64-java]\n\n$ jruby -S rails -v\nRails 3.1.0.rc3\n\n$ jruby -S gem -v\n1.8.5\n\n$ jruby --1.9 -S rails new myapp\n      create  \n      create  README\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n      create  app\n      create  app/assets/images/rails.png\n      create  app/assets/javascripts/application.js\n      create  app/assets/stylesheets/application.css\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/mailers\n      create  app/models\n      create  app/views/layouts/application.html.erb\n      create  app/mailers/.gitkeep\n      create  app/models/.gitkeep\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/backtrace_silencers.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/mime_types.rb\n      create  config/initializers/secret_token.rb\n      create  config/initializers/session_store.rb\n      create  config/initializers/wrap_parameters.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  doc\n      create  doc/README_FOR_APP\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.gitkeep\n      create  log\n      create  log/.gitkeep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/favicon.ico\n      create  public/index.html\n      create  public/robots.txt\n      create  script\n      create  script/rails\n      create  test/fixtures\n      create  test/fixtures/.gitkeep\n      create  test/functional\n      create  test/functional/.gitkeep\n      create  test/integration\n      create  test/integration/.gitkeep\n      create  test/unit\n      create  test/unit/.gitkeep\n      create  test/performance/browsing_test.rb\n      create  test/test_helper.rb\n      create  tmp/cache\n      create  tmp/cache/.gitkeep\n      create  vendor/assets/stylesheets\n      create  vendor/assets/stylesheets/.gitkeep\n      create  vendor/plugins\n      create  vendor/plugins/.gitkeep\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/shell.rb:26 warning: already initialized constant SHELL_DELEGATED_METHODS\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/argument.rb:3 warning: already initialized constant VALID_TYPES\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/arguments.rb:3 warning: already initialized constant NUMERIC\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/option.rb:5 warning: already initialized constant VALID_TYPES\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/options.rb:6 warning: already initialized constant LONG_RE\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/options.rb:7 warning: already initialized constant SHORT_RE\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/options.rb:8 warning: already initialized constant EQ_RE\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/options.rb:9 warning: already initialized constant SHORT_SQ_RE\n/Users/hipertracker/.rvm/gems/jruby-1.6.2@rails-pre/gems/bundler-1.0.15/lib/bundler/vendor/thor/parser/options.rb:10 warning: already initialized constant SHORT_NUM\n     failure  bundler raised an exception, are you offline?\n", "labels": [], "number": 1617, "updated_at": "2011-07-28 21:50:40", "user": 649, "closed_at": "2011-07-28 21:50:40", "id": 1033244, "title": "JRuby --1.9 cannot create Rails 3.1 RC3 project", "url": "https://api.github.com/repos/rails/rails/issues/1617", "created_at": "2011-06-09 22:51:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338059", "text": "There is the same error for Rails 3.1 RC4\n", "created_at": "2011-06-09 23:19:05", "user": 649, "id": 1338059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338264", "text": "I can reproduce with same steps in rc4, but looking to backtrace it doesn't looks like a Rails problem\n", "created_at": "2011-06-10 00:08:53", "user": 160941, "id": 1338264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338272", "text": "It's not a jruby problem. I usually have this happen when I create a new app.\nOnce I cd into the app and run bundle install it always works.\n", "created_at": "2011-06-10 00:09:55", "user": 294954, "id": 1338272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340432", "text": "True, independent running \"bundle install\" works as expected. That must be is a problem between Bundler and the way Rails 3.1. RC4 run it just after creating the project. And it happens only for JRuby working in 1.9 mode. \n", "created_at": "2011-06-10 08:16:28", "user": 649, "id": 1340432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638555", "text": "I am getting this not using jruby. \n\n$ ruby -v\nruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10.7.0]\n$ rails new test_project --edge\n      create  \n      create  README\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n      create  app\n      create  app/assets/images/rails.png\n      create  app/assets/javascripts/application.js\n      create  app/assets/stylesheets/application.css\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/mailers\n      create  app/models\n      create  app/views/layouts/application.html.erb\n      create  app/mailers/.gitkeep\n      create  app/models/.gitkeep\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/backtrace_silencers.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/mime_types.rb\n      create  config/initializers/secret_token.rb\n      create  config/initializers/session_store.rb\n      create  config/initializers/wrap_parameters.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  doc\n      create  doc/README_FOR_APP\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.gitkeep\n      create  log\n      create  log/.gitkeep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/favicon.ico\n      create  public/index.html\n      create  public/robots.txt\n      create  script\n      create  script/rails\n      create  test/fixtures\n      create  test/fixtures/.gitkeep\n      create  test/functional\n      create  test/functional/.gitkeep\n      create  test/integration\n      create  test/integration/.gitkeep\n      create  test/unit\n      create  test/unit/.gitkeep\n      create  test/performance/browsing_test.rb\n      create  test/test_helper.rb\n      create  tmp/cache\n      create  tmp/cache/.gitkeep\n      create  vendor/assets/stylesheets\n      create  vendor/assets/stylesheets/.gitkeep\n      create  vendor/plugins\n      create  vendor/plugins/.gitkeep\n         run  bundle install\nUpdating git://github.com/rails/rails.git\nFetching source index for http://rubygems.org/\n     failure  bundler raised an exception, are you offline?\n", "created_at": "2011-07-23 20:00:41", "user": 169206, "id": 1638555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638606", "text": "This was fixed in 6c58585ff5b667de4f29860e4b06e743e0614891 (master) and 467772b3eafc1cc46df29dbe57a7c09066295d73 (3-1-stable).\n", "created_at": "2011-07-23 20:19:27", "user": 98601, "id": 1638606}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1638616", "text": "I can confirm it works on 3-1-stable for ruby 1.9.2\n", "created_at": "2011-07-23 20:23:35", "user": 169206, "id": 1638616}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1676891", "text": "\"jruby --1.9 -S rails new myapp\" works OK now also for JRuby 1.6.3 and Rails 3.1 RC5\n", "created_at": "2011-07-28 21:50:40", "user": 649, "id": 1676891}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "@guilleiguaran nope, it is even worse than before. For 3-1-stable I cannot create WAR file.\n\n$ ruby -v\njruby 1.6.3 (ruby-1.8.7-p330) (2011-07-07 965162f) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_26) [darwin-x86_64-java]\n\n$ rails -v\nRails 3.1.0.rc5\n\n$ gem -v\n1.8.6\n### 1st TRY, for gem 'rails', '3.1.0.rc5'\n\n```\n$ warble war\nwarble aborted!\nYou have already activated rake 0.8.7, but your Gemfile requires rake 0.9.2. Consider using bundle exec.\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/bundler-1.0.15/lib/bundler/runtime.rb:31:in `setup'\n(See full trace by running task with --trace)\n\n$ bundle exec warble war\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Config#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/config.rb:188:in `define_tasks'\nWARNING: DSL method Warbler::Config#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/config.rb:191:in `define_tasks'\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:27:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:29:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:30:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:32:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:33:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:35:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:36:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:38:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:39:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:41:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:42:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:44:in `load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:45:in `load_rakefile'\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Jar#rm_f called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/jar.rb:77:in `create'\nCreating myapp.war\n```\n### Second TRY, for gem 'rails', :git => 'git://github.com/rails/rails.git', :branch => '3-1-stable'\n\n```\n$ bundle exec warble war --trace\nwarble aborted!\nundefined method `asset_environment' for class `Sprockets::Railtie'\norg/jruby/RubyModule.java:2200:in `alias_method'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/bundler/gems/rails-6f745f446857/activesupport/lib/active_support/core_ext/module/aliasing.rb:31:in `alias_method_chain'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails/monkey_patches.rb:7:in `included'\norg/jruby/RubyModule.java:2062:in `include'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails/monkey_patches.rb:23:in `Railtie'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails/monkey_patches.rb:22:in `Sprockets'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails/monkey_patches.rb:21:in `(root)'\norg/jruby/RubyKernel.java:1038:in `require'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails/monkey_patches.rb:9:in `(root)'\norg/jruby/RubyKernel.java:1038:in `require'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass/rails.rb:1:in `(root)'\norg/jruby/RubyKernel.java:1038:in `require'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/sass-rails-3.1.0.rc.5/lib/sass-rails.rb:68:in `require'\norg/jruby/RubyArray.java:1603:in `each'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/bundler-1.0.15/lib/bundler/runtime.rb:66:in `require'\norg/jruby/RubyArray.java:1603:in `each'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/bundler-1.0.15/lib/bundler/runtime.rb:55:in `require'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/bundler-1.0.15/lib/bundler.rb:120:in `require'\n/Users/hipertracker/myapp/config/application.rb:8:in `(root)'\norg/jruby/RubyKernel.java:1038:in `require'\n/Users/hipertracker/myapp/config/application.rb:5:in `(root)'\norg/jruby/RubyKernel.java:1063:in `load'\n./rakefile:56:in `load_project_rakefile'\norg/jruby/RubyArray.java:1603:in `each'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:54:in `load_project_rakefile'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler.rb:25:in `project_application'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/traits/rails.rb:27:in `before_configure'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/traits.rb:28:in `before_configure'\norg/jruby/RubyArray.java:1603:in `each'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/traits.rb:28:in `before_configure'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/config.rb:168:in `initialize'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/task.rb:46:in `initialize'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:25:in `load_rakefile'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/rake-0.9.2/lib/rake/application.rb:61:in `run'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/rake-0.9.2/lib/rake/application.rb:129:in `standard_exception_handling'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/rake-0.9.2/lib/rake/application.rb:59:in `run'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:68:in `run'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/bin/warble:11:in `(root)'\norg/jruby/RubyKernel.java:1063:in `load'\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/bin/warble:19:in `(root)'\n```\n", "labels": [], "number": 1618, "updated_at": "2011-08-22 04:36:57", "user": 649, "closed_at": "2011-08-22 04:36:57", "id": 1033272, "title": "JRuby create WAR but with warnings", "url": "https://api.github.com/repos/rails/rails/issues/1618", "created_at": "2011-06-09 22:57:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1338283", "text": "This is a problem with warbler, not rails.\n\n_In the future you may want to wrap all of your console output with <code>```</code>._\n", "created_at": "2011-06-10 00:11:40", "user": 294954, "id": 1338283}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340452", "text": "Buit that problem happens only for Rails 3.1 RC4, not for Rails 3.0.8, where all works fine.\n", "created_at": "2011-06-10 08:20:01", "user": 649, "id": 1340452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342732", "text": "3.0.8 fixed the problem by including the `Rake::DSL` module into the top level so the warnings go away.\n3.1 did not and so it's not hiding warbler's use of rake stuff at the top level in a non Rakefile.\n", "created_at": "2011-06-10 14:39:13", "user": 294954, "id": 1342732}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550567", "text": "Is this still an issue? please try using 3-1-stable\n", "created_at": "2011-07-11 22:33:34", "user": 52642, "id": 1550567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1670152", "text": "@hipertracker any news about this?\n", "created_at": "2011-07-28 05:21:12", "user": 160941, "id": 1670152}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1670538", "text": "@guilleiguaran nope, it is even worse than before.\n\n$ ruby -v\njruby 1.6.3 (ruby-1.8.7-p330) (2011-07-07 965162f) (Java HotSpot(TM) 64-Bit Server VM 1.6.0_26) [darwin-x86_64-java]\n\n$ rails -v\nRails 3.1.0.rc5\n\n$ gem -v\n1.8.6\n\n## 1st TRY, for gem 'rails', '3.1.0.rc5'\n\n$ warble war\nwarble aborted!\nYou have already activated rake 0.8.7, but your Gemfile requires rake 0.9.2. Consider using bundle exec.\n/Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/bundler-1.0.15/lib/bundler/runtime.rb:31:in `setup'\n(See full trace by running task with --trace)\n\n$ bundle exec warble war\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Config#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/config.rb:188:in `define_tasks'\nWARNING: DSL method Warbler::Config#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/config.rb:191:in`define_tasks'\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:27:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:29:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:30:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:32:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:33:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:35:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:36:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:38:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:39:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:41:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:42:in `load_rakefile'\nWARNING: DSL method Warbler::Application#desc called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:44:in`load_rakefile'\nWARNING: DSL method Warbler::Application#task called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/application.rb:45:in `load_rakefile'\nWARNING: Global access to Rake DSL methods is deprecated.  Please include\n    ...  Rake::DSL into classes and modules which use the Rake DSL methods.\nWARNING: DSL method Warbler::Jar#rm_f called at /Users/hipertracker/.rvm/gems/jruby-1.6.3@rails-pre/gems/warbler-1.3.0/lib/warbler/jar.rb:77:in`create'\nCreating myapp.war\n\nSecond TRY, for gem 'rails', :git => 'git://github.com/rails/rails.git', :branch => '3-1-stable'\n\n$ bundle exec warble war\nwarble aborted!\nundefined method `asset_environment' for class`Sprockets::Railtie'\n\nSo, 3-1-stable is even worse because I cannot create WAR file.\n", "created_at": "2011-07-28 07:06:53", "user": 649, "id": 1670538}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1866494", "text": "Problem solved in Rails 3.1 RC6.\n", "created_at": "2011-08-22 04:36:57", "user": 649, "id": 1866494}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "With RC4 I'm getting the following error:\n\n```\nNoMethodError: undefined method `compress' for :scss:Symbol (in /app/app/assets/stylesheets/application.css.scss)\n\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/compressor.rb:21 'evaluate'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/tilt-1.3.2/lib/tilt/template.rb:76 'render'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/context.rb:107 'block in evaluate'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/context.rb:104 'each'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/context.rb:104 'evaluate'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/bundled_asset.rb:39 'source'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/bundled_asset.rb:49 'digest'\n[PROJECT_ROOT]/vendor/bundle/ruby/1.9.1/gems/sprockets-2.0.0.beta.10/lib/sprockets/server.rb:91 'path'\n```\n\nReverting to RC1 fixes the problem. This seems fine in development, but in production it breaks. Here's the relevant lines from production.rb:\n\n```\n  config.serve_static_assets = true\n\n  # Compress both stylesheets and JavaScripts\n  config.assets.js_compressor  = :uglifier\n  config.assets.css_compressor = :scss\n```\n", "labels": [], "number": 1619, "updated_at": "2011-07-11 22:32:16", "user": 3528, "closed_at": "2011-07-11 22:32:16", "id": 1034062, "title": "3.1.0.rc4 - NoMethodError: undefined method `compress' for :scss:Symbol", "url": "https://api.github.com/repos/rails/rails/issues/1619", "created_at": "2011-06-10 01:47:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339719", "text": "Looks like :scss isn't include in Rails anymore. In the Rails code:\n\nrc1: https://github.com/rails/rails/blob/v3.1.0.rc1/actionpack/lib/sprockets/railtie.rb#L81\n\nrc4: https://github.com/rails/rails/blob/v3.1.0.rc4/actionpack/lib/sprockets/railtie.rb#L83\n\nThe commit that remove it was: https://github.com/rails/rails/commit/e1043cc848937feed6613b9f4d7f4e11495c8151#actionpack/lib/sprockets/railtie.rb\n\nThe compressor is now in Sass-Rails (https://github.com/rails/sass-rails/blob/master/lib/sass/rails/compressor.rb), and we must wait until Sass-Rails release to integrate it  (related: https://github.com/rails/rails/issues/1432)\n", "created_at": "2011-06-10 04:26:23", "user": 160941, "id": 1339719}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340269", "text": "Take a look to #1626\n", "created_at": "2011-06-10 07:33:02", "user": 160941, "id": 1340269}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343366", "text": "Sass-rails automatically sets up the sass compressor. Just remove the line of code that breaks.\n\nThis issue can be closed.\n", "created_at": "2011-06-10 16:15:45", "user": 1839, "id": 1343366}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346379", "text": "I agree with this resolution, but given that the default config from previous RCs now breaks, I think an explanation in the changelog would be warranted.\n", "created_at": "2011-06-11 04:28:13", "user": 10078, "id": 1346379}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This may not be the conventional way of setting up interceptors for ActionMailer, but I cannot seem to get the rails server to start up when defining an ActionMailer interceptor in development.rb.\n\nI have tried this against both Rails 3.0.7 and Rails 3.0.8.\n\nI get the following error when trying to do `rails server thin`:\n\n```\n=> Booting Thin\n=> Rails 3.0.7 application starting in development on http://0.0.0.0:3000\n=> Call with -d to detach\n=> Ctrl-C to shutdown server\nExiting\n/Users/alex/Rails/HealthTalker/bacon/config/environments/development.rb:18:in `block in <top (required)>': uninitialized constant SendgridMailInterceptor (NameError)\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:47:in `class_eval'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:47:in `configure'\n    from /Users/alex/Rails/HealthTalker/bacon/config/environments/development.rb:1:in `<top (required)>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application/bootstrap.rb:11:in `block in <module:Bootstrap>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `instance_exec'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `run'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:134:in `initialize!'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:77:in `method_missing'\n    from /Users/alex/Rails/HealthTalker/bacon/config/environment.rb:5:in `<top (required)>'\n    from /Users/alex/Rails/HealthTalker/bacon/config.ru:3:in `block in <main>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/builder.rb:46:in `instance_eval'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/builder.rb:46:in `initialize'\n    from /Users/alex/Rails/HealthTalker/bacon/config.ru:1:in `new'\n    from /Users/alex/Rails/HealthTalker/bacon/config.ru:1:in `<main>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/builder.rb:35:in `eval'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/builder.rb:35:in `parse_file'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/server.rb:162:in `app'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/server.rb:253:in `wrapped_app'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/rack-1.2.3/lib/rack/server.rb:204:in `start'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands/server.rb:65:in `start'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands.rb:30:in `block in <top (required)>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands.rb:27:in `tap'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands.rb:27:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n\nMy file are set up as follows:\n\nconfig/initializers/sendgrid_mail_interceptor.rb\n\n``` ruby\nclass SendgridMailInterceptor\n\n  def self.delivering_email(message)\n    headers = {}\n\n    headers['to'] = message.to.is_a?(Array) ? message.to : [message.to]\n    JSON.parse(message.header['sendgrid_headers'].to_s).each {|key, value| headers[key] = value} unless message.header['sendgrid_headers'].blank? # just in case we don't pass this header value\n\n    message.header['to'] = message.header['sendgrid_headers'] = nil\n\n    message.header['X-SMTPAPI'] = headers.to_json\n  end\n\nend\n```\n\nconfig/environments/development.rb\n\n``` ruby\nBacon::Application.configure do\n  config.action_mailer.interceptors SendgridMailInterceptor\nend\n```\n", "labels": [], "number": 1620, "updated_at": "2011-07-11 22:30:14", "user": 46724, "closed_at": "2011-07-11 22:30:13", "id": 1034199, "title": "Unitialized Constant ActionMailer interceptors in config/environments/*.rb", "url": "https://api.github.com/repos/rails/rails/issues/1620", "created_at": "2011-06-10 02:46:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339502", "text": "your mail class should not go in initializers directory, that's a very messy way of doing it.  The reason for the error though is syntax.  Try the following, it should solve your issue:\n\nconfig.action_mailer.interceptors = [\"SendgridMailInterceptor\"]\n", "created_at": "2011-06-10 03:12:58", "user": 329751, "id": 1339502}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339540", "text": "I appreciate the fast response, @schowdhury. I'd love to know what the convention is for organizing mail classes. Unfortunately, your change did not resolve the problem, however a new error is being spit out now:\n\n```\n/Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railroady-1.0.2/lib/railroady/app_diagram.rb:24:in `block in constantize': uninitialized constant SendgridMailInterceptor (NameError)\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railroady-1.0.2/lib/railroady/app_diagram.rb:23:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railroady-1.0.2/lib/railroady/app_diagram.rb:23:in `constantize'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:385:in `register_interceptor'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:370:in `block in register_interceptors'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:370:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/base.rb:370:in `register_interceptors'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/railtie.rb:23:in `block (2 levels) in <class:Railtie>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/activesupport-3.0.7/lib/active_support/lazy_load_hooks.rb:36:in `instance_eval'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/activesupport-3.0.7/lib/active_support/lazy_load_hooks.rb:36:in `execute_hook'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/activesupport-3.0.7/lib/active_support/lazy_load_hooks.rb:26:in `on_load'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/actionmailer-3.0.7/lib/action_mailer/railtie.rb:20:in `block in <class:Railtie>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `instance_exec'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `run'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:134:in `initialize!'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:77:in `method_missing'\n    from /Users/alex/Rails/HealthTalker/bacon/config/environment.rb:5:in `<top (required)>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:103:in `require_environment!'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands.rb:22:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n", "created_at": "2011-06-10 03:23:35", "user": 46724, "id": 1339540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339591", "text": "I would put SendgridMailInterceptor class it in the lib directory.  You're better off putting the interceptor config in the initializers directory.\n\nActionMailer::Base.register_interceptor(SendgridMailInterceptor)\n", "created_at": "2011-06-10 03:43:44", "user": 329751, "id": 1339591}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339609", "text": "Things just don't seem to be going my way!\n\nlib/sendgrid_mail_interceptor.rb\n\n``` ruby\nclass SendgridMailInterceptor\n\n  def self.delivering_email(message)\n    headers = {}\n\n    headers['to'] = message.to.is_a?(Array) ? message.to : [message.to]\n    JSON.parse(message.header['sendgrid_headers'].to_s).each {|key, value| headers[key] = value} unless message.header['sendgrid_headers'].blank? # just in case we don't pass this header value\n\n    message.header['to'] = message.header['sendgrid_headers'] = nil\n\n    message.header['X-SMTPAPI'] = headers.to_json\n  end\n\nend\n```\n\nconfig/initializers/sendgrid.rb\n\n``` ruby\nActionMailer::Base.register_interceptor(SendgridMailInterceptor)\n```\n\nResulting in this error:\n\n```\n/Users/alex/Rails/HealthTalker/bacon/config/initializers/sendgrid.rb:1:in `<top (required)>': uninitialized constant SendgridMailInterceptor (NameError)\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/engine.rb:201:in `block (2 levels) in <class:Engine>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/engine.rb:200:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/engine.rb:200:in `block in <class:Engine>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `instance_exec'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:25:in `run'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:50:in `block in run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `each'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/initializable.rb:49:in `run_initializers'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:134:in `initialize!'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:77:in `method_missing'\n    from /Users/alex/Rails/HealthTalker/bacon/config/environment.rb:5:in `<top (required)>'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/application.rb:103:in `require_environment!'\n    from /Users/alex/.rvm/gems/ruby-1.9.2-p180@healthtalker/gems/railties-3.0.7/lib/rails/commands.rb:22:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n\n```\n\nI removed the `config.action_mailer.interceptors = [\"SendgridMailInterceptor\"]` line from config/environments/development.rb as well, just as a note.\n", "created_at": "2011-06-10 03:51:33", "user": 46724, "id": 1339609}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339647", "text": "try adding this to config/application.rb\n\nconfig.autoload_paths += %W(#{Rails.root}/lib)\n", "created_at": "2011-06-10 04:04:03", "user": 329751, "id": 1339647}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1339655", "text": "That did it! This seems like a very complicated way to set up interceptors for ActionMailer to me. Is there a particular reason not to keep it simple and allow for `config.action_mailer.register_interceptor`?\n", "created_at": "2011-06-10 04:06:53", "user": 46724, "id": 1339655}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342917", "text": "You don't need to autoload `lib`. In fact, it's good to have a place for non-autoloaded code.\n\n```\n# config/initializers/sendgrid.rb\nrequire Rails.root.join('lib/sendgrid_mail_interceptor')\nActionMailer::Base.register_interceptor(SendgridMailInterceptor)\n```\n", "created_at": "2011-06-10 15:07:36", "user": 169419, "id": 1342917}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342929", "text": "Don't do `require Rails.root...`. lib will be in the load path so you can just do `require \"sendgrid_mail_interceptor\"`.\n", "created_at": "2011-06-10 15:09:34", "user": 294954, "id": 1342929}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343326", "text": "Thanks guys. Though I'm curious to know why there is not an easy way to do this within an environments/*.rb file. Any idea why that doesn't seem to work as advertised?\n", "created_at": "2011-06-10 16:08:01", "user": 46724, "id": 1343326}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In the above version using the asset pipeline with compass and sass-rails, I am getting an error message on compilation. \n\nThe error messages and files that may be relevant are shown in this gist git://gist.github.com/1018153.git. \n\nI am not sure whether this is a compass, rails 3.1 or sass-rails issue but it is definitely behavior not seen in previous versions of rails. Furthermore, wondering whether compilation is supposed to be as slow as I am experiencing e or if there are settings to speed it up - as currently experienced for me compilation is very slow and was wondering whether the errors have something to do with it. \n\nIf not a rails 3.1 issue let me know and I will report or open an issue on the responsible group.\n\nMy asset pipeline is successfully able to import compass partials and render the css.\n", "labels": [], "number": 1621, "updated_at": "2013-11-27 21:58:17", "user": 99262, "closed_at": "2011-07-11 22:14:21", "id": 1034213, "title": "Rails 3.1.0.rc4 Sass Cache error message", "url": "https://api.github.com/repos/rails/rails/issues/1621", "created_at": "2011-06-10 02:51:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343342", "text": "This bug should be filed against sass-rails and assigned to me.\n", "created_at": "2011-06-10 16:12:06", "user": 1839, "id": 1343342}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343352", "text": "Tracking here: https://github.com/rails/sass-rails/issues/5\n", "created_at": "2011-06-10 16:13:54", "user": 1839, "id": 1343352}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "(NB: so far not a viable fix .. still looking for solutions). \nWas only going to be partial anyway:\n- $1, $2, $`, $&, and $’ now available within a block passed to SafeBuffer#gsub\n- documented limitation that they are not available after the SafeBuffer#gsub call\n  See GH#1555 for the original issue report\n", "labels": [], "number": 1622, "updated_at": "2014-06-19 15:25:27", "user": 16432, "closed_at": "2011-06-14 10:54:15", "id": 1034311, "title": "Fix for SafeBuffer#gsub and magic match globs", "url": "https://api.github.com/repos/rails/rails/issues/1622", "created_at": "2011-06-10 03:38:24", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340221", "text": "I don't think that's the appropriate approach.\n", "created_at": "2011-06-10 07:23:44", "user": 9347, "id": 1340221}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340322", "text": "@dmathiew self.dup gets you back a SafeBuffer and thus into infinite recursion. I was looking for a better way than String.new for getting the unsafe string from a SafeBuffer but I had a blank. Can't to_s because that just gives you back self also..\ndoh,\nto_str.gsub(*args)\nis what I wanted\n", "created_at": "2011-06-10 07:43:59", "user": 16432, "id": 1340322}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356108", "text": "I'm not excited about this solution because it changes the return value.  Before this patch, the return type from `gsub` would be a SafeBuffer instance, now it will just be a String.\n\n@nzkoz what's your opinion?\n", "created_at": "2011-06-12 20:53:14", "user": 3124, "id": 1356108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356225", "text": "I don't think we should bother trying to support this stuff.  While SafeBuffer is a String subclass, that's mostly for erubis and rack compatibility reasons.  In hindsight those reasons aren't really good enough and we could, and probably should, switch to a buffer that doesn't descend from string. \n\nBasically the buffers aren't meant to be used for all these kinds of operations and attempting to use them should probably be considered a bug in the app.  That's my 'grumpy old man' position on it, but at the same time if there's a nice and elegant fix I'm all for it.\n", "created_at": "2011-06-12 21:36:02", "user": 197, "id": 1356225}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356252", "text": "NB: this patch doesn't actually introduce the constraint \"Should not return safe buffer from gsub\"; actually that new constraint is what instigated this as a \"root cause\" fix rather than having to go around and fix all the symptoms. I wasn't following the original change but I guess the reasoning was that after a gsub it is not predictable whether the result is safe any more.\n\nThis patch just provides special-case handling for gsub to ensure magic globs are preserved rather than fall back on the general UNSAFE_STRING_METHODS.each {..} dynamic wrapper generation routine (which loses magic globs). Use of $1 in a gsub block is pretty common and was responsible for the new SafeBuffer constraints breaking escape_javascript, Rack::Utils.escape and so on..\n", "created_at": "2011-06-12 21:43:37", "user": 16432, "id": 1356252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356266", "text": "yeah, the constraint of returning a String not a SafeBuffer is deliberate\n", "created_at": "2011-06-12 21:48:37", "user": 197, "id": 1356266}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365183", "text": "@Roman2k thank you! as my attempts to fix this morphed I got mislead by the test. But now I discover that passing the block just gets me back to square one - $1 not available.\n\nSo this is not a fix .. yet. I might give it one more shot before giving up. I'll close this pull request till then\n", "created_at": "2011-06-14 10:48:27", "user": 16432, "id": 1365183}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "``` ruby\n relation = relation.except(:select).select(\"1\").limit(1)\n```\n\nThe problem with MSSQL is a column has to have a name. Would it be possible to add a name? Something like this:\n\n``` ruby\n relation = relation.except(:select).select(\"1 as _one\").limit(1)\n```\n\nThank you\n", "labels": [], "number": 1623, "updated_at": "2012-04-28 13:08:15", "user": 222976, "closed_at": "2012-04-28 13:08:15", "id": 1034566, "title": "ActiveRecord:  .exists? generates invalid SQL for MSSQL", "url": "https://api.github.com/repos/rails/rails/issues/1623", "created_at": "2011-06-10 05:52:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1416522", "text": "+1 - same break/same fix for Firebird\n", "created_at": "2011-06-22 08:17:18", "user": 177977, "id": 1416522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1444693", "text": "+1 Hey, we are still stuck with Rails 3.0.6 because this issue is still pending... Any word on when we might see this fix?\n", "created_at": "2011-06-27 00:53:30", "user": 498577, "id": 1444693}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1445564", "text": "One word of caution here - \"_one\" is not a valid Firebird column name - extra attention should be payed when choosing the column name.\n", "created_at": "2011-06-27 07:05:42", "user": 177977, "id": 1445564}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1445617", "text": "let's make it `\"one\"` or `\"o\"`. As long as the column has a name MS SQL should be happy.\n", "created_at": "2011-06-27 07:23:51", "user": 222976, "id": 1445617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1567750", "text": "opened a pull request for that: https://github.com/rails/rails/pull/2062\n", "created_at": "2011-07-14 02:25:29", "user": 222976, "id": 1567750}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5396658", "text": "Closing this issue in favor of pull request #2062 and #1139. Thanks!\n", "created_at": "2012-04-28 13:08:15", "user": 26328, "id": 5396658}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- rails 3.0.1\n- sqlite3-ruby 1.3.2\n- fedora 14\n- ruby 1.8.7 (2011-02-18 patchlevel 334) [x86_64-linux]\n- migration run in development environment, using sqlite\n\nall gems handled through bundler\n\nI have written a migration that simply adds an index to a table:\n\n``` ruby\n    class AddIndexBA < ActiveRecord::Migration\n      def self.up\n        add_index :b, :a_id, :name => :b_a\n      end\n\n      def self.down\n        remove_index :b, :b_a\n      end\n    end\n```\n\nAction:\n    $ rake db:migrate\n    $ rake db:rollback\n\nExpected outcome:\n`db/schema.rb` (and the database) unchanged\n\nActual outcome:\n`db/schema.rb` claims the index is there, and indeed it is there in the database\n\nMigration and rollback are considered successful, the migration is listed as down by `db:migrate:status` after the rollback.\n", "labels": [], "number": 1624, "updated_at": "2011-06-18 07:32:09", "user": 199180, "closed_at": "2011-06-18 07:32:09", "id": 1034712, "title": "remove_index not working with named index in sqlite", "url": "https://api.github.com/repos/rails/rails/issues/1624", "created_at": "2011-06-10 06:55:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340189", "text": "The issue does not occur when not providing an explicit name for the index.\n", "created_at": "2011-06-10 07:13:32", "user": 199180, "id": 1340189}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390594", "text": "The problem is that <code>remove_index :table_name, :b_a</code> will try to find the index named <code>index_b_on_b_a</code>, instead of <code>b_a</code> as you expect.\n\nI requested to update the <code>remove_index</code> related documentation in [docrails](https://github.com/lifo/docrails/commit/144a388dec5ae906e8a6900f37706e795188b066) to reflect the current code behavior.\n\nAs a side note, removing the index will just log a warning on 3.0.1, though on master the rollback migration fails as expected.\n", "created_at": "2011-06-17 20:09:35", "user": 389480, "id": 1390594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1392677", "text": "Great, thanks!\n", "created_at": "2011-06-18 07:32:09", "user": 199180, "id": 1392677}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1625, "updated_at": "2014-07-03 04:53:11", "user": 6399, "closed_at": "2011-06-10 07:29:58", "id": 1034766, "title": "Three minor fixes to tests", "url": "https://api.github.com/repos/rails/rails/issues/1625", "created_at": "2011-06-10 07:11:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Adding back support for sass-rails CSS compressor with config.assets.css_compressor = :scss\n\nFix #1578 and #1619\n\ncc @chriseppstein: please, can you review this? :)\n", "labels": [], "number": 1626, "updated_at": "2014-06-12 09:32:51", "user": 160941, "closed_at": "2011-06-10 16:19:36", "id": 1034814, "title": "Adding back Sass compressor", "url": "https://api.github.com/repos/rails/rails/issues/1626", "created_at": "2011-06-10 07:28:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340275", "text": "Could you not add the empty spaces line 33 please ?\n", "created_at": "2011-06-10 07:34:55", "user": 9347, "id": 1340275}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340276", "text": "And add a test ?\n", "created_at": "2011-06-10 07:35:07", "user": 9347, "id": 1340276}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1340298", "text": "Actually I was searching but I don't found any test for compressors, I think I can add some tests for entire file in this or in another pull request\n\nIn Line 33 I remove trailing whitespaces :)\n", "created_at": "2011-06-10 07:41:00", "user": 160941, "id": 1340298}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343273", "text": "This hardcoding approach was removed for a reason. Sprockets needs to provide a public api for adding shorthands for compressors. Something like:\n\n```\nSprockets.register_css_compressor(:scss, Sass::Rails::CssCompressor.new)\n```\n", "created_at": "2011-06-10 16:00:55", "user": 1839, "id": 1343273}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343286", "text": "But that would only be for other projects to use. The sass-rails plugin automatically sets this up for you. You're best bet is to remove this line altogether.\n\n@wycats: I recommend this pull request be closed and not merged.\n", "created_at": "2011-06-10 16:02:54", "user": 1839, "id": 1343286}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343334", "text": "@chriseppstein, I was thinking the same, it needs to provide a public api to register javascript and css compressors, I will work on it.\n\nThen, adding sass-rails plugin to the project fix the error described in #1578 and #1619, right?\n", "created_at": "2011-06-10 16:11:10", "user": 160941, "id": 1343334}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343388", "text": "@guilleiguaran It's unnecessary configuration. Sass-rails does this [automatically](https://github.com/rails/sass-rails/blob/master/lib/sass/rails/railtie.rb#L38-43). Just remove the setting.\n", "created_at": "2011-06-10 16:19:34", "user": 1839, "id": 1343388}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343406", "text": "Thanks!!!, I'm closing this\n", "created_at": "2011-06-10 16:21:45", "user": 160941, "id": 1343406}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using exec_cache with pgbouncer in transaction mode, as the connections pool can cause random problems.\n\nScenario:\n- the application performs a query through ActiveRecord:\n\nSomething.find 2\nSomething Load (0.9ms) SELECT \"somethings\" .\\* FROM \"somethings\" WHERE \"somethings.\" Id \"= $ 1 LIMIT 1 [[\" id \", 2]]\n- pgbouncer connects to the backend (lets call it PG-1)\n- ActiveRecord creates a prepared statement\n- pgbouncer prepares for the backend PG-1 prepared statement called a3:\n\n2011-06-10 9:34:04 EDT LOG: duration: 0.505 ms parse a3: SELECT \"somethings\" .\\* FROM \"somethings\" WHERE \"somethings.\" Id \"= $ 1 LIMIT 1\n- ActiveRecord execute prepared statement\n- pgbouncer performs pg backend EXECUTE a3 (...) on PG-1\n\n> 2011-06-10 9:34:04 EDT LOG: duration: 0.048 ms bind a3: SELECT \"somethings\" .\\* FROM \"somethings\" WHERE \"somethings.\" Id \"= $ 1 LIMIT 1\n> 2011-06-10 9:34:04 GMT DETAIL: parameters: $ 1 = '2 '\n> 2011-06-10 9:34:04 EDT LOG: duration: 0.045 ms execute a3: SELECT \"somethings\" .\\* FROM \"somethings\" WHERE \"somethings.\" Id \"= $ 1 LIMIT 1\n> 2011-06-10 9:34:04 GMT DETAIL: parameters: $ 1 = '2 '\n- the application receives the result\n\n> Something Id: 2, symbol: \"sss2\", description: nil, created_at: \"2011-06-10 07:19:34\", updated_at: \"2011-06-10 07:19:34\"\n- at this time a different application process connects to pgbouncer, goes to the backend PG-1 and takes it (for example - with begin transaction)\n- the first application process once again executes the same query, with other parameters\n\nSomething.find 3\n- pgbouncer connects to the backend (but this time it goes to the PG-2, because the PG-1 is busy)\n- ActiveRecord has prepared statement in exec_cache (called a3)\n- ActiveRecord execute prepared statemnet a3\n\n> Something Load (1.2ms) SELECT \"somethings\" .\\* FROM \"somethings\" WHERE \"somethings.\" Id \"= $ 1 LIMIT 1 [[\" id \", 3]]\n- pgbouncer performs  EXECUTE a3 (...) on backend PG-2\n- Fail - the PG-2 has no such prepared statement\n\n> PGError: ERROR: Prepared statement \"a3\" does not exist\n\nSolutions:\n- switching pgbouncer mode to session - bad, because it increases the consumption of resources\n- wrapping request in transaction - wrong - also increases consumption of resources, with additional side effec - there may be long-lasting transactions that will cause deadlocks\n- add option to not use ActiveRecord exec_cache - fix all issues with pgbouncer and additionaly another described [here](http://www.depesz.com/index.php/2008/05/10/prepared-statements-gotcha/)\n", "labels": ["PostgreSQL", "activerecord", "stale"], "number": 1627, "updated_at": "2015-08-25 05:59:32", "user": 58145, "closed_at": "2015-08-25 05:59:31", "id": 1034963, "title": "AR 3.1 / pgbouncer / PostgreSQL issue with prepared statements", "url": "https://api.github.com/repos/rails/rails/issues/1627", "created_at": "2011-06-10 08:23:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2449922", "text": "It would be nice to have an option for disabling prepared statements.  \n\nThe issues I've ran into with prepared statements:\n- All Rails processes have to be shutdown during a database schema migration, otherwise the prepared statement won't match.\n- Using prepared statements prevents the right index from being picked in certain cases.\n", "created_at": "2011-10-19 00:43:43", "user": 1179, "id": 2449922}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2449974", "text": "The schema migrations issue should be fixed in 3.1.2 with 818d285305502cc6191a98400b43633f44394f6e\n\nWhich cases prevent correct indexes from being used?\n", "created_at": "2011-10-19 00:50:45", "user": 3124, "id": 2449974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2449981", "text": "http://www.depesz.com/index.php/2008/05/10/prepared-statements-gotcha/\n", "created_at": "2011-10-19 00:51:40", "user": 1179, "id": 2449981}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2450326", "text": "Has this actually happened to you yet?  I don't think it's actually possible to hit a case like this unless you're using the adapter directly and writing your own statements.  But regardless of that, we can specify hints as to the param type and eliminate this case.\n\n[parameter data types can optionally be specified](http://www.postgresql.org/docs/current/static/sql-prepare.html)\n", "created_at": "2011-10-19 01:09:03", "user": 3124, "id": 2450326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2450456", "text": "No, hasn't happened to me yet.  :)  \n\nBut I don't see a reason why ActiveRecord wouldn't generate a query like:\n\n<pre>\nPREPARE test2 (bool) AS SELECT * FROM users WHERE is_active = $1 ORDER BY username ASC limit 50;\nEXECUTE test2(true);\n</pre>\n", "created_at": "2011-10-19 01:15:44", "user": 1179, "id": 2450456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2517305", "text": "FYI more interest in adding a \"disable prepared statement\" option; see the discussion in the comments at: http://patshaughnessy.net/2011/10/22/show-some-love-for-prepared-statements-in-rails-3-1\n", "created_at": "2011-10-25 13:48:57", "user": 28140, "id": 2517305}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2796796", "text": "Definitely agree, we need to be able to disable prepared statement :/\nWe are running behing pgbouncer and can't upgrade to rails 3.1 until we can disable them.\nPlease :)\n", "created_at": "2011-11-19 01:37:15", "user": 58552, "id": 2796796}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3798090", "text": "I'm running into this problem while using Resque.  Despite suggestions I've read, setting a Resque.before_fork to open a new connection isn't working for me.\n", "created_at": "2012-02-03 15:13:13", "user": 10112, "id": 3798090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3922333", "text": "Elight, did you try restarting the Resque workers?  That was my problem.  Then the before_fork fix worked perfectly on rails 3.2 + Resque.  \n", "created_at": "2012-02-11 18:19:04", "user": 1004747, "id": 3922333}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4320164", "text": "> Definitely agree, we need to be able to disable prepared statement :/\n\n+1. There are billions of different PG setups. And sometimes it makes great sense to disable this feature. We've just found our one (using pgpool) as very troublesome. Random exceptions and all that stuff :(\n", "created_at": "2012-03-05 10:27:12", "user": 930257, "id": 4320164}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4320672", "text": "+1 here, having problems with PgBouncer as well. Just having an easy option to disable that would solve it all.\n", "created_at": "2012-03-05 11:03:33", "user": 4277, "id": 4320672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4321862", "text": "ericschiller: turns out it was another gem that monkey patched run_hool that was preventing the before_fork from occurring.\n\nMonkey patching is EEEEEVILLLLLLLL.\n", "created_at": "2012-03-05 12:39:30", "user": 10112, "id": 4321862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4372675", "text": "I have had nothing but problems with prepared statement.  First it was Unicorn and now it's Resque.  The before_fork doesn't seem to help for me (and yes I'm restarting the queues).  I wonder if I have a Gem that's monkey patching something.\n", "created_at": "2012-03-07 17:20:06", "user": 871, "id": 4372675}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399445", "text": "@tenderlove can we close this one?\n", "created_at": "2012-04-28 19:27:06", "user": 47848, "id": 5399445}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5400095", "text": "For my part, I found that is was monkey patch in the apsender gem that\nwas causing my problems.  That's one less person having this problem.\n\nOn Apr 28, 2012, at 3:27 PM, \"Rafael Mendonça França\"\nreply@reply.github.com\nwrote:\n\n> @tenderlove can we close this one?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1627#issuecomment-5399445\n", "created_at": "2012-04-28 20:49:36", "user": 10112, "id": 5400095}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5827778", "text": "Yes, I found that the iPhone notification gem I was using was monkey patching Resque. I switched to something less good, but works.\n", "created_at": "2012-05-21 16:59:21", "user": 871, "id": 5827778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5883214", "text": "Pgbouncer still doesn't allow to work with prepared statement, so we can't move to Rails 3.1+ until we can disable them.\nWe have an extensive rails cluster with 2000+ rails instances connected to the same postgres, pgbouncer is essential for us.\n\nSo not sure we can close this issue :)\n", "created_at": "2012-05-23 20:06:49", "user": 58552, "id": 5883214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7006126", "text": "@tenderlove I just ran into this too.\n\nI think what happens is something like this:\n- worker process is created. AR connection established. prepared statement counter is at 0.\n- worker forks child to do work. AR connection is copied to child.\n- child creates some prepared statements. counter is at X\n- child exits\n- worker forks second child\n- counter is at 0, but there are actually X prepared statements already allocated in the connection.\n- second child tries to create prepared statement => error\n\nInside the postgres statement cache, the `@cache` is keyed based on the pid, but the pid does not affect `@counter` or `#next_key` in any way, hence this issue.\n\nI think we should:\n- Make `#next_key` include the pid as well as the `@counter`\n- deallocate all of a given process' prepared statements in its `at_exit` hook\n\nDoing these things would prevent this bug, I think. But I am not sure if there would be a noticeable performance cost of deallocating `at_exit`. Thoughts?\n", "created_at": "2012-07-16 13:39:30", "user": 1979, "id": 7006126}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7006151", "text": "I should note that my scenario described above related to resque workers, which is where I encountered the problem.\n", "created_at": "2012-07-16 13:40:39", "user": 1979, "id": 7006151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7972497", "text": "I'm not using resque, but unicorn + pg.  I just got the same error.  I have no idea how to fix it before we deploy either, and it's kind of hard to reproduce.\n", "created_at": "2012-08-23 15:01:22", "user": 984414, "id": 7972497}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7972979", "text": "Also is this related to https://github.com/rails/rails/pull/5872?\n", "created_at": "2012-08-23 15:15:50", "user": 984414, "id": 7972979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7973114", "text": "@fingermark what version of everything are you using? (also, if you mention issues by typing #5872 github will link them)\n", "created_at": "2012-08-23 15:20:31", "user": 27786, "id": 7973114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7973335", "text": "rails 3.2.6\npg 0.14.0\nunicorn 4.3.1 (with 2 workers)\n\n```\nstaging:\n  adapter: postgresql\n  encoding: unicode\n  database: myproj_development\n  username: postgres\n  password: kittensfromhell\n```\n\nAnd more info on the error:\n\n```\n  SQL (2.0ms)  DELETE FROM \"categories\" WHERE \"categories\".\"id\" = $1  [[\"id\", 4]]\nPG::Error: ERROR:  prepared statement \"a3\" already exists\n: DELETE FROM \"categories\" WHERE \"categories\".\"id\" = $1\n   (0.5ms)  ROLLBACK\nError setting category: PG::Error: ERROR:  prepared statement \"a3\" already exists\n: DELETE FROM \"categories\" WHERE \"categories\".\"id\" = $1:\n  /var/www/myproj/shared/bundle/ruby/1.9.1/gems/activerecord-3.2.6/lib/active_record/connection_adapters/postgresql_adapter.rb:1192:in `prepare'\n```\n\nThe only other odd thing about my setup is that model has the following:\n\n```\n  establish_connection \"myproj_#{Rails.env}\"\n```\n\nSo, to reproduce the issue I just rapidly click on the submit form and would eventually hit that error.  By adding `prepared_statement: false` to my database.yml, I have yet to hit that error while rapidly submitting the form.\n", "created_at": "2012-08-23 15:27:29", "user": 984414, "id": 7973335}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8139208", "text": "Hitting the exact same probleme using resque, but on earlier version of rails. \nSetting prepared_statement: false seemed to resolve it for me too.\n\nrails 3.2.2\npg 0.13.2\nresque 1.21\n", "created_at": "2012-08-29 20:08:25", "user": 315853, "id": 8139208}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10041258", "text": "@fingermark is `prepared_statements` really an option in `database.yml`?\n", "created_at": "2012-11-03 16:48:22", "user": 1179, "id": 10041258}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10041367", "text": "It looks like you can set `prepared_statements: true` in `config/database.yml` and it seems to disable prepared statements in postgresql.  \n\n`Product.find(1)` executes this sql: `SELECT  \"products\".* FROM \"products\"  WHERE \"products\".\"id\" = 1 LIMIT 1`\n\nSo, I think this ticket can be closed? @tenderlove  ?\n", "created_at": "2012-11-03 16:57:48", "user": 1179, "id": 10041367}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10635436", "text": "On activerecord-3.2.8 we're having the same issue. In particular, the calls to `#table_exists?` (and a few other methods on the Postgresql adapter) _always_ executes a prepared statement (via `#exec_cache`), regardless of whether `prepared_statements: false` is set.\n\nOur use case, like (it seems) others, is to be able to use a connection pooler (in this case, pgbouncer) - unfortunately, the reliance on prepared statements and the query cache seems to make this unworkable, which is incredibly unfortunate.\n\nAre there any plans to fix this? Or is the official answer \"don't use a connection pooler or don't use activerecord >=3.1\"?\n", "created_at": "2012-11-22 14:07:41", "user": 15210, "id": 10635436}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10635793", "text": "For anyone else who finds this thread: it seems like ar-3.2.9 might fix the issue. I'll try it out and report back ;-)\n", "created_at": "2012-11-22 14:21:31", "user": 15210, "id": 10635793}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10851277", "text": "@agnoster Just tried applying this and we're still seeing the error :(\n", "created_at": "2012-11-29 15:28:35", "user": 12774, "id": 10851277}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10851472", "text": "@ajsharp Are you also setting `prepared_statements: false` in your `database.yml`? What's the specific error you're getting?\n", "created_at": "2012-11-29 15:32:46", "user": 15210, "id": 10851472}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10855858", "text": "@agnoster We don't have `prepared_statements` in our db config at all, so, I'm not sure what the default value is...\n\nThe error we _were_ getting was the same \"prepared statement already exists\" that's documented above. This was happening in resque workers, and adding a reconnect block fixed it: https://github.com/rails/rails/pull/5872#issuecomment-10855781.\n", "created_at": "2012-11-29 16:46:58", "user": 12774, "id": 10855858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10857410", "text": "Try adding the config, it should disable that behavior (I believe the default is to use prepared statements unless you specify otherwise). If you still get the error, I can look at it if you copy and paste it.\n\n## \n\nIsaac Wolkerstorfer\n\nTyping with my thumbs, please forgive terseness and typos.\n\nOn 29 Nov 2012, at 17:47, Alex Sharp notifications@github.com wrote:\n\n> @agnoster We don't have prepared_statements in our db config at all, so, I'm not sure what the default value is...\n> \n> The error we were getting was the same \"prepared statement already exists\" that's documented above. This was happening in resque workers, and adding a reconnect block fixed it: #5872.\n> \n> —\n> Reply to this email directly or view it on GitHub.\n", "created_at": "2012-11-29 17:22:46", "user": 15210, "id": 10857410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18100311", "text": "I am hitting the same wall with a bit different set up. My setup is goliath with em-synchrony and em-postgresql-adapter. When\n\n```\n  prepared_statements: true\n```\n\nthen running ab -c 100 -n 100 leads to 1-10 failed requests with\n\n```\nPG::Error: ERROR:  prepared statement \"a1\" does not exis\n```\n\ninterestingly setting\n\n```\n  prepared_statements: false\n```\n\nleads to 97 failed requests with typical error being\n\n```\nPG::Error: ERROR:  bind message supplies 1 parameters, but prepared statement \"a1\" requires 0\n```\n", "created_at": "2013-05-18 12:37:18", "user": 26891, "id": 18100311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27049512", "text": "Is this still present on 4.0+?\n", "created_at": "2013-10-25 01:35:53", "user": 47848, "id": 27049512}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/27350083", "text": "We're hitting the same issue in production with unicorn and Rails 4. We have hooks defined to disconnect and connect, but it still happens every couple of days. \n", "created_at": "2013-10-29 22:33:06", "user": 13226, "id": 27350083}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28955151", "text": "Sorry if this is not relevant, but I am also seeing a similar issue occasionally on Rails 3.2.15 under Unicorn with multiple workers when using memcachier/dalli as a memcache client. Database queries start failing with a \"prepared statement already exists\" error, and it seems to be correlated with the memcache server going down for some period of time; the prepared statement problems don't go away until Unicorn is completely restarted.\n", "created_at": "2013-11-21 03:23:39", "user": 451345, "id": 28955151}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/28971356", "text": "Interesting, we are also using memcachier/dalli in the app that is seeing the problem.\n", "created_at": "2013-11-21 10:03:48", "user": 13226, "id": 28971356}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30103004", "text": "@toreriklinnerud You are still seeing this problem, even with prepared_statements disabled in your database.yml?\n", "created_at": "2013-12-09 03:11:26", "user": 788695, "id": 30103004}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/30132584", "text": "We run on heroku so we can't touch database.yml and haven't tried disabling it. It hasn't happen for a while now (a few weeks?), so possibly there is an additional component required for it to happen that we haven't identified yet. \n", "created_at": "2013-12-09 13:44:40", "user": 13226, "id": 30132584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31035002", "text": "I was finally able to locally reproduce the behavior I was seeing, though it's still pretty rare. It seems to be because we're using Ruby's `Timeout.timeout` (something similar is also used in rack-timeout). If the time limit is reached and `timeout`  happens to raise an exception in an inopportune place in the main thread (like right [here](https://github.com/rails/rails/blob/2b22564/activerecord/lib/active_record/scoping.rb#L96), which is not inside the `begin/ensure`), the main process gets into a weird state and can't be cleanly recovered. \nDo the Rails developers want patches to fix these situations, or is this an unsupported use case and I should just kill the process entirely to avoid any risk of corruption?\n", "created_at": "2013-12-20 19:28:25", "user": 451345, "id": 31035002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/35780011", "text": "It seems like this should be safe to close, I don't see any reports in here of bugs after `prepared_statements: false` is added to the database.yml file.\n", "created_at": "2014-02-21 22:21:13", "user": 2649, "id": 35780011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/38790303", "text": "Regardless of if the specific problem @underley faced has been \nresolved, is it now possible to disable prepared statements on specific \nqueries, as mentioned in oldest comments ?\n\nI do unusual AR queries manipulation and would love to be able to\ndecide when not to use prepared statements.\n\nEDIT : oh nervermind, just saw `AbstractAdapter#unprepared_statement`\n", "created_at": "2014-03-27 11:05:46", "user": 54562, "id": 38790303}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39021739", "text": "@oelmekki can you elaborate on your use case for `AbstractAdapter#unprepared_statement`? It was introduced as a work-around for an issue with `to_sql`, and I had hoped we could deprecate it once that was fixed. (Largely because it currently does two different things, and only one of those actually involves the use of PREPARE/EXECUTE.)\n\nTo be clear, before anyone panics: I'm only talking about the block method, not the `prepared_statements` connection option.\n", "created_at": "2014-03-30 09:58:06", "user": 1034, "id": 39021739}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39586711", "text": "@matthewd I didn't used it, finally.\n\nI wanted it because on [one of my projects](https://github.com/oelmekki/activerecord_any_of), I manipulate relations to OR them. The idea is to extract relevant values (bind_values, join_values, etc), then [use arel #or method on their constraints to compute a new query, attaching bound values back](https://github.com/oelmekki/activerecord_any_of/blob/master/lib/activerecord_any_of/alternative_builder.rb#L74).\n\nIn that context, prepared statement would fail, because if you join arel constraints on something like `foo = $1 and bar = $2` and `fooz = $1 and baz = $2`, it will produce `(foo = $1 and baz = $2) or (fooz = $1 and baz = $2)`.\n\nSo, I wanted to use `#unprepared_statement` to avoid that, but it turned out statement where already prepared before even reaching my methods, making `#unprepared_statement` unusable.\n\nTL;DR : feel free to remove it :)\n", "created_at": "2014-04-04 16:54:25", "user": 54562, "id": 39586711}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39592413", "text": "@oelmekki Awesome! Thanks for letting me know.\n", "created_at": "2014-04-04 17:50:30", "user": 1034, "id": 39592413}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/39593005", "text": "Closing base on https://github.com/rails/rails/issues/1627#issuecomment-35780011\n", "created_at": "2014-04-04 17:56:34", "user": 47848, "id": 39593005}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56206229", "text": "I'm still seeing this on Rails 4.1.4 when combined with `timeout`. Is this just not a supported configuration? It seems pretty common, and is something Heroku recommends using.\n", "created_at": "2014-09-19 17:12:56", "user": 451345, "id": 56206229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56208601", "text": "Also happen to us and let one of the unicorn worker in a corrupted state.\n\nI'm wondering if we should expect Rails to keep the database in a clean state wherever an exception can happen ? \n\nIf yes, there is probably something to do to fix the problem with prepared statement, we encounter the problem on rails 4.1.1, exception was raised [here](https://github.com/rails/rails/blob/v4.1.1/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L862)\n\nIf no, we probably have to restart the unicorn worker if a timeout happen. This is actually what does unicorn timeout mechanism but we can't get details and backtrace with this..\n\nMaybe a new issue would be better to discuss this ?\n\ncc @rafaelfranca , @tenderlove \n", "created_at": "2014-09-19 17:31:41", "user": 319570, "id": 56208601}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56209160", "text": "No new issues please. If we want to continue the discussion I can reopen the issue, but seems disabling prepared statement fix the issue. \n", "created_at": "2014-09-19 17:36:09", "user": 47848, "id": 56209160}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56210748", "text": "@rafaelfranca , I suggest new issue because the original one mention AR 3.1 in the title.\n\nAs it may be possible to deactivate prepared statement to fix the issue, won't it degrade performance in production ? \n\n> I'm wondering if we should expect Rails to keep the database in a clean state wherever an exception can happen ? \n\nI would love to know what is the core team position about this. \nIt seems for me a real issue to leave a database connection open but unusable, isn't it ?\n", "created_at": "2014-09-19 17:48:41", "user": 319570, "id": 56210748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56211414", "text": "How is the behaviour at current master?\n", "created_at": "2014-09-19 17:54:10", "user": 47848, "id": 56211414}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56212278", "text": "@rafaelfranca , this is hardly reproducible as it happen when a timeout exception occur when the execution is at the \"right\" place. \n\nI have no idea how a test for can be written, do you ? I may try to reproduce it locally.\n", "created_at": "2014-09-19 18:00:36", "user": 319570, "id": 56212278}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56213360", "text": "@rafaelfranca , thanks for reopening.\nI would love to help if I can have some answer or directive.\n", "created_at": "2014-09-19 18:08:51", "user": 319570, "id": 56213360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56213641", "text": "I'm never had this issue but I'd say we should keep the database in a consistent state. @matthewd could help more than I.\n", "created_at": "2014-09-19 18:11:05", "user": 47848, "id": 56213641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56219485", "text": "> we should expect Rails to keep the database in a clean state wherever an exception can happen\n\nYes, we should. But what we're talking about here is different: we're talking about some other thread injecting an exception at any possible point in the code. I'm not convinced that's a realistic problem to solve.\n\n[`Thread#kill`](http://headius.blogspot.com.au/2008/02/rubys-threadraise-threadkill-timeoutrb.html). :neutral_face: \n\nSufficiently palatable PRs to fix this are welcome... but it feels like we'd likely be chasing it forever.\n", "created_at": "2014-09-19 18:56:04", "user": 1034, "id": 56219485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/56220113", "text": "However, if this is becoming a discussion about AR getting confused by inopportune firing of a ruby timeout, then yes, we should move to a new issue: it might have vaguely similar symptoms, but I think it's actually quite unrelated to what everyone else here was talking about 1-3 years ago.\n", "created_at": "2014-09-19 19:00:39", "user": 1034, "id": 56220113}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/59990694", "text": "This happened to the app I am working on. Rails 4.1, unicorn, we use timeout, deployed on Heroku. \nFrom what I see errors started from a timeout\n", "created_at": "2014-10-21 20:12:07", "user": 3282823, "id": 59990694}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/60638093", "text": "This happened again in our app after timeout. Is there any way I can help to debug this?\nAre there any workarounds for this issue? Heroku support suggests to turn off prepared statements, but I would rather not do it\n", "created_at": "2014-10-27 17:53:20", "user": 3282823, "id": 60638093}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62851319", "text": "@abezzub: trying the suggested fix and reporting back would be most helpful. This seems hard to reproduce over a span of years, so any extra details you can capture would be great. You are in a unique position as this seems to happen regularly to you. \n", "created_at": "2014-11-13 07:22:56", "user": 9337, "id": 62851319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62866211", "text": "I looked at the logs/code again and I think I might know what is going on.\n\nHeroku suggests using their version of timeout gem that raises an error in main thread if it takes too long:\nhttps://github.com/heroku/rack-timeout/blob/master/lib/rack/timeout.rb#L91-L108\n\nThe \"prepared statement already exists\" error happened in following method in postgres adapter: https://github.com/rails/rails/blob/4-1-stable/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L864-L878\n\nAs I understand Heroku's gem created timeout exception just at the right time. Let's assume timeout exception happens right after `@connection.prepare nextkey, sql` finishes successfully:\n\n```\n        def prepare_statement(sql)\n          sql_key = sql_key(sql)\n          unless @statements.key? sql_key\n            nextkey = @statements.next_key\n            begin\n              @connection.prepare nextkey, sql\n            rescue => e\n              raise translate_exception_class(e, sql)\n            end\n\n           # timeout happens here!\n\n            # Clear the queue\n            @connection.get_last_result\n            @statements[sql_key] = nextkey # next key is \"reserved\" here\n          end\n          @statements[sql_key]\n        end\n```\n\nthen Postgres has prepared statement, but `@statements` was not updated and does not know that `nextkey` was already used. So the next time when `prepare_statement` is going to be called it is guaranteed to fail because `@statements.next_key` will return the same nextkey that was already used in PG. Current version of code that determines what `next_key` is:\n\n```\n        def next_key\n          \"a#{@counter + 1}\"\n        end\n\n        def []=(sql, key)\n          while @max <= cache.size\n            dealloc(cache.shift.last)\n          end\n          @counter += 1\n          cache[sql] = key\n        end\n```\n\nI think if `nextkey` is reserved before `@connection.prepare nextkey, sql` is started then the issue will be fixed. If this is the case I would be happy/interested to work on a fix.\n\ncc: @matthewd \n", "created_at": "2014-11-13 09:49:32", "user": 3282823, "id": 62866211}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62868584", "text": "I created the PR. I think moving counter increment to `next_key` method should be enough to fix it.\n", "created_at": "2014-11-13 10:09:47", "user": 3282823, "id": 62868584}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62868964", "text": "@abezzub: excellent digging, looks absolutely right to me. \n\nA simple fix might be to just the increment `@counter` whenever `next_key` is called, would that not fix the issue? It would mean the potential for \"holes\" in the sequence of prepared statement names, but I don't think that would be much of an issue. Thoughts?\n", "created_at": "2014-11-13 10:12:56", "user": 9337, "id": 62868964}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/62933069", "text": "@rafaelfranca, is it possible to include this fix in 4.2?\n", "created_at": "2014-11-13 17:37:42", "user": 3282823, "id": 62933069}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/63090514", "text": "I can confirm that my assumption was correct. I digged in the logs a bit more and I see that timeout exception that triggered \"prepared statement\" errors was raised before key is saved in the cache:\n\nhttps://github.com/rails/rails/blob/4-1-stable/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L512\n\nHere is stack trace from my app's log:\n\n```\nRack::Timeout::RequestTimeoutError (Request ran for longer than 25 seconds.): \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:537:in `dealloc' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:512:in `[]=' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:875:in `prepare_statement' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:826:in `exec_cache' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql/database_statements.rb:138:in `exec_query' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:954:in `select' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/abstract/database_statements.rb:24:in `select_all' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/abstract/query_cache.rb:68:in `block in select_all' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/abstract/query_cache.rb:83:in `cache_sql' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/abstract/query_cache.rb:68:in `select_all' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/relation/calculations.rb:265:in `execute_simple_calculation' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/relation/calculations.rb:227:in `perform_calculation' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/relation/calculations.rb:119:in `calculate' \nvendor/bundle/ruby/2.1.0/gems/activerecord-4.1.6/lib/active_record/relation/calculations.rb:75:in `sum' \n```\n", "created_at": "2014-11-14 16:31:42", "user": 3282823, "id": 63090514}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/69765140", "text": "We just experienced this exact problem in production. Glad to see we're not alone. I vote for incrementing the counter in `next_key`.\n", "created_at": "2015-01-13 15:48:52", "user": 746336, "id": 69765140}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/71964859", "text": "+1 just experienced it in production\n\n``` ruby\ngem 'rails', '4.2.0'\ngem 'puma', '2.11.0'\ngem 'pg', '0.18.1'\ngem 'postgres_ext', '2.4.0'\n```\n\n```\nvendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb:637:in `prepare': PG::DuplicatePstatement: ERROR:  prepared statement \"a3\" already exists\n: SELECT  \"users\".* FROM \"users\" WHERE \"users\".\"id\" = $1 LIMIT 1 (ActiveRecord::StatementInvalid)\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb:637:in `prepare_statement'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb:596:in `exec_cache'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb:585:in `execute_and_clear'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql/database_statements.rb:160:in `exec_query'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/database_statements.rb:336:in `select'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/database_statements.rb:32:in `select_all'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb:68:in `block in select_all'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb:83:in `cache_sql'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb:68:in `select_all'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/querying.rb:39:in `find_by_sql'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/statement_cache.rb:107:in `execute'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/core.rb:186:in `find_by'\n    from vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/dynamic_matchers.rb:70:in `find_by_id'\n    from vendor/bundle/ruby/2.2.0/gems/sorcery-0.9.0/lib/sorcery/adapters/active_record_adapter.rb:85:in `find_by_id'\n```\n", "created_at": "2015-01-29 03:51:21", "user": 344198, "id": 71964859}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/76037707", "text": "+1 running into this error in production on Heroku\n\n```\ngem 'rails', '4.2.0'\ngem 'puma', '2.11.0'\ngem 'pg', '0.18.1'\ngem 'rack-timeout', '0.2.0'\n```\n\n```\nActiveRecord::StatementInvalid: PG::DuplicatePstatement: ERROR: prepared statement \"a665\" already exists\n: SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"user_id\" = $1 ORDER BY \"posts\".\"created_at\" ASC, \"posts\".\"created_at\" DESC\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb\" line 637 in prepare\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb\" line 637 in prepare_statement\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb\" line 596 in exec_cache\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql_adapter.rb\" line 585 in execute_and_clear\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/postgresql/database_statements.rb\" line 160 in exec_query\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/database_statements.rb\" line 336 in select\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/database_statements.rb\" line 32 in select_all\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb\" line 68 in block in select_all\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb\" line 83 in cache_sql\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/connection_adapters/abstract/query_cache.rb\" line 68 in select_all\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/querying.rb\" line 39 in find_by_sql\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/relation.rb\" line 638 in exec_queries\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/association_relation.rb\" line 19 in exec_queries\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/relation.rb\" line 514 in load\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/relation.rb\" line 243 in to_a\nFile \"/app/vendor/bundle/ruby/2.2.0/gems/activerecord-4.2.0/lib/active_record/relation/delegation.rb\" in to_ary\n```\n", "created_at": "2015-02-25 19:33:50", "user": 2249180, "id": 76037707}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/76172622", "text": "@yellowaj this ticket is probably never going to be fixed as the issue is correctly blamed on `rack-timeout`. \n\nThe suggested fix is to remove `rack-timeout` from your `Gemfile` (it raises exceptions on the main thread and is completely unsafe) and then fix any long-running database requests as best you can.\n\nHope this helps you forward.\n", "created_at": "2015-02-26 12:50:12", "user": 9337, "id": 76172622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/76319137", "text": "@rud thanks for the suggestion!\n", "created_at": "2015-02-27 02:20:08", "user": 2249180, "id": 76319137}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/76517760", "text": "We ended up turning off prepared statements. It didn't make any noticeable performance difference.\n", "created_at": "2015-02-28 08:54:44", "user": 746336, "id": 76517760}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/115469452", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-06-26 02:35:23", "user": 7468109, "id": 115469452}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/118410267", "text": "I hit this when switching from unicorn to puma. Removing rack-timeout \"fixed\" it for me.\n", "created_at": "2015-07-03 19:13:36", "user": 1762666, "id": 118410267}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/134489562", "text": "This issue has been automatically closed because of inactivity.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-08-25 05:59:32", "user": 7468109, "id": 134489562}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "For ruby-1.9.2\n\n<pre>\nrails/railties git:(3-0-stable)* ruby -I test test/generators/app_generator_test.rb --name=\"/test_application_name_is_detected_if_it_exists_and_app_folder_renamed/\"\nLoaded suite test/generators/app_generator_test\nStarted\n\"/Users/arun/checkouts/rails/railties/test/fixtures/tmp/myapp\" # Before FileUtils.mv (Dir.pwd)\n\"/Users/arun/checkouts/rails/railties/test/fixtures/tmp/myapp_moved\" # After FileUtils.mv (Dir.pwd)\n.\nFinished in 0.094365 seconds.\n\n1 tests, 4 assertions, 0 failures, 0 errors, 0 skips\n</pre>\n\n\nFor Jruby-1.6.2\n\n<pre>\nrails/railties git:(3-0-stable)* ruby -I test test/generators/app_generator_test.rb --name=\"/test_application_name_is_detected_if_it_exists_and_app_folder_renamed/\"\nLoaded suite test/generators/app_generator_test\nStarted\n\"/Users/arun/checkouts/rails/railties/test/fixtures/tmp/myapp\" # Before FileUtils.mv (Dir.pwd)\n\"/Users/arun/checkouts/rails/railties/test/fixtures/tmp/myapp\" # After FileUtils.mv (Dir.pwd)\nE\nFinished in 0.53 seconds.\n\n</pre>\n\n\nIt's changing the @original_wd for AppGenerator. That cause error in Tests.\n", "labels": [], "number": 1628, "updated_at": "2014-07-03 04:53:21", "user": 3948, "closed_at": "2011-06-10 11:23:11", "id": 1035572, "title": "Jruby dir pwd", "url": "https://api.github.com/repos/rails/rails/issues/1628", "created_at": "2011-06-10 11:00:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341423", "text": "Working on it again.!\n", "created_at": "2011-06-10 11:23:11", "user": 3948, "id": 1341423}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Taking the following classes:\n\n``` ruby\nclass User < ActiveRecord::Base\n  has_one :address, :as => :addressable\n  accepts_nested_attributes_for :address\nend\n\nclass Address < ActiveRecord::Base\n  belongs_to :addressable, :polymorphic => true\n  validates_presence_of :addressable\nend\n```\n\nNow when creating a new User (with fields_for :address), no records will be saved as the validation on Address will fail with `address.addressable can't be blank`.\n\nOn a non-polymorphic relationship, the solution to this is to use :inverse_of in the User model, eg: `has_one :address, :inverse_of => :user`. However :inverse_of does not currently support polymorphic relationships, so this is not an option.\n", "labels": ["activerecord"], "number": 1629, "updated_at": "2018-02-02 23:57:40", "user": 169607, "closed_at": "2013-04-15 23:59:23", "id": 1035717, "title": "Validating presence of parent in polymorphic association with nested attributes", "url": "https://api.github.com/repos/rails/rails/issues/1629", "created_at": "2011-06-10 11:13:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341263", "text": "This was tested with Rails 3.0.7.\n", "created_at": "2011-06-10 11:14:15", "user": 169607, "id": 1341263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361517", "text": "As far as I know, there is currently no way to get it working without some manual work.See #1383\n", "created_at": "2011-06-13 20:15:04", "user": 171436, "id": 1361517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398032", "text": "Is this still an issue @6twenty?\n", "created_at": "2012-04-28 16:35:02", "user": 651597, "id": 5398032}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5438654", "text": "Not sure, but I'll do a quick test when I have some free time.\n", "created_at": "2012-05-01 13:36:27", "user": 169607, "id": 5438654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6697842", "text": "I'm fairly sure this is still an issue, running on rails 3.2.6. Are there any workarounds?\n", "created_at": "2012-07-01 22:55:17", "user": 56636, "id": 6697842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8167297", "text": "Have you tried?\n\n`validates :addressable, presence: true, associated: true`\n\nor adding:\n\n`validates_associated :addressable`\n", "created_at": "2012-08-30 17:25:27", "user": 116327, "id": 8167297}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9117992", "text": "2nd method, validates_associated :attribute seems to be working for me\n", "created_at": "2012-10-03 18:59:46", "user": 155084, "id": 9117992}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10046678", "text": "This still doesn't seem to work for me when creating new records.  If I want to make sure that the parent association is in place it fails due to the parent_id being nil.  {poly}_type seems to work fine on validation.\n", "created_at": "2012-11-04 02:10:52", "user": 573690, "id": 10046678}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11033182", "text": "@Altonymous - Have you tried the :inverse_of method for your nested models?  See this post for examples - \n\nhttps://rails.lighthouseapp.com/projects/8994/tickets/2815-nested-models-build-should-directly-assign-the-parent\n", "created_at": "2012-12-05 08:28:18", "user": 624100, "id": 11033182}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16418737", "text": "I believe this is expected behavior.\n\nI made a test case with @kcurtin here: https://gist.github.com/steveklabnik/5392274\n\nBasically, if you use `validates_presence_of`, you _need_ the parent to be saved before you get made. In this case, the `Address` isn't able to find a `User` because the `User` hasn't been created yet, we're trying to make them both at the same time. If we only cared that the `User`s are valid, we can use `validates_associated`, but if we need it to always be there we have to make it first, and AR won't automate this process.\n", "created_at": "2013-04-15 23:59:23", "user": 27786, "id": 16418737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/268243978", "text": "sorry fairly new to rails is it possible now to save records this way", "created_at": "2016-12-20 13:33:34", "user": 5794971, "id": 268243978}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/362745336", "text": "I was able to get this to work by overriding the nested attribute setter.\r\n```ruby\r\nclass User\r\n  has_one :address, as: :addressable\r\n  accepts_nested_attributes_for :address\r\n\r\n  def address_attributes=(attribute_set)\r\n    super(attribute_set.merge(addressable: self))\r\n  end\r\nend\r\n```\r\n\r\nTo DRY it up, I moved the polymorphic code to a concern:\r\n```ruby\r\nmodule Addressable\r\n  extend ActiveSupport::Concern\r\n\r\n  included do\r\n    has_one :address, as: :addressable\r\n    accepts_nested_attributes_for :address\r\n\r\n    def address_attributes=(attribute_set)\r\n      super(attribute_set.merge(addressable: self))\r\n    end\r\n  end\r\nend\r\n```\r\n```ruby\r\nclass User\r\n  include Addressable\r\n  ...\r\nend\r\n```\r\n\r\nFor `has_many` associations, the same can be accomplished with a `map`:\r\n```ruby\r\nclass User\r\n  has_many :addresses, as: :addressable\r\n  accepts_nested_attributes_for :addresses\r\n\r\n  def addresses_attributes=(attribute_sets)\r\n    super(\r\n      attribute_sets.map do |attribute_set|\r\n        attribute_set.merge(addressable: self)\r\n      end\r\n    )\r\n  end\r\nend\r\n```\r\n```ruby\r\nclass Address\r\n  belongs_to :addressable, polymorphic: true\r\n  validates :addressable, presence: true\r\nend\r\n```", "created_at": "2018-02-02 23:57:40", "user": 1431996, "id": 362745336}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Same as https://github.com/rails/rails/pull/1567\n\nHad to cherry-pick one other commit.\n", "labels": [], "number": 1630, "updated_at": "2014-06-17 09:02:08", "user": 22470, "closed_at": "2011-06-10 12:49:31", "id": 1036206, "title": "Ensure engine migrations are copied in correct sequence for 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1630", "created_at": "2011-06-10 12:17:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1341958", "text": "Merged! THanks!\n", "created_at": "2011-06-10 12:49:31", "user": 9582, "id": 1341958}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Currently, `rails runner` when run without any options shows `Run 'script/rails -h' for help.` which is not in line with other commands which display the usage help information when run without any options. \n\nFixed it to make it consistent and display the usage information when run without options.\n", "labels": [], "number": 1631, "updated_at": "2014-07-03 04:53:29", "user": 146214, "closed_at": "2011-06-10 13:47:10", "id": 1036448, "title": "rails runner without any options should show usage information", "url": "https://api.github.com/repos/rails/rails/issues/1631", "created_at": "2011-06-10 13:22:58", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1342325", "text": "Merged.\n", "created_at": "2011-06-10 13:47:10", "user": 9582, "id": 1342325}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch includes a number of improvements to make the PostgreSQL adapter a little more schema aware without breaking existing functionality (that I've discovered so far)\n- table_exists? scoped by schema search path unless schema is explicitly named. Added tests and doc to clarify the behaviour (NB: similar to https://github.com/rails/rails/pull/1607 )\n- extract_schema_and_table tests and implementation extended to cover all cases\n- primary_key does not ignore schema information\n- add current_schema and schema_exists? methods\n- more robust table referencing in insert_sql and sql_for_insert methods\n- makes table_exists? compatible with views (allowing meta_search to work with views amongst other things)\n\nAs a by-product of this (and in fact my main motivation here), is it enables independent migrations into separate schema in the same database and gets us part way down the road to \"out of the box\" compatibility with schema-partitioning techniques for multi-tenancy.\n\nIt also largely addresses https://github.com/rails/rails/issues/859 and https://github.com/rails/rails/issues/896\n", "labels": [], "number": 1632, "updated_at": "2014-06-26 15:42:10", "user": 16432, "closed_at": "2011-06-21 17:22:20", "id": 1036682, "title": "Improving PostgreSQL adapter schema-awareness", "url": "https://api.github.com/repos/rails/rails/issues/1632", "created_at": "2011-06-10 14:05:35", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1529898", "text": "@tenderlove thanks for the merge, you are doing a fantastic job!\n", "created_at": "2011-07-08 02:46:15", "user": 16432, "id": 1529898}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2066259", "text": "@tenderlove this patch is in rails/master but has yet to make it into a 3.1 rc or 3.1 stable itself. Looks like it has slipped off the radar. Can I get this into 3.1?\n", "created_at": "2011-09-11 22:38:03", "user": 16432, "id": 2066259}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2197844", "text": "Has this been merged into 3.1 yet?\n", "created_at": "2011-09-26 12:59:44", "user": 466661, "id": 2197844}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2198600", "text": "@russ1985: not fully. Although there's some better schema handling in 3.1, this patch is still kicking around on master but not yet in 3.1.1.rc1. Looks like I may need to update and resubmit to get this back on the radar..\n", "created_at": "2011-09-26 14:13:43", "user": 16432, "id": 2198600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2198688", "text": "I updated my GemFile to use 3.1.1.rc1 and it seems to get past the table_exists? problem.  I am working through some other issues now.  I will let you know if I can get it working with 3.1.1rc1.  Thanks for the help.\n", "created_at": "2011-09-26 14:21:40", "user": 466661, "id": 2198688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2198752", "text": "It works if I load the schema_file\n\n```\nschema_file = \"#{Rails.root}/db/schema.rb\"\nload(schema_file)\n```\n\nI don't want to do this though.  What I really want to do is this.\n\n```\nActiveRecord::Migrator.prepare_migrations\nActiveRecord::Migrator.new('up', 'db/migrate/').migrate\nActiveRecord::Migrator.cleanup_migrations\n```\n\nprepare_migrations and cleanup_migrations are helper methods I added that copy all the migrations from then engines into db/migrate and then removes them. It seems that when I call \n\n```\nActiveRecord::Migrator.new('up', 'db/migrate/').migrate\n```\n\nit is resetting the search_path back to public. Maybe because it is establishing a new connection?\n", "created_at": "2011-09-26 14:28:27", "user": 466661, "id": 2198752}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The SafeBuffer fixes have broken render :inline in rails 3.0.8 and 3.0.9.rc3.  I did not try 3.1.\n\n``` ruby\nrender :inline => raw @content\n```\n\n```\nActionView::Template::Error (Cannot modify SafeBuffer in place):\n  app/views/pages/show.html.erb:1:in `_app_views_pages_show_html_erb___400914214750921592_17192981340__1418047418121329627'\n\n\nactivesupport (3.0.9.rc3) lib/active_support/core_ext/string/output_safety.rb:123:in `sub!'\nactionpack (3.0.9.rc3) lib/action_view/template.rb:198:in `compile'\nactionpack (3.0.9.rc3) lib/action_view/template.rb:134:in `block in render'\nactivesupport (3.0.9.rc3) lib/active_support/notifications.rb:54:in `instrument'\nactionpack (3.0.9.rc3) lib/action_view/template.rb:127:in `render'\nactionpack (3.0.9.rc3) lib/action_view/render/rendering.rb:59:in `block in _render_template'\nactivesupport (3.0.9.rc3) lib/active_support/notifications.rb:52:in `block in instrument'\nactivesupport (3.0.9.rc3) lib/active_support/notifications/instrumenter.rb:21:in `instrument'\nactivesupport (3.0.9.rc3) lib/active_support/notifications.rb:52:in `instrument'\nactionpack (3.0.9.rc3) lib/action_view/render/rendering.rb:56:in `_render_template'\nactionpack (3.0.9.rc3) lib/action_view/render/rendering.rb:26:in `render'\n```\n\nPlease see the following gist for the full trace\n\nhttps://gist.github.com/1018921\n", "labels": [], "number": 1633, "updated_at": "2011-06-11 01:34:30", "user": 98860, "closed_at": "2011-06-10 23:25:53", "id": 1036769, "title": "render :inline broken in 3.0.9.rc3", "url": "https://api.github.com/repos/rails/rails/issues/1633", "created_at": "2011-06-10 14:24:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1346016", "text": "This doesn't make any sense.\n@tmilker you are using render :inline in a wrong way, there's no need for raw there.\nJust render :inline => @content do the same thing.\n", "created_at": "2011-06-11 01:34:29", "user": 52642, "id": 1346016}], "assignees": [4912, 4912], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Will the new asset pipeline include the asset_host helper ?\n\nIf i want to put for example background images onto a CDN could this be achieved by using the following code ?\n\nheader.css.scss.erb\n# header {\n\n```\nbackground: url(<%= asset_host asset_path \"header-bg.jpg\" %>) no-repeat scroll left top;\n```\n\n}\n\nWhen i run rake assets:precompile RAILS_ENV=production\n\nI get the following error: - \n\nrake aborted!\nundefined method `asset_host' for #<#Class:0x00000100eed120:0x00000101f00198>\n  (in /Users/jturkington/rails_projects/testapp_rc4/app/assets/stylesheets/header.css.scss.erb)\n\nTasks: TOP => assets:precompile\n(See full trace by running task with --trace)\n", "labels": [], "number": 1634, "updated_at": "2011-07-11 22:12:34", "user": 390631, "closed_at": "2011-07-11 22:12:34", "id": 1037309, "title": "assets:precompile can it work with asset_host ?", "url": "https://api.github.com/repos/rails/rails/issues/1634", "created_at": "2011-06-10 16:07:05", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368593", "text": "As far as I can tell, the 'new' asset pipeline (sprockets-based) uses `config.action_controller.asset_host`.  \nIn the future, please remember this is the Issue/bug tracker for specific bugs or failures of the framework. For general questions please use the mailing list. \n", "created_at": "2011-06-14 19:31:59", "user": 185039, "id": 1368593}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372858", "text": "This is implemented by #1699, which should be merged soon.\n", "created_at": "2011-06-15 11:27:44", "user": 9347, "id": 1372858}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550439", "text": "So this is fixed right now. If I'm wrong please let me know and I will reopen\n", "created_at": "2011-07-11 22:12:33", "user": 52642, "id": 1550439}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The use case for the default abstract adapter's #table_exists? method is to give adapters a chance to return true in special cases where the core #tables does not include a name. Common use cases are for views and tables in other schemas. The connection pool should give a connection to respond true to with this matching name. If this was not done, I get errors in the SQL Server Adapter where column objects are not cached and respond properly for either the entire table or specific attribute of columns for said table, like @primary. This fixes that.\n\nI did not include a test because this looked to be too low level white-box testing and I could not see any parallel in the connection_pool_test.rb file All tests for MySQL, PostgreSQL, and SQLite3 still pass with this change.\n", "labels": [], "number": 1635, "updated_at": "2014-06-19 01:57:38", "user": 2381, "closed_at": "2011-06-10 16:52:00", "id": 1037516, "title": "Allow ConnectionPool's #table_exists? method to give the connection's #table_exists? method a chance.", "url": "https://api.github.com/repos/rails/rails/issues/1635", "created_at": "2011-06-10 16:50:26", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343581", "text": "Crap, this did not come out right. Let me close this and do another.\n", "created_at": "2011-06-10 16:52:00", "user": 2381, "id": 1343581}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The use case for the default abstract adapter's #table_exists? method is to give adapters a chance to return true in special cases where the core #tables does not include a name. Common use cases are for views and tables in other schemas. The connection pool should give a connection to respond true to with this matching name. If this was not done, I get errors in the SQL Server Adapter where column objects are not cached and respond properly for either the entire table or specific attribute of columns for said table, like @primary. This fixes that.\n\nI did not include a test because this looked to be too low level white-box testing and I could not see any parallel in the connection_pool_test.rb file All tests for MySQL, PostgreSQL, and SQLite3 still pass with this change.\n", "labels": [], "number": 1636, "updated_at": "2014-06-26 15:42:19", "user": 2381, "closed_at": "2011-06-17 07:02:45", "id": 1037665, "title": "Allow the connection pool's #table_exists? method to give the connections", "url": "https://api.github.com/repos/rails/rails/issues/1636", "created_at": "2011-06-10 17:17:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343780", "text": "@rsim just pinged me today about this for the oracle adapter.  Though his suggestion was to just delegate to the connection all the time.\n\nwdyt?\n", "created_at": "2011-06-10 17:23:28", "user": 3124, "id": 1343780}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1343855", "text": "That would be fine! The method seemed to possibly optimize multiple #with_connection blocks by taking a first stab thru the #tables and just filling in true. I did not want to get into assuming and measuring if that was a big deal or not. My guess is my patch of just adding an extra line would be more considerate to performance vs asking #table_exists? for each table that would be in #tables. So if a DB has 200 tables, that would potentially be 200 SQL calls as compared to the single one SQL call  the method optimized for. \n\nThe more I think about it, the better I like what it does and the one line addition I did. Your call tho.\n", "created_at": "2011-06-10 17:36:31", "user": 2381, "id": 1343855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1344312", "text": "I think this proposed solution is fine for me as well. We had the same issue that Oracle database view based models did not cache view columns - this patch solves this problem.\n", "created_at": "2011-06-10 18:57:13", "user": 4736, "id": 1344312}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1384806", "text": "Aaron, will this make it in the release? \n", "created_at": "2011-06-16 22:28:13", "user": 2381, "id": 1384806}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This patch allows to mix multiple columns and multiple aggregate functions in the same query\n\nExamples:\n\n<pre>\n# SELECT SUM(age) FROM people\nPerson.sum('age') => 4562\n\n# SELECT SUM(age), SUM(weight) FROM people\nPerson.sum(['age', 'weight']) => [4562, 16721]\n\n# SELECT AVG(age), AVG(weight) FROM people\nPerson.calculate(:average, [:age, :weight]) => [35, 170]\n\n# SELECT AVG(age), SUM(age) FROM people\nPerson.calculate([:average, :sum], :age) => [35, 4562]\n\n# SELECT AVG(age), SUM(weight) FROM people\nPerson.calculate([:average, :sum], [:age, :weight]) => [35, 16721]\n</pre>\n\n\nThis is my first contribution to rails, hope it helps.\n", "labels": ["activerecord"], "number": 1637, "updated_at": "2014-07-02 18:11:51", "user": 244514, "closed_at": "2012-09-11 05:57:40", "id": 1037678, "title": "Multiple aggregates", "url": "https://api.github.com/repos/rails/rails/issues/1637", "created_at": "2011-06-10 17:20:03", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355625", "text": "I just found a failing test in the query cache module:\n\n```\n  1) Failure:\ntest_count_queries_with_cache(QueryCacheTest)\n    [/home/eserra/src/rails/activerecord/lib/active_record/test_case.rb:50:in `assert_queries'\n     /home/eserra/src/rails/activerecord/test/cases/query_cache_test.rb:97:in `test_count_queries_with_cache'\n     /home/eserra/src/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:26:in `cache'\n     /home/eserra/src/rails/activerecord/lib/active_record/query_cache.rb:12:in `cache'\n     /home/eserra/src/rails/activerecord/test/cases/query_cache_test.rb:96:in `test_count_queries_with_cache'\n     /home/eserra/src/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `__send__'\n     /home/eserra/src/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:67:in `run'\n     /home/eserra/src/rails/activesupport/lib/active_support/callbacks.rb:408:in `_run_setup_callbacks'\n     /home/eserra/src/rails/activesupport/lib/active_support/callbacks.rb:81:in `send'\n     /home/eserra/src/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n     /home/eserra/src/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:65:in `run']:\n2 instead of 1 queries were executed.\nQueries:\nSELECT COUNT(*) FROM \"tasks\" \nSELECT COUNT(*) FROM \"tasks\" .\n<1> expected but was\n<2>.\n\n```\n\nIt seems to be somehow related to my patch, but I don't get how to fix it.\nCould somebody help?\n", "created_at": "2011-06-12 18:19:40", "user": 244514, "id": 1355625}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544396", "text": "This patch cannot be applied on master anymore. Do you mind rebase your branch, squash commits into single commit (after lots of improvement! phewwww) .. and force push to your branch? I think the code is good to go now, just need commits to be squashed up.\n", "created_at": "2011-07-11 05:11:42", "user": 4912, "id": 1544396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544758", "text": "The guide needs to be updated as well: http://edgeguides.rubyonrails.org/active_record_querying.html#calculations\n", "created_at": "2011-07-11 07:31:25", "user": 146214, "id": 1544758}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546817", "text": "Yep, please update the guide too.\n", "created_at": "2011-07-11 14:27:05", "user": 4912, "id": 1546817}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1552902", "text": "Great! I'll update the guide too\n", "created_at": "2011-07-12 09:07:59", "user": 244514, "id": 1552902}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3577394", "text": "Status on this?  It would be great to sum on multiple columns.\n", "created_at": "2012-01-20 00:55:02", "user": 1185, "id": 3577394}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3609811", "text": "Hi, I'll do my best to get it done ASAP - Edoardo\n\nOn Jan 20, 2012, at 1:55 AM, Chris Johnson wrote:\n\n> Status on this?  It would be great to sum on multiple columns.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/1637#issuecomment-3577394\n", "created_at": "2012-01-23 06:40:24", "user": 244514, "id": 3609811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399488", "text": "This pull request cannot be automatically merged. If you want to apply this one, please rebase it against the master. I'll be glad to ask someone from the Core Team to review it. If you don't want, please close it.\n\nThanks.\n", "created_at": "2012-04-28 19:33:53", "user": 47848, "id": 5399488}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8323566", "text": "4 months of inactivity this one, any luck on the merge? Any questions, problems? Are you working on this or should the issue be closed? \n", "created_at": "2012-09-06 06:18:21", "user": 59744, "id": 8323566}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8447897", "text": "Closing due the inactivity. If anyone want to add this feature open a new pull request.\n", "created_at": "2012-09-11 05:57:40", "user": 47848, "id": 8447897}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "the image tag helper those not work in rails 3.1 or is there a new asset view helper for this. <%= image_tag('rails.png')%>\n", "labels": [], "number": 1638, "updated_at": "2011-06-11 21:04:54", "user": 128100, "closed_at": "2011-06-11 21:04:54", "id": 1039112, "title": "image tag helper not working", "url": "https://api.github.com/repos/rails/rails/issues/1638", "created_at": "2011-06-10 22:21:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1348975", "text": "Can you provide more details, do you get an error backtrace?\n", "created_at": "2011-06-11 14:22:52", "user": 160941, "id": 1348975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1352913", "text": "thank you for you efforts just figured out that it has been resolves in the new rc4\n", "created_at": "2011-06-11 21:04:44", "user": 128100, "id": 1352913}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "- Make sure that we don't perform in-place mutation on SafeBuffer string\n- Update missing CHANGELOG\n", "labels": [], "number": 1639, "updated_at": "2014-07-03 04:53:59", "user": 4912, "closed_at": "2011-06-10 23:25:39", "id": 1039301, "title": "Render inline fix for 3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1639", "created_at": "2011-06-10 23:10:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Cherry-pick number_helpers fix from 3-0-stable\n- Make sure that we don't perform in-place mutation on SafeBuffer string\n- Update missing CHANGELOG\n", "labels": [], "number": 1640, "updated_at": "2014-07-03 04:54:02", "user": 4912, "closed_at": "2011-06-10 23:26:36", "id": 1039311, "title": "Render inline fix for 3-0-9", "url": "https://api.github.com/repos/rails/rails/issues/1640", "created_at": "2011-06-10 23:14:23", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Make sure that we don't perform in-place mutation on SafeBuffer string\n- Update missing CHANGELOG\n", "labels": [], "number": 1641, "updated_at": "2014-07-03 04:54:06", "user": 4912, "closed_at": "2011-06-10 23:28:17", "id": 1039317, "title": "Render inline fix for 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1641", "created_at": "2011-06-10 23:15:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "- Make sure that we don't perform in-place mutation on SafeBuffer string\n- Update missing CHANGELOG\n", "labels": [], "number": 1642, "updated_at": "2014-06-26 09:02:25", "user": 4912, "closed_at": "2011-06-10 23:30:15", "id": 1039323, "title": "Render inline fix for master", "url": "https://api.github.com/repos/rails/rails/issues/1642", "created_at": "2011-06-10 23:16:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Issuing the command...\n\n ActiveSupport::JSON.decode('[{\"created_at\":\"2011-06-10T18:09:09-04:00\"}]')\n\nusing the rails console results in the following error...\n\nPsych::SyntaxError: couldn't parse YAML at line 1 column 30\n        from /Users/tboilard/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/psych.rb:148:in `parse'\n        from /Users/tboilard/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/psych.rb:148:in`parse_stream'\n        from /Users/tboilard/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/psych.rb:119:in `parse'\n        from /Users/tboilard/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/psych.rb:106:in`load'\n        from /Users/tboilard/.rvm/gems/ruby-1.9.2-p180@rails307/gems/activesupport-3.0.7/lib/active_support/json/backends/yaml.rb:15:in `decode'\n        from /Users/tboilard/.rvm/gems/ruby-1.9.2-p180@rails307/gems/activesupport-3.0.7/lib/active_support/json/decoding.rb:14:in`decode'\n        from (irb):46\n        from /Users/tboilard/.rvm/gems/ruby-1.9.2-p180@rails307/gems/railties-3.0.7/lib/rails/commands/console.rb:44:in `start'\n        from /Users/tboilard/.rvm/gems/ruby-1.9.2-p180@rails307/gems/railties-3.0.7/lib/rails/commands/console.rb:8:in`start'\n        from /Users/tboilard/.rvm/gems/ruby-1.9.2-p180@rails307/gems/railties-3.0.7/lib/rails/commands.rb:23:in `<top (required)>'\n        from script/rails:6:in`require'\n        from script/rails:6:in `<main>'\n\nRunning Rails 3.0.7 and ruby-1.9.2-p180.\n\nIssue was discovered while updating a rails 2.3.11 app to rails 3. \n\nPlease let me know if you need any other information.\n\nThanks\nTom\n", "labels": [], "number": 1643, "updated_at": "2011-07-29 16:40:39", "user": 843164, "closed_at": "2011-07-28 20:41:05", "id": 1039339, "title": " ActiveSupport::JSON.decode Fails Decoding Date/Time String", "url": "https://api.github.com/repos/rails/rails/issues/1643", "created_at": "2011-06-10 23:22:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1345892", "text": "More than likely not a rails issue but a ruby 1.9.2 psych issue. \n", "created_at": "2011-06-11 00:43:21", "user": 843164, "id": 1345892}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356043", "text": "Yeah, I ran into a couple issues doing json decoding with Yaml especially for timestamps.\n\nI'd recommend setting the backend to JSONGem and installing the json gem.\n", "created_at": "2011-06-12 20:28:22", "user": 525212, "id": 1356043}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637002", "text": "we had test this issue with Rails3.0.7 and ruby-19.2-p180 and this issue is reproduced as you specified.\nand test this issue with Rails3.0.7 and ruby-19.2-p230 and this issue is reproduced as you specified.\n\nwe had also tested this with Rails3.0-stable and ruby-19.2-p230 and ruby-1.9.2-p180 and this is solved here, so i suggest to upgrade to Rails3.0.X.\n\n/cc @tboilard @Aryk @fxn\n", "created_at": "2011-07-23 10:03:46", "user": 24949, "id": 1637002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1676327", "text": "@tboilard : could you provide an explanation of what helped you resolve the problem ?\nSo someone seeing this issue later would have some insight of what might be his problem :)\n", "created_at": "2011-07-28 20:45:45", "user": 9347, "id": 1676327}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1682701", "text": "For the short term, so product development could move forward, we switched back to Ruby 1.8.7 not only due to the issue outlined above but for several other Yaml parsing issues as well. We plan on switching back to 1.9.2 before release.\n", "created_at": "2011-07-29 16:40:39", "user": 843164, "id": 1682701}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This fixes `warning: assigned but unused variable - result`\n", "labels": [], "number": 1644, "updated_at": "2014-06-18 11:56:18", "user": 83449, "closed_at": "2011-06-11 01:35:23", "id": 1039478, "title": "Remove unused variable causing warning in 1.9.3", "url": "https://api.github.com/repos/rails/rails/issues/1644", "created_at": "2011-06-11 00:13:22", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, guys!\n\nI found an annoying bug.\nJust look at https://gist.github.com/1020130.\n\nAs you can see ActiveSupport::TimeWithZone#xmlschema formats a decimal fraction of seconds wrong.\n", "labels": [], "number": 1645, "updated_at": "2011-11-30 13:33:20", "user": 107541, "closed_at": "2011-11-30 13:33:20", "id": 1039629, "title": "Bug in ActiveSupport::TimeWithZone#xmlschema", "url": "https://api.github.com/repos/rails/rails/issues/1645", "created_at": "2011-06-11 01:26:40", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639415", "text": "Looks like this was fixed with https://github.com/rails/rails/commit/c2b79c011f4ec39426c93812ab58660718c7cb92\n", "created_at": "2011-07-24 01:05:45", "user": 13121, "id": 1639415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1655716", "text": "Yup.\n", "created_at": "2011-07-26 16:32:55", "user": 107541, "id": 1655716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2958057", "text": "@neglectedvalue If it's fixed... can you close this issue.??\n", "created_at": "2011-11-30 11:11:31", "user": 3948, "id": 2958057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2959687", "text": "Oh, sorry. Thanks.\n", "created_at": "2011-11-30 13:33:20", "user": 107541, "id": 2959687}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using latest rvm (1.6.20) and an empty gemset trying to install rc4 and got the following error:\n\n`$ gem install rails --pre\nSuccessfully installed rails-3.1.0.rc4\n1 gem installed\nInstalling ri documentation for rails-3.1.0.rc4...\nfile 'lib' not found\nInstalling RDoc documentation for rails-3.1.0.rc4...\nfile 'lib' not found`\n\nI've tried install rdoc first as I read on many websites but the error still appears.\n\n```RubyGems Environment:\n- RUBYGEMS VERSION: 1.8.5\n- RUBY VERSION: 1.9.2 (2011-02-18 patchlevel 180) [x86_64-linux]\n- INSTALLATION DIRECTORY: /home/arch/.rvm/gems/ruby-1.9.2-p180@rails31\n- RUBY EXECUTABLE: /home/arch/.rvm/rubies/ruby-1.9.2-p180/bin/ruby\n- EXECUTABLE DIRECTORY: /home/arch/.rvm/gems/ruby-1.9.2-p180@rails31/bin\n- RUBYGEMS PLATFORMS:\n  - ruby\n  - x86_64-linux\n- GEM PATHS:\n  - /home/arch/.rvm/gems/ruby-1.9.2-p180@rails31\n  - /home/arch/.rvm/gems/ruby-1.9.2-p180@global\n- GEM CONFIGURATION:\n  - :update_sources => true\n  - :verbose => true\n  - :benchmark => false\n  - :backtrace => false\n  - :bulk_threshold => 1000\n- REMOTE SOURCES:\n  - http://rubygems.org/```\n\nThe debug output is here: https://gist.github.com/1020197\n", "labels": [], "number": 1646, "updated_at": "2012-03-23 13:08:59", "user": 275754, "closed_at": "2011-11-16 17:59:05", "id": 1039756, "title": "file 'lib' not found Rails 3.1.0.rc4", "url": "https://api.github.com/repos/rails/rails/issues/1646", "created_at": "2011-06-11 02:55:02", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347168", "text": "See #1480\n", "created_at": "2011-06-11 11:01:55", "user": 9347, "id": 1347168}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351842", "text": "I read that, but I don't understand how it can be a yard issue if I don't have it installed.\n", "created_at": "2011-06-11 16:55:54", "user": 275754, "id": 1351842}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356089", "text": "@PaBLoX-CL I think this is actually an issue of RDoc.  Maybe @drbrain can enlighten us?\n", "created_at": "2011-06-12 20:48:38", "user": 3124, "id": 1356089}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1406233", "text": "For the record, I'm trying to update from Rails 3.0.7 on Windows 7 and got the same problem.\n", "created_at": "2011-06-20 22:01:53", "user": 205259, "id": 1406233}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1406402", "text": "I encountered this issue with 3.1rc4, as well as with previous versions (going back to 3.0beta). I don't know what is causing it, but I know that manually creating a 'lib' directory in the rails gem directory and running \"gem install rails --pre\" again fixes it.\n", "created_at": "2011-06-20 22:31:03", "user": 840700, "id": 1406402}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1412571", "text": "When RubyGems generates documentation it invokes rdoc similarly to:\n\n```\n`rdoc #{spec.require_path} #{spec.extra_rdoc_files} #{spec.rdoc_options} […]`\n```\n\nHere's what the Rails gem specification (I have 3.0.7) has for each of these:\n\n```\n$ gem spec rails require_path\n--- lib\n$ gem spec rails extra_rdoc_files\n--- []\n$ gem spec rails rdoc_options\n--- []\n```\n\nSo rdoc is invoked like this for rails:\n\n```\n`rdoc lib […]`\n```\n\nIf rdoc is given a file or directory that doesn't exist it will complain.\n\nA solution to this would be to ensure 'lib' existed even if it was empty.\n", "created_at": "2011-06-21 18:23:37", "user": 9831, "id": 1412571}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550304", "text": "This should be fixed since https://github.com/rails/rails/commit/e7fc5d1cad27e47d3d0149a2b9a61d074c30f225\n", "created_at": "2011-07-11 21:53:48", "user": 52642, "id": 1550304}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550347", "text": "The commit was reverted so I was wrong, /cc @pixeltrix\n", "created_at": "2011-07-11 21:58:26", "user": 52642, "id": 1550347}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1552136", "text": "Yes, RubyGems requires at least one require directory otherwise it generates a warning. The only solution I can think of is the empty lib directory in the rails gem - any other ideas?\n", "created_at": "2011-07-12 05:43:05", "user": 6321, "id": 1552136}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1559059", "text": "@pixeltrix ya, that's the only solution today (as @drbrain said).  I've sent a patch to [the rubygems mailing list](http://rubyforge.org/pipermail/rubygems-developers/2011-July/006789.html) that would remove the gemspec requirement, but I haven't received any useful feedback yet.\n", "created_at": "2011-07-13 00:22:10", "user": 3124, "id": 1559059}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1924596", "text": "I'm running into this as well on rails 3.0.10. So from reading the comments here, it doesn't seem possible to generate the rdoc docs? Or are there ways to do so post install? Like creating the lib directory and running some rdoc command?\n", "created_at": "2011-08-28 17:07:50", "user": 3640, "id": 1924596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2124037", "text": "I just got this error using a fresh install of rvm 1.8.3 on OS X Lion with Ruby 1.9.2-head:\n\n<pre>\nmark@macpro:~# ruby -v\nruby 1.9.2p312 (2011-08-11 revision 32926) [x86_64-darwin11.1.0]\nmark@macpro:~# which gem\n/Users/mark/.rvm/rubies/ruby-1.9.2-head/bin/gem\nmark@macpro:~# gem install rails\nFetching: multi_json-1.0.3.gem (100%)\nFetching: activesupport-3.1.0.gem (100%)\nFetching: builder-3.0.0.gem (100%)\nFetching: i18n-0.6.0.gem (100%)\nFetching: bcrypt-ruby-3.0.1.gem (100%)\nBuilding native extensions.  This could take a while...\nFetching: activemodel-3.1.0.gem (100%)\nFetching: rack-1.3.3.gem (100%)\nFetching: rack-cache-1.0.3.gem (100%)\nFetching: rack-test-0.6.1.gem (100%)\nFetching: rack-mount-0.8.3.gem (100%)\nFetching: hike-1.2.1.gem (100%)\nFetching: tilt-1.3.3.gem (100%)\nFetching: sprockets-2.0.0.gem (100%)\nFetching: erubis-2.7.0.gem (100%)\nFetching: actionpack-3.1.0.gem (100%)\nFetching: arel-2.2.1.gem (100%)\nFetching: tzinfo-0.3.29.gem (100%)\nFetching: activerecord-3.1.0.gem (100%)\nFetching: activeresource-3.1.0.gem (100%)\nFetching: mime-types-1.16.gem (100%)\nFetching: polyglot-0.3.2.gem (100%)\nFetching: treetop-1.4.10.gem (100%)\nFetching: mail-2.3.0.gem (100%)\nFetching: actionmailer-3.1.0.gem (100%)\nFetching: thor-0.14.6.gem (100%)\nFetching: rack-ssl-1.3.2.gem (100%)\nFetching: rdoc-3.9.4.gem (100%)\nDepending on your version of ruby, you may need to install ruby rdoc/ri data:\n\n<= 1.8.6 : unsupported\n = 1.8.7 : gem install rdoc-data; rdoc-data --install\n = 1.9.1 : gem install rdoc-data; rdoc-data --install\n>= 1.9.2 : nothing to do! Yay!\nFetching: railties-3.1.0.gem (100%)\nFetching: bundler-1.0.18.gem (100%)\nFetching: rails-3.1.0.gem (100%)\nSuccessfully installed multi_json-1.0.3\nSuccessfully installed activesupport-3.1.0\nSuccessfully installed builder-3.0.0\nSuccessfully installed i18n-0.6.0\nSuccessfully installed bcrypt-ruby-3.0.1\nSuccessfully installed activemodel-3.1.0\nSuccessfully installed rack-1.3.3\nSuccessfully installed rack-cache-1.0.3\nSuccessfully installed rack-test-0.6.1\nSuccessfully installed rack-mount-0.8.3\nSuccessfully installed hike-1.2.1\nSuccessfully installed tilt-1.3.3\nSuccessfully installed sprockets-2.0.0\nSuccessfully installed erubis-2.7.0\nSuccessfully installed actionpack-3.1.0\nSuccessfully installed arel-2.2.1\nSuccessfully installed tzinfo-0.3.29\nSuccessfully installed activerecord-3.1.0\nSuccessfully installed activeresource-3.1.0\nSuccessfully installed mime-types-1.16\nSuccessfully installed polyglot-0.3.2\nSuccessfully installed treetop-1.4.10\nSuccessfully installed mail-2.3.0\nSuccessfully installed actionmailer-3.1.0\nSuccessfully installed thor-0.14.6\nSuccessfully installed rack-ssl-1.3.2\nSuccessfully installed rdoc-3.9.4\nSuccessfully installed railties-3.1.0\nSuccessfully installed bundler-1.0.18\nSuccessfully installed rails-3.1.0\n30 gems installed\nInstalling ri documentation for multi_json-1.0.3...\nInstalling ri documentation for activesupport-3.1.0...\nInstalling ri documentation for builder-3.0.0...\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README, skipping\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README.rdoc, skipping\nInstalling ri documentation for i18n-0.6.0...\nInstalling ri documentation for bcrypt-ruby-3.0.1...\nInstalling ri documentation for activemodel-3.1.0...\nInstalling ri documentation for rack-1.3.3...\nInstalling ri documentation for rack-cache-1.0.3...\nInstalling ri documentation for rack-test-0.6.1...\nInstalling ri documentation for rack-mount-0.8.3...\nInstalling ri documentation for hike-1.2.1...\nInstalling ri documentation for tilt-1.3.3...\nInstalling ri documentation for sprockets-2.0.0...\nInstalling ri documentation for erubis-2.7.0...\nInstalling ri documentation for actionpack-3.1.0...\nInstalling ri documentation for arel-2.2.1...\nInstalling ri documentation for tzinfo-0.3.29...\nInstalling ri documentation for activerecord-3.1.0...\nInstalling ri documentation for activeresource-3.1.0...\nInstalling ri documentation for mime-types-1.16...\nInstalling ri documentation for polyglot-0.3.2...\nInstalling ri documentation for treetop-1.4.10...\nInstalling ri documentation for mail-2.3.0...\nInstalling ri documentation for actionmailer-3.1.0...\nInstalling ri documentation for thor-0.14.6...\nInstalling ri documentation for rack-ssl-1.3.2...\nInstalling ri documentation for rdoc-3.9.4...\nInstalling ri documentation for railties-3.1.0...\nInstalling ri documentation for bundler-1.0.18...\nInstalling ri documentation for rails-3.1.0...\nfile 'lib' not found\nInstalling RDoc documentation for multi_json-1.0.3...\nInstalling RDoc documentation for activesupport-3.1.0...\nInstalling RDoc documentation for builder-3.0.0...\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README, skipping\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README.rdoc, skipping\nInstalling RDoc documentation for i18n-0.6.0...\nInstalling RDoc documentation for bcrypt-ruby-3.0.1...\nInstalling RDoc documentation for activemodel-3.1.0...\nInstalling RDoc documentation for rack-1.3.3...\nInstalling RDoc documentation for rack-cache-1.0.3...\nInstalling RDoc documentation for rack-test-0.6.1...\nInstalling RDoc documentation for rack-mount-0.8.3...\nInstalling RDoc documentation for hike-1.2.1...\nInstalling RDoc documentation for tilt-1.3.3...\nInstalling RDoc documentation for sprockets-2.0.0...\nInstalling RDoc documentation for erubis-2.7.0...\nInstalling RDoc documentation for actionpack-3.1.0...\nInstalling RDoc documentation for arel-2.2.1...\nInstalling RDoc documentation for tzinfo-0.3.29...\nInstalling RDoc documentation for activerecord-3.1.0...\nInstalling RDoc documentation for activeresource-3.1.0...\nInstalling RDoc documentation for mime-types-1.16...\nInstalling RDoc documentation for polyglot-0.3.2...\nInstalling RDoc documentation for treetop-1.4.10...\nInstalling RDoc documentation for mail-2.3.0...\nInstalling RDoc documentation for actionmailer-3.1.0...\nInstalling RDoc documentation for thor-0.14.6...\nInstalling RDoc documentation for rack-ssl-1.3.2...\nInstalling RDoc documentation for rdoc-3.9.4...\nInstalling RDoc documentation for railties-3.1.0...\nInstalling RDoc documentation for bundler-1.0.18...\nInstalling RDoc documentation for rails-3.1.0...\nfile 'lib' not found\n</pre>\n", "created_at": "2011-09-17 20:49:21", "user": 11228, "id": 2124037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2238784", "text": "Here I m Also facing the same issue with \nRuby: ruby 1.9.2p290\nAnd trying to install Rails 3.0.1\nOS: Ubuntu 10.04\n\nroot@ubuntu:~# gem update --system\nLatest version currently installed. Aborting.\nroot@ubuntu:~# gem install rails --version 3.0.1\nFetching: activesupport-3.0.1.gem (100%)\nFetching: builder-2.1.2.gem (100%)\nWARNING: builder-2.1.2 has an invalid nil value for @cert_chain\nFetching: i18n-0.4.2.gem (100%)\nFetching: activemodel-3.0.1.gem (100%)\nFetching: rack-1.2.4.gem (100%)\nFetching: rack-test-0.5.7.gem (100%)\nFetching: rack-mount-0.6.14.gem (100%)\nFetching: abstract-1.0.0.gem (100%)\nWARNING: abstract-1.0.0 has an invalid nil value for @cert_chain\nFetching: erubis-2.6.6.gem (100%)\nFetching: actionpack-3.0.1.gem (100%)\nFetching: arel-1.0.1.gem (100%)\nFetching: activerecord-3.0.1.gem (100%)\nFetching: activeresource-3.0.1.gem (100%)\nFetching: mail-2.2.19.gem (100%)\nFetching: actionmailer-3.0.1.gem (100%)\nFetching: railties-3.0.1.gem (100%)\nFetching: rails-3.0.1.gem (100%)\nSuccessfully installed activesupport-3.0.1\nSuccessfully installed builder-2.1.2\nSuccessfully installed i18n-0.4.2\nSuccessfully installed activemodel-3.0.1\nSuccessfully installed rack-1.2.4\nSuccessfully installed rack-test-0.5.7\nSuccessfully installed rack-mount-0.6.14\nSuccessfully installed abstract-1.0.0\nSuccessfully installed erubis-2.6.6\nSuccessfully installed actionpack-3.0.1\nSuccessfully installed arel-1.0.1\nSuccessfully installed activerecord-3.0.1\nSuccessfully installed activeresource-3.0.1\nSuccessfully installed mail-2.2.19\nSuccessfully installed actionmailer-3.0.1\nSuccessfully installed railties-3.0.1\nSuccessfully installed rails-3.0.1\n17 gems installed\nInstalling ri documentation for activesupport-3.0.1...\nInstalling ri documentation for builder-2.1.2...\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README, skipping\nInstalling ri documentation for i18n-0.4.2...\nInstalling ri documentation for activemodel-3.0.1...\nInstalling ri documentation for rack-1.2.4...\nInstalling ri documentation for rack-test-0.5.7...\nInstalling ri documentation for rack-mount-0.6.14...\nInstalling ri documentation for abstract-1.0.0...\nInstalling ri documentation for erubis-2.6.6...\nInstalling ri documentation for actionpack-3.0.1...\nInstalling ri documentation for arel-1.0.1...\nInstalling ri documentation for activerecord-3.0.1...\nInstalling ri documentation for activeresource-3.0.1...\nInstalling ri documentation for mail-2.2.19...\nInstalling ri documentation for actionmailer-3.0.1...\nInstalling ri documentation for railties-3.0.1...\nInstalling ri documentation for rails-3.0.1...\nfile 'lib' not found\nInstalling RDoc documentation for activesupport-3.0.1...\nInstalling RDoc documentation for builder-2.1.2...\nunable to convert \"\\xF1\" from ASCII-8BIT to UTF-8 for README, skipping\nInstalling RDoc documentation for i18n-0.4.2...\nInstalling RDoc documentation for activemodel-3.0.1...\nInstalling RDoc documentation for rack-1.2.4...\nInstalling RDoc documentation for rack-test-0.5.7...\nInstalling RDoc documentation for rack-mount-0.6.14...\nInstalling RDoc documentation for abstract-1.0.0...\nInstalling RDoc documentation for erubis-2.6.6...\nInstalling RDoc documentation for actionpack-3.0.1...\nInstalling RDoc documentation for arel-1.0.1...\nInstalling RDoc documentation for activerecord-3.0.1...\nInstalling RDoc documentation for activeresource-3.0.1...\nInstalling RDoc documentation for mail-2.2.19...\nInstalling RDoc documentation for actionmailer-3.0.1...\nInstalling RDoc documentation for railties-3.0.1...\nInstalling RDoc documentation for rails-3.0.1...\nfile 'lib' not found\nroot@ubuntu:~# rails -v\nThe program 'rails' is currently not installed.\n\nPlease Help me asap...\nI m in big Trouble...\nHave start new Project and have learn ROR Also...\n", "created_at": "2011-09-29 15:16:15", "user": 1090177, "id": 2238784}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2333630", "text": "RDoc 3.10 will not warn for missing directories without -v.  RubyGems runs rdoc without -v.\n\nhttps://github.com/rdoc/rdoc/commit/62614863\n", "created_at": "2011-10-08 20:13:47", "user": 9831, "id": 2333630}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2765138", "text": "Upgrading to RDoc 3.10 before installing rails will fix this, so I'm closing this ticket.  Thanks.\n", "created_at": "2011-11-16 17:59:05", "user": 3124, "id": 2765138}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4658636", "text": "thnx for reply\n", "created_at": "2012-03-23 13:08:59", "user": 1090177, "id": 4658636}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1647, "updated_at": "2014-07-03 04:54:26", "user": 6399, "closed_at": "2011-06-11 15:02:01", "id": 1040074, "title": "Make tests stronger, cleaner and slimmer", "url": "https://api.github.com/repos/rails/rails/issues/1647", "created_at": "2011-06-11 07:12:15", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This is for Issue #1366\n", "labels": [], "number": 1648, "updated_at": "2014-06-26 16:59:48", "user": 7035, "closed_at": "2011-06-24 21:19:43", "id": 1040301, "title": "Inflector support for acronyms (Issue #1366)", "url": "https://api.github.com/repos/rails/rails/issues/1648", "created_at": "2011-06-11 08:45:13", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368459", "text": "@dmathieu I forgot to tag you in the above response.\n", "created_at": "2011-06-14 19:13:21", "user": 7035, "id": 1368459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1369252", "text": "Do you have benchmarks comparing the two solutions ?\n", "created_at": "2011-06-14 21:05:52", "user": 9347, "id": 1369252}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1369811", "text": "@dmathieu here's something you can run:\n\n``` ruby\nacronym = \"API\"\n100.times { ActiveSupport::Inflector.inflections.acronym acronym.next!.dup }\nclass ActiveSupport::Inflector::Inflections\n  def acronym_regex2\n    @acronym_regex2 ||= /#{@acronyms.values.join(\"|\")}/\n  end\nend\nActiveSupport::Inflector.inflections.instance_exec do\n  Benchmark.bmbm do |x|\n    x.report(\"acronym_regex\") { 10_000_000.times { acronym_regex } }\n    x.report(\"acronym_regex2\") { 10_000_000.times { acronym_regex2 } }\n  end\nend\n```\n\ngives:\n\n```\nRehearsal --------------------------------------------------\nacronym_regex    2.020000   0.000000   2.020000 (  2.011851)\nacronym_regex2   3.530000   0.000000   3.530000 (  3.533895)\n----------------------------------------- total: 5.550000sec\n\n                     user     system      total        real\nacronym_regex    2.000000   0.000000   2.000000 (  2.005268)\nacronym_regex2   3.530000   0.000000   3.530000 (  3.528883)\n```\n\nThe 75% slowdown shouldn't be surprising. However, at this level, the impact on overall Rails performance is so low that it's not worth quibbling about. If implementing the method as a conditional set is what it takes to get this patch accepted, then I'd do it.\n", "created_at": "2011-06-14 22:37:07", "user": 7035, "id": 1369811}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1385025", "text": "@sikachu I don't know who's responsible for merging this into rails, but I'm hoping it happens before there are too many changes that it fails to merge cleanly.\n\nbtw, what's the process of bringing pull requests to the attention of rails core?\n", "created_at": "2011-06-16 23:14:47", "user": 7035, "id": 1385025}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1385031", "text": "Oh my ... why didn't I see this -_-\"\n\nI'll get some core team to come and look at it then.\n", "created_at": "2011-06-16 23:16:42", "user": 4912, "id": 1385031}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1434540", "text": "@sikachu Just to remind you, still no activity after a week.\n", "created_at": "2011-06-24 19:17:36", "user": 7035, "id": 1434540}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1435314", "text": "Looks good, thanks.\n", "created_at": "2011-06-24 21:19:35", "user": 3387, "id": 1435314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1687516", "text": "I'm working on an open source project called FatFreeCRM, and would like to define 'CRM' as an acronym. Will this code will be released with Rails 3.1, or should I stick with \"FatFreeCrm\" for a while? Thanks\n", "created_at": "2011-07-30 09:23:54", "user": 139536, "id": 1687516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1688231", "text": "It won't be included in Rails 3.1, so you might want to stick with the CamelCase. :)\n", "created_at": "2011-07-30 14:10:58", "user": 4912, "id": 1688231}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1688548", "text": "Alright. Thanks for your reply!\n\nOn Jul 30, 2011, at 22:11, sikachu\nreply@reply.github.com\nwrote:\n\n> It won't be included in Rails 3.1, so you might want to stick with the CamelCase. :)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/pull/1648#issuecomment-1688231\n", "created_at": "2011-07-30 15:46:56", "user": 139536, "id": 1688548}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "These are template changes. As i forgot that time to add in 3-0-stable branch. By these changes user will be able to generate application for jdbc\\* stuff. \n\nAs Activerecord-jdbc-adapter is not is good shape with 3.1.rc\\* so these will help who using jruby + rails. They can use 3-0-*. \n\nAnd also included database..rake file changes to allow database operation for jdbc-*\n\nNot be able to cherry-pick from master as file changed in master.\n\nCheers, \nArun\n", "labels": [], "number": 1649, "updated_at": "2014-06-14 11:27:45", "user": 3948, "closed_at": "2011-06-28 18:40:30", "id": 1040524, "title": "Jruby 3 0 stable", "url": "https://api.github.com/repos/rails/rails/issues/1649", "created_at": "2011-06-11 11:13:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1348688", "text": "/cc @tenderlove\n", "created_at": "2011-06-11 14:06:57", "user": 3948, "id": 1348688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360890", "text": "One vote here for 3.0.9+ inclusion!\n", "created_at": "2011-06-13 18:33:47", "user": 125566, "id": 1360890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380491", "text": "3.0.9 is out. I think now this can go in 3.0.10 \n", "created_at": "2011-06-16 12:14:06", "user": 3948, "id": 1380491}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1449580", "text": "3.0.10 + jruby templates...awesome\n", "created_at": "2011-06-27 18:54:33", "user": 111473, "id": 1449580}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452642", "text": "3.0.10 +\n", "created_at": "2011-06-28 06:24:39", "user": 123855, "id": 1452642}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452743", "text": "+1 this will help us. Activerecord-jdbc-adapter is not is good shape with 3.1.rc*\n", "created_at": "2011-06-28 06:51:49", "user": 16808, "id": 1452743}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452761", "text": ":+1:\n", "created_at": "2011-06-28 06:56:22", "user": 160764, "id": 1452761}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452767", "text": " +1 \n", "created_at": "2011-06-28 06:58:54", "user": 68955, "id": 1452767}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452809", "text": "yeah Finally no -m for JRuby Rails apps\n", "created_at": "2011-06-28 07:11:03", "user": 111473, "id": 1452809}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1452810", "text": "this is a good fix.. I believe it will come in 3.0.10 \n", "created_at": "2011-06-28 07:11:21", "user": 24949, "id": 1452810}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1457884", "text": "@tenderlove Any more changes required here ?? \n", "created_at": "2011-06-28 18:33:12", "user": 3948, "id": 1457884}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Implemented support for usage of alternative conventions for namespaced models in error messages. This solves issue #1402 completely. \n\nThis means you can write your model errors like this:\n\nen:\n  activemodel:\n    errors:\n      models:\n        blog:\n          post:\n            attributes:\n              title:\n                blank: \"can't be blank - dot notation\"\n              header:\n                blank: \"can't be blank - dot notation\"\n        blog/post:\n          attributes:\n            title:\n              blank: \"can't be blank - slash notation\"\n            editor:\n              blank: \"can't be blank - slash notation\"\n", "labels": [], "number": 1650, "updated_at": "2014-07-03 04:54:41", "user": 202410, "closed_at": "2011-06-11 15:59:59", "id": 1040720, "title": "Implemented support for usage of alternative conventions for namespaced models in error messages. ", "url": "https://api.github.com/repos/rails/rails/issues/1650", "created_at": "2011-06-11 12:44:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347735", "text": "I am going to reject this one. This will make errors lookup even slower. :(\n", "created_at": "2011-06-11 13:11:10", "user": 9582, "id": 1347735}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1347747", "text": "Tks for the pull request though. IMHO, we need to choose between the two syntaxes.\n", "created_at": "2011-06-11 13:11:57", "user": 9582, "id": 1347747}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1348100", "text": "Ok, I fully understand your point of view. If we drop one syntax there will be an API break as described on http://groups.google.com/group/rubyonrails-core/browse_thread/thread/eca57305b1a3ea0d. Although I´ve not benchmarked this(!), I don´t think two more hash lookups impact performance seriously negative, don´t they?!\n", "created_at": "2011-06-11 13:31:16", "user": 202410, "id": 1348100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1348469", "text": "More precisly: Only not supporting both syntaxes in \"Namespaced::Model.model_name.human\" and \"Namespaced::Model.human_attribute_name\" will break API. Supporting it in \"Namespaced::Model.new.errors.add(...)\" too would be due to consistency reasons. \n", "created_at": "2011-06-11 13:51:10", "user": 202410, "id": 1348469}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1349680", "text": "Yes, we should never have allowed the nested namespaced setting. I will find a way to deprecate it still in 3-1-stable before final release.\n", "created_at": "2011-06-11 15:00:13", "user": 9582, "id": 1349680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350123", "text": "Let me know what you do with that issue and if I can support you. \n", "created_at": "2011-06-11 15:19:04", "user": 202410, "id": 1350123}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350311", "text": "I am trying to deprecate it in 3-1-stable, but it is very hard to deprecate I18n stuff. Any ideas?\n", "created_at": "2011-06-11 15:29:09", "user": 9582, "id": 1350311}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350365", "text": "How about a simple setting ? We wouldn't support 2 syntax in the same time but separately. Performance would not degrade. Everyone happy ?\n", "created_at": "2011-06-11 15:38:31", "user": 65587, "id": 1350365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350704", "text": "I have removed the alternate namespace syntax as it cannot work on all cases.\n", "created_at": "2011-06-11 15:59:49", "user": 9582, "id": 1350704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1350727", "text": "@paneq I don't see a strong reason to have a configuration option and support two different syntaxes as one of the options cannot work on all cases and does not provide significant benefits over the other.\n", "created_at": "2011-06-11 16:01:04", "user": 9582, "id": 1350727}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351448", "text": "@josevalim - You mean that alternative syntax cannot work in cases where class is nested inside another class ? Can we agree that this alternative syntax will be always supported in 3.0.\\* in those 2 of 3 cases (model_name, human_attribute_name) ?\n", "created_at": "2011-06-11 16:38:04", "user": 65587, "id": 1351448}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351558", "text": "Yes and yes.\n", "created_at": "2011-06-11 16:43:50", "user": 9582, "id": 1351558}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351657", "text": "Thank you for your support and time. I need to start thinking about rearranging my translations files now. \n", "created_at": "2011-06-11 16:47:26", "user": 65587, "id": 1351657}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Version: 2.3.11\n\nWhen submitting a XML formatted POST request to my controller, it is automatically parsed into a Ruby Hash object.\nThis would be really great, if it didn't discard all text elements from the XML.\n`<elem foo=\"bar\">Some text</elem>` \njust becomes \n`{'elem' => { 'foo' => 'bar' } }` \nwithout any reference to the text element.\nIf there's a way to disable automatic parsing, I could use hpricot to parse the XML.\n", "labels": [], "number": 1651, "updated_at": "2011-06-11 13:53:43", "user": 160025, "closed_at": "2011-06-11 13:53:43", "id": 1040950, "title": "Automatic XML parsing discards text elements", "url": "https://api.github.com/repos/rails/rails/issues/1651", "created_at": "2011-06-11 13:17:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1348512", "text": "Ok, now I feel stupid ^^ - It just occurred to me that I can of course still parse the original XML using `Hpricot::XML(request.body)`\n", "created_at": "2011-06-11 13:53:43", "user": 160025, "id": 1348512}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When updating my app to rails 3.0.8, only when I use the console I got the following situation:\n\n``` ruby\n\"conta\".pluralize => \"contas\"\n\"contas\".singularize => \"conta\"\n```\n\nIt's ok!\n\nBut, running a simple query:\n\n``` ruby\nConta.first => ActiveRecord::StatementInvalid: Mysql2::Error: Table 'development.conta' doesn't exist: SELECT  `conta`.* FROM `conta` LIMIT 1\n```\n\nWhen set to an irregular inflection (and don't use singular/plural inflections), I have the same problem. Example:\n\n``` ruby\nActiveSupport::Inflector.inflections do |inflect|\n  inflect.irregular 'conta', 'contas'\n  inflect.irregular 'Conta', 'Contas'\nend\n```\n\nWhen the app is running (development environment), the same is not true. \nThe problem is just in console and production environment.\n\nThanks!\n", "labels": [], "number": 1652, "updated_at": "2011-09-04 19:18:19", "user": 103288, "closed_at": "2011-09-04 19:18:19", "id": 1041984, "title": "Rails 3.0.8 and inflections", "url": "https://api.github.com/repos/rails/rails/issues/1652", "created_at": "2011-06-11 14:52:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636677", "text": "@danieltamiosso if you run it with 3.0.9 \n\nyou will get the output like \n\n<pre>\n\nubuntu@srv-u5k82:~/work/issue_1652$ rails g scaffold Conta title:string\nPlural version of the model detected, using singularized version. Override with --force-plural.\n      invoke  active_record\n      create    db/migrate/20110723065240_create_conta.rb\n      create    app/models/contum.rb\n      invoke    test_unit\n      create      test/unit/contum_test.rb\n      create      test/fixtures/conta.yml\n       route  resources :conta\n      invoke  scaffold_controller\n      create    app/controllers/conta_controller.rb\n      invoke    erb\n      create      app/views/conta\n      create      app/views/conta/index.html.erb\n      create      app/views/conta/edit.html.erb\n      create      app/views/conta/show.html.erb\n      create      app/views/conta/new.html.erb\n      create      app/views/conta/_form.html.erb\n      invoke    test_unit\n      create      test/functional/conta_controller_test.rb\n      invoke    helper\n      create      app/helpers/conta_helper.rb\n      invoke      test_unit\n      create        test/unit/helpers/conta_helper_test.rb\n      invoke  stylesheets\n      create    public/stylesheets/scaffold.css\n</pre>\n\n\nSo you can see warning \"Plural version of the model detected, using singularized version. Override with --force-plural.\"\n\nand i did the same \n\n<pre>\nubuntu@srv-u5k82:~/work/issue_1652$ bundle exec rails c\nLoading production environment (Rails 3.0.9)\nruby-1.8.7-p334 :001 > \"conta\".pluralize\n => \"conta\" \nruby-1.8.7-p334 :002 > \"contas\".singularize\n => \"conta\" \nruby-1.8.7-p334 :003 > \n</pre>\n\n", "created_at": "2011-07-23 06:55:22", "user": 3948, "id": 1636677}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1993272", "text": "@danieltamiosso do you like to close this issue? or you still have problems... any updates?\n", "created_at": "2011-09-04 19:06:15", "user": 3948, "id": 1993272}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1993328", "text": "Ooops @arunagw!\n\nYes, but we are talking about different things. Anyway, in \"3.0.10\" it is working normally.\n\nThank you.\n", "created_at": "2011-09-04 19:18:19", "user": 103288, "id": 1993328}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "removed duplicate code\n", "labels": [], "number": 1653, "updated_at": "2014-06-21 07:44:57", "user": 160764, "closed_at": "2011-06-11 16:14:43", "id": 1042853, "title": "Refactor test cases", "url": "https://api.github.com/repos/rails/rails/issues/1653", "created_at": "2011-06-11 16:14:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1351005", "text": "by mistakenly one more commit came closing and i will make another pull request\n", "created_at": "2011-06-11 16:15:15", "user": 160764, "id": 1351005}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1654, "updated_at": "2014-06-26 17:36:26", "user": 160764, "closed_at": "2011-06-13 12:45:58", "id": 1042923, "title": "removed duplicate code in tests", "url": "https://api.github.com/repos/rails/rails/issues/1654", "created_at": "2011-06-11 16:20:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354947", "text": "+1\n", "created_at": "2011-06-12 14:20:08", "user": 6351, "id": 1354947}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356779", "text": "Hey, I've added this duplication here cb44e99d and don't remember if was on purpose or not :S.\nAre you sure that we are not trying to discover some weird case by calling define_attribute_method twice?\n", "created_at": "2011-06-13 01:40:47", "user": 52642, "id": 1356779}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357010", "text": "@spastorino, I am sure in the test case it is not required.\n", "created_at": "2011-06-13 03:39:55", "user": 160764, "id": 1357010}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358008", "text": "+1\n", "created_at": "2011-06-13 10:18:15", "user": 409377, "id": 1358008}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "removed warnings from actionpack.\n", "labels": [], "number": 1655, "updated_at": "2014-06-27 15:19:23", "user": 59360, "closed_at": "2011-06-11 17:17:03", "id": 1043591, "title": "Removed warnings from ActionPack", "url": "https://api.github.com/repos/rails/rails/issues/1655", "created_at": "2011-06-11 17:14:19", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I'm using rails from master and sprockets-2.0.0.beta.10.\nI've tried to use jQueryUI theme in a project but have no luck. What I've done:\n\n— placed all assets in the /vendor/assets/stylesheets folder, so it looks like:\n\n```\n/stylesheets\n--/ui-darkness\n----/images\n----jquery-ui-1.8.13.custom.css\n```\n\n— created index.css with the following content:\n\n```\n/*\n*= require ./jquery-ui-1.8.13.custom\n*= provide ./images\n*/\n```\n\nand put it in the /ui-darkness folder.\n\n— required in the application.css:\n\n```\n*= require_self\n*= require ui-darkness\n*= require_tree .\n```\n\nFor now I've got  index.css and jquery-ui-1.8.13.custom.css compiled into the application.css but other assets remained unreachable:\n\n```\nStarted GET \"/assets/images/ui-bg_glass_20_555555_1x400.png\" for 127.0.0.1 at 2011-06-11 19:16:54 +0300  \nServed asset /images/ui-bg_glass_20_555555_1x400.png - 404 Not Found  (4ms)  (pid 5822)\n```\n", "labels": [], "number": 1656, "updated_at": "2011-12-09 04:27:27", "user": 380913, "closed_at": "2011-07-21 21:06:59", "id": 1043609, "title": "Asset pipeline — bundling plugin assets", "url": "https://api.github.com/repos/rails/rails/issues/1656", "created_at": "2011-06-11 17:20:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354223", "text": "Did you include jquery-ui JavaScript file? It seems you did but you did not mention that in the ticket.\n", "created_at": "2011-06-12 08:30:04", "user": 6399, "id": 1354223}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354244", "text": "Sure. I have\n\n```\n//= require jquery\n//= require jquery-ui\n//= require jquery_ujs\n//= require_tree .\n```\n\nin the application.js.\nSince DOM tree was changed by jQuery UI (that's why I've got requests for image assets) I didn't think I have to mention that.\n", "created_at": "2011-06-12 08:41:06", "user": 380913, "id": 1354244}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354257", "text": "Sorry, those buttons is quite near to each other!\n", "created_at": "2011-06-12 08:49:33", "user": 380913, "id": 1354257}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354462", "text": "You might need to tweak the jquery-ui CSS you're using. When I ported a template I was using to use the asset pipeline I extracted all of the CSS background-image rules from the main CSS and pushed them into a separate images.css.scss.erb file which had things like\n\n``` erb\n#something {\n  background-image: url(<%= asset_path('something.png') %>);\n}\n```\n\nwhich was then included into the application.css file either explicitly or by require_tree.\n", "created_at": "2011-06-12 10:27:09", "user": 2704, "id": 1354462}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354503", "text": "jquery-ui-1.8.13.custom.css has 18 (!) matches of \"url\". Too much tweaking as for me. Imagine you will have to fix every css in every jQuery plugin you want to use in a project. This is totally wrong. And this is http://getsprockets.org/installation_and_usage#bundling_assets_with_the_provide_directive was made for, but I can't understand why it's not working as expected.\n", "created_at": "2011-06-12 10:46:24", "user": 380913, "id": 1354503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1373041", "text": "After digging some code I found that _provide_ directive is deprecated in Sprockets 2.x.\nSo I tried another approach:\n\n— index.css has been modified as\n\n```\n/*\n  *= require_tree .\n*/\n```\n\nsince it's unnecessary to refer each file manually.\n\n— added to the application.rb\n\n```\nconfig.assets.paths << File.join(Rails.root, 'vendor/assets/stylesheets/ui-darkness')\n```\n\nThis works at least in the development mode. After all I hope that in the future releases only one line (\"=require ui-darkness\" in the application.css) will have to do all work.\n", "created_at": "2011-06-15 12:04:11", "user": 380913, "id": 1373041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550242", "text": "Is this still an issue?, have you tried 3-1-stable branch + sprockets from master?\n", "created_at": "2011-07-11 21:47:26", "user": 52642, "id": 1550242}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1552133", "text": "This is still an issue in terms of ambiguity: what's the right approach to include javascripts plugins into a Rails 3.1 project in case such ones supplied with stylesheets and images (especially if there's relative paths to the images in the stylesheet)? \n", "created_at": "2011-07-12 05:41:39", "user": 380913, "id": 1552133}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1574770", "text": "@nashbridges, agreed. this is unclear.\n", "created_at": "2011-07-14 20:30:01", "user": 21505, "id": 1574770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1626979", "text": "@josh can you please comment on this?\n", "created_at": "2011-07-21 20:58:25", "user": 3124, "id": 1626979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1627040", "text": "Don't use `provide`, it doesn't do anything.\n\nI'd suggest mirroring the app/assets/{javascripts,stylesheets,images} structure. You can then reference any images inside app/images. GET /assets/foo.png will look for app/assets/images/foo.png.\n", "created_at": "2011-07-21 21:06:59", "user": 137, "id": 1627040}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2297015", "text": "This is still an issue. The mirroring doesn't work (or I don't understand the comment), because the stylesheets reference images in a subdirectory of the stylesheet's directory, e.g. `background-image: url(images/ui-icons_72a7cf_256x240.png)`. The asset pipeline will try to resolve `/assets/images/ui-icons_72a7cf_256x240.png` and not `assets/ui-icons_72a7cf_256x240.png` as @josh suggests. \n\nThe question remains: what is the preferred solution in cases like these when the vendor's stylesheet does not contain asset pipeline directives for pointing to images?\n", "created_at": "2011-10-05 11:44:32", "user": 120231, "id": 2297015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2403520", "text": "I agree, this is still an issue for those of us who have jQuery UI themes generated by their Theme Roller tool and want it to \"just work\" in Rails 3.1.\n\nI started putting the theme assets under vendor/assets/jquery-ui-lightness, thinking that was the \"correct\" way to do things in Rails 3.1 and use the asset pipeline. But it seems like more trouble than it's worth in this case!\n\nNot only do you have to replace references to url() in the css file with calls to asset_path (and change the file extension to .css.erb),  you'd also have to move all the images out to a different directory (or add the images to the assets path with `config.assets.paths << \"#{Rails.root}/vendor/assets/jquery-ui-lightness/images\"`) so that it can find those images and serve them!\n\nInstead, I just moved the theme files back to public/jquery-ui-1.8.14.custom/css/ui-lightness and referenced them in my layout:\n\n``` haml\n  = stylesheet_link_tag 'application', '/jquery-ui-1.8.14.custom/css/ui-lightness/jquery-ui-1.8.14.custom.css'\n  = javascript_include_tag 'application'\n```\n\nThis is the only css file I had to exclude from the asset pipeline. Which is too bad I had to make an exception for it, but at least when you leave it under public/ it just works!! \n\nHopefully down the road someone will write a jquery-ui gem that has the css and images under vendor/stylesheets and vendor/images, so you can just add jquery-ui to your Gemfile and it will work without any extra trouble. Hmm, I guess that wouldn't work, because jQuery UI users want to be able to choose from a list of available themes or create a custom theme. It could work for their standard provided themes (the jquery-ui gem could simply have separate manifest files like jquery-ui-lightness that you could include in your app's manifest file) but wouldn't work for custom Theme Roller themes.\n\nMight also be relevant:\nhttp://stackoverflow.com/questions/7546202/trouble-with-the-asset-pipeline-on-deploying-production-mode\n", "created_at": "2011-10-14 05:35:06", "user": 14151, "id": 2403520}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3075410", "text": "Here are a couple approaches I figured out to this issue:\n\nhttp://bibwild.wordpress.com/2011/12/08/jquery-ui-css-and-images-and-rails-asset-pipeline/\n\nBasically, you can either add to the config.assets.paths somewhat as @nashbridges suggests,  _except_ you need to do it in a special initializer to make sure you get it in there _before_ the Rails default  paths;  OR you can place the jquery-ui CSS and ./images dir both at the _root_ of an existing rails asset path, so they'll have the right relative path relation to each other. \n\nBoth approaches work both in default dev and default production configuration, as well as every other asset config combo I could think of (like dev with debug=false). \n\nThe config.asset.paths approach is in config/application.rb, eg:\n\n```\ninitializer :jquery_ui_images_asset_base, :group => :all,  :after => :append_assets_path do\n    config.assets.paths.unshift Rails.root.join(\"app\", \"assets\", \"stylesheets\", \"jquery-ui\", \"cupertino\").to_s\nend\n```\n\nIt would be nice if there were a less hacky way to accomplish this, maybe even an sprockets directive that could somehow say to treat  a a certain subdir in existing asset environment path like stylesheets/jquery-ui/themename as being at a 'base path' for compilation of assets under that subdir; but then, I think you need it in config.assets.paths for routing under certain conditions too (dev mode but debug=false maybe?), so maybe that's a non-starter. \n", "created_at": "2011-12-09 04:27:27", "user": 149304, "id": 3075410}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've upgraded my rails 3.0 app to Rails 3.1 and now I seem to be seeing a lot of log activity on pages that should be completely cached and shouldn't even touch the app.\n\nI made a basic app tonight to test this: https://github.com/Bodacious/Rails3.1caching\n\nThe root path should be cached (and is written to the public dir) but does so on every request:\n\n<pre>\nStarted GET \"/\" for 127.0.0.1 at Sat Jun 11 20:34:38 +0100 2011\n  Processing by UsersController#index as HTML\nRendered users/index.html.erb within layouts/application (0.5ms)\nWrite page /Users/Gavin/Sites/AssetTest/public/index.html (0.6ms)\nCompleted 200 OK in 5ms (Views: 2.3ms | ActiveRecord: 0.3ms)\ncache: [GET /assets/application-4c93ba2b40930f2b7afa684141665b62.css] fresh\ncache: [GET /assets/application-177e737147b1c56843a6eb81ac8425f9.js] fresh\ncache: [GET /assets/rails.png] stale, valid, store\n</pre>\n\n\nWhat's up?\n", "labels": [], "number": 1657, "updated_at": "2011-06-14 20:03:58", "user": 73998, "closed_at": "2011-06-14 19:55:27", "id": 1043941, "title": "Template caching doesn't seem to be working anymore?", "url": "https://api.github.com/repos/rails/rails/issues/1657", "created_at": "2011-06-11 19:36:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354216", "text": "After the public/index.html page has been created by Rails, it is the job of webserver to render that file and not to forward the request to Rails. What webserver you are using?\n", "created_at": "2011-06-12 08:28:12", "user": 6399, "id": 1354216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354265", "text": "I'm using NGINX\n\nThis seems to be working OK on my live production server but I'm not using the asset pipeline there.\n\nAlso, the initial index.html file that rails creates with a new app was loaded fine and the controller action was ignored. With this cached template, the controller action was called with each request.\n\nRails 3.1.0rc4\nRuby 1.9.2-p180\n\nOn 12 Jun 2011, at 09:28, neerajdotnamereply@reply.github.com wrote:\n\n> After the public/index.html page has been created by Rails, it is the job of webserver to render that file and not to forward the request to Rails. What webserver you are using?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1657#issuecomment-1354216\n", "created_at": "2011-06-12 08:54:56", "user": 73998, "id": 1354265}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357526", "text": "For me in production mode rails keep writing to public/index.html page. However in development mode it does not write the file because it loads the existing public/index.html page. I used the default webrick that comes with ruby. \n\nI used edge rails with REE 1.8.7. \n", "created_at": "2011-06-13 07:59:43", "user": 6399, "id": 1357526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357979", "text": "same behavior here as described by @neerajdotname but only with ruby 1.9.2 \n", "created_at": "2011-06-13 10:09:27", "user": 202410, "id": 1357979}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358559", "text": "In production mode Rails (more detailed: the middleware \"ActionDispatch::Static\") shouldn´t be responsible in serving static assets as @neerajdotname already mentioned above. Therefore the default setting in production.rb of \"config.serve_static_assets = false\" let´s you skip \"ActionDispatch::Static\" in the middleware stack. That makes absolutely sense to me. But this implies that a dedicated webserver can serve static assets. It seems to me that webrick alone simply cannot do this. When using webrick in production mode and setting \"config.serve_static_assets = true\" gives you the expected behavior. \n", "created_at": "2011-06-13 12:37:09", "user": 202410, "id": 1358559}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358691", "text": "My conclusion: When using webrick – regardless of the mode we are running in – we always should use ActionDispatch::Static in the middleware stack. Can we agree on this or am I missing something? \n", "created_at": "2011-06-13 13:03:22", "user": 202410, "id": 1358691}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358716", "text": "Agree \n\nSent from my iPad 2\n\nOn 13 Jun 2011, at 14:03, thoeferreply@reply.github.com wrote:\n\n> My conclusion: When using webrick – regardless of the mode we are running in – we always should use ActionDispatch::Static in the middleware stack. Can we agree on this or am I missing something?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1657#issuecomment-1358691\n", "created_at": "2011-06-13 13:11:10", "user": 73998, "id": 1358716}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1367839", "text": "This solutions forces Rails to include ActionDispatch::Static when in production mode and running with WEBrick. What do you think? Can you verify if this is free from unwanted side effects? One (useful IMHO) side effect is that it includes the \"Server\" property for the view of InfoController on Rails´s default page. \n", "created_at": "2011-06-14 17:50:10", "user": 202410, "id": 1367839}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368744", "text": "I don't think we should hard code specifically for the webrick handler. If you want Rails to serve the static assets in production under webrick, just set the configuration option to true.\n", "created_at": "2011-06-14 19:55:27", "user": 9582, "id": 1368744}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368810", "text": "Ok, was tinkering with myself about this. Do you think it´s necessary to document this in production.rb next to \"(Apache or nginx will already do this)...\"? \n", "created_at": "2011-06-14 20:03:58", "user": 202410, "id": 1368810}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Example:\n\nmodel: Category\n\nControllers: Category and Admin::Category\n\nviews: categores/new, admin/categories/new\n\nin each view i have \"form_for @category\".\n\nIssue comes here: in categories view form url generates right, but in admin/categories it generates same as in categories. It should prepend /admin/ in url.\n", "labels": [], "number": 1658, "updated_at": "2011-07-11 21:31:01", "user": 108694, "closed_at": "2011-07-11 21:31:01", "id": 1044196, "title": "Namespaced views should respect namespace", "url": "https://api.github.com/repos/rails/rails/issues/1658", "created_at": "2011-06-11 22:03:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354766", "text": "url_for something produces always the same url, wherever you are in your application.\nThe behavior you see is the one intended.\n\nYou have to specify the uri manually if you want it to be something different to the default one.\n", "created_at": "2011-06-12 12:50:41", "user": 9347, "id": 1354766}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354777", "text": "Yes, right now i'm dong so. But I think that it will be better to get automatically generated form url without specifying url manually\n", "created_at": "2011-06-12 12:57:47", "user": 108694, "id": 1354777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354850", "text": "Or just use `form_for [:admin, @category]`\n", "created_at": "2011-06-12 13:38:34", "user": 286476, "id": 1354850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550116", "text": "This is the intended behavior\n", "created_at": "2011-07-11 21:31:01", "user": 52642, "id": 1550116}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "", "labels": [], "number": 1659, "updated_at": "2014-07-03 04:55:04", "user": 59360, "closed_at": "2011-06-12 13:07:11", "id": 1044739, "title": "Added ternary operation and more readable code.", "url": "https://api.github.com/repos/rails/rails/issues/1659", "created_at": "2011-06-12 02:58:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354768", "text": "Ternary conditions instead of \"normal\" ones don't make things more readable. Neither do parenthesis.\nI don't think this should be merged.\n", "created_at": "2011-06-12 12:51:55", "user": 9347, "id": 1354768}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354791", "text": "Whether these changes make things more readable is a matter of subjective opinion, however they do pollute the timeline and reduce the effectiveness of tools like `git blame`. If people want something simple to do then we've obviously got a few places in the helpers where strings are modified in place causing the recent spate of SafeBuffer related issues. Tracking down these is a much better use of everyone's time especially with 3.0.9 and 3.1 releases imminent.\n", "created_at": "2011-06-12 13:07:11", "user": 6321, "id": 1354791}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "My problem is:\n\nA default_scope :order => \"position ASC\"\n\nB has_many BJoinA\nB has_many A :through BJoinA, :order => \"BJoinA.position ASC\"\n\nI have A to ordered in a certain way.\nand I have B's As ordered in a different way (though the join model).\n\nBut B.first.as does not return me As ordered by BJoinA position because the select include A's default_scope ordering first.\n\nIs there a way to ignore default_scope (order) in has_many :through association?\nOr should the join order be respected first?\n\nthe resulted select is:\nSELECT \"AS\".\\* FROM \"AS\" INNER JOIN \"B_AS\" ON \"AS\".id = \"B_AS\".A_ID WHERE ((\"B_AS\".B_ID = 3)) ORDER BY position ASC, B_AS.position ASC\n\nI would like the B_AS.position AS to be the first condition\n\nUsing 3.0.4 or 3.0.7\n\nThanks\n", "labels": ["activerecord"], "number": 1660, "updated_at": "2012-09-14 04:43:42", "user": 43351, "closed_at": "2012-09-14 04:43:42", "id": 1044838, "title": "has_many :thought order ordering problems", "url": "https://api.github.com/repos/rails/rails/issues/1660", "created_at": "2011-06-12 04:54:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354360", "text": "Please can you test using a 3.1 RC and let us know if the problem still exists?\n", "created_at": "2011-06-12 09:41:56", "user": 1979, "id": 1354360}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354382", "text": "Jon, yes it does - I was thinking of adding :reorder to the list of association options as a way of fixing it, but it's too late for 3.1. We can't change the behaviour either since it's been this way for quite a while.\n", "created_at": "2011-06-12 09:50:36", "user": 6321, "id": 1354382}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354415", "text": "+1 on adding `:reorder`. seems like the only solution. agree too late for 3.1\n", "created_at": "2011-06-12 10:06:24", "user": 1979, "id": 1354415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5399704", "text": "Is this still an issue @anyware? We're past 3.1 now. :)\n", "created_at": "2012-04-28 20:02:29", "user": 27786, "id": 5399704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8551632", "text": "It appears that, at the least, #2083 has superseded this issue. It's not even a bug, exactly, just a change in behavior that may make more sense. Therefore, I'm closing this in favor of that.\n", "created_at": "2012-09-14 04:43:42", "user": 27786, "id": 8551632}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "With the `:foreign_key` option commented out in the code snippet below, AR will try to put nil into the user_id column on save.  But if I uncomment it, it works fine.\n\n``` ruby\nclass User < ActiveRecord::Base\n    has_many :posts, :dependent => :destroy\nend\n\nclass Post < ActiveRecord::Base\n    belongs_to :author, :class_name => \"User\" #, :foreign_key => :user_id\nend\n\nuser = User.new(...)\npost = Post.new(:author => user)\nuser.save # ActiveRecord::StatementInvalid is raised if :foreign_key is commented out\n```\n\nSeems to me in the above example, the foreign key column can, by default, be inferred from either the class name (I prefer this one) or the association name instead of requiring me to explicitly specify it, which doesn't seem very DRY.\n", "labels": [], "number": 1661, "updated_at": "2011-06-12 09:52:14", "user": 95088, "closed_at": "2011-06-12 07:39:25", "id": 1044893, "title": "belongs_to not very DRY", "url": "https://api.github.com/repos/rails/rails/issues/1661", "created_at": "2011-06-12 05:44:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354131", "text": "But what about the situation where there are multiple `belongs_to`, e.g:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  belongs_to :created_by, :class_name => 'User'\n  belongs_to :updated_by, :class_name => 'User'\nend\n```\n\nThis is a long-standing convention and isn't going to be changed as it would impact a huge number of developers.\n", "created_at": "2011-06-12 07:39:25", "user": 6321, "id": 1354131}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354154", "text": "Then perhaps a better error message ought to get generated to call out  \nthe required `:foreign_key` option when it is missing.\n\nOn Jun 12, 2011, at 12:39 AM, pixeltrix wrote:\n\n> But what about the situation where there are multiple `belongs_to`,  \n> e.g:\n> \n> ``` ruby\n> class Post < ActiveRecord::Base\n>  belongs_to :created_by, :class_name => 'User'\n>  belongs_to :updated_by, :class_name => 'User'\n> end\n> ```\n> \n> This is a long-standing convention and isn't going to be changed as  \n> it would impact a huge number of developers.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1661#issuecomment-1354131\n", "created_at": "2011-06-12 07:54:03", "user": 95088, "id": 1354154}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354246", "text": "What do you get at the moment? Isn't it a `NoMethodError` for `author_id` - that's seems enough for me. You could alter [`derive_foreign_key`](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/reflection.rb#L359) to check if the target for `respond_to?(foreign_key)` but it could have unintended consequences by loading models earlier than they would've been or triggering false positives if methods are defined in modules that are included after the association is defined.\n", "created_at": "2011-06-12 08:42:39", "user": 6321, "id": 1354246}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354301", "text": "Well, `author_id` yields `NoMethodError` whether I specify the `:foreign_key` option or not.\n\nIn the code snippet I originally provided, **ActiveRecord** would happily write a `null` to the `user_id` column.  My code errored out only because I had set `:null => false` on the `user_id` column in the migration that creates the `posts` table.\n\nSo long-standing convention or not, this seems like a bug to me.\n", "created_at": "2011-06-12 09:13:58", "user": 95088, "id": 1354301}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354387", "text": "I'm not sure what you're asking for - an error being raised if there exists a `user_id` column? You might have a `belongs_to :user` and a `belongs_to :author` in the same model, so you'd have to check to see if it's used in another association and even then it might just be a legacy column in a database so that isn't going to be okay.\n\nThe other option that I thought that you wanted to do was to raise an error if the model doesn't respond to the derived foreign key name, but even that isn't going to be acceptable, e.g:\n\n``` ruby\nclass Post < ActiveRecord::Base\n  belongs_to :author\n\n  def author_id\n    #some custom method\n  end\n\n  def author_id=(value)\n    #some custom method\n  end\nend\n```\n\nThis is perfectly acceptable at the moment but would raise an error if we check `respond_to?`.\n", "created_at": "2011-06-12 09:52:14", "user": 6321, "id": 1354387}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "rails-edc0b2b80b55/activerecord/lib/active_record/railtie.rb:102:in `block in <class:Railtie>': undefined method`each' for \"[MISSING] activerecord.attributes\":String (NoMethodError)\n\nMy key value backed automatically stores missing key with stub translation. For example here I18n.t(:\"activerecord.attributes\") stores and returns \"[MISSING] activerecord.attributes\" translation. So it returns string, and each method fails. Code that fails added in c19bd4f88ea5cf56b2bc8ac0b97f59c5c89dbff7. before this commit it was ok.\n", "labels": [], "number": 1662, "updated_at": "2011-06-13 10:34:33", "user": 108694, "closed_at": "2011-06-13 10:34:33", "id": 1045353, "title": "Rails 3-1-stable fails to start", "url": "https://api.github.com/repos/rails/rails/issues/1662", "created_at": "2011-06-12 11:10:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354590", "text": "@josevalim this is the problem that is breaking the build also :heart:\n", "created_at": "2011-06-12 11:24:15", "user": 1979, "id": 1354590}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355837", "text": "I thought \"activerecord.attributes\" is some kind of a \"reserved\" namespace that is used by rails internally, isn´t it?! Therefor I find it a bit strange to treat this key as a normal key in which you store (stub) translations. \n", "created_at": "2011-06-12 19:29:05", "user": 202410, "id": 1355837}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355879", "text": "Do you think this is enough? @josevalim\n", "created_at": "2011-06-12 19:45:41", "user": 202410, "id": 1355879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357795", "text": "This issue can be closed due to https://github.com/rails/rails/pull/1675\n", "created_at": "2011-06-13 09:19:11", "user": 202410, "id": 1357795}], "assignees": [9582, 9582], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The following code raises an exception in Rails v3.0.8, v3.0.9.rc3, 3-0-stable and v3.1.0.rc4, but not in v3.0.7. I'm using ruby 1.9.2-p180, don't know about other rubies.\n\n```\nlink_to \"Günter\", search_person_path(:name => \"Günter\".html_safe) # Raises exception\n\nlink_to \"Günter\", search_person_path(:name => \"Guenter\".html_safe) # works fine\nlink_to \"Günter\", search_person_path(:name => \"Günter\") # works fine\n```\n\nThe exception is \n\n```\nundefined method `each_byte' for nil:NilClass\n\nactivesupport (3.0.9.rc3) lib/active_support/whiny_nil.rb:48:in `method_missing'\n/home/igel/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/uri/common.rb:222:in `block in escape'\nactivesupport (3.0.9.rc3) lib/active_support/core_ext/string/output_safety.rb:119:in `gsub'\nactivesupport (3.0.9.rc3) lib/active_support/core_ext/string/output_safety.rb:119:in `gsub'\n/home/igel/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/uri/common.rb:219:in `escape'\nrack-mount (0.6.14) lib/rack/mount/utils.rb:72:in `escape_uri'\n```\n", "labels": ["actionpack", "regression"], "number": 1663, "updated_at": "2011-06-12 14:35:29", "user": 36442, "closed_at": "2011-06-12 14:35:29", "id": 1045420, "title": "Rails 3.0.9.rc3 regression: url_for fails with html safe unicode params", "url": "https://api.github.com/repos/rails/rails/issues/1663", "created_at": "2011-06-12 11:55:03", "comments": [], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The first step is the most difficult one :)\n", "labels": [], "number": 1664, "updated_at": "2014-06-29 03:49:06", "user": 198371, "closed_at": "2011-06-12 13:47:52", "id": 1045584, "title": "The first step is the most difficult one :)", "url": "https://api.github.com/repos/rails/rails/issues/1664", "created_at": "2011-06-12 13:17:59", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1354872", "text": "We cannot break this in two lines otherwise the comment_if section will no longer work.\n", "created_at": "2011-06-12 13:47:52", "user": 9582, "id": 1354872}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Just extracted the creation of the Relation object to a separated method, so we can easily use a subclassed relation.\n", "labels": [], "number": 1665, "updated_at": "2014-07-03 04:55:20", "user": 191614, "closed_at": "2012-04-28 16:59:45", "id": 1046014, "title": "Support for custom Relation classes", "url": "https://api.github.com/repos/rails/rails/issues/1665", "created_at": "2011-06-12 16:26:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355556", "text": "Tests? I'm assuming you want to be able to create a subclass of Relation something like this:\n\n``` ruby\nclass MyRelation < ActiveRecord::Relation\n  def order(*args)\n    # custom ordering\n  end\nend\n\nclass Product < ActiveRecord::Base\n  private\n  def create_relation\n    MyRelation.new(self, arel_table)\n  end\nend\n```\n\nIf that's what you want then you need to have tests for this functionality and that any spawned relations are the same subclass.\n", "created_at": "2011-06-12 17:57:06", "user": 6321, "id": 1355556}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355583", "text": "Yeah, exactly that. These were just some minor refactoring that I assumed that could already be merged. Anyway, I will write some tests for relation subclasses, don't know for sure if it is a good/useful idea tough.\n", "created_at": "2011-06-12 18:07:25", "user": 191614, "id": 1355583}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355730", "text": "If you don't have tests then there's no guarantee it won't be broken - even by a patch release.\n", "created_at": "2011-06-12 18:51:14", "user": 6321, "id": 1355730}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356000", "text": "Don't know this is the best way to test this, but here goes a first try.\n", "created_at": "2011-06-12 20:16:59", "user": 191614, "id": 1356000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398023", "text": "Is this still an issue @reu?\n", "created_at": "2012-04-28 16:34:01", "user": 651597, "id": 5398023}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398246", "text": "Wow, actually I didn't even remember this... must take a look at the current state of AR, but I don't think it is valid anymore.\n\nAnyway, it was never a issue, it was just a small refactoring. Gonna close this for now.\n", "created_at": "2012-04-28 16:59:45", "user": 191614, "id": 5398246}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1666, "updated_at": "2014-06-27 15:19:29", "user": 59360, "closed_at": "2011-06-12 16:57:13", "id": 1046061, "title": "Changed http://rubyonrails.com to  http://rubyonrails.org in changelog and other files.", "url": "https://api.github.com/repos/rails/rails/issues/1666", "created_at": "2011-06-12 16:46:39", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355390", "text": "Thanks for the pull request, but it contains other changes that are not related with the CHANGELOG. Also, those links are broken anyway, so I don't think it is really worth to change the CHANGELOG.\n", "created_at": "2011-06-12 16:57:13", "user": 9582, "id": 1355390}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am getting the following error while requesting some urls\n\nRunning:\nrails 3.1.0.rc4\nruby 1.9.2-p180\n\nThe url is localhost:3000/flag\n\nRoute is \n\n  scope \"(:locale)\", :locale => /en/ do\n    match 'flag/:id' => 'countries#flag'\n  end\n\n```\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86: [BUG] Segmentation fault\nruby 1.9.2p180 (2011-02-18 revision 30909) [i686-linux]\n\n-- control frame ----------\nc:0086 p:0011 s:0468 b:0468 l:000bdc d:002420 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86\nc:0085 p:---- s:0465 b:0465 l:000464 d:000464 FINISH\nc:0084 p:---- s:0463 b:0463 l:000462 d:000462 CFUNC  :map\nc:0083 p:0017 s:0460 b:0460 l:000bdc d:000bdc METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86\nc:0082 p:0063 s:0457 b:0457 l:000c5c d:000ca8 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:126\nc:0081 p:---- s:0452 b:0452 l:000451 d:000451 FINISH\nc:0080 p:---- s:0450 b:0450 l:000449 d:000449 CFUNC  :map\nc:0079 p:0018 s:0447 b:0447 l:000c5c d:000c5c METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:123\nc:0078 p:0031 s:0442 b:0442 l:000441 d:000441 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:635\nc:0077 p:0086 s:0436 b:0436 l:000bc8 d:000bc8 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:451\nc:0076 p:0194 s:0428 b:0428 l:000427 d:000427 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:338\nc:0075 p:0277 s:0420 b:0420 l:0007b4 d:0007b4 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:489\nc:0074 p:0036 s:0407 b:0407 l:001b3c d:001c4c BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:181\nc:0073 p:---- s:0403 b:0403 l:000402 d:000402 FINISH\nc:0072 p:---- s:0401 b:0401 l:000400 d:000400 CFUNC  :each\nc:0071 p:0074 s:0398 b:0398 l:001b3c d:001b3c METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179\nc:0070 p:---- s:0391 b:0391 l:000390 d:000390 FINISH\nc:0069 p:0009 s:0389 b:0388 l:000387 d:000387 TOP    /home/pkumar/Coding/mysportcm-3.1/app/controllers/pages_controller.rb:1\nc:0068 p:---- s:0386 b:0386 l:000385 d:000385 FINISH\nc:0067 p:---- s:0384 b:0384 l:000383 d:000383 CFUNC  :load\nc:0066 p:0018 s:0380 b:0380 l:000c38 d:000379 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:452\nc:0065 p:0045 s:0378 b:0378 l:000377 d:000377 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:639\nc:0064 p:0086 s:0372 b:0372 l:000c38 d:000c38 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:451\nc:0063 p:0194 s:0364 b:0364 l:000363 d:000363 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:338\nc:0062 p:0277 s:0356 b:0356 l:002534 d:002534 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:489\nc:0061 p:0036 s:0343 b:0343 l:001054 d:001c9c BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:181\nc:0060 p:---- s:0339 b:0339 l:000338 d:000338 FINISH\nc:0059 p:---- s:0337 b:0337 l:000336 d:000336 CFUNC  :each\nc:0058 p:0074 s:0334 b:0334 l:001054 d:001054 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179\nc:0057 p:0044 s:0327 b:0327 l:001d58 d:001908 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/inflector/methods.rb:124\nc:0056 p:---- s:0324 b:0324 l:000323 d:000323 FINISH\nc:0055 p:---- s:0322 b:0322 l:000321 d:000321 CFUNC  :each\nc:0054 p:0074 s:0319 b:0319 l:001d58 d:001d58 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/inflector/methods.rb:123\nc:0053 p:0025 s:0313 b:0310 l:0017b4 d:000309 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:527\nc:0052 p:---- s:0306 b:0306 l:000305 d:000305 FINISH\nc:0051 p:---- s:0304 b:0304 l:000303 d:000303 CFUNC  :yield\nc:0050 p:---- s:0302 b:0302 l:000301 d:000301 CFUNC  :default\nc:0049 p:0035 s:0300 b:0300 l:000299 d:000299 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:549\nc:0048 p:0081 s:0296 b:0296 l:000295 d:000295 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:61\nc:0047 p:0047 s:0290 b:0290 l:000289 d:000289 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:46\nc:0046 p:0051 s:0283 b:0283 l:000282 d:000282 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:25\nc:0045 p:0127 s:0277 b:0277 l:001278 d:0012c8 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:152\nc:0044 p:0014 s:0270 b:0270 l:000254 d:000269 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:93\nc:0043 p:6565 s:0265 b:0265 l:000264 d:000264 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:285\nc:0042 p:0072 s:0255 b:0255 l:000254 d:000254 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:92\nc:0041 p:0092 s:0249 b:0249 l:001278 d:001278 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:141\nc:0040 p:0025 s:0243 b:0243 l:000242 d:000242 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:531\nc:0039 p:0014 s:0239 b:0239 l:00226c d:00210c BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/warden-1.0.4/lib/warden/manager.rb:35\nc:0038 p:---- s:0237 b:0237 l:000236 d:000236 FINISH\nc:0037 p:---- s:0235 b:0235 l:000234 d:000234 CFUNC  :catch\nc:0036 p:0086 s:0231 b:0231 l:00226c d:00226c METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/warden-1.0.4/lib/warden/manager.rb:34\nc:0035 p:0015 s:0226 b:0226 l:000225 d:000225 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/best_standards_support.rb:17\nc:0034 p:0015 s:0219 b:0219 l:000218 d:000218 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/etag.rb:23\nc:0033 p:0068 s:0211 b:0211 l:000210 d:000210 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/conditionalget.rb:25\nc:0032 p:0093 s:0204 b:0204 l:000203 d:000203 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/head.rb:14\nc:0031 p:0046 s:0197 b:0197 l:000196 d:000196 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/params_parser.rb:21\nc:0030 p:0054 s:0192 b:0192 l:000191 d:000191 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/flash.rb:243\nc:0029 p:0031 s:0184 b:0184 l:000183 d:000183 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/session/abstract/id.rb:195\nc:0028 p:0013 s:0176 b:0176 l:000175 d:000175 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/session/abstract/id.rb:190\nc:0027 p:0020 s:0172 b:0172 l:000171 d:000171 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/cookies.rb:321\nc:0026 p:0064 s:0164 b:0164 l:000163 d:000163 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc4/lib/active_record/query_cache.rb:54\nc:0025 p:0029 s:0156 b:0156 l:000155 d:000155 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc4/lib/active_record/connection_adapters/abstract/connection_pool\nc:0024 p:0014 s:0148 b:0148 l:000478 d:000147 BLOCK  /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/callbacks.rb:29\nc:0023 p:0155 s:0146 b:0146 l:000145 d:000145 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/callbacks.rb:392\nc:0022 p:0024 s:0136 b:0136 l:000135 d:000135 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/callbacks.rb:81\nc:0021 p:0013 s:0130 b:0130 l:000478 d:000478 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/callbacks.rb:28\nc:0020 p:0027 s:0126 b:0126 l:000125 d:000125 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/reloader.rb:68\nc:0019 p:0015 s:0121 b:0121 l:000120 d:000120 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/sendfile.rb:102\nc:0018 p:0049 s:0111 b:0111 l:000110 d:000110 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/remote_ip.rb:48\nc:0017 p:0017 s:0107 b:0107 l:000106 d:000106 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/show_exceptions.rb:47\nc:0016 p:0027 s:0099 b:0099 l:000098 d:000098 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/logger.rb:13\nc:0015 p:0155 s:0095 b:0095 l:000094 d:000094 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/methodoverride.rb:24\nc:0014 p:0032 s:0089 b:0089 l:000088 d:000088 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/runtime.rb:17\nc:0013 p:0057 s:0080 b:0080 l:000079 d:000079 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache/strategy/local_cache.rb:72\nc:0012 p:0068 s:0076 b:0076 l:000075 d:000075 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/lock.rb:34\nc:0011 p:0124 s:0070 b:0070 l:000069 d:000069 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/static.rb:53\nc:0010 p:0032 s:0064 b:0064 l:000063 d:000063 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/engine.rb:438\nc:0009 p:0015 s:0060 b:0060 l:000059 d:000059 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:16\nc:0008 p:0015 s:0051 b:0051 l:000050 d:000050 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/debugger.rb:21\nc:0007 p:0015 s:0047 b:0047 l:000046 d:000046 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/log_tailer.rb:14\nc:0006 p:0356 s:0042 b:0042 l:001c60 d:001c60 METHOD /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/handler/webrick.rb:59\nc:0005 p:0257 s:0030 b:0030 l:000029 d:000029 METHOD /home/pkumar/usr/lib/ruby/1.9.1/webrick/httpserver.rb:111\nc:0004 p:0393 s:0020 b:0020 l:000019 d:000019 METHOD /home/pkumar/usr/lib/ruby/1.9.1/webrick/httpserver.rb:70\nc:0003 p:0126 s:0009 b:0009 l:000bfc d:000008 BLOCK  /home/pkumar/usr/lib/ruby/1.9.1/webrick/server.rb:183\nc:0002 p:---- s:0004 b:0004 l:000003 d:000003 FINISH\nc:0001 p:---- s:0002 b:0002 l:000001 d:000001 TOP   \n---------------------------\n-- Ruby level backtrace information ----------------------------------------\n/home/pkumar/usr/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n/home/pkumar/usr/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n/home/pkumar/usr/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/handler/webrick.rb:59:in `service'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/log_tailer.rb:14:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/debugger.rb:21:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:16:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/engine.rb:438:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/static.rb:53:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/lock.rb:34:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache/strategy/local_cache.rb:72:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/runtime.rb:17:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/methodoverride.rb:24:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/railties-3.1.0.rc4/lib/rails/rack/logger.rb:13:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/show_exceptions.rb:47:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/remote_ip.rb:48:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/sendfile.rb:102:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/reloader.rb:68:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/callbacks.rb:28:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/callbacks.rb:392:in `_run_call_callbacks'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc4/lib/active_record/connection_adapters/abstract/connection_pool.rb:448:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activerecord-3.1.0.rc4/lib/active_record/query_cache.rb:54:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/cookies.rb:321:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/session/abstract/id.rb:190:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/session/abstract/id.rb:195:in `context'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/flash.rb:243:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/params_parser.rb:21:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/head.rb:14:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/conditionalget.rb:25:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-1.3.0/lib/rack/etag.rb:23:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/middleware/best_standards_support.rb:17:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/warden-1.0.4/lib/warden/manager.rb:34:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/warden-1.0.4/lib/warden/manager.rb:34:in `catch'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/warden-1.0.4/lib/warden/manager.rb:35:in `block in call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:531:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:141:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:92:in `recognize'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:285:in `optimized_each'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/code_generation.rb:93:in `block in recognize'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/rack-mount-0.8.1/lib/rack/mount/route_set.rb:152:in `block in call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:25:in `call'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:46:in `controller'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/actionpack-3.1.0.rc4/lib/action_dispatch/routing/route_set.rb:61:in `controller_reference'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:549:in `[]'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:549:in `default'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:549:in `yield'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:527:in `block in initialize'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/inflector/methods.rb:123:in `constantize'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/inflector/methods.rb:123:in `each'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/inflector/methods.rb:124:in `block in constantize'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179:in `const_missing'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179:in `each'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:181:in `block in const_missing'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:338:in `require_or_load'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:451:in `load_file'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:639:in `new_constants_in'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:452:in `block in load_file'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:452:in `load'\n/home/pkumar/Coding/mysportcm-3.1/app/controllers/pages_controller.rb:1:in `<top (required)>'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179:in `const_missing'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:179:in `each'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:181:in `block in const_missing'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:489:in `load_missing_constant'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:338:in `require_or_load'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:451:in `load_file'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:635:in `new_constants_in'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:123:in `watch_namespaces'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:123:in `map'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/dependencies.rb:126:in `block in watch_namespaces'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86:in `local_constant_names'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86:in `map'\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/core_ext/module/introspection.rb:86:in `block in local_constant_names'\n\n*** glibc detected *** /home/pkumar/usr/bin/ruby: corrupted double-linked list: 0x0c340a70 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x6c501)[0xc94501]\n/lib/libc.so.6(+0x6c95a)[0xc9495a]\n/lib/libc.so.6(+0x6ea85)[0xc96a85]\n/lib/libc.so.6(__libc_malloc+0x63)[0xc98f33]\n/lib/libc.so.6(__backtrace_symbols+0x102)[0xd0dd82]\n/home/pkumar/usr/bin/ruby(rb_vm_bugreport+0xb7)[0x815dc07]\n/home/pkumar/usr/bin/ruby[0x819cb99]\n/home/pkumar/usr/bin/ruby(rb_bug+0x28)[0x819cc48]\n/home/pkumar/usr/bin/ruby[0x80f09f8]\n[0x78940c]\n/home/pkumar/usr/lib/ruby/gems/1.9.1/gems/therubyracer-0.9.0/ext/v8/v8.so(+0x55ea5)[0x1051ea5]\n/home/pkumar/usr/bin/ruby[0x806463e]\n/home/pkumar/usr/bin/ruby(rb_gc_finalize_deferred+0x29)[0x8064b99]\n/home/pkumar/usr/bin/ruby[0x8161b95]\n/home/pkumar/usr/bin/ruby[0x814e4f9]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_yield+0x50)[0x815bfc0]\n/home/pkumar/usr/bin/ruby[0x81739ea]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_yield+0x50)[0x815bfc0]\n/home/pkumar/usr/bin/ruby[0x81739ea]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_yield+0x50)[0x815bfc0]\n/home/pkumar/usr/bin/ruby(rb_ary_each+0x41)[0x816ceb1]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby[0x8155622]\n/home/pkumar/usr/bin/ruby(rb_funcall+0x9a)[0x8155f7a]\n/home/pkumar/usr/bin/ruby[0x8134c1e]\n/home/pkumar/usr/bin/ruby[0x814d1d4]\n/home/pkumar/usr/bin/ruby[0x814eadb]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_iseq_eval+0x135)[0x8154835]\n/home/pkumar/usr/bin/ruby[0x819f1aa]\n/home/pkumar/usr/bin/ruby[0x819f308]\n/home/pkumar/usr/bin/ruby[0x81493f5]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_yield+0x50)[0x815bfc0]\n/home/pkumar/usr/bin/ruby(rb_ary_each+0x41)[0x816ceb1]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_yield+0x50)[0x815bfc0]\n/home/pkumar/usr/bin/ruby(rb_ary_each+0x41)[0x816ceb1]\n/home/pkumar/usr/bin/ruby[0x814e331]\n/home/pkumar/usr/bin/ruby[0x815066d]\n/home/pkumar/usr/bin/ruby[0x81542fe]\n/home/pkumar/usr/bin/ruby(rb_vm_invoke_proc+0x76)[0x8156ad6]\n/home/pkumar/usr/bin/ruby[0x8061944]\n/home/pkumar/usr/bin/ruby[0x81493f5]\n/home/pkumar/usr/bin/ruby[0x8155691]\n/home/pkumar/usr/bin/ruby(rb_funcall+0x9a)[0x8155f7a]\n/home/pkumar/usr/bin/ruby[0x8069fb5]\n/home/pkumar/usr/bin/ruby[0x81493f5]\n/home/pkumar/usr/bin/ruby[0x8155691]\n======= Memory map: ========\n00110000-00112000 r-xp 00000000 00:16 56152341   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/etc.so\n00112000-00113000 r--p 00001000 00:16 56152341   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/etc.so\n00113000-00114000 rw-p 00002000 00:16 56152341   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/etc.so\n00114000-00127000 r-xp 00000000 08:08 2883788    /lib/libz.so.1.2.3.4\n00127000-00128000 r--p 00012000 08:08 2883788    /lib/libz.so.1.2.3.4\n00128000-00129000 rw-p 00013000 08:08 2883788    /lib/libz.so.1.2.3.4\n00129000-0012c000 r-xp 00000000 00:16 56152282   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/digest.so\n0012c000-0012d000 r--p 00002000 00:16 56152282   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/digest.so\n0012d000-0012e000 rw-p 00003000 00:16 56152282   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/digest.so\n0012e000-0012f000 rwxp 00000000 00:00 0 \n0012f000-00144000 r-xp 00000000 08:08 2883745    /lib/libpthread-2.12.1.so\n00144000-00145000 ---p 00015000 08:08 2883745    /lib/libpthread-2.12.1.so\n00145000-00146000 r--p 00015000 08:08 2883745    /lib/libpthread-2.12.1.so\n00146000-00147000 rw-p 00016000 08:08 2883745    /lib/libpthread-2.12.1.so\n00147000-00149000 rw-p 00000000 00:00 0 \n00149000-0016d000 r-xp 00000000 08:08 2883684    /lib/libm-2.12.1.so\n0016d000-0016e000 r--p 00023000 08:08 2883684    /lib/libm-2.12.1.so\n0016e000-0016f000 rw-p 00024000 08:08 2883684    /lib/libm-2.12.1.so\n0016f000-00189000 r-xp 00000000 00:16 56152357   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/syck.so\n00189000-0018a000 r--p 0001a000 00:16 56152357   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/syck.so\n0018a000-0018b000 rw-p 0001b000 00:16 56152357   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/syck.so\n0018b000-00197000 r-xp 00000000 00:16 56152361   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/zlib.so\n00197000-00198000 r--p 0000c000 00:16 56152361   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/zlib.so\n00198000-00199000 rw-p 0000d000 00:16 56152361   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/zlib.so\n00199000-001dc000 r-xp 00000000 00:16 56152345   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/openssl.so\n001dc000-001dd000 r--p 00042000 00:16 56152345   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/openssl.so\n001dd000-001de000 rw-p 00043000 00:16 56152345   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/openssl.so\n001de000-001df000 rw-p 00000000 00:00 0 \n001df000-001e6000 r-xp 00000000 00:16 57444089   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/sqlite3-1.3.3/lib/sqlite3/sqlite3_native.so\n001e6000-001e7000 r--p 00006000 00:16 57444089   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/sqlite3-1.3.3/lib/sqlite3/sqlite3_native.so\n001e7000-001e8000 rw-p 00007000 00:16 57444089   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/sqlite3-1.3.3/lib/sqlite3/sqlite3_native.so\n001e8000-001e9000 r-xp 00000000 00:16 56152292   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16be.so\n001e9000-001ea000 r--p 00000000 00:16 56152292   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16be.so\n001ea000-001eb000 rw-p 00001000 00:16 56152292   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16be.so\n001eb000-001f1000 r-xp 00000000 00:16 56152370   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/stringio.so\n001f1000-001f2000 r--p 00005000 00:16 56152370   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/stringio.so\n001f2000-001f3000 rw-p 00006000 00:16 56152370   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/stringio.so\n001f3000-001f7000 r-xp 00000000 00:16 57412348   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/bcrypt-ruby-2.1.4/lib/bcrypt_ext.so\n001f7000-001f8000 r--p 00003000 00:16 57412348   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/bcrypt-ruby-2.1.4/lib/bcrypt_ext.so\n001f8000-001f9000 rw-p 00004000 00:16 57412348   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/bcrypt-ruby-2.1.4/lib/bcrypt_ext.so\n001f9000-001fa000 r-xp 00000000 00:16 56152309   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16le.so\n001fa000-001fb000 r--p 00000000 00:16 56152309   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16le.so\n001fb000-001fc000 rw-p 00001000 00:16 56152309   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/enc/utf_16le.so\n001fc000-001fe000 r-xp 00000000 00:16 57442796   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/linecache19-0.5.12/lib/trace_nums19.so\n001fe000-001ff000 r--p 00001000 00:16 57442796   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/linecache19-0.5.12/lib/trace_nums19.so\n001ff000-00200000 rw-p 00002000 00:16 57442796   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/linecache19-0.5.12/lib/trace_nums19.so\n00202000-00207000 r-xp 00000000 00:16 56152358   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/strscan.so\n00207000-00208000 r--p 00004000 00:16 56152358   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/strscan.so\n00208000-00209000 rw-p 00005000 00:16 56152358   /home/pkumar/usr/lib/ruby/1.9.1/i686-linux/strscan.so\n00209000-0024d000 r-xp 00000000 08:08 2883761    /lib/libssl.so.0.9.8\n0024d000-0024e000 ---p 00044000 08:08 2883761    /lib/libssl.so.0.9.8\n0024e000-0024f000 r--p 00044000 08:08 2883761    /lib/libssl.so.0.9.8\n0024f000-00252000 rw-p 00045000 08:08 2883761    /lib/libssl.so.0.9.8\n00252000-00331000 r-xp 00000000 08:08 1193133    /usr/lib/libstdc++.so.6.0.14\n00331000-00335000 r--p 000de000 08:08 1193133    /usr/lib/libstdc++.so.6.0.14\n00335000-00336000 rw-p 000e2000 08:08 1193133    /usr/lib/libstdc++.so.6.0.14\n00336000-0033d000 rw-p 00000000 00:00 0 \n0033d000-003bd000 r-xp 00000000 00:16 55920967   /home/pkumar/usr/lib/libsqlite3.so.0.8.6\n003bd000-003be000 r--p 0007f000 00:16 55920967   /home/pkumar/usr/lib/libsqlite3.so.0.8.6\n003be000-003bf000 rw-p 00080000 00:16 55920967   /home/pkumar/usr/lib/libsqlite3.so.0.8.6\n003bf000-003c0000 rw-p 00000000 00:00 0 \n003c0000-003c8000 r-xp 00000000 00:16 57428829   /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/json-1.5.1/ext/json/ext/json/ext/generator.soAborted\n```\n", "labels": [], "number": 1667, "updated_at": "2011-06-13 20:38:43", "user": 174703, "closed_at": "2011-06-13 12:44:44", "id": 1046122, "title": "Segmentation fault", "url": "https://api.github.com/repos/rails/rails/issues/1667", "created_at": "2011-06-12 17:13:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356171", "text": "I'm having the same issue.  It happens randomly as I browse my app. Same ruby and rails versions.\n", "created_at": "2011-06-12 21:21:03", "user": 816259, "id": 1356171}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356245", "text": "I'm getting this too, right after I had updated to rc4. \n", "created_at": "2011-06-12 21:41:25", "user": 455623, "id": 1356245}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356968", "text": "Can you try using nodejs?\n\nSeems like an issue in therubyracer gem\n /home/pkumar/usr/lib/ruby/gems/1.9.1/gems/therubyracer-0.9.0/ext/v8/v8.so(+0x55ea5)[0x1051ea5]\n", "created_at": "2011-06-13 03:16:42", "user": 52642, "id": 1356968}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356973", "text": "Try using old version of therubyracer:\n\n``` ruby\ngem 'therubyracer', '0.8.2'\n```\n\n@cowboyd can you check this?\n", "created_at": "2011-06-13 03:21:49", "user": 160941, "id": 1356973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357198", "text": "This looks like [/cowboyd/therubyracer/issues/79](/cowboyd/therubyracer/issues/79) the problem crops up when using a multithreaded webserver, and the sporadic crashes occur when a GC runs that frees V8 object in a thread that doesn't have the v8 lock. \n\nAt the moment, I am working on making therubyracer's GC routines play nice with multiple threads. \n\nIt may help to downgrade to 0.8.2 but this probably  because we fixed several memory leaks with 0.9 that now run afoul of multithreading because it's actually freeing more objects. In any case, we'll get a fix out as soon as we can.\n", "created_at": "2011-06-13 05:31:47", "user": 4205, "id": 1357198}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1359552", "text": "Thanks! I switched to 0.8.2 and my issues disappeared.\n", "created_at": "2011-06-13 15:27:52", "user": 816259, "id": 1359552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361670", "text": "For those curious, I've done a write up of the issue here:\nhttp://blog.thefrontside.net/2011/06/13/therubyracer-isnt-threadsafe-yet/\n", "created_at": "2011-06-13 20:38:43", "user": 4205, "id": 1361670}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Changed http://rubyonrails.com to http://rubyonrails.org in changelog and other files.\n/cc @josevalim removed other commits\n", "labels": [], "number": 1668, "updated_at": "2014-06-29 03:25:37", "user": 59360, "closed_at": "2011-06-12 17:45:16", "id": 1046126, "title": "Changed http://rubyonrails.com to http://rubyonrails.org in plugin.rb and other files.", "url": "https://api.github.com/repos/rails/rails/issues/1668", "created_at": "2011-06-12 17:15:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355501", "text": "@bagwanpankaj These links are not working any more. I think don't need to change them in CHANGELOG. \n", "created_at": "2011-06-12 17:33:48", "user": 779796, "id": 1355501}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1355526", "text": "The CHANGELOG entries should be left as they are as they're historical entries, however there's merit in updating the error message in dependencies.rb and the example in plugin.rb. However it needs to be a relevant url for dependencies.rb and the svn example in plugin.rb needs to be obviously fake. Create a new pull request with just these changes and I'll merge it.\n", "created_at": "2011-06-12 17:45:16", "user": 6321, "id": 1355526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356782", "text": "Okay @pixeltrix I'll do that.\n", "created_at": "2011-06-13 01:42:13", "user": 59360, "id": 1356782}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If a contorller is generated within a namespace using the generator the scss is invalid.\n\nrails g controller site/welcome\n\nWill generate welcome.css.scss in the site directory with the following invalid scss:\n\nbody.site/welcome {\n  // Place scoped styles here\n}\n", "labels": [], "number": 1669, "updated_at": "2011-07-11 21:26:25", "user": 9927, "closed_at": "2011-07-11 21:26:25", "id": 1046932, "title": "Namespace controllers generate invalid scss", "url": "https://api.github.com/repos/rails/rails/issues/1669", "created_at": "2011-06-12 23:21:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1385721", "text": "Pull request here: https://github.com/rails/sass-rails/pull/8\n", "created_at": "2011-06-17 02:45:25", "user": 31945, "id": 1385721}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Under thin, QueryCache is leaking connections.\n\nThis is caused by the fact that the thread that runs the `QueryCache::BodyProxy#close` method is not the same as the thread that executes `QueryCache#call`.  A connection is checked out within `QueryCache#call`; this connection becomes orphaned, while a new connection is checked out within `#close` when the`clear_query_cache` call is made.\n\nThis patch prevents the connection checked out within `QueryCache#call` from being orphaned by creating an identifier that is stored within a thread local and used within `ConnectionPool` to uniquely identify the connection.  This identifier is passed to `BodyProxy` at construction time and pushed into the thread that ultimately becomes responsible for the `clear_query_cache` call.\n\nThe connection is subsequently checked back in as expected at the end of the request lifecycle, plugging the leak.\n", "labels": [], "number": 1670, "updated_at": "2014-06-12 05:54:38", "user": 206834, "closed_at": "2011-10-07 09:02:55", "id": 1047185, "title": "QueryCache/ConnectionPool thread fix", "url": "https://api.github.com/repos/rails/rails/issues/1670", "created_at": "2011-06-13 01:37:21", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2312704", "text": "Thanks for patching this. Hopefully someday this will be merged into 3.1.something and I can run multi-threaded apps under Thin again. It's killing me.\n", "created_at": "2011-10-06 17:38:26", "user": 81826, "id": 2312704}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2313100", "text": "Hey @mjtko can you rebase your patch?\n", "created_at": "2011-10-06 18:11:13", "user": 52642, "id": 2313100}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2313473", "text": "Hi,\n\nDoubt this will make it into core... It's not exactly a pleasant our elegant hack! :-) \n\nPerhaps a monkey patch gem of some kind for thin though?\n\nPS. Personally, I'm using Rainbows! and DataMapper these days. :-) \n\nCheers,\n\nMark.\n\n## [Sent from a mobile device; please excuse my brevity and top reply.]\n\nMark J. Titorenko\n\nJordan Hollinger reply@reply.github.com wrote:\n\nThanks for patching this. Hopefully someday this will be merged into 3.1.something and I can run multi-threaded apps under Thin again. It's killing me.\n\n## \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rails/rails/pull/1670#issuecomment-2312704\n", "created_at": "2011-10-06 18:45:17", "user": 206834, "id": 2313473}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2313974", "text": "I don't know, I'm sure there's worse code in Rails :-)\n\nI suppose the question is \"has Thin been doing things wrong all along, and it just now became obvious?\", in which case Thin should be patched, or \"has Rails 3.1 accidentally broken a sane expectation held by Thin?\", in which case Rails should be patched. Honestly I don't have enough knowledge of either code base to hazard a guess.\n", "created_at": "2011-10-06 19:29:28", "user": 81826, "id": 2313974}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2316011", "text": "@spastorino I'll rebase it tomorrow (Europe), though, personally, I think this should wait until after 3.1.1 so, even though I'll rebase it against 3-1-stable, I'd wait until after 3.1.1 is out of the door before pulling.  Up to you to decide of course! :)\n\n@jhollinger This has always been the case when running Rails in threadsafe mode under Thin (AFAICS) and, while from my POV Thin is doing the right thing, Rails has been making an assumption about the threading model within a rack server - I would expect Rainbows! with the event machine concurrency model to suffer the same problem.\n\nIn short, my belief is that active record should be patched to support this use case.\n", "created_at": "2011-10-06 22:49:56", "user": 206834, "id": 2316011}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2316737", "text": "@mjtko don't worry this is not going in 3.1.1. Btw please rebase it on top of master, we will merge in 3-1-stable. Thanks.\n", "created_at": "2011-10-07 00:29:45", "user": 52642, "id": 2316737}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2319345", "text": "Argh, I've totally messed this branch up trying to rebase it!  Rather than trying to unpick the mess I'll open a new pull request against master. :)\n", "created_at": "2011-10-07 09:02:55", "user": 206834, "id": 2319345}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2319376", "text": "@spastorino Opened against master as #3243.  Sorry for the confusion. :-)\n", "created_at": "2011-10-07 09:08:23", "user": 206834, "id": 2319376}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2319672", "text": "+1\n\nvery annoying issue\n", "created_at": "2011-10-07 09:50:02", "user": 23721, "id": 2319672}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As linecache updated to 0.45. It breaks the build for 1.8.7. \n\nThey have added \n\n<pre>\nrequire 'require_relative'\nrequire_relative 'tracelines'\nrequire_relative 'version'\n</pre>\n\n\nSo the build gets failed with this version. May be we can create a issue with them to fix it in new version. But right now to run the Build with 1.8.7 we need to load linecache 0.43\n", "labels": [], "number": 1671, "updated_at": "2014-06-28 21:33:34", "user": 3948, "closed_at": "2011-06-14 11:35:30", "id": 1047191, "title": "Using linecache 0.43 for 1.8 build. ", "url": "https://api.github.com/repos/rails/rails/issues/1671", "created_at": "2011-06-13 01:41:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1356911", "text": "Whooo....!! I was thinking for the same the build is broken because of linecache update. \n", "created_at": "2011-06-13 02:51:12", "user": 779796, "id": 1356911}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357457", "text": "Adding backtrace\n\n<pre>\n  1) Error:\ntest_assets_routes_have_higher_priority(ApplicationTests::RoutingTest):\nActiveSupport::Testing::RemoteError: caught LoadError: no such file to load -- require_relative\n    /Users/arun/checkouts/rails/bundle/ruby/1.8/gems/linecache-0.45/lib/linecache.rb:66:in `require'\n    /Users/arun/checkouts/rails/bundle/ruby/1.8/gems/linecache-0.45/lib/linecache.rb:66\n    /Users/arun/checkouts/rails/bundle/ruby/1.8/gems/ruby-debug-base-0.10.4/lib/ruby-debug-base.rb:3:in `require'\n    /Users/arun/checkouts/rails/bundle/ruby/1.8/gems/ruby-debug-base-0.10.4/lib/ruby-debug-base.rb:3\n    /Users/arun/checkouts/rails/bundle/ruby/1.8/gems/ruby-debug-0.10.4/cli/ruby-debug.rb:5:in `require'\n\n</pre>\n", "created_at": "2011-06-13 07:34:27", "user": 3948, "id": 1357457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1359180", "text": "+1\n", "created_at": "2011-06-13 14:33:43", "user": 151907, "id": 1359180}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360147", "text": "Thanks for posting this, I ran into the same problem a few minutes ago.\n", "created_at": "2011-06-13 16:47:36", "user": 285648, "id": 1360147}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363294", "text": "Closing this as it's fixed by another way here \n\nhttps://github.com/rails/rails/commit/954359b9c260f0e1265237c20bb3e4834a11fb9a\n", "created_at": "2011-06-14 02:11:39", "user": 3948, "id": 1363294}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364288", "text": "How are people expected to keep using ruby debug without using rails 3.1 from master ? \n", "created_at": "2011-06-14 07:25:51", "user": 271047, "id": 1364288}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This changes the `plugin new --mountable` generator so it places javascript/stylesheet/image engine assets in their own namespaced directory so they don't conflict with those in the main app. Instead of `app/assets/javascripts/application.js` it places it in `app/assets/javascripts/ENGINE_NAME/application.js`. It also changes the `application.html.erb` layout file to use the new path.\n", "labels": [], "number": 1672, "updated_at": "2014-07-03 04:55:46", "user": 161, "closed_at": "2011-06-13 07:45:41", "id": 1047194, "title": "Namespace engine assets", "url": "https://api.github.com/repos/rails/rails/issues/1672", "created_at": "2011-06-13 01:44:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357247", "text": "Hey @ryanb, thanks for the patch! Shouldn't the layout file be namespaced as well to avoid conflicts? Otherwise the one in the app will have higher preference.\n", "created_at": "2011-06-13 06:01:21", "user": 9582, "id": 1357247}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357463", "text": "I believe the layout file is already namespaced. It is generated under `app/views/layouts/ENGINE_NAME/application.html.erb`.\n\nOn a similar note, it would be nice if there was some way to set the asset prefix at the engine config level just like we do with `isolate_namespace`. Then if we have `<%= image_tag \"foo.png\" %>` it would expand to `/assets/ENGINE_NAME/foo.png`. It looks like there's a `config.assets.prefix` setting in Rails itself, but it doesn't look like this is exposed to the engine railtie.\n", "created_at": "2011-06-13 07:39:45", "user": 161, "id": 1357463}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357482", "text": "@ryanb: right, my bad about the layout. and yes, image_tag should work transparently, this is how it works without sprockets but it seems it was not added to sprockets itself. :(\n", "created_at": "2011-06-13 07:45:21", "user": 9582, "id": 1357482}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Using Rails 3.1 RC4.\n\nMy User model has the following:\n\n```\n  has_many :emails, :dependent => :destroy\n  accepts_nested_attributes_for :emails\n```\n\nMy Email model has the following:\n\n```\n  belongs_to :user\n  attr_accessible :email, :email_confirmation, :as => :admin\n```\n\nIn Rails console:\n\n```\nUser.first.update_attributes!({:artist_name => 'foo', :emails_attributes => {0 => {:email => 'foo@blah.com', :email_confirmation => 'foo@foo.com'}}}, :as => :admin)\n```\n\nI get:\n\n```\nWARNING: Can't mass-assign protected attributes: email, email_confirmation\n```\n\nIn my Email model, if I remove `:as => :admin`. Everything works...\n\nShould I be assigning some kind of scope to `accepts_nested_attributes_for`? Anyone know how this can be fixed?\n", "labels": [], "number": 1673, "updated_at": "2012-07-05 06:02:59", "user": 390072, "closed_at": "2011-06-13 12:25:25", "id": 1047621, "title": "Scoped mass assignment and accepts_nested_attributes_for in Rails 3.1 RC4 not working", "url": "https://api.github.com/repos/rails/rails/issues/1673", "created_at": "2011-06-13 06:08:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357748", "text": "No, `accepts_nested_attributes_for` should not have a scope - it should be passing the options hash to the nested models which it doesn't at the moment.\n", "created_at": "2011-06-13 09:07:55", "user": 6321, "id": 1357748}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358284", "text": "What options hash? \n\n```\nhttp://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for\n```\n\nDoes not mention an option anywhere. Could  you give me an example?\n", "created_at": "2011-06-13 11:24:21", "user": 390072, "id": 1358284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358354", "text": "This [options hash](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb#L1705) is not passed [here](https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb#L1721). I have a fix written just waiting on a code review.\n", "created_at": "2011-06-13 11:45:02", "user": 6321, "id": 1358354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361016", "text": "Thanks for that.\n", "created_at": "2011-06-13 18:55:17", "user": 390072, "id": 1361016}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6754529", "text": "Am I correct that this has not made it into any 3.1.x releases?\n", "created_at": "2012-07-04 07:46:53", "user": 146192, "id": 6754529}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6756688", "text": "It's been in since 3.1.5.rc5: https://github.com/rails/rails/commits/v3.1.0.rc5/activerecord/lib/active_record/nested_attributes.rb\n", "created_at": "2012-07-04 09:51:11", "user": 6321, "id": 6756688}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6771970", "text": "Apologies, the `base.rb` modifications were missing, and I didn't check the others.  Working as expected in 3.1.6, thanks for the reply.\n", "created_at": "2012-07-05 06:02:59", "user": 146192, "id": 6771970}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Only verified it for sqlite3\n\n```\n $ ls db/\n migrate\n$ rake db:create\n$ ls db/\ndevelopment.sql  migrate  test.sql\n\n#config/database.yml\n development:\n  adapter: sqlite3\n  database: db/development.sql\ntest:\n  adapter: sqlite3\n  database: db/test.sql\n```\n\nit should only create db/development.sql in this case\n", "labels": [], "number": 1674, "updated_at": "2011-07-11 21:24:27", "user": 11367, "closed_at": "2011-07-11 21:24:27", "id": 1047631, "title": "rake db:create creates all databases", "url": "https://api.github.com/repos/rails/rails/issues/1674", "created_at": "2011-06-13 06:12:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357481", "text": "Did not happen for me. I tried edge rails.\n", "created_at": "2011-06-13 07:45:16", "user": 6399, "id": 1357481}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358296", "text": "Actually, it should. That's the intended behaviour - to create all 'local' databases listed in database.yml. See https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railties/databases.rake#L16 \n", "created_at": "2011-06-13 11:27:28", "user": 146214, "id": 1358296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358802", "text": "ok, so the intended behavior is to create whatever database is requested, and if we are currently in development and test is configured also to create test.\nKind of strange, maybe document it \"(also creates test db if in development)\" or just remove the additional logic...\n", "created_at": "2011-06-13 13:27:29", "user": 11367, "id": 1358802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1374645", "text": "It should create all local -- which is defined as any with a host of localhost/127.0.0.1 or no host.\n\n```\nconfig['host'].in?(['127.0.0.1', 'localhost']) || config['host'].blank?\n```\n", "created_at": "2011-06-15 15:54:35", "user": 44939, "id": 1374645}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Only emit deprecation warning if there´s a Hash object under the keys \"activerecord.models\" and \"activerecord.attributes\". See issue #1662\n", "labels": [], "number": 1675, "updated_at": "2014-07-03 04:55:55", "user": 202410, "closed_at": "2011-06-13 08:17:36", "id": 1048049, "title": "Fix for startup problems due to deprecation warning on nested models", "url": "https://api.github.com/repos/rails/rails/issues/1675", "created_at": "2011-06-13 08:15:17", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1676, "updated_at": "2014-06-26 18:05:44", "user": 6399, "closed_at": "2011-06-13 12:49:13", "id": 1048098, "title": "Remove \"is_assed\" with something more meaningful", "url": "https://api.github.com/repos/rails/rails/issues/1676", "created_at": "2011-06-13 08:35:51", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1357758", "text": "consider using is_arsed\n", "created_at": "2011-06-13 09:10:31", "user": 1188, "id": 1357758}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Consider the following class:\n\n<pre>\nclass Myclass &lt; ActionController::Metal\n  def myaction\n    huge_object.do_something\n    # etc.\n  end\n\n  private\n  def huge_object\n    @obj ||= begin\n      # allocate and initialize a ~10MB object\n    end\n  end\nend\n</pre>\n\n\nWhat I was amazed to find, is that even in production, each time the myaction is called, the object is allocated. Moreover, something is holding a reference to it, as the GC doesn't collect it. I made a workaround by wrapping the object in other class and including Singleton in that class. Still, I want to understand, what's going on here.\n", "labels": [], "number": 1677, "updated_at": "2011-06-14 08:12:42", "user": 49660, "closed_at": "2011-06-14 08:12:42", "id": 1048315, "title": "Memory leak in ActionController::Metal (3.0.7)", "url": "https://api.github.com/repos/rails/rails/issues/1677", "created_at": "2011-06-13 09:57:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358066", "text": "Controller instances are not persistent across requests, you get a new controller instance per request. That's why ivars in a request do not pollute ivars in subsequent requests.\n\nThat explains at least why triggering myaction results in a new huge object being allocated even in production mode.\n\nWhy the huge object is not gc'ed is a different issue. Can you please provide a minimal app reproducing the problem?\n", "created_at": "2011-06-13 10:30:25", "user": 3387, "id": 1358066}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358108", "text": "I was under the impression that Metals are converted to Rack app, and persistent, and a #call is used on this instance from now on, I'm probably mistaken. Nevertheless, something is holding a reference.\nThis is, in fact, a minimal app reproducing the problem. Just create a big object with 'X'_1024_1024*10.\n", "created_at": "2011-06-13 10:39:37", "user": 49660, "id": 1358108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1359673", "text": "On line 167 in action_controller/metal.rb it says:\n    # Return a rack endpoint for the given action. Memoize the endpoint, so\n    # multiple calls into MyController.action will return the same object\n    # for the same action.\n\nSo either the documentation is incorrect, or the code. So, perhaps, it's two bugs. One is for memoization, and other is for references which are being hold by some objects, creating a memory bloat.\n", "created_at": "2011-06-13 15:45:59", "user": 49660, "id": 1359673}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361434", "text": "The rack endpoint returned from `MyController.action(name)` is certainly memoized. But the memoized rack endpoint creates a new instance of the controller class on each `call`. So both the documentation and the code are correct.\n\nIf you need to keep your 10MB around in memory between requests, you will need to figure out a separate way to do it. You cannot use controller instance variables for this, as each controller instance is used for only one request and is then disposed of.\n", "created_at": "2011-06-13 20:02:45", "user": 169419, "id": 1361434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361489", "text": "Exactly, that is the way it works. I cannot reproduce the leak, eventually the garbage collector runs and memory usage drops.\n\nDo you think we can close the ticket?\n", "created_at": "2011-06-13 20:11:36", "user": 3387, "id": 1361489}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361831", "text": "It's weird. I'm using ruby 1.9.2, and the GC never sweeps this object. It just adds up. I wonder if something else is causing this. Any idea what might be the culprit?\n", "created_at": "2011-06-13 20:59:51", "user": 49660, "id": 1361831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361855", "text": "> the GC never sweeps this object\n\nHow did you test this? Do you have a script that tests this?\n", "created_at": "2011-06-13 21:04:48", "user": 169419, "id": 1361855}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1361907", "text": "I did GC.start\n", "created_at": "2011-06-13 21:12:50", "user": 49660, "id": 1361907}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1362048", "text": "I am running\n\n``` ruby\nclass LeakController < ActionController::Metal\n  include ActionController::Rendering\n\n  def index\n    create_huge_object\n    render :text => \"Hey!\\n\"\n  end\n\n  def create_huge_object\n    puts \"creating huge object\"\n    @x ||= begin\n      'X'*1024*1024*10\n    end\n  end\nend\n```\n\nin production mode with a loop in a shell\n\n```\nperl -e 'while () { system \"curl http://localhost:3000/\"; sleep 1}'\n```\n\nMemory usage is around 54M in this mac using 1.9.2.\n", "created_at": "2011-06-13 21:28:14", "user": 3387, "id": 1362048}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1362380", "text": "Hmm.. possibly something special in my setup then. BTW, I didn't include Rendering module, I was using self.response_body=.  Well, if it doesn't reproduce, please close the bug. And sorry for the hassle.\n", "created_at": "2011-06-13 22:28:27", "user": 49660, "id": 1362380}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364484", "text": "Tried also self.response_body= without reproducing. Please if you ever reproduce it again feel free to reopen. Thanks.\n", "created_at": "2011-06-14 08:12:42", "user": 3387, "id": 1364484}], "assignees": [3387, 3387], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hey guys,\n\nI've got a little feature request for you. The current `assert_template` output looks kinda like that (Rails 3.0.8)\n\n```\nFailure/Error: response.should render_template('pages/422')\nExpected block to return true value.\n```\n\nAnd what would be cool if the output actually said which template was rendered instead of the expected one, say like that\n\n```\nFailure/Error: response.should render_template('pages/422')\nExpected to render 'pages/422' but rendered 'sessions/new' instead\n```\n\nSame thing with the `assert_redirect_to` checks.\n\nThat could help finding out what went wrong in a controller.\n## \n\nThanks,\nNikolay\n", "labels": [], "number": 1678, "updated_at": "2011-07-11 06:45:24", "user": 14523, "closed_at": "2011-07-11 06:45:24", "id": 1048881, "title": "Better assert_template output", "url": "https://api.github.com/repos/rails/rails/issues/1678", "created_at": "2011-06-13 12:40:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1358631", "text": "regarding the `rspec` notation in the examples, the ticket is originated from over there https://github.com/rspec/rspec-rails/issues/394\n", "created_at": "2011-06-13 12:52:08", "user": 14523, "id": 1358631}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1543990", "text": "Can you provide a patch with tests for it?\n", "created_at": "2011-07-11 02:14:59", "user": 52642, "id": 1543990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544567", "text": "I can give it a try\n", "created_at": "2011-07-11 06:20:27", "user": 14523, "id": 1544567}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544618", "text": "Just double checked the issue, it seems that it was already fixed. Sorry for bothering\n", "created_at": "2011-07-11 06:45:24", "user": 14523, "id": 1544618}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Changed http://rubyonrails.com to http://rubyonrails.org in dependencies.rb and other files.\n\n/cc @pixeltrix\n", "labels": [], "number": 1679, "updated_at": "2014-07-03 04:56:05", "user": 59360, "closed_at": "2011-06-13 17:16:21", "id": 1049768, "title": "Changed http://rubyonrails.com to http://rubyonrails.org in dependencies.rb and other files.", "url": "https://api.github.com/repos/rails/rails/issues/1679", "created_at": "2011-06-13 15:43:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1359918", "text": "This code is already commited #26ecd62, It will create conflicts...\n", "created_at": "2011-06-13 16:21:00", "user": 160764, "id": 1359918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360001", "text": "@ganeshkumar I don't know what you are talking about but i don't see any commits regarding this. Since this issue is under conversation since last three days.\n", "created_at": "2011-06-13 16:30:43", "user": 59360, "id": 1360001}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360019", "text": "this commit \"Merge branch 'master' of git://github.com/rails/rails\" its a merged commit. if you want full clarification see commits history.\n", "created_at": "2011-06-13 16:32:40", "user": 160764, "id": 1360019}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360078", "text": "This is local merge of my repo. and there is no file changes regarding this. Merge 26ecd62 is one hour old and real commit e31ae11 is about 14 hour old. These changes are still to be merged into rails/rails\n", "created_at": "2011-06-13 16:39:51", "user": 59360, "id": 1360078}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360260", "text": "yes dude i understand. In future please avoid this merge commit in pull request. \n", "created_at": "2011-06-13 17:03:05", "user": 160764, "id": 1360260}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360287", "text": "The merge with rails/rails is not for you to do. Doing it inside of your repository means that to pull this in now they need to merge your original commit and your merge commit.\n", "created_at": "2011-06-13 17:06:20", "user": 294954, "id": 1360287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1360355", "text": "Sorry, I can't merge this pull request with the attached merge commit. Having reviewed the first commit the example you're changing relates to a chunk of code which should really be pulled - it was added for backwards compatibility with Rails 0.13 environment.rb files and is no longer relevant, so the whole module needs removing. As for the plugin change it doesn't matter since rubyonrails.com redirects to rubyonrails.org and the svn repository is no longer there anyway.\n", "created_at": "2011-06-13 17:16:21", "user": 6321, "id": 1360355}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi \nI am currently using rails 3.1.0.rc1 and when i deploy it to a server which is using passenger and it is deployed to a suburi.\n\nBut when I go into look at the site, style-sheets and java-script files are not being included because of the path.\n\nis there any configuration missing to specify the sub-uri inside the environment?\n\nExample:\nmyapp1.com => points to the myapp1\nmyapp1.com/myapp2 => points to the myapp2\n\nBut in myapp2 when include my stylesheets with <%= stylesheet_link_tag \"application\"%> and when i inspect the html in firebug it says:\n <h1>Routing Error</h1>\n\n<p><pre>No route matches [GET] &quot;/assets/application.css&quot;</pre></p> \n\n\nand loads the page without any css and javascript.\n\nFYI: I tried   ' config.assets.prefix = \"/myapp2\" '  and ' config.relative_url_root = \"/myapp2\" ' inside environment/staging.rb file\n", "labels": [], "number": 1680, "updated_at": "2011-06-14 15:23:01", "user": 202736, "closed_at": "2011-06-14 15:23:01", "id": 1050228, "title": "Issue with assets path when deploying to suburi", "url": "https://api.github.com/repos/rails/rails/issues/1680", "created_at": "2011-06-13 17:19:25", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366735", "text": "It was fixed on Rails 3.1.0.rc4. No need to specify anything unless you want to change the default /assets \n", "created_at": "2011-06-14 15:23:01", "user": 202736, "id": 1366735}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "When running a model with the following code:\n\n```\nacts_as_list :scope => proc { [\"ancestry = '?'\", ancestry] }\n```\n\nA query fires in console as:\n\n```\nSELECT `pages`.* FROM `pages` WHERE (#<Proc:0x0000000476a850@/.../app/models/page.rb:10>)...\n```\n\nHowever, when I run the old interpolated string style:\n\n```\nacts_as_list :scope => 'ancestry = \\'#{ancestry}\\''\n```\n\nThe query fires appropriately.  Using rails 3.1.0.rc4, ruby1.9.3dev\n", "labels": [], "number": 1681, "updated_at": "2011-06-14 15:30:14", "user": 287640, "closed_at": "2011-06-14 15:30:14", "id": 1050853, "title": "proc not being evaluated on association conditions", "url": "https://api.github.com/repos/rails/rails/issues/1681", "created_at": "2011-06-13 19:16:37", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364015", "text": "Are you using the old acts_as_list plugin?\n", "created_at": "2011-06-14 05:51:46", "user": 6321, "id": 1364015}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366795", "text": "yep, looked into it and the eval() is called in acts_as_list, my bad ><\n\ncheers!\n", "created_at": "2011-06-14 15:30:14", "user": 287640, "id": 1366795}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've run into an issue in Rails 3.1 RC4 where the count query is failing because of a default_scope.  The scope has an include and a condition on the included association but count is dropping the include.  This had previously worked in Rails < 3.1. Here's an example -\n\n``` ruby\nclass Fund < ActiveRecord::Base\n  has_many :campaigns\n  default_scope where('campaigns.inactive = ?', false).order('funds.name').includes(:campaigns)\nend\n\nclass Campaign < ActiveRecord::Base\n  belongs_to :fund\nend\n```\n\nLoading development environment (Rails 3.1.0.rc4)\nruby-1.9.2-p180 :001 > Fund.count\n   (0.1ms)  SELECT COUNT(_) FROM \"funds\" WHERE (campaigns.inactive = 'f')\nSQLite3::SQLException: no such column: campaigns.inactive: SELECT COUNT(_) FROM \"funds\"  WHERE (campaigns.inactive = 'f')\nActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: campaigns.inactive: SELECT COUNT(*) FROM \"funds\"  WHERE (campaigns.inactive = 'f')\n\nLoading development environment (Rails 3.0.8)\nruby-1.9.2-p180 :006 > Fund.count\n => 1\n\nSQL (0.2ms)  SELECT COUNT(DISTINCT \"funds\".\"id\") FROM \"funds\" LEFT OUTER JOIN \"campaigns\" ON \"campaigns\".\"fund_id\" = \"funds\".\"id\" WHERE (campaigns.inactive = 'f')\n", "labels": [], "number": 1682, "updated_at": "2011-06-23 19:05:20", "user": 314096, "closed_at": "2011-06-23 19:05:19", "id": 1051247, "title": "Rails 3.1 RC4 default_scope and count", "url": "https://api.github.com/repos/rails/rails/issues/1682", "created_at": "2011-06-13 20:32:26", "comments": [], "assignees": [1979, 1979], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "request.fullpath in Rails 3.0.7 returned the full path of the URL, for example \"/path/to/my/list.html\".\nIn 3.1RC4 it only returns \"/path/to/my/list\". Is that a bug or is there a replacement available for the old behaviour?\n", "labels": [], "number": 1683, "updated_at": "2011-06-15 10:16:40", "user": 8512, "closed_at": "2011-06-15 05:57:35", "id": 1051861, "title": "Rails 3.1RC4 request.fullpath doesn't reflect format", "url": "https://api.github.com/repos/rails/rails/issues/1683", "created_at": "2011-06-13 22:18:47", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363860", "text": "The code for `request.fullpath` just delegates to Rack’s version of the method which doesn't appear to have changed. It is dependent on the PATH_INFO environment variable so check what's in there and see whether that includes the format.\n", "created_at": "2011-06-14 04:58:56", "user": 6321, "id": 1363860}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364229", "text": "It works well in 3.1RC4 here.\n", "created_at": "2011-06-14 07:08:13", "user": 9347, "id": 1364229}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371480", "text": "Suspect this is a server issue since it's dependent on the PATH_INFO environment variable.\n", "created_at": "2011-06-15 05:57:35", "user": 6321, "id": 1371480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372583", "text": "yes, it works correctly on three other machines. trying to find out why that causes the issue on that particular one.\nthanks everyone.\n", "created_at": "2011-06-15 10:16:40", "user": 8512, "id": 1372583}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "If I define my unit tests declaratively and use characters that are not alphanumeric, the Declarative module tries to generate a test method with an invalid name.  For example:\n\ntest \"method's return value\" do\n   # something\nend\n\nGenerates a test method called \"s_return_value\". This sucks when the tests run (especially in an IDE) because the test name displayed doesn't make any sense.  It also leads to some tricky bugs.  If I have another test method in the same suite like this:\n\ntest \"other method's return value\" do\n   # something\nend\n\nThe Declarative module has now blown away the first test method without telling me.  Gross.\n\nThis change MIME-encodes any nonprintable characters in the test method name, avoiding this issue.\n", "labels": [], "number": 1684, "updated_at": "2014-07-03 04:56:16", "user": 62440, "closed_at": "2011-06-14 04:44:41", "id": 1052192, "title": "Fix problem with tests declared with nonalphanumeric characters in their name", "url": "https://api.github.com/repos/rails/rails/issues/1684", "created_at": "2011-06-13 23:34:20", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363813", "text": "Firstly I'm pretty sure that Declarative would raise on a duplicate test name and secondly why not use parameterize and underscore?\n\n``` ruby\n>> \"method's return value\".parameterize.underscore\n=> \"method_s_return_value\"\n```\n\nAlso you would need to write some tests.\n", "created_at": "2011-06-14 04:44:41", "user": 6321, "id": 1363813}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\nclass ApplicationController < ActionController::Base\n  protect_from_forgery\n  layout Proc.new { |controller| controller.request.xhr? ? 'ajax' : 'application' }\nend\n\nclass StoresController < ApplicationController\n  def search\n  end\nend\n```\n\nWhen the search action is called through Ajax (passing the proper X-Requested-With:XMLHttpRequest header) only the 'application' layout will be rendered along with the view.\n\nOn the other side if we copy/move the layout declaration in StoresController it works.\n", "labels": [], "number": 1685, "updated_at": "2011-06-19 07:02:04", "user": 12844, "closed_at": "2011-06-19 07:02:04", "id": 1052205, "title": "[3.1-stable] layout directive not working with controller inheritance", "url": "https://api.github.com/repos/rails/rails/issues/1685", "created_at": "2011-06-13 23:37:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394596", "text": "These [tests](https://gist.github.com/1032704) pass on 3-1-stable, can you give more information?\n", "created_at": "2011-06-18 20:56:59", "user": 389480, "id": 1394596}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395437", "text": "I tried with a quick rspec 2 test: https://gist.github.com/1033747\n", "created_at": "2011-06-19 04:05:39", "user": 12844, "id": 1395437}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395624", "text": "I narrowed down the problem, it has something to do with the pjax_rails gem, closing.\nhttps://github.com/masterkain/pjax_rails/blob/master/lib/pjax.rb#L5\n\nThanks @raviolicode for chiming in.\n", "created_at": "2011-06-19 07:02:04", "user": 12844, "id": 1395624}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This is a patch for https://github.com/rails/rails/issues/815\n\nGiven:\nclass Tree < ActiveRecord::Base\nhas_many :birds\nend\n\nclass Bird < ActiveRecord::Base; end\nclass Robin < Bird; end\n\nTree.birds.create(:type => \"Robin\") will create a robin.\n", "labels": [], "number": 1686, "updated_at": "2014-06-25 14:24:38", "user": 212750, "closed_at": "2011-06-14 04:21:14", "id": 1052574, "title": "Allow STI building on has_many associations", "url": "https://api.github.com/repos/rails/rails/issues/1686", "created_at": "2011-06-14 01:40:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363753", "text": "Firstly if we were going to merge this we'd need support for polymorphic belongs_to and has_one as well. However it could be seen as a security flaw because an end user could manipulate the form sent back to create any object they wanted, e.g:\n\n``` ruby\n@tree.birds.create(:type => 'Administrator', ...)\n```\n\nYou'd need to validate the class is a subclass of the original at a minimum but you might still have problems where the subclass has elevated privileges. What I do is to override `new` in a class where I want to do something like this:\n\n``` ruby\nclass Page < ActiveRecord::Base\n  class << self\n    def new(attributes = {}, options = {}, &block)\n      page_type = attributes.delete(:page_type)\n      return super if page_type.blank?\n\n      klass_name = \"#{page_type.to_s.camelize}Page\"\n      if Object.const_defined?(klass_name)\n        klass = Object.const_get(klass_name)\n      else\n        begin\n          klass = Object.const_missing(klass_name)\n        rescue NameError => e\n          if e.instance_of?(NameError)\n            raise ArgumentError, \"Unknown page type: #{page_type}\"\n          else\n            raise e\n          end\n        end\n      end\n\n      klass.new(attributes, options, &block)\n    end\n  end\nend\n\n# Examples\npage = Page.create!(:page_type => :product)\npage = @site.pages.create!(:page_type => :product)\npage = @product.create_page!(:page_type => :product)\n```\n\nThis way is more flexible and doesn't leave a website open to hacking the attributes hash.\n", "created_at": "2011-06-14 04:21:14", "user": 6321, "id": 1363753}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This feature has been available via a plugin for some time, but I think it should belong in core.\n\nhttps://gist.github.com/1024359\n", "labels": [], "number": 1687, "updated_at": "2011-06-14 06:05:30", "user": 525212, "closed_at": "2011-06-14 05:37:45", "id": 1053145, "title": "Nested has_many :through support", "url": "https://api.github.com/repos/rails/rails/issues/1687", "created_at": "2011-06-14 05:07:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1363975", "text": "Nested has_many :through support is already in Rails 3.1, e.g:\n\n``` ruby\nclass Order < ActiveRecord::Base\n  has_many :order_items\n  has_many :shipment_items, :through => :order_items\n  has_many :shipments, :through => :shipment_items\nend\n\nclass OrderItem < ActiveRecord::Base\n  belongs_to :order\n  has_many :shipment_items\nend\n\nclass Shipment < ActiveRecord::Base\n  has_many :shipment_items\nend\n\nclass ShipmentItem < ActiveRecord::Base\n  belongs_to :order_item\n  belongs_to :shipment\nend\n```\n\nJust pass an existing through association in the `:through` option.\n", "created_at": "2011-06-14 05:37:45", "user": 6321, "id": 1363975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364054", "text": "oh great, didn't know it was in the newest version, good to know! thanks.\n", "created_at": "2011-06-14 06:05:30", "user": 525212, "id": 1364054}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The full benefit of asset_host configuration is only achieved when the configuration is carried through the stylesheet where most of the images are referenced. Without this ability, the assets are locked to whatever asset host served the stylesheet request.\n\nThis patch adds a new helper asset_url that will generate a full url adhering to project's asset_host configuration. \n\nIn the past, rails has used request inspection to to avoid mixed content warnings, however, with precompiled assets this is no longer possible. Nor is it necessary (and in fact it's harmful to cached pages) because we can serve protocol relative urls instead. Protocol relative urls are now the default with this patch.\n\nCompass has exposed this functionality for several years now so this strategy is battle-tested. After this patch lands, I will be able to update compass so that rails users who use compass have a single source for their asset configuration.\n", "labels": [], "number": 1688, "updated_at": "2014-06-22 12:34:24", "user": 1839, "closed_at": "2011-06-14 17:48:04", "id": 1053358, "title": "asset_url helper", "url": "https://api.github.com/repos/rails/rails/issues/1688", "created_at": "2011-06-14 06:41:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1364701", "text": "@dhh reviewed and gave the following feedback:\n1. inline the regexen\n2. change asset_url => asset_path\n3. include asset_tag_helper if not already\n4. break up test case\n", "created_at": "2011-06-14 09:01:53", "user": 1839, "id": 1364701}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1367827", "text": "closing to reopen a new version.\n", "created_at": "2011-06-14 17:48:04", "user": 1839, "id": 1367827}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1411459", "text": "It will helps in shomething like (CSS) `background-image:url(https://s3.amazonaws.com/crazything/bbs.png)`?\n", "created_at": "2011-06-21 16:03:25", "user": 149353, "id": 1411459}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1411731", "text": "@chriseppstein you have a date to include this?\nWill help us too much :)\n", "created_at": "2011-06-21 16:37:54", "user": 149353, "id": 1411731}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "See related issue : #869\n", "labels": [], "number": 1689, "updated_at": "2014-06-13 06:57:11", "user": 9347, "closed_at": "2011-06-14 15:13:26", "id": 1053591, "title": "Encode the uploaded file's name in utf8 - Closes #869", "url": "https://api.github.com/repos/rails/rails/issues/1689", "created_at": "2011-06-14 08:00:30", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365375", "text": "Thanks for the pull request, but there are a few changes still required here:\n\n1) AS provides a method on the string called encoding_aware? that returns true if the encoding system is available. please use it instead of respond_to.\n\n2) We cannot hardcode it to utf8. We should probably check default_external or whatever the current code in AD is using for encoding the rest of the request. force_encoding in general is not an option.\n\n/cc @wycats\n", "created_at": "2011-06-14 11:34:59", "user": 9582, "id": 1365375}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365396", "text": "Oh ok, I saw the encoding_aware method but as it didn't respond in irb in 1.8, I thought it was only 1.9.\nI didn't think it would be implemented by AS. I'll use it.\n\nI'll also look into not hardcoding it.\n", "created_at": "2011-06-14 11:41:31", "user": 9347, "id": 1365396}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365412", "text": "Tks <3 <3\n", "created_at": "2011-06-14 11:44:05", "user": 9582, "id": 1365412}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365641", "text": "I have pushed again in my fork with your suggestions.\n", "created_at": "2011-06-14 12:36:36", "user": 9347, "id": 1365641}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366115", "text": "Much cleaner by moving it to its own method. :)\n\nLet's wait for @wycats feedback. Although Rails is using default_external for loading templates, it seems we are hardcoding the request to be UTF-8 (which kinda makes sense). So actually your first implementation would be more correct according to this commit from Yehuda:\n\nhttps://github.com/rails/rails/commit/25215d7285db10e2c04d903f251b791342e4dd6a\n\nSorry about that. :(\n", "created_at": "2011-06-14 14:04:13", "user": 9582, "id": 1366115}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Added instance_accessor: false to Module#mattr_accessor (similar to b12c2e4ebb85170467ac250219557d631c842d8d which did this for Class#cattr_accessor)\n", "labels": [], "number": 1690, "updated_at": "2014-06-26 17:00:00", "user": 146214, "closed_at": "2011-06-30 10:50:48", "id": 1054008, "title": "Added instance_accessor: false to Module#mattr_accessor", "url": "https://api.github.com/repos/rails/rails/issues/1690", "created_at": "2011-06-14 09:29:16", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, guys!\nWhat do you think about copying lazy loading functionality for fields from DataMapper? For example text columns will be lazy loaded (fetched from DB on request) by default if you didn't change it.\n", "labels": [], "number": 1691, "updated_at": "2011-12-27 15:19:50", "user": 29658, "closed_at": "2011-12-27 15:19:50", "id": 1054373, "title": "AR lazy loading for fields", "url": "https://api.github.com/repos/rails/rails/issues/1691", "created_at": "2011-06-14 11:09:32", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have encountered (probably) the following problem in a 2.3.12 app:\n\nWe have a route with `:method => :post`\n\nIn our controller test, calling `post action, …` fails unless I explicity set a `:format => :post` parameter although that should have been inferred by the `assign_parameters` method.\n\nThe reason for this is, as far as I figured out:\n`assign_parameters` calls `Route#extra_keys`\n_`extra_keys` calls `RouteSet#generate_extras`\n__which in turn calls `route_generate_raw`\n__which doesn't return a path\n_which causes `RouteSet#generate` to raise a RoutingError\n\nI could not reproduce the bug in 3.1.\nI will send a pull request with a failing test for 2-3-stable\n", "labels": [], "number": 1692, "updated_at": "2011-06-14 15:21:58", "user": 25069, "closed_at": "2011-06-14 15:16:00", "id": 1054573, "title": "Routes not found in TestRequest#assign_parameters", "url": "https://api.github.com/repos/rails/rails/issues/1692", "created_at": "2011-06-14 12:07:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366681", "text": "See my comment on your pull request: #1693\n", "created_at": "2011-06-14 15:16:00", "user": 6321, "id": 1366681}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366723", "text": "Ooops, you're right. Sorry.\n", "created_at": "2011-06-14 15:21:58", "user": 25069, "id": 1366723}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have encountered (probably) the following problem in a 2.3.12 app:\n\nWe have a route with `:method => :post`\n\nIn our controller test, calling `post action, …` fails unless I explicity set a `:format => :post` parameter although that should have been inferred by the `assign_parameters` method.\n\nThe reason for this is, as far as I figured out:\n`assign_parameters` calls `Route#extra_keys`\n_`extra_keys` calls `RouteSet#generate_extras`\n__which in turn calls `route_generate_raw`\n__which doesn't return a path\n_which causes `RouteSet#generate` to raise a RoutingError\n\nI'm not sure where exactly to fix this problem.\nI'd simply add a line or two to `assign_parameters` that adds the `:format` to the options but I'm happy to implement other suggestions.\n\nSee issue #1692\n", "labels": [], "number": 1693, "updated_at": "2014-07-01 14:13:01", "user": 25069, "closed_at": "2011-06-14 15:15:17", "id": 1054657, "title": "Failing Test Case for Issue #1692 Routes not found in TestRequest#assign_parameters", "url": "https://api.github.com/repos/rails/rails/issues/1693", "created_at": "2011-06-14 12:23:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366676", "text": "You're not defining the route correctly - this test passes:\n\n``` ruby\n  def test_routing_with_method\n    with_routing do |set|\n      set.draw { |map| map.connect 'testmethod', :controller => 'test_test/test', :action => 'create', :conditions => { :method => :post } }\n      assert_nothing_raised {\n        post :create\n      }\n    end\n  end\n```\n", "created_at": "2011-06-14 15:15:17", "user": 6321, "id": 1366676}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366720", "text": "Ooops, you're right. Sorry.\n", "created_at": "2011-06-14 15:21:35", "user": 25069, "id": 1366720}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": " # Schema: Account(name:string, phrase:string)\n class Account < ActiveRecord::Base\n  has_secure_password :password, :phrase\n end\n\n account = Account.create\n account.errors[:phrase]  # => [\"can't be blank\"]\n\n account = Account.new(:name => \"david\", :password => \"\", :password_confirmation => \"nomatch\")\n account.save  # => false, password required\n account.password = \"mUc3m00RsqyRe\"\n account.save  # => false, confirmation doesn't match\n account.password_confirmation = \"mUc3m00RsqyRe\"\n account.save  # => true\n account.authenticate(\"notright\")  # => false\n account.authenticate(\"mUc3m00RsqyRe\")  # => account \n Account.find_by_name(\"david\").try(:authenticate, \"notright\") # => nil \n Account.find_by_name(\"david\").try(:authenticate, \"mUc3m00RsqyRe\") # => account\n", "labels": [], "number": 1694, "updated_at": "2014-06-12 18:08:26", "user": 6305, "closed_at": "2011-06-14 13:33:01", "id": 1054881, "title": "Add support to custom field on has_secure_password", "url": "https://api.github.com/repos/rails/rails/issues/1694", "created_at": "2011-06-14 13:19:48", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365849", "text": "This feature has already been proposed and rejected by the core team. See #1440.\n", "created_at": "2011-06-14 13:22:09", "user": 9347, "id": 1365849}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1365909", "text": "Sorry guys for this pull request. I haven't saw the previous discussions about it.\n", "created_at": "2011-06-14 13:33:01", "user": 6305, "id": 1365909}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Some inflections fail in 3.0.8 on SafeBuffers\n\n``` bash\nrails new bad_inflection\ncd bad_inflection\nrails runner \"safe = 'a string'.html_safe; safe.underscore\"\n```\n\nGenerates:\n\n``` bash\n/opt/local/lib/ruby1.9/gems/1.9.1/gems/railties-3.0.8/lib/rails/commands/runner.rb:50:in `eval': Cannot modify SafeBuffer in place (TypeError)\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-3.0.8/lib/active_support/inflector/methods.rb:50:in `underscore'\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/activesupport-3.0.8/lib/active_support/core_ext/string/inflections.rb:83:in `underscore'\n    from (eval):1:in `<top (required)>'\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/railties-3.0.8/lib/rails/commands/runner.rb:50:in `eval'\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/railties-3.0.8/lib/rails/commands/runner.rb:50:in `<top (required)>'\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/railties-3.0.8/lib/rails/commands.rb:39:in `require'\n    from /opt/local/lib/ruby1.9/gems/1.9.1/gems/railties-3.0.8/lib/rails/commands.rb:39:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n\nOther inflections that are known to fail:\n- pluralize\n- titlecase\n\nThese ones are okay:\n- upcase\n- downcase\n- dasherize\n", "labels": [], "number": 1695, "updated_at": "2011-06-15 00:41:30", "user": 753005, "closed_at": "2011-06-14 23:32:22", "id": 1055046, "title": "Inflection cannot modify SafeBuffers", "url": "https://api.github.com/repos/rails/rails/issues/1695", "created_at": "2011-06-14 13:48:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366431", "text": "Why are you calling inflections on SafeBuffer? Not saying you shouldn't be, just trying get a good grasp on why all these SafeBuffer issues are cropping up.\n", "created_at": "2011-06-14 14:48:39", "user": 6321, "id": 1366431}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366534", "text": "Well...the path to my actual use case is long :D \n\nI'll try and keep it to the relevant steps...\n1. an ActiveRecord model has a field of home_city and away_city\n2. I then use I18N to get a translation on \"{home_city} at {away_city}\", this returns a SafeBuffer\n3. Then I call .titlecase on the returned object (because in some situations cities aren't capitalized in the model)\n4. This last call is in view and throws an exception\n", "created_at": "2011-06-14 14:59:42", "user": 753005, "id": 1366534}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1366801", "text": "That's helped a lot thanks.\n", "created_at": "2011-06-14 15:31:06", "user": 6321, "id": 1366801}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1367033", "text": "What's the key you're using for the I18n translation?\n", "created_at": "2011-06-14 16:02:13", "user": 6321, "id": 1367033}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368006", "text": "I actually do this in an initializer:\n\n``` ruby\nmodule Symbol\n  def translate(*args)\n    InGamerExtensions::I18nExt.translate(self, *args).html_safe\n  end\n  alias :l :translate\nend\n```\n\nSo that most of the time I make calls like this:\n\n``` ruby\n# views/.../sample.haml\n%p= :string_to_translate.l(arg: value, another_arg: another_value)\n```\n\nThis usage comes out of the original rails 2.X / ruby 1.8 project that has evolved into the current version, perhaps there is a better way to be doing this sort of shortcut now...?\n\nBut, even if there is, it would be _a lot_ to catch all the corrections.\n", "created_at": "2011-06-14 18:14:58", "user": 753005, "id": 1368006}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368021", "text": "Is this a blocker for 3.0.9?  I'm way too jetlagged to tell.  :-(\n", "created_at": "2011-06-14 18:16:50", "user": 3124, "id": 1368021}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368975", "text": "@sdeboer what happens if you don't call html_safe in your Symbol#translate method. You should only be calling html_safe on a string that you know contains html code or escaped entities.\n", "created_at": "2011-06-14 20:29:50", "user": 6321, "id": 1368975}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1369317", "text": "The problem is that there are situations where HTML code is passed through the translation mechanism.  Not many, but some.  An example of how a translation receives html code is something like this:\n\n``` haml\n%p= :event_is_happening_at.l(link: link_to(event), location: event.location).l\n```\n\nThere are only a few, very isolated, cases where user data is pushed into the translation mechanism, and those ones get sanitized on the data being saved.\n", "created_at": "2011-06-14 21:15:31", "user": 753005, "id": 1369317}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370084", "text": "For keys that have html in them you should use suffix the keys with html and run the translation through TranslationHelper.translate - they will be then marked as html_safe automatically. I'm assuming that you don't need inflections on those keys.\n", "created_at": "2011-06-14 23:32:22", "user": 6321, "id": 1370084}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370289", "text": "Thanks!  I was unaware of that.\n\nMy simple search has turned up instances where we do call titlecase on the result of a translation that contains links.  Its difficult to come up with a comprehensive search that would even get all the translations with links, nevermind if there are any others that assume HTML can be passed through.\n\nYou don't think its an issue that (some) inflections won't operate on a SafeBuffer?\n\nShouldn't the SafeBuffer object behave as much like a String as possible?\n", "created_at": "2011-06-15 00:03:26", "user": 753005, "id": 1370289}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370413", "text": "> Shouldn't the SafeBuffer object behave as much like a String as possible?\n\nThat's the subject of much internal discussion at the moment. If we do enable inflections on SafeBuffer then it's likely to return an ordinary string which if it contains HTML code or HTML entities could result in double escaping.\n", "created_at": "2011-06-15 00:41:30", "user": 6321, "id": 1370413}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "In a has_many association, the primary key may be a method (the doc says: \"Specify the **method** that returns the primary key used for the association. By default this is id.\"). It works fine except when the association is eager loaded. In this case it uses the nonexistent attribute and loads an empty list of records.\n\nThis fix is based on 3-0-stable.\n", "labels": [], "number": 1696, "updated_at": "2014-07-03 04:56:54", "user": 28259, "closed_at": "2012-04-28 22:18:05", "id": 1055308, "title": "Eager loading has_many association when primary_key is a method", "url": "https://api.github.com/repos/rails/rails/issues/1696", "created_at": "2011-06-14 14:46:01", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1549845", "text": "is this an issue in 3-1-stable?\n", "created_at": "2011-07-11 20:55:37", "user": 52642, "id": 1549845}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398460", "text": "@piglop Is this still an issue?\n", "created_at": "2012-04-28 17:25:06", "user": 651597, "id": 5398460}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5400771", "text": "This pull request is for a not supported Rails version. I'm closing it now. Please see if this one is still can be applied in the Rails >= 3.1. If so, please open another one against the master branch.\n\nThanks for your contribution.\n", "created_at": "2012-04-28 22:18:05", "user": 47848, "id": 5400771}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "For example `Test.order('COALESCE(updated_at, created_at) DESC').last` will generate the malformed SQL `SELECT  \"tests\".* FROM \"tests\" ORDER BY COALESCE(updated_at DESC, created_at) ASC LIMIT 1`.\n\nFull example case: https://gist.github.com/1025033\n\nThis is caused by the naive split on commas at https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/query_methods.rb#L308\n", "labels": [], "number": 1697, "updated_at": "2011-07-27 17:26:52", "user": 13026, "closed_at": "2011-07-27 17:26:52", "id": 1055949, "title": "ActiveRecord::QueryMethods#reverse_sql_order mangles functions", "url": "https://api.github.com/repos/rails/rails/issues/1697", "created_at": "2011-06-14 16:20:17", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637612", "text": "The quickest workaround would be to use\n\n``` ruby\nTest.order('COALESCE(updated_at, created_at) DESC').last\n```\n\ninstead of\n\n``` ruby\nTest.order('COALESCE(updated_at, created_at) ASC').first\n```\n\nWe could parse the `order` clause but it would be a pretty large (slow?) regexp to handle all the cases.\n", "created_at": "2011-07-23 14:36:16", "user": 108369, "id": 1637612}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639635", "text": "https://github.com/smasry/rails/commit/00b918f213a4c53e204b4f4806ebb62a1bd1b56d\n", "created_at": "2011-07-24 02:59:13", "user": 13121, "id": 1639635}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639735", "text": "https://github.com/rails/rails/pull/2232\n", "created_at": "2011-07-24 03:43:42", "user": 13121, "id": 1639735}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "removed warning\n\n/Users/pankajbagwan/code/rails/actionpack/lib/action_dispatch/routing/mapper.rb:90: warning: mismatched indentations\n", "labels": [], "number": 1698, "updated_at": "2014-07-03 04:57:00", "user": 59360, "closed_at": "2011-06-14 16:57:01", "id": 1056078, "title": "Removed warnings from while running tests in Ruby 1.9.2", "url": "https://api.github.com/repos/rails/rails/issues/1698", "created_at": "2011-06-14 16:39:02", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The full benefit of asset_host configuration is only achieved when the configuration is carried through the stylesheet where most of the images are referenced. Without this ability, the assets are locked to whatever asset host served the stylesheet request.\n\nThis patch changes the behavior of asset_path so that it will generate a full url adhering to project's asset_host configuration when it is set.\n\nIn the past, rails has used request inspection to to avoid mixed content warnings, however, with precompiled assets this is no longer possible. Nor is it necessary (and in fact it's harmful to cached pages) because we can serve protocol relative urls instead. Protocol relative urls are now the default with this patch.\n\nCompass has exposed this functionality for several years now so this strategy is battle-tested. After this patch lands, I will be able to update sass-rails so that it exposes syntactic sugar for accessing the url helpers and update compass so that rails users who use compass have a single source for their asset configuration.\n", "labels": [], "number": 1699, "updated_at": "2014-06-12 18:35:43", "user": 1839, "closed_at": "2011-06-27 19:19:57", "id": 1056461, "title": "Asset urls", "url": "https://api.github.com/repos/rails/rails/issues/1699", "created_at": "2011-06-14 17:51:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372310", "text": "+1, thanks\n", "created_at": "2011-06-15 09:20:49", "user": 12844, "id": 1372310}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372346", "text": "+1\n", "created_at": "2011-06-15 09:27:27", "user": 87115, "id": 1372346}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376409", "text": "+1, hopefully this makes it into 3.1 release\n", "created_at": "2011-06-15 20:11:19", "user": 206662, "id": 1376409}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377477", "text": "It would be great if we can add documentation for this.\nCan somebody help on that?.\n", "created_at": "2011-06-15 22:56:00", "user": 52642, "id": 1377477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377594", "text": "Regarding the protocol relative url change, here's a great article on the subject: http://paulirish.com/2010/the-protocol-relative-url/\n\nAs a result of this change, best practice will be to not put a protocol in the asset host string.\n\nHowever sites that care about supporting IE6 users with custom security settings and currently use asset hosts will need to add an asset host proc that does not use an asset host\n", "created_at": "2011-06-15 23:16:00", "user": 1839, "id": 1377594}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377595", "text": "@spastorino: What kind of docs were you thinking of?\n", "created_at": "2011-06-15 23:16:17", "user": 2687, "id": 1377595}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377770", "text": "@radar everything :). Can you talk with @chriseppstein about this?\n", "created_at": "2011-06-15 23:52:18", "user": 52642, "id": 1377770}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377777", "text": "I just spoke with @paulirish about this. I will submit another patch to disable protocol relative urls for stylesheets in stylesheet_link_tag because ie7 and ie8 will download them twice -- in those cases we'll need to use the old approach of inspecting the request protocol. \n", "created_at": "2011-06-15 23:54:47", "user": 1839, "id": 1377777}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394338", "text": "In order to minimize risk I have made the following changes:\n1. By default, whenever a request is in scope the `:request` protocol will be used.\n2. By default, whenever a request is not in scope (E.g. rake assets:precompile) the `:relative` protocol will be used.\n3. When the default protocol is explicitly set to `:request`, asset hosts are disabled whenever a request is not in scope thus effectively disabling this entire pull request.\n4. A user can set the default protocol to `:relative` if they want to use relative assets urls even when a request is in scope.\n5. Even if the default protocol is `:relative`, the default will be :request for stylesheet link tags to avoid the IE7-8 double download issue. If a user wants to use protocol relative urls for stylesheet link tags, they will need to explicitly set the protocol in their asset host configuration.\n\nAs before, if a protocol is specified by the asset host, then that is always used.\n", "created_at": "2011-06-18 19:35:34", "user": 1839, "id": 1394338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1422990", "text": "/bump\n", "created_at": "2011-06-23 04:34:20", "user": 1839, "id": 1422990}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1426159", "text": "switched my rails app to use chris's branch for testing. everything works great so far. +1 for 3.1, i think this is a crucial update\n", "created_at": "2011-06-23 15:50:23", "user": 206662, "id": 1426159}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1446086", "text": "I'm getting this trying to apply to both master and 3-1-stable. Does it need to be updated?\n\n```\n  $ curl -s https://github.com/rails/rails/pull/1699.patch | git apply --check\n  error: patch failed: actionpack/lib/action_view/helpers/asset_paths.rb:6\n  error: actionpack/lib/action_view/helpers/asset_paths.rb: patch does not apply\n  error: patch failed: actionpack/lib/sprockets/helpers/rails_helper.rb:59\n  error: actionpack/lib/sprockets/helpers/rails_helper.rb: patch does not apply\n  error: patch failed: actionpack/lib/action_view/helpers/asset_paths.rb:15\n  error: actionpack/lib/action_view/helpers/asset_paths.rb: patch does not apply\n  error: patch failed: actionpack/lib/sprockets/helpers/rails_helper.rb:59\n  error: actionpack/lib/sprockets/helpers/rails_helper.rb: patch does not apply\n  error: patch failed: actionpack/lib/action_view/helpers/asset_paths.rb:109\n  error: actionpack/lib/action_view/helpers/asset_paths.rb: patch does not apply\n  error: patch failed: actionpack/lib/sprockets/helpers/rails_helper.rb:110\n  error: actionpack/lib/sprockets/helpers/rails_helper.rb: patch does not apply\n  error: patch failed: actionpack/lib/action_view/helpers/asset_paths.rb:21\n  error: actionpack/lib/action_view/helpers/asset_paths.rb: patch does not apply\n  error: patch failed: actionpack/lib/sprockets/helpers/rails_helper.rb:65\n  error: actionpack/lib/sprockets/helpers/rails_helper.rb: patch does not apply\n```\n", "created_at": "2011-06-27 09:14:05", "user": 2741, "id": 1446086}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1447020", "text": "yep I was reviewing it yesterday and needs to be rebased for both master and 3-1-stable /cc @chriseppstein\n", "created_at": "2011-06-27 12:40:56", "user": 52642, "id": 1447020}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1448112", "text": "Ugh. Ok. \n", "created_at": "2011-06-27 15:32:10", "user": 1839, "id": 1448112}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1448320", "text": "I've merged 3-1-stable to my branch.\n", "created_at": "2011-06-27 16:00:42", "user": 1839, "id": 1448320}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1449806", "text": "This still needs a rebase against master as well.\n", "created_at": "2011-06-27 19:25:10", "user": 2741, "id": 1449806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1450415", "text": "@dhh The pull for master is here: https://github.com/rails/rails/pull/1870\n", "created_at": "2011-06-27 21:01:45", "user": 1839, "id": 1450415}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1629314", "text": "This is not working on the latest rails stable 3-1 branch + sass-rails 3-1 branch. \nThe rendered css file just displays \"asset_url\" instead of the url(path)\n\ndiv.test {\n  background: asset_url(\"top-main-shadow.png\") no-repeat; }\n", "created_at": "2011-07-22 03:34:26", "user": 22015, "id": 1629314}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1629326", "text": "@dodeja it sounds like you don't have the sass-rails gem installed. \n", "created_at": "2011-07-22 03:37:58", "user": 1839, "id": 1629326}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1643142", "text": "Here is how I am reproducing it \nhttps://github.com/rails/rails/issues/1822#issuecomment-1643116\n", "created_at": "2011-07-25 02:36:40", "user": 22015, "id": 1643142}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Please see description of issue #1657\n", "labels": [], "number": 1700, "updated_at": "2014-07-03 04:57:09", "user": 202410, "closed_at": "2011-06-14 19:55:12", "id": 1056718, "title": "Fix for issue #1657", "url": "https://api.github.com/repos/rails/rails/issues/1700", "created_at": "2011-06-14 18:35:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1368742", "text": "I don't think we should hard code specifically for the webrick handler. If you want Rails to serve the static assets in production under webrick, just set the configuration option to true.\n", "created_at": "2011-06-14 19:55:13", "user": 9582, "id": 1368742}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1701, "updated_at": "2014-07-03 04:57:11", "user": 111473, "closed_at": "2011-06-15 05:54:56", "id": 1056832, "title": "Changelog files update for 3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1701", "created_at": "2011-06-14 18:54:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371477", "text": "Sorry, it's the responsibility of the branch/release manager to update the versions in the changelog.\n", "created_at": "2011-06-15 05:54:56", "user": 6321, "id": 1371477}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "As of mysql2 0.2.8 and 0.3.3, eager-casting down in C can be disabled.\n\nThis should help performance by allowing ActiveRecord to lazily cast row values upon access (like the mysql adapter is doing). My rudimentary benchmarks show it performing about on-par with the mysql adapter, but has the added benefit of being fully thread-safe, even in Ruby 1.8 (and 1.9 obviously).\n", "labels": [], "number": 1702, "updated_at": "2014-07-03 04:57:15", "user": 11571, "closed_at": "2011-06-14 22:51:05", "id": 1058071, "title": "Turn off mysql2's eager-casting", "url": "https://api.github.com/repos/rails/rails/issues/1702", "created_at": "2011-06-14 22:48:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1369868", "text": "Forgot to mention, the AR adapter in the 0.2.8 release has this change already so people should see similar performance gains with versions of ActiveRecord prior to 3.1\n", "created_at": "2011-06-14 22:48:59", "user": 11571, "id": 1369868}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "After upgrading to RC4 all my standard, basic `form_for` calls are having the snowman_tag rendered out as an escaped string.\n\nOn line 637 of [form_tag_helper](https://github.com/rails/rails/blob/v3.1.0.rc4/actionpack/lib/action_view/helpers/form_tag_helper.rb):\n\n```\ndef form_tag_html(html_options)\n   extra_tags = extra_tags_for_form(html_options)\n    (tag(:form, html_options, true) + extra_tags).html_safe\nend\n```\n\nIf html_safe is called directly on the variable `extra_tags` ala:\n\n```\n def form_tag_html(html_options)\n     tag(:form, html_options, true) + extra_tags_for_form(html_options).html_safe\n end\n```\n\nThen it's correctly rendered as safe html into the page. \n\nIs anyone else experiencing this issue? Couldn't find any existing tickets or mention of similar problems anywhere.\n", "labels": [], "number": 1703, "updated_at": "2011-06-15 02:26:02", "user": 4493, "closed_at": "2011-06-15 02:26:02", "id": 1058137, "title": "3.1 RC4 - snowman_tag not being correctly marked as html_safe", "url": "https://api.github.com/repos/rails/rails/issues/1703", "created_at": "2011-06-14 23:09:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370038", "text": "Forgot to create the issue via a pull (just in case), the patch is here: https://github.com/brendanhay/rails/commit/9e01a04fcc2377ed88f5d482eb98acf36032b08e\n", "created_at": "2011-06-14 23:21:01", "user": 4493, "id": 1370038}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370249", "text": "Can you post the html you're getting - I can't reproduce here.\n", "created_at": "2011-06-14 23:50:59", "user": 6321, "id": 1370249}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1370418", "text": "I've tried creating a blank rails project, using both erb and haml and it seems to work fine (feel free to close the issue) .. so unfortunately it must be a problem with some 3rd party. Although my Gemfile is fairly minimal and at first glance it doesn't look like anything outside of haml would be responsible for affecting the output.\n\nHere is the html:\n\n```\n      <form accept-charset=\"UTF-8\" action=\"/messages/questions\" id=\"new_message\" method=\"post\" novalidate=\"novalidate\">\n          &lt;div style=\"margin:0;padding:0;display:inline\"&gt;&lt;input name=\"authenticity_token\" type=\"hidden\" value=\"s5SWQ2PxFGG8OmA5V3ZETSnY73eZMFrAU0yRJh2K+Dg=\" /&gt;&lt;/div&gt;\n          <div class=\"input\">\n              <textarea class=\"text\" cols=\"40\" id=\"message_body\" name=\"message[body]\" placeholder=\"Message\" rows=\"20\"></textarea>\n          </div>\n          <input name=\"commit\" type=\"submit\" value=\"Send\">\n          <div class=\"anonymous\">\n              <input name=\"message[anonymous]\" type=\"hidden\" value=\"0\">\n              <input class=\"checkbox\" id=\"message_anonymous\" name=\"message[anonymous]\" type=\"checkbox\" value=\"1\">\n            <label for=\"message_anonymous\">Anonymous?</label>\n          </div>\n      </form>\n```\n", "created_at": "2011-06-15 00:44:03", "user": 4493, "id": 1370418}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Apparently when you pass in \"true\" as the last argument of a memoized method that argument is taken away and you get a \"ArgumentError: wrong number of arguments\" error.  When I initially ran across this my arguments were optional so it was much more difficult to trace because the value was being set to nil when \"true\" was passed in.\n\nI've written a failing test, but I'm not sure how to proceed as removing the \"args.last == true\" check on line 82 of memoizable.rb would probably break other people's code\n", "labels": [], "number": 1704, "updated_at": "2014-06-21 02:57:55", "user": 301415, "closed_at": "2011-06-15 09:54:30", "id": 1058151, "title": "Memoized methods break when value of last argument is true", "url": "https://api.github.com/repos/rails/rails/issues/1704", "created_at": "2011-06-14 23:13:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371893", "text": "That's indeed a problem. I have resolved it by checking that if the last arguments belongs to the original method or not.\nIf it doesn't, it means it's the reload argument. If it does, that last argument is a boolean and shouldn't reload the method.\n\nSee #1707\n", "created_at": "2011-06-15 07:49:28", "user": 9347, "id": 1371893}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "One-sentence addition to the comments around status codes and redirect_to.\n", "labels": [], "number": 1705, "updated_at": "2014-07-03 04:57:23", "user": 188595, "closed_at": "2011-06-15 05:10:33", "id": 1059237, "title": "Documentation tweak - add a helpful reminder to redirect_to", "url": "https://api.github.com/repos/rails/rails/issues/1705", "created_at": "2011-06-15 04:37:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371254", "text": "The patch looks great! However, do you mind pushing it to https://github.com/lifo/docrails instead? That repository is a target place for documentation-related patch with open commit access. You'll get a faster feedback overthere than here for sure.\n\nThank you :)\n", "created_at": "2011-06-15 04:42:02", "user": 4912, "id": 1371254}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1371353", "text": "Done, thanks for the tip!\n", "created_at": "2011-06-15 05:10:33", "user": 188595, "id": 1371353}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I been working on porting my application on \"Rails 3.0.7\" ,ever since I started to employ caching for my application either (file cache,memcache or any other) . I always happen to get the above error \"can't dump File\" .\n\nI Google a bit and found  that it has something to do with Marshal dump as  ruby interpreter does allow Marshal dump of object that have Procs or lambdas in them  so I looked upon my code but I could not find any Proc and lambda in my whole applications\nthe biggest problem is that the problem don't persist ever time ,it report error sometime and work the other time in Rails console\n\nHere what I'm  trying to achieve\n\nRails.cache.fetch(\"accessible_websites_1\")  { Website.includes(:account) }\n\nthe equivalent code of above in Rails 2.3.5 i.e\n\nRails.cache.fetch(\"accessible_websites_1\") { Website.find(:all,:include => :account) }\n\nWork perfectly fine without any issue\n\nI using\n   Ruby = \"ruby 1.8.7 (2010-01-10 patchlevel 249) [i486-linux]\" \n   Rails = \" Rails 3.0.7\"\n\nam I missing something\n\nI can also provide the model structure if required\n", "labels": [], "number": 1706, "updated_at": "2011-07-11 21:18:52", "user": 63040, "closed_at": "2011-07-11 21:18:52", "id": 1059528, "title": "\"can't dump File\"  during \"Rails.cache.fetch\" and \"Rails.cache.write\"", "url": "https://api.github.com/repos/rails/rails/issues/1706", "created_at": "2011-06-15 06:34:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1382393", "text": "I am also running into an issue with the Rails.cache methods on 3.1.0.rc4 (ruby 1.9.2p180 (2011-02-18 revision 30909) [x86_64-darwin10]).  The error that I receive is slightly different and refers to procs specifically as opposed to the File message above, but it seems similar:\n\n```\nTypeError: can't dump hash with default proc\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:627:in `dump'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:627:in `should_compress?'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:559:in `initialize'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:363:in `new'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:363:in `block in write'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:520:in `instrument'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:362:in `write'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/activesupport-3.1.0.rc4/lib/active_support/cache.rb:299:in `fetch'\n    from (irb):62\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/railties-3.1.0.rc4/lib/rails/commands/console.rb:45:in `start'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/railties-3.1.0.rc4/lib/rails/commands/console.rb:8:in `start'\n    from /project/shared/bundled_gems/ruby/1.9.1/gems/railties-3.1.0.rc4/lib/rails/commands.rb:40:in `<top (required)>'\n    from script/rails:6:in `require'\n    from script/rails:6:in `<main>'\n```\n\nThe error seems to occur when trying to cache objects that have more than one scope on them.\n\nAlso, any scopes using lambdas fail regardless of how many scopes.\n\nI have hit failures from these patterns:\n\n```\nRails.cache.fetch(\"keyname\", :expires_in => 1.minute) do\n    Model.scope_with_lambda\nend\n\n\nRails.cache.fetch(\"keyname\", :expires_in => 1.minute) do\n    Model.scope.scope\nend\n```\n\nThe code works fine within the same application on 2.3.12 (ruby 1.8.7 (2011-02-18 patchlevel 334) [i686-linux], MBARI 0x8770, Ruby Enterprise Edition 2011.03).\n", "created_at": "2011-06-16 16:32:56", "user": 180497, "id": 1382393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393510", "text": "This response on StackOverflow answers the question as to why the TypeError is occurring.\n\nhttp://stackoverflow.com/questions/6391855/rails-cache-error-in-rails-3-1-typeerror-cant-dump-hash-with-default-proc/6392704#6392704\n\nI'll re-implement how we're using Rails.cache to resolve the issue, along the lines suggested in the response.\n", "created_at": "2011-06-18 14:45:05", "user": 180497, "id": 1393510}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550030", "text": "Ya as the SO response says you're caching wrong things\n", "created_at": "2011-07-11 21:18:52", "user": 52642, "id": 1550030}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "See #1704 for the detailed bug report.\n", "labels": [], "number": 1707, "updated_at": "2014-07-03 04:57:27", "user": 9347, "closed_at": "2011-06-15 09:52:12", "id": 1059771, "title": "Allow last argument to be a boolean in memoized methods", "url": "https://api.github.com/repos/rails/rails/issues/1707", "created_at": "2011-06-15 07:48:10", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Following 0ac0d7a0f03da3d08440c74477d653622d61a26e\n\ncc @pixeltrix\n", "labels": [], "number": 1708, "updated_at": "2014-07-03 04:57:30", "user": 9347, "closed_at": "2011-06-15 08:29:51", "id": 1059803, "title": "Simplify to only one condition", "url": "https://api.github.com/repos/rails/rails/issues/1708", "created_at": "2011-06-15 07:58:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372077", "text": "I we're going to have an ugly long line then you might as well do it in one:\n\n``` ruby\nexception.is_a?(MissingTranslation) && options[:rescue_format] == :html ? super.html_safe : super\n```\n\nCreate a new pull request and I'll merge it\n", "created_at": "2011-06-15 08:29:52", "user": 6321, "id": 1372077}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc @pixeltrix\n", "labels": [], "number": 1709, "updated_at": "2014-07-03 04:57:33", "user": 9347, "closed_at": "2011-06-15 08:58:36", "id": 1059972, "title": "Simplify to only one condition", "url": "https://api.github.com/repos/rails/rails/issues/1709", "created_at": "2011-06-15 08:36:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372208", "text": "Cherry picked to [master](https://github.com/rails/rails/commit/0438e92ae73544874ab9cd73d0a33e7a815c395b), [3-1-stable](https://github.com/rails/rails/commit/9267a431b8c5fa3d94a1db92e11ff8299624f981) and [3-0-stable](https://github.com/rails/rails/commit/6cfd1c7726e7687de41f692968f8eb82ae998c43)\n", "created_at": "2011-06-15 08:58:36", "user": 6321, "id": 1372208}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Quite often I need to use pluralize, but don't always want the number coming back in the resulting string as it's being combined with some other form of UI.\n\nThis commit adds an additional defaulted param that allows you to state that you only require the pluralized word back.\n", "labels": [], "number": 1710, "updated_at": "2014-07-02 20:18:07", "user": 60786, "closed_at": "2011-06-16 08:56:48", "id": 1060206, "title": "Add the ability to pluralize only a word, without the count", "url": "https://api.github.com/repos/rails/rails/issues/1710", "created_at": "2011-06-15 09:48:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1374883", "text": "Won't <code>word.pluralize</code> give this? \n", "created_at": "2011-06-15 16:22:08", "user": 146214, "id": 1374883}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1374958", "text": "It does, although I'm not sure if you can set the plural form in the same way.  I used the pluralize helper a few times, when it seemed to 'fit' more for me and what I was doing.\n", "created_at": "2011-06-15 16:32:17", "user": 60786, "id": 1374958}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379657", "text": "Actually, after thinking about this, can it.  There are two many other ways of achieving the same thing.\n", "created_at": "2011-06-16 08:56:48", "user": 60786, "id": 1379657}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16198587", "text": "Its really frustrating when something is closed with an \"I found an answer\" and the answer is not shared.\n\nSo here is a good one for future frustrated souls \n\nhttp://stackoverflow.com/questions/11171252/apply-strong-style-to-number-only-with-rails-pluralize-helper\n", "created_at": "2013-04-10 20:07:39", "user": 394931, "id": 16198587}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1711, "updated_at": "2014-07-03 04:57:39", "user": 9624, "closed_at": "2011-06-15 10:19:22", "id": 1060309, "title": "Use assert_equal instead of assert in uploaded file test.", "url": "https://api.github.com/repos/rails/rails/issues/1711", "created_at": "2011-06-15 10:16:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372654", "text": "@josevalim shouldn't these collection of commits relating to encoding the filename be backported to 3-1-stable and 3-0-stable?\n", "created_at": "2011-06-15 10:30:34", "user": 6321, "id": 1372654}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1372684", "text": "@pixeltrix seems link a good idea.\n", "created_at": "2011-06-15 10:39:52", "user": 9582, "id": 1372684}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc @pixeltrix @josevalim\n", "labels": [], "number": 1712, "updated_at": "2014-07-03 04:57:42", "user": 9347, "closed_at": "2011-06-15 11:06:00", "id": 1060479, "title": "Cherry-picking encoding for 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1712", "created_at": "2011-06-15 11:05:41", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc @pixeltrix @josevalim\n", "labels": [], "number": 1713, "updated_at": "2014-07-03 04:57:48", "user": 9347, "closed_at": "2011-06-15 11:08:46", "id": 1060488, "title": "Cherry picking encoding for 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1713", "created_at": "2011-06-15 11:07:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "cc @pixeltrix @josevalim\n", "labels": [], "number": 1714, "updated_at": "2014-07-03 04:57:52", "user": 9347, "closed_at": "2011-06-15 11:10:13", "id": 1060489, "title": "Cherry picking encoding for 3.0", "url": "https://api.github.com/repos/rails/rails/issues/1714", "created_at": "2011-06-15 11:07:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The docs indicate that the plain text template is still:  method.text.plain.erb, however, it seem that the template should be named method.text.erb, i.e., no \"plain,\" because it will render an empty body if you use the .plain version of the template name  - http://api.rubyonrails.org/classes/ActionMailer/Base.html\n", "labels": [], "number": 1715, "updated_at": "2011-06-15 17:55:13", "user": 58286, "closed_at": "2011-06-15 17:55:13", "id": 1061865, "title": "ActionMailer docs indicate the wrong format for plain text templates", "url": "https://api.github.com/repos/rails/rails/issues/1715", "created_at": "2011-06-15 15:25:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1374814", "text": "Can you provide a patch and push it directly to github.com/lifo/docrails ?\n", "created_at": "2011-06-15 16:12:58", "user": 52642, "id": 1374814}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1375007", "text": "Done - https://github.com/lifo/docrails/commit/1adb38b6c3da1f651fbf6afced320b122b81dbc1\n\nOn Jun 15, 2011, at 12:12 PM, spastorino wrote:\n\n> Can you provide a patch and push it directly to github.com/lifo/docrails ?\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1715#issuecomment-1374814\n\nJason Fox\njfoxny@gmail.com\n", "created_at": "2011-06-15 16:40:34", "user": 58286, "id": 1375007}], "assignees": [3366, 3366], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Same as #1672 but applied to 3-1-stable branch.\n", "labels": [], "number": 1716, "updated_at": "2014-06-12 07:10:31", "user": 161, "closed_at": "2011-06-15 17:45:27", "id": 1062452, "title": "Namespace engine assets for 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1716", "created_at": "2011-06-15 17:08:35", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "```\n>> require 'active_record'\n=> true\n>> ActiveRecord::Base.establish_connection(\n?>       :adapter => \"sqlite3\",\n?>       :database  => \"benchmark.db\"\n>>   )\n>> ActiveRecord::Base.connection.execute(\"DROP TABLE IF EXISTS active_record_models\")\n>> ActiveRecord::Base.connection.execute(\"CREATE TABLE active_record_models (id INTEGER UNIQUE, title STRING, text STRING)\")\n>> class ActiveRecordModel < ActiveRecord::Base\n>>   end\n>> ActiveRecordModel.new\n>> require 'benchmark'\n\n#3.0.7\n\n>> Benchmark.measure { 100_000.times { ActiveRecordModel.new } }\n=>   1.470000   0.000000   1.470000   1.474953\n\n#3.1.0.rc4\n\n>> Benchmark.measure { 100_000.times { ActiveRecordModel.new } }\n=>   7.910000   0.050000   7.960000   7.951169\n\n>> Benchmark.measure { 100_000.times { ActiveRecordModel.new(:title => \"foo\", :text => \"bar\") } }\n=>  15.380000   0.010000  15.390000  15.381160\n```\n\nhttps://gist.github.com/fabfaf1bd8503fbf6d32\n", "labels": [], "number": 1717, "updated_at": "2011-06-28 18:14:18", "user": 184, "closed_at": "2011-06-28 18:14:18", "id": 1062633, "title": "AR Performance regression in 3.1", "url": "https://api.github.com/repos/rails/rails/issues/1717", "created_at": "2011-06-15 17:45:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1376906", "text": "About half of the runtime looks to be from the apply_default_scope assignment introduced in c69111ba5fde8445237f682c88b927bcde1588d4, which @jonleighton has said he would be changing.\n", "created_at": "2011-06-15 21:18:41", "user": 131752, "id": 1376906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383955", "text": "Thanks @jhawthorn. I did mean to fix that, not sure how it escaped my attention. Have pushed a fix now, but leaving this open as master is still about twice as slow as 3-0-stable.\n", "created_at": "2011-06-16 20:18:39", "user": 1979, "id": 1383955}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1449354", "text": "Just to update this, it looks like we're making more (greater than 0) calls to `scoped` in 3.1.  I'm looking in to this, but here are the perf graphs in the mean time.\n\n[Graph of 3.0](http://skitch.com/aaron.patterson/fghg8/arnew31):\n![3.0 graph](https://img.skitch.com/20110627-c2kr8xwqa4x2kiecpdgwyspecg.preview.jpg)\n\n[Graph of 3.1](http://skitch.com/aaron.patterson/fghgk/arnew31):\n\n![3.1 graph](https://img.skitch.com/20110627-1dcj3fcsdqtk4xp3ihan9canyw.preview.jpg)\n\nEdit: added links to larger images.\n", "created_at": "2011-06-27 18:20:42", "user": 3124, "id": 1449354}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1457729", "text": "I think we can close this now.  I used this script for benchmarking:\n\n``` ruby\nrequire 'active_record'\nrequire 'benchmark'\n\np ActiveRecord::VERSION::STRING\n\nActiveRecord::Base.establish_connection(\n  :adapter  => \"sqlite3\",\n  :database => \":memory:\"\n)\n\nActiveRecord::Base.connection.execute(\"CREATE TABLE active_record_models (id INTEGER UNIQUE, title STRING, text STRING)\")\n\nclass ActiveRecordModel < ActiveRecord::Base; end\nActiveRecordModel.new\n\nN = 100_000\nBenchmark.bm { |x| x.report('new') { N.times { ActiveRecordModel.new } } }\n```\n\nI got these results:\n\n```\n[aaron@higgins activerecord (3-1-stable)]$ ruby -I lib test.rb\n\"3.1.0.rc4\"\n      user     system      total        real\nnew  2.500000   0.010000   2.510000 (  2.527923)\n[aaron@higgins activerecord (3-0-stable)]$ ruby -I lib test.rb\n\"3.0.9\"\n      user     system      total        real\nnew  2.490000   0.020000   2.510000 (  2.535049)\n```\n\nTimes would vary slightly.  Sometimes 3.1.0 would be faster, sometimes not.  They are approximately the same speed, so I think we can close this ticket.\n\nA few interesting things:\n- Asking for `scope` is very expensive. That is a major reason for the performance problems in this ticket.  Creating AR objects within a scope will still be quite slow compared to non scope creation (but I think this is true for 3.0 too).\n- 3.1.0 creates 7 hashes per AR object where 3.0.x creates 4 (we have new caches in 3.1)\n- 3.1.0 makes more method calls from `AR::Base#initialize`\n- Some of these performance improvement commits could be applied to 3.0.x too\n\nIt took these commits to bring the time down:\n\ne0fae72 remove useless assignment\nd864616 lock_optimistically is typically true, so evaluate the common failure case first\n558b5bb reduce object allocation during AR instantiation\n196f92f remove the check for needs_type_condition? because ensure_proper_type will pick up the type column\n992b3b5 stop using && for the short circuit side effect\n5d954b4 let strings be converted to symbols inside the interpreter\n9fd0d91 avoice paying hash cost if there are no serialized attributes\n2fe088a cache column defaults for AR object instantiation\nb927f0a AR object instantiation is ~30% faster in the simple case\n0de56aa initialize instance variables\n3a14e6f oops! remove debugging codes\n0abb7b8 default create_with_value to a hash so we can eliminate conditionals, add test surrounding create_with(nil) behavior\n\n@paul thank you for reporting this issue.  I appreciate it! :-)\n", "created_at": "2011-06-28 18:14:17", "user": 3124, "id": 1457729}], "assignees": [3124, 3124], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "While converting an application from mysql to postgres I noticed executing aggregate functions using AR select returns string instead of appropriate type.\n\nrails/activerecord 3.0.8\n\n---Postgres 9.04, gem 'pg', :require => 'pg'\n\nruby-1.9.2-p180 :001 > Response.select('count(*) as cnt').first.cnt\n => \"804\" \n\nruby-1.9.2-p180 :002 > Response.select('avg(value) as mean').first.mean\n => \"3.5\" \n\n---MySQL 5.1.56, gem 'mysql2', '< 0.3'\n\nruby-1.9.2-p180 :001 > Response.select('count(*) as cnt').first.cnt\n => 804 \n\nruby-1.9.2-p180 :002 > Response.select('avg(value) as mean').first.mean\n => 3.5 \n", "labels": [], "number": 1718, "updated_at": "2015-02-17 15:37:38", "user": 4262, "closed_at": "2011-06-23 21:58:43", "id": 1062747, "title": "Postgres aggregate functions return string instead of integer or float", "url": "https://api.github.com/repos/rails/rails/issues/1718", "created_at": "2011-06-15 18:06:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387250", "text": "Just use the corresponding ActiveRecord methods: Instead of \"Response.select('count(*) as cnt').first.cnt\" use \"Response.count\" or instead of \"Model.select('sum(visits) as cnt').first.cnt\" use \"Model.sum(\"visits\")\". This way you get consistent behavior over the return type of aggregate functions. \n\nI´m unsure if this should be treated as an issue as it can easily be solved. IMHO this can be closed. \n", "created_at": "2011-06-17 10:10:24", "user": 202410, "id": 1387250}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387680", "text": "I digged depper in the ActiveRecord::PostgreSQLAdapter#result_as_array method as this method is called in \"Model.select\". If using \"Model.select\" with Postgresql there is no attempt made to transform incoming (via pg_ext) postgres data to the appropriate ruby type except for BYTEA_COLUMN_TYPE_OID´s and MONEY_COLUMN_TYPE_OID´s. I don´t know why this is not implemented as this is possible by extending the method in the same way as it is already done for the two mentioned OID types. See (absolutely work in progress, I just try to demonstrate the basic principle) this gist: https://gist.github.com/1031281.\n", "created_at": "2011-06-17 11:58:15", "user": 202410, "id": 1387680}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1406398", "text": "@theofer - in my use case I need named parameters on a select on a complicated join, so I don't believe the built in \"Response.count\" methods will work for me.  Thanks for digging in, IMHO the fact that MySQL and Postgres respond differently is cause for a patch\n", "created_at": "2011-06-20 22:29:51", "user": 4262, "id": 1406398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1408850", "text": "If you need to fire raw sql to the database in order to perform a count on the resultset one could use \"Response.count_by_sql( ... )\" – what about just using this ;-) ? The fact that postgres- and mysql-adapter behave differently is arguably not nice but already in production and still pretty easy to work around. Many applications work by assuming postgres used with custom sql always returns string values. Simply changing and correcting this behavior would break a lot of applications when updating. Maybe it´s best to correct this on a bigger release (3.1 or maybe better 3.2) when change and incompatibility is more tolerated. I´m short in time at the moment but try to come back later on this... \n", "created_at": "2011-06-21 08:49:00", "user": 202410, "id": 1408850}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1415173", "text": "I understand that fixing this behavior could break apps...but unfortunately I have an app that is broken right now because it depended on active record performing the same regardless of database adapter. ;)  I guess my argument is uniform behavior, whether its a string or integer (although I would prefer count to return an integer or float) in all cases is less important.\n", "created_at": "2011-06-22 01:31:22", "user": 4262, "id": 1415173}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1415343", "text": "This bit us recently when using COALESCE in a count query; works swimmingly on MySQL, failed when deployed to Heroku.  But correcting this in a later, more major release is probably the best course (though I can't imagine a case where you'd want a string back from COUNT, but I've seen stranger things...).\n", "created_at": "2011-06-22 02:24:56", "user": 95, "id": 1415343}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1428806", "text": "@jm - The heroku deploy is exactly where I got bit as well.  It turns out local development on Postgres is a must\n", "created_at": "2011-06-23 21:58:43", "user": 4262, "id": 1428806}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/74686509", "text": "+1 for fixing this. \n\nI hit this bug just coincidentally, discovering it in a rare case, where my app happily added together two strings to show a sum (making 2+4=24) instead of the two integers it expected.\n\nI can't either imagine fixing this would break a lot of apps, since if they expect a string back from COUNT, people would presumably already do `to_i` on the result, if using it further, and doing `to_i` on an integer would return the same result anyways.\n\nReferencing the previous discussion:\npostgres- and mysql-adapter should behave the same, for them to be interchangeable. Otherwise it would defeat the purpose of having an ORM in the first place.\n\nThe app I'm workin on is on `gem 'rails', '3.2.13'`, so please do tell me if this has been fixed in a newer rails version. It's been a few years since this was first discovered in 2011, after all.\n", "created_at": "2015-02-17 15:33:16", "user": 459282, "id": 74686509}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "This cherry-picks baf2a9c for 3-1-stable.\n", "labels": [], "number": 1719, "updated_at": "2014-07-03 04:58:06", "user": 161, "closed_at": "2011-06-15 18:21:45", "id": 1062851, "title": "Fix generated JavaScript for mountable engine in 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1719", "created_at": "2011-06-15 18:20:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Is the AR::Relation syntax `order(\"a asc, b asc\")` intended to be a valid way to sort on multiple columns? That syntax almost works but fails when the PostgreSQL adapter tries to grab the column names to include them in the SELECT list of a DISTINCT query (postgresql_adapter.rb:933-943 `def distinct`).\n\nHere's a failing test against master (078bdc6) under PostgreSQL:\n\n``` ruby\n# test/cases/relations_test.rb\ndef test_finding_with_cross_table_order_and_limit\n  tags = Tag.includes(:taggings).order(\"tags.name asc, taggings.taggable_type asc\").limit(1).to_a\n  assert_equal 1, tags.length\nend\n```\n\nThe test passes if you change the order statement to `order(\"tags.name asc\", \"taggings.taggable_type asc\")` or `order(\"tags.name asc\").order(\"taggings.taggable_type asc\")`. I don't know whether the original syntax is supposed to be supported, but it would be nice to either make it work cleanly or raise an error. Thanks!\n", "labels": [], "number": 1720, "updated_at": "2011-06-24 20:09:43", "user": 4621, "closed_at": "2011-06-24 20:09:43", "id": 1063044, "title": "PostgreSQL: invalid SQL when ordering by multiple columns in the same string", "url": "https://api.github.com/repos/rails/rails/issues/1720", "created_at": "2011-06-15 18:53:37", "comments": [], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Using http://api.rubyonrails.org/classes/ActiveSupport/Benchmarkable.html#method-i-benchmark in a view will cause the view to be output multiple times. It doesn't matter which erb tag is used to benchmark, though the non-outputting version will cause a deprecation warning.\n\nA simple example:\n\nHeading\n<%= benchmark(\"Benchmarking\") do %>\nHello\n<% end %>  \n\nThis will output :\n\nHeading\nHello\nHeading\nHello\n\nAn inline version works as expected:\n\nHeading\n<%= benchmark(\"Benchmarking\") { \"Hello\" } %>\n", "labels": [], "number": 1721, "updated_at": "2012-01-07 09:18:48", "user": 5836, "closed_at": "2012-01-07 09:18:48", "id": 1063183, "title": "benchmark in view outputs view multiple times", "url": "https://api.github.com/repos/rails/rails/issues/1721", "created_at": "2011-06-15 19:01:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1549724", "text": "We should make a benchmark helper method which actually use the AS one and make use of the capture trick\n", "created_at": "2011-07-11 20:40:17", "user": 52642, "id": 1549724}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "The `select` form helper generates a select tag with options from the given `[key, value]` pairs. This works only for \"flat\" collections, but I'd like to have it work with nested ones as well. An example:\n\n```\n@post = Post.new\nselect(\"post\", \"origin\", {\n  \"Africa\" => [[\"South Africa\", \"sa\"], [\"Somalia\", \"so\"]],\n  \"Europe\" => [[\"Denmark\", \"dk\"], [\"Ireland\", \"ie\"]],\n})\n```\n\nCurrently, `select` uses \"Africa\" and \"Europe\" as the content of the option tags, and calls `to_s` on the arrays for the values. With this pull request, the result would instead be something like this:\n\n```\n<select id=\"post_origin\" name=\"post[origin]\">\n  <optgroup label=\"Africa\">\n    <option value=\"sa\">South Africa</option>\n    <option value=\"so\">Somalia</option>\n  </optgroup>\n  <optgroup label=\"Europe\">\n    <option value=\"dk\">Denmark</option>\n    <option value=\"ie\">Ireland</option>\n  </optgroup>\n</select>\n```\n\nInternally, the choices are simply handed to `grouped_options_for_select` if the collection is more than one level deep.\n", "labels": [], "number": 1722, "updated_at": "2014-07-03 04:58:13", "user": 124255, "closed_at": "2011-07-11 17:25:04", "id": 1063317, "title": "Make \"select\" helper handle nested collections", "url": "https://api.github.com/repos/rails/rails/issues/1722", "created_at": "2011-06-15 19:25:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1377509", "text": "+1\n", "created_at": "2011-06-15 23:03:43", "user": 87115, "id": 1377509}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386457", "text": "+1\n", "created_at": "2011-06-17 07:11:58", "user": 207112, "id": 1386457}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544047", "text": "This looks great. Do you mind merge and rebased your patch against current master so we can merge it in? We'd really like the test case and implementation into a single commit.\n\nThank you.\n", "created_at": "2011-07-11 02:40:21", "user": 4912, "id": 1544047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544718", "text": "I rebased the code against the current master and force-pushed, so it should merge cleanly now. I also squashed the first test case and the first implementation attempt together. Is that okay or should I just clump it all in a single commit? Personally, I'd prefer to keep it as it is right now, since the history might be useful, even if it is just a small patch.\n", "created_at": "2011-07-11 07:19:29", "user": 124255, "id": 1544718}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546831", "text": "We'd more prefer them to be squashed into single commit. The commit (patch) should coming with test case, documentation, implementation, and guide update (If applicable.) Would you mind squashed them together again.\n\nThanks a lot. :)\n", "created_at": "2011-07-11 14:28:56", "user": 4912, "id": 1546831}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1547596", "text": "Okay then, I squashed them into a single commit and rebased against master again. Thanks for merging :).\n", "created_at": "2011-07-11 16:11:30", "user": 124255, "id": 1547596}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I got the  errror \"undefined method `prerequisites' for nil:NilClass\" when I run ake db:migrate\nhere is my situation\nUsing railties (3.0.8.rc1)\nUsing rails (3.0.8.rc1)\nUsing rspec-core (2.5.2)\nUsing rspec-expectations (2.5.0)\nUsing rspec-mocks (2.5.0)\nUsing rspec (2.5.0)\nUsing rspec-rails (2.5.0)\nUsing webrat (0.7.1)\n\npriidikvaikla said \"upgrade to rspec-rails version 2.6.1.beta1 fixed it\"\nand how to upgrade? when I run gem install rspec-rails and I got an other error \"activemodel requires activesupport (=3.0.8, runtime)\"\n\nsiong1987  said \"using the edge rspec-rails\". how to do?\nhelp\n", "labels": [], "number": 1723, "updated_at": "2011-12-10 15:20:37", "user": 834559, "closed_at": "2011-06-16 12:57:32", "id": 1064867, "title": "Rake 0.9.2, Rails 3.0.8 rc1: undefined method `prerequisites' for nil:NilClass", "url": "https://api.github.com/repos/rails/rails/issues/1723", "created_at": "2011-06-16 00:30:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379214", "text": "You should read this @wycats article. http://yehudakatz.com/2011/05/30/gem-versioning-and-bundler-doing-it-right/\n", "created_at": "2011-06-16 07:15:21", "user": 9347, "id": 1379214}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380723", "text": "I fixed it. thanks dmathieu\n", "created_at": "2011-06-16 12:57:32", "user": 834559, "id": 1380723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3091294", "text": "when running \"bundle exec rake db:migrate\" it would result in:\nrake aborted!\nundefined method `prerequisites' for nil:NilClass\n\nI googled it and tried many things but this FINALLY solved my issue. \nThanks ...\n", "created_at": "2011-12-10 15:20:37", "user": 1134452, "id": 3091294}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Users can disable this by setting `cast: false` in database.yml\n", "labels": [], "number": 1724, "updated_at": "2014-07-03 04:58:19", "user": 11571, "closed_at": "2011-06-16 03:23:16", "id": 1065305, "title": "re-enable eager-casting for mysql2", "url": "https://api.github.com/repos/rails/rails/issues/1724", "created_at": "2011-06-16 03:19:52", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes timezone issue. \n", "labels": [], "number": 1725, "updated_at": "2014-06-25 03:58:34", "user": 3948, "closed_at": "2011-06-16 08:59:35", "id": 1065548, "title": "Bump mysql2 to 0.3.5", "url": "https://api.github.com/repos/rails/rails/issues/1725", "created_at": "2011-06-16 05:16:56", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379150", "text": "This update will fix the Time/DateTime failures\n\nhttps://github.com/rails/rails/commit/e445a79562be1700347c78acced81ac20c869a30#commitcomment-432821\n", "created_at": "2011-06-16 07:03:04", "user": 3948, "id": 1379150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes the failures. \n", "labels": [], "number": 1726, "updated_at": "2014-06-25 16:27:39", "user": 3948, "closed_at": "2011-06-16 12:02:19", "id": 1065552, "title": "Mysql bump to 0.3.5", "url": "https://api.github.com/repos/rails/rails/issues/1726", "created_at": "2011-06-16 05:19:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379148", "text": "This update will fix the Time/DateTime failures\n\nhttps://github.com/rails/rails/commit/e445a79562be1700347c78acced81ac20c869a30#commitcomment-432821\n", "created_at": "2011-06-16 07:02:38", "user": 3948, "id": 1379148}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380428", "text": "It's required in 3-1-stable also.\n\n/cc @josevalim\n", "created_at": "2011-06-16 11:56:47", "user": 3948, "id": 1380428}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The original version matchs as follows\n- /foo\n- /foo/bar\n- /foo/bar/1\n- /foo.json  (Routing Error)\n- /foo/bar.json  (Routing Error)\n- /foo/bar/1.json\n\nThis pull request corrects these two routing erros.\n", "labels": [], "number": 1727, "updated_at": "2015-08-16 03:51:11", "user": 4557, "closed_at": "2011-06-16 09:11:36", "id": 1065623, "title": "Improve the legacy wild controller route in app templates", "url": "https://api.github.com/repos/rails/rails/issues/1727", "created_at": "2011-06-16 05:49:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379217", "text": "This is only documentation changes. You should commit it on docrails. https://github.com/lifo/docrails\nIt has public commit policy. You don't have to make a pull request there.\n", "created_at": "2011-06-16 07:16:55", "user": 9347, "id": 1379217}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fixes merge errors that crept in to the active record validations guide while resolving conflicts.\n", "labels": [], "number": 1728, "updated_at": "2014-06-15 01:20:05", "user": 146214, "closed_at": "2011-06-16 13:19:05", "id": 1065674, "title": "Doc merge fixes (3-1-stable)", "url": "https://api.github.com/repos/rails/rails/issues/1728", "created_at": "2011-06-16 06:11:06", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In #underscore gsub! is used to modify string, when the string is a SafeBuffer instance an exception will be raised. It cause errors when you use radio_button with translated string:\n\n```\nActionView::Template::Error (Cannot modify SafeBuffer in place):\n    25:     <%= f.radio_button :signup_type, t('site.account_signup_close_label') %>\n```\n", "labels": [], "number": 1729, "updated_at": "2014-06-26 08:59:52", "user": 5958, "closed_at": "2011-06-16 13:22:46", "id": 1066122, "title": "Fix underscore can't work with html safe string", "url": "https://api.github.com/repos/rails/rails/issues/1729", "created_at": "2011-06-16 08:39:53", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1379918", "text": "What's the backtrace for your error? Trying to track down where the SafeBuffer is created and what's doing the underscore.\n", "created_at": "2011-06-16 09:53:54", "user": 6321, "id": 1379918}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380150", "text": "It turns out the SafeBuffer is returned by a modified (in our project) version of I18n.t. Please close this pull request, sorry for the noise :-)\n", "created_at": "2011-06-16 10:43:31", "user": 5958, "id": 1380150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400287", "text": "This fix may still be necessary because today I found I18n.t itself can return SafeBuffer - if your key is ended with _html.\n", "created_at": "2011-06-20 02:36:25", "user": 5958, "id": 1400287}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400687", "text": "If your string really does contain HTML then you shouldn't be calling things like underscore, camelize, etc. since those may alter the HTML code. If somewhere in the Rails code those methods are being called (e.g humanize on a string in the label form helper) then those method need to be fixed not underscore itself.\n", "created_at": "2011-06-20 05:35:31", "user": 6321, "id": 1400687}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400776", "text": "I don't think whether the passed in argument is HTML should be underscore's concern. It should work for all string-like objects. If you check all methods in activesupport/lib/active_support/inflector/methods.rb, you'll find underscore is the only one use gsub! and incompatible with SafeBuffer.\n", "created_at": "2011-06-20 06:01:13", "user": 5958, "id": 1400776}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1401398", "text": "The reason for the _html feature in I18n is specifically so that HTML code can be localized - if there's no HTML don't use _html for a key. You're correct in saying that underscore shouldn't have to worry about whether the argument is HTML or not and that's the root of the problem - should SafeBuffer be like a String or not, i.e. should we use inheritance or composition. \n\nWith the benefit of hindsight it'd probably been better if was clear that SafeBuffer is not a string - once you've modified it with anything like gsub then you have to treat it as dirty and escape the whole string again which is likely to lead to unexpected double escaping bugs. The most you should be able to do with a SafeBuffer is concat together with another String (in which case the String is escaped)  or with another SafeBuffer (in which case no extra escaping is performed). I'd probably go so far as to add a warning similar to the warning raised when a mass-assignment variable is ignored when a SafeBuffer is converted to a string.\n\nI think the method name of html_safe has partly led to the confusion over how SafeBuffer is meant to be used - people have been using to say \"this string doesn't contain anything dangerous\" where what it really means is \"this string may contain HTML code that's already been escaped, don't escape it again\". This has led to people using it pre-emptively in their helpers - the only time you should be calling html_safe in your helpers is if you're building chunks of HTML. Even then you probably don't need to call html_safe if you're using tag, content_tag, etc.\n", "created_at": "2011-06-20 08:51:25", "user": 6321, "id": 1401398}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1401737", "text": "I agree. But I'm afraid people will eventually stumble upon here. SafeBuffer is used more and more in applications, plugins and rails itself, sometimes application programmer can't control the thing he get is a String or SafeBuffer.\n", "created_at": "2011-06-20 10:20:28", "user": 5958, "id": 1401737}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello.\n\nI'm doing some testing of Rails3.1 here, specifically the RC4 version, and I'm having some trouble with the responses from a RESTful action (in my case, a create action) using a :js format.\n\nAs I've understood it, using respond_to :js and respond_with, an XHR-request to a create/update action where the model validation fails, should return a \"422 Unprocessable Entity\" header, and a JSON body that highlights the details of the validation error, for instance:\n\n``` javascript\n{ name: [\"Can't be blank\"] }\n```\n\nIt does, as expected, return the correct header, but an error is being raised from within the ContentLength rack middleware:\n\n```\n[2011-06-16 14:11:34] ERROR NoMethodError: undefined method `bytesize' for :name:Symbol\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/rack-1.3.0/lib/rack/utils.rb:250:in `bytesize'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:28:in `block in call'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/rack-1.3.0/lib/rack/lock.rb:7:in `block in each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `block (2 levels) in each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `block in each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:134:in `each_key'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:134:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/actionpack-3.1.0.rc4/lib/action_dispatch/http/response.rb:43:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activerecord-3.1.0.rc4/lib/active_record/query_cache.rb:37:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/activerecord-3.1.0.rc4/lib/active_record/connection_adapters/abstract/connection_pool.rb:429:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/rack-1.3.0/lib/rack/lock.rb:7:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:26:in `call'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/log_tailer.rb:14:in `call'\n    /Users/Trond/.rvm/gems/ruby-1.9.2-p180@bytesize_test/gems/rack-1.3.0/lib/rack/handler/webrick.rb:59:in `service'\n    /Users/Trond/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:111:in `service'\n    /Users/Trond/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n    /Users/Trond/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/webrick/server.rb:183:in `block in start_thread'\n```\n\nI've created a minimal test application highlighting the issue at https://github.com/tanordheim/rails_3_1_bytesize_error_test. This is tested on Ruby1.9.2-p180 using Rails 3.1.0.rc4 and master with a blank gemset.\n\nI've included a simple test in this project as well (found in test/functional/tests_controller_test.rb) to highlight the problem, but the tests actually pass - though the response body from the JS create request only contains the string \"name\", with no information as to how the validation failed. However, by starting up the server and testing the controllers via a browser (in my case Firefox 4.0.1), I get the following error when submitting the form without filling out the text field:\n\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\">\n<HTML>\n  <HEAD><TITLE>Internal Server Error</TITLE></HEAD>\n  <BODY>\n    <H1>Internal Server Error</H1>\n    undefined method `bytesize' for :name:Symbol\n    <HR>\n    <ADDRESS>\n     WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18) at\n     localhost:3000\n    </ADDRESS>\n  </BODY>\n</HTML>\n```\n\nI apologize if this isn't supposed to work the way I imagined, but in either case having a request end up in an error seems wrong. I'll gladly assist in fixing the issue, but I'm not familiar enough with the Rails code to know where to start digging. If anyone has any pointers or ideas as to what might happen here, I can attempt to write some tests for Rails to try and reproduce the issue there.\n", "labels": [], "number": 1730, "updated_at": "2011-07-12 02:04:35", "user": 49933, "closed_at": "2011-07-11 18:51:02", "id": 1067007, "title": "undefined method `bytesize' in JSON response", "url": "https://api.github.com/repos/rails/rails/issues/1730", "created_at": "2011-06-16 12:19:31", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1380531", "text": "Actually, I just tested the Rails application I linked to in the previous post with Ruby 1.8.7-p302 and a clean gemset, the error raised has now changed slightly:\n\n```\n[2011-06-16 14:19:47] ERROR NoMethodError: undefined method `bytesize' for [:name, \"can't be blank\"]:Array\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/utils.rb:250:in `bytesize'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:28:in `call'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/lock.rb:7:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activesupport-3.1.0.rc4/lib/active_support/ordered_hash.rb:145:in `each_key'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activesupport-3.1.0.rc4/lib/active_support/ordered_hash.rb:145:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activesupport-3.1.0.rc4/lib/active_support/ordered_hash.rb:145:in `each_key'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:134:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/actionpack-3.1.0.rc4/lib/action_dispatch/http/response.rb:43:in `__send__'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/actionpack-3.1.0.rc4/lib/action_dispatch/http/response.rb:43:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activerecord-3.1.0.rc4/lib/active_record/query_cache.rb:37:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/activerecord-3.1.0.rc4/lib/active_record/connection_adapters/abstract/connection_pool.rb:429:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/lock.rb:7:in `each'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:26:in `call'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/rack/log_tailer.rb:14:in `call'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/handler/webrick.rb:59:in `service'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/httpserver.rb:104:in `service'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/httpserver.rb:65:in `run'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:173:in `start_thread'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:162:in `start'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:162:in `start_thread'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:95:in `start'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:92:in `each'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:92:in `start'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:23:in `start'\n    /Users/Trond/.rvm/rubies/ruby-1.8.7-p302/lib/ruby/1.8/webrick/server.rb:82:in `start'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/handler/webrick.rb:13:in `run'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/rack-1.3.0/lib/rack/server.rb:265:in `start'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/commands/server.rb:70:in `start'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/commands.rb:54\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/commands.rb:49:in `tap'\n    /Users/Trond/.rvm/gems/ruby-1.8.7-p302@bytesize_test/gems/railties-3.1.0.rc4/lib/rails/commands.rb:49\n    script/rails:6:in `require'\n    script/rails:6\n```\n\nAs mentioned in the previous post, I was a bit puzzled as to why the response body only contained \"name\", and not some kind of JSON response describing the error in more detail. With Ruby1.8.7 it actually seems to add this information to the response body.\n", "created_at": "2011-06-16 12:22:56", "user": 49933, "id": 1380531}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1510348", "text": "I am getting this error as well and have a custom validation. I am using Inherited resources and it also occurs when sending a form by Ajax, Here are relevant parts of my code and the console response and gemfile. As I am a newbie will try and debug and find out why this is happening\n\n#app/models/country.rb\nclass Country\n  include Mongoid::Document\n  include Mongoid::I18n\n  include Mongoid::Slug\n  include Location\n\n  has_many :regions, index: true\n  has_many :places,  index: true\n\n  index :name, unique: true\n\n  slug :name do |doc|\n    doc.name_translations[\"en\"]\n  end\n\n  attr_accessible :name, :guide_title, :guide_content, :guide_source, :location, :zoom, :areas, \n                  :name_translations, :guide_title_translations, :guide_content_translations\n  accepts_nested_attributes_for :name, :guide_title, :guide_content \n\n  validates_default_locale :name \n  validates_with EnglishNameUnique\nend\n\n#app/admin/countries_controller.rb\n\nmodule Admin\n  class CountriesController < LocationsController\n    respond_to :html\n    respond_to :js\n\n```\ndef create\n   create! do |success, failure|\n     failure.js {render :error_message}\n     success.js do\n       @countries = Country.asc(\"slug\").to_a\n       @countries = @countries.paginate\n     end\n   end\n end\n\n def update\n   old_slug = @country.slug\n   update! do |success, failure|\n     failure.js {render :error_message}\n     success.js do\n       #@activity.reload\n       render :update, :locals => {:old_slug => old_slug}\n     end\n   end\n end\n```\n\n   end\nend\n\n#log\nStarted GET \"/admin/countries/new?locale=en\" for 127.0.0.1 at 2011-07-06 16:44:05 +0800\n  Processing by Admin::CountriesController#new as JS\n  Parameters: {\"locale\"=>\"en\"}\nMONGODB what2do_asia_development['users'].find({:_id=>BSON::ObjectId('4e13e3499a4b7c395b000001')})\ndefault_url_options is passed options: {}\nRendered application/_error_messages.html.haml (0.1ms)\nRendered admin/locations/_basic_info.html.haml (260.6ms)\nRendered admin/locations/_map.html.haml (0.1ms)\nRendered admin/locations/_geodata.haml (10.4ms)\nRendered admin/locations/_form.html.haml (406.2ms)\nRendered admin/countries/new.js.haml (418.3ms)\nCompleted 200 OK in 449ms (Views: 432.4ms | Mongo: 0.4ms)\n[2011-07-06 16:44:17] ERROR NoMethodError: undefined method `bytesize' for :name:Symbol\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/rack-1.3.0/lib/rack/utils.rb:250:in`bytesize'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:28:in `block in call'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/rack-1.3.0/lib/rack/lock.rb:7:in`block in each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `block (2 levels) in each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in`each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:135:in `block in each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:134:in`each_key'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/activemodel-3.1.0.rc4/lib/active_model/errors.rb:134:in `each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/actionpack-3.1.0.rc4/lib/action_dispatch/http/response.rb:43:in`each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/rack-1.3.0/lib/rack/lock.rb:7:in `each'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/railties-3.1.0.rc4/lib/rails/rack/content_length.rb:26:in`call'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/railties-3.1.0.rc4/lib/rails/rack/debugger.rb:21:in `call'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/railties-3.1.0.rc4/lib/rails/rack/log_tailer.rb:14:in`call'\n    /Users/dbk/.rvm/gems/ruby-1.9.2-p180-patched@rails31/gems/rack-1.3.0/lib/rack/handler/webrick.rb:59:in `service'\n    /Users/dbk/.rvm/rubies/ruby-1.9.2-p180-patched/lib/ruby/1.9.1/webrick/httpserver.rb:111:in`service'\n    /Users/dbk/.rvm/rubies/ruby-1.9.2-p180-patched/lib/ruby/1.9.1/webrick/httpserver.rb:70:in `run'\n    /Users/dbk/.rvm/rubies/ruby-1.9.2-p180-patched/lib/ruby/1.9.1/webrick/server.rb:183:in`block in start_thread'\n\n#gemfile\n\nsource 'http://rubygems.org'\ngem 'rails', \"3.1.0.rc4\"#:git => \"git://github.com/rails/rails.git\", :branch => \"3-1-stable\"\ngem 'sass'\ngem 'coffee-script'\ngem 'uglifier', :git => \"git://github.com/lautis/uglifier.git\"\ngem \"jquery-rails\", :git => \"git://github.com/rails/jquery-rails.git\"\ngem \"pjax_rails\", :git => \"git://github.com/rails/pjax_rails.git\"\ngem \"haml\"\ngem \"tilt\", :git => \"git://github.com/rtomayko/tilt.git\"\n\n# Authentication/Authorization\n\ngem \"devise\", :git => \"https://github.com/plataformatec/devise.git\"\ngem 'omniauth', '~> 0.2.0'\ngem 'cancan'\n\n# Databases\n\ngem \"bson_ext\", \">= 1.3.1\"\ngem \"mongoid\", \">= 2.0.2\"\ngem 'mongoid_i18n',:require => 'mongoid/i18n'\ngem 'mongoid_slug', :require => 'mongoid/slug'\ngem 'mongoid_geo', \"~> 0.6.0\", :require => 'mongoid/geo'\ngem 'mongo-rails-instrumentation', '~>0.2'\ngem 'mysql2', '~> 0.2.7'\ngem 'mysql'\n#gem \"mysql\", \"2.8.1\"\n\n# Uploads/Image Processing\n\ngem \"carrierwave\"\ngem \"mini_magick\"\n\n# Controllers and views\n\ngem 'to_lang'\ngem \"will_paginate\", \"~> 3.0.pre2\"\ngem 'inherited_resources'\ngem 'simple_form'\ngem 'sass-rails'#, :git => 'git://github.com/rails/sass-rails.git'\ngem 'compass', :git => 'git://github.com/chriseppstein/compass.git',:branch => \"master\", :require => false\ngem 'compass-960-plugin'\ngem \"coffee-filter\", :git => \"git://github.com/paulnicholson/coffee-filter.git\"\n", "created_at": "2011-07-06 08:47:31", "user": 99262, "id": 1510348}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548879", "text": "js format always returns 200, it is used for scripting.\n", "created_at": "2011-07-11 18:51:02", "user": 52642, "id": 1548879}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548880", "text": "I have fixed this issue recently in Rails.\n", "created_at": "2011-07-11 18:51:03", "user": 9582, "id": 1548880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548890", "text": "Ya, I wasn't seeing the bytesize error anyways doesn't return 422. @tanordheim tests are going to fail anyways because of that.\n", "created_at": "2011-07-11 18:52:19", "user": 52642, "id": 1548890}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1549773", "text": "@josevalim can you remember the commit or approximately when you committed it? Would be interesting to see the fix since I poked around quite a bit in what I believe was the correct code without figuring it out. I checked the commits for the last few days, but didn't find anything :)\n", "created_at": "2011-07-11 20:47:12", "user": 49933, "id": 1549773}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1551563", "text": "https://github.com/rails/rails/commit/9c9ec2172e46710d1d5ac513a4ff52df35fef51f\n", "created_at": "2011-07-12 02:04:35", "user": 9582, "id": 1551563}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Replace dev.rubyonrails.com plugin url with a dummy url\n", "labels": [], "number": 1731, "updated_at": "2014-06-19 10:59:30", "user": 146214, "closed_at": "2011-06-16 16:11:19", "id": 1068288, "title": "Replace dev.rubyonrails.com plugin url with a dummy url", "url": "https://api.github.com/repos/rails/rails/issues/1731", "created_at": "2011-06-16 16:00:45", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I am trying to dynamically include a javascript file based on a configuration option however I keep getting this error:\n\n```\nError compiling asset application.js:\nArgumentError: wrong number of arguments (3 for 1)\n  (in c:/Users/Dieter/Documents/event_calendar/vendor/assets/javascripts/event_calendar.js.erb:1)\n```\n\nwhen trying to run this code:\n\n``` javascript\n//<% require 'event_calendar' %>\n//= require <%= EventCalendar.config.javascript %>-calendar\n```\n\nI am currently using Rails 3.1.0.rc4\n", "labels": [], "number": 1732, "updated_at": "2011-07-25 04:33:38", "user": 27944, "closed_at": "2011-07-25 04:33:38", "id": 1068784, "title": ".js.erb not running through erb first", "url": "https://api.github.com/repos/rails/rails/issues/1732", "created_at": "2011-06-16 17:29:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1382924", "text": "Why not `<%= require 'event_calendar' %>`?\n", "created_at": "2011-06-16 17:53:12", "user": 9934, "id": 1382924}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1398456", "text": "It is parsed by ERB and I have found another method to do this, however it should be stated that this method should work as well.\n", "created_at": "2011-06-19 19:58:43", "user": 27944, "id": 1398456}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548384", "text": "I'm able to use a .js.erb file using 3-1-stable, can you provide an app that shows the issue?\n", "created_at": "2011-07-11 17:54:05", "user": 52642, "id": 1548384}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548428", "text": "My previous comment stated that yes it is parsed however the method in which I was trying to use it wasn't. I have resorted to calling require_asset directly instead of using the sprockets comment helpers.\n", "created_at": "2011-07-11 17:59:48", "user": 27944, "id": 1548428}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550210", "text": "can you push an app showing the issue to github?\n", "created_at": "2011-07-11 21:42:09", "user": 52642, "id": 1550210}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1554279", "text": "It seems that sprockets parser runs first replaces all require calls\nI have tried `<%= \"//= require alert.js\" %>`  renders  plain text file without requiring js\n", "created_at": "2011-07-12 13:46:19", "user": 166671, "id": 1554279}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637090", "text": "the error is at sprockets-2.0.0.beta.10/lib/sprockets/directive_processor.rb line 195 \nthe directive is of the form: \n[[1, \"require\", \"<%=\", \"Foo.js_file\", \"%>\"]]\n", "created_at": "2011-07-23 10:41:51", "user": 9192, "id": 1637090}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1637446", "text": "i am looking at this issue for the first time and i am still getting familiar with rails internals, so take this with a pinch of salt\n\nRight now there are two separate components, sprockets and action_view. Also, sprockets uses Tilt while action_view does not.\n\nIdeally i think, action_view should use tilt more and the whole sprockets thing should be a rendering strategy of ActionView\n\nI am trying to solve the problem by figuring out how to render a template from say a rake task\n\nPreviously, i tried to register_processor for sprockets, but that did not make sense\n\nAlso, sprockets has rudimentary templating, it reads a constant.yml file and uses erb syntax aka. <%= VAR_KEY %> \nto render the config set in constants.yml\n", "created_at": "2011-07-23 13:40:39", "user": 9192, "id": 1637446}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639012", "text": "i would also be interested in seeing an app with this issue pushed to github\n", "created_at": "2011-07-23 22:30:57", "user": 704877, "id": 1639012}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1639632", "text": "The sample app is at https://github.com/deepak/rails_issue_2182\nThe error backtrace is at https://gist.github.com/1102147\n", "created_at": "2011-07-24 02:57:52", "user": 9192, "id": 1639632}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1640867", "text": "I can confirm this behavior: using <%= \"//= require_tree ./test/\" %> in application.js.erb parses the erb correctly but misses the resulting //= require_tree ./test/ to actually require files from the test directory. It seems that the final parsing phase is skipped. \n\nusing //= require_tree ./<%= \"test\" %>/  in application.js.erb gives the me the same error as seen in the gist @deepak. \n", "created_at": "2011-07-24 14:14:03", "user": 202410, "id": 1640867}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1643051", "text": "It looks like this is a bug in sprocket's parser engine.  @josh can you take a look?\n", "created_at": "2011-07-25 02:05:21", "user": 3124, "id": 1643051}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1643423", "text": "The order of the processor evaluation is intentional here.\n\nIf you want to pragmatically require assets, see `require_asset` https://github.com/sstephenson/sprockets/blob/master/lib/sprockets/context.rb#L130-144\n", "created_at": "2011-07-25 04:33:37", "user": 137, "id": 1643423}], "assignees": [137, 137], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "[3.1.0.rc1] Plugins inside engines not eager-loaded properly and their\nrake tasks ignored\n\nWorking with the new support for plugins inside engines in Rails 3.1,\nI found that certain things that work for regular plugins don't work\nfor these new nested plugins. In particular, these methods in\nRails::Engine don't seem to understand that an engine could have\nnested plugins:\n# load_tasks\n# load_generators\n# load_console\n# eager_load!\n\nA solution which worked out for me is to move the calls to\nrailties.all { ... } from the overriding methods in Rails::Application\ninto Rails::Engine.\n", "labels": [], "number": 1733, "updated_at": "2014-06-26 18:05:46", "user": 826393, "closed_at": "2011-06-16 18:03:59", "id": 1068900, "title": "Cherry-picking patch for https://github.com/rails/rails/issues/1460 from 3-1-stable to master", "url": "https://api.github.com/repos/rails/rails/issues/1733", "created_at": "2011-06-16 17:58:15", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383150", "text": "Thanks @josevalim for taking this patch. How about issue #1458 which is related?\n", "created_at": "2011-06-16 18:19:44", "user": 826393, "id": 1383150}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "There seems to be a problem with regex $ variables and safe text:\n\n```\nruby-1.9.2-p136 :057 > def linkify_it(txt)\nruby-1.9.2-p136 :058?>   safe_text = ERB::Util::h(txt)\nruby-1.9.2-p136 :059?>   safe_text.gsub(/(^|\\s)(https?:\\/\\/([^\\s\\/]*)\\S*)(\\s|$)/i) {|m| puts \"safe txt: match '#{m}', $1 '#{$1}', $2 '#{$2}', $3 '#{$3}', $4 '#{$4}'\"}\nruby-1.9.2-p136 :060?>   txt.gsub(/(^|\\s)(https?:\\/\\/([^\\s\\/]*)\\S*)(\\s|$)/i) {|m| puts \"unsafe txt: match '#{m}', $1 '#{$1}', $2 '#{$2}', $3 '#{$3}', $4 '#{$4}'\"}\nruby-1.9.2-p136 :061?>   end\n => nil \nruby-1.9.2-p136 :062 > linkify_it(a)\nsafe txt: match ' hTTp://google.com ', $1 '', $2 '', $3 '', $4 ''\nunsafe txt: match ' hTTp://google.com ', $1 ' ', $2 'hTTp://google.com', $3 'google.com', $4 ' '\n => \"try thisit is fun\" \nruby-1.9.2-p136 :063 > a\n => \"try this hTTp://google.com it is fun\" \nruby-1.9.2-p136 :064 > linkify_it(\"try this hTTp://google.com it is fun\")\nsafe txt: match ' hTTp://google.com ', $1 '', $2 '', $3 '', $4 ''\nunsafe txt: match ' hTTp://google.com ', $1 ' ', $2 'hTTp://google.com', $3   'google.com', $4 ' '\n => \"try thisit is fun\" \n```\n\nSo for html_escaped strings, the $ variables are not being set. The used to, i.e. the above code worked fine in 3.0.6\n\nHere’s a gist of the problem:\n\nhttps://gist.github.com/1030065\ngit://gist.github.com/1030065.git\n", "labels": [], "number": 1734, "updated_at": "2011-06-19 14:32:21", "user": 766478, "closed_at": "2011-06-19 14:32:21", "id": 1069525, "title": "3.0.9 problem with $1, $2, etc. match vars not being set for safe text", "url": "https://api.github.com/repos/rails/rails/issues/1734", "created_at": "2011-06-16 19:53:45", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387945", "text": "Rails 3.1.0.rc4 is also affected by this problem.\nHere is a simple test case:\n\n``` ruby\ntest \"gsub\" do\n  assert_equal(\"3\", \"--3--\".html_safe.gsub(/--(\\d+)--/){$1})\nend\n```\n", "created_at": "2011-06-17 12:59:01", "user": 116019, "id": 1387945}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1389120", "text": "The problem is $\\* variables are scoped to the enclosing method.\nThere's a discussion about this here : http://www.ruby-forum.com/topic/198458\n\nUnfortunately, I'm afraid there's not much that can be done about it.\n", "created_at": "2011-06-17 16:09:13", "user": 9347, "id": 1389120}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1389429", "text": "Well, from my perspective, it worked in 3.0.6 and now doesn't in 3.0.9.   It works with non-safe strings as I showed above.  So it's the rails extensions breaking basic gsub() functionality that is very useful and used.....\n\nSo saying \"there's not much that can be done\" doesn't sit well...\n", "created_at": "2011-06-17 17:00:52", "user": 766478, "id": 1389429}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1389454", "text": "It's been changed between 3.0.7 and 3.0.8 because of a security issue.\nhttp://weblog.rubyonrails.org/2011/6/8/potential-xss-vulnerability-in-ruby-on-rails-applications\n\nhtml_safe objects are [SafeBuffer](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/output_safety.rb#L77) objects.\nThis object [overrides some unsafe methods](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/string/output_safety.rb#L139), transforming them to strings as they transform the object and therefore, it becomes unsafe.\n\nAs gsub transforms the object, it has to be overriden.\nBasically, the way of doing your gsub would be to work on unsafe strings. You can get one with `to_str`\n\n```\nstring = \"string\".html_safe #=> Returns a SafeBuffer object\nstring.to_str #=> Returns a new string\n```\n", "created_at": "2011-06-17 17:06:07", "user": 9347, "id": 1389454}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395300", "text": "NB: just cross-referencing, same issue as https://github.com/rails/rails/issues/1555\n@dmathieu thanks for linking http://www.ruby-forum.com/topic/198458 - best explanation/discussion I've seen of why the magic matching variables break when you attempt to intercept gsub.\n", "created_at": "2011-06-19 02:45:50", "user": 16432, "id": 1395300}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1397472", "text": "Closing as a duplicate of #1555\n", "created_at": "2011-06-19 14:32:21", "user": 6321, "id": 1397472}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Patch for #1458 - [3.1.0.rc1] App plugins initialized before engines and plugins inside engines\n\nIt seems that plugins inside a Rails 3.1 application proper (i.e. in /vendor/plugins) are initialized before engines and plugins inside engines.\n\nAfter some debugging, I found the culprit in Rails::Application::Railties#all:\n\n``` ruby\n  def all(&block)\n    @all ||= railties + engines + super\n    @all.each(&block) if block\n    @all\n  end\n```\n\nThe call to super here implicitly passes the &block argument, which has the unfortunate side-effect of adding the plugin initializers first (in front of other railties and engines) in the case of Rails::Engine#initializers:\n\n``` ruby\ndef initializers\n  initializers = []\n  railties.all { |r| initializers += r.initializers }\n  initializers += super\n  initializers\nend\n```\n\nThe solution here is to replace the super call with a call to #plugins.\n", "labels": [], "number": 1735, "updated_at": "2014-07-03 04:58:50", "user": 826393, "closed_at": "2011-06-16 20:14:49", "id": 1069603, "title": "Patch for #1458 - [3.1.0.rc1] App plugins initialized before engines and plugins inside engines", "url": "https://api.github.com/repos/rails/rails/issues/1735", "created_at": "2011-06-16 20:08:43", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1383946", "text": "Can you send the same pull request for master please?\n", "created_at": "2011-06-16 20:17:05", "user": 9582, "id": 1383946}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1384018", "text": "Patch for master submitted as #1737\n", "created_at": "2011-06-16 20:28:21", "user": 826393, "id": 1384018}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "With these models:\n\n```\nclass Permission < ActiveRecord::Base\n  belongs_to :group\nend\n\nclass Group < ActiveRecord::Base\n  has_many :permissions\nend\n```\n\nThen trying to do this:\n\n```\nPermission.where( :group => Group.first )\n```\n\nCauses this:\n\n```\n: SELECT \"permissions\".* FROM \"permissions\"  WHERE \"permissions\".\"group\" = 1766\nActiveRecord::StatementInvalid: PGError: ERROR:  column permissions.group does not exist\n```\n\nThis worked fine in Rails 3.0, and as far as I've been able to Google I haven't found any changes in behaviour noted elsewhere.  Using Squeel if that makes a difference.\n", "labels": ["activerecord"], "number": 1736, "updated_at": "2012-08-21 19:23:32", "user": 78062, "closed_at": "2012-08-21 19:23:32", "id": 1069617, "title": "Make PredicateBuilder recognise association names", "url": "https://api.github.com/repos/rails/rails/issues/1736", "created_at": "2011-06-16 20:11:55", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1384165", "text": "Please try it without any additional plugins and report back if you can reproduce the problem.\n", "created_at": "2011-06-16 20:50:11", "user": 1979, "id": 1384165}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1385669", "text": "Yeah, issue is reproducible in a new Rails 3.1 app.\n", "created_at": "2011-06-17 02:28:57", "user": 78062, "id": 1385669}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395636", "text": "I can confirm this issue with Rails 3.1 (3.1-stable latest git) and MySQL:\n\n```\nruby-1.9.2-p180 :001 > MediaObject.where(user: User.first)\nUser Load (0.5ms)  SELECT `users`.* FROM `users` LIMIT 1\nMediaObject Load (0.5ms)  SELECT `media_objects`.* FROM `media_objects` WHERE `media_objects`.`hidden` = 0 AND `media_objects`.`user` = 1 ORDER BY media_objects.author ASC, media_objects.year ASC, media_objects.album ASC, media_objects.disc_number ASC, media_objects.position ASC\nActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'media_objects.user' in 'where clause': SELECT `media_objects`.* FROM `media_objects`  WHERE `media_objects`.`hidden` = 0 AND `media_objects`.`user` = 1 ORDER BY media_objects.author ASC, media_objects.year ASC, media_objects.album ASC, media_objects.disc_number ASC, media_objects.position ASC\n```\n", "created_at": "2011-06-19 07:17:03", "user": 12844, "id": 1395636}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1427340", "text": "Hello,\n\nI am pretty sure this is not a regression. In 3.0 you can do `Permission.where(:group_id => Group.first)`, but not `Permission.where(:group => Group.first)`. See my test here: https://gist.github.com/6d4d9e8339058812dc75\n\nMyself and @tenderlove both agree that the second format ought to work, so I'll leave this open and hopefully we can implement it for 3.2.\n\nI think this feature is probably implemented in squeel or metawhere, which might have caused the confusion. Summoning @ernie in case he has thoughts :)\n\nCheers\n", "created_at": "2011-06-23 18:31:37", "user": 1979, "id": 1427340}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1427441", "text": "Thanks, @jonleighton, and you're right.\n\nMetaWhere did support ActiveRecord values. (see section on \"Using ActiveRecord objects as condition values\" [here](https://github.com/ernie/meta_where)). I stripped the feature from Squeel, though. \n\nWhen it came time to rewrite, I looked at the ugly [hackery](https://github.com/ernie/meta_where/blob/master/lib/meta_where/visitors/predicate.rb#L105) I pulled to make this happen, and decided in a fit of depression that it just wasn't worth it, for syntactic sugar. It did come in handy with polymorphic belongs_to, though.\n\nIf something similar goes into core in the future, I'll obviously follow suit with Squeel.\n", "created_at": "2011-06-23 18:45:49", "user": 14947, "id": 1427441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1427549", "text": "Thank you gentlemen for sorting this out and leaving it open for the future.  My sincerest apologies for the confusion, I will be more thorough in my testing in the future before submitting an issue.  I greatly appreciate the time and commitment you guys  have for Rails development and the community  =)\n", "created_at": "2011-06-23 19:01:25", "user": 78062, "id": 1427549}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2551480", "text": "+1\n", "created_at": "2011-10-28 00:58:54", "user": 4867, "id": 2551480}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2761177", "text": "+1\n", "created_at": "2011-11-16 15:41:03", "user": 204562, "id": 2761177}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5407548", "text": "@rafaelfranca seems @tenderlove and @jonleighton have different opinions on this. This is a similar to issue to #5067. It appears #5067 (or this one) can be closed since they are duplicated. This one has more discussion though :D\n\n> Myself (@jonleighton) and @tenderlove both agree that the second format ought to work, so I'll leave this open and hopefully we can implement it for 3.2.\n", "created_at": "2012-04-29 18:55:37", "user": 48928, "id": 5407548}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5407628", "text": "@twinturbo thanks\n", "created_at": "2012-04-29 19:05:10", "user": 47848, "id": 5407628}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7912866", "text": "Since this is more a feature request than a bug report, I'm closing in favor of continuing the discussion in the linked pull request.\n\nIn case the pull request does not get merged or goes forward, please feel free to start another discussion in the future using the core mailing list.\n\nThanks.\n", "created_at": "2012-08-21 19:23:32", "user": 26328, "id": 7912866}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Patch for #1735 / #1458 - [3.1.0.rc1] App plugins initialized before engines and plugins inside engines.\n\nIt seems that plugins inside a Rails 3.1 application proper (i.e. in /vendor/plugins) are initialized before engines and plugins inside engines.\n\nAfter some debugging, I found the culprit in Rails::Application::Railties#all:\n\n``` ruby\n  def all(&block)\n    @all ||= railties + engines + super\n    @all.each(&block) if block\n    @all\n  end\n```\n\nThe call to super here implicitly passes the &block argument, which has the unfortunate side-effect of adding the plugin initializers first (in front of other railties and engines) in the case of Rails::Engine#initializers:\n\n``` ruby\ndef initializers\n  initializers = []\n  railties.all { |r| initializers += r.initializers }\n  initializers += super\n  initializers\nend\n```\n\nThe solution here is to replace the super call with a call to #plugins.\n", "labels": [], "number": 1737, "updated_at": "2014-07-03 04:58:55", "user": 826393, "closed_at": "2011-06-16 20:57:00", "id": 1069685, "title": "Patch for [3.1.0.rc1] App plugins initialized before engines and plugins inside engines", "url": "https://api.github.com/repos/rails/rails/issues/1737", "created_at": "2011-06-16 20:27:38", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When you run 'rake test' there are several warnings about mismatched indentations at 'end' and 'def' or 'module' etc:\n\n```\n/Users/gazay/code/rails/actionpack/lib/action_dispatch/routing/mapper.rb:90: warning: mismatched indentations at 'end' with 'def' at 69\n/Users/gazay/.rvm/gems/ruby-1.9.2-p180/gems/nokogiri-1.4.4/lib/nokogiri/css/generated_parser.rb:675: warning: mismatched indentations at 'end' with 'module' at 11\n```\n\nSo the problem was in nokogiri gem 1.4.4 version, i found it was fixed (https://github.com/tenderlove/nokogiri/commit/f1e3133b0c689e619964217e2a5b3e055bbb2cc7) and bumped version to 1.4.5 stable. I suggest change version in Gemfile to 1.4.5, it solves this problem.\n", "labels": [], "number": 1738, "updated_at": "2014-06-27 15:19:39", "user": 29658, "closed_at": "2011-06-16 23:27:50", "id": 1069968, "title": "Fix several warnings: change version of nokogiri gem", "url": "https://api.github.com/repos/rails/rails/issues/1738", "created_at": "2011-06-16 21:21:00", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hello,\n\nUpon upgrading to 3.0.8 (3.0.9 is also affected) I found that the spam checking using Rakismet no longer worked. Was getting breaks with this exception when calling the \"spam?\" instance method:\n\nhttps://gist.github.com/de84c1242fdcffb98492 (this is in a stalker job, looks like it also threw hoptoad for a loop when trying to handle the error)\n\nWould normally look to these gems for the fix but considering that this was a tiny version increment and it works in 3.0.7 and below I figured this might be the place.\n", "labels": [], "number": 1739, "updated_at": "2012-08-16 18:20:39", "user": 47749, "closed_at": "2011-06-17 14:16:09", "id": 1070276, "title": "undefined method `bytesize' for nil:NilClass in 3.0.8 and 3.0.9 with Rakismet gem", "url": "https://api.github.com/repos/rails/rails/issues/1739", "created_at": "2011-06-16 22:18:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1384835", "text": "Looks like the CGI.escape in this bit from Rakismet is causing the problem:\n\n``` ruby\n      akismet = URI.parse(call_url(function))\n      _, response = Net::HTTP.start(akismet.host) do |http|\n        data = args.map { |k,v| \"#{k}=#{CGI.escape(v.to_s)}\" }.join('&')\n        http.post(akismet.path, data, Rakismet.headers)\n      end\n```\n", "created_at": "2011-06-16 22:34:29", "user": 47749, "id": 1384835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386649", "text": "Are you sure it doesn't fail when you're in 3.0.7 and it's not some akismet unavailability ?\nIt seems the value provided in CGI.escape is nil, which is causing the error. But that wouldn't be impacted by any rails upgrade.\n\nBTW I use rakismet in a 3.1 app and it works properly.\n", "created_at": "2011-06-17 07:58:57", "user": 9347, "id": 1386649}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386723", "text": "Looks familiar;-) Seems to be the same SafeBuffer issue as @dolzenko found with Rack::Utils.escape (see https://github.com/rails/rails/issues/1555)\n\nThe stack trace indicates that you have a SafeBuffer going in ( output_safety.rb:123:in `gsub' ), and internally CGI.escape is doing a gsub that attempts to substitute $1 (doesn't work with SafeBuffer). \n\nI think v.to_str should ensure you are sending 'unsafe' strings into CGI.escape\n", "created_at": "2011-06-17 08:13:53", "user": 16432, "id": 1386723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1388406", "text": "@tardate - That does look to be the issue! May have to submit a patch for Rakismet. \n\n@dmathieu - Baffling that it works with 3.1. It is indeed linked to rails version, currently running 3.0.7 with no hitches. May try patching Rakismet and see if that fixes it. \n\nI'm going to go ahead and close this since it looks like it's a dupe. Thanks guys!\n", "created_at": "2011-06-17 14:16:09", "user": 47749, "id": 1388406}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1388552", "text": "Actually you should try running with 3-0-stable git. There has been several changes to SafeBuffer since the last releases.\nMy application works with 3-1-stable git. I haven't tried it on the released rc.\n", "created_at": "2011-06-17 14:40:41", "user": 9347, "id": 1388552}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7261389", "text": "Shouldn't a SafeBuffer masquerade just like a String?\n\nI am running into this same issue in rails 3.2.6. Have a SafeBuffer, which I'm used to being able to treat just like a string, which winds up being passed to an external library as a String, and CGI.escape is called on it. \n\nIndeed \"undefined method `bytesize' for nil:NilClass\"\n\nThis is not a bug in SafeBuffer, that you can't call stdlib CGI.escape on it, if it happens to be passed to a library that wants to do that? \n\n> internally CGI.escape is doing a gsub that attempts to substitute $1 (doesn't work with SafeBuffer).\n\nHow come?\n", "created_at": "2012-07-25 20:41:04", "user": 149304, "id": 7261389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7261451", "text": "To make matters worse, you'd think calling \"#to_s\" on anything ought to give you a String, right?\n\nSo if you're not sure if you have a SafeBuffer or not, just call #to_s on it, and you'll have something you can pass safely to CGI.escape. \n\nNope, calling #to_s on a SafeBuffer, you still have a SafeBuffer. Argh. \n\nThere seems to be no clear way to turn a SafeBuffer back into an ordinary string?\n", "created_at": "2012-07-25 20:43:04", "user": 149304, "id": 7261451}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7265834", "text": "@jrochkind I think you are looking for #to_str (not #to_s) to get an ordinary string back from a safebuffer\n\n```\nString.new.html_safe.to_s.class\n=> ActiveSupport::SafeBuffer \nString.new.html_safe.to_str.class\n=> String \n```\n\nPS: see #1555 if you want more details of why these things break with SafeBuffer.\n", "created_at": "2012-07-25 23:54:53", "user": 16432, "id": 7265834}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7265925", "text": "Thanks @tardate. \n\nBelieve it or not, this is not the first time I've run into trouble with gsub and magic $1 variables, grr, the gsub $1-in-block magic is very fragile, and breaks easily.  I guess that's really the bug, it's a mistaken feature in ruby (IMO) if it's going to be so fragile to extension and sub-classing etc. (It also breaks when you try to pass a &block by reference to gsub, instead of using a literal block, which is where I ran into this general problem area before.) Grr. \n", "created_at": "2012-07-26 00:01:46", "user": 149304, "id": 7265925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7266000", "text": "Hmm, but this is weird @tardate, the disposition on #1555 (which I see I commented on a year ago too!) says that calling gsub on a SafeBuffer should raise with an immediate \"unsupported method\" exception. Which is exactly what it did a year ago when I commented on the issue. \n\nBut now with Rails 3.2.6, it's does not seem to be doing so -- or CGI.escape would cause that exception to be raised (at least immediately revealing the problem, that it was a SafeBuffer), instead of succesfully doing the gsub but then having $1/$2/etc break, right?\n\nSo what's up, you think?\n", "created_at": "2012-07-26 00:06:03", "user": 149304, "id": 7266000}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7266553", "text": "@jrochkind oh, yeah, we've been here before;-)\n\nlooks like the unsupported method exception went in on #2248 and #2931 but then was taken out soon after. Seems to have caused havoc in a whole range of subsystems, and this was never resolved.\n\ncommit e05d4cea69919ed0a2e5832bde120b5d0f12c0ec\nAuthor: Vijay Dev vijaydev.cse@gmail.com\nDate:   Fri Sep 9 01:05:07 2011 +0530\n\n```\nrevert the changes from c60995f3 - related to marking sub,gsub as unavailable to use with safe strings\n```\n\ncommit 6b010c2690de9ffce4878a9471c8adb33d4a21a1\nAuthor: José Valim jose.valim@gmail.com\nDate:   Thu Sep 8 20:49:08 2011 +0200\n\n```\nRevert removing gsub and sub from safe buffer.\n```\n", "created_at": "2012-07-26 00:46:39", "user": 16432, "id": 7266553}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7269230", "text": "Ugh, so gsub is still there, but doesn't actually _work_ if you use  \nthe block form (at least not if you try to use $1 etc). What a mess! I  \nliked it better when the method wasn't there, at least it would fail  \nwith a clear exception, instead of a mystery unexpected nil error.  \nSafeBuffer's are ordinarily so interchangeable with Strings, it's  \nquite easy to lose track of which you have. I still blame ruby's magic  \n$1 variables in combination with gsub block form for being impossible  \nto support in any even slightly unusual circumstances, but it seems  \nlike there's got to be something better Rails can do. I dunno.\n\nIt would be nice if, when reverting a commit, someone would at least  \nput in their revert commit message WHY they were reverting it.\n\nOn Jul 25, 2012, at 8:46 PM, Paul Gallagher wrote:\n\n> @jrochkind oh, yeah, we've been here before;-)\n> \n> looks like the unsupported method exception went in on #2248 and  \n> #2931 but then was taken out soon after. Seems to have caused havoc  \n> in a whole range of subsystems, and this was never resolved.\n> \n> commit e05d4cea69919ed0a2e5832bde120b5d0f12c0ec\n> Author: Vijay Dev vijaydev.cse@gmail.com\n> Date:   Fri Sep 9 01:05:07 2011 +0530\n> \n>    revert the changes from c60995f3 - related to marking sub,gsub as  \n> unavailable to use with safe strings\n> \n> commit 6b010c2690de9ffce4878a9471c8adb33d4a21a1\n> Author: José Valim jose.valim@gmail.com\n> Date:   Thu Sep 8 20:49:08 2011 +0200\n> \n>    Revert removing gsub and sub from safe buffer.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/rails/rails/issues/1739#issuecomment-7266553\n", "created_at": "2012-07-26 04:42:23", "user": 149304, "id": 7269230}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7794154", "text": "Patch to solve it for CGI and Rack::Utils http://grosser.it/2012/08/16/rackutils-escape-unescape-cgi-escapeunescapeescapehtml-vs-undefined-method-bytesize-for-nil/\n", "created_at": "2012-08-16 18:20:39", "user": 11367, "id": 7794154}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Code taken from Rails 3 branch. Now OrderedHash merging can accept a block.\n", "labels": [], "number": 1740, "updated_at": "2014-07-03 04:59:03", "user": 50209, "closed_at": "2011-06-17 13:25:39", "id": 1070644, "title": "Fix OrderedHash merging with block given.", "url": "https://api.github.com/repos/rails/rails/issues/1740", "created_at": "2011-06-17 00:03:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386248", "text": "Any chances to see tests for this?\n", "created_at": "2011-06-17 06:05:08", "user": 207112, "id": 1386248}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386408", "text": "Delivered!\n", "created_at": "2011-06-17 06:59:44", "user": 50209, "id": 1386408}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386516", "text": "I think 2-3-stable is frozen except for security fixes.\n", "created_at": "2011-06-17 07:24:11", "user": 146214, "id": 1386516}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386526", "text": "I've made this fix for the sake of justice and beauty. Yesterday I've spent about 3 hours to understand why my ordered hashes merging doesn't work with block given. So there is ugly hack in my app now.\n", "created_at": "2011-06-17 07:27:46", "user": 50209, "id": 1386526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386672", "text": "There won't be any 2.3 release unless it's for security.\nSo even if your patch were to be merged, you won't see it in action.\n\nYou should either monkey patch OrderedHash to fix the problem, or, even better, upgrade to 3.x\n", "created_at": "2011-06-17 08:04:29", "user": 9347, "id": 1386672}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386707", "text": "Yes I know. App is working fine with my hack now. I hope it can save some other's time.\n", "created_at": "2011-06-17 08:10:31", "user": 50209, "id": 1386707}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I added default values to result of instance variables - it removed warnings about using uninitialized instant variables from test logs:\n\n```\n/Users/gazay/code/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:154: warning: instance variable @dirty not initialized\n/Users/gazay/code/rails/activerecord/lib/active_record/base.rb:1858: warning: instance variable @attributes not initialized\n```\n\nbut not affected logic\n", "labels": [], "number": 1741, "updated_at": "2014-06-24 10:32:25", "user": 29658, "closed_at": "2011-06-17 10:06:32", "id": 1070829, "title": "Added default values for remove uninitialized warnings", "url": "https://api.github.com/repos/rails/rails/issues/1741", "created_at": "2011-06-17 00:54:46", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386689", "text": "I'm already fixing the @attributes warning in #1406.\nFor the @dirty warning, it should be defined in the initializer.\nTherefore, I believe it'd be better to find out why it'd not defined and fix that instead of just ignoring the warning.\n", "created_at": "2011-06-17 08:08:08", "user": 9347, "id": 1386689}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387236", "text": "Thanks! I check dirty deeply\n", "created_at": "2011-06-17 10:06:32", "user": 29658, "id": 1387236}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "The generated controller update method responds to successful json requests with head :ok. This renders a response with an empty body, which jquery fails to parse. All successful update request made by jquery will end up executing an error callback. Rendering of an empty json object {} fixes this error.\n", "labels": [], "number": 1742, "updated_at": "2014-08-13 02:48:05", "user": 652997, "closed_at": "2011-10-26 07:35:35", "id": 1071511, "title": "invalid update json response with generated controller scaffolding  ", "url": "https://api.github.com/repos/rails/rails/issues/1742", "created_at": "2011-06-17 04:31:00", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1386658", "text": "Could you provide a failing test case, or a basic app reproducing the problem ?\n", "created_at": "2011-06-17 08:00:58", "user": 9347, "id": 1386658}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390522", "text": "I created a basic app showing the problem at https://github.com/codebrew/json-issue\n\nThe app is using the latests rails from head. I did a scaffolding gen of `rails g scaffolding Post title:string content:string` then I added some javascript in app/assets/javascripts/posts.js.coffee to make an update 'PUT' request to the server. \n\nstart up the server go to localhost:3000/posts, create a new post model, and in the table there will be a link called 'Ajax Update' it will make a successful ajax put request but the response body will be empty which causes jquery fails to parse and will execute the error callback.\n", "created_at": "2011-06-17 19:57:26", "user": 652997, "id": 1390522}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1550410", "text": "This seems to be something that jQuery should take care of. Returning a 200 with an empty body should be a completely reasonable response if there's nothing to return. If we need to patch that temporarily in the jquery-rails adapter, then so be it. But it seems silly for us to return an empty json object.\n", "created_at": "2011-07-11 22:08:48", "user": 2741, "id": 1550410}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1558096", "text": "If we need to patch this in the jquery-rails adapter, be sure to open a ticket in the [jquery-ujs issues](https://github.com/rails/jquery-ujs) and I can take a look.\n", "created_at": "2011-07-12 21:38:10", "user": 93607, "id": 1558096}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572150", "text": "I'm going to patch this on Rails\n", "created_at": "2011-07-14 14:58:32", "user": 52642, "id": 1572150}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572235", "text": "I think it would be far better to finally update the controller scaffold to use `respond_with` which already responds with `{}` for updates.\n", "created_at": "2011-07-14 15:09:50", "user": 294954, "id": 1572235}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1572652", "text": "If you're making a patch to the controller scaffold also update the destroy method, which has the same issue as update.\n", "created_at": "2011-07-14 15:58:38", "user": 652997, "id": 1572652}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1573055", "text": "All of the controller methods should be updated. I know there was hesitation in the past because using scaffold isn't the preferred way to develop your application.\n\n``` ruby\nclass GizmosController < ApplicationController\n  respond_to :html, :json\n\n  # GET /gizmos\n  # GET /gizmos.json\n  def index\n    @gizmos = Gizmo.all\n\n    respond_with(@gizmos)\n  end\n\n  # GET /gizmos/1\n  # GET /gizmos/1.json\n  def show\n    @gizmo = Gizmo.find(params[:id])\n\n    respond_with(@gizmo)\n  end\n\n  # GET /gizmos/new\n  # GET /gizmos/new.json\n  def new\n    @gizmo = Gizmo.new\n\n    respond_with(@gizmo)\n  end\n\n  # GET /gizmos/1/edit\n  def edit\n    @gizmo = Gizmo.find(params[:id])\n\n    respond_with(@gizmo)\n  end\n\n  # POST /gizmos\n  # POST /gizmos.json\n  def create\n    @gizmo = Gizmo.create(params[:gizmo])\n\n    respond_with(@gizmo, notice: \"Gizmo was successfully created.\")\n  end\n\n  # PUT /gizmos/1\n  # PUT /gizmos/1.json\n  def update\n    @gizmo = Gizmo.find(params[:id])\n    @gizmo.update_attributes(params[:gizmo])\n\n    respond_with(@gizmo, notice: \"Gizmo was successfully updated.\")\n  end\n\n  # DELETE /gizmos/1\n  # DELETE /gizmos/1.json\n  def destroy\n    @gizmo = Gizmo.find(params[:id])\n    @gizmo.destroy\n\n    respond_with(@gizmo, notice: \"Gizmo was successfully deleted.\")\n  end\nend\n```\n", "created_at": "2011-07-14 16:48:43", "user": 294954, "id": 1573055}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1636889", "text": "Fixed this issue, please check the pull request \nhttps://github.com/rails/rails/pull/2197\n\n/cc @spastorino\n", "created_at": "2011-07-23 09:15:19", "user": 24949, "id": 1636889}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1669074", "text": "@dhh @codebrew\n\nthe problem is that you're calling `head :ok` which renders \" \" as the body, not \"\". I'm sure why rails returns a 1-character body on any `head` response, but it might have something to do with HTTP standards.\n", "created_at": "2011-07-28 00:20:32", "user": 437360, "id": 1669074}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1884485", "text": "@OhaiBBQ The single character body is sent to workaround a bug in older versions of Safari. Safari ignored headers if the body has zero length.\n", "created_at": "2011-08-23 21:50:52", "user": 8185, "id": 1884485}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1884972", "text": "Alright, that makes sense. Thanks. \n", "created_at": "2011-08-23 22:45:32", "user": 437360, "id": 1884972}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1917513", "text": "I'm closing this since we pulled in @mitijain123's pull request.\n", "created_at": "2011-08-26 22:29:14", "user": 3124, "id": 1917513}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1917973", "text": "This wasn't fixed yet\n", "created_at": "2011-08-27 00:00:59", "user": 52642, "id": 1917973}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1919441", "text": "thanks /cc tenderlove .\n\n/cc spastorino let me know if you have any idea in mind, I like to implement that, if you give me a chance.  \n", "created_at": "2011-08-27 11:17:24", "user": 24949, "id": 1919441}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1920862", "text": "@mitijain123 we should do head :success, and make that return 204\n", "created_at": "2011-08-27 18:40:21", "user": 52642, "id": 1920862}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2527528", "text": "We fixed that here https://github.com/rails/rails/commit/aef62c4b4e89e7fa91973c188c9e7f281a44ecd0\nIf you're hitting the issue change head :ok with head :no_content\n", "created_at": "2011-10-26 07:35:35", "user": 52642, "id": 2527528}], "assignees": [52642, 52642], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've noticed that some of my tests are failing since I upgraded to 3.1.0.rc4. I realized that a simple action like:\n\n``` ruby\ndef index\n  render :stream => true\nend\n```\n\nWith a test:\n\n``` ruby\nget :index\nassert_template 'index'\n```\n\nWill cause the `assert_template` matcher to fail. It looks like there aren't any templates rendered with streaming turned on. If the `:stream => true` option is removed, the test passes.\n\nIs this intended behavior or a result of the way streaming works?\n\nThe failure message is:\n\n```\nFailure/Error: assert_template('index')\nMiniTest::Assertion:\n  expecting <\"index\"> but rendering with <\"\">\n```\n\nIf this isn't intended behavior, I wouldn't mind looking more into this.\n", "labels": [], "number": 1743, "updated_at": "2012-10-29 18:44:34", "user": 64996, "closed_at": "2012-03-05 19:31:20", "id": 1071681, "title": "assert_template with streaming", "url": "https://api.github.com/repos/rails/rails/issues/1743", "created_at": "2011-06-17 05:49:18", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1543982", "text": "Can you provide a failing test case or an app that reproduces it?.\nIf you can provide a failing test much better :).\n", "created_at": "2011-07-11 02:09:09", "user": 52642, "id": 1543982}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1548749", "text": "There's a failing app at https://github.com/alexcrichton/rails-issue-1743, and you just need to run `rspec spec`.\n\nI also added a [failing test case](https://github.com/alexcrichton/rails/commit/8bdfbfb4a01115795f819047f851685855b8a6c8).\nIt's probably not the right place for the test case at all, but it at least shows the behavior. If you comment out the `stream` option, the test case passes.\n", "created_at": "2011-07-11 18:36:33", "user": 64996, "id": 1548749}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2028393", "text": "The issue here is that streaming templates are lazily rendered. They are only rendered when response.body is accessed and looped. I believe the best fix for this would be for get/post/put/delete and friends to call `response.body` at the end of the request to ensure the body is going to be interpreted. another alternative is to force `assert_template` to do it.\n", "created_at": "2011-09-07 12:58:33", "user": 9582, "id": 2028393}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2036183", "text": "I like the idea of `assert_template` just calling `response.body` to make sure that the body is there.\n\nIt seems to me that even though the body is lazily rendered, the tests should still behave the same. The bad part is that this might not be the only place it will crop up?\n", "created_at": "2011-09-08 03:00:00", "user": 64996, "id": 2036183}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4329879", "text": "Fixed on #5288\n", "created_at": "2012-03-05 19:31:20", "user": 9582, "id": 4329879}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Hello\n\nAfter I have updated rails to 3.0.8, I got this error : \n<code>Cannot modify SafeBuffer in place</code>\n\nThis error arrives on this code :\n<code><%= strip_tags(yield(:page_title)) %></code>\n\nI have installed rails 3.0.9 but I have the same error.\n\nHow can I resolve this problem ?\nThanks for your help.\n", "labels": [], "number": 1744, "updated_at": "2011-12-03 13:29:03", "user": 496787, "closed_at": "2011-12-03 13:29:03", "id": 1072793, "title": "Cannot modify SafeBuffer in place - with yield", "url": "https://api.github.com/repos/rails/rails/issues/1744", "created_at": "2011-06-17 10:22:06", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387318", "text": "To add precisions on this error, I have no errors when :page_title contains HTML tags but error arrives when :page_title does not contain HTML tags.\n", "created_at": "2011-06-17 10:26:28", "user": 496787, "id": 1387318}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387598", "text": "`yield(:page_title)` returns an html safe string. The `strip_tags` methods changes this string in place. It shouldn't do that, it should return a new string object, not modify the old one.\n\nSo this is a valid issue imho.\n\nA workaround is to make the string unsafe again:\n\n```\n<%= strip_tags(yield(:page_title).untrust)) %>\n```\n", "created_at": "2011-06-17 11:38:06", "user": 12692, "id": 1387598}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387863", "text": "It does not work.\n\nI use strip_tags here because I show page title twice, in TITLE tag and in H1 tag. The <code>:page_title</code> into TITLE tag must be without html tags.\n\n```\n<title><%= strip_tags(yield(:page_title).untrust) %></title>\n...\n<h1><%= yield :page_title %></h1>\n```\n", "created_at": "2011-06-17 12:40:24", "user": 496787, "id": 1387863}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1405387", "text": "I have the exact same issue on 3.0.9 - my code is literally the same as @lphm: `<%= strip_tags(yield(:page_title)) %>`.\nI also yield `:page_title` to both the `<title>` tag (where HTML should be stripped) and to headings within the view, eg. `<h1>`.\n\nMaking the string unsafe again with `untrust`, as suggested by @iain, does not work here as well.\n", "created_at": "2011-06-20 20:10:21", "user": 530941, "id": 1405387}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1405503", "text": "The solution seems to have been provided already by @tenderlove in [this security announcement](http://weblog.rubyonrails.org/2011/6/8/potential-xss-vulnerability-in-ruby-on-rails-applications);\n\n> Any methods that mutate the safe buffer without escaping input will now raise an exception.\n> If you need to modify a safe buffer, cast it to a Ruby string first by calling the to_str method:\n\nThis works for me:\n`<%= strip_tags(yield(:page_title).to_str) %>`\n", "created_at": "2011-06-20 20:24:59", "user": 530941, "id": 1405503}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1478622", "text": "I was bitten by this too. I agree with @iain that the real problem here is that `strip_tags` sometimes behaves like `strip_tags!` -- attempting to modify the string in place when it should only be working with a copy. I believe the offending code is in `action_controller/vendor/html-scanner/html/sanitizer.rb`, specifically within `HTML::Sanitizer#sanitize`, called by `HTML::FullSanitizer#sanitize`:\n\n```\nclass FullSanitizer < Sanitizer\n  def sanitize(text, options = {})\n    result = super     # <-- Assumes that `result` is a copy of `text` now ...\n    result.gsub!( ... ) # <-- ... because it's modified in-place here\n    # ...\n```\n\nHowever, there's no guarantee that `super` returns a copy, because here's the `super` (`Sanitizer#sanitize`):\n\n```\ndef sanitize(text, options = {})\n  return text unless sanitizeable?(text) # <-- No copy made in this case\n  # ...\n```\n\nIf `text` does not _need_ sanitizing (that is, it's empty, or has no HTML tags in it), then `sanitizeable?` returns false. So `text` is passed right back to `FullSanitizer#sanitize`, which blithely proceeds to run `gsub!` on some text that doesn't need sanitizing (and, in the case of a `SafeBuffer`, does not allow `gsub!` to be called on it in the first place).\n\nEdit: I just noticed that this was [recently fixed](https://github.com/rails/rails/commit/2adeaa9c90b7559387b55e7a24a7eb82671c88cc#actionpack/lib/action_controller/vendor/html-scanner/html/sanitizer.rb), so I'll quit complaining now :-)\n", "created_at": "2011-06-30 22:21:26", "user": 238395, "id": 1478622}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3000057", "text": "This can be closed now.\n", "created_at": "2011-12-03 10:48:48", "user": 42636, "id": 3000057}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3000073", "text": "@lphm Can you confirm please??\n", "created_at": "2011-12-03 10:53:19", "user": 3948, "id": 3000073}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3000625", "text": "Yes, this can be closed.\n\nThanks for your help. ++++\n", "created_at": "2011-12-03 13:29:03", "user": 496787, "id": 3000625}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "If you write in an erb view something like this:\n\n```\n<% u = User.new(:name => \"test\") %>\n<%= simple_format(u.name) %>\n<%= simple_format(u.name) %>\n<%= simple_format(u.name) %>\n<%= simple_format(u.name) %>\n<%= simple_format(u.name) %>\n```\n\nThe result will be:\n\n```\n<p>test</p> \n<p><p>test</p></p> \n<p><p><p>test</p></p></p> \n<p><p><p><p>test</p></p></p></p> \n<p><p><p><p><p>test</p></p></p></p></p> \n```\n", "labels": [], "number": 1745, "updated_at": "2011-06-17 14:40:17", "user": 81225, "closed_at": "2011-06-17 14:40:17", "id": 1073003, "title": "simple_format should not change model attributes", "url": "https://api.github.com/repos/rails/rails/issues/1745", "created_at": "2011-06-17 11:25:28", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387600", "text": "I have tried to write a test, but it doesn't fail\n\n``` ruby\n  def test_simple_format_should_not_change_the_contests_of_attribute\n    text = String.new \"Hello World!\"\n    simple_format text\n    assert_equal \"Hello World!\", text\n  end\n```\n", "created_at": "2011-06-17 11:38:17", "user": 81225, "id": 1387600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1388454", "text": "FTR it occurs only on 3-1-stable.\n", "created_at": "2011-06-17 14:25:02", "user": 9347, "id": 1388454}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As we discussed here:\nhttps://github.com/rails/rails/pull/1334#issuecomment-1247794\n\nFor production - leave the default `:logger`.\nSet `:strict` for test and dev.\n", "labels": [], "number": 1746, "updated_at": "2014-07-03 04:59:21", "user": 122436, "closed_at": "2011-07-07 07:27:00", "id": 1073090, "title": "Rails app template: setup different mass assignment sanitizer for envs", "url": "https://api.github.com/repos/rails/rails/issues/1746", "created_at": "2011-06-17 11:51:50", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514370", "text": "can you squash the commits in one?, thanks\n", "created_at": "2011-07-06 19:07:23", "user": 52642, "id": 1514370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1520880", "text": "Squashed. See #1996.\n", "created_at": "2011-07-07 07:27:03", "user": 122436, "id": 1520880}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "When calling gsub on a SafeBuffer, variables such as $1, $2, $`, $&, and $’ are not set.\n\nrequire 'test_helper'\n\nclass GsubTest < ActiveSupport::TestCase\n  test \"gsub\" do\n    assert_equal(\"3\", \"--3--\".html_safe.gsub(/--(\\d+)--/){$1})\n  end\nend\n", "labels": [], "number": 1747, "updated_at": "2011-06-17 12:57:01", "user": 116019, "closed_at": "2011-06-17 12:57:01", "id": 1073303, "title": "SafeBuffer#gsub inconsistency", "url": "https://api.github.com/repos/rails/rails/issues/1747", "created_at": "2011-06-17 12:48:19", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1387938", "text": "Oups it's already reported #1734.\n", "created_at": "2011-06-17 12:57:01", "user": 116019, "id": 1387938}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I've noticed code duplicates in Select tag helpers when was working on some stuff before.\n\nSo, This is just cosmetic change to make things look better.\n", "labels": [], "number": 1748, "updated_at": "2014-06-21 07:57:31", "user": 122436, "closed_at": "2011-06-17 14:09:11", "id": 1073711, "title": "Select tag helpers: remove some code dups", "url": "https://api.github.com/repos/rails/rails/issues/1748", "created_at": "2011-06-17 14:07:01", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It's fixed in master but still broken there.\nSee #1745\n", "labels": [], "number": 1749, "updated_at": "2014-07-03 04:59:29", "user": 9347, "closed_at": "2011-06-17 14:39:40", "id": 1073891, "title": "Cherry pick changes to simple_format from master", "url": "https://api.github.com/repos/rails/rails/issues/1749", "created_at": "2011-06-17 14:38:29", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390024", "text": "Can this be merged in 3-0-stable as well? It's broken in 3.0.9 (worked fine in 3.0.7).\n", "created_at": "2011-06-17 18:33:09", "user": 107416, "id": 1390024}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1414894", "text": "I can confirm it is broken on 3-0-stable as well.\n", "created_at": "2011-06-22 00:20:43", "user": 7904, "id": 1414894}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Unsafe methods are always calling #to_str when called so the object returned is a new string object.\n\nIf the original method doesn't return a string, like gsub with only one argument though, it'll fail as there's no to_str method.\n", "labels": [], "number": 1750, "updated_at": "2014-06-26 17:00:06", "user": 9347, "closed_at": "2011-06-22 13:30:57", "id": 1074475, "title": "Calling unsafe methods which don't return a string shouldn't fail", "url": "https://api.github.com/repos/rails/rails/issues/1750", "created_at": "2011-06-17 16:19:42", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393432", "text": "I have just changed my commit, to simplify the logic of the improvement.\n", "created_at": "2011-06-18 14:10:55", "user": 9347, "id": 1393432}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395802", "text": "send accepts strings, no need to create a symbol from them.\n", "created_at": "2011-06-19 09:02:27", "user": 3387, "id": 1395802}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1401068", "text": "Actually, as we're in a class_eval and the method name is a variable, I must either create a string or a symbol.\nFor micro-performances reasons, symbols are then better as it wouldn't create a new object instance if the same symbol has already been called.\n", "created_at": "2011-06-20 07:37:26", "user": 9347, "id": 1401068}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417547", "text": "@fxn : what I mean is, anyway, we must either create a string or a symbol.\nCreating a symbol avoids creating a new object every time the method is called.\n", "created_at": "2011-06-22 12:20:59", "user": 9347, "id": 1417547}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417778", "text": "Would it be better to interpolate unsafe_method as an ordinary method call?\n", "created_at": "2011-06-22 13:05:59", "user": 3387, "id": 1417778}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417822", "text": "Oh ok, right, I definitely can do that.\n", "created_at": "2011-06-22 13:13:21", "user": 9347, "id": 1417822}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417908", "text": "I have updated my commit.\n", "created_at": "2011-06-22 13:28:11", "user": 9347, "id": 1417908}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1417929", "text": "Excellent, thank you :).\n", "created_at": "2011-06-22 13:30:47", "user": 3387, "id": 1417929}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "mysql2 0.3.6 solves a bug introduced in 0.3.5 described here: https://github.com/brianmario/mysql2/issues/182\n", "labels": [], "number": 1751, "updated_at": "2014-06-16 13:12:07", "user": 160941, "closed_at": "2011-06-17 17:22:35", "id": 1074526, "title": "Bump to mysql2 0.3.6", "url": "https://api.github.com/repos/rails/rails/issues/1751", "created_at": "2011-06-17 16:29:57", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1389284", "text": "Will this fix any broken tests?? \n", "created_at": "2011-06-17 16:33:33", "user": 779796, "id": 1389284}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1389608", "text": "@brajadorable: There aren't broken tests but I was getting an error similar to the described in https://github.com/brianmario/mysql2/issues/182#issuecomment-1384782\n", "created_at": "2011-06-17 17:28:28", "user": 160941, "id": 1389608}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This version includes the fixes for Time/DateTime range detection across the various Ruby platforms (32bit vs 64bit, 1.8 vs 1.9, *NIX vs Windows)\n", "labels": [], "number": 1752, "updated_at": "2014-06-26 08:59:58", "user": 11571, "closed_at": "2011-06-17 17:22:06", "id": 1074547, "title": "Bump mysql2 to 0.3.6", "url": "https://api.github.com/repos/rails/rails/issues/1752", "created_at": "2011-06-17 16:34:24", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "If I use this form :\n`assert_select \"p\", \"Test message\", 1`\nThe (not very helpful) error I get is :\n`0. <false> is not true.`\n\nIf I use an alternate form (same info) :\n`assert_select \"p\", {:text => \"Test message\", :count => 1}`\nI get a much more helpful error message :\n`<\"Test message\"> expected but was <\"something else\">. <false> is not true.`\n\nCould the shorter form, be changed to also show the more helpful error message ?\n\nI'm using Rails 3.0.3.\n", "labels": [], "number": 1753, "updated_at": "2011-06-18 16:55:41", "user": 600494, "closed_at": "2011-06-18 16:55:41", "id": 1074562, "title": "assert_select error messages", "url": "https://api.github.com/repos/rails/rails/issues/1753", "created_at": "2011-06-17 16:37:27", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393600", "text": "I'm on rails 3.1.0rc4, and get the following:\n\n```\ndef test_text_equality_search\n    render_html %Q{<p>Test Message</p>}\n    assert_select \"p\", \"Test Message\", 1\n#    assert_select \"p\", {:text => \"Test message\", :count => 1}\nend\n\n  1) Error:\n    test_text_equality_search(AssertSelectTest):\n    ArgumentError: assertion message must be String or Proc, but Fixnum was given.\n        /Users/jasonn/source/rails/actionpack/lib/action_dispatch/testing/assertions/selector.rb:296:in `assert_select'\n        /Users/jasonn/source/rails/actionpack/test/controller/assert_select_test.rb:79:in `test_text_equality_search'\n        /Users/jasonn/.rvm/gems/ruby-1.9.2-p180@rails-edge/gems/mocha-            \n            0.9.12/lib/mocha/integration/mini_test/version_142_to_172.rb:27:in `run'\n        /Users/jasonn/source/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:35:in `block in run'\n        /Users/jasonn/source/rails/activesupport/lib/active_support/callbacks.rb:426:in `_run_setup_callbacks'\n        /Users/jasonn/source/rails/activesupport/lib/active_support/callbacks.rb:81:in `run_callbacks'\n        /Users/jasonn/source/rails/activesupport/lib/active_support/testing/setup_and_teardown.rb:34:in `run'\n```\n", "created_at": "2011-06-18 15:17:14", "user": 22501, "id": 1393600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393876", "text": "OK - thanks. Seems the second form is the correct way to call the method if testing for both text and count. And the error message for the incorrect first form is improved in 3.1.0rc4, as the message is type checked.\n", "created_at": "2011-06-18 16:55:41", "user": 600494, "id": 1393876}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "https://github.com/rails/rails/blob/master/README.rdoc\n\nThe Active Record and Action Pack README links in that document are broken\n", "labels": [], "number": 1754, "updated_at": "2011-06-18 10:38:54", "user": 28652, "closed_at": "2011-06-17 21:16:26", "id": 1075806, "title": "README links in the main Rails README file are broken", "url": "https://api.github.com/repos/rails/rails/issues/1754", "created_at": "2011-06-17 20:57:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1390925", "text": "Do you mind helping us fixing that in http://github.com/lifo/docrails? It has a open-commit access, so you could fix it and push it there. It'll be merged back from time to time ;)\n", "created_at": "2011-06-17 20:59:10", "user": 4912, "id": 1390925}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1391037", "text": "Fixed.  https://github.com/lifo/docrails/commit/030950a7ee67d8e525ee39c6d53e18b762303f37\n\nOn another note, editing files from github's site doesn't provide a Preview link. :)\n", "created_at": "2011-06-17 21:15:17", "user": 22501, "id": 1391037}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1391046", "text": "Ha, that's why you have 3 commits? :P\n\nThank you for fixing it :)\n", "created_at": "2011-06-17 21:16:25", "user": 4912, "id": 1391046}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1392975", "text": "The links were pointing to files/activerecord/README_rdoc.html (similarly for Action Pack) for usage in the api.rubyonrails.org site. And GitHub blob links are always broken. This issue is invalid hence and I've reverted the changes done: https://github.com/lifo/docrails/commit/2fbb7504e2c2b0a95398d1ef0c97ea4a403d831d\n", "created_at": "2011-06-18 10:38:54", "user": 146214, "id": 1392975}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I have been debugging a situation where all emails sent through ActionMailer get duplicated.  \n\nBy using a sendmail wrapper, I found that the command issued by ActionMailer added the recipient to the command line as well as the message headers.\n\nIn my case it looked similar to:\n\n<pre>\n/usr/sbin/sendmail -i -t -f sender@example.com recipient@example.com\n</pre>\n\nThe sendmail command on this server (from qmail) seems to add the recipients on the command line to those read from the email headers and delivers the message twice.\n\nThe ActionMailer documentation http://api.rubyonrails.org/classes/ActionMailer/Base.html  specifies:\n\n<pre>\n# sendmail_settings - Allows you to override options for the :sendmail delivery method.\n\n    * :location - The location of the sendmail executable. Defaults to /usr/sbin/sendmail.\n    * :arguments - The command line arguments. Defaults to -i -t with -f sender@addres added automatically before the message is sent.\n</pre>\n\nIf the sendmail command would be generated as documented, this problem would go away.\n\nWhen searching for solutions on the web, I also found that this seems to cause problems with Postfix  as well (see http://stackoverflow.com/questions/6085723/sendmail-setting-for-hostingrails )\n\nI observed this on 3.0.7 and reproduced with 3.0.9.\n", "labels": ["actionmailer", "attached PR"], "number": 1755, "updated_at": "2016-04-06 13:38:16", "user": 92438, "closed_at": "2016-04-06 03:41:27", "id": 1076038, "title": "ActionMailer adds recipient to command line for sendmail", "url": "https://api.github.com/repos/rails/rails/issues/1755", "created_at": "2011-06-17 21:44:36", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3827352", "text": "We are experiencing the same problem with Rails 3.1.3 and Qmail.\nI think it could be fixed easily by agreeing on which way to do it:\n- Either specifying -t and not Passung the recipients with the command\n- Or not using -t and specifying the recipients with the command\n", "created_at": "2012-02-06 11:57:40", "user": 886, "id": 3827352}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3836422", "text": "After looking around where this actually occurs it seems like this is a Mail gem issue:\nhttps://github.com/mikel/mail/blob/master/lib/mail/network/delivery_methods/sendmail.rb#L52\n\nIt is also discussed here in the Mail issue tracker:\nhttps://github.com/mikel/mail/issues/70#issuecomment-2639987\n\nFor now we fixed it by omitting  -t from the sendmail :arguments\n", "created_at": "2012-02-06 20:43:49", "user": 886, "id": 3836422}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4366338", "text": "Hi Guys,\n\nIs this still a issue?? Or it can be closed??\n", "created_at": "2012-03-07 11:13:10", "user": 3948, "id": 4366338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4390103", "text": "Closing this issue now. Please reopen this if issue still exists.\n\nThanks!\n", "created_at": "2012-03-08 12:05:47", "user": 3948, "id": 4390103}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/31617826", "text": "This issue still exists with Qmail. IMHO Rails has the wrong behavior here, either the recipients should be in the arguments or in the headers.\n", "created_at": "2014-01-05 22:31:40", "user": 128020, "id": 31617826}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/151563948", "text": "This should be reopened. The issue was fixed in mikel/mail#70 but Rails overrides the fix with it's own arguments, including -t.\n", "created_at": "2015-10-27 16:44:00", "user": 35072, "id": 151563948}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/151606555", "text": "r? @jeremy \n", "created_at": "2015-10-27 18:44:53", "user": 47848, "id": 151606555}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/175205477", "text": "Yes, please reopen, this still needs to be fixed.\n", "created_at": "2016-01-26 20:11:00", "user": 1138892, "id": 175205477}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/205849570", "text": "I'm happy to work on a fix to this\n", "created_at": "2016-04-05 15:07:14", "user": 1591025, "id": 205849570}], "assignees": [199, 199], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Current implementation produce incorrect output when Time#usec returns\ninteger < 100000, because to_s doesn't add leading zeros.\n", "labels": [], "number": 1756, "updated_at": "2014-06-16 15:58:01", "user": 74080, "closed_at": "2011-07-11 17:00:28", "id": 1076081, "title": "Fix xmlschema output with fraction_digits >0 ", "url": "https://api.github.com/repos/rails/rails/issues/1756", "created_at": "2011-06-17 21:58:23", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1391357", "text": "I separated these into two different commits to make it easy to reproduce the issue.\n", "created_at": "2011-06-17 22:02:14", "user": 74080, "id": 1391357}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544065", "text": "I think it would be better if you clone that test case and make it as another test case instead. In that case, we can be sured that you didn't break the old test. ;)\n\nAlso, if you don't mind please squash your patch into single commit. In that case if anything goes wrong we can `git bisect` on the tree. If you separate the commit, it would be hard for us to tell if this commit is really a failure point or a failing test case commit.\n\nThank you very much!! You can then update and force-push to your branch. The pull request will be updated automatically.\n", "created_at": "2011-07-11 02:46:34", "user": 4912, "id": 1544065}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1546937", "text": "Updated the pull request as you suggested.\n", "created_at": "2011-07-11 14:44:45", "user": 74080, "id": 1546937}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi,\n\nI've got undefined method `hash_for_<object_name>_url` error in POST actions.\nI'm using 3.1rc4 and this is my code - http://pastie.org/2085074 (controller+tests+outpus)\n", "labels": [], "number": 1757, "updated_at": "2011-06-19 14:28:59", "user": 39616, "closed_at": "2011-06-19 14:28:59", "id": 1076440, "title": "undefined method `hash_for_<object_name>_url` in POST actions", "url": "https://api.github.com/repos/rails/rails/issues/1757", "created_at": "2011-06-17 23:40:49", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1391906", "text": "Seems quite similar to #1599.\n", "created_at": "2011-06-18 00:16:11", "user": 9347, "id": 1391906}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1397437", "text": "What's in the `routes.rb` file? By default `respond_with(@user)` after a `POST` will redirect to `/users/:id`. Looking at the error message it appears that the url helper `user_url(@user)` doesn't exist. Also a response body would never be a boolean - the Rack spec requires that a body responds to `each`. Closing for now - will reopen if you can provide more information that shows a problem here.\n", "created_at": "2011-06-19 14:28:59", "user": 6321, "id": 1397437}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "To obtain expected result from request.remote_ip method and receive unified formatted IPs in logs i added validation for IP address\n", "labels": [], "number": 1758, "updated_at": "2014-06-14 17:35:26", "user": 29658, "closed_at": "2011-07-12 04:20:50", "id": 1077445, "title": "Added checking for X-Forwarded-For valid IP format in request", "url": "https://api.github.com/repos/rails/rails/issues/1758", "created_at": "2011-06-18 10:50:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393331", "text": "looks like you're only validating IP addresses as IPv4, so remote_ip will return nil for IPv6 addresses.\n\nYou could use the IPAddr class, but it is quite slow to raise an ArgumentError for values which aren't IPv4 or IPv6 addresses.\n", "created_at": "2011-06-18 13:26:41", "user": 2704, "id": 1393331}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393377", "text": "In request.remote_ip all trusted_proxies are ipv4, and all tests checks only ipv4. I think this commit can be added as first step, as second can be adding support for ipv6\n", "created_at": "2011-06-18 13:42:37", "user": 29658, "id": 1393377}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393467", "text": "Have to admit I don't know what the v6 trusted proxies would be. while the tests only play against v4 addresses I don't think there is anything in the code to explicitly prohibit a v6 address like the regex does. Its just something I'm thinking about at the moment as I'm supposed to be adding v6 to a staging server next week. Its also not one of those things you can easily test in development mode as pow and passenger currently only listen on v4.\n", "created_at": "2011-06-18 14:27:52", "user": 2704, "id": 1393467}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544082", "text": "I've added a comment into the commit. Do you mind fixing that and squash your commits together? In that case we can safely use `git bisect` and not found out that we actually find the 'failing test case' commit to be a first bad commit. ;)\n", "created_at": "2011-07-11 02:54:25", "user": 4912, "id": 1544082}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1551925", "text": "I had problems with my fork - i renew it and made new pull request - #2035. There is no mistakes and it is only one commit.\n", "created_at": "2011-07-12 04:20:50", "user": 29658, "id": 1551925}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It will remove warning about not initialized instance variable @dirty:\n\n```\n/Users/gazay/code/rails/activesupport/lib/active_support/core_ext/string/output_safety.rb:154: warning: instance variable @dirty not initialized\n```\n", "labels": [], "number": 1759, "updated_at": "2014-07-03 04:59:58", "user": 29658, "closed_at": "2011-06-18 13:47:14", "id": 1077460, "title": "Removed warning about not initialized instance variable @dirty", "url": "https://api.github.com/repos/rails/rails/issues/1759", "created_at": "2011-06-18 10:56:10", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393226", "text": "This is not the same because the previous version returned a copy of the same object. Now we are setting it to always be an OutputBuffer.\n", "created_at": "2011-06-18 12:51:32", "user": 9582, "id": 1393226}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1393500", "text": "Previous version returned not copy of object - it return only instance of class of this object without calling initialize. Thats why warning is - @dirty initializes only in initialize and initialize_copy. But i understand about different classes and make new pull request https://github.com/rails/rails/pull/1760\n", "created_at": "2011-06-18 14:42:05", "user": 29658, "id": 1393500}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "It will remove warning about not uninitialized instance variable @dirty only with replacing content of output_buffer\n", "labels": [], "number": 1760, "updated_at": "2014-06-26 08:59:58", "user": 29658, "closed_at": "2011-12-27 15:19:25", "id": 1077869, "title": "Removed warning about not initialized instance variable @dirty", "url": "https://api.github.com/repos/rails/rails/issues/1760", "created_at": "2011-06-18 14:41:12", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2340517", "text": "I don't understand this fix. Could you explain? Is there a cleaner way to ensure `@dirty` is initialized?\n", "created_at": "2011-10-09 20:43:32", "user": 199, "id": 2340517}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2341617", "text": "Nope, now i don't think so. I found your last commit for this method (https://github.com/rails/rails/commit/b3318bd937a238ad2def93cb3bfa5b572f80a8a8) and so I understand it was made to keep encoding in new OutputBuffer object. But now all data is stored in rails3 in one encoding - UTF-8 by default (automatic encoding in OutputBuffer#initialize for example), so maybe here OutputBuffer.new will be ok.\n", "created_at": "2011-10-09 22:54:57", "user": 29658, "id": 2341617}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2416309", "text": "Updated flushing buffer\n", "created_at": "2011-10-15 16:58:18", "user": 29658, "id": 2416309}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2416639", "text": "Where's the @dirty warning coming from? Is there a simpler way to suppress it rather than changing this implementation?\n", "created_at": "2011-10-15 18:09:26", "user": 199, "id": 2416639}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3280263", "text": "What's going on with this PR?? @gazay can you see if this PR still required ??\n", "created_at": "2011-12-27 09:43:55", "user": 3948, "id": 3280263}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3282133", "text": "It's ok, no warnings now.\n", "created_at": "2011-12-27 15:19:25", "user": 29658, "id": 3282133}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "I get no response body for images running with precompiled assets or without. I've tried to recreate the issue it from scratch but it works fine in a rails app with only 1 or 2 assets (the same ones that won't get served here). The precompiled images open finder ok, they just doesn't get served.\n\nFull response:\n\n```\nHTTP/1.1 200 OK \nContent-Type: image/png\nContent-Length: 0\nContent-Md5: 39228bfa8d3b5a8327d7d221cab0de6d\nCache-Control: public, max-age=31536000\nLast-Modified: Sat, 18 Jun 2011 13:54:30 GMT\nEtag: \"39228bfa8d3b5a8327d7d221cab0de6d\"\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Sendfile: /Users/steve/projects/railsapp/app/assets/images/subnav1-bg.png\nX-Runtime: 0.001175\nDate: Sat, 18 Jun 2011 16:10:16 GMT\nX-Content-Digest: da39a3ee5e6b4b0d3255bfef95601890afd80709\nAge: 702\nX-Rack-Cache: fresh\nServer: WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nConnection: close\n\n\n```\n\nRunning with the latest rails and sprockets produces the same results:\n\n``` ruby\ngem 'rails', :git => \"https://github.com/rails/rails.git\", :branch => \"3-1-stable\"\ngem 'sprockets', :git => \"https://github.com/sstephenson/sprockets.git\"\n```\n\nAny ideas what could be causing this?\n", "labels": [], "number": 1761, "updated_at": "2011-07-09 00:41:36", "user": 62331, "closed_at": "2011-06-19 11:09:11", "id": 1078202, "title": "Image assets not served in production mode", "url": "https://api.github.com/repos/rails/rails/issues/1761", "created_at": "2011-06-18 16:50:44", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394216", "text": "The response from a fresh rails app in production mode differs in that it doesn't have the sendfile header.\n\n```\nHTTP/1.1 200 OK \nContent-Type: image/png\nContent-Length: 6646\nContent-Md5: 9c0a079bdd7701d7e729bd956823d153\nCache-Control: public, must-revalidate\nLast-Modified: Sat, 18 Jun 2011 16:10:53 GMT\nEtag: \"9c0a079bdd7701d7e729bd956823d153\"\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Runtime: 0.014684\nDate: Sat, 18 Jun 2011 18:45:02 GMT\nX-Content-Digest: 501d6b0108b930264e19f37cb8ee6c8222d4f30d\nAge: 0\nX-Rack-Cache: miss, store\nServer: WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nConnection: close\n\nPNG\n\n...png data\n```\n\nOn my production server with nginx/passenger and the sendfile header it still doesn't return the content.\n\n```\nHTTP/1.1 200 OK\nContent-Type: image/png\nConnection: close\nStatus: 200\nX-Powered-By: Phusion Passenger (mod_rails/mod_rack) 3.0.7\nContent-Length: 0\nContent-Md5: 27a9df45d0dbd65832db54155874afdb\nCache-Control: no-cache\nLast-Modified: Sat, 18 Jun 2011 14:42:52 GMT\nEtag: \"27a9df45d0dbd65832db54155874afdb\"\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Sendfile: /home/rails/railsapp/app/assets/images/icons/flickr.png\nX-Runtime: 0.036605\nX-Content-Digest: da39a3ee5e6b4b0d3255bfef95601890afd80709\nDate: Sat, 18 Jun 2011 18:48:38 GMT\nAge: 0\nX-Rack-Cache: stale, valid, store\nServer: nginx/1.0.0 + Phusion Passenger 3.0.7 (mod_rails/mod_rack)\n```\n", "created_at": "2011-06-18 18:50:34", "user": 62331, "id": 1394216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394378", "text": "This only happens when the active record railtie has been commented out (I'm using mongoid) and the tmp dir has been deleted to sweep Rack::Cache's cache.\n\nSteps to reproduce:\n- rails new asset-pipeline-issue -JT\n- cd asset-pipeline-issue\n- rails s -e production\n\nAttempt to GET /assets/rails.png and it will return\n\n```\nHTTP/1.1 200 OK \nContent-Type: image/png\nContent-Length: 6646\nContent-Md5: 9c0a079bdd7701d7e729bd956823d153\nCache-Control: no-cache\nLast-Modified: Sat, 18 Jun 2011 19:40:24 GMT\nEtag: \"9c0a079bdd7701d7e729bd956823d153\"\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Runtime: 0.014243\nX-Content-Digest: 501d6b0108b930264e19f37cb8ee6c8222d4f30d\nDate: Sat, 18 Jun 2011 19:43:09 GMT\nAge: 0\nX-Rack-Cache: stale, valid, store\nServer: WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nConnection: close\n\nPNG\n\npngdata...\n```\n- Comment out `require \"active_record/railtie\"` in application.rb.\n- If you run the server again now and GET /assets/rails.png it will work as above, so delete the tmp directory.\n- rails s -e production\n\nAttempt to GET /assets/rails.png and it will return\n\n```\nHTTP/1.1 200 OK \nContent-Type: image/png\nContent-Length: 0\nContent-Md5: 9c0a079bdd7701d7e729bd956823d153\nCache-Control: public, must-revalidate\nLast-Modified: Sat, 18 Jun 2011 19:40:24 GMT\nEtag: \"9c0a079bdd7701d7e729bd956823d153\"\nX-Ua-Compatible: IE=Edge,chrome=1\nX-Sendfile: /Users/steve/projects/tmp/asset-pipeline-issue/app/assets/images/rails.png\nX-Runtime: 0.042701\nDate: Sat, 18 Jun 2011 19:46:55 GMT\nX-Content-Digest: da39a3ee5e6b4b0d3255bfef95601890afd80709\nAge: 0\nX-Rack-Cache: miss, store\nServer: WEBrick/1.3.1 (Ruby/1.9.2/2011-02-18)\nConnection: close\n```\n\nI think this is something to do with the connection middleware proxy that comes with activerecord, but that's just a guess.\n", "created_at": "2011-06-18 19:50:03", "user": 62331, "id": 1394378}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1394880", "text": "So the problem here was that in production mode, with active record, the asset pipeline would respond to paths without the cache buster (/assets/rails.png). This was because the active record proxy classes didn't respond to to_path, something which the rack sendfile middleware checks for.\n\nPrecompiled image asset work find in production, just not the ones that run through the asset pipeline (/assets/rails.png). It's probably an issue with my nginx config. `config.action_dispatch.x_sendfile_header = \"X-Accel-Redirect\"` is set in production.rb, I've tried multiple configurations for passing the mapped path along, does anyone have this working with the asset pipeline? I don't see how the mapping would work given that there's not one fixed place where the file could be - `proxy_set_header   X-Accel-Mapping     /var/www/=/files/;`\n", "created_at": "2011-06-18 22:58:55", "user": 62331, "id": 1394880}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1396063", "text": "I needed to remove the cache /tmp on the production server for images to be served. No additional nginx configuration was needed for the sendfile middleware to work.\n", "created_at": "2011-06-19 11:09:11", "user": 62331, "id": 1396063}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1536400", "text": "Hi Steve, I am trying to sort bug 1822 and bisect converges on your commit. :-)\n\n Using 3-1-stable (which requires spockets beta.10) I get 0 length image assets in development and production. Any ideas? \n", "created_at": "2011-07-09 00:41:35", "user": 30732, "id": 1536400}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "As discussed in https://github.com/lifo/docrails/commit/2fbb7504e2c2b0a95398d1ef0c97ea4a403d831d, replacing the readme links of AR/AP during rdoc generation so that they are not broken in README.rdoc on GitHub.\n", "labels": [], "number": 1762, "updated_at": "2014-07-03 05:00:06", "user": 146214, "closed_at": "2011-06-18 22:02:32", "id": 1078441, "title": "Solving the problem of links being broken in GitHub for the sake of api site", "url": "https://api.github.com/repos/rails/rails/issues/1762", "created_at": "2011-06-18 18:22:18", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Changed the default value for the `options` argument on `ActiveRecord::ConnectionAdapters::Table#column_exists?` from `nil` to an empty Hash `{}`.\n\nThat method calls through to `ActiveRecord::ConnectionAdapters::SchemaStatements#column_exists?` which expects `options` to be a Hash.\n\nWhen `options` was `nil`, an error would occur in cases where the column did exist because the called method attempted to perform a key lookup on options.\n", "labels": [], "number": 1763, "updated_at": "2014-06-26 15:42:30", "user": 7597, "closed_at": "2011-06-19 02:37:26", "id": 1078817, "title": "Fix default options argument on ActiveRecord::ConnectionAdaptors::Table#column_exists?", "url": "https://api.github.com/repos/rails/rails/issues/1763", "created_at": "2011-06-18 21:03:14", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395278", "text": "Could you please provide a pull request for 3-1-stable?\n", "created_at": "2011-06-19 02:35:00", "user": 9582, "id": 1395278}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix inconsistencies by being polite to the wrapped body. Needed for Rack::Sendfile to function properly. See issue #1761.\n\nWhen active record isn't loaded assets aren't served in production mode, when it is loaded they are... It's debatable whether this is a bug or a feature, but I think it should behave the same whether active record is loaded or not :)\n", "labels": [], "number": 1764, "updated_at": "2014-06-18 13:32:24", "user": 62331, "closed_at": "2011-06-19 02:34:50", "id": 1078913, "title": "Fix inconsistencies with serving images in production mode when ActiveRecord is loaded", "url": "https://api.github.com/repos/rails/rails/issues/1764", "created_at": "2011-06-18 21:44:33", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395267", "text": "Could you please provide a pull request for 3-1-stable?\n", "created_at": "2011-06-19 02:31:32", "user": 9582, "id": 1395267}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In an effort to make `class_attribute` a little more backward compatible with the now-removed `class_inheritable_accessor`, I've added the ability to disable the instance reader method.\n\nHere's an example case of where it's needed:\nhttps://gist.github.com/1033533\n\nTL;DR: You can't override the reader method if the module extends ActiveSupport::Concern because of the order that things get mixed-in.\n\nWe're struggling to get Carrierwave running on Rails master as we remove uses of `class_inheritable_attribute` -- if there's any way this can be merged into 3-0-stable and 3-1-stable, that would help a ton.  Thanks.\n", "labels": [], "number": 1765, "updated_at": "2014-06-18 11:49:36", "user": 4595, "closed_at": "2011-06-19 02:29:38", "id": 1079080, "title": "Add option to omit creating an instance reader method on class_attribute", "url": "https://api.github.com/repos/rails/rails/issues/1765", "created_at": "2011-06-18 22:57:07", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395216", "text": "Hold off on this for a bit -- should have tested all of Rails instead of just active_support.  Currently breaks uses in ActionController.\n", "created_at": "2011-06-19 02:01:10", "user": 4595, "id": 1395216}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395264", "text": "Could you please provide pull requests for 3-0-stable and 3-1-stable?\n", "created_at": "2011-06-19 02:29:57", "user": 9582, "id": 1395264}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395523", "text": "@josevalim Sorry for breaking the build and thanks for fixing.  I will open working pull requests for 3-0-stable and 3-1-stable.\n", "created_at": "2011-06-19 05:21:05", "user": 4595, "id": 1395523}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "In Baltimore this year I heard DHH speak of curation. Providing sqlite as the only db in the default Gemfile is like serving a first course of salad on a plate and a second course of soup on the same plate. We should provide a bowl instead.\n", "labels": [], "number": 1766, "updated_at": "2012-02-24 15:56:43", "user": 251288, "closed_at": "2012-02-21 17:26:59", "id": 1079112, "title": "Add production db group to default Gemfile", "url": "https://api.github.com/repos/rails/rails/issues/1766", "created_at": "2011-06-18 23:07:04", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395615", "text": "What do you mean by production db group?\n", "created_at": "2011-06-19 06:56:56", "user": 5004, "id": 1395615}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395871", "text": "I think that these ideas will not help most of the people. Most of the time when you want to use pg or mysql you will just remove sqlite3 and add desired db. Also if someone's starting with rails they will probably want to use sqlite3 in production. I think that we don't want to force users of sqlite3 to change anything to be able to run rails in production just to make it a bit easier for people who need to change Gemfile anyway (like add pg or mysql) :)\n", "created_at": "2011-06-19 09:36:01", "user": 5004, "id": 1395871}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/3401319", "text": "Yeah people can change Gemfile and add there desired database. In my opinion people should be using same DB across the environment.\n\nIf we add default gem as 'PG' for production. This might confuse people. \n", "created_at": "2012-01-08 10:16:48", "user": 3948, "id": 3401319}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4071070", "text": "@lorensr Can we close this issue ?\n", "created_at": "2012-02-21 08:50:38", "user": 3948, "id": 4071070}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4159198", "text": "@lorensr thanks for closing :-)\n", "created_at": "2012-02-24 15:56:43", "user": 3948, "id": 4159198}], "assignees": [], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "I updated rake:notes to search app, config, lib, public, script, test and vendor dirs.\n", "labels": [], "number": 1767, "updated_at": "2014-06-26 18:05:49", "user": 47226, "closed_at": "2011-07-07 16:03:44", "id": 1079502, "title": "Updated rake:notes to search additional directories", "url": "https://api.github.com/repos/rails/rails/issues/1767", "created_at": "2011-06-19 03:22:52", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395600", "text": "Isn't looking in public useless unless you also include extensions that go in there?\n", "created_at": "2011-06-19 06:44:04", "user": 146214, "id": 1395600}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1395620", "text": "Searching in vendor will very likely result in noise from 3rd party libraries.\n", "created_at": "2011-06-19 06:58:48", "user": 5004, "id": 1395620}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1399952", "text": "@vijaydev - Agreed. I'll add support for additional extensions and re-add public/ in a future pull request.\n\n@drogus - Fine point. I've removed vendor/ from the list.\n\nThanks for taking the time to look at the request.\n", "created_at": "2011-06-20 01:08:34", "user": 47226, "id": 1399952}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1514338", "text": "Can you squash your commits in just one?, thanks.\n", "created_at": "2011-07-06 19:03:28", "user": 52642, "id": 1514338}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1519545", "text": "Should be squashed into a single commit now.\n", "created_at": "2011-07-07 01:51:28", "user": 47226, "id": 1519545}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Fix inconsistencies by being polite to the wrapped body. Needed for Rack::Sendfile to function properly. See issue #1761 and pull request 1764.\n\n@josevalim this is a cherry picked commit from the one in master, is that OK? It's the only way I could get this into 3-1-stable without bringing hundreds of other commits along with it.\n", "labels": [], "number": 1768, "updated_at": "2014-07-03 05:00:24", "user": 62331, "closed_at": "2011-06-19 11:50:21", "id": 1079596, "title": "3 1 stable", "url": "https://api.github.com/repos/rails/rails/issues/1768", "created_at": "2011-06-19 05:11:08", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1396260", "text": "It is perfect.\n", "created_at": "2011-06-19 11:50:16", "user": 9582, "id": 1396260}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {"+1": [6273826, 24223048, 117184]}, "text": "In my routes I have\n\n``` ruby\nresource :company\n```\n\nand in my views\n\n``` erb\n<% form_for(@store) do |f| %>\n    …\n<% end %>\n```\n\nWhen \n\nnew action gets an error when rendering\n\n`undefined method `hash_for_companies_path' for #<Module:0x00000102bfd3f0>`\n\nThe stack trace reviels that the problem occurs in\n\n`lib/action_dispatch/routing/polymorphic_routes.rb:133:in `polymorphic_url'`\n\nedit action can render without errors but the forms url is `/company.4` where 4 is the id of the company.\n\nThis seems to be a bug that has been around for a very long time so I think it's time to fix it.\n", "labels": ["actionview"], "number": 1769, "updated_at": "2017-10-20 16:51:01", "user": 847898, "closed_at": "2016-02-11 18:03:05", "id": 1079942, "title": "link_to / form_for doesn't work for singular resource", "url": "https://api.github.com/repos/rails/rails/issues/1769", "created_at": "2011-06-19 09:32:54", "comments": [{"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1396119", "text": "You're right the error has been around for a long while however a clean solution doesn't readily represent itself. The polymorphic_url helper has no 'intelligence' in how it operates - it has no information about what you've declared as resources in your routes.rb. All it has to go on it the name of the model and how that maps to the named url helpers.\n\nIn your case when passing a new Company instance it tries to map to the plural path as that's the standard route for the create action. The question is how to determine a singular resource from a regular resource - suggestions are welcome. The best solution I can think of is to try a respond_to? first and if it doesn't then try the singular option - I'll take a look at it.\n", "created_at": "2011-06-19 11:27:04", "user": 6321, "id": 1396119}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1594452", "text": "Ah, didn't know there's already a ticket for htis. So here's my post from the mailing list: \n\nWhat about making the polymorphic routing in rails to try a plural route first. If it fails, try a singleton route. If it fails, raise.\n\nThis is not the nicest and most performant way (the result could be cached in production so it doesn't really matter in the end) but I guess it should solve most cases. Or is this too much magic?\n", "created_at": "2011-07-18 11:22:28", "user": 175494, "id": 1594452}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1859789", "text": "I am wondering why this ticket pointed to 3.2 milestone?\n", "created_at": "2011-08-20 15:12:56", "user": 5239, "id": 1859789}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1861201", "text": "Because it’s not a blocker for the 3.1 release and it may require too many changes to go into a patch release.\n", "created_at": "2011-08-20 21:56:32", "user": 6321, "id": 1861201}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4409877", "text": "i think this bug should be written in rails guides somewhere.\n\nfor anyone using a singular resource, they will eventually find themselves on this bug page.  better to announce first\n", "created_at": "2012-03-09 04:47:31", "user": 439111, "id": 4409877}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4504537", "text": "Still occurring.\n", "created_at": "2012-03-14 18:25:17", "user": 252162, "id": 4504537}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/4539190", "text": "for now i just use scope =(\n", "created_at": "2012-03-16 13:00:14", "user": 439111, "id": 4539190}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5015067", "text": "Yep, my first time with the singular resource form, and I walked smack into this bug. Would be great to see a fix in an upcoming version - don't see any target milestone, so I presume it's not under active development at the moment ?\n", "created_at": "2012-04-08 12:11:24", "user": 221845, "id": 5015067}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5132331", "text": "Yep, here too, my first time with singular resource, lost 3h coz i was blaming myself like a first\n", "created_at": "2012-04-14 16:06:01", "user": 660833, "id": 5132331}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5490360", "text": "+1\n", "created_at": "2012-05-03 15:31:23", "user": 216339, "id": 5490360}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5503419", "text": "I believe respond_with has the same problem.\n", "created_at": "2012-05-04 03:03:36", "user": 21774, "id": 5503419}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5506213", "text": "@felipero yes it will - as will anything where you can pass a model instance and get a url.\n\nI haven't forgotten about this issue, it's just trickier than it seems to fix. The problem is there is no easy way to discern whether a model maps to a singular or a regular resource url. Checking for the presence of a collection url doesn't work as the resource may have been specified with `:except => :index` and trying to rescue route generation errors doesn't work because passing an instance to a singular resource url helper will generate a url with the format set to the id and no exception.\n\nThe only apparent way I can think of doing it is by creating a data structure that keeps a track of whether a set of routes is a singular resource and then querying that data structure in `polymorphic_url`. However before I or someone else can go ahead with that there needs to be a discussion whether we want the overhead of that structure.\n", "created_at": "2012-05-04 08:22:30", "user": 6321, "id": 5506213}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5510806", "text": "Well, it is a non-blocking issue. Thanks for you prompt answer. :)\n", "created_at": "2012-05-04 13:50:59", "user": 21774, "id": 5510806}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6369764", "text": "I think someone ought to patch this. My thinking would not be along the lines of trying routes to fail (and fall back on the plural as in the comments in the rails issue) but go after association reflections. \n\nCan we make the assumption that behind every nested resource form there is an activerecord association? No but we can test it\n\nfor `form_for [a, b]` (of classes A, B) if there is a model class A with has_many assoc to B, we can safely assume, expect that routes are set up to support a plural (\"a_bs_path\") for create. If there is a has_one we can safely assume, expect that routes are set up to support a singular (\"a_bs_path\"). If we find none, we fall back to the plural as the status quo educated guess. My 2 cents. Is this against modularity and decoupling MVC?\n", "created_at": "2012-06-16 00:57:51", "user": 769725, "id": 6369764}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6371194", "text": "@zelig firstly, I think anything like that is tying your models to your routes too much. Secondly, what about non-AR models, and finally it doesn't fix the problem for top-level singular resources, e.g;\n\n``` ruby\nclass Basket < ActiveRecord::Base\nend\n\nresource :basket\n```\n\nThere's nothing in the model that's going to help with that - the only way it to store the fact that it's a singular resource and query that when generating the url. Adding metadata to the model won't help as a model may sometimes be a singular resource (/account) or a multiple resource (/admin/users/1).\n", "created_at": "2012-06-16 06:30:01", "user": 6321, "id": 6371194}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/6372915", "text": "Surely this doesn't solve all problems but in the special case of nested AR resources, plurality can be reasonably guessed using model class associations, for others (i.e., top-level resource or non-AR models or models with implicit associations) the plural is a decent guess. This sounds to me a simple improvement but maybe the caveat is that it is not the right solution.\n\nSo where would you store resource singularity so that polyorphic_url could access this info? In case people are interested in fixing this ugly duckling.\n", "created_at": "2012-06-16 12:38:46", "user": 769725, "id": 6372915}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/7042842", "text": "Add me to the list of people who just lost a bunch of time trying to figure out the \"right\" way to work around this and thinking myself crazy before stumbling upon this obscure reference to a long-standing, known bug.\n", "created_at": "2012-07-17 17:35:01", "user": 578765, "id": 7042842}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9528805", "text": "> Add me to the list of people who just lost a bunch of time trying to figure out the \"right\" way to work around this and thinking myself crazy before stumbling upon this obscure reference to a long-standing, known bug.\n\nAnd me as well.\n", "created_at": "2012-10-17 14:17:36", "user": 10712, "id": 9528805}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9556381", "text": "To anyone stumbling upon this issue, the workaround is quite simple. Given:\n\n``` ruby\nresource :billing_info\n```\n\nYou generate the `form_for` call like this:\n\n``` ruby\n= form_for @billing_info, url: billing_info_path do |f|\n```\n", "created_at": "2012-10-18 08:12:42", "user": 10712, "id": 9556381}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9583773", "text": "@pjg one of the nice features of `form_for` is to generate a proper url, based on object's persistance state, i.e. autodetect a path with either `_create` or `_update` affixes. That said, i'm unsure if the solution you propose will handle both cases at the same time. Will it?\n", "created_at": "2012-10-18 22:29:26", "user": 207112, "id": 9583773}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/9591573", "text": "Yeah, it does handle both `:create` and `:update` actions.\n", "created_at": "2012-10-19 07:04:42", "user": 10712, "id": 9591573}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/10662372", "text": "It would be really nice to have this fixed, or at least to have the problem prominently documented somehow. Just spent 2hrs thinking it was an error on my end!\n", "created_at": "2012-11-23 15:21:23", "user": 101816, "id": 10662372}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11430162", "text": "Wasted 2+ hours hunting this issue down,  :( \n\nThanks @pjg for your workaround! :+1: \n", "created_at": "2012-12-17 04:22:23", "user": 1011020, "id": 11430162}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11765962", "text": "Today, I faced issue too. solved via workaround given Thanks  @pjg  :+1: \n", "created_at": "2012-12-30 16:15:05", "user": 235844, "id": 11765962}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/12287472", "text": "I agree with @mikeni that this bug should be documented in the Rails guides.\n", "created_at": "2013-01-15 20:30:08", "user": 1388118, "id": 12287472}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/15784107", "text": "Thanks @pijg for saving me an hour or three\n", "created_at": "2013-04-02 15:55:55", "user": 6967, "id": 15784107}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/16236956", "text": "+1 for this issue!\n\nAnd one more thanks @pjg \n", "created_at": "2013-04-11 14:16:02", "user": 1242200, "id": 16236956}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/17690778", "text": "Wasted 1,5 hours hunting this issue down :-1: \n", "created_at": "2013-05-09 21:23:31", "user": 1642448, "id": 17690778}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/18614656", "text": "All in All using singular resources as a newbie is a huge PITA\n", "created_at": "2013-05-29 13:04:17", "user": 2501773, "id": 18614656}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/19136740", "text": "The above documentation fix should at least hopefully prevent anyone else from running into this bug until it’s fixed.\n", "created_at": "2013-06-07 22:39:17", "user": 145600, "id": 19136740}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21582356", "text": "I love how this is still a bug lol\n", "created_at": "2013-07-25 20:30:04", "user": 654941, "id": 21582356}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21583205", "text": "@rafaelfranca, can I help you squash this?\n", "created_at": "2013-07-25 20:43:24", "user": 54260, "id": 21583205}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21583276", "text": "Of course. Pull requests are always welcome. Make sure to ping @pixeltrix if you got a fix\n", "created_at": "2013-07-25 20:44:29", "user": 47848, "id": 21583276}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21588038", "text": "@rafaelfranca got the failing test from @athal7 running on current master, but seems I'll need some help. The issue is `ActionDispatch::Routing::PolymorphicRoutes#polymorphic_path` not knowing if the route was defined as singular or not. See https://github.com/rails/rails/issues/1769#issuecomment-5506213. How to approach it?\n", "created_at": "2013-07-25 22:01:23", "user": 54260, "id": 21588038}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21588438", "text": "@tute you refactor the routing code, adding a `:model` option to `resource` and `resources` so that we can map from the model class to the route and the route needs to keep track of whether it's a singular or collection resource. That way you can directly lookup the correct route and not infer the route name from the model class.\n\nThat's how I plan to do if for Rails 4.1 :persevere:\n", "created_at": "2013-07-25 22:08:06", "user": 6321, "id": 21588438}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/21589087", "text": "I'd love a way for `PolymorphicRoutes` to check the routes of the app. That way, and I know it's obvious, from the `record` it could check if it relates to a singular ot collection resource.\n\nToo many moving parts for my new-to-rails-code brain. Would love to peek onto your machine while you work if that's fine with you, so I learn and can help in upcoming ones!\n", "created_at": "2013-07-25 22:21:02", "user": 54260, "id": 21589087}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23313824", "text": "Can't wait til this is fixed! Thanks, yet again, @pjg \n", "created_at": "2013-08-27 05:26:52", "user": 4763122, "id": 23313824}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/23357907", "text": "+1\n", "created_at": "2013-08-27 18:10:28", "user": 3157, "id": 23357907}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/25252527", "text": "I too have just encountered this issue, it'd be great if a fix can be found\n", "created_at": "2013-09-27 15:15:52", "user": 1176711, "id": 25252527}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26419686", "text": "How about having a `singular` option? What do you think?\n\n``` ruby\nform_for @resource, singular: true\n```\n\nI guess, this would then have to be passed down to `polymorphic_url`.\n", "created_at": "2013-10-16 13:59:14", "user": 205906, "id": 26419686}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26426948", "text": "@RKushnir there's already a `:url` option so that doesn't really buy us anything since the create url and update url are the same, e.g:\n\n``` ruby\nform_for @resource, url: resource_url\n```\n\nI promise to fix it for 4.1 :smile:\n", "created_at": "2013-10-16 15:13:26", "user": 6321, "id": 26426948}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26450007", "text": "@pixeltrix I can't totally agree. True that it doesn't buy anything in terms that we still have to pass an option, yet there's some profit in it. It's easier to type and abstract the `singular` option(or even make a helper `singular_form_for`) to use in all cases, instead of providing specific `url` option for each case individually.\n\nDo you already have any ideas on how you would fix it?\nAn easier way would be to allow users to override some method in the model(i.e. `model_name.route_key`) to specify a singular form, but it's a view+routes issue and involving the model would be highly undesirable.\nAnother option would be to make `polymorphic_url` dependent on the router, so it has enough information about the resource, but seems like it would add much logic into `polymorphic_url`.\n", "created_at": "2013-10-16 19:33:02", "user": 205906, "id": 26450007}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26450800", "text": "@RKushnir: I’m with @pixeltrix that adding a `singular` option doesn’t really gain you anything when you can already use the `url` option to work around the problem. Adding an additional special-purpose option when there’s already a workaround is just cruft as opposed to fixing the underlying behavior.\n", "created_at": "2013-10-16 19:42:45", "user": 145600, "id": 26450800}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26451909", "text": "@codyrobbins Yeah, agree it's a cruft. But in a situation when workaround has become the standard because the bug stays unresolved for years, the hope is almost gone :frowning:  I doubt if there's a clean way for \n\n> fixing the underlying behavior\n\nLeaving the `form_for` options aside, if we had a concrete idea on how it should be done, it would increase the chance that someone makes a so long-awaited pull request. So, ideas?\n", "created_at": "2013-10-16 19:56:42", "user": 205906, "id": 26451909}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26461974", "text": "@RKushnir you fix it in the router by linking the model class directly to the route rather than guessing the url helper name based on the model class, e.g.\n\n``` ruby\n# default :model option of Post\nresources :posts\n\n# default :model option of Basket - router knows that it's a singular resource route\nresource :basket\n\n# custom :model option - form_for @user uses singular resource route account_url\nresource :account, model: 'User'\n```\n\nThis needs significant refactoring of Journey, Mapper, RouteSet, etc. classes - I'm not expecting a PR to appear like magic so I'll be doing it myself. I had hoped to get it done for 4.0 but illness restricted the amount of time I had available.\n\nThere are some kinks to work out like what happens when a resource is used in a singular and normal context (e.g. /account for current user and /users/1 for user pages). Also there's the issue of how to handle namespaces routes like `admin` - currently you use an array like `[:admin, @user]` so I'd like to be able to continue using that.\n", "created_at": "2013-10-16 21:51:22", "user": 6321, "id": 26461974}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/26465510", "text": "> what happens when a resource is used in a singular and normal context\n\nThat's one of the reasons why you shouldn't let the model mess with this.\n", "created_at": "2013-10-16 22:42:37", "user": 205906, "id": 26465510}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41025758", "text": "In case anybody is looking for a workaround:\n\n```\nclass Company < ActiveRecord::Base\n  model_name.instance_variable_set(:@route_key, 'company')\nend\n```\n\nhttp://stackoverflow.com/a/16229154/1149074\n", "created_at": "2014-04-22 10:44:34", "user": 188928, "id": 41025758}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/41035565", "text": "@shockone that only works if your model is accessed via the singular resource url only - if you have a resource that's accessed via both then you'll break the other one.\n", "created_at": "2014-04-22 12:54:21", "user": 6321, "id": 41035565}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44939670", "text": "I've spent my last two weeks trying to deal with this issue with any suggestion I found on the internet. I still have my question here: http://stackoverflow.com/questions/23994887/rails-one-to-one-relationship-and-form-for-sending-format-instead-of-id-and-par/23994996#23994996. I'm writing here today not only because I'm desperate to find a cure to this rails issue (the workarounds I found didn't work) or a git example with a working app using singular resource and form_for. But also to underline this problem with a nested singular resource like resources :users do resource :profile end. I just hope that the solution you'll find will handle this case too.\n", "created_at": "2014-06-03 08:54:21", "user": 7778494, "id": 44939670}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/44960191", "text": "@Frankky I have responded to your problem in stackoverflow.\n", "created_at": "2014-06-03 12:53:27", "user": 1388118, "id": 44960191}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/46965986", "text": "I'd just like to add that the solution offered in https://github.com/rails/rails/issues/1769#issuecomment-9556381 isn't viable when dealing with a polymorphic nested singular resource since you need to use polymorphic_path directly in the url option as the parent resource can be one of many. The solution offered in https://github.com/rails/rails/issues/1769#issuecomment-41025758 worked well and meant I didn't even need to use the url option. But as has already been mentioned, this means you end up polluting your model class with a hack to make your views work and will break if your model is used by a collection route as well.\n", "created_at": "2014-06-24 12:46:35", "user": 18456, "id": 46965986}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/53736843", "text": "How about this approach: when route is defined (`resource :account`) lookup the corresponding model class (`Account`). If there is one mark it as singular (maybe for given prefixes? model may have different resources like `namespace :admin do resources accounts; end; subdomain account_name do resource account end`), if there is no, then this problem is very unlikely (only if it's crafted at runtime, or something like that).\n", "created_at": "2014-08-28 15:27:54", "user": 9119, "id": 53736843}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/54126987", "text": "Not sure if it can help to fix the overall problem but I helped myself the following way, since https://github.com/rails/rails/issues/1769#issuecomment-9556381 did not work properly for my new action\n\n``` ruby\nform_for(@equipment, :url=> {:action=> (@equipment.new_record? ? 'create' : 'update')}) do |f|\n```\n\nEDIT: slightly modified to make it work also when validation errors come up.\n", "created_at": "2014-09-02 09:19:25", "user": 3499137, "id": 54126987}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/60120850", "text": "Is there any workaround of this bug for the method `respond_with`? :sob:\n", "created_at": "2014-10-22 17:17:43", "user": 4435445, "id": 60120850}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/60136492", "text": "@simnalamburt Try `respond_with @thing, location: your_singular_thing_url(@thing)`.\n", "created_at": "2014-10-22 18:58:09", "user": 205906, "id": 60136492}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/75226758", "text": "@pixeltrix, How about trying the plural route first. Then catching the undefined method error in polymorphic_url and trying the singular route?\nThat would not solve the problem when both methods are defined. But I think it would be easy to document and understand. If one has both a resource and resources defined for the same model they will have to state which one they want anyway (using the url option for example).\n", "created_at": "2015-02-20 11:51:06", "user": 102902, "id": 75226758}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/99305287", "text": "The workaroud I use is to add `as:` to change the path helper for singular resource, like\n`resource company, as: :companies`\n", "created_at": "2015-05-06 03:21:55", "user": 6373811, "id": 99305287}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/123287200", "text": "Why a bug like this isn't fixed yet?\n", "created_at": "2015-07-21 12:17:23", "user": 5446019, "id": 123287200}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/128926588", "text": "@philipgiuliani I'm sure you'll discover, judging by the comments above, there isn't any easy way to do this without polluting other classes within Rails for this behaviour. \n\nThe workaround is quite simple and to be honest, I don't see a problem. Throw it in the docs and just be done with it. Adding `url:` to the form declaration isn't so hard work for singular routes.\n\n😴\n", "created_at": "2015-08-08 07:32:54", "user": 950181, "id": 128926588}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/166952741", "text": "This issue has been automatically marked as stale because it has not been commented on for at least\nthree months.\n\nThe resources of the Rails team are limited, and so we are asking for your help.\n\nIf you can still reproduce this error on the `4-2-stable`, `4-1-stable` branches or on `master`,\nplease reply with all of the information you have about it in order to keep the issue open.\n\nThank you for all your contributions.\n", "created_at": "2015-12-23 17:38:37", "user": 7468109, "id": 166952741}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/182981345", "text": "See https://github.com/rails/rails/pull/17066#issuecomment-57363051\n", "created_at": "2016-02-11 18:03:05", "user": 47848, "id": 182981345}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/183008504", "text": "@rafaelfranca Care to explain why you closed this issue? The comment you referenced says it is still open \"because it's a difficult problem to solve\". Has it finally been fixed?\n", "created_at": "2016-02-11 18:52:33", "user": 560664, "id": 183008504}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/183010224", "text": "Oops! Looks like I linked to the wrong comment. I could not find the comment that I explained that it is fine to use the `:url` option and that this problem is not something that we need to fix.\n\nhttps://github.com/rails/rails/pull/23138 may fix this issue introducing a new API.\n", "created_at": "2016-02-11 18:58:37", "user": 47848, "id": 183010224}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/219230761", "text": "Why it is closed? #23138 is not merged and it is explicitly documented as existing bug in http://guides.rubyonrails.org/v4.1/routing.html\n", "created_at": "2016-05-14 16:51:49", "user": 899988, "id": 219230761}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/219944477", "text": "@matkoniecz - it's documented as you said including a workaround with the url param. And there is a bug that may fix this in the longer run. I think that is why it's closed. #23138 will track the progress on the fix now.\n", "created_at": "2016-05-18 07:12:11", "user": 102902, "id": 219944477}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/301643924", "text": "For anyone landing here via google, this is what got implemented: http://edgeguides.rubyonrails.org/routing.html#singular-resources\r\n\r\nIn short, add something like `resolve('User') { [:user] }` after you define the singular resource in routes.rb, where 'User' is the class name and :user is the resource name.", "created_at": "2017-05-16 00:48:43", "user": 329533, "id": 301643924}, {"reactions": {"+1": [6273826, 24223048, 117184]}, "url": "https://api.github.com/repos/rails/rails/issues/comments/338261863", "text": "Couldn't this be fixed in the latest rails implementation by changing the behavior of `form_with`?", "created_at": "2017-10-20 16:51:01", "user": 64581, "id": 338261863}], "assignees": [6321, 6321], "state": "closed", "is-pull-request": false}
{"reactions": {}, "text": "Removing require_relative gem. Linecache new version 0.46 is out and it's loading rbx-require-relative > 0.0.4\n", "labels": [], "number": 1770, "updated_at": "2014-07-03 05:00:32", "user": 3948, "closed_at": "2011-06-19 11:51:43", "id": 1079949, "title": "Removing require_relative gem. Linecache new version 0.46 is out and it's", "url": "https://api.github.com/repos/rails/rails/issues/1770", "created_at": "2011-06-19 09:37:59", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removing require_relative gem. Linecache new version 0.46 is out and it's loading rbx-require-relative > 0.0.4\n", "labels": [], "number": 1771, "updated_at": "2014-07-03 05:00:34", "user": 3948, "closed_at": "2011-06-19 11:52:44", "id": 1079954, "title": "Require rel remove from 3-1-stable ", "url": "https://api.github.com/repos/rails/rails/issues/1771", "created_at": "2011-06-19 09:40:55", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Removing require_relative gem. Linecache new version 0.46 is out and it's loading rbx-require-relative > 0.0.4\n", "labels": [], "number": 1772, "updated_at": "2014-06-26 09:00:03", "user": 3948, "closed_at": "2011-06-19 11:52:56", "id": 1079956, "title": "Require rel remove 3 0 stable", "url": "https://api.github.com/repos/rails/rails/issues/1772", "created_at": "2011-06-19 09:42:49", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Applies cleanly and passes all tests :)\n\nThanks!\n", "labels": [], "number": 1773, "updated_at": "2014-07-03 05:00:39", "user": 4595, "closed_at": "2011-06-19 16:09:04", "id": 1081040, "title": "Instance reader method on class_attribute - 3-1-stable", "url": "https://api.github.com/repos/rails/rails/issues/1773", "created_at": "2011-06-19 15:37:39", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Hi, guys!\nWhat do you think about adding special syntax for generating migration for changing columns in tables?\nBy analogy with add new column:\n\n```\nrails g migration change_some_field_in_posts some_field:string\n```\n\nwill generate:\n\n``` ruby\nclass ChangeSomeFieldInPosts < ActiveRecord::Migration\n  def up\n    change_column :posts, :some_field, :string\n  end\n\n  def down\n    change_column :posts, :some_field, 'previous_field_type'\n  end\nend\n```\n\nAnd if you like this idea - what you can suggest about 'previous_field_type' part? I don't like this solution..\n", "labels": [], "number": 1774, "updated_at": "2014-07-03 05:00:43", "user": 29658, "closed_at": "2011-10-09 21:19:51", "id": 1081265, "title": "Added generation for change_field migration", "url": "https://api.github.com/repos/rails/rails/issues/1774", "created_at": "2011-06-19 17:20:34", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1401047", "text": "You should write tests with it.\n", "created_at": "2011-06-20 07:32:29", "user": 9347, "id": 1401047}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544110", "text": "Yeah, I don't like the `previous_field_type` either. Someone will surely run that migration after they runs the generator, without realizing that the `down` is not working.\n", "created_at": "2011-07-11 03:07:20", "user": 4912, "id": 1544110}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1705370", "text": "'previous_field_type' is probably in db/schema.rb\n", "created_at": "2011-08-01 23:52:30", "user": 931352, "id": 1705370}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/2341207", "text": "Cool change, but `change_title_in_posts` is too generic for a migration name. Add and remove are clear. Change can mean anything, so the migration name doesn't communicate much.\n", "created_at": "2011-10-09 21:19:51", "user": 199, "id": 2341207}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "", "labels": [], "number": 1775, "updated_at": "2014-06-18 12:01:36", "user": 4595, "closed_at": "2011-06-19 23:29:50", "id": 1081656, "title": "Instance reader method on class_attribute - 3-0-stable", "url": "https://api.github.com/repos/rails/rails/issues/1775", "created_at": "2011-06-19 20:18:48", "comments": [], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "`rake assets:clean` will now clean up any image files (*.png, *.gif, *.jpg, *.jpeg, *.ico) in addition to CSS and JS.\n", "labels": [], "number": 1776, "updated_at": "2014-07-03 05:00:50", "user": 2406, "closed_at": "2011-06-20 02:09:51", "id": 1082425, "title": "assets:clean task now cleans up images", "url": "https://api.github.com/repos/rails/rails/issues/1776", "created_at": "2011-06-20 01:11:16", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400041", "text": "Pull request updated as per https://github.com/rails/rails/pull/1355#r47903\n", "created_at": "2011-06-20 01:41:50", "user": 2406, "id": 1400041}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400835", "text": "Just noticed a slight flaw: if there are subdirectories in `public/assets/`, you get an `Operation not permitted`. Either of the following fixes it:\n\n```\nrm file unless File.directory?(file)\n```\n\nor\n\n```\nrm file, :force => true\n```\n", "created_at": "2011-06-20 06:22:32", "user": 2406, "id": 1400835}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1402894", "text": "Yeah, we need `:force` to remove the dirs too.\n", "created_at": "2011-06-20 14:15:51", "user": 137, "id": 1402894}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "Rebased version of previous pull request see:\nhttps://github.com/rails/rails/pull/269\n", "labels": ["activerecord"], "number": 1777, "updated_at": "2014-07-03 05:00:53", "user": 120708, "closed_at": "2012-09-24 15:16:19", "id": 1082459, "title": "Callback collision", "url": "https://api.github.com/repos/rails/rails/issues/1777", "created_at": "2011-06-20 01:27:38", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400018", "text": "@josevalim bro, review please :)\n", "created_at": "2011-06-20 01:30:55", "user": 4912, "id": 1400018}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1400723", "text": "@mandrews thanks for staying on top of this. Looking forward to seeing this merged before 3.1\n", "created_at": "2011-06-20 05:46:05", "user": 114033, "id": 1400723}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1418866", "text": "Thanks for the pull request but I am a bit afraid of this having collateral effects. For example, the options :only and :except used in controllers are not removed from the options hash, so we can have different behavior after applying this commit as callbacks will be no longer considered identical just by their name.\n\nThat is just example, we may have other cases.\n", "created_at": "2011-06-22 15:37:49", "user": 9582, "id": 1418866}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1418977", "text": "@josevalim in the other pull request, @mandrews mentioned this as a possibility which you liked:\n\n> @josevalim- I agree that hard coding :on is not appropriate. How about instead of white listing options that imply difference, we black list options that determine equivalence.\n\nIn this case, how would you like that to be implemented? I really want a fix for this issue to be included in the next releases so I'm willing to spend some time to make that happen in the next day or 2.\n", "created_at": "2011-06-22 15:53:45", "user": 114033, "id": 1418977}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1419002", "text": "@bgentry Yeah, I remember that. Although I could see such flaws just after looking at your pull request as I saw :per_key and remembered of :only and :except. I think our best option would be to allow :on => [:create, :update] or something similar, which I believe I also commented on the other thread. Sorry for the back and forth.\n", "created_at": "2011-06-22 15:57:32", "user": 9582, "id": 1419002}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1544114", "text": "What's the status of this bro @josevalim?\n", "created_at": "2011-07-11 03:08:40", "user": 4912, "id": 1544114}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1545434", "text": "The status is the same as in my last comment. :)\n", "created_at": "2011-07-11 10:09:46", "user": 9582, "id": 1545434}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5398449", "text": "@mandrews Is this still an issue?\n", "created_at": "2012-04-28 17:24:01", "user": 651597, "id": 5398449}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/5806365", "text": "@isaacsanders without the changes the unit test still fails on master. If the approach to fixing the issue is OK I can easily make another pull request (git pull --rebase fails).\n", "created_at": "2012-05-20 03:10:33", "user": 120708, "id": 5806365}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8477389", "text": "@josevalim any news?\n", "created_at": "2012-09-12 00:21:35", "user": 840464, "id": 8477389}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8740834", "text": "@steveklabnik Can we close it and keep it with #6936?\n", "created_at": "2012-09-20 18:32:14", "user": 840464, "id": 8740834}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8741490", "text": "I think so, but let's wait until SOMETHING gets accepted before we get close-happy.\n", "created_at": "2012-09-20 18:52:59", "user": 27786, "id": 8741490}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8821526", "text": "I've merged https://github.com/rails/rails/pull/6936 can we close this now?\n", "created_at": "2012-09-24 14:54:57", "user": 52642, "id": 8821526}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/8822296", "text": "Seems so!\n", "created_at": "2012-09-24 15:16:19", "user": 27786, "id": 8822296}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11645062", "text": "Found this issue...\nI have a code something like\n\n```\nclass User < ActiveRecord::Base\n  ...\n  before_validation(:on => :create) {:set_current_ratio}\n  before_validation(:on => :create) {:set_free_until }\n  ...\nend\n```\n\nWhat I'm getting with `User._validation_callbacks.map(&:filter)` is `[\"_callback_before_779\", \"_callback_before_783\"]`\nWhat is this `_callback_before_783` and why I can't get a name like `set_current_ratio` of the callback?\nThanks.\n", "created_at": "2012-12-23 11:07:47", "user": 502254, "id": 11645062}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11645108", "text": "```\n  before_validation :set_current_ratio, :on => :create\n  before_validation :set_free_until, :on => :create\n```\n\ndid the magic but why this\n\n```\n  before_validation(:on => :create) {:set_current_ratio}\n  before_validation(:on => :create) {:set_free_until }\n```\n\ndoesn't work?\n", "created_at": "2012-12-23 11:13:51", "user": 502254, "id": 11645108}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11646910", "text": "@kulbida because you're passing a block in the former example - you need to call the methods directly:\n\n``` ruby\nbefore_validation(:on => :create){ set_current_ratio }\nbefore_validation(:on => :create){ set_free_until }\n```\n\nFor your own benefit in the future you'd be better off asking questions either on the Rails Talk mailing list or Stack Overflow since you're more likely to have a positive response than adding a comment to an issue that was closed three months ago.\n", "created_at": "2012-12-23 15:07:48", "user": 6321, "id": 11646910}, {"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/11647022", "text": "Thank you :)\n", "created_at": "2012-12-23 15:21:42", "user": 502254, "id": 11647022}], "assignees": [], "state": "closed", "is-pull-request": true}
{"reactions": {}, "text": "This fixes an error when a record object that is a subclass of Hash is passed to fields_for, which is incorrectly interpreted as field options.\n", "labels": [], "number": 1778, "updated_at": "2014-06-15 02:11:05", "user": 7600, "closed_at": "2011-06-22 09:33:13", "id": 1082591, "title": "Fix nested fields_for when Hash-based model is passed.", "url": "https://api.github.com/repos/rails/rails/issues/1778", "created_at": "2011-06-20 02:22:41", "comments": [{"reactions": {}, "url": "https://api.github.com/repos/rails/rails/issues/comments/1415151", "text": "I've updated the test to use a real hash-based model rather than a stubbed out one.\n", "created_at": "2011-06-22 01:27:15", "user": 7600, "id": 1415151}], "assignees": [], "state": "closed", "is-pull-request": true}
